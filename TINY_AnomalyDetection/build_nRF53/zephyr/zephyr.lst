
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20023860 	.word	0x20023860
   4:	00004149 	.word	0x00004149
   8:	0000e511 	.word	0x0000e511
   c:	00004101 	.word	0x00004101
  10:	00004101 	.word	0x00004101
  14:	00004101 	.word	0x00004101
  18:	00004101 	.word	0x00004101
  1c:	00004101 	.word	0x00004101
	...
  2c:	00003e01 	.word	0x00003e01
  30:	00004101 	.word	0x00004101
  34:	00000000 	.word	0x00000000
  38:	00003da5 	.word	0x00003da5
  3c:	0000ed81 	.word	0x0000ed81

00000040 <_irq_vector_table>:
  40:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  50:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  60:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  70:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  80:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  90:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  a0:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  b0:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  c0:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  d0:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  e0:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
  f0:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
 100:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
 110:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
 120:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
 130:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
 140:	00003e8d 00003e8d 00003e8d 00003e8d     .>...>...>...>..
 150:	00003e8d                                .>..

Disassembly of section text:

00000158 <__aeabi_drsub>:
     158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__adddf3>
     15e:	bf00      	nop

00000160 <__aeabi_dsub>:
     160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000164 <__adddf3>:
     164:	b530      	push	{r4, r5, lr}
     166:	ea4f 0441 	mov.w	r4, r1, lsl #1
     16a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     16e:	ea94 0f05 	teq	r4, r5
     172:	bf08      	it	eq
     174:	ea90 0f02 	teqeq	r0, r2
     178:	bf1f      	itttt	ne
     17a:	ea54 0c00 	orrsne.w	ip, r4, r0
     17e:	ea55 0c02 	orrsne.w	ip, r5, r2
     182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     18a:	f000 80e2 	beq.w	352 <__data_size+0xb2>
     18e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     196:	bfb8      	it	lt
     198:	426d      	neglt	r5, r5
     19a:	dd0c      	ble.n	1b6 <__adddf3+0x52>
     19c:	442c      	add	r4, r5
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	ea82 0000 	eor.w	r0, r2, r0
     1aa:	ea83 0101 	eor.w	r1, r3, r1
     1ae:	ea80 0202 	eor.w	r2, r0, r2
     1b2:	ea81 0303 	eor.w	r3, r1, r3
     1b6:	2d36      	cmp	r5, #54	; 0x36
     1b8:	bf88      	it	hi
     1ba:	bd30      	pophi	{r4, r5, pc}
     1bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1cc:	d002      	beq.n	1d4 <__adddf3+0x70>
     1ce:	4240      	negs	r0, r0
     1d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e0:	d002      	beq.n	1e8 <__adddf3+0x84>
     1e2:	4252      	negs	r2, r2
     1e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e8:	ea94 0f05 	teq	r4, r5
     1ec:	f000 80a7 	beq.w	33e <__data_size+0x9e>
     1f0:	f1a4 0401 	sub.w	r4, r4, #1
     1f4:	f1d5 0e20 	rsbs	lr, r5, #32
     1f8:	db0d      	blt.n	216 <CONFIG_SRAM_SIZE+0x16>
     1fa:	fa02 fc0e 	lsl.w	ip, r2, lr
     1fe:	fa22 f205 	lsr.w	r2, r2, r5
     202:	1880      	adds	r0, r0, r2
     204:	f141 0100 	adc.w	r1, r1, #0
     208:	fa03 f20e 	lsl.w	r2, r3, lr
     20c:	1880      	adds	r0, r0, r2
     20e:	fa43 f305 	asr.w	r3, r3, r5
     212:	4159      	adcs	r1, r3
     214:	e00e      	b.n	234 <CONFIG_SRAM_SIZE+0x34>
     216:	f1a5 0520 	sub.w	r5, r5, #32
     21a:	f10e 0e20 	add.w	lr, lr, #32
     21e:	2a01      	cmp	r2, #1
     220:	fa03 fc0e 	lsl.w	ip, r3, lr
     224:	bf28      	it	cs
     226:	f04c 0c02 	orrcs.w	ip, ip, #2
     22a:	fa43 f305 	asr.w	r3, r3, r5
     22e:	18c0      	adds	r0, r0, r3
     230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     238:	d507      	bpl.n	24a <CONFIG_SRAM_SIZE+0x4a>
     23a:	f04f 0e00 	mov.w	lr, #0
     23e:	f1dc 0c00 	rsbs	ip, ip, #0
     242:	eb7e 0000 	sbcs.w	r0, lr, r0
     246:	eb6e 0101 	sbc.w	r1, lr, r1
     24a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     24e:	d31b      	bcc.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     254:	d30c      	bcc.n	270 <CONFIG_SRAM_SIZE+0x70>
     256:	0849      	lsrs	r1, r1, #1
     258:	ea5f 0030 	movs.w	r0, r0, rrx
     25c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     260:	f104 0401 	add.w	r4, r4, #1
     264:	ea4f 5244 	mov.w	r2, r4, lsl #21
     268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     26c:	f080 809a 	bcs.w	3a4 <__data_size+0x104>
     270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     274:	bf08      	it	eq
     276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     27a:	f150 0000 	adcs.w	r0, r0, #0
     27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     282:	ea41 0105 	orr.w	r1, r1, r5
     286:	bd30      	pop	{r4, r5, pc}
     288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     28c:	4140      	adcs	r0, r0
     28e:	eb41 0101 	adc.w	r1, r1, r1
     292:	3c01      	subs	r4, #1
     294:	bf28      	it	cs
     296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     29a:	d2e9      	bcs.n	270 <CONFIG_SRAM_SIZE+0x70>
     29c:	f091 0f00 	teq	r1, #0
     2a0:	bf04      	itt	eq
     2a2:	4601      	moveq	r1, r0
     2a4:	2000      	moveq	r0, #0
     2a6:	fab1 f381 	clz	r3, r1
     2aa:	bf08      	it	eq
     2ac:	3320      	addeq	r3, #32
     2ae:	f1a3 030b 	sub.w	r3, r3, #11
     2b2:	f1b3 0220 	subs.w	r2, r3, #32
     2b6:	da0c      	bge.n	2d2 <__data_size+0x32>
     2b8:	320c      	adds	r2, #12
     2ba:	dd08      	ble.n	2ce <__data_size+0x2e>
     2bc:	f102 0c14 	add.w	ip, r2, #20
     2c0:	f1c2 020c 	rsb	r2, r2, #12
     2c4:	fa01 f00c 	lsl.w	r0, r1, ip
     2c8:	fa21 f102 	lsr.w	r1, r1, r2
     2cc:	e00c      	b.n	2e8 <__data_size+0x48>
     2ce:	f102 0214 	add.w	r2, r2, #20
     2d2:	bfd8      	it	le
     2d4:	f1c2 0c20 	rsble	ip, r2, #32
     2d8:	fa01 f102 	lsl.w	r1, r1, r2
     2dc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e0:	bfdc      	itt	le
     2e2:	ea41 010c 	orrle.w	r1, r1, ip
     2e6:	4090      	lslle	r0, r2
     2e8:	1ae4      	subs	r4, r4, r3
     2ea:	bfa2      	ittt	ge
     2ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f0:	4329      	orrge	r1, r5
     2f2:	bd30      	popge	{r4, r5, pc}
     2f4:	ea6f 0404 	mvn.w	r4, r4
     2f8:	3c1f      	subs	r4, #31
     2fa:	da1c      	bge.n	336 <__data_size+0x96>
     2fc:	340c      	adds	r4, #12
     2fe:	dc0e      	bgt.n	31e <__data_size+0x7e>
     300:	f104 0414 	add.w	r4, r4, #20
     304:	f1c4 0220 	rsb	r2, r4, #32
     308:	fa20 f004 	lsr.w	r0, r0, r4
     30c:	fa01 f302 	lsl.w	r3, r1, r2
     310:	ea40 0003 	orr.w	r0, r0, r3
     314:	fa21 f304 	lsr.w	r3, r1, r4
     318:	ea45 0103 	orr.w	r1, r5, r3
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	f1c4 040c 	rsb	r4, r4, #12
     322:	f1c4 0220 	rsb	r2, r4, #32
     326:	fa20 f002 	lsr.w	r0, r0, r2
     32a:	fa01 f304 	lsl.w	r3, r1, r4
     32e:	ea40 0003 	orr.w	r0, r0, r3
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	fa21 f004 	lsr.w	r0, r1, r4
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	f094 0f00 	teq	r4, #0
     342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     346:	bf06      	itte	eq
     348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     34c:	3401      	addeq	r4, #1
     34e:	3d01      	subne	r5, #1
     350:	e74e      	b.n	1f0 <__adddf3+0x8c>
     352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     356:	bf18      	it	ne
     358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     35c:	d029      	beq.n	3b2 <__data_size+0x112>
     35e:	ea94 0f05 	teq	r4, r5
     362:	bf08      	it	eq
     364:	ea90 0f02 	teqeq	r0, r2
     368:	d005      	beq.n	376 <__data_size+0xd6>
     36a:	ea54 0c00 	orrs.w	ip, r4, r0
     36e:	bf04      	itt	eq
     370:	4619      	moveq	r1, r3
     372:	4610      	moveq	r0, r2
     374:	bd30      	pop	{r4, r5, pc}
     376:	ea91 0f03 	teq	r1, r3
     37a:	bf1e      	ittt	ne
     37c:	2100      	movne	r1, #0
     37e:	2000      	movne	r0, #0
     380:	bd30      	popne	{r4, r5, pc}
     382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     386:	d105      	bne.n	394 <__data_size+0xf4>
     388:	0040      	lsls	r0, r0, #1
     38a:	4149      	adcs	r1, r1
     38c:	bf28      	it	cs
     38e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     392:	bd30      	pop	{r4, r5, pc}
     394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     398:	bf3c      	itt	cc
     39a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     39e:	bd30      	popcc	{r4, r5, pc}
     3a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ac:	f04f 0000 	mov.w	r0, #0
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3b6:	bf1a      	itte	ne
     3b8:	4619      	movne	r1, r3
     3ba:	4610      	movne	r0, r2
     3bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c0:	bf1c      	itt	ne
     3c2:	460b      	movne	r3, r1
     3c4:	4602      	movne	r2, r0
     3c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ca:	bf06      	itte	eq
     3cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d0:	ea91 0f03 	teqeq	r1, r3
     3d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	bf00      	nop

000003dc <__aeabi_ui2d>:
     3dc:	f090 0f00 	teq	r0, #0
     3e0:	bf04      	itt	eq
     3e2:	2100      	moveq	r1, #0
     3e4:	4770      	bxeq	lr
     3e6:	b530      	push	{r4, r5, lr}
     3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f0:	f04f 0500 	mov.w	r5, #0
     3f4:	f04f 0100 	mov.w	r1, #0
     3f8:	e750      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     3fa:	bf00      	nop

000003fc <__aeabi_i2d>:
     3fc:	f090 0f00 	teq	r0, #0
     400:	bf04      	itt	eq
     402:	2100      	moveq	r1, #0
     404:	4770      	bxeq	lr
     406:	b530      	push	{r4, r5, lr}
     408:	f44f 6480 	mov.w	r4, #1024	; 0x400
     40c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     414:	bf48      	it	mi
     416:	4240      	negmi	r0, r0
     418:	f04f 0100 	mov.w	r1, #0
     41c:	e73e      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     41e:	bf00      	nop

00000420 <__aeabi_f2d>:
     420:	0042      	lsls	r2, r0, #1
     422:	ea4f 01e2 	mov.w	r1, r2, asr #3
     426:	ea4f 0131 	mov.w	r1, r1, rrx
     42a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     42e:	bf1f      	itttt	ne
     430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     43c:	4770      	bxne	lr
     43e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     442:	bf08      	it	eq
     444:	4770      	bxeq	lr
     446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     44a:	bf04      	itt	eq
     44c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     450:	4770      	bxeq	lr
     452:	b530      	push	{r4, r5, lr}
     454:	f44f 7460 	mov.w	r4, #896	; 0x380
     458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     45c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     460:	e71c      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     462:	bf00      	nop

00000464 <__aeabi_ul2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f04f 0500 	mov.w	r5, #0
     472:	e00a      	b.n	48a <__aeabi_l2d+0x16>

00000474 <__aeabi_l2d>:
     474:	ea50 0201 	orrs.w	r2, r0, r1
     478:	bf08      	it	eq
     47a:	4770      	bxeq	lr
     47c:	b530      	push	{r4, r5, lr}
     47e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     482:	d502      	bpl.n	48a <__aeabi_l2d+0x16>
     484:	4240      	negs	r0, r0
     486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     48a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     48e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     496:	f43f aed8 	beq.w	24a <CONFIG_SRAM_SIZE+0x4a>
     49a:	f04f 0203 	mov.w	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4b2:	f1c2 0320 	rsb	r3, r2, #32
     4b6:	fa00 fc03 	lsl.w	ip, r0, r3
     4ba:	fa20 f002 	lsr.w	r0, r0, r2
     4be:	fa01 fe03 	lsl.w	lr, r1, r3
     4c2:	ea40 000e 	orr.w	r0, r0, lr
     4c6:	fa21 f102 	lsr.w	r1, r1, r2
     4ca:	4414      	add	r4, r2
     4cc:	e6bd      	b.n	24a <CONFIG_SRAM_SIZE+0x4a>
     4ce:	bf00      	nop

000004d0 <__aeabi_dmul>:
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4de:	bf1d      	ittte	ne
     4e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4e4:	ea94 0f0c 	teqne	r4, ip
     4e8:	ea95 0f0c 	teqne	r5, ip
     4ec:	f000 f8de 	bleq	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     4f0:	442c      	add	r4, r5
     4f2:	ea81 0603 	eor.w	r6, r1, r3
     4f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     502:	bf18      	it	ne
     504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     510:	d038      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     512:	fba0 ce02 	umull	ip, lr, r0, r2
     516:	f04f 0500 	mov.w	r5, #0
     51a:	fbe1 e502 	umlal	lr, r5, r1, r2
     51e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     522:	fbe0 e503 	umlal	lr, r5, r0, r3
     526:	f04f 0600 	mov.w	r6, #0
     52a:	fbe1 5603 	umlal	r5, r6, r1, r3
     52e:	f09c 0f00 	teq	ip, #0
     532:	bf18      	it	ne
     534:	f04e 0e01 	orrne.w	lr, lr, #1
     538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     53c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     544:	d204      	bcs.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     54a:	416d      	adcs	r5, r5
     54c:	eb46 0606 	adc.w	r6, r6, r6
     550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     55c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     568:	bf88      	it	hi
     56a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     56e:	d81e      	bhi.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     574:	bf08      	it	eq
     576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     57a:	f150 0000 	adcs.w	r0, r0, #0
     57e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     588:	ea46 0101 	orr.w	r1, r6, r1
     58c:	ea40 0002 	orr.w	r0, r0, r2
     590:	ea81 0103 	eor.w	r1, r1, r3
     594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     598:	bfc2      	ittt	gt
     59a:	ebd4 050c 	rsbsgt	r5, r4, ip
     59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5a2:	bd70      	popgt	{r4, r5, r6, pc}
     5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a8:	f04f 0e00 	mov.w	lr, #0
     5ac:	3c01      	subs	r4, #1
     5ae:	f300 80ab 	bgt.w	708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
     5b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5b6:	bfde      	ittt	le
     5b8:	2000      	movle	r0, #0
     5ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5be:	bd70      	pople	{r4, r5, r6, pc}
     5c0:	f1c4 0400 	rsb	r4, r4, #0
     5c4:	3c20      	subs	r4, #32
     5c6:	da35      	bge.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
     5c8:	340c      	adds	r4, #12
     5ca:	dc1b      	bgt.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0520 	rsb	r5, r4, #32
     5d4:	fa00 f305 	lsl.w	r3, r0, r5
     5d8:	fa20 f004 	lsr.w	r0, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea40 0002 	orr.w	r0, r0, r2
     5e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f0:	fa21 f604 	lsr.w	r6, r1, r4
     5f4:	eb42 0106 	adc.w	r1, r2, r6
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 040c 	rsb	r4, r4, #12
     608:	f1c4 0520 	rsb	r5, r4, #32
     60c:	fa00 f304 	lsl.w	r3, r0, r4
     610:	fa20 f005 	lsr.w	r0, r0, r5
     614:	fa01 f204 	lsl.w	r2, r1, r4
     618:	ea40 0002 	orr.w	r0, r0, r2
     61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     624:	f141 0100 	adc.w	r1, r1, #0
     628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     62c:	bf08      	it	eq
     62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     632:	bd70      	pop	{r4, r5, r6, pc}
     634:	f1c4 0520 	rsb	r5, r4, #32
     638:	fa00 f205 	lsl.w	r2, r0, r5
     63c:	ea4e 0e02 	orr.w	lr, lr, r2
     640:	fa20 f304 	lsr.w	r3, r0, r4
     644:	fa01 f205 	lsl.w	r2, r1, r5
     648:	ea43 0302 	orr.w	r3, r3, r2
     64c:	fa21 f004 	lsr.w	r0, r1, r4
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	fa21 f204 	lsr.w	r2, r1, r4
     658:	ea20 0002 	bic.w	r0, r0, r2
     65c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     664:	bf08      	it	eq
     666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	f094 0f00 	teq	r4, #0
     670:	d10f      	bne.n	692 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1aa>
     672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     676:	0040      	lsls	r0, r0, #1
     678:	eb41 0101 	adc.w	r1, r1, r1
     67c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     680:	bf08      	it	eq
     682:	3c01      	subeq	r4, #1
     684:	d0f7      	beq.n	676 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18e>
     686:	ea41 0106 	orr.w	r1, r1, r6
     68a:	f095 0f00 	teq	r5, #0
     68e:	bf18      	it	ne
     690:	4770      	bxne	lr
     692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     696:	0052      	lsls	r2, r2, #1
     698:	eb43 0303 	adc.w	r3, r3, r3
     69c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a0:	bf08      	it	eq
     6a2:	3d01      	subeq	r5, #1
     6a4:	d0f7      	beq.n	696 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ae>
     6a6:	ea43 0306 	orr.w	r3, r3, r6
     6aa:	4770      	bx	lr
     6ac:	ea94 0f0c 	teq	r4, ip
     6b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6b4:	bf18      	it	ne
     6b6:	ea95 0f0c 	teqne	r5, ip
     6ba:	d00c      	beq.n	6d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ee>
     6bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c0:	bf18      	it	ne
     6c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6c6:	d1d1      	bne.n	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     6c8:	ea81 0103 	eor.w	r1, r1, r3
     6cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d0:	f04f 0000 	mov.w	r0, #0
     6d4:	bd70      	pop	{r4, r5, r6, pc}
     6d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6da:	bf06      	itte	eq
     6dc:	4610      	moveq	r0, r2
     6de:	4619      	moveq	r1, r3
     6e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6e4:	d019      	beq.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6e6:	ea94 0f0c 	teq	r4, ip
     6ea:	d102      	bne.n	6f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20a>
     6ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f0:	d113      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6f2:	ea95 0f0c 	teq	r5, ip
     6f6:	d105      	bne.n	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     6f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6fc:	bf1c      	itt	ne
     6fe:	4610      	movne	r0, r2
     700:	4619      	movne	r1, r3
     702:	d10a      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     704:	ea81 0103 	eor.w	r1, r1, r3
     708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     70c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     714:	f04f 0000 	mov.w	r0, #0
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     71e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     722:	bd70      	pop	{r4, r5, r6, pc}

00000724 <__aeabi_ddiv>:
     724:	b570      	push	{r4, r5, r6, lr}
     726:	f04f 0cff 	mov.w	ip, #255	; 0xff
     72a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     72e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     732:	bf1d      	ittte	ne
     734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     738:	ea94 0f0c 	teqne	r4, ip
     73c:	ea95 0f0c 	teqne	r5, ip
     740:	f000 f8a7 	bleq	892 <CONFIG_ISR_STACK_SIZE+0x92>
     744:	eba4 0405 	sub.w	r4, r4, r5
     748:	ea81 0e03 	eor.w	lr, r1, r3
     74c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     750:	ea4f 3101 	mov.w	r1, r1, lsl #12
     754:	f000 8088 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     758:	ea4f 3303 	mov.w	r3, r3, lsl #12
     75c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     768:	ea4f 2202 	mov.w	r2, r2, lsl #8
     76c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     774:	ea4f 2600 	mov.w	r6, r0, lsl #8
     778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     77c:	429d      	cmp	r5, r3
     77e:	bf08      	it	eq
     780:	4296      	cmpeq	r6, r2
     782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     786:	f504 7440 	add.w	r4, r4, #768	; 0x300
     78a:	d202      	bcs.n	792 <__aeabi_ddiv+0x6e>
     78c:	085b      	lsrs	r3, r3, #1
     78e:	ea4f 0232 	mov.w	r2, r2, rrx
     792:	1ab6      	subs	r6, r6, r2
     794:	eb65 0503 	sbc.w	r5, r5, r3
     798:	085b      	lsrs	r3, r3, #1
     79a:	ea4f 0232 	mov.w	r2, r2, rrx
     79e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 000c 	orrcs.w	r0, r0, ip
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d0:	085b      	lsrs	r3, r3, #1
     7d2:	ea4f 0232 	mov.w	r2, r2, rrx
     7d6:	ebb6 0e02 	subs.w	lr, r6, r2
     7da:	eb75 0e03 	sbcs.w	lr, r5, r3
     7de:	bf22      	ittt	cs
     7e0:	1ab6      	subcs	r6, r6, r2
     7e2:	4675      	movcs	r5, lr
     7e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	ea4f 0232 	mov.w	r2, r2, rrx
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     800:	ea55 0e06 	orrs.w	lr, r5, r6
     804:	d018      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     806:	ea4f 1505 	mov.w	r5, r5, lsl #4
     80a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     80e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     81a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     81e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     822:	d1c0      	bne.n	7a6 <__aeabi_ddiv+0x82>
     824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     828:	d10b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     82a:	ea41 0100 	orr.w	r1, r1, r0
     82e:	f04f 0000 	mov.w	r0, #0
     832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     836:	e7b6      	b.n	7a6 <__aeabi_ddiv+0x82>
     838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     83c:	bf04      	itt	eq
     83e:	4301      	orreq	r1, r0
     840:	2000      	moveq	r0, #0
     842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     846:	bf88      	it	hi
     848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     84c:	f63f aeaf 	bhi.w	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     850:	ebb5 0c03 	subs.w	ip, r5, r3
     854:	bf04      	itt	eq
     856:	ebb6 0c02 	subseq.w	ip, r6, r2
     85a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     85e:	f150 0000 	adcs.w	r0, r0, #0
     862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     86c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     874:	bfc2      	ittt	gt
     876:	ebd4 050c 	rsbsgt	r5, r4, ip
     87a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     87e:	bd70      	popgt	{r4, r5, r6, pc}
     880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     884:	f04f 0e00 	mov.w	lr, #0
     888:	3c01      	subs	r4, #1
     88a:	e690      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     88c:	ea45 0e06 	orr.w	lr, r5, r6
     890:	e68d      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     896:	ea94 0f0c 	teq	r4, ip
     89a:	bf08      	it	eq
     89c:	ea95 0f0c 	teqeq	r5, ip
     8a0:	f43f af3b 	beq.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8a4:	ea94 0f0c 	teq	r4, ip
     8a8:	d10a      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8ae:	f47f af34 	bne.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8b2:	ea95 0f0c 	teq	r5, ip
     8b6:	f47f af25 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	e72c      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8c0:	ea95 0f0c 	teq	r5, ip
     8c4:	d106      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ca:	f43f aefd 	beq.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8ce:	4610      	mov	r0, r2
     8d0:	4619      	mov	r1, r3
     8d2:	e722      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d8:	bf18      	it	ne
     8da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8de:	f47f aec5 	bne.w	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     8e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8e6:	f47f af0d 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8ee:	f47f aeeb 	bne.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8f2:	e712      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>

000008f4 <__gedf2>:
     8f4:	f04f 3cff 	mov.w	ip, #4294967295
     8f8:	e006      	b.n	908 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__ledf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	e002      	b.n	908 <__cmpdf2+0x4>
     902:	bf00      	nop

00000904 <__cmpdf2>:
     904:	f04f 0c01 	mov.w	ip, #1
     908:	f84d cd04 	str.w	ip, [sp, #-4]!
     90c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     918:	bf18      	it	ne
     91a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     91e:	d01b      	beq.n	958 <__cmpdf2+0x54>
     920:	b001      	add	sp, #4
     922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     926:	bf0c      	ite	eq
     928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     92c:	ea91 0f03 	teqne	r1, r3
     930:	bf02      	ittt	eq
     932:	ea90 0f02 	teqeq	r0, r2
     936:	2000      	moveq	r0, #0
     938:	4770      	bxeq	lr
     93a:	f110 0f00 	cmn.w	r0, #0
     93e:	ea91 0f03 	teq	r1, r3
     942:	bf58      	it	pl
     944:	4299      	cmppl	r1, r3
     946:	bf08      	it	eq
     948:	4290      	cmpeq	r0, r2
     94a:	bf2c      	ite	cs
     94c:	17d8      	asrcs	r0, r3, #31
     94e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     952:	f040 0001 	orr.w	r0, r0, #1
     956:	4770      	bx	lr
     958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     95c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     960:	d102      	bne.n	968 <__cmpdf2+0x64>
     962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     966:	d107      	bne.n	978 <__cmpdf2+0x74>
     968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     96c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     970:	d1d6      	bne.n	920 <__cmpdf2+0x1c>
     972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     976:	d0d3      	beq.n	920 <__cmpdf2+0x1c>
     978:	f85d 0b04 	ldr.w	r0, [sp], #4
     97c:	4770      	bx	lr
     97e:	bf00      	nop

00000980 <__aeabi_cdrcmple>:
     980:	4684      	mov	ip, r0
     982:	4610      	mov	r0, r2
     984:	4662      	mov	r2, ip
     986:	468c      	mov	ip, r1
     988:	4619      	mov	r1, r3
     98a:	4663      	mov	r3, ip
     98c:	e000      	b.n	990 <__aeabi_cdcmpeq>
     98e:	bf00      	nop

00000990 <__aeabi_cdcmpeq>:
     990:	b501      	push	{r0, lr}
     992:	f7ff ffb7 	bl	904 <__cmpdf2>
     996:	2800      	cmp	r0, #0
     998:	bf48      	it	mi
     99a:	f110 0f00 	cmnmi.w	r0, #0
     99e:	bd01      	pop	{r0, pc}

000009a0 <__aeabi_dcmpeq>:
     9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9a4:	f7ff fff4 	bl	990 <__aeabi_cdcmpeq>
     9a8:	bf0c      	ite	eq
     9aa:	2001      	moveq	r0, #1
     9ac:	2000      	movne	r0, #0
     9ae:	f85d fb08 	ldr.w	pc, [sp], #8
     9b2:	bf00      	nop

000009b4 <__aeabi_dcmplt>:
     9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b8:	f7ff ffea 	bl	990 <__aeabi_cdcmpeq>
     9bc:	bf34      	ite	cc
     9be:	2001      	movcc	r0, #1
     9c0:	2000      	movcs	r0, #0
     9c2:	f85d fb08 	ldr.w	pc, [sp], #8
     9c6:	bf00      	nop

000009c8 <__aeabi_dcmple>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff ffe0 	bl	990 <__aeabi_cdcmpeq>
     9d0:	bf94      	ite	ls
     9d2:	2001      	movls	r0, #1
     9d4:	2000      	movhi	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmpge>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffce 	bl	980 <__aeabi_cdrcmple>
     9e4:	bf94      	ite	ls
     9e6:	2001      	movls	r0, #1
     9e8:	2000      	movhi	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmpgt>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffc4 	bl	980 <__aeabi_cdrcmple>
     9f8:	bf34      	ite	cc
     9fa:	2001      	movcc	r0, #1
     9fc:	2000      	movcs	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_d2iz>:
     a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a0c:	d215      	bcs.n	a3a <__aeabi_d2iz+0x36>
     a0e:	d511      	bpl.n	a34 <__aeabi_d2iz+0x30>
     a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a18:	d912      	bls.n	a40 <__aeabi_d2iz+0x3c>
     a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a2a:	fa23 f002 	lsr.w	r0, r3, r2
     a2e:	bf18      	it	ne
     a30:	4240      	negne	r0, r0
     a32:	4770      	bx	lr
     a34:	f04f 0000 	mov.w	r0, #0
     a38:	4770      	bx	lr
     a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a3e:	d105      	bne.n	a4c <__aeabi_d2iz+0x48>
     a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a44:	bf08      	it	eq
     a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a4a:	4770      	bx	lr
     a4c:	f04f 0000 	mov.w	r0, #0
     a50:	4770      	bx	lr
     a52:	bf00      	nop

00000a54 <__aeabi_d2f>:
     a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a5c:	bf24      	itt	cs
     a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a66:	d90d      	bls.n	a84 <__aeabi_d2f+0x30>
     a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a7c:	bf08      	it	eq
     a7e:	f020 0001 	biceq.w	r0, r0, #1
     a82:	4770      	bx	lr
     a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a88:	d121      	bne.n	ace <__aeabi_d2f+0x7a>
     a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a8e:	bfbc      	itt	lt
     a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a94:	4770      	bxlt	lr
     a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a9e:	f1c2 0218 	rsb	r2, r2, #24
     aa2:	f1c2 0c20 	rsb	ip, r2, #32
     aa6:	fa10 f30c 	lsls.w	r3, r0, ip
     aaa:	fa20 f002 	lsr.w	r0, r0, r2
     aae:	bf18      	it	ne
     ab0:	f040 0001 	orrne.w	r0, r0, #1
     ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     abc:	fa03 fc0c 	lsl.w	ip, r3, ip
     ac0:	ea40 000c 	orr.w	r0, r0, ip
     ac4:	fa23 f302 	lsr.w	r3, r3, r2
     ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     acc:	e7cc      	b.n	a68 <__aeabi_d2f+0x14>
     ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
     ad2:	d107      	bne.n	ae4 <__aeabi_d2f+0x90>
     ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ad8:	bf1e      	ittt	ne
     ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ae2:	4770      	bxne	lr
     ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <__aeabi_frsub>:
     af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     af8:	e002      	b.n	b00 <__addsf3>
     afa:	bf00      	nop

00000afc <__aeabi_fsub>:
     afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b00 <__addsf3>:
     b00:	0042      	lsls	r2, r0, #1
     b02:	bf1f      	itttt	ne
     b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b08:	ea92 0f03 	teqne	r2, r3
     b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b14:	d06a      	beq.n	bec <__addsf3+0xec>
     b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b1e:	bfc1      	itttt	gt
     b20:	18d2      	addgt	r2, r2, r3
     b22:	4041      	eorgt	r1, r0
     b24:	4048      	eorgt	r0, r1
     b26:	4041      	eorgt	r1, r0
     b28:	bfb8      	it	lt
     b2a:	425b      	neglt	r3, r3
     b2c:	2b19      	cmp	r3, #25
     b2e:	bf88      	it	hi
     b30:	4770      	bxhi	lr
     b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3e:	bf18      	it	ne
     b40:	4240      	negne	r0, r0
     b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b4e:	bf18      	it	ne
     b50:	4249      	negne	r1, r1
     b52:	ea92 0f03 	teq	r2, r3
     b56:	d03f      	beq.n	bd8 <__addsf3+0xd8>
     b58:	f1a2 0201 	sub.w	r2, r2, #1
     b5c:	fa41 fc03 	asr.w	ip, r1, r3
     b60:	eb10 000c 	adds.w	r0, r0, ip
     b64:	f1c3 0320 	rsb	r3, r3, #32
     b68:	fa01 f103 	lsl.w	r1, r1, r3
     b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b70:	d502      	bpl.n	b78 <__addsf3+0x78>
     b72:	4249      	negs	r1, r1
     b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b7c:	d313      	bcc.n	ba6 <__addsf3+0xa6>
     b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b82:	d306      	bcc.n	b92 <__addsf3+0x92>
     b84:	0840      	lsrs	r0, r0, #1
     b86:	ea4f 0131 	mov.w	r1, r1, rrx
     b8a:	f102 0201 	add.w	r2, r2, #1
     b8e:	2afe      	cmp	r2, #254	; 0xfe
     b90:	d251      	bcs.n	c36 <__addsf3+0x136>
     b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b9a:	bf08      	it	eq
     b9c:	f020 0001 	biceq.w	r0, r0, #1
     ba0:	ea40 0003 	orr.w	r0, r0, r3
     ba4:	4770      	bx	lr
     ba6:	0049      	lsls	r1, r1, #1
     ba8:	eb40 0000 	adc.w	r0, r0, r0
     bac:	3a01      	subs	r2, #1
     bae:	bf28      	it	cs
     bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bb4:	d2ed      	bcs.n	b92 <__addsf3+0x92>
     bb6:	fab0 fc80 	clz	ip, r0
     bba:	f1ac 0c08 	sub.w	ip, ip, #8
     bbe:	ebb2 020c 	subs.w	r2, r2, ip
     bc2:	fa00 f00c 	lsl.w	r0, r0, ip
     bc6:	bfaa      	itet	ge
     bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bcc:	4252      	neglt	r2, r2
     bce:	4318      	orrge	r0, r3
     bd0:	bfbc      	itt	lt
     bd2:	40d0      	lsrlt	r0, r2
     bd4:	4318      	orrlt	r0, r3
     bd6:	4770      	bx	lr
     bd8:	f092 0f00 	teq	r2, #0
     bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     be0:	bf06      	itte	eq
     be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     be6:	3201      	addeq	r2, #1
     be8:	3b01      	subne	r3, #1
     bea:	e7b5      	b.n	b58 <__addsf3+0x58>
     bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bf4:	bf18      	it	ne
     bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bfa:	d021      	beq.n	c40 <__addsf3+0x140>
     bfc:	ea92 0f03 	teq	r2, r3
     c00:	d004      	beq.n	c0c <__addsf3+0x10c>
     c02:	f092 0f00 	teq	r2, #0
     c06:	bf08      	it	eq
     c08:	4608      	moveq	r0, r1
     c0a:	4770      	bx	lr
     c0c:	ea90 0f01 	teq	r0, r1
     c10:	bf1c      	itt	ne
     c12:	2000      	movne	r0, #0
     c14:	4770      	bxne	lr
     c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c1a:	d104      	bne.n	c26 <__addsf3+0x126>
     c1c:	0040      	lsls	r0, r0, #1
     c1e:	bf28      	it	cs
     c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c24:	4770      	bx	lr
     c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c2a:	bf3c      	itt	cc
     c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c30:	4770      	bxcc	lr
     c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c3e:	4770      	bx	lr
     c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c44:	bf16      	itet	ne
     c46:	4608      	movne	r0, r1
     c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c4c:	4601      	movne	r1, r0
     c4e:	0242      	lsls	r2, r0, #9
     c50:	bf06      	itte	eq
     c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c56:	ea90 0f01 	teqeq	r0, r1
     c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c5e:	4770      	bx	lr

00000c60 <__aeabi_ui2f>:
     c60:	f04f 0300 	mov.w	r3, #0
     c64:	e004      	b.n	c70 <__aeabi_i2f+0x8>
     c66:	bf00      	nop

00000c68 <__aeabi_i2f>:
     c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c6c:	bf48      	it	mi
     c6e:	4240      	negmi	r0, r0
     c70:	ea5f 0c00 	movs.w	ip, r0
     c74:	bf08      	it	eq
     c76:	4770      	bxeq	lr
     c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c7c:	4601      	mov	r1, r0
     c7e:	f04f 0000 	mov.w	r0, #0
     c82:	e01c      	b.n	cbe <__aeabi_l2f+0x2a>

00000c84 <__aeabi_ul2f>:
     c84:	ea50 0201 	orrs.w	r2, r0, r1
     c88:	bf08      	it	eq
     c8a:	4770      	bxeq	lr
     c8c:	f04f 0300 	mov.w	r3, #0
     c90:	e00a      	b.n	ca8 <__aeabi_l2f+0x14>
     c92:	bf00      	nop

00000c94 <__aeabi_l2f>:
     c94:	ea50 0201 	orrs.w	r2, r0, r1
     c98:	bf08      	it	eq
     c9a:	4770      	bxeq	lr
     c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ca0:	d502      	bpl.n	ca8 <__aeabi_l2f+0x14>
     ca2:	4240      	negs	r0, r0
     ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ca8:	ea5f 0c01 	movs.w	ip, r1
     cac:	bf02      	ittt	eq
     cae:	4684      	moveq	ip, r0
     cb0:	4601      	moveq	r1, r0
     cb2:	2000      	moveq	r0, #0
     cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     cb8:	bf08      	it	eq
     cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     cc2:	fabc f28c 	clz	r2, ip
     cc6:	3a08      	subs	r2, #8
     cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ccc:	db10      	blt.n	cf0 <__aeabi_l2f+0x5c>
     cce:	fa01 fc02 	lsl.w	ip, r1, r2
     cd2:	4463      	add	r3, ip
     cd4:	fa00 fc02 	lsl.w	ip, r0, r2
     cd8:	f1c2 0220 	rsb	r2, r2, #32
     cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ce0:	fa20 f202 	lsr.w	r2, r0, r2
     ce4:	eb43 0002 	adc.w	r0, r3, r2
     ce8:	bf08      	it	eq
     cea:	f020 0001 	biceq.w	r0, r0, #1
     cee:	4770      	bx	lr
     cf0:	f102 0220 	add.w	r2, r2, #32
     cf4:	fa01 fc02 	lsl.w	ip, r1, r2
     cf8:	f1c2 0220 	rsb	r2, r2, #32
     cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d00:	fa21 f202 	lsr.w	r2, r1, r2
     d04:	eb43 0002 	adc.w	r0, r3, r2
     d08:	bf08      	it	eq
     d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d0e:	4770      	bx	lr

00000d10 <__aeabi_fmul>:
     d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d18:	bf1e      	ittt	ne
     d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d1e:	ea92 0f0c 	teqne	r2, ip
     d22:	ea93 0f0c 	teqne	r3, ip
     d26:	d06f      	beq.n	e08 <__aeabi_fmul+0xf8>
     d28:	441a      	add	r2, r3
     d2a:	ea80 0c01 	eor.w	ip, r0, r1
     d2e:	0240      	lsls	r0, r0, #9
     d30:	bf18      	it	ne
     d32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d36:	d01e      	beq.n	d76 <__aeabi_fmul+0x66>
     d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d44:	fba0 3101 	umull	r3, r1, r0, r1
     d48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d50:	bf3e      	ittt	cc
     d52:	0049      	lslcc	r1, r1, #1
     d54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d58:	005b      	lslcc	r3, r3, #1
     d5a:	ea40 0001 	orr.w	r0, r0, r1
     d5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d62:	2afd      	cmp	r2, #253	; 0xfd
     d64:	d81d      	bhi.n	da2 <__aeabi_fmul+0x92>
     d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d6e:	bf08      	it	eq
     d70:	f020 0001 	biceq.w	r0, r0, #1
     d74:	4770      	bx	lr
     d76:	f090 0f00 	teq	r0, #0
     d7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d7e:	bf08      	it	eq
     d80:	0249      	lsleq	r1, r1, #9
     d82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d8a:	3a7f      	subs	r2, #127	; 0x7f
     d8c:	bfc2      	ittt	gt
     d8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d96:	4770      	bxgt	lr
     d98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d9c:	f04f 0300 	mov.w	r3, #0
     da0:	3a01      	subs	r2, #1
     da2:	dc5d      	bgt.n	e60 <__aeabi_fmul+0x150>
     da4:	f112 0f19 	cmn.w	r2, #25
     da8:	bfdc      	itt	le
     daa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     dae:	4770      	bxle	lr
     db0:	f1c2 0200 	rsb	r2, r2, #0
     db4:	0041      	lsls	r1, r0, #1
     db6:	fa21 f102 	lsr.w	r1, r1, r2
     dba:	f1c2 0220 	rsb	r2, r2, #32
     dbe:	fa00 fc02 	lsl.w	ip, r0, r2
     dc2:	ea5f 0031 	movs.w	r0, r1, rrx
     dc6:	f140 0000 	adc.w	r0, r0, #0
     dca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     dce:	bf08      	it	eq
     dd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dd4:	4770      	bx	lr
     dd6:	f092 0f00 	teq	r2, #0
     dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dde:	bf02      	ittt	eq
     de0:	0040      	lsleq	r0, r0, #1
     de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     de6:	3a01      	subeq	r2, #1
     de8:	d0f9      	beq.n	dde <__aeabi_fmul+0xce>
     dea:	ea40 000c 	orr.w	r0, r0, ip
     dee:	f093 0f00 	teq	r3, #0
     df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     df6:	bf02      	ittt	eq
     df8:	0049      	lsleq	r1, r1, #1
     dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     dfe:	3b01      	subeq	r3, #1
     e00:	d0f9      	beq.n	df6 <__aeabi_fmul+0xe6>
     e02:	ea41 010c 	orr.w	r1, r1, ip
     e06:	e78f      	b.n	d28 <__aeabi_fmul+0x18>
     e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e0c:	ea92 0f0c 	teq	r2, ip
     e10:	bf18      	it	ne
     e12:	ea93 0f0c 	teqne	r3, ip
     e16:	d00a      	beq.n	e2e <__aeabi_fmul+0x11e>
     e18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e1c:	bf18      	it	ne
     e1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e22:	d1d8      	bne.n	dd6 <__aeabi_fmul+0xc6>
     e24:	ea80 0001 	eor.w	r0, r0, r1
     e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e2c:	4770      	bx	lr
     e2e:	f090 0f00 	teq	r0, #0
     e32:	bf17      	itett	ne
     e34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e38:	4608      	moveq	r0, r1
     e3a:	f091 0f00 	teqne	r1, #0
     e3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e42:	d014      	beq.n	e6e <__aeabi_fmul+0x15e>
     e44:	ea92 0f0c 	teq	r2, ip
     e48:	d101      	bne.n	e4e <__aeabi_fmul+0x13e>
     e4a:	0242      	lsls	r2, r0, #9
     e4c:	d10f      	bne.n	e6e <__aeabi_fmul+0x15e>
     e4e:	ea93 0f0c 	teq	r3, ip
     e52:	d103      	bne.n	e5c <__aeabi_fmul+0x14c>
     e54:	024b      	lsls	r3, r1, #9
     e56:	bf18      	it	ne
     e58:	4608      	movne	r0, r1
     e5a:	d108      	bne.n	e6e <__aeabi_fmul+0x15e>
     e5c:	ea80 0001 	eor.w	r0, r0, r1
     e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e6c:	4770      	bx	lr
     e6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e76:	4770      	bx	lr

00000e78 <__aeabi_fdiv>:
     e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e80:	bf1e      	ittt	ne
     e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e86:	ea92 0f0c 	teqne	r2, ip
     e8a:	ea93 0f0c 	teqne	r3, ip
     e8e:	d069      	beq.n	f64 <__aeabi_fdiv+0xec>
     e90:	eba2 0203 	sub.w	r2, r2, r3
     e94:	ea80 0c01 	eor.w	ip, r0, r1
     e98:	0249      	lsls	r1, r1, #9
     e9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e9e:	d037      	beq.n	f10 <__aeabi_fdiv+0x98>
     ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ea4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ea8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     eac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     eb0:	428b      	cmp	r3, r1
     eb2:	bf38      	it	cc
     eb4:	005b      	lslcc	r3, r3, #1
     eb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     eba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ebe:	428b      	cmp	r3, r1
     ec0:	bf24      	itt	cs
     ec2:	1a5b      	subcs	r3, r3, r1
     ec4:	ea40 000c 	orrcs.w	r0, r0, ip
     ec8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     ecc:	bf24      	itt	cs
     ece:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     ed2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     ed6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     eda:	bf24      	itt	cs
     edc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     ee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ee4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ee8:	bf24      	itt	cs
     eea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     eee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     ef2:	011b      	lsls	r3, r3, #4
     ef4:	bf18      	it	ne
     ef6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     efa:	d1e0      	bne.n	ebe <__aeabi_fdiv+0x46>
     efc:	2afd      	cmp	r2, #253	; 0xfd
     efe:	f63f af50 	bhi.w	da2 <__aeabi_fmul+0x92>
     f02:	428b      	cmp	r3, r1
     f04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f08:	bf08      	it	eq
     f0a:	f020 0001 	biceq.w	r0, r0, #1
     f0e:	4770      	bx	lr
     f10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f18:	327f      	adds	r2, #127	; 0x7f
     f1a:	bfc2      	ittt	gt
     f1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f24:	4770      	bxgt	lr
     f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f2a:	f04f 0300 	mov.w	r3, #0
     f2e:	3a01      	subs	r2, #1
     f30:	e737      	b.n	da2 <__aeabi_fmul+0x92>
     f32:	f092 0f00 	teq	r2, #0
     f36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f3a:	bf02      	ittt	eq
     f3c:	0040      	lsleq	r0, r0, #1
     f3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f42:	3a01      	subeq	r2, #1
     f44:	d0f9      	beq.n	f3a <__aeabi_fdiv+0xc2>
     f46:	ea40 000c 	orr.w	r0, r0, ip
     f4a:	f093 0f00 	teq	r3, #0
     f4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f52:	bf02      	ittt	eq
     f54:	0049      	lsleq	r1, r1, #1
     f56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f5a:	3b01      	subeq	r3, #1
     f5c:	d0f9      	beq.n	f52 <__aeabi_fdiv+0xda>
     f5e:	ea41 010c 	orr.w	r1, r1, ip
     f62:	e795      	b.n	e90 <__aeabi_fdiv+0x18>
     f64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f68:	ea92 0f0c 	teq	r2, ip
     f6c:	d108      	bne.n	f80 <__aeabi_fdiv+0x108>
     f6e:	0242      	lsls	r2, r0, #9
     f70:	f47f af7d 	bne.w	e6e <__aeabi_fmul+0x15e>
     f74:	ea93 0f0c 	teq	r3, ip
     f78:	f47f af70 	bne.w	e5c <__aeabi_fmul+0x14c>
     f7c:	4608      	mov	r0, r1
     f7e:	e776      	b.n	e6e <__aeabi_fmul+0x15e>
     f80:	ea93 0f0c 	teq	r3, ip
     f84:	d104      	bne.n	f90 <__aeabi_fdiv+0x118>
     f86:	024b      	lsls	r3, r1, #9
     f88:	f43f af4c 	beq.w	e24 <__aeabi_fmul+0x114>
     f8c:	4608      	mov	r0, r1
     f8e:	e76e      	b.n	e6e <__aeabi_fmul+0x15e>
     f90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f94:	bf18      	it	ne
     f96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f9a:	d1ca      	bne.n	f32 <__aeabi_fdiv+0xba>
     f9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fa0:	f47f af5c 	bne.w	e5c <__aeabi_fmul+0x14c>
     fa4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     fa8:	f47f af3c 	bne.w	e24 <__aeabi_fmul+0x114>
     fac:	e75f      	b.n	e6e <__aeabi_fmul+0x15e>
     fae:	bf00      	nop

00000fb0 <__gesf2>:
     fb0:	f04f 3cff 	mov.w	ip, #4294967295
     fb4:	e006      	b.n	fc4 <__cmpsf2+0x4>
     fb6:	bf00      	nop

00000fb8 <__lesf2>:
     fb8:	f04f 0c01 	mov.w	ip, #1
     fbc:	e002      	b.n	fc4 <__cmpsf2+0x4>
     fbe:	bf00      	nop

00000fc0 <__cmpsf2>:
     fc0:	f04f 0c01 	mov.w	ip, #1
     fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
     fc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
     fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fd4:	bf18      	it	ne
     fd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     fda:	d011      	beq.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
     fdc:	b001      	add	sp, #4
     fde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     fe2:	bf18      	it	ne
     fe4:	ea90 0f01 	teqne	r0, r1
     fe8:	bf58      	it	pl
     fea:	ebb2 0003 	subspl.w	r0, r2, r3
     fee:	bf88      	it	hi
     ff0:	17c8      	asrhi	r0, r1, #31
     ff2:	bf38      	it	cc
     ff4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     ff8:	bf18      	it	ne
     ffa:	f040 0001 	orrne.w	r0, r0, #1
     ffe:	4770      	bx	lr
    1000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1004:	d102      	bne.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    1006:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    100a:	d105      	bne.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    100c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1010:	d1e4      	bne.n	fdc <__cmpsf2+0x1c>
    1012:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    1016:	d0e1      	beq.n	fdc <__cmpsf2+0x1c>
    1018:	f85d 0b04 	ldr.w	r0, [sp], #4
    101c:	4770      	bx	lr
    101e:	bf00      	nop

00001020 <__aeabi_cfrcmple>:
    1020:	4684      	mov	ip, r0
    1022:	4608      	mov	r0, r1
    1024:	4661      	mov	r1, ip
    1026:	e7ff      	b.n	1028 <__aeabi_cfcmpeq>

00001028 <__aeabi_cfcmpeq>:
    1028:	b50f      	push	{r0, r1, r2, r3, lr}
    102a:	f7ff ffc9 	bl	fc0 <__cmpsf2>
    102e:	2800      	cmp	r0, #0
    1030:	bf48      	it	mi
    1032:	f110 0f00 	cmnmi.w	r0, #0
    1036:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001038 <__aeabi_fcmpeq>:
    1038:	f84d ed08 	str.w	lr, [sp, #-8]!
    103c:	f7ff fff4 	bl	1028 <__aeabi_cfcmpeq>
    1040:	bf0c      	ite	eq
    1042:	2001      	moveq	r0, #1
    1044:	2000      	movne	r0, #0
    1046:	f85d fb08 	ldr.w	pc, [sp], #8
    104a:	bf00      	nop

0000104c <__aeabi_fcmplt>:
    104c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1050:	f7ff ffea 	bl	1028 <__aeabi_cfcmpeq>
    1054:	bf34      	ite	cc
    1056:	2001      	movcc	r0, #1
    1058:	2000      	movcs	r0, #0
    105a:	f85d fb08 	ldr.w	pc, [sp], #8
    105e:	bf00      	nop

00001060 <__aeabi_fcmple>:
    1060:	f84d ed08 	str.w	lr, [sp, #-8]!
    1064:	f7ff ffe0 	bl	1028 <__aeabi_cfcmpeq>
    1068:	bf94      	ite	ls
    106a:	2001      	movls	r0, #1
    106c:	2000      	movhi	r0, #0
    106e:	f85d fb08 	ldr.w	pc, [sp], #8
    1072:	bf00      	nop

00001074 <__aeabi_fcmpge>:
    1074:	f84d ed08 	str.w	lr, [sp, #-8]!
    1078:	f7ff ffd2 	bl	1020 <__aeabi_cfrcmple>
    107c:	bf94      	ite	ls
    107e:	2001      	movls	r0, #1
    1080:	2000      	movhi	r0, #0
    1082:	f85d fb08 	ldr.w	pc, [sp], #8
    1086:	bf00      	nop

00001088 <__aeabi_fcmpgt>:
    1088:	f84d ed08 	str.w	lr, [sp, #-8]!
    108c:	f7ff ffc8 	bl	1020 <__aeabi_cfrcmple>
    1090:	bf34      	ite	cc
    1092:	2001      	movcc	r0, #1
    1094:	2000      	movcs	r0, #0
    1096:	f85d fb08 	ldr.w	pc, [sp], #8
    109a:	bf00      	nop

0000109c <__aeabi_f2iz>:
    109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10a4:	d30f      	bcc.n	10c6 <__aeabi_f2iz+0x2a>
    10a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10ae:	d90d      	bls.n	10cc <__aeabi_f2iz+0x30>
    10b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    10bc:	fa23 f002 	lsr.w	r0, r3, r2
    10c0:	bf18      	it	ne
    10c2:	4240      	negne	r0, r0
    10c4:	4770      	bx	lr
    10c6:	f04f 0000 	mov.w	r0, #0
    10ca:	4770      	bx	lr
    10cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    10d0:	d101      	bne.n	10d6 <__aeabi_f2iz+0x3a>
    10d2:	0242      	lsls	r2, r0, #9
    10d4:	d105      	bne.n	10e2 <__aeabi_f2iz+0x46>
    10d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    10da:	bf08      	it	eq
    10dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10e0:	4770      	bx	lr
    10e2:	f04f 0000 	mov.w	r0, #0
    10e6:	4770      	bx	lr

000010e8 <__aeabi_uldivmod>:
    10e8:	b953      	cbnz	r3, 1100 <__aeabi_uldivmod+0x18>
    10ea:	b94a      	cbnz	r2, 1100 <__aeabi_uldivmod+0x18>
    10ec:	2900      	cmp	r1, #0
    10ee:	bf08      	it	eq
    10f0:	2800      	cmpeq	r0, #0
    10f2:	bf1c      	itt	ne
    10f4:	f04f 31ff 	movne.w	r1, #4294967295
    10f8:	f04f 30ff 	movne.w	r0, #4294967295
    10fc:	f000 b9a8 	b.w	1450 <__aeabi_idiv0>
    1100:	f1ad 0c08 	sub.w	ip, sp, #8
    1104:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1108:	f000 f83e 	bl	1188 <__udivmoddi4>
    110c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1114:	b004      	add	sp, #16
    1116:	4770      	bx	lr

00001118 <__aeabi_d2lz>:
    1118:	b538      	push	{r3, r4, r5, lr}
    111a:	4605      	mov	r5, r0
    111c:	460c      	mov	r4, r1
    111e:	2200      	movs	r2, #0
    1120:	2300      	movs	r3, #0
    1122:	4628      	mov	r0, r5
    1124:	4621      	mov	r1, r4
    1126:	f7ff fc45 	bl	9b4 <__aeabi_dcmplt>
    112a:	b928      	cbnz	r0, 1138 <__aeabi_d2lz+0x20>
    112c:	4628      	mov	r0, r5
    112e:	4621      	mov	r1, r4
    1130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1134:	f000 b80a 	b.w	114c <__aeabi_d2ulz>
    1138:	4628      	mov	r0, r5
    113a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    113e:	f000 f805 	bl	114c <__aeabi_d2ulz>
    1142:	4240      	negs	r0, r0
    1144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1148:	bd38      	pop	{r3, r4, r5, pc}
    114a:	bf00      	nop

0000114c <__aeabi_d2ulz>:
    114c:	b5d0      	push	{r4, r6, r7, lr}
    114e:	2200      	movs	r2, #0
    1150:	4b0b      	ldr	r3, [pc, #44]	; (1180 <__aeabi_d2ulz+0x34>)
    1152:	4606      	mov	r6, r0
    1154:	460f      	mov	r7, r1
    1156:	f7ff f9bb 	bl	4d0 <__aeabi_dmul>
    115a:	f000 f97b 	bl	1454 <__aeabi_d2uiz>
    115e:	4604      	mov	r4, r0
    1160:	f7ff f93c 	bl	3dc <__aeabi_ui2d>
    1164:	2200      	movs	r2, #0
    1166:	4b07      	ldr	r3, [pc, #28]	; (1184 <__aeabi_d2ulz+0x38>)
    1168:	f7ff f9b2 	bl	4d0 <__aeabi_dmul>
    116c:	4602      	mov	r2, r0
    116e:	460b      	mov	r3, r1
    1170:	4630      	mov	r0, r6
    1172:	4639      	mov	r1, r7
    1174:	f7fe fff4 	bl	160 <__aeabi_dsub>
    1178:	f000 f96c 	bl	1454 <__aeabi_d2uiz>
    117c:	4621      	mov	r1, r4
    117e:	bdd0      	pop	{r4, r6, r7, pc}
    1180:	3df00000 	.word	0x3df00000
    1184:	41f00000 	.word	0x41f00000

00001188 <__udivmoddi4>:
    1188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    118c:	9e08      	ldr	r6, [sp, #32]
    118e:	460d      	mov	r5, r1
    1190:	4604      	mov	r4, r0
    1192:	468a      	mov	sl, r1
    1194:	2b00      	cmp	r3, #0
    1196:	d17f      	bne.n	1298 <__udivmoddi4+0x110>
    1198:	428a      	cmp	r2, r1
    119a:	4617      	mov	r7, r2
    119c:	d941      	bls.n	1222 <__udivmoddi4+0x9a>
    119e:	fab2 f282 	clz	r2, r2
    11a2:	b14a      	cbz	r2, 11b8 <__udivmoddi4+0x30>
    11a4:	f1c2 0120 	rsb	r1, r2, #32
    11a8:	fa05 f302 	lsl.w	r3, r5, r2
    11ac:	4097      	lsls	r7, r2
    11ae:	4094      	lsls	r4, r2
    11b0:	fa20 f101 	lsr.w	r1, r0, r1
    11b4:	ea41 0a03 	orr.w	sl, r1, r3
    11b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
    11bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    11c0:	fa1f f987 	uxth.w	r9, r7
    11c4:	fbba fef8 	udiv	lr, sl, r8
    11c8:	fb08 a31e 	mls	r3, r8, lr, sl
    11cc:	fb0e f109 	mul.w	r1, lr, r9
    11d0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    11d4:	4299      	cmp	r1, r3
    11d6:	d906      	bls.n	11e6 <__udivmoddi4+0x5e>
    11d8:	18fb      	adds	r3, r7, r3
    11da:	d202      	bcs.n	11e2 <__udivmoddi4+0x5a>
    11dc:	4299      	cmp	r1, r3
    11de:	f200 8124 	bhi.w	142a <__udivmoddi4+0x2a2>
    11e2:	f10e 3eff 	add.w	lr, lr, #4294967295
    11e6:	1a59      	subs	r1, r3, r1
    11e8:	b2a3      	uxth	r3, r4
    11ea:	fbb1 f0f8 	udiv	r0, r1, r8
    11ee:	fb08 1110 	mls	r1, r8, r0, r1
    11f2:	fb00 f909 	mul.w	r9, r0, r9
    11f6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    11fa:	45a1      	cmp	r9, r4
    11fc:	d905      	bls.n	120a <__udivmoddi4+0x82>
    11fe:	193c      	adds	r4, r7, r4
    1200:	d202      	bcs.n	1208 <__udivmoddi4+0x80>
    1202:	45a1      	cmp	r9, r4
    1204:	f200 810e 	bhi.w	1424 <__udivmoddi4+0x29c>
    1208:	3801      	subs	r0, #1
    120a:	eba4 0409 	sub.w	r4, r4, r9
    120e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    1212:	2100      	movs	r1, #0
    1214:	b11e      	cbz	r6, 121e <__udivmoddi4+0x96>
    1216:	40d4      	lsrs	r4, r2
    1218:	2300      	movs	r3, #0
    121a:	e9c6 4300 	strd	r4, r3, [r6]
    121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1222:	b902      	cbnz	r2, 1226 <__udivmoddi4+0x9e>
    1224:	deff      	udf	#255	; 0xff
    1226:	fab2 f282 	clz	r2, r2
    122a:	2a00      	cmp	r2, #0
    122c:	d14f      	bne.n	12ce <__udivmoddi4+0x146>
    122e:	1bcb      	subs	r3, r1, r7
    1230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1234:	fa1f f887 	uxth.w	r8, r7
    1238:	2101      	movs	r1, #1
    123a:	0c25      	lsrs	r5, r4, #16
    123c:	fbb3 fcfe 	udiv	ip, r3, lr
    1240:	fb0e 301c 	mls	r0, lr, ip, r3
    1244:	462b      	mov	r3, r5
    1246:	fb08 f90c 	mul.w	r9, r8, ip
    124a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    124e:	45a9      	cmp	r9, r5
    1250:	d90a      	bls.n	1268 <__udivmoddi4+0xe0>
    1252:	197d      	adds	r5, r7, r5
    1254:	bf2c      	ite	cs
    1256:	2301      	movcs	r3, #1
    1258:	2300      	movcc	r3, #0
    125a:	45a9      	cmp	r9, r5
    125c:	d902      	bls.n	1264 <__udivmoddi4+0xdc>
    125e:	2b00      	cmp	r3, #0
    1260:	f000 80d9 	beq.w	1416 <__udivmoddi4+0x28e>
    1264:	f10c 3cff 	add.w	ip, ip, #4294967295
    1268:	eba5 0509 	sub.w	r5, r5, r9
    126c:	b2a3      	uxth	r3, r4
    126e:	fbb5 f0fe 	udiv	r0, r5, lr
    1272:	fb0e 5510 	mls	r5, lr, r0, r5
    1276:	fb08 f800 	mul.w	r8, r8, r0
    127a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    127e:	45a0      	cmp	r8, r4
    1280:	d905      	bls.n	128e <__udivmoddi4+0x106>
    1282:	193c      	adds	r4, r7, r4
    1284:	d202      	bcs.n	128c <__udivmoddi4+0x104>
    1286:	45a0      	cmp	r8, r4
    1288:	f200 80c9 	bhi.w	141e <__udivmoddi4+0x296>
    128c:	3801      	subs	r0, #1
    128e:	eba4 0408 	sub.w	r4, r4, r8
    1292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1296:	e7bd      	b.n	1214 <__udivmoddi4+0x8c>
    1298:	428b      	cmp	r3, r1
    129a:	d908      	bls.n	12ae <__udivmoddi4+0x126>
    129c:	2e00      	cmp	r6, #0
    129e:	f000 80b1 	beq.w	1404 <__udivmoddi4+0x27c>
    12a2:	2100      	movs	r1, #0
    12a4:	e9c6 0500 	strd	r0, r5, [r6]
    12a8:	4608      	mov	r0, r1
    12aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12ae:	fab3 f183 	clz	r1, r3
    12b2:	2900      	cmp	r1, #0
    12b4:	d146      	bne.n	1344 <__udivmoddi4+0x1bc>
    12b6:	42ab      	cmp	r3, r5
    12b8:	f0c0 80a7 	bcc.w	140a <__udivmoddi4+0x282>
    12bc:	4282      	cmp	r2, r0
    12be:	f240 80a4 	bls.w	140a <__udivmoddi4+0x282>
    12c2:	4608      	mov	r0, r1
    12c4:	2e00      	cmp	r6, #0
    12c6:	d0aa      	beq.n	121e <__udivmoddi4+0x96>
    12c8:	e9c6 4a00 	strd	r4, sl, [r6]
    12cc:	e7a7      	b.n	121e <__udivmoddi4+0x96>
    12ce:	f1c2 0020 	rsb	r0, r2, #32
    12d2:	4097      	lsls	r7, r2
    12d4:	fa01 f302 	lsl.w	r3, r1, r2
    12d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    12dc:	40c1      	lsrs	r1, r0
    12de:	fa24 f500 	lsr.w	r5, r4, r0
    12e2:	fa1f f887 	uxth.w	r8, r7
    12e6:	4094      	lsls	r4, r2
    12e8:	431d      	orrs	r5, r3
    12ea:	fbb1 f0fe 	udiv	r0, r1, lr
    12ee:	0c2b      	lsrs	r3, r5, #16
    12f0:	fb0e 1110 	mls	r1, lr, r0, r1
    12f4:	fb00 fc08 	mul.w	ip, r0, r8
    12f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12fc:	459c      	cmp	ip, r3
    12fe:	d909      	bls.n	1314 <__udivmoddi4+0x18c>
    1300:	18fb      	adds	r3, r7, r3
    1302:	bf2c      	ite	cs
    1304:	2101      	movcs	r1, #1
    1306:	2100      	movcc	r1, #0
    1308:	459c      	cmp	ip, r3
    130a:	d902      	bls.n	1312 <__udivmoddi4+0x18a>
    130c:	2900      	cmp	r1, #0
    130e:	f000 8095 	beq.w	143c <__udivmoddi4+0x2b4>
    1312:	3801      	subs	r0, #1
    1314:	eba3 030c 	sub.w	r3, r3, ip
    1318:	b2ad      	uxth	r5, r5
    131a:	fbb3 f1fe 	udiv	r1, r3, lr
    131e:	fb0e 3311 	mls	r3, lr, r1, r3
    1322:	fb01 fc08 	mul.w	ip, r1, r8
    1326:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    132a:	45ac      	cmp	ip, r5
    132c:	d905      	bls.n	133a <__udivmoddi4+0x1b2>
    132e:	197d      	adds	r5, r7, r5
    1330:	d202      	bcs.n	1338 <__udivmoddi4+0x1b0>
    1332:	45ac      	cmp	ip, r5
    1334:	f200 8089 	bhi.w	144a <__udivmoddi4+0x2c2>
    1338:	3901      	subs	r1, #1
    133a:	eba5 030c 	sub.w	r3, r5, ip
    133e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1342:	e77a      	b.n	123a <__udivmoddi4+0xb2>
    1344:	f1c1 0420 	rsb	r4, r1, #32
    1348:	408b      	lsls	r3, r1
    134a:	fa02 f701 	lsl.w	r7, r2, r1
    134e:	fa05 fc01 	lsl.w	ip, r5, r1
    1352:	40e2      	lsrs	r2, r4
    1354:	fa20 f804 	lsr.w	r8, r0, r4
    1358:	40e5      	lsrs	r5, r4
    135a:	fa00 fe01 	lsl.w	lr, r0, r1
    135e:	4313      	orrs	r3, r2
    1360:	ea48 020c 	orr.w	r2, r8, ip
    1364:	ea4f 4813 	mov.w	r8, r3, lsr #16
    1368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    136c:	fa1f f983 	uxth.w	r9, r3
    1370:	fbb5 faf8 	udiv	sl, r5, r8
    1374:	fb08 551a 	mls	r5, r8, sl, r5
    1378:	fb0a f009 	mul.w	r0, sl, r9
    137c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    1380:	4560      	cmp	r0, ip
    1382:	d90a      	bls.n	139a <__udivmoddi4+0x212>
    1384:	eb13 0c0c 	adds.w	ip, r3, ip
    1388:	bf2c      	ite	cs
    138a:	2501      	movcs	r5, #1
    138c:	2500      	movcc	r5, #0
    138e:	4560      	cmp	r0, ip
    1390:	d901      	bls.n	1396 <__udivmoddi4+0x20e>
    1392:	2d00      	cmp	r5, #0
    1394:	d055      	beq.n	1442 <__udivmoddi4+0x2ba>
    1396:	f10a 3aff 	add.w	sl, sl, #4294967295
    139a:	ebac 0c00 	sub.w	ip, ip, r0
    139e:	b292      	uxth	r2, r2
    13a0:	fbbc f0f8 	udiv	r0, ip, r8
    13a4:	fb08 cc10 	mls	ip, r8, r0, ip
    13a8:	fb00 f909 	mul.w	r9, r0, r9
    13ac:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    13b0:	45e1      	cmp	r9, ip
    13b2:	d905      	bls.n	13c0 <__udivmoddi4+0x238>
    13b4:	eb13 0c0c 	adds.w	ip, r3, ip
    13b8:	d201      	bcs.n	13be <__udivmoddi4+0x236>
    13ba:	45e1      	cmp	r9, ip
    13bc:	d83b      	bhi.n	1436 <__udivmoddi4+0x2ae>
    13be:	3801      	subs	r0, #1
    13c0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    13c4:	ebac 0c09 	sub.w	ip, ip, r9
    13c8:	fba0 8907 	umull	r8, r9, r0, r7
    13cc:	45cc      	cmp	ip, r9
    13ce:	4645      	mov	r5, r8
    13d0:	464a      	mov	r2, r9
    13d2:	d302      	bcc.n	13da <__udivmoddi4+0x252>
    13d4:	d106      	bne.n	13e4 <__udivmoddi4+0x25c>
    13d6:	45c6      	cmp	lr, r8
    13d8:	d204      	bcs.n	13e4 <__udivmoddi4+0x25c>
    13da:	3801      	subs	r0, #1
    13dc:	ebb8 0507 	subs.w	r5, r8, r7
    13e0:	eb69 0203 	sbc.w	r2, r9, r3
    13e4:	b32e      	cbz	r6, 1432 <__udivmoddi4+0x2aa>
    13e6:	ebbe 0305 	subs.w	r3, lr, r5
    13ea:	eb6c 0c02 	sbc.w	ip, ip, r2
    13ee:	fa23 f201 	lsr.w	r2, r3, r1
    13f2:	fa0c f404 	lsl.w	r4, ip, r4
    13f6:	fa2c f301 	lsr.w	r3, ip, r1
    13fa:	2100      	movs	r1, #0
    13fc:	4314      	orrs	r4, r2
    13fe:	e9c6 4300 	strd	r4, r3, [r6]
    1402:	e70c      	b.n	121e <__udivmoddi4+0x96>
    1404:	4631      	mov	r1, r6
    1406:	4630      	mov	r0, r6
    1408:	e709      	b.n	121e <__udivmoddi4+0x96>
    140a:	1a84      	subs	r4, r0, r2
    140c:	eb65 0303 	sbc.w	r3, r5, r3
    1410:	2001      	movs	r0, #1
    1412:	469a      	mov	sl, r3
    1414:	e756      	b.n	12c4 <__udivmoddi4+0x13c>
    1416:	f1ac 0c02 	sub.w	ip, ip, #2
    141a:	443d      	add	r5, r7
    141c:	e724      	b.n	1268 <__udivmoddi4+0xe0>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e734      	b.n	128e <__udivmoddi4+0x106>
    1424:	3802      	subs	r0, #2
    1426:	443c      	add	r4, r7
    1428:	e6ef      	b.n	120a <__udivmoddi4+0x82>
    142a:	f1ae 0e02 	sub.w	lr, lr, #2
    142e:	443b      	add	r3, r7
    1430:	e6d9      	b.n	11e6 <__udivmoddi4+0x5e>
    1432:	4631      	mov	r1, r6
    1434:	e6f3      	b.n	121e <__udivmoddi4+0x96>
    1436:	3802      	subs	r0, #2
    1438:	449c      	add	ip, r3
    143a:	e7c1      	b.n	13c0 <__udivmoddi4+0x238>
    143c:	3802      	subs	r0, #2
    143e:	443b      	add	r3, r7
    1440:	e768      	b.n	1314 <__udivmoddi4+0x18c>
    1442:	f1aa 0a02 	sub.w	sl, sl, #2
    1446:	449c      	add	ip, r3
    1448:	e7a7      	b.n	139a <__udivmoddi4+0x212>
    144a:	3902      	subs	r1, #2
    144c:	443d      	add	r5, r7
    144e:	e774      	b.n	133a <__udivmoddi4+0x1b2>

00001450 <__aeabi_idiv0>:
    1450:	4770      	bx	lr
    1452:	bf00      	nop

00001454 <__aeabi_d2uiz>:
    1454:	004a      	lsls	r2, r1, #1
    1456:	d211      	bcs.n	147c <__aeabi_d2uiz+0x28>
    1458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    145c:	d211      	bcs.n	1482 <__aeabi_d2uiz+0x2e>
    145e:	d50d      	bpl.n	147c <__aeabi_d2uiz+0x28>
    1460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1468:	d40e      	bmi.n	1488 <__aeabi_d2uiz+0x34>
    146a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    146e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1476:	fa23 f002 	lsr.w	r0, r3, r2
    147a:	4770      	bx	lr
    147c:	f04f 0000 	mov.w	r0, #0
    1480:	4770      	bx	lr
    1482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1486:	d102      	bne.n	148e <__aeabi_d2uiz+0x3a>
    1488:	f04f 30ff 	mov.w	r0, #4294967295
    148c:	4770      	bx	lr
    148e:	f04f 0000 	mov.w	r0, #0
    1492:	4770      	bx	lr

00001494 <__aeabi_dcmpun>:
    1494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    149c:	d102      	bne.n	14a4 <__aeabi_dcmpun+0x10>
    149e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14a2:	d10a      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ac:	d102      	bne.n	14b4 <__aeabi_dcmpun+0x20>
    14ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14b2:	d102      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14b4:	f04f 0000 	mov.w	r0, #0
    14b8:	4770      	bx	lr
    14ba:	f04f 0001 	mov.w	r0, #1
    14be:	4770      	bx	lr

000014c0 <strcmp>:
    14c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    14c4:	f811 3b01 	ldrb.w	r3, [r1], #1
    14c8:	2a01      	cmp	r2, #1
    14ca:	bf28      	it	cs
    14cc:	429a      	cmpcs	r2, r3
    14ce:	d0f7      	beq.n	14c0 <strcmp>
    14d0:	1ad0      	subs	r0, r2, r3
    14d2:	4770      	bx	lr

000014d4 <strlen>:
    14d4:	4603      	mov	r3, r0
    14d6:	f813 2b01 	ldrb.w	r2, [r3], #1
    14da:	2a00      	cmp	r2, #0
    14dc:	d1fb      	bne.n	14d6 <strlen+0x2>
    14de:	1a18      	subs	r0, r3, r0
    14e0:	3801      	subs	r0, #1
    14e2:	4770      	bx	lr
    14e4:	0000      	movs	r0, r0
	...

000014e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    14e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    14ec:	b082      	sub	sp, #8
    14ee:	4607      	mov	r7, r0
    14f0:	460d      	mov	r5, r1
    14f2:	4616      	mov	r6, r2
    14f4:	461c      	mov	r4, r3
    14f6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  const double input_product_scale = static_cast<double>(input->params.scale) *
    14fa:	68c8      	ldr	r0, [r1, #12]
    14fc:	f7fe ff90 	bl	420 <__aeabi_f2d>
    1500:	4680      	mov	r8, r0
    1502:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    1504:	68f0      	ldr	r0, [r6, #12]
    1506:	f7fe ff8b 	bl	420 <__aeabi_f2d>
    150a:	4602      	mov	r2, r0
    150c:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    150e:	4640      	mov	r0, r8
    1510:	4649      	mov	r1, r9
    1512:	f7fe ffdd 	bl	4d0 <__aeabi_dmul>
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    1516:	b1ec      	cbz	r4, 1554 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6c>
    1518:	4680      	mov	r8, r0
    151a:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    151c:	68e0      	ldr	r0, [r4, #12]
    151e:	f7fe ff7f 	bl	420 <__aeabi_f2d>
    1522:	4602      	mov	r2, r0
    1524:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    1526:	4640      	mov	r0, r8
    1528:	4649      	mov	r1, r9
    152a:	f7fe fe19 	bl	160 <__aeabi_dsub>
    152e:	4680      	mov	r8, r0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1530:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    1534:	f8da 000c 	ldr.w	r0, [sl, #12]
    1538:	f7fe ff72 	bl	420 <__aeabi_f2d>
    153c:	4602      	mov	r2, r0
    153e:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1540:	4640      	mov	r0, r8
    1542:	4621      	mov	r1, r4
    1544:	f7ff f8ee 	bl	724 <__aeabi_ddiv>
    1548:	a30d      	add	r3, pc, #52	; (adr r3, 1580 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    154a:	e9d3 2300 	ldrd	r2, r3, [r3]
    154e:	f7ff fa3b 	bl	9c8 <__aeabi_dcmple>
    1552:	b150      	cbz	r0, 156a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x82>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    1554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1556:	9300      	str	r3, [sp, #0]
    1558:	4653      	mov	r3, sl
    155a:	4632      	mov	r2, r6
    155c:	4629      	mov	r1, r5
    155e:	4638      	mov	r0, r7
    1560:	f007 fdf6 	bl	9150 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                          multiplier);
}
    1564:	b002      	add	sp, #8
    1566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    156a:	697c      	ldr	r4, [r7, #20]
    156c:	4b06      	ldr	r3, [pc, #24]	; (1588 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    156e:	9300      	str	r3, [sp, #0]
    1570:	f44f 739f 	mov.w	r3, #318	; 0x13e
    1574:	4a05      	ldr	r2, [pc, #20]	; (158c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    1576:	4906      	ldr	r1, [pc, #24]	; (1590 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    1578:	4638      	mov	r0, r7
    157a:	47a0      	blx	r4
    157c:	2001      	movs	r0, #1
    157e:	e7f1      	b.n	1564 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7c>
    1580:	47ae147b 	.word	0x47ae147b
    1584:	3f947ae1 	.word	0x3f947ae1
    1588:	00057180 	.word	0x00057180
    158c:	000570f0 	.word	0x000570f0
    1590:	00056eec 	.word	0x00056eec
    1594:	00000000 	.word	0x00000000

00001598 <_dtoa_r>:
    1598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    159c:	4616      	mov	r6, r2
    159e:	b099      	sub	sp, #100	; 0x64
    15a0:	461f      	mov	r7, r3
    15a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    15a4:	4605      	mov	r5, r0
    15a6:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    15aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
    15ae:	b93c      	cbnz	r4, 15c0 <_dtoa_r+0x28>
    15b0:	2010      	movs	r0, #16
    15b2:	f00b f8f7 	bl	c7a4 <malloc>
    15b6:	6268      	str	r0, [r5, #36]	; 0x24
    15b8:	6004      	str	r4, [r0, #0]
    15ba:	60c4      	str	r4, [r0, #12]
    15bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
    15c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    15c2:	6819      	ldr	r1, [r3, #0]
    15c4:	b151      	cbz	r1, 15dc <_dtoa_r+0x44>
    15c6:	685a      	ldr	r2, [r3, #4]
    15c8:	2301      	movs	r3, #1
    15ca:	4628      	mov	r0, r5
    15cc:	4093      	lsls	r3, r2
    15ce:	604a      	str	r2, [r1, #4]
    15d0:	608b      	str	r3, [r1, #8]
    15d2:	f00f f8ca 	bl	1076a <_Bfree>
    15d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    15d8:	2200      	movs	r2, #0
    15da:	601a      	str	r2, [r3, #0]
    15dc:	1e3b      	subs	r3, r7, #0
    15de:	bfb7      	itett	lt
    15e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    15e4:	2300      	movge	r3, #0
    15e6:	2201      	movlt	r2, #1
    15e8:	9305      	strlt	r3, [sp, #20]
    15ea:	bfa8      	it	ge
    15ec:	f8c8 3000 	strge.w	r3, [r8]
    15f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    15f4:	4bac      	ldr	r3, [pc, #688]	; (18a8 <_dtoa_r+0x310>)
    15f6:	bfb8      	it	lt
    15f8:	f8c8 2000 	strlt.w	r2, [r8]
    15fc:	ea33 0309 	bics.w	r3, r3, r9
    1600:	d119      	bne.n	1636 <_dtoa_r+0x9e>
    1602:	f242 730f 	movw	r3, #9999	; 0x270f
    1606:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1608:	6013      	str	r3, [r2, #0]
    160a:	f3c9 0313 	ubfx	r3, r9, #0, #20
    160e:	4333      	orrs	r3, r6
    1610:	f000 856a 	beq.w	20e8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe8>
    1614:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1616:	b953      	cbnz	r3, 162e <_dtoa_r+0x96>
    1618:	4ba4      	ldr	r3, [pc, #656]	; (18ac <_dtoa_r+0x314>)
    161a:	e023      	b.n	1664 <_dtoa_r+0xcc>
    161c:	4ba4      	ldr	r3, [pc, #656]	; (18b0 <_dtoa_r+0x318>)
    161e:	9303      	str	r3, [sp, #12]
    1620:	3308      	adds	r3, #8
    1622:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1624:	6013      	str	r3, [r2, #0]
    1626:	9803      	ldr	r0, [sp, #12]
    1628:	b019      	add	sp, #100	; 0x64
    162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    162e:	4b9f      	ldr	r3, [pc, #636]	; (18ac <_dtoa_r+0x314>)
    1630:	9303      	str	r3, [sp, #12]
    1632:	3303      	adds	r3, #3
    1634:	e7f5      	b.n	1622 <_dtoa_r+0x8a>
    1636:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    163a:	2200      	movs	r2, #0
    163c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    1640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1644:	2300      	movs	r3, #0
    1646:	f7ff f9ab 	bl	9a0 <__aeabi_dcmpeq>
    164a:	4680      	mov	r8, r0
    164c:	b160      	cbz	r0, 1668 <_dtoa_r+0xd0>
    164e:	2301      	movs	r3, #1
    1650:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1652:	6013      	str	r3, [r2, #0]
    1654:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1656:	2b00      	cmp	r3, #0
    1658:	f000 8543 	beq.w	20e2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe2>
    165c:	4b95      	ldr	r3, [pc, #596]	; (18b4 <_dtoa_r+0x31c>)
    165e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1660:	6013      	str	r3, [r2, #0]
    1662:	3b01      	subs	r3, #1
    1664:	9303      	str	r3, [sp, #12]
    1666:	e7de      	b.n	1626 <_dtoa_r+0x8e>
    1668:	ab16      	add	r3, sp, #88	; 0x58
    166a:	f3c9 540a 	ubfx	r4, r9, #20, #11
    166e:	4628      	mov	r0, r5
    1670:	9301      	str	r3, [sp, #4]
    1672:	ab17      	add	r3, sp, #92	; 0x5c
    1674:	9300      	str	r3, [sp, #0]
    1676:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    167a:	f00f fab5 	bl	10be8 <__d2b>
    167e:	4683      	mov	fp, r0
    1680:	2c00      	cmp	r4, #0
    1682:	d07c      	beq.n	177e <_dtoa_r+0x1e6>
    1684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1686:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    168a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    168e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1696:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    169a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    169e:	2200      	movs	r2, #0
    16a0:	4b85      	ldr	r3, [pc, #532]	; (18b8 <_dtoa_r+0x320>)
    16a2:	f7fe fd5d 	bl	160 <__aeabi_dsub>
    16a6:	a37a      	add	r3, pc, #488	; (adr r3, 1890 <_dtoa_r+0x2f8>)
    16a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    16ac:	f7fe ff10 	bl	4d0 <__aeabi_dmul>
    16b0:	a379      	add	r3, pc, #484	; (adr r3, 1898 <_dtoa_r+0x300>)
    16b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    16b6:	f7fe fd55 	bl	164 <__adddf3>
    16ba:	4606      	mov	r6, r0
    16bc:	460f      	mov	r7, r1
    16be:	4620      	mov	r0, r4
    16c0:	f7fe fe9c 	bl	3fc <__aeabi_i2d>
    16c4:	a376      	add	r3, pc, #472	; (adr r3, 18a0 <_dtoa_r+0x308>)
    16c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    16ca:	f7fe ff01 	bl	4d0 <__aeabi_dmul>
    16ce:	4602      	mov	r2, r0
    16d0:	460b      	mov	r3, r1
    16d2:	4630      	mov	r0, r6
    16d4:	4639      	mov	r1, r7
    16d6:	f7fe fd45 	bl	164 <__adddf3>
    16da:	4606      	mov	r6, r0
    16dc:	460f      	mov	r7, r1
    16de:	f7ff f991 	bl	a04 <__aeabi_d2iz>
    16e2:	2200      	movs	r2, #0
    16e4:	4682      	mov	sl, r0
    16e6:	2300      	movs	r3, #0
    16e8:	4630      	mov	r0, r6
    16ea:	4639      	mov	r1, r7
    16ec:	f7ff f962 	bl	9b4 <__aeabi_dcmplt>
    16f0:	b148      	cbz	r0, 1706 <_dtoa_r+0x16e>
    16f2:	4650      	mov	r0, sl
    16f4:	f7fe fe82 	bl	3fc <__aeabi_i2d>
    16f8:	4632      	mov	r2, r6
    16fa:	463b      	mov	r3, r7
    16fc:	f7ff f950 	bl	9a0 <__aeabi_dcmpeq>
    1700:	b908      	cbnz	r0, 1706 <_dtoa_r+0x16e>
    1702:	f10a 3aff 	add.w	sl, sl, #4294967295
    1706:	f1ba 0f16 	cmp.w	sl, #22
    170a:	d856      	bhi.n	17ba <_dtoa_r+0x222>
    170c:	4b6b      	ldr	r3, [pc, #428]	; (18bc <_dtoa_r+0x324>)
    170e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1716:	e9d3 2300 	ldrd	r2, r3, [r3]
    171a:	f7ff f94b 	bl	9b4 <__aeabi_dcmplt>
    171e:	2800      	cmp	r0, #0
    1720:	d04d      	beq.n	17be <_dtoa_r+0x226>
    1722:	f10a 3aff 	add.w	sl, sl, #4294967295
    1726:	2300      	movs	r3, #0
    1728:	930f      	str	r3, [sp, #60]	; 0x3c
    172a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    172c:	1b1c      	subs	r4, r3, r4
    172e:	1e63      	subs	r3, r4, #1
    1730:	9309      	str	r3, [sp, #36]	; 0x24
    1732:	bf49      	itett	mi
    1734:	f1c4 0301 	rsbmi	r3, r4, #1
    1738:	2300      	movpl	r3, #0
    173a:	9306      	strmi	r3, [sp, #24]
    173c:	2300      	movmi	r3, #0
    173e:	bf54      	ite	pl
    1740:	9306      	strpl	r3, [sp, #24]
    1742:	9309      	strmi	r3, [sp, #36]	; 0x24
    1744:	f1ba 0f00 	cmp.w	sl, #0
    1748:	db3b      	blt.n	17c2 <_dtoa_r+0x22a>
    174a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    174c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    1750:	4453      	add	r3, sl
    1752:	9309      	str	r3, [sp, #36]	; 0x24
    1754:	2300      	movs	r3, #0
    1756:	930a      	str	r3, [sp, #40]	; 0x28
    1758:	9b22      	ldr	r3, [sp, #136]	; 0x88
    175a:	2b09      	cmp	r3, #9
    175c:	f200 80b4 	bhi.w	18c8 <_dtoa_r+0x330>
    1760:	2b05      	cmp	r3, #5
    1762:	bfc5      	ittet	gt
    1764:	3b04      	subgt	r3, #4
    1766:	2400      	movgt	r4, #0
    1768:	2401      	movle	r4, #1
    176a:	9322      	strgt	r3, [sp, #136]	; 0x88
    176c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    176e:	3b02      	subs	r3, #2
    1770:	2b03      	cmp	r3, #3
    1772:	f200 80b5 	bhi.w	18e0 <_dtoa_r+0x348>
    1776:	e8df f003 	tbb	[pc, r3]
    177a:	7d2e      	.short	0x7d2e
    177c:	a57b      	.short	0xa57b
    177e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1782:	441c      	add	r4, r3
    1784:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1788:	2b20      	cmp	r3, #32
    178a:	bfc6      	itte	gt
    178c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1790:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1794:	f1c3 0320 	rsble	r3, r3, #32
    1798:	f104 34ff 	add.w	r4, r4, #4294967295
    179c:	bfc5      	ittet	gt
    179e:	fa09 f303 	lslgt.w	r3, r9, r3
    17a2:	fa26 f000 	lsrgt.w	r0, r6, r0
    17a6:	fa06 f003 	lslle.w	r0, r6, r3
    17aa:	4318      	orrgt	r0, r3
    17ac:	f7fe fe16 	bl	3dc <__aeabi_ui2d>
    17b0:	2301      	movs	r3, #1
    17b2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    17b6:	9313      	str	r3, [sp, #76]	; 0x4c
    17b8:	e771      	b.n	169e <_dtoa_r+0x106>
    17ba:	2301      	movs	r3, #1
    17bc:	e7b4      	b.n	1728 <_dtoa_r+0x190>
    17be:	900f      	str	r0, [sp, #60]	; 0x3c
    17c0:	e7b3      	b.n	172a <_dtoa_r+0x192>
    17c2:	9b06      	ldr	r3, [sp, #24]
    17c4:	eba3 030a 	sub.w	r3, r3, sl
    17c8:	9306      	str	r3, [sp, #24]
    17ca:	f1ca 0300 	rsb	r3, sl, #0
    17ce:	930a      	str	r3, [sp, #40]	; 0x28
    17d0:	2300      	movs	r3, #0
    17d2:	930e      	str	r3, [sp, #56]	; 0x38
    17d4:	e7c0      	b.n	1758 <_dtoa_r+0x1c0>
    17d6:	2300      	movs	r3, #0
    17d8:	930b      	str	r3, [sp, #44]	; 0x2c
    17da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    17dc:	2b00      	cmp	r3, #0
    17de:	f300 8082 	bgt.w	18e6 <_dtoa_r+0x34e>
    17e2:	f04f 0901 	mov.w	r9, #1
    17e6:	464b      	mov	r3, r9
    17e8:	f8cd 9020 	str.w	r9, [sp, #32]
    17ec:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    17f0:	2200      	movs	r2, #0
    17f2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    17f4:	6072      	str	r2, [r6, #4]
    17f6:	2204      	movs	r2, #4
    17f8:	f102 0014 	add.w	r0, r2, #20
    17fc:	6871      	ldr	r1, [r6, #4]
    17fe:	4298      	cmp	r0, r3
    1800:	d977      	bls.n	18f2 <_dtoa_r+0x35a>
    1802:	4628      	mov	r0, r5
    1804:	f00e ff7d 	bl	10702 <_Balloc>
    1808:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    180a:	6030      	str	r0, [r6, #0]
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	9303      	str	r3, [sp, #12]
    1810:	9b08      	ldr	r3, [sp, #32]
    1812:	2b0e      	cmp	r3, #14
    1814:	f200 80ee 	bhi.w	19f4 <_dtoa_r+0x45c>
    1818:	2c00      	cmp	r4, #0
    181a:	f000 80eb 	beq.w	19f4 <_dtoa_r+0x45c>
    181e:	f1ba 0f00 	cmp.w	sl, #0
    1822:	dd7a      	ble.n	191a <_dtoa_r+0x382>
    1824:	f00a 030f 	and.w	r3, sl, #15
    1828:	4a24      	ldr	r2, [pc, #144]	; (18bc <_dtoa_r+0x324>)
    182a:	f41a 7f80 	tst.w	sl, #256	; 0x100
    182e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1832:	e9d3 3400 	ldrd	r3, r4, [r3]
    1836:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    183a:	ea4f 142a 	mov.w	r4, sl, asr #4
    183e:	d05c      	beq.n	18fa <_dtoa_r+0x362>
    1840:	4b1f      	ldr	r3, [pc, #124]	; (18c0 <_dtoa_r+0x328>)
    1842:	f004 040f 	and.w	r4, r4, #15
    1846:	2703      	movs	r7, #3
    1848:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    184c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1850:	f7fe ff68 	bl	724 <__aeabi_ddiv>
    1854:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1858:	4e19      	ldr	r6, [pc, #100]	; (18c0 <_dtoa_r+0x328>)
    185a:	2c00      	cmp	r4, #0
    185c:	d14f      	bne.n	18fe <_dtoa_r+0x366>
    185e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1866:	f7fe ff5d 	bl	724 <__aeabi_ddiv>
    186a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    186e:	e06e      	b.n	194e <_dtoa_r+0x3b6>
    1870:	2301      	movs	r3, #1
    1872:	e7b1      	b.n	17d8 <_dtoa_r+0x240>
    1874:	2300      	movs	r3, #0
    1876:	930b      	str	r3, [sp, #44]	; 0x2c
    1878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    187a:	eb0a 0903 	add.w	r9, sl, r3
    187e:	f109 0301 	add.w	r3, r9, #1
    1882:	2b01      	cmp	r3, #1
    1884:	9308      	str	r3, [sp, #32]
    1886:	bfb8      	it	lt
    1888:	2301      	movlt	r3, #1
    188a:	e7b1      	b.n	17f0 <_dtoa_r+0x258>
    188c:	f3af 8000 	nop.w
    1890:	636f4361 	.word	0x636f4361
    1894:	3fd287a7 	.word	0x3fd287a7
    1898:	8b60c8b3 	.word	0x8b60c8b3
    189c:	3fc68a28 	.word	0x3fc68a28
    18a0:	509f79fb 	.word	0x509f79fb
    18a4:	3fd34413 	.word	0x3fd34413
    18a8:	7ff00000 	.word	0x7ff00000
    18ac:	00057be7 	.word	0x00057be7
    18b0:	00057bde 	.word	0x00057bde
    18b4:	00057bbb 	.word	0x00057bbb
    18b8:	3ff80000 	.word	0x3ff80000
    18bc:	00011170 	.word	0x00011170
    18c0:	00011148 	.word	0x00011148
    18c4:	2301      	movs	r3, #1
    18c6:	e7d6      	b.n	1876 <_dtoa_r+0x2de>
    18c8:	2401      	movs	r4, #1
    18ca:	2300      	movs	r3, #0
    18cc:	940b      	str	r4, [sp, #44]	; 0x2c
    18ce:	9322      	str	r3, [sp, #136]	; 0x88
    18d0:	f04f 39ff 	mov.w	r9, #4294967295
    18d4:	2200      	movs	r2, #0
    18d6:	2312      	movs	r3, #18
    18d8:	f8cd 9020 	str.w	r9, [sp, #32]
    18dc:	9223      	str	r2, [sp, #140]	; 0x8c
    18de:	e787      	b.n	17f0 <_dtoa_r+0x258>
    18e0:	2301      	movs	r3, #1
    18e2:	930b      	str	r3, [sp, #44]	; 0x2c
    18e4:	e7f4      	b.n	18d0 <_dtoa_r+0x338>
    18e6:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    18ea:	464b      	mov	r3, r9
    18ec:	f8cd 9020 	str.w	r9, [sp, #32]
    18f0:	e77e      	b.n	17f0 <_dtoa_r+0x258>
    18f2:	3101      	adds	r1, #1
    18f4:	0052      	lsls	r2, r2, #1
    18f6:	6071      	str	r1, [r6, #4]
    18f8:	e77e      	b.n	17f8 <_dtoa_r+0x260>
    18fa:	2702      	movs	r7, #2
    18fc:	e7ac      	b.n	1858 <_dtoa_r+0x2c0>
    18fe:	07e1      	lsls	r1, r4, #31
    1900:	d508      	bpl.n	1914 <_dtoa_r+0x37c>
    1902:	3701      	adds	r7, #1
    1904:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1908:	e9d6 2300 	ldrd	r2, r3, [r6]
    190c:	f7fe fde0 	bl	4d0 <__aeabi_dmul>
    1910:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1914:	1064      	asrs	r4, r4, #1
    1916:	3608      	adds	r6, #8
    1918:	e79f      	b.n	185a <_dtoa_r+0x2c2>
    191a:	f000 80a5 	beq.w	1a68 <_dtoa_r+0x4d0>
    191e:	f1ca 0400 	rsb	r4, sl, #0
    1922:	4ba3      	ldr	r3, [pc, #652]	; (1bb0 <_dtoa_r+0x618>)
    1924:	4ea3      	ldr	r6, [pc, #652]	; (1bb4 <_dtoa_r+0x61c>)
    1926:	2702      	movs	r7, #2
    1928:	f004 020f 	and.w	r2, r4, #15
    192c:	1124      	asrs	r4, r4, #4
    192e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1932:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1936:	e9d3 2300 	ldrd	r2, r3, [r3]
    193a:	f7fe fdc9 	bl	4d0 <__aeabi_dmul>
    193e:	2300      	movs	r3, #0
    1940:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1944:	2c00      	cmp	r4, #0
    1946:	f040 8084 	bne.w	1a52 <_dtoa_r+0x4ba>
    194a:	2b00      	cmp	r3, #0
    194c:	d18d      	bne.n	186a <_dtoa_r+0x2d2>
    194e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1950:	2b00      	cmp	r3, #0
    1952:	f000 808b 	beq.w	1a6c <_dtoa_r+0x4d4>
    1956:	2200      	movs	r2, #0
    1958:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    195c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1960:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1964:	4b94      	ldr	r3, [pc, #592]	; (1bb8 <_dtoa_r+0x620>)
    1966:	f7ff f825 	bl	9b4 <__aeabi_dcmplt>
    196a:	2800      	cmp	r0, #0
    196c:	d07e      	beq.n	1a6c <_dtoa_r+0x4d4>
    196e:	9b08      	ldr	r3, [sp, #32]
    1970:	2b00      	cmp	r3, #0
    1972:	d07b      	beq.n	1a6c <_dtoa_r+0x4d4>
    1974:	f1b9 0f00 	cmp.w	r9, #0
    1978:	dd38      	ble.n	19ec <_dtoa_r+0x454>
    197a:	f10a 38ff 	add.w	r8, sl, #4294967295
    197e:	3701      	adds	r7, #1
    1980:	464c      	mov	r4, r9
    1982:	2200      	movs	r2, #0
    1984:	4b8d      	ldr	r3, [pc, #564]	; (1bbc <_dtoa_r+0x624>)
    1986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    198a:	f7fe fda1 	bl	4d0 <__aeabi_dmul>
    198e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1992:	4638      	mov	r0, r7
    1994:	f7fe fd32 	bl	3fc <__aeabi_i2d>
    1998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    199c:	f7fe fd98 	bl	4d0 <__aeabi_dmul>
    19a0:	2200      	movs	r2, #0
    19a2:	4b87      	ldr	r3, [pc, #540]	; (1bc0 <_dtoa_r+0x628>)
    19a4:	f7fe fbde 	bl	164 <__adddf3>
    19a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    19ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    19b0:	9611      	str	r6, [sp, #68]	; 0x44
    19b2:	2c00      	cmp	r4, #0
    19b4:	d15d      	bne.n	1a72 <_dtoa_r+0x4da>
    19b6:	2200      	movs	r2, #0
    19b8:	4b82      	ldr	r3, [pc, #520]	; (1bc4 <_dtoa_r+0x62c>)
    19ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    19be:	f7fe fbcf 	bl	160 <__aeabi_dsub>
    19c2:	4602      	mov	r2, r0
    19c4:	460b      	mov	r3, r1
    19c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    19ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    19cc:	4633      	mov	r3, r6
    19ce:	f7ff f80f 	bl	9f0 <__aeabi_dcmpgt>
    19d2:	2800      	cmp	r0, #0
    19d4:	f040 8294 	bne.w	1f00 <_dtoa_r+0x968>
    19d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    19da:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    19de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    19e2:	f7fe ffe7 	bl	9b4 <__aeabi_dcmplt>
    19e6:	2800      	cmp	r0, #0
    19e8:	f040 8288 	bne.w	1efc <_dtoa_r+0x964>
    19ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    19f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    19f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    19f6:	2b00      	cmp	r3, #0
    19f8:	f2c0 814f 	blt.w	1c9a <_dtoa_r+0x702>
    19fc:	f1ba 0f0e 	cmp.w	sl, #14
    1a00:	f300 814b 	bgt.w	1c9a <_dtoa_r+0x702>
    1a04:	4b6a      	ldr	r3, [pc, #424]	; (1bb0 <_dtoa_r+0x618>)
    1a06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1a0a:	e9d3 3400 	ldrd	r3, r4, [r3]
    1a0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1a12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1a14:	2b00      	cmp	r3, #0
    1a16:	f280 80d9 	bge.w	1bcc <_dtoa_r+0x634>
    1a1a:	9b08      	ldr	r3, [sp, #32]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	f300 80d5 	bgt.w	1bcc <_dtoa_r+0x634>
    1a22:	f040 826a 	bne.w	1efa <_dtoa_r+0x962>
    1a26:	2200      	movs	r2, #0
    1a28:	4b66      	ldr	r3, [pc, #408]	; (1bc4 <_dtoa_r+0x62c>)
    1a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1a2e:	f7fe fd4f 	bl	4d0 <__aeabi_dmul>
    1a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1a36:	f7fe ffd1 	bl	9dc <__aeabi_dcmpge>
    1a3a:	9c08      	ldr	r4, [sp, #32]
    1a3c:	4626      	mov	r6, r4
    1a3e:	2800      	cmp	r0, #0
    1a40:	f040 8240 	bne.w	1ec4 <_dtoa_r+0x92c>
    1a44:	9f03      	ldr	r7, [sp, #12]
    1a46:	2331      	movs	r3, #49	; 0x31
    1a48:	f10a 0a01 	add.w	sl, sl, #1
    1a4c:	f807 3b01 	strb.w	r3, [r7], #1
    1a50:	e23c      	b.n	1ecc <_dtoa_r+0x934>
    1a52:	07e2      	lsls	r2, r4, #31
    1a54:	d505      	bpl.n	1a62 <_dtoa_r+0x4ca>
    1a56:	3701      	adds	r7, #1
    1a58:	e9d6 2300 	ldrd	r2, r3, [r6]
    1a5c:	f7fe fd38 	bl	4d0 <__aeabi_dmul>
    1a60:	2301      	movs	r3, #1
    1a62:	1064      	asrs	r4, r4, #1
    1a64:	3608      	adds	r6, #8
    1a66:	e76d      	b.n	1944 <_dtoa_r+0x3ac>
    1a68:	2702      	movs	r7, #2
    1a6a:	e770      	b.n	194e <_dtoa_r+0x3b6>
    1a6c:	46d0      	mov	r8, sl
    1a6e:	9c08      	ldr	r4, [sp, #32]
    1a70:	e78f      	b.n	1992 <_dtoa_r+0x3fa>
    1a72:	9903      	ldr	r1, [sp, #12]
    1a74:	4b4e      	ldr	r3, [pc, #312]	; (1bb0 <_dtoa_r+0x618>)
    1a76:	4421      	add	r1, r4
    1a78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1a7c:	9112      	str	r1, [sp, #72]	; 0x48
    1a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1a84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1a88:	2900      	cmp	r1, #0
    1a8a:	d046      	beq.n	1b1a <_dtoa_r+0x582>
    1a8c:	2000      	movs	r0, #0
    1a8e:	494e      	ldr	r1, [pc, #312]	; (1bc8 <_dtoa_r+0x630>)
    1a90:	f7fe fe48 	bl	724 <__aeabi_ddiv>
    1a94:	463b      	mov	r3, r7
    1a96:	4632      	mov	r2, r6
    1a98:	f7fe fb62 	bl	160 <__aeabi_dsub>
    1a9c:	9f03      	ldr	r7, [sp, #12]
    1a9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1aa6:	f7fe ffad 	bl	a04 <__aeabi_d2iz>
    1aaa:	4604      	mov	r4, r0
    1aac:	f7fe fca6 	bl	3fc <__aeabi_i2d>
    1ab0:	4602      	mov	r2, r0
    1ab2:	460b      	mov	r3, r1
    1ab4:	3430      	adds	r4, #48	; 0x30
    1ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1aba:	f7fe fb51 	bl	160 <__aeabi_dsub>
    1abe:	4602      	mov	r2, r0
    1ac0:	460b      	mov	r3, r1
    1ac2:	f807 4b01 	strb.w	r4, [r7], #1
    1ac6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1aca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1ace:	f7fe ff71 	bl	9b4 <__aeabi_dcmplt>
    1ad2:	2800      	cmp	r0, #0
    1ad4:	d164      	bne.n	1ba0 <_dtoa_r+0x608>
    1ad6:	2000      	movs	r0, #0
    1ad8:	4937      	ldr	r1, [pc, #220]	; (1bb8 <_dtoa_r+0x620>)
    1ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1ade:	f7fe fb3f 	bl	160 <__aeabi_dsub>
    1ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1ae6:	f7fe ff65 	bl	9b4 <__aeabi_dcmplt>
    1aea:	2800      	cmp	r0, #0
    1aec:	f040 80b4 	bne.w	1c58 <_dtoa_r+0x6c0>
    1af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1af2:	429f      	cmp	r7, r3
    1af4:	f43f af7a 	beq.w	19ec <_dtoa_r+0x454>
    1af8:	2200      	movs	r2, #0
    1afa:	4b30      	ldr	r3, [pc, #192]	; (1bbc <_dtoa_r+0x624>)
    1afc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1b00:	f7fe fce6 	bl	4d0 <__aeabi_dmul>
    1b04:	2200      	movs	r2, #0
    1b06:	4b2d      	ldr	r3, [pc, #180]	; (1bbc <_dtoa_r+0x624>)
    1b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b10:	f7fe fcde 	bl	4d0 <__aeabi_dmul>
    1b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1b18:	e7c3      	b.n	1aa2 <_dtoa_r+0x50a>
    1b1a:	4630      	mov	r0, r6
    1b1c:	4639      	mov	r1, r7
    1b1e:	f7fe fcd7 	bl	4d0 <__aeabi_dmul>
    1b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b24:	9c03      	ldr	r4, [sp, #12]
    1b26:	9314      	str	r3, [sp, #80]	; 0x50
    1b28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b30:	f7fe ff68 	bl	a04 <__aeabi_d2iz>
    1b34:	9015      	str	r0, [sp, #84]	; 0x54
    1b36:	f7fe fc61 	bl	3fc <__aeabi_i2d>
    1b3a:	4602      	mov	r2, r0
    1b3c:	460b      	mov	r3, r1
    1b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b42:	f7fe fb0d 	bl	160 <__aeabi_dsub>
    1b46:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b48:	4606      	mov	r6, r0
    1b4a:	460f      	mov	r7, r1
    1b4c:	3330      	adds	r3, #48	; 0x30
    1b4e:	2200      	movs	r2, #0
    1b50:	f804 3b01 	strb.w	r3, [r4], #1
    1b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b56:	429c      	cmp	r4, r3
    1b58:	d124      	bne.n	1ba4 <_dtoa_r+0x60c>
    1b5a:	4b1b      	ldr	r3, [pc, #108]	; (1bc8 <_dtoa_r+0x630>)
    1b5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1b60:	f7fe fb00 	bl	164 <__adddf3>
    1b64:	4602      	mov	r2, r0
    1b66:	460b      	mov	r3, r1
    1b68:	4630      	mov	r0, r6
    1b6a:	4639      	mov	r1, r7
    1b6c:	f7fe ff40 	bl	9f0 <__aeabi_dcmpgt>
    1b70:	2800      	cmp	r0, #0
    1b72:	d170      	bne.n	1c56 <_dtoa_r+0x6be>
    1b74:	2000      	movs	r0, #0
    1b76:	4914      	ldr	r1, [pc, #80]	; (1bc8 <_dtoa_r+0x630>)
    1b78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1b7c:	f7fe faf0 	bl	160 <__aeabi_dsub>
    1b80:	4602      	mov	r2, r0
    1b82:	460b      	mov	r3, r1
    1b84:	4630      	mov	r0, r6
    1b86:	4639      	mov	r1, r7
    1b88:	f7fe ff14 	bl	9b4 <__aeabi_dcmplt>
    1b8c:	2800      	cmp	r0, #0
    1b8e:	f43f af2d 	beq.w	19ec <_dtoa_r+0x454>
    1b92:	9f14      	ldr	r7, [sp, #80]	; 0x50
    1b94:	1e7b      	subs	r3, r7, #1
    1b96:	9314      	str	r3, [sp, #80]	; 0x50
    1b98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    1b9c:	2b30      	cmp	r3, #48	; 0x30
    1b9e:	d0f8      	beq.n	1b92 <_dtoa_r+0x5fa>
    1ba0:	46c2      	mov	sl, r8
    1ba2:	e048      	b.n	1c36 <_dtoa_r+0x69e>
    1ba4:	4b05      	ldr	r3, [pc, #20]	; (1bbc <_dtoa_r+0x624>)
    1ba6:	f7fe fc93 	bl	4d0 <__aeabi_dmul>
    1baa:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1bae:	e7bd      	b.n	1b2c <_dtoa_r+0x594>
    1bb0:	00011170 	.word	0x00011170
    1bb4:	00011148 	.word	0x00011148
    1bb8:	3ff00000 	.word	0x3ff00000
    1bbc:	40240000 	.word	0x40240000
    1bc0:	401c0000 	.word	0x401c0000
    1bc4:	40140000 	.word	0x40140000
    1bc8:	3fe00000 	.word	0x3fe00000
    1bcc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    1bd0:	9f03      	ldr	r7, [sp, #12]
    1bd2:	4640      	mov	r0, r8
    1bd4:	4649      	mov	r1, r9
    1bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1bda:	f7fe fda3 	bl	724 <__aeabi_ddiv>
    1bde:	f7fe ff11 	bl	a04 <__aeabi_d2iz>
    1be2:	4604      	mov	r4, r0
    1be4:	f7fe fc0a 	bl	3fc <__aeabi_i2d>
    1be8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    1bec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1bf0:	f7fe fc6e 	bl	4d0 <__aeabi_dmul>
    1bf4:	460b      	mov	r3, r1
    1bf6:	4602      	mov	r2, r0
    1bf8:	4649      	mov	r1, r9
    1bfa:	4640      	mov	r0, r8
    1bfc:	f7fe fab0 	bl	160 <__aeabi_dsub>
    1c00:	f807 6b01 	strb.w	r6, [r7], #1
    1c04:	9e03      	ldr	r6, [sp, #12]
    1c06:	9b08      	ldr	r3, [sp, #32]
    1c08:	1bbe      	subs	r6, r7, r6
    1c0a:	42b3      	cmp	r3, r6
    1c0c:	d138      	bne.n	1c80 <_dtoa_r+0x6e8>
    1c0e:	4602      	mov	r2, r0
    1c10:	460b      	mov	r3, r1
    1c12:	f7fe faa7 	bl	164 <__adddf3>
    1c16:	4680      	mov	r8, r0
    1c18:	4689      	mov	r9, r1
    1c1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1c1e:	f7fe fee7 	bl	9f0 <__aeabi_dcmpgt>
    1c22:	bb58      	cbnz	r0, 1c7c <_dtoa_r+0x6e4>
    1c24:	4640      	mov	r0, r8
    1c26:	4649      	mov	r1, r9
    1c28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1c2c:	f7fe feb8 	bl	9a0 <__aeabi_dcmpeq>
    1c30:	b108      	cbz	r0, 1c36 <_dtoa_r+0x69e>
    1c32:	07e1      	lsls	r1, r4, #31
    1c34:	d422      	bmi.n	1c7c <_dtoa_r+0x6e4>
    1c36:	4628      	mov	r0, r5
    1c38:	4659      	mov	r1, fp
    1c3a:	f00e fd96 	bl	1076a <_Bfree>
    1c3e:	2300      	movs	r3, #0
    1c40:	f10a 0001 	add.w	r0, sl, #1
    1c44:	703b      	strb	r3, [r7, #0]
    1c46:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1c48:	6018      	str	r0, [r3, #0]
    1c4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	f43f acea 	beq.w	1626 <_dtoa_r+0x8e>
    1c52:	601f      	str	r7, [r3, #0]
    1c54:	e4e7      	b.n	1626 <_dtoa_r+0x8e>
    1c56:	4627      	mov	r7, r4
    1c58:	463b      	mov	r3, r7
    1c5a:	461f      	mov	r7, r3
    1c5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1c60:	2a39      	cmp	r2, #57	; 0x39
    1c62:	d107      	bne.n	1c74 <_dtoa_r+0x6dc>
    1c64:	9a03      	ldr	r2, [sp, #12]
    1c66:	429a      	cmp	r2, r3
    1c68:	d1f7      	bne.n	1c5a <_dtoa_r+0x6c2>
    1c6a:	2230      	movs	r2, #48	; 0x30
    1c6c:	9903      	ldr	r1, [sp, #12]
    1c6e:	f108 0801 	add.w	r8, r8, #1
    1c72:	700a      	strb	r2, [r1, #0]
    1c74:	781a      	ldrb	r2, [r3, #0]
    1c76:	3201      	adds	r2, #1
    1c78:	701a      	strb	r2, [r3, #0]
    1c7a:	e791      	b.n	1ba0 <_dtoa_r+0x608>
    1c7c:	46d0      	mov	r8, sl
    1c7e:	e7eb      	b.n	1c58 <_dtoa_r+0x6c0>
    1c80:	2200      	movs	r2, #0
    1c82:	4ba1      	ldr	r3, [pc, #644]	; (1f08 <_dtoa_r+0x970>)
    1c84:	f7fe fc24 	bl	4d0 <__aeabi_dmul>
    1c88:	2200      	movs	r2, #0
    1c8a:	2300      	movs	r3, #0
    1c8c:	4680      	mov	r8, r0
    1c8e:	4689      	mov	r9, r1
    1c90:	f7fe fe86 	bl	9a0 <__aeabi_dcmpeq>
    1c94:	2800      	cmp	r0, #0
    1c96:	d09c      	beq.n	1bd2 <_dtoa_r+0x63a>
    1c98:	e7cd      	b.n	1c36 <_dtoa_r+0x69e>
    1c9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1c9c:	2a00      	cmp	r2, #0
    1c9e:	f000 80cc 	beq.w	1e3a <_dtoa_r+0x8a2>
    1ca2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1ca4:	2a01      	cmp	r2, #1
    1ca6:	f300 80af 	bgt.w	1e08 <_dtoa_r+0x870>
    1caa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1cac:	2a00      	cmp	r2, #0
    1cae:	f000 80a7 	beq.w	1e00 <_dtoa_r+0x868>
    1cb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
    1cb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1cb8:	9f06      	ldr	r7, [sp, #24]
    1cba:	9a06      	ldr	r2, [sp, #24]
    1cbc:	2101      	movs	r1, #1
    1cbe:	4628      	mov	r0, r5
    1cc0:	441a      	add	r2, r3
    1cc2:	9206      	str	r2, [sp, #24]
    1cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1cc6:	441a      	add	r2, r3
    1cc8:	9209      	str	r2, [sp, #36]	; 0x24
    1cca:	f00e fdf2 	bl	108b2 <__i2b>
    1cce:	4606      	mov	r6, r0
    1cd0:	2f00      	cmp	r7, #0
    1cd2:	dd0c      	ble.n	1cee <_dtoa_r+0x756>
    1cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	dd09      	ble.n	1cee <_dtoa_r+0x756>
    1cda:	42bb      	cmp	r3, r7
    1cdc:	9a06      	ldr	r2, [sp, #24]
    1cde:	bfa8      	it	ge
    1ce0:	463b      	movge	r3, r7
    1ce2:	1ad2      	subs	r2, r2, r3
    1ce4:	1aff      	subs	r7, r7, r3
    1ce6:	9206      	str	r2, [sp, #24]
    1ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1cea:	1ad3      	subs	r3, r2, r3
    1cec:	9309      	str	r3, [sp, #36]	; 0x24
    1cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1cf0:	b1f3      	cbz	r3, 1d30 <_dtoa_r+0x798>
    1cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	f000 80a4 	beq.w	1e42 <_dtoa_r+0x8aa>
    1cfa:	2c00      	cmp	r4, #0
    1cfc:	dd10      	ble.n	1d20 <_dtoa_r+0x788>
    1cfe:	4631      	mov	r1, r6
    1d00:	4622      	mov	r2, r4
    1d02:	4628      	mov	r0, r5
    1d04:	f00b fe02 	bl	d90c <__pow5mult>
    1d08:	465a      	mov	r2, fp
    1d0a:	4601      	mov	r1, r0
    1d0c:	4606      	mov	r6, r0
    1d0e:	4628      	mov	r0, r5
    1d10:	f00e fdd8 	bl	108c4 <__multiply>
    1d14:	4680      	mov	r8, r0
    1d16:	4659      	mov	r1, fp
    1d18:	4628      	mov	r0, r5
    1d1a:	46c3      	mov	fp, r8
    1d1c:	f00e fd25 	bl	1076a <_Bfree>
    1d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d22:	1b1a      	subs	r2, r3, r4
    1d24:	d004      	beq.n	1d30 <_dtoa_r+0x798>
    1d26:	4659      	mov	r1, fp
    1d28:	4628      	mov	r0, r5
    1d2a:	f00b fdef 	bl	d90c <__pow5mult>
    1d2e:	4683      	mov	fp, r0
    1d30:	2101      	movs	r1, #1
    1d32:	4628      	mov	r0, r5
    1d34:	f00e fdbd 	bl	108b2 <__i2b>
    1d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1d3a:	4604      	mov	r4, r0
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	f340 8082 	ble.w	1e46 <_dtoa_r+0x8ae>
    1d42:	461a      	mov	r2, r3
    1d44:	4601      	mov	r1, r0
    1d46:	4628      	mov	r0, r5
    1d48:	f00b fde0 	bl	d90c <__pow5mult>
    1d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1d4e:	4604      	mov	r4, r0
    1d50:	2b01      	cmp	r3, #1
    1d52:	dd7b      	ble.n	1e4c <_dtoa_r+0x8b4>
    1d54:	f04f 0800 	mov.w	r8, #0
    1d58:	6923      	ldr	r3, [r4, #16]
    1d5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1d5e:	6918      	ldr	r0, [r3, #16]
    1d60:	f00e fd59 	bl	10816 <__hi0bits>
    1d64:	f1c0 0020 	rsb	r0, r0, #32
    1d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d6a:	4418      	add	r0, r3
    1d6c:	f010 001f 	ands.w	r0, r0, #31
    1d70:	f000 808d 	beq.w	1e8e <_dtoa_r+0x8f6>
    1d74:	f1c0 0320 	rsb	r3, r0, #32
    1d78:	2b04      	cmp	r3, #4
    1d7a:	f340 8086 	ble.w	1e8a <_dtoa_r+0x8f2>
    1d7e:	f1c0 001c 	rsb	r0, r0, #28
    1d82:	9b06      	ldr	r3, [sp, #24]
    1d84:	4407      	add	r7, r0
    1d86:	4403      	add	r3, r0
    1d88:	9306      	str	r3, [sp, #24]
    1d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d8c:	4403      	add	r3, r0
    1d8e:	9309      	str	r3, [sp, #36]	; 0x24
    1d90:	9b06      	ldr	r3, [sp, #24]
    1d92:	2b00      	cmp	r3, #0
    1d94:	dd05      	ble.n	1da2 <_dtoa_r+0x80a>
    1d96:	4659      	mov	r1, fp
    1d98:	461a      	mov	r2, r3
    1d9a:	4628      	mov	r0, r5
    1d9c:	f00e fe2d 	bl	109fa <__lshift>
    1da0:	4683      	mov	fp, r0
    1da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1da4:	2b00      	cmp	r3, #0
    1da6:	dd05      	ble.n	1db4 <_dtoa_r+0x81c>
    1da8:	4621      	mov	r1, r4
    1daa:	461a      	mov	r2, r3
    1dac:	4628      	mov	r0, r5
    1dae:	f00e fe24 	bl	109fa <__lshift>
    1db2:	4604      	mov	r4, r0
    1db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1db6:	2b00      	cmp	r3, #0
    1db8:	d06b      	beq.n	1e92 <_dtoa_r+0x8fa>
    1dba:	4621      	mov	r1, r4
    1dbc:	4658      	mov	r0, fp
    1dbe:	f00e fe7b 	bl	10ab8 <__mcmp>
    1dc2:	2800      	cmp	r0, #0
    1dc4:	da65      	bge.n	1e92 <_dtoa_r+0x8fa>
    1dc6:	2300      	movs	r3, #0
    1dc8:	4659      	mov	r1, fp
    1dca:	220a      	movs	r2, #10
    1dcc:	4628      	mov	r0, r5
    1dce:	f00e fce3 	bl	10798 <__multadd>
    1dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dd4:	f10a 3aff 	add.w	sl, sl, #4294967295
    1dd8:	4683      	mov	fp, r0
    1dda:	2b00      	cmp	r3, #0
    1ddc:	f000 818b 	beq.w	20f6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xf6>
    1de0:	4631      	mov	r1, r6
    1de2:	2300      	movs	r3, #0
    1de4:	220a      	movs	r2, #10
    1de6:	4628      	mov	r0, r5
    1de8:	f00e fcd6 	bl	10798 <__multadd>
    1dec:	f1b9 0f00 	cmp.w	r9, #0
    1df0:	4606      	mov	r6, r0
    1df2:	f300 8091 	bgt.w	1f18 <_dtoa_r+0x980>
    1df6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1df8:	2b02      	cmp	r3, #2
    1dfa:	f340 808d 	ble.w	1f18 <_dtoa_r+0x980>
    1dfe:	e050      	b.n	1ea2 <_dtoa_r+0x90a>
    1e00:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1e02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    1e06:	e756      	b.n	1cb6 <_dtoa_r+0x71e>
    1e08:	9b08      	ldr	r3, [sp, #32]
    1e0a:	1e5c      	subs	r4, r3, #1
    1e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e0e:	42a3      	cmp	r3, r4
    1e10:	bfb7      	itett	lt
    1e12:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    1e14:	1b1c      	subge	r4, r3, r4
    1e16:	940a      	strlt	r4, [sp, #40]	; 0x28
    1e18:	1ae2      	sublt	r2, r4, r3
    1e1a:	bfbf      	itttt	lt
    1e1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    1e1e:	2400      	movlt	r4, #0
    1e20:	189b      	addlt	r3, r3, r2
    1e22:	930e      	strlt	r3, [sp, #56]	; 0x38
    1e24:	9b08      	ldr	r3, [sp, #32]
    1e26:	2b00      	cmp	r3, #0
    1e28:	bfbb      	ittet	lt
    1e2a:	9b06      	ldrlt	r3, [sp, #24]
    1e2c:	9a08      	ldrlt	r2, [sp, #32]
    1e2e:	9f06      	ldrge	r7, [sp, #24]
    1e30:	1a9f      	sublt	r7, r3, r2
    1e32:	bfac      	ite	ge
    1e34:	9b08      	ldrge	r3, [sp, #32]
    1e36:	2300      	movlt	r3, #0
    1e38:	e73f      	b.n	1cba <_dtoa_r+0x722>
    1e3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1e3c:	9f06      	ldr	r7, [sp, #24]
    1e3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1e40:	e746      	b.n	1cd0 <_dtoa_r+0x738>
    1e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e44:	e76f      	b.n	1d26 <_dtoa_r+0x78e>
    1e46:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e48:	2b01      	cmp	r3, #1
    1e4a:	dc19      	bgt.n	1e80 <_dtoa_r+0x8e8>
    1e4c:	9b04      	ldr	r3, [sp, #16]
    1e4e:	b9bb      	cbnz	r3, 1e80 <_dtoa_r+0x8e8>
    1e50:	9b05      	ldr	r3, [sp, #20]
    1e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1e56:	b99b      	cbnz	r3, 1e80 <_dtoa_r+0x8e8>
    1e58:	9b05      	ldr	r3, [sp, #20]
    1e5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1e5e:	0d1b      	lsrs	r3, r3, #20
    1e60:	051b      	lsls	r3, r3, #20
    1e62:	b183      	cbz	r3, 1e86 <_dtoa_r+0x8ee>
    1e64:	9b06      	ldr	r3, [sp, #24]
    1e66:	f04f 0801 	mov.w	r8, #1
    1e6a:	3301      	adds	r3, #1
    1e6c:	9306      	str	r3, [sp, #24]
    1e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e70:	3301      	adds	r3, #1
    1e72:	9309      	str	r3, [sp, #36]	; 0x24
    1e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e76:	2b00      	cmp	r3, #0
    1e78:	f47f af6e 	bne.w	1d58 <_dtoa_r+0x7c0>
    1e7c:	2001      	movs	r0, #1
    1e7e:	e773      	b.n	1d68 <_dtoa_r+0x7d0>
    1e80:	f04f 0800 	mov.w	r8, #0
    1e84:	e7f6      	b.n	1e74 <_dtoa_r+0x8dc>
    1e86:	4698      	mov	r8, r3
    1e88:	e7f4      	b.n	1e74 <_dtoa_r+0x8dc>
    1e8a:	d081      	beq.n	1d90 <_dtoa_r+0x7f8>
    1e8c:	4618      	mov	r0, r3
    1e8e:	301c      	adds	r0, #28
    1e90:	e777      	b.n	1d82 <_dtoa_r+0x7ea>
    1e92:	9b08      	ldr	r3, [sp, #32]
    1e94:	2b00      	cmp	r3, #0
    1e96:	dc39      	bgt.n	1f0c <_dtoa_r+0x974>
    1e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e9a:	2b02      	cmp	r3, #2
    1e9c:	dd36      	ble.n	1f0c <_dtoa_r+0x974>
    1e9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1ea2:	f1b9 0f00 	cmp.w	r9, #0
    1ea6:	d10d      	bne.n	1ec4 <_dtoa_r+0x92c>
    1ea8:	4621      	mov	r1, r4
    1eaa:	464b      	mov	r3, r9
    1eac:	2205      	movs	r2, #5
    1eae:	4628      	mov	r0, r5
    1eb0:	f00e fc72 	bl	10798 <__multadd>
    1eb4:	4601      	mov	r1, r0
    1eb6:	4604      	mov	r4, r0
    1eb8:	4658      	mov	r0, fp
    1eba:	f00e fdfd 	bl	10ab8 <__mcmp>
    1ebe:	2800      	cmp	r0, #0
    1ec0:	f73f adc0 	bgt.w	1a44 <_dtoa_r+0x4ac>
    1ec4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1ec6:	9f03      	ldr	r7, [sp, #12]
    1ec8:	ea6f 0a03 	mvn.w	sl, r3
    1ecc:	f04f 0800 	mov.w	r8, #0
    1ed0:	4621      	mov	r1, r4
    1ed2:	4628      	mov	r0, r5
    1ed4:	f00e fc49 	bl	1076a <_Bfree>
    1ed8:	2e00      	cmp	r6, #0
    1eda:	f43f aeac 	beq.w	1c36 <_dtoa_r+0x69e>
    1ede:	f1b8 0f00 	cmp.w	r8, #0
    1ee2:	d005      	beq.n	1ef0 <_dtoa_r+0x958>
    1ee4:	45b0      	cmp	r8, r6
    1ee6:	d003      	beq.n	1ef0 <_dtoa_r+0x958>
    1ee8:	4641      	mov	r1, r8
    1eea:	4628      	mov	r0, r5
    1eec:	f00e fc3d 	bl	1076a <_Bfree>
    1ef0:	4631      	mov	r1, r6
    1ef2:	4628      	mov	r0, r5
    1ef4:	f00e fc39 	bl	1076a <_Bfree>
    1ef8:	e69d      	b.n	1c36 <_dtoa_r+0x69e>
    1efa:	2400      	movs	r4, #0
    1efc:	4626      	mov	r6, r4
    1efe:	e7e1      	b.n	1ec4 <_dtoa_r+0x92c>
    1f00:	46c2      	mov	sl, r8
    1f02:	4626      	mov	r6, r4
    1f04:	e59e      	b.n	1a44 <_dtoa_r+0x4ac>
    1f06:	bf00      	nop
    1f08:	40240000 	.word	0x40240000
    1f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f0e:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1f12:	2b00      	cmp	r3, #0
    1f14:	f000 80f6 	beq.w	2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    1f18:	2f00      	cmp	r7, #0
    1f1a:	dd05      	ble.n	1f28 <_dtoa_r+0x990>
    1f1c:	4631      	mov	r1, r6
    1f1e:	463a      	mov	r2, r7
    1f20:	4628      	mov	r0, r5
    1f22:	f00e fd6a 	bl	109fa <__lshift>
    1f26:	4606      	mov	r6, r0
    1f28:	f1b8 0f00 	cmp.w	r8, #0
    1f2c:	d055      	beq.n	1fda <_dtoa_r+0xa42>
    1f2e:	6871      	ldr	r1, [r6, #4]
    1f30:	4628      	mov	r0, r5
    1f32:	f00e fbe6 	bl	10702 <_Balloc>
    1f36:	6932      	ldr	r2, [r6, #16]
    1f38:	4607      	mov	r7, r0
    1f3a:	f106 010c 	add.w	r1, r6, #12
    1f3e:	3202      	adds	r2, #2
    1f40:	300c      	adds	r0, #12
    1f42:	0092      	lsls	r2, r2, #2
    1f44:	f00e f927 	bl	10196 <memcpy>
    1f48:	2201      	movs	r2, #1
    1f4a:	4639      	mov	r1, r7
    1f4c:	4628      	mov	r0, r5
    1f4e:	f00e fd54 	bl	109fa <__lshift>
    1f52:	9b03      	ldr	r3, [sp, #12]
    1f54:	46b0      	mov	r8, r6
    1f56:	4606      	mov	r6, r0
    1f58:	3301      	adds	r3, #1
    1f5a:	9308      	str	r3, [sp, #32]
    1f5c:	9b03      	ldr	r3, [sp, #12]
    1f5e:	444b      	add	r3, r9
    1f60:	930a      	str	r3, [sp, #40]	; 0x28
    1f62:	9b04      	ldr	r3, [sp, #16]
    1f64:	f003 0301 	and.w	r3, r3, #1
    1f68:	9309      	str	r3, [sp, #36]	; 0x24
    1f6a:	9b08      	ldr	r3, [sp, #32]
    1f6c:	4621      	mov	r1, r4
    1f6e:	4658      	mov	r0, fp
    1f70:	3b01      	subs	r3, #1
    1f72:	9304      	str	r3, [sp, #16]
    1f74:	f00e fadd 	bl	10532 <quorem>
    1f78:	4603      	mov	r3, r0
    1f7a:	4641      	mov	r1, r8
    1f7c:	9006      	str	r0, [sp, #24]
    1f7e:	4658      	mov	r0, fp
    1f80:	3330      	adds	r3, #48	; 0x30
    1f82:	930b      	str	r3, [sp, #44]	; 0x2c
    1f84:	f00e fd98 	bl	10ab8 <__mcmp>
    1f88:	4632      	mov	r2, r6
    1f8a:	4681      	mov	r9, r0
    1f8c:	4621      	mov	r1, r4
    1f8e:	4628      	mov	r0, r5
    1f90:	f00e fdad 	bl	10aee <__mdiff>
    1f94:	68c2      	ldr	r2, [r0, #12]
    1f96:	4607      	mov	r7, r0
    1f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f9a:	bb02      	cbnz	r2, 1fde <_dtoa_r+0xa46>
    1f9c:	4601      	mov	r1, r0
    1f9e:	4658      	mov	r0, fp
    1fa0:	f00e fd8a 	bl	10ab8 <__mcmp>
    1fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fa6:	4602      	mov	r2, r0
    1fa8:	4639      	mov	r1, r7
    1faa:	4628      	mov	r0, r5
    1fac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    1fb0:	f00e fbdb 	bl	1076a <_Bfree>
    1fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1fb8:	9f08      	ldr	r7, [sp, #32]
    1fba:	ea43 0102 	orr.w	r1, r3, r2
    1fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fc0:	430b      	orrs	r3, r1
    1fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fc4:	d10d      	bne.n	1fe2 <_dtoa_r+0xa4a>
    1fc6:	2b39      	cmp	r3, #57	; 0x39
    1fc8:	d029      	beq.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
    1fca:	f1b9 0f00 	cmp.w	r9, #0
    1fce:	dd01      	ble.n	1fd4 <_dtoa_r+0xa3c>
    1fd0:	9b06      	ldr	r3, [sp, #24]
    1fd2:	3331      	adds	r3, #49	; 0x31
    1fd4:	9a04      	ldr	r2, [sp, #16]
    1fd6:	7013      	strb	r3, [r2, #0]
    1fd8:	e77a      	b.n	1ed0 <_dtoa_r+0x938>
    1fda:	4630      	mov	r0, r6
    1fdc:	e7b9      	b.n	1f52 <_dtoa_r+0x9ba>
    1fde:	2201      	movs	r2, #1
    1fe0:	e7e2      	b.n	1fa8 <_dtoa_r+0xa10>
    1fe2:	f1b9 0f00 	cmp.w	r9, #0
    1fe6:	db06      	blt.n	1ff6 <_dtoa_r+0xa5e>
    1fe8:	9922      	ldr	r1, [sp, #136]	; 0x88
    1fea:	ea41 0909 	orr.w	r9, r1, r9
    1fee:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ff0:	ea59 0101 	orrs.w	r1, r9, r1
    1ff4:	d120      	bne.n	2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>
    1ff6:	2a00      	cmp	r2, #0
    1ff8:	ddec      	ble.n	1fd4 <_dtoa_r+0xa3c>
    1ffa:	4659      	mov	r1, fp
    1ffc:	2201      	movs	r2, #1
    1ffe:	4628      	mov	r0, r5
    2000:	9308      	str	r3, [sp, #32]
    2002:	f00e fcfa 	bl	109fa <__lshift>
    2006:	4621      	mov	r1, r4
    2008:	4683      	mov	fp, r0
    200a:	f00e fd55 	bl	10ab8 <__mcmp>
    200e:	2800      	cmp	r0, #0
    2010:	9b08      	ldr	r3, [sp, #32]
    2012:	dc02      	bgt.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
    2014:	d1de      	bne.n	1fd4 <_dtoa_r+0xa3c>
    2016:	07da      	lsls	r2, r3, #31
    2018:	d5dc      	bpl.n	1fd4 <_dtoa_r+0xa3c>
    201a:	2b39      	cmp	r3, #57	; 0x39
    201c:	d1d8      	bne.n	1fd0 <_dtoa_r+0xa38>
    201e:	2339      	movs	r3, #57	; 0x39
    2020:	9a04      	ldr	r2, [sp, #16]
    2022:	7013      	strb	r3, [r2, #0]
    2024:	463b      	mov	r3, r7
    2026:	461f      	mov	r7, r3
    2028:	3b01      	subs	r3, #1
    202a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    202e:	2a39      	cmp	r2, #57	; 0x39
    2030:	d050      	beq.n	20d4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd4>
    2032:	3201      	adds	r2, #1
    2034:	701a      	strb	r2, [r3, #0]
    2036:	e74b      	b.n	1ed0 <_dtoa_r+0x938>
    2038:	2a00      	cmp	r2, #0
    203a:	dd03      	ble.n	2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>
    203c:	2b39      	cmp	r3, #57	; 0x39
    203e:	d0ee      	beq.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
    2040:	3301      	adds	r3, #1
    2042:	e7c7      	b.n	1fd4 <_dtoa_r+0xa3c>
    2044:	9a08      	ldr	r2, [sp, #32]
    2046:	990a      	ldr	r1, [sp, #40]	; 0x28
    2048:	f802 3c01 	strb.w	r3, [r2, #-1]
    204c:	428a      	cmp	r2, r1
    204e:	d02a      	beq.n	20a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa6>
    2050:	4659      	mov	r1, fp
    2052:	2300      	movs	r3, #0
    2054:	220a      	movs	r2, #10
    2056:	4628      	mov	r0, r5
    2058:	f00e fb9e 	bl	10798 <__multadd>
    205c:	45b0      	cmp	r8, r6
    205e:	4683      	mov	fp, r0
    2060:	f04f 0300 	mov.w	r3, #0
    2064:	f04f 020a 	mov.w	r2, #10
    2068:	4641      	mov	r1, r8
    206a:	4628      	mov	r0, r5
    206c:	d107      	bne.n	207e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7e>
    206e:	f00e fb93 	bl	10798 <__multadd>
    2072:	4680      	mov	r8, r0
    2074:	4606      	mov	r6, r0
    2076:	9b08      	ldr	r3, [sp, #32]
    2078:	3301      	adds	r3, #1
    207a:	9308      	str	r3, [sp, #32]
    207c:	e775      	b.n	1f6a <_dtoa_r+0x9d2>
    207e:	f00e fb8b 	bl	10798 <__multadd>
    2082:	4631      	mov	r1, r6
    2084:	4680      	mov	r8, r0
    2086:	2300      	movs	r3, #0
    2088:	220a      	movs	r2, #10
    208a:	4628      	mov	r0, r5
    208c:	f00e fb84 	bl	10798 <__multadd>
    2090:	4606      	mov	r6, r0
    2092:	e7f0      	b.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
    2094:	f1b9 0f00 	cmp.w	r9, #0
    2098:	9a03      	ldr	r2, [sp, #12]
    209a:	f04f 0800 	mov.w	r8, #0
    209e:	bfcc      	ite	gt
    20a0:	464f      	movgt	r7, r9
    20a2:	2701      	movle	r7, #1
    20a4:	4417      	add	r7, r2
    20a6:	4659      	mov	r1, fp
    20a8:	2201      	movs	r2, #1
    20aa:	4628      	mov	r0, r5
    20ac:	9308      	str	r3, [sp, #32]
    20ae:	f00e fca4 	bl	109fa <__lshift>
    20b2:	4621      	mov	r1, r4
    20b4:	4683      	mov	fp, r0
    20b6:	f00e fcff 	bl	10ab8 <__mcmp>
    20ba:	2800      	cmp	r0, #0
    20bc:	dcb2      	bgt.n	2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>
    20be:	d102      	bne.n	20c6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc6>
    20c0:	9b08      	ldr	r3, [sp, #32]
    20c2:	07db      	lsls	r3, r3, #31
    20c4:	d4ae      	bmi.n	2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>
    20c6:	463b      	mov	r3, r7
    20c8:	461f      	mov	r7, r3
    20ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    20ce:	2a30      	cmp	r2, #48	; 0x30
    20d0:	d0fa      	beq.n	20c8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc8>
    20d2:	e6fd      	b.n	1ed0 <_dtoa_r+0x938>
    20d4:	9a03      	ldr	r2, [sp, #12]
    20d6:	429a      	cmp	r2, r3
    20d8:	d1a5      	bne.n	2026 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x26>
    20da:	f10a 0a01 	add.w	sl, sl, #1
    20de:	2331      	movs	r3, #49	; 0x31
    20e0:	e779      	b.n	1fd6 <_dtoa_r+0xa3e>
    20e2:	4b13      	ldr	r3, [pc, #76]	; (2130 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x130>)
    20e4:	f7ff babe 	b.w	1664 <_dtoa_r+0xcc>
    20e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    20ea:	2b00      	cmp	r3, #0
    20ec:	f47f aa96 	bne.w	161c <_dtoa_r+0x84>
    20f0:	4b10      	ldr	r3, [pc, #64]	; (2134 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x134>)
    20f2:	f7ff bab7 	b.w	1664 <_dtoa_r+0xcc>
    20f6:	f1b9 0f00 	cmp.w	r9, #0
    20fa:	dc03      	bgt.n	2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    20fe:	2b02      	cmp	r3, #2
    2100:	f73f aecf 	bgt.w	1ea2 <_dtoa_r+0x90a>
    2104:	9f03      	ldr	r7, [sp, #12]
    2106:	4621      	mov	r1, r4
    2108:	4658      	mov	r0, fp
    210a:	f00e fa12 	bl	10532 <quorem>
    210e:	9a03      	ldr	r2, [sp, #12]
    2110:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2114:	f807 3b01 	strb.w	r3, [r7], #1
    2118:	1aba      	subs	r2, r7, r2
    211a:	4591      	cmp	r9, r2
    211c:	ddba      	ble.n	2094 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x94>
    211e:	4659      	mov	r1, fp
    2120:	2300      	movs	r3, #0
    2122:	220a      	movs	r2, #10
    2124:	4628      	mov	r0, r5
    2126:	f00e fb37 	bl	10798 <__multadd>
    212a:	4683      	mov	fp, r0
    212c:	e7eb      	b.n	2106 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x106>
    212e:	bf00      	nop
    2130:	00057bba 	.word	0x00057bba
    2134:	00057bde 	.word	0x00057bde

00002138 <_Z18ee_serial_callbackc>:
 * from the UART ISR for each new character received. When the parser sees the
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
    2138:	b538      	push	{r3, r4, r5, lr}
  if (c == EE_CMD_TERMINATOR) {
    213a:	2825      	cmp	r0, #37	; 0x25
    213c:	d00c      	beq.n	2158 <_Z18ee_serial_callbackc+0x20>
    g_cmd_buf[g_cmd_pos] = (char)0;
    th_command_ready(g_cmd_buf);
    g_cmd_pos = 0;
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    213e:	4b0c      	ldr	r3, [pc, #48]	; (2170 <_Z18ee_serial_callbackc+0x38>)
    2140:	681a      	ldr	r2, [r3, #0]
    2142:	490c      	ldr	r1, [pc, #48]	; (2174 <_Z18ee_serial_callbackc+0x3c>)
    2144:	5488      	strb	r0, [r1, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    2146:	681b      	ldr	r3, [r3, #0]
    2148:	2b4f      	cmp	r3, #79	; 0x4f
    214a:	d80e      	bhi.n	216a <_Z18ee_serial_callbackc+0x32>
    214c:	4b08      	ldr	r3, [pc, #32]	; (2170 <_Z18ee_serial_callbackc+0x38>)
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	3301      	adds	r3, #1
    2152:	4a07      	ldr	r2, [pc, #28]	; (2170 <_Z18ee_serial_callbackc+0x38>)
    2154:	6013      	str	r3, [r2, #0]
  }
}
    2156:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = (char)0;
    2158:	4c05      	ldr	r4, [pc, #20]	; (2170 <_Z18ee_serial_callbackc+0x38>)
    215a:	6823      	ldr	r3, [r4, #0]
    215c:	4805      	ldr	r0, [pc, #20]	; (2174 <_Z18ee_serial_callbackc+0x3c>)
    215e:	2500      	movs	r5, #0
    2160:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    2162:	f00b fd12 	bl	db8a <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    2166:	6025      	str	r5, [r4, #0]
    2168:	e7f5      	b.n	2156 <_Z18ee_serial_callbackc+0x1e>
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    216a:	2350      	movs	r3, #80	; 0x50
    216c:	e7f1      	b.n	2152 <_Z18ee_serial_callbackc+0x1a>
    216e:	bf00      	nop
    2170:	20000524 	.word	0x20000524
    2174:	200004d0 	.word	0x200004d0

00002178 <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    2178:	b508      	push	{r3, lr}
  th_serialport_initialize();
    217a:	f00b fd20 	bl	dbbe <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    217e:	f000 fb01 	bl	2784 <_Z23th_timestamp_initializev>
  th_final_initialize();
    2182:	f000 fb09 	bl	2798 <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    2186:	4805      	ldr	r0, [pc, #20]	; (219c <_Z23ee_benchmark_initializev+0x24>)
    2188:	f00b fd0b 	bl	dba2 <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    218c:	4b04      	ldr	r3, [pc, #16]	; (21a0 <_Z23ee_benchmark_initializev+0x28>)
    218e:	2201      	movs	r2, #1
    2190:	701a      	strb	r2, [r3, #0]
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    2192:	4804      	ldr	r0, [pc, #16]	; (21a4 <_Z23ee_benchmark_initializev+0x2c>)
    2194:	f00b fd05 	bl	dba2 <_Z9th_printfPKcz>
  
}
    2198:	bd08      	pop	{r3, pc}
    219a:	bf00      	nop
    219c:	00011238 	.word	0x00011238
    21a0:	2001b69c 	.word	0x2001b69c
    21a4:	00011248 	.word	0x00011248

000021a8 <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    21a8:	b570      	push	{r4, r5, r6, lr}
    21aa:	4604      	mov	r4, r0
    21ac:	460d      	mov	r5, r1
  th_load_tensor(); /* if necessary */
    21ae:	f000 fa59 	bl	2664 <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    21b2:	4629      	mov	r1, r5
    21b4:	4811      	ldr	r0, [pc, #68]	; (21fc <_Z8ee_inferjj+0x54>)
    21b6:	f00b fcf4 	bl	dba2 <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    21ba:	1e6e      	subs	r6, r5, #1
    21bc:	b11d      	cbz	r5, 21c6 <_Z8ee_inferjj+0x1e>
    th_infer(); /* call the API inference function */
    21be:	f000 fa3d 	bl	263c <_Z8th_inferv>
  while (n_warmup-- > 0) {
    21c2:	4635      	mov	r5, r6
    21c4:	e7f9      	b.n	21ba <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    21c6:	480e      	ldr	r0, [pc, #56]	; (2200 <_Z8ee_inferjj+0x58>)
    21c8:	f00b fceb 	bl	dba2 <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    21cc:	4621      	mov	r1, r4
    21ce:	480d      	ldr	r0, [pc, #52]	; (2204 <_Z8ee_inferjj+0x5c>)
    21d0:	f00b fce7 	bl	dba2 <_Z9th_printfPKcz>
  th_timestamp();
    21d4:	f000 faa2 	bl	271c <_Z12th_timestampv>
  th_pre();
    21d8:	f00b fcd5 	bl	db86 <_Z6th_prev>
  while (n-- > 0) {
    21dc:	1e65      	subs	r5, r4, #1
    21de:	b11c      	cbz	r4, 21e8 <_Z8ee_inferjj+0x40>
    th_infer(); /* call the API inference function */
    21e0:	f000 fa2c 	bl	263c <_Z8th_inferv>
  while (n-- > 0) {
    21e4:	462c      	mov	r4, r5
    21e6:	e7f9      	b.n	21dc <_Z8ee_inferjj+0x34>
  }
  th_post();
    21e8:	f00b fcce 	bl	db88 <_Z7th_postv>
  th_timestamp();
    21ec:	f000 fa96 	bl	271c <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    21f0:	4805      	ldr	r0, [pc, #20]	; (2208 <_Z8ee_inferjj+0x60>)
    21f2:	f00b fcd6 	bl	dba2 <_Z9th_printfPKcz>
  th_results();
    21f6:	f000 fa7f 	bl	26f8 <_Z10th_resultsv>
}
    21fa:	bd70      	pop	{r4, r5, r6, pc}
    21fc:	00011254 	.word	0x00011254
    2200:	00011268 	.word	0x00011268
    2204:	00011278 	.word	0x00011278
    2208:	0001128c 	.word	0x0001128c

0000220c <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    220c:	b570      	push	{r4, r5, r6, lr}
    220e:	b082      	sub	sp, #8
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    2210:	2250      	movs	r2, #80	; 0x50
    2212:	4951      	ldr	r1, [pc, #324]	; (2358 <_Z15ee_buffer_parsePc+0x14c>)
    2214:	f00e f933 	bl	1047e <strncmp>
    2218:	b110      	cbz	r0, 2220 <_Z15ee_buffer_parsePc+0x14>
    return EE_ARG_UNCLAIMED;
    221a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    221c:	b002      	add	sp, #8
    221e:	bd70      	pop	{r4, r5, r6, pc}
  p_next = strtok(NULL, EE_CMD_DELIMITER);
    2220:	494e      	ldr	r1, [pc, #312]	; (235c <_Z15ee_buffer_parsePc+0x150>)
    2222:	f00b f821 	bl	d268 <strtok>
  if (p_next == NULL) {
    2226:	4605      	mov	r5, r0
    2228:	b1d8      	cbz	r0, 2262 <_Z15ee_buffer_parsePc+0x56>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    222a:	2250      	movs	r2, #80	; 0x50
    222c:	494c      	ldr	r1, [pc, #304]	; (2360 <_Z15ee_buffer_parsePc+0x154>)
    222e:	f00e f926 	bl	1047e <strncmp>
    2232:	bb50      	cbnz	r0, 228a <_Z15ee_buffer_parsePc+0x7e>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    2234:	4949      	ldr	r1, [pc, #292]	; (235c <_Z15ee_buffer_parsePc+0x150>)
    2236:	f00b f817 	bl	d268 <strtok>
    if (p_next == NULL) {
    223a:	b1b8      	cbz	r0, 226c <_Z15ee_buffer_parsePc+0x60>
      g_buff_size = (size_t)atoi(p_next);
    223c:	f00d ff99 	bl	10172 <atoi>
    2240:	4601      	mov	r1, r0
    2242:	4b48      	ldr	r3, [pc, #288]	; (2364 <_Z15ee_buffer_parsePc+0x158>)
    2244:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    2246:	b1b0      	cbz	r0, 2276 <_Z15ee_buffer_parsePc+0x6a>
        g_buff_pos = 0;
    2248:	4b47      	ldr	r3, [pc, #284]	; (2368 <_Z15ee_buffer_parsePc+0x15c>)
    224a:	2200      	movs	r2, #0
    224c:	601a      	str	r2, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    224e:	f5b0 3fc8 	cmp.w	r0, #102400	; 0x19000
    2252:	d915      	bls.n	2280 <_Z15ee_buffer_parsePc+0x74>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    2254:	f44f 32c8 	mov.w	r2, #102400	; 0x19000
    2258:	4844      	ldr	r0, [pc, #272]	; (236c <_Z15ee_buffer_parsePc+0x160>)
    225a:	f00b fca2 	bl	dba2 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    225e:	2000      	movs	r0, #0
    2260:	e7dc      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    2262:	4843      	ldr	r0, [pc, #268]	; (2370 <_Z15ee_buffer_parsePc+0x164>)
    2264:	f00b fc9d 	bl	dba2 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2268:	2000      	movs	r0, #0
    226a:	e7d7      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    226c:	4841      	ldr	r0, [pc, #260]	; (2374 <_Z15ee_buffer_parsePc+0x168>)
    226e:	f00b fc98 	bl	dba2 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2272:	2000      	movs	r0, #0
    2274:	e7d2      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    2276:	4840      	ldr	r0, [pc, #256]	; (2378 <_Z15ee_buffer_parsePc+0x16c>)
    2278:	f00b fc93 	bl	dba2 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    227c:	2000      	movs	r0, #0
    227e:	e7cd      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    2280:	483e      	ldr	r0, [pc, #248]	; (237c <_Z15ee_buffer_parsePc+0x170>)
    2282:	f00b fc8e 	bl	dba2 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2286:	2000      	movs	r0, #0
    2288:	e7c8      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    228a:	2250      	movs	r2, #80	; 0x50
    228c:	493c      	ldr	r1, [pc, #240]	; (2380 <_Z15ee_buffer_parsePc+0x174>)
    228e:	4628      	mov	r0, r5
    2290:	f00e f8f5 	bl	1047e <strncmp>
    2294:	bb60      	cbnz	r0, 22f0 <_Z15ee_buffer_parsePc+0xe4>
    size_t i = 0;
    2296:	2400      	movs	r4, #0
    2298:	e012      	b.n	22c0 <_Z15ee_buffer_parsePc+0xb4>
        th_printf("m-buffer-");
    229a:	483a      	ldr	r0, [pc, #232]	; (2384 <_Z15ee_buffer_parsePc+0x178>)
    229c:	f00b fc81 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    22a0:	4b39      	ldr	r3, [pc, #228]	; (2388 <_Z15ee_buffer_parsePc+0x17c>)
    22a2:	5d19      	ldrb	r1, [r3, r4]
    22a4:	4839      	ldr	r0, [pc, #228]	; (238c <_Z15ee_buffer_parsePc+0x180>)
    22a6:	f00b fc7c 	bl	dba2 <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    22aa:	3401      	adds	r4, #1
    22ac:	f014 0f07 	tst.w	r4, #7
    22b0:	d003      	beq.n	22ba <_Z15ee_buffer_parsePc+0xae>
    22b2:	4b2c      	ldr	r3, [pc, #176]	; (2364 <_Z15ee_buffer_parsePc+0x158>)
    22b4:	681b      	ldr	r3, [r3, #0]
    22b6:	429c      	cmp	r4, r3
    22b8:	d10c      	bne.n	22d4 <_Z15ee_buffer_parsePc+0xc8>
        th_printf("\r\n");
    22ba:	4835      	ldr	r0, [pc, #212]	; (2390 <_Z15ee_buffer_parsePc+0x184>)
    22bc:	f00b fc71 	bl	dba2 <_Z9th_printfPKcz>
    for (; i < g_buff_size; ++i) {
    22c0:	4b28      	ldr	r3, [pc, #160]	; (2364 <_Z15ee_buffer_parsePc+0x158>)
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	42a3      	cmp	r3, r4
    22c6:	d909      	bls.n	22dc <_Z15ee_buffer_parsePc+0xd0>
    if ((i + max) % max == 0 || i == 0) {
    22c8:	f014 0f07 	tst.w	r4, #7
    22cc:	d0e5      	beq.n	229a <_Z15ee_buffer_parsePc+0x8e>
    22ce:	2c00      	cmp	r4, #0
    22d0:	d1e6      	bne.n	22a0 <_Z15ee_buffer_parsePc+0x94>
    22d2:	e7e2      	b.n	229a <_Z15ee_buffer_parsePc+0x8e>
        th_printf("-");
    22d4:	482f      	ldr	r0, [pc, #188]	; (2394 <_Z15ee_buffer_parsePc+0x188>)
    22d6:	f00b fc64 	bl	dba2 <_Z9th_printfPKcz>
    22da:	e7f1      	b.n	22c0 <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    22dc:	f014 0f07 	tst.w	r4, #7
    22e0:	d101      	bne.n	22e6 <_Z15ee_buffer_parsePc+0xda>
  return EE_ARG_CLAIMED;
    22e2:	2000      	movs	r0, #0
    22e4:	e79a      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
    th_printf("\r\n");
    22e6:	482a      	ldr	r0, [pc, #168]	; (2390 <_Z15ee_buffer_parsePc+0x184>)
    22e8:	f00b fc5b 	bl	dba2 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    22ec:	2000      	movs	r0, #0
    22ee:	e795      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
     numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    22f0:	2150      	movs	r1, #80	; 0x50
    22f2:	4628      	mov	r0, r5
    22f4:	f00b fc4d 	bl	db92 <_Z10th_strnlenPKcj>
    22f8:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    22fa:	f010 0401 	ands.w	r4, r0, #1
    22fe:	d11f      	bne.n	2340 <_Z15ee_buffer_parsePc+0x134>
    test[2] = 0;
    2300:	2300      	movs	r3, #0
    2302:	f88d 3006 	strb.w	r3, [sp, #6]
    for (size_t i = 0; i < numbytes;) {
    2306:	42b4      	cmp	r4, r6
    2308:	d224      	bcs.n	2354 <_Z15ee_buffer_parsePc+0x148>
      test[0] = p_next[i++];
    230a:	1c63      	adds	r3, r4, #1
    230c:	5d2a      	ldrb	r2, [r5, r4]
    230e:	f88d 2004 	strb.w	r2, [sp, #4]
      test[1] = p_next[i++];
    2312:	5ceb      	ldrb	r3, [r5, r3]
    2314:	3402      	adds	r4, #2
    2316:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    231a:	a801      	add	r0, sp, #4
    231c:	f00b fbac 	bl	da78 <_Z9ee_hexdecPc>
      if (res < 0) {
    2320:	2800      	cmp	r0, #0
    2322:	db11      	blt.n	2348 <_Z15ee_buffer_parsePc+0x13c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    2324:	4a10      	ldr	r2, [pc, #64]	; (2368 <_Z15ee_buffer_parsePc+0x15c>)
    2326:	6813      	ldr	r3, [r2, #0]
    2328:	4917      	ldr	r1, [pc, #92]	; (2388 <_Z15ee_buffer_parsePc+0x17c>)
    232a:	54c8      	strb	r0, [r1, r3]
        g_buff_pos++;
    232c:	3301      	adds	r3, #1
    232e:	6013      	str	r3, [r2, #0]
        if (g_buff_pos == g_buff_size) {
    2330:	4a0c      	ldr	r2, [pc, #48]	; (2364 <_Z15ee_buffer_parsePc+0x158>)
    2332:	6812      	ldr	r2, [r2, #0]
    2334:	4293      	cmp	r3, r2
    2336:	d1e6      	bne.n	2306 <_Z15ee_buffer_parsePc+0xfa>
          th_printf("m-load-done\r\n");
    2338:	4817      	ldr	r0, [pc, #92]	; (2398 <_Z15ee_buffer_parsePc+0x18c>)
    233a:	f00b fc32 	bl	dba2 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    233e:	e007      	b.n	2350 <_Z15ee_buffer_parsePc+0x144>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    2340:	4816      	ldr	r0, [pc, #88]	; (239c <_Z15ee_buffer_parsePc+0x190>)
    2342:	f00b fc2e 	bl	dba2 <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    2346:	e003      	b.n	2350 <_Z15ee_buffer_parsePc+0x144>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    2348:	a901      	add	r1, sp, #4
    234a:	4815      	ldr	r0, [pc, #84]	; (23a0 <_Z15ee_buffer_parsePc+0x194>)
    234c:	f00b fc29 	bl	dba2 <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    2350:	2000      	movs	r0, #0
    2352:	e763      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
  return EE_ARG_CLAIMED;
    2354:	2000      	movs	r0, #0
    2356:	e761      	b.n	221c <_Z15ee_buffer_parsePc+0x10>
    2358:	0001129c 	.word	0x0001129c
    235c:	000112a0 	.word	0x000112a0
    2360:	000112d0 	.word	0x000112d0
    2364:	200004cc 	.word	0x200004cc
    2368:	200004c8 	.word	0x200004c8
    236c:	00011334 	.word	0x00011334
    2370:	000112a4 	.word	0x000112a4
    2374:	000112d8 	.word	0x000112d8
    2378:	00011308 	.word	0x00011308
    237c:	00011364 	.word	0x00011364
    2380:	00011380 	.word	0x00011380
    2384:	00011388 	.word	0x00011388
    2388:	20000528 	.word	0x20000528
    238c:	00011394 	.word	0x00011394
    2390:	000579c8 	.word	0x000579c8
    2394:	00011390 	.word	0x00011390
    2398:	000113e4 	.word	0x000113e4
    239c:	0001139c 	.word	0x0001139c
    23a0:	000113c4 	.word	0x000113c4

000023a4 <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    23a4:	b510      	push	{r4, lr}
    23a6:	4604      	mov	r4, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    23a8:	2250      	movs	r2, #80	; 0x50
    23aa:	493b      	ldr	r1, [pc, #236]	; (2498 <_Z16ee_profile_parsePc+0xf4>)
    23ac:	f00e f867 	bl	1047e <strncmp>
    23b0:	b948      	cbnz	r0, 23c6 <_Z16ee_profile_parsePc+0x22>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    23b2:	493a      	ldr	r1, [pc, #232]	; (249c <_Z16ee_profile_parsePc+0xf8>)
    23b4:	483a      	ldr	r0, [pc, #232]	; (24a0 <_Z16ee_profile_parsePc+0xfc>)
    23b6:	f00b fbf4 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    23ba:	493a      	ldr	r1, [pc, #232]	; (24a4 <_Z16ee_profile_parsePc+0x100>)
    23bc:	483a      	ldr	r0, [pc, #232]	; (24a8 <_Z16ee_profile_parsePc+0x104>)
    23be:	f00b fbf0 	bl	dba2 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    23c2:	2000      	movs	r0, #0
}
    23c4:	bd10      	pop	{r4, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    23c6:	2250      	movs	r2, #80	; 0x50
    23c8:	4938      	ldr	r1, [pc, #224]	; (24ac <_Z16ee_profile_parsePc+0x108>)
    23ca:	4620      	mov	r0, r4
    23cc:	f00e f857 	bl	1047e <strncmp>
    23d0:	bb30      	cbnz	r0, 2420 <_Z16ee_profile_parsePc+0x7c>
    th_printf("%s\r\n", EE_FW_VERSION);
    23d2:	4932      	ldr	r1, [pc, #200]	; (249c <_Z16ee_profile_parsePc+0xf8>)
    23d4:	4836      	ldr	r0, [pc, #216]	; (24b0 <_Z16ee_profile_parsePc+0x10c>)
    23d6:	f00b fbe4 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("\r\n");
    23da:	4836      	ldr	r0, [pc, #216]	; (24b4 <_Z16ee_profile_parsePc+0x110>)
    23dc:	f00b fbe1 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    23e0:	4835      	ldr	r0, [pc, #212]	; (24b8 <_Z16ee_profile_parsePc+0x114>)
    23e2:	f00b fbde 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    23e6:	4835      	ldr	r0, [pc, #212]	; (24bc <_Z16ee_profile_parsePc+0x118>)
    23e8:	f00b fbdb 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    23ec:	4834      	ldr	r0, [pc, #208]	; (24c0 <_Z16ee_profile_parsePc+0x11c>)
    23ee:	f00b fbd8 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    23f2:	4834      	ldr	r0, [pc, #208]	; (24c4 <_Z16ee_profile_parsePc+0x120>)
    23f4:	f00b fbd5 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    23f8:	4833      	ldr	r0, [pc, #204]	; (24c8 <_Z16ee_profile_parsePc+0x124>)
    23fa:	f00b fbd2 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    23fe:	4833      	ldr	r0, [pc, #204]	; (24cc <_Z16ee_profile_parsePc+0x128>)
    2400:	f00b fbcf 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    2404:	4832      	ldr	r0, [pc, #200]	; (24d0 <_Z16ee_profile_parsePc+0x12c>)
    2406:	f00b fbcc 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    240a:	4832      	ldr	r0, [pc, #200]	; (24d4 <_Z16ee_profile_parsePc+0x130>)
    240c:	f00b fbc9 	bl	dba2 <_Z9th_printfPKcz>
    th_printf(
    2410:	4831      	ldr	r0, [pc, #196]	; (24d8 <_Z16ee_profile_parsePc+0x134>)
    2412:	f00b fbc6 	bl	dba2 <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    2416:	4831      	ldr	r0, [pc, #196]	; (24dc <_Z16ee_profile_parsePc+0x138>)
    2418:	f00b fbc3 	bl	dba2 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    241c:	2000      	movs	r0, #0
    241e:	e7d1      	b.n	23c4 <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    2420:	4620      	mov	r0, r4
    2422:	f7ff fef3 	bl	220c <_Z15ee_buffer_parsePc>
    2426:	2800      	cmp	r0, #0
    2428:	d0cc      	beq.n	23c4 <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    242a:	2250      	movs	r2, #80	; 0x50
    242c:	492c      	ldr	r1, [pc, #176]	; (24e0 <_Z16ee_profile_parsePc+0x13c>)
    242e:	4620      	mov	r0, r4
    2430:	f00e f825 	bl	1047e <strncmp>
    2434:	bb18      	cbnz	r0, 247e <_Z16ee_profile_parsePc+0xda>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    2436:	492b      	ldr	r1, [pc, #172]	; (24e4 <_Z16ee_profile_parsePc+0x140>)
    2438:	f00a ff16 	bl	d268 <strtok>
    if (p_next) {
    243c:	b1b0      	cbz	r0, 246c <_Z16ee_profile_parsePc+0xc8>
      i = atoi(p_next);
    243e:	f00d fe98 	bl	10172 <atoi>
      if (i <= 0) {
    2442:	1e04      	subs	r4, r0, #0
    2444:	dd0d      	ble.n	2462 <_Z16ee_profile_parsePc+0xbe>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    2446:	4927      	ldr	r1, [pc, #156]	; (24e4 <_Z16ee_profile_parsePc+0x140>)
    2448:	2000      	movs	r0, #0
    244a:	f00a ff0d 	bl	d268 <strtok>
      if (p_next) {
    244e:	b1a0      	cbz	r0, 247a <_Z16ee_profile_parsePc+0xd6>
        i = atoi(p_next);
    2450:	f00d fe8f 	bl	10172 <atoi>
        if (i < 0) {
    2454:	1e01      	subs	r1, r0, #0
    2456:	da0b      	bge.n	2470 <_Z16ee_profile_parsePc+0xcc>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    2458:	4823      	ldr	r0, [pc, #140]	; (24e8 <_Z16ee_profile_parsePc+0x144>)
    245a:	f00b fba2 	bl	dba2 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    245e:	2000      	movs	r0, #0
    2460:	e7b0      	b.n	23c4 <_Z16ee_profile_parsePc+0x20>
        th_printf("e-[Inference iterations must be >0]\r\n");
    2462:	4822      	ldr	r0, [pc, #136]	; (24ec <_Z16ee_profile_parsePc+0x148>)
    2464:	f00b fb9d 	bl	dba2 <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    2468:	2000      	movs	r0, #0
    246a:	e7ab      	b.n	23c4 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    246c:	210a      	movs	r1, #10
    size_t n = 1;
    246e:	2401      	movs	r4, #1
    ee_infer(n, w);
    2470:	4620      	mov	r0, r4
    2472:	f7ff fe99 	bl	21a8 <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    2476:	2000      	movs	r0, #0
    2478:	e7a4      	b.n	23c4 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    247a:	210a      	movs	r1, #10
    247c:	e7f8      	b.n	2470 <_Z16ee_profile_parsePc+0xcc>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    247e:	2250      	movs	r2, #80	; 0x50
    2480:	491b      	ldr	r1, [pc, #108]	; (24f0 <_Z16ee_profile_parsePc+0x14c>)
    2482:	4620      	mov	r0, r4
    2484:	f00d fffb 	bl	1047e <strncmp>
    2488:	b108      	cbz	r0, 248e <_Z16ee_profile_parsePc+0xea>
    return EE_ARG_UNCLAIMED;
    248a:	2001      	movs	r0, #1
    248c:	e79a      	b.n	23c4 <_Z16ee_profile_parsePc+0x20>
    th_results();
    248e:	f000 f933 	bl	26f8 <_Z10th_resultsv>
  return EE_ARG_CLAIMED;
    2492:	2000      	movs	r0, #0
    2494:	e796      	b.n	23c4 <_Z16ee_profile_parsePc+0x20>
    2496:	bf00      	nop
    2498:	000113f4 	.word	0x000113f4
    249c:	000113fc 	.word	0x000113fc
    24a0:	00011420 	.word	0x00011420
    24a4:	00011434 	.word	0x00011434
    24a8:	0001143c 	.word	0x0001143c
    24ac:	0001144c 	.word	0x0001144c
    24b0:	00011454 	.word	0x00011454
    24b4:	000579c8 	.word	0x000579c8
    24b8:	0001145c 	.word	0x0001145c
    24bc:	00011484 	.word	0x00011484
    24c0:	000114b4 	.word	0x000114b4
    24c4:	000114dc 	.word	0x000114dc
    24c8:	00011510 	.word	0x00011510
    24cc:	00011548 	.word	0x00011548
    24d0:	00011580 	.word	0x00011580
    24d4:	0001159c 	.word	0x0001159c
    24d8:	000115cc 	.word	0x000115cc
    24dc:	00011614 	.word	0x00011614
    24e0:	00011644 	.word	0x00011644
    24e4:	000112a0 	.word	0x000112a0
    24e8:	00011674 	.word	0x00011674
    24ec:	0001164c 	.word	0x0001164c
    24f0:	00011698 	.word	0x00011698

000024f4 <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    24f4:	4b14      	ldr	r3, [pc, #80]	; (2548 <_Z33ee_serial_command_parser_callbackPc+0x54>)
    24f6:	781b      	ldrb	r3, [r3, #0]
    24f8:	b903      	cbnz	r3, 24fc <_Z33ee_serial_command_parser_callbackPc+0x8>
    24fa:	4770      	bx	lr
void ee_serial_command_parser_callback(char *p_command) {
    24fc:	b510      	push	{r4, lr}
  tok = strtok(p_command, EE_CMD_DELIMITER);
    24fe:	4913      	ldr	r1, [pc, #76]	; (254c <_Z33ee_serial_command_parser_callbackPc+0x58>)
    2500:	f00a feb2 	bl	d268 <strtok>
    2504:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    2506:	2250      	movs	r2, #80	; 0x50
    2508:	4911      	ldr	r1, [pc, #68]	; (2550 <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    250a:	f00d ffb8 	bl	1047e <strncmp>
    250e:	b940      	cbnz	r0, 2522 <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    2510:	4a10      	ldr	r2, [pc, #64]	; (2554 <_Z33ee_serial_command_parser_callbackPc+0x60>)
    2512:	4911      	ldr	r1, [pc, #68]	; (2558 <_Z33ee_serial_command_parser_callbackPc+0x64>)
    2514:	4811      	ldr	r0, [pc, #68]	; (255c <_Z33ee_serial_command_parser_callbackPc+0x68>)
    2516:	f00b fb44 	bl	dba2 <_Z9th_printfPKcz>
  th_printf(EE_MSG_READY);
    251a:	4811      	ldr	r0, [pc, #68]	; (2560 <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    251c:	f00b fb41 	bl	dba2 <_Z9th_printfPKcz>
}
    2520:	bd10      	pop	{r4, pc}
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    2522:	2250      	movs	r2, #80	; 0x50
    2524:	490f      	ldr	r1, [pc, #60]	; (2564 <_Z33ee_serial_command_parser_callbackPc+0x70>)
    2526:	4620      	mov	r0, r4
    2528:	f00d ffa9 	bl	1047e <strncmp>
    252c:	b910      	cbnz	r0, 2534 <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    252e:	f000 f8f5 	bl	271c <_Z12th_timestampv>
    2532:	e7f2      	b.n	251a <_Z33ee_serial_command_parser_callbackPc+0x26>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    2534:	4620      	mov	r0, r4
    2536:	f7ff ff35 	bl	23a4 <_Z16ee_profile_parsePc>
    253a:	2800      	cmp	r0, #0
    253c:	d0ed      	beq.n	251a <_Z33ee_serial_command_parser_callbackPc+0x26>
    th_printf(EE_ERR_CMD, tok);
    253e:	4621      	mov	r1, r4
    2540:	4809      	ldr	r0, [pc, #36]	; (2568 <_Z33ee_serial_command_parser_callbackPc+0x74>)
    2542:	f00b fb2e 	bl	dba2 <_Z9th_printfPKcz>
    2546:	e7e8      	b.n	251a <_Z33ee_serial_command_parser_callbackPc+0x26>
    2548:	2001b69c 	.word	0x2001b69c
    254c:	000112a0 	.word	0x000112a0
    2550:	000116a0 	.word	0x000116a0
    2554:	000116a8 	.word	0x000116a8
    2558:	000116b4 	.word	0x000116b4
    255c:	000116b8 	.word	0x000116b8
    2560:	00011248 	.word	0x00011248
    2564:	000116cc 	.word	0x000116cc
    2568:	000116d8 	.word	0x000116d8

0000256c <_Z13ee_get_bufferPhj>:
 * typically the length of the provided buffer.
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    256c:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    256e:	4b06      	ldr	r3, [pc, #24]	; (2588 <_Z13ee_get_bufferPhj+0x1c>)
    2570:	681c      	ldr	r4, [r3, #0]
    2572:	428c      	cmp	r4, r1
    2574:	d900      	bls.n	2578 <_Z13ee_get_bufferPhj+0xc>
    2576:	460c      	mov	r4, r1
  if (buffer != nullptr) {
    2578:	b118      	cbz	r0, 2582 <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    257a:	4622      	mov	r2, r4
    257c:	4903      	ldr	r1, [pc, #12]	; (258c <_Z13ee_get_bufferPhj+0x20>)
    257e:	f00d fe0a 	bl	10196 <memcpy>
  }
  return len;
    2582:	4620      	mov	r0, r4
    2584:	bd10      	pop	{r4, pc}
    2586:	bf00      	nop
    2588:	200004c8 	.word	0x200004c8
    258c:	20000528 	.word	0x20000528

00002590 <_Z10copy_inputv>:
tflite::MicroInterpreter* interpreter = nullptr;
TfLiteTensor* model_input = nullptr;

// copy input into interpreter's buffer
void copy_input() {
  int8_t *model_input_buffer = model_input->data.int8;
    2590:	4b06      	ldr	r3, [pc, #24]	; (25ac <_Z10copy_inputv+0x1c>)
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	6859      	ldr	r1, [r3, #4]
  int8_t *feature_buffer_ptr = input_quantized;

  // Copy feature buffer to input tensor
  for (int i = 0; i < kFeatureElementCount; i++) {
    2596:	2300      	movs	r3, #0
    2598:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
    259c:	da04      	bge.n	25a8 <_Z10copy_inputv+0x18>
    model_input_buffer[i] = feature_buffer_ptr[i];
    259e:	4a04      	ldr	r2, [pc, #16]	; (25b0 <_Z10copy_inputv+0x20>)
    25a0:	56d2      	ldrsb	r2, [r2, r3]
    25a2:	54ca      	strb	r2, [r1, r3]
  for (int i = 0; i < kFeatureElementCount; i++) {
    25a4:	3301      	adds	r3, #1
    25a6:	e7f7      	b.n	2598 <_Z10copy_inputv+0x8>
  }
}
    25a8:	4770      	bx	lr
    25aa:	bf00      	nop
    25ac:	2001a2d8 	.word	0x2001a2d8
    25b0:	2001a050 	.word	0x2001a050

000025b4 <_Z16calculate_resultv>:

// calculate |output - input|
void calculate_result(){
    25b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float diffsum = 0;

  TfLiteTensor* output = interpreter->output(0);
    25b8:	2100      	movs	r1, #0
    25ba:	4b1c      	ldr	r3, [pc, #112]	; (262c <_Z16calculate_resultv+0x78>)
    25bc:	6818      	ldr	r0, [r3, #0]
    25be:	f004 faeb 	bl	6b98 <_ZN6tflite16MicroInterpreter6outputEj>
    25c2:	4607      	mov	r7, r0
  for (size_t i = 0; i < kFeatureElementCount; i++) {
    25c4:	2400      	movs	r4, #0
  float diffsum = 0;
    25c6:	2500      	movs	r5, #0
  for (size_t i = 0; i < kFeatureElementCount; i++) {
    25c8:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
    25cc:	d225      	bcs.n	261a <_Z16calculate_resultv+0x66>
    float converted = DequantizeInt8ToFloat(output->data.int8[i], interpreter->output(0)->params.scale,
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	f913 9004 	ldrsb.w	r9, [r3, r4]
    25d4:	4e15      	ldr	r6, [pc, #84]	; (262c <_Z16calculate_resultv+0x78>)
    25d6:	2100      	movs	r1, #0
    25d8:	6830      	ldr	r0, [r6, #0]
    25da:	f004 fadd 	bl	6b98 <_ZN6tflite16MicroInterpreter6outputEj>
    25de:	f8d0 800c 	ldr.w	r8, [r0, #12]
                                            interpreter->output(0)->params.zero_point);
    25e2:	2100      	movs	r1, #0
    25e4:	6830      	ldr	r0, [r6, #0]
    25e6:	f004 fad7 	bl	6b98 <_ZN6tflite16MicroInterpreter6outputEj>
    float converted = DequantizeInt8ToFloat(output->data.int8[i], interpreter->output(0)->params.scale,
    25ea:	6900      	ldr	r0, [r0, #16]

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    25ec:	eba9 0000 	sub.w	r0, r9, r0
    25f0:	f7fe fb3a 	bl	c68 <__aeabi_i2f>
    25f4:	4601      	mov	r1, r0
    25f6:	4640      	mov	r0, r8
    25f8:	f7fe fb8a 	bl	d10 <__aeabi_fmul>
    float diff = converted - input_float[i];
    25fc:	4b0c      	ldr	r3, [pc, #48]	; (2630 <_Z16calculate_resultv+0x7c>)
    25fe:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    2602:	f7fe fa7b 	bl	afc <__aeabi_fsub>
    2606:	4601      	mov	r1, r0
    diffsum += diff * diff;
    2608:	f7fe fb82 	bl	d10 <__aeabi_fmul>
    260c:	4601      	mov	r1, r0
    260e:	4628      	mov	r0, r5
    2610:	f7fe fa76 	bl	b00 <__addsf3>
    2614:	4605      	mov	r5, r0
  for (size_t i = 0; i < kFeatureElementCount; i++) {
    2616:	3401      	adds	r4, #1
    2618:	e7d6      	b.n	25c8 <_Z16calculate_resultv+0x14>
  }
  diffsum /= kFeatureElementCount;
    261a:	4906      	ldr	r1, [pc, #24]	; (2634 <_Z16calculate_resultv+0x80>)
    261c:	4628      	mov	r0, r5
    261e:	f7fe fc2b 	bl	e78 <__aeabi_fdiv>

  result = diffsum;
    2622:	4b05      	ldr	r3, [pc, #20]	; (2638 <_Z16calculate_resultv+0x84>)
    2624:	6018      	str	r0, [r3, #0]
}
    2626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    262a:	bf00      	nop
    262c:	2001a2d0 	.word	0x2001a2d0
    2630:	20019650 	.word	0x20019650
    2634:	44200000 	.word	0x44200000
    2638:	2001a2dc 	.word	0x2001a2dc

0000263c <_Z8th_inferv>:
   */
  th_printf("m-results-[%0.3f]\r\n", result);
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() {
    263c:	b508      	push	{r3, lr}

  // Run the model on the spectrogram input and make sure it succeeds.
  TfLiteStatus invoke_status = interpreter->Invoke();
    263e:	4b06      	ldr	r3, [pc, #24]	; (2658 <_Z8th_inferv+0x1c>)
    2640:	6818      	ldr	r0, [r3, #0]
    2642:	f005 f887 	bl	7754 <_ZN6tflite16MicroInterpreter6InvokeEv>
  if (invoke_status != kTfLiteOk) {
    2646:	b900      	cbnz	r0, 264a <_Z8th_inferv+0xe>
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed");
    return;
  }
}
    2648:	bd08      	pop	{r3, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed");
    264a:	4904      	ldr	r1, [pc, #16]	; (265c <_Z8th_inferv+0x20>)
    264c:	4b04      	ldr	r3, [pc, #16]	; (2660 <_Z8th_inferv+0x24>)
    264e:	6818      	ldr	r0, [r3, #0]
    2650:	f00d f9dc 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
    2654:	e7f8      	b.n	2648 <_Z8th_inferv+0xc>
    2656:	bf00      	nop
    2658:	2001a2d0 	.word	0x2001a2d0
    265c:	000116f4 	.word	0x000116f4
    2660:	2001964c 	.word	0x2001964c

00002664 <_Z14th_load_tensorv>:
void th_load_tensor() {
    2664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input_float),
    2666:	f44f 6120 	mov.w	r1, #2560	; 0xa00
    266a:	481f      	ldr	r0, [pc, #124]	; (26e8 <_Z14th_load_tensorv+0x84>)
    266c:	f7ff ff7e 	bl	256c <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(float) != kInputSize) {
    2670:	f5a0 6320 	sub.w	r3, r0, #2560	; 0xa00
    2674:	2b03      	cmp	r3, #3
    2676:	d80c      	bhi.n	2692 <_Z14th_load_tensorv+0x2e>
  float input_scale = interpreter->input(0)->params.scale;
    2678:	4c1c      	ldr	r4, [pc, #112]	; (26ec <_Z14th_load_tensorv+0x88>)
    267a:	2100      	movs	r1, #0
    267c:	6820      	ldr	r0, [r4, #0]
    267e:	f004 fae7 	bl	6c50 <_ZN6tflite16MicroInterpreter5inputEj>
    2682:	68c7      	ldr	r7, [r0, #12]
  int input_zero_point = interpreter->input(0)->params.zero_point;
    2684:	2100      	movs	r1, #0
    2686:	6820      	ldr	r0, [r4, #0]
    2688:	f004 fae2 	bl	6c50 <_ZN6tflite16MicroInterpreter5inputEj>
    268c:	6906      	ldr	r6, [r0, #16]
  for (int i = 0; i < kInputSize; i++) {
    268e:	2400      	movs	r4, #0
    2690:	e00b      	b.n	26aa <_Z14th_load_tensorv+0x46>
    th_printf("Input db has %d elemented, expected %d\n", bytes / sizeof(float),
    2692:	f44f 7220 	mov.w	r2, #640	; 0x280
    2696:	0881      	lsrs	r1, r0, #2
    2698:	4815      	ldr	r0, [pc, #84]	; (26f0 <_Z14th_load_tensorv+0x8c>)
    269a:	f00b fa82 	bl	dba2 <_Z9th_printfPKcz>
    return;
    269e:	e021      	b.n	26e4 <_Z14th_load_tensorv+0x80>
}

inline int8_t QuantizeFloatToInt8(float value, float scale, int zero_point) {
  int32_t result = round(value / scale) + zero_point;
  if (result < INT8_MIN) {
    result = INT8_MIN;
    26a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    input_quantized[i] = QuantizeFloatToInt8(
    26a4:	4b13      	ldr	r3, [pc, #76]	; (26f4 <_Z14th_load_tensorv+0x90>)
    26a6:	5518      	strb	r0, [r3, r4]
  for (int i = 0; i < kInputSize; i++) {
    26a8:	3401      	adds	r4, #1
    26aa:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
    26ae:	da17      	bge.n	26e0 <_Z14th_load_tensorv+0x7c>
  int32_t result = round(value / scale) + zero_point;
    26b0:	4639      	mov	r1, r7
    26b2:	4b0d      	ldr	r3, [pc, #52]	; (26e8 <_Z14th_load_tensorv+0x84>)
    26b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    26b8:	f7fe fbde 	bl	e78 <__aeabi_fdiv>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    26bc:	f00a f81e 	bl	c6fc <roundf>
    26c0:	4605      	mov	r5, r0
    26c2:	4630      	mov	r0, r6
    26c4:	f7fe fad0 	bl	c68 <__aeabi_i2f>
    26c8:	4629      	mov	r1, r5
    26ca:	f7fe fa19 	bl	b00 <__addsf3>
    26ce:	f7fe fce5 	bl	109c <__aeabi_f2iz>
  if (result < INT8_MIN) {
    26d2:	f110 0f80 	cmn.w	r0, #128	; 0x80
    26d6:	dbe3      	blt.n	26a0 <_Z14th_load_tensorv+0x3c>
  }
  if (result > INT8_MAX) {
    26d8:	287f      	cmp	r0, #127	; 0x7f
    26da:	dde3      	ble.n	26a4 <_Z14th_load_tensorv+0x40>
    result = INT8_MAX;
    26dc:	207f      	movs	r0, #127	; 0x7f
    26de:	e7e1      	b.n	26a4 <_Z14th_load_tensorv+0x40>
  copy_input();
    26e0:	f7ff ff56 	bl	2590 <_Z10copy_inputv>
}
    26e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26e6:	bf00      	nop
    26e8:	20019650 	.word	0x20019650
    26ec:	2001a2d0 	.word	0x2001a2d0
    26f0:	00011704 	.word	0x00011704
    26f4:	2001a050 	.word	0x2001a050

000026f8 <_Z10th_resultsv>:
void th_results() {
    26f8:	b508      	push	{r3, lr}
  calculate_result();
    26fa:	f7ff ff5b 	bl	25b4 <_Z16calculate_resultv>
  th_printf("m-results-[%0.3f]\r\n", result);
    26fe:	4b05      	ldr	r3, [pc, #20]	; (2714 <_Z10th_resultsv+0x1c>)
    2700:	6818      	ldr	r0, [r3, #0]
    2702:	f7fd fe8d 	bl	420 <__aeabi_f2d>
    2706:	4602      	mov	r2, r0
    2708:	460b      	mov	r3, r1
    270a:	4803      	ldr	r0, [pc, #12]	; (2718 <_Z10th_resultsv+0x20>)
    270c:	f00b fa49 	bl	dba2 <_Z9th_printfPKcz>
}
    2710:	bd08      	pop	{r3, pc}
    2712:	bf00      	nop
    2714:	2001a2dc 	.word	0x2001a2dc
    2718:	0001172c 	.word	0x0001172c

0000271c <_Z12th_timestampv>:
// #endif
}



void th_timestamp(void) {
    271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    271e:	f00d fcf7 	bl	10110 <z_impl_k_uptime_ticks>
/* Step 3. Release driver */
       g_timestampPin = 1;

/* USER CODE 1 END */
#else
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2722:	014e      	lsls	r6, r1, #5
    2724:	0143      	lsls	r3, r0, #5
    2726:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
    272a:	1a1b      	subs	r3, r3, r0
    272c:	eb62 0201 	sbc.w	r2, r2, r1
    2730:	0256      	lsls	r6, r2, #9
    2732:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
    2736:	025f      	lsls	r7, r3, #9
    2738:	4632      	mov	r2, r6
    273a:	183b      	adds	r3, r7, r0
    273c:	eb41 0202 	adc.w	r2, r1, r2
    2740:	0197      	lsls	r7, r2, #6
    2742:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
    2746:	019e      	lsls	r6, r3, #6
    2748:	1af3      	subs	r3, r6, r3
    274a:	eb67 0202 	sbc.w	r2, r7, r2
    274e:	181c      	adds	r4, r3, r0
    2750:	eb42 0501 	adc.w	r5, r2, r1
    2754:	4623      	mov	r3, r4
    2756:	4629      	mov	r1, r5
    2758:	2c00      	cmp	r4, #0
    275a:	f175 0200 	sbcs.w	r2, r5, #0
    275e:	db06      	blt.n	276e <_Z12th_timestampv+0x52>
    2760:	0bdb      	lsrs	r3, r3, #15
       unsigned long microSeconds = (unsigned long) uptime_usec;
       /* USER CODE 2 BEGIN */
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
    2762:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
    2766:	4806      	ldr	r0, [pc, #24]	; (2780 <_Z12th_timestampv+0x64>)
    2768:	f00b fa1b 	bl	dba2 <_Z9th_printfPKcz>
#endif
}
    276c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    276e:	f647 73ff 	movw	r3, #32767	; 0x7fff
    2772:	18e3      	adds	r3, r4, r3
    2774:	f04f 0100 	mov.w	r1, #0
    2778:	eb45 0101 	adc.w	r1, r5, r1
    277c:	e7f0      	b.n	2760 <_Z12th_timestampv+0x44>
    277e:	bf00      	nop
    2780:	00011740 	.word	0x00011740

00002784 <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    2784:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    2786:	4803      	ldr	r0, [pc, #12]	; (2794 <_Z23th_timestamp_initializev+0x10>)
    2788:	f00b fa0b 	bl	dba2 <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
    278c:	f7ff ffc6 	bl	271c <_Z12th_timestampv>
}
    2790:	bd08      	pop	{r3, pc}
    2792:	bf00      	nop
    2794:	00011750 	.word	0x00011750

00002798 <_Z19th_final_initializev>:
void th_final_initialize(void) {
    2798:	b5f0      	push	{r4, r5, r6, r7, lr}
    279a:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroErrorReporter micro_error_reporter;
    279c:	4b9c      	ldr	r3, [pc, #624]	; (2a10 <_Z19th_final_initializev+0x278>)
    279e:	681b      	ldr	r3, [r3, #0]
    27a0:	f013 0f01 	tst.w	r3, #1
    27a4:	d035      	beq.n	2812 <_Z19th_final_initializev+0x7a>
  error_reporter = &micro_error_reporter;
    27a6:	4b9b      	ldr	r3, [pc, #620]	; (2a14 <_Z19th_final_initializev+0x27c>)
    27a8:	4a9b      	ldr	r2, [pc, #620]	; (2a18 <_Z19th_final_initializev+0x280>)
    27aa:	601a      	str	r2, [r3, #0]
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<tflite::Model>(buf);
    27ac:	489b      	ldr	r0, [pc, #620]	; (2a1c <_Z19th_final_initializev+0x284>)
    27ae:	f00b fa2d 	bl	dc0c <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
    27b2:	4604      	mov	r4, r0
  model = tflite::GetModel(g_model);
    27b4:	4b9a      	ldr	r3, [pc, #616]	; (2a20 <_Z19th_final_initializev+0x288>)
    27b6:	6018      	str	r0, [r3, #0]
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    27b8:	f00b fa16 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    27bc:	1a25      	subs	r5, r4, r0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    27be:	4628      	mov	r0, r5
    27c0:	f00b fa18 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    27c4:	2804      	cmp	r0, #4
    27c6:	d92d      	bls.n	2824 <_Z19th_final_initializev+0x8c>
    27c8:	1d28      	adds	r0, r5, #4
    27ca:	f00b fa13 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    27ce:	b358      	cbz	r0, 2828 <_Z19th_final_initializev+0x90>
    27d0:	4420      	add	r0, r4
    27d2:	f00b fa03 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    27d6:	4602      	mov	r2, r0
  if (model->version() != TFLITE_SCHEMA_VERSION) {
    27d8:	2a03      	cmp	r2, #3
    27da:	d127      	bne.n	282c <_Z19th_final_initializev+0x94>
  static tflite::MicroMutableOpResolver<3> micro_op_resolver(error_reporter);
    27dc:	4b91      	ldr	r3, [pc, #580]	; (2a24 <_Z19th_final_initializev+0x28c>)
    27de:	681b      	ldr	r3, [r3, #0]
    27e0:	f013 0f01 	tst.w	r3, #1
    27e4:	d028      	beq.n	2838 <_Z19th_final_initializev+0xa0>
  if (micro_op_resolver.AddFullyConnected() != kTfLiteOk) {
    27e6:	a804      	add	r0, sp, #16
    27e8:	f007 f9fa 	bl	9be0 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
    27ec:	488e      	ldr	r0, [pc, #568]	; (2a28 <_Z19th_final_initializev+0x290>)
    27ee:	6803      	ldr	r3, [r0, #0]
    27f0:	699b      	ldr	r3, [r3, #24]
    27f2:	2109      	movs	r1, #9
    27f4:	4798      	blx	r3
    27f6:	2800      	cmp	r0, #0
    27f8:	d02e      	beq.n	2858 <_Z19th_final_initializev+0xc0>
      if (error_reporter_ != nullptr) {
    27fa:	4b8b      	ldr	r3, [pc, #556]	; (2a28 <_Z19th_final_initializev+0x290>)
    27fc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    27fe:	b118      	cbz	r0, 2808 <_Z19th_final_initializev+0x70>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2800:	2209      	movs	r2, #9
    2802:	498a      	ldr	r1, [pc, #552]	; (2a2c <_Z19th_final_initializev+0x294>)
    2804:	f00d f902 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
    2808:	2401      	movs	r4, #1
    280a:	2c00      	cmp	r4, #0
    280c:	d050      	beq.n	28b0 <_Z19th_final_initializev+0x118>
}
    280e:	b00d      	add	sp, #52	; 0x34
    2810:	bdf0      	pop	{r4, r5, r6, r7, pc}
  static tflite::MicroErrorReporter micro_error_reporter;
    2812:	4b7f      	ldr	r3, [pc, #508]	; (2a10 <_Z19th_final_initializev+0x278>)
    2814:	2201      	movs	r2, #1
    2816:	601a      	str	r2, [r3, #0]
    2818:	4a85      	ldr	r2, [pc, #532]	; (2a30 <_Z19th_final_initializev+0x298>)
    281a:	4986      	ldr	r1, [pc, #536]	; (2a34 <_Z19th_final_initializev+0x29c>)
    281c:	487e      	ldr	r0, [pc, #504]	; (2a18 <_Z19th_final_initializev+0x280>)
    281e:	f00b fe82 	bl	e526 <__aeabi_atexit>
    2822:	e7c0      	b.n	27a6 <_Z19th_final_initializev+0xe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    2824:	2000      	movs	r0, #0
    2826:	e7d2      	b.n	27ce <_Z19th_final_initializev+0x36>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    2828:	2200      	movs	r2, #0
    282a:	e7d5      	b.n	27d8 <_Z19th_final_initializev+0x40>
    TF_LITE_REPORT_ERROR(error_reporter,
    282c:	2303      	movs	r3, #3
    282e:	4982      	ldr	r1, [pc, #520]	; (2a38 <_Z19th_final_initializev+0x2a0>)
    2830:	4879      	ldr	r0, [pc, #484]	; (2a18 <_Z19th_final_initializev+0x280>)
    2832:	f00d f8eb 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
    2836:	e7ea      	b.n	280e <_Z19th_final_initializev+0x76>
      : error_reporter_(error_reporter) {}
    2838:	487b      	ldr	r0, [pc, #492]	; (2a28 <_Z19th_final_initializev+0x290>)
    283a:	4b80      	ldr	r3, [pc, #512]	; (2a3c <_Z19th_final_initializev+0x2a4>)
    283c:	6003      	str	r3, [r0, #0]
    283e:	2300      	movs	r3, #0
    2840:	6643      	str	r3, [r0, #100]	; 0x64
    2842:	6783      	str	r3, [r0, #120]	; 0x78
    2844:	4b74      	ldr	r3, [pc, #464]	; (2a18 <_Z19th_final_initializev+0x280>)
    2846:	67c3      	str	r3, [r0, #124]	; 0x7c
  static tflite::MicroMutableOpResolver<3> micro_op_resolver(error_reporter);
    2848:	4b76      	ldr	r3, [pc, #472]	; (2a24 <_Z19th_final_initializev+0x28c>)
    284a:	2201      	movs	r2, #1
    284c:	601a      	str	r2, [r3, #0]
    284e:	4a78      	ldr	r2, [pc, #480]	; (2a30 <_Z19th_final_initializev+0x298>)
    2850:	497b      	ldr	r1, [pc, #492]	; (2a40 <_Z19th_final_initializev+0x2a8>)
    2852:	f00b fe68 	bl	e526 <__aeabi_atexit>
    2856:	e7c6      	b.n	27e6 <_Z19th_final_initializev+0x4e>
    }

    if (registrations_len_ >= tOpCount) {
    2858:	4b73      	ldr	r3, [pc, #460]	; (2a28 <_Z19th_final_initializev+0x290>)
    285a:	6e5e      	ldr	r6, [r3, #100]	; 0x64
    285c:	2e02      	cmp	r6, #2
    285e:	d81e      	bhi.n	289e <_Z19th_final_initializev+0x106>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    2860:	4f71      	ldr	r7, [pc, #452]	; (2a28 <_Z19th_final_initializev+0x290>)
    2862:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2866:	f10c 0404 	add.w	r4, ip, #4
    286a:	ad04      	add	r5, sp, #16
    286c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    286e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2870:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    2878:	2209      	movs	r2, #9
    287a:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    287e:	3601      	adds	r6, #1
    2880:	667e      	str	r6, [r7, #100]	; 0x64

    builtin_codes_[num_buitin_ops_] = op;
    2882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    2884:	18f9      	adds	r1, r7, r3
    2886:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
    288a:	f103 021a 	add.w	r2, r3, #26
    288e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2892:	496c      	ldr	r1, [pc, #432]	; (2a44 <_Z19th_final_initializev+0x2ac>)
    2894:	6051      	str	r1, [r2, #4]
    num_buitin_ops_++;
    2896:	3301      	adds	r3, #1
    2898:	67bb      	str	r3, [r7, #120]	; 0x78

    return kTfLiteOk;
    289a:	2400      	movs	r4, #0
    289c:	e7b5      	b.n	280a <_Z19th_final_initializev+0x72>
      if (error_reporter_) {
    289e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    28a0:	b120      	cbz	r0, 28ac <_Z19th_final_initializev+0x114>
        TF_LITE_REPORT_ERROR(error_reporter_,
    28a2:	2303      	movs	r3, #3
    28a4:	2209      	movs	r2, #9
    28a6:	4968      	ldr	r1, [pc, #416]	; (2a48 <_Z19th_final_initializev+0x2b0>)
    28a8:	f00d f8b0 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    28ac:	2401      	movs	r4, #1
    28ae:	e7ac      	b.n	280a <_Z19th_final_initializev+0x72>
    return AddBuiltin(BuiltinOperator_QUANTIZE, Register_QUANTIZE(),
    28b0:	a804      	add	r0, sp, #16
    28b2:	f007 fca7 	bl	a204 <_ZN6tflite17Register_QUANTIZEEv>
    if (FindOp(op) != nullptr) {
    28b6:	485c      	ldr	r0, [pc, #368]	; (2a28 <_Z19th_final_initializev+0x290>)
    28b8:	6803      	ldr	r3, [r0, #0]
    28ba:	699b      	ldr	r3, [r3, #24]
    28bc:	2172      	movs	r1, #114	; 0x72
    28be:	4798      	blx	r3
    28c0:	2800      	cmp	r0, #0
    28c2:	d047      	beq.n	2954 <_Z19th_final_initializev+0x1bc>
      if (error_reporter_ != nullptr) {
    28c4:	4b58      	ldr	r3, [pc, #352]	; (2a28 <_Z19th_final_initializev+0x290>)
    28c6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    28c8:	b118      	cbz	r0, 28d2 <_Z19th_final_initializev+0x13a>
        TF_LITE_REPORT_ERROR(error_reporter_,
    28ca:	2272      	movs	r2, #114	; 0x72
    28cc:	4957      	ldr	r1, [pc, #348]	; (2a2c <_Z19th_final_initializev+0x294>)
    28ce:	f00d f89d 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    28d2:	2401      	movs	r4, #1
  if (micro_op_resolver.AddQuantize() != kTfLiteOk) {
    28d4:	2c00      	cmp	r4, #0
    28d6:	d19a      	bne.n	280e <_Z19th_final_initializev+0x76>
                      tflite::ops::micro::Register_DEQUANTIZE(),
    28d8:	a804      	add	r0, sp, #16
    28da:	f006 ff09 	bl	96f0 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
    if (FindOp(op) != nullptr) {
    28de:	4852      	ldr	r0, [pc, #328]	; (2a28 <_Z19th_final_initializev+0x290>)
    28e0:	6803      	ldr	r3, [r0, #0]
    28e2:	699b      	ldr	r3, [r3, #24]
    28e4:	2106      	movs	r1, #6
    28e6:	4798      	blx	r3
    28e8:	2800      	cmp	r0, #0
    28ea:	d063      	beq.n	29b4 <_Z19th_final_initializev+0x21c>
      if (error_reporter_ != nullptr) {
    28ec:	4b4e      	ldr	r3, [pc, #312]	; (2a28 <_Z19th_final_initializev+0x290>)
    28ee:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    28f0:	b118      	cbz	r0, 28fa <_Z19th_final_initializev+0x162>
        TF_LITE_REPORT_ERROR(error_reporter_,
    28f2:	2206      	movs	r2, #6
    28f4:	494d      	ldr	r1, [pc, #308]	; (2a2c <_Z19th_final_initializev+0x294>)
    28f6:	f00d f889 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    28fa:	2401      	movs	r4, #1
  if (micro_op_resolver.AddDequantize() != kTfLiteOk) {
    28fc:	2c00      	cmp	r4, #0
    28fe:	d186      	bne.n	280e <_Z19th_final_initializev+0x76>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
    2900:	4b52      	ldr	r3, [pc, #328]	; (2a4c <_Z19th_final_initializev+0x2b4>)
    2902:	681b      	ldr	r3, [r3, #0]
    2904:	f013 0f01 	tst.w	r3, #1
    2908:	f000 80ae 	beq.w	2a68 <_Z19th_final_initializev+0x2d0>
  interpreter = &static_interpreter;
    290c:	4850      	ldr	r0, [pc, #320]	; (2a50 <_Z19th_final_initializev+0x2b8>)
    290e:	4b51      	ldr	r3, [pc, #324]	; (2a54 <_Z19th_final_initializev+0x2bc>)
    2910:	6018      	str	r0, [r3, #0]
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
    2912:	f004 fc07 	bl	7124 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  if (allocate_status != kTfLiteOk) {
    2916:	2800      	cmp	r0, #0
    2918:	f040 80bf 	bne.w	2a9a <_Z19th_final_initializev+0x302>
  model_input = interpreter->input(0);
    291c:	2100      	movs	r1, #0
    291e:	4b4d      	ldr	r3, [pc, #308]	; (2a54 <_Z19th_final_initializev+0x2bc>)
    2920:	6818      	ldr	r0, [r3, #0]
    2922:	f004 f995 	bl	6c50 <_ZN6tflite16MicroInterpreter5inputEj>
    2926:	4b4c      	ldr	r3, [pc, #304]	; (2a58 <_Z19th_final_initializev+0x2c0>)
    2928:	6018      	str	r0, [r3, #0]
  if ((model_input->dims->size != 2) || (model_input->dims->data[0] != 1) ||
    292a:	6883      	ldr	r3, [r0, #8]
    292c:	681a      	ldr	r2, [r3, #0]
    292e:	2a02      	cmp	r2, #2
    2930:	d10a      	bne.n	2948 <_Z19th_final_initializev+0x1b0>
    2932:	685a      	ldr	r2, [r3, #4]
    2934:	2a01      	cmp	r2, #1
    2936:	d107      	bne.n	2948 <_Z19th_final_initializev+0x1b0>
      (model_input->dims->data[1] !=
    2938:	689b      	ldr	r3, [r3, #8]
  if ((model_input->dims->size != 2) || (model_input->dims->data[0] != 1) ||
    293a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
    293e:	d103      	bne.n	2948 <_Z19th_final_initializev+0x1b0>
      (model_input->type != kTfLiteInt8)) {
    2940:	7803      	ldrb	r3, [r0, #0]
       (kFeatureSliceCount * kFeatureSliceSize)) ||
    2942:	2b09      	cmp	r3, #9
    2944:	f000 80af 	beq.w	2aa6 <_Z19th_final_initializev+0x30e>
    TF_LITE_REPORT_ERROR(error_reporter,
    2948:	4944      	ldr	r1, [pc, #272]	; (2a5c <_Z19th_final_initializev+0x2c4>)
    294a:	4b32      	ldr	r3, [pc, #200]	; (2a14 <_Z19th_final_initializev+0x27c>)
    294c:	6818      	ldr	r0, [r3, #0]
    294e:	f00d f85d 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
    2952:	e75c      	b.n	280e <_Z19th_final_initializev+0x76>
    if (registrations_len_ >= tOpCount) {
    2954:	4b34      	ldr	r3, [pc, #208]	; (2a28 <_Z19th_final_initializev+0x290>)
    2956:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    2958:	2f02      	cmp	r7, #2
    295a:	d822      	bhi.n	29a2 <_Z19th_final_initializev+0x20a>
    registrations_[registrations_len_] = registration;
    295c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2a28 <_Z19th_final_initializev+0x290>
    2960:	eb0c 1e47 	add.w	lr, ip, r7, lsl #5
    2964:	f10e 0504 	add.w	r5, lr, #4
    2968:	ae04      	add	r6, sp, #16
    296a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    296c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    296e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    2972:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2976:	2272      	movs	r2, #114	; 0x72
    2978:	f8ce 2018 	str.w	r2, [lr, #24]
    registrations_len_++;
    297c:	3701      	adds	r7, #1
    297e:	f8cc 7064 	str.w	r7, [ip, #100]	; 0x64
    builtin_codes_[num_buitin_ops_] = op;
    2982:	f8dc 3078 	ldr.w	r3, [ip, #120]	; 0x78
    2986:	eb0c 0103 	add.w	r1, ip, r3
    298a:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
    298e:	f103 021a 	add.w	r2, r3, #26
    2992:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    2996:	4932      	ldr	r1, [pc, #200]	; (2a60 <_Z19th_final_initializev+0x2c8>)
    2998:	6051      	str	r1, [r2, #4]
    num_buitin_ops_++;
    299a:	3301      	adds	r3, #1
    299c:	f8cc 3078 	str.w	r3, [ip, #120]	; 0x78
    return kTfLiteOk;
    29a0:	e798      	b.n	28d4 <_Z19th_final_initializev+0x13c>
      if (error_reporter_) {
    29a2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    29a4:	b120      	cbz	r0, 29b0 <_Z19th_final_initializev+0x218>
        TF_LITE_REPORT_ERROR(error_reporter_,
    29a6:	2303      	movs	r3, #3
    29a8:	2272      	movs	r2, #114	; 0x72
    29aa:	4927      	ldr	r1, [pc, #156]	; (2a48 <_Z19th_final_initializev+0x2b0>)
    29ac:	f00d f82e 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    29b0:	2401      	movs	r4, #1
    29b2:	e78f      	b.n	28d4 <_Z19th_final_initializev+0x13c>
    if (registrations_len_ >= tOpCount) {
    29b4:	4b1c      	ldr	r3, [pc, #112]	; (2a28 <_Z19th_final_initializev+0x290>)
    29b6:	f8d3 c064 	ldr.w	ip, [r3, #100]	; 0x64
    29ba:	f1bc 0f02 	cmp.w	ip, #2
    29be:	d81e      	bhi.n	29fe <_Z19th_final_initializev+0x266>
    registrations_[registrations_len_] = registration;
    29c0:	4f19      	ldr	r7, [pc, #100]	; (2a28 <_Z19th_final_initializev+0x290>)
    29c2:	eb07 1e4c 	add.w	lr, r7, ip, lsl #5
    29c6:	f10e 0504 	add.w	r5, lr, #4
    29ca:	ae04      	add	r6, sp, #16
    29cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    29ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    29d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    29d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    29d8:	2206      	movs	r2, #6
    29da:	f8ce 2018 	str.w	r2, [lr, #24]
    registrations_len_++;
    29de:	f10c 0301 	add.w	r3, ip, #1
    29e2:	667b      	str	r3, [r7, #100]	; 0x64
    builtin_codes_[num_buitin_ops_] = op;
    29e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    29e6:	18f9      	adds	r1, r7, r3
    29e8:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
    29ec:	f103 021a 	add.w	r2, r3, #26
    29f0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    29f4:	491b      	ldr	r1, [pc, #108]	; (2a64 <_Z19th_final_initializev+0x2cc>)
    29f6:	6051      	str	r1, [r2, #4]
    num_buitin_ops_++;
    29f8:	3301      	adds	r3, #1
    29fa:	67bb      	str	r3, [r7, #120]	; 0x78
    return kTfLiteOk;
    29fc:	e77e      	b.n	28fc <_Z19th_final_initializev+0x164>
      if (error_reporter_) {
    29fe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2a00:	b120      	cbz	r0, 2a0c <_Z19th_final_initializev+0x274>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2a02:	2303      	movs	r3, #3
    2a04:	2206      	movs	r2, #6
    2a06:	4910      	ldr	r1, [pc, #64]	; (2a48 <_Z19th_final_initializev+0x2b0>)
    2a08:	f00d f800 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2a0c:	2401      	movs	r4, #1
    2a0e:	e775      	b.n	28fc <_Z19th_final_initializev+0x164>
    2a10:	20019530 	.word	0x20019530
    2a14:	2001964c 	.word	0x2001964c
    2a18:	20000000 	.word	0x20000000
    2a1c:	000118cc 	.word	0x000118cc
    2a20:	2001a2d4 	.word	0x2001a2d4
    2a24:	20019528 	.word	0x20019528
    2a28:	20019534 	.word	0x20019534
    2a2c:	000117b8 	.word	0x000117b8
    2a30:	2001af44 	.word	0x2001af44
    2a34:	0000dabb 	.word	0x0000dabb
    2a38:	00011770 	.word	0x00011770
    2a3c:	000118a8 	.word	0x000118a8
    2a40:	0000db09 	.word	0x0000db09
    2a44:	000092cd 	.word	0x000092cd
    2a48:	00011808 	.word	0x00011808
    2a4c:	2001952c 	.word	0x2001952c
    2a50:	200195b4 	.word	0x200195b4
    2a54:	2001a2d0 	.word	0x2001a2d0
    2a58:	2001a2d8 	.word	0x2001a2d8
    2a5c:	00011868 	.word	0x00011868
    2a60:	0000fa09 	.word	0x0000fa09
    2a64:	0000fa05 	.word	0x0000fa05
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
    2a68:	4c11      	ldr	r4, [pc, #68]	; (2ab0 <_Z19th_final_initializev+0x318>)
    2a6a:	2300      	movs	r3, #0
    2a6c:	9302      	str	r3, [sp, #8]
    2a6e:	4b11      	ldr	r3, [pc, #68]	; (2ab4 <_Z19th_final_initializev+0x31c>)
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	9301      	str	r3, [sp, #4]
    2a74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    2a78:	9300      	str	r3, [sp, #0]
    2a7a:	4b0f      	ldr	r3, [pc, #60]	; (2ab8 <_Z19th_final_initializev+0x320>)
    2a7c:	4a0f      	ldr	r2, [pc, #60]	; (2abc <_Z19th_final_initializev+0x324>)
    2a7e:	4910      	ldr	r1, [pc, #64]	; (2ac0 <_Z19th_final_initializev+0x328>)
    2a80:	6809      	ldr	r1, [r1, #0]
    2a82:	4620      	mov	r0, r4
    2a84:	f00c fc6a 	bl	f35c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    2a88:	4b0e      	ldr	r3, [pc, #56]	; (2ac4 <_Z19th_final_initializev+0x32c>)
    2a8a:	2201      	movs	r2, #1
    2a8c:	601a      	str	r2, [r3, #0]
    2a8e:	4a0e      	ldr	r2, [pc, #56]	; (2ac8 <_Z19th_final_initializev+0x330>)
    2a90:	490e      	ldr	r1, [pc, #56]	; (2acc <_Z19th_final_initializev+0x334>)
    2a92:	4620      	mov	r0, r4
    2a94:	f00b fd47 	bl	e526 <__aeabi_atexit>
    2a98:	e738      	b.n	290c <_Z19th_final_initializev+0x174>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
    2a9a:	490d      	ldr	r1, [pc, #52]	; (2ad0 <_Z19th_final_initializev+0x338>)
    2a9c:	4b05      	ldr	r3, [pc, #20]	; (2ab4 <_Z19th_final_initializev+0x31c>)
    2a9e:	6818      	ldr	r0, [r3, #0]
    2aa0:	f00c ffb4 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
    2aa4:	e6b3      	b.n	280e <_Z19th_final_initializev+0x76>
  th_printf("Initialized\r\n");
    2aa6:	480b      	ldr	r0, [pc, #44]	; (2ad4 <_Z19th_final_initializev+0x33c>)
    2aa8:	f00b f87b 	bl	dba2 <_Z9th_printfPKcz>
    2aac:	e6af      	b.n	280e <_Z19th_final_initializev+0x76>
    2aae:	bf00      	nop
    2ab0:	200195b4 	.word	0x200195b4
    2ab4:	2001964c 	.word	0x2001964c
    2ab8:	2001a2e0 	.word	0x2001a2e0
    2abc:	20019534 	.word	0x20019534
    2ac0:	2001a2d4 	.word	0x2001a2d4
    2ac4:	2001952c 	.word	0x2001952c
    2ac8:	2001af44 	.word	0x2001af44
    2acc:	0000f3c1 	.word	0x0000f3c1
    2ad0:	0001184c 	.word	0x0001184c
    2ad4:	00011890 	.word	0x00011890

00002ad8 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2ad8:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2ada:	680b      	ldr	r3, [r1, #0]
    2adc:	3301      	adds	r3, #1
    2ade:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2ae0:	4b01      	ldr	r3, [pc, #4]	; (2ae8 <char_out+0x10>)
    2ae2:	681b      	ldr	r3, [r3, #0]
    2ae4:	4798      	blx	r3
}
    2ae6:	bd08      	pop	{r3, pc}
    2ae8:	20000004 	.word	0x20000004

00002aec <__printk_hook_install>:
	_char_out = fn;
    2aec:	4b01      	ldr	r3, [pc, #4]	; (2af4 <__printk_hook_install+0x8>)
    2aee:	6018      	str	r0, [r3, #0]
}
    2af0:	4770      	bx	lr
    2af2:	bf00      	nop
    2af4:	20000004 	.word	0x20000004

00002af8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2af8:	b500      	push	{lr}
    2afa:	b083      	sub	sp, #12
    2afc:	4602      	mov	r2, r0
    2afe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2b00:	2100      	movs	r1, #0
    2b02:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2b04:	a901      	add	r1, sp, #4
    2b06:	4803      	ldr	r0, [pc, #12]	; (2b14 <vprintk+0x1c>)
    2b08:	f000 f94e 	bl	2da8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2b0c:	b003      	add	sp, #12
    2b0e:	f85d fb04 	ldr.w	pc, [sp], #4
    2b12:	bf00      	nop
    2b14:	00002ad9 	.word	0x00002ad9

00002b18 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2b18:	b510      	push	{r4, lr}
    2b1a:	b084      	sub	sp, #16
    2b1c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2b1e:	9001      	str	r0, [sp, #4]
    2b20:	9102      	str	r1, [sp, #8]
    2b22:	2100      	movs	r1, #0
    2b24:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    2b26:	a901      	add	r1, sp, #4
    2b28:	4805      	ldr	r0, [pc, #20]	; (2b40 <vsnprintk+0x28>)
    2b2a:	f000 f93d 	bl	2da8 <cbvprintf>

	if (ctx.count < ctx.max) {
    2b2e:	9b03      	ldr	r3, [sp, #12]
    2b30:	9a02      	ldr	r2, [sp, #8]
    2b32:	4293      	cmp	r3, r2
    2b34:	da01      	bge.n	2b3a <vsnprintk+0x22>
		str[ctx.count] = '\0';
    2b36:	2200      	movs	r2, #0
    2b38:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2b3a:	9803      	ldr	r0, [sp, #12]
    2b3c:	b004      	add	sp, #16
    2b3e:	bd10      	pop	{r4, pc}
    2b40:	0000dc61 	.word	0x0000dc61

00002b44 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b48:	b083      	sub	sp, #12
    2b4a:	4604      	mov	r4, r0
    2b4c:	4608      	mov	r0, r1
    2b4e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2b50:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2b52:	f013 0f08 	tst.w	r3, #8
    2b56:	d105      	bne.n	2b64 <process_event+0x20>
    2b58:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2b5c:	2300      	movs	r3, #0
    2b5e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2b60:	9301      	str	r3, [sp, #4]
}
    2b62:	e069      	b.n	2c38 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    2b64:	2901      	cmp	r1, #1
    2b66:	d009      	beq.n	2b7c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2b68:	f043 0320 	orr.w	r3, r3, #32
    2b6c:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2b6e:	f385 8811 	msr	BASEPRI, r5
    2b72:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2b76:	b003      	add	sp, #12
    2b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2b7c:	f043 0310 	orr.w	r3, r3, #16
    2b80:	83a3      	strh	r3, [r4, #28]
    2b82:	e7f4      	b.n	2b6e <process_event+0x2a>
			evt = process_recheck(mgr);
    2b84:	4620      	mov	r0, r4
    2b86:	f00b f8c6 	bl	dd16 <process_recheck>
    2b8a:	e057      	b.n	2c3c <process_event+0xf8>
			res = mgr->last_res;
    2b8c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    2b90:	464a      	mov	r2, r9
    2b92:	4669      	mov	r1, sp
    2b94:	4620      	mov	r0, r4
    2b96:	f00b f8d7 	bl	dd48 <process_complete>
		onoff_transition_fn transit = NULL;
    2b9a:	2700      	movs	r7, #0
    2b9c:	e05a      	b.n	2c54 <process_event+0x110>
			transit = mgr->transitions->start;
    2b9e:	6923      	ldr	r3, [r4, #16]
    2ba0:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    2ba2:	2106      	movs	r1, #6
    2ba4:	4620      	mov	r0, r4
    2ba6:	f00b f88f 	bl	dcc8 <set_state>
		res = 0;
    2baa:	f04f 0900 	mov.w	r9, #0
    2bae:	e051      	b.n	2c54 <process_event+0x110>
			transit = mgr->transitions->stop;
    2bb0:	6923      	ldr	r3, [r4, #16]
    2bb2:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    2bb4:	2104      	movs	r1, #4
    2bb6:	4620      	mov	r0, r4
    2bb8:	f00b f886 	bl	dcc8 <set_state>
		res = 0;
    2bbc:	f04f 0900 	mov.w	r9, #0
    2bc0:	e048      	b.n	2c54 <process_event+0x110>
			transit = mgr->transitions->reset;
    2bc2:	6923      	ldr	r3, [r4, #16]
    2bc4:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    2bc6:	2105      	movs	r1, #5
    2bc8:	4620      	mov	r0, r4
    2bca:	f00b f87d 	bl	dcc8 <set_state>
		res = 0;
    2bce:	f04f 0900 	mov.w	r9, #0
    2bd2:	e03f      	b.n	2c54 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    2bd4:	2200      	movs	r2, #0
    2bd6:	e046      	b.n	2c66 <process_event+0x122>
    2bd8:	2200      	movs	r2, #0
    2bda:	e044      	b.n	2c66 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2bdc:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2be0:	83a3      	strh	r3, [r4, #28]
    2be2:	f385 8811 	msr	BASEPRI, r5
    2be6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2bea:	2900      	cmp	r1, #0
    2bec:	d144      	bne.n	2c78 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2bee:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    2bf0:	b12b      	cbz	r3, 2bfe <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    2bf2:	464b      	mov	r3, r9
    2bf4:	4642      	mov	r2, r8
    2bf6:	4669      	mov	r1, sp
    2bf8:	4620      	mov	r0, r4
    2bfa:	f00b f91b 	bl	de34 <notify_all>
			if (transit != NULL) {
    2bfe:	b117      	cbz	r7, 2c06 <process_event+0xc2>
				transit(mgr, transition_complete);
    2c00:	4925      	ldr	r1, [pc, #148]	; (2c98 <process_event+0x154>)
    2c02:	4620      	mov	r0, r4
    2c04:	47b8      	blx	r7
	__asm__ volatile(
    2c06:	f04f 0320 	mov.w	r3, #32
    2c0a:	f3ef 8511 	mrs	r5, BASEPRI
    2c0e:	f383 8812 	msr	BASEPRI_MAX, r3
    2c12:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2c16:	8ba3      	ldrh	r3, [r4, #28]
    2c18:	f023 0308 	bic.w	r3, r3, #8
    2c1c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2c1e:	8ba3      	ldrh	r3, [r4, #28]
    2c20:	f013 0f10 	tst.w	r3, #16
    2c24:	d02e      	beq.n	2c84 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2c26:	f023 0310 	bic.w	r3, r3, #16
    2c2a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    2c2c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2c2e:	8ba6      	ldrh	r6, [r4, #28]
    2c30:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    2c34:	2800      	cmp	r0, #0
    2c36:	d09a      	beq.n	2b6e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    2c38:	2802      	cmp	r0, #2
    2c3a:	d0a3      	beq.n	2b84 <process_event+0x40>
		if (evt == EVT_NOP) {
    2c3c:	2800      	cmp	r0, #0
    2c3e:	d096      	beq.n	2b6e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    2c40:	2801      	cmp	r0, #1
    2c42:	d0a3      	beq.n	2b8c <process_event+0x48>
		} else if (evt == EVT_START) {
    2c44:	2803      	cmp	r0, #3
    2c46:	d0aa      	beq.n	2b9e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    2c48:	2804      	cmp	r0, #4
    2c4a:	d0b1      	beq.n	2bb0 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    2c4c:	2805      	cmp	r0, #5
    2c4e:	d0b8      	beq.n	2bc2 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    2c50:	2700      	movs	r7, #0
		res = 0;
    2c52:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2c54:	8ba3      	ldrh	r3, [r4, #28]
    2c56:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2c5a:	45b0      	cmp	r8, r6
    2c5c:	d0ba      	beq.n	2bd4 <process_event+0x90>
    2c5e:	68a2      	ldr	r2, [r4, #8]
    2c60:	2a00      	cmp	r2, #0
    2c62:	d0b9      	beq.n	2bd8 <process_event+0x94>
    2c64:	2201      	movs	r2, #1
		if (do_monitors
    2c66:	4611      	mov	r1, r2
    2c68:	2a00      	cmp	r2, #0
    2c6a:	d1b7      	bne.n	2bdc <process_event+0x98>
    2c6c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    2c6e:	2a00      	cmp	r2, #0
    2c70:	d1b4      	bne.n	2bdc <process_event+0x98>
		    || (transit != NULL)) {
    2c72:	2f00      	cmp	r7, #0
    2c74:	d1b2      	bne.n	2bdc <process_event+0x98>
    2c76:	e7d2      	b.n	2c1e <process_event+0xda>
				notify_monitors(mgr, state, res);
    2c78:	464a      	mov	r2, r9
    2c7a:	4641      	mov	r1, r8
    2c7c:	4620      	mov	r0, r4
    2c7e:	f00b f82b 	bl	dcd8 <notify_monitors>
    2c82:	e7b4      	b.n	2bee <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2c84:	f013 0f20 	tst.w	r3, #32
    2c88:	d004      	beq.n	2c94 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2c8a:	f023 0320 	bic.w	r3, r3, #32
    2c8e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    2c90:	2002      	movs	r0, #2
    2c92:	e7cc      	b.n	2c2e <process_event+0xea>
		evt = EVT_NOP;
    2c94:	2000      	movs	r0, #0
    2c96:	e7ca      	b.n	2c2e <process_event+0xea>
    2c98:	0000de63 	.word	0x0000de63

00002c9c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    2c9c:	b410      	push	{r4}
    2c9e:	4604      	mov	r4, r0
	const char *sp = *str;
    2ca0:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    2ca2:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    2ca4:	7813      	ldrb	r3, [r2, #0]
    2ca6:	4907      	ldr	r1, [pc, #28]	; (2cc4 <extract_decimal+0x28>)
    2ca8:	5c59      	ldrb	r1, [r3, r1]
    2caa:	f011 0f04 	tst.w	r1, #4
    2cae:	d006      	beq.n	2cbe <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    2cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2cb4:	3201      	adds	r2, #1
    2cb6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2cba:	3830      	subs	r0, #48	; 0x30
    2cbc:	e7f2      	b.n	2ca4 <extract_decimal+0x8>
	}
	*str = sp;
    2cbe:	6022      	str	r2, [r4, #0]
	return val;
}
    2cc0:	bc10      	pop	{r4}
    2cc2:	4770      	bx	lr
    2cc4:	00057a99 	.word	0x00057a99

00002cc8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    2cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ccc:	b083      	sub	sp, #12
    2cce:	4604      	mov	r4, r0
    2cd0:	460d      	mov	r5, r1
    2cd2:	9201      	str	r2, [sp, #4]
    2cd4:	469a      	mov	sl, r3
    2cd6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    2cda:	78d3      	ldrb	r3, [r2, #3]
    2cdc:	4a31      	ldr	r2, [pc, #196]	; (2da4 <encode_uint+0xdc>)
    2cde:	f813 b002 	ldrb.w	fp, [r3, r2]
    2ce2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    2ce6:	2b6f      	cmp	r3, #111	; 0x6f
    2ce8:	d00f      	beq.n	2d0a <encode_uint+0x42>
    2cea:	d906      	bls.n	2cfa <encode_uint+0x32>
    2cec:	2b70      	cmp	r3, #112	; 0x70
    2cee:	d00f      	beq.n	2d10 <encode_uint+0x48>
    2cf0:	2b78      	cmp	r3, #120	; 0x78
    2cf2:	d110      	bne.n	2d16 <encode_uint+0x4e>
		return 16;
    2cf4:	f04f 0910 	mov.w	r9, #16
    2cf8:	e023      	b.n	2d42 <encode_uint+0x7a>
	switch (specifier) {
    2cfa:	2b58      	cmp	r3, #88	; 0x58
    2cfc:	d002      	beq.n	2d04 <encode_uint+0x3c>
    2cfe:	f04f 090a 	mov.w	r9, #10
    2d02:	e01e      	b.n	2d42 <encode_uint+0x7a>
		return 16;
    2d04:	f04f 0910 	mov.w	r9, #16
    2d08:	e01b      	b.n	2d42 <encode_uint+0x7a>
		return 8;
    2d0a:	f04f 0908 	mov.w	r9, #8
    2d0e:	e018      	b.n	2d42 <encode_uint+0x7a>
		return 16;
    2d10:	f04f 0910 	mov.w	r9, #16
    2d14:	e015      	b.n	2d42 <encode_uint+0x7a>
	switch (specifier) {
    2d16:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    2d1a:	e012      	b.n	2d42 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    2d1c:	b2d2      	uxtb	r2, r2
    2d1e:	3230      	adds	r2, #48	; 0x30
    2d20:	b2d2      	uxtb	r2, r2
    2d22:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    2d26:	4632      	mov	r2, r6
    2d28:	463b      	mov	r3, r7
    2d2a:	4620      	mov	r0, r4
    2d2c:	4629      	mov	r1, r5
    2d2e:	f7fe f9db 	bl	10e8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    2d32:	42bd      	cmp	r5, r7
    2d34:	bf08      	it	eq
    2d36:	42b4      	cmpeq	r4, r6
    2d38:	d318      	bcc.n	2d6c <encode_uint+0xa4>
    2d3a:	45d0      	cmp	r8, sl
    2d3c:	d916      	bls.n	2d6c <encode_uint+0xa4>
		value /= radix;
    2d3e:	4604      	mov	r4, r0
    2d40:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    2d42:	464e      	mov	r6, r9
    2d44:	2700      	movs	r7, #0
    2d46:	464a      	mov	r2, r9
    2d48:	463b      	mov	r3, r7
    2d4a:	4620      	mov	r0, r4
    2d4c:	4629      	mov	r1, r5
    2d4e:	f7fe f9cb 	bl	10e8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2d52:	2a09      	cmp	r2, #9
    2d54:	d9e2      	bls.n	2d1c <encode_uint+0x54>
    2d56:	f1bb 0f01 	cmp.w	fp, #1
    2d5a:	d003      	beq.n	2d64 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    2d5c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2d5e:	3257      	adds	r2, #87	; 0x57
    2d60:	b2d2      	uxtb	r2, r2
    2d62:	e7de      	b.n	2d22 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    2d64:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2d66:	3237      	adds	r2, #55	; 0x37
    2d68:	b2d2      	uxtb	r2, r2
    2d6a:	e7da      	b.n	2d22 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    2d6c:	9b01      	ldr	r3, [sp, #4]
    2d6e:	781b      	ldrb	r3, [r3, #0]
    2d70:	f013 0f20 	tst.w	r3, #32
    2d74:	d005      	beq.n	2d82 <encode_uint+0xba>
		if (radix == 8) {
    2d76:	f1b9 0f08 	cmp.w	r9, #8
    2d7a:	d006      	beq.n	2d8a <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    2d7c:	f1b9 0f10 	cmp.w	r9, #16
    2d80:	d009      	beq.n	2d96 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    2d82:	4640      	mov	r0, r8
    2d84:	b003      	add	sp, #12
    2d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    2d8a:	9a01      	ldr	r2, [sp, #4]
    2d8c:	7893      	ldrb	r3, [r2, #2]
    2d8e:	f043 0308 	orr.w	r3, r3, #8
    2d92:	7093      	strb	r3, [r2, #2]
    2d94:	e7f5      	b.n	2d82 <encode_uint+0xba>
			conv->altform_0c = true;
    2d96:	9a01      	ldr	r2, [sp, #4]
    2d98:	7893      	ldrb	r3, [r2, #2]
    2d9a:	f043 0310 	orr.w	r3, r3, #16
    2d9e:	7093      	strb	r3, [r2, #2]
    2da0:	e7ef      	b.n	2d82 <encode_uint+0xba>
    2da2:	bf00      	nop
    2da4:	00057a99 	.word	0x00057a99

00002da8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dac:	b093      	sub	sp, #76	; 0x4c
    2dae:	4606      	mov	r6, r0
    2db0:	460d      	mov	r5, r1
    2db2:	4692      	mov	sl, r2
    2db4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2db6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2db8:	f89a 0000 	ldrb.w	r0, [sl]
    2dbc:	2800      	cmp	r0, #0
    2dbe:	f000 84d6 	beq.w	376e <cbvprintf+0x9c6>
		if (*fp != '%') {
    2dc2:	2825      	cmp	r0, #37	; 0x25
    2dc4:	d008      	beq.n	2dd8 <cbvprintf+0x30>
			OUTC(*fp++);
    2dc6:	f10a 0a01 	add.w	sl, sl, #1
    2dca:	4629      	mov	r1, r5
    2dcc:	47b0      	blx	r6
    2dce:	2800      	cmp	r0, #0
    2dd0:	f2c0 84ce 	blt.w	3770 <cbvprintf+0x9c8>
    2dd4:	3401      	adds	r4, #1
			continue;
    2dd6:	e7ef      	b.n	2db8 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2dd8:	2300      	movs	r3, #0
    2dda:	9306      	str	r3, [sp, #24]
    2ddc:	9307      	str	r3, [sp, #28]
    2dde:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    2de0:	9308      	str	r3, [sp, #32]
    2de2:	9309      	str	r3, [sp, #36]	; 0x24
    2de4:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    2de6:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    2dea:	f89a 3001 	ldrb.w	r3, [sl, #1]
    2dee:	2b25      	cmp	r3, #37	; 0x25
    2df0:	d001      	beq.n	2df6 <cbvprintf+0x4e>
	bool loop = true;
    2df2:	2701      	movs	r7, #1
    2df4:	e02c      	b.n	2e50 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    2df6:	f10a 0802 	add.w	r8, sl, #2
    2dfa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    2dfe:	e1a8      	b.n	3152 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    2e00:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e04:	f043 0304 	orr.w	r3, r3, #4
    2e08:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    2e0c:	b1ff      	cbz	r7, 2e4e <cbvprintf+0xa6>
			++sp;
    2e0e:	f108 0801 	add.w	r8, r8, #1
    2e12:	e01c      	b.n	2e4e <cbvprintf+0xa6>
			conv->flag_plus = true;
    2e14:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e18:	f043 0308 	orr.w	r3, r3, #8
    2e1c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2e20:	e7f4      	b.n	2e0c <cbvprintf+0x64>
			conv->flag_space = true;
    2e22:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e26:	f043 0310 	orr.w	r3, r3, #16
    2e2a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2e2e:	e7ed      	b.n	2e0c <cbvprintf+0x64>
			conv->flag_hash = true;
    2e30:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e34:	f043 0320 	orr.w	r3, r3, #32
    2e38:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2e3c:	e7e6      	b.n	2e0c <cbvprintf+0x64>
			conv->flag_zero = true;
    2e3e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2e46:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2e4a:	e7df      	b.n	2e0c <cbvprintf+0x64>
		switch (*sp) {
    2e4c:	2700      	movs	r7, #0
	} while (loop);
    2e4e:	b34f      	cbz	r7, 2ea4 <cbvprintf+0xfc>
		switch (*sp) {
    2e50:	f898 3000 	ldrb.w	r3, [r8]
    2e54:	3b20      	subs	r3, #32
    2e56:	2b10      	cmp	r3, #16
    2e58:	d8f8      	bhi.n	2e4c <cbvprintf+0xa4>
    2e5a:	a201      	add	r2, pc, #4	; (adr r2, 2e60 <cbvprintf+0xb8>)
    2e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e60:	00002e23 	.word	0x00002e23
    2e64:	00002e4d 	.word	0x00002e4d
    2e68:	00002e4d 	.word	0x00002e4d
    2e6c:	00002e31 	.word	0x00002e31
    2e70:	00002e4d 	.word	0x00002e4d
    2e74:	00002e4d 	.word	0x00002e4d
    2e78:	00002e4d 	.word	0x00002e4d
    2e7c:	00002e4d 	.word	0x00002e4d
    2e80:	00002e4d 	.word	0x00002e4d
    2e84:	00002e4d 	.word	0x00002e4d
    2e88:	00002e4d 	.word	0x00002e4d
    2e8c:	00002e15 	.word	0x00002e15
    2e90:	00002e4d 	.word	0x00002e4d
    2e94:	00002e01 	.word	0x00002e01
    2e98:	00002e4d 	.word	0x00002e4d
    2e9c:	00002e4d 	.word	0x00002e4d
    2ea0:	00002e3f 	.word	0x00002e3f
	if (conv->flag_zero && conv->flag_dash) {
    2ea4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2ea8:	f003 0344 	and.w	r3, r3, #68	; 0x44
    2eac:	2b44      	cmp	r3, #68	; 0x44
    2eae:	d06d      	beq.n	2f8c <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    2eb0:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    2eb4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2ebc:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    2ec0:	f898 3000 	ldrb.w	r3, [r8]
    2ec4:	2b2a      	cmp	r3, #42	; 0x2a
    2ec6:	d068      	beq.n	2f9a <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    2ec8:	a805      	add	r0, sp, #20
    2eca:	f7ff fee7 	bl	2c9c <extract_decimal>
	if (sp != wp) {
    2ece:	9b05      	ldr	r3, [sp, #20]
    2ed0:	4598      	cmp	r8, r3
    2ed2:	d012      	beq.n	2efa <cbvprintf+0x152>
		conv->width_present = true;
    2ed4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2edc:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    2ee0:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    2ee2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    2ee6:	2800      	cmp	r0, #0
    2ee8:	db60      	blt.n	2fac <cbvprintf+0x204>
    2eea:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    2eec:	4313      	orrs	r3, r2
    2eee:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2ef2:	f363 0241 	bfi	r2, r3, #1, #1
    2ef6:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2efa:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    2efc:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    2efe:	781b      	ldrb	r3, [r3, #0]
    2f00:	2b2e      	cmp	r3, #46	; 0x2e
    2f02:	bf14      	ite	ne
    2f04:	2300      	movne	r3, #0
    2f06:	2301      	moveq	r3, #1
    2f08:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2f0c:	f363 0241 	bfi	r2, r3, #1, #1
    2f10:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    2f14:	2b00      	cmp	r3, #0
    2f16:	d04b      	beq.n	2fb0 <cbvprintf+0x208>
	++sp;
    2f18:	9b05      	ldr	r3, [sp, #20]
    2f1a:	1c5a      	adds	r2, r3, #1
    2f1c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    2f1e:	785b      	ldrb	r3, [r3, #1]
    2f20:	2b2a      	cmp	r3, #42	; 0x2a
    2f22:	d048      	beq.n	2fb6 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    2f24:	a805      	add	r0, sp, #20
    2f26:	f7ff feb9 	bl	2c9c <extract_decimal>
	conv->prec_value = prec;
    2f2a:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    2f2c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2f30:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    2f34:	2800      	cmp	r0, #0
    2f36:	db47      	blt.n	2fc8 <cbvprintf+0x220>
    2f38:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2f3a:	4313      	orrs	r3, r2
    2f3c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2f40:	f363 0241 	bfi	r2, r3, #1, #1
    2f44:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2f48:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    2f4c:	f898 3000 	ldrb.w	r3, [r8]
    2f50:	3b4c      	subs	r3, #76	; 0x4c
    2f52:	2b2e      	cmp	r3, #46	; 0x2e
    2f54:	f200 80dc 	bhi.w	3110 <cbvprintf+0x368>
    2f58:	e8df f003 	tbb	[pc, r3]
    2f5c:	dadadaca 	.word	0xdadadaca
    2f60:	dadadada 	.word	0xdadadada
    2f64:	dadadada 	.word	0xdadadada
    2f68:	dadadada 	.word	0xdadadada
    2f6c:	dadadada 	.word	0xdadadada
    2f70:	dadadada 	.word	0xdadadada
    2f74:	dadadada 	.word	0xdadadada
    2f78:	da6ada38 	.word	0xda6ada38
    2f7c:	dadada51 	.word	0xdadada51
    2f80:	dadadada 	.word	0xdadadada
    2f84:	dadadac0 	.word	0xdadadac0
    2f88:	dada      	.short	0xdada
    2f8a:	b6          	.byte	0xb6
    2f8b:	00          	.byte	0x00
		conv->flag_zero = false;
    2f8c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2f90:	f36f 1386 	bfc	r3, #6, #1
    2f94:	f88d 3020 	strb.w	r3, [sp, #32]
    2f98:	e78a      	b.n	2eb0 <cbvprintf+0x108>
		conv->width_star = true;
    2f9a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2f9e:	f043 0301 	orr.w	r3, r3, #1
    2fa2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    2fa6:	4643      	mov	r3, r8
    2fa8:	3301      	adds	r3, #1
    2faa:	e7a7      	b.n	2efc <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    2fac:	2201      	movs	r2, #1
    2fae:	e79d      	b.n	2eec <cbvprintf+0x144>
		return sp;
    2fb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2fb4:	e7ca      	b.n	2f4c <cbvprintf+0x1a4>
		conv->prec_star = true;
    2fb6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2fba:	f043 0304 	orr.w	r3, r3, #4
    2fbe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    2fc2:	f102 0801 	add.w	r8, r2, #1
    2fc6:	e7c1      	b.n	2f4c <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    2fc8:	2201      	movs	r2, #1
    2fca:	e7b6      	b.n	2f3a <cbvprintf+0x192>
		if (*++sp == 'h') {
    2fcc:	f108 0201 	add.w	r2, r8, #1
    2fd0:	f898 3001 	ldrb.w	r3, [r8, #1]
    2fd4:	2b68      	cmp	r3, #104	; 0x68
    2fd6:	d008      	beq.n	2fea <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    2fd8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2fdc:	2102      	movs	r1, #2
    2fde:	f361 03c6 	bfi	r3, r1, #3, #4
    2fe2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    2fe6:	4690      	mov	r8, r2
    2fe8:	e02b      	b.n	3042 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    2fea:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2fee:	2201      	movs	r2, #1
    2ff0:	f362 03c6 	bfi	r3, r2, #3, #4
    2ff4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    2ff8:	f108 0802 	add.w	r8, r8, #2
    2ffc:	e021      	b.n	3042 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    2ffe:	f108 0201 	add.w	r2, r8, #1
    3002:	f898 3001 	ldrb.w	r3, [r8, #1]
    3006:	2b6c      	cmp	r3, #108	; 0x6c
    3008:	d008      	beq.n	301c <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    300a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    300e:	2103      	movs	r1, #3
    3010:	f361 03c6 	bfi	r3, r1, #3, #4
    3014:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    3018:	4690      	mov	r8, r2
    301a:	e012      	b.n	3042 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    301c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3020:	2204      	movs	r2, #4
    3022:	f362 03c6 	bfi	r3, r2, #3, #4
    3026:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    302a:	f108 0802 	add.w	r8, r8, #2
    302e:	e008      	b.n	3042 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    3030:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3034:	2205      	movs	r2, #5
    3036:	f362 03c6 	bfi	r3, r2, #3, #4
    303a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    303e:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    3042:	f818 3b01 	ldrb.w	r3, [r8], #1
    3046:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    304a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    304e:	2a37      	cmp	r2, #55	; 0x37
    3050:	f200 8150 	bhi.w	32f4 <cbvprintf+0x54c>
    3054:	e8df f012 	tbh	[pc, r2, lsl #1]
    3058:	014e0126 	.word	0x014e0126
    305c:	014e014e 	.word	0x014e014e
    3060:	01260126 	.word	0x01260126
    3064:	014e0126 	.word	0x014e0126
    3068:	014e014e 	.word	0x014e014e
    306c:	014e014e 	.word	0x014e014e
    3070:	014e014e 	.word	0x014e014e
    3074:	014e014e 	.word	0x014e014e
    3078:	014e014e 	.word	0x014e014e
    307c:	014e014e 	.word	0x014e014e
    3080:	014e014e 	.word	0x014e014e
    3084:	0113014e 	.word	0x0113014e
    3088:	014e014e 	.word	0x014e014e
    308c:	014e014e 	.word	0x014e014e
    3090:	014e014e 	.word	0x014e014e
    3094:	014e014e 	.word	0x014e014e
    3098:	014e0126 	.word	0x014e0126
    309c:	00630113 	.word	0x00630113
    30a0:	01260126 	.word	0x01260126
    30a4:	014e0126 	.word	0x014e0126
    30a8:	014e0063 	.word	0x014e0063
    30ac:	014e014e 	.word	0x014e014e
    30b0:	012f014e 	.word	0x012f014e
    30b4:	013f0113 	.word	0x013f0113
    30b8:	014e014e 	.word	0x014e014e
    30bc:	014e013f 	.word	0x014e013f
    30c0:	014e0113 	.word	0x014e0113
    30c4:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    30c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    30cc:	2206      	movs	r2, #6
    30ce:	f362 03c6 	bfi	r3, r2, #3, #4
    30d2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    30d6:	f108 0801 	add.w	r8, r8, #1
		break;
    30da:	e7b2      	b.n	3042 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    30dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    30e0:	2207      	movs	r2, #7
    30e2:	f362 03c6 	bfi	r3, r2, #3, #4
    30e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    30ea:	f108 0801 	add.w	r8, r8, #1
		break;
    30ee:	e7a8      	b.n	3042 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    30f0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    30f4:	2208      	movs	r2, #8
    30f6:	f362 03c6 	bfi	r3, r2, #3, #4
    30fa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    30fe:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    3102:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3106:	f043 0302 	orr.w	r3, r3, #2
    310a:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    310e:	e798      	b.n	3042 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    3110:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3114:	f36f 03c6 	bfc	r3, #3, #4
    3118:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    311c:	e791      	b.n	3042 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    311e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3122:	2101      	movs	r1, #1
    3124:	f361 0202 	bfi	r2, r1, #0, #3
    3128:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    312c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    3130:	f002 0278 	and.w	r2, r2, #120	; 0x78
    3134:	2a40      	cmp	r2, #64	; 0x40
    3136:	f000 80aa 	beq.w	328e <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    313a:	2b63      	cmp	r3, #99	; 0x63
    313c:	f000 80ae 	beq.w	329c <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    3140:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3144:	f3c3 0240 	ubfx	r2, r3, #1, #1
    3148:	4317      	orrs	r7, r2
    314a:	f367 0341 	bfi	r3, r7, #1, #1
    314e:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    3152:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3156:	f013 0f01 	tst.w	r3, #1
    315a:	f000 80da 	beq.w	3312 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    315e:	9b03      	ldr	r3, [sp, #12]
    3160:	1d1a      	adds	r2, r3, #4
    3162:	9203      	str	r2, [sp, #12]
    3164:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    3166:	2f00      	cmp	r7, #0
    3168:	f2c0 80cb 	blt.w	3302 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    316c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3170:	f013 0f04 	tst.w	r3, #4
    3174:	f000 80df 	beq.w	3336 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    3178:	9b03      	ldr	r3, [sp, #12]
    317a:	1d1a      	adds	r2, r3, #4
    317c:	9203      	str	r2, [sp, #12]
    317e:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    3182:	f1bb 0f00 	cmp.w	fp, #0
    3186:	f2c0 80cd 	blt.w	3324 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    318a:	2300      	movs	r3, #0
    318c:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    318e:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    3190:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3194:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    3198:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    319c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    31a0:	2b01      	cmp	r3, #1
    31a2:	f000 80d1 	beq.w	3348 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    31a6:	2b02      	cmp	r3, #2
    31a8:	f000 8116 	beq.w	33d8 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    31ac:	2b04      	cmp	r3, #4
    31ae:	f000 8167 	beq.w	3480 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    31b2:	2b03      	cmp	r3, #3
    31b4:	f000 817e 	beq.w	34b4 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    31b8:	f89d 9020 	ldrb.w	r9, [sp, #32]
    31bc:	f019 0303 	ands.w	r3, r9, #3
    31c0:	9302      	str	r3, [sp, #8]
    31c2:	f040 817d 	bne.w	34c0 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    31c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    31ca:	3b25      	subs	r3, #37	; 0x25
    31cc:	2b53      	cmp	r3, #83	; 0x53
    31ce:	f200 8233 	bhi.w	3638 <cbvprintf+0x890>
    31d2:	e8df f013 	tbh	[pc, r3, lsl #1]
    31d6:	0181      	.short	0x0181
    31d8:	02310231 	.word	0x02310231
    31dc:	02310231 	.word	0x02310231
    31e0:	02310231 	.word	0x02310231
    31e4:	02310231 	.word	0x02310231
    31e8:	02310231 	.word	0x02310231
    31ec:	02310231 	.word	0x02310231
    31f0:	02310231 	.word	0x02310231
    31f4:	02310231 	.word	0x02310231
    31f8:	02310231 	.word	0x02310231
    31fc:	02310231 	.word	0x02310231
    3200:	02310231 	.word	0x02310231
    3204:	02310231 	.word	0x02310231
    3208:	02310231 	.word	0x02310231
    320c:	02310231 	.word	0x02310231
    3210:	02310231 	.word	0x02310231
    3214:	02310231 	.word	0x02310231
    3218:	02310231 	.word	0x02310231
    321c:	02310231 	.word	0x02310231
    3220:	02310231 	.word	0x02310231
    3224:	02310231 	.word	0x02310231
    3228:	02310231 	.word	0x02310231
    322c:	02310231 	.word	0x02310231
    3230:	02310231 	.word	0x02310231
    3234:	02310231 	.word	0x02310231
    3238:	02310231 	.word	0x02310231
    323c:	023101c7 	.word	0x023101c7
    3240:	02310231 	.word	0x02310231
    3244:	02310231 	.word	0x02310231
    3248:	02310231 	.word	0x02310231
    324c:	02310231 	.word	0x02310231
    3250:	01a10231 	.word	0x01a10231
    3254:	023101ab 	.word	0x023101ab
    3258:	02310231 	.word	0x02310231
    325c:	01ab0231 	.word	0x01ab0231
    3260:	02310231 	.word	0x02310231
    3264:	02310231 	.word	0x02310231
    3268:	01c70208 	.word	0x01c70208
    326c:	023101ea 	.word	0x023101ea
    3270:	018f0231 	.word	0x018f0231
    3274:	01c70231 	.word	0x01c70231
    3278:	02310231 	.word	0x02310231
    327c:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    327e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3282:	2102      	movs	r1, #2
    3284:	f361 0202 	bfi	r2, r1, #0, #3
    3288:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    328c:	e74e      	b.n	312c <cbvprintf+0x384>
			conv->invalid = true;
    328e:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3292:	f041 0101 	orr.w	r1, r1, #1
    3296:	f88d 1020 	strb.w	r1, [sp, #32]
    329a:	e74e      	b.n	313a <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    329c:	1e17      	subs	r7, r2, #0
    329e:	bf18      	it	ne
    32a0:	2701      	movne	r7, #1
    32a2:	e74d      	b.n	3140 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    32a4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    32a8:	2204      	movs	r2, #4
    32aa:	f362 0302 	bfi	r3, r2, #0, #3
    32ae:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    32b2:	2701      	movs	r7, #1
			break;
    32b4:	e744      	b.n	3140 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    32b6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    32ba:	2203      	movs	r2, #3
    32bc:	f362 0302 	bfi	r3, r2, #0, #3
    32c0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    32c4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    32c8:	f003 0378 	and.w	r3, r3, #120	; 0x78
    32cc:	2b40      	cmp	r3, #64	; 0x40
    32ce:	f47f af37 	bne.w	3140 <cbvprintf+0x398>
			unsupported = true;
    32d2:	2701      	movs	r7, #1
    32d4:	e734      	b.n	3140 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    32d6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    32da:	2203      	movs	r2, #3
    32dc:	f362 0302 	bfi	r3, r2, #0, #3
    32e0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    32e4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    32e8:	f013 0f78 	tst.w	r3, #120	; 0x78
    32ec:	f43f af28 	beq.w	3140 <cbvprintf+0x398>
			unsupported = true;
    32f0:	2701      	movs	r7, #1
    32f2:	e725      	b.n	3140 <cbvprintf+0x398>
		conv->invalid = true;
    32f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32f8:	f043 0301 	orr.w	r3, r3, #1
    32fc:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    3300:	e71e      	b.n	3140 <cbvprintf+0x398>
				conv->flag_dash = true;
    3302:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3306:	f043 0304 	orr.w	r3, r3, #4
    330a:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    330e:	427f      	negs	r7, r7
    3310:	e72c      	b.n	316c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    3312:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    3316:	2b00      	cmp	r3, #0
    3318:	db02      	blt.n	3320 <cbvprintf+0x578>
		int width = -1;
    331a:	f04f 37ff 	mov.w	r7, #4294967295
    331e:	e725      	b.n	316c <cbvprintf+0x3c4>
			width = conv->width_value;
    3320:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3322:	e723      	b.n	316c <cbvprintf+0x3c4>
				conv->prec_present = false;
    3324:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3328:	f36f 0341 	bfc	r3, #1, #1
    332c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    3330:	f04f 3bff 	mov.w	fp, #4294967295
    3334:	e729      	b.n	318a <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    3336:	f013 0f02 	tst.w	r3, #2
    333a:	d002      	beq.n	3342 <cbvprintf+0x59a>
			precision = conv->prec_value;
    333c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    3340:	e723      	b.n	318a <cbvprintf+0x3e2>
		int precision = -1;
    3342:	f04f 3bff 	mov.w	fp, #4294967295
    3346:	e720      	b.n	318a <cbvprintf+0x3e2>
			switch (length_mod) {
    3348:	1ecb      	subs	r3, r1, #3
    334a:	2b04      	cmp	r3, #4
    334c:	d804      	bhi.n	3358 <cbvprintf+0x5b0>
    334e:	e8df f003 	tbb	[pc, r3]
    3352:	1d0b      	.short	0x1d0b
    3354:	3529      	.short	0x3529
    3356:	35          	.byte	0x35
    3357:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    3358:	9b03      	ldr	r3, [sp, #12]
    335a:	1d1a      	adds	r2, r3, #4
    335c:	9203      	str	r2, [sp, #12]
    335e:	681a      	ldr	r2, [r3, #0]
    3360:	17d3      	asrs	r3, r2, #31
    3362:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3366:	e006      	b.n	3376 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    3368:	9b03      	ldr	r3, [sp, #12]
    336a:	1d1a      	adds	r2, r3, #4
    336c:	9203      	str	r2, [sp, #12]
    336e:	681a      	ldr	r2, [r3, #0]
    3370:	17d3      	asrs	r3, r2, #31
    3372:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    3376:	2901      	cmp	r1, #1
    3378:	d028      	beq.n	33cc <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    337a:	2902      	cmp	r1, #2
    337c:	f47f af1c 	bne.w	31b8 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    3380:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    3384:	17d3      	asrs	r3, r2, #31
    3386:	e9cd 2306 	strd	r2, r3, [sp, #24]
    338a:	e715      	b.n	31b8 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    338c:	9b03      	ldr	r3, [sp, #12]
    338e:	3307      	adds	r3, #7
    3390:	f023 0307 	bic.w	r3, r3, #7
    3394:	f103 0208 	add.w	r2, r3, #8
    3398:	9203      	str	r2, [sp, #12]
    339a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    339e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    33a2:	e7e8      	b.n	3376 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    33a4:	9b03      	ldr	r3, [sp, #12]
    33a6:	3307      	adds	r3, #7
    33a8:	f023 0307 	bic.w	r3, r3, #7
    33ac:	f103 0208 	add.w	r2, r3, #8
    33b0:	9203      	str	r2, [sp, #12]
    33b2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    33b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    33ba:	e7dc      	b.n	3376 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    33bc:	9b03      	ldr	r3, [sp, #12]
    33be:	1d1a      	adds	r2, r3, #4
    33c0:	9203      	str	r2, [sp, #12]
    33c2:	681a      	ldr	r2, [r3, #0]
    33c4:	17d3      	asrs	r3, r2, #31
				value->sint =
    33c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    33ca:	e7d4      	b.n	3376 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    33cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    33d0:	9306      	str	r3, [sp, #24]
    33d2:	2300      	movs	r3, #0
    33d4:	9307      	str	r3, [sp, #28]
    33d6:	e6ef      	b.n	31b8 <cbvprintf+0x410>
			switch (length_mod) {
    33d8:	1ecb      	subs	r3, r1, #3
    33da:	2b04      	cmp	r3, #4
    33dc:	d804      	bhi.n	33e8 <cbvprintf+0x640>
    33de:	e8df f003 	tbb	[pc, r3]
    33e2:	1f0b      	.short	0x1f0b
    33e4:	4135      	.short	0x4135
    33e6:	41          	.byte	0x41
    33e7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    33e8:	9b03      	ldr	r3, [sp, #12]
    33ea:	1d1a      	adds	r2, r3, #4
    33ec:	9203      	str	r2, [sp, #12]
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	9306      	str	r3, [sp, #24]
    33f2:	2300      	movs	r3, #0
    33f4:	9307      	str	r3, [sp, #28]
				break;
    33f6:	e01e      	b.n	3436 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    33f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    33fc:	2b63      	cmp	r3, #99	; 0x63
    33fe:	d007      	beq.n	3410 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    3400:	9b03      	ldr	r3, [sp, #12]
    3402:	1d1a      	adds	r2, r3, #4
    3404:	9203      	str	r2, [sp, #12]
    3406:	681b      	ldr	r3, [r3, #0]
    3408:	9306      	str	r3, [sp, #24]
    340a:	2300      	movs	r3, #0
    340c:	9307      	str	r3, [sp, #28]
    340e:	e012      	b.n	3436 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    3410:	9b03      	ldr	r3, [sp, #12]
    3412:	1d1a      	adds	r2, r3, #4
    3414:	9203      	str	r2, [sp, #12]
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	9306      	str	r3, [sp, #24]
    341a:	2300      	movs	r3, #0
    341c:	9307      	str	r3, [sp, #28]
    341e:	e00a      	b.n	3436 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    3420:	9b03      	ldr	r3, [sp, #12]
    3422:	3307      	adds	r3, #7
    3424:	f023 0307 	bic.w	r3, r3, #7
    3428:	f103 0208 	add.w	r2, r3, #8
    342c:	9203      	str	r2, [sp, #12]
    342e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3432:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    3436:	2901      	cmp	r1, #1
    3438:	d01c      	beq.n	3474 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    343a:	2902      	cmp	r1, #2
    343c:	f47f aebc 	bne.w	31b8 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    3440:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    3444:	9306      	str	r3, [sp, #24]
    3446:	2300      	movs	r3, #0
    3448:	9307      	str	r3, [sp, #28]
    344a:	e6b5      	b.n	31b8 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    344c:	9b03      	ldr	r3, [sp, #12]
    344e:	3307      	adds	r3, #7
    3450:	f023 0307 	bic.w	r3, r3, #7
    3454:	f103 0208 	add.w	r2, r3, #8
    3458:	9203      	str	r2, [sp, #12]
    345a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    345e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3462:	e7e8      	b.n	3436 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    3464:	9b03      	ldr	r3, [sp, #12]
    3466:	1d1a      	adds	r2, r3, #4
    3468:	9203      	str	r2, [sp, #12]
    346a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    346c:	9306      	str	r3, [sp, #24]
    346e:	2300      	movs	r3, #0
    3470:	9307      	str	r3, [sp, #28]
				break;
    3472:	e7e0      	b.n	3436 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    3474:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3478:	9306      	str	r3, [sp, #24]
    347a:	2300      	movs	r3, #0
    347c:	9307      	str	r3, [sp, #28]
    347e:	e69b      	b.n	31b8 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    3480:	2908      	cmp	r1, #8
    3482:	d00b      	beq.n	349c <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    3484:	9b03      	ldr	r3, [sp, #12]
    3486:	3307      	adds	r3, #7
    3488:	f023 0307 	bic.w	r3, r3, #7
    348c:	f103 0208 	add.w	r2, r3, #8
    3490:	9203      	str	r2, [sp, #12]
    3492:	e9d3 2300 	ldrd	r2, r3, [r3]
    3496:	e9cd 2306 	strd	r2, r3, [sp, #24]
    349a:	e68d      	b.n	31b8 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    349c:	9b03      	ldr	r3, [sp, #12]
    349e:	3307      	adds	r3, #7
    34a0:	f023 0307 	bic.w	r3, r3, #7
    34a4:	f103 0208 	add.w	r2, r3, #8
    34a8:	9203      	str	r2, [sp, #12]
    34aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    34ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    34b2:	e681      	b.n	31b8 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    34b4:	9b03      	ldr	r3, [sp, #12]
    34b6:	1d1a      	adds	r2, r3, #4
    34b8:	9203      	str	r2, [sp, #12]
    34ba:	681b      	ldr	r3, [r3, #0]
    34bc:	9306      	str	r3, [sp, #24]
    34be:	e67b      	b.n	31b8 <cbvprintf+0x410>
			OUTS(sp, fp);
    34c0:	4643      	mov	r3, r8
    34c2:	4652      	mov	r2, sl
    34c4:	4629      	mov	r1, r5
    34c6:	4630      	mov	r0, r6
    34c8:	f00a fe51 	bl	e16e <outs>
    34cc:	2800      	cmp	r0, #0
    34ce:	f2c0 814f 	blt.w	3770 <cbvprintf+0x9c8>
    34d2:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    34d4:	46c2      	mov	sl, r8
			continue;
    34d6:	e46f      	b.n	2db8 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    34d8:	4629      	mov	r1, r5
    34da:	2025      	movs	r0, #37	; 0x25
    34dc:	47b0      	blx	r6
    34de:	2800      	cmp	r0, #0
    34e0:	f2c0 8146 	blt.w	3770 <cbvprintf+0x9c8>
    34e4:	3401      	adds	r4, #1
		char sign = 0;
    34e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    34ea:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    34ee:	f04f 0a00 	mov.w	sl, #0
			break;
    34f2:	e0a7      	b.n	3644 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    34f4:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    34f8:	f1bb 0f00 	cmp.w	fp, #0
    34fc:	db08      	blt.n	3510 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    34fe:	4659      	mov	r1, fp
    3500:	4650      	mov	r0, sl
    3502:	f00c ffe1 	bl	104c8 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    3506:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    350a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    350e:	e099      	b.n	3644 <cbvprintf+0x89c>
				len = strlen(bps);
    3510:	4650      	mov	r0, sl
    3512:	f7fd ffdf 	bl	14d4 <strlen>
    3516:	e7f6      	b.n	3506 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3518:	9b06      	ldr	r3, [sp, #24]
    351a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    351e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    3522:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    3526:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    352a:	e08b      	b.n	3644 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    352c:	f019 0f08 	tst.w	r9, #8
    3530:	d105      	bne.n	353e <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    3532:	f019 0910 	ands.w	r9, r9, #16
    3536:	d004      	beq.n	3542 <cbvprintf+0x79a>
				sign = ' ';
    3538:	f04f 0920 	mov.w	r9, #32
    353c:	e001      	b.n	3542 <cbvprintf+0x79a>
				sign = '+';
    353e:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    3546:	2a00      	cmp	r2, #0
    3548:	f173 0100 	sbcs.w	r1, r3, #0
    354c:	db02      	blt.n	3554 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    354e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3552:	e009      	b.n	3568 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    3554:	4252      	negs	r2, r2
    3556:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    355a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    355e:	f04f 092d 	mov.w	r9, #45	; 0x2d
    3562:	e001      	b.n	3568 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    3564:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3568:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    356c:	9300      	str	r3, [sp, #0]
    356e:	ab0c      	add	r3, sp, #48	; 0x30
    3570:	aa08      	add	r2, sp, #32
    3572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3576:	f7ff fba7 	bl	2cc8 <encode_uint>
    357a:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    357c:	f1bb 0f00 	cmp.w	fp, #0
    3580:	f2c0 8090 	blt.w	36a4 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    3584:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3588:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    358c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3590:	f36f 1286 	bfc	r2, #6, #1
    3594:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3598:	459b      	cmp	fp, r3
    359a:	f240 8086 	bls.w	36aa <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    359e:	ebab 0303 	sub.w	r3, fp, r3
    35a2:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    35a4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    35a8:	e04c      	b.n	3644 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    35aa:	9806      	ldr	r0, [sp, #24]
    35ac:	b930      	cbnz	r0, 35bc <cbvprintf+0x814>
		char sign = 0;
    35ae:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    35b2:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 3778 <cbvprintf+0x9d0>
			bps = "(nil)";
    35b6:	f1ab 0a05 	sub.w	sl, fp, #5
    35ba:	e043      	b.n	3644 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    35bc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    35c0:	9300      	str	r3, [sp, #0]
    35c2:	ab0c      	add	r3, sp, #48	; 0x30
    35c4:	aa08      	add	r2, sp, #32
    35c6:	2100      	movs	r1, #0
    35c8:	f7ff fb7e 	bl	2cc8 <encode_uint>
    35cc:	4682      	mov	sl, r0
				conv->altform_0c = true;
    35ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    35d2:	f043 0310 	orr.w	r3, r3, #16
    35d6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    35da:	2378      	movs	r3, #120	; 0x78
    35dc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    35e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    35e4:	e7ca      	b.n	357c <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    35e6:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    35e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35ec:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    35f0:	2b07      	cmp	r3, #7
    35f2:	d806      	bhi.n	3602 <cbvprintf+0x85a>
    35f4:	e8df f003 	tbb	[pc, r3]
    35f8:	100e0c04 	.word	0x100e0c04
    35fc:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    3600:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3602:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3606:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    360a:	f04f 0a00 	mov.w	sl, #0
}
    360e:	e019      	b.n	3644 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    3610:	7014      	strb	r4, [r2, #0]
		break;
    3612:	e7f6      	b.n	3602 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    3614:	8014      	strh	r4, [r2, #0]
		break;
    3616:	e7f4      	b.n	3602 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    3618:	6014      	str	r4, [r2, #0]
		break;
    361a:	e7f2      	b.n	3602 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    361c:	4620      	mov	r0, r4
    361e:	17e1      	asrs	r1, r4, #31
    3620:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3624:	e7ed      	b.n	3602 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    3626:	4620      	mov	r0, r4
    3628:	17e1      	asrs	r1, r4, #31
    362a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    362e:	e7e8      	b.n	3602 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    3630:	6014      	str	r4, [r2, #0]
		break;
    3632:	e7e6      	b.n	3602 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3634:	6014      	str	r4, [r2, #0]
		break;
    3636:	e7e4      	b.n	3602 <cbvprintf+0x85a>
		switch (conv->specifier) {
    3638:	f8dd 9008 	ldr.w	r9, [sp, #8]
    363c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3640:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3644:	f1ba 0f00 	cmp.w	sl, #0
    3648:	f000 808e 	beq.w	3768 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    364c:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    3650:	f1b9 0f00 	cmp.w	r9, #0
    3654:	d000      	beq.n	3658 <cbvprintf+0x8b0>
			nj_len += 1U;
    3656:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    3658:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    365c:	f011 0f10 	tst.w	r1, #16
    3660:	d026      	beq.n	36b0 <cbvprintf+0x908>
			nj_len += 2U;
    3662:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3664:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3666:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3668:	f011 0f40 	tst.w	r1, #64	; 0x40
    366c:	d001      	beq.n	3672 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    366e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3670:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3672:	2f00      	cmp	r7, #0
    3674:	dd32      	ble.n	36dc <cbvprintf+0x934>
			width -= (int)nj_len;
    3676:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3678:	f89d 3020 	ldrb.w	r3, [sp, #32]
    367c:	f013 0f04 	tst.w	r3, #4
    3680:	d12c      	bne.n	36dc <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3682:	f013 0f40 	tst.w	r3, #64	; 0x40
    3686:	d018      	beq.n	36ba <cbvprintf+0x912>
					if (sign != 0) {
    3688:	f1b9 0f00 	cmp.w	r9, #0
    368c:	d018      	beq.n	36c0 <cbvprintf+0x918>
						OUTC(sign);
    368e:	4629      	mov	r1, r5
    3690:	4648      	mov	r0, r9
    3692:	47b0      	blx	r6
    3694:	2800      	cmp	r0, #0
    3696:	db6b      	blt.n	3770 <cbvprintf+0x9c8>
    3698:	3401      	adds	r4, #1
						sign = 0;
    369a:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    369e:	2330      	movs	r3, #48	; 0x30
    36a0:	9302      	str	r3, [sp, #8]
    36a2:	e00f      	b.n	36c4 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    36a4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    36a8:	e7cc      	b.n	3644 <cbvprintf+0x89c>
    36aa:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    36ae:	e7c9      	b.n	3644 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    36b0:	f011 0f08 	tst.w	r1, #8
    36b4:	d0d6      	beq.n	3664 <cbvprintf+0x8bc>
			nj_len += 1U;
    36b6:	3201      	adds	r2, #1
    36b8:	e7d4      	b.n	3664 <cbvprintf+0x8bc>
				char pad = ' ';
    36ba:	2320      	movs	r3, #32
    36bc:	9302      	str	r3, [sp, #8]
    36be:	e001      	b.n	36c4 <cbvprintf+0x91c>
					pad = '0';
    36c0:	2330      	movs	r3, #48	; 0x30
    36c2:	9302      	str	r3, [sp, #8]
    36c4:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    36c6:	1e5f      	subs	r7, r3, #1
    36c8:	2b00      	cmp	r3, #0
    36ca:	dd07      	ble.n	36dc <cbvprintf+0x934>
					OUTC(pad);
    36cc:	4629      	mov	r1, r5
    36ce:	9802      	ldr	r0, [sp, #8]
    36d0:	47b0      	blx	r6
    36d2:	2800      	cmp	r0, #0
    36d4:	db4c      	blt.n	3770 <cbvprintf+0x9c8>
    36d6:	3401      	adds	r4, #1
				while (width-- > 0) {
    36d8:	463b      	mov	r3, r7
    36da:	e7f4      	b.n	36c6 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    36dc:	f1b9 0f00 	cmp.w	r9, #0
    36e0:	d005      	beq.n	36ee <cbvprintf+0x946>
			OUTC(sign);
    36e2:	4629      	mov	r1, r5
    36e4:	4648      	mov	r0, r9
    36e6:	47b0      	blx	r6
    36e8:	2800      	cmp	r0, #0
    36ea:	db41      	blt.n	3770 <cbvprintf+0x9c8>
    36ec:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    36ee:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    36f2:	f3c3 1200 	ubfx	r2, r3, #4, #1
    36f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    36fa:	4313      	orrs	r3, r2
    36fc:	d005      	beq.n	370a <cbvprintf+0x962>
				OUTC('0');
    36fe:	4629      	mov	r1, r5
    3700:	2030      	movs	r0, #48	; 0x30
    3702:	47b0      	blx	r6
    3704:	2800      	cmp	r0, #0
    3706:	db33      	blt.n	3770 <cbvprintf+0x9c8>
    3708:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    370a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    370e:	f013 0f10 	tst.w	r3, #16
    3712:	d006      	beq.n	3722 <cbvprintf+0x97a>
				OUTC(conv->specifier);
    3714:	4629      	mov	r1, r5
    3716:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    371a:	47b0      	blx	r6
    371c:	2800      	cmp	r0, #0
    371e:	db27      	blt.n	3770 <cbvprintf+0x9c8>
    3720:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    3722:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    3724:	f103 39ff 	add.w	r9, r3, #4294967295
    3728:	2b00      	cmp	r3, #0
    372a:	dd07      	ble.n	373c <cbvprintf+0x994>
				OUTC('0');
    372c:	4629      	mov	r1, r5
    372e:	2030      	movs	r0, #48	; 0x30
    3730:	47b0      	blx	r6
    3732:	2800      	cmp	r0, #0
    3734:	db1c      	blt.n	3770 <cbvprintf+0x9c8>
    3736:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3738:	464b      	mov	r3, r9
    373a:	e7f3      	b.n	3724 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    373c:	465b      	mov	r3, fp
    373e:	4652      	mov	r2, sl
    3740:	4629      	mov	r1, r5
    3742:	4630      	mov	r0, r6
    3744:	f00a fd13 	bl	e16e <outs>
    3748:	2800      	cmp	r0, #0
    374a:	db11      	blt.n	3770 <cbvprintf+0x9c8>
    374c:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    374e:	2f00      	cmp	r7, #0
    3750:	dd07      	ble.n	3762 <cbvprintf+0x9ba>
			OUTC(' ');
    3752:	4629      	mov	r1, r5
    3754:	2020      	movs	r0, #32
    3756:	47b0      	blx	r6
    3758:	2800      	cmp	r0, #0
    375a:	db09      	blt.n	3770 <cbvprintf+0x9c8>
    375c:	3401      	adds	r4, #1
			--width;
    375e:	3f01      	subs	r7, #1
    3760:	e7f5      	b.n	374e <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    3762:	46c2      	mov	sl, r8
    3764:	f7ff bb28 	b.w	2db8 <cbvprintf+0x10>
    3768:	46c2      	mov	sl, r8
    376a:	f7ff bb25 	b.w	2db8 <cbvprintf+0x10>
		}
	}

	return count;
    376e:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    3770:	b013      	add	sp, #76	; 0x4c
    3772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3776:	bf00      	nop
    3778:	000552c1 	.word	0x000552c1

0000377c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    377c:	b508      	push	{r3, lr}
    377e:	4604      	mov	r4, r0
    3780:	f04f 0220 	mov.w	r2, #32
    3784:	f3ef 8311 	mrs	r3, BASEPRI
    3788:	f382 8812 	msr	BASEPRI_MAX, r2
    378c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3790:	f00b faf8 	bl	ed84 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3794:	4620      	mov	r0, r4
    3796:	f000 fd07 	bl	41a8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    379a:	4803      	ldr	r0, [pc, #12]	; (37a8 <sys_reboot+0x2c>)
    379c:	f00a fa78 	bl	dc90 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    37a0:	f000 fa78 	bl	3c94 <arch_cpu_idle>
    37a4:	e7fc      	b.n	37a0 <sys_reboot+0x24>
    37a6:	bf00      	nop
    37a8:	000552c4 	.word	0x000552c4

000037ac <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    37ac:	b410      	push	{r4}
    37ae:	f04f 0320 	mov.w	r3, #32
    37b2:	f3ef 8411 	mrs	r4, BASEPRI
    37b6:	f383 8812 	msr	BASEPRI_MAX, r3
    37ba:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    37be:	2101      	movs	r1, #1
    37c0:	4b12      	ldr	r3, [pc, #72]	; (380c <nordicsemi_nrf53_init+0x60>)
    37c2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    37c6:	4a12      	ldr	r2, [pc, #72]	; (3810 <nordicsemi_nrf53_init+0x64>)
    37c8:	2302      	movs	r3, #2
    37ca:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    37ce:	4811      	ldr	r0, [pc, #68]	; (3814 <nordicsemi_nrf53_init+0x68>)
    37d0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    37d4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    37d8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    37dc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    37e0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    37e4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    37e8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    37ec:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    37f0:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    37f4:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    37f8:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    37fc:	f384 8811 	msr	BASEPRI, r4
    3800:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3804:	2000      	movs	r0, #0
    3806:	bc10      	pop	{r4}
    3808:	4770      	bx	lr
    380a:	bf00      	nop
    380c:	50001000 	.word	0x50001000
    3810:	50004000 	.word	0x50004000
    3814:	50842500 	.word	0x50842500

00003818 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3818:	b170      	cbz	r0, 3838 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    381a:	b508      	push	{r3, lr}
    381c:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    381e:	4b07      	ldr	r3, [pc, #28]	; (383c <arch_busy_wait+0x24>)
    3820:	681b      	ldr	r3, [r3, #0]
    3822:	4807      	ldr	r0, [pc, #28]	; (3840 <arch_busy_wait+0x28>)
    3824:	fba0 1303 	umull	r1, r3, r0, r3
    3828:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    382a:	fb03 f002 	mul.w	r0, r3, r2
    382e:	4b05      	ldr	r3, [pc, #20]	; (3844 <arch_busy_wait+0x2c>)
    3830:	f043 0301 	orr.w	r3, r3, #1
    3834:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3836:	bd08      	pop	{r3, pc}
    3838:	4770      	bx	lr
    383a:	bf00      	nop
    383c:	20000064 	.word	0x20000064
    3840:	431bde83 	.word	0x431bde83
    3844:	00011140 	.word	0x00011140

00003848 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    3848:	b084      	sub	sp, #16
    384a:	ab04      	add	r3, sp, #16
    384c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    3850:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3854:	2b06      	cmp	r3, #6
    3856:	d001      	beq.n	385c <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    3858:	b004      	add	sp, #16
    385a:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    385c:	4b03      	ldr	r3, [pc, #12]	; (386c <pm_power_state_set+0x24>)
    385e:	2201      	movs	r2, #1
    3860:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3864:	f3bf 8f4f 	dsb	sy
        __WFE();
    3868:	bf20      	wfe
    while (true)
    386a:	e7fd      	b.n	3868 <pm_power_state_set+0x20>
    386c:	50004000 	.word	0x50004000

00003870 <tty_init>:
	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
	if (!uart_dev) {
    3870:	b1c1      	cbz	r1, 38a4 <tty_init+0x34>
{
    3872:	b508      	push	{r3, lr}
    3874:	4602      	mov	r2, r0
    3876:	4608      	mov	r0, r1
		return -ENODEV;
	}

	tty->uart_dev = uart_dev;
    3878:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    387a:	2300      	movs	r3, #0
    387c:	6153      	str	r3, [r2, #20]
	tty->rx_ringbuf_sz = 0U;
    387e:	6193      	str	r3, [r2, #24]
	tty->tx_ringbuf = NULL;
    3880:	6353      	str	r3, [r2, #52]	; 0x34
	tty->tx_ringbuf_sz = 0U;
    3882:	6393      	str	r3, [r2, #56]	; 0x38

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3884:	87d3      	strh	r3, [r2, #62]	; 0x3e
    3886:	8793      	strh	r3, [r2, #60]	; 0x3c
    3888:	83d3      	strh	r3, [r2, #30]
    388a:	8393      	strh	r3, [r2, #28]

	tty->rx_timeout = SYS_FOREVER_MS;
    388c:	f04f 33ff 	mov.w	r3, #4294967295
    3890:	6213      	str	r3, [r2, #32]
	tty->tx_timeout = SYS_FOREVER_MS;
    3892:	6413      	str	r3, [r2, #64]	; 0x40
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3894:	688b      	ldr	r3, [r1, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3896:	b143      	cbz	r3, 38aa <tty_init+0x3a>
    3898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    389a:	b143      	cbz	r3, 38ae <tty_init+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    389c:	4905      	ldr	r1, [pc, #20]	; (38b4 <tty_init+0x44>)
    389e:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    38a0:	2000      	movs	r0, #0
}
    38a2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    38a4:	f06f 0012 	mvn.w	r0, #18
}
    38a8:	4770      	bx	lr
	return 0;
    38aa:	2000      	movs	r0, #0
    38ac:	e7f9      	b.n	38a2 <tty_init+0x32>
    38ae:	2000      	movs	r0, #0
    38b0:	e7f7      	b.n	38a2 <tty_init+0x32>
    38b2:	bf00      	nop
    38b4:	0000e399 	.word	0x0000e399

000038b8 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    38b8:	b500      	push	{lr}
    38ba:	b083      	sub	sp, #12
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    38bc:	2201      	movs	r2, #1
    38be:	f10d 0107 	add.w	r1, sp, #7
    38c2:	4805      	ldr	r0, [pc, #20]	; (38d8 <console_getchar+0x20>)
    38c4:	f00a fdae 	bl	e424 <tty_read>
	if (res < 0) {
    38c8:	2800      	cmp	r0, #0
    38ca:	db01      	blt.n	38d0 <console_getchar+0x18>
		return res;
	}

	return c;
    38cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    38d0:	b003      	add	sp, #12
    38d2:	f85d fb04 	ldr.w	pc, [sp], #4
    38d6:	bf00      	nop
    38d8:	2001aef0 	.word	0x2001aef0

000038dc <console_init>:

int console_init(void)
{
    38dc:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    38de:	4810      	ldr	r0, [pc, #64]	; (3920 <console_init+0x44>)
    38e0:	f00c f9cc 	bl	fc7c <z_device_ready>
    38e4:	b1b0      	cbz	r0, 3914 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    38e6:	490e      	ldr	r1, [pc, #56]	; (3920 <console_init+0x44>)
    38e8:	480e      	ldr	r0, [pc, #56]	; (3924 <console_init+0x48>)
    38ea:	f7ff ffc1 	bl	3870 <tty_init>

	if (ret) {
    38ee:	4604      	mov	r4, r0
    38f0:	b970      	cbnz	r0, 3910 <console_init+0x34>
		return ret;
	}

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
    38f2:	4b0b      	ldr	r3, [pc, #44]	; (3920 <console_init+0x44>)
    38f4:	689b      	ldr	r3, [r3, #8]
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    38f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    38f8:	b17b      	cbz	r3, 391a <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    38fa:	4d0a      	ldr	r5, [pc, #40]	; (3924 <console_init+0x48>)
    38fc:	2210      	movs	r2, #16
    38fe:	490a      	ldr	r1, [pc, #40]	; (3928 <console_init+0x4c>)
    3900:	4628      	mov	r0, r5
    3902:	f00a fdd0 	bl	e4a6 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    3906:	2210      	movs	r2, #16
    3908:	4908      	ldr	r1, [pc, #32]	; (392c <console_init+0x50>)
    390a:	4628      	mov	r0, r5
    390c:	f00a fdb0 	bl	e470 <tty_set_rx_buf>

	return 0;
}
    3910:	4620      	mov	r0, r4
    3912:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3914:	f06f 0412 	mvn.w	r4, #18
    3918:	e7fa      	b.n	3910 <console_init+0x34>
			return -ENOTSUP;
    391a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    391e:	e7f7      	b.n	3910 <console_init+0x34>
    3920:	00010dec 	.word	0x00010dec
    3924:	2001aef0 	.word	0x2001aef0
    3928:	2001af34 	.word	0x2001af34
    392c:	2001aee0 	.word	0x2001aee0

00003930 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    3930:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    3932:	4c04      	ldr	r4, [pc, #16]	; (3944 <__do_init_array_aux+0x14>)
    3934:	4b04      	ldr	r3, [pc, #16]	; (3948 <__do_init_array_aux+0x18>)
    3936:	429c      	cmp	r4, r3
    3938:	d203      	bcs.n	3942 <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
    393a:	f854 3b04 	ldr.w	r3, [r4], #4
    393e:	4798      	blx	r3
		func++) {
    3940:	e7f8      	b.n	3934 <__do_init_array_aux+0x4>
	}
}
    3942:	bd10      	pop	{r4, pc}
    3944:	0001107c 	.word	0x0001107c
    3948:	0001107c 	.word	0x0001107c

0000394c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    394c:	4b06      	ldr	r3, [pc, #24]	; (3968 <__do_global_ctors_aux+0x1c>)
    394e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    3950:	b14b      	cbz	r3, 3966 <__do_global_ctors_aux+0x1a>
{
    3952:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    3954:	1e5c      	subs	r4, r3, #1
    3956:	4a04      	ldr	r2, [pc, #16]	; (3968 <__do_global_ctors_aux+0x1c>)
    3958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    395c:	4798      	blx	r3
    395e:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    3960:	2c00      	cmp	r4, #0
    3962:	d1f7      	bne.n	3954 <__do_global_ctors_aux+0x8>
	}
}
    3964:	bd10      	pop	{r4, pc}
    3966:	4770      	bx	lr
    3968:	00011074 	.word	0x00011074

0000396c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    396c:	4b1b      	ldr	r3, [pc, #108]	; (39dc <pm_system_resume+0x70>)
    396e:	681b      	ldr	r3, [r3, #0]
    3970:	2b00      	cmp	r3, #0
    3972:	d132      	bne.n	39da <pm_system_resume+0x6e>
{
    3974:	b530      	push	{r4, r5, lr}
    3976:	b085      	sub	sp, #20
		post_ops_done = 1;
    3978:	4b18      	ldr	r3, [pc, #96]	; (39dc <pm_system_resume+0x70>)
    397a:	2201      	movs	r2, #1
    397c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    397e:	4b18      	ldr	r3, [pc, #96]	; (39e0 <pm_system_resume+0x74>)
    3980:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3984:	ab04      	add	r3, sp, #16
    3986:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    398a:	4b16      	ldr	r3, [pc, #88]	; (39e4 <pm_system_resume+0x78>)
    398c:	b163      	cbz	r3, 39a8 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    398e:	f00a fc09 	bl	e1a4 <pm_power_state_exit_post_ops>
	__asm__ volatile(
    3992:	f04f 0320 	mov.w	r3, #32
    3996:	f3ef 8511 	mrs	r5, BASEPRI
    399a:	f383 8812 	msr	BASEPRI_MAX, r3
    399e:	f3bf 8f6f 	isb	sy
    39a2:	4b11      	ldr	r3, [pc, #68]	; (39e8 <pm_system_resume+0x7c>)
    39a4:	681c      	ldr	r4, [r3, #0]
    39a6:	e00a      	b.n	39be <pm_system_resume+0x52>
	__asm__ volatile(
    39a8:	2300      	movs	r3, #0
    39aa:	f383 8811 	msr	BASEPRI, r3
    39ae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    39b2:	e7ee      	b.n	3992 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    39b4:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    39b6:	b10c      	cbz	r4, 39bc <pm_system_resume+0x50>
	return node->next;
    39b8:	6823      	ldr	r3, [r4, #0]
    39ba:	b143      	cbz	r3, 39ce <pm_system_resume+0x62>
{
    39bc:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    39be:	b134      	cbz	r4, 39ce <pm_system_resume+0x62>
			callback = notifier->state_exit;
    39c0:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    39c2:	2b00      	cmp	r3, #0
    39c4:	d0f6      	beq.n	39b4 <pm_system_resume+0x48>
			callback(z_power_state.state);
    39c6:	4a06      	ldr	r2, [pc, #24]	; (39e0 <pm_system_resume+0x74>)
    39c8:	7810      	ldrb	r0, [r2, #0]
    39ca:	4798      	blx	r3
    39cc:	e7f2      	b.n	39b4 <pm_system_resume+0x48>
	__asm__ volatile(
    39ce:	f385 8811 	msr	BASEPRI, r5
    39d2:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    39d6:	b005      	add	sp, #20
    39d8:	bd30      	pop	{r4, r5, pc}
    39da:	4770      	bx	lr
    39dc:	20000008 	.word	0x20000008
    39e0:	2001af50 	.word	0x2001af50
    39e4:	0000e1a5 	.word	0x0000e1a5
    39e8:	2001af48 	.word	0x2001af48

000039ec <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    39ec:	b570      	push	{r4, r5, r6, lr}
    39ee:	b088      	sub	sp, #32
    39f0:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    39f2:	4c2a      	ldr	r4, [pc, #168]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    39f4:	466d      	mov	r5, sp
    39f6:	4601      	mov	r1, r0
    39f8:	4628      	mov	r0, r5
    39fa:	f00a fd70 	bl	e4de <pm_policy_next_state>
    39fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3a02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3a06:	7820      	ldrb	r0, [r4, #0]
    3a08:	2800      	cmp	r0, #0
    3a0a:	d045      	beq.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3a0c:	4b24      	ldr	r3, [pc, #144]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a0e:	2200      	movs	r2, #0
    3a10:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3a12:	f1b6 3fff 	cmp.w	r6, #4294967295
    3a16:	d10c      	bne.n	3a32 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3a18:	f007 ff5e 	bl	b8d8 <k_sched_lock>
	__asm__ volatile(
    3a1c:	f04f 0320 	mov.w	r3, #32
    3a20:	f3ef 8511 	mrs	r5, BASEPRI
    3a24:	f383 8812 	msr	BASEPRI_MAX, r3
    3a28:	f3bf 8f6f 	isb	sy
	return list->head;
    3a2c:	4b1d      	ldr	r3, [pc, #116]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a2e:	681c      	ldr	r4, [r3, #0]
    3a30:	e016      	b.n	3a60 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3a32:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3a34:	0c59      	lsrs	r1, r3, #17
    3a36:	03d8      	lsls	r0, r3, #15
    3a38:	4c1b      	ldr	r4, [pc, #108]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a3a:	4a1c      	ldr	r2, [pc, #112]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a3c:	2300      	movs	r3, #0
    3a3e:	1900      	adds	r0, r0, r4
    3a40:	f04f 0400 	mov.w	r4, #0
    3a44:	eb44 0101 	adc.w	r1, r4, r1
    3a48:	f7fd fb4e 	bl	10e8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3a4c:	2101      	movs	r1, #1
    3a4e:	1a30      	subs	r0, r6, r0
    3a50:	f00c fb2f 	bl	100b2 <z_set_timeout_expiry>
    3a54:	e7e0      	b.n	3a18 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3a56:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3a58:	b10c      	cbz	r4, 3a5e <pm_system_suspend+0x72>
	return node->next;
    3a5a:	6823      	ldr	r3, [r4, #0]
    3a5c:	b143      	cbz	r3, 3a70 <pm_system_suspend+0x84>
{
    3a5e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3a60:	b134      	cbz	r4, 3a70 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    3a62:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    3a64:	2b00      	cmp	r3, #0
    3a66:	d0f6      	beq.n	3a56 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    3a68:	4a0c      	ldr	r2, [pc, #48]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a6a:	7810      	ldrb	r0, [r2, #0]
    3a6c:	4798      	blx	r3
    3a6e:	e7f2      	b.n	3a56 <pm_system_suspend+0x6a>
	__asm__ volatile(
    3a70:	f385 8811 	msr	BASEPRI, r5
    3a74:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    3a78:	4b08      	ldr	r3, [pc, #32]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3a7e:	ab08      	add	r3, sp, #32
    3a80:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3a84:	4b0a      	ldr	r3, [pc, #40]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a86:	b10b      	cbz	r3, 3a8c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3a88:	f7ff fede 	bl	3848 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3a8c:	f7ff ff6e 	bl	396c <pm_system_resume>
	k_sched_unlock();
    3a90:	f008 f920 	bl	bcd4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3a94:	4b01      	ldr	r3, [pc, #4]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a96:	7818      	ldrb	r0, [r3, #0]
}
    3a98:	b008      	add	sp, #32
    3a9a:	bd70      	pop	{r4, r5, r6, pc}
    3a9c:	2001af50 	.word	0x2001af50
    3aa0:	20000008 	.word	0x20000008
    3aa4:	2001af48 	.word	0x2001af48
    3aa8:	000f423f 	.word	0x000f423f
    3aac:	000f4240 	.word	0x000f4240
    3ab0:	00003849 	.word	0x00003849

00003ab4 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3ab4:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3ab6:	4802      	ldr	r0, [pc, #8]	; (3ac0 <nrf_cc3xx_platform_abort_init+0xc>)
    3ab8:	f008 fc78 	bl	c3ac <nrf_cc3xx_platform_set_abort>
}
    3abc:	bd08      	pop	{r3, pc}
    3abe:	bf00      	nop
    3ac0:	000552f0 	.word	0x000552f0

00003ac4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3ac4:	b308      	cbz	r0, 3b0a <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3ac6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3ac8:	6843      	ldr	r3, [r0, #4]
    3aca:	2b04      	cmp	r3, #4
    3acc:	d007      	beq.n	3ade <mutex_unlock_platform+0x1a>
    3ace:	2b08      	cmp	r3, #8
    3ad0:	d012      	beq.n	3af8 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3ad2:	b1fb      	cbz	r3, 3b14 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3ad4:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3ad6:	f007 fdef 	bl	b6b8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3ada:	2000      	movs	r0, #0
    3adc:	e014      	b.n	3b08 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3ade:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3ae0:	2200      	movs	r2, #0
    3ae2:	e8d3 1fef 	ldaex	r1, [r3]
    3ae6:	2901      	cmp	r1, #1
    3ae8:	d103      	bne.n	3af2 <mutex_unlock_platform+0x2e>
    3aea:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3aee:	2800      	cmp	r0, #0
    3af0:	d1f7      	bne.n	3ae2 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3af2:	d10d      	bne.n	3b10 <mutex_unlock_platform+0x4c>
    3af4:	4610      	mov	r0, r2
    3af6:	e007      	b.n	3b08 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3af8:	6803      	ldr	r3, [r0, #0]
    3afa:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3afc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3b00:	2000      	movs	r0, #0
    3b02:	4a05      	ldr	r2, [pc, #20]	; (3b18 <mutex_unlock_platform+0x54>)
    3b04:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    3b08:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3b0a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3b0e:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b10:	4802      	ldr	r0, [pc, #8]	; (3b1c <mutex_unlock_platform+0x58>)
    3b12:	e7f9      	b.n	3b08 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3b14:	4802      	ldr	r0, [pc, #8]	; (3b20 <mutex_unlock_platform+0x5c>)
    3b16:	e7f7      	b.n	3b08 <mutex_unlock_platform+0x44>
    3b18:	50030000 	.word	0x50030000
    3b1c:	ffff8fe9 	.word	0xffff8fe9
    3b20:	ffff8fea 	.word	0xffff8fea

00003b24 <mutex_lock_platform>:
    if(mutex == NULL) {
    3b24:	b370      	cbz	r0, 3b84 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b26:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3b28:	6843      	ldr	r3, [r0, #4]
    3b2a:	2b04      	cmp	r3, #4
    3b2c:	d004      	beq.n	3b38 <mutex_lock_platform+0x14>
    3b2e:	2b08      	cmp	r3, #8
    3b30:	d00f      	beq.n	3b52 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3b32:	b9c3      	cbnz	r3, 3b66 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3b34:	4815      	ldr	r0, [pc, #84]	; (3b8c <mutex_lock_platform+0x68>)
    3b36:	e00b      	b.n	3b50 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3b38:	6803      	ldr	r3, [r0, #0]
    3b3a:	2201      	movs	r2, #1
    3b3c:	e8d3 1fef 	ldaex	r1, [r3]
    3b40:	2900      	cmp	r1, #0
    3b42:	d103      	bne.n	3b4c <mutex_lock_platform+0x28>
    3b44:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3b48:	2800      	cmp	r0, #0
    3b4a:	d1f7      	bne.n	3b3c <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b4c:	d116      	bne.n	3b7c <mutex_lock_platform+0x58>
    3b4e:	2000      	movs	r0, #0
}
    3b50:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    3b52:	6803      	ldr	r3, [r0, #0]
    3b54:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    3b56:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3b5a:	4a0d      	ldr	r2, [pc, #52]	; (3b90 <mutex_lock_platform+0x6c>)
    3b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b60:	b973      	cbnz	r3, 3b80 <mutex_lock_platform+0x5c>
    3b62:	2000      	movs	r0, #0
    3b64:	e7f4      	b.n	3b50 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3b66:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3b68:	f04f 32ff 	mov.w	r2, #4294967295
    3b6c:	f04f 33ff 	mov.w	r3, #4294967295
    3b70:	f007 fd18 	bl	b5a4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3b74:	2800      	cmp	r0, #0
    3b76:	d0eb      	beq.n	3b50 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3b78:	4806      	ldr	r0, [pc, #24]	; (3b94 <mutex_lock_platform+0x70>)
    3b7a:	e7e9      	b.n	3b50 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b7c:	4805      	ldr	r0, [pc, #20]	; (3b94 <mutex_lock_platform+0x70>)
    3b7e:	e7e7      	b.n	3b50 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b80:	4804      	ldr	r0, [pc, #16]	; (3b94 <mutex_lock_platform+0x70>)
    3b82:	e7e5      	b.n	3b50 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3b84:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3b88:	4770      	bx	lr
    3b8a:	bf00      	nop
    3b8c:	ffff8fea 	.word	0xffff8fea
    3b90:	50030000 	.word	0x50030000
    3b94:	ffff8fe9 	.word	0xffff8fe9

00003b98 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b98:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3b9a:	4604      	mov	r4, r0
    3b9c:	b190      	cbz	r0, 3bc4 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3b9e:	6863      	ldr	r3, [r4, #4]
    3ba0:	2b04      	cmp	r3, #4
    3ba2:	d00e      	beq.n	3bc2 <mutex_free_platform+0x2a>
    3ba4:	2b08      	cmp	r3, #8
    3ba6:	d00c      	beq.n	3bc2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3ba8:	b15b      	cbz	r3, 3bc2 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3baa:	f013 0f02 	tst.w	r3, #2
    3bae:	d10e      	bne.n	3bce <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3bb0:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3bb2:	2200      	movs	r2, #0
    3bb4:	601a      	str	r2, [r3, #0]
    3bb6:	605a      	str	r2, [r3, #4]
    3bb8:	609a      	str	r2, [r3, #8]
    3bba:	60da      	str	r2, [r3, #12]
    3bbc:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3bbe:	2300      	movs	r3, #0
    3bc0:	6063      	str	r3, [r4, #4]
}
    3bc2:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3bc4:	4b05      	ldr	r3, [pc, #20]	; (3bdc <mutex_free_platform+0x44>)
    3bc6:	685b      	ldr	r3, [r3, #4]
    3bc8:	4805      	ldr	r0, [pc, #20]	; (3be0 <mutex_free_platform+0x48>)
    3bca:	4798      	blx	r3
    3bcc:	e7e7      	b.n	3b9e <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3bce:	4621      	mov	r1, r4
    3bd0:	4804      	ldr	r0, [pc, #16]	; (3be4 <mutex_free_platform+0x4c>)
    3bd2:	f00c f8a0 	bl	fd16 <k_mem_slab_free>
        mutex->mutex = NULL;
    3bd6:	2300      	movs	r3, #0
    3bd8:	6023      	str	r3, [r4, #0]
    3bda:	e7f0      	b.n	3bbe <mutex_free_platform+0x26>
    3bdc:	20000070 	.word	0x20000070
    3be0:	000552f8 	.word	0x000552f8
    3be4:	2001af5c 	.word	0x2001af5c

00003be8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3be8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3bea:	4604      	mov	r4, r0
    3bec:	b178      	cbz	r0, 3c0e <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3bee:	6863      	ldr	r3, [r4, #4]
    3bf0:	2b04      	cmp	r3, #4
    3bf2:	d00b      	beq.n	3c0c <mutex_init_platform+0x24>
    3bf4:	2b08      	cmp	r3, #8
    3bf6:	d009      	beq.n	3c0c <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3bf8:	b90b      	cbnz	r3, 3bfe <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3bfa:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3bfc:	b163      	cbz	r3, 3c18 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3bfe:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3c00:	f00c f8fe 	bl	fe00 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3c04:	6863      	ldr	r3, [r4, #4]
    3c06:	f043 0301 	orr.w	r3, r3, #1
    3c0a:	6063      	str	r3, [r4, #4]
}
    3c0c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3c0e:	4b10      	ldr	r3, [pc, #64]	; (3c50 <mutex_init_platform+0x68>)
    3c10:	685b      	ldr	r3, [r3, #4]
    3c12:	4810      	ldr	r0, [pc, #64]	; (3c54 <mutex_init_platform+0x6c>)
    3c14:	4798      	blx	r3
    3c16:	e7ea      	b.n	3bee <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3c18:	f04f 32ff 	mov.w	r2, #4294967295
    3c1c:	f04f 33ff 	mov.w	r3, #4294967295
    3c20:	4621      	mov	r1, r4
    3c22:	480d      	ldr	r0, [pc, #52]	; (3c58 <mutex_init_platform+0x70>)
    3c24:	f007 fb96 	bl	b354 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3c28:	b908      	cbnz	r0, 3c2e <mutex_init_platform+0x46>
    3c2a:	6823      	ldr	r3, [r4, #0]
    3c2c:	b91b      	cbnz	r3, 3c36 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3c2e:	4b08      	ldr	r3, [pc, #32]	; (3c50 <mutex_init_platform+0x68>)
    3c30:	685b      	ldr	r3, [r3, #4]
    3c32:	480a      	ldr	r0, [pc, #40]	; (3c5c <mutex_init_platform+0x74>)
    3c34:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3c36:	6823      	ldr	r3, [r4, #0]
    3c38:	2200      	movs	r2, #0
    3c3a:	601a      	str	r2, [r3, #0]
    3c3c:	605a      	str	r2, [r3, #4]
    3c3e:	609a      	str	r2, [r3, #8]
    3c40:	60da      	str	r2, [r3, #12]
    3c42:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3c44:	6863      	ldr	r3, [r4, #4]
    3c46:	f043 0302 	orr.w	r3, r3, #2
    3c4a:	6063      	str	r3, [r4, #4]
    3c4c:	e7d7      	b.n	3bfe <mutex_init_platform+0x16>
    3c4e:	bf00      	nop
    3c50:	20000070 	.word	0x20000070
    3c54:	000552f8 	.word	0x000552f8
    3c58:	2001af5c 	.word	0x2001af5c
    3c5c:	00055320 	.word	0x00055320

00003c60 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3c60:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3c62:	2340      	movs	r3, #64	; 0x40
    3c64:	2214      	movs	r2, #20
    3c66:	4904      	ldr	r1, [pc, #16]	; (3c78 <nrf_cc3xx_platform_mutex_init+0x18>)
    3c68:	4804      	ldr	r0, [pc, #16]	; (3c7c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3c6a:	f00c f845 	bl	fcf8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3c6e:	4904      	ldr	r1, [pc, #16]	; (3c80 <nrf_cc3xx_platform_mutex_init+0x20>)
    3c70:	4804      	ldr	r0, [pc, #16]	; (3c84 <nrf_cc3xx_platform_mutex_init+0x24>)
    3c72:	f008 fbf9 	bl	c468 <nrf_cc3xx_platform_set_mutexes>
}
    3c76:	bd08      	pop	{r3, pc}
    3c78:	2001af7c 	.word	0x2001af7c
    3c7c:	2001af5c 	.word	0x2001af5c
    3c80:	00055360 	.word	0x00055360
    3c84:	00055350 	.word	0x00055350

00003c88 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3c88:	4901      	ldr	r1, [pc, #4]	; (3c90 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3c8a:	2210      	movs	r2, #16
	str	r2, [r1]
    3c8c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3c8e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3c90:	e000ed10 	.word	0xe000ed10

00003c94 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3c94:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3c96:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3c98:	f380 8811 	msr	BASEPRI, r0
	isb
    3c9c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3ca0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3ca4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3ca6:	b662      	cpsie	i
	isb
    3ca8:	f3bf 8f6f 	isb	sy

	bx	lr
    3cac:	4770      	bx	lr
    3cae:	bf00      	nop

00003cb0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3cb0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3cb2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3cb4:	f381 8811 	msr	BASEPRI, r1

	wfe
    3cb8:	bf20      	wfe

	msr	BASEPRI, r0
    3cba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3cbe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3cc0:	4770      	bx	lr
    3cc2:	bf00      	nop

00003cc4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3cc4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	db08      	blt.n	3cdc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3cca:	f000 001f 	and.w	r0, r0, #31
    3cce:	095b      	lsrs	r3, r3, #5
    3cd0:	2201      	movs	r2, #1
    3cd2:	fa02 f000 	lsl.w	r0, r2, r0
    3cd6:	4a02      	ldr	r2, [pc, #8]	; (3ce0 <arch_irq_enable+0x1c>)
    3cd8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3cdc:	4770      	bx	lr
    3cde:	bf00      	nop
    3ce0:	e000e100 	.word	0xe000e100

00003ce4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3ce4:	0942      	lsrs	r2, r0, #5
    3ce6:	4b05      	ldr	r3, [pc, #20]	; (3cfc <arch_irq_is_enabled+0x18>)
    3ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3cec:	f000 001f 	and.w	r0, r0, #31
    3cf0:	2301      	movs	r3, #1
    3cf2:	fa03 f000 	lsl.w	r0, r3, r0
}
    3cf6:	4010      	ands	r0, r2
    3cf8:	4770      	bx	lr
    3cfa:	bf00      	nop
    3cfc:	e000e100 	.word	0xe000e100

00003d00 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3d00:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3d02:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3d04:	2b00      	cmp	r3, #0
    3d06:	db08      	blt.n	3d1a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d08:	0149      	lsls	r1, r1, #5
    3d0a:	b2c9      	uxtb	r1, r1
    3d0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3d10:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3d14:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3d18:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d1a:	f000 000f 	and.w	r0, r0, #15
    3d1e:	0149      	lsls	r1, r1, #5
    3d20:	b2c9      	uxtb	r1, r1
    3d22:	4b01      	ldr	r3, [pc, #4]	; (3d28 <z_arm_irq_priority_set+0x28>)
    3d24:	5419      	strb	r1, [r3, r0]
}
    3d26:	4770      	bx	lr
    3d28:	e000ed14 	.word	0xe000ed14

00003d2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3d2c:	bf30      	wfi
    b z_SysNmiOnReset
    3d2e:	f7ff bffd 	b.w	3d2c <z_SysNmiOnReset>
    3d32:	bf00      	nop

00003d34 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3d34:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d36:	4b0b      	ldr	r3, [pc, #44]	; (3d64 <z_arm_prep_c+0x30>)
    3d38:	4a0b      	ldr	r2, [pc, #44]	; (3d68 <z_arm_prep_c+0x34>)
    3d3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3d3e:	609a      	str	r2, [r3, #8]
    3d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d44:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3d48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3d4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3d54:	f007 fa9e 	bl	b294 <z_bss_zero>
	z_data_copy();
    3d58:	f008 f92c 	bl	bfb4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3d5c:	f000 f9da 	bl	4114 <z_arm_interrupt_init>
	z_cstart();
    3d60:	f007 faa4 	bl	b2ac <z_cstart>
    3d64:	e000ed00 	.word	0xe000ed00
    3d68:	00000000 	.word	0x00000000

00003d6c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3d6c:	4a0a      	ldr	r2, [pc, #40]	; (3d98 <arch_swap+0x2c>)
    3d6e:	6893      	ldr	r3, [r2, #8]
    3d70:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3d74:	4909      	ldr	r1, [pc, #36]	; (3d9c <arch_swap+0x30>)
    3d76:	6809      	ldr	r1, [r1, #0]
    3d78:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d7c:	4908      	ldr	r1, [pc, #32]	; (3da0 <arch_swap+0x34>)
    3d7e:	684b      	ldr	r3, [r1, #4]
    3d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3d84:	604b      	str	r3, [r1, #4]
    3d86:	2300      	movs	r3, #0
    3d88:	f383 8811 	msr	BASEPRI, r3
    3d8c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3d90:	6893      	ldr	r3, [r2, #8]
}
    3d92:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    3d96:	4770      	bx	lr
    3d98:	2001b630 	.word	0x2001b630
    3d9c:	00057904 	.word	0x00057904
    3da0:	e000ed00 	.word	0xe000ed00

00003da4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3da4:	4914      	ldr	r1, [pc, #80]	; (3df8 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3da6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3da8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3dac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3dae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3db2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3db6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3db8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3dbc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3dc0:	4f0e      	ldr	r7, [pc, #56]	; (3dfc <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3dc2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3dc6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3dc8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3dca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3dcc:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    3dd0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3dd2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3dd6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3dda:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3dde:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3de2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3de6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3dea:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3dec:	f00a fb96 	bl	e51c <configure_builtin_stack_guard>
    pop {r2, lr}
    3df0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3df4:	4770      	bx	lr
    3df6:	0000      	.short	0x0000
    ldr r1, =_kernel
    3df8:	2001b630 	.word	0x2001b630
    ldr v4, =_SCS_ICSR
    3dfc:	e000ed04 	.word	0xe000ed04

00003e00 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3e00:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3e04:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3e06:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3e0a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3e0e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3e10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3e14:	2902      	cmp	r1, #2
    beq _oops
    3e16:	d0ff      	beq.n	3e18 <_oops>

00003e18 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3e18:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3e1a:	f00a fb6d 	bl	e4f8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3e1e:	bd01      	pop	{r0, pc}

00003e20 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    3e20:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3e22:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    3e26:	490d      	ldr	r1, [pc, #52]	; (3e5c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    3e28:	f021 0101 	bic.w	r1, r1, #1
    3e2c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    3e30:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3e34:	9b01      	ldr	r3, [sp, #4]
    3e36:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3e3a:	9b02      	ldr	r3, [sp, #8]
    3e3c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3e40:	9b03      	ldr	r3, [sp, #12]
    3e42:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3e4a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    3e4e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3e50:	2300      	movs	r3, #0
    3e52:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3e56:	bc10      	pop	{r4}
    3e58:	4770      	bx	lr
    3e5a:	bf00      	nop
    3e5c:	0000df6f 	.word	0x0000df6f

00003e60 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3e60:	4b09      	ldr	r3, [pc, #36]	; (3e88 <arch_switch_to_main_thread+0x28>)
    3e62:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    3e64:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3e68:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3e6c:	4610      	mov	r0, r2
    3e6e:	f381 8809 	msr	PSP, r1
    3e72:	2100      	movs	r1, #0
    3e74:	b663      	cpsie	if
    3e76:	f381 8811 	msr	BASEPRI, r1
    3e7a:	f3bf 8f6f 	isb	sy
    3e7e:	2200      	movs	r2, #0
    3e80:	2300      	movs	r3, #0
    3e82:	f00a f874 	bl	df6e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3e86:	bf00      	nop
    3e88:	2001b630 	.word	0x2001b630

00003e8c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3e8c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3e8e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3e90:	4a0b      	ldr	r2, [pc, #44]	; (3ec0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3e92:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3e94:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3e96:	bf1e      	ittt	ne
	movne	r1, #0
    3e98:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3e9a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3e9c:	f00b ff88 	blne	fdb0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3ea0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3ea2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3ea6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3eaa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3eae:	4905      	ldr	r1, [pc, #20]	; (3ec4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3eb0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3eb2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3eb4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3eb6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3eba:	4903      	ldr	r1, [pc, #12]	; (3ec8 <_isr_wrapper+0x3c>)
	bx r1
    3ebc:	4708      	bx	r1
    3ebe:	0000      	.short	0x0000
	ldr r2, =_kernel
    3ec0:	2001b630 	.word	0x2001b630
	ldr r1, =_sw_isr_table
    3ec4:	00010e4c 	.word	0x00010e4c
	ldr r1, =z_arm_int_exit
    3ec8:	00003ecd 	.word	0x00003ecd

00003ecc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3ecc:	4b04      	ldr	r3, [pc, #16]	; (3ee0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3ece:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3ed0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3ed2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3ed4:	d003      	beq.n	3ede <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3ed6:	4903      	ldr	r1, [pc, #12]	; (3ee4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3edc:	600a      	str	r2, [r1, #0]

00003ede <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3ede:	4770      	bx	lr
	ldr r3, =_kernel
    3ee0:	2001b630 	.word	0x2001b630
	ldr r1, =_SCS_ICSR
    3ee4:	e000ed04 	.word	0xe000ed04

00003ee8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3ee8:	b510      	push	{r4, lr}
    3eea:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3eec:	4b13      	ldr	r3, [pc, #76]	; (3f3c <mem_manage_fault+0x54>)
    3eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ef4:	f013 0f02 	tst.w	r3, #2
    3ef8:	d00b      	beq.n	3f12 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3efa:	4b10      	ldr	r3, [pc, #64]	; (3f3c <mem_manage_fault+0x54>)
    3efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f00:	f013 0f80 	tst.w	r3, #128	; 0x80
    3f04:	d005      	beq.n	3f12 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    3f06:	b121      	cbz	r1, 3f12 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3f08:	4a0c      	ldr	r2, [pc, #48]	; (3f3c <mem_manage_fault+0x54>)
    3f0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3f10:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3f12:	4b0a      	ldr	r3, [pc, #40]	; (3f3c <mem_manage_fault+0x54>)
    3f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f1a:	f013 0f10 	tst.w	r3, #16
    3f1e:	d101      	bne.n	3f24 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3f20:	4b06      	ldr	r3, [pc, #24]	; (3f3c <mem_manage_fault+0x54>)
    3f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3f24:	4a05      	ldr	r2, [pc, #20]	; (3f3c <mem_manage_fault+0x54>)
    3f26:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f28:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3f2c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3f2e:	2101      	movs	r1, #1
    3f30:	f00a fb00 	bl	e534 <memory_fault_recoverable>
    3f34:	7020      	strb	r0, [r4, #0]

	return reason;
}
    3f36:	2000      	movs	r0, #0
    3f38:	bd10      	pop	{r4, pc}
    3f3a:	bf00      	nop
    3f3c:	e000ed00 	.word	0xe000ed00

00003f40 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    3f40:	b510      	push	{r4, lr}
    3f42:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3f44:	4b12      	ldr	r3, [pc, #72]	; (3f90 <bus_fault+0x50>)
    3f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f4c:	f413 7f00 	tst.w	r3, #512	; 0x200
    3f50:	d00b      	beq.n	3f6a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3f52:	4b0f      	ldr	r3, [pc, #60]	; (3f90 <bus_fault+0x50>)
    3f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f58:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3f5c:	d005      	beq.n	3f6a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3f5e:	b121      	cbz	r1, 3f6a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3f60:	4a0b      	ldr	r2, [pc, #44]	; (3f90 <bus_fault+0x50>)
    3f62:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3f68:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3f6a:	4b09      	ldr	r3, [pc, #36]	; (3f90 <bus_fault+0x50>)
    3f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f70:	f413 7f80 	tst.w	r3, #256	; 0x100
    3f74:	d101      	bne.n	3f7a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3f76:	4b06      	ldr	r3, [pc, #24]	; (3f90 <bus_fault+0x50>)
    3f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f7a:	4a05      	ldr	r2, [pc, #20]	; (3f90 <bus_fault+0x50>)
    3f7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f7e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3f82:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3f84:	2101      	movs	r1, #1
    3f86:	f00a fad5 	bl	e534 <memory_fault_recoverable>
    3f8a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    3f8c:	2000      	movs	r0, #0
    3f8e:	bd10      	pop	{r4, pc}
    3f90:	e000ed00 	.word	0xe000ed00

00003f94 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3f94:	4b0a      	ldr	r3, [pc, #40]	; (3fc0 <usage_fault+0x2c>)
    3f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3f9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3f9c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    3fa0:	d10b      	bne.n	3fba <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3fa2:	4b07      	ldr	r3, [pc, #28]	; (3fc0 <usage_fault+0x2c>)
    3fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fae:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3fb2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3fb6:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    3fb8:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    3fba:	2002      	movs	r0, #2
    3fbc:	e7f1      	b.n	3fa2 <usage_fault+0xe>
    3fbe:	bf00      	nop
    3fc0:	e000ed00 	.word	0xe000ed00

00003fc4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    3fc4:	b510      	push	{r4, lr}
    3fc6:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    3fc8:	2300      	movs	r3, #0
    3fca:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3fcc:	4b1b      	ldr	r3, [pc, #108]	; (403c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
    3fce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3fd0:	f010 0002 	ands.w	r0, r0, #2
    3fd4:	d12d      	bne.n	4032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3fd8:	2b00      	cmp	r3, #0
    3fda:	db2b      	blt.n	4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3fdc:	4b17      	ldr	r3, [pc, #92]	; (403c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
    3fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3fe0:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    3fe4:	d027      	beq.n	4036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3fe6:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    3fe8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3fec:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3ff0:	429a      	cmp	r2, r3
    3ff2:	d010      	beq.n	4016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    3ff4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3ff8:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    3ffc:	781b      	ldrb	r3, [r3, #0]
    3ffe:	b963      	cbnz	r3, 401a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    4000:	4b0f      	ldr	r3, [pc, #60]	; (4040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>)
    4002:	781b      	ldrb	r3, [r3, #0]
    4004:	b97b      	cbnz	r3, 4026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    4006:	4b0f      	ldr	r3, [pc, #60]	; (4044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>)
    4008:	881b      	ldrh	r3, [r3, #0]
    400a:	b29b      	uxth	r3, r3
    400c:	b193      	cbz	r3, 4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
			reason = usage_fault(esf);
    400e:	4620      	mov	r0, r4
    4010:	f7ff ffc0 	bl	3f94 <usage_fault>
    4014:	e00e      	b.n	4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
			reason = esf->basic.r0;
    4016:	6820      	ldr	r0, [r4, #0]
    4018:	e00c      	b.n	4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
			reason = mem_manage_fault(esf, 1, recoverable);
    401a:	460a      	mov	r2, r1
    401c:	2101      	movs	r1, #1
    401e:	4620      	mov	r0, r4
    4020:	f7ff ff62 	bl	3ee8 <mem_manage_fault>
    4024:	e006      	b.n	4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
			reason = bus_fault(esf, 1, recoverable);
    4026:	460a      	mov	r2, r1
    4028:	2101      	movs	r1, #1
    402a:	4620      	mov	r0, r4
    402c:	f7ff ff88 	bl	3f40 <bus_fault>
    4030:	e000      	b.n	4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4032:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4034:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4036:	4618      	mov	r0, r3
	return reason;
    4038:	e7fc      	b.n	4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    403a:	bf00      	nop
    403c:	e000ed00 	.word	0xe000ed00
    4040:	e000ed29 	.word	0xe000ed29
    4044:	e000ed2a 	.word	0xe000ed2a

00004048 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4048:	b5f0      	push	{r4, r5, r6, r7, lr}
    404a:	b08b      	sub	sp, #44	; 0x2c
    404c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    404e:	4b25      	ldr	r3, [pc, #148]	; (40e4 <z_arm_fault+0x9c>)
    4050:	6859      	ldr	r1, [r3, #4]
    4052:	f3c1 0108 	ubfx	r1, r1, #0, #9
    4056:	2300      	movs	r3, #0
    4058:	f383 8811 	msr	BASEPRI, r3
    405c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4060:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4064:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4068:	d115      	bne.n	4096 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    406a:	f002 030c 	and.w	r3, r2, #12
    406e:	2b08      	cmp	r3, #8
    4070:	d014      	beq.n	409c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4072:	f012 0f08 	tst.w	r2, #8
    4076:	d00b      	beq.n	4090 <z_arm_fault+0x48>
	*nested_exc = false;
    4078:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    407a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    407e:	4620      	mov	r0, r4
    4080:	f00a fa5d 	bl	e53e <fault_handle>
    4084:	4606      	mov	r6, r0
	if (recoverable) {
    4086:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    408a:	b153      	cbz	r3, 40a2 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    408c:	b00b      	add	sp, #44	; 0x2c
    408e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    4090:	4604      	mov	r4, r0
			*nested_exc = true;
    4092:	2701      	movs	r7, #1
    4094:	e7f1      	b.n	407a <z_arm_fault+0x32>
	*nested_exc = false;
    4096:	2700      	movs	r7, #0
		return NULL;
    4098:	463c      	mov	r4, r7
    409a:	e7ee      	b.n	407a <z_arm_fault+0x32>
	*nested_exc = false;
    409c:	2700      	movs	r7, #0
		return NULL;
    409e:	463c      	mov	r4, r7
    40a0:	e7eb      	b.n	407a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    40a2:	ad01      	add	r5, sp, #4
    40a4:	6820      	ldr	r0, [r4, #0]
    40a6:	6861      	ldr	r1, [r4, #4]
    40a8:	68a2      	ldr	r2, [r4, #8]
    40aa:	68e3      	ldr	r3, [r4, #12]
    40ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    40ae:	6920      	ldr	r0, [r4, #16]
    40b0:	6961      	ldr	r1, [r4, #20]
    40b2:	69a2      	ldr	r2, [r4, #24]
    40b4:	69e3      	ldr	r3, [r4, #28]
    40b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    40b8:	b14f      	cbz	r7, 40ce <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    40ba:	9b08      	ldr	r3, [sp, #32]
    40bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    40c0:	b95a      	cbnz	r2, 40da <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    40c2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    40c6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    40ca:	9308      	str	r3, [sp, #32]
    40cc:	e005      	b.n	40da <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    40ce:	9b08      	ldr	r3, [sp, #32]
    40d0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    40d4:	f023 0301 	bic.w	r3, r3, #1
    40d8:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    40da:	a901      	add	r1, sp, #4
    40dc:	4630      	mov	r0, r6
    40de:	f00a fa07 	bl	e4f0 <z_arm_fatal_error>
    40e2:	e7d3      	b.n	408c <z_arm_fault+0x44>
    40e4:	e000ed00 	.word	0xe000ed00

000040e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    40e8:	4b04      	ldr	r3, [pc, #16]	; (40fc <z_arm_fault_init+0x14>)
    40ea:	695a      	ldr	r2, [r3, #20]
    40ec:	f042 0210 	orr.w	r2, r2, #16
    40f0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    40f2:	695a      	ldr	r2, [r3, #20]
    40f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    40f8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    40fa:	4770      	bx	lr
    40fc:	e000ed00 	.word	0xe000ed00

00004100 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4100:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4104:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4108:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    410a:	4672      	mov	r2, lr
	bl z_arm_fault
    410c:	f7ff ff9c 	bl	4048 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4110:	bd01      	pop	{r0, pc}
    4112:	bf00      	nop

00004114 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4114:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4116:	e006      	b.n	4126 <z_arm_interrupt_init+0x12>
    4118:	f002 010f 	and.w	r1, r2, #15
    411c:	4b09      	ldr	r3, [pc, #36]	; (4144 <z_arm_interrupt_init+0x30>)
    411e:	440b      	add	r3, r1
    4120:	2120      	movs	r1, #32
    4122:	7619      	strb	r1, [r3, #24]
    4124:	3201      	adds	r2, #1
    4126:	2a44      	cmp	r2, #68	; 0x44
    4128:	dc0a      	bgt.n	4140 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    412a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    412c:	2b00      	cmp	r3, #0
    412e:	dbf3      	blt.n	4118 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4130:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4134:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4138:	2120      	movs	r1, #32
    413a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    413e:	e7f1      	b.n	4124 <z_arm_interrupt_init+0x10>
	}
}
    4140:	4770      	bx	lr
    4142:	bf00      	nop
    4144:	e000ecfc 	.word	0xe000ecfc

00004148 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4148:	2000      	movs	r0, #0
    msr CONTROL, r0
    414a:	f380 8814 	msr	CONTROL, r0
    isb
    414e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    4152:	2000      	movs	r0, #0
    msr MSPLIM, r0
    4154:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    4158:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    415c:	f00c fe04 	bl	10d68 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4160:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4162:	490e      	ldr	r1, [pc, #56]	; (419c <__start+0x54>)
    str r0, [r1]
    4164:	6008      	str	r0, [r1, #0]
    dsb
    4166:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    416a:	480d      	ldr	r0, [pc, #52]	; (41a0 <__start+0x58>)
    msr msp, r0
    416c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4170:	f000 f83c 	bl	41ec <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4174:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4176:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    417a:	480a      	ldr	r0, [pc, #40]	; (41a4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    417c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4180:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4182:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4186:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    418a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    418c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    418e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4192:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4196:	f7ff fdcd 	bl	3d34 <z_arm_prep_c>
    419a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    419c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    41a0:	20023860 	.word	0x20023860
    ldr r0, =z_interrupt_stacks
    41a4:	200239a0 	.word	0x200239a0

000041a8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    41a8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    41ac:	4905      	ldr	r1, [pc, #20]	; (41c4 <sys_arch_reboot+0x1c>)
    41ae:	68ca      	ldr	r2, [r1, #12]
    41b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    41b4:	4b04      	ldr	r3, [pc, #16]	; (41c8 <sys_arch_reboot+0x20>)
    41b6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    41b8:	60cb      	str	r3, [r1, #12]
    41ba:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    41be:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    41c0:	e7fd      	b.n	41be <sys_arch_reboot+0x16>
    41c2:	bf00      	nop
    41c4:	e000ed00 	.word	0xe000ed00
    41c8:	05fa0004 	.word	0x05fa0004

000041cc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    41cc:	4b06      	ldr	r3, [pc, #24]	; (41e8 <z_arm_clear_arm_mpu_config+0x1c>)
    41ce:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    41d0:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    41d4:	2300      	movs	r3, #0
    41d6:	4283      	cmp	r3, r0
    41d8:	da05      	bge.n	41e6 <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    41da:	4a03      	ldr	r2, [pc, #12]	; (41e8 <z_arm_clear_arm_mpu_config+0x1c>)
    41dc:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    41de:	2100      	movs	r1, #0
    41e0:	6111      	str	r1, [r2, #16]
    41e2:	3301      	adds	r3, #1
    41e4:	e7f7      	b.n	41d6 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    41e6:	4770      	bx	lr
    41e8:	e000ed90 	.word	0xe000ed90

000041ec <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    41ec:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    41ee:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    41f0:	2400      	movs	r4, #0
    41f2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    41f6:	f7ff ffe9 	bl	41cc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    41fa:	4623      	mov	r3, r4
    41fc:	2b0f      	cmp	r3, #15
    41fe:	d809      	bhi.n	4214 <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4200:	f103 0120 	add.w	r1, r3, #32
    4204:	4a0d      	ldr	r2, [pc, #52]	; (423c <z_arm_init_arch_hw_at_boot+0x50>)
    4206:	f04f 30ff 	mov.w	r0, #4294967295
    420a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    420e:	3301      	adds	r3, #1
    4210:	b2db      	uxtb	r3, r3
    4212:	e7f3      	b.n	41fc <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4214:	2300      	movs	r3, #0
    4216:	2b0f      	cmp	r3, #15
    4218:	d809      	bhi.n	422e <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    421a:	f103 0160 	add.w	r1, r3, #96	; 0x60
    421e:	4a07      	ldr	r2, [pc, #28]	; (423c <z_arm_init_arch_hw_at_boot+0x50>)
    4220:	f04f 30ff 	mov.w	r0, #4294967295
    4224:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4228:	3301      	adds	r3, #1
    422a:	b2db      	uxtb	r3, r3
    422c:	e7f3      	b.n	4216 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    422e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4230:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4234:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4238:	bd10      	pop	{r4, pc}
    423a:	bf00      	nop
    423c:	e000e100 	.word	0xe000e100

00004240 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4240:	b508      	push	{r3, lr}
	if (_current == thread) {
    4242:	4b08      	ldr	r3, [pc, #32]	; (4264 <z_impl_k_thread_abort+0x24>)
    4244:	689b      	ldr	r3, [r3, #8]
    4246:	4283      	cmp	r3, r0
    4248:	d002      	beq.n	4250 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    424a:	f007 fe8b 	bl	bf64 <z_thread_abort>
}
    424e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4250:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4254:	2b00      	cmp	r3, #0
    4256:	d0f8      	beq.n	424a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4258:	4a03      	ldr	r2, [pc, #12]	; (4268 <z_impl_k_thread_abort+0x28>)
    425a:	6853      	ldr	r3, [r2, #4]
    425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4260:	6053      	str	r3, [r2, #4]
    4262:	e7f2      	b.n	424a <z_impl_k_thread_abort+0xa>
    4264:	2001b630 	.word	0x2001b630
    4268:	e000ed00 	.word	0xe000ed00

0000426c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    426c:	b510      	push	{r4, lr}
    426e:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4270:	4c09      	ldr	r4, [pc, #36]	; (4298 <z_arm_configure_static_mpu_regions+0x2c>)
    4272:	4623      	mov	r3, r4
    4274:	4a09      	ldr	r2, [pc, #36]	; (429c <z_arm_configure_static_mpu_regions+0x30>)
    4276:	2101      	movs	r1, #1
    4278:	4809      	ldr	r0, [pc, #36]	; (42a0 <z_arm_configure_static_mpu_regions+0x34>)
    427a:	f00a f9c5 	bl	e608 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    427e:	2300      	movs	r3, #0
    4280:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    4282:	4b08      	ldr	r3, [pc, #32]	; (42a4 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4284:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    4286:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4288:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    428a:	2101      	movs	r1, #1
    428c:	a801      	add	r0, sp, #4
    428e:	f00a f9bf 	bl	e610 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4292:	b004      	add	sp, #16
    4294:	bd10      	pop	{r4, pc}
    4296:	bf00      	nop
    4298:	20080000 	.word	0x20080000
    429c:	20000000 	.word	0x20000000
    42a0:	00055374 	.word	0x00055374
    42a4:	20000340 	.word	0x20000340

000042a8 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    42a8:	4b01      	ldr	r3, [pc, #4]	; (42b0 <mpu_init+0x8>)
    42aa:	4a02      	ldr	r2, [pc, #8]	; (42b4 <mpu_init+0xc>)
    42ac:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    42ae:	4770      	bx	lr
    42b0:	e000ed90 	.word	0xe000ed90
    42b4:	0044ffaa 	.word	0x0044ffaa

000042b8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    42b8:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    42ba:	680b      	ldr	r3, [r1, #0]
    42bc:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    42c0:	7a0c      	ldrb	r4, [r1, #8]
    42c2:	f004 031f 	and.w	r3, r4, #31
    42c6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    42c8:	68cb      	ldr	r3, [r1, #12]
    42ca:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    42ce:	0964      	lsrs	r4, r4, #5
    42d0:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    42d4:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    42d8:	4902      	ldr	r1, [pc, #8]	; (42e4 <region_init+0x2c>)
    42da:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    42dc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    42de:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    42e0:	bc10      	pop	{r4}
    42e2:	4770      	bx	lr
    42e4:	e000ed90 	.word	0xe000ed90

000042e8 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    42e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42ec:	b087      	sub	sp, #28
    42ee:	4681      	mov	r9, r0
    42f0:	9100      	str	r1, [sp, #0]
    42f2:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    42f4:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    42f6:	2700      	movs	r7, #0
    42f8:	e034      	b.n	4364 <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
    42fa:	f06f 0615 	mvn.w	r6, #21
    42fe:	e053      	b.n	43a8 <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    4300:	45d8      	cmp	r8, fp
    4302:	d169      	bne.n	43d8 <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    4304:	4629      	mov	r1, r5
    4306:	b2f0      	uxtb	r0, r6
    4308:	f00a f963 	bl	e5d2 <mpu_configure_region>
    430c:	e029      	b.n	4362 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
    430e:	4b58      	ldr	r3, [pc, #352]	; (4470 <mpu_configure_regions_and_partition+0x188>)
    4310:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4312:	68d9      	ldr	r1, [r3, #12]
    4314:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    4318:	f022 021f 	bic.w	r2, r2, #31
    431c:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    431e:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    4320:	4629      	mov	r1, r5
    4322:	b2e0      	uxtb	r0, r4
    4324:	f00a f955 	bl	e5d2 <mpu_configure_region>
    4328:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    432a:	f110 0f16 	cmn.w	r0, #22
    432e:	f000 8097 	beq.w	4460 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    4332:	3401      	adds	r4, #1
    4334:	e015      	b.n	4362 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    4336:	3b01      	subs	r3, #1
	MPU->RNR = index;
    4338:	494d      	ldr	r1, [pc, #308]	; (4470 <mpu_configure_regions_and_partition+0x188>)
    433a:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    433c:	690a      	ldr	r2, [r1, #16]
    433e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4342:	f023 031f 	bic.w	r3, r3, #31
    4346:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4348:	610b      	str	r3, [r1, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    434a:	4629      	mov	r1, r5
    434c:	b2e0      	uxtb	r0, r4
    434e:	f00a f940 	bl	e5d2 <mpu_configure_region>
    4352:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    4354:	f110 0f16 	cmn.w	r0, #22
    4358:	f000 8082 	beq.w	4460 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    435c:	3401      	adds	r4, #1
    435e:	e000      	b.n	4362 <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    4360:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    4362:	3701      	adds	r7, #1
    4364:	9b00      	ldr	r3, [sp, #0]
    4366:	429f      	cmp	r7, r3
    4368:	da7a      	bge.n	4460 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
    436a:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    436e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    4372:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    4376:	f8d5 8004 	ldr.w	r8, [r5, #4]
    437a:	f1b8 0f00 	cmp.w	r8, #0
    437e:	d0f0      	beq.n	4362 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    4380:	9b01      	ldr	r3, [sp, #4]
    4382:	b123      	cbz	r3, 438e <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
    4384:	4628      	mov	r0, r5
    4386:	f00a f907 	bl	e598 <mpu_partition_is_valid>
		if (do_sanity_check &&
    438a:	2800      	cmp	r0, #0
    438c:	d064      	beq.n	4458 <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
    438e:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4392:	4658      	mov	r0, fp
    4394:	f00a f8f6 	bl	e584 <arm_cmse_mpu_region_get>
    4398:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    439a:	eb08 000b 	add.w	r0, r8, fp
    439e:	3801      	subs	r0, #1
    43a0:	f00a f8f0 	bl	e584 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    43a4:	4286      	cmp	r6, r0
    43a6:	d1a8      	bne.n	42fa <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    43a8:	f116 0f16 	cmn.w	r6, #22
    43ac:	d057      	beq.n	445e <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
    43ae:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    43b0:	42b3      	cmp	r3, r6
    43b2:	db59      	blt.n	4468 <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    43b4:	4630      	mov	r0, r6
	MPU->RNR = index;
    43b6:	4b2e      	ldr	r3, [pc, #184]	; (4470 <mpu_configure_regions_and_partition+0x188>)
    43b8:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    43ba:	68d9      	ldr	r1, [r3, #12]
    43bc:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    43c0:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    43c2:	691b      	ldr	r3, [r3, #16]
    43c4:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    43c8:	f859 300a 	ldr.w	r3, [r9, sl]
    43cc:	686a      	ldr	r2, [r5, #4]
    43ce:	441a      	add	r2, r3
    43d0:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    43d4:	4299      	cmp	r1, r3
    43d6:	d093      	beq.n	4300 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    43d8:	4299      	cmp	r1, r3
    43da:	d098      	beq.n	430e <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    43dc:	45d8      	cmp	r8, fp
    43de:	d0aa      	beq.n	4336 <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
    43e0:	3b01      	subs	r3, #1
	MPU->RNR = index;
    43e2:	4923      	ldr	r1, [pc, #140]	; (4470 <mpu_configure_regions_and_partition+0x188>)
    43e4:	4606      	mov	r6, r0
    43e6:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    43e8:	690a      	ldr	r2, [r1, #16]
    43ea:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    43ee:	f023 031f 	bic.w	r3, r3, #31
    43f2:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    43f4:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
    43f6:	4629      	mov	r1, r5
    43f8:	b2e0      	uxtb	r0, r4
    43fa:	f00a f8ea 	bl	e5d2 <mpu_configure_region>
    43fe:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4400:	f110 0f16 	cmn.w	r0, #22
    4404:	d02c      	beq.n	4460 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
    4406:	3001      	adds	r0, #1
	MPU->RNR = index;
    4408:	4b19      	ldr	r3, [pc, #100]	; (4470 <mpu_configure_regions_and_partition+0x188>)
    440a:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    440c:	68d9      	ldr	r1, [r3, #12]
    440e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    4412:	f361 0204 	bfi	r2, r1, #0, #5
    4416:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    441a:	691b      	ldr	r3, [r3, #16]
    441c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    4420:	b2d2      	uxtb	r2, r2
    4422:	f363 1247 	bfi	r2, r3, #5, #3
    4426:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    442a:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    442e:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    4430:	4413      	add	r3, r2
    4432:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    4434:	f023 031f 	bic.w	r3, r3, #31
    4438:	eba8 080b 	sub.w	r8, r8, fp
    443c:	4443      	add	r3, r8
    443e:	3b01      	subs	r3, #1
    4440:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    4444:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    4446:	a902      	add	r1, sp, #8
    4448:	b2c0      	uxtb	r0, r0
    444a:	f00a f8b7 	bl	e5bc <region_allocate_and_init>
    444e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4450:	f110 0f16 	cmn.w	r0, #22
    4454:	d184      	bne.n	4360 <mpu_configure_regions_and_partition+0x78>
    4456:	e003      	b.n	4460 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    4458:	f06f 0415 	mvn.w	r4, #21
    445c:	e000      	b.n	4460 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    445e:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    4460:	4620      	mov	r0, r4
    4462:	b007      	add	sp, #28
    4464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    4468:	f06f 0415 	mvn.w	r4, #21
    446c:	e7f8      	b.n	4460 <mpu_configure_regions_and_partition+0x178>
    446e:	bf00      	nop
    4470:	e000ed90 	.word	0xe000ed90

00004474 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4474:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4476:	4c03      	ldr	r4, [pc, #12]	; (4484 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4478:	2301      	movs	r3, #1
    447a:	7822      	ldrb	r2, [r4, #0]
    447c:	f7ff ff34 	bl	42e8 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4480:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4482:	bd10      	pop	{r4, pc}
    4484:	2001b69d 	.word	0x2001b69d

00004488 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    4488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    448c:	4607      	mov	r7, r0
    448e:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4490:	2400      	movs	r4, #0
    4492:	e003      	b.n	449c <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    4494:	f06f 0515 	mvn.w	r5, #21
    4498:	e017      	b.n	44ca <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    449a:	3401      	adds	r4, #1
    449c:	45a0      	cmp	r8, r4
    449e:	dd3c      	ble.n	451a <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
    44a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    44a4:	009a      	lsls	r2, r3, #2
    44a6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    44aa:	685e      	ldr	r6, [r3, #4]
    44ac:	2e00      	cmp	r6, #0
    44ae:	d0f4      	beq.n	449a <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    44b0:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    44b4:	4648      	mov	r0, r9
    44b6:	f00a f865 	bl	e584 <arm_cmse_mpu_region_get>
    44ba:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    44bc:	eb06 0009 	add.w	r0, r6, r9
    44c0:	3801      	subs	r0, #1
    44c2:	f00a f85f 	bl	e584 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    44c6:	4285      	cmp	r5, r0
    44c8:	d1e4      	bne.n	4494 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    44ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    44ce:	4a16      	ldr	r2, [pc, #88]	; (4528 <mpu_mark_areas_for_dynamic_regions+0xa0>)
    44d0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    44d4:	f115 0f16 	cmn.w	r5, #22
    44d8:	d020      	beq.n	451c <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    44da:	4b14      	ldr	r3, [pc, #80]	; (452c <mpu_mark_areas_for_dynamic_regions+0xa4>)
    44dc:	781b      	ldrb	r3, [r3, #0]
    44de:	42ab      	cmp	r3, r5
    44e0:	dd1f      	ble.n	4522 <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    44e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    44e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    44ea:	4a11      	ldr	r2, [pc, #68]	; (4530 <mpu_mark_areas_for_dynamic_regions+0xa8>)
    44ec:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    44ee:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    44f0:	68d5      	ldr	r5, [r2, #12]
    44f2:	7b18      	ldrb	r0, [r3, #12]
    44f4:	f365 0004 	bfi	r0, r5, #0, #5
    44f8:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    44fa:	6910      	ldr	r0, [r2, #16]
    44fc:	f3c0 0042 	ubfx	r0, r0, #1, #3
    4500:	7b1d      	ldrb	r5, [r3, #12]
    4502:	f360 1547 	bfi	r5, r0, #5, #3
    4506:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    4508:	68d1      	ldr	r1, [r2, #12]
    450a:	f021 011f 	bic.w	r1, r1, #31
    450e:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    4510:	6912      	ldr	r2, [r2, #16]
    4512:	f022 021f 	bic.w	r2, r2, #31
    4516:	611a      	str	r2, [r3, #16]
}
    4518:	e7bf      	b.n	449a <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    451a:	2500      	movs	r5, #0
}
    451c:	4628      	mov	r0, r5
    451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    4522:	f06f 0515 	mvn.w	r5, #21
    4526:	e7f9      	b.n	451c <mpu_mark_areas_for_dynamic_regions+0x94>
    4528:	2001b47c 	.word	0x2001b47c
    452c:	2001b69d 	.word	0x2001b69d
    4530:	e000ed90 	.word	0xe000ed90

00004534 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4534:	4b03      	ldr	r3, [pc, #12]	; (4544 <arm_core_mpu_enable+0x10>)
    4536:	2205      	movs	r2, #5
    4538:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    453a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    453e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4542:	4770      	bx	lr
    4544:	e000ed90 	.word	0xe000ed90

00004548 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4548:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    454c:	4b01      	ldr	r3, [pc, #4]	; (4554 <arm_core_mpu_disable+0xc>)
    454e:	2200      	movs	r2, #0
    4550:	605a      	str	r2, [r3, #4]
}
    4552:	4770      	bx	lr
    4554:	e000ed90 	.word	0xe000ed90

00004558 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4558:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    455a:	4b0e      	ldr	r3, [pc, #56]	; (4594 <z_arm_mpu_init+0x3c>)
    455c:	681d      	ldr	r5, [r3, #0]
    455e:	2d08      	cmp	r5, #8
    4560:	d815      	bhi.n	458e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4562:	f7ff fff1 	bl	4548 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    4566:	f7ff fe9f 	bl	42a8 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    456a:	2400      	movs	r4, #0
    456c:	42a5      	cmp	r5, r4
    456e:	d908      	bls.n	4582 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4570:	4b08      	ldr	r3, [pc, #32]	; (4594 <z_arm_mpu_init+0x3c>)
    4572:	6859      	ldr	r1, [r3, #4]
    4574:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    4578:	4620      	mov	r0, r4
    457a:	f7ff fe9d 	bl	42b8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    457e:	3401      	adds	r4, #1
    4580:	e7f4      	b.n	456c <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4582:	4b05      	ldr	r3, [pc, #20]	; (4598 <z_arm_mpu_init+0x40>)
    4584:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4586:	f7ff ffd5 	bl	4534 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    458a:	2000      	movs	r0, #0
}
    458c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    458e:	f04f 30ff 	mov.w	r0, #4294967295
    4592:	e7fb      	b.n	458c <z_arm_mpu_init+0x34>
    4594:	00055398 	.word	0x00055398
    4598:	2001b69d 	.word	0x2001b69d

0000459c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    459c:	4b01      	ldr	r3, [pc, #4]	; (45a4 <__stdout_hook_install+0x8>)
    459e:	6018      	str	r0, [r3, #0]
}
    45a0:	4770      	bx	lr
    45a2:	bf00      	nop
    45a4:	20000030 	.word	0x20000030

000045a8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    45a8:	b570      	push	{r4, r5, r6, lr}
    45aa:	4606      	mov	r6, r0
    45ac:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    45ae:	2400      	movs	r4, #0
    45b0:	e000      	b.n	45b4 <z_impl_zephyr_read_stdin+0xc>
    45b2:	3401      	adds	r4, #1
    45b4:	42ac      	cmp	r4, r5
    45b6:	da08      	bge.n	45ca <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    45b8:	4b05      	ldr	r3, [pc, #20]	; (45d0 <z_impl_zephyr_read_stdin+0x28>)
    45ba:	681b      	ldr	r3, [r3, #0]
    45bc:	4798      	blx	r3
    45be:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    45c0:	280a      	cmp	r0, #10
    45c2:	d001      	beq.n	45c8 <z_impl_zephyr_read_stdin+0x20>
    45c4:	280d      	cmp	r0, #13
    45c6:	d1f4      	bne.n	45b2 <z_impl_zephyr_read_stdin+0xa>
			i++;
    45c8:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    45ca:	4620      	mov	r0, r4
    45cc:	bd70      	pop	{r4, r5, r6, pc}
    45ce:	bf00      	nop
    45d0:	2000002c 	.word	0x2000002c

000045d4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    45d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45d6:	4605      	mov	r5, r0
    45d8:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    45da:	2400      	movs	r4, #0
    45dc:	e004      	b.n	45e8 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    45de:	4b09      	ldr	r3, [pc, #36]	; (4604 <z_impl_zephyr_write_stdout+0x30>)
    45e0:	681b      	ldr	r3, [r3, #0]
    45e2:	7830      	ldrb	r0, [r6, #0]
    45e4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    45e6:	3401      	adds	r4, #1
    45e8:	42bc      	cmp	r4, r7
    45ea:	da08      	bge.n	45fe <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    45ec:	192e      	adds	r6, r5, r4
    45ee:	5d2b      	ldrb	r3, [r5, r4]
    45f0:	2b0a      	cmp	r3, #10
    45f2:	d1f4      	bne.n	45de <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    45f4:	4b03      	ldr	r3, [pc, #12]	; (4604 <z_impl_zephyr_write_stdout+0x30>)
    45f6:	681b      	ldr	r3, [r3, #0]
    45f8:	200d      	movs	r0, #13
    45fa:	4798      	blx	r3
    45fc:	e7ef      	b.n	45de <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    45fe:	4638      	mov	r0, r7
    4600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4602:	bf00      	nop
    4604:	20000030 	.word	0x20000030

00004608 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4608:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    460a:	2205      	movs	r2, #5
    460c:	4902      	ldr	r1, [pc, #8]	; (4618 <_exit+0x10>)
    460e:	2001      	movs	r0, #1
    4610:	f00a f80f 	bl	e632 <_write>
	while (1) {
    4614:	e7fe      	b.n	4614 <_exit+0xc>
    4616:	bf00      	nop
    4618:	00055380 	.word	0x00055380

0000461c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    461c:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    461e:	4b08      	ldr	r3, [pc, #32]	; (4640 <_sbrk+0x24>)
    4620:	6819      	ldr	r1, [r3, #0]
    4622:	4b08      	ldr	r3, [pc, #32]	; (4644 <_sbrk+0x28>)
    4624:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4626:	440a      	add	r2, r1
    4628:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    462c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    4630:	429a      	cmp	r2, r3
    4632:	d202      	bcs.n	463a <_sbrk+0x1e>
		heap_sz += count;
    4634:	4b02      	ldr	r3, [pc, #8]	; (4640 <_sbrk+0x24>)
    4636:	601a      	str	r2, [r3, #0]
		ret = ptr;
    4638:	4770      	bx	lr
	} else {
		ret = (void *)-1;
    463a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    463e:	4770      	bx	lr
    4640:	2001b490 	.word	0x2001b490
    4644:	200241a0 	.word	0x200241a0

00004648 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4648:	4800      	ldr	r0, [pc, #0]	; (464c <get_hf_flags+0x4>)
    464a:	4770      	bx	lr
    464c:	2001b52c 	.word	0x2001b52c

00004650 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4650:	4b01      	ldr	r3, [pc, #4]	; (4658 <get_subsys+0x8>)
    4652:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    4654:	1140      	asrs	r0, r0, #5
    4656:	4770      	bx	lr
    4658:	2001b4a4 	.word	0x2001b4a4

0000465c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    465c:	b538      	push	{r3, r4, r5, lr}
    465e:	4605      	mov	r5, r0
    4660:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4662:	f7ff fff5 	bl	4650 <get_subsys>
    4666:	4601      	mov	r1, r0
    4668:	2240      	movs	r2, #64	; 0x40
    466a:	4803      	ldr	r0, [pc, #12]	; (4678 <onoff_stop+0x1c>)
    466c:	f00a f888 	bl	e780 <stop>
    4670:	4601      	mov	r1, r0
	notify(mgr, res);
    4672:	4628      	mov	r0, r5
    4674:	47a0      	blx	r4
}
    4676:	bd38      	pop	{r3, r4, r5, pc}
    4678:	00010dd4 	.word	0x00010dd4

0000467c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    467c:	b530      	push	{r4, r5, lr}
    467e:	b083      	sub	sp, #12
    4680:	4605      	mov	r5, r0
    4682:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4684:	f7ff ffe4 	bl	4650 <get_subsys>
    4688:	4601      	mov	r1, r0
    468a:	2340      	movs	r3, #64	; 0x40
    468c:	9300      	str	r3, [sp, #0]
    468e:	4623      	mov	r3, r4
    4690:	4a05      	ldr	r2, [pc, #20]	; (46a8 <onoff_start+0x2c>)
    4692:	4806      	ldr	r0, [pc, #24]	; (46ac <onoff_start+0x30>)
    4694:	f00a f88e 	bl	e7b4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4698:	1e01      	subs	r1, r0, #0
    469a:	db01      	blt.n	46a0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    469c:	b003      	add	sp, #12
    469e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    46a0:	4628      	mov	r0, r5
    46a2:	47a0      	blx	r4
}
    46a4:	e7fa      	b.n	469c <onoff_start+0x20>
    46a6:	bf00      	nop
    46a8:	0000e7fd 	.word	0x0000e7fd
    46ac:	00010dd4 	.word	0x00010dd4

000046b0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    46b0:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    46b2:	2805      	cmp	r0, #5
    46b4:	d815      	bhi.n	46e2 <clock_event_handler+0x32>
    46b6:	e8df f000 	tbb	[pc, r0]
    46ba:	1a03      	.short	0x1a03
    46bc:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    46c0:	2100      	movs	r1, #0
    46c2:	480d      	ldr	r0, [pc, #52]	; (46f8 <clock_event_handler+0x48>)
    46c4:	f009 ffe7 	bl	e696 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    46c8:	6883      	ldr	r3, [r0, #8]
    46ca:	f013 0f07 	tst.w	r3, #7
    46ce:	d108      	bne.n	46e2 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    46d0:	2100      	movs	r1, #0
    46d2:	4809      	ldr	r0, [pc, #36]	; (46f8 <clock_event_handler+0x48>)
    46d4:	f00a f842 	bl	e75c <clkstarted_handle>
    46d8:	e003      	b.n	46e2 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    46da:	2102      	movs	r1, #2
    46dc:	4806      	ldr	r0, [pc, #24]	; (46f8 <clock_event_handler+0x48>)
    46de:	f00a f83d 	bl	e75c <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    46e2:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    46e4:	2103      	movs	r1, #3
    46e6:	4804      	ldr	r0, [pc, #16]	; (46f8 <clock_event_handler+0x48>)
    46e8:	f00a f838 	bl	e75c <clkstarted_handle>
		break;
    46ec:	e7f9      	b.n	46e2 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    46ee:	2101      	movs	r1, #1
    46f0:	4801      	ldr	r0, [pc, #4]	; (46f8 <clock_event_handler+0x48>)
    46f2:	f00a f833 	bl	e75c <clkstarted_handle>
}
    46f6:	e7f4      	b.n	46e2 <clock_event_handler+0x32>
    46f8:	00010dd4 	.word	0x00010dd4

000046fc <generic_hfclk_start>:
{
    46fc:	b510      	push	{r4, lr}
	__asm__ volatile(
    46fe:	f04f 0320 	mov.w	r3, #32
    4702:	f3ef 8411 	mrs	r4, BASEPRI
    4706:	f383 8812 	msr	BASEPRI_MAX, r3
    470a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    470e:	4a13      	ldr	r2, [pc, #76]	; (475c <generic_hfclk_start+0x60>)
    4710:	6813      	ldr	r3, [r2, #0]
    4712:	f043 0302 	orr.w	r3, r3, #2
    4716:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4718:	f013 0f01 	tst.w	r3, #1
    471c:	d108      	bne.n	4730 <generic_hfclk_start+0x34>
	bool already_started = false;
    471e:	2300      	movs	r3, #0
	__asm__ volatile(
    4720:	f384 8811 	msr	BASEPRI, r4
    4724:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4728:	b99b      	cbnz	r3, 4752 <generic_hfclk_start+0x56>
	hfclk_start();
    472a:	f00a f86f 	bl	e80c <hfclk_start>
}
    472e:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4730:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4734:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4738:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    473c:	f012 0f01 	tst.w	r2, #1
    4740:	d101      	bne.n	4746 <generic_hfclk_start+0x4a>
	bool already_started = false;
    4742:	2300      	movs	r3, #0
    4744:	e7ec      	b.n	4720 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4746:	f7ff ff7f 	bl	4648 <get_hf_flags>
    474a:	f009 fff4 	bl	e736 <set_on_state>
			already_started = true;
    474e:	2301      	movs	r3, #1
    4750:	e7e6      	b.n	4720 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    4752:	2100      	movs	r1, #0
    4754:	4802      	ldr	r0, [pc, #8]	; (4760 <generic_hfclk_start+0x64>)
    4756:	f00a f801 	bl	e75c <clkstarted_handle>
		return;
    475a:	e7e8      	b.n	472e <generic_hfclk_start+0x32>
    475c:	2001b554 	.word	0x2001b554
    4760:	00010dd4 	.word	0x00010dd4

00004764 <generic_hfclk_stop>:
{
    4764:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4766:	4b08      	ldr	r3, [pc, #32]	; (4788 <generic_hfclk_stop+0x24>)
    4768:	e8d3 2fef 	ldaex	r2, [r3]
    476c:	f022 0102 	bic.w	r1, r2, #2
    4770:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4774:	2800      	cmp	r0, #0
    4776:	d1f7      	bne.n	4768 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4778:	f012 0f01 	tst.w	r2, #1
    477c:	d000      	beq.n	4780 <generic_hfclk_stop+0x1c>
}
    477e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4780:	f00a f858 	bl	e834 <hfclk_stop>
    4784:	e7fb      	b.n	477e <generic_hfclk_stop+0x1a>
    4786:	bf00      	nop
    4788:	2001b554 	.word	0x2001b554

0000478c <api_blocking_start>:
{
    478c:	b500      	push	{lr}
    478e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4790:	f8cd d000 	str.w	sp, [sp]
    4794:	f8cd d004 	str.w	sp, [sp, #4]
    4798:	2300      	movs	r3, #0
    479a:	9302      	str	r3, [sp, #8]
    479c:	2301      	movs	r3, #1
    479e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    47a0:	466b      	mov	r3, sp
    47a2:	4a07      	ldr	r2, [pc, #28]	; (47c0 <api_blocking_start+0x34>)
    47a4:	f00a f822 	bl	e7ec <api_start>
	if (err < 0) {
    47a8:	2800      	cmp	r0, #0
    47aa:	db05      	blt.n	47b8 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    47ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    47b0:	2300      	movs	r3, #0
    47b2:	4668      	mov	r0, sp
    47b4:	f006 ffe8 	bl	b788 <z_impl_k_sem_take>
}
    47b8:	b005      	add	sp, #20
    47ba:	f85d fb04 	ldr.w	pc, [sp], #4
    47be:	bf00      	nop
    47c0:	0000e85d 	.word	0x0000e85d

000047c4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    47c4:	b570      	push	{r4, r5, r6, lr}
    47c6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    47c8:	2200      	movs	r2, #0
    47ca:	2101      	movs	r1, #1
    47cc:	2005      	movs	r0, #5
    47ce:	f7ff fa97 	bl	3d00 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    47d2:	2005      	movs	r0, #5
    47d4:	f7ff fa76 	bl	3cc4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    47d8:	4811      	ldr	r0, [pc, #68]	; (4820 <clk_init+0x5c>)
    47da:	f001 f963 	bl	5aa4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    47de:	4b11      	ldr	r3, [pc, #68]	; (4824 <clk_init+0x60>)
    47e0:	4298      	cmp	r0, r3
    47e2:	d119      	bne.n	4818 <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    47e4:	f00a fb5d 	bl	eea2 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    47e8:	2400      	movs	r4, #0
    47ea:	2c03      	cmp	r4, #3
    47ec:	d812      	bhi.n	4814 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    47ee:	4621      	mov	r1, r4
    47f0:	4630      	mov	r0, r6
    47f2:	f009 ff50 	bl	e696 <get_sub_data>
    47f6:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    47f8:	4621      	mov	r1, r4
    47fa:	4630      	mov	r0, r6
    47fc:	f009 ff56 	bl	e6ac <get_onoff_manager>
    4800:	4909      	ldr	r1, [pc, #36]	; (4828 <clk_init+0x64>)
    4802:	f009 fb3c 	bl	de7e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4806:	2800      	cmp	r0, #0
    4808:	db05      	blt.n	4816 <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    480a:	2301      	movs	r3, #1
    480c:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    480e:	441c      	add	r4, r3
    4810:	b2e4      	uxtb	r4, r4
    4812:	e7ea      	b.n	47ea <clk_init+0x26>
	}

	return 0;
    4814:	2000      	movs	r0, #0
}
    4816:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4818:	f06f 0004 	mvn.w	r0, #4
    481c:	e7fb      	b.n	4816 <clk_init+0x52>
    481e:	bf00      	nop
    4820:	000046b1 	.word	0x000046b1
    4824:	0bad0000 	.word	0x0bad0000
    4828:	000553fc 	.word	0x000553fc

0000482c <lfclk_spinwait>:
{
    482c:	b570      	push	{r4, r5, r6, lr}
    482e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4830:	2801      	cmp	r0, #1
    4832:	d107      	bne.n	4844 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4834:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4838:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    483c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4840:	2b02      	cmp	r3, #2
    4842:	d03f      	beq.n	48c4 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4844:	f00b fa9f 	bl	fd86 <k_is_in_isr>
    4848:	b920      	cbnz	r0, 4854 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    484a:	4b30      	ldr	r3, [pc, #192]	; (490c <lfclk_spinwait+0xe0>)
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	b19b      	cbz	r3, 4878 <lfclk_spinwait+0x4c>
    4850:	2300      	movs	r3, #0
    4852:	e000      	b.n	4856 <lfclk_spinwait+0x2a>
    4854:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    4856:	461c      	mov	r4, r3
    4858:	b183      	cbz	r3, 487c <lfclk_spinwait+0x50>
	__asm__ volatile(
    485a:	f04f 0320 	mov.w	r3, #32
    485e:	f3ef 8611 	mrs	r6, BASEPRI
    4862:	f383 8812 	msr	BASEPRI_MAX, r3
    4866:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    486a:	b9a4      	cbnz	r4, 4896 <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    486c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4870:	2202      	movs	r2, #2
    4872:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4876:	e00e      	b.n	4896 <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4878:	2301      	movs	r3, #1
    487a:	e7ec      	b.n	4856 <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    487c:	2600      	movs	r6, #0
    487e:	e7f4      	b.n	486a <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4880:	b30c      	cbz	r4, 48c6 <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4882:	4630      	mov	r0, r6
    4884:	f7ff fa14 	bl	3cb0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4888:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    488c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4890:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4892:	2b01      	cmp	r3, #1
    4894:	d01c      	beq.n	48d0 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4896:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    489a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    489e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    48a2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    48a6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    48aa:	d126      	bne.n	48fa <lfclk_spinwait+0xce>
    return false;
    48ac:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    48ae:	2a00      	cmp	r2, #0
    48b0:	d0e6      	beq.n	4880 <lfclk_spinwait+0x54>
    48b2:	2b02      	cmp	r3, #2
    48b4:	d001      	beq.n	48ba <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    48b6:	2d01      	cmp	r5, #1
    48b8:	d1e2      	bne.n	4880 <lfclk_spinwait+0x54>
	if (isr_mode) {
    48ba:	b304      	cbz	r4, 48fe <lfclk_spinwait+0xd2>
	__asm__ volatile(
    48bc:	f386 8811 	msr	BASEPRI, r6
    48c0:	f3bf 8f6f 	isb	sy
}
    48c4:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    48c6:	2021      	movs	r0, #33	; 0x21
    48c8:	2100      	movs	r1, #0
    48ca:	f007 fb19 	bl	bf00 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    48ce:	e7db      	b.n	4888 <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48d0:	4b0f      	ldr	r3, [pc, #60]	; (4910 <lfclk_spinwait+0xe4>)
    48d2:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    48d4:	2b00      	cmp	r3, #0
    48d6:	d0de      	beq.n	4896 <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48d8:	4b0d      	ldr	r3, [pc, #52]	; (4910 <lfclk_spinwait+0xe4>)
    48da:	2200      	movs	r2, #0
    48dc:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    48de:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    48e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    48e4:	2202      	movs	r2, #2
    48e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48ea:	4b0a      	ldr	r3, [pc, #40]	; (4914 <lfclk_spinwait+0xe8>)
    48ec:	2220      	movs	r2, #32
    48ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48f2:	4b09      	ldr	r3, [pc, #36]	; (4918 <lfclk_spinwait+0xec>)
    48f4:	2201      	movs	r2, #1
    48f6:	601a      	str	r2, [r3, #0]
}
    48f8:	e7cd      	b.n	4896 <lfclk_spinwait+0x6a>
                return true;
    48fa:	2201      	movs	r2, #1
    48fc:	e7d7      	b.n	48ae <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    48fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4902:	2202      	movs	r2, #2
    4904:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4908:	e7dc      	b.n	48c4 <lfclk_spinwait+0x98>
    490a:	bf00      	nop
    490c:	2001b69f 	.word	0x2001b69f
    4910:	50005104 	.word	0x50005104
    4914:	e000e100 	.word	0xe000e100
    4918:	50005008 	.word	0x50005008

0000491c <z_nrf_clock_control_lf_on>:
{
    491c:	b510      	push	{r4, lr}
    491e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4920:	4b0e      	ldr	r3, [pc, #56]	; (495c <z_nrf_clock_control_lf_on+0x40>)
    4922:	2101      	movs	r1, #1
    4924:	e8d3 2fef 	ldaex	r2, [r3]
    4928:	e8c3 1fe0 	stlex	r0, r1, [r3]
    492c:	2800      	cmp	r0, #0
    492e:	d1f9      	bne.n	4924 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    4930:	b11a      	cbz	r2, 493a <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    4932:	1e63      	subs	r3, r4, #1
    4934:	2b01      	cmp	r3, #1
    4936:	d90c      	bls.n	4952 <z_nrf_clock_control_lf_on+0x36>
}
    4938:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    493a:	4809      	ldr	r0, [pc, #36]	; (4960 <z_nrf_clock_control_lf_on+0x44>)
    493c:	f009 feb6 	bl	e6ac <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4940:	4908      	ldr	r1, [pc, #32]	; (4964 <z_nrf_clock_control_lf_on+0x48>)
    4942:	2300      	movs	r3, #0
    4944:	604b      	str	r3, [r1, #4]
    4946:	60cb      	str	r3, [r1, #12]
    4948:	2301      	movs	r3, #1
    494a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    494c:	f009 fab3 	bl	deb6 <onoff_request>
    4950:	e7ef      	b.n	4932 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    4952:	4620      	mov	r0, r4
    4954:	f7ff ff6a 	bl	482c <lfclk_spinwait>
		break;
    4958:	e7ee      	b.n	4938 <z_nrf_clock_control_lf_on+0x1c>
    495a:	bf00      	nop
    495c:	2001b558 	.word	0x2001b558
    4960:	00010dd4 	.word	0x00010dd4
    4964:	2001b494 	.word	0x2001b494

00004968 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4968:	b538      	push	{r3, r4, r5, lr}
    496a:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    496c:	b2c5      	uxtb	r5, r0
    496e:	4b0b      	ldr	r3, [pc, #44]	; (499c <console_out+0x34>)
    4970:	681b      	ldr	r3, [r3, #0]
    4972:	4628      	mov	r0, r5
    4974:	4798      	blx	r3

	if (handled_by_debug_server) {
    4976:	2801      	cmp	r0, #1
    4978:	d007      	beq.n	498a <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    497a:	2c0a      	cmp	r4, #10
    497c:	d007      	beq.n	498e <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    497e:	4b08      	ldr	r3, [pc, #32]	; (49a0 <console_out+0x38>)
    4980:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4982:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4984:	685b      	ldr	r3, [r3, #4]
    4986:	4629      	mov	r1, r5
    4988:	4798      	blx	r3

	return c;
}
    498a:	4620      	mov	r0, r4
    498c:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    498e:	4b04      	ldr	r3, [pc, #16]	; (49a0 <console_out+0x38>)
    4990:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4992:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4994:	685b      	ldr	r3, [r3, #4]
    4996:	210d      	movs	r1, #13
    4998:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    499a:	e7f0      	b.n	497e <console_out+0x16>
    499c:	20000034 	.word	0x20000034
    49a0:	2001b55c 	.word	0x2001b55c

000049a4 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    49a4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    49a6:	4c04      	ldr	r4, [pc, #16]	; (49b8 <uart_console_hook_install+0x14>)
    49a8:	4620      	mov	r0, r4
    49aa:	f7ff fdf7 	bl	459c <__stdout_hook_install>
	__printk_hook_install(console_out);
    49ae:	4620      	mov	r0, r4
    49b0:	f7fe f89c 	bl	2aec <__printk_hook_install>
}
    49b4:	bd10      	pop	{r4, pc}
    49b6:	bf00      	nop
    49b8:	00004969 	.word	0x00004969

000049bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    49bc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    49be:	4806      	ldr	r0, [pc, #24]	; (49d8 <uart_console_init+0x1c>)
    49c0:	4b06      	ldr	r3, [pc, #24]	; (49dc <uart_console_init+0x20>)
    49c2:	6018      	str	r0, [r3, #0]
    49c4:	f00b f95a 	bl	fc7c <z_device_ready>
    49c8:	b118      	cbz	r0, 49d2 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    49ca:	f7ff ffeb 	bl	49a4 <uart_console_hook_install>

	return 0;
    49ce:	2000      	movs	r0, #0
}
    49d0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    49d2:	f06f 0012 	mvn.w	r0, #18
    49d6:	e7fb      	b.n	49d0 <uart_console_init+0x14>
    49d8:	00010dec 	.word	0x00010dec
    49dc:	2001b55c 	.word	0x2001b55c

000049e0 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    49e0:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    49e2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49e4:	f8d3 c004 	ldr.w	ip, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    49e8:	4b38      	ldr	r3, [pc, #224]	; (4acc <gpio_nrfx_config+0xec>)
    49ea:	4013      	ands	r3, r2
    49ec:	4c38      	ldr	r4, [pc, #224]	; (4ad0 <gpio_nrfx_config+0xf0>)
    49ee:	42a3      	cmp	r3, r4
    49f0:	d027      	beq.n	4a42 <gpio_nrfx_config+0x62>
    49f2:	d812      	bhi.n	4a1a <gpio_nrfx_config+0x3a>
    49f4:	2b06      	cmp	r3, #6
    49f6:	d026      	beq.n	4a46 <gpio_nrfx_config+0x66>
    49f8:	d904      	bls.n	4a04 <gpio_nrfx_config+0x24>
    49fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    49fe:	d109      	bne.n	4a14 <gpio_nrfx_config+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    4a00:	2501      	movs	r5, #1
    4a02:	e016      	b.n	4a32 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4a04:	b30b      	cbz	r3, 4a4a <gpio_nrfx_config+0x6a>
    4a06:	2b02      	cmp	r3, #2
    4a08:	d101      	bne.n	4a0e <gpio_nrfx_config+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    4a0a:	2504      	movs	r5, #4
    4a0c:	e011      	b.n	4a32 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4a0e:	f06f 0015 	mvn.w	r0, #21
    4a12:	e049      	b.n	4aa8 <gpio_nrfx_config+0xc8>
    4a14:	f06f 0015 	mvn.w	r0, #21
    4a18:	e046      	b.n	4aa8 <gpio_nrfx_config+0xc8>
    4a1a:	4c2e      	ldr	r4, [pc, #184]	; (4ad4 <gpio_nrfx_config+0xf4>)
    4a1c:	42a3      	cmp	r3, r4
    4a1e:	d016      	beq.n	4a4e <gpio_nrfx_config+0x6e>
    4a20:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4a24:	d101      	bne.n	4a2a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0H1;
    4a26:	2503      	movs	r5, #3
    4a28:	e003      	b.n	4a32 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4a2e:	d149      	bne.n	4ac4 <gpio_nrfx_config+0xe4>
		drive = NRF_GPIO_PIN_S0H1;
    4a30:	2502      	movs	r5, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    4a32:	f012 0f10 	tst.w	r2, #16
    4a36:	d10c      	bne.n	4a52 <gpio_nrfx_config+0x72>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    4a38:	f012 0f20 	tst.w	r2, #32
    4a3c:	d036      	beq.n	4aac <gpio_nrfx_config+0xcc>
		pull = NRF_GPIO_PIN_PULLDOWN;
    4a3e:	2601      	movs	r6, #1
    4a40:	e008      	b.n	4a54 <gpio_nrfx_config+0x74>
		drive = NRF_GPIO_PIN_H0D1;
    4a42:	2507      	movs	r5, #7
    4a44:	e7f5      	b.n	4a32 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0D1;
    4a46:	2506      	movs	r5, #6
    4a48:	e7f3      	b.n	4a32 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4a4a:	2500      	movs	r5, #0
    4a4c:	e7f1      	b.n	4a32 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0H1;
    4a4e:	2505      	movs	r5, #5
    4a50:	e7ef      	b.n	4a32 <gpio_nrfx_config+0x52>
		pull = NRF_GPIO_PIN_PULLUP;
    4a52:	2603      	movs	r6, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    4a54:	f3c2 2440 	ubfx	r4, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4a58:	f412 7f80 	tst.w	r2, #256	; 0x100
    4a5c:	bf0c      	ite	eq
    4a5e:	2701      	moveq	r7, #1
    4a60:	2700      	movne	r7, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    4a62:	f412 7f00 	tst.w	r2, #512	; 0x200
    4a66:	d006      	beq.n	4a76 <gpio_nrfx_config+0x96>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4a68:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4a6c:	d020      	beq.n	4ab0 <gpio_nrfx_config+0xd0>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4a6e:	2301      	movs	r3, #1
    4a70:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4a72:	f8cc 3008 	str.w	r3, [ip, #8]
	return port->config;
    4a76:	6843      	ldr	r3, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    4a78:	7a18      	ldrb	r0, [r3, #8]
    4a7a:	f001 031f 	and.w	r3, r1, #31
    4a7e:	ea43 1140 	orr.w	r1, r3, r0, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4a82:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a84:	2901      	cmp	r1, #1
    4a86:	d01b      	beq.n	4ac0 <gpio_nrfx_config+0xe0>
        case 0: return NRF_P0;
    4a88:	4813      	ldr	r0, [pc, #76]	; (4ad8 <gpio_nrfx_config+0xf8>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4a8a:	3380      	adds	r3, #128	; 0x80
    4a8c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    4a90:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4a94:	ea44 0247 	orr.w	r2, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4a98:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4a9c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4aa0:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    4aa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    4aa6:	2000      	movs	r0, #0
}
    4aa8:	bcf0      	pop	{r4, r5, r6, r7}
    4aaa:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    4aac:	2600      	movs	r6, #0
    4aae:	e7d1      	b.n	4a54 <gpio_nrfx_config+0x74>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    4ab0:	f412 6f80 	tst.w	r2, #1024	; 0x400
    4ab4:	d0df      	beq.n	4a76 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    4ab6:	2301      	movs	r3, #1
    4ab8:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4aba:	f8cc 300c 	str.w	r3, [ip, #12]
}
    4abe:	e7da      	b.n	4a76 <gpio_nrfx_config+0x96>
        case 1: return NRF_P1;
    4ac0:	4806      	ldr	r0, [pc, #24]	; (4adc <gpio_nrfx_config+0xfc>)
    4ac2:	e7e2      	b.n	4a8a <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ac4:	f06f 0015 	mvn.w	r0, #21
    4ac8:	e7ee      	b.n	4aa8 <gpio_nrfx_config+0xc8>
    4aca:	bf00      	nop
    4acc:	00f00006 	.word	0x00f00006
    4ad0:	00100006 	.word	0x00100006
    4ad4:	00400002 	.word	0x00400002
    4ad8:	50842500 	.word	0x50842500
    4adc:	50842800 	.word	0x50842800

00004ae0 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    4ae0:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    4ae2:	6905      	ldr	r5, [r0, #16]
	return port->config;
    4ae4:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    4ae6:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4ae8:	696a      	ldr	r2, [r5, #20]
    4aea:	69ab      	ldr	r3, [r5, #24]
    4aec:	4313      	orrs	r3, r2
    4aee:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    4af2:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4af4:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    4af6:	e010      	b.n	4b1a <cfg_level_pins+0x3a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    4af8:	f04f 0c02 	mov.w	ip, #2
    4afc:	e01c      	b.n	4b38 <cfg_level_pins+0x58>
    4afe:	4f13      	ldr	r7, [pc, #76]	; (4b4c <cfg_level_pins+0x6c>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4b00:	3480      	adds	r4, #128	; 0x80
    4b02:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    4b06:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4b0a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    4b0e:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    4b12:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    4b16:	3001      	adds	r0, #1
		bit <<= 1;
    4b18:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    4b1a:	b1a1      	cbz	r1, 4b46 <cfg_level_pins+0x66>
		if (level_pins & bit) {
    4b1c:	420b      	tst	r3, r1
    4b1e:	d0fa      	beq.n	4b16 <cfg_level_pins+0x36>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4b20:	7a34      	ldrb	r4, [r6, #8]
    4b22:	f000 021f 	and.w	r2, r0, #31
    4b26:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4b2a:	692c      	ldr	r4, [r5, #16]
    4b2c:	40c4      	lsrs	r4, r0
    4b2e:	f014 0f01 	tst.w	r4, #1
    4b32:	d1e1      	bne.n	4af8 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    4b34:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    4b38:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    4b3c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b3e:	2a01      	cmp	r2, #1
    4b40:	d0dd      	beq.n	4afe <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    4b42:	4f03      	ldr	r7, [pc, #12]	; (4b50 <cfg_level_pins+0x70>)
    4b44:	e7dc      	b.n	4b00 <cfg_level_pins+0x20>
	}
}
    4b46:	bcf0      	pop	{r4, r5, r6, r7}
    4b48:	4770      	bx	lr
    4b4a:	bf00      	nop
    4b4c:	50842800 	.word	0x50842800
    4b50:	50842500 	.word	0x50842500

00004b54 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    4b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b56:	468c      	mov	ip, r1
	return port->data;
    4b58:	6903      	ldr	r3, [r0, #16]
	return port->config;
    4b5a:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    4b5c:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4b5e:	695a      	ldr	r2, [r3, #20]
    4b60:	6998      	ldr	r0, [r3, #24]
    4b62:	4302      	orrs	r2, r0
    4b64:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    4b68:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    4b6a:	6912      	ldr	r2, [r2, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    4b6c:	6918      	ldr	r0, [r3, #16]
    4b6e:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    4b70:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    4b74:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    4b76:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4b78:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    4b7a:	e015      	b.n	4ba8 <check_level_trigger_pins+0x54>
        case 1: return NRF_P1;
    4b7c:	f8df e070 	ldr.w	lr, [pc, #112]	; 4bf0 <check_level_trigger_pins+0x9c>
    4b80:	e025      	b.n	4bce <check_level_trigger_pins+0x7a>
    *p_pin = pin_number & 0x1F;
    4b82:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    4b86:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b88:	2a01      	cmp	r2, #1
    4b8a:	d02d      	beq.n	4be8 <check_level_trigger_pins+0x94>
        case 0: return NRF_P0;
    4b8c:	f8df e064 	ldr.w	lr, [pc, #100]	; 4bf4 <check_level_trigger_pins+0xa0>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4b90:	f106 0280 	add.w	r2, r6, #128	; 0x80
    4b94:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    4b98:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4b9c:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    4ba0:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    4ba4:	3501      	adds	r5, #1
		bit <<= 1;
    4ba6:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    4ba8:	b30c      	cbz	r4, 4bee <check_level_trigger_pins+0x9a>
		if (check_pins & bit) {
    4baa:	4223      	tst	r3, r4
    4bac:	d0fa      	beq.n	4ba4 <check_level_trigger_pins+0x50>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4bae:	7a0e      	ldrb	r6, [r1, #8]
    4bb0:	f005 021f 	and.w	r2, r5, #31
    4bb4:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    4bb8:	423b      	tst	r3, r7
    4bba:	d1e2      	bne.n	4b82 <check_level_trigger_pins+0x2e>
    *p_pin = pin_number & 0x1F;
    4bbc:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    4bc0:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bc4:	f1be 0f01 	cmp.w	lr, #1
    4bc8:	d0d8      	beq.n	4b7c <check_level_trigger_pins+0x28>
        case 0: return NRF_P0;
    4bca:	f8df e028 	ldr.w	lr, [pc, #40]	; 4bf4 <check_level_trigger_pins+0xa0>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4bce:	3680      	adds	r6, #128	; 0x80
    4bd0:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4bd4:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    4bd8:	2e02      	cmp	r6, #2
    4bda:	d1d2      	bne.n	4b82 <check_level_trigger_pins+0x2e>
					*sense_levels |= bit;
    4bdc:	f8dc 6000 	ldr.w	r6, [ip]
    4be0:	431e      	orrs	r6, r3
    4be2:	f8cc 6000 	str.w	r6, [ip]
    4be6:	e7cc      	b.n	4b82 <check_level_trigger_pins+0x2e>
        case 1: return NRF_P1;
    4be8:	f8df e004 	ldr.w	lr, [pc, #4]	; 4bf0 <check_level_trigger_pins+0x9c>
    4bec:	e7d0      	b.n	4b90 <check_level_trigger_pins+0x3c>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    4bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bf0:	50842800 	.word	0x50842800
    4bf4:	50842500 	.word	0x50842500

00004bf8 <gpiote_pin_cleanup>:
{
    4bf8:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    4bfa:	4b14      	ldr	r3, [pc, #80]	; (4c4c <gpiote_pin_cleanup+0x54>)
    4bfc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    4c00:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4c02:	2300      	movs	r3, #0
    4c04:	e000      	b.n	4c08 <gpiote_pin_cleanup+0x10>
    4c06:	3301      	adds	r3, #1
    4c08:	2b07      	cmp	r3, #7
    4c0a:	d81d      	bhi.n	4c48 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4c0c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    4c10:	490e      	ldr	r1, [pc, #56]	; (4c4c <gpiote_pin_cleanup+0x54>)
    4c12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    4c16:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    4c1a:	4290      	cmp	r0, r2
    4c1c:	d1f3      	bne.n	4c06 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    4c1e:	fa24 f203 	lsr.w	r2, r4, r3
    4c22:	f012 0f01 	tst.w	r2, #1
    4c26:	d0ee      	beq.n	4c06 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    4c28:	460a      	mov	r2, r1
    4c2a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    4c2e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    4c32:	f021 0101 	bic.w	r1, r1, #1
    4c36:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    4c3a:	2101      	movs	r1, #1
    4c3c:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    4c3e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    4c42:	b2d8      	uxtb	r0, r3
    4c44:	f001 f924 	bl	5e90 <nrfx_gpiote_channel_free>
}
    4c48:	bd10      	pop	{r4, pc}
    4c4a:	bf00      	nop
    4c4c:	5000d000 	.word	0x5000d000

00004c50 <gpiote_channel_alloc>:
{
    4c50:	b570      	push	{r4, r5, r6, lr}
    4c52:	b082      	sub	sp, #8
    4c54:	4604      	mov	r4, r0
    4c56:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    4c58:	f10d 0007 	add.w	r0, sp, #7
    4c5c:	f001 f934 	bl	5ec8 <nrfx_gpiote_channel_alloc>
    4c60:	4b1c      	ldr	r3, [pc, #112]	; (4cd4 <gpiote_channel_alloc+0x84>)
    4c62:	4298      	cmp	r0, r3
    4c64:	d132      	bne.n	4ccc <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    4c66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4c6a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    4c6e:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4c70:	4e19      	ldr	r6, [pc, #100]	; (4cd8 <gpiote_channel_alloc+0x88>)
    4c72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4c76:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    4c7a:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    4c7e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4c82:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c86:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    4c8a:	0224      	lsls	r4, r4, #8
    4c8c:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    4c90:	042d      	lsls	r5, r5, #16
    4c92:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c96:	432c      	orrs	r4, r5
    4c98:	430c      	orrs	r4, r1
    4c9a:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    4c9e:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    4ca2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ca6:	2000      	movs	r0, #0
    4ca8:	6018      	str	r0, [r3, #0]
    4caa:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    4cac:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4cb0:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    4cb4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    4cb8:	f042 0201 	orr.w	r2, r2, #1
    4cbc:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    4cc0:	2301      	movs	r3, #1
    4cc2:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    4cc4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    4cc8:	b002      	add	sp, #8
    4cca:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    4ccc:	f06f 0012 	mvn.w	r0, #18
    4cd0:	e7fa      	b.n	4cc8 <gpiote_channel_alloc+0x78>
    4cd2:	bf00      	nop
    4cd4:	0bad0000 	.word	0x0bad0000
    4cd8:	5000d000 	.word	0x5000d000

00004cdc <gpiote_pin_int_cfg>:
{
    4cdc:	b570      	push	{r4, r5, r6, lr}
    4cde:	460d      	mov	r5, r1
	return port->data;
    4ce0:	6906      	ldr	r6, [r0, #16]
	return port->config;
    4ce2:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4ce4:	7a1b      	ldrb	r3, [r3, #8]
    4ce6:	f001 041f 	and.w	r4, r1, #31
    4cea:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    4cee:	4620      	mov	r0, r4
    4cf0:	f7ff ff82 	bl	4bf8 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    4cf4:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    4cf8:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4cfa:	2b01      	cmp	r3, #1
    4cfc:	d01f      	beq.n	4d3e <gpiote_pin_int_cfg+0x62>
        case 0: return NRF_P0;
    4cfe:	4a1f      	ldr	r2, [pc, #124]	; (4d7c <gpiote_pin_int_cfg+0xa0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4d00:	f100 0180 	add.w	r1, r0, #128	; 0x80
    4d04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    4d08:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4d0c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    4d10:	68f3      	ldr	r3, [r6, #12]
    4d12:	40eb      	lsrs	r3, r5
    4d14:	f013 0f01 	tst.w	r3, #1
    4d18:	d02e      	beq.n	4d78 <gpiote_pin_int_cfg+0x9c>
		if (data->trig_edge & BIT(pin)) {
    4d1a:	6973      	ldr	r3, [r6, #20]
    4d1c:	40eb      	lsrs	r3, r5
    4d1e:	f013 0f01 	tst.w	r3, #1
    4d22:	d015      	beq.n	4d50 <gpiote_pin_int_cfg+0x74>
				if (data->double_edge & BIT(pin)) {
    4d24:	69b3      	ldr	r3, [r6, #24]
    4d26:	40eb      	lsrs	r3, r5
    4d28:	f013 0f01 	tst.w	r3, #1
    4d2c:	d109      	bne.n	4d42 <gpiote_pin_int_cfg+0x66>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    4d2e:	6931      	ldr	r1, [r6, #16]
    4d30:	fa21 f505 	lsr.w	r5, r1, r5
    4d34:	f015 0f01 	tst.w	r5, #1
    4d38:	d008      	beq.n	4d4c <gpiote_pin_int_cfg+0x70>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    4d3a:	2101      	movs	r1, #1
    4d3c:	e002      	b.n	4d44 <gpiote_pin_int_cfg+0x68>
        case 1: return NRF_P1;
    4d3e:	4a10      	ldr	r2, [pc, #64]	; (4d80 <gpiote_pin_int_cfg+0xa4>)
    4d40:	e7de      	b.n	4d00 <gpiote_pin_int_cfg+0x24>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    4d42:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    4d44:	4620      	mov	r0, r4
    4d46:	f7ff ff83 	bl	4c50 <gpiote_channel_alloc>
    4d4a:	e016      	b.n	4d7a <gpiote_pin_int_cfg+0x9e>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    4d4c:	2102      	movs	r1, #2
    4d4e:	e7f9      	b.n	4d44 <gpiote_pin_int_cfg+0x68>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4d50:	6931      	ldr	r1, [r6, #16]
    4d52:	fa21 f505 	lsr.w	r5, r1, r5
    4d56:	f015 0f01 	tst.w	r5, #1
    4d5a:	d10b      	bne.n	4d74 <gpiote_pin_int_cfg+0x98>
	return NRF_GPIO_PIN_SENSE_LOW;
    4d5c:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4d5e:	3080      	adds	r0, #128	; 0x80
    4d60:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    4d64:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4d6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    4d70:	2000      	movs	r0, #0
}
    4d72:	e002      	b.n	4d7a <gpiote_pin_int_cfg+0x9e>
		return NRF_GPIO_PIN_SENSE_HIGH;
    4d74:	2102      	movs	r1, #2
    4d76:	e7f2      	b.n	4d5e <gpiote_pin_int_cfg+0x82>
	int res = 0;
    4d78:	2000      	movs	r0, #0
}
    4d7a:	bd70      	pop	{r4, r5, r6, pc}
    4d7c:	50842500 	.word	0x50842500
    4d80:	50842800 	.word	0x50842800

00004d84 <gpio_nrfx_pin_interrupt_configure>:
{
    4d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    4d86:	6904      	ldr	r4, [r0, #16]
	return port->config;
    4d88:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4d8a:	7a2e      	ldrb	r6, [r5, #8]
    4d8c:	f001 051f 	and.w	r5, r1, #31
    4d90:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    4d94:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4d98:	d025      	beq.n	4de6 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4d9a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    4d9e:	d034      	beq.n	4e0a <gpio_nrfx_pin_interrupt_configure+0x86>
    4da0:	68e5      	ldr	r5, [r4, #12]
    4da2:	2601      	movs	r6, #1
    4da4:	408e      	lsls	r6, r1
    4da6:	4335      	orrs	r5, r6
    4da8:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    4daa:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4dae:	d032      	beq.n	4e16 <gpio_nrfx_pin_interrupt_configure+0x92>
    4db0:	6962      	ldr	r2, [r4, #20]
    4db2:	2501      	movs	r5, #1
    4db4:	408d      	lsls	r5, r1
    4db6:	ea22 0205 	bic.w	r2, r2, r5
    4dba:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    4dbc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4dc0:	d02e      	beq.n	4e20 <gpio_nrfx_pin_interrupt_configure+0x9c>
    4dc2:	69a2      	ldr	r2, [r4, #24]
    4dc4:	2501      	movs	r5, #1
    4dc6:	408d      	lsls	r5, r1
    4dc8:	ea22 0205 	bic.w	r2, r2, r5
    4dcc:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    4dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    4dd2:	d02a      	beq.n	4e2a <gpio_nrfx_pin_interrupt_configure+0xa6>
    4dd4:	6923      	ldr	r3, [r4, #16]
    4dd6:	2201      	movs	r2, #1
    4dd8:	408a      	lsls	r2, r1
    4dda:	ea23 0302 	bic.w	r3, r3, r2
    4dde:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    4de0:	f7ff ff7c 	bl	4cdc <gpiote_pin_int_cfg>
}
    4de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    4de6:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    4dea:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4dec:	2d01      	cmp	r5, #1
    4dee:	d00a      	beq.n	4e06 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    4df0:	4f10      	ldr	r7, [pc, #64]	; (4e34 <gpio_nrfx_pin_interrupt_configure+0xb0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4df2:	f106 0580 	add.w	r5, r6, #128	; 0x80
    4df6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4dfa:	f015 0f01 	tst.w	r5, #1
    4dfe:	d0cc      	beq.n	4d9a <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    4e00:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4e04:	e7ee      	b.n	4de4 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    4e06:	4f0c      	ldr	r7, [pc, #48]	; (4e38 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    4e08:	e7f3      	b.n	4df2 <gpio_nrfx_pin_interrupt_configure+0x6e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4e0a:	68e5      	ldr	r5, [r4, #12]
    4e0c:	2601      	movs	r6, #1
    4e0e:	408e      	lsls	r6, r1
    4e10:	ea25 0506 	bic.w	r5, r5, r6
    4e14:	e7c8      	b.n	4da8 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    4e16:	6962      	ldr	r2, [r4, #20]
    4e18:	2501      	movs	r5, #1
    4e1a:	408d      	lsls	r5, r1
    4e1c:	432a      	orrs	r2, r5
    4e1e:	e7cc      	b.n	4dba <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    4e20:	69a2      	ldr	r2, [r4, #24]
    4e22:	2501      	movs	r5, #1
    4e24:	408d      	lsls	r5, r1
    4e26:	432a      	orrs	r2, r5
    4e28:	e7d0      	b.n	4dcc <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    4e2a:	6923      	ldr	r3, [r4, #16]
    4e2c:	2201      	movs	r2, #1
    4e2e:	408a      	lsls	r2, r1
    4e30:	4313      	orrs	r3, r2
    4e32:	e7d4      	b.n	4dde <gpio_nrfx_pin_interrupt_configure+0x5a>
    4e34:	50842500 	.word	0x50842500
    4e38:	50842800 	.word	0x50842800

00004e3c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4e3c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    4e3e:	4b0b      	ldr	r3, [pc, #44]	; (4e6c <gpio_nrfx_init+0x30>)
    4e40:	781b      	ldrb	r3, [r3, #0]
    4e42:	b10b      	cbz	r3, 4e48 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    4e44:	2000      	movs	r0, #0
    4e46:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    4e48:	4b08      	ldr	r3, [pc, #32]	; (4e6c <gpio_nrfx_init+0x30>)
    4e4a:	2201      	movs	r2, #1
    4e4c:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4e4e:	2200      	movs	r2, #0
    4e50:	2105      	movs	r1, #5
    4e52:	200d      	movs	r0, #13
    4e54:	f7fe ff54 	bl	3d00 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    4e58:	200d      	movs	r0, #13
    4e5a:	f7fe ff33 	bl	3cc4 <arch_irq_enable>
    4e5e:	4b04      	ldr	r3, [pc, #16]	; (4e70 <gpio_nrfx_init+0x34>)
    4e60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4e64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4e68:	e7ec      	b.n	4e44 <gpio_nrfx_init+0x8>
    4e6a:	bf00      	nop
    4e6c:	2001b69e 	.word	0x2001b69e
    4e70:	5000d000 	.word	0x5000d000

00004e74 <gpiote_event_handler>:
{
    4e74:	b570      	push	{r4, r5, r6, lr}
    4e76:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    4e78:	2300      	movs	r3, #0
    4e7a:	9302      	str	r3, [sp, #8]
    4e7c:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    4e7e:	9300      	str	r3, [sp, #0]
    4e80:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e82:	4b46      	ldr	r3, [pc, #280]	; (4f9c <gpiote_event_handler+0x128>)
    4e84:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    4e86:	b90c      	cbnz	r4, 4e8c <gpiote_event_handler+0x18>
{
    4e88:	2100      	movs	r1, #0
    4e8a:	e011      	b.n	4eb0 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    4e8c:	4d44      	ldr	r5, [pc, #272]	; (4fa0 <gpiote_event_handler+0x12c>)
    4e8e:	4669      	mov	r1, sp
    4e90:	4628      	mov	r0, r5
    4e92:	f7ff fe5f 	bl	4b54 <check_level_trigger_pins>
		fired_triggers[0] =
    4e96:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    4e98:	a901      	add	r1, sp, #4
    4e9a:	f105 0018 	add.w	r0, r5, #24
    4e9e:	f7ff fe59 	bl	4b54 <check_level_trigger_pins>
		fired_triggers[1] =
    4ea2:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ea4:	4b3d      	ldr	r3, [pc, #244]	; (4f9c <gpiote_event_handler+0x128>)
    4ea6:	2200      	movs	r2, #0
    4ea8:	601a      	str	r2, [r3, #0]
    4eaa:	681b      	ldr	r3, [r3, #0]
}
    4eac:	e7ec      	b.n	4e88 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4eae:	3101      	adds	r1, #1
    4eb0:	2907      	cmp	r1, #7
    4eb2:	d82d      	bhi.n	4f10 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    4eb4:	f101 0340 	add.w	r3, r1, #64	; 0x40
    4eb8:	009b      	lsls	r3, r3, #2
    4eba:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    4ebc:	2301      	movs	r3, #1
    4ebe:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    4ec0:	4838      	ldr	r0, [pc, #224]	; (4fa4 <gpiote_event_handler+0x130>)
    4ec2:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    4ec6:	4203      	tst	r3, r0
    4ec8:	d0f1      	beq.n	4eae <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4eca:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    4ece:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4ed2:	681b      	ldr	r3, [r3, #0]
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d0ea      	beq.n	4eae <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4ed8:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    4edc:	4831      	ldr	r0, [pc, #196]	; (4fa4 <gpiote_event_handler+0x130>)
    4ede:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    4ee2:	f3c0 3340 	ubfx	r3, r0, #13, #1
    4ee6:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4eea:	2501      	movs	r5, #1
    4eec:	fa05 f000 	lsl.w	r0, r5, r0
    4ef0:	ad04      	add	r5, sp, #16
    4ef2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4ef6:	f853 5c08 	ldr.w	r5, [r3, #-8]
    4efa:	4305      	orrs	r5, r0
    4efc:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    4f00:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    4f04:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f08:	2200      	movs	r2, #0
    4f0a:	601a      	str	r2, [r3, #0]
    4f0c:	681b      	ldr	r3, [r3, #0]
}
    4f0e:	e7ce      	b.n	4eae <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    4f10:	9e02      	ldr	r6, [sp, #8]
    4f12:	b92e      	cbnz	r6, 4f20 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    4f14:	9e03      	ldr	r6, [sp, #12]
    4f16:	b9ee      	cbnz	r6, 4f54 <gpiote_event_handler+0xe0>
	if (port_event) {
    4f18:	2c00      	cmp	r4, #0
    4f1a:	d135      	bne.n	4f88 <gpiote_event_handler+0x114>
}
    4f1c:	b004      	add	sp, #16
    4f1e:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    4f20:	4b21      	ldr	r3, [pc, #132]	; (4fa8 <gpiote_event_handler+0x134>)
    4f22:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4f24:	b119      	cbz	r1, 4f2e <gpiote_event_handler+0xba>
    4f26:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    4f28:	b149      	cbz	r1, 4f3e <gpiote_event_handler+0xca>
	return node->next;
    4f2a:	680d      	ldr	r5, [r1, #0]
    4f2c:	e007      	b.n	4f3e <gpiote_event_handler+0xca>
    4f2e:	460d      	mov	r5, r1
    4f30:	e005      	b.n	4f3e <gpiote_event_handler+0xca>
    4f32:	b16d      	cbz	r5, 4f50 <gpiote_event_handler+0xdc>
    4f34:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    4f36:	b105      	cbz	r5, 4f3a <gpiote_event_handler+0xc6>
	return node->next;
    4f38:	682b      	ldr	r3, [r5, #0]
    4f3a:	4629      	mov	r1, r5
    4f3c:	461d      	mov	r5, r3
    4f3e:	2900      	cmp	r1, #0
    4f40:	d0e8      	beq.n	4f14 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    4f42:	688a      	ldr	r2, [r1, #8]
    4f44:	4032      	ands	r2, r6
    4f46:	d0f4      	beq.n	4f32 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4f48:	684b      	ldr	r3, [r1, #4]
    4f4a:	4815      	ldr	r0, [pc, #84]	; (4fa0 <gpiote_event_handler+0x12c>)
    4f4c:	4798      	blx	r3
    4f4e:	e7f0      	b.n	4f32 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4f50:	462b      	mov	r3, r5
    4f52:	e7f2      	b.n	4f3a <gpiote_event_handler+0xc6>
	return list->head;
    4f54:	4b15      	ldr	r3, [pc, #84]	; (4fac <gpiote_event_handler+0x138>)
    4f56:	6859      	ldr	r1, [r3, #4]
    4f58:	b119      	cbz	r1, 4f62 <gpiote_event_handler+0xee>
    4f5a:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    4f5c:	b149      	cbz	r1, 4f72 <gpiote_event_handler+0xfe>
	return node->next;
    4f5e:	680d      	ldr	r5, [r1, #0]
    4f60:	e007      	b.n	4f72 <gpiote_event_handler+0xfe>
    4f62:	460d      	mov	r5, r1
    4f64:	e005      	b.n	4f72 <gpiote_event_handler+0xfe>
    4f66:	b16d      	cbz	r5, 4f84 <gpiote_event_handler+0x110>
    4f68:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    4f6a:	b105      	cbz	r5, 4f6e <gpiote_event_handler+0xfa>
	return node->next;
    4f6c:	682b      	ldr	r3, [r5, #0]
    4f6e:	4629      	mov	r1, r5
    4f70:	461d      	mov	r5, r3
    4f72:	2900      	cmp	r1, #0
    4f74:	d0d0      	beq.n	4f18 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    4f76:	688a      	ldr	r2, [r1, #8]
    4f78:	4032      	ands	r2, r6
    4f7a:	d0f4      	beq.n	4f66 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    4f7c:	684b      	ldr	r3, [r1, #4]
    4f7e:	480c      	ldr	r0, [pc, #48]	; (4fb0 <gpiote_event_handler+0x13c>)
    4f80:	4798      	blx	r3
    4f82:	e7f0      	b.n	4f66 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4f84:	462b      	mov	r3, r5
    4f86:	e7f2      	b.n	4f6e <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    4f88:	4c05      	ldr	r4, [pc, #20]	; (4fa0 <gpiote_event_handler+0x12c>)
    4f8a:	4620      	mov	r0, r4
    4f8c:	f7ff fda8 	bl	4ae0 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    4f90:	f104 0018 	add.w	r0, r4, #24
    4f94:	f7ff fda4 	bl	4ae0 <cfg_level_pins>
}
    4f98:	e7c0      	b.n	4f1c <gpiote_event_handler+0xa8>
    4f9a:	bf00      	nop
    4f9c:	5000d17c 	.word	0x5000d17c
    4fa0:	00010e1c 	.word	0x00010e1c
    4fa4:	5000d000 	.word	0x5000d000
    4fa8:	2001b560 	.word	0x2001b560
    4fac:	2001b57c 	.word	0x2001b57c
    4fb0:	00010e34 	.word	0x00010e34

00004fb4 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    4fb4:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    4fb6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    4fb8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    4fbc:	d06f      	beq.n	509e <baudrate_set+0xea>
    4fbe:	d83a      	bhi.n	5036 <baudrate_set+0x82>
    4fc0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4fc4:	d06e      	beq.n	50a4 <baudrate_set+0xf0>
    4fc6:	d90a      	bls.n	4fde <baudrate_set+0x2a>
    4fc8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    4fcc:	d075      	beq.n	50ba <baudrate_set+0x106>
    4fce:	d924      	bls.n	501a <baudrate_set+0x66>
    4fd0:	f647 2312 	movw	r3, #31250	; 0x7a12
    4fd4:	4299      	cmp	r1, r3
    4fd6:	d12b      	bne.n	5030 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4fd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4fdc:	e013      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    4fde:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    4fe2:	d061      	beq.n	50a8 <baudrate_set+0xf4>
    4fe4:	d907      	bls.n	4ff6 <baudrate_set+0x42>
    4fe6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    4fea:	d063      	beq.n	50b4 <baudrate_set+0x100>
    4fec:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    4ff0:	d110      	bne.n	5014 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4ff2:	4b3c      	ldr	r3, [pc, #240]	; (50e4 <baudrate_set+0x130>)
    4ff4:	e007      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    4ff6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    4ffa:	d058      	beq.n	50ae <baudrate_set+0xfa>
    4ffc:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5000:	d105      	bne.n	500e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    5002:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5006:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    500a:	2000      	movs	r0, #0
    500c:	4770      	bx	lr
	switch (baudrate) {
    500e:	f06f 0015 	mvn.w	r0, #21
    5012:	4770      	bx	lr
    5014:	f06f 0015 	mvn.w	r0, #21
    5018:	4770      	bx	lr
    501a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    501e:	d04e      	beq.n	50be <baudrate_set+0x10a>
    5020:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    5024:	d101      	bne.n	502a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5026:	4b30      	ldr	r3, [pc, #192]	; (50e8 <baudrate_set+0x134>)
    5028:	e7ed      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    502a:	f06f 0015 	mvn.w	r0, #21
    502e:	4770      	bx	lr
    5030:	f06f 0015 	mvn.w	r0, #21
    5034:	4770      	bx	lr
    5036:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    503a:	d042      	beq.n	50c2 <baudrate_set+0x10e>
    503c:	d909      	bls.n	5052 <baudrate_set+0x9e>
    503e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    5042:	d046      	beq.n	50d2 <baudrate_set+0x11e>
    5044:	d91f      	bls.n	5086 <baudrate_set+0xd2>
    5046:	4b29      	ldr	r3, [pc, #164]	; (50ec <baudrate_set+0x138>)
    5048:	4299      	cmp	r1, r3
    504a:	d148      	bne.n	50de <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    504c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5050:	e7d9      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    5052:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    5056:	d037      	beq.n	50c8 <baudrate_set+0x114>
    5058:	d905      	bls.n	5066 <baudrate_set+0xb2>
    505a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    505e:	d10f      	bne.n	5080 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5060:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5064:	e7cf      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    5066:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    506a:	4299      	cmp	r1, r3
    506c:	d02e      	beq.n	50cc <baudrate_set+0x118>
    506e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    5072:	d102      	bne.n	507a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5074:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5078:	e7c5      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    507a:	f06f 0015 	mvn.w	r0, #21
    507e:	4770      	bx	lr
    5080:	f06f 0015 	mvn.w	r0, #21
    5084:	4770      	bx	lr
    5086:	4b1a      	ldr	r3, [pc, #104]	; (50f0 <baudrate_set+0x13c>)
    5088:	4299      	cmp	r1, r3
    508a:	d025      	beq.n	50d8 <baudrate_set+0x124>
    508c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    5090:	d102      	bne.n	5098 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5092:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5096:	e7b6      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    5098:	f06f 0015 	mvn.w	r0, #21
    509c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    509e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    50a2:	e7b0      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    50a4:	4b13      	ldr	r3, [pc, #76]	; (50f4 <baudrate_set+0x140>)
    50a6:	e7ae      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    50a8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    50ac:	e7ab      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    50ae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    50b2:	e7a8      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    50b4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    50b8:	e7a5      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    50ba:	4b0f      	ldr	r3, [pc, #60]	; (50f8 <baudrate_set+0x144>)
    50bc:	e7a3      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    50be:	4b0f      	ldr	r3, [pc, #60]	; (50fc <baudrate_set+0x148>)
    50c0:	e7a1      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    50c2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    50c6:	e79e      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    50c8:	4b0d      	ldr	r3, [pc, #52]	; (5100 <baudrate_set+0x14c>)
    50ca:	e79c      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    50cc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    50d0:	e799      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    50d2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    50d6:	e796      	b.n	5006 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    50d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    50dc:	e793      	b.n	5006 <baudrate_set+0x52>
	switch (baudrate) {
    50de:	f06f 0015 	mvn.w	r0, #21
}
    50e2:	4770      	bx	lr
    50e4:	0013b000 	.word	0x0013b000
    50e8:	004ea000 	.word	0x004ea000
    50ec:	000f4240 	.word	0x000f4240
    50f0:	0003d090 	.word	0x0003d090
    50f4:	00275000 	.word	0x00275000
    50f8:	0075c000 	.word	0x0075c000
    50fc:	003af000 	.word	0x003af000
    5100:	013a9000 	.word	0x013a9000

00005104 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5108:	4605      	mov	r5, r0
    510a:	460f      	mov	r7, r1
	return dev->data;
    510c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5110:	f00a fe39 	bl	fd86 <k_is_in_isr>
    5114:	b920      	cbnz	r0, 5120 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    5116:	4b16      	ldr	r3, [pc, #88]	; (5170 <uarte_nrfx_poll_out+0x6c>)
    5118:	781b      	ldrb	r3, [r3, #0]
    511a:	b1ab      	cbz	r3, 5148 <uarte_nrfx_poll_out+0x44>
    511c:	2300      	movs	r3, #0
    511e:	e000      	b.n	5122 <uarte_nrfx_poll_out+0x1e>
    5120:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    5122:	b19b      	cbz	r3, 514c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    5124:	f04f 0320 	mov.w	r3, #32
    5128:	f3ef 8411 	mrs	r4, BASEPRI
    512c:	f383 8812 	msr	BASEPRI_MAX, r3
    5130:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    5134:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    5136:	4628      	mov	r0, r5
    5138:	f009 fccf 	bl	eada <is_tx_ready>
    513c:	b950      	cbnz	r0, 5154 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    513e:	f384 8811 	msr	BASEPRI, r4
    5142:	f3bf 8f6f 	isb	sy
}
    5146:	e7ed      	b.n	5124 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5148:	2301      	movs	r3, #1
    514a:	e7ea      	b.n	5122 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    514c:	4628      	mov	r0, r5
    514e:	f009 fde1 	bl	ed14 <wait_tx_ready>
    5152:	4606      	mov	r6, r0
	}

	data->char_out = c;
    5154:	4641      	mov	r1, r8
    5156:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    515a:	2201      	movs	r2, #1
    515c:	4628      	mov	r0, r5
    515e:	f009 fcd6 	bl	eb0e <tx_start>
	__asm__ volatile(
    5162:	f386 8811 	msr	BASEPRI, r6
    5166:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    516a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    516e:	bf00      	nop
    5170:	2001b69f 	.word	0x2001b69f

00005174 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    5174:	b538      	push	{r3, r4, r5, lr}
    5176:	4605      	mov	r5, r0
    5178:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    517a:	f101 0016 	add.w	r0, r1, #22
    517e:	f000 fe39 	bl	5df4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5182:	4b0a      	ldr	r3, [pc, #40]	; (51ac <endtx_stoptx_ppi_init+0x38>)
    5184:	4298      	cmp	r0, r3
    5186:	d10e      	bne.n	51a6 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5188:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    518a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    518e:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    5192:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5196:	7da2      	ldrb	r2, [r4, #22]
    5198:	2301      	movs	r3, #1
    519a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    519c:	4a04      	ldr	r2, [pc, #16]	; (51b0 <endtx_stoptx_ppi_init+0x3c>)
    519e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    51a2:	2000      	movs	r0, #0
}
    51a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    51a6:	f06f 0004 	mvn.w	r0, #4
    51aa:	e7fb      	b.n	51a4 <endtx_stoptx_ppi_init+0x30>
    51ac:	0bad0000 	.word	0x0bad0000
    51b0:	50017000 	.word	0x50017000

000051b4 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    51b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    51b6:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    51b8:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    51ba:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    51bc:	2300      	movs	r3, #0
    51be:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    51c2:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    51c4:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    51c6:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    51ca:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51cc:	2b01      	cmp	r3, #1
    51ce:	f000 80a0 	beq.w	5312 <uarte_instance_init+0x15e>
        case 0: return NRF_P0;
    51d2:	4a5a      	ldr	r2, [pc, #360]	; (533c <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    51d4:	2301      	movs	r3, #1
    51d6:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    51d8:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(cfg->pseltxd);
    51da:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    51dc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    51e0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51e2:	2b01      	cmp	r3, #1
    51e4:	f000 8097 	beq.w	5316 <uarte_instance_init+0x162>
        case 0: return NRF_P0;
    51e8:	4954      	ldr	r1, [pc, #336]	; (533c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    51ea:	3280      	adds	r2, #128	; 0x80
    51ec:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    51f0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    51f4:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    51f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    51fc:	68e3      	ldr	r3, [r4, #12]
    51fe:	f1b3 3fff 	cmp.w	r3, #4294967295
    5202:	d010      	beq.n	5226 <uarte_instance_init+0x72>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    5204:	7e27      	ldrb	r7, [r4, #24]
    *p_pin = pin_number & 0x1F;
    5206:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    520a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    520c:	2b01      	cmp	r3, #1
    520e:	f000 8084 	beq.w	531a <uarte_instance_init+0x166>
        case 0: return NRF_P0;
    5212:	494a      	ldr	r1, [pc, #296]	; (533c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5214:	3280      	adds	r2, #128	; 0x80
    5216:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    521a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    521e:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    5222:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    5226:	68a2      	ldr	r2, [r4, #8]
    5228:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    522a:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    522e:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    5232:	6923      	ldr	r3, [r4, #16]
    5234:	f1b3 3fff 	cmp.w	r3, #4294967295
    5238:	d00f      	beq.n	525a <uarte_instance_init+0xa6>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    523a:	7e67      	ldrb	r7, [r4, #25]
    *p_pin = pin_number & 0x1F;
    523c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5240:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5242:	2b01      	cmp	r3, #1
    5244:	d06b      	beq.n	531e <uarte_instance_init+0x16a>
        case 0: return NRF_P0;
    5246:	493d      	ldr	r1, [pc, #244]	; (533c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5248:	3280      	adds	r2, #128	; 0x80
    524a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    524e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5252:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    5256:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    525a:	6963      	ldr	r3, [r4, #20]
    525c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5260:	d018      	beq.n	5294 <uarte_instance_init+0xe0>
    *p_pin = pin_number & 0x1F;
    5262:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5266:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5268:	2b01      	cmp	r3, #1
    526a:	d05a      	beq.n	5322 <uarte_instance_init+0x16e>
        case 0: return NRF_P0;
    526c:	4933      	ldr	r1, [pc, #204]	; (533c <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    526e:	2301      	movs	r3, #1
    5270:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    5272:	608b      	str	r3, [r1, #8]
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    5274:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    5276:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    527a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    527c:	2b01      	cmp	r3, #1
    527e:	d052      	beq.n	5326 <uarte_instance_init+0x172>
        case 0: return NRF_P0;
    5280:	492e      	ldr	r1, [pc, #184]	; (533c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5282:	3280      	adds	r2, #128	; 0x80
    5284:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    5288:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    528c:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    5290:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    5294:	6962      	ldr	r2, [r4, #20]
    5296:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    5298:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    529c:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    52a0:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    52a2:	3104      	adds	r1, #4
    52a4:	f009 fb9d 	bl	e9e2 <uarte_nrfx_configure>
	if (err) {
    52a8:	4607      	mov	r7, r0
    52aa:	bb80      	cbnz	r0, 530e <uarte_instance_init+0x15a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    52ac:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    52ae:	f013 0f08 	tst.w	r3, #8
    52b2:	d13a      	bne.n	532a <uarte_instance_init+0x176>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    52b4:	2308      	movs	r3, #8
    52b6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    52ba:	68e3      	ldr	r3, [r4, #12]
    52bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    52c0:	d00c      	beq.n	52dc <uarte_instance_init+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52c2:	2300      	movs	r3, #0
    52c4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    52c8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    52cc:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    52d0:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    52d4:	2301      	movs	r3, #1
    52d6:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52da:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    52dc:	6863      	ldr	r3, [r4, #4]
    52de:	f013 0f08 	tst.w	r3, #8
    52e2:	d103      	bne.n	52ec <uarte_instance_init+0x138>
    p_reg->INTENSET = mask;
    52e4:	f44f 7380 	mov.w	r3, #256	; 0x100
    52e8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    52ec:	6863      	ldr	r3, [r4, #4]
    52ee:	f013 0f10 	tst.w	r3, #16
    52f2:	d003      	beq.n	52fc <uarte_instance_init+0x148>
    52f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    52f8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    52fc:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    52fe:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5302:	2300      	movs	r3, #0
    5304:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5308:	2301      	movs	r3, #1
    530a:	60ab      	str	r3, [r5, #8]
    530c:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    530e:	4638      	mov	r0, r7
    5310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    5312:	4a0b      	ldr	r2, [pc, #44]	; (5340 <uarte_instance_init+0x18c>)
    5314:	e75e      	b.n	51d4 <uarte_instance_init+0x20>
    5316:	490a      	ldr	r1, [pc, #40]	; (5340 <uarte_instance_init+0x18c>)
    5318:	e767      	b.n	51ea <uarte_instance_init+0x36>
    531a:	4909      	ldr	r1, [pc, #36]	; (5340 <uarte_instance_init+0x18c>)
    531c:	e77a      	b.n	5214 <uarte_instance_init+0x60>
    531e:	4908      	ldr	r1, [pc, #32]	; (5340 <uarte_instance_init+0x18c>)
    5320:	e792      	b.n	5248 <uarte_instance_init+0x94>
    5322:	4907      	ldr	r1, [pc, #28]	; (5340 <uarte_instance_init+0x18c>)
    5324:	e7a3      	b.n	526e <uarte_instance_init+0xba>
    5326:	4906      	ldr	r1, [pc, #24]	; (5340 <uarte_instance_init+0x18c>)
    5328:	e7ab      	b.n	5282 <uarte_instance_init+0xce>
		err = endtx_stoptx_ppi_init(uarte, data);
    532a:	4631      	mov	r1, r6
    532c:	4628      	mov	r0, r5
    532e:	f7ff ff21 	bl	5174 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5332:	2800      	cmp	r0, #0
    5334:	dabe      	bge.n	52b4 <uarte_instance_init+0x100>
			return err;
    5336:	4607      	mov	r7, r0
    5338:	e7e9      	b.n	530e <uarte_instance_init+0x15a>
    533a:	bf00      	nop
    533c:	50842500 	.word	0x50842500
    5340:	50842800 	.word	0x50842800

00005344 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5344:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5348:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    534c:	4b01      	ldr	r3, [pc, #4]	; (5354 <set_comparator+0x10>)
    534e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    5352:	4770      	bx	lr
    5354:	50015000 	.word	0x50015000

00005358 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5358:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    535c:	4b01      	ldr	r3, [pc, #4]	; (5364 <get_comparator+0xc>)
    535e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    5362:	4770      	bx	lr
    5364:	50015000 	.word	0x50015000

00005368 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    536c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    536e:	4a02      	ldr	r2, [pc, #8]	; (5378 <event_enable+0x10>)
    5370:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    5374:	4770      	bx	lr
    5376:	bf00      	nop
    5378:	50015000 	.word	0x50015000

0000537c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    537c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5380:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5382:	4a02      	ldr	r2, [pc, #8]	; (538c <event_disable+0x10>)
    5384:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    5388:	4770      	bx	lr
    538a:	bf00      	nop
    538c:	50015000 	.word	0x50015000

00005390 <counter>:
     return p_reg->COUNTER;
    5390:	4b01      	ldr	r3, [pc, #4]	; (5398 <counter+0x8>)
    5392:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    5396:	4770      	bx	lr
    5398:	50015000 	.word	0x50015000

0000539c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    539c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    539e:	2301      	movs	r3, #1
    53a0:	4083      	lsls	r3, r0
    53a2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53a4:	4a0d      	ldr	r2, [pc, #52]	; (53dc <compare_int_lock+0x40>)
    53a6:	e8d2 1fef 	ldaex	r1, [r2]
    53aa:	ea01 0c04 	and.w	ip, r1, r4
    53ae:	e8c2 cfee 	stlex	lr, ip, [r2]
    53b2:	f1be 0f00 	cmp.w	lr, #0
    53b6:	d1f6      	bne.n	53a6 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    53b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    53bc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    53c0:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    53c4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    53c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    53cc:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    53d0:	420b      	tst	r3, r1
}
    53d2:	bf14      	ite	ne
    53d4:	2001      	movne	r0, #1
    53d6:	2000      	moveq	r0, #0
    53d8:	bd10      	pop	{r4, pc}
    53da:	bf00      	nop
    53dc:	2001b5bc 	.word	0x2001b5bc

000053e0 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    53e0:	b570      	push	{r4, r5, r6, lr}
    53e2:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    53e4:	f009 fce2 	bl	edac <full_int_lock>
    53e8:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    53ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    53ee:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    53f0:	4a15      	ldr	r2, [pc, #84]	; (5448 <channel_processing_check_and_clear+0x68>)
    53f2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    53f6:	4213      	tst	r3, r2
    53f8:	d105      	bne.n	5406 <channel_processing_check_and_clear+0x26>
	bool result = false;
    53fa:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    53fc:	4628      	mov	r0, r5
    53fe:	f009 fcde 	bl	edbe <full_int_unlock>

	return result;
}
    5402:	4630      	mov	r0, r6
    5404:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5406:	2301      	movs	r3, #1
    5408:	40a3      	lsls	r3, r4
    540a:	43db      	mvns	r3, r3
    540c:	4a0f      	ldr	r2, [pc, #60]	; (544c <channel_processing_check_and_clear+0x6c>)
    540e:	e8d2 1fef 	ldaex	r1, [r2]
    5412:	ea01 0003 	and.w	r0, r1, r3
    5416:	e8c2 0fe6 	stlex	r6, r0, [r2]
    541a:	2e00      	cmp	r6, #0
    541c:	d1f7      	bne.n	540e <channel_processing_check_and_clear+0x2e>
    541e:	b959      	cbnz	r1, 5438 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5420:	f104 0350 	add.w	r3, r4, #80	; 0x50
    5424:	009b      	lsls	r3, r3, #2
    5426:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5428:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    542c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5430:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5432:	b113      	cbz	r3, 543a <channel_processing_check_and_clear+0x5a>
    5434:	2301      	movs	r3, #1
    5436:	e000      	b.n	543a <channel_processing_check_and_clear+0x5a>
    5438:	2301      	movs	r3, #1
		if (result) {
    543a:	461e      	mov	r6, r3
    543c:	2b00      	cmp	r3, #0
    543e:	d0dd      	beq.n	53fc <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    5440:	4620      	mov	r0, r4
    5442:	f009 fca4 	bl	ed8e <event_clear>
    5446:	e7d9      	b.n	53fc <channel_processing_check_and_clear+0x1c>
    5448:	50015000 	.word	0x50015000
    544c:	2001b5b8 	.word	0x2001b5b8

00005450 <compare_int_unlock>:
	if (key) {
    5450:	b901      	cbnz	r1, 5454 <compare_int_unlock+0x4>
}
    5452:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    5454:	2301      	movs	r3, #1
    5456:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5458:	4a0e      	ldr	r2, [pc, #56]	; (5494 <compare_int_unlock+0x44>)
    545a:	e8d2 1fef 	ldaex	r1, [r2]
    545e:	4319      	orrs	r1, r3
    5460:	e8c2 1fec 	stlex	ip, r1, [r2]
    5464:	f1bc 0f00 	cmp.w	ip, #0
    5468:	d1f7      	bne.n	545a <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    546a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    546e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    5470:	4a09      	ldr	r2, [pc, #36]	; (5498 <compare_int_unlock+0x48>)
    5472:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5476:	4b09      	ldr	r3, [pc, #36]	; (549c <compare_int_unlock+0x4c>)
    5478:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    547c:	fa23 f000 	lsr.w	r0, r3, r0
    5480:	f010 0f01 	tst.w	r0, #1
    5484:	d0e5      	beq.n	5452 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5486:	4b06      	ldr	r3, [pc, #24]	; (54a0 <compare_int_unlock+0x50>)
    5488:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    548c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    5490:	e7df      	b.n	5452 <compare_int_unlock+0x2>
    5492:	bf00      	nop
    5494:	2001b5bc 	.word	0x2001b5bc
    5498:	50015000 	.word	0x50015000
    549c:	2001b5b8 	.word	0x2001b5b8
    54a0:	e000e100 	.word	0xe000e100

000054a4 <sys_clock_timeout_handler>:
{
    54a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54a6:	4607      	mov	r7, r0
    54a8:	4614      	mov	r4, r2
    54aa:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    54ac:	4610      	mov	r0, r2
    54ae:	4619      	mov	r1, r3
    54b0:	f009 fc79 	bl	eda6 <absolute_time_to_cc>
    54b4:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    54b6:	4b15      	ldr	r3, [pc, #84]	; (550c <sys_clock_timeout_handler+0x68>)
    54b8:	681a      	ldr	r2, [r3, #0]
    54ba:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    54bc:	601c      	str	r4, [r3, #0]
    54be:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    54c0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    54c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    54c8:	d308      	bcc.n	54dc <sys_clock_timeout_handler+0x38>
	return false;
    54ca:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    54cc:	f006 fe7e 	bl	c1cc <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    54d0:	4638      	mov	r0, r7
    54d2:	f7ff ff41 	bl	5358 <get_comparator>
    54d6:	42a8      	cmp	r0, r5
    54d8:	d00c      	beq.n	54f4 <sys_clock_timeout_handler+0x50>
}
    54da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    54dc:	4b0c      	ldr	r3, [pc, #48]	; (5510 <sys_clock_timeout_handler+0x6c>)
    54de:	6819      	ldr	r1, [r3, #0]
    54e0:	0a0b      	lsrs	r3, r1, #8
    54e2:	060a      	lsls	r2, r1, #24
    54e4:	1952      	adds	r2, r2, r5
    54e6:	f143 0300 	adc.w	r3, r3, #0
    54ea:	490a      	ldr	r1, [pc, #40]	; (5514 <sys_clock_timeout_handler+0x70>)
    54ec:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    54f0:	2401      	movs	r4, #1
    54f2:	e7eb      	b.n	54cc <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    54f4:	b11c      	cbz	r4, 54fe <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    54f6:	4638      	mov	r0, r7
    54f8:	f7ff ff36 	bl	5368 <event_enable>
}
    54fc:	e7ed      	b.n	54da <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    54fe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    5502:	4638      	mov	r0, r7
    5504:	f7ff ff1e 	bl	5344 <set_comparator>
    5508:	e7f5      	b.n	54f6 <sys_clock_timeout_handler+0x52>
    550a:	bf00      	nop
    550c:	20000358 	.word	0x20000358
    5510:	2001b5c0 	.word	0x2001b5c0
    5514:	20000340 	.word	0x20000340

00005518 <z_nrf_rtc_timer_read>:
{
    5518:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    551a:	4b0d      	ldr	r3, [pc, #52]	; (5550 <z_nrf_rtc_timer_read+0x38>)
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	0a1d      	lsrs	r5, r3, #8
    5520:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5522:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    5526:	f7ff ff33 	bl	5390 <counter>
    552a:	4603      	mov	r3, r0
	val += cntr;
    552c:	1820      	adds	r0, r4, r0
    552e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5536:	d20a      	bcs.n	554e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    5538:	4b06      	ldr	r3, [pc, #24]	; (5554 <z_nrf_rtc_timer_read+0x3c>)
    553a:	e9d3 2300 	ldrd	r2, r3, [r3]
    553e:	4299      	cmp	r1, r3
    5540:	bf08      	it	eq
    5542:	4290      	cmpeq	r0, r2
    5544:	d203      	bcs.n	554e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    5546:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    554a:	f141 0100 	adc.w	r1, r1, #0
}
    554e:	bd38      	pop	{r3, r4, r5, pc}
    5550:	2001b5c0 	.word	0x2001b5c0
    5554:	20000340 	.word	0x20000340

00005558 <compare_set_nolocks>:
{
    5558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    555c:	4606      	mov	r6, r0
    555e:	4614      	mov	r4, r2
    5560:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    5562:	4610      	mov	r0, r2
    5564:	4619      	mov	r1, r3
    5566:	f009 fc1e 	bl	eda6 <absolute_time_to_cc>
    556a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    556c:	f7ff ffd4 	bl	5518 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5570:	42a9      	cmp	r1, r5
    5572:	bf08      	it	eq
    5574:	42a0      	cmpeq	r0, r4
    5576:	d21e      	bcs.n	55b6 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5578:	ebb4 0800 	subs.w	r8, r4, r0
    557c:	eb65 0901 	sbc.w	r9, r5, r1
    5580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5584:	2300      	movs	r3, #0
    5586:	454b      	cmp	r3, r9
    5588:	bf08      	it	eq
    558a:	4542      	cmpeq	r2, r8
    558c:	d32a      	bcc.n	55e4 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
    558e:	4b17      	ldr	r3, [pc, #92]	; (55ec <compare_set_nolocks+0x94>)
    5590:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    5594:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5598:	42ab      	cmp	r3, r5
    559a:	bf08      	it	eq
    559c:	42a2      	cmpeq	r2, r4
    559e:	d014      	beq.n	55ca <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    55a0:	4639      	mov	r1, r7
    55a2:	4630      	mov	r0, r6
    55a4:	f009 fc10 	bl	edc8 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    55a8:	4639      	mov	r1, r7
    55aa:	f009 fbec 	bl	ed86 <counter_sub>
    55ae:	1824      	adds	r4, r4, r0
    55b0:	f145 0500 	adc.w	r5, r5, #0
    55b4:	e009      	b.n	55ca <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    55b6:	2301      	movs	r3, #1
    55b8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    55ba:	4a0d      	ldr	r2, [pc, #52]	; (55f0 <compare_set_nolocks+0x98>)
    55bc:	e8d2 1fef 	ldaex	r1, [r2]
    55c0:	4319      	orrs	r1, r3
    55c2:	e8c2 1fe0 	stlex	r0, r1, [r2]
    55c6:	2800      	cmp	r0, #0
    55c8:	d1f8      	bne.n	55bc <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
    55ca:	4b08      	ldr	r3, [pc, #32]	; (55ec <compare_set_nolocks+0x94>)
    55cc:	0132      	lsls	r2, r6, #4
    55ce:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    55d2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    55d6:	9908      	ldr	r1, [sp, #32]
    55d8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    55da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    55dc:	6073      	str	r3, [r6, #4]
	return ret;
    55de:	2000      	movs	r0, #0
}
    55e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    55e4:	f06f 0015 	mvn.w	r0, #21
    55e8:	e7fa      	b.n	55e0 <compare_set_nolocks+0x88>
    55ea:	bf00      	nop
    55ec:	20000348 	.word	0x20000348
    55f0:	2001b5b8 	.word	0x2001b5b8

000055f4 <process_channel>:

static void process_channel(int32_t chan)
{
    55f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55f8:	b082      	sub	sp, #8
    55fa:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    55fc:	f7ff fef0 	bl	53e0 <channel_processing_check_and_clear>
    5600:	b910      	cbnz	r0, 5608 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    5602:	b002      	add	sp, #8
    5604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    5608:	f7ff ff86 	bl	5518 <z_nrf_rtc_timer_read>
    560c:	4606      	mov	r6, r0
    560e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    5610:	f009 fbcc 	bl	edac <full_int_lock>
    5614:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    5616:	4b13      	ldr	r3, [pc, #76]	; (5664 <process_channel+0x70>)
    5618:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    561c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5620:	454f      	cmp	r7, r9
    5622:	bf08      	it	eq
    5624:	4546      	cmpeq	r6, r8
    5626:	d20b      	bcs.n	5640 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5628:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    562a:	4650      	mov	r0, sl
    562c:	f009 fbc7 	bl	edbe <full_int_unlock>
		if (handler) {
    5630:	2e00      	cmp	r6, #0
    5632:	d0e6      	beq.n	5602 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    5634:	9500      	str	r5, [sp, #0]
    5636:	4642      	mov	r2, r8
    5638:	464b      	mov	r3, r9
    563a:	4620      	mov	r0, r4
    563c:	47b0      	blx	r6
}
    563e:	e7e0      	b.n	5602 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5640:	4a08      	ldr	r2, [pc, #32]	; (5664 <process_channel+0x70>)
    5642:	0123      	lsls	r3, r4, #4
    5644:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5648:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    564a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    564c:	2000      	movs	r0, #0
    564e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5650:	f04f 32ff 	mov.w	r2, #4294967295
    5654:	f04f 33ff 	mov.w	r3, #4294967295
    5658:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    565c:	4620      	mov	r0, r4
    565e:	f7ff fe8d 	bl	537c <event_disable>
    5662:	e7e2      	b.n	562a <process_channel+0x36>
    5664:	20000348 	.word	0x20000348

00005668 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5668:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    566a:	4b0d      	ldr	r3, [pc, #52]	; (56a0 <rtc_nrf_isr+0x38>)
    566c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5670:	f013 0f02 	tst.w	r3, #2
    5674:	d00a      	beq.n	568c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5676:	4b0b      	ldr	r3, [pc, #44]	; (56a4 <rtc_nrf_isr+0x3c>)
    5678:	681b      	ldr	r3, [r3, #0]
    567a:	b13b      	cbz	r3, 568c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    567c:	4b09      	ldr	r3, [pc, #36]	; (56a4 <rtc_nrf_isr+0x3c>)
    567e:	2200      	movs	r2, #0
    5680:	601a      	str	r2, [r3, #0]
    5682:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    5684:	4a08      	ldr	r2, [pc, #32]	; (56a8 <rtc_nrf_isr+0x40>)
    5686:	6813      	ldr	r3, [r2, #0]
    5688:	3301      	adds	r3, #1
    568a:	6013      	str	r3, [r2, #0]
{
    568c:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    568e:	2c00      	cmp	r4, #0
    5690:	dd00      	ble.n	5694 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    5692:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5694:	4620      	mov	r0, r4
    5696:	f7ff ffad 	bl	55f4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    569a:	3401      	adds	r4, #1
    569c:	e7f7      	b.n	568e <rtc_nrf_isr+0x26>
    569e:	bf00      	nop
    56a0:	50015000 	.word	0x50015000
    56a4:	50015104 	.word	0x50015104
    56a8:	2001b5c0 	.word	0x2001b5c0

000056ac <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    56ac:	b530      	push	{r4, r5, lr}
    56ae:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    56b0:	2300      	movs	r3, #0
    56b2:	4a1f      	ldr	r2, [pc, #124]	; (5730 <sys_clock_driver_init+0x84>)
    56b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    56b8:	2b00      	cmp	r3, #0
    56ba:	dd27      	ble.n	570c <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    56bc:	4c1c      	ldr	r4, [pc, #112]	; (5730 <sys_clock_driver_init+0x84>)
    56be:	2502      	movs	r5, #2
    56c0:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56c4:	4b1b      	ldr	r3, [pc, #108]	; (5734 <sys_clock_driver_init+0x88>)
    56c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    56ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    56ce:	2200      	movs	r2, #0
    56d0:	2101      	movs	r1, #1
    56d2:	2015      	movs	r0, #21
    56d4:	f7fe fb14 	bl	3d00 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    56d8:	2015      	movs	r0, #21
    56da:	f7fe faf3 	bl	3cc4 <arch_irq_enable>
    56de:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    56e2:	2301      	movs	r3, #1
    56e4:	4a14      	ldr	r2, [pc, #80]	; (5738 <sys_clock_driver_init+0x8c>)
    56e6:	6013      	str	r3, [r2, #0]
    56e8:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    56ea:	4a14      	ldr	r2, [pc, #80]	; (573c <sys_clock_driver_init+0x90>)
    56ec:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    56ee:	2400      	movs	r4, #0
    56f0:	9401      	str	r4, [sp, #4]
    56f2:	4b13      	ldr	r3, [pc, #76]	; (5740 <sys_clock_driver_init+0x94>)
    56f4:	9300      	str	r3, [sp, #0]
    56f6:	4a13      	ldr	r2, [pc, #76]	; (5744 <sys_clock_driver_init+0x98>)
    56f8:	2300      	movs	r3, #0
    56fa:	4620      	mov	r0, r4
    56fc:	f009 fb9f 	bl	ee3e <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5700:	4628      	mov	r0, r5
    5702:	f7ff f90b 	bl	491c <z_nrf_clock_control_lf_on>

	return 0;
}
    5706:	4620      	mov	r0, r4
    5708:	b003      	add	sp, #12
    570a:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    570c:	4a0e      	ldr	r2, [pc, #56]	; (5748 <sys_clock_driver_init+0x9c>)
    570e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5712:	f04f 30ff 	mov.w	r0, #4294967295
    5716:	f04f 31ff 	mov.w	r1, #4294967295
    571a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    571e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5722:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    5724:	4902      	ldr	r1, [pc, #8]	; (5730 <sys_clock_driver_init+0x84>)
    5726:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    572a:	3301      	adds	r3, #1
    572c:	e7c4      	b.n	56b8 <sys_clock_driver_init+0xc>
    572e:	bf00      	nop
    5730:	50015000 	.word	0x50015000
    5734:	e000e100 	.word	0xe000e100
    5738:	50015008 	.word	0x50015008
    573c:	2001b5bc 	.word	0x2001b5bc
    5740:	000054a5 	.word	0x000054a5
    5744:	007fffff 	.word	0x007fffff
    5748:	20000348 	.word	0x20000348

0000574c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    574c:	b510      	push	{r4, lr}
    574e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5750:	f1b0 3fff 	cmp.w	r0, #4294967295
    5754:	d007      	beq.n	5766 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5756:	1e44      	subs	r4, r0, #1
    5758:	2c00      	cmp	r4, #0
    575a:	dd07      	ble.n	576c <sys_clock_set_timeout+0x20>
    575c:	4b11      	ldr	r3, [pc, #68]	; (57a4 <sys_clock_set_timeout+0x58>)
    575e:	429c      	cmp	r4, r3
    5760:	dd05      	ble.n	576e <sys_clock_set_timeout+0x22>
    5762:	4c11      	ldr	r4, [pc, #68]	; (57a8 <sys_clock_set_timeout+0x5c>)
    5764:	e003      	b.n	576e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5766:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    576a:	e7f4      	b.n	5756 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    576c:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    576e:	f7ff fed3 	bl	5518 <z_nrf_rtc_timer_read>
    5772:	4b0e      	ldr	r3, [pc, #56]	; (57ac <sys_clock_set_timeout+0x60>)
    5774:	e9d3 2300 	ldrd	r2, r3, [r3]
    5778:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    577a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    577e:	d300      	bcc.n	5782 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5780:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5782:	4404      	add	r4, r0
    5784:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5786:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    578a:	d300      	bcc.n	578e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    578c:	4c06      	ldr	r4, [pc, #24]	; (57a8 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    578e:	2000      	movs	r0, #0
    5790:	9001      	str	r0, [sp, #4]
    5792:	4907      	ldr	r1, [pc, #28]	; (57b0 <sys_clock_set_timeout+0x64>)
    5794:	9100      	str	r1, [sp, #0]
    5796:	1912      	adds	r2, r2, r4
    5798:	f143 0300 	adc.w	r3, r3, #0
    579c:	f009 fb4f 	bl	ee3e <compare_set>
}
    57a0:	b002      	add	sp, #8
    57a2:	bd10      	pop	{r4, pc}
    57a4:	007ffffe 	.word	0x007ffffe
    57a8:	007fffff 	.word	0x007fffff
    57ac:	20000358 	.word	0x20000358
    57b0:	000054a5 	.word	0x000054a5

000057b4 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    57b4:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    57b6:	f7ff feaf 	bl	5518 <z_nrf_rtc_timer_read>
    57ba:	4b02      	ldr	r3, [pc, #8]	; (57c4 <sys_clock_elapsed+0x10>)
    57bc:	681b      	ldr	r3, [r3, #0]
}
    57be:	1ac0      	subs	r0, r0, r3
    57c0:	bd08      	pop	{r3, pc}
    57c2:	bf00      	nop
    57c4:	20000358 	.word	0x20000358

000057c8 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    57c8:	4b08      	ldr	r3, [pc, #32]	; (57ec <nrf53_errata_42+0x24>)
    57ca:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    57cc:	3304      	adds	r3, #4
    57ce:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    57d0:	2a07      	cmp	r2, #7
    57d2:	d001      	beq.n	57d8 <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    57d4:	2000      	movs	r0, #0
    57d6:	4770      	bx	lr
                    switch(var2)
    57d8:	3b02      	subs	r3, #2
    57da:	2b00      	cmp	r3, #0
    57dc:	d804      	bhi.n	57e8 <nrf53_errata_42+0x20>
    57de:	e8df f003 	tbb	[pc, r3]
    57e2:	01          	.byte	0x01
    57e3:	00          	.byte	0x00
                if (var1 == 0x07)
    57e4:	2001      	movs	r0, #1
    57e6:	4770      	bx	lr
                            return false;
    57e8:	2000      	movs	r0, #0
    #endif
}
    57ea:	4770      	bx	lr
    57ec:	00ff0130 	.word	0x00ff0130

000057f0 <nrf53_errata_46>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    57f0:	4b0a      	ldr	r3, [pc, #40]	; (581c <nrf53_errata_46+0x2c>)
    57f2:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    57f4:	3304      	adds	r3, #4
    57f6:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    57f8:	2a07      	cmp	r2, #7
    57fa:	d001      	beq.n	5800 <nrf53_errata_46+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    57fc:	2000      	movs	r0, #0
    57fe:	4770      	bx	lr
                    switch(var2)
    5800:	2b04      	cmp	r3, #4
    5802:	d007      	beq.n	5814 <nrf53_errata_46+0x24>
    5804:	d808      	bhi.n	5818 <nrf53_errata_46+0x28>
    5806:	3b02      	subs	r3, #2
    5808:	2b01      	cmp	r3, #1
    580a:	d801      	bhi.n	5810 <nrf53_errata_46+0x20>
    580c:	2001      	movs	r0, #1
    #endif
}
    580e:	4770      	bx	lr
                            return false;
    5810:	2000      	movs	r0, #0
    5812:	4770      	bx	lr
                            return false;
    5814:	2000      	movs	r0, #0
    5816:	4770      	bx	lr
                            return false;
    5818:	2000      	movs	r0, #0
    581a:	4770      	bx	lr
    581c:	00ff0130 	.word	0x00ff0130

00005820 <nrf53_errata_49>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5820:	4b08      	ldr	r3, [pc, #32]	; (5844 <nrf53_errata_49+0x24>)
    5822:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5824:	3304      	adds	r3, #4
    5826:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5828:	2a07      	cmp	r2, #7
    582a:	d001      	beq.n	5830 <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    582c:	2000      	movs	r0, #0
    582e:	4770      	bx	lr
                    switch(var2)
    5830:	3b02      	subs	r3, #2
    5832:	2b00      	cmp	r3, #0
    5834:	d804      	bhi.n	5840 <nrf53_errata_49+0x20>
    5836:	e8df f003 	tbb	[pc, r3]
    583a:	01          	.byte	0x01
    583b:	00          	.byte	0x00
                if (var1 == 0x07)
    583c:	2001      	movs	r0, #1
    583e:	4770      	bx	lr
                            return false;
    5840:	2000      	movs	r0, #0
    #endif
}
    5842:	4770      	bx	lr
    5844:	00ff0130 	.word	0x00ff0130

00005848 <nrf53_errata_55>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5848:	4b03      	ldr	r3, [pc, #12]	; (5858 <nrf53_errata_55+0x10>)
    584a:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    584c:	2b07      	cmp	r3, #7
    584e:	d001      	beq.n	5854 <nrf53_errata_55+0xc>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5850:	2000      	movs	r0, #0
    5852:	4770      	bx	lr
                            return true;
    5854:	2001      	movs	r0, #1
    #endif
}
    5856:	4770      	bx	lr
    5858:	00ff0130 	.word	0x00ff0130

0000585c <nrf53_errata_64>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    585c:	4b08      	ldr	r3, [pc, #32]	; (5880 <nrf53_errata_64+0x24>)
    585e:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5860:	3304      	adds	r3, #4
    5862:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5864:	2a07      	cmp	r2, #7
    5866:	d001      	beq.n	586c <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5868:	2000      	movs	r0, #0
    586a:	4770      	bx	lr
                    switch(var2)
    586c:	3b02      	subs	r3, #2
    586e:	2b00      	cmp	r3, #0
    5870:	d804      	bhi.n	587c <nrf53_errata_64+0x20>
    5872:	e8df f003 	tbb	[pc, r3]
    5876:	01          	.byte	0x01
    5877:	00          	.byte	0x00
                if (var1 == 0x07)
    5878:	2001      	movs	r0, #1
    587a:	4770      	bx	lr
                            return false;
    587c:	2000      	movs	r0, #0
    #endif
}
    587e:	4770      	bx	lr
    5880:	00ff0130 	.word	0x00ff0130

00005884 <nrf53_errata_69>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5884:	4b08      	ldr	r3, [pc, #32]	; (58a8 <nrf53_errata_69+0x24>)
    5886:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5888:	3304      	adds	r3, #4
    588a:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    588c:	2a07      	cmp	r2, #7
    588e:	d001      	beq.n	5894 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5890:	2000      	movs	r0, #0
    5892:	4770      	bx	lr
                    switch(var2)
    5894:	3b02      	subs	r3, #2
    5896:	2b00      	cmp	r3, #0
    5898:	d804      	bhi.n	58a4 <nrf53_errata_69+0x20>
    589a:	e8df f003 	tbb	[pc, r3]
    589e:	01          	.byte	0x01
    589f:	00          	.byte	0x00
                if (var1 == 0x07)
    58a0:	2001      	movs	r0, #1
    58a2:	4770      	bx	lr
                            return false;
    58a4:	2000      	movs	r0, #0
    #endif
}
    58a6:	4770      	bx	lr
    58a8:	00ff0130 	.word	0x00ff0130

000058ac <nrf53_errata_97>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    58ac:	4b08      	ldr	r3, [pc, #32]	; (58d0 <nrf53_errata_97+0x24>)
    58ae:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    58b0:	3304      	adds	r3, #4
    58b2:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    58b4:	2a07      	cmp	r2, #7
    58b6:	d001      	beq.n	58bc <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    58b8:	2000      	movs	r0, #0
    58ba:	4770      	bx	lr
                    switch(var2)
    58bc:	3b02      	subs	r3, #2
    58be:	2b00      	cmp	r3, #0
    58c0:	d804      	bhi.n	58cc <nrf53_errata_97+0x20>
    58c2:	e8df f003 	tbb	[pc, r3]
    58c6:	01          	.byte	0x01
    58c7:	00          	.byte	0x00
                if (var1 == 0x07)
    58c8:	2001      	movs	r0, #1
    58ca:	4770      	bx	lr
                            return false;
    58cc:	2000      	movs	r0, #0
    #endif
}
    58ce:	4770      	bx	lr
    58d0:	00ff0130 	.word	0x00ff0130

000058d4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    58d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    58d8:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    58dc:	f002 0203 	and.w	r2, r2, #3
    58e0:	4b02      	ldr	r3, [pc, #8]	; (58ec <SystemCoreClockUpdate+0x18>)
    58e2:	40d3      	lsrs	r3, r2
    58e4:	4a02      	ldr	r2, [pc, #8]	; (58f0 <SystemCoreClockUpdate+0x1c>)
    58e6:	6013      	str	r3, [r2, #0]
#endif
}
    58e8:	4770      	bx	lr
    58ea:	bf00      	nop
    58ec:	07a12000 	.word	0x07a12000
    58f0:	20000064 	.word	0x20000064

000058f4 <SystemInit>:

void SystemInit(void)
{
    58f4:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    58f6:	f7ff ffd9 	bl	58ac <nrf53_errata_97>
    58fa:	b158      	cbz	r0, 5914 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    58fc:	4b5e      	ldr	r3, [pc, #376]	; (5a78 <SystemInit+0x184>)
    58fe:	681b      	ldr	r3, [r3, #0]
    5900:	b943      	cbnz	r3, 5914 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    5902:	4b5d      	ldr	r3, [pc, #372]	; (5a78 <SystemInit+0x184>)
    5904:	220d      	movs	r2, #13
    5906:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    5908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    590c:	2201      	movs	r2, #1
    590e:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    5910:	2200      	movs	r2, #0
    5912:	601a      	str	r2, [r3, #0]
{
    5914:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5916:	2a1f      	cmp	r2, #31
    5918:	d815      	bhi.n	5946 <SystemInit+0x52>
    591a:	f102 0360 	add.w	r3, r2, #96	; 0x60
    591e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5922:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    5926:	f1b3 3fff 	cmp.w	r3, #4294967295
    592a:	d00c      	beq.n	5946 <SystemInit+0x52>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    592c:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5930:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5934:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    5938:	00db      	lsls	r3, r3, #3
    593a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    593e:	685b      	ldr	r3, [r3, #4]
    5940:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5942:	3201      	adds	r2, #1
    5944:	e7e7      	b.n	5916 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    5946:	f7ff ff89 	bl	585c <nrf53_errata_64>
    594a:	b128      	cbz	r0, 5958 <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    594c:	4b4b      	ldr	r3, [pc, #300]	; (5a7c <SystemInit+0x188>)
    594e:	2229      	movs	r2, #41	; 0x29
    5950:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    5952:	3330      	adds	r3, #48	; 0x30
    5954:	2203      	movs	r2, #3
    5956:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    5958:	f7ff ff36 	bl	57c8 <nrf53_errata_42>
    595c:	b138      	cbz	r0, 596e <SystemInit+0x7a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    595e:	4b48      	ldr	r3, [pc, #288]	; (5a80 <SystemInit+0x18c>)
    5960:	4a48      	ldr	r2, [pc, #288]	; (5a84 <SystemInit+0x190>)
    5962:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    5964:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5968:	2201      	movs	r2, #1
    596a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    596e:	f7ff ff3f 	bl	57f0 <nrf53_errata_46>
    5972:	b110      	cbz	r0, 597a <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    5974:	4b44      	ldr	r3, [pc, #272]	; (5a88 <SystemInit+0x194>)
    5976:	2200      	movs	r2, #0
    5978:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    597a:	f7ff ff51 	bl	5820 <nrf53_errata_49>
    597e:	b168      	cbz	r0, 599c <SystemInit+0xa8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    5980:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5984:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5988:	f013 0f01 	tst.w	r3, #1
    598c:	d006      	beq.n	599c <SystemInit+0xa8>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    598e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5992:	2200      	movs	r2, #0
    5994:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    5998:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    599c:	f7ff ff54 	bl	5848 <nrf53_errata_55>
    59a0:	b160      	cbz	r0, 59bc <SystemInit+0xc8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    59a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    59a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    59aa:	f013 0f01 	tst.w	r3, #1
    59ae:	d005      	beq.n	59bc <SystemInit+0xc8>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    59b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    59b4:	f06f 0201 	mvn.w	r2, #1
    59b8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    59bc:	f7ff ff62 	bl	5884 <nrf53_errata_69>
    59c0:	b110      	cbz	r0, 59c8 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    59c2:	4b2e      	ldr	r3, [pc, #184]	; (5a7c <SystemInit+0x188>)
    59c4:	2265      	movs	r2, #101	; 0x65
    59c6:	601a      	str	r2, [r3, #0]

        /* Enable Trace functionality. If ENABLE_TRACE is not defined, TRACE pins will be used as GPIOs (see Product
           Specification to see which ones). */
        #if defined (ENABLE_TRACE)
            // Enable Trace And Debug peripheral
            NRF_TAD_S->ENABLE = TAD_ENABLE_ENABLE_Msk;
    59c8:	4a30      	ldr	r2, [pc, #192]	; (5a8c <SystemInit+0x198>)
    59ca:	2301      	movs	r3, #1
    59cc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
            NRF_TAD_S->CLOCKSTART = TAD_CLOCKSTART_START_Msk;
    59d0:	6053      	str	r3, [r2, #4]

            // Set up Trace pads SPU firewall
            NRF_SPU_S->GPIOPORT[0].PERM &= ~(1 << TRACE_TRACECLK_PIN);
    59d2:	4b2f      	ldr	r3, [pc, #188]	; (5a90 <SystemInit+0x19c>)
    59d4:	f8d3 14c0 	ldr.w	r1, [r3, #1216]	; 0x4c0
    59d8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    59dc:	f8c3 14c0 	str.w	r1, [r3, #1216]	; 0x4c0
            NRF_SPU_S->GPIOPORT[0].PERM &= ~(1 << TRACE_TRACEDATA0_PIN);
    59e0:	f8d3 14c0 	ldr.w	r1, [r3, #1216]	; 0x4c0
    59e4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
    59e8:	f8c3 14c0 	str.w	r1, [r3, #1216]	; 0x4c0
            NRF_SPU_S->GPIOPORT[0].PERM &= ~(1 << TRACE_TRACEDATA1_PIN);
    59ec:	f8d3 14c0 	ldr.w	r1, [r3, #1216]	; 0x4c0
    59f0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    59f4:	f8c3 14c0 	str.w	r1, [r3, #1216]	; 0x4c0
            NRF_SPU_S->GPIOPORT[0].PERM &= ~(1 << TRACE_TRACEDATA2_PIN);
    59f8:	f8d3 14c0 	ldr.w	r1, [r3, #1216]	; 0x4c0
    59fc:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    5a00:	f8c3 14c0 	str.w	r1, [r3, #1216]	; 0x4c0
            NRF_SPU_S->GPIOPORT[0].PERM &= ~(1 << TRACE_TRACEDATA3_PIN);
    5a04:	f8d3 14c0 	ldr.w	r1, [r3, #1216]	; 0x4c0
    5a08:	f421 7180 	bic.w	r1, r1, #256	; 0x100
    5a0c:	f8c3 14c0 	str.w	r1, [r3, #1216]	; 0x4c0

            // Configure trace port pads
            NRF_P0_S->PIN_CNF[TRACE_TRACECLK_PIN] =   TRACE_PIN_CNF_VALUE;
    5a10:	f503 0303 	add.w	r3, r3, #8585216	; 0x830000
    5a14:	f503 4375 	add.w	r3, r3, #62720	; 0xf500
    5a18:	491e      	ldr	r1, [pc, #120]	; (5a94 <SystemInit+0x1a0>)
    5a1a:	f8c3 1230 	str.w	r1, [r3, #560]	; 0x230
            NRF_P0_S->PIN_CNF[TRACE_TRACEDATA0_PIN] = TRACE_PIN_CNF_VALUE;
    5a1e:	f8c3 122c 	str.w	r1, [r3, #556]	; 0x22c
            NRF_P0_S->PIN_CNF[TRACE_TRACEDATA1_PIN] = TRACE_PIN_CNF_VALUE;
    5a22:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
            NRF_P0_S->PIN_CNF[TRACE_TRACEDATA2_PIN] = TRACE_PIN_CNF_VALUE;
    5a26:	f8c3 1224 	str.w	r1, [r3, #548]	; 0x224
            NRF_P0_S->PIN_CNF[TRACE_TRACEDATA3_PIN] = TRACE_PIN_CNF_VALUE;
    5a2a:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220

            // Select trace pins
            NRF_TAD_S->PSEL.TRACECLK   = TRACE_TRACECLK_PIN;
    5a2e:	230c      	movs	r3, #12
    5a30:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            NRF_TAD_S->PSEL.TRACEDATA0 = TRACE_TRACEDATA0_PIN;
    5a34:	230b      	movs	r3, #11
    5a36:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            NRF_TAD_S->PSEL.TRACEDATA1 = TRACE_TRACEDATA1_PIN;
    5a3a:	230a      	movs	r3, #10
    5a3c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            NRF_TAD_S->PSEL.TRACEDATA2 = TRACE_TRACEDATA2_PIN;
    5a40:	2309      	movs	r3, #9
    5a42:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
            NRF_TAD_S->PSEL.TRACEDATA3 = TRACE_TRACEDATA3_PIN;
    5a46:	2308      	movs	r3, #8
    5a48:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514

            // Set trace port speed to 64 MHz
            NRF_TAD_S->TRACEPORTSPEED = TAD_TRACEPORTSPEED_TRACEPORTSPEED_64MHz;
    5a4c:	2300      	movs	r3, #0
    5a4e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    5a52:	4a11      	ldr	r2, [pc, #68]	; (5a98 <SystemInit+0x1a4>)
    5a54:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    5a58:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    5a5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    5a60:	4a0e      	ldr	r2, [pc, #56]	; (5a9c <SystemInit+0x1a8>)
    5a62:	6811      	ldr	r1, [r2, #0]
    5a64:	4b0e      	ldr	r3, [pc, #56]	; (5aa0 <SystemInit+0x1ac>)
    5a66:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    5a6a:	69d2      	ldr	r2, [r2, #28]
    5a6c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    5a70:	f7ff ff30 	bl	58d4 <SystemCoreClockUpdate>
}
    5a74:	bd08      	pop	{r3, pc}
    5a76:	bf00      	nop
    5a78:	50004a20 	.word	0x50004a20
    5a7c:	5000470c 	.word	0x5000470c
    5a80:	50039530 	.word	0x50039530
    5a84:	beef0044 	.word	0xbeef0044
    5a88:	5003254c 	.word	0x5003254c
    5a8c:	e0080000 	.word	0xe0080000
    5a90:	50003000 	.word	0x50003000
    5a94:	70000301 	.word	0x70000301
    5a98:	e000ed00 	.word	0xe000ed00
    5a9c:	00ff8000 	.word	0x00ff8000
    5aa0:	50006000 	.word	0x50006000

00005aa4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5aa4:	4b05      	ldr	r3, [pc, #20]	; (5abc <nrfx_clock_init+0x18>)
    5aa6:	791b      	ldrb	r3, [r3, #4]
    5aa8:	b92b      	cbnz	r3, 5ab6 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5aaa:	4b04      	ldr	r3, [pc, #16]	; (5abc <nrfx_clock_init+0x18>)
    5aac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5aae:	2201      	movs	r2, #1
    5ab0:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5ab2:	4803      	ldr	r0, [pc, #12]	; (5ac0 <nrfx_clock_init+0x1c>)
    5ab4:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5ab6:	4803      	ldr	r0, [pc, #12]	; (5ac4 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5ab8:	4770      	bx	lr
    5aba:	bf00      	nop
    5abc:	2001b5c4 	.word	0x2001b5c4
    5ac0:	0bad0000 	.word	0x0bad0000
    5ac4:	0bad000c 	.word	0x0bad000c

00005ac8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5ac8:	2803      	cmp	r0, #3
    5aca:	d84e      	bhi.n	5b6a <nrfx_clock_start+0xa2>
    5acc:	e8df f000 	tbb	[pc, r0]
    5ad0:	40322702 	.word	0x40322702
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5ad4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5ad8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5adc:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5ae0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5ae4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5ae8:	d111      	bne.n	5b0e <nrfx_clock_start+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5aea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5aee:	2201      	movs	r2, #1
    5af0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5af4:	4b1d      	ldr	r3, [pc, #116]	; (5b6c <nrfx_clock_start+0xa4>)
    5af6:	2200      	movs	r2, #0
    5af8:	601a      	str	r2, [r3, #0]
    5afa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5afc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5b00:	2202      	movs	r2, #2
    5b02:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b06:	3308      	adds	r3, #8
    5b08:	2201      	movs	r2, #1
    5b0a:	601a      	str	r2, [r3, #0]
}
    5b0c:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5b0e:	2b02      	cmp	r3, #2
    5b10:	d1eb      	bne.n	5aea <nrfx_clock_start+0x22>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5b12:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5b16:	2202      	movs	r2, #2
    5b18:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5b1c:	e7ea      	b.n	5af4 <nrfx_clock_start+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b1e:	4b14      	ldr	r3, [pc, #80]	; (5b70 <nrfx_clock_start+0xa8>)
    5b20:	2200      	movs	r2, #0
    5b22:	601a      	str	r2, [r3, #0]
    5b24:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5b26:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5b2a:	2201      	movs	r2, #1
    5b2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b30:	601a      	str	r2, [r3, #0]
}
    5b32:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b34:	4b0f      	ldr	r3, [pc, #60]	; (5b74 <nrfx_clock_start+0xac>)
    5b36:	2200      	movs	r2, #0
    5b38:	601a      	str	r2, [r3, #0]
    5b3a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5b3c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5b40:	f44f 7200 	mov.w	r2, #512	; 0x200
    5b44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b48:	3320      	adds	r3, #32
    5b4a:	2201      	movs	r2, #1
    5b4c:	601a      	str	r2, [r3, #0]
}
    5b4e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b50:	4b09      	ldr	r3, [pc, #36]	; (5b78 <nrfx_clock_start+0xb0>)
    5b52:	2200      	movs	r2, #0
    5b54:	601a      	str	r2, [r3, #0]
    5b56:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5b58:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b64:	3318      	adds	r3, #24
    5b66:	2201      	movs	r2, #1
    5b68:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    5b6a:	4770      	bx	lr
    5b6c:	50005104 	.word	0x50005104
    5b70:	50005100 	.word	0x50005100
    5b74:	50005124 	.word	0x50005124
    5b78:	50005120 	.word	0x50005120

00005b7c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5b7c:	b570      	push	{r4, r5, r6, lr}
    5b7e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5b80:	2803      	cmp	r0, #3
    5b82:	f200 80cd 	bhi.w	5d20 <nrfx_clock_stop+0x1a4>
    5b86:	e8df f000 	tbb	[pc, r0]
    5b8a:	1402      	.short	0x1402
    5b8c:	3021      	.short	0x3021
    p_reg->INTENCLR = mask;
    5b8e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5b92:	2202      	movs	r2, #2
    5b94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b98:	f503 7382 	add.w	r3, r3, #260	; 0x104
    5b9c:	2200      	movs	r2, #0
    5b9e:	601a      	str	r2, [r3, #0]
    5ba0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ba2:	4b60      	ldr	r3, [pc, #384]	; (5d24 <nrfx_clock_stop+0x1a8>)
    5ba4:	2201      	movs	r2, #1
    5ba6:	601a      	str	r2, [r3, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5ba8:	2c01      	cmp	r4, #1
    5baa:	d02d      	beq.n	5c08 <nrfx_clock_stop+0x8c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5bac:	f242 7510 	movw	r5, #10000	; 0x2710
    5bb0:	e0a1      	b.n	5cf6 <nrfx_clock_stop+0x17a>
    p_reg->INTENCLR = mask;
    5bb2:	2301      	movs	r3, #1
    5bb4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5bb8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bbc:	f502 7280 	add.w	r2, r2, #256	; 0x100
    5bc0:	2100      	movs	r1, #0
    5bc2:	6011      	str	r1, [r2, #0]
    5bc4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5bc6:	4a58      	ldr	r2, [pc, #352]	; (5d28 <nrfx_clock_stop+0x1ac>)
    5bc8:	6013      	str	r3, [r2, #0]
}
    5bca:	e7ed      	b.n	5ba8 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    5bcc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
    5bd4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bd8:	f503 7392 	add.w	r3, r3, #292	; 0x124
    5bdc:	2200      	movs	r2, #0
    5bde:	601a      	str	r2, [r3, #0]
    5be0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5be2:	4b52      	ldr	r3, [pc, #328]	; (5d2c <nrfx_clock_stop+0x1b0>)
    5be4:	2201      	movs	r2, #1
    5be6:	601a      	str	r2, [r3, #0]
}
    5be8:	e7de      	b.n	5ba8 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    5bea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5bee:	f44f 7280 	mov.w	r2, #256	; 0x100
    5bf2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bf6:	f503 7390 	add.w	r3, r3, #288	; 0x120
    5bfa:	2200      	movs	r2, #0
    5bfc:	601a      	str	r2, [r3, #0]
    5bfe:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c00:	4b4b      	ldr	r3, [pc, #300]	; (5d30 <nrfx_clock_stop+0x1b4>)
    5c02:	2201      	movs	r2, #1
    5c04:	601a      	str	r2, [r3, #0]
}
    5c06:	e7cf      	b.n	5ba8 <nrfx_clock_stop+0x2c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5c08:	4626      	mov	r6, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5c0a:	f242 7510 	movw	r5, #10000	; 0x2710
    5c0e:	e035      	b.n	5c7c <nrfx_clock_stop+0x100>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5c10:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5c14:	f8d3 6418 	ldr.w	r6, [r3, #1048]	; 0x418
    5c18:	f006 0603 	and.w	r6, r6, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5c1c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5c20:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c24:	d13a      	bne.n	5c9c <nrfx_clock_stop+0x120>
    return false;
    5c26:	2300      	movs	r3, #0
    5c28:	e01f      	b.n	5c6a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5c2a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5c2e:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    5c32:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5c36:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5c3a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c3e:	d12f      	bne.n	5ca0 <nrfx_clock_stop+0x124>
    return false;
    5c40:	2300      	movs	r3, #0
    5c42:	e012      	b.n	5c6a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    5c44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5c48:	f8d3 645c 	ldr.w	r6, [r3, #1116]	; 0x45c
    5c4c:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    5c50:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    5c54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c58:	d124      	bne.n	5ca4 <nrfx_clock_stop+0x128>
    return false;
    5c5a:	2300      	movs	r3, #0
    5c5c:	e005      	b.n	5c6a <nrfx_clock_stop+0xee>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    5c5e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5c62:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    5c66:	f3c3 4300 	ubfx	r3, r3, #16, #1
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d058      	beq.n	5d20 <nrfx_clock_stop+0x1a4>
    5c6e:	2e01      	cmp	r6, #1
    5c70:	d156      	bne.n	5d20 <nrfx_clock_stop+0x1a4>
    5c72:	2001      	movs	r0, #1
    5c74:	f009 f911 	bl	ee9a <nrfx_busy_wait>
    5c78:	3d01      	subs	r5, #1
    5c7a:	d051      	beq.n	5d20 <nrfx_clock_stop+0x1a4>
    switch (domain)
    5c7c:	2c03      	cmp	r4, #3
    5c7e:	d80b      	bhi.n	5c98 <nrfx_clock_stop+0x11c>
    5c80:	a301      	add	r3, pc, #4	; (adr r3, 5c88 <nrfx_clock_stop+0x10c>)
    5c82:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    5c86:	bf00      	nop
    5c88:	00005c11 	.word	0x00005c11
    5c8c:	00005c2b 	.word	0x00005c2b
    5c90:	00005c45 	.word	0x00005c45
    5c94:	00005c5f 	.word	0x00005c5f
    5c98:	2300      	movs	r3, #0
    5c9a:	e7e6      	b.n	5c6a <nrfx_clock_stop+0xee>
                return true;
    5c9c:	2301      	movs	r3, #1
    5c9e:	e7e4      	b.n	5c6a <nrfx_clock_stop+0xee>
                return true;
    5ca0:	2301      	movs	r3, #1
    5ca2:	e7e2      	b.n	5c6a <nrfx_clock_stop+0xee>
                return true;
    5ca4:	2301      	movs	r3, #1
    5ca6:	e7e0      	b.n	5c6a <nrfx_clock_stop+0xee>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5ca8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5cac:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5cb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5cb4:	d12e      	bne.n	5d14 <nrfx_clock_stop+0x198>
    return false;
    5cb6:	2300      	movs	r3, #0
    5cb8:	e017      	b.n	5cea <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5cba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5cbe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5cc2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5cc6:	d127      	bne.n	5d18 <nrfx_clock_stop+0x19c>
    return false;
    5cc8:	2300      	movs	r3, #0
    5cca:	e00e      	b.n	5cea <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    5ccc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5cd0:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    5cd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5cd8:	d120      	bne.n	5d1c <nrfx_clock_stop+0x1a0>
    return false;
    5cda:	2300      	movs	r3, #0
    5cdc:	e005      	b.n	5cea <nrfx_clock_stop+0x16e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    5cde:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ce2:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    5ce6:	f3c3 4300 	ubfx	r3, r3, #16, #1
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5cea:	b1cb      	cbz	r3, 5d20 <nrfx_clock_stop+0x1a4>
    5cec:	2001      	movs	r0, #1
    5cee:	f009 f8d4 	bl	ee9a <nrfx_busy_wait>
    5cf2:	3d01      	subs	r5, #1
    5cf4:	d014      	beq.n	5d20 <nrfx_clock_stop+0x1a4>
    switch (domain)
    5cf6:	2c03      	cmp	r4, #3
    5cf8:	d80a      	bhi.n	5d10 <nrfx_clock_stop+0x194>
    5cfa:	a301      	add	r3, pc, #4	; (adr r3, 5d00 <nrfx_clock_stop+0x184>)
    5cfc:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    5d00:	00005ca9 	.word	0x00005ca9
    5d04:	00005cbb 	.word	0x00005cbb
    5d08:	00005ccd 	.word	0x00005ccd
    5d0c:	00005cdf 	.word	0x00005cdf
    5d10:	2300      	movs	r3, #0
    5d12:	e7ea      	b.n	5cea <nrfx_clock_stop+0x16e>
                return true;
    5d14:	2301      	movs	r3, #1
    5d16:	e7e8      	b.n	5cea <nrfx_clock_stop+0x16e>
                return true;
    5d18:	2301      	movs	r3, #1
    5d1a:	e7e6      	b.n	5cea <nrfx_clock_stop+0x16e>
                return true;
    5d1c:	2301      	movs	r3, #1
    5d1e:	e7e4      	b.n	5cea <nrfx_clock_stop+0x16e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5d20:	bd70      	pop	{r4, r5, r6, pc}
    5d22:	bf00      	nop
    5d24:	5000500c 	.word	0x5000500c
    5d28:	50005004 	.word	0x50005004
    5d2c:	50005024 	.word	0x50005024
    5d30:	5000501c 	.word	0x5000501c

00005d34 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5d34:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5d36:	4b2a      	ldr	r3, [pc, #168]	; (5de0 <nrfx_power_clock_irq_handler+0xac>)
    5d38:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5d3a:	b15b      	cbz	r3, 5d54 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d3c:	4b28      	ldr	r3, [pc, #160]	; (5de0 <nrfx_power_clock_irq_handler+0xac>)
    5d3e:	2000      	movs	r0, #0
    5d40:	6018      	str	r0, [r3, #0]
    5d42:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5d44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5d48:	2201      	movs	r2, #1
    5d4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5d4e:	4b25      	ldr	r3, [pc, #148]	; (5de4 <nrfx_power_clock_irq_handler+0xb0>)
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5d54:	4b24      	ldr	r3, [pc, #144]	; (5de8 <nrfx_power_clock_irq_handler+0xb4>)
    5d56:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5d58:	b1b3      	cbz	r3, 5d88 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d5a:	4b23      	ldr	r3, [pc, #140]	; (5de8 <nrfx_power_clock_irq_handler+0xb4>)
    5d5c:	2200      	movs	r2, #0
    5d5e:	601a      	str	r2, [r3, #0]
    5d60:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5d62:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5d66:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5d6a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5d6e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5d72:	2b01      	cmp	r3, #1
    5d74:	d02b      	beq.n	5dce <nrfx_power_clock_irq_handler+0x9a>
    p_reg->INTENCLR = mask;
    5d76:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5d7a:	2202      	movs	r2, #2
    5d7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5d80:	4b18      	ldr	r3, [pc, #96]	; (5de4 <nrfx_power_clock_irq_handler+0xb0>)
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	2001      	movs	r0, #1
    5d86:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5d88:	4b18      	ldr	r3, [pc, #96]	; (5dec <nrfx_power_clock_irq_handler+0xb8>)
    5d8a:	681b      	ldr	r3, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    5d8c:	b16b      	cbz	r3, 5daa <nrfx_power_clock_irq_handler+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d8e:	4b17      	ldr	r3, [pc, #92]	; (5dec <nrfx_power_clock_irq_handler+0xb8>)
    5d90:	2200      	movs	r2, #0
    5d92:	601a      	str	r2, [r3, #0]
    5d94:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5d96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5d9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    5da2:	4b10      	ldr	r3, [pc, #64]	; (5de4 <nrfx_power_clock_irq_handler+0xb0>)
    5da4:	681b      	ldr	r3, [r3, #0]
    5da6:	2004      	movs	r0, #4
    5da8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5daa:	4b11      	ldr	r3, [pc, #68]	; (5df0 <nrfx_power_clock_irq_handler+0xbc>)
    5dac:	681b      	ldr	r3, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    5dae:	b16b      	cbz	r3, 5dcc <nrfx_power_clock_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5db0:	4b0f      	ldr	r3, [pc, #60]	; (5df0 <nrfx_power_clock_irq_handler+0xbc>)
    5db2:	2200      	movs	r2, #0
    5db4:	601a      	str	r2, [r3, #0]
    5db6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5db8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
    5dc0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    5dc4:	4b07      	ldr	r3, [pc, #28]	; (5de4 <nrfx_power_clock_irq_handler+0xb0>)
    5dc6:	681b      	ldr	r3, [r3, #0]
    5dc8:	2005      	movs	r0, #5
    5dca:	4798      	blx	r3
    }
#endif
}
    5dcc:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    5dce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5dd2:	2202      	movs	r2, #2
    5dd4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dd8:	3308      	adds	r3, #8
    5dda:	2201      	movs	r2, #1
    5ddc:	601a      	str	r2, [r3, #0]
}
    5dde:	e7d3      	b.n	5d88 <nrfx_power_clock_irq_handler+0x54>
    5de0:	50005100 	.word	0x50005100
    5de4:	2001b5c4 	.word	0x2001b5c4
    5de8:	50005104 	.word	0x50005104
    5dec:	50005120 	.word	0x50005120
    5df0:	50005124 	.word	0x50005124

00005df4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    5df4:	b470      	push	{r4, r5, r6}
	__asm__ volatile(
    5df6:	f04f 0320 	mov.w	r3, #32
    5dfa:	f3ef 8611 	mrs	r6, BASEPRI
    5dfe:	f383 8812 	msr	BASEPRI_MAX, r3
    5e02:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    5e06:	4b0e      	ldr	r3, [pc, #56]	; (5e40 <nrfx_dppi_channel_alloc+0x4c>)
    5e08:	681d      	ldr	r5, [r3, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    5e0a:	43e9      	mvns	r1, r5
    5e0c:	d016      	beq.n	5e3c <nrfx_dppi_channel_alloc+0x48>
    uint8_t channel = 0;
    5e0e:	2300      	movs	r3, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    5e10:	fa21 f203 	lsr.w	r2, r1, r3
    5e14:	f012 0f01 	tst.w	r2, #1
    5e18:	d102      	bne.n	5e20 <nrfx_dppi_channel_alloc+0x2c>
        {
            channel++;
    5e1a:	3301      	adds	r3, #1
    5e1c:	b2db      	uxtb	r3, r3
    5e1e:	e7f7      	b.n	5e10 <nrfx_dppi_channel_alloc+0x1c>
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    5e20:	2201      	movs	r2, #1
    5e22:	fa02 f403 	lsl.w	r4, r2, r3
    5e26:	4325      	orrs	r5, r4
    5e28:	4a05      	ldr	r2, [pc, #20]	; (5e40 <nrfx_dppi_channel_alloc+0x4c>)
    5e2a:	6015      	str	r5, [r2, #0]
        *p_channel = channel;
    5e2c:	7003      	strb	r3, [r0, #0]

        err_code = NRFX_SUCCESS;
    5e2e:	4805      	ldr	r0, [pc, #20]	; (5e44 <nrfx_dppi_channel_alloc+0x50>)
	__asm__ volatile(
    5e30:	f386 8811 	msr	BASEPRI, r6
    5e34:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    5e38:	bc70      	pop	{r4, r5, r6}
    5e3a:	4770      	bx	lr
        err_code = NRFX_ERROR_NO_MEM;
    5e3c:	4802      	ldr	r0, [pc, #8]	; (5e48 <nrfx_dppi_channel_alloc+0x54>)
    5e3e:	e7f7      	b.n	5e30 <nrfx_dppi_channel_alloc+0x3c>
    5e40:	2001b5cc 	.word	0x2001b5cc
    5e44:	0bad0000 	.word	0x0bad0000
    5e48:	0bad0002 	.word	0x0bad0002

00005e4c <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    5e4c:	4b04      	ldr	r3, [pc, #16]	; (5e60 <is_allocated_channel+0x14>)
    5e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5e50:	2301      	movs	r3, #1
    5e52:	4083      	lsls	r3, r0
    5e54:	421a      	tst	r2, r3
}
    5e56:	bf14      	ite	ne
    5e58:	2001      	movne	r0, #1
    5e5a:	2000      	moveq	r0, #0
    5e5c:	4770      	bx	lr
    5e5e:	bf00      	nop
    5e60:	2001b5d0 	.word	0x2001b5d0

00005e64 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    5e64:	2301      	movs	r3, #1
    5e66:	fa03 f000 	lsl.w	r0, r3, r0
    5e6a:	4a02      	ldr	r2, [pc, #8]	; (5e74 <channel_allocated_set+0x10>)
    5e6c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    5e6e:	4303      	orrs	r3, r0
    5e70:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    5e72:	4770      	bx	lr
    5e74:	2001b5d0 	.word	0x2001b5d0

00005e78 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    5e78:	2301      	movs	r3, #1
    5e7a:	fa03 f000 	lsl.w	r0, r3, r0
    5e7e:	4a03      	ldr	r2, [pc, #12]	; (5e8c <channel_allocated_clr+0x14>)
    5e80:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    5e82:	ea23 0300 	bic.w	r3, r3, r0
    5e86:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    5e88:	4770      	bx	lr
    5e8a:	bf00      	nop
    5e8c:	2001b5d0 	.word	0x2001b5d0

00005e90 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    5e90:	b538      	push	{r3, r4, r5, lr}
    5e92:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    5e94:	f009 f816 	bl	eec4 <is_app_channel>
    5e98:	b908      	cbnz	r0, 5e9e <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    5e9a:	4809      	ldr	r0, [pc, #36]	; (5ec0 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5e9c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5e9e:	f04f 0320 	mov.w	r3, #32
    5ea2:	f3ef 8511 	mrs	r5, BASEPRI
    5ea6:	f383 8812 	msr	BASEPRI_MAX, r3
    5eaa:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    5eae:	4620      	mov	r0, r4
    5eb0:	f7ff ffe2 	bl	5e78 <channel_allocated_clr>
	__asm__ volatile(
    5eb4:	f385 8811 	msr	BASEPRI, r5
    5eb8:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    5ebc:	4801      	ldr	r0, [pc, #4]	; (5ec4 <nrfx_gpiote_channel_free+0x34>)
}
    5ebe:	e7ed      	b.n	5e9c <nrfx_gpiote_channel_free+0xc>
    5ec0:	0bad0004 	.word	0x0bad0004
    5ec4:	0bad0000 	.word	0x0bad0000

00005ec8 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    5ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ecc:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    5ece:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    5ed0:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    5ed2:	4f17      	ldr	r7, [pc, #92]	; (5f30 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    5ed4:	e013      	b.n	5efe <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    5ed6:	4620      	mov	r0, r4
    5ed8:	f7ff ffc4 	bl	5e64 <channel_allocated_set>
            *p_channel = ch_idx;
    5edc:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    5ee0:	4f14      	ldr	r7, [pc, #80]	; (5f34 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    5ee2:	f386 8811 	msr	BASEPRI, r6
    5ee6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    5eea:	4b12      	ldr	r3, [pc, #72]	; (5f34 <nrfx_gpiote_channel_alloc+0x6c>)
    5eec:	429f      	cmp	r7, r3
    5eee:	d01b      	beq.n	5f28 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    5ef0:	2301      	movs	r3, #1
    5ef2:	fa03 f309 	lsl.w	r3, r3, r9
    5ef6:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    5efa:	3401      	adds	r4, #1
    5efc:	b2e4      	uxtb	r4, r4
    5efe:	b19d      	cbz	r5, 5f28 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    5f00:	f04f 0320 	mov.w	r3, #32
    5f04:	f3ef 8611 	mrs	r6, BASEPRI
    5f08:	f383 8812 	msr	BASEPRI_MAX, r3
    5f0c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    5f10:	46a1      	mov	r9, r4
    5f12:	fa25 f304 	lsr.w	r3, r5, r4
    5f16:	f013 0f01 	tst.w	r3, #1
    5f1a:	d0e2      	beq.n	5ee2 <nrfx_gpiote_channel_alloc+0x1a>
    5f1c:	4620      	mov	r0, r4
    5f1e:	f7ff ff95 	bl	5e4c <is_allocated_channel>
    5f22:	2800      	cmp	r0, #0
    5f24:	d1dd      	bne.n	5ee2 <nrfx_gpiote_channel_alloc+0x1a>
    5f26:	e7d6      	b.n	5ed6 <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5f28:	4638      	mov	r0, r7
    5f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5f2e:	bf00      	nop
    5f30:	0bad0002 	.word	0x0bad0002
    5f34:	0bad0000 	.word	0x0bad0000

00005f38 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
    5f38:	b570      	push	{r4, r5, r6, lr}
    5f3a:	b082      	sub	sp, #8
    5f3c:	4604      	mov	r4, r0
  if (head_ != temp_) {
    5f3e:	6905      	ldr	r5, [r0, #16]
    5f40:	6983      	ldr	r3, [r0, #24]
    5f42:	429d      	cmp	r5, r3
    5f44:	d006      	beq.n	5f54 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
    5f46:	490f      	ldr	r1, [pc, #60]	; (5f84 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    5f48:	6840      	ldr	r0, [r0, #4]
    5f4a:	f009 fd5f 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
    5f4e:	2001      	movs	r0, #1
  }
  head_ = aligned_result + size;
  temp_ = head_;

  return kTfLiteOk;
}
    5f50:	b002      	add	sp, #8
    5f52:	bd70      	pop	{r4, r5, r6, pc}
    5f54:	460e      	mov	r6, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    5f56:	4611      	mov	r1, r2
    5f58:	6880      	ldr	r0, [r0, #8]
    5f5a:	f008 fff0 	bl	ef3e <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    5f5e:	6963      	ldr	r3, [r4, #20]
    5f60:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    5f62:	42b3      	cmp	r3, r6
    5f64:	d304      	bcc.n	5f70 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x38>
  head_ = aligned_result + size;
    5f66:	4430      	add	r0, r6
    5f68:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    5f6a:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    5f6c:	2000      	movs	r0, #0
    5f6e:	e7ef      	b.n	5f50 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    TF_LITE_REPORT_ERROR(
    5f70:	1af2      	subs	r2, r6, r3
    5f72:	9200      	str	r2, [sp, #0]
    5f74:	4632      	mov	r2, r6
    5f76:	4904      	ldr	r1, [pc, #16]	; (5f88 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
    5f78:	6860      	ldr	r0, [r4, #4]
    5f7a:	f009 fd47 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    5f7e:	2001      	movs	r0, #1
    5f80:	e7e6      	b.n	5f50 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    5f82:	bf00      	nop
    5f84:	000554d0 	.word	0x000554d0
    5f88:	00055528 	.word	0x00055528

00005f8c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    5f8c:	b530      	push	{r4, r5, lr}
    5f8e:	b083      	sub	sp, #12
    5f90:	4605      	mov	r5, r0
    5f92:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    5f94:	4611      	mov	r1, r2
    5f96:	6980      	ldr	r0, [r0, #24]
    5f98:	f008 ffd1 	bl	ef3e <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    5f9c:	696b      	ldr	r3, [r5, #20]
    5f9e:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    5fa0:	42a3      	cmp	r3, r4
    5fa2:	d303      	bcc.n	5fac <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
  }
  temp_ = aligned_result + size;
    5fa4:	4404      	add	r4, r0
    5fa6:	61ac      	str	r4, [r5, #24]
  return aligned_result;
}
    5fa8:	b003      	add	sp, #12
    5faa:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    5fac:	1ae2      	subs	r2, r4, r3
    5fae:	9200      	str	r2, [sp, #0]
    5fb0:	4622      	mov	r2, r4
    5fb2:	4903      	ldr	r1, [pc, #12]	; (5fc0 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    5fb4:	6868      	ldr	r0, [r5, #4]
    5fb6:	f009 fd29 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    5fba:	2000      	movs	r0, #0
    5fbc:	e7f4      	b.n	5fa8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    5fbe:	bf00      	nop
    5fc0:	0005556c 	.word	0x0005556c

00005fc4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    5fc4:	b530      	push	{r4, r5, lr}
    5fc6:	b083      	sub	sp, #12
    5fc8:	4604      	mov	r4, r0
    5fca:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    5fcc:	6940      	ldr	r0, [r0, #20]
    5fce:	4611      	mov	r1, r2
    5fd0:	1b40      	subs	r0, r0, r5
    5fd2:	f008 ffbb 	bl	ef4c <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    5fd6:	6923      	ldr	r3, [r4, #16]
    5fd8:	4283      	cmp	r3, r0
    5fda:	d802      	bhi.n	5fe2 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1e>
  tail_ = aligned_result;
    5fdc:	6160      	str	r0, [r4, #20]
}
    5fde:	b003      	add	sp, #12
    5fe0:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    5fe2:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    5fe4:	9300      	str	r3, [sp, #0]
    5fe6:	1aeb      	subs	r3, r5, r3
    5fe8:	462a      	mov	r2, r5
    5fea:	4903      	ldr	r1, [pc, #12]	; (5ff8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    5fec:	6860      	ldr	r0, [r4, #4]
    5fee:	f009 fd0d 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    5ff2:	2000      	movs	r0, #0
    5ff4:	e7f3      	b.n	5fde <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1a>
    5ff6:	bf00      	nop
    5ff8:	000555b8 	.word	0x000555b8

00005ffc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    5ffc:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    5ffe:	4d05      	ldr	r5, [pc, #20]	; (6014 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    6000:	6005      	str	r5, [r0, #0]
    6002:	6041      	str	r1, [r0, #4]
    6004:	6082      	str	r2, [r0, #8]
    6006:	60c3      	str	r3, [r0, #12]
    6008:	6102      	str	r2, [r0, #16]
    600a:	6143      	str	r3, [r0, #20]
    600c:	6182      	str	r2, [r0, #24]
    600e:	bc30      	pop	{r4, r5}
    6010:	4770      	bx	lr
    6012:	bf00      	nop
    6014:	0005560c 	.word	0x0005560c

00006018 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    6018:	b510      	push	{r4, lr}
    601a:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    601c:	b300      	cbz	r0, 6060 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    601e:	460c      	mov	r4, r1
    6020:	4613      	mov	r3, r2
    6022:	4601      	mov	r1, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    6024:	b1f4      	cbz	r4, 6064 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
    6026:	4622      	mov	r2, r4
    6028:	a801      	add	r0, sp, #4
    602a:	f008 ff5d 	bl	eee8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    602e:	2204      	movs	r2, #4
    6030:	211c      	movs	r1, #28
    6032:	eb0d 0002 	add.w	r0, sp, r2
    6036:	f7ff ffc5 	bl	5fc4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    603a:	4603      	mov	r3, r0
    603c:	b168      	cbz	r0, 605a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x42>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    603e:	4a0a      	ldr	r2, [pc, #40]	; (6068 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    6040:	6002      	str	r2, [r0, #0]
    6042:	9a02      	ldr	r2, [sp, #8]
    6044:	6042      	str	r2, [r0, #4]
    6046:	9a03      	ldr	r2, [sp, #12]
    6048:	6082      	str	r2, [r0, #8]
    604a:	9a04      	ldr	r2, [sp, #16]
    604c:	60c2      	str	r2, [r0, #12]
    604e:	9a05      	ldr	r2, [sp, #20]
    6050:	6102      	str	r2, [r0, #16]
    6052:	9a06      	ldr	r2, [sp, #24]
    6054:	6142      	str	r2, [r0, #20]
    6056:	9a07      	ldr	r2, [sp, #28]
    6058:	6182      	str	r2, [r0, #24]
}
    605a:	4618      	mov	r0, r3
    605c:	b008      	add	sp, #32
    605e:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6060:	f00a f880 	bl	10164 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    6064:	f00a f87e 	bl	10164 <abort>
    6068:	0005560c 	.word	0x0005560c

0000606c <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
    606c:	b508      	push	{r3, lr}
    606e:	4602      	mov	r2, r0
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    6070:	4b03      	ldr	r3, [pc, #12]	; (6080 <DebugLog+0x14>)
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	4903      	ldr	r1, [pc, #12]	; (6084 <DebugLog+0x18>)
    6076:	68d8      	ldr	r0, [r3, #12]
    6078:	f006 fb82 	bl	c780 <fiprintf>
#endif
}
    607c:	bd08      	pop	{r3, pc}
    607e:	bf00      	nop
    6080:	200000d0 	.word	0x200000d0
    6084:	00055624 	.word	0x00055624

00006088 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    6088:	b500      	push	{lr}
    608a:	b0c1      	sub	sp, #260	; 0x104
    608c:	4602      	mov	r2, r0
    608e:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    6090:	f44f 7180 	mov.w	r1, #256	; 0x100
    6094:	4668      	mov	r0, sp
    6096:	f000 f917 	bl	62c8 <MicroVsnprintf>
  DebugLog(log_buffer);
    609a:	4668      	mov	r0, sp
    609c:	f7ff ffe6 	bl	606c <DebugLog>
  DebugLog("\r\n");
    60a0:	4802      	ldr	r0, [pc, #8]	; (60ac <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    60a2:	f7ff ffe3 	bl	606c <DebugLog>
#endif
}
    60a6:	b041      	add	sp, #260	; 0x104
    60a8:	f85d fb04 	ldr.w	pc, [sp], #4
    60ac:	000579c8 	.word	0x000579c8

000060b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:
  return kTfLiteOk;
}

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    60b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60b4:	b083      	sub	sp, #12
    60b6:	4680      	mov	r8, r0
    60b8:	468b      	mov	fp, r1
    60ba:	4692      	mov	sl, r2
    60bc:	4699      	mov	r9, r3
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
    60be:	4606      	mov	r6, r0
    return data_ - ReadScalar<soffset_t>(data_);
    60c0:	f007 fd92 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    60c4:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    60c8:	4620      	mov	r0, r4
    60ca:	f007 fd93 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    60ce:	2804      	cmp	r0, #4
    60d0:	d90d      	bls.n	60ee <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    60d2:	1d20      	adds	r0, r4, #4
    60d4:	f007 fd8e 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    60d8:	eb08 0400 	add.w	r4, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    60dc:	b148      	cbz	r0, 60f2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x42>
    60de:	4620      	mov	r0, r4
    60e0:	f007 fd7c 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    60e4:	4404      	add	r4, r0
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    60e6:	b3ac      	cbz	r4, 6154 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa4>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    60e8:	2500      	movs	r5, #0
  int element_count = 1;
    60ea:	2701      	movs	r7, #1
    60ec:	e01e      	b.n	612c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    60ee:	2000      	movs	r0, #0
    60f0:	e7f2      	b.n	60d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    60f2:	2400      	movs	r4, #0
    60f4:	e7f7      	b.n	60e6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    60f6:	1d20      	adds	r0, r4, #4
    60f8:	f007 fd7c 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    60fc:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    60fe:	b300      	cbz	r0, 6142 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
    6100:	4620      	mov	r0, r4
    6102:	f007 fd6b 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6106:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6108:	6820      	ldr	r0, [r4, #0]
    610a:	f007 fd66 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    610e:	4285      	cmp	r5, r0
    6110:	d221      	bcs.n	6156 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa6>
    6112:	6820      	ldr	r0, [r4, #0]
    6114:	f007 fd61 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6118:	4285      	cmp	r5, r0
    611a:	d214      	bcs.n	6146 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    611c:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    611e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    6122:	f007 fd60 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    6126:	fb00 f707 	mul.w	r7, r0, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    612a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    612c:	4630      	mov	r0, r6
    612e:	f007 fd5b 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6132:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6134:	4620      	mov	r0, r4
    6136:	f007 fd5d 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    613a:	2804      	cmp	r0, #4
    613c:	d8db      	bhi.n	60f6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x46>
    613e:	2000      	movs	r0, #0
    6140:	e7dc      	b.n	60fc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6142:	2400      	movs	r4, #0
    6144:	e7e0      	b.n	6108 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
    FLATBUFFERS_ASSERT(i < size());
    6146:	4b1a      	ldr	r3, [pc, #104]	; (61b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x100>)
    6148:	4a1a      	ldr	r2, [pc, #104]	; (61b4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x104>)
    614a:	f44f 7183 	mov.w	r1, #262	; 0x106
    614e:	481a      	ldr	r0, [pc, #104]	; (61b8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x108>)
    6150:	f006 faf8 	bl	c744 <__assert_func>
  int element_count = 1;
    6154:	2701      	movs	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6156:	4640      	mov	r0, r8
    6158:	f007 fd46 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    615c:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6160:	4620      	mov	r0, r4
    6162:	f007 fd47 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6166:	2806      	cmp	r0, #6
    6168:	d910      	bls.n	618c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xdc>
    616a:	1da0      	adds	r0, r4, #6
    616c:	f007 fd42 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6170:	b170      	cbz	r0, 6190 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe0>
    6172:	4440      	add	r0, r8
    6174:	f008 ff5b 	bl	f02e <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    6178:	464a      	mov	r2, r9
    617a:	f10d 0107 	add.w	r1, sp, #7
    617e:	b2c0      	uxtb	r0, r0
    6180:	f003 f84c 	bl	921c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    6184:	b130      	cbz	r0, 6194 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe4>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    6186:	b003      	add	sp, #12
    6188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    618c:	2000      	movs	r0, #0
    618e:	e7ef      	b.n	6170 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6190:	2000      	movs	r0, #0
    6192:	e7f1      	b.n	6178 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc8>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    6194:	4651      	mov	r1, sl
    6196:	f89d 0007 	ldrb.w	r0, [sp, #7]
    619a:	f008 fee3 	bl	ef64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    619e:	2800      	cmp	r0, #0
    61a0:	d1f1      	bne.n	6186 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
  *bytes = element_count * (*type_size);
    61a2:	f8da 3000 	ldr.w	r3, [sl]
    61a6:	fb07 f703 	mul.w	r7, r7, r3
    61aa:	f8cb 7000 	str.w	r7, [fp]
  return kTfLiteOk;
    61ae:	e7ea      	b.n	6186 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
    61b0:	0005563c 	.word	0x0005563c
    61b4:	00055648 	.word	0x00055648
    61b8:	00055708 	.word	0x00055708

000061bc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
    61bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    61be:	b089      	sub	sp, #36	; 0x24
    61c0:	9001      	str	r0, [sp, #4]
    61c2:	460e      	mov	r6, r1
  char* current = buffer;
  char* current_end = buffer + (kFastToBufferSize - 1);
    61c4:	f101 052f 	add.w	r5, r1, #47	; 0x2f
  const uint32_t exponent_mask = 0x7f800000;
  const int32_t exponent_shift = 23;
  const int32_t exponent_bias = 127;
  const uint32_t fraction_mask = 0x007fffff;
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
    61c8:	2204      	movs	r2, #4
    61ca:	eb0d 0102 	add.w	r1, sp, r2
    61ce:	a807      	add	r0, sp, #28
    61d0:	f009 ffe1 	bl	10196 <memcpy>
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    61d4:	9b07      	ldr	r3, [sp, #28]
    61d6:	f3c3 54c7 	ubfx	r4, r3, #23, #8
    61da:	3c7f      	subs	r4, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
    61dc:	f3c3 0716 	ubfx	r7, r3, #0, #23
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
    61e0:	2b00      	cmp	r3, #0
    61e2:	db0e      	blt.n	6202 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x46>
    *current = '-';
    current += 1;
  }
  *current = 0;
    61e4:	2300      	movs	r3, #0
    61e6:	7033      	strb	r3, [r6, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
    61e8:	2c80      	cmp	r4, #128	; 0x80
    61ea:	d00e      	beq.n	620a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x4e>
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    61ec:	4b32      	ldr	r3, [pc, #200]	; (62b8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xfc>)
    61ee:	f10d 0c0c 	add.w	ip, sp, #12
    61f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    61f4:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    61f8:	f88c 3000 	strb.w	r3, [ip]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
    61fc:	463a      	mov	r2, r7
  for (int i = 0; i < scale_shifts_size; ++i) {
    61fe:	2300      	movs	r3, #0
    6200:	e01a      	b.n	6238 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7c>
    *current = '-';
    6202:	232d      	movs	r3, #45	; 0x2d
    6204:	f806 3b01 	strb.w	r3, [r6], #1
    current += 1;
    6208:	e7ec      	b.n	61e4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x28>
    if (fraction == 0) {
    620a:	b937      	cbnz	r7, 621a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x5e>
      current = StrCatStr(current, (current_end - current), "Inf");
    620c:	4a2b      	ldr	r2, [pc, #172]	; (62bc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x100>)
    620e:	1ba9      	subs	r1, r5, r6
    6210:	4630      	mov	r0, r6
    6212:	f008 ff23 	bl	f05c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    6216:	4607      	mov	r7, r0
      return current;
    6218:	e04a      	b.n	62b0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
      current = StrCatStr(current, (current_end - current), "NaN");
    621a:	4a29      	ldr	r2, [pc, #164]	; (62c0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>)
    621c:	1ba9      	subs	r1, r5, r6
    621e:	4630      	mov	r0, r6
    6220:	f008 ff1c 	bl	f05c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    6224:	4607      	mov	r7, r0
      return current;
    6226:	e043      	b.n	62b0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    scaled_fraction += (fraction >> scale_shifts[i]);
    6228:	a908      	add	r1, sp, #32
    622a:	18c8      	adds	r0, r1, r3
    622c:	f910 0c14 	ldrsb.w	r0, [r0, #-20]
    6230:	fa27 f000 	lsr.w	r0, r7, r0
    6234:	4402      	add	r2, r0
  for (int i = 0; i < scale_shifts_size; ++i) {
    6236:	3301      	adds	r3, #1
    6238:	2b0c      	cmp	r3, #12
    623a:	ddf5      	ble.n	6228 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x6c>
  }
  *current = '1';
    623c:	2331      	movs	r3, #49	; 0x31
    623e:	7033      	strb	r3, [r6, #0]
  current += 1;
  *current = '.';
    6240:	232e      	movs	r3, #46	; 0x2e
    6242:	7073      	strb	r3, [r6, #1]
  current += 1;
    6244:	1cb7      	adds	r7, r6, #2
  *current = 0;
    6246:	2300      	movs	r3, #0
    6248:	70b3      	strb	r3, [r6, #2]
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
    624a:	1be9      	subs	r1, r5, r7
    624c:	2907      	cmp	r1, #7
    624e:	dd2f      	ble.n	62b0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    return current;
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6250:	2301      	movs	r3, #1
    6252:	2b06      	cmp	r3, #6
    6254:	dc03      	bgt.n	625e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xa2>
    *(current + i) = '0';
    6256:	2030      	movs	r0, #48	; 0x30
    6258:	54f8      	strb	r0, [r7, r3]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    625a:	3301      	adds	r3, #1
    625c:	e7f9      	b.n	6252 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    625e:	230a      	movs	r3, #10
    6260:	4638      	mov	r0, r7
    6262:	f008 ff48 	bl	f0f6 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>
  int fraction_digits = current - previous;
    6266:	1bc1      	subs	r1, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
    6268:	2330      	movs	r3, #48	; 0x30
    626a:	7003      	strb	r3, [r0, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
    626c:	f1d1 0607 	rsbs	r6, r1, #7
    6270:	d00c      	beq.n	628c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
    for (int i = 0; i < fraction_digits; i++) {
    6272:	2300      	movs	r3, #0
    6274:	428b      	cmp	r3, r1
    6276:	da06      	bge.n	6286 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xca>
      current--;
      *(current + leading_zeros) = *current;
    6278:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    627c:	5582      	strb	r2, [r0, r6]
      *current = '0';
    627e:	2230      	movs	r2, #48	; 0x30
    6280:	7002      	strb	r2, [r0, #0]
    for (int i = 0; i < fraction_digits; i++) {
    6282:	3301      	adds	r3, #1
    6284:	e7f6      	b.n	6274 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb8>
    }
    current += kMaxFractionalDigits;
    6286:	3007      	adds	r0, #7
    6288:	e000      	b.n	628c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
    current--;
    628a:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    628c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6290:	2b30      	cmp	r3, #48	; 0x30
    6292:	d102      	bne.n	629a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xde>
    6294:	1e43      	subs	r3, r0, #1
    6296:	42bb      	cmp	r3, r7
    6298:	d8f7      	bhi.n	628a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
  }
  *current = 0;
    629a:	2300      	movs	r3, #0
    629c:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    629e:	4a09      	ldr	r2, [pc, #36]	; (62c4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>)
    62a0:	1a29      	subs	r1, r5, r0
    62a2:	f008 fedb 	bl	f05c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    62a6:	4622      	mov	r2, r4
    62a8:	1a29      	subs	r1, r5, r0
    62aa:	f008 ff15 	bl	f0d8 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>
    62ae:	4607      	mov	r7, r0
  return current;
}
    62b0:	4638      	mov	r0, r7
    62b2:	b009      	add	sp, #36	; 0x24
    62b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62b6:	bf00      	nop
    62b8:	0005577c 	.word	0x0005577c
    62bc:	00055770 	.word	0x00055770
    62c0:	00055774 	.word	0x00055774
    62c4:	00055778 	.word	0x00055778

000062c8 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    62c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ca:	b083      	sub	sp, #12
    62cc:	4607      	mov	r7, r0
    62ce:	4615      	mov	r5, r2
    62d0:	9301      	str	r3, [sp, #4]
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    62d2:	1e4e      	subs	r6, r1, #1
  int output_index = 0;
    62d4:	2400      	movs	r4, #0
    62d6:	e07c      	b.n	63d2 <MicroVsnprintf+0x10a>
    if (*current == '%') {
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    62d8:	1b33      	subs	r3, r6, r4
    62da:	2b0a      	cmp	r3, #10
    62dc:	dd09      	ble.n	62f2 <MicroVsnprintf+0x2a>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    62de:	9b01      	ldr	r3, [sp, #4]
    62e0:	1d1a      	adds	r2, r3, #4
    62e2:	9201      	str	r2, [sp, #4]
    62e4:	6819      	ldr	r1, [r3, #0]
    62e6:	1938      	adds	r0, r7, r4
    62e8:	f008 ff15 	bl	f116 <_ZN12_GLOBAL__N_111FormatInt32EPci>
          output_index +=
    62ec:	4404      	add	r4, r0
          current++;
    62ee:	1caa      	adds	r2, r5, #2
          break;
    62f0:	e06e      	b.n	63d0 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    62f2:	1c60      	adds	r0, r4, #1
    62f4:	2300      	movs	r3, #0
    62f6:	553b      	strb	r3, [r7, r4]
            return output_index;
    62f8:	e0b1      	b.n	645e <MicroVsnprintf+0x196>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    62fa:	1b33      	subs	r3, r6, r4
    62fc:	2b0a      	cmp	r3, #10
    62fe:	dd09      	ble.n	6314 <MicroVsnprintf+0x4c>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    6300:	9b01      	ldr	r3, [sp, #4]
    6302:	1d1a      	adds	r2, r3, #4
    6304:	9201      	str	r2, [sp, #4]
    6306:	6819      	ldr	r1, [r3, #0]
    6308:	1938      	adds	r0, r7, r4
    630a:	f008 ff0c 	bl	f126 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>
          output_index +=
    630e:	4404      	add	r4, r0
          current++;
    6310:	1caa      	adds	r2, r5, #2
          break;
    6312:	e05d      	b.n	63d0 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    6314:	1c60      	adds	r0, r4, #1
    6316:	2300      	movs	r3, #0
    6318:	553b      	strb	r3, [r7, r4]
            return output_index;
    631a:	e0a0      	b.n	645e <MicroVsnprintf+0x196>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    631c:	1b33      	subs	r3, r6, r4
    631e:	2b09      	cmp	r3, #9
    6320:	dd0f      	ble.n	6342 <MicroVsnprintf+0x7a>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = '0';
    6322:	1c63      	adds	r3, r4, #1
    6324:	2230      	movs	r2, #48	; 0x30
    6326:	553a      	strb	r2, [r7, r4]
          output[output_index++] = 'x';
    6328:	3402      	adds	r4, #2
    632a:	2278      	movs	r2, #120	; 0x78
    632c:	54fa      	strb	r2, [r7, r3]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    632e:	9b01      	ldr	r3, [sp, #4]
    6330:	1d1a      	adds	r2, r3, #4
    6332:	9201      	str	r2, [sp, #4]
    6334:	6819      	ldr	r1, [r3, #0]
    6336:	1938      	adds	r0, r7, r4
    6338:	f008 fefe 	bl	f138 <_ZN12_GLOBAL__N_19FormatHexEPcj>
          output_index +=
    633c:	4404      	add	r4, r0
          current++;
    633e:	1caa      	adds	r2, r5, #2
          break;
    6340:	e046      	b.n	63d0 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    6342:	1c60      	adds	r0, r4, #1
    6344:	2300      	movs	r3, #0
    6346:	553b      	strb	r3, [r7, r4]
            return output_index;
    6348:	e089      	b.n	645e <MicroVsnprintf+0x196>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    634a:	1b30      	subs	r0, r6, r4
    634c:	f7fa fc8c 	bl	c68 <__aeabi_i2f>
    6350:	4944      	ldr	r1, [pc, #272]	; (6464 <MicroVsnprintf+0x19c>)
    6352:	f7fa fe7b 	bl	104c <__aeabi_fcmplt>
    6356:	b988      	cbnz	r0, 637c <MicroVsnprintf+0xb4>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
    6358:	9b01      	ldr	r3, [sp, #4]
    635a:	3307      	adds	r3, #7
    635c:	f023 0307 	bic.w	r3, r3, #7
    6360:	f103 0208 	add.w	r2, r3, #8
    6364:	9201      	str	r2, [sp, #4]
    6366:	e9d3 0100 	ldrd	r0, r1, [r3]
    636a:	f7fa fb73 	bl	a54 <__aeabi_d2f>
    636e:	4601      	mov	r1, r0
    6370:	1938      	adds	r0, r7, r4
    6372:	f008 feea 	bl	f14a <_ZN12_GLOBAL__N_111FormatFloatEPcf>
          output_index +=
    6376:	4404      	add	r4, r0
          current++;
    6378:	1caa      	adds	r2, r5, #2
          break;
    637a:	e029      	b.n	63d0 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    637c:	1c60      	adds	r0, r4, #1
    637e:	2300      	movs	r3, #0
    6380:	553b      	strb	r3, [r7, r4]
            return output_index;
    6382:	e06c      	b.n	645e <MicroVsnprintf+0x196>
        case '%':
          output[output_index++] = *current++;
    6384:	1caa      	adds	r2, r5, #2
    6386:	553b      	strb	r3, [r7, r4]
    6388:	3401      	adds	r4, #1
          break;
    638a:	e021      	b.n	63d0 <MicroVsnprintf+0x108>
        case 'c':
          if (usable_length - output_index < 1) {
    638c:	1b33      	subs	r3, r6, r4
    638e:	2b00      	cmp	r3, #0
    6390:	dd07      	ble.n	63a2 <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
    6392:	9b01      	ldr	r3, [sp, #4]
    6394:	1d1a      	adds	r2, r3, #4
    6396:	9201      	str	r2, [sp, #4]
    6398:	681b      	ldr	r3, [r3, #0]
    639a:	553b      	strb	r3, [r7, r4]
          current++;
    639c:	1caa      	adds	r2, r5, #2
          output[output_index++] = va_arg(args, int32_t);
    639e:	3401      	adds	r4, #1
          break;
    63a0:	e016      	b.n	63d0 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    63a2:	1c60      	adds	r0, r4, #1
    63a4:	2300      	movs	r3, #0
    63a6:	553b      	strb	r3, [r7, r4]
            return output_index;
    63a8:	e059      	b.n	645e <MicroVsnprintf+0x196>
        case 's':
          char* string = va_arg(args, char*);
    63aa:	9b01      	ldr	r3, [sp, #4]
    63ac:	1d1a      	adds	r2, r3, #4
    63ae:	9201      	str	r2, [sp, #4]
    63b0:	6819      	ldr	r1, [r3, #0]
          int string_idx = 0;
    63b2:	2300      	movs	r3, #0
          while (string_idx + output_index < usable_length &&
    63b4:	18e2      	adds	r2, r4, r3
    63b6:	42b2      	cmp	r2, r6
    63b8:	da05      	bge.n	63c6 <MicroVsnprintf+0xfe>
                 string[string_idx] != '\0') {
    63ba:	5cca      	ldrb	r2, [r1, r3]
          while (string_idx + output_index < usable_length &&
    63bc:	b11a      	cbz	r2, 63c6 <MicroVsnprintf+0xfe>
            output[output_index++] = string[string_idx++];
    63be:	3301      	adds	r3, #1
    63c0:	553a      	strb	r2, [r7, r4]
    63c2:	3401      	adds	r4, #1
          while (string_idx + output_index < usable_length &&
    63c4:	e7f6      	b.n	63b4 <MicroVsnprintf+0xec>
          }
          current++;
    63c6:	1caa      	adds	r2, r5, #2
    63c8:	e002      	b.n	63d0 <MicroVsnprintf+0x108>
      }
    } else {
      output[output_index++] = *current++;
    63ca:	1c6a      	adds	r2, r5, #1
    63cc:	553b      	strb	r3, [r7, r4]
    63ce:	3401      	adds	r4, #1
          output[output_index++] = va_arg(args, int32_t);
    63d0:	4615      	mov	r5, r2
  while (*current != '\0' && output_index < usable_length) {
    63d2:	782b      	ldrb	r3, [r5, #0]
    63d4:	2b00      	cmp	r3, #0
    63d6:	d03f      	beq.n	6458 <MicroVsnprintf+0x190>
    63d8:	42b4      	cmp	r4, r6
    63da:	da3d      	bge.n	6458 <MicroVsnprintf+0x190>
    if (*current == '%') {
    63dc:	2b25      	cmp	r3, #37	; 0x25
    63de:	d1f4      	bne.n	63ca <MicroVsnprintf+0x102>
      current++;
    63e0:	1c6a      	adds	r2, r5, #1
      switch (*current) {
    63e2:	786b      	ldrb	r3, [r5, #1]
    63e4:	2b25      	cmp	r3, #37	; 0x25
    63e6:	d0cd      	beq.n	6384 <MicroVsnprintf+0xbc>
    63e8:	d3f2      	bcc.n	63d0 <MicroVsnprintf+0x108>
    63ea:	2b78      	cmp	r3, #120	; 0x78
    63ec:	d8f0      	bhi.n	63d0 <MicroVsnprintf+0x108>
    63ee:	2b63      	cmp	r3, #99	; 0x63
    63f0:	d3ee      	bcc.n	63d0 <MicroVsnprintf+0x108>
    63f2:	3b63      	subs	r3, #99	; 0x63
    63f4:	2b15      	cmp	r3, #21
    63f6:	d8eb      	bhi.n	63d0 <MicroVsnprintf+0x108>
    63f8:	a101      	add	r1, pc, #4	; (adr r1, 6400 <MicroVsnprintf+0x138>)
    63fa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    63fe:	bf00      	nop
    6400:	0000638d 	.word	0x0000638d
    6404:	000062d9 	.word	0x000062d9
    6408:	000063d1 	.word	0x000063d1
    640c:	0000634b 	.word	0x0000634b
    6410:	000063d1 	.word	0x000063d1
    6414:	000063d1 	.word	0x000063d1
    6418:	000063d1 	.word	0x000063d1
    641c:	000063d1 	.word	0x000063d1
    6420:	000063d1 	.word	0x000063d1
    6424:	000063d1 	.word	0x000063d1
    6428:	000063d1 	.word	0x000063d1
    642c:	000063d1 	.word	0x000063d1
    6430:	000063d1 	.word	0x000063d1
    6434:	000063d1 	.word	0x000063d1
    6438:	000063d1 	.word	0x000063d1
    643c:	000063d1 	.word	0x000063d1
    6440:	000063ab 	.word	0x000063ab
    6444:	000063d1 	.word	0x000063d1
    6448:	000062fb 	.word	0x000062fb
    644c:	000063d1 	.word	0x000063d1
    6450:	000063d1 	.word	0x000063d1
    6454:	0000631d 	.word	0x0000631d
    }
  }
  output[output_index++] = '\0';
    6458:	1c60      	adds	r0, r4, #1
    645a:	2300      	movs	r3, #0
    645c:	553b      	strb	r3, [r7, r4]
  return output_index;
}
    645e:	b003      	add	sp, #12
    6460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6462:	bf00      	nop
    6464:	41600000 	.word	0x41600000

00006468 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    6468:	b570      	push	{r4, r5, r6, lr}
    646a:	4604      	mov	r4, r0
    646c:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    646e:	f007 fbbb 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6472:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6474:	4630      	mov	r0, r6
    6476:	f007 fbbd 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    647a:	2808      	cmp	r0, #8
    647c:	d918      	bls.n	64b0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>
    647e:	f106 0008 	add.w	r0, r6, #8
    6482:	f007 fbb7 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6486:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6488:	b1a0      	cbz	r0, 64b4 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
    648a:	4620      	mov	r0, r4
    648c:	f007 fba6 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6490:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6492:	6820      	ldr	r0, [r4, #0]
    6494:	f007 fba1 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6498:	4285      	cmp	r5, r0
    649a:	d20d      	bcs.n	64b8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x50>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    649c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    649e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    64a2:	4620      	mov	r0, r4
    64a4:	f007 fb9a 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
    64a8:	4420      	add	r0, r4
    64aa:	f008 fe64 	bl	f176 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
}
    64ae:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    64b0:	2000      	movs	r0, #0
    64b2:	e7e8      	b.n	6486 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    64b4:	2400      	movs	r4, #0
    64b6:	e7ec      	b.n	6492 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    FLATBUFFERS_ASSERT(i < size());
    64b8:	4b03      	ldr	r3, [pc, #12]	; (64c8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>)
    64ba:	4a04      	ldr	r2, [pc, #16]	; (64cc <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x64>)
    64bc:	f44f 7183 	mov.w	r1, #262	; 0x106
    64c0:	4803      	ldr	r0, [pc, #12]	; (64d0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x68>)
    64c2:	f006 f93f 	bl	c744 <__assert_func>
    64c6:	bf00      	nop
    64c8:	0005563c 	.word	0x0005563c
    64cc:	0005578c 	.word	0x0005578c
    64d0:	00055708 	.word	0x00055708

000064d4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    64d4:	6943      	ldr	r3, [r0, #20]
    64d6:	2b20      	cmp	r3, #32
    64d8:	d007      	beq.n	64ea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    64da:	b2da      	uxtb	r2, r3
  return (v < low) || (high < v);
    64dc:	2a91      	cmp	r2, #145	; 0x91
    64de:	d806      	bhi.n	64ee <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1a>
  const size_t index = static_cast<size_t>(e);
    64e0:	4613      	mov	r3, r2
  return EnumNamesBuiltinOperator()[index];
    64e2:	4a04      	ldr	r2, [pc, #16]	; (64f4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    64e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    64e8:	4770      	bx	lr
    return registration->custom_name;
    64ea:	6980      	ldr	r0, [r0, #24]
    64ec:	4770      	bx	lr
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    64ee:	4802      	ldr	r0, [pc, #8]	; (64f8 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>)
  }
}
    64f0:	4770      	bx	lr
    64f2:	bf00      	nop
    64f4:	00056198 	.word	0x00056198
    64f8:	000113e0 	.word	0x000113e0

000064fc <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    64fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6500:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    6502:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6506:	2600      	movs	r6, #0
    6508:	e024      	b.n	6554 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x58>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    650a:	4621      	mov	r1, r4
    650c:	68e8      	ldr	r0, [r5, #12]
    650e:	f009 f869 	bl	f5e4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    6512:	3401      	adds	r4, #1
    6514:	42bc      	cmp	r4, r7
    6516:	d21c      	bcs.n	6552 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6518:	692b      	ldr	r3, [r5, #16]
    651a:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    651e:	212c      	movs	r1, #44	; 0x2c
    6520:	fb01 3104 	mla	r1, r1, r4, r3
      const TfLiteRegistration* registration =
    6524:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
    6528:	f8d9 3008 	ldr.w	r3, [r9, #8]
    652c:	2b00      	cmp	r3, #0
    652e:	d0ec      	beq.n	650a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    6530:	6868      	ldr	r0, [r5, #4]
    6532:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
    6534:	4682      	mov	sl, r0
    6536:	2800      	cmp	r0, #0
    6538:	d0e7      	beq.n	650a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    653a:	4648      	mov	r0, r9
    653c:	f7ff ffca 	bl	64d4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6540:	4601      	mov	r1, r0
    6542:	4653      	mov	r3, sl
    6544:	4622      	mov	r2, r4
    6546:	480c      	ldr	r0, [pc, #48]	; (6578 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    6548:	f008 fceb 	bl	ef22 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    654c:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6552:	3601      	adds	r6, #1
    6554:	69ab      	ldr	r3, [r5, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6556:	6818      	ldr	r0, [r3, #0]
    6558:	f007 fb3f 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    655c:	4286      	cmp	r6, r0
    655e:	d207      	bcs.n	6570 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    current_subgraph_index_ = subgraph_idx;
    6560:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    6562:	4631      	mov	r1, r6
    6564:	68a8      	ldr	r0, [r5, #8]
    6566:	f7ff ff7f 	bl	6468 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    656a:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    656c:	2400      	movs	r4, #0
    656e:	e7d1      	b.n	6514 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x18>
  current_subgraph_index_ = previous_subgraph_idx;
    6570:	f8c5 8014 	str.w	r8, [r5, #20]
  return kTfLiteOk;
    6574:	2000      	movs	r0, #0
    6576:	e7ea      	b.n	654e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x52>
    6578:	00055884 	.word	0x00055884

0000657c <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6580:	b083      	sub	sp, #12
    6582:	4606      	mov	r6, r0
    6584:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    6586:	f8d0 b014 	ldr.w	fp, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    658a:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    658c:	6983      	ldr	r3, [r0, #24]
    658e:	6818      	ldr	r0, [r3, #0]
    6590:	f007 fb23 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6594:	4284      	cmp	r4, r0
    6596:	d207      	bcs.n	65a8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x2c>
    6598:	46a2      	mov	sl, r4
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    659a:	4621      	mov	r1, r4
    659c:	68b0      	ldr	r0, [r6, #8]
    659e:	f7ff ff63 	bl	6468 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    65a2:	4681      	mov	r9, r0
  for (size_t i = 0; i < operators_size; ++i) {
    65a4:	2700      	movs	r7, #0
    65a6:	e01d      	b.n	65e4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    65a8:	4602      	mov	r2, r0
    65aa:	4621      	mov	r1, r4
    65ac:	4827      	ldr	r0, [pc, #156]	; (664c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd0>)
    65ae:	f008 fcb8 	bl	ef22 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    65b2:	2501      	movs	r5, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    65b4:	4628      	mov	r0, r5
    65b6:	b003      	add	sp, #12
    65b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK(registration->invoke);
    65bc:	f009 fdd2 	bl	10164 <abort>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    65c0:	4640      	mov	r0, r8
    65c2:	f7ff ff87 	bl	64d4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    65c6:	4601      	mov	r1, r0
    65c8:	462b      	mov	r3, r5
    65ca:	463a      	mov	r2, r7
    65cc:	4820      	ldr	r0, [pc, #128]	; (6650 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd4>)
    65ce:	f008 fca8 	bl	ef22 <_Z11MicroPrintfPKcz>
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
    65d2:	2c00      	cmp	r4, #0
    65d4:	d0ee      	beq.n	65b4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
      profiler_->EndEvent(event_handle_);
    65d6:	6823      	ldr	r3, [r4, #0]
    65d8:	68db      	ldr	r3, [r3, #12]
    65da:	9900      	ldr	r1, [sp, #0]
    65dc:	4620      	mov	r0, r4
    65de:	4798      	blx	r3
    65e0:	e7e8      	b.n	65b4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
  for (size_t i = 0; i < operators_size; ++i) {
    65e2:	3701      	adds	r7, #1
    65e4:	454f      	cmp	r7, r9
    65e6:	d22d      	bcs.n	6644 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    65e8:	6933      	ldr	r3, [r6, #16]
    65ea:	f853 303a 	ldr.w	r3, [r3, sl, lsl #3]
    65ee:	252c      	movs	r5, #44	; 0x2c
    65f0:	fb05 3507 	mla	r5, r5, r7, r3
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    65f4:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    65f8:	4640      	mov	r0, r8
    65fa:	f7ff ff6b 	bl	64d4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    65fe:	4601      	mov	r1, r0
    6600:	6873      	ldr	r3, [r6, #4]
    6602:	6b5c      	ldr	r4, [r3, #52]	; 0x34
      : profiler_(profiler) {
    6604:	2300      	movs	r3, #0
    6606:	9300      	str	r3, [sp, #0]
    if (profiler_ != nullptr) {
    6608:	b124      	cbz	r4, 6614 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x98>
      event_handle_ = profiler_->BeginEvent(tag);
    660a:	6823      	ldr	r3, [r4, #0]
    660c:	689b      	ldr	r3, [r3, #8]
    660e:	4620      	mov	r0, r4
    6610:	4798      	blx	r3
    6612:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
    6614:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6618:	2b00      	cmp	r3, #0
    661a:	d0cf      	beq.n	65bc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x40>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    661c:	4629      	mov	r1, r5
    661e:	6870      	ldr	r0, [r6, #4]
    6620:	4798      	blx	r3
    6622:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
    6624:	68f0      	ldr	r0, [r6, #12]
    6626:	6803      	ldr	r3, [r0, #0]
    6628:	689b      	ldr	r3, [r3, #8]
    662a:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
    662c:	2d01      	cmp	r5, #1
    662e:	d0c7      	beq.n	65c0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x44>
    } else if (invoke_status != kTfLiteOk) {
    6630:	2d00      	cmp	r5, #0
    6632:	d1ce      	bne.n	65d2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x56>
    if (profiler_ != nullptr) {
    6634:	2c00      	cmp	r4, #0
    6636:	d0d4      	beq.n	65e2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
      profiler_->EndEvent(event_handle_);
    6638:	6823      	ldr	r3, [r4, #0]
    663a:	68db      	ldr	r3, [r3, #12]
    663c:	9900      	ldr	r1, [sp, #0]
    663e:	4620      	mov	r0, r4
    6640:	4798      	blx	r3
    6642:	e7ce      	b.n	65e2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
  current_subgraph_index_ = previous_subgraph_idx;
    6644:	f8c6 b014 	str.w	fp, [r6, #20]
  return kTfLiteOk;
    6648:	2500      	movs	r5, #0
    664a:	e7b3      	b.n	65b4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
    664c:	000558bc 	.word	0x000558bc
    6650:	000558f0 	.word	0x000558f0

00006654 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    6654:	b570      	push	{r4, r5, r6, lr}
    6656:	4604      	mov	r4, r0
    6658:	4615      	mov	r5, r2
      current_subgraph_index_(0) {
    665a:	4a11      	ldr	r2, [pc, #68]	; (66a0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x4c>)
    665c:	6002      	str	r2, [r0, #0]
    665e:	6041      	str	r1, [r0, #4]
    6660:	6085      	str	r5, [r0, #8]
    6662:	60c3      	str	r3, [r0, #12]
    6664:	2300      	movs	r3, #0
    6666:	6103      	str	r3, [r0, #16]
    6668:	6143      	str	r3, [r0, #20]
  if (model != nullptr) {
    666a:	b19d      	cbz	r5, 6694 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    666c:	4628      	mov	r0, r5
    666e:	f007 fabb 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6672:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6674:	4630      	mov	r0, r6
    6676:	f007 fabd 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    667a:	2808      	cmp	r0, #8
    667c:	d90c      	bls.n	6698 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    667e:	f106 0008 	add.w	r0, r6, #8
    6682:	f007 fab7 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6686:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6688:	b140      	cbz	r0, 669c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x48>
    668a:	4628      	mov	r0, r5
    668c:	f007 faa6 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6690:	4405      	add	r5, r0
    subgraphs_ = model->subgraphs();
    6692:	61a5      	str	r5, [r4, #24]
}
    6694:	4620      	mov	r0, r4
    6696:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6698:	2000      	movs	r0, #0
    669a:	e7f4      	b.n	6686 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x32>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    669c:	2500      	movs	r5, #0
    669e:	e7f8      	b.n	6692 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3e>
    66a0:	000563ec 	.word	0x000563ec

000066a4 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    66a4:	b570      	push	{r4, r5, r6, lr}
    66a6:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    66a8:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    66aa:	4620      	mov	r0, r4
    66ac:	f007 fa9c 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    66b0:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    66b2:	4630      	mov	r0, r6
    66b4:	f007 fa9e 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66b8:	2808      	cmp	r0, #8
    66ba:	d92c      	bls.n	6716 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x72>
    66bc:	f106 0008 	add.w	r0, r6, #8
    66c0:	f007 fa98 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    66c4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66c6:	b340      	cbz	r0, 671a <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x76>
    66c8:	4620      	mov	r0, r4
    66ca:	f007 fa87 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    66ce:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    66d0:	6820      	ldr	r0, [r4, #0]
    66d2:	f007 fa82 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    66d6:	4285      	cmp	r5, r0
    66d8:	d221      	bcs.n	671e <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x7a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    66da:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    66dc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    66e0:	4620      	mov	r0, r4
    66e2:	f007 fa7b 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    66e6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    66e8:	4620      	mov	r0, r4
    66ea:	f007 fa7d 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    66ee:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    66f0:	4628      	mov	r0, r5
    66f2:	f007 fa7f 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66f6:	2808      	cmp	r0, #8
    66f8:	d918      	bls.n	672c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x88>
    66fa:	f105 0008 	add.w	r0, r5, #8
    66fe:	f007 fa79 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6702:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6704:	b1a0      	cbz	r0, 6730 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x8c>
    6706:	4620      	mov	r0, r4
    6708:	f007 fa68 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    670c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    670e:	6820      	ldr	r0, [r4, #0]
    6710:	f007 fa63 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6714:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6716:	2000      	movs	r0, #0
    6718:	e7d4      	b.n	66c4 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    671a:	2400      	movs	r4, #0
    671c:	e7d8      	b.n	66d0 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    671e:	4b05      	ldr	r3, [pc, #20]	; (6734 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x90>)
    6720:	4a05      	ldr	r2, [pc, #20]	; (6738 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x94>)
    6722:	f44f 7183 	mov.w	r1, #262	; 0x106
    6726:	4805      	ldr	r0, [pc, #20]	; (673c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x98>)
    6728:	f006 f80c 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    672c:	2000      	movs	r0, #0
    672e:	e7e8      	b.n	6702 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6730:	2400      	movs	r4, #0
    6732:	e7ec      	b.n	670e <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x6a>
    6734:	0005563c 	.word	0x0005563c
    6738:	0005578c 	.word	0x0005578c
    673c:	00055708 	.word	0x00055708

00006740 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    6740:	b570      	push	{r4, r5, r6, lr}
    6742:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    6744:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6746:	4620      	mov	r0, r4
    6748:	f007 fa4e 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    674c:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    674e:	4630      	mov	r0, r6
    6750:	f007 fa50 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6754:	2808      	cmp	r0, #8
    6756:	d92b      	bls.n	67b0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x70>
    6758:	f106 0008 	add.w	r0, r6, #8
    675c:	f007 fa4a 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6760:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6762:	b338      	cbz	r0, 67b4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x74>
    6764:	4620      	mov	r0, r4
    6766:	f007 fa39 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    676a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    676c:	6820      	ldr	r0, [r4, #0]
    676e:	f007 fa34 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6772:	4285      	cmp	r5, r0
    6774:	d220      	bcs.n	67b8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x78>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6776:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6778:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    677c:	4620      	mov	r0, r4
    677e:	f007 fa2d 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6782:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6784:	4620      	mov	r0, r4
    6786:	f007 fa2f 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    678a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    678c:	4628      	mov	r0, r5
    678e:	f007 fa31 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6792:	2806      	cmp	r0, #6
    6794:	d917      	bls.n	67c6 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x86>
    6796:	1da8      	adds	r0, r5, #6
    6798:	f007 fa2c 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    679c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    679e:	b1a0      	cbz	r0, 67ca <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x8a>
    67a0:	4620      	mov	r0, r4
    67a2:	f007 fa1b 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    67a6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    67a8:	6820      	ldr	r0, [r4, #0]
    67aa:	f007 fa16 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    67ae:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    67b0:	2000      	movs	r0, #0
    67b2:	e7d5      	b.n	6760 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    67b4:	2400      	movs	r4, #0
    67b6:	e7d9      	b.n	676c <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    67b8:	4b05      	ldr	r3, [pc, #20]	; (67d0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x90>)
    67ba:	4a06      	ldr	r2, [pc, #24]	; (67d4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x94>)
    67bc:	f44f 7183 	mov.w	r1, #262	; 0x106
    67c0:	4805      	ldr	r0, [pc, #20]	; (67d8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x98>)
    67c2:	f005 ffbf 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    67c6:	2000      	movs	r0, #0
    67c8:	e7e8      	b.n	679c <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    67ca:	2400      	movs	r4, #0
    67cc:	e7ec      	b.n	67a8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x68>
    67ce:	bf00      	nop
    67d0:	0005563c 	.word	0x0005563c
    67d4:	0005578c 	.word	0x0005578c
    67d8:	00055708 	.word	0x00055708

000067dc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    67dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67e0:	4606      	mov	r6, r0
    67e2:	460d      	mov	r5, r1
    67e4:	4617      	mov	r7, r2
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    67e6:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    67e8:	4620      	mov	r0, r4
    67ea:	f007 f9fd 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    67ee:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    67f2:	4640      	mov	r0, r8
    67f4:	f007 f9fe 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    67f8:	2808      	cmp	r0, #8
    67fa:	d93d      	bls.n	6878 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x9c>
    67fc:	f108 0008 	add.w	r0, r8, #8
    6800:	f007 f9f8 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6804:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6806:	b3c8      	cbz	r0, 687c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa0>
    6808:	4620      	mov	r0, r4
    680a:	f007 f9e7 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    680e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6810:	6820      	ldr	r0, [r4, #0]
    6812:	f007 f9e2 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6816:	4285      	cmp	r5, r0
    6818:	d232      	bcs.n	6880 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    681a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    681c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6820:	4620      	mov	r0, r4
    6822:	f007 f9db 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6826:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6828:	4620      	mov	r0, r4
    682a:	f007 f9dd 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    682e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6832:	4640      	mov	r0, r8
    6834:	f007 f9de 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6838:	2808      	cmp	r0, #8
    683a:	d928      	bls.n	688e <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb2>
    683c:	f108 0008 	add.w	r0, r8, #8
    6840:	f007 f9d8 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6844:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6846:	b320      	cbz	r0, 6892 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb6>
    6848:	4620      	mov	r0, r4
    684a:	f007 f9c7 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    684e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6850:	6820      	ldr	r0, [r4, #0]
    6852:	f007 f9c2 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6856:	4287      	cmp	r7, r0
    6858:	d21d      	bcs.n	6896 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    685a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    685c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6860:	f007 f9c1 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6864:	6931      	ldr	r1, [r6, #16]
    6866:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    686a:	686b      	ldr	r3, [r5, #4]
    686c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6870:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6878:	2000      	movs	r0, #0
    687a:	e7c3      	b.n	6804 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    687c:	2400      	movs	r4, #0
    687e:	e7c7      	b.n	6810 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6880:	4b08      	ldr	r3, [pc, #32]	; (68a4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6882:	4a09      	ldr	r2, [pc, #36]	; (68a8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xcc>)
    6884:	f44f 7183 	mov.w	r1, #262	; 0x106
    6888:	4808      	ldr	r0, [pc, #32]	; (68ac <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    688a:	f005 ff5b 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    688e:	2000      	movs	r0, #0
    6890:	e7d8      	b.n	6844 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6892:	2400      	movs	r4, #0
    6894:	e7dc      	b.n	6850 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6896:	4b03      	ldr	r3, [pc, #12]	; (68a4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6898:	4a05      	ldr	r2, [pc, #20]	; (68b0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd4>)
    689a:	f44f 7183 	mov.w	r1, #262	; 0x106
    689e:	4803      	ldr	r0, [pc, #12]	; (68ac <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    68a0:	f005 ff50 	bl	c744 <__assert_func>
    68a4:	0005563c 	.word	0x0005563c
    68a8:	0005578c 	.word	0x0005578c
    68ac:	00055708 	.word	0x00055708
    68b0:	00055648 	.word	0x00055648

000068b4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
                                               int input_idx) {
    68b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68b8:	4606      	mov	r6, r0
    68ba:	460d      	mov	r5, r1
    68bc:	4617      	mov	r7, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    68be:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    68c0:	4620      	mov	r0, r4
    68c2:	f007 f991 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    68c6:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    68ca:	4640      	mov	r0, r8
    68cc:	f007 f992 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    68d0:	2808      	cmp	r0, #8
    68d2:	d93d      	bls.n	6950 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x9c>
    68d4:	f108 0008 	add.w	r0, r8, #8
    68d8:	f007 f98c 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    68dc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    68de:	b3c8      	cbz	r0, 6954 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa0>
    68e0:	4620      	mov	r0, r4
    68e2:	f007 f97b 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    68e6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    68e8:	6820      	ldr	r0, [r4, #0]
    68ea:	f007 f976 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    68ee:	4285      	cmp	r5, r0
    68f0:	d232      	bcs.n	6958 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    68f2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    68f4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    68f8:	4620      	mov	r0, r4
    68fa:	f007 f96f 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    68fe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6900:	4620      	mov	r0, r4
    6902:	f007 f971 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6906:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    690a:	4640      	mov	r0, r8
    690c:	f007 f972 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6910:	2806      	cmp	r0, #6
    6912:	d928      	bls.n	6966 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb2>
    6914:	f108 0006 	add.w	r0, r8, #6
    6918:	f007 f96c 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    691c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    691e:	b320      	cbz	r0, 696a <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb6>
    6920:	4620      	mov	r0, r4
    6922:	f007 f95b 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6926:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6928:	6820      	ldr	r0, [r4, #0]
    692a:	f007 f956 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    692e:	4287      	cmp	r7, r0
    6930:	d21d      	bcs.n	696e <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6932:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6934:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6938:	f007 f955 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    693c:	6931      	ldr	r1, [r6, #16]
    693e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6942:	686b      	ldr	r3, [r5, #4]
    6944:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6948:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    694c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6950:	2000      	movs	r0, #0
    6952:	e7c3      	b.n	68dc <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6954:	2400      	movs	r4, #0
    6956:	e7c7      	b.n	68e8 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6958:	4b08      	ldr	r3, [pc, #32]	; (697c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    695a:	4a09      	ldr	r2, [pc, #36]	; (6980 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xcc>)
    695c:	f44f 7183 	mov.w	r1, #262	; 0x106
    6960:	4808      	ldr	r0, [pc, #32]	; (6984 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6962:	f005 feef 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6966:	2000      	movs	r0, #0
    6968:	e7d8      	b.n	691c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    696a:	2400      	movs	r4, #0
    696c:	e7dc      	b.n	6928 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    696e:	4b03      	ldr	r3, [pc, #12]	; (697c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6970:	4a05      	ldr	r2, [pc, #20]	; (6988 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd4>)
    6972:	f44f 7183 	mov.w	r1, #262	; 0x106
    6976:	4803      	ldr	r0, [pc, #12]	; (6984 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6978:	f005 fee4 	bl	c744 <__assert_func>
    697c:	0005563c 	.word	0x0005563c
    6980:	0005578c 	.word	0x0005578c
    6984:	00055708 	.word	0x00055708
    6988:	00055648 	.word	0x00055648

0000698c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6990:	b083      	sub	sp, #12
    6992:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6994:	2700      	movs	r7, #0
    6996:	e0c8      	b.n	6b2a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19e>
    6998:	4b71      	ldr	r3, [pc, #452]	; (6b60 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    699a:	4a72      	ldr	r2, [pc, #456]	; (6b64 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d8>)
    699c:	f44f 7183 	mov.w	r1, #262	; 0x106
    69a0:	4871      	ldr	r0, [pc, #452]	; (6b68 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    69a2:	f005 fecf 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69a6:	2000      	movs	r0, #0
    69a8:	e01d      	b.n	69e6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69aa:	2400      	movs	r4, #0
    69ac:	e022      	b.n	69f4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x68>
    FLATBUFFERS_ASSERT(i < size());
    69ae:	4b6c      	ldr	r3, [pc, #432]	; (6b60 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    69b0:	4a6e      	ldr	r2, [pc, #440]	; (6b6c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e0>)
    69b2:	f44f 7183 	mov.w	r1, #262	; 0x106
    69b6:	486c      	ldr	r0, [pc, #432]	; (6b68 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    69b8:	f005 fec4 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69bc:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    69be:	b118      	cbz	r0, 69c8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
    69c0:	4420      	add	r0, r4
    69c2:	f008 fbf7 	bl	f1b4 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    69c6:	e000      	b.n	69ca <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3e>
    69c8:	2000      	movs	r0, #0
      if (tensor->is_variable()) {
    69ca:	bba0      	cbnz	r0, 6a36 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    69cc:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    69ce:	4630      	mov	r0, r6
    69d0:	f007 f90a 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    69d4:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    69d6:	4620      	mov	r0, r4
    69d8:	f007 f90c 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69dc:	2804      	cmp	r0, #4
    69de:	d9e2      	bls.n	69a6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1a>
    69e0:	1d20      	adds	r0, r4, #4
    69e2:	f007 f907 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    69e6:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69e8:	2800      	cmp	r0, #0
    69ea:	d0de      	beq.n	69aa <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
    69ec:	4620      	mov	r0, r4
    69ee:	f007 f8f5 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69f2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    69f4:	6820      	ldr	r0, [r4, #0]
    69f6:	f007 f8f0 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    69fa:	4285      	cmp	r5, r0
    69fc:	f080 8094 	bcs.w	6b28 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19c>
    6a00:	6820      	ldr	r0, [r4, #0]
    6a02:	f007 f8ea 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6a06:	4285      	cmp	r5, r0
    6a08:	d2d1      	bcs.n	69ae <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6a0a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6a0c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6a10:	4620      	mov	r0, r4
    6a12:	f007 f8e3 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a16:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6a18:	4620      	mov	r0, r4
    6a1a:	f007 f8e5 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a1e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a22:	4648      	mov	r0, r9
    6a24:	f007 f8e6 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a28:	280e      	cmp	r0, #14
    6a2a:	d9c7      	bls.n	69bc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x30>
    6a2c:	f109 000e 	add.w	r0, r9, #14
    6a30:	f007 f8e0 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6a34:	e7c3      	b.n	69be <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x32>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    6a36:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6a3a:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    6a3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    6a42:	6858      	ldr	r0, [r3, #4]
    6a44:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6a48:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    6a4c:	a901      	add	r1, sp, #4
    6a4e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6a52:	f008 faca 	bl	efea <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    6a56:	4603      	mov	r3, r0
    6a58:	2800      	cmp	r0, #0
    6a5a:	d17d      	bne.n	6b58 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1cc>
    return data_ - ReadScalar<soffset_t>(data_);
    6a5c:	4620      	mov	r0, r4
    6a5e:	f007 f8c3 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a62:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a66:	4648      	mov	r0, r9
    6a68:	f007 f8c4 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a6c:	2806      	cmp	r0, #6
    6a6e:	d914      	bls.n	6a9a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    6a70:	f109 0006 	add.w	r0, r9, #6
    6a74:	f007 f8be 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6a78:	b188      	cbz	r0, 6a9e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
    6a7a:	4420      	add	r0, r4
    6a7c:	f008 fad7 	bl	f02e <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        if (tensor->type() == tflite::TensorType_INT8) {
    6a80:	2809      	cmp	r0, #9
    6a82:	d00e      	beq.n	6aa2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x116>
        int value = 0;
    6a84:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    6a86:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6a8a:	4453      	add	r3, sl
    6a8c:	685b      	ldr	r3, [r3, #4]
    6a8e:	9a01      	ldr	r2, [sp, #4]
    6a90:	f853 000b 	ldr.w	r0, [r3, fp]
    6a94:	f009 fb8c 	bl	101b0 <memset>
    6a98:	e798      	b.n	69cc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a9a:	2000      	movs	r0, #0
    6a9c:	e7ec      	b.n	6a78 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6a9e:	2000      	movs	r0, #0
    6aa0:	e7ee      	b.n	6a80 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
    return data_ - ReadScalar<soffset_t>(data_);
    6aa2:	4620      	mov	r0, r4
    6aa4:	f007 f8a0 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6aa8:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6aac:	4648      	mov	r0, r9
    6aae:	f007 f8a1 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ab2:	280c      	cmp	r0, #12
    6ab4:	d928      	bls.n	6b08 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17c>
    6ab6:	f109 000c 	add.w	r0, r9, #12
    6aba:	f007 f89b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6abe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ac0:	b320      	cbz	r0, 6b0c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x180>
    6ac2:	4620      	mov	r0, r4
    6ac4:	f007 f88a 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ac8:	4404      	add	r4, r0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    6aca:	46a1      	mov	r9, r4
    return data_ - ReadScalar<soffset_t>(data_);
    6acc:	4620      	mov	r0, r4
    6ace:	f007 f88b 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ad2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ad4:	4620      	mov	r0, r4
    6ad6:	f007 f88d 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ada:	280a      	cmp	r0, #10
    6adc:	d918      	bls.n	6b10 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x184>
    6ade:	f104 000a 	add.w	r0, r4, #10
    6ae2:	f007 f887 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6ae6:	4481      	add	r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ae8:	b1a0      	cbz	r0, 6b14 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x188>
    6aea:	4648      	mov	r0, r9
    6aec:	f007 f876 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6af0:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6af2:	f8d9 0000 	ldr.w	r0, [r9]
    6af6:	f007 f870 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6afa:	b170      	cbz	r0, 6b1a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18e>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6afc:	e9d9 0101 	ldrd	r0, r1, [r9, #4]
    6b00:	f008 fb5d 	bl	f1be <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    6b04:	4601      	mov	r1, r0
    6b06:	e7be      	b.n	6a86 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b08:	2000      	movs	r0, #0
    6b0a:	e7d8      	b.n	6abe <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b0c:	2400      	movs	r4, #0
    6b0e:	e7dc      	b.n	6aca <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x13e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b10:	2000      	movs	r0, #0
    6b12:	e7e8      	b.n	6ae6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b14:	f04f 0900 	mov.w	r9, #0
    6b18:	e7eb      	b.n	6af2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x166>
    FLATBUFFERS_ASSERT(i < size());
    6b1a:	4b11      	ldr	r3, [pc, #68]	; (6b60 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6b1c:	4a14      	ldr	r2, [pc, #80]	; (6b70 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e4>)
    6b1e:	f44f 7183 	mov.w	r1, #262	; 0x106
    6b22:	4811      	ldr	r0, [pc, #68]	; (6b68 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6b24:	f005 fe0e 	bl	c744 <__assert_func>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6b28:	3701      	adds	r7, #1
    6b2a:	f8d8 6018 	ldr.w	r6, [r8, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6b2e:	6830      	ldr	r0, [r6, #0]
    6b30:	f007 f853 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6b34:	4287      	cmp	r7, r0
    6b36:	d20e      	bcs.n	6b56 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1ca>
    6b38:	6830      	ldr	r0, [r6, #0]
    6b3a:	f007 f84e 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6b3e:	4287      	cmp	r7, r0
    6b40:	f4bf af2a 	bcs.w	6998 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6b44:	3604      	adds	r6, #4
    p += i * sizeof(uoffset_t);
    6b46:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6b4a:	4630      	mov	r0, r6
    6b4c:	f007 f846 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6b50:	4406      	add	r6, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6b52:	2500      	movs	r5, #0
    6b54:	e73b      	b.n	69ce <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x42>
  return kTfLiteOk;
    6b56:	2300      	movs	r3, #0
}
    6b58:	4618      	mov	r0, r3
    6b5a:	b003      	add	sp, #12
    6b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b60:	0005563c 	.word	0x0005563c
    6b64:	0005578c 	.word	0x0005578c
    6b68:	00055708 	.word	0x00055708
    6b6c:	00055924 	.word	0x00055924
    6b70:	00055a18 	.word	0x00055a18

00006b74 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
    6b74:	6180      	str	r0, [r0, #24]
  context_.ReportError = ReportOpError;
    6b76:	4b05      	ldr	r3, [pc, #20]	; (6b8c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x18>)
    6b78:	6203      	str	r3, [r0, #32]
  context_.GetTensor = GetTensor;
    6b7a:	4b05      	ldr	r3, [pc, #20]	; (6b90 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x1c>)
    6b7c:	65c3      	str	r3, [r0, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    6b7e:	4b05      	ldr	r3, [pc, #20]	; (6b94 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x20>)
    6b80:	6603      	str	r3, [r0, #96]	; 0x60
  context_.profiler = profiler;
    6b82:	6401      	str	r1, [r0, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
    6b84:	2300      	movs	r3, #0
    6b86:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
}
    6b8a:	4770      	bx	lr
    6b8c:	0000f33b 	.word	0x0000f33b
    6b90:	0000f2e9 	.word	0x0000f2e9
    6b94:	0000f307 	.word	0x0000f307

00006b98 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    6b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b9a:	4605      	mov	r5, r0
    6b9c:	460e      	mov	r6, r1
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
    6b9e:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6ba0:	4620      	mov	r0, r4
    6ba2:	f007 f821 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ba6:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ba8:	4638      	mov	r0, r7
    6baa:	f007 f823 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6bae:	2808      	cmp	r0, #8
    6bb0:	d92f      	bls.n	6c12 <_ZN6tflite16MicroInterpreter6outputEj+0x7a>
    6bb2:	f107 0008 	add.w	r0, r7, #8
    6bb6:	f007 f81d 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6bba:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bbc:	b358      	cbz	r0, 6c16 <_ZN6tflite16MicroInterpreter6outputEj+0x7e>
    6bbe:	4620      	mov	r0, r4
    6bc0:	f007 f80c 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bc4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6bc6:	6820      	ldr	r0, [r4, #0]
    6bc8:	f007 f807 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6bcc:	b328      	cbz	r0, 6c1a <_ZN6tflite16MicroInterpreter6outputEj+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6bce:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6bd0:	4620      	mov	r0, r4
    6bd2:	f007 f803 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bd6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6bd8:	4620      	mov	r0, r4
    6bda:	f007 f805 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6bde:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6be0:	4638      	mov	r0, r7
    6be2:	f007 f807 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6be6:	2808      	cmp	r0, #8
    6be8:	d91e      	bls.n	6c28 <_ZN6tflite16MicroInterpreter6outputEj+0x90>
    6bea:	f107 0008 	add.w	r0, r7, #8
    6bee:	f007 f801 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6bf2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bf4:	b1d0      	cbz	r0, 6c2c <_ZN6tflite16MicroInterpreter6outputEj+0x94>
    6bf6:	4620      	mov	r0, r4
    6bf8:	f006 fff0 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bfc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6bfe:	6820      	ldr	r0, [r4, #0]
    6c00:	f006 ffeb 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  const size_t length = outputs_size();
  if (index >= length) {
    6c04:	4286      	cmp	r6, r0
    6c06:	d213      	bcs.n	6c30 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return output_tensors_[index];
    6c08:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6c0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    6c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c12:	2000      	movs	r0, #0
    6c14:	e7d1      	b.n	6bba <_ZN6tflite16MicroInterpreter6outputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c16:	2400      	movs	r4, #0
    6c18:	e7d5      	b.n	6bc6 <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    6c1a:	4b09      	ldr	r3, [pc, #36]	; (6c40 <_ZN6tflite16MicroInterpreter6outputEj+0xa8>)
    6c1c:	4a09      	ldr	r2, [pc, #36]	; (6c44 <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
    6c1e:	f44f 7183 	mov.w	r1, #262	; 0x106
    6c22:	4809      	ldr	r0, [pc, #36]	; (6c48 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
    6c24:	f005 fd8e 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c28:	2000      	movs	r0, #0
    6c2a:	e7e2      	b.n	6bf2 <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c2c:	2400      	movs	r4, #0
    6c2e:	e7e6      	b.n	6bfe <_ZN6tflite16MicroInterpreter6outputEj+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6c30:	4603      	mov	r3, r0
    6c32:	4632      	mov	r2, r6
    6c34:	4905      	ldr	r1, [pc, #20]	; (6c4c <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
    6c36:	68a8      	ldr	r0, [r5, #8]
    6c38:	f008 fee8 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6c3c:	2000      	movs	r0, #0
    6c3e:	e7e7      	b.n	6c10 <_ZN6tflite16MicroInterpreter6outputEj+0x78>
    6c40:	0005563c 	.word	0x0005563c
    6c44:	0005578c 	.word	0x0005578c
    6c48:	00055708 	.word	0x00055708
    6c4c:	0005641c 	.word	0x0005641c

00006c50 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    6c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c52:	4605      	mov	r5, r0
    6c54:	460e      	mov	r6, r1
    return model_->subgraphs()->Get(0)->inputs()->size();
    6c56:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6c58:	4620      	mov	r0, r4
    6c5a:	f006 ffc5 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c5e:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c60:	4638      	mov	r0, r7
    6c62:	f006 ffc7 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c66:	2808      	cmp	r0, #8
    6c68:	d92e      	bls.n	6cc8 <_ZN6tflite16MicroInterpreter5inputEj+0x78>
    6c6a:	f107 0008 	add.w	r0, r7, #8
    6c6e:	f006 ffc1 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c72:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c74:	b350      	cbz	r0, 6ccc <_ZN6tflite16MicroInterpreter5inputEj+0x7c>
    6c76:	4620      	mov	r0, r4
    6c78:	f006 ffb0 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c7c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6c7e:	6820      	ldr	r0, [r4, #0]
    6c80:	f006 ffab 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6c84:	b320      	cbz	r0, 6cd0 <_ZN6tflite16MicroInterpreter5inputEj+0x80>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6c86:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6c88:	4620      	mov	r0, r4
    6c8a:	f006 ffa7 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c8e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6c90:	4620      	mov	r0, r4
    6c92:	f006 ffa9 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c96:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c98:	4638      	mov	r0, r7
    6c9a:	f006 ffab 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c9e:	2806      	cmp	r0, #6
    6ca0:	d91d      	bls.n	6cde <_ZN6tflite16MicroInterpreter5inputEj+0x8e>
    6ca2:	1db8      	adds	r0, r7, #6
    6ca4:	f006 ffa6 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6ca8:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6caa:	b1d0      	cbz	r0, 6ce2 <_ZN6tflite16MicroInterpreter5inputEj+0x92>
    6cac:	4620      	mov	r0, r4
    6cae:	f006 ff95 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6cb2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6cb4:	6820      	ldr	r0, [r4, #0]
    6cb6:	f006 ff90 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  if (index >= length) {
    6cba:	4286      	cmp	r6, r0
    6cbc:	d213      	bcs.n	6ce6 <_ZN6tflite16MicroInterpreter5inputEj+0x96>
  return input_tensors_[index];
    6cbe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    6cc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    6cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cc8:	2000      	movs	r0, #0
    6cca:	e7d2      	b.n	6c72 <_ZN6tflite16MicroInterpreter5inputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ccc:	2400      	movs	r4, #0
    6cce:	e7d6      	b.n	6c7e <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    6cd0:	4b09      	ldr	r3, [pc, #36]	; (6cf8 <_ZN6tflite16MicroInterpreter5inputEj+0xa8>)
    6cd2:	4a0a      	ldr	r2, [pc, #40]	; (6cfc <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
    6cd4:	f44f 7183 	mov.w	r1, #262	; 0x106
    6cd8:	4809      	ldr	r0, [pc, #36]	; (6d00 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
    6cda:	f005 fd33 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cde:	2000      	movs	r0, #0
    6ce0:	e7e2      	b.n	6ca8 <_ZN6tflite16MicroInterpreter5inputEj+0x58>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ce2:	2400      	movs	r4, #0
    6ce4:	e7e6      	b.n	6cb4 <_ZN6tflite16MicroInterpreter5inputEj+0x64>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6ce6:	4603      	mov	r3, r0
    6ce8:	4632      	mov	r2, r6
    6cea:	4906      	ldr	r1, [pc, #24]	; (6d04 <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
    6cec:	68a8      	ldr	r0, [r5, #8]
    6cee:	f008 fe8d 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6cf2:	2000      	movs	r0, #0
    6cf4:	e7e7      	b.n	6cc6 <_ZN6tflite16MicroInterpreter5inputEj+0x76>
    6cf6:	bf00      	nop
    6cf8:	0005563c 	.word	0x0005563c
    6cfc:	0005578c 	.word	0x0005578c
    6d00:	00055708 	.word	0x00055708
    6d04:	00056448 	.word	0x00056448

00006d08 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    6d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d0c:	b08b      	sub	sp, #44	; 0x2c
    6d0e:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    6d10:	2300      	movs	r3, #0
    6d12:	9305      	str	r3, [sp, #20]
    6d14:	f10b 006c 	add.w	r0, fp, #108	; 0x6c
    6d18:	f008 fabc 	bl	f294 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    6d1c:	9b05      	ldr	r3, [sp, #20]
    6d1e:	4298      	cmp	r0, r3
    6d20:	f340 81f6 	ble.w	7110 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x408>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    6d24:	f8db 5000 	ldr.w	r5, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
    6d28:	4628      	mov	r0, r5
    6d2a:	f006 ff5d 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d2e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d30:	4620      	mov	r0, r4
    6d32:	f006 ff5f 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d36:	2808      	cmp	r0, #8
    6d38:	d927      	bls.n	6d8a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x82>
    6d3a:	f104 0008 	add.w	r0, r4, #8
    6d3e:	f006 ff59 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d42:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d44:	b318      	cbz	r0, 6d8e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x86>
    6d46:	4620      	mov	r0, r4
    6d48:	f006 ff48 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d4c:	4404      	add	r4, r0
    6d4e:	9e05      	ldr	r6, [sp, #20]
    6d50:	9600      	str	r6, [sp, #0]
  uoffset_t size() const { return EndianScalar(length_); }
    6d52:	6820      	ldr	r0, [r4, #0]
    6d54:	f006 ff41 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d58:	4286      	cmp	r6, r0
    6d5a:	d21a      	bcs.n	6d92 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d5c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6d5e:	9b05      	ldr	r3, [sp, #20]
    6d60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6d64:	4620      	mov	r0, r4
    6d66:	f006 ff39 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    6d6a:	1823      	adds	r3, r4, r0
    6d6c:	9302      	str	r3, [sp, #8]
    6d6e:	d017      	beq.n	6da0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
    return data_ - ReadScalar<soffset_t>(data_);
    6d70:	4628      	mov	r0, r5
    6d72:	f006 ff39 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d76:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d78:	4620      	mov	r0, r4
    6d7a:	f006 ff3b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d7e:	2806      	cmp	r0, #6
    6d80:	d910      	bls.n	6da4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9c>
    6d82:	1da0      	adds	r0, r4, #6
    6d84:	f006 ff36 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6d88:	e00d      	b.n	6da6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9e>
    6d8a:	2000      	movs	r0, #0
    6d8c:	e7d9      	b.n	6d42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d8e:	2400      	movs	r4, #0
    6d90:	e7dd      	b.n	6d4e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x46>
    FLATBUFFERS_ASSERT(i < size());
    6d92:	4b4e      	ldr	r3, [pc, #312]	; (6ecc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    6d94:	4a4e      	ldr	r2, [pc, #312]	; (6ed0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c8>)
    6d96:	f44f 7183 	mov.w	r1, #262	; 0x106
    6d9a:	484e      	ldr	r0, [pc, #312]	; (6ed4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    6d9c:	f005 fcd2 	bl	c744 <__assert_func>
    6da0:	f009 f9e0 	bl	10164 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6da4:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6da6:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6da8:	b178      	cbz	r0, 6dca <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc2>
    6daa:	4628      	mov	r0, r5
    6dac:	f006 ff16 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6db0:	eb05 0900 	add.w	r9, r5, r0
        allocator_.GetBuiltinDataAllocator();
    6db4:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
    6db8:	f008 fc33 	bl	f622 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    6dbc:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    6dbe:	9802      	ldr	r0, [sp, #8]
    6dc0:	f008 f9d9 	bl	f176 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    6dc4:	9003      	str	r0, [sp, #12]
    for (size_t i = 0; i < operators_size; ++i) {
    6dc6:	2700      	movs	r7, #0
    6dc8:	e0dd      	b.n	6f86 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
    6dca:	f04f 0900 	mov.w	r9, #0
    6dce:	e7f1      	b.n	6db4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6dd0:	2000      	movs	r0, #0
    6dd2:	e0eb      	b.n	6fac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6dd4:	2400      	movs	r4, #0
    6dd6:	e0f2      	b.n	6fbe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b6>
    FLATBUFFERS_ASSERT(i < size());
    6dd8:	4b3c      	ldr	r3, [pc, #240]	; (6ecc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    6dda:	4a3f      	ldr	r2, [pc, #252]	; (6ed8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>)
    6ddc:	f44f 7183 	mov.w	r1, #262	; 0x106
    6de0:	483c      	ldr	r0, [pc, #240]	; (6ed4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    6de2:	f005 fcaf 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6de6:	2000      	movs	r0, #0
    6de8:	e103      	b.n	6ff2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ea>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6dea:	2600      	movs	r6, #0
    6dec:	e108      	b.n	7000 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    6dee:	4631      	mov	r1, r6
    6df0:	483a      	ldr	r0, [pc, #232]	; (6edc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
    6df2:	f008 f896 	bl	ef22 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    6df6:	2301      	movs	r3, #1
    6df8:	461c      	mov	r4, r3
}
    6dfa:	4620      	mov	r0, r4
    6dfc:	b00b      	add	sp, #44	; 0x2c
    6dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    6e02:	4b32      	ldr	r3, [pc, #200]	; (6ecc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    6e04:	4a36      	ldr	r2, [pc, #216]	; (6ee0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
    6e06:	f44f 7183 	mov.w	r1, #262	; 0x106
    6e0a:	4832      	ldr	r0, [pc, #200]	; (6ed4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    6e0c:	f005 fc9a 	bl	c744 <__assert_func>
    6e10:	4604      	mov	r4, r0
        MicroPrintf("Failed to get registration from op code %s\n ",
    6e12:	4650      	mov	r0, sl
    6e14:	f008 fe18 	bl	fa48 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    6e18:	2891      	cmp	r0, #145	; 0x91
    6e1a:	d806      	bhi.n	6e2a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
  return EnumNamesBuiltinOperator()[index];
    6e1c:	4b31      	ldr	r3, [pc, #196]	; (6ee4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    6e1e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    6e22:	4831      	ldr	r0, [pc, #196]	; (6ee8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e0>)
    6e24:	f008 f87d 	bl	ef22 <_Z11MicroPrintfPKcz>
        return status;
    6e28:	e7e7      	b.n	6dfa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6e2a:	4930      	ldr	r1, [pc, #192]	; (6eec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    6e2c:	e7f9      	b.n	6e22 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    6e2e:	4631      	mov	r1, r6
    6e30:	482f      	ldr	r0, [pc, #188]	; (6ef0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>)
    6e32:	f008 f876 	bl	ef22 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    6e36:	2301      	movs	r3, #1
    6e38:	461c      	mov	r4, r3
    6e3a:	e7de      	b.n	6dfa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    return data_ - ReadScalar<soffset_t>(data_);
    6e3c:	4620      	mov	r0, r4
    6e3e:	f006 fed3 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e42:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e44:	4630      	mov	r0, r6
    6e46:	f006 fed5 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e4a:	280e      	cmp	r0, #14
    6e4c:	d904      	bls.n	6e58 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x150>
    6e4e:	f106 000e 	add.w	r0, r6, #14
    6e52:	f006 fecf 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6e56:	e000      	b.n	6e5a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x152>
    6e58:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6e5a:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e5c:	b160      	cbz	r0, 6e78 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x170>
    6e5e:	4630      	mov	r0, r6
    6e60:	f006 febc 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e64:	4430      	add	r0, r6
        if (op->custom_options() != nullptr) {
    6e66:	b360      	cbz	r0, 6ec2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e68:	4603      	mov	r3, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6e6a:	f853 0b04 	ldr.w	r0, [r3], #4
    6e6e:	9301      	str	r3, [sp, #4]
    6e70:	f006 feb3 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6e74:	4682      	mov	sl, r0
    6e76:	e131      	b.n	70dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e78:	2000      	movs	r0, #0
    6e7a:	e7f4      	b.n	6e66 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e7c:	2000      	movs	r0, #0
    6e7e:	e10b      	b.n	7098 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x390>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e80:	2300      	movs	r3, #0
    6e82:	9301      	str	r3, [sp, #4]
    6e84:	e113      	b.n	70ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a6>
  return (v < low) || (high < v);
    6e86:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    6e8a:	d809      	bhi.n	6ea0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x198>
  const size_t index = static_cast<size_t>(e);
    6e8c:	b2f2      	uxtb	r2, r6
  return EnumNamesBuiltinOperator()[index];
    6e8e:	4b15      	ldr	r3, [pc, #84]	; (6ee4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    6e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
          MicroPrintf(
    6e94:	4817      	ldr	r0, [pc, #92]	; (6ef4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>)
    6e96:	f008 f844 	bl	ef22 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6e9a:	2301      	movs	r3, #1
    6e9c:	461c      	mov	r4, r3
    6e9e:	e7ac      	b.n	6dfa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6ea0:	4912      	ldr	r1, [pc, #72]	; (6eec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    6ea2:	e7f7      	b.n	6e94 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18c>
    6ea4:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    6ea8:	d804      	bhi.n	6eb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
  const size_t index = static_cast<size_t>(e);
    6eaa:	b2f3      	uxtb	r3, r6
  return EnumNamesBuiltinOperator()[index];
    6eac:	4a0d      	ldr	r2, [pc, #52]	; (6ee4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    6eae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6eb2:	e000      	b.n	6eb6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ae>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6eb4:	490d      	ldr	r1, [pc, #52]	; (6eec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
          MicroPrintf("Did not find a parser for %s",
    6eb6:	4810      	ldr	r0, [pc, #64]	; (6ef8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>)
    6eb8:	f008 f833 	bl	ef22 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6ebc:	2301      	movs	r3, #1
    6ebe:	461c      	mov	r4, r3
    6ec0:	e79b      	b.n	6dfa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
      const char* custom_data = nullptr;
    6ec2:	9001      	str	r0, [sp, #4]
      size_t custom_data_size = 0;
    6ec4:	f04f 0a00 	mov.w	sl, #0
    6ec8:	e108      	b.n	70dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    6eca:	bf00      	nop
    6ecc:	0005563c 	.word	0x0005563c
    6ed0:	0005578c 	.word	0x0005578c
    6ed4:	00055708 	.word	0x00055708
    6ed8:	00056474 	.word	0x00056474
    6edc:	0005656c 	.word	0x0005656c
    6ee0:	00056598 	.word	0x00056598
    6ee4:	00056198 	.word	0x00056198
    6ee8:	00056698 	.word	0x00056698
    6eec:	000113e0 	.word	0x000113e0
    6ef0:	000566c8 	.word	0x000566c8
    6ef4:	000566ec 	.word	0x000566ec
    6ef8:	00056734 	.word	0x00056734
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6efc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6efe:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f00:	2800      	cmp	r0, #0
    6f02:	f000 80fb 	beq.w	70fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f4>
    6f06:	4630      	mov	r0, r6
    6f08:	f006 fe68 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f0c:	1831      	adds	r1, r6, r0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    6f0e:	aa08      	add	r2, sp, #32
    6f10:	4640      	mov	r0, r8
    6f12:	f008 fb92 	bl	f63a <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    6f16:	2800      	cmp	r0, #0
    6f18:	f040 80ff 	bne.w	711a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x412>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    6f1c:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    6f20:	4620      	mov	r0, r4
    6f22:	f006 fe61 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f26:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f28:	4630      	mov	r0, r6
    6f2a:	f006 fe63 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f2e:	2808      	cmp	r0, #8
    6f30:	f240 80e6 	bls.w	7100 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f8>
    6f34:	f106 0008 	add.w	r0, r6, #8
    6f38:	f006 fe5c 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6f3c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f3e:	2800      	cmp	r0, #0
    6f40:	f000 80e0 	beq.w	7104 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3fc>
    6f44:	4620      	mov	r0, r4
    6f46:	f006 fe49 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f4a:	1821      	adds	r1, r4, r0
    6f4c:	aa09      	add	r2, sp, #36	; 0x24
    6f4e:	4640      	mov	r0, r8
    6f50:	f008 fb73 	bl	f63a <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    6f54:	2800      	cmp	r0, #0
    6f56:	f040 80e2 	bne.w	711e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x416>
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    6f5a:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    6f5e:	9a00      	ldr	r2, [sp, #0]
    6f60:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
    6f64:	1974      	adds	r4, r6, r5
      *node = {};
    6f66:	2228      	movs	r2, #40	; 0x28
    6f68:	2100      	movs	r1, #0
    6f6a:	4620      	mov	r0, r4
    6f6c:	f009 f920 	bl	101b0 <memset>
      node->inputs = inputs_array;
    6f70:	9b08      	ldr	r3, [sp, #32]
    6f72:	5173      	str	r3, [r6, r5]
      node->outputs = outputs_array;
    6f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6f76:	6063      	str	r3, [r4, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    6f78:	9b07      	ldr	r3, [sp, #28]
    6f7a:	6163      	str	r3, [r4, #20]
      node->custom_initial_data = custom_data;
    6f7c:	9b01      	ldr	r3, [sp, #4]
    6f7e:	61a3      	str	r3, [r4, #24]
      node->custom_initial_data_size = custom_data_size;
    6f80:	f8c4 a01c 	str.w	sl, [r4, #28]
    for (size_t i = 0; i < operators_size; ++i) {
    6f84:	3701      	adds	r7, #1
    6f86:	9b03      	ldr	r3, [sp, #12]
    6f88:	429f      	cmp	r7, r3
    6f8a:	f080 80bd 	bcs.w	7108 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x400>
    return data_ - ReadScalar<soffset_t>(data_);
    6f8e:	9c02      	ldr	r4, [sp, #8]
    6f90:	4620      	mov	r0, r4
    6f92:	f006 fe29 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f96:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f98:	4620      	mov	r0, r4
    6f9a:	f006 fe2b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f9e:	280a      	cmp	r0, #10
    6fa0:	f67f af16 	bls.w	6dd0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
    6fa4:	f104 000a 	add.w	r0, r4, #10
    6fa8:	f006 fe24 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6fac:	9b02      	ldr	r3, [sp, #8]
    6fae:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fb0:	2800      	cmp	r0, #0
    6fb2:	f43f af0f 	beq.w	6dd4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xcc>
    6fb6:	4620      	mov	r0, r4
    6fb8:	f006 fe10 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fbc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6fbe:	6820      	ldr	r0, [r4, #0]
    6fc0:	f006 fe0b 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6fc4:	4287      	cmp	r7, r0
    6fc6:	f4bf af07 	bcs.w	6dd8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6fca:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6fcc:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6fd0:	4620      	mov	r0, r4
    6fd2:	f006 fe03 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fd6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6fd8:	4620      	mov	r0, r4
    6fda:	f006 fe05 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6fde:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6fe0:	4628      	mov	r0, r5
    6fe2:	f006 fe07 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fe6:	2804      	cmp	r0, #4
    6fe8:	f67f aefd 	bls.w	6de6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xde>
    6fec:	1d28      	adds	r0, r5, #4
    6fee:	f006 fe01 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6ff2:	2800      	cmp	r0, #0
    6ff4:	f43f aef9 	beq.w	6dea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe2>
    6ff8:	4420      	add	r0, r4
    6ffa:	f006 fdef 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ffe:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7000:	f8d9 0000 	ldr.w	r0, [r9]
    7004:	f006 fde9 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (index >= opcodes->size()) {
    7008:	42b0      	cmp	r0, r6
    700a:	f67f aef0 	bls.w	6dee <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
    700e:	f8d9 0000 	ldr.w	r0, [r9]
    7012:	f006 fde2 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7016:	4286      	cmp	r6, r0
    7018:	f4bf aef3 	bcs.w	6e02 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xfa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    701c:	f109 0a04 	add.w	sl, r9, #4
    p += i * sizeof(uoffset_t);
    7020:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7024:	4650      	mov	r0, sl
    7026:	f006 fdd9 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    702a:	4482      	add	sl, r0
    702c:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                          .node_and_registrations[i]
    7030:	9a00      	ldr	r2, [sp, #0]
    7032:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    7036:	252c      	movs	r5, #44	; 0x2c
    7038:	fb05 f507 	mul.w	r5, r5, r7
    703c:	442b      	add	r3, r5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    703e:	3328      	adds	r3, #40	; 0x28
    7040:	f8db 2008 	ldr.w	r2, [fp, #8]
    7044:	f8db 1004 	ldr.w	r1, [fp, #4]
    7048:	4650      	mov	r0, sl
    704a:	f002 fa17 	bl	947c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    704e:	2800      	cmp	r0, #0
    7050:	f47f aede 	bne.w	6e10 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
    7054:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                     .node_and_registrations[i]
    7058:	9a00      	ldr	r2, [sp, #0]
    705a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    705e:	442b      	add	r3, r5
                                     .registration;
    7060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
    7062:	2b00      	cmp	r3, #0
    7064:	f43f aee3 	beq.w	6e2e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
          static_cast<BuiltinOperator>(registration->builtin_code);
    7068:	695e      	ldr	r6, [r3, #20]
      BuiltinOperator op_type =
    706a:	fa5f fa86 	uxtb.w	sl, r6
      unsigned char* builtin_data = nullptr;
    706e:	2300      	movs	r3, #0
    7070:	9307      	str	r3, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    7072:	f1ba 0f20 	cmp.w	sl, #32
    7076:	f43f aee1 	beq.w	6e3c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x134>
    return data_ - ReadScalar<soffset_t>(data_);
    707a:	4620      	mov	r0, r4
    707c:	f006 fdb4 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7080:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7084:	4640      	mov	r0, r8
    7086:	f006 fdb5 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    708a:	280e      	cmp	r0, #14
    708c:	f67f aef6 	bls.w	6e7c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
    7090:	f108 000e 	add.w	r0, r8, #14
    7094:	f006 fdae 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7098:	eb04 0800 	add.w	r8, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    709c:	2800      	cmp	r0, #0
    709e:	f43f aeef 	beq.w	6e80 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x178>
    70a2:	4640      	mov	r0, r8
    70a4:	f006 fd9a 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70a8:	eb08 0300 	add.w	r3, r8, r0
    70ac:	9301      	str	r3, [sp, #4]
        if (op->custom_options() != nullptr) {
    70ae:	9b01      	ldr	r3, [sp, #4]
    70b0:	2b00      	cmp	r3, #0
    70b2:	f47f aee8 	bne.w	6e86 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17e>
            op_resolver_.GetOpDataParser(op_type);
    70b6:	f8db 0004 	ldr.w	r0, [fp, #4]
    70ba:	6803      	ldr	r3, [r0, #0]
    70bc:	6a1b      	ldr	r3, [r3, #32]
    70be:	4651      	mov	r1, sl
    70c0:	4798      	blx	r3
        if (parser == nullptr) {
    70c2:	4680      	mov	r8, r0
    70c4:	2800      	cmp	r0, #0
    70c6:	f43f aeed 	beq.w	6ea4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    70ca:	ab07      	add	r3, sp, #28
    70cc:	9a04      	ldr	r2, [sp, #16]
    70ce:	f8db 1008 	ldr.w	r1, [fp, #8]
    70d2:	4620      	mov	r0, r4
    70d4:	47c0      	blx	r8
    70d6:	b9f0      	cbnz	r0, 7116 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x40e>
      size_t custom_data_size = 0;
    70d8:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    70dc:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    70e0:	4620      	mov	r0, r4
    70e2:	f006 fd81 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    70e6:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    70e8:	4630      	mov	r0, r6
    70ea:	f006 fd83 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70ee:	2806      	cmp	r0, #6
    70f0:	f67f af04 	bls.w	6efc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f4>
    70f4:	1db0      	adds	r0, r6, #6
    70f6:	f006 fd7d 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    70fa:	e700      	b.n	6efe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70fc:	2100      	movs	r1, #0
    70fe:	e706      	b.n	6f0e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7100:	2000      	movs	r0, #0
    7102:	e71b      	b.n	6f3c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7104:	2100      	movs	r1, #0
    7106:	e721      	b.n	6f4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x244>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    7108:	9b05      	ldr	r3, [sp, #20]
    710a:	3301      	adds	r3, #1
    710c:	9305      	str	r3, [sp, #20]
    710e:	e601      	b.n	6d14 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    7110:	2300      	movs	r3, #0
    7112:	461c      	mov	r4, r3
    7114:	e671      	b.n	6dfa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7116:	4604      	mov	r4, r0
    7118:	e66f      	b.n	6dfa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    711a:	4604      	mov	r4, r0
    711c:	e66d      	b.n	6dfa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    711e:	4604      	mov	r4, r0
    7120:	e66b      	b.n	6dfa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7122:	bf00      	nop

00007124 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    7124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7128:	b083      	sub	sp, #12
    712a:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    712c:	6801      	ldr	r1, [r0, #0]
    712e:	6e80      	ldr	r0, [r0, #104]	; 0x68
    7130:	f000 fe60 	bl	7df4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    7134:	b170      	cbz	r0, 7154 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30>
    7136:	4601      	mov	r1, r0
  graph_.SetSubgraphAllocations(allocations);
    7138:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    713c:	4630      	mov	r0, r6
    713e:	f008 f847 	bl	f1d0 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    7142:	4628      	mov	r0, r5
    7144:	f7ff fde0 	bl	6d08 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    7148:	4603      	mov	r3, r0
    714a:	b158      	cbz	r0, 7164 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
}
    714c:	4618      	mov	r0, r3
    714e:	b003      	add	sp, #12
    7150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    7154:	49bc      	ldr	r1, [pc, #752]	; (7448 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
    7156:	68a8      	ldr	r0, [r5, #8]
    7158:	f008 fc58 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    715c:	2301      	movs	r3, #1
    715e:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
    return kTfLiteError;
    7162:	e7f3      	b.n	714c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    7164:	4bb9      	ldr	r3, [pc, #740]	; (744c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x328>)
    7166:	646b      	str	r3, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    7168:	2400      	movs	r4, #0
    716a:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
    716c:	652c      	str	r4, [r5, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
    716e:	4bb8      	ldr	r3, [pc, #736]	; (7450 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x32c>)
    7170:	612b      	str	r3, [r5, #16]
  graph_.InitSubgraphs();
    7172:	4630      	mov	r0, r6
    7174:	f008 f82e 	bl	f1d4 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    7178:	4bb6      	ldr	r3, [pc, #728]	; (7454 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x330>)
    717a:	64eb      	str	r3, [r5, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    717c:	4630      	mov	r0, r6
    717e:	f7ff f9bd 	bl	64fc <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.AllocatePersistentBuffer = nullptr;
    7182:	646c      	str	r4, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    7184:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    7186:	4bb4      	ldr	r3, [pc, #720]	; (7458 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x334>)
    7188:	652b      	str	r3, [r5, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    718a:	462b      	mov	r3, r5
    718c:	f853 1b8c 	ldr.w	r1, [r3], #140
    7190:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    7192:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    7194:	f000 fb90 	bl	78b8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    7198:	4603      	mov	r3, r0
    719a:	2800      	cmp	r0, #0
    719c:	d1d6      	bne.n	714c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    719e:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
    71a0:	6833      	ldr	r3, [r6, #0]
    71a2:	68df      	ldr	r7, [r3, #12]
    71a4:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    71a6:	4620      	mov	r0, r4
    71a8:	f006 fd1e 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    71ac:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    71b0:	4640      	mov	r0, r8
    71b2:	f006 fd1f 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71b6:	2808      	cmp	r0, #8
    71b8:	d921      	bls.n	71fe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    71ba:	f108 0008 	add.w	r0, r8, #8
    71be:	f006 fd19 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    71c2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71c4:	b1e8      	cbz	r0, 7202 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    71c6:	4620      	mov	r0, r4
    71c8:	f006 fd08 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71cc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    71ce:	6820      	ldr	r0, [r4, #0]
    71d0:	f006 fd03 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    71d4:	b1b8      	cbz	r0, 7206 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    71d6:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    71d8:	4620      	mov	r0, r4
    71da:	f006 fcff 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71de:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    71e0:	4620      	mov	r0, r4
    71e2:	f006 fd01 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    71e6:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    71ea:	4640      	mov	r0, r8
    71ec:	f006 fd02 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71f0:	2806      	cmp	r0, #6
    71f2:	d90f      	bls.n	7214 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>
    71f4:	f108 0006 	add.w	r0, r8, #6
    71f8:	f006 fcfc 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    71fc:	e00b      	b.n	7216 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf2>
    71fe:	2000      	movs	r0, #0
    7200:	e7df      	b.n	71c2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7202:	2400      	movs	r4, #0
    7204:	e7e3      	b.n	71ce <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xaa>
    FLATBUFFERS_ASSERT(i < size());
    7206:	4b95      	ldr	r3, [pc, #596]	; (745c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7208:	4a95      	ldr	r2, [pc, #596]	; (7460 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    720a:	f44f 7183 	mov.w	r1, #262	; 0x106
    720e:	4895      	ldr	r0, [pc, #596]	; (7464 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7210:	f005 fa98 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7214:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7216:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7218:	b178      	cbz	r0, 723a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
    721a:	4620      	mov	r0, r4
    721c:	f006 fcde 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7220:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7222:	6820      	ldr	r0, [r4, #0]
    7224:	f006 fcd9 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7228:	0081      	lsls	r1, r0, #2
    722a:	4630      	mov	r0, r6
    722c:	47b8      	blx	r7
    722e:	4604      	mov	r4, r0
  input_tensors_ =
    7230:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    7234:	b118      	cbz	r0, 723e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
  for (size_t i = 0; i < inputs_size(); ++i) {
    7236:	2600      	movs	r6, #0
    7238:	e09c      	b.n	7374 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    723a:	2400      	movs	r4, #0
    723c:	e7f1      	b.n	7222 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    TF_LITE_REPORT_ERROR(
    723e:	68ae      	ldr	r6, [r5, #8]
    7240:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7242:	4628      	mov	r0, r5
    7244:	f006 fcd0 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7248:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    724a:	4638      	mov	r0, r7
    724c:	f006 fcd2 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7250:	2808      	cmp	r0, #8
    7252:	d91f      	bls.n	7294 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x170>
    7254:	f107 0008 	add.w	r0, r7, #8
    7258:	f006 fccc 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    725c:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    725e:	b1d8      	cbz	r0, 7298 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x174>
    7260:	4628      	mov	r0, r5
    7262:	f006 fcbb 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7266:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7268:	6828      	ldr	r0, [r5, #0]
    726a:	f006 fcb6 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    726e:	b1a8      	cbz	r0, 729c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7270:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7272:	4628      	mov	r0, r5
    7274:	f006 fcb2 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7278:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    727a:	4628      	mov	r0, r5
    727c:	f006 fcb4 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7280:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7282:	4638      	mov	r0, r7
    7284:	f006 fcb6 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7288:	2806      	cmp	r0, #6
    728a:	d90e      	bls.n	72aa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x186>
    728c:	1db8      	adds	r0, r7, #6
    728e:	f006 fcb1 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7292:	e00b      	b.n	72ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>
    7294:	2000      	movs	r0, #0
    7296:	e7e1      	b.n	725c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7298:	4625      	mov	r5, r4
    729a:	e7e5      	b.n	7268 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
    FLATBUFFERS_ASSERT(i < size());
    729c:	4b6f      	ldr	r3, [pc, #444]	; (745c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    729e:	4a70      	ldr	r2, [pc, #448]	; (7460 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    72a0:	f44f 7183 	mov.w	r1, #262	; 0x106
    72a4:	486f      	ldr	r0, [pc, #444]	; (7464 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    72a6:	f005 fa4d 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72aa:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    72ac:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72ae:	b118      	cbz	r0, 72b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>
    72b0:	4628      	mov	r0, r5
    72b2:	f006 fc93 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    72b6:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    72b8:	6820      	ldr	r0, [r4, #0]
    72ba:	f006 fc8e 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    72be:	0082      	lsls	r2, r0, #2
    72c0:	4969      	ldr	r1, [pc, #420]	; (7468 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x344>)
    72c2:	4630      	mov	r0, r6
    72c4:	f008 fba2 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    72c8:	2301      	movs	r3, #1
    72ca:	e73f      	b.n	714c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72cc:	2000      	movs	r0, #0
    72ce:	e05f      	b.n	7390 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72d0:	2400      	movs	r4, #0
    72d2:	e064      	b.n	739e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27a>
    FLATBUFFERS_ASSERT(i < size());
    72d4:	4b61      	ldr	r3, [pc, #388]	; (745c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    72d6:	4a62      	ldr	r2, [pc, #392]	; (7460 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    72d8:	f44f 7183 	mov.w	r1, #262	; 0x106
    72dc:	4861      	ldr	r0, [pc, #388]	; (7464 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    72de:	f005 fa31 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72e2:	2000      	movs	r0, #0
    72e4:	e071      	b.n	73ca <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72e6:	2400      	movs	r4, #0
    72e8:	e076      	b.n	73d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72ea:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    72ec:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72ee:	2800      	cmp	r0, #0
    72f0:	f000 808f 	beq.w	7412 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ee>
    72f4:	4620      	mov	r0, r4
    72f6:	f006 fc71 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    72fa:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    72fc:	6820      	ldr	r0, [r4, #0]
    72fe:	f006 fc6c 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7302:	2800      	cmp	r0, #0
    7304:	f000 8087 	beq.w	7416 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7308:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    730a:	4620      	mov	r0, r4
    730c:	f006 fc66 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7310:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7312:	4620      	mov	r0, r4
    7314:	f006 fc68 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7318:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    731c:	4658      	mov	r0, fp
    731e:	f006 fc69 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7322:	2806      	cmp	r0, #6
    7324:	d97e      	bls.n	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    7326:	f10b 0006 	add.w	r0, fp, #6
    732a:	f006 fc63 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    732e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7330:	2800      	cmp	r0, #0
    7332:	d079      	beq.n	7428 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x304>
    7334:	4620      	mov	r0, r4
    7336:	f006 fc51 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    733a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    733c:	6820      	ldr	r0, [r4, #0]
    733e:	f006 fc4c 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7342:	4286      	cmp	r6, r0
    7344:	d272      	bcs.n	742c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7346:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7348:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    734c:	f006 fc4b 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7350:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7352:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
    7356:	2200      	movs	r2, #0
    7358:	9200      	str	r2, [sp, #0]
    735a:	4652      	mov	r2, sl
    735c:	4639      	mov	r1, r7
    735e:	4640      	mov	r0, r8
    7360:	47c8      	blx	r9
    7362:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (input_tensors_[i] == nullptr) {
    7366:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    736a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    736e:	2b00      	cmp	r3, #0
    7370:	d063      	beq.n	743a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x316>
  for (size_t i = 0; i < inputs_size(); ++i) {
    7372:	3601      	adds	r6, #1
    7374:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7376:	4620      	mov	r0, r4
    7378:	f006 fc36 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    737c:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    737e:	4638      	mov	r0, r7
    7380:	f006 fc38 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7384:	2808      	cmp	r0, #8
    7386:	d9a1      	bls.n	72cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    7388:	f107 0008 	add.w	r0, r7, #8
    738c:	f006 fc32 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7390:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7392:	2800      	cmp	r0, #0
    7394:	d09c      	beq.n	72d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
    7396:	4620      	mov	r0, r4
    7398:	f006 fc20 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    739c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    739e:	6820      	ldr	r0, [r4, #0]
    73a0:	f006 fc1b 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    73a4:	2800      	cmp	r0, #0
    73a6:	d095      	beq.n	72d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    73a8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    73aa:	4620      	mov	r0, r4
    73ac:	f006 fc16 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    73b0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    73b2:	4620      	mov	r0, r4
    73b4:	f006 fc18 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    73b8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    73ba:	4638      	mov	r0, r7
    73bc:	f006 fc1a 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73c0:	2806      	cmp	r0, #6
    73c2:	d98e      	bls.n	72e2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
    73c4:	1db8      	adds	r0, r7, #6
    73c6:	f006 fc15 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    73ca:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73cc:	2800      	cmp	r0, #0
    73ce:	d08a      	beq.n	72e6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    73d0:	4620      	mov	r0, r4
    73d2:	f006 fc03 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    73d6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    73d8:	6820      	ldr	r0, [r4, #0]
    73da:	f006 fbfe 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    73de:	4286      	cmp	r6, r0
    73e0:	d248      	bcs.n	7474 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    73e2:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    73e6:	f8d8 3000 	ldr.w	r3, [r8]
    73ea:	f8d3 9000 	ldr.w	r9, [r3]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    73ee:	682f      	ldr	r7, [r5, #0]
    73f0:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    73f4:	4638      	mov	r0, r7
    73f6:	f006 fbf7 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    73fa:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    73fc:	4620      	mov	r0, r4
    73fe:	f006 fbf9 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7402:	2808      	cmp	r0, #8
    7404:	f67f af71 	bls.w	72ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c6>
    7408:	f104 0008 	add.w	r0, r4, #8
    740c:	f006 fbf2 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7410:	e76c      	b.n	72ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7412:	2400      	movs	r4, #0
    7414:	e772      	b.n	72fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    FLATBUFFERS_ASSERT(i < size());
    7416:	4b11      	ldr	r3, [pc, #68]	; (745c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7418:	4a11      	ldr	r2, [pc, #68]	; (7460 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    741a:	f44f 7183 	mov.w	r1, #262	; 0x106
    741e:	4811      	ldr	r0, [pc, #68]	; (7464 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7420:	f005 f990 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7424:	2000      	movs	r0, #0
    7426:	e782      	b.n	732e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7428:	2400      	movs	r4, #0
    742a:	e787      	b.n	733c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
    FLATBUFFERS_ASSERT(i < size());
    742c:	4b0b      	ldr	r3, [pc, #44]	; (745c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    742e:	4a0f      	ldr	r2, [pc, #60]	; (746c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x348>)
    7430:	f44f 7183 	mov.w	r1, #262	; 0x106
    7434:	480b      	ldr	r0, [pc, #44]	; (7464 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7436:	f005 f985 	bl	c744 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    743a:	4632      	mov	r2, r6
    743c:	490c      	ldr	r1, [pc, #48]	; (7470 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>)
    743e:	68a8      	ldr	r0, [r5, #8]
    7440:	f008 fae4 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7444:	2301      	movs	r3, #1
    7446:	e681      	b.n	714c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7448:	00056754 	.word	0x00056754
    744c:	0000f2cf 	.word	0x0000f2cf
    7450:	0000f31f 	.word	0x0000f31f
    7454:	0000f329 	.word	0x0000f329
    7458:	0000f2dd 	.word	0x0000f2dd
    745c:	0005563c 	.word	0x0005563c
    7460:	0005578c 	.word	0x0005578c
    7464:	00055708 	.word	0x00055708
    7468:	00056778 	.word	0x00056778
    746c:	00055648 	.word	0x00055648
    7470:	000567c4 	.word	0x000567c4
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7474:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
    7476:	6833      	ldr	r3, [r6, #0]
    7478:	68df      	ldr	r7, [r3, #12]
    return model_->subgraphs()->Get(0)->outputs()->size();
    747a:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    747c:	4620      	mov	r0, r4
    747e:	f006 fbb3 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7482:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7486:	4640      	mov	r0, r8
    7488:	f006 fbb4 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    748c:	2808      	cmp	r0, #8
    748e:	d904      	bls.n	749a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x376>
    7490:	f108 0008 	add.w	r0, r8, #8
    7494:	f006 fbae 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7498:	e000      	b.n	749c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x378>
    749a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    749c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    749e:	b360      	cbz	r0, 74fa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d6>
    74a0:	4620      	mov	r0, r4
    74a2:	f006 fb9b 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74a6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    74a8:	6820      	ldr	r0, [r4, #0]
    74aa:	f006 fb96 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    74ae:	b330      	cbz	r0, 74fe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3da>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    74b0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    74b2:	4620      	mov	r0, r4
    74b4:	f006 fb92 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74b8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    74ba:	4620      	mov	r0, r4
    74bc:	f006 fb94 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    74c0:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    74c4:	4640      	mov	r0, r8
    74c6:	f006 fb95 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74ca:	2808      	cmp	r0, #8
    74cc:	d91e      	bls.n	750c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e8>
    74ce:	f108 0008 	add.w	r0, r8, #8
    74d2:	f006 fb8f 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    74d6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74d8:	b1d0      	cbz	r0, 7510 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3ec>
    74da:	4620      	mov	r0, r4
    74dc:	f006 fb7e 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74e0:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    74e2:	6820      	ldr	r0, [r4, #0]
    74e4:	f006 fb79 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    74e8:	0081      	lsls	r1, r0, #2
    74ea:	4630      	mov	r0, r6
    74ec:	47b8      	blx	r7
    74ee:	4604      	mov	r4, r0
  output_tensors_ =
    74f0:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    74f4:	b170      	cbz	r0, 7514 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f0>
  for (size_t i = 0; i < outputs_size(); ++i) {
    74f6:	2600      	movs	r6, #0
    74f8:	e0c6      	b.n	7688 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x564>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74fa:	2400      	movs	r4, #0
    74fc:	e7d4      	b.n	74a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x384>
    FLATBUFFERS_ASSERT(i < size());
    74fe:	4b8f      	ldr	r3, [pc, #572]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7500:	4a8f      	ldr	r2, [pc, #572]	; (7740 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7502:	f44f 7183 	mov.w	r1, #262	; 0x106
    7506:	488f      	ldr	r0, [pc, #572]	; (7744 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7508:	f005 f91c 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    750c:	2000      	movs	r0, #0
    750e:	e7e2      	b.n	74d6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3b2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7510:	2400      	movs	r4, #0
    7512:	e7e6      	b.n	74e2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3be>
    TF_LITE_REPORT_ERROR(
    7514:	68ae      	ldr	r6, [r5, #8]
    7516:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7518:	4628      	mov	r0, r5
    751a:	f006 fb65 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    751e:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7520:	4638      	mov	r0, r7
    7522:	f006 fb67 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7526:	2808      	cmp	r0, #8
    7528:	d920      	bls.n	756c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x448>
    752a:	f107 0008 	add.w	r0, r7, #8
    752e:	f006 fb61 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7532:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7534:	b1e0      	cbz	r0, 7570 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x44c>
    7536:	4628      	mov	r0, r5
    7538:	f006 fb50 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    753c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    753e:	6828      	ldr	r0, [r5, #0]
    7540:	f006 fb4b 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7544:	b1b0      	cbz	r0, 7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x450>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7546:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7548:	4628      	mov	r0, r5
    754a:	f006 fb47 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    754e:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7550:	4628      	mov	r0, r5
    7552:	f006 fb49 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7556:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7558:	4638      	mov	r0, r7
    755a:	f006 fb4b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    755e:	2808      	cmp	r0, #8
    7560:	d90f      	bls.n	7582 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x45e>
    7562:	f107 0008 	add.w	r0, r7, #8
    7566:	f006 fb45 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    756a:	e00b      	b.n	7584 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x460>
    756c:	2000      	movs	r0, #0
    756e:	e7e0      	b.n	7532 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7570:	4625      	mov	r5, r4
    7572:	e7e4      	b.n	753e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x41a>
    FLATBUFFERS_ASSERT(i < size());
    7574:	4b71      	ldr	r3, [pc, #452]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7576:	4a72      	ldr	r2, [pc, #456]	; (7740 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7578:	f44f 7183 	mov.w	r1, #262	; 0x106
    757c:	4871      	ldr	r0, [pc, #452]	; (7744 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    757e:	f005 f8e1 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7582:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7584:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7586:	b118      	cbz	r0, 7590 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x46c>
    7588:	4628      	mov	r0, r5
    758a:	f006 fb27 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    758e:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7590:	6820      	ldr	r0, [r4, #0]
    7592:	f006 fb22 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7596:	0082      	lsls	r2, r0, #2
    7598:	496b      	ldr	r1, [pc, #428]	; (7748 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x624>)
    759a:	4630      	mov	r0, r6
    759c:	f008 fa36 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    75a0:	2301      	movs	r3, #1
    75a2:	e5d3      	b.n	714c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75a4:	2000      	movs	r0, #0
    75a6:	e07d      	b.n	76a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x580>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75a8:	2400      	movs	r4, #0
    75aa:	e083      	b.n	76b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x590>
    FLATBUFFERS_ASSERT(i < size());
    75ac:	4b63      	ldr	r3, [pc, #396]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    75ae:	4a64      	ldr	r2, [pc, #400]	; (7740 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    75b0:	f44f 7183 	mov.w	r1, #262	; 0x106
    75b4:	4863      	ldr	r0, [pc, #396]	; (7744 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    75b6:	f005 f8c5 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75ba:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    75bc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75be:	2800      	cmp	r0, #0
    75c0:	f000 8092 	beq.w	76e8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c4>
    75c4:	4620      	mov	r0, r4
    75c6:	f006 fb09 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75ca:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    75cc:	6820      	ldr	r0, [r4, #0]
    75ce:	f006 fb04 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t i = 0; i < outputs_size(); ++i) {
    75d2:	4286      	cmp	r6, r0
    75d4:	f080 80a7 	bcs.w	7726 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x602>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    75d8:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    75dc:	f8d8 3000 	ldr.w	r3, [r8]
    75e0:	f8d3 9000 	ldr.w	r9, [r3]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    75e4:	682f      	ldr	r7, [r5, #0]
    75e6:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    75ea:	4638      	mov	r0, r7
    75ec:	f006 fafc 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75f0:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75f2:	4620      	mov	r0, r4
    75f4:	f006 fafe 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75f8:	2808      	cmp	r0, #8
    75fa:	d977      	bls.n	76ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c8>
    75fc:	f104 0008 	add.w	r0, r4, #8
    7600:	f006 faf8 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7604:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7606:	2800      	cmp	r0, #0
    7608:	d072      	beq.n	76f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5cc>
    760a:	4620      	mov	r0, r4
    760c:	f006 fae6 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7610:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7612:	6820      	ldr	r0, [r4, #0]
    7614:	f006 fae1 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7618:	2800      	cmp	r0, #0
    761a:	d06b      	beq.n	76f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5d0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    761c:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    761e:	4620      	mov	r0, r4
    7620:	f006 fadc 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7624:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7626:	4620      	mov	r0, r4
    7628:	f006 fade 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    762c:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7630:	4658      	mov	r0, fp
    7632:	f006 fadf 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7636:	2808      	cmp	r0, #8
    7638:	d963      	bls.n	7702 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5de>
    763a:	f10b 0008 	add.w	r0, fp, #8
    763e:	f006 fad9 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7642:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7644:	2800      	cmp	r0, #0
    7646:	d05e      	beq.n	7706 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e2>
    7648:	4620      	mov	r0, r4
    764a:	f006 fac7 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    764e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7650:	6820      	ldr	r0, [r4, #0]
    7652:	f006 fac2 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7656:	4286      	cmp	r6, r0
    7658:	d257      	bcs.n	770a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    765a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    765c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7660:	f006 fac1 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7664:	4603      	mov	r3, r0
    7666:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
    766a:	2200      	movs	r2, #0
    766c:	9200      	str	r2, [sp, #0]
    766e:	4652      	mov	r2, sl
    7670:	4639      	mov	r1, r7
    7672:	4640      	mov	r0, r8
    7674:	47c8      	blx	r9
    7676:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (output_tensors_[i] == nullptr) {
    767a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    767e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7682:	2b00      	cmp	r3, #0
    7684:	d048      	beq.n	7718 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5f4>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7686:	3601      	adds	r6, #1
    7688:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    768a:	4620      	mov	r0, r4
    768c:	f006 faac 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7690:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7692:	4638      	mov	r0, r7
    7694:	f006 faae 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7698:	2808      	cmp	r0, #8
    769a:	d983      	bls.n	75a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x480>
    769c:	f107 0008 	add.w	r0, r7, #8
    76a0:	f006 faa8 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    76a4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76a6:	2800      	cmp	r0, #0
    76a8:	f43f af7e 	beq.w	75a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x484>
    76ac:	4620      	mov	r0, r4
    76ae:	f006 fa95 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    76b2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    76b4:	6820      	ldr	r0, [r4, #0]
    76b6:	f006 fa90 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    76ba:	2800      	cmp	r0, #0
    76bc:	f43f af76 	beq.w	75ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x488>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    76c0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    76c2:	4620      	mov	r0, r4
    76c4:	f006 fa8a 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    76c8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    76ca:	4620      	mov	r0, r4
    76cc:	f006 fa8c 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76d0:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76d2:	4638      	mov	r0, r7
    76d4:	f006 fa8e 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76d8:	2808      	cmp	r0, #8
    76da:	f67f af6e 	bls.w	75ba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x496>
    76de:	f107 0008 	add.w	r0, r7, #8
    76e2:	f006 fa87 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    76e6:	e769      	b.n	75bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x498>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76e8:	2400      	movs	r4, #0
    76ea:	e76f      	b.n	75cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76ec:	2000      	movs	r0, #0
    76ee:	e789      	b.n	7604 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4e0>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76f0:	2400      	movs	r4, #0
    76f2:	e78e      	b.n	7612 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4ee>
    FLATBUFFERS_ASSERT(i < size());
    76f4:	4b11      	ldr	r3, [pc, #68]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    76f6:	4a12      	ldr	r2, [pc, #72]	; (7740 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    76f8:	f44f 7183 	mov.w	r1, #262	; 0x106
    76fc:	4811      	ldr	r0, [pc, #68]	; (7744 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    76fe:	f005 f821 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7702:	2000      	movs	r0, #0
    7704:	e79d      	b.n	7642 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x51e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7706:	2400      	movs	r4, #0
    7708:	e7a2      	b.n	7650 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x52c>
    FLATBUFFERS_ASSERT(i < size());
    770a:	4b0c      	ldr	r3, [pc, #48]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    770c:	4a0f      	ldr	r2, [pc, #60]	; (774c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x628>)
    770e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7712:	480c      	ldr	r0, [pc, #48]	; (7744 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7714:	f005 f816 	bl	c744 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7718:	4632      	mov	r2, r6
    771a:	490d      	ldr	r1, [pc, #52]	; (7750 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62c>)
    771c:	68a8      	ldr	r0, [r5, #8]
    771e:	f008 f975 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7722:	2301      	movs	r3, #1
    7724:	e512      	b.n	714c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    7726:	4628      	mov	r0, r5
    7728:	f007 fe57 	bl	f3da <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
    772c:	4603      	mov	r3, r0
    772e:	2800      	cmp	r0, #0
    7730:	f47f ad0c 	bne.w	714c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    7734:	2201      	movs	r2, #1
    7736:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
  return kTfLiteOk;
    773a:	e507      	b.n	714c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    773c:	0005563c 	.word	0x0005563c
    7740:	0005578c 	.word	0x0005578c
    7744:	00055708 	.word	0x00055708
    7748:	000567ec 	.word	0x000567ec
    774c:	00055648 	.word	0x00055648
    7750:	00056838 	.word	0x00056838

00007754 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    7754:	b510      	push	{r4, lr}
    7756:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    7758:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    775c:	b95b      	cbnz	r3, 7776 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
  if (!tensors_allocated_) {
    775e:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    7762:	b913      	cbnz	r3, 776a <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    7764:	f7ff fcde 	bl	7124 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    7768:	b920      	cbnz	r0, 7774 <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
  return graph_.InvokeSubgraph(0);
    776a:	2100      	movs	r1, #0
    776c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    7770:	f7fe ff04 	bl	657c <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
}
    7774:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    7776:	4903      	ldr	r1, [pc, #12]	; (7784 <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
    7778:	6880      	ldr	r0, [r0, #8]
    777a:	f008 f947 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    777e:	2001      	movs	r0, #1
    7780:	e7f8      	b.n	7774 <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    7782:	bf00      	nop
    7784:	00056860 	.word	0x00056860

00007788 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
  return kTfLiteOk;
}

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
    7788:	b410      	push	{r4}
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
    778a:	4c05      	ldr	r4, [pc, #20]	; (77a0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x18>)
    778c:	6004      	str	r4, [r0, #0]
    778e:	6041      	str	r1, [r0, #4]
    7790:	60c2      	str	r2, [r0, #12]
    7792:	2200      	movs	r2, #0
    7794:	7402      	strb	r2, [r0, #16]
    7796:	6142      	str	r2, [r0, #20]
    7798:	6182      	str	r2, [r0, #24]
    779a:	bc10      	pop	{r4}
    779c:	4770      	bx	lr
    779e:	bf00      	nop
    77a0:	00056fac 	.word	0x00056fac

000077a4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    77a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77a6:	4605      	mov	r5, r0
    77a8:	460f      	mov	r7, r1
    77aa:	461e      	mov	r6, r3
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    77ac:	f007 ff12 	bl	f5d4 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    77b0:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    77b2:	4613      	mov	r3, r2
    77b4:	e000      	b.n	77b8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x14>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    77b6:	3201      	adds	r2, #1
    77b8:	696c      	ldr	r4, [r5, #20]
    77ba:	4294      	cmp	r4, r2
    77bc:	d907      	bls.n	77ce <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2a>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    77be:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    77c2:	6864      	ldr	r4, [r4, #4]
    77c4:	f1b4 3fff 	cmp.w	r4, #4294967295
    77c8:	d1f5      	bne.n	77b6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
      ++current_node_request_count;
    77ca:	3301      	adds	r3, #1
    77cc:	e7f3      	b.n	77b6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    77ce:	2b0b      	cmp	r3, #11
    77d0:	d80d      	bhi.n	77ee <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4a>
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
    77d2:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
      &requests[scratch_buffer_request_count_];
  *current_request = {};
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
    77d6:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    77da:	f04f 32ff 	mov.w	r2, #4294967295
    77de:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
    77e0:	696b      	ldr	r3, [r5, #20]
    77e2:	6033      	str	r3, [r6, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
    77e4:	696b      	ldr	r3, [r5, #20]
    77e6:	3301      	adds	r3, #1
    77e8:	616b      	str	r3, [r5, #20]
  return kTfLiteOk;
    77ea:	2000      	movs	r0, #0
}
    77ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
    77ee:	220c      	movs	r2, #12
    77f0:	4902      	ldr	r1, [pc, #8]	; (77fc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>)
    77f2:	68e8      	ldr	r0, [r5, #12]
    77f4:	f008 f90a 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    77f8:	2001      	movs	r0, #1
    77fa:	e7f7      	b.n	77ec <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>
    77fc:	00056890 	.word	0x00056890

00007800 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    7800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7804:	b122      	cbz	r2, 7810 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    7806:	4607      	mov	r7, r0
    7808:	460e      	mov	r6, r1
    780a:	4690      	mov	r8, r2

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    780c:	2500      	movs	r5, #0
    780e:	e029      	b.n	7864 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x64>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7810:	f008 fca8 	bl	10164 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7814:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7816:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7818:	b390      	cbz	r0, 7880 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x80>
    781a:	4620      	mov	r0, r4
    781c:	f006 f9de 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7820:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7822:	6820      	ldr	r0, [r4, #0]
    7824:	f006 f9d9 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7828:	4285      	cmp	r5, r0
    782a:	d23a      	bcs.n	78a2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    782c:	6820      	ldr	r0, [r4, #0]
    782e:	f006 f9d4 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7832:	4285      	cmp	r5, r0
    7834:	d226      	bcs.n	7884 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7836:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7838:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    783c:	4620      	mov	r0, r4
    783e:	f006 f9cd 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    TFLITE_DCHECK(subgraph != nullptr);
    7842:	1820      	adds	r0, r4, r0
    7844:	d025      	beq.n	7892 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7846:	f007 fc96 	bl	f176 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
    784a:	687b      	ldr	r3, [r7, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
    784c:	681a      	ldr	r2, [r3, #0]
    784e:	68d4      	ldr	r4, [r2, #12]
        memory_allocator_->AllocateFromTail(
    7850:	2204      	movs	r2, #4
    7852:	212c      	movs	r1, #44	; 0x2c
    7854:	fb01 f100 	mul.w	r1, r1, r0
    7858:	4618      	mov	r0, r3
    785a:	47a0      	blx	r4
    if (output == nullptr) {
    785c:	b1d8      	cbz	r0, 7896 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
      TF_LITE_REPORT_ERROR(
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    785e:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7862:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7864:	4630      	mov	r0, r6
    7866:	f006 f9bf 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    786a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    786c:	4620      	mov	r0, r4
    786e:	f006 f9c1 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7872:	2808      	cmp	r0, #8
    7874:	d9ce      	bls.n	7814 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    7876:	f104 0008 	add.w	r0, r4, #8
    787a:	f006 f9bb 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    787e:	e7ca      	b.n	7816 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7880:	2400      	movs	r4, #0
    7882:	e7ce      	b.n	7822 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x22>
    FLATBUFFERS_ASSERT(i < size());
    7884:	4b08      	ldr	r3, [pc, #32]	; (78a8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
    7886:	4a09      	ldr	r2, [pc, #36]	; (78ac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    7888:	f44f 7183 	mov.w	r1, #262	; 0x106
    788c:	4808      	ldr	r0, [pc, #32]	; (78b0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
    788e:	f004 ff59 	bl	c744 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7892:	f008 fc67 	bl	10164 <abort>
      TF_LITE_REPORT_ERROR(
    7896:	4907      	ldr	r1, [pc, #28]	; (78b4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
    7898:	68f8      	ldr	r0, [r7, #12]
    789a:	f008 f8b7 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    789e:	2001      	movs	r0, #1
    78a0:	e000      	b.n	78a4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
  }
  return kTfLiteOk;
    78a2:	2000      	movs	r0, #0
}
    78a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78a8:	0005563c 	.word	0x0005563c
    78ac:	0005578c 	.word	0x0005578c
    78b0:	00055708 	.word	0x00055708
    78b4:	000568c8 	.word	0x000568c8

000078b8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    78b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78bc:	b083      	sub	sp, #12
    78be:	4605      	mov	r5, r0
    78c0:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    78c2:	7c03      	ldrb	r3, [r0, #16]
    78c4:	b11b      	cbz	r3, 78ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x16>
    78c6:	460f      	mov	r7, r1
    78c8:	4691      	mov	r9, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    78ca:	2600      	movs	r6, #0
    78cc:	e043      	b.n	7956 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    78ce:	4930      	ldr	r1, [pc, #192]	; (7990 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xd8>)
    78d0:	68c0      	ldr	r0, [r0, #12]
    78d2:	f008 f89b 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    78d6:	2301      	movs	r3, #1
    78d8:	e055      	b.n	7986 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78da:	f104 0008 	add.w	r0, r4, #8
    78de:	f006 f989 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    78e2:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78e4:	2800      	cmp	r0, #0
    78e6:	d041      	beq.n	796c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    78e8:	4620      	mov	r0, r4
    78ea:	f006 f977 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78ee:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78f0:	6820      	ldr	r0, [r4, #0]
    78f2:	f006 f972 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    78f6:	4286      	cmp	r6, r0
    78f8:	d243      	bcs.n	7982 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xca>
    78fa:	6820      	ldr	r0, [r4, #0]
    78fc:	f006 f96d 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7900:	4286      	cmp	r6, r0
    7902:	d235      	bcs.n	7970 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7904:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7906:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    790a:	4620      	mov	r0, r4
    790c:	f006 f966 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7910:	1824      	adds	r4, r4, r0
    7912:	d034      	beq.n	797e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xc6>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    7914:	682b      	ldr	r3, [r5, #0]
    7916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7918:	696a      	ldr	r2, [r5, #20]
    791a:	4641      	mov	r1, r8
    791c:	4628      	mov	r0, r5
    791e:	4798      	blx	r3
    7920:	4603      	mov	r3, r0
    7922:	bb80      	cbnz	r0, 7986 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    7924:	682b      	ldr	r3, [r5, #0]
    7926:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    792a:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    792e:	9600      	str	r6, [sp, #0]
    7930:	f8d8 3000 	ldr.w	r3, [r8]
    7934:	f8da 2004 	ldr.w	r2, [sl, #4]
    7938:	4639      	mov	r1, r7
    793a:	4628      	mov	r0, r5
    793c:	47d8      	blx	fp
    793e:	4603      	mov	r3, r0
    7940:	bb08      	cbnz	r0, 7986 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    7942:	682b      	ldr	r3, [r5, #0]
    7944:	6a1b      	ldr	r3, [r3, #32]
    7946:	f8da 2004 	ldr.w	r2, [sl, #4]
    794a:	4621      	mov	r1, r4
    794c:	4628      	mov	r0, r5
    794e:	4798      	blx	r3
    7950:	4603      	mov	r3, r0
    7952:	b9c0      	cbnz	r0, 7986 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7954:	3601      	adds	r6, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7956:	4638      	mov	r0, r7
    7958:	f006 f946 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    795c:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    795e:	4620      	mov	r0, r4
    7960:	f006 f948 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7964:	2808      	cmp	r0, #8
    7966:	d8b8      	bhi.n	78da <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x22>
    7968:	2000      	movs	r0, #0
    796a:	e7ba      	b.n	78e2 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    796c:	2400      	movs	r4, #0
    796e:	e7bf      	b.n	78f0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x38>
    FLATBUFFERS_ASSERT(i < size());
    7970:	4b08      	ldr	r3, [pc, #32]	; (7994 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xdc>)
    7972:	4a09      	ldr	r2, [pc, #36]	; (7998 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe0>)
    7974:	f44f 7183 	mov.w	r1, #262	; 0x106
    7978:	4808      	ldr	r0, [pc, #32]	; (799c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe4>)
    797a:	f004 fee3 	bl	c744 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    797e:	f008 fbf1 	bl	10164 <abort>
  model_is_allocating_ = false;
    7982:	2300      	movs	r3, #0
    7984:	742b      	strb	r3, [r5, #16]
}
    7986:	4618      	mov	r0, r3
    7988:	b003      	add	sp, #12
    798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    798e:	bf00      	nop
    7990:	00056900 	.word	0x00056900
    7994:	0005563c 	.word	0x0005563c
    7998:	0005578c 	.word	0x0005578c
    799c:	00055708 	.word	0x00055708

000079a0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    79a0:	b570      	push	{r4, r5, r6, lr}
    79a2:	4606      	mov	r6, r0
    79a4:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    79a6:	f006 f91f 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79aa:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79ac:	4620      	mov	r0, r4
    79ae:	f006 f921 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79b2:	2808      	cmp	r0, #8
    79b4:	d923      	bls.n	79fe <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5e>
    79b6:	f104 0008 	add.w	r0, r4, #8
    79ba:	f006 f91b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    79be:	b300      	cbz	r0, 7a02 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x62>
    79c0:	4430      	add	r0, r6
    79c2:	f006 f90b 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79c6:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    79c8:	6828      	ldr	r0, [r5, #0]
    79ca:	f006 f906 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    79ce:	42b0      	cmp	r0, r6
    79d0:	d919      	bls.n	7a06 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x66>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    79d2:	1d2c      	adds	r4, r5, #4
    p += i * sizeof(uoffset_t);
    79d4:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    79d8:	4620      	mov	r0, r4
    79da:	f006 f8ff 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    79de:	1824      	adds	r4, r4, r0
    79e0:	d025      	beq.n	7a2e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
    79e2:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    79e4:	4620      	mov	r0, r4
    79e6:	f006 f8ff 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79ea:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79ec:	4620      	mov	r0, r4
    79ee:	f006 f901 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79f2:	2804      	cmp	r0, #4
    79f4:	d90e      	bls.n	7a14 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x74>
    79f6:	1d20      	adds	r0, r4, #4
    79f8:	f006 f8fc 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    79fc:	e00b      	b.n	7a16 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x76>
    79fe:	2000      	movs	r0, #0
    7a00:	e7dd      	b.n	79be <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7a02:	2600      	movs	r6, #0
    7a04:	e7e0      	b.n	79c8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x28>
    FLATBUFFERS_ASSERT(i < size());
    7a06:	4b0d      	ldr	r3, [pc, #52]	; (7a3c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x9c>)
    7a08:	4a0d      	ldr	r2, [pc, #52]	; (7a40 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa0>)
    7a0a:	f44f 7183 	mov.w	r1, #262	; 0x106
    7a0e:	480d      	ldr	r0, [pc, #52]	; (7a44 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa4>)
    7a10:	f004 fe98 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a14:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7a16:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a18:	b158      	cbz	r0, 7a32 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x92>
    7a1a:	4628      	mov	r0, r5
    7a1c:	f006 f8de 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a20:	182c      	adds	r4, r5, r0
    if (auto* array = buffer->data()) {
    7a22:	b124      	cbz	r4, 7a2e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
  uoffset_t size() const { return EndianScalar(length_); }
    7a24:	6820      	ldr	r0, [r4, #0]
    7a26:	f006 f8d8 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (array->size()) {
    7a2a:	b120      	cbz	r0, 7a36 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a2c:	3404      	adds	r4, #4
}
    7a2e:	4620      	mov	r0, r4
    7a30:	bd70      	pop	{r4, r5, r6, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a32:	2400      	movs	r4, #0
    7a34:	e7f5      	b.n	7a22 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x82>
  void* out_buffer = nullptr;
    7a36:	2400      	movs	r4, #0
  return out_buffer;
    7a38:	e7f9      	b.n	7a2e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    7a3a:	bf00      	nop
    7a3c:	0005563c 	.word	0x0005563c
    7a40:	0005694c 	.word	0x0005694c
    7a44:	00055708 	.word	0x00055708

00007a48 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a4c:	b082      	sub	sp, #8
    7a4e:	4606      	mov	r6, r0
    7a50:	460f      	mov	r7, r1
    7a52:	4690      	mov	r8, r2
    7a54:	461d      	mov	r5, r3
    7a56:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7a5a:	4608      	mov	r0, r1
    7a5c:	f006 f8c4 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a60:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a62:	4620      	mov	r0, r4
    7a64:	f006 f8c6 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a68:	2808      	cmp	r0, #8
    7a6a:	d93e      	bls.n	7aea <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    7a6c:	f104 0008 	add.w	r0, r4, #8
    7a70:	f006 f8c0 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7a74:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a76:	2800      	cmp	r0, #0
    7a78:	d039      	beq.n	7aee <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    7a7a:	4620      	mov	r0, r4
    7a7c:	f006 f8ae 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a80:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a82:	6820      	ldr	r0, [r4, #0]
    7a84:	f006 f8a9 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a88:	4581      	cmp	r9, r0
    7a8a:	d232      	bcs.n	7af2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a8c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7a8e:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7a92:	4620      	mov	r0, r4
    7a94:	f006 f8a2 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7a98:	42c4      	cmn	r4, r0
    7a9a:	d031      	beq.n	7b00 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    7a9c:	6833      	ldr	r3, [r6, #0]
    7a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7aa0:	4630      	mov	r0, r6
    7aa2:	4798      	blx	r3
    7aa4:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
    7aa6:	6833      	ldr	r3, [r6, #0]
    7aa8:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(
    7aac:	2300      	movs	r3, #0
    7aae:	9301      	str	r3, [sp, #4]
    7ab0:	f8cd 9000 	str.w	r9, [sp]
    7ab4:	462b      	mov	r3, r5
    7ab6:	4602      	mov	r2, r0
    7ab8:	4639      	mov	r1, r7
    7aba:	4630      	mov	r0, r6
    7abc:	47d0      	blx	sl
    7abe:	bb08      	cbnz	r0, 7b04 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7ac0:	f1b8 0f00 	cmp.w	r8, #0
    7ac4:	d00d      	beq.n	7ae2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7ac6:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
    7aca:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7ad2:	00ad      	lsls	r5, r5, #2
    7ad4:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7ad6:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7ad8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7adc:	441d      	add	r5, r3
    7ade:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7ae0:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7ae2:	4620      	mov	r0, r4
    7ae4:	b002      	add	sp, #8
    7ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7aea:	2000      	movs	r0, #0
    7aec:	e7c2      	b.n	7a74 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7aee:	2400      	movs	r4, #0
    7af0:	e7c7      	b.n	7a82 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7af2:	4b07      	ldr	r3, [pc, #28]	; (7b10 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
    7af4:	4a07      	ldr	r2, [pc, #28]	; (7b14 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    7af6:	f44f 7183 	mov.w	r1, #262	; 0x106
    7afa:	4807      	ldr	r0, [pc, #28]	; (7b18 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7afc:	f004 fe22 	bl	c744 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7b00:	f008 fb30 	bl	10164 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7b04:	4905      	ldr	r1, [pc, #20]	; (7b1c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    7b06:	68f0      	ldr	r0, [r6, #12]
    7b08:	f007 ff80 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7b0c:	2400      	movs	r4, #0
    7b0e:	e7e8      	b.n	7ae2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7b10:	0005563c 	.word	0x0005563c
    7b14:	0005578c 	.word	0x0005578c
    7b18:	00055708 	.word	0x00055708
    7b1c:	00056a40 	.word	0x00056a40

00007b20 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b24:	b082      	sub	sp, #8
    7b26:	4680      	mov	r8, r0
    7b28:	460e      	mov	r6, r1
    7b2a:	4617      	mov	r7, r2
    7b2c:	461d      	mov	r5, r3
    7b2e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7b32:	4608      	mov	r0, r1
    7b34:	f006 f858 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b38:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b3a:	4620      	mov	r0, r4
    7b3c:	f006 f85a 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b40:	2808      	cmp	r0, #8
    7b42:	d93e      	bls.n	7bc2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    7b44:	f104 0008 	add.w	r0, r4, #8
    7b48:	f006 f854 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7b4c:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b4e:	2800      	cmp	r0, #0
    7b50:	d039      	beq.n	7bc6 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    7b52:	4620      	mov	r0, r4
    7b54:	f006 f842 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b58:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7b5a:	6820      	ldr	r0, [r4, #0]
    7b5c:	f006 f83d 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7b60:	4581      	cmp	r9, r0
    7b62:	d232      	bcs.n	7bca <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b64:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7b66:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7b6a:	4620      	mov	r0, r4
    7b6c:	f006 f836 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7b70:	42c4      	cmn	r4, r0
    7b72:	d031      	beq.n	7bd8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    7b74:	f8d8 0004 	ldr.w	r0, [r8, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    7b78:	6803      	ldr	r3, [r0, #0]
    7b7a:	691b      	ldr	r3, [r3, #16]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    7b7c:	2204      	movs	r2, #4
    7b7e:	2140      	movs	r1, #64	; 0x40
    7b80:	4798      	blx	r3
    7b82:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    7b84:	f8d8 3000 	ldr.w	r3, [r8]
    7b88:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    7b8c:	2301      	movs	r3, #1
    7b8e:	9301      	str	r3, [sp, #4]
    7b90:	f8cd 9000 	str.w	r9, [sp]
    7b94:	462b      	mov	r3, r5
    7b96:	4602      	mov	r2, r0
    7b98:	4631      	mov	r1, r6
    7b9a:	4640      	mov	r0, r8
    7b9c:	47d0      	blx	sl
    7b9e:	b9e8      	cbnz	r0, 7bdc <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7ba0:	b15f      	cbz	r7, 7bba <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7ba2:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7bac:	00ad      	lsls	r5, r5, #2
    7bae:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7bb0:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	441d      	add	r5, r3
    7bb6:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7bb8:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7bba:	4620      	mov	r0, r4
    7bbc:	b002      	add	sp, #8
    7bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7bc2:	2000      	movs	r0, #0
    7bc4:	e7c2      	b.n	7b4c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7bc6:	2400      	movs	r4, #0
    7bc8:	e7c7      	b.n	7b5a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7bca:	4b08      	ldr	r3, [pc, #32]	; (7bec <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    7bcc:	4a08      	ldr	r2, [pc, #32]	; (7bf0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7bce:	f44f 7183 	mov.w	r1, #262	; 0x106
    7bd2:	4808      	ldr	r0, [pc, #32]	; (7bf4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    7bd4:	f004 fdb6 	bl	c744 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7bd8:	f008 fac4 	bl	10164 <abort>
    TF_LITE_REPORT_ERROR(
    7bdc:	4906      	ldr	r1, [pc, #24]	; (7bf8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd8>)
    7bde:	f8d8 000c 	ldr.w	r0, [r8, #12]
    7be2:	f007 ff13 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7be6:	2400      	movs	r4, #0
    7be8:	e7e7      	b.n	7bba <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7bea:	bf00      	nop
    7bec:	0005563c 	.word	0x0005563c
    7bf0:	0005578c 	.word	0x0005578c
    7bf4:	00055708 	.word	0x00055708
    7bf8:	00056a8c 	.word	0x00056a8c

00007bfc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>:
    const Model* model, const int32_t** offline_planner_offsets) {
    7bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c00:	4607      	mov	r7, r0
    7c02:	460c      	mov	r4, r1
    7c04:	4690      	mov	r8, r2
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
    7c06:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7c08:	4608      	mov	r0, r1
    7c0a:	f005 ffed 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c0e:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c10:	4628      	mov	r0, r5
    7c12:	f005 ffef 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c16:	2810      	cmp	r0, #16
    7c18:	d904      	bls.n	7c24 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x28>
    7c1a:	f105 0010 	add.w	r0, r5, #16
    7c1e:	f005 ffe9 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7c22:	e000      	b.n	7c26 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x2a>
    7c24:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7c26:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c28:	b140      	cbz	r0, 7c3c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x40>
    7c2a:	4620      	mov	r0, r4
    7c2c:	f005 ffd6 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c30:	4404      	add	r4, r0
  if (model->metadata()) {
    7c32:	2c00      	cmp	r4, #0
    7c34:	f000 80cc 	beq.w	7dd0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    7c38:	2500      	movs	r5, #0
    7c3a:	e023      	b.n	7c84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x88>
    7c3c:	2400      	movs	r4, #0
    7c3e:	e7f8      	b.n	7c32 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c40:	2000      	movs	r0, #0
    7c42:	e02c      	b.n	7c9e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xa2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c44:	2400      	movs	r4, #0
    7c46:	e031      	b.n	7cac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xb0>
    FLATBUFFERS_ASSERT(i < size());
    7c48:	4b64      	ldr	r3, [pc, #400]	; (7ddc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    7c4a:	4a65      	ldr	r2, [pc, #404]	; (7de0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e4>)
    7c4c:	f44f 7183 	mov.w	r1, #262	; 0x106
    7c50:	4864      	ldr	r0, [pc, #400]	; (7de4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    7c52:	f004 fd77 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c56:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7c58:	eb04 0900 	add.w	r9, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c5c:	2800      	cmp	r0, #0
    7c5e:	d046      	beq.n	7cee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf2>
    7c60:	4648      	mov	r0, r9
    7c62:	f005 ffbb 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c66:	4481      	add	r9, r0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c68:	f109 0904 	add.w	r9, r9, #4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    7c6c:	f8df a180 	ldr.w	sl, [pc, #384]	; 7df0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f4>
    7c70:	4650      	mov	r0, sl
    7c72:	f7f9 fc2f 	bl	14d4 <strlen>
    7c76:	4602      	mov	r2, r0
    7c78:	4651      	mov	r1, sl
    7c7a:	4648      	mov	r0, r9
    7c7c:	f008 fbff 	bl	1047e <strncmp>
    7c80:	b3c0      	cbz	r0, 7cf4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    7c82:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7c84:	4630      	mov	r0, r6
    7c86:	f005 ffaf 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c8a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c8c:	4620      	mov	r0, r4
    7c8e:	f005 ffb1 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c92:	2810      	cmp	r0, #16
    7c94:	d9d4      	bls.n	7c40 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x44>
    7c96:	f104 0010 	add.w	r0, r4, #16
    7c9a:	f005 ffab 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7c9e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ca0:	2800      	cmp	r0, #0
    7ca2:	d0cf      	beq.n	7c44 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x48>
    7ca4:	4620      	mov	r0, r4
    7ca6:	f005 ff99 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7caa:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7cac:	6820      	ldr	r0, [r4, #0]
    7cae:	f005 ff94 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7cb2:	4285      	cmp	r5, r0
    7cb4:	f080 808e 	bcs.w	7dd4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d8>
    7cb8:	6820      	ldr	r0, [r4, #0]
    7cba:	f005 ff8e 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7cbe:	4285      	cmp	r5, r0
    7cc0:	d2c2      	bcs.n	7c48 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x4c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7cc2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7cc4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7cc8:	4620      	mov	r0, r4
    7cca:	f005 ff87 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7cce:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7cd0:	4620      	mov	r0, r4
    7cd2:	f005 ff89 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7cd6:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7cda:	4648      	mov	r0, r9
    7cdc:	f005 ff8a 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ce0:	2804      	cmp	r0, #4
    7ce2:	d9b8      	bls.n	7c56 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5a>
    7ce4:	f109 0004 	add.w	r0, r9, #4
    7ce8:	f005 ff84 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7cec:	e7b4      	b.n	7c58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cee:	f04f 0900 	mov.w	r9, #0
    7cf2:	e7b9      	b.n	7c68 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x6c>
    return data_ - ReadScalar<soffset_t>(data_);
    7cf4:	4630      	mov	r0, r6
    7cf6:	f005 ff77 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7cfa:	eba6 0900 	sub.w	r9, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7cfe:	4648      	mov	r0, r9
    7d00:	f005 ff78 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d04:	280c      	cmp	r0, #12
    7d06:	d94e      	bls.n	7da6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1aa>
    7d08:	f109 000c 	add.w	r0, r9, #12
    7d0c:	f005 ff72 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7d10:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d14:	2800      	cmp	r0, #0
    7d16:	d048      	beq.n	7daa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ae>
    7d18:	4648      	mov	r0, r9
    7d1a:	f005 ff5f 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d1e:	4481      	add	r9, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7d20:	4620      	mov	r0, r4
    7d22:	f005 ff61 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7d26:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7d2a:	4650      	mov	r0, sl
    7d2c:	f005 ff62 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d30:	2806      	cmp	r0, #6
    7d32:	d93d      	bls.n	7db0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b4>
    7d34:	f10a 0006 	add.w	r0, sl, #6
    7d38:	f005 ff5c 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7d3c:	b3d0      	cbz	r0, 7db4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b8>
    7d3e:	4420      	add	r0, r4
    7d40:	f005 ff4c 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d44:	4682      	mov	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7d46:	f8d9 0000 	ldr.w	r0, [r9]
    7d4a:	f005 ff46 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7d4e:	4550      	cmp	r0, sl
    7d50:	d933      	bls.n	7dba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1be>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7d52:	f109 0404 	add.w	r4, r9, #4
    p += i * sizeof(uoffset_t);
    7d56:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7d5a:	4620      	mov	r0, r4
    7d5c:	f005 ff3e 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d60:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7d62:	4620      	mov	r0, r4
    7d64:	f005 ff40 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7d68:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7d6c:	4648      	mov	r0, r9
    7d6e:	f005 ff41 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d72:	2804      	cmp	r0, #4
    7d74:	d928      	bls.n	7dc8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1cc>
    7d76:	f109 0004 	add.w	r0, r9, #4
    7d7a:	f005 ff3b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7d7e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d80:	b320      	cbz	r0, 7dcc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d0>
    7d82:	4620      	mov	r0, r4
    7d84:	f005 ff2a 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d88:	4420      	add	r0, r4
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    7d8a:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    7d8c:	3010      	adds	r0, #16
        *offline_planner_offsets =
    7d8e:	f8c8 0000 	str.w	r0, [r8]
        if (tensor_count_ != nbr_tensors) {
    7d92:	687b      	ldr	r3, [r7, #4]
    7d94:	4293      	cmp	r3, r2
    7d96:	f43f af74 	beq.w	7c82 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x86>
          TF_LITE_REPORT_ERROR(reporter_,
    7d9a:	4913      	ldr	r1, [pc, #76]	; (7de8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ec>)
    7d9c:	68f8      	ldr	r0, [r7, #12]
    7d9e:	f007 fe35 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
    7da2:	2001      	movs	r0, #1
    7da4:	e017      	b.n	7dd6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7da6:	2000      	movs	r0, #0
    7da8:	e7b2      	b.n	7d10 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7daa:	f04f 0900 	mov.w	r9, #0
    7dae:	e7b7      	b.n	7d20 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x124>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7db0:	2000      	movs	r0, #0
    7db2:	e7c3      	b.n	7d3c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x140>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7db4:	f04f 0a00 	mov.w	sl, #0
    7db8:	e7c5      	b.n	7d46 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x14a>
    FLATBUFFERS_ASSERT(i < size());
    7dba:	4b08      	ldr	r3, [pc, #32]	; (7ddc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    7dbc:	4a0b      	ldr	r2, [pc, #44]	; (7dec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f0>)
    7dbe:	f44f 7183 	mov.w	r1, #262	; 0x106
    7dc2:	4808      	ldr	r0, [pc, #32]	; (7de4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    7dc4:	f004 fcbe 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7dc8:	2000      	movs	r0, #0
    7dca:	e7d8      	b.n	7d7e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x182>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7dcc:	2000      	movs	r0, #0
    7dce:	e7dc      	b.n	7d8a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x18e>
  return kTfLiteOk;
    7dd0:	2000      	movs	r0, #0
    7dd2:	e000      	b.n	7dd6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    7dd4:	2000      	movs	r0, #0
}
    7dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dda:	bf00      	nop
    7ddc:	0005563c 	.word	0x0005563c
    7de0:	00056ad0 	.word	0x00056ad0
    7de4:	00055708 	.word	0x00055708
    7de8:	00056bc8 	.word	0x00056bc8
    7dec:	0005694c 	.word	0x0005694c
    7df0:	00056f74 	.word	0x00056f74

00007df4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    7df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(model != nullptr);
    7df8:	b349      	cbz	r1, 7e4e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5a>
    7dfa:	4604      	mov	r4, r0
    7dfc:	460d      	mov	r5, r1
  if (model_is_allocating_) {
    7dfe:	7c03      	ldrb	r3, [r0, #16]
    7e00:	bb3b      	cbnz	r3, 7e52 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5e>
  model_is_allocating_ = true;
    7e02:	2301      	movs	r3, #1
    7e04:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    7e06:	6840      	ldr	r0, [r0, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    7e08:	6803      	ldr	r3, [r0, #0]
    7e0a:	68db      	ldr	r3, [r3, #12]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    7e0c:	2204      	movs	r2, #4
    7e0e:	2108      	movs	r1, #8
    7e10:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    7e12:	4603      	mov	r3, r0
    7e14:	b118      	cbz	r0, 7e1e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    7e16:	6862      	ldr	r2, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    7e18:	4926      	ldr	r1, [pc, #152]	; (7eb4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc0>)
    7e1a:	6001      	str	r1, [r0, #0]
    7e1c:	6042      	str	r2, [r0, #4]
  builtin_data_allocator_ =
    7e1e:	60a3      	str	r3, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    7e20:	4620      	mov	r0, r4
    7e22:	f007 fbcd 	bl	f5c0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    7e26:	2800      	cmp	r0, #0
    7e28:	d142      	bne.n	7eb0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xbc>
      memory_allocator_->AllocateFromTail(
    7e2a:	6867      	ldr	r7, [r4, #4]
          alignof(SubgraphAllocations)));
    7e2c:	683b      	ldr	r3, [r7, #0]
    7e2e:	f8d3 800c 	ldr.w	r8, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    7e32:	4628      	mov	r0, r5
    7e34:	f005 fed8 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e38:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e3a:	4630      	mov	r0, r6
    7e3c:	f005 feda 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e40:	2808      	cmp	r0, #8
    7e42:	d90c      	bls.n	7e5e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
    7e44:	f106 0008 	add.w	r0, r6, #8
    7e48:	f005 fed4 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7e4c:	e008      	b.n	7e60 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
  TFLITE_DCHECK(model != nullptr);
    7e4e:	f008 f989 	bl	10164 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7e52:	4919      	ldr	r1, [pc, #100]	; (7eb8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc4>)
    7e54:	68c0      	ldr	r0, [r0, #12]
    7e56:	f007 fdd9 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7e5a:	2600      	movs	r6, #0
    7e5c:	e01d      	b.n	7e9a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    7e5e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7e60:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e62:	b1e8      	cbz	r0, 7ea0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>
    7e64:	4630      	mov	r0, r6
    7e66:	f005 feb9 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e6a:	4406      	add	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7e6c:	6830      	ldr	r0, [r6, #0]
    7e6e:	f005 feb4 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      memory_allocator_->AllocateFromTail(
    7e72:	2204      	movs	r2, #4
    7e74:	00c1      	lsls	r1, r0, #3
    7e76:	4638      	mov	r0, r7
    7e78:	47c0      	blx	r8
  if (output == nullptr) {
    7e7a:	4606      	mov	r6, r0
    7e7c:	b190      	cbz	r0, 7ea4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb0>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    7e7e:	6823      	ldr	r3, [r4, #0]
    7e80:	69db      	ldr	r3, [r3, #28]
    7e82:	4602      	mov	r2, r0
    7e84:	4629      	mov	r1, r5
    7e86:	4620      	mov	r0, r4
    7e88:	4798      	blx	r3
    7e8a:	b978      	cbnz	r0, 7eac <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    7e8c:	6823      	ldr	r3, [r4, #0]
    7e8e:	699b      	ldr	r3, [r3, #24]
    7e90:	4632      	mov	r2, r6
    7e92:	4629      	mov	r1, r5
    7e94:	4620      	mov	r0, r4
    7e96:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    7e98:	b940      	cbnz	r0, 7eac <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
}
    7e9a:	4630      	mov	r0, r6
    7e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ea0:	2600      	movs	r6, #0
    7ea2:	e7e3      	b.n	7e6c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    MicroPrintf("Failed to allocate memory for model metadata.");
    7ea4:	4805      	ldr	r0, [pc, #20]	; (7ebc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc8>)
    7ea6:	f007 f83c 	bl	ef22 <_Z11MicroPrintfPKcz>
    return nullptr;
    7eaa:	e7f6      	b.n	7e9a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    7eac:	2600      	movs	r6, #0
    7eae:	e7f4      	b.n	7e9a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    7eb0:	2600      	movs	r6, #0
    7eb2:	e7f2      	b.n	7e9a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    7eb4:	00056f94 	.word	0x00056f94
    7eb8:	00056c14 	.word	0x00056c14
    7ebc:	00056c6c 	.word	0x00056c6c

00007ec0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    7ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ec4:	b083      	sub	sp, #12
    7ec6:	4680      	mov	r8, r0
    7ec8:	460e      	mov	r6, r1
    7eca:	4617      	mov	r7, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    7ecc:	2500      	movs	r5, #0
    7ece:	e013      	b.n	7ef8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ed0:	2000      	movs	r0, #0
    7ed2:	e01d      	b.n	7f10 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x50>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ed4:	2400      	movs	r4, #0
    7ed6:	e022      	b.n	7f1e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    FLATBUFFERS_ASSERT(i < size());
    7ed8:	4b31      	ldr	r3, [pc, #196]	; (7fa0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe0>)
    7eda:	4a32      	ldr	r2, [pc, #200]	; (7fa4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe4>)
    7edc:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ee0:	4831      	ldr	r0, [pc, #196]	; (7fa8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe8>)
    7ee2:	f004 fc2f 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ee6:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7ee8:	b118      	cbz	r0, 7ef2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
    7eea:	4420      	add	r0, r4
    7eec:	f007 f962 	bl	f1b4 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    7ef0:	e000      	b.n	7ef4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x34>
    7ef2:	2000      	movs	r0, #0
    auto* tensor = subgraph->tensors()->Get(i);
    if (tensor->is_variable()) {
    7ef4:	bb98      	cbnz	r0, 7f5e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9e>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    7ef6:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7ef8:	4630      	mov	r0, r6
    7efa:	f005 fe75 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7efe:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f00:	4620      	mov	r0, r4
    7f02:	f005 fe77 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f06:	2804      	cmp	r0, #4
    7f08:	d9e2      	bls.n	7ed0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
    7f0a:	1d20      	adds	r0, r4, #4
    7f0c:	f005 fe72 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7f10:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f12:	2800      	cmp	r0, #0
    7f14:	d0de      	beq.n	7ed4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
    7f16:	4620      	mov	r0, r4
    7f18:	f005 fe60 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f1c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7f1e:	6820      	ldr	r0, [r4, #0]
    7f20:	f005 fe5b 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7f24:	4285      	cmp	r5, r0
    7f26:	d236      	bcs.n	7f96 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd6>
    7f28:	6820      	ldr	r0, [r4, #0]
    7f2a:	f005 fe56 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7f2e:	4285      	cmp	r5, r0
    7f30:	d2d2      	bcs.n	7ed8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7f32:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7f34:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7f38:	4620      	mov	r0, r4
    7f3a:	f005 fe4f 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f3e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7f40:	4620      	mov	r0, r4
    7f42:	f005 fe51 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f46:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f4a:	4648      	mov	r0, r9
    7f4c:	f005 fe52 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f50:	280e      	cmp	r0, #14
    7f52:	d9c8      	bls.n	7ee6 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x26>
    7f54:	f109 000e 	add.w	r0, r9, #14
    7f58:	f005 fe4c 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7f5c:	e7c4      	b.n	7ee8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    7f5e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    7f62:	0084      	lsls	r4, r0, #2
    7f64:	a901      	add	r1, sp, #4
    7f66:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    7f6a:	f007 f83e 	bl	efea <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    7f6e:	4603      	mov	r3, r0
    7f70:	b990      	cbnz	r0, 7f98 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    7f72:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7f76:	6803      	ldr	r3, [r0, #0]
    7f78:	68db      	ldr	r3, [r3, #12]
    7f7a:	2210      	movs	r2, #16
    7f7c:	9901      	ldr	r1, [sp, #4]
    7f7e:	4798      	blx	r3
      eval_tensors[i].data.data =
    7f80:	5138      	str	r0, [r7, r4]

      if (eval_tensors[i].data.data == nullptr) {
    7f82:	2800      	cmp	r0, #0
    7f84:	d1b7      	bne.n	7ef6 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        TF_LITE_REPORT_ERROR(error_reporter_,
    7f86:	9a01      	ldr	r2, [sp, #4]
    7f88:	4908      	ldr	r1, [pc, #32]	; (7fac <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xec>)
    7f8a:	f8d8 000c 	ldr.w	r0, [r8, #12]
    7f8e:	f007 fd3d 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    7f92:	2301      	movs	r3, #1
    7f94:	e000      	b.n	7f98 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
      }
    }
  }
  return kTfLiteOk;
    7f96:	2300      	movs	r3, #0
}
    7f98:	4618      	mov	r0, r3
    7f9a:	b003      	add	sp, #12
    7f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7fa0:	0005563c 	.word	0x0005563c
    7fa4:	00055924 	.word	0x00055924
    7fa8:	00055708 	.word	0x00055708
    7fac:	00056c9c 	.word	0x00056c9c

00007fb0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    7fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fb4:	b083      	sub	sp, #12
  TFLITE_DCHECK(eval_tensors != nullptr);
    7fb6:	b12b      	cbz	r3, 7fc4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x14>
    7fb8:	4604      	mov	r4, r0
    7fba:	4688      	mov	r8, r1
    7fbc:	4692      	mov	sl, r2
    7fbe:	4699      	mov	r9, r3
  for (size_t i = 0; i < tensor_count_; ++i) {
    7fc0:	2600      	movs	r6, #0
    7fc2:	e04b      	b.n	805c <CONFIG_MAIN_STACK_SIZE+0x5c>
  TFLITE_DCHECK(eval_tensors != nullptr);
    7fc4:	f008 f8ce 	bl	10164 <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    7fc8:	4640      	mov	r0, r8
    7fca:	f005 fe0d 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7fce:	eba8 0b00 	sub.w	fp, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7fd2:	4658      	mov	r0, fp
    7fd4:	f005 fe0e 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fd8:	2804      	cmp	r0, #4
    7fda:	d92e      	bls.n	803a <CONFIG_MAIN_STACK_SIZE+0x3a>
    7fdc:	f10b 0004 	add.w	r0, fp, #4
    7fe0:	f005 fe08 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7fe4:	eb08 0b00 	add.w	fp, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7fe8:	b120      	cbz	r0, 7ff4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x44>
    7fea:	4658      	mov	r0, fp
    7fec:	f005 fdf6 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ff0:	eb0b 0700 	add.w	r7, fp, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7ff4:	6838      	ldr	r0, [r7, #0]
    7ff6:	f005 fdf0 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7ffa:	4286      	cmp	r6, r0
    7ffc:	d21f      	bcs.n	803e <CONFIG_MAIN_STACK_SIZE+0x3e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7ffe:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
    8000:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8004:	4638      	mov	r0, r7
    8006:	f005 fde9 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    800a:	4407      	add	r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
    800c:	4638      	mov	r0, r7
    800e:	f005 fdeb 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8012:	eba7 0b00 	sub.w	fp, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8016:	4658      	mov	r0, fp
    8018:	f005 fdec 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    801c:	280e      	cmp	r0, #14
    801e:	d915      	bls.n	804c <CONFIG_MAIN_STACK_SIZE+0x4c>
    8020:	f10b 000e 	add.w	r0, fp, #14
    8024:	f005 fde6 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8028:	b118      	cbz	r0, 8032 <CONFIG_MAIN_STACK_SIZE+0x32>
    802a:	4438      	add	r0, r7
    802c:	f007 f8c2 	bl	f1b4 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8030:	9001      	str	r0, [sp, #4]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    8032:	9b01      	ldr	r3, [sp, #4]
    8034:	b963      	cbnz	r3, 8050 <CONFIG_MAIN_STACK_SIZE+0x50>
    8036:	2301      	movs	r3, #1
    8038:	e02c      	b.n	8094 <CONFIG_MAIN_STACK_SIZE+0x94>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    803a:	2000      	movs	r0, #0
    803c:	e7d2      	b.n	7fe4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x34>
    FLATBUFFERS_ASSERT(i < size());
    803e:	4bb6      	ldr	r3, [pc, #728]	; (8318 <CONFIG_MAIN_STACK_SIZE+0x318>)
    8040:	4ab6      	ldr	r2, [pc, #728]	; (831c <CONFIG_MAIN_STACK_SIZE+0x31c>)
    8042:	f44f 7183 	mov.w	r1, #262	; 0x106
    8046:	48b6      	ldr	r0, [pc, #728]	; (8320 <CONFIG_MAIN_STACK_SIZE+0x320>)
    8048:	f004 fb7c 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    804c:	2000      	movs	r0, #0
    804e:	e7eb      	b.n	8028 <CONFIG_MAIN_STACK_SIZE+0x28>
    8050:	2300      	movs	r3, #0
    8052:	e01f      	b.n	8094 <CONFIG_MAIN_STACK_SIZE+0x94>
      current->offline_offset = kOnlinePlannedBuffer;
    8054:	f04f 33ff 	mov.w	r3, #4294967295
    8058:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    805a:	3601      	adds	r6, #1
    805c:	6863      	ldr	r3, [r4, #4]
    805e:	42b3      	cmp	r3, r6
    8060:	d920      	bls.n	80a4 <CONFIG_MAIN_STACK_SIZE+0xa4>
    AllocationInfo* current = &info_[i];
    8062:	6825      	ldr	r5, [r4, #0]
    8064:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8068:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    current->output_ptr = &(eval_tensors[i].data.data);
    806c:	009f      	lsls	r7, r3, #2
    806e:	eb09 0083 	add.w	r0, r9, r3, lsl #2
    8072:	6068      	str	r0, [r5, #4]
    TF_LITE_ENSURE_STATUS(
    8074:	4629      	mov	r1, r5
    8076:	f006 ffb8 	bl	efea <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    807a:	9001      	str	r0, [sp, #4]
    807c:	2800      	cmp	r0, #0
    807e:	f040 8146 	bne.w	830e <CONFIG_MAIN_STACK_SIZE+0x30e>
    current->first_created = -1;
    8082:	f04f 33ff 	mov.w	r3, #4294967295
    8086:	60ab      	str	r3, [r5, #8]
    current->last_used = -1;
    8088:	60eb      	str	r3, [r5, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    808a:	f859 7007 	ldr.w	r7, [r9, r7]
    808e:	2f00      	cmp	r7, #0
    8090:	d09a      	beq.n	7fc8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x18>
    8092:	2300      	movs	r3, #0
    8094:	752b      	strb	r3, [r5, #20]
    if (offline_offsets) {
    8096:	f1ba 0f00 	cmp.w	sl, #0
    809a:	d0db      	beq.n	8054 <CONFIG_MAIN_STACK_SIZE+0x54>
      current->offline_offset = offline_offsets[i];
    809c:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    80a0:	612b      	str	r3, [r5, #16]
    80a2:	e7da      	b.n	805a <CONFIG_MAIN_STACK_SIZE+0x5a>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    80a4:	4640      	mov	r0, r8
    80a6:	f007 f866 	bl	f176 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    80aa:	4607      	mov	r7, r0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    80ac:	f04f 0900 	mov.w	r9, #0
    80b0:	e01f      	b.n	80f2 <CONFIG_MAIN_STACK_SIZE+0xf2>
    80b2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    80b4:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80b8:	b350      	cbz	r0, 8110 <CONFIG_MAIN_STACK_SIZE+0x110>
    80ba:	4628      	mov	r0, r5
    80bc:	f005 fd8e 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    80c0:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    80c2:	6828      	ldr	r0, [r5, #0]
    80c4:	f005 fd89 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    80c8:	4581      	cmp	r9, r0
    80ca:	d22a      	bcs.n	8122 <CONFIG_MAIN_STACK_SIZE+0x122>
    80cc:	6828      	ldr	r0, [r5, #0]
    80ce:	f005 fd84 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    80d2:	4581      	cmp	r9, r0
    80d4:	d21e      	bcs.n	8114 <CONFIG_MAIN_STACK_SIZE+0x114>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80d6:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    80d8:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    80dc:	f005 fd83 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    80e0:	6823      	ldr	r3, [r4, #0]
    80e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    80e6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->first_created = 0;
    80ea:	2300      	movs	r3, #0
    80ec:	6083      	str	r3, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    80ee:	f109 0901 	add.w	r9, r9, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    80f2:	4646      	mov	r6, r8
    return data_ - ReadScalar<soffset_t>(data_);
    80f4:	4640      	mov	r0, r8
    80f6:	f005 fd77 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    80fa:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    80fe:	4628      	mov	r0, r5
    8100:	f005 fd78 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8104:	2806      	cmp	r0, #6
    8106:	d9d4      	bls.n	80b2 <CONFIG_MAIN_STACK_SIZE+0xb2>
    8108:	1da8      	adds	r0, r5, #6
    810a:	f005 fd73 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    810e:	e7d1      	b.n	80b4 <CONFIG_MAIN_STACK_SIZE+0xb4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8110:	2500      	movs	r5, #0
    8112:	e7d6      	b.n	80c2 <CONFIG_MAIN_STACK_SIZE+0xc2>
    FLATBUFFERS_ASSERT(i < size());
    8114:	4b80      	ldr	r3, [pc, #512]	; (8318 <CONFIG_MAIN_STACK_SIZE+0x318>)
    8116:	4a83      	ldr	r2, [pc, #524]	; (8324 <CONFIG_MAIN_STACK_SIZE+0x324>)
    8118:	f44f 7183 	mov.w	r1, #262	; 0x106
    811c:	4880      	ldr	r0, [pc, #512]	; (8320 <CONFIG_MAIN_STACK_SIZE+0x320>)
    811e:	f004 fb11 	bl	c744 <__assert_func>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    8122:	f04f 0800 	mov.w	r8, #0
    8126:	e01e      	b.n	8166 <CONFIG_MAIN_STACK_SIZE+0x166>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8128:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    812a:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    812c:	b348      	cbz	r0, 8182 <CONFIG_MAIN_STACK_SIZE+0x182>
    812e:	4628      	mov	r0, r5
    8130:	f005 fd54 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8134:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8136:	6828      	ldr	r0, [r5, #0]
    8138:	f005 fd4f 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    813c:	4580      	cmp	r8, r0
    813e:	d229      	bcs.n	8194 <CONFIG_MAIN_STACK_SIZE+0x194>
    8140:	6828      	ldr	r0, [r5, #0]
    8142:	f005 fd4a 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8146:	4580      	cmp	r8, r0
    8148:	d21d      	bcs.n	8186 <CONFIG_MAIN_STACK_SIZE+0x186>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    814a:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    814c:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
    8150:	f005 fd49 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    8154:	6823      	ldr	r3, [r4, #0]
    8156:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    815a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->last_used = operators_size - 1;
    815e:	1e7b      	subs	r3, r7, #1
    8160:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    8162:	f108 0801 	add.w	r8, r8, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8166:	4630      	mov	r0, r6
    8168:	f005 fd3e 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    816c:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    816e:	4628      	mov	r0, r5
    8170:	f005 fd40 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8174:	2808      	cmp	r0, #8
    8176:	d9d7      	bls.n	8128 <CONFIG_MAIN_STACK_SIZE+0x128>
    8178:	f105 0008 	add.w	r0, r5, #8
    817c:	f005 fd3a 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8180:	e7d3      	b.n	812a <CONFIG_MAIN_STACK_SIZE+0x12a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8182:	2500      	movs	r5, #0
    8184:	e7d7      	b.n	8136 <CONFIG_MAIN_STACK_SIZE+0x136>
    FLATBUFFERS_ASSERT(i < size());
    8186:	4b64      	ldr	r3, [pc, #400]	; (8318 <CONFIG_MAIN_STACK_SIZE+0x318>)
    8188:	4a66      	ldr	r2, [pc, #408]	; (8324 <CONFIG_MAIN_STACK_SIZE+0x324>)
    818a:	f44f 7183 	mov.w	r1, #262	; 0x106
    818e:	4864      	ldr	r0, [pc, #400]	; (8320 <CONFIG_MAIN_STACK_SIZE+0x320>)
    8190:	f004 fad8 	bl	c744 <__assert_func>
  for (int i = (operators_size - 1); i >= 0; --i) {
    8194:	3f01      	subs	r7, #1
    8196:	e08d      	b.n	82b4 <CONFIG_MAIN_STACK_SIZE+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8198:	2000      	movs	r0, #0
    819a:	e09b      	b.n	82d4 <CONFIG_MAIN_STACK_SIZE+0x2d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    819c:	f04f 0900 	mov.w	r9, #0
    81a0:	e0a1      	b.n	82e6 <CONFIG_MAIN_STACK_SIZE+0x2e6>
    FLATBUFFERS_ASSERT(i < size());
    81a2:	4b5d      	ldr	r3, [pc, #372]	; (8318 <CONFIG_MAIN_STACK_SIZE+0x318>)
    81a4:	4a60      	ldr	r2, [pc, #384]	; (8328 <CONFIG_MAIN_STACK_SIZE+0x328>)
    81a6:	f44f 7183 	mov.w	r1, #262	; 0x106
    81aa:	485d      	ldr	r0, [pc, #372]	; (8320 <CONFIG_MAIN_STACK_SIZE+0x320>)
    81ac:	f004 faca 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81b0:	2000      	movs	r0, #0
    81b2:	e019      	b.n	81e8 <CONFIG_MAIN_STACK_SIZE+0x1e8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81b4:	2500      	movs	r5, #0
    81b6:	e01f      	b.n	81f8 <CONFIG_MAIN_STACK_SIZE+0x1f8>
    FLATBUFFERS_ASSERT(i < size());
    81b8:	4b57      	ldr	r3, [pc, #348]	; (8318 <CONFIG_MAIN_STACK_SIZE+0x318>)
    81ba:	4a5a      	ldr	r2, [pc, #360]	; (8324 <CONFIG_MAIN_STACK_SIZE+0x324>)
    81bc:	f44f 7183 	mov.w	r1, #262	; 0x106
    81c0:	4857      	ldr	r0, [pc, #348]	; (8320 <CONFIG_MAIN_STACK_SIZE+0x320>)
    81c2:	f004 fabf 	bl	c744 <__assert_func>
        current->last_used = i;
    81c6:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    81c8:	f10a 0a01 	add.w	sl, sl, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    81cc:	46c8      	mov	r8, r9
    return data_ - ReadScalar<soffset_t>(data_);
    81ce:	4648      	mov	r0, r9
    81d0:	f005 fd0a 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    81d4:	eba9 0500 	sub.w	r5, r9, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    81d8:	4628      	mov	r0, r5
    81da:	f005 fd0b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81de:	2806      	cmp	r0, #6
    81e0:	d9e6      	bls.n	81b0 <CONFIG_MAIN_STACK_SIZE+0x1b0>
    81e2:	1da8      	adds	r0, r5, #6
    81e4:	f005 fd06 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    81e8:	eb09 0500 	add.w	r5, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81ec:	2800      	cmp	r0, #0
    81ee:	d0e1      	beq.n	81b4 <CONFIG_MAIN_STACK_SIZE+0x1b4>
    81f0:	4628      	mov	r0, r5
    81f2:	f005 fcf3 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    81f6:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    81f8:	6828      	ldr	r0, [r5, #0]
    81fa:	f005 fcee 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    81fe:	4582      	cmp	sl, r0
    8200:	d215      	bcs.n	822e <CONFIG_MAIN_STACK_SIZE+0x22e>
    8202:	6828      	ldr	r0, [r5, #0]
    8204:	f005 fce9 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8208:	4582      	cmp	sl, r0
    820a:	d2d5      	bcs.n	81b8 <CONFIG_MAIN_STACK_SIZE+0x1b8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    820c:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    820e:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
    8212:	f005 fce8 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    8216:	6823      	ldr	r3, [r4, #0]
    8218:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    821c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    8220:	68c3      	ldr	r3, [r0, #12]
    8222:	f1b3 3fff 	cmp.w	r3, #4294967295
    8226:	d0ce      	beq.n	81c6 <CONFIG_MAIN_STACK_SIZE+0x1c6>
    8228:	42bb      	cmp	r3, r7
    822a:	dacd      	bge.n	81c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>
    822c:	e7cb      	b.n	81c6 <CONFIG_MAIN_STACK_SIZE+0x1c6>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    822e:	f04f 0900 	mov.w	r9, #0
    8232:	e00d      	b.n	8250 <CONFIG_MAIN_STACK_SIZE+0x250>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8234:	2000      	movs	r0, #0
    8236:	e019      	b.n	826c <CONFIG_MAIN_STACK_SIZE+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8238:	2500      	movs	r5, #0
    823a:	e01f      	b.n	827c <CONFIG_MAIN_STACK_SIZE+0x27c>
    FLATBUFFERS_ASSERT(i < size());
    823c:	4b36      	ldr	r3, [pc, #216]	; (8318 <CONFIG_MAIN_STACK_SIZE+0x318>)
    823e:	4a39      	ldr	r2, [pc, #228]	; (8324 <CONFIG_MAIN_STACK_SIZE+0x324>)
    8240:	f44f 7183 	mov.w	r1, #262	; 0x106
    8244:	4836      	ldr	r0, [pc, #216]	; (8320 <CONFIG_MAIN_STACK_SIZE+0x320>)
    8246:	f004 fa7d 	bl	c744 <__assert_func>
        current->first_created = i;
    824a:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    824c:	f109 0901 	add.w	r9, r9, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8250:	4640      	mov	r0, r8
    8252:	f005 fcc9 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8256:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    825a:	4628      	mov	r0, r5
    825c:	f005 fcca 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8260:	2808      	cmp	r0, #8
    8262:	d9e7      	bls.n	8234 <CONFIG_MAIN_STACK_SIZE+0x234>
    8264:	f105 0008 	add.w	r0, r5, #8
    8268:	f005 fcc4 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    826c:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8270:	2800      	cmp	r0, #0
    8272:	d0e1      	beq.n	8238 <CONFIG_MAIN_STACK_SIZE+0x238>
    8274:	4628      	mov	r0, r5
    8276:	f005 fcb1 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    827a:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    827c:	6828      	ldr	r0, [r5, #0]
    827e:	f005 fcac 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8282:	4581      	cmp	r9, r0
    8284:	d215      	bcs.n	82b2 <CONFIG_MAIN_STACK_SIZE+0x2b2>
    8286:	6828      	ldr	r0, [r5, #0]
    8288:	f005 fca7 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    828c:	4581      	cmp	r9, r0
    828e:	d2d5      	bcs.n	823c <CONFIG_MAIN_STACK_SIZE+0x23c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8290:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8292:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    8296:	f005 fca6 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    829a:	6823      	ldr	r3, [r4, #0]
    829c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    82a0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    82a4:	6883      	ldr	r3, [r0, #8]
    82a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    82aa:	d0ce      	beq.n	824a <CONFIG_MAIN_STACK_SIZE+0x24a>
    82ac:	42bb      	cmp	r3, r7
    82ae:	ddcd      	ble.n	824c <CONFIG_MAIN_STACK_SIZE+0x24c>
    82b0:	e7cb      	b.n	824a <CONFIG_MAIN_STACK_SIZE+0x24a>
  for (int i = (operators_size - 1); i >= 0; --i) {
    82b2:	3f01      	subs	r7, #1
    82b4:	2f00      	cmp	r7, #0
    82b6:	db28      	blt.n	830a <CONFIG_MAIN_STACK_SIZE+0x30a>
    return data_ - ReadScalar<soffset_t>(data_);
    82b8:	4630      	mov	r0, r6
    82ba:	f005 fc95 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    82be:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    82c0:	4628      	mov	r0, r5
    82c2:	f005 fc97 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82c6:	280a      	cmp	r0, #10
    82c8:	f67f af66 	bls.w	8198 <CONFIG_MAIN_STACK_SIZE+0x198>
    82cc:	f105 000a 	add.w	r0, r5, #10
    82d0:	f005 fc90 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    82d4:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82d8:	2800      	cmp	r0, #0
    82da:	f43f af5f 	beq.w	819c <CONFIG_MAIN_STACK_SIZE+0x19c>
    82de:	4648      	mov	r0, r9
    82e0:	f005 fc7c 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82e4:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    82e6:	f8d9 0000 	ldr.w	r0, [r9]
    82ea:	f005 fc76 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    82ee:	4287      	cmp	r7, r0
    82f0:	f4bf af57 	bcs.w	81a2 <CONFIG_MAIN_STACK_SIZE+0x1a2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    82f4:	f109 0904 	add.w	r9, r9, #4
    p += i * sizeof(uoffset_t);
    82f8:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    82fc:	4648      	mov	r0, r9
    82fe:	f005 fc6d 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8302:	4481      	add	r9, r0
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    8304:	f04f 0a00 	mov.w	sl, #0
    8308:	e760      	b.n	81cc <CONFIG_MAIN_STACK_SIZE+0x1cc>
  return kTfLiteOk;
    830a:	2300      	movs	r3, #0
    830c:	9301      	str	r3, [sp, #4]
}
    830e:	9801      	ldr	r0, [sp, #4]
    8310:	b003      	add	sp, #12
    8312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8316:	bf00      	nop
    8318:	0005563c 	.word	0x0005563c
    831c:	00055924 	.word	0x00055924
    8320:	00055708 	.word	0x00055708
    8324:	00055648 	.word	0x00055648
    8328:	00056474 	.word	0x00056474

0000832c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8330:	b083      	sub	sp, #12
    8332:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    8336:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  TFLITE_DCHECK(result != nullptr);
    8338:	b31d      	cbz	r5, 8382 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    833a:	4607      	mov	r7, r0
    833c:	4688      	mov	r8, r1
    833e:	4614      	mov	r4, r2
    8340:	469a      	mov	sl, r3
  *result = {};
    8342:	2240      	movs	r2, #64	; 0x40
    8344:	2100      	movs	r1, #0
    8346:	4628      	mov	r0, r5
    8348:	f007 ff32 	bl	101b0 <memset>
    return data_ - ReadScalar<soffset_t>(data_);
    834c:	4620      	mov	r0, r4
    834e:	f005 fc4b 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8352:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8354:	4630      	mov	r0, r6
    8356:	f005 fc4d 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    835a:	2806      	cmp	r0, #6
    835c:	d913      	bls.n	8386 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    835e:	1db0      	adds	r0, r6, #6
    8360:	f005 fc48 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8364:	b188      	cbz	r0, 838a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5e>
    8366:	4420      	add	r0, r4
    8368:	f006 fe61 	bl	f02e <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    836c:	464a      	mov	r2, r9
    836e:	4629      	mov	r1, r5
    8370:	b2c0      	uxtb	r0, r0
    8372:	f000 ff53 	bl	921c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    8376:	4606      	mov	r6, r0
    8378:	b148      	cbz	r0, 838e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x62>
}
    837a:	4630      	mov	r0, r6
    837c:	b003      	add	sp, #12
    837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(result != nullptr);
    8382:	f007 feef 	bl	10164 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8386:	2000      	movs	r0, #0
    8388:	e7ec      	b.n	8364 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    838a:	2000      	movs	r0, #0
    838c:	e7ee      	b.n	836c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    838e:	4620      	mov	r0, r4
    8390:	f005 fc2a 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8394:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8398:	4658      	mov	r0, fp
    839a:	f005 fc2b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    839e:	280e      	cmp	r0, #14
    83a0:	d93f      	bls.n	8422 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf6>
    83a2:	f10b 000e 	add.w	r0, fp, #14
    83a6:	f005 fc25 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    83aa:	b118      	cbz	r0, 83b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x88>
    83ac:	4420      	add	r0, r4
    83ae:	f006 ff01 	bl	f1b4 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    83b2:	4606      	mov	r6, r0
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    83b4:	3e00      	subs	r6, #0
    83b6:	bf18      	it	ne
    83b8:	2601      	movne	r6, #1
  result->is_variable = flatbuffer_tensor.is_variable();
    83ba:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    83be:	4651      	mov	r1, sl
    83c0:	4620      	mov	r0, r4
    83c2:	f7ff faed 	bl	79a0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    83c6:	6068      	str	r0, [r5, #4]
  if (result->data.data == nullptr) {
    83c8:	b368      	cbz	r0, 8426 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
    result->allocation_type = kTfLiteMmapRo;
    83ca:	2301      	movs	r3, #1
    83cc:	752b      	strb	r3, [r5, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    83ce:	464b      	mov	r3, r9
    83d0:	aa01      	add	r2, sp, #4
    83d2:	f105 0118 	add.w	r1, r5, #24
    83d6:	4620      	mov	r0, r4
    83d8:	f7fd fe6a 	bl	60b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    83dc:	4606      	mov	r6, r0
    83de:	2800      	cmp	r0, #0
    83e0:	d1cb      	bne.n	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    83e2:	4620      	mov	r0, r4
    83e4:	f005 fc00 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    83e8:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    83ec:	4650      	mov	r0, sl
    83ee:	f005 fc01 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83f2:	2804      	cmp	r0, #4
    83f4:	d91a      	bls.n	842c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    83f6:	f10a 0004 	add.w	r0, sl, #4
    83fa:	f005 fbfb 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    83fe:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8402:	b1a8      	cbz	r0, 8430 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    8404:	4650      	mov	r0, sl
    8406:	f005 fbe9 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    840a:	eb0a 0200 	add.w	r2, sl, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    840e:	b18a      	cbz	r2, 8434 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8410:	f105 0308 	add.w	r3, r5, #8
    8414:	4649      	mov	r1, r9
    8416:	4638      	mov	r0, r7
    8418:	f007 f905 	bl	f626 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    841c:	b160      	cbz	r0, 8438 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10c>
    841e:	4606      	mov	r6, r0
    8420:	e7ab      	b.n	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8422:	2000      	movs	r0, #0
    8424:	e7c1      	b.n	83aa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    result->allocation_type = kTfLiteArenaRw;
    8426:	2302      	movs	r3, #2
    8428:	752b      	strb	r3, [r5, #20]
    842a:	e7d0      	b.n	83ce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    842c:	2000      	movs	r0, #0
    842e:	e7e6      	b.n	83fe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8430:	2200      	movs	r2, #0
    8432:	e7ec      	b.n	840e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8434:	4bb6      	ldr	r3, [pc, #728]	; (8710 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e4>)
    8436:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8438:	4620      	mov	r0, r4
    843a:	f005 fbd5 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    843e:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8442:	4650      	mov	r0, sl
    8444:	f005 fbd6 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8448:	280c      	cmp	r0, #12
    844a:	d91a      	bls.n	8482 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x156>
    844c:	f10a 000c 	add.w	r0, sl, #12
    8450:	f005 fbd0 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8454:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8456:	b1b0      	cbz	r0, 8486 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15a>
    8458:	4620      	mov	r0, r4
    845a:	f005 fbbf 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    845e:	4404      	add	r4, r0
      src_quantization->zero_point() &&
    8460:	2c00      	cmp	r4, #0
    8462:	d08a      	beq.n	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    8464:	46a2      	mov	sl, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8466:	4620      	mov	r0, r4
    8468:	f005 fbbe 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    846c:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    846e:	4620      	mov	r0, r4
    8470:	f005 fbc0 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8474:	2808      	cmp	r0, #8
    8476:	d908      	bls.n	848a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
    8478:	f104 0008 	add.w	r0, r4, #8
    847c:	f005 fbba 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8480:	e004      	b.n	848c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x160>
    8482:	2000      	movs	r0, #0
    8484:	e7e6      	b.n	8454 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x128>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8486:	2400      	movs	r4, #0
    8488:	e7ea      	b.n	8460 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    848a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    848c:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8490:	2800      	cmp	r0, #0
    8492:	d060      	beq.n	8556 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22a>
    8494:	4620      	mov	r0, r4
    8496:	f005 fba1 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    849a:	4404      	add	r4, r0
  if (src_quantization && src_quantization->scale() &&
    849c:	2c00      	cmp	r4, #0
    849e:	f43f af6c 	beq.w	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    84a2:	6820      	ldr	r0, [r4, #0]
    84a4:	f005 fb99 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    84a8:	2800      	cmp	r0, #0
    84aa:	f43f af66 	beq.w	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    84ae:	4650      	mov	r0, sl
    84b0:	f005 fb9a 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    84b4:	ebaa 0b00 	sub.w	fp, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    84b8:	4658      	mov	r0, fp
    84ba:	f005 fb9b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84be:	280a      	cmp	r0, #10
    84c0:	d94b      	bls.n	855a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
    84c2:	f10b 000a 	add.w	r0, fp, #10
    84c6:	f005 fb95 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    84ca:	eb0a 0b00 	add.w	fp, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84ce:	2800      	cmp	r0, #0
    84d0:	d045      	beq.n	855e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
    84d2:	4658      	mov	r0, fp
    84d4:	f005 fb82 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    84d8:	4458      	add	r0, fp
      (src_quantization->scale()->size() > 0) &&
    84da:	2800      	cmp	r0, #0
    84dc:	f43f af4d 	beq.w	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    84e0:	6800      	ldr	r0, [r0, #0]
    84e2:	f005 fb7a 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      src_quantization->zero_point() &&
    84e6:	2800      	cmp	r0, #0
    84e8:	f43f af47 	beq.w	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    84ec:	6820      	ldr	r0, [r4, #0]
    84ee:	f005 fb74 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    84f2:	b3b0      	cbz	r0, 8562 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x236>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    84f4:	6860      	ldr	r0, [r4, #4]
    84f6:	f006 fe63 	bl	f1c0 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
    result->params.scale = src_quantization->scale()->Get(0);
    84fa:	60e8      	str	r0, [r5, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    84fc:	4650      	mov	r0, sl
    84fe:	f005 fb73 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8502:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8506:	4620      	mov	r0, r4
    8508:	f005 fb74 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    850c:	280a      	cmp	r0, #10
    850e:	d92f      	bls.n	8570 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    8510:	f104 000a 	add.w	r0, r4, #10
    8514:	f005 fb6e 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8518:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    851c:	b350      	cbz	r0, 8574 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    851e:	4620      	mov	r0, r4
    8520:	f005 fb5c 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8524:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8526:	6820      	ldr	r0, [r4, #0]
    8528:	f005 fb57 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    852c:	b320      	cbz	r0, 8578 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    852e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    8532:	f006 fe44 	bl	f1be <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    result->params.zero_point =
    8536:	6128      	str	r0, [r5, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8538:	4650      	mov	r0, sl
    853a:	f005 fb55 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    853e:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8542:	4620      	mov	r0, r4
    8544:	f005 fb56 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8548:	2808      	cmp	r0, #8
    854a:	d91c      	bls.n	8586 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25a>
    854c:	f104 0008 	add.w	r0, r4, #8
    8550:	f005 fb50 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8554:	e018      	b.n	8588 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8556:	2400      	movs	r4, #0
    8558:	e7a0      	b.n	849c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    855a:	2000      	movs	r0, #0
    855c:	e7b5      	b.n	84ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    855e:	2000      	movs	r0, #0
    8560:	e7bb      	b.n	84da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ae>
    FLATBUFFERS_ASSERT(i < size());
    8562:	4b6c      	ldr	r3, [pc, #432]	; (8714 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8564:	4a6c      	ldr	r2, [pc, #432]	; (8718 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ec>)
    8566:	f44f 7183 	mov.w	r1, #262	; 0x106
    856a:	486c      	ldr	r0, [pc, #432]	; (871c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    856c:	f004 f8ea 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8570:	2000      	movs	r0, #0
    8572:	e7d1      	b.n	8518 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8574:	2400      	movs	r4, #0
    8576:	e7d6      	b.n	8526 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fa>
    FLATBUFFERS_ASSERT(i < size());
    8578:	4b66      	ldr	r3, [pc, #408]	; (8714 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    857a:	4a69      	ldr	r2, [pc, #420]	; (8720 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    857c:	f44f 7183 	mov.w	r1, #262	; 0x106
    8580:	4866      	ldr	r0, [pc, #408]	; (871c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8582:	f004 f8df 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8586:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8588:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    858c:	b390      	cbz	r0, 85f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>
    858e:	4620      	mov	r0, r4
    8590:	f005 fb24 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8594:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8596:	6820      	ldr	r0, [r4, #0]
    8598:	f005 fb1f 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    859c:	4604      	mov	r4, r0
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    859e:	f1b8 0f00 	cmp.w	r8, #0
    85a2:	d029      	beq.n	85f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>
                                          alignof(TfLiteAffineQuantization)))
    85a4:	683b      	ldr	r3, [r7, #0]
    85a6:	691b      	ldr	r3, [r3, #16]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    85a8:	2204      	movs	r2, #4
    85aa:	210c      	movs	r1, #12
    85ac:	4638      	mov	r0, r7
    85ae:	4798      	blx	r3
    85b0:	4683      	mov	fp, r0
    if (quantization == nullptr) {
    85b2:	f1bb 0f00 	cmp.w	fp, #0
    85b6:	d027      	beq.n	8608 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    85b8:	f1b8 0f00 	cmp.w	r8, #0
    85bc:	d02a      	beq.n	8614 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
                  alignof(TfLiteIntArray)))
    85be:	683b      	ldr	r3, [r7, #0]
    85c0:	691e      	ldr	r6, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    85c2:	4620      	mov	r0, r4
    85c4:	f007 f9c1 	bl	f94a <TfLiteIntArrayGetSizeInBytes>
    85c8:	4601      	mov	r1, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    85ca:	2204      	movs	r2, #4
    85cc:	4638      	mov	r0, r7
    85ce:	47b0      	blx	r6
    quantization->zero_point =
    85d0:	f8cb 0004 	str.w	r0, [fp, #4]
    if (quantization->zero_point == nullptr) {
    85d4:	b340      	cbz	r0, 8628 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2fc>
    return data_ - ReadScalar<soffset_t>(data_);
    85d6:	4650      	mov	r0, sl
    85d8:	f005 fb06 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85dc:	ebaa 0600 	sub.w	r6, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    85e0:	4630      	mov	r0, r6
    85e2:	f005 fb07 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85e6:	2808      	cmp	r0, #8
    85e8:	d924      	bls.n	8634 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    85ea:	f106 0008 	add.w	r0, r6, #8
    85ee:	f005 fb01 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    85f2:	e020      	b.n	8636 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x30a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85f4:	2400      	movs	r4, #0
    85f6:	e7ce      	b.n	8596 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
                      alignof(TfLiteAffineQuantization)));
    85f8:	683b      	ldr	r3, [r7, #0]
    85fa:	68db      	ldr	r3, [r3, #12]
                  allocator->AllocateFromTail(
    85fc:	2204      	movs	r2, #4
    85fe:	210c      	movs	r1, #12
    8600:	4638      	mov	r0, r7
    8602:	4798      	blx	r3
    8604:	4683      	mov	fp, r0
    8606:	e7d4      	b.n	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      TF_LITE_REPORT_ERROR(error_reporter,
    8608:	4946      	ldr	r1, [pc, #280]	; (8724 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f8>)
    860a:	4648      	mov	r0, r9
    860c:	f007 f9fe 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8610:	2601      	movs	r6, #1
    8612:	e6b2      	b.n	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
                  alignof(TfLiteIntArray)));
    8614:	683b      	ldr	r3, [r7, #0]
    8616:	68de      	ldr	r6, [r3, #12]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8618:	4620      	mov	r0, r4
    861a:	f007 f996 	bl	f94a <TfLiteIntArrayGetSizeInBytes>
    861e:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8620:	2204      	movs	r2, #4
    8622:	4638      	mov	r0, r7
    8624:	47b0      	blx	r6
    8626:	e7d3      	b.n	85d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a4>
      TF_LITE_REPORT_ERROR(error_reporter,
    8628:	493f      	ldr	r1, [pc, #252]	; (8728 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3fc>)
    862a:	4648      	mov	r0, r9
    862c:	f007 f9ee 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8630:	2601      	movs	r6, #1
    8632:	e6a2      	b.n	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8634:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8636:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    863a:	b1b0      	cbz	r0, 866a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x33e>
    863c:	4630      	mov	r0, r6
    863e:	f005 facd 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8642:	1832      	adds	r2, r6, r0
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8644:	465b      	mov	r3, fp
    8646:	4649      	mov	r1, r9
    8648:	4638      	mov	r0, r7
    864a:	f006 fffe 	bl	f64a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    864e:	4606      	mov	r6, r0
    8650:	2800      	cmp	r0, #0
    8652:	f47f ae92 	bne.w	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    quantization->zero_point->size = channels;
    8656:	f8db 3004 	ldr.w	r3, [fp, #4]
    865a:	601c      	str	r4, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
    865c:	f8db 3004 	ldr.w	r3, [fp, #4]
    8660:	f103 0904 	add.w	r9, r3, #4
    for (int i = 0; i < channels; i++) {
    8664:	f04f 0800 	mov.w	r8, #0
    8668:	e019      	b.n	869e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x372>
    866a:	2200      	movs	r2, #0
    866c:	e7ea      	b.n	8644 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x318>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    866e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8670:	eb0a 0700 	add.w	r7, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8674:	b320      	cbz	r0, 86c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x394>
    8676:	4638      	mov	r0, r7
    8678:	f005 fab0 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    867c:	4407      	add	r7, r0
  uoffset_t size() const { return EndianScalar(length_); }
    867e:	6838      	ldr	r0, [r7, #0]
    8680:	f005 faab 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8684:	4580      	cmp	r8, r0
    8686:	d21d      	bcs.n	86c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x398>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8688:	3704      	adds	r7, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    868a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    868e:	e9d7 0100 	ldrd	r0, r1, [r7]
    8692:	f006 fd94 	bl	f1be <_ZN11flatbuffers12EndianScalarIxEET_S1_>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    8696:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
    for (int i = 0; i < channels; i++) {
    869a:	f108 0801 	add.w	r8, r8, #1
    869e:	45a0      	cmp	r8, r4
    86a0:	da17      	bge.n	86d2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a6>
    return data_ - ReadScalar<soffset_t>(data_);
    86a2:	4650      	mov	r0, sl
    86a4:	f005 faa0 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86a8:	ebaa 0700 	sub.w	r7, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86ac:	4638      	mov	r0, r7
    86ae:	f005 faa1 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86b2:	280a      	cmp	r0, #10
    86b4:	d9db      	bls.n	866e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x342>
    86b6:	f107 000a 	add.w	r0, r7, #10
    86ba:	f005 fa9b 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    86be:	e7d7      	b.n	8670 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x344>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86c0:	2700      	movs	r7, #0
    86c2:	e7dc      	b.n	867e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x352>
    FLATBUFFERS_ASSERT(i < size());
    86c4:	4b13      	ldr	r3, [pc, #76]	; (8714 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    86c6:	4a16      	ldr	r2, [pc, #88]	; (8720 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    86c8:	f44f 7183 	mov.w	r1, #262	; 0x106
    86cc:	4813      	ldr	r0, [pc, #76]	; (871c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    86ce:	f004 f839 	bl	c744 <__assert_func>
    return data_ - ReadScalar<soffset_t>(data_);
    86d2:	4650      	mov	r0, sl
    86d4:	f005 fa88 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86d8:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86dc:	4620      	mov	r0, r4
    86de:	f005 fa89 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86e2:	2810      	cmp	r0, #16
    86e4:	d90f      	bls.n	8706 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3da>
    86e6:	f104 0010 	add.w	r0, r4, #16
    86ea:	f005 fa83 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    86ee:	b160      	cbz	r0, 870a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3de>
    86f0:	4450      	add	r0, sl
    86f2:	f005 fa79 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    86f6:	f8cb 0008 	str.w	r0, [fp, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    86fa:	2301      	movs	r3, #1
    86fc:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    8700:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    8704:	e639      	b.n	837a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8706:	2000      	movs	r0, #0
    8708:	e7f1      	b.n	86ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    870a:	2000      	movs	r0, #0
    870c:	e7f3      	b.n	86f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ca>
    870e:	bf00      	nop
    8710:	00056f70 	.word	0x00056f70
    8714:	0005563c 	.word	0x0005563c
    8718:	00056ccc 	.word	0x00056ccc
    871c:	00055708 	.word	0x00055708
    8720:	00055a18 	.word	0x00055a18
    8724:	00056d90 	.word	0x00056d90
    8728:	00056dc0 	.word	0x00056dc0

0000872c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
    872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8730:	b082      	sub	sp, #8
    8732:	4607      	mov	r7, r0
    8734:	460e      	mov	r6, r1
    8736:	4690      	mov	r8, r2
    8738:	469a      	mov	sl, r3
    873a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    873c:	f8d0 9004 	ldr.w	r9, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8740:	4608      	mov	r0, r1
    8742:	f005 fa51 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8746:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8748:	4628      	mov	r0, r5
    874a:	f005 fa53 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    874e:	2808      	cmp	r0, #8
    8750:	d941      	bls.n	87d6 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xaa>
    8752:	f105 0008 	add.w	r0, r5, #8
    8756:	f005 fa4d 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    875a:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    875c:	b3e8      	cbz	r0, 87da <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xae>
    875e:	4628      	mov	r0, r5
    8760:	f005 fa3c 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8764:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8766:	6828      	ldr	r0, [r5, #0]
    8768:	f005 fa37 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    876c:	4284      	cmp	r4, r0
    876e:	d236      	bcs.n	87de <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8770:	3504      	adds	r5, #4
    p += i * sizeof(uoffset_t);
    8772:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8776:	4620      	mov	r0, r4
    8778:	f005 fa30 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    877c:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    877e:	4620      	mov	r0, r4
    8780:	f005 fa32 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8784:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8786:	4628      	mov	r0, r5
    8788:	f005 fa34 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    878c:	2804      	cmp	r0, #4
    878e:	d92d      	bls.n	87ec <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
    8790:	1d28      	adds	r0, r5, #4
    8792:	f005 fa2f 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8796:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8798:	b350      	cbz	r0, 87f0 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc4>
    879a:	4620      	mov	r0, r4
    879c:	f005 fa1e 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87a0:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    87a2:	6820      	ldr	r0, [r4, #0]
    87a4:	f005 fa19 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    87a8:	4582      	cmp	sl, r0
    87aa:	d223      	bcs.n	87f4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    87ac:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    87ae:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    87b2:	4620      	mov	r0, r4
    87b4:	f005 fa12 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87b8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    87ba:	4630      	mov	r0, r6
    87bc:	f005 fa14 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    87c0:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    87c2:	4628      	mov	r0, r5
    87c4:	f005 fa16 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87c8:	280c      	cmp	r0, #12
    87ca:	d91a      	bls.n	8802 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd6>
    87cc:	f105 000c 	add.w	r0, r5, #12
    87d0:	f005 fa10 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    87d4:	e016      	b.n	8804 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd8>
    87d6:	2000      	movs	r0, #0
    87d8:	e7bf      	b.n	875a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x2e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87da:	2500      	movs	r5, #0
    87dc:	e7c3      	b.n	8766 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    87de:	4b14      	ldr	r3, [pc, #80]	; (8830 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    87e0:	4a14      	ldr	r2, [pc, #80]	; (8834 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x108>)
    87e2:	f44f 7183 	mov.w	r1, #262	; 0x106
    87e6:	4814      	ldr	r0, [pc, #80]	; (8838 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    87e8:	f003 ffac 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87ec:	2000      	movs	r0, #0
    87ee:	e7d2      	b.n	8796 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87f0:	2400      	movs	r4, #0
    87f2:	e7d6      	b.n	87a2 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x76>
    FLATBUFFERS_ASSERT(i < size());
    87f4:	4b0e      	ldr	r3, [pc, #56]	; (8830 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    87f6:	4a11      	ldr	r2, [pc, #68]	; (883c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x110>)
    87f8:	f44f 7183 	mov.w	r1, #262	; 0x106
    87fc:	480e      	ldr	r0, [pc, #56]	; (8838 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    87fe:	f003 ffa1 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8802:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8804:	4406      	add	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8806:	b180      	cbz	r0, 882a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xfe>
    8808:	4630      	mov	r0, r6
    880a:	f005 f9e7 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    880e:	1833      	adds	r3, r6, r0
    8810:	f8cd 8004 	str.w	r8, [sp, #4]
    8814:	68fa      	ldr	r2, [r7, #12]
    8816:	9200      	str	r2, [sp, #0]
    8818:	4622      	mov	r2, r4
    881a:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    881e:	4648      	mov	r0, r9
    8820:	f7ff fd84 	bl	832c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
      model->buffers(), error_reporter_, tensor);
}
    8824:	b002      	add	sp, #8
    8826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    882a:	2300      	movs	r3, #0
    882c:	e7f0      	b.n	8810 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xe4>
    882e:	bf00      	nop
    8830:	0005563c 	.word	0x0005563c
    8834:	0005578c 	.word	0x0005578c
    8838:	00055708 	.word	0x00055708
    883c:	00055924 	.word	0x00055924

00008840 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    8840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8844:	4680      	mov	r8, r0
    8846:	460c      	mov	r4, r1
    8848:	4691      	mov	r9, r2
    884a:	461f      	mov	r7, r3
    884c:	9d08      	ldr	r5, [sp, #32]
  *result = {};
    884e:	2300      	movs	r3, #0
    8850:	602b      	str	r3, [r5, #0]
    8852:	606b      	str	r3, [r5, #4]
    8854:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8856:	4608      	mov	r0, r1
    8858:	f005 f9c6 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    885c:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    885e:	4630      	mov	r0, r6
    8860:	f005 f9c8 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8864:	2806      	cmp	r0, #6
    8866:	d911      	bls.n	888c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    8868:	1db0      	adds	r0, r6, #6
    886a:	f005 f9c3 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    886e:	b178      	cbz	r0, 8890 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x50>
    8870:	4420      	add	r0, r4
    8872:	f006 fbdc 	bl	f02e <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8876:	463a      	mov	r2, r7
    8878:	f105 0108 	add.w	r1, r5, #8
    887c:	b2c0      	uxtb	r0, r0
    887e:	f000 fccd 	bl	921c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    8882:	4606      	mov	r6, r0
    8884:	b130      	cbz	r0, 8894 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
}
    8886:	4630      	mov	r0, r6
    8888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    888c:	2000      	movs	r0, #0
    888e:	e7ee      	b.n	886e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8890:	2000      	movs	r0, #0
    8892:	e7f0      	b.n	8876 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x36>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8894:	4649      	mov	r1, r9
    8896:	4620      	mov	r0, r4
    8898:	f7ff f882 	bl	79a0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    889c:	6028      	str	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    889e:	4620      	mov	r0, r4
    88a0:	f005 f9a2 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    88a4:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    88a8:	4648      	mov	r0, r9
    88aa:	f005 f9a3 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88ae:	2804      	cmp	r0, #4
    88b0:	d911      	bls.n	88d6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x96>
    88b2:	f109 0004 	add.w	r0, r9, #4
    88b6:	f005 f99d 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    88ba:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88bc:	b168      	cbz	r0, 88da <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9a>
    88be:	4620      	mov	r0, r4
    88c0:	f005 f98c 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    88c4:	1822      	adds	r2, r4, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    88c6:	b152      	cbz	r2, 88de <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9e>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    88c8:	1d2b      	adds	r3, r5, #4
    88ca:	4639      	mov	r1, r7
    88cc:	4640      	mov	r0, r8
    88ce:	f006 feaa 	bl	f626 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    88d2:	4606      	mov	r6, r0
    88d4:	e7d7      	b.n	8886 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88d6:	2000      	movs	r0, #0
    88d8:	e7ef      	b.n	88ba <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88da:	2200      	movs	r2, #0
    88dc:	e7f3      	b.n	88c6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x86>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    88de:	4b01      	ldr	r3, [pc, #4]	; (88e4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0xa4>)
    88e0:	606b      	str	r3, [r5, #4]
    88e2:	e7d0      	b.n	8886 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    88e4:	00056f70 	.word	0x00056f70

000088e8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    88e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88ec:	b087      	sub	sp, #28
    88ee:	9104      	str	r1, [sp, #16]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    88f0:	9205      	str	r2, [sp, #20]
    88f2:	b192      	cbz	r2, 891a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x32>
    88f4:	4683      	mov	fp, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    88f6:	2300      	movs	r3, #0
    88f8:	9303      	str	r3, [sp, #12]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    88fa:	9c04      	ldr	r4, [sp, #16]
    88fc:	46a0      	mov	r8, r4
    return data_ - ReadScalar<soffset_t>(data_);
    88fe:	4620      	mov	r0, r4
    8900:	f005 f972 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8904:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8906:	4620      	mov	r0, r4
    8908:	f005 f974 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    890c:	2808      	cmp	r0, #8
    890e:	d906      	bls.n	891e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x36>
    8910:	f104 0008 	add.w	r0, r4, #8
    8914:	f005 f96e 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8918:	e002      	b.n	8920 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    891a:	f007 fc23 	bl	10164 <abort>
    891e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8920:	9b04      	ldr	r3, [sp, #16]
    8922:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8924:	2800      	cmp	r0, #0
    8926:	d03d      	beq.n	89a4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>
    8928:	4620      	mov	r0, r4
    892a:	f005 f957 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    892e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8930:	6820      	ldr	r0, [r4, #0]
    8932:	f005 f952 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8936:	9d03      	ldr	r5, [sp, #12]
    8938:	4285      	cmp	r5, r0
    893a:	f080 80b3 	bcs.w	8aa4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1bc>
    893e:	6820      	ldr	r0, [r4, #0]
    8940:	f005 f94b 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8944:	4285      	cmp	r5, r0
    8946:	d22f      	bcs.n	89a8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8948:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    894a:	9b03      	ldr	r3, [sp, #12]
    894c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8950:	4620      	mov	r0, r4
    8952:	f005 f943 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    8956:	1824      	adds	r4, r4, r0
    8958:	d02d      	beq.n	89b6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xce>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    895a:	4627      	mov	r7, r4
    return data_ - ReadScalar<soffset_t>(data_);
    895c:	4620      	mov	r0, r4
    895e:	f005 f943 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8962:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8964:	4628      	mov	r0, r5
    8966:	f005 f945 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    896a:	2804      	cmp	r0, #4
    896c:	d925      	bls.n	89ba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
    896e:	1d28      	adds	r0, r5, #4
    8970:	f005 f940 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8974:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8976:	b310      	cbz	r0, 89be <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd6>
    8978:	4620      	mov	r0, r4
    897a:	f005 f92f 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    897e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8980:	6820      	ldr	r0, [r4, #0]
    8982:	f005 f92a 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8986:	4682      	mov	sl, r0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8988:	f8db 0004 	ldr.w	r0, [fp, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    898c:	6803      	ldr	r3, [r0, #0]
    898e:	68db      	ldr	r3, [r3, #12]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8990:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8994:	0089      	lsls	r1, r1, #2
    8996:	460c      	mov	r4, r1
    8998:	2204      	movs	r2, #4
    899a:	4798      	blx	r3
    if (tensors == nullptr) {
    899c:	9002      	str	r0, [sp, #8]
    899e:	b180      	cbz	r0, 89c2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    for (size_t i = 0; i < alloc_count; ++i) {
    89a0:	2500      	movs	r5, #0
    89a2:	e038      	b.n	8a16 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89a4:	2400      	movs	r4, #0
    89a6:	e7c3      	b.n	8930 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
    FLATBUFFERS_ASSERT(i < size());
    89a8:	4b3f      	ldr	r3, [pc, #252]	; (8aa8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    89aa:	4a40      	ldr	r2, [pc, #256]	; (8aac <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c4>)
    89ac:	f44f 7183 	mov.w	r1, #262	; 0x106
    89b0:	483f      	ldr	r0, [pc, #252]	; (8ab0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    89b2:	f003 fec7 	bl	c744 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    89b6:	f007 fbd5 	bl	10164 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89ba:	2000      	movs	r0, #0
    89bc:	e7da      	b.n	8974 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89be:	2400      	movs	r4, #0
    89c0:	e7de      	b.n	8980 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x98>
      TF_LITE_REPORT_ERROR(
    89c2:	4622      	mov	r2, r4
    89c4:	493b      	ldr	r1, [pc, #236]	; (8ab4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1cc>)
    89c6:	f8db 000c 	ldr.w	r0, [fp, #12]
    89ca:	f007 f81f 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    89ce:	2001      	movs	r0, #1
    89d0:	e05c      	b.n	8a8c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89d2:	2000      	movs	r0, #0
    89d4:	e02f      	b.n	8a36 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89d6:	2400      	movs	r4, #0
    89d8:	e034      	b.n	8a44 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15c>
    FLATBUFFERS_ASSERT(i < size());
    89da:	4b33      	ldr	r3, [pc, #204]	; (8aa8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    89dc:	4a36      	ldr	r2, [pc, #216]	; (8ab8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d0>)
    89de:	f44f 7183 	mov.w	r1, #262	; 0x106
    89e2:	4833      	ldr	r0, [pc, #204]	; (8ab0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    89e4:	f003 feae 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89e8:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    89ea:	eb08 0600 	add.w	r6, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89ee:	2800      	cmp	r0, #0
    89f0:	d043      	beq.n	8a7a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x192>
    89f2:	4630      	mov	r0, r6
    89f4:	f005 f8f2 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    89f8:	1832      	adds	r2, r6, r0
          error_reporter_, &tensors[i]);
    89fa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    89fe:	9902      	ldr	r1, [sp, #8]
    8a00:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8a04:	9300      	str	r3, [sp, #0]
    8a06:	f8db 300c 	ldr.w	r3, [fp, #12]
    8a0a:	4621      	mov	r1, r4
    8a0c:	4648      	mov	r0, r9
    8a0e:	f7ff ff17 	bl	8840 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    8a12:	bba0      	cbnz	r0, 8a7e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x196>
    for (size_t i = 0; i < alloc_count; ++i) {
    8a14:	3501      	adds	r5, #1
    8a16:	4555      	cmp	r5, sl
    8a18:	d23b      	bcs.n	8a92 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1aa>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8a1a:	f8db 9004 	ldr.w	r9, [fp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8a1e:	4638      	mov	r0, r7
    8a20:	f005 f8e2 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a24:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a26:	4620      	mov	r0, r4
    8a28:	f005 f8e4 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a2c:	2804      	cmp	r0, #4
    8a2e:	d9d0      	bls.n	89d2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xea>
    8a30:	1d20      	adds	r0, r4, #4
    8a32:	f005 f8df 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8a36:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a38:	2800      	cmp	r0, #0
    8a3a:	d0cc      	beq.n	89d6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xee>
    8a3c:	4620      	mov	r0, r4
    8a3e:	f005 f8cd 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a42:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8a44:	6820      	ldr	r0, [r4, #0]
    8a46:	f005 f8c8 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8a4a:	4285      	cmp	r5, r0
    8a4c:	d2c5      	bcs.n	89da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8a4e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8a50:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8a54:	4620      	mov	r0, r4
    8a56:	f005 f8c1 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a5a:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8a5c:	4640      	mov	r0, r8
    8a5e:	f005 f8c3 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a62:	eba8 0600 	sub.w	r6, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a66:	4630      	mov	r0, r6
    8a68:	f005 f8c4 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a6c:	280c      	cmp	r0, #12
    8a6e:	d9bb      	bls.n	89e8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x100>
    8a70:	f106 000c 	add.w	r0, r6, #12
    8a74:	f005 f8be 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8a78:	e7b7      	b.n	89ea <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a7a:	2200      	movs	r2, #0
    8a7c:	e7bd      	b.n	89fa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    8a7e:	462a      	mov	r2, r5
    8a80:	490e      	ldr	r1, [pc, #56]	; (8abc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d4>)
    8a82:	f8db 000c 	ldr.w	r0, [fp, #12]
    8a86:	f006 ffc1 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    8a8a:	2001      	movs	r0, #1
}
    8a8c:	b007      	add	sp, #28
    8a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    subgraph_allocations[subgraph_idx].tensors = tensors;
    8a92:	9b05      	ldr	r3, [sp, #20]
    8a94:	9a03      	ldr	r2, [sp, #12]
    8a96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8a9a:	9902      	ldr	r1, [sp, #8]
    8a9c:	6059      	str	r1, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8a9e:	1c53      	adds	r3, r2, #1
    8aa0:	9303      	str	r3, [sp, #12]
    8aa2:	e72a      	b.n	88fa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
    8aa4:	2000      	movs	r0, #0
    8aa6:	e7f1      	b.n	8a8c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    8aa8:	0005563c 	.word	0x0005563c
    8aac:	0005578c 	.word	0x0005578c
    8ab0:	00055708 	.word	0x00055708
    8ab4:	00056df0 	.word	0x00056df0
    8ab8:	00055924 	.word	0x00055924
    8abc:	00056e38 	.word	0x00056e38

00008ac0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    8ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ac4:	b093      	sub	sp, #76	; 0x4c
    8ac6:	4606      	mov	r6, r0
    8ac8:	460f      	mov	r7, r1
    8aca:	4690      	mov	r8, r2
    8acc:	4699      	mov	r9, r3
    8ace:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8ad2:	4608      	mov	r0, r1
    8ad4:	f005 f888 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8ad8:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8ada:	4620      	mov	r0, r4
    8adc:	f005 f88a 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ae0:	2808      	cmp	r0, #8
    8ae2:	d948      	bls.n	8b76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb6>
    8ae4:	f104 0008 	add.w	r0, r4, #8
    8ae8:	f005 f884 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8aec:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8aee:	2800      	cmp	r0, #0
    8af0:	d043      	beq.n	8b7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xba>
    8af2:	4620      	mov	r0, r4
    8af4:	f005 f872 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8af8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8afa:	6820      	ldr	r0, [r4, #0]
    8afc:	f005 f86d 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8b00:	4582      	cmp	sl, r0
    8b02:	d23c      	bcs.n	8b7e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xbe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8b04:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8b06:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8b0a:	4620      	mov	r0, r4
    8b0c:	f005 f866 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b10:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8b12:	4620      	mov	r0, r4
    8b14:	f005 f868 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b18:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b1a:	4628      	mov	r0, r5
    8b1c:	f005 f86a 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b20:	2804      	cmp	r0, #4
    8b22:	d933      	bls.n	8b8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xcc>
    8b24:	1d28      	adds	r0, r5, #4
    8b26:	f005 f865 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8b2a:	1825      	adds	r5, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b2c:	b380      	cbz	r0, 8b90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd0>
    8b2e:	4628      	mov	r0, r5
    8b30:	f005 f854 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b34:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8b36:	6828      	ldr	r0, [r5, #0]
    8b38:	f005 f84f 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    8b3c:	6973      	ldr	r3, [r6, #20]
    8b3e:	18c5      	adds	r5, r0, r3
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    8b40:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
    8b44:	ea4f 0aca 	mov.w	sl, sl, lsl #3

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    8b48:	6870      	ldr	r0, [r6, #4]
    8b4a:	6803      	ldr	r3, [r0, #0]
    8b4c:	691b      	ldr	r3, [r3, #16]
    8b4e:	2204      	movs	r2, #4
    8b50:	4651      	mov	r1, sl
    8b52:	4798      	blx	r3
  if (allocation_info == nullptr) {
    8b54:	4683      	mov	fp, r0
    8b56:	b1e8      	cbz	r0, 8b94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd4>
    return data_ - ReadScalar<soffset_t>(data_);
    8b58:	4620      	mov	r0, r4
    8b5a:	f005 f845 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b5e:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b62:	4650      	mov	r0, sl
    8b64:	f005 f846 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b68:	2804      	cmp	r0, #4
    8b6a:	d91a      	bls.n	8ba2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe2>
    8b6c:	f10a 0004 	add.w	r0, sl, #4
    8b70:	f005 f840 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8b74:	e016      	b.n	8ba4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe4>
    8b76:	2000      	movs	r0, #0
    8b78:	e7b8      	b.n	8aec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b7a:	2400      	movs	r4, #0
    8b7c:	e7bd      	b.n	8afa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8b7e:	4b55      	ldr	r3, [pc, #340]	; (8cd4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x214>)
    8b80:	4a55      	ldr	r2, [pc, #340]	; (8cd8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x218>)
    8b82:	f44f 7183 	mov.w	r1, #262	; 0x106
    8b86:	4855      	ldr	r0, [pc, #340]	; (8cdc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21c>)
    8b88:	f003 fddc 	bl	c744 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b8c:	2000      	movs	r0, #0
    8b8e:	e7cc      	b.n	8b2a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b90:	2500      	movs	r5, #0
    8b92:	e7d0      	b.n	8b36 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x76>
    TF_LITE_REPORT_ERROR(
    8b94:	4652      	mov	r2, sl
    8b96:	4952      	ldr	r1, [pc, #328]	; (8ce0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x220>)
    8b98:	68f0      	ldr	r0, [r6, #12]
    8b9a:	f006 ff37 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
    8b9e:	2701      	movs	r7, #1
    8ba0:	e01b      	b.n	8bda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ba2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8ba4:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ba8:	b1d8      	cbz	r0, 8be2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x122>
    8baa:	4650      	mov	r0, sl
    8bac:	f005 f816 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8bb0:	4482      	add	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8bb2:	f8da 0000 	ldr.w	r0, [sl]
    8bb6:	f005 f810 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
                                scratch_buffer_request_count_, error_reporter_);
    8bba:	6972      	ldr	r2, [r6, #20]
    8bbc:	68f3      	ldr	r3, [r6, #12]
        reporter_(reporter) {}
    8bbe:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    8bc2:	900f      	str	r0, [sp, #60]	; 0x3c
    8bc4:	9210      	str	r2, [sp, #64]	; 0x40
    8bc6:	9311      	str	r3, [sp, #68]	; 0x44

  const int32_t* offline_planner_offsets = nullptr;
    8bc8:	2300      	movs	r3, #0
    8bca:	930d      	str	r3, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(
    8bcc:	aa0d      	add	r2, sp, #52	; 0x34
    8bce:	4639      	mov	r1, r7
    8bd0:	a80e      	add	r0, sp, #56	; 0x38
    8bd2:	f7ff f813 	bl	7bfc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>
    8bd6:	4607      	mov	r7, r0
    8bd8:	b130      	cbz	r0, 8be8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    8bda:	4638      	mov	r0, r7
    8bdc:	b013      	add	sp, #76	; 0x4c
    8bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8be2:	f04f 0a00 	mov.w	sl, #0
    8be6:	e7e4      	b.n	8bb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
  TF_LITE_ENSURE_STATUS(
    8be8:	4643      	mov	r3, r8
    8bea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8bec:	4621      	mov	r1, r4
    8bee:	a80e      	add	r0, sp, #56	; 0x38
    8bf0:	f7ff f9de 	bl	7fb0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>
    8bf4:	4607      	mov	r7, r0
    8bf6:	2800      	cmp	r0, #0
    8bf8:	d1ef      	bne.n	8bda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      GetScratchBufferRequests();
    8bfa:	4630      	mov	r0, r6
    8bfc:	f006 fcea 	bl	f5d4 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
    8c00:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
    8c02:	464a      	mov	r2, r9
    8c04:	a80e      	add	r0, sp, #56	; 0x38
    8c06:	f006 fbf4 	bl	f3f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
    8c0a:	4607      	mov	r7, r0
    8c0c:	2800      	cmp	r0, #0
    8c0e:	d1e4      	bne.n	8bda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    8c10:	2110      	movs	r1, #16
    8c12:	6870      	ldr	r0, [r6, #4]
    8c14:	f006 f971 	bl	eefa <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    8c18:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    8c1a:	6870      	ldr	r0, [r6, #4]
    8c1c:	6803      	ldr	r3, [r0, #0]
    8c1e:	691b      	ldr	r3, [r3, #16]
    8c20:	2210      	movs	r2, #16
    8c22:	4621      	mov	r1, r4
    8c24:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8c26:	4601      	mov	r1, r0
    8c28:	2800      	cmp	r0, #0
    8c2a:	d036      	beq.n	8c9a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1da>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8c2c:	4622      	mov	r2, r4
    8c2e:	a802      	add	r0, sp, #8
    8c30:	f000 f882 	bl	8d38 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    8c34:	462b      	mov	r3, r5
    8c36:	465a      	mov	r2, fp
    8c38:	a902      	add	r1, sp, #8
    8c3a:	68f0      	ldr	r0, [r6, #12]
    8c3c:	f006 fc60 	bl	f500 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
    8c40:	4607      	mov	r7, r0
    8c42:	2800      	cmp	r0, #0
    8c44:	d141      	bne.n	8cca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  memory_allocator_->ResetTempAllocations();
    8c46:	6870      	ldr	r0, [r6, #4]
    8c48:	6803      	ldr	r3, [r0, #0]
    8c4a:	695b      	ldr	r3, [r3, #20]
    8c4c:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    8c4e:	2110      	movs	r1, #16
    8c50:	6870      	ldr	r0, [r6, #4]
    8c52:	f006 f952 	bl	eefa <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    8c56:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    8c58:	a802      	add	r0, sp, #8
    8c5a:	f006 fe53 	bl	f904 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    8c5e:	42a0      	cmp	r0, r4
    8c60:	d828      	bhi.n	8cb4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    8c62:	68f4      	ldr	r4, [r6, #12]
    8c64:	6870      	ldr	r0, [r6, #4]
    8c66:	f006 f946 	bl	eef6 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    8c6a:	4602      	mov	r2, r0
    8c6c:	9500      	str	r5, [sp, #0]
    8c6e:	465b      	mov	r3, fp
    8c70:	a902      	add	r1, sp, #8
    8c72:	4620      	mov	r0, r4
    8c74:	f006 fbe1 	bl	f43a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
    8c78:	4607      	mov	r7, r0
    8c7a:	bb30      	cbnz	r0, 8cca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  head_usage = planner.GetMaximumMemorySize();
    8c7c:	a802      	add	r0, sp, #8
    8c7e:	f006 fe41 	bl	f904 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    8c82:	69b3      	ldr	r3, [r6, #24]
    8c84:	4283      	cmp	r3, r0
    8c86:	d200      	bcs.n	8c8a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ca>
    max_head_buffer_usage_ = head_usage;
    8c88:	61b0      	str	r0, [r6, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    8c8a:	6870      	ldr	r0, [r6, #4]
    8c8c:	6803      	ldr	r3, [r0, #0]
    8c8e:	689b      	ldr	r3, [r3, #8]
    8c90:	2210      	movs	r2, #16
    8c92:	69b1      	ldr	r1, [r6, #24]
    8c94:	4798      	blx	r3
    8c96:	4607      	mov	r7, r0
    8c98:	e017      	b.n	8cca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8c9a:	68f0      	ldr	r0, [r6, #12]
    8c9c:	4b11      	ldr	r3, [pc, #68]	; (8ce4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x224>)
    8c9e:	9301      	str	r3, [sp, #4]
    8ca0:	f240 33d2 	movw	r3, #978	; 0x3d2
    8ca4:	9300      	str	r3, [sp, #0]
    8ca6:	4b10      	ldr	r3, [pc, #64]	; (8ce8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>)
    8ca8:	4a10      	ldr	r2, [pc, #64]	; (8cec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x22c>)
    8caa:	4601      	mov	r1, r0
    8cac:	f006 febd 	bl	fa2a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    8cb0:	2701      	movs	r7, #1
    8cb2:	e792      	b.n	8bda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    TF_LITE_REPORT_ERROR(
    8cb4:	68f5      	ldr	r5, [r6, #12]
    8cb6:	a802      	add	r0, sp, #8
    8cb8:	f006 fe24 	bl	f904 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    8cbc:	4602      	mov	r2, r0
    8cbe:	4623      	mov	r3, r4
    8cc0:	490b      	ldr	r1, [pc, #44]	; (8cf0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>)
    8cc2:	4628      	mov	r0, r5
    8cc4:	f006 fea2 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8cc8:	2701      	movs	r7, #1
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8cca:	a802      	add	r0, sp, #8
    8ccc:	f006 fcc7 	bl	f65e <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    8cd0:	e783      	b.n	8bda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    8cd2:	bf00      	nop
    8cd4:	0005563c 	.word	0x0005563c
    8cd8:	0005578c 	.word	0x0005578c
    8cdc:	00055708 	.word	0x00055708
    8ce0:	00056e58 	.word	0x00056e58
    8ce4:	00056f04 	.word	0x00056f04
    8ce8:	00056e9c 	.word	0x00056e9c
    8cec:	00056eec 	.word	0x00056eec
    8cf0:	00056f20 	.word	0x00056f20

00008cf4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    8cf4:	b538      	push	{r3, r4, r5, lr}
    8cf6:	4604      	mov	r4, r0
    8cf8:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    8cfa:	68a5      	ldr	r5, [r4, #8]
    8cfc:	6861      	ldr	r1, [r4, #4]
    8cfe:	428d      	cmp	r5, r1
    8d00:	da12      	bge.n	8d28 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
                         max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
    8d02:	68e1      	ldr	r1, [r4, #12]
    8d04:	0128      	lsls	r0, r5, #4
    8d06:	eb01 1505 	add.w	r5, r1, r5, lsl #4
  current->size = size;
    8d0a:	500a      	str	r2, [r1, r0]
  current->first_time_used = first_time_used;
    8d0c:	60ab      	str	r3, [r5, #8]
  current->last_time_used = last_time_used;
    8d0e:	9b04      	ldr	r3, [sp, #16]
    8d10:	60eb      	str	r3, [r5, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    8d12:	f04f 33ff 	mov.w	r3, #4294967295
    8d16:	606b      	str	r3, [r5, #4]
  ++buffer_count_;
    8d18:	68a3      	ldr	r3, [r4, #8]
    8d1a:	3301      	adds	r3, #1
    8d1c:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
    8d1e:	2301      	movs	r3, #1
    8d20:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    8d24:	2000      	movs	r0, #0
}
    8d26:	bd38      	pop	{r3, r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    8d28:	460a      	mov	r2, r1
    8d2a:	4902      	ldr	r1, [pc, #8]	; (8d34 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    8d2c:	f006 fe6e 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8d30:	2001      	movs	r0, #1
    8d32:	e7f8      	b.n	8d26 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x32>
    8d34:	00056fe0 	.word	0x00056fe0

00008d38 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    8d38:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    8d3a:	4c0f      	ldr	r4, [pc, #60]	; (8d78 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
    8d3c:	6004      	str	r4, [r0, #0]
    8d3e:	2400      	movs	r4, #0
    8d40:	6084      	str	r4, [r0, #8]
    8d42:	2401      	movs	r4, #1
    8d44:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    8d48:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    8d4c:	fba4 4202 	umull	r4, r2, r4, r2
    8d50:	0952      	lsrs	r2, r2, #5
    8d52:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    8d54:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    8d56:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    8d5a:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    8d5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    8d60:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    8d62:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    8d66:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    8d68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8d6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    8d70:	6241      	str	r1, [r0, #36]	; 0x24
}
    8d72:	bc10      	pop	{r4}
    8d74:	4770      	bx	lr
    8d76:	bf00      	nop
    8d78:	00057034 	.word	0x00057034

00008d7c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    8d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d7e:	4605      	mov	r5, r0
    8d80:	460f      	mov	r7, r1
    8d82:	4614      	mov	r4, r2
    8d84:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    8d86:	f006 fce2 	bl	f74e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    8d8a:	2c00      	cmp	r4, #0
    8d8c:	db08      	blt.n	8da0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    8d8e:	68ab      	ldr	r3, [r5, #8]
    8d90:	42a3      	cmp	r3, r4
    8d92:	dd05      	ble.n	8da0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    8d94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8d96:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8d9a:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    8d9c:	2000      	movs	r0, #0
}
    8d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    8da0:	68ab      	ldr	r3, [r5, #8]
    8da2:	4622      	mov	r2, r4
    8da4:	4902      	ldr	r1, [pc, #8]	; (8db0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    8da6:	4638      	mov	r0, r7
    8da8:	f006 fe30 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8dac:	2001      	movs	r0, #1
    8dae:	e7f6      	b.n	8d9e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    8db0:	00057000 	.word	0x00057000

00008db4 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    8db4:	2810      	cmp	r0, #16
    8db6:	d82a      	bhi.n	8e0e <TfLiteTypeGetName+0x5a>
    8db8:	e8df f000 	tbb	[pc, r0]
    8dbc:	110d2b09 	.word	0x110d2b09
    8dc0:	0b191f15 	.word	0x0b191f15
    8dc4:	2321131b 	.word	0x2321131b
    8dc8:	2725171d 	.word	0x2725171d
    8dcc:	0f          	.byte	0x0f
    8dcd:	00          	.byte	0x00
    case kTfLiteFloat64:
      return "FLOAT64";
    case kTfLiteResource:
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
    8dce:	4812      	ldr	r0, [pc, #72]	; (8e18 <TfLiteTypeGetName+0x64>)
    8dd0:	4770      	bx	lr
      return "INT16";
    8dd2:	4812      	ldr	r0, [pc, #72]	; (8e1c <TfLiteTypeGetName+0x68>)
    8dd4:	4770      	bx	lr
      return "INT32";
    8dd6:	4812      	ldr	r0, [pc, #72]	; (8e20 <TfLiteTypeGetName+0x6c>)
    8dd8:	4770      	bx	lr
      return "UINT32";
    8dda:	4812      	ldr	r0, [pc, #72]	; (8e24 <TfLiteTypeGetName+0x70>)
    8ddc:	4770      	bx	lr
      return "UINT8";
    8dde:	4812      	ldr	r0, [pc, #72]	; (8e28 <TfLiteTypeGetName+0x74>)
    8de0:	4770      	bx	lr
      return "INT8";
    8de2:	4812      	ldr	r0, [pc, #72]	; (8e2c <TfLiteTypeGetName+0x78>)
    8de4:	4770      	bx	lr
      return "INT64";
    8de6:	4812      	ldr	r0, [pc, #72]	; (8e30 <TfLiteTypeGetName+0x7c>)
    8de8:	4770      	bx	lr
      return "UINT64";
    8dea:	4812      	ldr	r0, [pc, #72]	; (8e34 <TfLiteTypeGetName+0x80>)
    8dec:	4770      	bx	lr
      return "BOOL";
    8dee:	4812      	ldr	r0, [pc, #72]	; (8e38 <TfLiteTypeGetName+0x84>)
    8df0:	4770      	bx	lr
      return "COMPLEX64";
    8df2:	4812      	ldr	r0, [pc, #72]	; (8e3c <TfLiteTypeGetName+0x88>)
    8df4:	4770      	bx	lr
      return "COMPLEX128";
    8df6:	4812      	ldr	r0, [pc, #72]	; (8e40 <TfLiteTypeGetName+0x8c>)
    8df8:	4770      	bx	lr
      return "STRING";
    8dfa:	4812      	ldr	r0, [pc, #72]	; (8e44 <TfLiteTypeGetName+0x90>)
    8dfc:	4770      	bx	lr
      return "FLOAT16";
    8dfe:	4812      	ldr	r0, [pc, #72]	; (8e48 <TfLiteTypeGetName+0x94>)
    8e00:	4770      	bx	lr
      return "FLOAT64";
    8e02:	4812      	ldr	r0, [pc, #72]	; (8e4c <TfLiteTypeGetName+0x98>)
    8e04:	4770      	bx	lr
      return "RESOURCE";
    8e06:	4812      	ldr	r0, [pc, #72]	; (8e50 <TfLiteTypeGetName+0x9c>)
    8e08:	4770      	bx	lr
      return "VARIANT";
    8e0a:	4812      	ldr	r0, [pc, #72]	; (8e54 <TfLiteTypeGetName+0xa0>)
    8e0c:	4770      	bx	lr
  }
  return "Unknown type";
    8e0e:	4812      	ldr	r0, [pc, #72]	; (8e58 <TfLiteTypeGetName+0xa4>)
    8e10:	4770      	bx	lr
      return "FLOAT32";
    8e12:	4812      	ldr	r0, [pc, #72]	; (8e5c <TfLiteTypeGetName+0xa8>)
}
    8e14:	4770      	bx	lr
    8e16:	bf00      	nop
    8e18:	000570e8 	.word	0x000570e8
    8e1c:	00057064 	.word	0x00057064
    8e20:	0005706c 	.word	0x0005706c
    8e24:	00057074 	.word	0x00057074
    8e28:	0005707c 	.word	0x0005707c
    8e2c:	00057084 	.word	0x00057084
    8e30:	0005708c 	.word	0x0005708c
    8e34:	00057094 	.word	0x00057094
    8e38:	0005709c 	.word	0x0005709c
    8e3c:	000570a4 	.word	0x000570a4
    8e40:	000570b0 	.word	0x000570b0
    8e44:	000570bc 	.word	0x000570bc
    8e48:	000570c4 	.word	0x000570c4
    8e4c:	000570cc 	.word	0x000570cc
    8e50:	000570d4 	.word	0x000570d4
    8e54:	000570e0 	.word	0x000570e0
    8e58:	0005704c 	.word	0x0005704c
    8e5c:	0005705c 	.word	0x0005705c

00008e60 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
    8e60:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    8e64:	4606      	mov	r6, r0
    8e66:	460f      	mov	r7, r1
    8e68:	4615      	mov	r5, r2
    8e6a:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    8e6c:	2200      	movs	r2, #0
    8e6e:	2300      	movs	r3, #0
    8e70:	f7f7 fd96 	bl	9a0 <__aeabi_dcmpeq>
    8e74:	b120      	cbz	r0, 8e80 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    8e76:	2300      	movs	r3, #0
    8e78:	602b      	str	r3, [r5, #0]
    *shift = 0;
    8e7a:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
    8e7c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  const double q = std::frexp(double_multiplier, shift);
    8e80:	4622      	mov	r2, r4
    8e82:	4630      	mov	r0, r6
    8e84:	4639      	mov	r1, r7
    8e86:	f003 fbb9 	bl	c5fc <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    8e8a:	2200      	movs	r2, #0
    8e8c:	4b1a      	ldr	r3, [pc, #104]	; (8ef8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x98>)
    8e8e:	f7f7 fb1f 	bl	4d0 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    8e92:	f003 fbeb 	bl	c66c <round>
    8e96:	f7f8 f93f 	bl	1118 <__aeabi_d2lz>
    8e9a:	4606      	mov	r6, r0
    8e9c:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    8e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8ea2:	2300      	movs	r3, #0
    8ea4:	4282      	cmp	r2, r0
    8ea6:	418b      	sbcs	r3, r1
    8ea8:	db12      	blt.n	8ed0 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>
  if (q_fixed == (1ll << 31)) {
    8eaa:	2900      	cmp	r1, #0
    8eac:	bf08      	it	eq
    8eae:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    8eb2:	d00f      	beq.n	8ed4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x74>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    8eb4:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    8eb8:	f177 0300 	sbcs.w	r3, r7, #0
    8ebc:	da19      	bge.n	8ef2 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x92>
  if (*shift < -31) {
    8ebe:	6823      	ldr	r3, [r4, #0]
    8ec0:	f113 0f1f 	cmn.w	r3, #31
    8ec4:	da02      	bge.n	8ecc <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x6c>
    *shift = 0;
    8ec6:	2300      	movs	r3, #0
    8ec8:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    8eca:	2600      	movs	r6, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    8ecc:	602e      	str	r6, [r5, #0]
    8ece:	e7d5      	b.n	8e7c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    8ed0:	f007 f948 	bl	10164 <abort>
    q_fixed /= 2;
    8ed4:	0fc9      	lsrs	r1, r1, #31
    8ed6:	eb16 0b01 	adds.w	fp, r6, r1
    8eda:	f147 0c00 	adc.w	ip, r7, #0
    8ede:	ea4f 025b 	mov.w	r2, fp, lsr #1
    8ee2:	ea42 76cc 	orr.w	r6, r2, ip, lsl #31
    8ee6:	ea4f 076c 	mov.w	r7, ip, asr #1
    ++*shift;
    8eea:	6823      	ldr	r3, [r4, #0]
    8eec:	3301      	adds	r3, #1
    8eee:	6023      	str	r3, [r4, #0]
    8ef0:	e7e0      	b.n	8eb4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x54>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    8ef2:	f007 f937 	bl	10164 <abort>
    8ef6:	bf00      	nop
    8ef8:	41e00000 	.word	0x41e00000

00008efc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>:
  return kTfLiteOk;
}

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
    8efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8efe:	b087      	sub	sp, #28
    8f00:	4605      	mov	r5, r0
    8f02:	460c      	mov	r4, r1
    8f04:	9203      	str	r2, [sp, #12]
    8f06:	9302      	str	r3, [sp, #8]
    8f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const auto scale = output->params.scale;
    8f0a:	68de      	ldr	r6, [r3, #12]
  const auto zero_point = output->params.zero_point;
    8f0c:	691f      	ldr	r7, [r3, #16]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
    8f0e:	2901      	cmp	r1, #1
    8f10:	d00e      	beq.n	8f30 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x34>
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
    8f12:	2903      	cmp	r1, #3
    8f14:	d042      	beq.n	8f9c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xa0>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else if (activation == kTfLiteActReluN1To1) {
    8f16:	2902      	cmp	r1, #2
    8f18:	f000 80a7 	beq.w	906a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16e>
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else {
    *act_min = qmin;
    8f1c:	9b03      	ldr	r3, [sp, #12]
    8f1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8f20:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    8f22:	9b02      	ldr	r3, [sp, #8]
    8f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8f26:	6013      	str	r3, [r2, #0]
  }
  return kTfLiteOk;
    8f28:	2400      	movs	r4, #0
}
    8f2a:	4620      	mov	r0, r4
    8f2c:	b007      	add	sp, #28
    8f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const float tmp = TfLiteRound(f / scale);
    8f30:	4631      	mov	r1, r6
    8f32:	2000      	movs	r0, #0
    8f34:	f7f7 ffa0 	bl	e78 <__aeabi_fdiv>
    8f38:	f7f7 fa72 	bl	420 <__aeabi_f2d>
    8f3c:	f003 fb96 	bl	c66c <round>
    8f40:	f7f7 fd88 	bl	a54 <__aeabi_d2f>
    8f44:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    8f46:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    8f4a:	f7f8 f893 	bl	1074 <__aeabi_fcmpge>
    8f4e:	b160      	cbz	r0, 8f6a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
    8f50:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    8f54:	4630      	mov	r0, r6
    8f56:	f7f8 f883 	bl	1060 <__aeabi_fcmple>
    8f5a:	b130      	cbz	r0, 8f6a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
  q = zero_point + static_cast<int32_t>(tmp);
    8f5c:	4630      	mov	r0, r6
    8f5e:	f7f8 f89d 	bl	109c <__aeabi_f2iz>
    8f62:	4407      	add	r7, r0
    8f64:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    8f66:	2400      	movs	r4, #0
    8f68:	e008      	b.n	8f7c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x80>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    8f6a:	696e      	ldr	r6, [r5, #20]
    8f6c:	4b73      	ldr	r3, [pc, #460]	; (913c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    8f6e:	9300      	str	r3, [sp, #0]
    8f70:	f240 1359 	movw	r3, #345	; 0x159
    8f74:	4a72      	ldr	r2, [pc, #456]	; (9140 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    8f76:	4973      	ldr	r1, [pc, #460]	; (9144 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    8f78:	4628      	mov	r0, r5
    8f7a:	47b0      	blx	r6
    TF_LITE_ENSURE_OK(context,
    8f7c:	2c00      	cmp	r4, #0
    8f7e:	d1d4      	bne.n	8f2a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    8f80:	9a05      	ldr	r2, [sp, #20]
    8f82:	9b03      	ldr	r3, [sp, #12]
    8f84:	429a      	cmp	r2, r3
    8f86:	dc07      	bgt.n	8f98 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x9c>
	return __b;
      return __a;
    8f88:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    8f8a:	681b      	ldr	r3, [r3, #0]
    8f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8f8e:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    8f90:	9b02      	ldr	r3, [sp, #8]
    8f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8f94:	6013      	str	r3, [r2, #0]
    8f96:	e7c8      	b.n	8f2a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    8f98:	ab05      	add	r3, sp, #20
    8f9a:	e7f6      	b.n	8f8a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x8e>
  const float tmp = TfLiteRound(f / scale);
    8f9c:	4631      	mov	r1, r6
    8f9e:	2000      	movs	r0, #0
    8fa0:	f7f7 ff6a 	bl	e78 <__aeabi_fdiv>
    8fa4:	f7f7 fa3c 	bl	420 <__aeabi_f2d>
    8fa8:	f003 fb60 	bl	c66c <round>
    8fac:	f7f7 fd52 	bl	a54 <__aeabi_d2f>
    8fb0:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    8fb2:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    8fb6:	f7f8 f85d 	bl	1074 <__aeabi_fcmpge>
    8fba:	b160      	cbz	r0, 8fd6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
    8fbc:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    8fc0:	4620      	mov	r0, r4
    8fc2:	f7f8 f84d 	bl	1060 <__aeabi_fcmple>
    8fc6:	b130      	cbz	r0, 8fd6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
  q = zero_point + static_cast<int32_t>(tmp);
    8fc8:	4620      	mov	r0, r4
    8fca:	f7f8 f867 	bl	109c <__aeabi_f2iz>
    8fce:	4438      	add	r0, r7
    8fd0:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    8fd2:	2400      	movs	r4, #0
    8fd4:	e009      	b.n	8fea <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xee>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    8fd6:	696c      	ldr	r4, [r5, #20]
    8fd8:	4b58      	ldr	r3, [pc, #352]	; (913c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    8fda:	9300      	str	r3, [sp, #0]
    8fdc:	f240 1359 	movw	r3, #345	; 0x159
    8fe0:	4a57      	ldr	r2, [pc, #348]	; (9140 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    8fe2:	4958      	ldr	r1, [pc, #352]	; (9144 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    8fe4:	4628      	mov	r0, r5
    8fe6:	47a0      	blx	r4
    8fe8:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    8fea:	2c00      	cmp	r4, #0
    8fec:	d19d      	bne.n	8f2a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    8fee:	9a03      	ldr	r2, [sp, #12]
    8ff0:	9b05      	ldr	r3, [sp, #20]
    8ff2:	429a      	cmp	r2, r3
    8ff4:	db1f      	blt.n	9036 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13a>
      return __a;
    8ff6:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    8ff8:	681b      	ldr	r3, [r3, #0]
    8ffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ffc:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    8ffe:	4631      	mov	r1, r6
    9000:	4851      	ldr	r0, [pc, #324]	; (9148 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x24c>)
    9002:	f7f7 ff39 	bl	e78 <__aeabi_fdiv>
    9006:	f7f7 fa0b 	bl	420 <__aeabi_f2d>
    900a:	f003 fb2f 	bl	c66c <round>
    900e:	f7f7 fd21 	bl	a54 <__aeabi_d2f>
    9012:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    9014:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9018:	f7f8 f82c 	bl	1074 <__aeabi_fcmpge>
    901c:	b168      	cbz	r0, 903a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
    901e:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    9022:	4630      	mov	r0, r6
    9024:	f7f8 f81c 	bl	1060 <__aeabi_fcmple>
    9028:	b138      	cbz	r0, 903a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
  q = zero_point + static_cast<int32_t>(tmp);
    902a:	4630      	mov	r0, r6
    902c:	f7f8 f836 	bl	109c <__aeabi_f2iz>
    9030:	4407      	add	r7, r0
    9032:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    9034:	e00b      	b.n	904e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x152>
	return __b;
    9036:	ab05      	add	r3, sp, #20
    9038:	e7de      	b.n	8ff8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xfc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    903a:	696c      	ldr	r4, [r5, #20]
    903c:	4b3f      	ldr	r3, [pc, #252]	; (913c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    903e:	9300      	str	r3, [sp, #0]
    9040:	f240 1359 	movw	r3, #345	; 0x159
    9044:	4a3e      	ldr	r2, [pc, #248]	; (9140 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9046:	493f      	ldr	r1, [pc, #252]	; (9144 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9048:	4628      	mov	r0, r5
    904a:	47a0      	blx	r4
    904c:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    904e:	2c00      	cmp	r4, #0
    9050:	f47f af6b 	bne.w	8f2a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    9054:	9a05      	ldr	r2, [sp, #20]
    9056:	9b02      	ldr	r3, [sp, #8]
    9058:	429a      	cmp	r2, r3
    905a:	db04      	blt.n	9066 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16a>
      return __a;
    905c:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    905e:	681b      	ldr	r3, [r3, #0]
    9060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9062:	6013      	str	r3, [r2, #0]
    9064:	e761      	b.n	8f2a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    9066:	ab05      	add	r3, sp, #20
    9068:	e7f9      	b.n	905e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x162>
  const float tmp = TfLiteRound(f / scale);
    906a:	4631      	mov	r1, r6
    906c:	4837      	ldr	r0, [pc, #220]	; (914c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x250>)
    906e:	f7f7 ff03 	bl	e78 <__aeabi_fdiv>
    9072:	f7f7 f9d5 	bl	420 <__aeabi_f2d>
    9076:	f003 faf9 	bl	c66c <round>
    907a:	f7f7 fceb 	bl	a54 <__aeabi_d2f>
    907e:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    9080:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9084:	f7f7 fff6 	bl	1074 <__aeabi_fcmpge>
    9088:	b160      	cbz	r0, 90a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
    908a:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    908e:	4620      	mov	r0, r4
    9090:	f7f7 ffe6 	bl	1060 <__aeabi_fcmple>
    9094:	b130      	cbz	r0, 90a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
  q = zero_point + static_cast<int32_t>(tmp);
    9096:	4620      	mov	r0, r4
    9098:	f7f8 f800 	bl	109c <__aeabi_f2iz>
    909c:	4438      	add	r0, r7
    909e:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    90a0:	2400      	movs	r4, #0
    90a2:	e009      	b.n	90b8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1bc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    90a4:	696c      	ldr	r4, [r5, #20]
    90a6:	4b25      	ldr	r3, [pc, #148]	; (913c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    90a8:	9300      	str	r3, [sp, #0]
    90aa:	f240 1359 	movw	r3, #345	; 0x159
    90ae:	4a24      	ldr	r2, [pc, #144]	; (9140 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    90b0:	4924      	ldr	r1, [pc, #144]	; (9144 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    90b2:	4628      	mov	r0, r5
    90b4:	47a0      	blx	r4
    90b6:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    90b8:	2c00      	cmp	r4, #0
    90ba:	f47f af36 	bne.w	8f2a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    90be:	9a03      	ldr	r2, [sp, #12]
    90c0:	9b05      	ldr	r3, [sp, #20]
    90c2:	429a      	cmp	r2, r3
    90c4:	db20      	blt.n	9108 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x20c>
      return __a;
    90c6:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    90c8:	681b      	ldr	r3, [r3, #0]
    90ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    90cc:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    90ce:	4631      	mov	r1, r6
    90d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    90d4:	f7f7 fed0 	bl	e78 <__aeabi_fdiv>
    90d8:	f7f7 f9a2 	bl	420 <__aeabi_f2d>
    90dc:	f003 fac6 	bl	c66c <round>
    90e0:	f7f7 fcb8 	bl	a54 <__aeabi_d2f>
    90e4:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    90e6:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    90ea:	f7f7 ffc3 	bl	1074 <__aeabi_fcmpge>
    90ee:	b168      	cbz	r0, 910c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
    90f0:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    90f4:	4630      	mov	r0, r6
    90f6:	f7f7 ffb3 	bl	1060 <__aeabi_fcmple>
    90fa:	b138      	cbz	r0, 910c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
  q = zero_point + static_cast<int32_t>(tmp);
    90fc:	4630      	mov	r0, r6
    90fe:	f7f7 ffcd 	bl	109c <__aeabi_f2iz>
    9102:	4407      	add	r7, r0
    9104:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    9106:	e00b      	b.n	9120 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x224>
	return __b;
    9108:	ab05      	add	r3, sp, #20
    910a:	e7dd      	b.n	90c8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1cc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    910c:	696c      	ldr	r4, [r5, #20]
    910e:	4b0b      	ldr	r3, [pc, #44]	; (913c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9110:	9300      	str	r3, [sp, #0]
    9112:	f240 1359 	movw	r3, #345	; 0x159
    9116:	4a0a      	ldr	r2, [pc, #40]	; (9140 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9118:	490a      	ldr	r1, [pc, #40]	; (9144 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    911a:	4628      	mov	r0, r5
    911c:	47a0      	blx	r4
    911e:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9120:	2c00      	cmp	r4, #0
    9122:	f47f af02 	bne.w	8f2a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    9126:	9a05      	ldr	r2, [sp, #20]
    9128:	9b02      	ldr	r3, [sp, #8]
    912a:	429a      	cmp	r2, r3
    912c:	db04      	blt.n	9138 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x23c>
      return __a;
    912e:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    9130:	681b      	ldr	r3, [r3, #0]
    9132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9134:	6013      	str	r3, [r2, #0]
    9136:	e6f8      	b.n	8f2a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    9138:	ab05      	add	r3, sp, #20
    913a:	e7f9      	b.n	9130 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x234>
    913c:	0005713c 	.word	0x0005713c
    9140:	000570f0 	.word	0x000570f0
    9144:	00056eec 	.word	0x00056eec
    9148:	40c00000 	.word	0x40c00000
    914c:	bf800000 	.word	0xbf800000

00009150 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    9150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9154:	b082      	sub	sp, #8
    9156:	4680      	mov	r8, r0
    9158:	4608      	mov	r0, r1
    915a:	461d      	mov	r5, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    915c:	68d1      	ldr	r1, [r2, #12]
    915e:	68c0      	ldr	r0, [r0, #12]
    9160:	f7f7 fdd6 	bl	d10 <__aeabi_fmul>
    9164:	4604      	mov	r4, r0
  const double input_product_scale =
    9166:	f7f7 f95b 	bl	420 <__aeabi_f2d>
    916a:	4606      	mov	r6, r0
    916c:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    916e:	2100      	movs	r1, #0
    9170:	4620      	mov	r0, r4
    9172:	f7f7 ff7f 	bl	1074 <__aeabi_fcmpge>
    9176:	b178      	cbz	r0, 9198 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    9178:	68e8      	ldr	r0, [r5, #12]
    917a:	f7f7 f951 	bl	420 <__aeabi_f2d>
    917e:	4602      	mov	r2, r0
    9180:	460b      	mov	r3, r1
    9182:	4630      	mov	r0, r6
    9184:	4639      	mov	r1, r7
    9186:	f7f7 facd 	bl	724 <__aeabi_ddiv>
    918a:	9b08      	ldr	r3, [sp, #32]
    918c:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    9190:	2000      	movs	r0, #0
}
    9192:	b002      	add	sp, #8
    9194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    9198:	f8d8 4014 	ldr.w	r4, [r8, #20]
    919c:	4b04      	ldr	r3, [pc, #16]	; (91b0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    919e:	9300      	str	r3, [sp, #0]
    91a0:	f240 134b 	movw	r3, #331	; 0x14b
    91a4:	4a03      	ldr	r2, [pc, #12]	; (91b4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    91a6:	4904      	ldr	r1, [pc, #16]	; (91b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    91a8:	4640      	mov	r0, r8
    91aa:	47a0      	blx	r4
    91ac:	2001      	movs	r0, #1
    91ae:	e7f0      	b.n	9192 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    91b0:	00057164 	.word	0x00057164
    91b4:	000570f0 	.word	0x000570f0
    91b8:	00056eec 	.word	0x00056eec

000091bc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    91bc:	b570      	push	{r4, r5, r6, lr}
    91be:	b084      	sub	sp, #16
    91c0:	4614      	mov	r4, r2
    91c2:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    91c4:	7813      	ldrb	r3, [r2, #0]
    91c6:	2b03      	cmp	r3, #3
    91c8:	d00d      	beq.n	91e6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    91ca:	2b09      	cmp	r3, #9
    91cc:	d00e      	beq.n	91ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    91ce:	2b07      	cmp	r3, #7
    91d0:	d017      	beq.n	9202 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    91d2:	6944      	ldr	r4, [r0, #20]
    91d4:	4b0d      	ldr	r3, [pc, #52]	; (920c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>)
    91d6:	9300      	str	r3, [sp, #0]
    91d8:	f240 1391 	movw	r3, #401	; 0x191
    91dc:	4a0c      	ldr	r2, [pc, #48]	; (9210 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x54>)
    91de:	490d      	ldr	r1, [pc, #52]	; (9214 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>)
    91e0:	47a0      	blx	r4
    91e2:	2001      	movs	r0, #1
    91e4:	e00b      	b.n	91fe <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x42>
    qmax = std::numeric_limits<uint8_t>::max();
    91e6:	23ff      	movs	r3, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    91e8:	2200      	movs	r2, #0
    91ea:	e002      	b.n	91f2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    qmax = std::numeric_limits<int8_t>::max();
    91ec:	237f      	movs	r3, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    91ee:	f06f 027f 	mvn.w	r2, #127	; 0x7f
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
    91f2:	9e08      	ldr	r6, [sp, #32]
    91f4:	9602      	str	r6, [sp, #8]
    91f6:	9501      	str	r5, [sp, #4]
    91f8:	9400      	str	r4, [sp, #0]
    91fa:	f7ff fe7f 	bl	8efc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>
                                               output, act_min, act_max);
}
    91fe:	b004      	add	sp, #16
    9200:	bd70      	pop	{r4, r5, r6, pc}
    qmax = std::numeric_limits<int16_t>::max();
    9202:	f647 73ff 	movw	r3, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    9206:	4a04      	ldr	r2, [pc, #16]	; (9218 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>)
    9208:	e7f3      	b.n	91f2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    920a:	bf00      	nop
    920c:	000571a4 	.word	0x000571a4
    9210:	000570f0 	.word	0x000570f0
    9214:	00056eec 	.word	0x00056eec
    9218:	ffff8000 	.word	0xffff8000

0000921c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    921c:	b508      	push	{r3, lr}
    921e:	4613      	mov	r3, r2
  switch (tensor_type) {
    9220:	280f      	cmp	r0, #15
    9222:	d848      	bhi.n	92b6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x9a>
    9224:	e8df f000 	tbb	[pc, r0]
    9228:	1f17080c 	.word	0x1f17080c
    922c:	13332f27 	.word	0x13332f27
    9230:	3b0f2337 	.word	0x3b0f2337
    9234:	1b433f2b 	.word	0x1b433f2b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    9238:	230a      	movs	r3, #10
    923a:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    923c:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    923e:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
    9240:	2301      	movs	r3, #1
    9242:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9244:	e7fb      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
    9246:	230b      	movs	r3, #11
    9248:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    924a:	2000      	movs	r0, #0
    924c:	e7f7      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
    924e:	2307      	movs	r3, #7
    9250:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9252:	2000      	movs	r0, #0
    9254:	e7f3      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
    9256:	2302      	movs	r3, #2
    9258:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    925a:	2000      	movs	r0, #0
    925c:	e7ef      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
    925e:	2310      	movs	r3, #16
    9260:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9262:	2000      	movs	r0, #0
    9264:	e7eb      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
    9266:	2303      	movs	r3, #3
    9268:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    926a:	2000      	movs	r0, #0
    926c:	e7e7      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
    926e:	2309      	movs	r3, #9
    9270:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9272:	2000      	movs	r0, #0
    9274:	e7e3      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
    9276:	2304      	movs	r3, #4
    9278:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    927a:	2000      	movs	r0, #0
    927c:	e7df      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
    927e:	230d      	movs	r3, #13
    9280:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9282:	2000      	movs	r0, #0
    9284:	e7db      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
    9286:	2305      	movs	r3, #5
    9288:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    928a:	2000      	movs	r0, #0
    928c:	e7d7      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
    928e:	2306      	movs	r3, #6
    9290:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9292:	2000      	movs	r0, #0
    9294:	e7d3      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
    9296:	2308      	movs	r3, #8
    9298:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    929a:	2000      	movs	r0, #0
    929c:	e7cf      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
    929e:	230c      	movs	r3, #12
    92a0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    92a2:	2000      	movs	r0, #0
    92a4:	e7cb      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
    92a6:	230e      	movs	r3, #14
    92a8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    92aa:	2000      	movs	r0, #0
    92ac:	e7c7      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
    92ae:	230f      	movs	r3, #15
    92b0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    92b2:	2000      	movs	r0, #0
    92b4:	e7c3      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
    92b6:	2200      	movs	r2, #0
    92b8:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    92ba:	4602      	mov	r2, r0
    92bc:	4902      	ldr	r1, [pc, #8]	; (92c8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xac>)
    92be:	4618      	mov	r0, r3
    92c0:	f006 fba4 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    92c4:	2001      	movs	r0, #1
    92c6:	e7ba      	b.n	923e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
    92c8:	000571ac 	.word	0x000571ac

000092cc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
    92cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92d0:	b084      	sub	sp, #16
    92d2:	4604      	mov	r4, r0
    92d4:	4688      	mov	r8, r1
    92d6:	4616      	mov	r6, r2
    92d8:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    92da:	f006 fb85 	bl	f9e8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    92de:	6833      	ldr	r3, [r6, #0]
    92e0:	681b      	ldr	r3, [r3, #0]
    92e2:	2201      	movs	r2, #1
    92e4:	2104      	movs	r1, #4
    92e6:	4630      	mov	r0, r6
    92e8:	4798      	blx	r3
    return new (allocated_memory) T();
    92ea:	4605      	mov	r5, r0
    92ec:	b108      	cbz	r0, 92f2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    92ee:	2300      	movs	r3, #0
    92f0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    92f2:	9602      	str	r6, [sp, #8]
    92f4:	9503      	str	r5, [sp, #12]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    92f6:	b305      	cbz	r5, 933a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return data_ - ReadScalar<soffset_t>(data_);
    92f8:	4620      	mov	r0, r4
    92fa:	f004 fc75 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    92fe:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9300:	4630      	mov	r0, r6
    9302:	f004 fc77 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9306:	280a      	cmp	r0, #10
    9308:	d924      	bls.n	9354 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    930a:	f106 000a 	add.w	r0, r6, #10
    930e:	f004 fc71 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9312:	b308      	cbz	r0, 9358 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    9314:	4420      	add	r0, r4
    9316:	f005 ff4d 	bl	f1b4 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    931a:	2808      	cmp	r0, #8
    931c:	d128      	bne.n	9370 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    931e:	4620      	mov	r0, r4
    9320:	f004 fc62 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9324:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9326:	4630      	mov	r0, r6
    9328:	f004 fc64 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    932c:	280c      	cmp	r0, #12
    932e:	d915      	bls.n	935c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    9330:	f106 000c 	add.w	r0, r6, #12
    9334:	f004 fc5e 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9338:	e011      	b.n	935e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    933a:	4b4c      	ldr	r3, [pc, #304]	; (946c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a0>)
    933c:	9301      	str	r3, [sp, #4]
    933e:	f240 531d 	movw	r3, #1309	; 0x51d
    9342:	9300      	str	r3, [sp, #0]
    9344:	4b4a      	ldr	r3, [pc, #296]	; (9470 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>)
    9346:	4a4b      	ldr	r2, [pc, #300]	; (9474 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a8>)
    9348:	4641      	mov	r1, r8
    934a:	4640      	mov	r0, r8
    934c:	f006 fb6d 	bl	fa2a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9350:	2401      	movs	r4, #1
    9352:	e07d      	b.n	9450 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
    9354:	2000      	movs	r0, #0
    9356:	e7dc      	b.n	9312 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9358:	2000      	movs	r0, #0
    935a:	e7de      	b.n	931a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    935c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    935e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9360:	b120      	cbz	r0, 936c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9362:	4620      	mov	r0, r4
    9364:	f004 fc3a 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9368:	4404      	add	r4, r0
    936a:	e002      	b.n	9372 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    936c:	2400      	movs	r4, #0
    936e:	e000      	b.n	9372 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9370:	2400      	movs	r4, #0

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();

  if (schema_params != nullptr) {
    9372:	2c00      	cmp	r4, #0
    9374:	d069      	beq.n	944a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    9376:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9378:	4620      	mov	r0, r4
    937a:	f004 fc35 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    937e:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9380:	4620      	mov	r0, r4
    9382:	f004 fc37 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9386:	2804      	cmp	r0, #4
    9388:	d903      	bls.n	9392 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    938a:	1d20      	adds	r0, r4, #4
    938c:	f004 fc32 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9390:	e000      	b.n	9394 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    9392:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9394:	b118      	cbz	r0, 939e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    9396:	4430      	add	r0, r6
    9398:	f005 fe49 	bl	f02e <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    939c:	e000      	b.n	93a0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    939e:	2000      	movs	r0, #0
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
    93a0:	b2c0      	uxtb	r0, r0
    93a2:	f006 fb17 	bl	f9d4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    93a6:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    93a8:	4630      	mov	r0, r6
    93aa:	f004 fc1d 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    93ae:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    93b0:	4620      	mov	r0, r4
    93b2:	f004 fc1f 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    93b6:	2808      	cmp	r0, #8
    93b8:	d904      	bls.n	93c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    93ba:	f104 0008 	add.w	r0, r4, #8
    93be:	f004 fc19 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    93c2:	e000      	b.n	93c6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    93c4:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    93c6:	b118      	cbz	r0, 93d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    93c8:	4430      	add	r0, r6
    93ca:	f005 fef3 	bl	f1b4 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    93ce:	e000      	b.n	93d2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    93d0:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    93d2:	3800      	subs	r0, #0
    93d4:	bf18      	it	ne
    93d6:	2001      	movne	r0, #1
    params->keep_num_dims = schema_params->keep_num_dims();
    93d8:	70a8      	strb	r0, [r5, #2]
    return data_ - ReadScalar<soffset_t>(data_);
    93da:	4630      	mov	r0, r6
    93dc:	f004 fc04 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    93e0:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    93e2:	4620      	mov	r0, r4
    93e4:	f004 fc06 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    93e8:	280a      	cmp	r0, #10
    93ea:	d904      	bls.n	93f6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    93ec:	f104 000a 	add.w	r0, r4, #10
    93f0:	f004 fc00 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    93f4:	e000      	b.n	93f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    93f6:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    93f8:	b118      	cbz	r0, 9402 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
    93fa:	4430      	add	r0, r6
    93fc:	f005 feda 	bl	f1b4 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    9400:	e000      	b.n	9404 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    9402:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    9404:	3800      	subs	r0, #0
    9406:	bf18      	it	ne
    9408:	2001      	movne	r0, #1
    params->asymmetric_quantize_inputs =
    940a:	70e8      	strb	r0, [r5, #3]
    return data_ - ReadScalar<soffset_t>(data_);
    940c:	4630      	mov	r0, r6
    940e:	f004 fbeb 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9412:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9414:	4620      	mov	r0, r4
    9416:	f004 fbed 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    941a:	2806      	cmp	r0, #6
    941c:	d903      	bls.n	9426 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    941e:	1da0      	adds	r0, r4, #6
    9420:	f004 fbe8 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9424:	e000      	b.n	9428 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15c>
    9426:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9428:	b118      	cbz	r0, 9432 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x166>
    942a:	4430      	add	r0, r6
    942c:	f005 fdff 	bl	f02e <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    9430:	e000      	b.n	9434 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    9432:	2000      	movs	r0, #0
        schema_params->asymmetric_quantize_inputs();

    switch (schema_params->weights_format()) {
    9434:	b138      	cbz	r0, 9446 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17a>
    9436:	2801      	cmp	r0, #1
    9438:	d014      	beq.n	9464 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
    943a:	490f      	ldr	r1, [pc, #60]	; (9478 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>)
    943c:	4640      	mov	r0, r8
    943e:	f006 fae5 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
    9442:	2401      	movs	r4, #1
    9444:	e004      	b.n	9450 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    9446:	2300      	movs	r3, #0
    9448:	706b      	strb	r3, [r5, #1]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
    944a:	2400      	movs	r4, #0
    944c:	9403      	str	r4, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    944e:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    9450:	9903      	ldr	r1, [sp, #12]
    9452:	b119      	cbz	r1, 945c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x190>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9454:	9802      	ldr	r0, [sp, #8]
    9456:	6803      	ldr	r3, [r0, #0]
    9458:	685b      	ldr	r3, [r3, #4]
    945a:	4798      	blx	r3
  return kTfLiteOk;
}
    945c:	4620      	mov	r0, r4
    945e:	b004      	add	sp, #16
    9460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->weights_format =
    9464:	2301      	movs	r3, #1
    9466:	706b      	strb	r3, [r5, #1]
        break;
    9468:	e7ef      	b.n	944a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    946a:	bf00      	nop
    946c:	00057228 	.word	0x00057228
    9470:	000571d0 	.word	0x000571d0
    9474:	00056eec 	.word	0x00056eec
    9478:	0005723c 	.word	0x0005723c

0000947c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    947c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9480:	4604      	mov	r4, r0
    9482:	4688      	mov	r8, r1
    9484:	4691      	mov	r9, r2
    9486:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    9488:	2300      	movs	r3, #0
    948a:	6033      	str	r3, [r6, #0]
  auto builtin_code = GetBuiltinCode(opcode);
    948c:	f006 fadc 	bl	fa48 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    9490:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    9492:	4620      	mov	r0, r4
    9494:	f004 fba8 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9498:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    949a:	4638      	mov	r0, r7
    949c:	f004 fbaa 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    94a0:	2808      	cmp	r0, #8
    94a2:	d904      	bls.n	94ae <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    94a4:	f107 0008 	add.w	r0, r7, #8
    94a8:	f004 fba4 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    94ac:	e000      	b.n	94b0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x34>
    94ae:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    94b0:	b120      	cbz	r0, 94bc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
    94b2:	4420      	add	r0, r4
    94b4:	f004 fb98 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    94b8:	4607      	mov	r7, r0
    94ba:	e000      	b.n	94be <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    94bc:	2701      	movs	r7, #1
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    94be:	2d91      	cmp	r5, #145	; 0x91
    94c0:	d80d      	bhi.n	94de <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    94c2:	2d20      	cmp	r5, #32
    94c4:	d01c      	beq.n	9500 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
    *registration = op_resolver.FindOp(builtin_code, version);
    94c6:	f8d8 3000 	ldr.w	r3, [r8]
    94ca:	681b      	ldr	r3, [r3, #0]
    94cc:	463a      	mov	r2, r7
    94ce:	4629      	mov	r1, r5
    94d0:	4640      	mov	r0, r8
    94d2:	4798      	blx	r3
    94d4:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    94d6:	b148      	cbz	r0, 94ec <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x70>
  TfLiteStatus status = kTfLiteOk;
    94d8:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    94da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(
    94de:	462a      	mov	r2, r5
    94e0:	491c      	ldr	r1, [pc, #112]	; (9554 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd8>)
    94e2:	4648      	mov	r0, r9
    94e4:	f006 fa92 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    94e8:	2001      	movs	r0, #1
    94ea:	e7f6      	b.n	94da <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      TF_LITE_REPORT_ERROR(
    94ec:	463b      	mov	r3, r7
    94ee:	4a1a      	ldr	r2, [pc, #104]	; (9558 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>)
    94f0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    94f4:	4919      	ldr	r1, [pc, #100]	; (955c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
    94f6:	4648      	mov	r0, r9
    94f8:	f006 fa88 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    94fc:	2001      	movs	r0, #1
    94fe:	e7ec      	b.n	94da <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return data_ - ReadScalar<soffset_t>(data_);
    9500:	4620      	mov	r0, r4
    9502:	f004 fb71 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9506:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9508:	4628      	mov	r0, r5
    950a:	f004 fb73 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    950e:	2806      	cmp	r0, #6
    9510:	d914      	bls.n	953c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>
    9512:	1da8      	adds	r0, r5, #6
    9514:	f004 fb6e 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9518:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    951a:	b188      	cbz	r0, 9540 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>
    951c:	4620      	mov	r0, r4
    951e:	f004 fb5d 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9522:	1821      	adds	r1, r4, r0
  } else if (!opcode->custom_code()) {
    9524:	b171      	cbz	r1, 9544 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>
    *registration = op_resolver.FindOp(name, version);
    9526:	f8d8 3000 	ldr.w	r3, [r8]
    952a:	685b      	ldr	r3, [r3, #4]
    952c:	463a      	mov	r2, r7
    952e:	3104      	adds	r1, #4
    9530:	4640      	mov	r0, r8
    9532:	4798      	blx	r3
    9534:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    9536:	b158      	cbz	r0, 9550 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  TfLiteStatus status = kTfLiteOk;
    9538:	2000      	movs	r0, #0
    953a:	e7ce      	b.n	94da <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    953c:	2000      	movs	r0, #0
    953e:	e7eb      	b.n	9518 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9540:	2100      	movs	r1, #0
    9542:	e7ef      	b.n	9524 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
    TF_LITE_REPORT_ERROR(
    9544:	4906      	ldr	r1, [pc, #24]	; (9560 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
    9546:	4648      	mov	r0, r9
    9548:	f006 fa60 	bl	fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    954c:	2001      	movs	r0, #1
    954e:	e7c4      	b.n	94da <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      status = kTfLiteError;
    9550:	2001      	movs	r0, #1
    9552:	e7c2      	b.n	94da <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    9554:	00057268 	.word	0x00057268
    9558:	00056198 	.word	0x00056198
    955c:	000572bc 	.word	0x000572bc
    9560:	00057360 	.word	0x00057360

00009564 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    9564:	2801      	cmp	r0, #1
    9566:	d009      	beq.n	957c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x18>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    9568:	2803      	cmp	r0, #3
    956a:	d00c      	beq.n	9586 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x22>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    956c:	2802      	cmp	r0, #2
    956e:	d00f      	beq.n	9590 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    9570:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    9574:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    9576:	4b09      	ldr	r3, [pc, #36]	; (959c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    9578:	6013      	str	r3, [r2, #0]
  }
}
    957a:	4770      	bx	lr
    *activation_min = 0;
    957c:	2300      	movs	r3, #0
    957e:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    9580:	4b06      	ldr	r3, [pc, #24]	; (959c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    9582:	6013      	str	r3, [r2, #0]
    9584:	4770      	bx	lr
    *activation_min = 0;
    9586:	2300      	movs	r3, #0
    9588:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    958a:	4b05      	ldr	r3, [pc, #20]	; (95a0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x3c>)
    958c:	6013      	str	r3, [r2, #0]
    958e:	4770      	bx	lr
    *activation_min = -1;
    9590:	4b04      	ldr	r3, [pc, #16]	; (95a4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x40>)
    9592:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    9594:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    9598:	6013      	str	r3, [r2, #0]
    959a:	4770      	bx	lr
    959c:	7f7fffff 	.word	0x7f7fffff
    95a0:	40c00000 	.word	0x40c00000
    95a4:	bf800000 	.word	0xbf800000

000095a8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    95a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    95ac:	b085      	sub	sp, #20
  TFLITE_DCHECK(node->user_data != nullptr);
    95ae:	690e      	ldr	r6, [r1, #16]
    95b0:	b1ae      	cbz	r6, 95de <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
    95b2:	4605      	mov	r5, r0
    95b4:	460c      	mov	r4, r1
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    95b6:	680b      	ldr	r3, [r1, #0]
    95b8:	681b      	ldr	r3, [r3, #0]
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    95ba:	2b01      	cmp	r3, #1
    95bc:	d011      	beq.n	95e2 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    95be:	6946      	ldr	r6, [r0, #20]
    95c0:	2401      	movs	r4, #1
    95c2:	9403      	str	r4, [sp, #12]
    95c4:	9302      	str	r3, [sp, #8]
    95c6:	4b40      	ldr	r3, [pc, #256]	; (96c8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    95c8:	9301      	str	r3, [sp, #4]
    95ca:	4b40      	ldr	r3, [pc, #256]	; (96cc <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    95cc:	9300      	str	r3, [sp, #0]
    95ce:	2332      	movs	r3, #50	; 0x32
    95d0:	4a3f      	ldr	r2, [pc, #252]	; (96d0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    95d2:	4940      	ldr	r1, [pc, #256]	; (96d4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
    95d4:	47b0      	blx	r6
    95d6:	4620      	mov	r0, r4

  data->quantization_params.zero_point = input->params.zero_point;
  data->quantization_params.scale = static_cast<double>(input->params.scale);
  data->output_zero_point = output->params.zero_point;
  return kTfLiteOk;
}
    95d8:	b005      	add	sp, #20
    95da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    95de:	f006 fdc1 	bl	10164 <abort>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    95e2:	684b      	ldr	r3, [r1, #4]
    95e4:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    95e6:	2b01      	cmp	r3, #1
    95e8:	d00d      	beq.n	9606 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    95ea:	6946      	ldr	r6, [r0, #20]
    95ec:	2401      	movs	r4, #1
    95ee:	9403      	str	r4, [sp, #12]
    95f0:	9302      	str	r3, [sp, #8]
    95f2:	4b35      	ldr	r3, [pc, #212]	; (96c8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    95f4:	9301      	str	r3, [sp, #4]
    95f6:	4b38      	ldr	r3, [pc, #224]	; (96d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
    95f8:	9300      	str	r3, [sp, #0]
    95fa:	2333      	movs	r3, #51	; 0x33
    95fc:	4a34      	ldr	r2, [pc, #208]	; (96d0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    95fe:	4935      	ldr	r1, [pc, #212]	; (96d4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
    9600:	47b0      	blx	r6
    9602:	4620      	mov	r0, r4
    9604:	e7e8      	b.n	95d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* input = GetInput(context, node, 0);
    9606:	2200      	movs	r2, #0
    9608:	f006 f9a2 	bl	f950 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    960c:	4607      	mov	r7, r0
    960e:	b1b8      	cbz	r0, 9640 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
  TfLiteTensor* output = GetOutput(context, node, 0);
    9610:	2200      	movs	r2, #0
    9612:	4621      	mov	r1, r4
    9614:	4628      	mov	r0, r5
    9616:	f006 f9ba 	bl	f98e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    961a:	4604      	mov	r4, r0
    961c:	b1d0      	cbz	r0, 9654 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
    961e:	783b      	ldrb	r3, [r7, #0]
    9620:	2b03      	cmp	r3, #3
    9622:	d021      	beq.n	9668 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    9624:	2b09      	cmp	r3, #9
    9626:	d01f      	beq.n	9668 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    9628:	2b07      	cmp	r3, #7
    962a:	d01d      	beq.n	9668 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    962c:	696c      	ldr	r4, [r5, #20]
    962e:	4b2b      	ldr	r3, [pc, #172]	; (96dc <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    9630:	9300      	str	r3, [sp, #0]
    9632:	233b      	movs	r3, #59	; 0x3b
    9634:	4a26      	ldr	r2, [pc, #152]	; (96d0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    9636:	492a      	ldr	r1, [pc, #168]	; (96e0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    9638:	4628      	mov	r0, r5
    963a:	47a0      	blx	r4
    963c:	2001      	movs	r0, #1
    963e:	e7cb      	b.n	95d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, input != nullptr);
    9640:	696c      	ldr	r4, [r5, #20]
    9642:	4b28      	ldr	r3, [pc, #160]	; (96e4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    9644:	9300      	str	r3, [sp, #0]
    9646:	2337      	movs	r3, #55	; 0x37
    9648:	4a21      	ldr	r2, [pc, #132]	; (96d0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    964a:	4925      	ldr	r1, [pc, #148]	; (96e0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    964c:	4628      	mov	r0, r5
    964e:	47a0      	blx	r4
    9650:	2001      	movs	r0, #1
    9652:	e7c1      	b.n	95d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, output != nullptr);
    9654:	696c      	ldr	r4, [r5, #20]
    9656:	4b24      	ldr	r3, [pc, #144]	; (96e8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
    9658:	9300      	str	r3, [sp, #0]
    965a:	2339      	movs	r3, #57	; 0x39
    965c:	4a1c      	ldr	r2, [pc, #112]	; (96d0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    965e:	4920      	ldr	r1, [pc, #128]	; (96e0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    9660:	4628      	mov	r0, r5
    9662:	47a0      	blx	r4
    9664:	2001      	movs	r0, #1
    9666:	e7b7      	b.n	95d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
    9668:	7823      	ldrb	r3, [r4, #0]
    966a:	2b01      	cmp	r3, #1
    966c:	d009      	beq.n	9682 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    966e:	696c      	ldr	r4, [r5, #20]
    9670:	4b1e      	ldr	r3, [pc, #120]	; (96ec <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    9672:	9300      	str	r3, [sp, #0]
    9674:	233e      	movs	r3, #62	; 0x3e
    9676:	4a16      	ldr	r2, [pc, #88]	; (96d0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    9678:	4919      	ldr	r1, [pc, #100]	; (96e0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    967a:	4628      	mov	r0, r5
    967c:	47a0      	blx	r4
    967e:	2001      	movs	r0, #1
    9680:	e7aa      	b.n	95d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  if (output->type == kTfLiteInt32) {
    9682:	2b02      	cmp	r3, #2
    9684:	d00a      	beq.n	969c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  data->quantization_params.zero_point = input->params.zero_point;
    9686:	693b      	ldr	r3, [r7, #16]
    9688:	60b3      	str	r3, [r6, #8]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
    968a:	68f8      	ldr	r0, [r7, #12]
    968c:	f7f6 fec8 	bl	420 <__aeabi_f2d>
    9690:	e9c6 0100 	strd	r0, r1, [r6]
  data->output_zero_point = output->params.zero_point;
    9694:	6923      	ldr	r3, [r4, #16]
    9696:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
    9698:	2000      	movs	r0, #0
    969a:	e79d      	b.n	95d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
        static_cast<double>(input->params.scale) /
    969c:	68f8      	ldr	r0, [r7, #12]
    969e:	f7f6 febf 	bl	420 <__aeabi_f2d>
    96a2:	4680      	mov	r8, r0
    96a4:	4689      	mov	r9, r1
        static_cast<double>(output->params.scale);
    96a6:	68e0      	ldr	r0, [r4, #12]
    96a8:	f7f6 feba 	bl	420 <__aeabi_f2d>
    96ac:	4602      	mov	r2, r0
    96ae:	460b      	mov	r3, r1
    const double effective_output_scale =
    96b0:	4640      	mov	r0, r8
    96b2:	4649      	mov	r1, r9
    96b4:	f7f7 f836 	bl	724 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
    96b8:	f106 0314 	add.w	r3, r6, #20
    96bc:	f106 0210 	add.w	r2, r6, #16
    96c0:	f7ff fbce 	bl	8e60 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    96c4:	e7df      	b.n	9686 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
    96c6:	bf00      	nop
    96c8:	00057804 	.word	0x00057804
    96cc:	00057408 	.word	0x00057408
    96d0:	00057398 	.word	0x00057398
    96d4:	000573ec 	.word	0x000573ec
    96d8:	00057418 	.word	0x00057418
    96dc:	00057454 	.word	0x00057454
    96e0:	00056eec 	.word	0x00056eec
    96e4:	0005742c 	.word	0x0005742c
    96e8:	00057440 	.word	0x00057440
    96ec:	000574b0 	.word	0x000574b0

000096f0 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:
  return kTfLiteOk;
}

}  // namespace dequantize

TfLiteRegistration Register_DEQUANTIZE() {
    96f0:	b470      	push	{r4, r5, r6}
    96f2:	4606      	mov	r6, r0
          /*prepare=*/dequantize::Prepare,
          /*invoke=*/dequantize::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    96f4:	4604      	mov	r4, r0
    96f6:	4d05      	ldr	r5, [pc, #20]	; (970c <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x1c>)
    96f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    96fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    96fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    9704:	4630      	mov	r0, r6
    9706:	bc70      	pop	{r4, r5, r6}
    9708:	4770      	bx	lr
    970a:	bf00      	nop
    970c:	000110e0 	.word	0x000110e0

00009710 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9714:	b0a4      	sub	sp, #144	; 0x90
  TFLITE_DCHECK(node->user_data != nullptr);
    9716:	f8d1 8010 	ldr.w	r8, [r1, #16]
    971a:	f1b8 0f00 	cmp.w	r8, #0
    971e:	d02b      	beq.n	9778 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    9720:	4604      	mov	r4, r0
    9722:	460d      	mov	r5, r1
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    9724:	b350      	cbz	r0, 977c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
  TFLITE_DCHECK(node != nullptr);
    9726:	b359      	cbz	r1, 9780 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    9728:	6d43      	ldr	r3, [r0, #84]	; 0x54
    972a:	680a      	ldr	r2, [r1, #0]
    972c:	6851      	ldr	r1, [r2, #4]
    972e:	4798      	blx	r3
    9730:	4606      	mov	r6, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    9732:	b33c      	cbz	r4, 9784 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
    9734:	b345      	cbz	r5, 9788 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x78>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    9736:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9738:	686a      	ldr	r2, [r5, #4]
    973a:	6851      	ldr	r1, [r2, #4]
    973c:	4620      	mov	r0, r4
    973e:	4798      	blx	r3
    9740:	4605      	mov	r5, r0
  if (output->type == kTfLiteFloat32) {
    9742:	7a07      	ldrb	r7, [r0, #8]
    9744:	2f01      	cmp	r7, #1
    9746:	f040 81a3 	bne.w	9a90 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x380>
    switch (input->type) {
    974a:	7a30      	ldrb	r0, [r6, #8]
    974c:	2807      	cmp	r0, #7
    974e:	f000 811d 	beq.w	998c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x27c>
    9752:	2809      	cmp	r0, #9
    9754:	f000 809a 	beq.w	988c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x17c>
    9758:	2803      	cmp	r0, #3
    975a:	d017      	beq.n	978c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    975c:	f8d4 8014 	ldr.w	r8, [r4, #20]
    9760:	f7ff fb28 	bl	8db4 <TfLiteTypeGetName>
    9764:	4606      	mov	r6, r0
    9766:	7a28      	ldrb	r0, [r5, #8]
    9768:	f7ff fb24 	bl	8db4 <TfLiteTypeGetName>
    976c:	4603      	mov	r3, r0
    976e:	4632      	mov	r2, r6
    9770:	49be      	ldr	r1, [pc, #760]	; (9a6c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x35c>)
    9772:	4620      	mov	r0, r4
    9774:	47c0      	blx	r8
        return kTfLiteError;
    9776:	e199      	b.n	9aac <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
  TFLITE_DCHECK(node->user_data != nullptr);
    9778:	f006 fcf4 	bl	10164 <abort>
  TFLITE_DCHECK(context != nullptr);
    977c:	f006 fcf2 	bl	10164 <abort>
  TFLITE_DCHECK(node != nullptr);
    9780:	f006 fcf0 	bl	10164 <abort>
  TFLITE_DCHECK(context != nullptr);
    9784:	f006 fcee 	bl	10164 <abort>
  TFLITE_DCHECK(node != nullptr);
    9788:	f006 fcec 	bl	10164 <abort>
                                  tflite::micro::GetTensorShape(input),
    978c:	4631      	mov	r1, r6
    978e:	4668      	mov	r0, sp
    9790:	f006 fa48 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    9794:	4630      	mov	r0, r6
    9796:	f006 f9dc 	bl	fb52 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
    979a:	4604      	mov	r4, r0
                                  tflite::micro::GetTensorShape(output),
    979c:	4629      	mov	r1, r5
    979e:	a806      	add	r0, sp, #24
    97a0:	f006 fa40 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    97a4:	4628      	mov	r0, r5
    97a6:	f006 f993 	bl	fad0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    97aa:	4605      	mov	r5, r0
template <typename InputT, typename OutputT>
inline void Dequantize(const tflite::DequantizationParams& op_params,
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32_t zero_point = op_params.zero_point;
    97ac:	f8d8 9008 	ldr.w	r9, [r8, #8]
  const double scale = op_params.scale;
    97b0:	e9d8 6700 	ldrd	r6, r7, [r8]
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
  }

  inline int32_t DimensionsCount() const { return size_; }
    97b4:	9800      	ldr	r0, [sp, #0]
    97b6:	9b06      	ldr	r3, [sp, #24]

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    97b8:	4298      	cmp	r0, r3
    97ba:	d101      	bne.n	97c0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    97bc:	2300      	movs	r3, #0
    97be:	e017      	b.n	97f0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    97c0:	f006 fcd0 	bl	10164 <abort>
    TFLITE_DCHECK_GE(i, 0);
    97c4:	f006 fcce 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    97c8:	f006 fccc 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    97cc:	aa24      	add	r2, sp, #144	; 0x90
    97ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    97d2:	f852 2c8c 	ldr.w	r2, [r2, #-140]
    97d6:	e017      	b.n	9808 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xf8>
    TFLITE_DCHECK_GE(i, 0);
    97d8:	f006 fcc4 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    97dc:	f006 fcc2 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    97e0:	a924      	add	r1, sp, #144	; 0x90
    97e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    97e6:	f851 1c74 	ldr.w	r1, [r1, #-116]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    97ea:	4291      	cmp	r1, r2
    97ec:	d117      	bne.n	981e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x10e>
  for (int i = 0; i < dims_count; ++i) {
    97ee:	3301      	adds	r3, #1
    97f0:	4298      	cmp	r0, r3
    97f2:	dd16      	ble.n	9822 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x112>
    TFLITE_DCHECK_GE(i, 0);
    97f4:	2b00      	cmp	r3, #0
    97f6:	dbe5      	blt.n	97c4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    97f8:	9a00      	ldr	r2, [sp, #0]
    97fa:	4293      	cmp	r3, r2
    97fc:	dae4      	bge.n	97c8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    97fe:	2a05      	cmp	r2, #5
    9800:	dde4      	ble.n	97cc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xbc>
    9802:	9a01      	ldr	r2, [sp, #4]
    9804:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    9808:	2b00      	cmp	r3, #0
    980a:	dbe5      	blt.n	97d8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xc8>
    TFLITE_DCHECK_LT(i, size_);
    980c:	9906      	ldr	r1, [sp, #24]
    980e:	428b      	cmp	r3, r1
    9810:	dae4      	bge.n	97dc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9812:	2905      	cmp	r1, #5
    9814:	dde4      	ble.n	97e0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xd0>
    9816:	9907      	ldr	r1, [sp, #28]
    9818:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    981c:	e7e5      	b.n	97ea <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xda>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    981e:	f006 fca1 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9822:	2805      	cmp	r0, #5
    9824:	dd0b      	ble.n	983e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x12e>
    9826:	9901      	ldr	r1, [sp, #4]
    for (int i = 0; i < size_; i++) {
    9828:	2300      	movs	r3, #0
    int buffer_size = 1;
    982a:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
    982e:	4298      	cmp	r0, r3
    9830:	dd07      	ble.n	9842 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x132>
      buffer_size *= dims_data[i];
    9832:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    9836:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
    983a:	3301      	adds	r3, #1
    983c:	e7f7      	b.n	982e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    983e:	a901      	add	r1, sp, #4
    9840:	e7f2      	b.n	9828 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x118>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
    9842:	f04f 0800 	mov.w	r8, #0
    9846:	45d0      	cmp	r8, sl
    9848:	da10      	bge.n	986c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    const int32_t val = input_data[i];
    984a:	f814 0008 	ldrb.w	r0, [r4, r8]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    984e:	eba0 0009 	sub.w	r0, r0, r9
    9852:	f7f6 fdd3 	bl	3fc <__aeabi_i2d>
    9856:	4632      	mov	r2, r6
    9858:	463b      	mov	r3, r7
    985a:	f7f6 fe39 	bl	4d0 <__aeabi_dmul>
    985e:	f7f7 f8f9 	bl	a54 <__aeabi_d2f>
    output_data[i] = result;
    9862:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
  for (int i = 0; i < flat_size; i++) {
    9866:	f108 0801 	add.w	r8, r8, #1
    986a:	e7ec      	b.n	9846 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x136>
    if (size_ > kMaxSmallSize) {
    986c:	9b06      	ldr	r3, [sp, #24]
    986e:	2b05      	cmp	r3, #5
    9870:	dd03      	ble.n	987a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      delete[] dims_pointer_;
    9872:	9807      	ldr	r0, [sp, #28]
    9874:	b108      	cbz	r0, 987a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    9876:	f006 fc60 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    987a:	9b00      	ldr	r3, [sp, #0]
    987c:	2b05      	cmp	r3, #5
    987e:	dd03      	ble.n	9888 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x178>
      delete[] dims_pointer_;
    9880:	9801      	ldr	r0, [sp, #4]
    9882:	b108      	cbz	r0, 9888 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x178>
    9884:	f006 fc59 	bl	1013a <_ZdaPv>
  return kTfLiteOk;
    9888:	2700      	movs	r7, #0
        break;
    988a:	e10f      	b.n	9aac <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
                                  tflite::micro::GetTensorShape(input),
    988c:	4631      	mov	r1, r6
    988e:	a80c      	add	r0, sp, #48	; 0x30
    9890:	f006 f9c8 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    9894:	4630      	mov	r0, r6
    9896:	f006 f91f 	bl	fad8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    989a:	4604      	mov	r4, r0
                                  tflite::micro::GetTensorShape(output),
    989c:	4629      	mov	r1, r5
    989e:	a812      	add	r0, sp, #72	; 0x48
    98a0:	f006 f9c0 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    98a4:	4628      	mov	r0, r5
    98a6:	f006 f913 	bl	fad0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    98aa:	4605      	mov	r5, r0
  int32_t zero_point = op_params.zero_point;
    98ac:	f8d8 9008 	ldr.w	r9, [r8, #8]
  const double scale = op_params.scale;
    98b0:	e9d8 6700 	ldrd	r6, r7, [r8]
  inline int32_t DimensionsCount() const { return size_; }
    98b4:	980c      	ldr	r0, [sp, #48]	; 0x30
    98b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    98b8:	4298      	cmp	r0, r3
    98ba:	d101      	bne.n	98c0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b0>
  for (int i = 0; i < dims_count; ++i) {
    98bc:	2300      	movs	r3, #0
    98be:	e017      	b.n	98f0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    98c0:	f006 fc50 	bl	10164 <abort>
    TFLITE_DCHECK_GE(i, 0);
    98c4:	f006 fc4e 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    98c8:	f006 fc4c 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    98cc:	aa24      	add	r2, sp, #144	; 0x90
    98ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    98d2:	f852 2c5c 	ldr.w	r2, [r2, #-92]
    98d6:	e017      	b.n	9908 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    TFLITE_DCHECK_GE(i, 0);
    98d8:	f006 fc44 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    98dc:	f006 fc42 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    98e0:	a924      	add	r1, sp, #144	; 0x90
    98e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    98e6:	f851 1c44 	ldr.w	r1, [r1, #-68]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    98ea:	4291      	cmp	r1, r2
    98ec:	d117      	bne.n	991e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x20e>
  for (int i = 0; i < dims_count; ++i) {
    98ee:	3301      	adds	r3, #1
    98f0:	4298      	cmp	r0, r3
    98f2:	dd16      	ble.n	9922 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x212>
    TFLITE_DCHECK_GE(i, 0);
    98f4:	2b00      	cmp	r3, #0
    98f6:	dbe5      	blt.n	98c4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b4>
    TFLITE_DCHECK_LT(i, size_);
    98f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    98fa:	4293      	cmp	r3, r2
    98fc:	dae4      	bge.n	98c8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    98fe:	2a05      	cmp	r2, #5
    9900:	dde4      	ble.n	98cc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1bc>
    9902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9904:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    9908:	2b00      	cmp	r3, #0
    990a:	dbe5      	blt.n	98d8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
    990c:	9912      	ldr	r1, [sp, #72]	; 0x48
    990e:	428b      	cmp	r3, r1
    9910:	dae4      	bge.n	98dc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9912:	2905      	cmp	r1, #5
    9914:	dde4      	ble.n	98e0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    9916:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9918:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    991c:	e7e5      	b.n	98ea <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1da>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    991e:	f006 fc21 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9922:	2805      	cmp	r0, #5
    9924:	dd0b      	ble.n	993e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x22e>
    9926:	990d      	ldr	r1, [sp, #52]	; 0x34
    for (int i = 0; i < size_; i++) {
    9928:	2300      	movs	r3, #0
    int buffer_size = 1;
    992a:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
    992e:	4298      	cmp	r0, r3
    9930:	dd07      	ble.n	9942 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x232>
      buffer_size *= dims_data[i];
    9932:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    9936:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
    993a:	3301      	adds	r3, #1
    993c:	e7f7      	b.n	992e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    993e:	a90d      	add	r1, sp, #52	; 0x34
    9940:	e7f2      	b.n	9928 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>
  for (int i = 0; i < flat_size; i++) {
    9942:	f04f 0800 	mov.w	r8, #0
    9946:	45d0      	cmp	r8, sl
    9948:	da10      	bge.n	996c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
    const int32_t val = input_data[i];
    994a:	f914 0008 	ldrsb.w	r0, [r4, r8]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    994e:	eba0 0009 	sub.w	r0, r0, r9
    9952:	f7f6 fd53 	bl	3fc <__aeabi_i2d>
    9956:	4632      	mov	r2, r6
    9958:	463b      	mov	r3, r7
    995a:	f7f6 fdb9 	bl	4d0 <__aeabi_dmul>
    995e:	f7f7 f879 	bl	a54 <__aeabi_d2f>
    output_data[i] = result;
    9962:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
  for (int i = 0; i < flat_size; i++) {
    9966:	f108 0801 	add.w	r8, r8, #1
    996a:	e7ec      	b.n	9946 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x236>
    if (size_ > kMaxSmallSize) {
    996c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    996e:	2b05      	cmp	r3, #5
    9970:	dd03      	ble.n	997a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x26a>
      delete[] dims_pointer_;
    9972:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9974:	b108      	cbz	r0, 997a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x26a>
    9976:	f006 fbe0 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    997a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    997c:	2b05      	cmp	r3, #5
    997e:	dd03      	ble.n	9988 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x278>
      delete[] dims_pointer_;
    9980:	980d      	ldr	r0, [sp, #52]	; 0x34
    9982:	b108      	cbz	r0, 9988 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x278>
    9984:	f006 fbd9 	bl	1013a <_ZdaPv>
  return kTfLiteOk;
    9988:	2700      	movs	r7, #0
        break;
    998a:	e08f      	b.n	9aac <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
                                  tflite::micro::GetTensorShape(input),
    998c:	4631      	mov	r1, r6
    998e:	a818      	add	r0, sp, #96	; 0x60
    9990:	f006 f948 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    9994:	4630      	mov	r0, r6
    9996:	f006 f8c8 	bl	fb2a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    999a:	4604      	mov	r4, r0
                                  tflite::micro::GetTensorShape(output),
    999c:	4629      	mov	r1, r5
    999e:	a81e      	add	r0, sp, #120	; 0x78
    99a0:	f006 f940 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    99a4:	4628      	mov	r0, r5
    99a6:	f006 f893 	bl	fad0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    99aa:	4605      	mov	r5, r0
  int32_t zero_point = op_params.zero_point;
    99ac:	f8d8 9008 	ldr.w	r9, [r8, #8]
  const double scale = op_params.scale;
    99b0:	e9d8 6700 	ldrd	r6, r7, [r8]
  inline int32_t DimensionsCount() const { return size_; }
    99b4:	9818      	ldr	r0, [sp, #96]	; 0x60
    99b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    99b8:	4298      	cmp	r0, r3
    99ba:	d101      	bne.n	99c0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
  for (int i = 0; i < dims_count; ++i) {
    99bc:	2300      	movs	r3, #0
    99be:	e017      	b.n	99f0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    99c0:	f006 fbd0 	bl	10164 <abort>
    TFLITE_DCHECK_GE(i, 0);
    99c4:	f006 fbce 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    99c8:	f006 fbcc 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    99cc:	aa24      	add	r2, sp, #144	; 0x90
    99ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    99d2:	f852 2c2c 	ldr.w	r2, [r2, #-44]
    99d6:	e017      	b.n	9a08 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    TFLITE_DCHECK_GE(i, 0);
    99d8:	f006 fbc4 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    99dc:	f006 fbc2 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    99e0:	a924      	add	r1, sp, #144	; 0x90
    99e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    99e6:	f851 1c14 	ldr.w	r1, [r1, #-20]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    99ea:	4291      	cmp	r1, r2
    99ec:	d117      	bne.n	9a1e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x30e>
  for (int i = 0; i < dims_count; ++i) {
    99ee:	3301      	adds	r3, #1
    99f0:	4298      	cmp	r0, r3
    99f2:	dd16      	ble.n	9a22 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x312>
    TFLITE_DCHECK_GE(i, 0);
    99f4:	2b00      	cmp	r3, #0
    99f6:	dbe5      	blt.n	99c4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
    TFLITE_DCHECK_LT(i, size_);
    99f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    99fa:	4293      	cmp	r3, r2
    99fc:	dae4      	bge.n	99c8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    99fe:	2a05      	cmp	r2, #5
    9a00:	dde4      	ble.n	99cc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
    9a02:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    9a08:	2b00      	cmp	r3, #0
    9a0a:	dbe5      	blt.n	99d8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
    TFLITE_DCHECK_LT(i, size_);
    9a0c:	991e      	ldr	r1, [sp, #120]	; 0x78
    9a0e:	428b      	cmp	r3, r1
    9a10:	dae4      	bge.n	99dc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9a12:	2905      	cmp	r1, #5
    9a14:	dde4      	ble.n	99e0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2d0>
    9a16:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9a18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    9a1c:	e7e5      	b.n	99ea <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    9a1e:	f006 fba1 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9a22:	2805      	cmp	r0, #5
    9a24:	dd0b      	ble.n	9a3e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x32e>
    9a26:	9919      	ldr	r1, [sp, #100]	; 0x64
    for (int i = 0; i < size_; i++) {
    9a28:	2300      	movs	r3, #0
    int buffer_size = 1;
    9a2a:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
    9a2e:	4298      	cmp	r0, r3
    9a30:	dd07      	ble.n	9a42 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x332>
      buffer_size *= dims_data[i];
    9a32:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    9a36:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
    9a3a:	3301      	adds	r3, #1
    9a3c:	e7f7      	b.n	9a2e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x31e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9a3e:	a919      	add	r1, sp, #100	; 0x64
    9a40:	e7f2      	b.n	9a28 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x318>
  for (int i = 0; i < flat_size; i++) {
    9a42:	f04f 0800 	mov.w	r8, #0
    9a46:	45d0      	cmp	r8, sl
    9a48:	da12      	bge.n	9a70 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x360>
    const int32_t val = input_data[i];
    9a4a:	f934 0018 	ldrsh.w	r0, [r4, r8, lsl #1]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    9a4e:	eba0 0009 	sub.w	r0, r0, r9
    9a52:	f7f6 fcd3 	bl	3fc <__aeabi_i2d>
    9a56:	4632      	mov	r2, r6
    9a58:	463b      	mov	r3, r7
    9a5a:	f7f6 fd39 	bl	4d0 <__aeabi_dmul>
    9a5e:	f7f6 fff9 	bl	a54 <__aeabi_d2f>
    output_data[i] = result;
    9a62:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
  for (int i = 0; i < flat_size; i++) {
    9a66:	f108 0801 	add.w	r8, r8, #1
    9a6a:	e7ec      	b.n	9a46 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x336>
    9a6c:	000574d0 	.word	0x000574d0
    if (size_ > kMaxSmallSize) {
    9a70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9a72:	2b05      	cmp	r3, #5
    9a74:	dd03      	ble.n	9a7e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x36e>
      delete[] dims_pointer_;
    9a76:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9a78:	b108      	cbz	r0, 9a7e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    9a7a:	f006 fb5e 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9a7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9a80:	2b05      	cmp	r3, #5
    9a82:	dd03      	ble.n	9a8c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x37c>
      delete[] dims_pointer_;
    9a84:	9819      	ldr	r0, [sp, #100]	; 0x64
    9a86:	b108      	cbz	r0, 9a8c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    9a88:	f006 fb57 	bl	1013a <_ZdaPv>
  return kTfLiteOk;
    9a8c:	2700      	movs	r7, #0
        break;
    9a8e:	e00d      	b.n	9aac <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    9a90:	6967      	ldr	r7, [r4, #20]
    9a92:	7a30      	ldrb	r0, [r6, #8]
    9a94:	f7ff f98e 	bl	8db4 <TfLiteTypeGetName>
    9a98:	4606      	mov	r6, r0
    9a9a:	7a28      	ldrb	r0, [r5, #8]
    9a9c:	f7ff f98a 	bl	8db4 <TfLiteTypeGetName>
    9aa0:	4603      	mov	r3, r0
    9aa2:	4632      	mov	r2, r6
    9aa4:	4903      	ldr	r1, [pc, #12]	; (9ab4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x3a4>)
    9aa6:	4620      	mov	r0, r4
    9aa8:	47b8      	blx	r7
    return kTfLiteError;
    9aaa:	2701      	movs	r7, #1
}
    9aac:	4638      	mov	r0, r7
    9aae:	b024      	add	sp, #144	; 0x90
    9ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ab4:	000574d0 	.word	0x000574d0

00009ab8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9abc:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    9abe:	690d      	ldr	r5, [r1, #16]
    9ac0:	b37d      	cbz	r5, 9b22 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    9ac2:	4607      	mov	r7, r0
    9ac4:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9ac6:	694e      	ldr	r6, [r1, #20]
    9ac8:	b36e      	cbz	r6, 9b26 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    9aca:	4b38      	ldr	r3, [pc, #224]	; (9bac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    9acc:	681a      	ldr	r2, [r3, #0]
    9ace:	f005 ff3f 	bl	f950 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    9ad2:	4681      	mov	r9, r0
    9ad4:	b348      	cbz	r0, 9b2a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x72>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
    9ad6:	4b36      	ldr	r3, [pc, #216]	; (9bb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    9ad8:	681a      	ldr	r2, [r3, #0]
    9ada:	4621      	mov	r1, r4
    9adc:	4638      	mov	r0, r7
    9ade:	f005 ff37 	bl	f950 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    9ae2:	4682      	mov	sl, r0
    9ae4:	b368      	cbz	r0, 9b42 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    9ae6:	4b33      	ldr	r3, [pc, #204]	; (9bb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    9ae8:	681a      	ldr	r2, [r3, #0]
    9aea:	4621      	mov	r1, r4
    9aec:	4638      	mov	r0, r7
    9aee:	f005 ff6d 	bl	f9cc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    9af2:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    9af4:	4b30      	ldr	r3, [pc, #192]	; (9bb8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    9af6:	681a      	ldr	r2, [r3, #0]
    9af8:	4621      	mov	r1, r4
    9afa:	4638      	mov	r0, r7
    9afc:	f005 ff47 	bl	f98e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    9b00:	4604      	mov	r4, r0
    9b02:	b340      	cbz	r0, 9b56 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    9b04:	f899 0000 	ldrb.w	r0, [r9]
    9b08:	7823      	ldrb	r3, [r4, #0]
    9b0a:	4298      	cmp	r0, r3
    9b0c:	d12d      	bne.n	9b6a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    9b0e:	f89a 3000 	ldrb.w	r3, [sl]
    9b12:	4298      	cmp	r0, r3
    9b14:	d03d      	beq.n	9b92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    9b16:	697b      	ldr	r3, [r7, #20]
    9b18:	4928      	ldr	r1, [pc, #160]	; (9bbc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    9b1a:	4638      	mov	r0, r7
    9b1c:	4798      	blx	r3
    9b1e:	2001      	movs	r0, #1
    9b20:	e00c      	b.n	9b3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TFLITE_DCHECK(node->user_data != nullptr);
    9b22:	f006 fb1f 	bl	10164 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9b26:	f006 fb1d 	bl	10164 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    9b2a:	697c      	ldr	r4, [r7, #20]
    9b2c:	4b24      	ldr	r3, [pc, #144]	; (9bc0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    9b2e:	9300      	str	r3, [sp, #0]
    9b30:	232f      	movs	r3, #47	; 0x2f
    9b32:	4a24      	ldr	r2, [pc, #144]	; (9bc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    9b34:	4924      	ldr	r1, [pc, #144]	; (9bc8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    9b36:	4638      	mov	r0, r7
    9b38:	47a0      	blx	r4
    9b3a:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    9b3c:	b004      	add	sp, #16
    9b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, filter != nullptr);
    9b42:	697c      	ldr	r4, [r7, #20]
    9b44:	4b21      	ldr	r3, [pc, #132]	; (9bcc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    9b46:	9300      	str	r3, [sp, #0]
    9b48:	2332      	movs	r3, #50	; 0x32
    9b4a:	4a1e      	ldr	r2, [pc, #120]	; (9bc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    9b4c:	491e      	ldr	r1, [pc, #120]	; (9bc8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    9b4e:	4638      	mov	r0, r7
    9b50:	47a0      	blx	r4
    9b52:	2001      	movs	r0, #1
    9b54:	e7f2      	b.n	9b3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output != nullptr);
    9b56:	697c      	ldr	r4, [r7, #20]
    9b58:	4b1d      	ldr	r3, [pc, #116]	; (9bd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    9b5a:	9300      	str	r3, [sp, #0]
    9b5c:	2336      	movs	r3, #54	; 0x36
    9b5e:	4a19      	ldr	r2, [pc, #100]	; (9bc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    9b60:	4919      	ldr	r1, [pc, #100]	; (9bc8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    9b62:	4638      	mov	r0, r7
    9b64:	47a0      	blx	r4
    9b66:	2001      	movs	r0, #1
    9b68:	e7e8      	b.n	9b3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    9b6a:	697e      	ldr	r6, [r7, #20]
    9b6c:	f7ff f922 	bl	8db4 <TfLiteTypeGetName>
    9b70:	4605      	mov	r5, r0
    9b72:	7820      	ldrb	r0, [r4, #0]
    9b74:	f7ff f91e 	bl	8db4 <TfLiteTypeGetName>
    9b78:	9003      	str	r0, [sp, #12]
    9b7a:	9502      	str	r5, [sp, #8]
    9b7c:	4b15      	ldr	r3, [pc, #84]	; (9bd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
    9b7e:	9301      	str	r3, [sp, #4]
    9b80:	4b15      	ldr	r3, [pc, #84]	; (9bd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    9b82:	9300      	str	r3, [sp, #0]
    9b84:	2338      	movs	r3, #56	; 0x38
    9b86:	4a0f      	ldr	r2, [pc, #60]	; (9bc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    9b88:	4914      	ldr	r1, [pc, #80]	; (9bdc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    9b8a:	4638      	mov	r0, r7
    9b8c:	47b0      	blx	r6
    9b8e:	2001      	movs	r0, #1
    9b90:	e7d4      	b.n	9b3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    9b92:	7831      	ldrb	r1, [r6, #0]
    9b94:	9503      	str	r5, [sp, #12]
    9b96:	9402      	str	r4, [sp, #8]
    9b98:	f8cd 8004 	str.w	r8, [sp, #4]
    9b9c:	f8cd a000 	str.w	sl, [sp]
    9ba0:	464b      	mov	r3, r9
    9ba2:	4602      	mov	r2, r0
    9ba4:	4638      	mov	r0, r7
    9ba6:	f005 fffb 	bl	fba0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    9baa:	e7c7      	b.n	9b3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    9bac:	00057714 	.word	0x00057714
    9bb0:	0005771c 	.word	0x0005771c
    9bb4:	00057710 	.word	0x00057710
    9bb8:	00057718 	.word	0x00057718
    9bbc:	00057598 	.word	0x00057598
    9bc0:	0005742c 	.word	0x0005742c
    9bc4:	000574f4 	.word	0x000574f4
    9bc8:	00056eec 	.word	0x00056eec
    9bcc:	0005754c 	.word	0x0005754c
    9bd0:	00057440 	.word	0x00057440
    9bd4:	0005757c 	.word	0x0005757c
    9bd8:	0005758c 	.word	0x0005758c
    9bdc:	00057560 	.word	0x00057560

00009be0 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    9be0:	b470      	push	{r4, r5, r6}
    9be2:	4606      	mov	r6, r0
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    9be4:	4604      	mov	r4, r0
    9be6:	4d05      	ldr	r5, [pc, #20]	; (9bfc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
    9be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9bec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9bf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    9bf4:	4630      	mov	r0, r6
    9bf6:	bc70      	pop	{r4, r5, r6}
    9bf8:	4770      	bx	lr
    9bfa:	bf00      	nop
    9bfc:	00011100 	.word	0x00011100

00009c00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c04:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9c06:	f8d1 a014 	ldr.w	sl, [r1, #20]
    9c0a:	f1ba 0f00 	cmp.w	sl, #0
    9c0e:	d04c      	beq.n	9caa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    9c10:	4604      	mov	r4, r0
    9c12:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    9c14:	4ba5      	ldr	r3, [pc, #660]	; (9eac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    9c16:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    9c18:	2800      	cmp	r0, #0
    9c1a:	d048      	beq.n	9cae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node != nullptr);
    9c1c:	2e00      	cmp	r6, #0
    9c1e:	d048      	beq.n	9cb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    9c20:	6d42      	ldr	r2, [r0, #84]	; 0x54
    9c22:	6833      	ldr	r3, [r6, #0]
    9c24:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9c28:	6859      	ldr	r1, [r3, #4]
    9c2a:	4790      	blx	r2
    9c2c:	4680      	mov	r8, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    9c2e:	4ba0      	ldr	r3, [pc, #640]	; (9eb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    9c30:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    9c32:	2c00      	cmp	r4, #0
    9c34:	d03f      	beq.n	9cb6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  TFLITE_DCHECK(node != nullptr);
    9c36:	2e00      	cmp	r6, #0
    9c38:	d03f      	beq.n	9cba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    9c3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    9c3c:	6833      	ldr	r3, [r6, #0]
    9c3e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9c42:	6859      	ldr	r1, [r3, #4]
    9c44:	4620      	mov	r0, r4
    9c46:	4790      	blx	r2
    9c48:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    9c4a:	4b9a      	ldr	r3, [pc, #616]	; (9eb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    9c4c:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    9c4e:	2c00      	cmp	r4, #0
    9c50:	d035      	beq.n	9cbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node != nullptr);
    9c52:	2e00      	cmp	r6, #0
    9c54:	d035      	beq.n	9cc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    9c56:	6d62      	ldr	r2, [r4, #84]	; 0x54
    9c58:	6833      	ldr	r3, [r6, #0]
    9c5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9c5e:	6859      	ldr	r1, [r3, #4]
    9c60:	4620      	mov	r0, r4
    9c62:	4790      	blx	r2
    9c64:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    9c66:	4b94      	ldr	r3, [pc, #592]	; (9eb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    9c68:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    9c6a:	b364      	cbz	r4, 9cc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node != nullptr);
    9c6c:	b36e      	cbz	r6, 9cca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    9c6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    9c70:	6873      	ldr	r3, [r6, #4]
    9c72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9c76:	6859      	ldr	r1, [r3, #4]
    9c78:	4620      	mov	r0, r4
    9c7a:	4790      	blx	r2
    9c7c:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    9c7e:	6931      	ldr	r1, [r6, #16]
    9c80:	b329      	cbz	r1, 9cce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  switch (input->type) {
    9c82:	f898 0008 	ldrb.w	r0, [r8, #8]
    9c86:	2801      	cmp	r0, #1
    9c88:	d023      	beq.n	9cd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    9c8a:	2809      	cmp	r0, #9
    9c8c:	f000 8136 	beq.w	9efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    9c90:	6965      	ldr	r5, [r4, #20]
    9c92:	f7ff f88f 	bl	8db4 <TfLiteTypeGetName>
    9c96:	4602      	mov	r2, r0
    9c98:	f898 3008 	ldrb.w	r3, [r8, #8]
    9c9c:	4987      	ldr	r1, [pc, #540]	; (9ebc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    9c9e:	4620      	mov	r0, r4
    9ca0:	47a8      	blx	r5
      return kTfLiteError;
    9ca2:	2001      	movs	r0, #1
}
    9ca4:	b04f      	add	sp, #316	; 0x13c
    9ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9caa:	f006 fa5b 	bl	10164 <abort>
  TFLITE_DCHECK(context != nullptr);
    9cae:	f006 fa59 	bl	10164 <abort>
  TFLITE_DCHECK(node != nullptr);
    9cb2:	f006 fa57 	bl	10164 <abort>
  TFLITE_DCHECK(context != nullptr);
    9cb6:	f006 fa55 	bl	10164 <abort>
  TFLITE_DCHECK(node != nullptr);
    9cba:	f006 fa53 	bl	10164 <abort>
  TFLITE_DCHECK(context != nullptr);
    9cbe:	f006 fa51 	bl	10164 <abort>
  TFLITE_DCHECK(node != nullptr);
    9cc2:	f006 fa4f 	bl	10164 <abort>
  TFLITE_DCHECK(context != nullptr);
    9cc6:	f006 fa4d 	bl	10164 <abort>
  TFLITE_DCHECK(node != nullptr);
    9cca:	f006 fa4b 	bl	10164 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    9cce:	f006 fa49 	bl	10164 <abort>
          FullyConnectedParamsFloat(params->activation),
    9cd2:	f89a 1000 	ldrb.w	r1, [sl]
    9cd6:	a812      	add	r0, sp, #72	; 0x48
    9cd8:	f005 ff99 	bl	fc0e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    9cdc:	4641      	mov	r1, r8
    9cde:	a81c      	add	r0, sp, #112	; 0x70
    9ce0:	f005 ffa0 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    9ce4:	4640      	mov	r0, r8
    9ce6:	f005 feed 	bl	fac4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    9cea:	9001      	str	r0, [sp, #4]
          tflite::micro::GetTensorShape(filter),
    9cec:	4649      	mov	r1, r9
    9cee:	a822      	add	r0, sp, #136	; 0x88
    9cf0:	f005 ff98 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    9cf4:	4648      	mov	r0, r9
    9cf6:	f005 fee5 	bl	fac4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    9cfa:	9002      	str	r0, [sp, #8]
          tflite::micro::GetTensorShape(bias),
    9cfc:	4639      	mov	r1, r7
    9cfe:	a828      	add	r0, sp, #160	; 0xa0
    9d00:	f005 ff90 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    9d04:	4638      	mov	r0, r7
    9d06:	f005 fedd 	bl	fac4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    9d0a:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    9d0c:	4629      	mov	r1, r5
    9d0e:	a82e      	add	r0, sp, #184	; 0xb8
    9d10:	f005 ff88 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    9d14:	4628      	mov	r0, r5
    9d16:	f005 fedb 	bl	fad0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    9d1a:	9003      	str	r0, [sp, #12]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  const float output_activation_min = params.float_activation_min;
    9d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9d1e:	9304      	str	r3, [sp, #16]
  const float output_activation_max = params.float_activation_max;
    9d20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  inline int32_t DimensionsCount() const { return size_; }
    9d24:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    9d26:	9922      	ldr	r1, [sp, #136]	; 0x88
    9d28:	461c      	mov	r4, r3
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    9d2a:	1e5a      	subs	r2, r3, #1
    9d2c:	d405      	bmi.n	9d3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    9d2e:	429a      	cmp	r2, r3
    9d30:	da03      	bge.n	9d3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9d32:	2b05      	cmp	r3, #5
    9d34:	dd03      	ble.n	9d3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
    9d36:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    9d38:	e002      	b.n	9d40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    9d3a:	f006 fa13 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9d3e:	ad2f      	add	r5, sp, #188	; 0xbc
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
    9d40:	2300      	movs	r3, #0
  int flat_size = 1;
    9d42:	f04f 0801 	mov.w	r8, #1
    9d46:	e004      	b.n	9d52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    9d48:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    9d4c:	fb00 f808 	mul.w	r8, r0, r8
  for (int i = 0; i < dims_count; ++i) {
    9d50:	3301      	adds	r3, #1
    9d52:	429c      	cmp	r4, r3
    9d54:	dd03      	ble.n	9d5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    9d56:	429a      	cmp	r2, r3
    9d58:	d1f6      	bne.n	9d48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
    9d5a:	2001      	movs	r0, #1
    9d5c:	e7f6      	b.n	9d4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TFLITE_DCHECK_GE(i, 0);
    9d5e:	1e8b      	subs	r3, r1, #2
    9d60:	d433      	bmi.n	9dca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TFLITE_DCHECK_LT(i, size_);
    9d62:	9822      	ldr	r0, [sp, #136]	; 0x88
    9d64:	4283      	cmp	r3, r0
    9d66:	da32      	bge.n	9dce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9d68:	2805      	cmp	r0, #5
    9d6a:	dd32      	ble.n	9dd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    9d6c:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9d6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    9d72:	2a00      	cmp	r2, #0
    9d74:	db33      	blt.n	9dde <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    9d76:	982e      	ldr	r0, [sp, #184]	; 0xb8
    9d78:	4282      	cmp	r2, r0
    9d7a:	da32      	bge.n	9de2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9d7c:	2805      	cmp	r0, #5
    9d7e:	dd32      	ble.n	9de6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    9d80:	982f      	ldr	r0, [sp, #188]	; 0xbc
    9d82:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    9d86:	4298      	cmp	r0, r3
    9d88:	d133      	bne.n	9df2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    9d8a:	934d      	str	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_GE(i, 0);
    9d8c:	2a00      	cmp	r2, #0
    9d8e:	db32      	blt.n	9df6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
    9d90:	982e      	ldr	r0, [sp, #184]	; 0xb8
    9d92:	4282      	cmp	r2, r0
    9d94:	da31      	bge.n	9dfa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9d96:	2805      	cmp	r0, #5
    9d98:	dd31      	ble.n	9dfe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    9d9a:	982f      	ldr	r0, [sp, #188]	; 0xbc
    9d9c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    9da0:	924c      	str	r2, [sp, #304]	; 0x130
      if (__b < __a)
    9da2:	4293      	cmp	r3, r2
    9da4:	dc31      	bgt.n	9e0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
      return __a;
    9da6:	ab4d      	add	r3, sp, #308	; 0x134
    9da8:	f8d3 b000 	ldr.w	fp, [r3]
    TFLITE_DCHECK_GE(i, 0);
    9dac:	3901      	subs	r1, #1
    9dae:	d42e      	bmi.n	9e0e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    TFLITE_DCHECK_LT(i, size_);
    9db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9db2:	4299      	cmp	r1, r3
    9db4:	da2d      	bge.n	9e12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9db6:	2b05      	cmp	r3, #5
    9db8:	dd2d      	ble.n	9e16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    9dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9dbc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    9dc0:	2700      	movs	r7, #0
    9dc2:	f8cd 8014 	str.w	r8, [sp, #20]
    9dc6:	46b0      	mov	r8, r6
    9dc8:	e06a      	b.n	9ea0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    TFLITE_DCHECK_GE(i, 0);
    9dca:	f006 f9cb 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9dce:	f006 f9c9 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9dd2:	a84e      	add	r0, sp, #312	; 0x138
    9dd4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    9dd8:	f853 3cac 	ldr.w	r3, [r3, #-172]
    9ddc:	e7c9      	b.n	9d72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_GE(i, 0);
    9dde:	f006 f9c1 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9de2:	f006 f9bf 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9de6:	a84e      	add	r0, sp, #312	; 0x138
    9de8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    9dec:	f850 0c7c 	ldr.w	r0, [r0, #-124]
    9df0:	e7c9      	b.n	9d86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x186>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    9df2:	f006 f9b7 	bl	10164 <abort>
    TFLITE_DCHECK_GE(i, 0);
    9df6:	f006 f9b5 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9dfa:	f006 f9b3 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9dfe:	a84e      	add	r0, sp, #312	; 0x138
    9e00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    9e04:	f852 2c7c 	ldr.w	r2, [r2, #-124]
    9e08:	e7ca      	b.n	9da0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
	return __b;
    9e0a:	ab4c      	add	r3, sp, #304	; 0x130
    9e0c:	e7cc      	b.n	9da8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    TFLITE_DCHECK_GE(i, 0);
    9e0e:	f006 f9a9 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9e12:	f006 f9a7 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9e16:	ab4e      	add	r3, sp, #312	; 0x138
    9e18:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9e1c:	f851 9cac 	ldr.w	r9, [r1, #-172]
    9e20:	e7ce      	b.n	9dc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    9e22:	fb09 6307 	mla	r3, r9, r7, r6
                 weights_data[out_c * accum_depth + d];
    9e26:	fb09 6204 	mla	r2, r9, r4, r6
        total += input_data[b * accum_depth + d] *
    9e2a:	9902      	ldr	r1, [sp, #8]
    9e2c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    9e30:	9a01      	ldr	r2, [sp, #4]
    9e32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    9e36:	f7f6 ff6b 	bl	d10 <__aeabi_fmul>
    9e3a:	4601      	mov	r1, r0
    9e3c:	4628      	mov	r0, r5
    9e3e:	f7f6 fe5f 	bl	b00 <__addsf3>
    9e42:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    9e44:	3601      	adds	r6, #1
    9e46:	454e      	cmp	r6, r9
    9e48:	dbeb      	blt.n	9e22 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
      }
      float bias_value = 0.0f;
      if (bias_data) {
    9e4a:	f1b8 0f00 	cmp.w	r8, #0
    9e4e:	d020      	beq.n	9e92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
        bias_value = bias_data[out_c];
    9e50:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    9e54:	4628      	mov	r0, r5
    9e56:	f7f6 fe53 	bl	b00 <__addsf3>
    9e5a:	4601      	mov	r1, r0
    9e5c:	fb0b 4607 	mla	r6, fp, r7, r4
    9e60:	9011      	str	r0, [sp, #68]	; 0x44
    9e62:	9b04      	ldr	r3, [sp, #16]
    9e64:	9310      	str	r3, [sp, #64]	; 0x40
    9e66:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      if (__a < __b)
    9e6a:	4618      	mov	r0, r3
    9e6c:	f7f7 f90c 	bl	1088 <__aeabi_fcmpgt>
    9e70:	b988      	cbnz	r0, 9e96 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
      return __a;
    9e72:	ad11      	add	r5, sp, #68	; 0x44
      if (__b < __a)
    9e74:	6829      	ldr	r1, [r5, #0]
    9e76:	4650      	mov	r0, sl
    9e78:	f7f7 f8e8 	bl	104c <__aeabi_fcmplt>
    9e7c:	b968      	cbnz	r0, 9e9a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29a>
template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
    9e7e:	682b      	ldr	r3, [r5, #0]
    9e80:	9a03      	ldr	r2, [sp, #12]
    9e82:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    9e86:	3401      	adds	r4, #1
    9e88:	455c      	cmp	r4, fp
    9e8a:	da08      	bge.n	9e9e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      for (int d = 0; d < accum_depth; ++d) {
    9e8c:	2600      	movs	r6, #0
      float total = 0.f;
    9e8e:	2500      	movs	r5, #0
    9e90:	e7d9      	b.n	9e46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
      float bias_value = 0.0f;
    9e92:	2100      	movs	r1, #0
    9e94:	e7de      	b.n	9e54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
	return __b;
    9e96:	ad10      	add	r5, sp, #64	; 0x40
    9e98:	e7ec      	b.n	9e74 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
	return __b;
    9e9a:	ad0f      	add	r5, sp, #60	; 0x3c
    9e9c:	e7ef      	b.n	9e7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    9e9e:	3701      	adds	r7, #1
    9ea0:	9b05      	ldr	r3, [sp, #20]
    9ea2:	429f      	cmp	r7, r3
    9ea4:	da0c      	bge.n	9ec0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    9ea6:	2400      	movs	r4, #0
    9ea8:	e7ee      	b.n	9e88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>
    9eaa:	bf00      	nop
    9eac:	00057714 	.word	0x00057714
    9eb0:	0005771c 	.word	0x0005771c
    9eb4:	00057710 	.word	0x00057710
    9eb8:	00057718 	.word	0x00057718
    9ebc:	000576f4 	.word	0x000576f4
    if (size_ > kMaxSmallSize) {
    9ec0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    9ec2:	2b05      	cmp	r3, #5
    9ec4:	dd03      	ble.n	9ece <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      delete[] dims_pointer_;
    9ec6:	982f      	ldr	r0, [sp, #188]	; 0xbc
    9ec8:	b108      	cbz	r0, 9ece <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    9eca:	f006 f936 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9ece:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    9ed0:	2b05      	cmp	r3, #5
    9ed2:	dd03      	ble.n	9edc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
      delete[] dims_pointer_;
    9ed4:	9829      	ldr	r0, [sp, #164]	; 0xa4
    9ed6:	b108      	cbz	r0, 9edc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    9ed8:	f006 f92f 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9ede:	2b05      	cmp	r3, #5
    9ee0:	dd03      	ble.n	9eea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
      delete[] dims_pointer_;
    9ee2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9ee4:	b108      	cbz	r0, 9eea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    9ee6:	f006 f928 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9eea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9eec:	2b05      	cmp	r3, #5
    9eee:	dd03      	ble.n	9ef8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
      delete[] dims_pointer_;
    9ef0:	981d      	ldr	r0, [sp, #116]	; 0x74
    9ef2:	b108      	cbz	r0, 9ef8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    9ef4:	f006 f921 	bl	1013a <_ZdaPv>
  return kTfLiteOk;
    9ef8:	2000      	movs	r0, #0
      break;
    9efa:	e6d3      	b.n	9ca4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
          FullyConnectedParamsQuantized(data),
    9efc:	a812      	add	r0, sp, #72	; 0x48
    9efe:	f005 fe3e 	bl	fb7e <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    9f02:	4641      	mov	r1, r8
    9f04:	a834      	add	r0, sp, #208	; 0xd0
    9f06:	f005 fe8d 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    9f0a:	4640      	mov	r0, r8
    9f0c:	f005 fde4 	bl	fad8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    9f10:	9005      	str	r0, [sp, #20]
          tflite::micro::GetTensorShape(filter),
    9f12:	4649      	mov	r1, r9
    9f14:	a83a      	add	r0, sp, #232	; 0xe8
    9f16:	f005 fe85 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    9f1a:	4648      	mov	r0, r9
    9f1c:	f005 fddc 	bl	fad8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    9f20:	9006      	str	r0, [sp, #24]
          tflite::micro::GetTensorShape(bias),
    9f22:	4639      	mov	r1, r7
    9f24:	a840      	add	r0, sp, #256	; 0x100
    9f26:	f005 fe7d 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    9f2a:	4638      	mov	r0, r7
    9f2c:	f005 fe07 	bl	fb3e <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    9f30:	9007      	str	r0, [sp, #28]
          tflite::micro::GetTensorShape(output),
    9f32:	4629      	mov	r1, r5
    9f34:	a846      	add	r0, sp, #280	; 0x118
    9f36:	f005 fe75 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    9f3a:	4628      	mov	r0, r5
    9f3c:	f005 fdd2 	bl	fae4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    9f40:	9008      	str	r0, [sp, #32]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    9f42:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9f44:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t filter_offset = params.weights_offset;
    9f46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9f48:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_offset = params.output_offset;
    9f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9f4c:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32_t output_multiplier = params.output_multiplier;
    9f4e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
  const int output_shift = params.output_shift;
    9f52:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    9f56:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9f58:	910f      	str	r1, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
    9f5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9f5c:	9210      	str	r2, [sp, #64]	; 0x40
  inline int32_t DimensionsCount() const { return size_; }
    9f5e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    9f60:	2b01      	cmp	r3, #1
    9f62:	dd33      	ble.n	9fcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    9f64:	9846      	ldr	r0, [sp, #280]	; 0x118
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    9f66:	2802      	cmp	r0, #2
    9f68:	d132      	bne.n	9fd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    9f6a:	4291      	cmp	r1, r2
    9f6c:	dc32      	bgt.n	9fd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    TFLITE_DCHECK_LT(i, size_);
    9f6e:	9a46      	ldr	r2, [sp, #280]	; 0x118
    9f70:	2a00      	cmp	r2, #0
    9f72:	dd31      	ble.n	9fd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9f74:	2a05      	cmp	r2, #5
    9f76:	dd31      	ble.n	9fdc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    9f78:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    9f7a:	6812      	ldr	r2, [r2, #0]
    9f7c:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    9f7e:	9a46      	ldr	r2, [sp, #280]	; 0x118
    9f80:	2a01      	cmp	r2, #1
    9f82:	dd2e      	ble.n	9fe2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9f84:	2a05      	cmp	r2, #5
    9f86:	dd2e      	ble.n	9fe6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    9f88:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    9f8a:	6852      	ldr	r2, [r2, #4]
    9f8c:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_GE(i, 0);
    9f8e:	1e9a      	subs	r2, r3, #2
    9f90:	d42c      	bmi.n	9fec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    TFLITE_DCHECK_LT(i, size_);
    9f92:	993a      	ldr	r1, [sp, #232]	; 0xe8
    9f94:	428a      	cmp	r2, r1
    9f96:	da2b      	bge.n	9ff0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9f98:	2905      	cmp	r1, #5
    9f9a:	dd2b      	ble.n	9ff4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    9f9c:	993b      	ldr	r1, [sp, #236]	; 0xec
    9f9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    9fa2:	9901      	ldr	r1, [sp, #4]
    9fa4:	428a      	cmp	r2, r1
    9fa6:	db2b      	blt.n	a000 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x400>
    TFLITE_DCHECK_GE(i, 0);
    9fa8:	3b01      	subs	r3, #1
    9faa:	d42b      	bmi.n	a004 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
    TFLITE_DCHECK_LT(i, size_);
    9fac:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    9fae:	4293      	cmp	r3, r2
    9fb0:	da2a      	bge.n	a008 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x408>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9fb2:	2a05      	cmp	r2, #5
    9fb4:	dd2a      	ble.n	a00c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
    9fb6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    9fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fbc:	930d      	str	r3, [sp, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    9fbe:	f04f 0a00 	mov.w	sl, #0
    9fc2:	4653      	mov	r3, sl
    9fc4:	46ca      	mov	sl, r9
    9fc6:	46d9      	mov	r9, fp
    9fc8:	469b      	mov	fp, r3
    9fca:	e0ee      	b.n	a1aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    9fcc:	f006 f8ca 	bl	10164 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    9fd0:	f006 f8c8 	bl	10164 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    9fd4:	f006 f8c6 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9fd8:	f006 f8c4 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9fdc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    9fde:	920c      	str	r2, [sp, #48]	; 0x30
    9fe0:	e7cd      	b.n	9f7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    9fe2:	f006 f8bf 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9fe6:	9a48      	ldr	r2, [sp, #288]	; 0x120
    9fe8:	9201      	str	r2, [sp, #4]
    9fea:	e7d0      	b.n	9f8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
    TFLITE_DCHECK_GE(i, 0);
    9fec:	f006 f8ba 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9ff0:	f006 f8b8 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9ff4:	a94e      	add	r1, sp, #312	; 0x138
    9ff6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9ffa:	f852 2c4c 	ldr.w	r2, [r2, #-76]
    9ffe:	e7d0      	b.n	9fa2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    a000:	f006 f8b0 	bl	10164 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a004:	f006 f8ae 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a008:	f006 f8ac 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a00c:	aa4e      	add	r2, sp, #312	; 0x138
    a00e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a012:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    a016:	930d      	str	r3, [sp, #52]	; 0x34
    a018:	e7d1      	b.n	9fbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
      }
      if (bias_data) {
    a01a:	9b07      	ldr	r3, [sp, #28]
    a01c:	b123      	cbz	r3, a028 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x428>
        acc += bias_data[out_c];
    a01e:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    a022:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a024:	4413      	add	r3, r2
    a026:	9311      	str	r3, [sp, #68]	; 0x44
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
    a028:	9a11      	ldr	r2, [sp, #68]	; 0x44
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    a02a:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    a02e:	f1b9 0f00 	cmp.w	r9, #0
    a032:	f340 808f 	ble.w	a154 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x554>
    a036:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    a038:	409a      	lsls	r2, r3
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a03a:	4592      	cmp	sl, r2
    a03c:	f000 808d 	beq.w	a15a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55a>
    a040:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    a042:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    a044:	4653      	mov	r3, sl
    a046:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    a048:	fb02 f304 	mul.w	r3, r2, r4
    a04c:	fb0a 3101 	mla	r1, sl, r1, r3
    a050:	fba2 230a 	umull	r2, r3, r2, sl
    a054:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a056:	2a00      	cmp	r2, #0
    a058:	f173 0100 	sbcs.w	r1, r3, #0
    a05c:	f2c0 8084 	blt.w	a168 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
    a060:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a064:	1852      	adds	r2, r2, r1
    a066:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    a06a:	4611      	mov	r1, r2
    a06c:	461c      	mov	r4, r3
    a06e:	2a00      	cmp	r2, #0
    a070:	f173 0000 	sbcs.w	r0, r3, #0
    a074:	db7a      	blt.n	a16c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56c>
    a076:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    a078:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a07c:	2f00      	cmp	r7, #0
    a07e:	d17d      	bne.n	a17c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57c>

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    a080:	2e00      	cmp	r6, #0
    a082:	db7e      	blt.n	a182 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x582>
  assert(exponent <= 31);
    a084:	2e1f      	cmp	r6, #31
    a086:	f300 8083 	bgt.w	a190 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x590>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    a08a:	2701      	movs	r7, #1
    a08c:	fa07 f006 	lsl.w	r0, r7, r6
    a090:	3801      	subs	r0, #1
    a092:	f005 fd2b 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a096:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    a098:	2000      	movs	r0, #0
    a09a:	f005 fd27 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a09e:	9002      	str	r0, [sp, #8]
  const IntegerType one = Dup<IntegerType>(1);
    a0a0:	4638      	mov	r0, r7
    a0a2:	f005 fd23 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a0a6:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    a0a8:	4641      	mov	r1, r8
    a0aa:	4620      	mov	r0, r4
    a0ac:	f005 fd1f 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a0b0:	9004      	str	r0, [sp, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    a0b2:	4639      	mov	r1, r7
    a0b4:	4640      	mov	r0, r8
    a0b6:	f005 fd1c 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a0ba:	4680      	mov	r8, r0
    a0bc:	9902      	ldr	r1, [sp, #8]
    a0be:	4620      	mov	r0, r4
    a0c0:	f005 fd23 	bl	fb0a <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    a0c4:	9f03      	ldr	r7, [sp, #12]
    a0c6:	4639      	mov	r1, r7
    a0c8:	f005 fd11 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a0cc:	4601      	mov	r1, r0
    a0ce:	4640      	mov	r0, r8
    a0d0:	f005 fd11 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    a0d4:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    a0d6:	4631      	mov	r1, r6
    a0d8:	4620      	mov	r0, r4
    a0da:	f005 fd0a 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a0de:	4604      	mov	r4, r0
    a0e0:	4641      	mov	r1, r8
    a0e2:	9804      	ldr	r0, [sp, #16]
    a0e4:	f005 fd19 	bl	fb1a <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    a0e8:	4639      	mov	r1, r7
    a0ea:	f005 fd00 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a0ee:	4601      	mov	r1, r0
    a0f0:	4620      	mov	r0, r4
    a0f2:	f005 fd00 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
      acc += output_offset;
    a0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0f8:	4418      	add	r0, r3
    a0fa:	9011      	str	r0, [sp, #68]	; 0x44
      if (__a < __b)
    a0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0fe:	4298      	cmp	r0, r3
    a100:	db4d      	blt.n	a19e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59e>
      return __a;
    a102:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::max(acc, output_activation_min);
    a104:	681b      	ldr	r3, [r3, #0]
    a106:	9311      	str	r3, [sp, #68]	; 0x44
      if (__b < __a)
    a108:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a10a:	4293      	cmp	r3, r2
    a10c:	dc49      	bgt.n	a1a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
      return __a;
    a10e:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::min(acc, output_activation_max);
    a110:	681a      	ldr	r2, [r3, #0]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    a112:	9b01      	ldr	r3, [sp, #4]
    a114:	fb03 530b 	mla	r3, r3, fp, r5
    a118:	9908      	ldr	r1, [sp, #32]
    a11a:	54ca      	strb	r2, [r1, r3]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    a11c:	3501      	adds	r5, #1
    a11e:	9b01      	ldr	r3, [sp, #4]
    a120:	429d      	cmp	r5, r3
    a122:	da40      	bge.n	a1a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
      int32_t acc = 0;
    a124:	2300      	movs	r3, #0
    a126:	9311      	str	r3, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    a128:	980d      	ldr	r0, [sp, #52]	; 0x34
    a12a:	4283      	cmp	r3, r0
    a12c:	f6bf af75 	bge.w	a01a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41a>
        int32_t input_val = input_data[b * accum_depth + d];
    a130:	fb00 320b 	mla	r2, r0, fp, r3
    a134:	9905      	ldr	r1, [sp, #20]
    a136:	5689      	ldrsb	r1, [r1, r2]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    a138:	fb00 3205 	mla	r2, r0, r5, r3
    a13c:	9c06      	ldr	r4, [sp, #24]
    a13e:	56a2      	ldrsb	r2, [r4, r2]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    a140:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a142:	4422      	add	r2, r4
    a144:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a146:	4421      	add	r1, r4
    a148:	9c11      	ldr	r4, [sp, #68]	; 0x44
    a14a:	fb01 4202 	mla	r2, r1, r2, r4
    a14e:	9211      	str	r2, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    a150:	3301      	adds	r3, #1
    a152:	e7ea      	b.n	a12a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
  int right_shift = shift > 0 ? 0 : -shift;
    a154:	f1c9 0600 	rsb	r6, r9, #0
    a158:	e76e      	b.n	a038 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a15a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a15e:	d001      	beq.n	a164 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x564>
    a160:	2700      	movs	r7, #0
    a162:	e76e      	b.n	a042 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
    a164:	2701      	movs	r7, #1
    a166:	e76c      	b.n	a042 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a168:	4921      	ldr	r1, [pc, #132]	; (a1f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>)
    a16a:	e77b      	b.n	a064 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x464>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a16c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a170:	1851      	adds	r1, r2, r1
    a172:	f04f 0400 	mov.w	r4, #0
    a176:	eb43 0404 	adc.w	r4, r3, r4
    a17a:	e77c      	b.n	a076 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a17c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a180:	e77e      	b.n	a080 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
  assert(exponent >= 0);
    a182:	4b1c      	ldr	r3, [pc, #112]	; (a1f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f4>)
    a184:	4a1c      	ldr	r2, [pc, #112]	; (a1f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    a186:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a18a:	481c      	ldr	r0, [pc, #112]	; (a1fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    a18c:	f002 fada 	bl	c744 <__assert_func>
  assert(exponent <= 31);
    a190:	4b1b      	ldr	r3, [pc, #108]	; (a200 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    a192:	4a19      	ldr	r2, [pc, #100]	; (a1f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    a194:	f240 1167 	movw	r1, #359	; 0x167
    a198:	4818      	ldr	r0, [pc, #96]	; (a1fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    a19a:	f002 fad3 	bl	c744 <__assert_func>
	return __b;
    a19e:	ab0f      	add	r3, sp, #60	; 0x3c
    a1a0:	e7b0      	b.n	a104 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x504>
	return __b;
    a1a2:	ab10      	add	r3, sp, #64	; 0x40
    a1a4:	e7b4      	b.n	a110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x510>
  for (int b = 0; b < batches; ++b) {
    a1a6:	f10b 0b01 	add.w	fp, fp, #1
    a1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a1ac:	459b      	cmp	fp, r3
    a1ae:	da01      	bge.n	a1b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    a1b0:	2500      	movs	r5, #0
    a1b2:	e7b4      	b.n	a11e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (size_ > kMaxSmallSize) {
    a1b4:	9b46      	ldr	r3, [sp, #280]	; 0x118
    a1b6:	2b05      	cmp	r3, #5
    a1b8:	dd03      	ble.n	a1c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
      delete[] dims_pointer_;
    a1ba:	9847      	ldr	r0, [sp, #284]	; 0x11c
    a1bc:	b108      	cbz	r0, a1c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    a1be:	f005 ffbc 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    a1c2:	9b40      	ldr	r3, [sp, #256]	; 0x100
    a1c4:	2b05      	cmp	r3, #5
    a1c6:	dd03      	ble.n	a1d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
      delete[] dims_pointer_;
    a1c8:	9841      	ldr	r0, [sp, #260]	; 0x104
    a1ca:	b108      	cbz	r0, a1d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    a1cc:	f005 ffb5 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    a1d0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    a1d2:	2b05      	cmp	r3, #5
    a1d4:	dd03      	ble.n	a1de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      delete[] dims_pointer_;
    a1d6:	983b      	ldr	r0, [sp, #236]	; 0xec
    a1d8:	b108      	cbz	r0, a1de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
    a1da:	f005 ffae 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    a1de:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    a1e0:	2b05      	cmp	r3, #5
    a1e2:	dd03      	ble.n	a1ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
      delete[] dims_pointer_;
    a1e4:	9835      	ldr	r0, [sp, #212]	; 0xd4
    a1e6:	b108      	cbz	r0, a1ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    a1e8:	f005 ffa7 	bl	1013a <_ZdaPv>
  return kTfLiteOk;
    a1ec:	2000      	movs	r0, #0
      break;
    a1ee:	e559      	b.n	9ca4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    a1f0:	c0000001 	.word	0xc0000001
    a1f4:	00057620 	.word	0x00057620
    a1f8:	00057630 	.word	0x00057630
    a1fc:	00057688 	.word	0x00057688
    a200:	000576e4 	.word	0x000576e4

0000a204 <_ZN6tflite17Register_QUANTIZEEv>:
                                           sizeof(OpDataQuantizeReference));
}

}  // namespace

TfLiteRegistration Register_QUANTIZE() {
    a204:	b470      	push	{r4, r5, r6}
    a206:	4606      	mov	r6, r0
          /*prepare=*/PrepareQuantizeReference,
          /*invoke=*/EvalQuantizeReference,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    a208:	4604      	mov	r4, r0
    a20a:	4d05      	ldr	r5, [pc, #20]	; (a220 <_ZN6tflite17Register_QUANTIZEEv+0x1c>)
    a20c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a20e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a210:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    a218:	4630      	mov	r0, r6
    a21a:	bc70      	pop	{r4, r5, r6}
    a21c:	4770      	bx	lr
    a21e:	bf00      	nop
    a220:	00011120 	.word	0x00011120

0000a224 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {

TfLiteStatus PrepareQuantizeReference(TfLiteContext* context,
                                      TfLiteNode* node) {
    a224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a228:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    a22a:	690e      	ldr	r6, [r1, #16]
    a22c:	b1ae      	cbz	r6, a25a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
    a22e:	4605      	mov	r5, r0
    a230:	460c      	mov	r4, r1
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    a232:	680b      	ldr	r3, [r1, #0]
    a234:	681b      	ldr	r3, [r3, #0]
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    a236:	2b01      	cmp	r3, #1
    a238:	d011      	beq.n	a25e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3a>
    a23a:	6946      	ldr	r6, [r0, #20]
    a23c:	2401      	movs	r4, #1
    a23e:	9403      	str	r4, [sp, #12]
    a240:	9302      	str	r3, [sp, #8]
    a242:	4b68      	ldr	r3, [pc, #416]	; (a3e4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>)
    a244:	9301      	str	r3, [sp, #4]
    a246:	4b68      	ldr	r3, [pc, #416]	; (a3e8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c4>)
    a248:	9300      	str	r3, [sp, #0]
    a24a:	2321      	movs	r3, #33	; 0x21
    a24c:	4a67      	ldr	r2, [pc, #412]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a24e:	4968      	ldr	r1, [pc, #416]	; (a3f0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1cc>)
    a250:	47b0      	blx	r6
  data->quantization_params.zero_point = output->params.zero_point;
  data->quantization_params.scale = static_cast<double>(output->params.scale);

  data->input_zero_point = input->params.zero_point;
  return kTfLiteOk;
}
    a252:	4620      	mov	r0, r4
    a254:	b004      	add	sp, #16
    a256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    a25a:	f005 ff83 	bl	10164 <abort>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    a25e:	684b      	ldr	r3, [r1, #4]
    a260:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    a262:	2b01      	cmp	r3, #1
    a264:	d00c      	beq.n	a280 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5c>
    a266:	6946      	ldr	r6, [r0, #20]
    a268:	2401      	movs	r4, #1
    a26a:	9403      	str	r4, [sp, #12]
    a26c:	9302      	str	r3, [sp, #8]
    a26e:	4b5d      	ldr	r3, [pc, #372]	; (a3e4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>)
    a270:	9301      	str	r3, [sp, #4]
    a272:	4b60      	ldr	r3, [pc, #384]	; (a3f4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d0>)
    a274:	9300      	str	r3, [sp, #0]
    a276:	2322      	movs	r3, #34	; 0x22
    a278:	4a5c      	ldr	r2, [pc, #368]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a27a:	495d      	ldr	r1, [pc, #372]	; (a3f0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1cc>)
    a27c:	47b0      	blx	r6
    a27e:	e7e8      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
    a280:	2200      	movs	r2, #0
    a282:	f005 fb65 	bl	f950 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    a286:	4680      	mov	r8, r0
    a288:	b1c8      	cbz	r0, a2be <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9a>
  TfLiteTensor* output = GetOutput(context, node, 0);
    a28a:	2200      	movs	r2, #0
    a28c:	4621      	mov	r1, r4
    a28e:	4628      	mov	r0, r5
    a290:	f005 fb7d 	bl	f98e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    a294:	4607      	mov	r7, r0
    a296:	b1e0      	cbz	r0, a2d2 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae>
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
    a298:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
    a29c:	2c01      	cmp	r4, #1
    a29e:	d022      	beq.n	a2e6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc2>
    a2a0:	696f      	ldr	r7, [r5, #20]
    a2a2:	2601      	movs	r6, #1
    a2a4:	9603      	str	r6, [sp, #12]
    a2a6:	9402      	str	r4, [sp, #8]
    a2a8:	4b53      	ldr	r3, [pc, #332]	; (a3f8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d4>)
    a2aa:	9301      	str	r3, [sp, #4]
    a2ac:	4b53      	ldr	r3, [pc, #332]	; (a3fc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d8>)
    a2ae:	9300      	str	r3, [sp, #0]
    a2b0:	232b      	movs	r3, #43	; 0x2b
    a2b2:	4a4e      	ldr	r2, [pc, #312]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a2b4:	494e      	ldr	r1, [pc, #312]	; (a3f0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1cc>)
    a2b6:	4628      	mov	r0, r5
    a2b8:	47b8      	blx	r7
    a2ba:	4634      	mov	r4, r6
    a2bc:	e7c9      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input != nullptr);
    a2be:	696c      	ldr	r4, [r5, #20]
    a2c0:	4b4f      	ldr	r3, [pc, #316]	; (a400 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1dc>)
    a2c2:	9300      	str	r3, [sp, #0]
    a2c4:	2325      	movs	r3, #37	; 0x25
    a2c6:	4a49      	ldr	r2, [pc, #292]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a2c8:	494e      	ldr	r1, [pc, #312]	; (a404 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a2ca:	4628      	mov	r0, r5
    a2cc:	47a0      	blx	r4
    a2ce:	2401      	movs	r4, #1
    a2d0:	e7bf      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, output != nullptr);
    a2d2:	696c      	ldr	r4, [r5, #20]
    a2d4:	4b4c      	ldr	r3, [pc, #304]	; (a408 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e4>)
    a2d6:	9300      	str	r3, [sp, #0]
    a2d8:	2327      	movs	r3, #39	; 0x27
    a2da:	4a44      	ldr	r2, [pc, #272]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a2dc:	4949      	ldr	r1, [pc, #292]	; (a404 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a2de:	4628      	mov	r0, r5
    a2e0:	47a0      	blx	r4
    a2e2:	2401      	movs	r4, #1
    a2e4:	e7b5      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  const auto* affine_quantization =
    a2e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    a2e8:	b16b      	cbz	r3, a306 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xe2>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    a2ea:	681b      	ldr	r3, [r3, #0]
    a2ec:	b1a3      	cbz	r3, a318 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xf4>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
    a2ee:	681b      	ldr	r3, [r3, #0]
    a2f0:	2b01      	cmp	r3, #1
    a2f2:	d01a      	beq.n	a32a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x106>
    a2f4:	696e      	ldr	r6, [r5, #20]
    a2f6:	4b45      	ldr	r3, [pc, #276]	; (a40c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e8>)
    a2f8:	9300      	str	r3, [sp, #0]
    a2fa:	2331      	movs	r3, #49	; 0x31
    a2fc:	4a3b      	ldr	r2, [pc, #236]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a2fe:	4941      	ldr	r1, [pc, #260]	; (a404 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a300:	4628      	mov	r0, r5
    a302:	47b0      	blx	r6
    a304:	e7a5      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, affine_quantization);
    a306:	696e      	ldr	r6, [r5, #20]
    a308:	4b41      	ldr	r3, [pc, #260]	; (a410 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1ec>)
    a30a:	9300      	str	r3, [sp, #0]
    a30c:	232f      	movs	r3, #47	; 0x2f
    a30e:	4a37      	ldr	r2, [pc, #220]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a310:	493c      	ldr	r1, [pc, #240]	; (a404 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a312:	4628      	mov	r0, r5
    a314:	47b0      	blx	r6
    a316:	e79c      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    a318:	696e      	ldr	r6, [r5, #20]
    a31a:	4b3e      	ldr	r3, [pc, #248]	; (a414 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f0>)
    a31c:	9300      	str	r3, [sp, #0]
    a31e:	2330      	movs	r3, #48	; 0x30
    a320:	4a32      	ldr	r2, [pc, #200]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a322:	4938      	ldr	r1, [pc, #224]	; (a404 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a324:	4628      	mov	r0, r5
    a326:	47b0      	blx	r6
    a328:	e793      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||
    a32a:	f898 3000 	ldrb.w	r3, [r8]
    a32e:	2b01      	cmp	r3, #1
    a330:	d00c      	beq.n	a34c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x128>
    a332:	2b07      	cmp	r3, #7
    a334:	d00a      	beq.n	a34c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x128>
    a336:	2b09      	cmp	r3, #9
    a338:	d008      	beq.n	a34c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x128>
    a33a:	696e      	ldr	r6, [r5, #20]
    a33c:	4b36      	ldr	r3, [pc, #216]	; (a418 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f4>)
    a33e:	9300      	str	r3, [sp, #0]
    a340:	2333      	movs	r3, #51	; 0x33
    a342:	4a2a      	ldr	r2, [pc, #168]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a344:	492f      	ldr	r1, [pc, #188]	; (a404 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a346:	4628      	mov	r0, r5
    a348:	47b0      	blx	r6
    a34a:	e782      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, output->type == kTfLiteInt8 ||
    a34c:	783a      	ldrb	r2, [r7, #0]
    a34e:	2a09      	cmp	r2, #9
    a350:	d00c      	beq.n	a36c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x148>
    a352:	2a07      	cmp	r2, #7
    a354:	d00a      	beq.n	a36c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x148>
    a356:	2a02      	cmp	r2, #2
    a358:	d008      	beq.n	a36c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x148>
    a35a:	696e      	ldr	r6, [r5, #20]
    a35c:	4b2f      	ldr	r3, [pc, #188]	; (a41c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f8>)
    a35e:	9300      	str	r3, [sp, #0]
    a360:	2336      	movs	r3, #54	; 0x36
    a362:	4a22      	ldr	r2, [pc, #136]	; (a3ec <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a364:	4927      	ldr	r1, [pc, #156]	; (a404 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a366:	4628      	mov	r0, r5
    a368:	47b0      	blx	r6
    a36a:	e772      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
    a36c:	2b07      	cmp	r3, #7
    a36e:	d00c      	beq.n	a38a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x166>
    a370:	2b09      	cmp	r3, #9
    a372:	d00a      	beq.n	a38a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x166>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt8) ||
    a374:	2b09      	cmp	r3, #9
    a376:	d02b      	beq.n	a3d0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1ac>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt16) ||
    a378:	2b09      	cmp	r3, #9
    a37a:	d02c      	beq.n	a3d6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b2>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
    a37c:	2b07      	cmp	r3, #7
    a37e:	d02d      	beq.n	a3dc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt16) ||
    a380:	2b07      	cmp	r3, #7
    a382:	d119      	bne.n	a3b8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x194>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt32)) {
    a384:	2a02      	cmp	r2, #2
    a386:	d117      	bne.n	a3b8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x194>
    a388:	e001      	b.n	a38e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
    a38a:	2a09      	cmp	r2, #9
    a38c:	d1f2      	bne.n	a374 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x150>
    double effective_scale = static_cast<double>(input->params.scale) /
    a38e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    a392:	f7f6 f845 	bl	420 <__aeabi_f2d>
    a396:	4604      	mov	r4, r0
    a398:	460d      	mov	r5, r1
                             static_cast<double>(output->params.scale);
    a39a:	68f8      	ldr	r0, [r7, #12]
    a39c:	f7f6 f840 	bl	420 <__aeabi_f2d>
    a3a0:	4602      	mov	r2, r0
    a3a2:	460b      	mov	r3, r1
    double effective_scale = static_cast<double>(input->params.scale) /
    a3a4:	4620      	mov	r0, r4
    a3a6:	4629      	mov	r1, r5
    a3a8:	f7f6 f9bc 	bl	724 <__aeabi_ddiv>
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
    a3ac:	f106 0314 	add.w	r3, r6, #20
    a3b0:	f106 0210 	add.w	r2, r6, #16
    a3b4:	f7fe fd54 	bl	8e60 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  data->quantization_params.zero_point = output->params.zero_point;
    a3b8:	693b      	ldr	r3, [r7, #16]
    a3ba:	6033      	str	r3, [r6, #0]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
    a3bc:	68f8      	ldr	r0, [r7, #12]
    a3be:	f7f6 f82f 	bl	420 <__aeabi_f2d>
    a3c2:	e9c6 0102 	strd	r0, r1, [r6, #8]
  data->input_zero_point = input->params.zero_point;
    a3c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    a3ca:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
    a3cc:	2400      	movs	r4, #0
    a3ce:	e740      	b.n	a252 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt16) ||
    a3d0:	2a07      	cmp	r2, #7
    a3d2:	d1d1      	bne.n	a378 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x154>
    a3d4:	e7db      	b.n	a38e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
    a3d6:	2a02      	cmp	r2, #2
    a3d8:	d1d0      	bne.n	a37c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x158>
    a3da:	e7d8      	b.n	a38e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt16) ||
    a3dc:	2a07      	cmp	r2, #7
    a3de:	d1cf      	bne.n	a380 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x15c>
    a3e0:	e7d5      	b.n	a38e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
    a3e2:	bf00      	nop
    a3e4:	00057804 	.word	0x00057804
    a3e8:	00057408 	.word	0x00057408
    a3ec:	00057720 	.word	0x00057720
    a3f0:	000573ec 	.word	0x000573ec
    a3f4:	00057418 	.word	0x00057418
    a3f8:	00057778 	.word	0x00057778
    a3fc:	00057794 	.word	0x00057794
    a400:	0005742c 	.word	0x0005742c
    a404:	00056eec 	.word	0x00056eec
    a408:	00057440 	.word	0x00057440
    a40c:	000577e0 	.word	0x000577e0
    a410:	000577b0 	.word	0x000577b0
    a414:	000577c4 	.word	0x000577c4
    a418:	00057808 	.word	0x00057808
    a41c:	00057864 	.word	0x00057864

0000a420 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus EvalQuantizeReference(TfLiteContext* context, TfLiteNode* node) {
    a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a424:	b0a5      	sub	sp, #148	; 0x94
  TFLITE_DCHECK(node->user_data != nullptr);
    a426:	690c      	ldr	r4, [r1, #16]
    a428:	2c00      	cmp	r4, #0
    a42a:	d03e      	beq.n	a4aa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8a>
    a42c:	4606      	mov	r6, r0
    a42e:	460d      	mov	r5, r1
  TFLITE_DCHECK(context != nullptr);
    a430:	2800      	cmp	r0, #0
    a432:	d03c      	beq.n	a4ae <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8e>
  TFLITE_DCHECK(node != nullptr);
    a434:	2900      	cmp	r1, #0
    a436:	d03c      	beq.n	a4b2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x92>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    a438:	6d43      	ldr	r3, [r0, #84]	; 0x54
    a43a:	680a      	ldr	r2, [r1, #0]
    a43c:	6851      	ldr	r1, [r2, #4]
    a43e:	4798      	blx	r3
    a440:	4680      	mov	r8, r0
  TFLITE_DCHECK(context != nullptr);
    a442:	2e00      	cmp	r6, #0
    a444:	d037      	beq.n	a4b6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x96>
  TFLITE_DCHECK(node != nullptr);
    a446:	2d00      	cmp	r5, #0
    a448:	d037      	beq.n	a4ba <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9a>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    a44a:	6d73      	ldr	r3, [r6, #84]	; 0x54
    a44c:	686a      	ldr	r2, [r5, #4]
    a44e:	6851      	ldr	r1, [r2, #4]
    a450:	4630      	mov	r0, r6
    a452:	4798      	blx	r3
    a454:	4605      	mov	r5, r0
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);

  if (input->type == kTfLiteFloat32) {
    a456:	f898 7008 	ldrb.w	r7, [r8, #8]
    a45a:	2f01      	cmp	r7, #1
    a45c:	d02f      	beq.n	a4be <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9e>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
                           TfLiteTypeGetName(input->type),
                           TfLiteTypeGetName(output->type));
        return kTfLiteError;
    }
  } else if (input->type == kTfLiteInt16) {
    a45e:	2f07      	cmp	r7, #7
    a460:	f000 816f 	beq.w	a742 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x322>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
                           TfLiteTypeGetName(input->type),
                           TfLiteTypeGetName(output->type));
        return kTfLiteError;
    }
  } else if (input->type == kTfLiteInt8) {
    a464:	2f09      	cmp	r7, #9
    a466:	f040 860a 	bne.w	b07e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc5e>
    // Int8 to Int8 requantization, required if the input and output tensors
    // have different scales and/or zero points.
    size_t size = ElementCount(*input->dims);
    a46a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a46e:	f004 fe74 	bl	f15a <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    a472:	9000      	str	r0, [sp, #0]
    switch (output->type) {
    a474:	7a2b      	ldrb	r3, [r5, #8]
    a476:	2b07      	cmp	r3, #7
    a478:	f000 8484 	beq.w	ad84 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x964>
    a47c:	2b09      	cmp	r3, #9
    a47e:	f000 83c4 	beq.w	ac0a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7ea>
    a482:	2b02      	cmp	r3, #2
    a484:	f000 8550 	beq.w	af28 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb08>
            data->requantize_output_multiplier, data->requantize_output_shift,
            data->input_zero_point, data->quantization_params.zero_point,
            tflite::micro::GetTensorData<int32_t>(output));
        break;
      default:
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a488:	6977      	ldr	r7, [r6, #20]
    a48a:	f898 0008 	ldrb.w	r0, [r8, #8]
    a48e:	f7fe fc91 	bl	8db4 <TfLiteTypeGetName>
    a492:	4604      	mov	r4, r0
    a494:	7a28      	ldrb	r0, [r5, #8]
    a496:	f7fe fc8d 	bl	8db4 <TfLiteTypeGetName>
    a49a:	4603      	mov	r3, r0
    a49c:	4622      	mov	r2, r4
    a49e:	49b8      	ldr	r1, [pc, #736]	; (a780 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>)
    a4a0:	4630      	mov	r0, r6
    a4a2:	47b8      	blx	r7
                           TfLiteTypeGetName(input->type),
                           TfLiteTypeGetName(output->type));
        return kTfLiteError;
    a4a4:	2701      	movs	r7, #1
    a4a6:	f000 bdf9 	b.w	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
  TFLITE_DCHECK(node->user_data != nullptr);
    a4aa:	f005 fe5b 	bl	10164 <abort>
  TFLITE_DCHECK(context != nullptr);
    a4ae:	f005 fe59 	bl	10164 <abort>
  TFLITE_DCHECK(node != nullptr);
    a4b2:	f005 fe57 	bl	10164 <abort>
  TFLITE_DCHECK(context != nullptr);
    a4b6:	f005 fe55 	bl	10164 <abort>
  TFLITE_DCHECK(node != nullptr);
    a4ba:	f005 fe53 	bl	10164 <abort>
    switch (output->type) {
    a4be:	7a03      	ldrb	r3, [r0, #8]
    a4c0:	2b07      	cmp	r3, #7
    a4c2:	f000 8098 	beq.w	a5f6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d6>
    a4c6:	2b09      	cmp	r3, #9
    a4c8:	f040 812b 	bne.w	a722 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x302>
            data->quantization_params, tflite::micro::GetTensorShape(input),
    a4cc:	4641      	mov	r1, r8
    a4ce:	a80c      	add	r0, sp, #48	; 0x30
    a4d0:	f005 fba8 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::AffineQuantize(
    a4d4:	4640      	mov	r0, r8
    a4d6:	f005 faf5 	bl	fac4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    a4da:	4680      	mov	r8, r0
            tflite::micro::GetTensorShape(output),
    a4dc:	4629      	mov	r1, r5
    a4de:	a812      	add	r0, sp, #72	; 0x48
    a4e0:	f005 fba0 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::AffineQuantize(
    a4e4:	4628      	mov	r0, r5
    a4e6:	f005 fafd 	bl	fae4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    a4ea:	4681      	mov	r9, r0
inline void AffineQuantize(const tflite::QuantizationParams& op_params,
                           const RuntimeShape& input_shape,
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32_t zero_point = op_params.zero_point;
    a4ec:	f8d4 a000 	ldr.w	sl, [r4]
  const double scale = op_params.scale;
    a4f0:	e9d4 3402 	ldrd	r3, r4, [r4, #8]
    a4f4:	e9cd 3400 	strd	r3, r4, [sp]
  inline int32_t DimensionsCount() const { return size_; }
    a4f8:	980c      	ldr	r0, [sp, #48]	; 0x30
    a4fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    a4fc:	4298      	cmp	r0, r3
    a4fe:	d101      	bne.n	a504 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xe4>
  for (int i = 0; i < dims_count; ++i) {
    a500:	2300      	movs	r3, #0
    a502:	e017      	b.n	a534 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x114>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    a504:	f005 fe2e 	bl	10164 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a508:	f005 fe2c 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a50c:	f005 fe2a 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a510:	aa24      	add	r2, sp, #144	; 0x90
    a512:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a516:	f852 1c5c 	ldr.w	r1, [r2, #-92]
    a51a:	e017      	b.n	a54c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x12c>
    TFLITE_DCHECK_GE(i, 0);
    a51c:	f005 fe22 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a520:	f005 fe20 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a524:	aa24      	add	r2, sp, #144	; 0x90
    a526:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a52a:	f852 2c44 	ldr.w	r2, [r2, #-68]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    a52e:	428a      	cmp	r2, r1
    a530:	d117      	bne.n	a562 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x142>
  for (int i = 0; i < dims_count; ++i) {
    a532:	3301      	adds	r3, #1
    a534:	4298      	cmp	r0, r3
    a536:	dd16      	ble.n	a566 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    TFLITE_DCHECK_GE(i, 0);
    a538:	2b00      	cmp	r3, #0
    a53a:	dbe5      	blt.n	a508 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
    a53c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a53e:	4293      	cmp	r3, r2
    a540:	dae4      	bge.n	a50c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a542:	2a05      	cmp	r2, #5
    a544:	dde4      	ble.n	a510 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xf0>
    a546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a548:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    a54c:	2b00      	cmp	r3, #0
    a54e:	dbe5      	blt.n	a51c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xfc>
    TFLITE_DCHECK_LT(i, size_);
    a550:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a552:	4293      	cmp	r3, r2
    a554:	dae4      	bge.n	a520 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x100>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a556:	2a05      	cmp	r2, #5
    a558:	dde4      	ble.n	a524 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x104>
    a55a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a55c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a560:	e7e5      	b.n	a52e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x10e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    a562:	f005 fdff 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a566:	2805      	cmp	r0, #5
    a568:	dd0a      	ble.n	a580 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x160>
    a56a:	990d      	ldr	r1, [sp, #52]	; 0x34
    for (int i = 0; i < size_; i++) {
    a56c:	2300      	movs	r3, #0
    int buffer_size = 1;
    a56e:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    a570:	4298      	cmp	r0, r3
    a572:	dd07      	ble.n	a584 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x164>
      buffer_size *= dims_data[i];
    a574:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    a578:	fb02 f505 	mul.w	r5, r2, r5
    for (int i = 0; i < size_; i++) {
    a57c:	3301      	adds	r3, #1
    a57e:	e7f7      	b.n	a570 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x150>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a580:	a90d      	add	r1, sp, #52	; 0x34
    a582:	e7f3      	b.n	a56c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x14c>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  static constexpr int32_t min_val = std::numeric_limits<OutputT>::min();
  static constexpr int32_t max_val = std::numeric_limits<OutputT>::max();

  for (int i = 0; i < flat_size; i++) {
    a584:	2400      	movs	r4, #0
    a586:	e005      	b.n	a594 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x174>
	return __b;
    a588:	4b7e      	ldr	r3, [pc, #504]	; (a784 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x364>)
    a58a:	e01e      	b.n	a5ca <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1aa>
    const InputT val = input_data[i];
    int32_t unclamped =
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
        zero_point;
    int32_t clamped = std::min(std::max(unclamped, min_val), max_val);
    a58c:	681b      	ldr	r3, [r3, #0]
    output_data[i] = clamped;
    a58e:	f809 3006 	strb.w	r3, [r9, r6]
  for (int i = 0; i < flat_size; i++) {
    a592:	3401      	adds	r4, #1
    a594:	42ac      	cmp	r4, r5
    a596:	da1d      	bge.n	a5d4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b4>
    const InputT val = input_data[i];
    a598:	4626      	mov	r6, r4
    a59a:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
    a59e:	e9dd 0100 	ldrd	r0, r1, [sp]
    a5a2:	f7f6 fa57 	bl	a54 <__aeabi_d2f>
    a5a6:	4601      	mov	r1, r0
    a5a8:	4638      	mov	r0, r7
    a5aa:	f7f6 fc65 	bl	e78 <__aeabi_fdiv>
    a5ae:	f7f5 ff37 	bl	420 <__aeabi_f2d>
    a5b2:	f002 f85b 	bl	c66c <round>
    a5b6:	f7f6 fa4d 	bl	a54 <__aeabi_d2f>
    a5ba:	f7f6 fd6f 	bl	109c <__aeabi_f2iz>
    a5be:	4450      	add	r0, sl
    int32_t unclamped =
    a5c0:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__a < __b)
    a5c2:	f110 0f80 	cmn.w	r0, #128	; 0x80
    a5c6:	dbdf      	blt.n	a588 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x168>
      return __a;
    a5c8:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__b < __a)
    a5ca:	681a      	ldr	r2, [r3, #0]
    a5cc:	2a7f      	cmp	r2, #127	; 0x7f
    a5ce:	dddd      	ble.n	a58c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
	return __b;
    a5d0:	4b6d      	ldr	r3, [pc, #436]	; (a788 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x368>)
    a5d2:	e7db      	b.n	a58c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    if (size_ > kMaxSmallSize) {
    a5d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a5d6:	2b05      	cmp	r3, #5
    a5d8:	dd03      	ble.n	a5e2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c2>
      delete[] dims_pointer_;
    a5da:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a5dc:	b108      	cbz	r0, a5e2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c2>
    a5de:	f005 fdac 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    a5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a5e4:	2b05      	cmp	r3, #5
    a5e6:	dd03      	ble.n	a5f0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d0>
      delete[] dims_pointer_;
    a5e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    a5ea:	b108      	cbz	r0, a5f0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d0>
    a5ec:	f005 fda5 	bl	1013a <_ZdaPv>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
    a5f0:	2700      	movs	r7, #0
    a5f2:	f000 bd53 	b.w	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
            data->quantization_params, tflite::micro::GetTensorShape(input),
    a5f6:	4641      	mov	r1, r8
    a5f8:	a818      	add	r0, sp, #96	; 0x60
    a5fa:	f005 fb13 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::AffineQuantize(
    a5fe:	4640      	mov	r0, r8
    a600:	f005 fa60 	bl	fac4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    a604:	4680      	mov	r8, r0
            tflite::micro::GetTensorShape(output),
    a606:	4629      	mov	r1, r5
    a608:	a81e      	add	r0, sp, #120	; 0x78
    a60a:	f005 fb0b 	bl	fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::AffineQuantize(
    a60e:	4628      	mov	r0, r5
    a610:	f005 fa91 	bl	fb36 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    a614:	4681      	mov	r9, r0
  const int32_t zero_point = op_params.zero_point;
    a616:	f8d4 a000 	ldr.w	sl, [r4]
  const double scale = op_params.scale;
    a61a:	e9d4 3402 	ldrd	r3, r4, [r4, #8]
    a61e:	e9cd 3400 	strd	r3, r4, [sp]
  inline int32_t DimensionsCount() const { return size_; }
    a622:	9818      	ldr	r0, [sp, #96]	; 0x60
    a624:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    a626:	4298      	cmp	r0, r3
    a628:	d101      	bne.n	a62e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x20e>
  for (int i = 0; i < dims_count; ++i) {
    a62a:	2300      	movs	r3, #0
    a62c:	e017      	b.n	a65e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x23e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    a62e:	f005 fd99 	bl	10164 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a632:	f005 fd97 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a636:	f005 fd95 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a63a:	aa24      	add	r2, sp, #144	; 0x90
    a63c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a640:	f852 1c2c 	ldr.w	r1, [r2, #-44]
    a644:	e017      	b.n	a676 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x256>
    TFLITE_DCHECK_GE(i, 0);
    a646:	f005 fd8d 	bl	10164 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a64a:	f005 fd8b 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a64e:	aa24      	add	r2, sp, #144	; 0x90
    a650:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a654:	f852 2c14 	ldr.w	r2, [r2, #-20]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    a658:	428a      	cmp	r2, r1
    a65a:	d117      	bne.n	a68c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x26c>
  for (int i = 0; i < dims_count; ++i) {
    a65c:	3301      	adds	r3, #1
    a65e:	4298      	cmp	r0, r3
    a660:	dd16      	ble.n	a690 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x270>
    TFLITE_DCHECK_GE(i, 0);
    a662:	2b00      	cmp	r3, #0
    a664:	dbe5      	blt.n	a632 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x212>
    TFLITE_DCHECK_LT(i, size_);
    a666:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a668:	4293      	cmp	r3, r2
    a66a:	dae4      	bge.n	a636 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x216>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a66c:	2a05      	cmp	r2, #5
    a66e:	dde4      	ble.n	a63a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x21a>
    a670:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a672:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    a676:	2b00      	cmp	r3, #0
    a678:	dbe5      	blt.n	a646 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x226>
    TFLITE_DCHECK_LT(i, size_);
    a67a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    a67c:	4293      	cmp	r3, r2
    a67e:	dae4      	bge.n	a64a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a680:	2a05      	cmp	r2, #5
    a682:	dde4      	ble.n	a64e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22e>
    a684:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a68a:	e7e5      	b.n	a658 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x238>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    a68c:	f005 fd6a 	bl	10164 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a690:	2805      	cmp	r0, #5
    a692:	dd0a      	ble.n	a6aa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x28a>
    a694:	9919      	ldr	r1, [sp, #100]	; 0x64
    for (int i = 0; i < size_; i++) {
    a696:	2300      	movs	r3, #0
    int buffer_size = 1;
    a698:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    a69a:	4298      	cmp	r0, r3
    a69c:	dd07      	ble.n	a6ae <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x28e>
      buffer_size *= dims_data[i];
    a69e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    a6a2:	fb02 f505 	mul.w	r5, r2, r5
    for (int i = 0; i < size_; i++) {
    a6a6:	3301      	adds	r3, #1
    a6a8:	e7f7      	b.n	a69a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x27a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a6aa:	a919      	add	r1, sp, #100	; 0x64
    a6ac:	e7f3      	b.n	a696 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x276>
  for (int i = 0; i < flat_size; i++) {
    a6ae:	2400      	movs	r4, #0
    a6b0:	e005      	b.n	a6be <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x29e>
	return __b;
    a6b2:	4b36      	ldr	r3, [pc, #216]	; (a78c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36c>)
    a6b4:	e01e      	b.n	a6f4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2d4>
    int32_t clamped = std::min(std::max(unclamped, min_val), max_val);
    a6b6:	681b      	ldr	r3, [r3, #0]
    output_data[i] = clamped;
    a6b8:	f829 3016 	strh.w	r3, [r9, r6, lsl #1]
  for (int i = 0; i < flat_size; i++) {
    a6bc:	3401      	adds	r4, #1
    a6be:	42ac      	cmp	r4, r5
    a6c0:	da1e      	bge.n	a700 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e0>
    const InputT val = input_data[i];
    a6c2:	4626      	mov	r6, r4
    a6c4:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
    a6c8:	e9dd 0100 	ldrd	r0, r1, [sp]
    a6cc:	f7f6 f9c2 	bl	a54 <__aeabi_d2f>
    a6d0:	4601      	mov	r1, r0
    a6d2:	4638      	mov	r0, r7
    a6d4:	f7f6 fbd0 	bl	e78 <__aeabi_fdiv>
    a6d8:	f7f5 fea2 	bl	420 <__aeabi_f2d>
    a6dc:	f001 ffc6 	bl	c66c <round>
    a6e0:	f7f6 f9b8 	bl	a54 <__aeabi_d2f>
    a6e4:	f7f6 fcda 	bl	109c <__aeabi_f2iz>
    a6e8:	4450      	add	r0, sl
    int32_t unclamped =
    a6ea:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__a < __b)
    a6ec:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
    a6f0:	dbdf      	blt.n	a6b2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x292>
      return __a;
    a6f2:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__b < __a)
    a6f4:	681a      	ldr	r2, [r3, #0]
    a6f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    a6fa:	dbdc      	blt.n	a6b6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x296>
	return __b;
    a6fc:	4b24      	ldr	r3, [pc, #144]	; (a790 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x370>)
    a6fe:	e7da      	b.n	a6b6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x296>
    if (size_ > kMaxSmallSize) {
    a700:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    a702:	2b05      	cmp	r3, #5
    a704:	dd03      	ble.n	a70e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2ee>
      delete[] dims_pointer_;
    a706:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a708:	b108      	cbz	r0, a70e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2ee>
    a70a:	f005 fd16 	bl	1013a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    a70e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a710:	2b05      	cmp	r3, #5
    a712:	dd03      	ble.n	a71c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2fc>
      delete[] dims_pointer_;
    a714:	9819      	ldr	r0, [sp, #100]	; 0x64
    a716:	b108      	cbz	r0, a71c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2fc>
    a718:	f005 fd0f 	bl	1013a <_ZdaPv>
        return kTfLiteOk;
    a71c:	2700      	movs	r7, #0
    a71e:	f000 bcbd 	b.w	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a722:	f8d6 8014 	ldr.w	r8, [r6, #20]
    a726:	4638      	mov	r0, r7
    a728:	f7fe fb44 	bl	8db4 <TfLiteTypeGetName>
    a72c:	4604      	mov	r4, r0
    a72e:	7a28      	ldrb	r0, [r5, #8]
    a730:	f7fe fb40 	bl	8db4 <TfLiteTypeGetName>
    a734:	4603      	mov	r3, r0
    a736:	4622      	mov	r2, r4
    a738:	4911      	ldr	r1, [pc, #68]	; (a780 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>)
    a73a:	4630      	mov	r0, r6
    a73c:	47c0      	blx	r8
        return kTfLiteError;
    a73e:	f000 bcad 	b.w	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    size_t size = ElementCount(*input->dims);
    a742:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a746:	f004 fd08 	bl	f15a <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    a74a:	9000      	str	r0, [sp, #0]
    switch (output->type) {
    a74c:	7a2b      	ldrb	r3, [r5, #8]
    a74e:	2b07      	cmp	r3, #7
    a750:	f000 80dd 	beq.w	a90e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4ee>
    a754:	2b09      	cmp	r3, #9
    a756:	d01d      	beq.n	a794 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x374>
    a758:	2b02      	cmp	r3, #2
    a75a:	f000 8197 	beq.w	aa8c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x66c>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a75e:	6977      	ldr	r7, [r6, #20]
    a760:	f898 0008 	ldrb.w	r0, [r8, #8]
    a764:	f7fe fb26 	bl	8db4 <TfLiteTypeGetName>
    a768:	4604      	mov	r4, r0
    a76a:	7a28      	ldrb	r0, [r5, #8]
    a76c:	f7fe fb22 	bl	8db4 <TfLiteTypeGetName>
    a770:	4603      	mov	r3, r0
    a772:	4622      	mov	r2, r4
    a774:	4902      	ldr	r1, [pc, #8]	; (a780 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>)
    a776:	4630      	mov	r0, r6
    a778:	47b8      	blx	r7
        return kTfLiteError;
    a77a:	2701      	movs	r7, #1
    a77c:	f000 bc8e 	b.w	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    a780:	000574d0 	.word	0x000574d0
    a784:	000578ec 	.word	0x000578ec
    a788:	000578e8 	.word	0x000578e8
    a78c:	000578e4 	.word	0x000578e4
    a790:	000578e0 	.word	0x000578e0
        reference_ops::Requantize(
    a794:	4640      	mov	r0, r8
    a796:	f005 f9c8 	bl	fb2a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    a79a:	9006      	str	r0, [sp, #24]
    a79c:	f8d4 b010 	ldr.w	fp, [r4, #16]
    a7a0:	f8d4 9014 	ldr.w	r9, [r4, #20]
    a7a4:	69a3      	ldr	r3, [r4, #24]
    a7a6:	9307      	str	r3, [sp, #28]
    a7a8:	6823      	ldr	r3, [r4, #0]
    a7aa:	9308      	str	r3, [sp, #32]
    a7ac:	4628      	mov	r0, r5
    a7ae:	f005 f999 	bl	fae4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    a7b2:	9009      	str	r0, [sp, #36]	; 0x24
    a7b4:	f04f 0800 	mov.w	r8, #0
    a7b8:	e05d      	b.n	a876 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x456>
    a7ba:	f1c9 0600 	rsb	r6, r9, #0
    a7be:	e06b      	b.n	a898 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x478>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a7c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a7c4:	d001      	beq.n	a7ca <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3aa>
    a7c6:	2700      	movs	r7, #0
    a7c8:	e06a      	b.n	a8a0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x480>
    a7ca:	2701      	movs	r7, #1
    a7cc:	e068      	b.n	a8a0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x480>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a7ce:	49bf      	ldr	r1, [pc, #764]	; (aacc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6ac>)
    a7d0:	e076      	b.n	a8c0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4a0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a7d2:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    a7d4:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a7d8:	2f00      	cmp	r7, #0
    a7da:	f040 8083 	bne.w	a8e4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4c4>
  assert(exponent >= 0);
    a7de:	2e00      	cmp	r6, #0
    a7e0:	f2c0 8083 	blt.w	a8ea <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4ca>
  assert(exponent <= 31);
    a7e4:	2e1f      	cmp	r6, #31
    a7e6:	f300 8087 	bgt.w	a8f8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4d8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    a7ea:	f04f 0a01 	mov.w	sl, #1
    a7ee:	fa0a f006 	lsl.w	r0, sl, r6
    a7f2:	3801      	subs	r0, #1
    a7f4:	f005 f97a 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a7f8:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    a7fa:	2000      	movs	r0, #0
    a7fc:	f005 f976 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a800:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    a802:	4650      	mov	r0, sl
    a804:	f005 f972 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a808:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    a80a:	4639      	mov	r1, r7
    a80c:	4620      	mov	r0, r4
    a80e:	f005 f96e 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a812:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    a814:	4651      	mov	r1, sl
    a816:	4638      	mov	r0, r7
    a818:	f005 f96b 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a81c:	4607      	mov	r7, r0
    a81e:	9904      	ldr	r1, [sp, #16]
    a820:	4620      	mov	r0, r4
    a822:	f005 f972 	bl	fb0a <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    a826:	4629      	mov	r1, r5
    a828:	f005 f961 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a82c:	4601      	mov	r1, r0
    a82e:	4638      	mov	r0, r7
    a830:	f005 f961 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    a834:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    a836:	4631      	mov	r1, r6
    a838:	4620      	mov	r0, r4
    a83a:	f005 f95a 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a83e:	4604      	mov	r4, r0
    a840:	4639      	mov	r1, r7
    a842:	9805      	ldr	r0, [sp, #20]
    a844:	f005 f969 	bl	fb1a <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    a848:	4629      	mov	r1, r5
    a84a:	f005 f950 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a84e:	4601      	mov	r1, r0
    a850:	4620      	mov	r0, r4
    a852:	f005 f950 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
  static constexpr int32_t kMaxOutput = std::numeric_limits<output_type>::max();
  for (int i = 0; i < size; ++i) {
    const int32_t input = input_data[i] - input_zeropoint;
    const int32_t output =
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
                                      effective_scale_shift) +
    a856:	9b08      	ldr	r3, [sp, #32]
    a858:	4418      	add	r0, r3
    const int32_t output =
    a85a:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__b < __a)
    a85c:	287f      	cmp	r0, #127	; 0x7f
    a85e:	dc52      	bgt.n	a906 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4e6>
      return __a;
    a860:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__a < __b)
    a862:	681a      	ldr	r2, [r3, #0]
    a864:	f112 0f80 	cmn.w	r2, #128	; 0x80
    a868:	db4f      	blt.n	a90a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4ea>
        output_zeropoint;
    const int32_t clamped_output =
    a86a:	681b      	ldr	r3, [r3, #0]
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
    a86c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a86e:	9903      	ldr	r1, [sp, #12]
    a870:	5453      	strb	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    a872:	f108 0801 	add.w	r8, r8, #1
    a876:	9b00      	ldr	r3, [sp, #0]
    a878:	4543      	cmp	r3, r8
    a87a:	f340 8413 	ble.w	b0a4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc84>
    const int32_t input = input_data[i] - input_zeropoint;
    a87e:	f8cd 800c 	str.w	r8, [sp, #12]
    a882:	9b06      	ldr	r3, [sp, #24]
    a884:	f933 2018 	ldrsh.w	r2, [r3, r8, lsl #1]
    a888:	9b07      	ldr	r3, [sp, #28]
    a88a:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    a88c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    a890:	f1b9 0f00 	cmp.w	r9, #0
    a894:	dd91      	ble.n	a7ba <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x39a>
    a896:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    a898:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a89a:	4593      	cmp	fp, r2
    a89c:	d090      	beq.n	a7c0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3a0>
    a89e:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    a8a0:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    a8a2:	465c      	mov	r4, fp
    a8a4:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    a8a6:	fb02 f305 	mul.w	r3, r2, r5
    a8aa:	fb0b 3101 	mla	r1, fp, r1, r3
    a8ae:	fba2 230b 	umull	r2, r3, r2, fp
    a8b2:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a8b4:	2a00      	cmp	r2, #0
    a8b6:	f173 0100 	sbcs.w	r1, r3, #0
    a8ba:	db88      	blt.n	a7ce <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3ae>
    a8bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a8c0:	1852      	adds	r2, r2, r1
    a8c2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    a8c6:	4611      	mov	r1, r2
    a8c8:	461c      	mov	r4, r3
    a8ca:	2a00      	cmp	r2, #0
    a8cc:	f173 0000 	sbcs.w	r0, r3, #0
    a8d0:	f6bf af7f 	bge.w	a7d2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3b2>
    a8d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a8d8:	1851      	adds	r1, r2, r1
    a8da:	f04f 0400 	mov.w	r4, #0
    a8de:	eb43 0404 	adc.w	r4, r3, r4
    a8e2:	e776      	b.n	a7d2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3b2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a8e4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a8e8:	e779      	b.n	a7de <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3be>
  assert(exponent >= 0);
    a8ea:	4b79      	ldr	r3, [pc, #484]	; (aad0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b0>)
    a8ec:	4a79      	ldr	r2, [pc, #484]	; (aad4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b4>)
    a8ee:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a8f2:	4879      	ldr	r0, [pc, #484]	; (aad8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b8>)
    a8f4:	f001 ff26 	bl	c744 <__assert_func>
  assert(exponent <= 31);
    a8f8:	4b78      	ldr	r3, [pc, #480]	; (aadc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6bc>)
    a8fa:	4a76      	ldr	r2, [pc, #472]	; (aad4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b4>)
    a8fc:	f240 1167 	movw	r1, #359	; 0x167
    a900:	4875      	ldr	r0, [pc, #468]	; (aad8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b8>)
    a902:	f001 ff1f 	bl	c744 <__assert_func>
	return __b;
    a906:	4b76      	ldr	r3, [pc, #472]	; (aae0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6c0>)
    a908:	e7ab      	b.n	a862 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x442>
	return __b;
    a90a:	4b76      	ldr	r3, [pc, #472]	; (aae4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6c4>)
    a90c:	e7ad      	b.n	a86a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44a>
        reference_ops::Requantize(
    a90e:	4640      	mov	r0, r8
    a910:	f005 f90b 	bl	fb2a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    a914:	9006      	str	r0, [sp, #24]
    a916:	f8d4 b010 	ldr.w	fp, [r4, #16]
    a91a:	f8d4 9014 	ldr.w	r9, [r4, #20]
    a91e:	69a3      	ldr	r3, [r4, #24]
    a920:	9307      	str	r3, [sp, #28]
    a922:	6823      	ldr	r3, [r4, #0]
    a924:	9308      	str	r3, [sp, #32]
    a926:	4628      	mov	r0, r5
    a928:	f005 f905 	bl	fb36 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    a92c:	9009      	str	r0, [sp, #36]	; 0x24
    a92e:	f04f 0800 	mov.w	r8, #0
    a932:	e05e      	b.n	a9f2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5d2>
  int right_shift = shift > 0 ? 0 : -shift;
    a934:	f1c9 0600 	rsb	r6, r9, #0
    a938:	e06d      	b.n	aa16 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5f6>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a93a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a93e:	d001      	beq.n	a944 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x524>
    a940:	2700      	movs	r7, #0
    a942:	e06c      	b.n	aa1e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5fe>
    a944:	2701      	movs	r7, #1
    a946:	e06a      	b.n	aa1e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5fe>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a948:	4960      	ldr	r1, [pc, #384]	; (aacc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6ac>)
    a94a:	e078      	b.n	aa3e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x61e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a94c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    a94e:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a952:	2f00      	cmp	r7, #0
    a954:	f040 8085 	bne.w	aa62 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x642>
  assert(exponent >= 0);
    a958:	2e00      	cmp	r6, #0
    a95a:	f2c0 8085 	blt.w	aa68 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x648>
  assert(exponent <= 31);
    a95e:	2e1f      	cmp	r6, #31
    a960:	f300 8089 	bgt.w	aa76 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x656>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    a964:	f04f 0a01 	mov.w	sl, #1
    a968:	fa0a f006 	lsl.w	r0, sl, r6
    a96c:	3801      	subs	r0, #1
    a96e:	f005 f8bd 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a972:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    a974:	2000      	movs	r0, #0
    a976:	f005 f8b9 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a97a:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    a97c:	4650      	mov	r0, sl
    a97e:	f005 f8b5 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a982:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    a984:	4639      	mov	r1, r7
    a986:	4620      	mov	r0, r4
    a988:	f005 f8b1 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a98c:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    a98e:	4651      	mov	r1, sl
    a990:	4638      	mov	r0, r7
    a992:	f005 f8ae 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a996:	4607      	mov	r7, r0
    a998:	9904      	ldr	r1, [sp, #16]
    a99a:	4620      	mov	r0, r4
    a99c:	f005 f8b5 	bl	fb0a <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    a9a0:	4629      	mov	r1, r5
    a9a2:	f005 f8a4 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a9a6:	4601      	mov	r1, r0
    a9a8:	4638      	mov	r0, r7
    a9aa:	f005 f8a4 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    a9ae:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    a9b0:	4631      	mov	r1, r6
    a9b2:	4620      	mov	r0, r4
    a9b4:	f005 f89d 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a9b8:	4604      	mov	r4, r0
    a9ba:	4639      	mov	r1, r7
    a9bc:	9805      	ldr	r0, [sp, #20]
    a9be:	f005 f8ac 	bl	fb1a <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    a9c2:	4629      	mov	r1, r5
    a9c4:	f005 f893 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a9c8:	4601      	mov	r1, r0
    a9ca:	4620      	mov	r0, r4
    a9cc:	f005 f893 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    a9d0:	9b08      	ldr	r3, [sp, #32]
    a9d2:	4418      	add	r0, r3
    const int32_t output =
    a9d4:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__b < __a)
    a9d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a9da:	da53      	bge.n	aa84 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x664>
      return __a;
    a9dc:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__a < __b)
    a9de:	681a      	ldr	r2, [r3, #0]
    a9e0:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    a9e4:	db50      	blt.n	aa88 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x668>
    const int32_t clamped_output =
    a9e6:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
    a9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a9ea:	9903      	ldr	r1, [sp, #12]
    a9ec:	5253      	strh	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    a9ee:	f108 0801 	add.w	r8, r8, #1
    a9f2:	9b00      	ldr	r3, [sp, #0]
    a9f4:	4543      	cmp	r3, r8
    a9f6:	f340 8357 	ble.w	b0a8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc88>
    const int32_t input = input_data[i] - input_zeropoint;
    a9fa:	ea4f 0348 	mov.w	r3, r8, lsl #1
    a9fe:	9303      	str	r3, [sp, #12]
    aa00:	9b06      	ldr	r3, [sp, #24]
    aa02:	f933 2018 	ldrsh.w	r2, [r3, r8, lsl #1]
    aa06:	9b07      	ldr	r3, [sp, #28]
    aa08:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    aa0a:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    aa0e:	f1b9 0f00 	cmp.w	r9, #0
    aa12:	dd8f      	ble.n	a934 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x514>
    aa14:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    aa16:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    aa18:	4593      	cmp	fp, r2
    aa1a:	d08e      	beq.n	a93a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x51a>
    aa1c:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    aa1e:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    aa20:	465c      	mov	r4, fp
    aa22:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    aa24:	fb02 f305 	mul.w	r3, r2, r5
    aa28:	fb0b 3101 	mla	r1, fp, r1, r3
    aa2c:	fba2 230b 	umull	r2, r3, r2, fp
    aa30:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    aa32:	2a00      	cmp	r2, #0
    aa34:	f173 0100 	sbcs.w	r1, r3, #0
    aa38:	db86      	blt.n	a948 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x528>
    aa3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    aa3e:	1852      	adds	r2, r2, r1
    aa40:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    aa44:	4611      	mov	r1, r2
    aa46:	461c      	mov	r4, r3
    aa48:	2a00      	cmp	r2, #0
    aa4a:	f173 0000 	sbcs.w	r0, r3, #0
    aa4e:	f6bf af7d 	bge.w	a94c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x52c>
    aa52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    aa56:	1851      	adds	r1, r2, r1
    aa58:	f04f 0400 	mov.w	r4, #0
    aa5c:	eb43 0404 	adc.w	r4, r3, r4
    aa60:	e774      	b.n	a94c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x52c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    aa62:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    aa66:	e777      	b.n	a958 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x538>
  assert(exponent >= 0);
    aa68:	4b19      	ldr	r3, [pc, #100]	; (aad0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b0>)
    aa6a:	4a1a      	ldr	r2, [pc, #104]	; (aad4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b4>)
    aa6c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    aa70:	4819      	ldr	r0, [pc, #100]	; (aad8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b8>)
    aa72:	f001 fe67 	bl	c744 <__assert_func>
  assert(exponent <= 31);
    aa76:	4b19      	ldr	r3, [pc, #100]	; (aadc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6bc>)
    aa78:	4a16      	ldr	r2, [pc, #88]	; (aad4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b4>)
    aa7a:	f240 1167 	movw	r1, #359	; 0x167
    aa7e:	4816      	ldr	r0, [pc, #88]	; (aad8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b8>)
    aa80:	f001 fe60 	bl	c744 <__assert_func>
	return __b;
    aa84:	4b18      	ldr	r3, [pc, #96]	; (aae8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6c8>)
    aa86:	e7aa      	b.n	a9de <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5be>
	return __b;
    aa88:	4b18      	ldr	r3, [pc, #96]	; (aaec <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6cc>)
    aa8a:	e7ac      	b.n	a9e6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5c6>
        reference_ops::Requantize(
    aa8c:	4640      	mov	r0, r8
    aa8e:	f005 f84c 	bl	fb2a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    aa92:	9006      	str	r0, [sp, #24]
    aa94:	f8d4 b010 	ldr.w	fp, [r4, #16]
    aa98:	f8d4 9014 	ldr.w	r9, [r4, #20]
    aa9c:	69a3      	ldr	r3, [r4, #24]
    aa9e:	9307      	str	r3, [sp, #28]
    aaa0:	6823      	ldr	r3, [r4, #0]
    aaa2:	9308      	str	r3, [sp, #32]
    aaa4:	4628      	mov	r0, r5
    aaa6:	f005 f850 	bl	fb4a <_ZN6tflite5micro13GetTensorDataIiEEPT_P16TfLiteEvalTensor>
    aaaa:	9009      	str	r0, [sp, #36]	; 0x24
    aaac:	f04f 0800 	mov.w	r8, #0
    aab0:	e064      	b.n	ab7c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x75c>
  int right_shift = shift > 0 ? 0 : -shift;
    aab2:	f1c9 0600 	rsb	r6, r9, #0
    aab6:	e072      	b.n	ab9e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x77e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    aab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    aabc:	d001      	beq.n	aac2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6a2>
    aabe:	2700      	movs	r7, #0
    aac0:	e071      	b.n	aba6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x786>
    aac2:	2701      	movs	r7, #1
    aac4:	e06f      	b.n	aba6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x786>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    aac6:	4901      	ldr	r1, [pc, #4]	; (aacc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6ac>)
    aac8:	e07d      	b.n	abc6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7a6>
    aaca:	bf00      	nop
    aacc:	c0000001 	.word	0xc0000001
    aad0:	00057620 	.word	0x00057620
    aad4:	00057630 	.word	0x00057630
    aad8:	00057688 	.word	0x00057688
    aadc:	000576e4 	.word	0x000576e4
    aae0:	000578d8 	.word	0x000578d8
    aae4:	000578dc 	.word	0x000578dc
    aae8:	000578d0 	.word	0x000578d0
    aaec:	000578d4 	.word	0x000578d4
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    aaf0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    aaf2:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    aaf6:	2f00      	cmp	r7, #0
    aaf8:	d176      	bne.n	abe8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7c8>
  assert(exponent >= 0);
    aafa:	2e00      	cmp	r6, #0
    aafc:	db77      	blt.n	abee <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7ce>
  assert(exponent <= 31);
    aafe:	2e1f      	cmp	r6, #31
    ab00:	dc7c      	bgt.n	abfc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7dc>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ab02:	f04f 0a01 	mov.w	sl, #1
    ab06:	fa0a f006 	lsl.w	r0, sl, r6
    ab0a:	3801      	subs	r0, #1
    ab0c:	f004 ffee 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab10:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ab12:	2000      	movs	r0, #0
    ab14:	f004 ffea 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab18:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    ab1a:	4650      	mov	r0, sl
    ab1c:	f004 ffe6 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab20:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    ab22:	4639      	mov	r1, r7
    ab24:	4620      	mov	r0, r4
    ab26:	f004 ffe2 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ab2a:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ab2c:	4651      	mov	r1, sl
    ab2e:	4638      	mov	r0, r7
    ab30:	f004 ffdf 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ab34:	4607      	mov	r7, r0
    ab36:	9904      	ldr	r1, [sp, #16]
    ab38:	4620      	mov	r0, r4
    ab3a:	f004 ffe6 	bl	fb0a <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ab3e:	4629      	mov	r1, r5
    ab40:	f004 ffd5 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ab44:	4601      	mov	r1, r0
    ab46:	4638      	mov	r0, r7
    ab48:	f004 ffd5 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ab4c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    ab4e:	4631      	mov	r1, r6
    ab50:	4620      	mov	r0, r4
    ab52:	f004 ffce 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ab56:	4604      	mov	r4, r0
    ab58:	4639      	mov	r1, r7
    ab5a:	9805      	ldr	r0, [sp, #20]
    ab5c:	f004 ffdd 	bl	fb1a <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ab60:	4629      	mov	r1, r5
    ab62:	f004 ffc4 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ab66:	4601      	mov	r1, r0
    ab68:	4620      	mov	r0, r4
    ab6a:	f004 ffc4 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    ab6e:	9b08      	ldr	r3, [sp, #32]
    ab70:	4418      	add	r0, r3
    output_data[i] = static_cast<output_type>(clamped_output);
    ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab74:	9a03      	ldr	r2, [sp, #12]
    ab76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  for (int i = 0; i < size; ++i) {
    ab7a:	44d0      	add	r8, sl
    ab7c:	9b00      	ldr	r3, [sp, #0]
    ab7e:	4543      	cmp	r3, r8
    ab80:	f340 8294 	ble.w	b0ac <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc8c>
    const int32_t input = input_data[i] - input_zeropoint;
    ab84:	f8cd 800c 	str.w	r8, [sp, #12]
    ab88:	9b06      	ldr	r3, [sp, #24]
    ab8a:	f933 2018 	ldrsh.w	r2, [r3, r8, lsl #1]
    ab8e:	9b07      	ldr	r3, [sp, #28]
    ab90:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    ab92:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ab96:	f1b9 0f00 	cmp.w	r9, #0
    ab9a:	dd8a      	ble.n	aab2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x692>
    ab9c:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ab9e:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    aba0:	4593      	cmp	fp, r2
    aba2:	d089      	beq.n	aab8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x698>
    aba4:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    aba6:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    aba8:	465c      	mov	r4, fp
    abaa:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    abac:	fb02 f305 	mul.w	r3, r2, r5
    abb0:	fb0b 3101 	mla	r1, fp, r1, r3
    abb4:	fba2 230b 	umull	r2, r3, r2, fp
    abb8:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    abba:	2a00      	cmp	r2, #0
    abbc:	f173 0100 	sbcs.w	r1, r3, #0
    abc0:	db81      	blt.n	aac6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6a6>
    abc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    abc6:	1852      	adds	r2, r2, r1
    abc8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    abcc:	4611      	mov	r1, r2
    abce:	461c      	mov	r4, r3
    abd0:	2a00      	cmp	r2, #0
    abd2:	f173 0000 	sbcs.w	r0, r3, #0
    abd6:	da8b      	bge.n	aaf0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6d0>
    abd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    abdc:	1851      	adds	r1, r2, r1
    abde:	f04f 0400 	mov.w	r4, #0
    abe2:	eb43 0404 	adc.w	r4, r3, r4
    abe6:	e783      	b.n	aaf0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6d0>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    abe8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    abec:	e785      	b.n	aafa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6da>
  assert(exponent >= 0);
    abee:	4bc5      	ldr	r3, [pc, #788]	; (af04 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae4>)
    abf0:	4ac5      	ldr	r2, [pc, #788]	; (af08 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    abf2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    abf6:	48c5      	ldr	r0, [pc, #788]	; (af0c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    abf8:	f001 fda4 	bl	c744 <__assert_func>
  assert(exponent <= 31);
    abfc:	4bc4      	ldr	r3, [pc, #784]	; (af10 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf0>)
    abfe:	4ac2      	ldr	r2, [pc, #776]	; (af08 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    ac00:	f240 1167 	movw	r1, #359	; 0x167
    ac04:	48c1      	ldr	r0, [pc, #772]	; (af0c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    ac06:	f001 fd9d 	bl	c744 <__assert_func>
        reference_ops::Requantize(
    ac0a:	4640      	mov	r0, r8
    ac0c:	f004 ff64 	bl	fad8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    ac10:	9006      	str	r0, [sp, #24]
    ac12:	f8d4 b010 	ldr.w	fp, [r4, #16]
    ac16:	f8d4 9014 	ldr.w	r9, [r4, #20]
    ac1a:	69a3      	ldr	r3, [r4, #24]
    ac1c:	9307      	str	r3, [sp, #28]
    ac1e:	6823      	ldr	r3, [r4, #0]
    ac20:	9308      	str	r3, [sp, #32]
    ac22:	4628      	mov	r0, r5
    ac24:	f004 ff5e 	bl	fae4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    ac28:	9009      	str	r0, [sp, #36]	; 0x24
    ac2a:	f04f 0800 	mov.w	r8, #0
    ac2e:	e05d      	b.n	acec <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8cc>
  int right_shift = shift > 0 ? 0 : -shift;
    ac30:	f1c9 0600 	rsb	r6, r9, #0
    ac34:	e06b      	b.n	ad0e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8ee>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ac36:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ac3a:	d001      	beq.n	ac40 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x820>
    ac3c:	2700      	movs	r7, #0
    ac3e:	e06a      	b.n	ad16 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8f6>
    ac40:	2701      	movs	r7, #1
    ac42:	e068      	b.n	ad16 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8f6>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ac44:	49b3      	ldr	r1, [pc, #716]	; (af14 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf4>)
    ac46:	e076      	b.n	ad36 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x916>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ac48:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ac4a:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ac4e:	2f00      	cmp	r7, #0
    ac50:	f040 8083 	bne.w	ad5a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x93a>
  assert(exponent >= 0);
    ac54:	2e00      	cmp	r6, #0
    ac56:	f2c0 8083 	blt.w	ad60 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x940>
  assert(exponent <= 31);
    ac5a:	2e1f      	cmp	r6, #31
    ac5c:	f300 8087 	bgt.w	ad6e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x94e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ac60:	f04f 0a01 	mov.w	sl, #1
    ac64:	fa0a f006 	lsl.w	r0, sl, r6
    ac68:	3801      	subs	r0, #1
    ac6a:	f004 ff3f 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ac6e:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ac70:	2000      	movs	r0, #0
    ac72:	f004 ff3b 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ac76:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    ac78:	4650      	mov	r0, sl
    ac7a:	f004 ff37 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ac7e:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    ac80:	4639      	mov	r1, r7
    ac82:	4620      	mov	r0, r4
    ac84:	f004 ff33 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ac88:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ac8a:	4651      	mov	r1, sl
    ac8c:	4638      	mov	r0, r7
    ac8e:	f004 ff30 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ac92:	4607      	mov	r7, r0
    ac94:	9904      	ldr	r1, [sp, #16]
    ac96:	4620      	mov	r0, r4
    ac98:	f004 ff37 	bl	fb0a <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ac9c:	4629      	mov	r1, r5
    ac9e:	f004 ff26 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aca2:	4601      	mov	r1, r0
    aca4:	4638      	mov	r0, r7
    aca6:	f004 ff26 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    acaa:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    acac:	4631      	mov	r1, r6
    acae:	4620      	mov	r0, r4
    acb0:	f004 ff1f 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    acb4:	4604      	mov	r4, r0
    acb6:	4639      	mov	r1, r7
    acb8:	9805      	ldr	r0, [sp, #20]
    acba:	f004 ff2e 	bl	fb1a <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    acbe:	4629      	mov	r1, r5
    acc0:	f004 ff15 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    acc4:	4601      	mov	r1, r0
    acc6:	4620      	mov	r0, r4
    acc8:	f004 ff15 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    accc:	9b08      	ldr	r3, [sp, #32]
    acce:	4418      	add	r0, r3
    const int32_t output =
    acd0:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__b < __a)
    acd2:	287f      	cmp	r0, #127	; 0x7f
    acd4:	dc52      	bgt.n	ad7c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x95c>
      return __a;
    acd6:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__a < __b)
    acd8:	681a      	ldr	r2, [r3, #0]
    acda:	f112 0f80 	cmn.w	r2, #128	; 0x80
    acde:	db4f      	blt.n	ad80 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x960>
    const int32_t clamped_output =
    ace0:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
    ace2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ace4:	9903      	ldr	r1, [sp, #12]
    ace6:	5453      	strb	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    ace8:	f108 0801 	add.w	r8, r8, #1
    acec:	9b00      	ldr	r3, [sp, #0]
    acee:	4543      	cmp	r3, r8
    acf0:	f340 81de 	ble.w	b0b0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc90>
    const int32_t input = input_data[i] - input_zeropoint;
    acf4:	f8cd 800c 	str.w	r8, [sp, #12]
    acf8:	9b06      	ldr	r3, [sp, #24]
    acfa:	f913 2008 	ldrsb.w	r2, [r3, r8]
    acfe:	9b07      	ldr	r3, [sp, #28]
    ad00:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    ad02:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ad06:	f1b9 0f00 	cmp.w	r9, #0
    ad0a:	dd91      	ble.n	ac30 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x810>
    ad0c:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ad0e:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ad10:	4593      	cmp	fp, r2
    ad12:	d090      	beq.n	ac36 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x816>
    ad14:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    ad16:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    ad18:	465c      	mov	r4, fp
    ad1a:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    ad1c:	fb02 f305 	mul.w	r3, r2, r5
    ad20:	fb0b 3101 	mla	r1, fp, r1, r3
    ad24:	fba2 230b 	umull	r2, r3, r2, fp
    ad28:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ad2a:	2a00      	cmp	r2, #0
    ad2c:	f173 0100 	sbcs.w	r1, r3, #0
    ad30:	db88      	blt.n	ac44 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x824>
    ad32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ad36:	1852      	adds	r2, r2, r1
    ad38:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ad3c:	4611      	mov	r1, r2
    ad3e:	461c      	mov	r4, r3
    ad40:	2a00      	cmp	r2, #0
    ad42:	f173 0000 	sbcs.w	r0, r3, #0
    ad46:	f6bf af7f 	bge.w	ac48 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x828>
    ad4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ad4e:	1851      	adds	r1, r2, r1
    ad50:	f04f 0400 	mov.w	r4, #0
    ad54:	eb43 0404 	adc.w	r4, r3, r4
    ad58:	e776      	b.n	ac48 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x828>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ad5a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ad5e:	e779      	b.n	ac54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x834>
  assert(exponent >= 0);
    ad60:	4b68      	ldr	r3, [pc, #416]	; (af04 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae4>)
    ad62:	4a69      	ldr	r2, [pc, #420]	; (af08 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    ad64:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ad68:	4868      	ldr	r0, [pc, #416]	; (af0c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    ad6a:	f001 fceb 	bl	c744 <__assert_func>
  assert(exponent <= 31);
    ad6e:	4b68      	ldr	r3, [pc, #416]	; (af10 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf0>)
    ad70:	4a65      	ldr	r2, [pc, #404]	; (af08 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    ad72:	f240 1167 	movw	r1, #359	; 0x167
    ad76:	4865      	ldr	r0, [pc, #404]	; (af0c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    ad78:	f001 fce4 	bl	c744 <__assert_func>
	return __b;
    ad7c:	4b66      	ldr	r3, [pc, #408]	; (af18 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf8>)
    ad7e:	e7ab      	b.n	acd8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8b8>
	return __b;
    ad80:	4b66      	ldr	r3, [pc, #408]	; (af1c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xafc>)
    ad82:	e7ad      	b.n	ace0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8c0>
        reference_ops::Requantize(
    ad84:	4640      	mov	r0, r8
    ad86:	f004 fea7 	bl	fad8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    ad8a:	9006      	str	r0, [sp, #24]
    ad8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
    ad90:	f8d4 9014 	ldr.w	r9, [r4, #20]
    ad94:	69a3      	ldr	r3, [r4, #24]
    ad96:	9307      	str	r3, [sp, #28]
    ad98:	6823      	ldr	r3, [r4, #0]
    ad9a:	9308      	str	r3, [sp, #32]
    ad9c:	4628      	mov	r0, r5
    ad9e:	f004 feca 	bl	fb36 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    ada2:	9009      	str	r0, [sp, #36]	; 0x24
    ada4:	f04f 0800 	mov.w	r8, #0
    ada8:	e05f      	b.n	ae6a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa4a>
  int right_shift = shift > 0 ? 0 : -shift;
    adaa:	f1c9 0600 	rsb	r6, r9, #0
    adae:	e06d      	b.n	ae8c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa6c>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    adb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    adb4:	d001      	beq.n	adba <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x99a>
    adb6:	2700      	movs	r7, #0
    adb8:	e06c      	b.n	ae94 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa74>
    adba:	2701      	movs	r7, #1
    adbc:	e06a      	b.n	ae94 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa74>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    adbe:	4955      	ldr	r1, [pc, #340]	; (af14 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf4>)
    adc0:	e078      	b.n	aeb4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa94>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    adc2:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    adc4:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    adc8:	2f00      	cmp	r7, #0
    adca:	f040 8085 	bne.w	aed8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xab8>
  assert(exponent >= 0);
    adce:	2e00      	cmp	r6, #0
    add0:	f2c0 8085 	blt.w	aede <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xabe>
  assert(exponent <= 31);
    add4:	2e1f      	cmp	r6, #31
    add6:	f300 8089 	bgt.w	aeec <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xacc>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    adda:	f04f 0a01 	mov.w	sl, #1
    adde:	fa0a f006 	lsl.w	r0, sl, r6
    ade2:	3801      	subs	r0, #1
    ade4:	f004 fe82 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ade8:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    adea:	2000      	movs	r0, #0
    adec:	f004 fe7e 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    adf0:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    adf2:	4650      	mov	r0, sl
    adf4:	f004 fe7a 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    adf8:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    adfa:	4639      	mov	r1, r7
    adfc:	4620      	mov	r0, r4
    adfe:	f004 fe76 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ae02:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ae04:	4651      	mov	r1, sl
    ae06:	4638      	mov	r0, r7
    ae08:	f004 fe73 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ae0c:	4607      	mov	r7, r0
    ae0e:	9904      	ldr	r1, [sp, #16]
    ae10:	4620      	mov	r0, r4
    ae12:	f004 fe7a 	bl	fb0a <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ae16:	4629      	mov	r1, r5
    ae18:	f004 fe69 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ae1c:	4601      	mov	r1, r0
    ae1e:	4638      	mov	r0, r7
    ae20:	f004 fe69 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ae24:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    ae26:	4631      	mov	r1, r6
    ae28:	4620      	mov	r0, r4
    ae2a:	f004 fe62 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ae2e:	4604      	mov	r4, r0
    ae30:	4639      	mov	r1, r7
    ae32:	9805      	ldr	r0, [sp, #20]
    ae34:	f004 fe71 	bl	fb1a <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ae38:	4629      	mov	r1, r5
    ae3a:	f004 fe58 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ae3e:	4601      	mov	r1, r0
    ae40:	4620      	mov	r0, r4
    ae42:	f004 fe58 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    ae46:	9b08      	ldr	r3, [sp, #32]
    ae48:	4418      	add	r0, r3
    const int32_t output =
    ae4a:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__b < __a)
    ae4c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    ae50:	da53      	bge.n	aefa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xada>
      return __a;
    ae52:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__a < __b)
    ae54:	681a      	ldr	r2, [r3, #0]
    ae56:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    ae5a:	db50      	blt.n	aefe <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xade>
    const int32_t clamped_output =
    ae5c:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
    ae5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ae60:	9903      	ldr	r1, [sp, #12]
    ae62:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
  for (int i = 0; i < size; ++i) {
    ae66:	f108 0801 	add.w	r8, r8, #1
    ae6a:	9b00      	ldr	r3, [sp, #0]
    ae6c:	4543      	cmp	r3, r8
    ae6e:	f340 8121 	ble.w	b0b4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc94>
    const int32_t input = input_data[i] - input_zeropoint;
    ae72:	f8cd 800c 	str.w	r8, [sp, #12]
    ae76:	9b06      	ldr	r3, [sp, #24]
    ae78:	f913 2008 	ldrsb.w	r2, [r3, r8]
    ae7c:	9b07      	ldr	r3, [sp, #28]
    ae7e:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    ae80:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ae84:	f1b9 0f00 	cmp.w	r9, #0
    ae88:	dd8f      	ble.n	adaa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x98a>
    ae8a:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ae8c:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ae8e:	4593      	cmp	fp, r2
    ae90:	d08e      	beq.n	adb0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x990>
    ae92:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    ae94:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    ae96:	465c      	mov	r4, fp
    ae98:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    ae9a:	fb02 f305 	mul.w	r3, r2, r5
    ae9e:	fb0b 3101 	mla	r1, fp, r1, r3
    aea2:	fba2 230b 	umull	r2, r3, r2, fp
    aea6:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    aea8:	2a00      	cmp	r2, #0
    aeaa:	f173 0100 	sbcs.w	r1, r3, #0
    aeae:	db86      	blt.n	adbe <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x99e>
    aeb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    aeb4:	1852      	adds	r2, r2, r1
    aeb6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    aeba:	4611      	mov	r1, r2
    aebc:	461c      	mov	r4, r3
    aebe:	2a00      	cmp	r2, #0
    aec0:	f173 0000 	sbcs.w	r0, r3, #0
    aec4:	f6bf af7d 	bge.w	adc2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9a2>
    aec8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    aecc:	1851      	adds	r1, r2, r1
    aece:	f04f 0400 	mov.w	r4, #0
    aed2:	eb43 0404 	adc.w	r4, r3, r4
    aed6:	e774      	b.n	adc2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9a2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    aed8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    aedc:	e777      	b.n	adce <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9ae>
  assert(exponent >= 0);
    aede:	4b09      	ldr	r3, [pc, #36]	; (af04 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae4>)
    aee0:	4a09      	ldr	r2, [pc, #36]	; (af08 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    aee2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    aee6:	4809      	ldr	r0, [pc, #36]	; (af0c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    aee8:	f001 fc2c 	bl	c744 <__assert_func>
  assert(exponent <= 31);
    aeec:	4b08      	ldr	r3, [pc, #32]	; (af10 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf0>)
    aeee:	4a06      	ldr	r2, [pc, #24]	; (af08 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    aef0:	f240 1167 	movw	r1, #359	; 0x167
    aef4:	4805      	ldr	r0, [pc, #20]	; (af0c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    aef6:	f001 fc25 	bl	c744 <__assert_func>
	return __b;
    aefa:	4b09      	ldr	r3, [pc, #36]	; (af20 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb00>)
    aefc:	e7aa      	b.n	ae54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa34>
	return __b;
    aefe:	4b09      	ldr	r3, [pc, #36]	; (af24 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb04>)
    af00:	e7ac      	b.n	ae5c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa3c>
    af02:	bf00      	nop
    af04:	00057620 	.word	0x00057620
    af08:	00057630 	.word	0x00057630
    af0c:	00057688 	.word	0x00057688
    af10:	000576e4 	.word	0x000576e4
    af14:	c0000001 	.word	0xc0000001
    af18:	000578c8 	.word	0x000578c8
    af1c:	000578cc 	.word	0x000578cc
    af20:	000578c0 	.word	0x000578c0
    af24:	000578c4 	.word	0x000578c4
        reference_ops::Requantize(
    af28:	4640      	mov	r0, r8
    af2a:	f004 fdd5 	bl	fad8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    af2e:	9006      	str	r0, [sp, #24]
    af30:	f8d4 b010 	ldr.w	fp, [r4, #16]
    af34:	f8d4 9014 	ldr.w	r9, [r4, #20]
    af38:	69a3      	ldr	r3, [r4, #24]
    af3a:	9307      	str	r3, [sp, #28]
    af3c:	6823      	ldr	r3, [r4, #0]
    af3e:	9308      	str	r3, [sp, #32]
    af40:	4628      	mov	r0, r5
    af42:	f004 fe02 	bl	fb4a <_ZN6tflite5micro13GetTensorDataIiEEPT_P16TfLiteEvalTensor>
    af46:	9009      	str	r0, [sp, #36]	; 0x24
    af48:	f04f 0800 	mov.w	r8, #0
    af4c:	e051      	b.n	aff2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbd2>
  int right_shift = shift > 0 ? 0 : -shift;
    af4e:	f1c9 0600 	rsb	r6, r9, #0
    af52:	e05e      	b.n	b012 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbf2>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    af54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    af58:	d001      	beq.n	af5e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb3e>
    af5a:	2700      	movs	r7, #0
    af5c:	e05d      	b.n	b01a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbfa>
    af5e:	2701      	movs	r7, #1
    af60:	e05b      	b.n	b01a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbfa>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    af62:	4956      	ldr	r1, [pc, #344]	; (b0bc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc9c>)
    af64:	e069      	b.n	b03a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc1a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    af66:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    af68:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    af6c:	2f00      	cmp	r7, #0
    af6e:	d175      	bne.n	b05c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc3c>
  assert(exponent >= 0);
    af70:	2e00      	cmp	r6, #0
    af72:	db76      	blt.n	b062 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc42>
  assert(exponent <= 31);
    af74:	2e1f      	cmp	r6, #31
    af76:	dc7b      	bgt.n	b070 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc50>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    af78:	f04f 0a01 	mov.w	sl, #1
    af7c:	fa0a f006 	lsl.w	r0, sl, r6
    af80:	3801      	subs	r0, #1
    af82:	f004 fdb3 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af86:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    af88:	2000      	movs	r0, #0
    af8a:	f004 fdaf 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af8e:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    af90:	4650      	mov	r0, sl
    af92:	f004 fdab 	bl	faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af96:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    af98:	4639      	mov	r1, r7
    af9a:	4620      	mov	r0, r4
    af9c:	f004 fda7 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afa0:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    afa2:	4651      	mov	r1, sl
    afa4:	4638      	mov	r0, r7
    afa6:	f004 fda4 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    afaa:	4607      	mov	r7, r0
    afac:	9904      	ldr	r1, [sp, #16]
    afae:	4620      	mov	r0, r4
    afb0:	f004 fdab 	bl	fb0a <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    afb4:	4629      	mov	r1, r5
    afb6:	f004 fd9a 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afba:	4601      	mov	r1, r0
    afbc:	4638      	mov	r0, r7
    afbe:	f004 fd9a 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    afc2:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    afc4:	4631      	mov	r1, r6
    afc6:	4620      	mov	r0, r4
    afc8:	f004 fd93 	bl	faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    afcc:	4604      	mov	r4, r0
    afce:	4639      	mov	r1, r7
    afd0:	9805      	ldr	r0, [sp, #20]
    afd2:	f004 fda2 	bl	fb1a <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    afd6:	4629      	mov	r1, r5
    afd8:	f004 fd89 	bl	faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afdc:	4601      	mov	r1, r0
    afde:	4620      	mov	r0, r4
    afe0:	f004 fd89 	bl	faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    afe4:	9b08      	ldr	r3, [sp, #32]
    afe6:	4418      	add	r0, r3
    output_data[i] = static_cast<output_type>(clamped_output);
    afe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    afea:	9a03      	ldr	r2, [sp, #12]
    afec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  for (int i = 0; i < size; ++i) {
    aff0:	44d0      	add	r8, sl
    aff2:	9b00      	ldr	r3, [sp, #0]
    aff4:	4543      	cmp	r3, r8
    aff6:	dd5f      	ble.n	b0b8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc98>
    const int32_t input = input_data[i] - input_zeropoint;
    aff8:	f8cd 800c 	str.w	r8, [sp, #12]
    affc:	9b06      	ldr	r3, [sp, #24]
    affe:	f913 2008 	ldrsb.w	r2, [r3, r8]
    b002:	9b07      	ldr	r3, [sp, #28]
    b004:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    b006:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    b00a:	f1b9 0f00 	cmp.w	r9, #0
    b00e:	dd9e      	ble.n	af4e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb2e>
    b010:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    b012:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b014:	4593      	cmp	fp, r2
    b016:	d09d      	beq.n	af54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb34>
    b018:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    b01a:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    b01c:	465c      	mov	r4, fp
    b01e:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    b020:	fb02 f305 	mul.w	r3, r2, r5
    b024:	fb0b 3101 	mla	r1, fp, r1, r3
    b028:	fba2 230b 	umull	r2, r3, r2, fp
    b02c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b02e:	2a00      	cmp	r2, #0
    b030:	f173 0100 	sbcs.w	r1, r3, #0
    b034:	db95      	blt.n	af62 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb42>
    b036:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b03a:	1852      	adds	r2, r2, r1
    b03c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b040:	4611      	mov	r1, r2
    b042:	461c      	mov	r4, r3
    b044:	2a00      	cmp	r2, #0
    b046:	f173 0000 	sbcs.w	r0, r3, #0
    b04a:	da8c      	bge.n	af66 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb46>
    b04c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b050:	1851      	adds	r1, r2, r1
    b052:	f04f 0400 	mov.w	r4, #0
    b056:	eb43 0404 	adc.w	r4, r3, r4
    b05a:	e784      	b.n	af66 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb46>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b05c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b060:	e786      	b.n	af70 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb50>
  assert(exponent >= 0);
    b062:	4b17      	ldr	r3, [pc, #92]	; (b0c0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca0>)
    b064:	4a17      	ldr	r2, [pc, #92]	; (b0c4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca4>)
    b066:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b06a:	4817      	ldr	r0, [pc, #92]	; (b0c8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca8>)
    b06c:	f001 fb6a 	bl	c744 <__assert_func>
  assert(exponent <= 31);
    b070:	4b16      	ldr	r3, [pc, #88]	; (b0cc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xcac>)
    b072:	4a14      	ldr	r2, [pc, #80]	; (b0c4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca4>)
    b074:	f240 1167 	movw	r1, #359	; 0x167
    b078:	4813      	ldr	r0, [pc, #76]	; (b0c8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca8>)
    b07a:	f001 fb63 	bl	c744 <__assert_func>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    b07e:	f8d6 8014 	ldr.w	r8, [r6, #20]
    b082:	4638      	mov	r0, r7
    b084:	f7fd fe96 	bl	8db4 <TfLiteTypeGetName>
    b088:	4604      	mov	r4, r0
    b08a:	7a28      	ldrb	r0, [r5, #8]
    b08c:	f7fd fe92 	bl	8db4 <TfLiteTypeGetName>
    b090:	4603      	mov	r3, r0
    b092:	4622      	mov	r2, r4
    b094:	490e      	ldr	r1, [pc, #56]	; (b0d0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xcb0>)
    b096:	4630      	mov	r0, r6
    b098:	47c0      	blx	r8
    return kTfLiteError;
    b09a:	2701      	movs	r7, #1
}
    b09c:	4638      	mov	r0, r7
    b09e:	b025      	add	sp, #148	; 0x94
    b0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return kTfLiteOk;
    b0a4:	2700      	movs	r7, #0
    b0a6:	e7f9      	b.n	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
        return kTfLiteOk;
    b0a8:	2700      	movs	r7, #0
    b0aa:	e7f7      	b.n	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
        return kTfLiteOk;
    b0ac:	2700      	movs	r7, #0
    b0ae:	e7f5      	b.n	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
  return kTfLiteOk;
    b0b0:	2700      	movs	r7, #0
    b0b2:	e7f3      	b.n	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    b0b4:	2700      	movs	r7, #0
    b0b6:	e7f1      	b.n	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    b0b8:	2700      	movs	r7, #0
    b0ba:	e7ef      	b.n	b09c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    b0bc:	c0000001 	.word	0xc0000001
    b0c0:	00057620 	.word	0x00057620
    b0c4:	00057630 	.word	0x00057630
    b0c8:	00057688 	.word	0x00057688
    b0cc:	000576e4 	.word	0x000576e4
    b0d0:	000574d0 	.word	0x000574d0

0000b0d4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    b0d4:	4b03      	ldr	r3, [pc, #12]	; (b0e4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    b0d6:	4a04      	ldr	r2, [pc, #16]	; (b0e8 <z_device_state_init+0x14>)
    b0d8:	4293      	cmp	r3, r2
    b0da:	d201      	bcs.n	b0e0 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    b0dc:	3318      	adds	r3, #24
    b0de:	e7fa      	b.n	b0d6 <z_device_state_init+0x2>
	}
}
    b0e0:	4770      	bx	lr
    b0e2:	bf00      	nop
    b0e4:	00010dd4 	.word	0x00010dd4
    b0e8:	00010e4c 	.word	0x00010e4c

0000b0ec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    b0ec:	b570      	push	{r4, r5, r6, lr}
    b0ee:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b0f0:	4b11      	ldr	r3, [pc, #68]	; (b138 <z_sys_init_run_level+0x4c>)
    b0f2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b0f6:	e009      	b.n	b10c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    b0f8:	4240      	negs	r0, r0
    b0fa:	e017      	b.n	b12c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    b0fc:	68eb      	ldr	r3, [r5, #12]
    b0fe:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    b100:	68ea      	ldr	r2, [r5, #12]
    b102:	7853      	ldrb	r3, [r2, #1]
    b104:	f043 0301 	orr.w	r3, r3, #1
    b108:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b10a:	3408      	adds	r4, #8
    b10c:	1c73      	adds	r3, r6, #1
    b10e:	4a0a      	ldr	r2, [pc, #40]	; (b138 <z_sys_init_run_level+0x4c>)
    b110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b114:	42a3      	cmp	r3, r4
    b116:	d90d      	bls.n	b134 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    b118:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    b11a:	6823      	ldr	r3, [r4, #0]
    b11c:	4628      	mov	r0, r5
    b11e:	4798      	blx	r3
		if (dev != NULL) {
    b120:	2d00      	cmp	r5, #0
    b122:	d0f2      	beq.n	b10a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    b124:	2800      	cmp	r0, #0
    b126:	d0eb      	beq.n	b100 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    b128:	2800      	cmp	r0, #0
    b12a:	dbe5      	blt.n	b0f8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    b12c:	28ff      	cmp	r0, #255	; 0xff
    b12e:	dde5      	ble.n	b0fc <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    b130:	20ff      	movs	r0, #255	; 0xff
    b132:	e7e3      	b.n	b0fc <z_sys_init_run_level+0x10>
		}
	}
}
    b134:	bd70      	pop	{r4, r5, r6, pc}
    b136:	bf00      	nop
    b138:	000578f0 	.word	0x000578f0

0000b13c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    b13c:	4b01      	ldr	r3, [pc, #4]	; (b144 <z_impl_z_errno+0x8>)
    b13e:	6898      	ldr	r0, [r3, #8]
}
    b140:	3094      	adds	r0, #148	; 0x94
    b142:	4770      	bx	lr
    b144:	2001b630 	.word	0x2001b630

0000b148 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    b148:	b5f0      	push	{r4, r5, r6, r7, lr}
    b14a:	b089      	sub	sp, #36	; 0x24
    b14c:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    b14e:	4b15      	ldr	r3, [pc, #84]	; (b1a4 <init_idle_thread+0x5c>)
    b150:	25b0      	movs	r5, #176	; 0xb0
    b152:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    b156:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    b15a:	4e13      	ldr	r6, [pc, #76]	; (b1a8 <init_idle_thread+0x60>)
    b15c:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    b160:	af06      	add	r7, sp, #24
    b162:	4603      	mov	r3, r0
    b164:	4a11      	ldr	r2, [pc, #68]	; (b1ac <init_idle_thread+0x64>)
    b166:	2108      	movs	r1, #8
    b168:	4638      	mov	r0, r7
    b16a:	f002 fd9f 	bl	dcac <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    b16e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b172:	480f      	ldr	r0, [pc, #60]	; (b1b0 <init_idle_thread+0x68>)
    b174:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    b178:	9705      	str	r7, [sp, #20]
    b17a:	2301      	movs	r3, #1
    b17c:	9304      	str	r3, [sp, #16]
    b17e:	230f      	movs	r3, #15
    b180:	9303      	str	r3, [sp, #12]
    b182:	2300      	movs	r3, #0
    b184:	9302      	str	r3, [sp, #8]
    b186:	9301      	str	r3, [sp, #4]
    b188:	9400      	str	r4, [sp, #0]
    b18a:	4b0a      	ldr	r3, [pc, #40]	; (b1b4 <init_idle_thread+0x6c>)
    b18c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    b190:	4631      	mov	r1, r6
    b192:	4628      	mov	r0, r5
    b194:	f000 f946 	bl	b424 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b198:	7b6b      	ldrb	r3, [r5, #13]
    b19a:	f023 0304 	bic.w	r3, r3, #4
    b19e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    b1a0:	b009      	add	sp, #36	; 0x24
    b1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1a4:	20000360 	.word	0x20000360
    b1a8:	20023860 	.word	0x20023860
    b1ac:	00057908 	.word	0x00057908
    b1b0:	2001b630 	.word	0x2001b630
    b1b4:	0000fdbd 	.word	0x0000fdbd

0000b1b8 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    b1b8:	b570      	push	{r4, r5, r6, lr}
    b1ba:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    b1bc:	f000 fdfe 	bl	bdbc <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    b1c0:	4d1a      	ldr	r5, [pc, #104]	; (b22c <prepare_multithreading+0x74>)
    b1c2:	4b1b      	ldr	r3, [pc, #108]	; (b230 <prepare_multithreading+0x78>)
    b1c4:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b1c6:	4b1b      	ldr	r3, [pc, #108]	; (b234 <prepare_multithreading+0x7c>)
    b1c8:	9305      	str	r3, [sp, #20]
    b1ca:	2301      	movs	r3, #1
    b1cc:	9304      	str	r3, [sp, #16]
    b1ce:	2400      	movs	r4, #0
    b1d0:	9403      	str	r4, [sp, #12]
    b1d2:	9402      	str	r4, [sp, #8]
    b1d4:	9401      	str	r4, [sp, #4]
    b1d6:	9400      	str	r4, [sp, #0]
    b1d8:	4b17      	ldr	r3, [pc, #92]	; (b238 <prepare_multithreading+0x80>)
    b1da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    b1de:	4917      	ldr	r1, [pc, #92]	; (b23c <prepare_multithreading+0x84>)
    b1e0:	4628      	mov	r0, r5
    b1e2:	f000 f91f 	bl	b424 <z_setup_new_thread>
    b1e6:	4606      	mov	r6, r0
    b1e8:	7b6b      	ldrb	r3, [r5, #13]
    b1ea:	f023 0304 	bic.w	r3, r3, #4
    b1ee:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    b1f0:	4628      	mov	r0, r5
    b1f2:	f004 fe4d 	bl	fe90 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    b1f6:	2c00      	cmp	r4, #0
    b1f8:	dd02      	ble.n	b200 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    b1fa:	4630      	mov	r0, r6
    b1fc:	b006      	add	sp, #24
    b1fe:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    b200:	4620      	mov	r0, r4
    b202:	f7ff ffa1 	bl	b148 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    b206:	4b0e      	ldr	r3, [pc, #56]	; (b240 <prepare_multithreading+0x88>)
    b208:	22b0      	movs	r2, #176	; 0xb0
    b20a:	fb02 3204 	mla	r2, r2, r4, r3
    b20e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    b212:	4b07      	ldr	r3, [pc, #28]	; (b230 <prepare_multithreading+0x78>)
    b214:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    b218:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    b21a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    b21c:	4a09      	ldr	r2, [pc, #36]	; (b244 <prepare_multithreading+0x8c>)
    b21e:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
    b222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
    b226:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    b228:	3401      	adds	r4, #1
    b22a:	e7e4      	b.n	b1f6 <prepare_multithreading+0x3e>
    b22c:	20000410 	.word	0x20000410
    b230:	2001b630 	.word	0x2001b630
    b234:	00057914 	.word	0x00057914
    b238:	0000b249 	.word	0x0000b249
    b23c:	2001b860 	.word	0x2001b860
    b240:	20000360 	.word	0x20000360
    b244:	200239a0 	.word	0x200239a0

0000b248 <bg_thread_main>:
{
    b248:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    b24a:	4b0b      	ldr	r3, [pc, #44]	; (b278 <bg_thread_main+0x30>)
    b24c:	2201      	movs	r2, #1
    b24e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    b250:	2002      	movs	r0, #2
    b252:	f7ff ff4b 	bl	b0ec <z_sys_init_run_level>
	boot_banner();
    b256:	f001 f83b 	bl	c2d0 <boot_banner>
	z_cpp_init_static();
    b25a:	f003 f938 	bl	e4ce <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    b25e:	2003      	movs	r0, #3
    b260:	f7ff ff44 	bl	b0ec <z_sys_init_run_level>
	z_init_static_threads();
    b264:	f000 f942 	bl	b4ec <z_init_static_threads>
	main();
    b268:	f002 fcaa 	bl	dbc0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    b26c:	4a03      	ldr	r2, [pc, #12]	; (b27c <bg_thread_main+0x34>)
    b26e:	7b13      	ldrb	r3, [r2, #12]
    b270:	f023 0301 	bic.w	r3, r3, #1
    b274:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    b276:	bd08      	pop	{r3, pc}
    b278:	2001b69f 	.word	0x2001b69f
    b27c:	20000410 	.word	0x20000410

0000b280 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    b280:	b508      	push	{r3, lr}
    b282:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b284:	4a01      	ldr	r2, [pc, #4]	; (b28c <switch_to_main_thread+0xc>)
    b286:	4802      	ldr	r0, [pc, #8]	; (b290 <switch_to_main_thread+0x10>)
    b288:	f7f8 fdea 	bl	3e60 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    b28c:	0000b249 	.word	0x0000b249
    b290:	20000410 	.word	0x20000410

0000b294 <z_bss_zero>:
{
    b294:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    b296:	4803      	ldr	r0, [pc, #12]	; (b2a4 <z_bss_zero+0x10>)
    b298:	4a03      	ldr	r2, [pc, #12]	; (b2a8 <z_bss_zero+0x14>)
    b29a:	1a12      	subs	r2, r2, r0
    b29c:	2100      	movs	r1, #0
    b29e:	f004 ff87 	bl	101b0 <memset>
}
    b2a2:	bd08      	pop	{r3, pc}
    b2a4:	20000340 	.word	0x20000340
    b2a8:	2001b860 	.word	0x2001b860

0000b2ac <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    b2ac:	b500      	push	{lr}
    b2ae:	b0ad      	sub	sp, #180	; 0xb4
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    b2b0:	4b1c      	ldr	r3, [pc, #112]	; (b324 <z_cstart+0x78>)
	uint32_t msp =
    b2b2:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    b2b6:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    b2ba:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2be:	4c1a      	ldr	r4, [pc, #104]	; (b328 <z_cstart+0x7c>)
    b2c0:	23e0      	movs	r3, #224	; 0xe0
    b2c2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    b2c6:	2500      	movs	r5, #0
    b2c8:	77e5      	strb	r5, [r4, #31]
    b2ca:	7625      	strb	r5, [r4, #24]
    b2cc:	7665      	strb	r5, [r4, #25]
    b2ce:	76a5      	strb	r5, [r4, #26]
    b2d0:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b2d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b2d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    b2da:	6263      	str	r3, [r4, #36]	; 0x24
    b2dc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    b2e0:	f7f8 ff02 	bl	40e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    b2e4:	f7f8 fcd0 	bl	3c88 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b2e8:	f04f 33ff 	mov.w	r3, #4294967295
    b2ec:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b2ee:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b2f0:	f7f9 f932 	bl	4558 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b2f4:	f7f8 ffba 	bl	426c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    b2f8:	2401      	movs	r4, #1
    b2fa:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    b2fe:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    b302:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    b304:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    b306:	4b09      	ldr	r3, [pc, #36]	; (b32c <z_cstart+0x80>)
    b308:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b30c:	f7ff fee2 	bl	b0d4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    b310:	4628      	mov	r0, r5
    b312:	f7ff feeb 	bl	b0ec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b316:	4620      	mov	r0, r4
    b318:	f7ff fee8 	bl	b0ec <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    b31c:	f7ff ff4c 	bl	b1b8 <prepare_multithreading>
    b320:	f7ff ffae 	bl	b280 <switch_to_main_thread>
    b324:	200239a0 	.word	0x200239a0
    b328:	e000ed00 	.word	0xe000ed00
    b32c:	2001b630 	.word	0x2001b630

0000b330 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    b330:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b332:	4c06      	ldr	r4, [pc, #24]	; (b34c <init_mem_slab_module+0x1c>)
	int rc = 0;
    b334:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b336:	4b06      	ldr	r3, [pc, #24]	; (b350 <init_mem_slab_module+0x20>)
    b338:	429c      	cmp	r4, r3
    b33a:	d206      	bcs.n	b34a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    b33c:	4620      	mov	r0, r4
    b33e:	f004 fcc4 	bl	fcca <create_free_list>
		if (rc < 0) {
    b342:	2800      	cmp	r0, #0
    b344:	db01      	blt.n	b34a <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b346:	3420      	adds	r4, #32
    b348:	e7f5      	b.n	b336 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    b34a:	bd10      	pop	{r4, pc}
    b34c:	200002b4 	.word	0x200002b4
    b350:	200002b4 	.word	0x200002b4

0000b354 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    b354:	b5f0      	push	{r4, r5, r6, r7, lr}
    b356:	b083      	sub	sp, #12
    b358:	460c      	mov	r4, r1
    b35a:	461f      	mov	r7, r3
    b35c:	f04f 0320 	mov.w	r3, #32
    b360:	f3ef 8111 	mrs	r1, BASEPRI
    b364:	f383 8812 	msr	BASEPRI_MAX, r3
    b368:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    b36c:	6983      	ldr	r3, [r0, #24]
    b36e:	b16b      	cbz	r3, b38c <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    b370:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    b372:	6983      	ldr	r3, [r0, #24]
    b374:	681b      	ldr	r3, [r3, #0]
    b376:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    b378:	69c3      	ldr	r3, [r0, #28]
    b37a:	3301      	adds	r3, #1
    b37c:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    b37e:	2000      	movs	r0, #0
	__asm__ volatile(
    b380:	f381 8811 	msr	BASEPRI, r1
    b384:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    b388:	b003      	add	sp, #12
    b38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b38c:	4616      	mov	r6, r2
    b38e:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    b392:	ea56 0307 	orrs.w	r3, r6, r7
    b396:	d104      	bne.n	b3a2 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    b398:	2300      	movs	r3, #0
    b39a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    b39c:	f06f 000b 	mvn.w	r0, #11
    b3a0:	e7ee      	b.n	b380 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    b3a2:	e9cd 6700 	strd	r6, r7, [sp]
    b3a6:	4602      	mov	r2, r0
    b3a8:	4628      	mov	r0, r5
    b3aa:	f000 fbdd 	bl	bb68 <z_pend_curr>
		if (result == 0) {
    b3ae:	2800      	cmp	r0, #0
    b3b0:	d1ea      	bne.n	b388 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    b3b2:	4b02      	ldr	r3, [pc, #8]	; (b3bc <k_mem_slab_alloc+0x68>)
    b3b4:	689b      	ldr	r3, [r3, #8]
    b3b6:	695b      	ldr	r3, [r3, #20]
    b3b8:	6023      	str	r3, [r4, #0]
		return result;
    b3ba:	e7e5      	b.n	b388 <k_mem_slab_alloc+0x34>
    b3bc:	2001b630 	.word	0x2001b630

0000b3c0 <z_thread_monitor_exit>:
	__asm__ volatile(
    b3c0:	f04f 0320 	mov.w	r3, #32
    b3c4:	f3ef 8111 	mrs	r1, BASEPRI
    b3c8:	f383 8812 	msr	BASEPRI_MAX, r3
    b3cc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    b3d0:	4b0a      	ldr	r3, [pc, #40]	; (b3fc <z_thread_monitor_exit+0x3c>)
    b3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b3d4:	4283      	cmp	r3, r0
    b3d6:	d104      	bne.n	b3e2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    b3d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b3da:	4b08      	ldr	r3, [pc, #32]	; (b3fc <z_thread_monitor_exit+0x3c>)
    b3dc:	629a      	str	r2, [r3, #40]	; 0x28
    b3de:	e007      	b.n	b3f0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    b3e0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    b3e2:	b113      	cbz	r3, b3ea <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    b3e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    b3e6:	4282      	cmp	r2, r0
    b3e8:	d1fa      	bne.n	b3e0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    b3ea:	b10b      	cbz	r3, b3f0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    b3ec:	6f02      	ldr	r2, [r0, #112]	; 0x70
    b3ee:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    b3f0:	f381 8811 	msr	BASEPRI, r1
    b3f4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    b3f8:	4770      	bx	lr
    b3fa:	bf00      	nop
    b3fc:	2001b630 	.word	0x2001b630

0000b400 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    b400:	b538      	push	{r3, r4, r5, lr}
    b402:	4614      	mov	r4, r2
    b404:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b406:	ea54 0305 	orrs.w	r3, r4, r5
    b40a:	d102      	bne.n	b412 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    b40c:	f004 fcc1 	bl	fd92 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    b410:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b412:	462b      	mov	r3, r5
    b414:	4902      	ldr	r1, [pc, #8]	; (b420 <schedule_new_thread+0x20>)
    b416:	3018      	adds	r0, #24
    b418:	f000 fe2e 	bl	c078 <z_add_timeout>
    b41c:	e7f8      	b.n	b410 <schedule_new_thread+0x10>
    b41e:	bf00      	nop
    b420:	0000fec9 	.word	0x0000fec9

0000b424 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b428:	b085      	sub	sp, #20
    b42a:	4604      	mov	r4, r0
    b42c:	460f      	mov	r7, r1
    b42e:	4615      	mov	r5, r2
    b430:	461e      	mov	r6, r3
    b432:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    b436:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    b43a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    b43e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    b442:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    b446:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    b448:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    b44a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b44c:	2204      	movs	r2, #4
    b44e:	9911      	ldr	r1, [sp, #68]	; 0x44
    b450:	f004 fca3 	bl	fd9a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    b454:	462a      	mov	r2, r5
    b456:	4639      	mov	r1, r7
    b458:	4620      	mov	r0, r4
    b45a:	f004 fc88 	bl	fd6e <setup_thread_stack>
    b45e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b460:	f8cd 8008 	str.w	r8, [sp, #8]
    b464:	f8cd 9004 	str.w	r9, [sp, #4]
    b468:	f8cd a000 	str.w	sl, [sp]
    b46c:	4633      	mov	r3, r6
    b46e:	4602      	mov	r2, r0
    b470:	4639      	mov	r1, r7
    b472:	4620      	mov	r0, r4
    b474:	f7f8 fcd4 	bl	3e20 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    b478:	2300      	movs	r3, #0
    b47a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    b47c:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    b47e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    b482:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    b486:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    b48a:	f04f 0320 	mov.w	r3, #32
    b48e:	f3ef 8211 	mrs	r2, BASEPRI
    b492:	f383 8812 	msr	BASEPRI_MAX, r3
    b496:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    b49a:	4b13      	ldr	r3, [pc, #76]	; (b4e8 <z_setup_new_thread+0xc4>)
    b49c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    b49e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    b4a0:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    b4a2:	f382 8811 	msr	BASEPRI, r2
    b4a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    b4aa:	f1bb 0f00 	cmp.w	fp, #0
    b4ae:	d013      	beq.n	b4d8 <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    b4b0:	221f      	movs	r2, #31
    b4b2:	4659      	mov	r1, fp
    b4b4:	f104 0074 	add.w	r0, r4, #116	; 0x74
    b4b8:	f004 fff3 	bl	104a2 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    b4bc:	2300      	movs	r3, #0
    b4be:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    b4c2:	4b09      	ldr	r3, [pc, #36]	; (b4e8 <z_setup_new_thread+0xc4>)
    b4c4:	689b      	ldr	r3, [r3, #8]
    b4c6:	b15b      	cbz	r3, b4e0 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    b4c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    b4cc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    b4d0:	4628      	mov	r0, r5
    b4d2:	b005      	add	sp, #20
    b4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    b4d8:	2300      	movs	r3, #0
    b4da:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    b4de:	e7f0      	b.n	b4c2 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    b4e0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    b4e4:	e7f4      	b.n	b4d0 <z_setup_new_thread+0xac>
    b4e6:	bf00      	nop
    b4e8:	2001b630 	.word	0x2001b630

0000b4ec <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    b4ec:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    b4f0:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    b4f2:	4c23      	ldr	r4, [pc, #140]	; (b580 <z_init_static_threads+0x94>)
    b4f4:	4b23      	ldr	r3, [pc, #140]	; (b584 <z_init_static_threads+0x98>)
    b4f6:	429c      	cmp	r4, r3
    b4f8:	d215      	bcs.n	b526 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    b4fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b4fc:	9305      	str	r3, [sp, #20]
    b4fe:	6a23      	ldr	r3, [r4, #32]
    b500:	9304      	str	r3, [sp, #16]
    b502:	69e3      	ldr	r3, [r4, #28]
    b504:	9303      	str	r3, [sp, #12]
    b506:	69a3      	ldr	r3, [r4, #24]
    b508:	9302      	str	r3, [sp, #8]
    b50a:	6963      	ldr	r3, [r4, #20]
    b50c:	9301      	str	r3, [sp, #4]
    b50e:	6923      	ldr	r3, [r4, #16]
    b510:	9300      	str	r3, [sp, #0]
    b512:	68e3      	ldr	r3, [r4, #12]
    b514:	68a2      	ldr	r2, [r4, #8]
    b516:	6861      	ldr	r1, [r4, #4]
    b518:	6820      	ldr	r0, [r4, #0]
    b51a:	f7ff ff83 	bl	b424 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    b51e:	6823      	ldr	r3, [r4, #0]
    b520:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    b522:	3430      	adds	r4, #48	; 0x30
    b524:	e7e6      	b.n	b4f4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    b526:	f000 f9d7 	bl	b8d8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    b52a:	4c15      	ldr	r4, [pc, #84]	; (b580 <z_init_static_threads+0x94>)
    b52c:	e01b      	b.n	b566 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    b52e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    b530:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b534:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    b538:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    b53c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    b540:	03d8      	lsls	r0, r3, #15
    b542:	f240 35e7 	movw	r5, #999	; 0x3e7
    b546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b54a:	2300      	movs	r3, #0
    b54c:	1940      	adds	r0, r0, r5
    b54e:	f04f 0500 	mov.w	r5, #0
    b552:	eb45 0101 	adc.w	r1, r5, r1
    b556:	f7f5 fdc7 	bl	10e8 <__aeabi_uldivmod>
    b55a:	4602      	mov	r2, r0
    b55c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    b55e:	4630      	mov	r0, r6
    b560:	f7ff ff4e 	bl	b400 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    b564:	3430      	adds	r4, #48	; 0x30
    b566:	4b07      	ldr	r3, [pc, #28]	; (b584 <z_init_static_threads+0x98>)
    b568:	429c      	cmp	r4, r3
    b56a:	d204      	bcs.n	b576 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b56c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b56e:	f1b3 3fff 	cmp.w	r3, #4294967295
    b572:	d0f7      	beq.n	b564 <z_init_static_threads+0x78>
    b574:	e7db      	b.n	b52e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    b576:	f000 fbad 	bl	bcd4 <k_sched_unlock>
}
    b57a:	b006      	add	sp, #24
    b57c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    b580:	200002b4 	.word	0x200002b4
    b584:	200002b4 	.word	0x200002b4

0000b588 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    b588:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    b58a:	f004 fd7c 	bl	10086 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    b58e:	4b04      	ldr	r3, [pc, #16]	; (b5a0 <pm_save_idle+0x18>)
    b590:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    b592:	f7f8 fa2b 	bl	39ec <pm_system_suspend>
    b596:	b100      	cbz	r0, b59a <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    b598:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    b59a:	f7f8 fb7b 	bl	3c94 <arch_cpu_idle>
    b59e:	e7fb      	b.n	b598 <pm_save_idle+0x10>
    b5a0:	2001b630 	.word	0x2001b630

0000b5a4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b5a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b5a8:	b083      	sub	sp, #12
    b5aa:	4604      	mov	r4, r0
    b5ac:	461d      	mov	r5, r3
	__asm__ volatile(
    b5ae:	f04f 0320 	mov.w	r3, #32
    b5b2:	f3ef 8711 	mrs	r7, BASEPRI
    b5b6:	f383 8812 	msr	BASEPRI_MAX, r3
    b5ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b5be:	68c1      	ldr	r1, [r0, #12]
    b5c0:	b999      	cbnz	r1, b5ea <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    b5c2:	2900      	cmp	r1, #0
    b5c4:	d14f      	bne.n	b666 <z_impl_k_mutex_lock+0xc2>
    b5c6:	4b3a      	ldr	r3, [pc, #232]	; (b6b0 <z_impl_k_mutex_lock+0x10c>)
    b5c8:	689b      	ldr	r3, [r3, #8]
    b5ca:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b5ce:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    b5d0:	3101      	adds	r1, #1
    b5d2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    b5d4:	4b36      	ldr	r3, [pc, #216]	; (b6b0 <z_impl_k_mutex_lock+0x10c>)
    b5d6:	689b      	ldr	r3, [r3, #8]
    b5d8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    b5da:	f387 8811 	msr	BASEPRI, r7
    b5de:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    b5e2:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b5e4:	b003      	add	sp, #12
    b5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b5ea:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b5ec:	6882      	ldr	r2, [r0, #8]
    b5ee:	4b30      	ldr	r3, [pc, #192]	; (b6b0 <z_impl_k_mutex_lock+0x10c>)
    b5f0:	689b      	ldr	r3, [r3, #8]
    b5f2:	429a      	cmp	r2, r3
    b5f4:	d0e5      	beq.n	b5c2 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b5f6:	ea55 0106 	orrs.w	r1, r5, r6
    b5fa:	bf0c      	ite	eq
    b5fc:	f04f 0801 	moveq.w	r8, #1
    b600:	f04f 0800 	movne.w	r8, #0
    b604:	d031      	beq.n	b66a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    b606:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b60a:	4649      	mov	r1, r9
    b60c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    b610:	f004 fbe0 	bl	fdd4 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b614:	4581      	cmp	r9, r0
    b616:	dc2f      	bgt.n	b678 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    b618:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b61c:	9600      	str	r6, [sp, #0]
    b61e:	9501      	str	r5, [sp, #4]
    b620:	4622      	mov	r2, r4
    b622:	4639      	mov	r1, r7
    b624:	4823      	ldr	r0, [pc, #140]	; (b6b4 <z_impl_k_mutex_lock+0x110>)
    b626:	f000 fa9f 	bl	bb68 <z_pend_curr>
	if (got_mutex == 0) {
    b62a:	2800      	cmp	r0, #0
    b62c:	d0da      	beq.n	b5e4 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    b62e:	f04f 0320 	mov.w	r3, #32
    b632:	f3ef 8511 	mrs	r5, BASEPRI
    b636:	f383 8812 	msr	BASEPRI_MAX, r3
    b63a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b63e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b640:	429c      	cmp	r4, r3
    b642:	d01f      	beq.n	b684 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b644:	b1f3      	cbz	r3, b684 <z_impl_k_mutex_lock+0xe0>
    b646:	6921      	ldr	r1, [r4, #16]
    b648:	f993 000e 	ldrsb.w	r0, [r3, #14]
    b64c:	f004 fbc2 	bl	fdd4 <new_prio_for_inheritance>
    b650:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b652:	4620      	mov	r0, r4
    b654:	f004 fbc9 	bl	fdea <adjust_owner_prio>
    b658:	b9b0      	cbnz	r0, b688 <z_impl_k_mutex_lock+0xe4>
    b65a:	f1b9 0f00 	cmp.w	r9, #0
    b65e:	d015      	beq.n	b68c <z_impl_k_mutex_lock+0xe8>
    b660:	f04f 0801 	mov.w	r8, #1
    b664:	e012      	b.n	b68c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    b666:	6923      	ldr	r3, [r4, #16]
    b668:	e7b1      	b.n	b5ce <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    b66a:	f387 8811 	msr	BASEPRI, r7
    b66e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    b672:	f06f 000f 	mvn.w	r0, #15
    b676:	e7b5      	b.n	b5e4 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    b678:	4601      	mov	r1, r0
    b67a:	4620      	mov	r0, r4
    b67c:	f004 fbb5 	bl	fdea <adjust_owner_prio>
    b680:	4681      	mov	r9, r0
    b682:	e7cb      	b.n	b61c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b684:	6921      	ldr	r1, [r4, #16]
    b686:	e7e4      	b.n	b652 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b688:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    b68c:	f1b8 0f00 	cmp.w	r8, #0
    b690:	d106      	bne.n	b6a0 <z_impl_k_mutex_lock+0xfc>
    b692:	f385 8811 	msr	BASEPRI, r5
    b696:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    b69a:	f06f 000a 	mvn.w	r0, #10
    b69e:	e7a1      	b.n	b5e4 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    b6a0:	4629      	mov	r1, r5
    b6a2:	4804      	ldr	r0, [pc, #16]	; (b6b4 <z_impl_k_mutex_lock+0x110>)
    b6a4:	f000 f8fc 	bl	b8a0 <z_reschedule>
	return -EAGAIN;
    b6a8:	f06f 000a 	mvn.w	r0, #10
    b6ac:	e79a      	b.n	b5e4 <z_impl_k_mutex_lock+0x40>
    b6ae:	bf00      	nop
    b6b0:	2001b630 	.word	0x2001b630
    b6b4:	2001b65c 	.word	0x2001b65c

0000b6b8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b6b8:	6882      	ldr	r2, [r0, #8]
    b6ba:	2a00      	cmp	r2, #0
    b6bc:	d035      	beq.n	b72a <z_impl_k_mutex_unlock+0x72>
{
    b6be:	b538      	push	{r3, r4, r5, lr}
    b6c0:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b6c2:	4b1d      	ldr	r3, [pc, #116]	; (b738 <z_impl_k_mutex_unlock+0x80>)
    b6c4:	689b      	ldr	r3, [r3, #8]
    b6c6:	429a      	cmp	r2, r3
    b6c8:	d132      	bne.n	b730 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    b6ca:	7bda      	ldrb	r2, [r3, #15]
    b6cc:	3a01      	subs	r2, #1
    b6ce:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    b6d0:	68c3      	ldr	r3, [r0, #12]
    b6d2:	2b01      	cmp	r3, #1
    b6d4:	d905      	bls.n	b6e2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    b6d6:	3b01      	subs	r3, #1
    b6d8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    b6da:	f000 fafb 	bl	bcd4 <k_sched_unlock>

	return 0;
    b6de:	2000      	movs	r0, #0
}
    b6e0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b6e2:	f04f 0320 	mov.w	r3, #32
    b6e6:	f3ef 8511 	mrs	r5, BASEPRI
    b6ea:	f383 8812 	msr	BASEPRI_MAX, r3
    b6ee:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b6f2:	6901      	ldr	r1, [r0, #16]
    b6f4:	f004 fb79 	bl	fdea <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    b6f8:	4620      	mov	r0, r4
    b6fa:	f004 fc64 	bl	ffc6 <z_unpend_first_thread>
	mutex->owner = new_owner;
    b6fe:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    b700:	b160      	cbz	r0, b71c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    b702:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b706:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b708:	2300      	movs	r3, #0
    b70a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    b70e:	f004 fbbf 	bl	fe90 <z_ready_thread>
		z_reschedule(&lock, key);
    b712:	4629      	mov	r1, r5
    b714:	4809      	ldr	r0, [pc, #36]	; (b73c <z_impl_k_mutex_unlock+0x84>)
    b716:	f000 f8c3 	bl	b8a0 <z_reschedule>
    b71a:	e7de      	b.n	b6da <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    b71c:	2300      	movs	r3, #0
    b71e:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    b720:	f385 8811 	msr	BASEPRI, r5
    b724:	f3bf 8f6f 	isb	sy
    b728:	e7d7      	b.n	b6da <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    b72a:	f06f 0015 	mvn.w	r0, #21
}
    b72e:	4770      	bx	lr
		return -EPERM;
    b730:	f04f 30ff 	mov.w	r0, #4294967295
    b734:	e7d4      	b.n	b6e0 <z_impl_k_mutex_unlock+0x28>
    b736:	bf00      	nop
    b738:	2001b630 	.word	0x2001b630
    b73c:	2001b65c 	.word	0x2001b65c

0000b740 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b740:	b538      	push	{r3, r4, r5, lr}
    b742:	4604      	mov	r4, r0
	__asm__ volatile(
    b744:	f04f 0320 	mov.w	r3, #32
    b748:	f3ef 8511 	mrs	r5, BASEPRI
    b74c:	f383 8812 	msr	BASEPRI_MAX, r3
    b750:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b754:	f004 fc37 	bl	ffc6 <z_unpend_first_thread>

	if (thread != NULL) {
    b758:	b148      	cbz	r0, b76e <z_impl_k_sem_give+0x2e>
    b75a:	2200      	movs	r2, #0
    b75c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b760:	f004 fb96 	bl	fe90 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b764:	4629      	mov	r1, r5
    b766:	4807      	ldr	r0, [pc, #28]	; (b784 <z_impl_k_sem_give+0x44>)
    b768:	f000 f89a 	bl	b8a0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b76c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b76e:	68a3      	ldr	r3, [r4, #8]
    b770:	68e2      	ldr	r2, [r4, #12]
    b772:	4293      	cmp	r3, r2
    b774:	d003      	beq.n	b77e <z_impl_k_sem_give+0x3e>
    b776:	2201      	movs	r2, #1
    b778:	4413      	add	r3, r2
    b77a:	60a3      	str	r3, [r4, #8]
}
    b77c:	e7f2      	b.n	b764 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b77e:	2200      	movs	r2, #0
    b780:	e7fa      	b.n	b778 <z_impl_k_sem_give+0x38>
    b782:	bf00      	nop
    b784:	2001b660 	.word	0x2001b660

0000b788 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b788:	b530      	push	{r4, r5, lr}
    b78a:	b083      	sub	sp, #12
    b78c:	461d      	mov	r5, r3
    b78e:	f04f 0320 	mov.w	r3, #32
    b792:	f3ef 8111 	mrs	r1, BASEPRI
    b796:	f383 8812 	msr	BASEPRI_MAX, r3
    b79a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b79e:	6883      	ldr	r3, [r0, #8]
    b7a0:	b143      	cbz	r3, b7b4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    b7a2:	3b01      	subs	r3, #1
    b7a4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    b7a6:	f381 8811 	msr	BASEPRI, r1
    b7aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b7ae:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b7b0:	b003      	add	sp, #12
    b7b2:	bd30      	pop	{r4, r5, pc}
    b7b4:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b7b6:	ea54 0305 	orrs.w	r3, r4, r5
    b7ba:	d006      	beq.n	b7ca <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b7bc:	e9cd 4500 	strd	r4, r5, [sp]
    b7c0:	4602      	mov	r2, r0
    b7c2:	4805      	ldr	r0, [pc, #20]	; (b7d8 <z_impl_k_sem_take+0x50>)
    b7c4:	f000 f9d0 	bl	bb68 <z_pend_curr>
	return ret;
    b7c8:	e7f2      	b.n	b7b0 <z_impl_k_sem_take+0x28>
    b7ca:	f381 8811 	msr	BASEPRI, r1
    b7ce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b7d2:	f06f 000f 	mvn.w	r0, #15
    b7d6:	e7eb      	b.n	b7b0 <z_impl_k_sem_take+0x28>
    b7d8:	2001b660 	.word	0x2001b660

0000b7dc <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    b7dc:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b7de:	f1b3 3fff 	cmp.w	r3, #4294967295
    b7e2:	bf08      	it	eq
    b7e4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b7e8:	d100      	bne.n	b7ec <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    b7ea:	bd38      	pop	{r3, r4, r5, pc}
    b7ec:	4902      	ldr	r1, [pc, #8]	; (b7f8 <add_thread_timeout+0x1c>)
    b7ee:	3018      	adds	r0, #24
    b7f0:	f000 fc42 	bl	c078 <z_add_timeout>
    b7f4:	e7f9      	b.n	b7ea <add_thread_timeout+0xe>
    b7f6:	bf00      	nop
    b7f8:	0000fec9 	.word	0x0000fec9

0000b7fc <z_reset_time_slice>:
{
    b7fc:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    b7fe:	4b08      	ldr	r3, [pc, #32]	; (b820 <z_reset_time_slice+0x24>)
    b800:	681b      	ldr	r3, [r3, #0]
    b802:	b903      	cbnz	r3, b806 <z_reset_time_slice+0xa>
}
    b804:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    b806:	f7f9 ffd5 	bl	57b4 <sys_clock_elapsed>
    b80a:	4603      	mov	r3, r0
    b80c:	4a04      	ldr	r2, [pc, #16]	; (b820 <z_reset_time_slice+0x24>)
    b80e:	6810      	ldr	r0, [r2, #0]
    b810:	4403      	add	r3, r0
    b812:	4a04      	ldr	r2, [pc, #16]	; (b824 <z_reset_time_slice+0x28>)
    b814:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    b816:	2100      	movs	r1, #0
    b818:	f004 fc4b 	bl	100b2 <z_set_timeout_expiry>
}
    b81c:	e7f2      	b.n	b804 <z_reset_time_slice+0x8>
    b81e:	bf00      	nop
    b820:	2001b670 	.word	0x2001b670
    b824:	2001b630 	.word	0x2001b630

0000b828 <k_sched_time_slice_set>:
{
    b828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b82c:	4606      	mov	r6, r0
    b82e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    b830:	2300      	movs	r3, #0
	__asm__ volatile(
    b832:	f04f 0220 	mov.w	r2, #32
    b836:	f3ef 8711 	mrs	r7, BASEPRI
    b83a:	f382 8812 	msr	BASEPRI_MAX, r2
    b83e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    b842:	e009      	b.n	b858 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    b844:	4b13      	ldr	r3, [pc, #76]	; (b894 <k_sched_time_slice_set+0x6c>)
    b846:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    b84a:	f7ff ffd7 	bl	b7fc <z_reset_time_slice>
	__asm__ volatile(
    b84e:	f387 8811 	msr	BASEPRI, r7
    b852:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b856:	2301      	movs	r3, #1
    b858:	b9cb      	cbnz	r3, b88e <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    b85a:	2300      	movs	r3, #0
    b85c:	4a0e      	ldr	r2, [pc, #56]	; (b898 <k_sched_time_slice_set+0x70>)
    b85e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    b860:	0c75      	lsrs	r5, r6, #17
    b862:	03f4      	lsls	r4, r6, #15
    b864:	f240 30e7 	movw	r0, #999	; 0x3e7
    b868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b86c:	2300      	movs	r3, #0
    b86e:	1820      	adds	r0, r4, r0
    b870:	f04f 0100 	mov.w	r1, #0
    b874:	eb45 0101 	adc.w	r1, r5, r1
    b878:	f7f5 fc36 	bl	10e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    b87c:	4b07      	ldr	r3, [pc, #28]	; (b89c <k_sched_time_slice_set+0x74>)
    b87e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    b880:	2e00      	cmp	r6, #0
    b882:	dddf      	ble.n	b844 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    b884:	2802      	cmp	r0, #2
    b886:	bfb8      	it	lt
    b888:	2002      	movlt	r0, #2
    b88a:	6018      	str	r0, [r3, #0]
    b88c:	e7da      	b.n	b844 <k_sched_time_slice_set+0x1c>
}
    b88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b892:	bf00      	nop
    b894:	2001b66c 	.word	0x2001b66c
    b898:	2001b630 	.word	0x2001b630
    b89c:	2001b670 	.word	0x2001b670

0000b8a0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    b8a0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    b8a2:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b8a4:	b921      	cbnz	r1, b8b0 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b8a6:	f3ef 8305 	mrs	r3, IPSR
    b8aa:	b913      	cbnz	r3, b8b2 <z_reschedule+0x12>
    b8ac:	2101      	movs	r1, #1
    b8ae:	e000      	b.n	b8b2 <z_reschedule+0x12>
    b8b0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    b8b2:	f011 0f01 	tst.w	r1, #1
    b8b6:	d007      	beq.n	b8c8 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    b8b8:	4b06      	ldr	r3, [pc, #24]	; (b8d4 <z_reschedule+0x34>)
    b8ba:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    b8bc:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    b8be:	429a      	cmp	r2, r3
    b8c0:	d002      	beq.n	b8c8 <z_reschedule+0x28>
	ret = arch_swap(key);
    b8c2:	f7f8 fa53 	bl	3d6c <arch_swap>
		z_swap(lock, key);
    b8c6:	e003      	b.n	b8d0 <z_reschedule+0x30>
    b8c8:	f380 8811 	msr	BASEPRI, r0
    b8cc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    b8d0:	bd08      	pop	{r3, pc}
    b8d2:	bf00      	nop
    b8d4:	2001b630 	.word	0x2001b630

0000b8d8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    b8d8:	2300      	movs	r3, #0
	__asm__ volatile(
    b8da:	f04f 0220 	mov.w	r2, #32
    b8de:	f3ef 8111 	mrs	r1, BASEPRI
    b8e2:	f382 8812 	msr	BASEPRI_MAX, r2
    b8e6:	f3bf 8f6f 	isb	sy
    b8ea:	b953      	cbnz	r3, b902 <k_sched_lock+0x2a>
    b8ec:	4b05      	ldr	r3, [pc, #20]	; (b904 <k_sched_lock+0x2c>)
    b8ee:	689a      	ldr	r2, [r3, #8]
    b8f0:	7bd3      	ldrb	r3, [r2, #15]
    b8f2:	3b01      	subs	r3, #1
    b8f4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    b8f6:	f381 8811 	msr	BASEPRI, r1
    b8fa:	f3bf 8f6f 	isb	sy
    b8fe:	2301      	movs	r3, #1
    b900:	e7f3      	b.n	b8ea <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    b902:	4770      	bx	lr
    b904:	2001b630 	.word	0x2001b630

0000b908 <update_cache>:
{
    b908:	b538      	push	{r3, r4, r5, lr}
    b90a:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    b90c:	480f      	ldr	r0, [pc, #60]	; (b94c <update_cache+0x44>)
    b90e:	f004 fab8 	bl	fe82 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b912:	4605      	mov	r5, r0
    b914:	b170      	cbz	r0, b934 <update_cache+0x2c>
	if (preempt_ok != 0) {
    b916:	b984      	cbnz	r4, b93a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    b918:	4b0d      	ldr	r3, [pc, #52]	; (b950 <update_cache+0x48>)
    b91a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b91c:	7b5a      	ldrb	r2, [r3, #13]
    b91e:	f012 0f1f 	tst.w	r2, #31
    b922:	d10a      	bne.n	b93a <update_cache+0x32>
	return node->next != NULL;
    b924:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b926:	b942      	cbnz	r2, b93a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b928:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    b92a:	2a7f      	cmp	r2, #127	; 0x7f
    b92c:	d905      	bls.n	b93a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    b92e:	4a08      	ldr	r2, [pc, #32]	; (b950 <update_cache+0x48>)
    b930:	61d3      	str	r3, [r2, #28]
    b932:	e00a      	b.n	b94a <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b934:	4b06      	ldr	r3, [pc, #24]	; (b950 <update_cache+0x48>)
    b936:	68dd      	ldr	r5, [r3, #12]
    b938:	e7ed      	b.n	b916 <update_cache+0xe>
		if (thread != _current) {
    b93a:	4b05      	ldr	r3, [pc, #20]	; (b950 <update_cache+0x48>)
    b93c:	689b      	ldr	r3, [r3, #8]
    b93e:	42ab      	cmp	r3, r5
    b940:	d001      	beq.n	b946 <update_cache+0x3e>
			z_reset_time_slice();
    b942:	f7ff ff5b 	bl	b7fc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    b946:	4b02      	ldr	r3, [pc, #8]	; (b950 <update_cache+0x48>)
    b948:	61dd      	str	r5, [r3, #28]
}
    b94a:	bd38      	pop	{r3, r4, r5, pc}
    b94c:	2001b650 	.word	0x2001b650
    b950:	2001b630 	.word	0x2001b630

0000b954 <move_thread_to_end_of_prio_q>:
{
    b954:	b538      	push	{r3, r4, r5, lr}
    b956:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    b958:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b95a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b95e:	2b00      	cmp	r3, #0
    b960:	db28      	blt.n	b9b4 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    b962:	7b6b      	ldrb	r3, [r5, #13]
    b964:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b968:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    b96a:	4b1a      	ldr	r3, [pc, #104]	; (b9d4 <move_thread_to_end_of_prio_q+0x80>)
    b96c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b970:	429c      	cmp	r4, r3
    b972:	d02d      	beq.n	b9d0 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b974:	b16c      	cbz	r4, b992 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b976:	4621      	mov	r1, r4
    b978:	4628      	mov	r0, r5
    b97a:	f004 fa5b 	bl	fe34 <z_sched_prio_cmp>
    b97e:	2800      	cmp	r0, #0
    b980:	dc20      	bgt.n	b9c4 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b982:	b134      	cbz	r4, b992 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    b984:	4b13      	ldr	r3, [pc, #76]	; (b9d4 <move_thread_to_end_of_prio_q+0x80>)
    b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b988:	429c      	cmp	r4, r3
    b98a:	d002      	beq.n	b992 <move_thread_to_end_of_prio_q+0x3e>
    b98c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b98e:	2c00      	cmp	r4, #0
    b990:	d1f0      	bne.n	b974 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    b992:	4b10      	ldr	r3, [pc, #64]	; (b9d4 <move_thread_to_end_of_prio_q+0x80>)
    b994:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    b996:	f103 0120 	add.w	r1, r3, #32
    b99a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b99c:	606a      	str	r2, [r5, #4]

	tail->next = node;
    b99e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b9a0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    b9a2:	4b0c      	ldr	r3, [pc, #48]	; (b9d4 <move_thread_to_end_of_prio_q+0x80>)
    b9a4:	6898      	ldr	r0, [r3, #8]
    b9a6:	42a8      	cmp	r0, r5
    b9a8:	bf14      	ite	ne
    b9aa:	2000      	movne	r0, #0
    b9ac:	2001      	moveq	r0, #1
    b9ae:	f7ff ffab 	bl	b908 <update_cache>
}
    b9b2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b9b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b9b8:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    b9ba:	4601      	mov	r1, r0
    b9bc:	4806      	ldr	r0, [pc, #24]	; (b9d8 <move_thread_to_end_of_prio_q+0x84>)
    b9be:	f004 fa58 	bl	fe72 <z_priq_dumb_remove>
}
    b9c2:	e7ce      	b.n	b962 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b9c4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    b9c6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b9c8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b9ca:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b9cc:	6065      	str	r5, [r4, #4]
}
    b9ce:	e7e8      	b.n	b9a2 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b9d0:	2400      	movs	r4, #0
    b9d2:	e7cf      	b.n	b974 <move_thread_to_end_of_prio_q+0x20>
    b9d4:	2001b630 	.word	0x2001b630
    b9d8:	2001b650 	.word	0x2001b650

0000b9dc <z_time_slice>:
{
    b9dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    b9de:	f04f 0320 	mov.w	r3, #32
    b9e2:	f3ef 8411 	mrs	r4, BASEPRI
    b9e6:	f383 8812 	msr	BASEPRI_MAX, r3
    b9ea:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    b9ee:	4b1c      	ldr	r3, [pc, #112]	; (ba60 <z_time_slice+0x84>)
    b9f0:	689b      	ldr	r3, [r3, #8]
    b9f2:	4a1c      	ldr	r2, [pc, #112]	; (ba64 <z_time_slice+0x88>)
    b9f4:	6812      	ldr	r2, [r2, #0]
    b9f6:	4293      	cmp	r3, r2
    b9f8:	d01d      	beq.n	ba36 <z_time_slice+0x5a>
	pending_current = NULL;
    b9fa:	4a1a      	ldr	r2, [pc, #104]	; (ba64 <z_time_slice+0x88>)
    b9fc:	2100      	movs	r1, #0
    b9fe:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    ba00:	4a19      	ldr	r2, [pc, #100]	; (ba68 <z_time_slice+0x8c>)
    ba02:	6812      	ldr	r2, [r2, #0]
    ba04:	b322      	cbz	r2, ba50 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ba06:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    ba08:	2a7f      	cmp	r2, #127	; 0x7f
    ba0a:	d821      	bhi.n	ba50 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    ba0c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    ba0e:	f012 0f1f 	tst.w	r2, #31
    ba12:	d11d      	bne.n	ba50 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ba14:	f993 100e 	ldrsb.w	r1, [r3, #14]
    ba18:	4a14      	ldr	r2, [pc, #80]	; (ba6c <z_time_slice+0x90>)
    ba1a:	6812      	ldr	r2, [r2, #0]
    ba1c:	4291      	cmp	r1, r2
    ba1e:	db17      	blt.n	ba50 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    ba20:	4a13      	ldr	r2, [pc, #76]	; (ba70 <z_time_slice+0x94>)
    ba22:	4293      	cmp	r3, r2
    ba24:	d014      	beq.n	ba50 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    ba26:	4a0e      	ldr	r2, [pc, #56]	; (ba60 <z_time_slice+0x84>)
    ba28:	6912      	ldr	r2, [r2, #16]
    ba2a:	4282      	cmp	r2, r0
    ba2c:	dd0a      	ble.n	ba44 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    ba2e:	1a10      	subs	r0, r2, r0
    ba30:	4b0b      	ldr	r3, [pc, #44]	; (ba60 <z_time_slice+0x84>)
    ba32:	6118      	str	r0, [r3, #16]
    ba34:	e00f      	b.n	ba56 <z_time_slice+0x7a>
		z_reset_time_slice();
    ba36:	f7ff fee1 	bl	b7fc <z_reset_time_slice>
	__asm__ volatile(
    ba3a:	f384 8811 	msr	BASEPRI, r4
    ba3e:	f3bf 8f6f 	isb	sy
		return;
    ba42:	e00c      	b.n	ba5e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    ba44:	4618      	mov	r0, r3
    ba46:	f7ff ff85 	bl	b954 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    ba4a:	f7ff fed7 	bl	b7fc <z_reset_time_slice>
    ba4e:	e002      	b.n	ba56 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    ba50:	4b03      	ldr	r3, [pc, #12]	; (ba60 <z_time_slice+0x84>)
    ba52:	2200      	movs	r2, #0
    ba54:	611a      	str	r2, [r3, #16]
    ba56:	f384 8811 	msr	BASEPRI, r4
    ba5a:	f3bf 8f6f 	isb	sy
}
    ba5e:	bd10      	pop	{r4, pc}
    ba60:	2001b630 	.word	0x2001b630
    ba64:	2001b664 	.word	0x2001b664
    ba68:	2001b670 	.word	0x2001b670
    ba6c:	2001b66c 	.word	0x2001b66c
    ba70:	20000360 	.word	0x20000360

0000ba74 <ready_thread>:
{
    ba74:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    ba76:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    ba78:	f990 200d 	ldrsb.w	r2, [r0, #13]
    ba7c:	2a00      	cmp	r2, #0
    ba7e:	db2d      	blt.n	badc <ready_thread+0x68>
    ba80:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ba82:	f013 0f1f 	tst.w	r3, #31
    ba86:	d105      	bne.n	ba94 <ready_thread+0x20>
	return node->next != NULL;
    ba88:	6982      	ldr	r2, [r0, #24]
    ba8a:	b10a      	cbz	r2, ba90 <ready_thread+0x1c>
    ba8c:	2200      	movs	r2, #0
    ba8e:	e002      	b.n	ba96 <ready_thread+0x22>
    ba90:	2201      	movs	r2, #1
    ba92:	e000      	b.n	ba96 <ready_thread+0x22>
    ba94:	2200      	movs	r2, #0
    ba96:	b30a      	cbz	r2, badc <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    ba98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ba9c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    ba9e:	4b14      	ldr	r3, [pc, #80]	; (baf0 <ready_thread+0x7c>)
    baa0:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    baa4:	429d      	cmp	r5, r3
    baa6:	d020      	beq.n	baea <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    baa8:	b16d      	cbz	r5, bac6 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    baaa:	4629      	mov	r1, r5
    baac:	4620      	mov	r0, r4
    baae:	f004 f9c1 	bl	fe34 <z_sched_prio_cmp>
    bab2:	2800      	cmp	r0, #0
    bab4:	dc13      	bgt.n	bade <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bab6:	b135      	cbz	r5, bac6 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    bab8:	4b0d      	ldr	r3, [pc, #52]	; (baf0 <ready_thread+0x7c>)
    baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    babc:	429d      	cmp	r5, r3
    babe:	d002      	beq.n	bac6 <ready_thread+0x52>
    bac0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bac2:	2d00      	cmp	r5, #0
    bac4:	d1f0      	bne.n	baa8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    bac6:	4b0a      	ldr	r3, [pc, #40]	; (baf0 <ready_thread+0x7c>)
    bac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    baca:	f103 0120 	add.w	r1, r3, #32
    bace:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    bad0:	6062      	str	r2, [r4, #4]
	tail->next = node;
    bad2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    bad4:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    bad6:	2000      	movs	r0, #0
    bad8:	f7ff ff16 	bl	b908 <update_cache>
}
    badc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    bade:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    bae0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    bae2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    bae4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    bae6:	606c      	str	r4, [r5, #4]
}
    bae8:	e7f5      	b.n	bad6 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    baea:	2500      	movs	r5, #0
    baec:	e7dc      	b.n	baa8 <ready_thread+0x34>
    baee:	bf00      	nop
    baf0:	2001b630 	.word	0x2001b630

0000baf4 <z_sched_start>:
{
    baf4:	b510      	push	{r4, lr}
	__asm__ volatile(
    baf6:	f04f 0320 	mov.w	r3, #32
    bafa:	f3ef 8411 	mrs	r4, BASEPRI
    bafe:	f383 8812 	msr	BASEPRI_MAX, r3
    bb02:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    bb06:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    bb08:	f013 0f04 	tst.w	r3, #4
    bb0c:	d104      	bne.n	bb18 <z_sched_start+0x24>
	__asm__ volatile(
    bb0e:	f384 8811 	msr	BASEPRI, r4
    bb12:	f3bf 8f6f 	isb	sy
}
    bb16:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bb18:	f023 0304 	bic.w	r3, r3, #4
    bb1c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    bb1e:	f7ff ffa9 	bl	ba74 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    bb22:	4621      	mov	r1, r4
    bb24:	4801      	ldr	r0, [pc, #4]	; (bb2c <z_sched_start+0x38>)
    bb26:	f7ff febb 	bl	b8a0 <z_reschedule>
    bb2a:	e7f4      	b.n	bb16 <z_sched_start+0x22>
    bb2c:	2001b668 	.word	0x2001b668

0000bb30 <unready_thread>:
{
    bb30:	b510      	push	{r4, lr}
    bb32:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    bb34:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    bb36:	f990 300d 	ldrsb.w	r3, [r0, #13]
    bb3a:	2b00      	cmp	r3, #0
    bb3c:	db08      	blt.n	bb50 <unready_thread+0x20>
	update_cache(thread == _current);
    bb3e:	4b08      	ldr	r3, [pc, #32]	; (bb60 <unready_thread+0x30>)
    bb40:	6898      	ldr	r0, [r3, #8]
    bb42:	42a0      	cmp	r0, r4
    bb44:	bf14      	ite	ne
    bb46:	2000      	movne	r0, #0
    bb48:	2001      	moveq	r0, #1
    bb4a:	f7ff fedd 	bl	b908 <update_cache>
}
    bb4e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bb50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bb54:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    bb56:	4601      	mov	r1, r0
    bb58:	4802      	ldr	r0, [pc, #8]	; (bb64 <unready_thread+0x34>)
    bb5a:	f004 f98a 	bl	fe72 <z_priq_dumb_remove>
}
    bb5e:	e7ee      	b.n	bb3e <unready_thread+0xe>
    bb60:	2001b630 	.word	0x2001b630
    bb64:	2001b650 	.word	0x2001b650

0000bb68 <z_pend_curr>:
{
    bb68:	b510      	push	{r4, lr}
    bb6a:	460c      	mov	r4, r1
    bb6c:	4611      	mov	r1, r2
	pending_current = _current;
    bb6e:	4b06      	ldr	r3, [pc, #24]	; (bb88 <z_pend_curr+0x20>)
    bb70:	6898      	ldr	r0, [r3, #8]
    bb72:	4b06      	ldr	r3, [pc, #24]	; (bb8c <z_pend_curr+0x24>)
    bb74:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    bb76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bb7a:	f004 fa03 	bl	ff84 <pend>
    bb7e:	4620      	mov	r0, r4
    bb80:	f7f8 f8f4 	bl	3d6c <arch_swap>
}
    bb84:	bd10      	pop	{r4, pc}
    bb86:	bf00      	nop
    bb88:	2001b630 	.word	0x2001b630
    bb8c:	2001b664 	.word	0x2001b664

0000bb90 <z_set_prio>:
{
    bb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bb94:	4604      	mov	r4, r0
    bb96:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    bb98:	2300      	movs	r3, #0
	__asm__ volatile(
    bb9a:	f04f 0220 	mov.w	r2, #32
    bb9e:	f3ef 8611 	mrs	r6, BASEPRI
    bba2:	f382 8812 	msr	BASEPRI_MAX, r2
    bba6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    bbaa:	4698      	mov	r8, r3
    bbac:	e008      	b.n	bbc0 <z_set_prio+0x30>
		if (need_sched) {
    bbae:	f012 0801 	ands.w	r8, r2, #1
    bbb2:	d111      	bne.n	bbd8 <z_set_prio+0x48>
			thread->base.prio = prio;
    bbb4:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    bbb6:	f386 8811 	msr	BASEPRI, r6
    bbba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bbbe:	2301      	movs	r3, #1
    bbc0:	461a      	mov	r2, r3
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	d13d      	bne.n	bc42 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    bbc6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bbc8:	f013 0f1f 	tst.w	r3, #31
    bbcc:	d1ef      	bne.n	bbae <z_set_prio+0x1e>
	return node->next != NULL;
    bbce:	69a1      	ldr	r1, [r4, #24]
    bbd0:	2900      	cmp	r1, #0
    bbd2:	d1ec      	bne.n	bbae <z_set_prio+0x1e>
    bbd4:	2201      	movs	r2, #1
    bbd6:	e7ea      	b.n	bbae <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bbdc:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    bbde:	f8df 906c 	ldr.w	r9, [pc, #108]	; bc4c <z_set_prio+0xbc>
    bbe2:	4621      	mov	r1, r4
    bbe4:	4648      	mov	r0, r9
    bbe6:	f004 f944 	bl	fe72 <z_priq_dumb_remove>
				thread->base.prio = prio;
    bbea:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    bbec:	7b63      	ldrb	r3, [r4, #13]
    bbee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bbf2:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    bbf4:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bbf8:	454d      	cmp	r5, r9
    bbfa:	d020      	beq.n	bc3e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bbfc:	b16d      	cbz	r5, bc1a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bbfe:	4629      	mov	r1, r5
    bc00:	4620      	mov	r0, r4
    bc02:	f004 f917 	bl	fe34 <z_sched_prio_cmp>
    bc06:	2800      	cmp	r0, #0
    bc08:	dc13      	bgt.n	bc32 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bc0a:	b135      	cbz	r5, bc1a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    bc0c:	4b0e      	ldr	r3, [pc, #56]	; (bc48 <z_set_prio+0xb8>)
    bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bc10:	429d      	cmp	r5, r3
    bc12:	d002      	beq.n	bc1a <z_set_prio+0x8a>
    bc14:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc16:	2d00      	cmp	r5, #0
    bc18:	d1f0      	bne.n	bbfc <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    bc1a:	4b0b      	ldr	r3, [pc, #44]	; (bc48 <z_set_prio+0xb8>)
    bc1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    bc1e:	f103 0120 	add.w	r1, r3, #32
    bc22:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    bc24:	6062      	str	r2, [r4, #4]
	tail->next = node;
    bc26:	6014      	str	r4, [r2, #0]
	list->tail = node;
    bc28:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    bc2a:	2001      	movs	r0, #1
    bc2c:	f7ff fe6c 	bl	b908 <update_cache>
    bc30:	e7c1      	b.n	bbb6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    bc32:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    bc34:	6063      	str	r3, [r4, #4]
	node->next = successor;
    bc36:	6025      	str	r5, [r4, #0]
	prev->next = node;
    bc38:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    bc3a:	606c      	str	r4, [r5, #4]
}
    bc3c:	e7f5      	b.n	bc2a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc3e:	2500      	movs	r5, #0
    bc40:	e7dc      	b.n	bbfc <z_set_prio+0x6c>
}
    bc42:	4640      	mov	r0, r8
    bc44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bc48:	2001b630 	.word	0x2001b630
    bc4c:	2001b650 	.word	0x2001b650

0000bc50 <z_impl_k_thread_suspend>:
{
    bc50:	b538      	push	{r3, r4, r5, lr}
    bc52:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    bc54:	3018      	adds	r0, #24
    bc56:	f004 f9f8 	bl	1004a <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    bc5a:	2300      	movs	r3, #0
	__asm__ volatile(
    bc5c:	f04f 0220 	mov.w	r2, #32
    bc60:	f3ef 8511 	mrs	r5, BASEPRI
    bc64:	f382 8812 	msr	BASEPRI_MAX, r2
    bc68:	f3bf 8f6f 	isb	sy
    bc6c:	e010      	b.n	bc90 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bc6e:	7b63      	ldrb	r3, [r4, #13]
    bc70:	f043 0310 	orr.w	r3, r3, #16
    bc74:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    bc76:	4b15      	ldr	r3, [pc, #84]	; (bccc <z_impl_k_thread_suspend+0x7c>)
    bc78:	6898      	ldr	r0, [r3, #8]
    bc7a:	42a0      	cmp	r0, r4
    bc7c:	bf14      	ite	ne
    bc7e:	2000      	movne	r0, #0
    bc80:	2001      	moveq	r0, #1
    bc82:	f7ff fe41 	bl	b908 <update_cache>
	__asm__ volatile(
    bc86:	f385 8811 	msr	BASEPRI, r5
    bc8a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bc8e:	2301      	movs	r3, #1
    bc90:	b963      	cbnz	r3, bcac <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    bc92:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    bc94:	f994 300d 	ldrsb.w	r3, [r4, #13]
    bc98:	2b00      	cmp	r3, #0
    bc9a:	dae8      	bge.n	bc6e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bc9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bca0:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    bca2:	4621      	mov	r1, r4
    bca4:	480a      	ldr	r0, [pc, #40]	; (bcd0 <z_impl_k_thread_suspend+0x80>)
    bca6:	f004 f8e4 	bl	fe72 <z_priq_dumb_remove>
}
    bcaa:	e7e0      	b.n	bc6e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    bcac:	4b07      	ldr	r3, [pc, #28]	; (bccc <z_impl_k_thread_suspend+0x7c>)
    bcae:	689b      	ldr	r3, [r3, #8]
    bcb0:	42a3      	cmp	r3, r4
    bcb2:	d000      	beq.n	bcb6 <z_impl_k_thread_suspend+0x66>
}
    bcb4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    bcb6:	f04f 0320 	mov.w	r3, #32
    bcba:	f3ef 8011 	mrs	r0, BASEPRI
    bcbe:	f383 8812 	msr	BASEPRI_MAX, r3
    bcc2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bcc6:	f004 f8bf 	bl	fe48 <z_reschedule_irqlock>
    bcca:	e7f3      	b.n	bcb4 <z_impl_k_thread_suspend+0x64>
    bccc:	2001b630 	.word	0x2001b630
    bcd0:	2001b650 	.word	0x2001b650

0000bcd4 <k_sched_unlock>:

void k_sched_unlock(void)
{
    bcd4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    bcd6:	2300      	movs	r3, #0
    bcd8:	f04f 0220 	mov.w	r2, #32
    bcdc:	f3ef 8411 	mrs	r4, BASEPRI
    bce0:	f382 8812 	msr	BASEPRI_MAX, r2
    bce4:	f3bf 8f6f 	isb	sy
    bce8:	b96b      	cbnz	r3, bd06 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    bcea:	4b0c      	ldr	r3, [pc, #48]	; (bd1c <k_sched_unlock+0x48>)
    bcec:	689a      	ldr	r2, [r3, #8]
    bcee:	7bd3      	ldrb	r3, [r2, #15]
    bcf0:	3301      	adds	r3, #1
    bcf2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    bcf4:	2000      	movs	r0, #0
    bcf6:	f7ff fe07 	bl	b908 <update_cache>
	__asm__ volatile(
    bcfa:	f384 8811 	msr	BASEPRI, r4
    bcfe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bd02:	2301      	movs	r3, #1
    bd04:	e7f0      	b.n	bce8 <k_sched_unlock+0x14>
	__asm__ volatile(
    bd06:	f04f 0320 	mov.w	r3, #32
    bd0a:	f3ef 8011 	mrs	r0, BASEPRI
    bd0e:	f383 8812 	msr	BASEPRI_MAX, r3
    bd12:	f3bf 8f6f 	isb	sy
    bd16:	f004 f897 	bl	fe48 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    bd1a:	bd10      	pop	{r4, pc}
    bd1c:	2001b630 	.word	0x2001b630

0000bd20 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    bd22:	7b43      	ldrb	r3, [r0, #13]
    bd24:	f013 0f08 	tst.w	r3, #8
    bd28:	d145      	bne.n	bdb6 <end_thread+0x96>
    bd2a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    bd2c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    bd30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    bd34:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    bd36:	f013 0f80 	tst.w	r3, #128	; 0x80
    bd3a:	d114      	bne.n	bd66 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    bd3c:	68ab      	ldr	r3, [r5, #8]
    bd3e:	b15b      	cbz	r3, bd58 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bd40:	4628      	mov	r0, r5
    bd42:	f004 f875 	bl	fe30 <pended_on_thread>
    bd46:	4629      	mov	r1, r5
    bd48:	f004 f893 	bl	fe72 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    bd4c:	7b6b      	ldrb	r3, [r5, #13]
    bd4e:	f023 0302 	bic.w	r3, r3, #2
    bd52:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    bd54:	2300      	movs	r3, #0
    bd56:	60ab      	str	r3, [r5, #8]
    bd58:	f105 0018 	add.w	r0, r5, #24
    bd5c:	f004 f975 	bl	1004a <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    bd60:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    bd64:	e01c      	b.n	bda0 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bd66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bd6a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    bd6c:	4601      	mov	r1, r0
    bd6e:	4812      	ldr	r0, [pc, #72]	; (bdb8 <end_thread+0x98>)
    bd70:	f004 f87f 	bl	fe72 <z_priq_dumb_remove>
}
    bd74:	e7e2      	b.n	bd3c <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bd76:	4620      	mov	r0, r4
    bd78:	f004 f85a 	bl	fe30 <pended_on_thread>
    bd7c:	4621      	mov	r1, r4
    bd7e:	f004 f878 	bl	fe72 <z_priq_dumb_remove>
    bd82:	7b63      	ldrb	r3, [r4, #13]
    bd84:	f023 0302 	bic.w	r3, r3, #2
    bd88:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    bd8a:	2600      	movs	r6, #0
    bd8c:	60a6      	str	r6, [r4, #8]
    bd8e:	f104 0018 	add.w	r0, r4, #24
    bd92:	f004 f95a 	bl	1004a <z_abort_timeout>
    bd96:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    bd9a:	4620      	mov	r0, r4
    bd9c:	f7ff fe6a 	bl	ba74 <ready_thread>
	return list->head == list;
    bda0:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bda2:	42bc      	cmp	r4, r7
    bda4:	d001      	beq.n	bdaa <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    bda6:	2c00      	cmp	r4, #0
    bda8:	d1e5      	bne.n	bd76 <end_thread+0x56>
		update_cache(1);
    bdaa:	2001      	movs	r0, #1
    bdac:	f7ff fdac 	bl	b908 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    bdb0:	4628      	mov	r0, r5
    bdb2:	f7ff fb05 	bl	b3c0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    bdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdb8:	2001b650 	.word	0x2001b650

0000bdbc <z_sched_init>:
{
    bdbc:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    bdbe:	4b05      	ldr	r3, [pc, #20]	; (bdd4 <z_sched_init+0x18>)
    bdc0:	f103 0220 	add.w	r2, r3, #32
    bdc4:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    bdc6:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    bdc8:	2100      	movs	r1, #0
    bdca:	4608      	mov	r0, r1
    bdcc:	f7ff fd2c 	bl	b828 <k_sched_time_slice_set>
}
    bdd0:	bd08      	pop	{r3, pc}
    bdd2:	bf00      	nop
    bdd4:	2001b630 	.word	0x2001b630

0000bdd8 <z_impl_k_yield>:
{
    bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdda:	f04f 0320 	mov.w	r3, #32
    bdde:	f3ef 8611 	mrs	r6, BASEPRI
    bde2:	f383 8812 	msr	BASEPRI_MAX, r3
    bde6:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    bdea:	4c1c      	ldr	r4, [pc, #112]	; (be5c <z_impl_k_yield+0x84>)
    bdec:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bdee:	7b4b      	ldrb	r3, [r1, #13]
    bdf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bdf4:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    bdf6:	f104 0720 	add.w	r7, r4, #32
    bdfa:	4638      	mov	r0, r7
    bdfc:	f004 f839 	bl	fe72 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    be00:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    be02:	7b6b      	ldrb	r3, [r5, #13]
    be04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    be08:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    be0a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be0c:	42bc      	cmp	r4, r7
    be0e:	d023      	beq.n	be58 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be10:	b16c      	cbz	r4, be2e <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    be12:	4621      	mov	r1, r4
    be14:	4628      	mov	r0, r5
    be16:	f004 f80d 	bl	fe34 <z_sched_prio_cmp>
    be1a:	2800      	cmp	r0, #0
    be1c:	dc16      	bgt.n	be4c <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    be1e:	b134      	cbz	r4, be2e <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    be20:	4b0e      	ldr	r3, [pc, #56]	; (be5c <z_impl_k_yield+0x84>)
    be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    be24:	429c      	cmp	r4, r3
    be26:	d002      	beq.n	be2e <z_impl_k_yield+0x56>
    be28:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be2a:	2c00      	cmp	r4, #0
    be2c:	d1f0      	bne.n	be10 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    be2e:	4b0b      	ldr	r3, [pc, #44]	; (be5c <z_impl_k_yield+0x84>)
    be30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    be32:	f103 0120 	add.w	r1, r3, #32
    be36:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    be38:	606a      	str	r2, [r5, #4]
	tail->next = node;
    be3a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    be3c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    be3e:	2001      	movs	r0, #1
    be40:	f7ff fd62 	bl	b908 <update_cache>
    be44:	4630      	mov	r0, r6
    be46:	f7f7 ff91 	bl	3d6c <arch_swap>
}
    be4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    be4c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    be4e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    be50:	602c      	str	r4, [r5, #0]
	prev->next = node;
    be52:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    be54:	6065      	str	r5, [r4, #4]
}
    be56:	e7f2      	b.n	be3e <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be58:	2400      	movs	r4, #0
    be5a:	e7d9      	b.n	be10 <z_impl_k_yield+0x38>
    be5c:	2001b630 	.word	0x2001b630

0000be60 <z_tick_sleep>:
{
    be60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be64:	4604      	mov	r4, r0
    be66:	460d      	mov	r5, r1
	if (ticks == 0) {
    be68:	ea54 0105 	orrs.w	r1, r4, r5
    be6c:	d037      	beq.n	bede <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    be6e:	f06f 0101 	mvn.w	r1, #1
    be72:	1a0a      	subs	r2, r1, r0
    be74:	f04f 31ff 	mov.w	r1, #4294967295
    be78:	eb61 0305 	sbc.w	r3, r1, r5
    be7c:	2a01      	cmp	r2, #1
    be7e:	f173 0300 	sbcs.w	r3, r3, #0
    be82:	db30      	blt.n	bee6 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    be84:	f06f 0601 	mvn.w	r6, #1
    be88:	1a36      	subs	r6, r6, r0
    be8a:	f04f 0320 	mov.w	r3, #32
    be8e:	f3ef 8811 	mrs	r8, BASEPRI
    be92:	f383 8812 	msr	BASEPRI_MAX, r3
    be96:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    be9a:	4f16      	ldr	r7, [pc, #88]	; (bef4 <z_tick_sleep+0x94>)
    be9c:	68b8      	ldr	r0, [r7, #8]
    be9e:	4b16      	ldr	r3, [pc, #88]	; (bef8 <z_tick_sleep+0x98>)
    bea0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    bea2:	f7ff fe45 	bl	bb30 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    bea6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bea8:	4622      	mov	r2, r4
    beaa:	462b      	mov	r3, r5
    beac:	4913      	ldr	r1, [pc, #76]	; (befc <z_tick_sleep+0x9c>)
    beae:	3018      	adds	r0, #24
    beb0:	f000 f8e2 	bl	c078 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    beb4:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    beb6:	7b53      	ldrb	r3, [r2, #13]
    beb8:	f043 0310 	orr.w	r3, r3, #16
    bebc:	7353      	strb	r3, [r2, #13]
    bebe:	4640      	mov	r0, r8
    bec0:	f7f7 ff54 	bl	3d6c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    bec4:	2500      	movs	r5, #0
    bec6:	f004 f91f 	bl	10108 <sys_clock_tick_get_32>
    beca:	1a34      	subs	r4, r6, r0
    becc:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    bed0:	2c01      	cmp	r4, #1
    bed2:	f175 0300 	sbcs.w	r3, r5, #0
    bed6:	da0a      	bge.n	beee <z_tick_sleep+0x8e>
	return 0;
    bed8:	2000      	movs	r0, #0
}
    beda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    bede:	f7ff ff7b 	bl	bdd8 <z_impl_k_yield>
		return 0;
    bee2:	2000      	movs	r0, #0
    bee4:	e7f9      	b.n	beda <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    bee6:	f004 f90f 	bl	10108 <sys_clock_tick_get_32>
    beea:	1906      	adds	r6, r0, r4
    beec:	e7cd      	b.n	be8a <z_tick_sleep+0x2a>
		return ticks;
    beee:	4620      	mov	r0, r4
    bef0:	e7f3      	b.n	beda <z_tick_sleep+0x7a>
    bef2:	bf00      	nop
    bef4:	2001b630 	.word	0x2001b630
    bef8:	2001b664 	.word	0x2001b664
    befc:	0000fec9 	.word	0x0000fec9

0000bf00 <z_impl_k_sleep>:
{
    bf00:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bf02:	f1b1 3fff 	cmp.w	r1, #4294967295
    bf06:	bf08      	it	eq
    bf08:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    bf0c:	d01a      	beq.n	bf44 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    bf0e:	f7ff ffa7 	bl	be60 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    bf12:	4604      	mov	r4, r0
    bf14:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    bf16:	0169      	lsls	r1, r5, #5
    bf18:	0143      	lsls	r3, r0, #5
    bf1a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    bf1e:	1a18      	subs	r0, r3, r0
    bf20:	eb62 0305 	sbc.w	r3, r2, r5
    bf24:	009a      	lsls	r2, r3, #2
    bf26:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    bf2a:	0081      	lsls	r1, r0, #2
    bf2c:	4613      	mov	r3, r2
    bf2e:	1908      	adds	r0, r1, r4
    bf30:	eb45 0303 	adc.w	r3, r5, r3
    bf34:	00da      	lsls	r2, r3, #3
    bf36:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    bf3a:	00c1      	lsls	r1, r0, #3
    bf3c:	0bc8      	lsrs	r0, r1, #15
    bf3e:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    bf42:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    bf44:	4b03      	ldr	r3, [pc, #12]	; (bf54 <z_impl_k_sleep+0x54>)
    bf46:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    bf48:	f7ff fe82 	bl	bc50 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    bf4c:	f04f 30ff 	mov.w	r0, #4294967295
    bf50:	e7f7      	b.n	bf42 <z_impl_k_sleep+0x42>
    bf52:	bf00      	nop
    bf54:	2001b630 	.word	0x2001b630

0000bf58 <z_impl_z_current_get>:
}
    bf58:	4b01      	ldr	r3, [pc, #4]	; (bf60 <z_impl_z_current_get+0x8>)
    bf5a:	6898      	ldr	r0, [r3, #8]
    bf5c:	4770      	bx	lr
    bf5e:	bf00      	nop
    bf60:	2001b630 	.word	0x2001b630

0000bf64 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    bf64:	b538      	push	{r3, r4, r5, lr}
    bf66:	f04f 0320 	mov.w	r3, #32
    bf6a:	f3ef 8511 	mrs	r5, BASEPRI
    bf6e:	f383 8812 	msr	BASEPRI_MAX, r3
    bf72:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    bf76:	7b43      	ldrb	r3, [r0, #13]
    bf78:	f013 0f08 	tst.w	r3, #8
    bf7c:	d004      	beq.n	bf88 <z_thread_abort+0x24>
	__asm__ volatile(
    bf7e:	f385 8811 	msr	BASEPRI, r5
    bf82:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    bf86:	bd38      	pop	{r3, r4, r5, pc}
    bf88:	4604      	mov	r4, r0
	end_thread(thread);
    bf8a:	f7ff fec9 	bl	bd20 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    bf8e:	4b08      	ldr	r3, [pc, #32]	; (bfb0 <z_thread_abort+0x4c>)
    bf90:	689b      	ldr	r3, [r3, #8]
    bf92:	42a3      	cmp	r3, r4
    bf94:	d004      	beq.n	bfa0 <z_thread_abort+0x3c>
    bf96:	f385 8811 	msr	BASEPRI, r5
    bf9a:	f3bf 8f6f 	isb	sy
    bf9e:	e7f2      	b.n	bf86 <z_thread_abort+0x22>
    bfa0:	f3ef 8305 	mrs	r3, IPSR
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d1f6      	bne.n	bf96 <z_thread_abort+0x32>
    bfa8:	4628      	mov	r0, r5
    bfaa:	f7f7 fedf 	bl	3d6c <arch_swap>
	return ret;
    bfae:	e7f2      	b.n	bf96 <z_thread_abort+0x32>
    bfb0:	2001b630 	.word	0x2001b630

0000bfb4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    bfb4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    bfb6:	4806      	ldr	r0, [pc, #24]	; (bfd0 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bfb8:	4a06      	ldr	r2, [pc, #24]	; (bfd4 <z_data_copy+0x20>)
    bfba:	1a12      	subs	r2, r2, r0
    bfbc:	4906      	ldr	r1, [pc, #24]	; (bfd8 <z_data_copy+0x24>)
    bfbe:	f004 f8ea 	bl	10196 <memcpy>
    bfc2:	4a06      	ldr	r2, [pc, #24]	; (bfdc <z_data_copy+0x28>)
    bfc4:	4906      	ldr	r1, [pc, #24]	; (bfe0 <z_data_copy+0x2c>)
    bfc6:	4807      	ldr	r0, [pc, #28]	; (bfe4 <z_data_copy+0x30>)
    bfc8:	f004 f8e5 	bl	10196 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    bfcc:	bd08      	pop	{r3, pc}
    bfce:	bf00      	nop
    bfd0:	20000000 	.word	0x20000000
    bfd4:	20000340 	.word	0x20000340
    bfd8:	00057bf8 	.word	0x00057bf8
    bfdc:	00000000 	.word	0x00000000
    bfe0:	00057bf8 	.word	0x00057bf8
    bfe4:	20000000 	.word	0x20000000

0000bfe8 <first>:
	return list->head == list;
    bfe8:	4b03      	ldr	r3, [pc, #12]	; (bff8 <first+0x10>)
    bfea:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bfec:	4298      	cmp	r0, r3
    bfee:	d000      	beq.n	bff2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    bff0:	4770      	bx	lr
    bff2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    bff4:	e7fc      	b.n	bff0 <first+0x8>
    bff6:	bf00      	nop
    bff8:	20000068 	.word	0x20000068

0000bffc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bffc:	b130      	cbz	r0, c00c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    bffe:	4a04      	ldr	r2, [pc, #16]	; (c010 <next+0x14>)
    c000:	6852      	ldr	r2, [r2, #4]
    c002:	4290      	cmp	r0, r2
    c004:	d001      	beq.n	c00a <next+0xe>
    c006:	6800      	ldr	r0, [r0, #0]
    c008:	4770      	bx	lr
    c00a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    c00c:	4770      	bx	lr
    c00e:	bf00      	nop
    c010:	20000068 	.word	0x20000068

0000c014 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    c014:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c016:	4b04      	ldr	r3, [pc, #16]	; (c028 <elapsed+0x14>)
    c018:	681b      	ldr	r3, [r3, #0]
    c01a:	b10b      	cbz	r3, c020 <elapsed+0xc>
    c01c:	2000      	movs	r0, #0
}
    c01e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c020:	f7f9 fbc8 	bl	57b4 <sys_clock_elapsed>
    c024:	e7fb      	b.n	c01e <elapsed+0xa>
    c026:	bf00      	nop
    c028:	2001b674 	.word	0x2001b674

0000c02c <next_timeout>:

static int32_t next_timeout(void)
{
    c02c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    c02e:	f7ff ffdb 	bl	bfe8 <first>
    c032:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    c034:	f7ff ffee 	bl	c014 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    c038:	b18c      	cbz	r4, c05e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    c03a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    c03e:	1a12      	subs	r2, r2, r0
    c040:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    c044:	2a01      	cmp	r2, #1
    c046:	f173 0100 	sbcs.w	r1, r3, #0
    c04a:	db11      	blt.n	c070 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    c04c:	4610      	mov	r0, r2
    c04e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c052:	f173 0300 	sbcs.w	r3, r3, #0
    c056:	db04      	blt.n	c062 <next_timeout+0x36>
    c058:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c05c:	e001      	b.n	c062 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    c05e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    c062:	4b04      	ldr	r3, [pc, #16]	; (c074 <next_timeout+0x48>)
    c064:	691b      	ldr	r3, [r3, #16]
    c066:	b113      	cbz	r3, c06e <next_timeout+0x42>
    c068:	4283      	cmp	r3, r0
    c06a:	da00      	bge.n	c06e <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    c06c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    c06e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    c070:	2000      	movs	r0, #0
    c072:	e7f6      	b.n	c062 <next_timeout+0x36>
    c074:	2001b630 	.word	0x2001b630

0000c078 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c07c:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c07e:	f1b3 3fff 	cmp.w	r3, #4294967295
    c082:	bf08      	it	eq
    c084:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    c088:	f000 8096 	beq.w	c1b8 <z_add_timeout+0x140>
    c08c:	4682      	mov	sl, r0
    c08e:	4614      	mov	r4, r2
    c090:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    c092:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    c094:	2300      	movs	r3, #0
	__asm__ volatile(
    c096:	f04f 0220 	mov.w	r2, #32
    c09a:	f3ef 8b11 	mrs	fp, BASEPRI
    c09e:	f382 8812 	msr	BASEPRI_MAX, r2
    c0a2:	f3bf 8f6f 	isb	sy
    c0a6:	e02e      	b.n	c106 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    c0a8:	2201      	movs	r2, #1
    c0aa:	2300      	movs	r3, #0
    c0ac:	e04b      	b.n	c146 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    c0ae:	f7ff ffb1 	bl	c014 <elapsed>
    c0b2:	1822      	adds	r2, r4, r0
    c0b4:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    c0b8:	3201      	adds	r2, #1
    c0ba:	f143 0300 	adc.w	r3, r3, #0
    c0be:	f8ca 2010 	str.w	r2, [sl, #16]
    c0c2:	f8ca 3014 	str.w	r3, [sl, #20]
    c0c6:	e042      	b.n	c14e <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    c0c8:	9b00      	ldr	r3, [sp, #0]
    c0ca:	1ac2      	subs	r2, r0, r3
    c0cc:	9b01      	ldr	r3, [sp, #4]
    c0ce:	eb61 0303 	sbc.w	r3, r1, r3
    c0d2:	f8cc 2010 	str.w	r2, [ip, #16]
    c0d6:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    c0da:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    c0de:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    c0e2:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    c0e6:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    c0ea:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    c0ee:	f1bc 0f00 	cmp.w	ip, #0
    c0f2:	d049      	beq.n	c188 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c0f4:	f7ff ff78 	bl	bfe8 <first>
    c0f8:	4582      	cmp	sl, r0
    c0fa:	d050      	beq.n	c19e <z_add_timeout+0x126>
	__asm__ volatile(
    c0fc:	f38b 8811 	msr	BASEPRI, fp
    c100:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c104:	2301      	movs	r3, #1
    c106:	2b00      	cmp	r3, #0
    c108:	d156      	bne.n	c1b8 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    c10a:	f06f 0301 	mvn.w	r3, #1
    c10e:	ebb3 0804 	subs.w	r8, r3, r4
    c112:	f04f 30ff 	mov.w	r0, #4294967295
    c116:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c11a:	f1b8 0f00 	cmp.w	r8, #0
    c11e:	f179 0300 	sbcs.w	r3, r9, #0
    c122:	dbc4      	blt.n	c0ae <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c124:	4a26      	ldr	r2, [pc, #152]	; (c1c0 <z_add_timeout+0x148>)
    c126:	6813      	ldr	r3, [r2, #0]
    c128:	6852      	ldr	r2, [r2, #4]
    c12a:	18e3      	adds	r3, r4, r3
    c12c:	eb45 0202 	adc.w	r2, r5, r2
    c130:	f06f 0101 	mvn.w	r1, #1
    c134:	1ace      	subs	r6, r1, r3
    c136:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    c13a:	4632      	mov	r2, r6
    c13c:	463b      	mov	r3, r7
    c13e:	2e01      	cmp	r6, #1
    c140:	f177 0100 	sbcs.w	r1, r7, #0
    c144:	dbb0      	blt.n	c0a8 <z_add_timeout+0x30>
    c146:	f8ca 2010 	str.w	r2, [sl, #16]
    c14a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    c14e:	f7ff ff4b 	bl	bfe8 <first>
    c152:	4684      	mov	ip, r0
    c154:	f1bc 0f00 	cmp.w	ip, #0
    c158:	d0c9      	beq.n	c0ee <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    c15a:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    c15e:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    c162:	e9cd 2300 	strd	r2, r3, [sp]
    c166:	4282      	cmp	r2, r0
    c168:	418b      	sbcs	r3, r1
    c16a:	dbad      	blt.n	c0c8 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    c16c:	9b00      	ldr	r3, [sp, #0]
    c16e:	1a1a      	subs	r2, r3, r0
    c170:	9b01      	ldr	r3, [sp, #4]
    c172:	eb63 0301 	sbc.w	r3, r3, r1
    c176:	f8ca 2010 	str.w	r2, [sl, #16]
    c17a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    c17e:	4660      	mov	r0, ip
    c180:	f7ff ff3c 	bl	bffc <next>
    c184:	4684      	mov	ip, r0
    c186:	e7e5      	b.n	c154 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    c188:	4b0e      	ldr	r3, [pc, #56]	; (c1c4 <z_add_timeout+0x14c>)
    c18a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    c18c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    c190:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    c194:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    c198:	f8c3 a004 	str.w	sl, [r3, #4]
}
    c19c:	e7aa      	b.n	c0f4 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    c19e:	f7ff ff45 	bl	c02c <next_timeout>

			if (next_time == 0 ||
    c1a2:	4603      	mov	r3, r0
    c1a4:	b118      	cbz	r0, c1ae <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    c1a6:	4a08      	ldr	r2, [pc, #32]	; (c1c8 <z_add_timeout+0x150>)
    c1a8:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    c1aa:	4282      	cmp	r2, r0
    c1ac:	d0a6      	beq.n	c0fc <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    c1ae:	2100      	movs	r1, #0
    c1b0:	4618      	mov	r0, r3
    c1b2:	f7f9 facb 	bl	574c <sys_clock_set_timeout>
    c1b6:	e7a1      	b.n	c0fc <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    c1b8:	b003      	add	sp, #12
    c1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1be:	bf00      	nop
    c1c0:	200004c0 	.word	0x200004c0
    c1c4:	20000068 	.word	0x20000068
    c1c8:	2001b630 	.word	0x2001b630

0000c1cc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1ce:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    c1d0:	f7ff fc04 	bl	b9dc <z_time_slice>
	__asm__ volatile(
    c1d4:	f04f 0320 	mov.w	r3, #32
    c1d8:	f3ef 8511 	mrs	r5, BASEPRI
    c1dc:	f383 8812 	msr	BASEPRI_MAX, r3
    c1e0:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    c1e4:	4b28      	ldr	r3, [pc, #160]	; (c288 <sys_clock_announce+0xbc>)
    c1e6:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    c1e8:	f7ff fefe 	bl	bfe8 <first>
    c1ec:	4604      	mov	r4, r0
    c1ee:	b350      	cbz	r0, c246 <sys_clock_announce+0x7a>
    c1f0:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    c1f4:	4b24      	ldr	r3, [pc, #144]	; (c288 <sys_clock_announce+0xbc>)
    c1f6:	681b      	ldr	r3, [r3, #0]
    c1f8:	17d9      	asrs	r1, r3, #31
    c1fa:	42b3      	cmp	r3, r6
    c1fc:	eb71 0207 	sbcs.w	r2, r1, r7
    c200:	db21      	blt.n	c246 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    c202:	4a22      	ldr	r2, [pc, #136]	; (c28c <sys_clock_announce+0xc0>)
    c204:	e9d2 0100 	ldrd	r0, r1, [r2]
    c208:	1980      	adds	r0, r0, r6
    c20a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    c20e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    c212:	1b9b      	subs	r3, r3, r6
    c214:	4a1c      	ldr	r2, [pc, #112]	; (c288 <sys_clock_announce+0xbc>)
    c216:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    c218:	2200      	movs	r2, #0
    c21a:	2300      	movs	r3, #0
    c21c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    c220:	4620      	mov	r0, r4
    c222:	f003 fefb 	bl	1001c <remove_timeout>
	__asm__ volatile(
    c226:	f385 8811 	msr	BASEPRI, r5
    c22a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    c22e:	68a3      	ldr	r3, [r4, #8]
    c230:	4620      	mov	r0, r4
    c232:	4798      	blx	r3
	__asm__ volatile(
    c234:	f04f 0320 	mov.w	r3, #32
    c238:	f3ef 8511 	mrs	r5, BASEPRI
    c23c:	f383 8812 	msr	BASEPRI_MAX, r3
    c240:	f3bf 8f6f 	isb	sy
    c244:	e7d0      	b.n	c1e8 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    c246:	b144      	cbz	r4, c25a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    c248:	4b0f      	ldr	r3, [pc, #60]	; (c288 <sys_clock_announce+0xbc>)
    c24a:	6819      	ldr	r1, [r3, #0]
    c24c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    c250:	1a52      	subs	r2, r2, r1
    c252:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    c256:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    c25a:	480c      	ldr	r0, [pc, #48]	; (c28c <sys_clock_announce+0xc0>)
    c25c:	490a      	ldr	r1, [pc, #40]	; (c288 <sys_clock_announce+0xbc>)
    c25e:	680c      	ldr	r4, [r1, #0]
    c260:	e9d0 2300 	ldrd	r2, r3, [r0]
    c264:	1912      	adds	r2, r2, r4
    c266:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    c26a:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    c26e:	2400      	movs	r4, #0
    c270:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    c272:	f7ff fedb 	bl	c02c <next_timeout>
    c276:	4621      	mov	r1, r4
    c278:	f7f9 fa68 	bl	574c <sys_clock_set_timeout>
	__asm__ volatile(
    c27c:	f385 8811 	msr	BASEPRI, r5
    c280:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    c284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c286:	bf00      	nop
    c288:	2001b674 	.word	0x2001b674
    c28c:	200004c0 	.word	0x200004c0

0000c290 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    c290:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    c292:	2100      	movs	r1, #0
	__asm__ volatile(
    c294:	f04f 0320 	mov.w	r3, #32
    c298:	f3ef 8411 	mrs	r4, BASEPRI
    c29c:	f383 8812 	msr	BASEPRI_MAX, r3
    c2a0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    c2a4:	2200      	movs	r2, #0
    c2a6:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    c2a8:	b969      	cbnz	r1, c2c6 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    c2aa:	f7f9 fa83 	bl	57b4 <sys_clock_elapsed>
    c2ae:	4b07      	ldr	r3, [pc, #28]	; (c2cc <sys_clock_tick_get+0x3c>)
    c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c2b4:	1812      	adds	r2, r2, r0
    c2b6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    c2ba:	f384 8811 	msr	BASEPRI, r4
    c2be:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c2c2:	2101      	movs	r1, #1
    c2c4:	e7f0      	b.n	c2a8 <sys_clock_tick_get+0x18>
	}
	return t;
}
    c2c6:	4610      	mov	r0, r2
    c2c8:	4619      	mov	r1, r3
    c2ca:	bd10      	pop	{r4, pc}
    c2cc:	200004c0 	.word	0x200004c0

0000c2d0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    c2d0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    c2d2:	4a03      	ldr	r2, [pc, #12]	; (c2e0 <boot_banner+0x10>)
    c2d4:	4903      	ldr	r1, [pc, #12]	; (c2e4 <boot_banner+0x14>)
    c2d6:	4804      	ldr	r0, [pc, #16]	; (c2e8 <boot_banner+0x18>)
    c2d8:	f001 fcda 	bl	dc90 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    c2dc:	bd08      	pop	{r3, pc}
    c2de:	bf00      	nop
    c2e0:	000113e0 	.word	0x000113e0
    c2e4:	0005791c 	.word	0x0005791c
    c2e8:	00057938 	.word	0x00057938

0000c2ec <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    c2ec:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c2ee:	4c06      	ldr	r4, [pc, #24]	; (c308 <statics_init+0x1c>)
    c2f0:	4b06      	ldr	r3, [pc, #24]	; (c30c <statics_init+0x20>)
    c2f2:	429c      	cmp	r4, r3
    c2f4:	d206      	bcs.n	c304 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    c2f6:	68a2      	ldr	r2, [r4, #8]
    c2f8:	6861      	ldr	r1, [r4, #4]
    c2fa:	4620      	mov	r0, r4
    c2fc:	f003 ff12 	bl	10124 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c300:	3418      	adds	r4, #24
    c302:	e7f5      	b.n	c2f0 <statics_init+0x4>
		}
	}
	return 0;
}
    c304:	2000      	movs	r0, #0
    c306:	bd10      	pop	{r4, pc}
    c308:	200002b4 	.word	0x200002b4
    c30c:	200002b4 	.word	0x200002b4

0000c310 <nrf_cc3xx_platform_init_no_rng>:
    c310:	b510      	push	{r4, lr}
    c312:	4c0a      	ldr	r4, [pc, #40]	; (c33c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    c314:	6823      	ldr	r3, [r4, #0]
    c316:	b11b      	cbz	r3, c320 <nrf_cc3xx_platform_init_no_rng+0x10>
    c318:	2301      	movs	r3, #1
    c31a:	2000      	movs	r0, #0
    c31c:	6023      	str	r3, [r4, #0]
    c31e:	bd10      	pop	{r4, pc}
    c320:	f000 f8d4 	bl	c4cc <CC_LibInitNoRng>
    c324:	2800      	cmp	r0, #0
    c326:	d0f7      	beq.n	c318 <nrf_cc3xx_platform_init_no_rng+0x8>
    c328:	3801      	subs	r0, #1
    c32a:	2807      	cmp	r0, #7
    c32c:	d803      	bhi.n	c336 <nrf_cc3xx_platform_init_no_rng+0x26>
    c32e:	4b04      	ldr	r3, [pc, #16]	; (c340 <nrf_cc3xx_platform_init_no_rng+0x30>)
    c330:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    c334:	bd10      	pop	{r4, pc}
    c336:	4803      	ldr	r0, [pc, #12]	; (c344 <nrf_cc3xx_platform_init_no_rng+0x34>)
    c338:	bd10      	pop	{r4, pc}
    c33a:	bf00      	nop
    c33c:	2001b678 	.word	0x2001b678
    c340:	00057960 	.word	0x00057960
    c344:	ffff8ffe 	.word	0xffff8ffe

0000c348 <nrf_cc3xx_platform_abort>:
    c348:	f3bf 8f4f 	dsb	sy
    c34c:	4905      	ldr	r1, [pc, #20]	; (c364 <nrf_cc3xx_platform_abort+0x1c>)
    c34e:	4b06      	ldr	r3, [pc, #24]	; (c368 <nrf_cc3xx_platform_abort+0x20>)
    c350:	68ca      	ldr	r2, [r1, #12]
    c352:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c356:	4313      	orrs	r3, r2
    c358:	60cb      	str	r3, [r1, #12]
    c35a:	f3bf 8f4f 	dsb	sy
    c35e:	bf00      	nop
    c360:	e7fd      	b.n	c35e <nrf_cc3xx_platform_abort+0x16>
    c362:	bf00      	nop
    c364:	e000ed00 	.word	0xe000ed00
    c368:	05fa0004 	.word	0x05fa0004

0000c36c <CC_PalAbort>:
    c36c:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    c370:	2100      	movs	r1, #0
    c372:	b430      	push	{r4, r5}
    c374:	4a08      	ldr	r2, [pc, #32]	; (c398 <CC_PalAbort+0x2c>)
    c376:	4c09      	ldr	r4, [pc, #36]	; (c39c <CC_PalAbort+0x30>)
    c378:	4d09      	ldr	r5, [pc, #36]	; (c3a0 <CC_PalAbort+0x34>)
    c37a:	6023      	str	r3, [r4, #0]
    c37c:	602b      	str	r3, [r5, #0]
    c37e:	6013      	str	r3, [r2, #0]
    c380:	60e3      	str	r3, [r4, #12]
    c382:	60eb      	str	r3, [r5, #12]
    c384:	60d3      	str	r3, [r2, #12]
    c386:	61a3      	str	r3, [r4, #24]
    c388:	4a06      	ldr	r2, [pc, #24]	; (c3a4 <CC_PalAbort+0x38>)
    c38a:	4c07      	ldr	r4, [pc, #28]	; (c3a8 <CC_PalAbort+0x3c>)
    c38c:	61ab      	str	r3, [r5, #24]
    c38e:	6863      	ldr	r3, [r4, #4]
    c390:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    c394:	bc30      	pop	{r4, r5}
    c396:	4718      	bx	r3
    c398:	50845408 	.word	0x50845408
    c39c:	50845400 	.word	0x50845400
    c3a0:	50845404 	.word	0x50845404
    c3a4:	50844000 	.word	0x50844000
    c3a8:	20000070 	.word	0x20000070

0000c3ac <nrf_cc3xx_platform_set_abort>:
    c3ac:	4b02      	ldr	r3, [pc, #8]	; (c3b8 <nrf_cc3xx_platform_set_abort+0xc>)
    c3ae:	e9d0 1200 	ldrd	r1, r2, [r0]
    c3b2:	e9c3 1200 	strd	r1, r2, [r3]
    c3b6:	4770      	bx	lr
    c3b8:	20000070 	.word	0x20000070

0000c3bc <mutex_free>:
    c3bc:	b510      	push	{r4, lr}
    c3be:	4604      	mov	r4, r0
    c3c0:	b130      	cbz	r0, c3d0 <mutex_free+0x14>
    c3c2:	6863      	ldr	r3, [r4, #4]
    c3c4:	06db      	lsls	r3, r3, #27
    c3c6:	d502      	bpl.n	c3ce <mutex_free+0x12>
    c3c8:	2300      	movs	r3, #0
    c3ca:	6023      	str	r3, [r4, #0]
    c3cc:	6063      	str	r3, [r4, #4]
    c3ce:	bd10      	pop	{r4, pc}
    c3d0:	4b02      	ldr	r3, [pc, #8]	; (c3dc <mutex_free+0x20>)
    c3d2:	4803      	ldr	r0, [pc, #12]	; (c3e0 <mutex_free+0x24>)
    c3d4:	685b      	ldr	r3, [r3, #4]
    c3d6:	4798      	blx	r3
    c3d8:	e7f3      	b.n	c3c2 <mutex_free+0x6>
    c3da:	bf00      	nop
    c3dc:	20000070 	.word	0x20000070
    c3e0:	00057980 	.word	0x00057980

0000c3e4 <mutex_unlock>:
    c3e4:	b168      	cbz	r0, c402 <mutex_unlock+0x1e>
    c3e6:	6843      	ldr	r3, [r0, #4]
    c3e8:	b13b      	cbz	r3, c3fa <mutex_unlock+0x16>
    c3ea:	06db      	lsls	r3, r3, #27
    c3ec:	d507      	bpl.n	c3fe <mutex_unlock+0x1a>
    c3ee:	f3bf 8f5f 	dmb	sy
    c3f2:	2300      	movs	r3, #0
    c3f4:	6003      	str	r3, [r0, #0]
    c3f6:	4618      	mov	r0, r3
    c3f8:	4770      	bx	lr
    c3fa:	4803      	ldr	r0, [pc, #12]	; (c408 <mutex_unlock+0x24>)
    c3fc:	4770      	bx	lr
    c3fe:	4803      	ldr	r0, [pc, #12]	; (c40c <mutex_unlock+0x28>)
    c400:	4770      	bx	lr
    c402:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c406:	4770      	bx	lr
    c408:	ffff8fea 	.word	0xffff8fea
    c40c:	ffff8fe9 	.word	0xffff8fe9

0000c410 <mutex_init>:
    c410:	b510      	push	{r4, lr}
    c412:	4604      	mov	r4, r0
    c414:	b120      	cbz	r0, c420 <mutex_init+0x10>
    c416:	2200      	movs	r2, #0
    c418:	2311      	movs	r3, #17
    c41a:	6022      	str	r2, [r4, #0]
    c41c:	6063      	str	r3, [r4, #4]
    c41e:	bd10      	pop	{r4, pc}
    c420:	4801      	ldr	r0, [pc, #4]	; (c428 <mutex_init+0x18>)
    c422:	f7ff ffa3 	bl	c36c <CC_PalAbort>
    c426:	e7f6      	b.n	c416 <mutex_init+0x6>
    c428:	000579a8 	.word	0x000579a8

0000c42c <mutex_lock>:
    c42c:	b1a0      	cbz	r0, c458 <mutex_lock+0x2c>
    c42e:	6843      	ldr	r3, [r0, #4]
    c430:	b183      	cbz	r3, c454 <mutex_lock+0x28>
    c432:	06db      	lsls	r3, r3, #27
    c434:	d50c      	bpl.n	c450 <mutex_lock+0x24>
    c436:	2201      	movs	r2, #1
    c438:	e8d0 3fef 	ldaex	r3, [r0]
    c43c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    c440:	2900      	cmp	r1, #0
    c442:	d1f9      	bne.n	c438 <mutex_lock+0xc>
    c444:	2b01      	cmp	r3, #1
    c446:	d0f7      	beq.n	c438 <mutex_lock+0xc>
    c448:	f3bf 8f5f 	dmb	sy
    c44c:	2000      	movs	r0, #0
    c44e:	4770      	bx	lr
    c450:	4803      	ldr	r0, [pc, #12]	; (c460 <mutex_lock+0x34>)
    c452:	4770      	bx	lr
    c454:	4803      	ldr	r0, [pc, #12]	; (c464 <mutex_lock+0x38>)
    c456:	4770      	bx	lr
    c458:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c45c:	4770      	bx	lr
    c45e:	bf00      	nop
    c460:	ffff8fe9 	.word	0xffff8fe9
    c464:	ffff8fea 	.word	0xffff8fea

0000c468 <nrf_cc3xx_platform_set_mutexes>:
    c468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c46c:	4c14      	ldr	r4, [pc, #80]	; (c4c0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    c46e:	6802      	ldr	r2, [r0, #0]
    c470:	68c3      	ldr	r3, [r0, #12]
    c472:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    c476:	e9c4 6302 	strd	r6, r3, [r4, #8]
    c47a:	e9c4 2500 	strd	r2, r5, [r4]
    c47e:	4b11      	ldr	r3, [pc, #68]	; (c4c4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    c480:	680e      	ldr	r6, [r1, #0]
    c482:	6848      	ldr	r0, [r1, #4]
    c484:	4d10      	ldr	r5, [pc, #64]	; (c4c8 <nrf_cc3xx_platform_set_mutexes+0x60>)
    c486:	e9c3 6000 	strd	r6, r0, [r3]
    c48a:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    c48e:	6908      	ldr	r0, [r1, #16]
    c490:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    c494:	e9c3 7602 	strd	r7, r6, [r3, #8]
    c498:	6118      	str	r0, [r3, #16]
    c49a:	06cb      	lsls	r3, r1, #27
    c49c:	d50d      	bpl.n	c4ba <nrf_cc3xx_platform_set_mutexes+0x52>
    c49e:	2300      	movs	r3, #0
    c4a0:	f505 7088 	add.w	r0, r5, #272	; 0x110
    c4a4:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    c4a8:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    c4ac:	4790      	blx	r2
    c4ae:	6823      	ldr	r3, [r4, #0]
    c4b0:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    c4b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c4b8:	4718      	bx	r3
    c4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4be:	bf00      	nop
    c4c0:	20000080 	.word	0x20000080
    c4c4:	20000090 	.word	0x20000090
    c4c8:	2001b6a0 	.word	0x2001b6a0

0000c4cc <CC_LibInitNoRng>:
    c4cc:	b508      	push	{r3, lr}
    c4ce:	f000 f80f 	bl	c4f0 <CC_HalInit>
    c4d2:	b928      	cbnz	r0, c4e0 <CC_LibInitNoRng+0x14>
    c4d4:	f000 f80e 	bl	c4f4 <CC_PalInit>
    c4d8:	b930      	cbnz	r0, c4e8 <CC_LibInitNoRng+0x1c>
    c4da:	4a04      	ldr	r2, [pc, #16]	; (c4ec <CC_LibInitNoRng+0x20>)
    c4dc:	6010      	str	r0, [r2, #0]
    c4de:	bd08      	pop	{r3, pc}
    c4e0:	f000 f836 	bl	c550 <CC_PalTerminate>
    c4e4:	2003      	movs	r0, #3
    c4e6:	bd08      	pop	{r3, pc}
    c4e8:	2004      	movs	r0, #4
    c4ea:	bd08      	pop	{r3, pc}
    c4ec:	50845a0c 	.word	0x50845a0c

0000c4f0 <CC_HalInit>:
    c4f0:	2000      	movs	r0, #0
    c4f2:	4770      	bx	lr

0000c4f4 <CC_PalInit>:
    c4f4:	b510      	push	{r4, lr}
    c4f6:	4811      	ldr	r0, [pc, #68]	; (c53c <CC_PalInit+0x48>)
    c4f8:	f000 f848 	bl	c58c <CC_PalMutexCreate>
    c4fc:	b100      	cbz	r0, c500 <CC_PalInit+0xc>
    c4fe:	bd10      	pop	{r4, pc}
    c500:	480f      	ldr	r0, [pc, #60]	; (c540 <CC_PalInit+0x4c>)
    c502:	f000 f843 	bl	c58c <CC_PalMutexCreate>
    c506:	2800      	cmp	r0, #0
    c508:	d1f9      	bne.n	c4fe <CC_PalInit+0xa>
    c50a:	4c0e      	ldr	r4, [pc, #56]	; (c544 <CC_PalInit+0x50>)
    c50c:	4620      	mov	r0, r4
    c50e:	f000 f83d 	bl	c58c <CC_PalMutexCreate>
    c512:	2800      	cmp	r0, #0
    c514:	d1f3      	bne.n	c4fe <CC_PalInit+0xa>
    c516:	4b0c      	ldr	r3, [pc, #48]	; (c548 <CC_PalInit+0x54>)
    c518:	480c      	ldr	r0, [pc, #48]	; (c54c <CC_PalInit+0x58>)
    c51a:	601c      	str	r4, [r3, #0]
    c51c:	f000 f836 	bl	c58c <CC_PalMutexCreate>
    c520:	4601      	mov	r1, r0
    c522:	2800      	cmp	r0, #0
    c524:	d1eb      	bne.n	c4fe <CC_PalInit+0xa>
    c526:	f000 f82d 	bl	c584 <CC_PalDmaInit>
    c52a:	4604      	mov	r4, r0
    c52c:	b108      	cbz	r0, c532 <CC_PalInit+0x3e>
    c52e:	4620      	mov	r0, r4
    c530:	bd10      	pop	{r4, pc}
    c532:	f000 f83f 	bl	c5b4 <CC_PalPowerSaveModeInit>
    c536:	4620      	mov	r0, r4
    c538:	e7fa      	b.n	c530 <CC_PalInit+0x3c>
    c53a:	bf00      	nop
    c53c:	200000c8 	.word	0x200000c8
    c540:	200000bc 	.word	0x200000bc
    c544:	200000c4 	.word	0x200000c4
    c548:	200000cc 	.word	0x200000cc
    c54c:	200000c0 	.word	0x200000c0

0000c550 <CC_PalTerminate>:
    c550:	b508      	push	{r3, lr}
    c552:	4808      	ldr	r0, [pc, #32]	; (c574 <CC_PalTerminate+0x24>)
    c554:	f000 f824 	bl	c5a0 <CC_PalMutexDestroy>
    c558:	4807      	ldr	r0, [pc, #28]	; (c578 <CC_PalTerminate+0x28>)
    c55a:	f000 f821 	bl	c5a0 <CC_PalMutexDestroy>
    c55e:	4807      	ldr	r0, [pc, #28]	; (c57c <CC_PalTerminate+0x2c>)
    c560:	f000 f81e 	bl	c5a0 <CC_PalMutexDestroy>
    c564:	4806      	ldr	r0, [pc, #24]	; (c580 <CC_PalTerminate+0x30>)
    c566:	f000 f81b 	bl	c5a0 <CC_PalMutexDestroy>
    c56a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c56e:	f000 b80b 	b.w	c588 <CC_PalDmaTerminate>
    c572:	bf00      	nop
    c574:	200000c8 	.word	0x200000c8
    c578:	200000bc 	.word	0x200000bc
    c57c:	200000c4 	.word	0x200000c4
    c580:	200000c0 	.word	0x200000c0

0000c584 <CC_PalDmaInit>:
    c584:	2000      	movs	r0, #0
    c586:	4770      	bx	lr

0000c588 <CC_PalDmaTerminate>:
    c588:	4770      	bx	lr
    c58a:	bf00      	nop

0000c58c <CC_PalMutexCreate>:
    c58c:	b508      	push	{r3, lr}
    c58e:	4b03      	ldr	r3, [pc, #12]	; (c59c <CC_PalMutexCreate+0x10>)
    c590:	6802      	ldr	r2, [r0, #0]
    c592:	681b      	ldr	r3, [r3, #0]
    c594:	6810      	ldr	r0, [r2, #0]
    c596:	4798      	blx	r3
    c598:	2000      	movs	r0, #0
    c59a:	bd08      	pop	{r3, pc}
    c59c:	20000080 	.word	0x20000080

0000c5a0 <CC_PalMutexDestroy>:
    c5a0:	b508      	push	{r3, lr}
    c5a2:	4b03      	ldr	r3, [pc, #12]	; (c5b0 <CC_PalMutexDestroy+0x10>)
    c5a4:	6802      	ldr	r2, [r0, #0]
    c5a6:	685b      	ldr	r3, [r3, #4]
    c5a8:	6810      	ldr	r0, [r2, #0]
    c5aa:	4798      	blx	r3
    c5ac:	2000      	movs	r0, #0
    c5ae:	bd08      	pop	{r3, pc}
    c5b0:	20000080 	.word	0x20000080

0000c5b4 <CC_PalPowerSaveModeInit>:
    c5b4:	b570      	push	{r4, r5, r6, lr}
    c5b6:	4c09      	ldr	r4, [pc, #36]	; (c5dc <CC_PalPowerSaveModeInit+0x28>)
    c5b8:	4d09      	ldr	r5, [pc, #36]	; (c5e0 <CC_PalPowerSaveModeInit+0x2c>)
    c5ba:	6920      	ldr	r0, [r4, #16]
    c5bc:	68ab      	ldr	r3, [r5, #8]
    c5be:	4798      	blx	r3
    c5c0:	b118      	cbz	r0, c5ca <CC_PalPowerSaveModeInit+0x16>
    c5c2:	4b08      	ldr	r3, [pc, #32]	; (c5e4 <CC_PalPowerSaveModeInit+0x30>)
    c5c4:	4808      	ldr	r0, [pc, #32]	; (c5e8 <CC_PalPowerSaveModeInit+0x34>)
    c5c6:	685b      	ldr	r3, [r3, #4]
    c5c8:	4798      	blx	r3
    c5ca:	2100      	movs	r1, #0
    c5cc:	4a07      	ldr	r2, [pc, #28]	; (c5ec <CC_PalPowerSaveModeInit+0x38>)
    c5ce:	68eb      	ldr	r3, [r5, #12]
    c5d0:	6011      	str	r1, [r2, #0]
    c5d2:	6920      	ldr	r0, [r4, #16]
    c5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c5d8:	4718      	bx	r3
    c5da:	bf00      	nop
    c5dc:	20000090 	.word	0x20000090
    c5e0:	20000080 	.word	0x20000080
    c5e4:	20000070 	.word	0x20000070
    c5e8:	000579cc 	.word	0x000579cc
    c5ec:	2001b68c 	.word	0x2001b68c

0000c5f0 <_ZSt15get_new_handlerv>:
    c5f0:	4b01      	ldr	r3, [pc, #4]	; (c5f8 <_ZSt15get_new_handlerv+0x8>)
    c5f2:	e8d3 0faf 	lda	r0, [r3]
    c5f6:	4770      	bx	lr
    c5f8:	2001b690 	.word	0x2001b690

0000c5fc <frexp>:
    c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5fe:	f8df c064 	ldr.w	ip, [pc, #100]	; c664 <frexp+0x68>
    c602:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    c606:	2700      	movs	r7, #0
    c608:	4604      	mov	r4, r0
    c60a:	4563      	cmp	r3, ip
    c60c:	460d      	mov	r5, r1
    c60e:	4616      	mov	r6, r2
    c610:	6017      	str	r7, [r2, #0]
    c612:	dc20      	bgt.n	c656 <frexp+0x5a>
    c614:	4684      	mov	ip, r0
    c616:	ea53 0c0c 	orrs.w	ip, r3, ip
    c61a:	d01c      	beq.n	c656 <frexp+0x5a>
    c61c:	f8df c048 	ldr.w	ip, [pc, #72]	; c668 <frexp+0x6c>
    c620:	460a      	mov	r2, r1
    c622:	ea01 0c0c 	and.w	ip, r1, ip
    c626:	f1bc 0f00 	cmp.w	ip, #0
    c62a:	d109      	bne.n	c640 <frexp+0x44>
    c62c:	2200      	movs	r2, #0
    c62e:	4b0b      	ldr	r3, [pc, #44]	; (c65c <frexp+0x60>)
    c630:	f7f3 ff4e 	bl	4d0 <__aeabi_dmul>
    c634:	f06f 0735 	mvn.w	r7, #53	; 0x35
    c638:	4604      	mov	r4, r0
    c63a:	460a      	mov	r2, r1
    c63c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    c640:	4907      	ldr	r1, [pc, #28]	; (c660 <frexp+0x64>)
    c642:	151b      	asrs	r3, r3, #20
    c644:	4011      	ands	r1, r2
    c646:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    c64a:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
    c64e:	443b      	add	r3, r7
    c650:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    c654:	6033      	str	r3, [r6, #0]
    c656:	4620      	mov	r0, r4
    c658:	4629      	mov	r1, r5
    c65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c65c:	43500000 	.word	0x43500000
    c660:	800fffff 	.word	0x800fffff
    c664:	7fefffff 	.word	0x7fefffff
    c668:	7ff00000 	.word	0x7ff00000

0000c66c <round>:
    c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c66e:	f3c1 570a 	ubfx	r7, r1, #20, #11
    c672:	460d      	mov	r5, r1
    c674:	460b      	mov	r3, r1
    c676:	4602      	mov	r2, r0
    c678:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
    c67c:	2c13      	cmp	r4, #19
    c67e:	dc12      	bgt.n	c6a6 <round+0x3a>
    c680:	2c00      	cmp	r4, #0
    c682:	db2c      	blt.n	c6de <round+0x72>
    c684:	491b      	ldr	r1, [pc, #108]	; (c6f4 <round+0x88>)
    c686:	4121      	asrs	r1, r4
    c688:	ea05 0001 	and.w	r0, r5, r1
    c68c:	4310      	orrs	r0, r2
    c68e:	d007      	beq.n	c6a0 <round+0x34>
    c690:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    c694:	2200      	movs	r2, #0
    c696:	4123      	asrs	r3, r4
    c698:	441d      	add	r5, r3
    c69a:	ea25 0501 	bic.w	r5, r5, r1
    c69e:	462b      	mov	r3, r5
    c6a0:	4610      	mov	r0, r2
    c6a2:	4619      	mov	r1, r3
    c6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6a6:	2c33      	cmp	r4, #51	; 0x33
    c6a8:	dd07      	ble.n	c6ba <round+0x4e>
    c6aa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    c6ae:	d1f7      	bne.n	c6a0 <round+0x34>
    c6b0:	f7f3 fd58 	bl	164 <__adddf3>
    c6b4:	4602      	mov	r2, r0
    c6b6:	460b      	mov	r3, r1
    c6b8:	e7f2      	b.n	c6a0 <round+0x34>
    c6ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    c6be:	f04f 31ff 	mov.w	r1, #4294967295
    c6c2:	fa21 f707 	lsr.w	r7, r1, r7
    c6c6:	4238      	tst	r0, r7
    c6c8:	d0ea      	beq.n	c6a0 <round+0x34>
    c6ca:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
    c6ce:	2201      	movs	r2, #1
    c6d0:	409a      	lsls	r2, r3
    c6d2:	1882      	adds	r2, r0, r2
    c6d4:	bf28      	it	cs
    c6d6:	3501      	addcs	r5, #1
    c6d8:	ea22 0207 	bic.w	r2, r2, r7
    c6dc:	e7df      	b.n	c69e <round+0x32>
    c6de:	3401      	adds	r4, #1
    c6e0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    c6e4:	d002      	beq.n	c6ec <round+0x80>
    c6e6:	461d      	mov	r5, r3
    c6e8:	2200      	movs	r2, #0
    c6ea:	e7d8      	b.n	c69e <round+0x32>
    c6ec:	4d02      	ldr	r5, [pc, #8]	; (c6f8 <round+0x8c>)
    c6ee:	2200      	movs	r2, #0
    c6f0:	431d      	orrs	r5, r3
    c6f2:	e7d4      	b.n	c69e <round+0x32>
    c6f4:	000fffff 	.word	0x000fffff
    c6f8:	3ff00000 	.word	0x3ff00000

0000c6fc <roundf>:
    c6fc:	b508      	push	{r3, lr}
    c6fe:	f3c0 53c7 	ubfx	r3, r0, #23, #8
    c702:	4601      	mov	r1, r0
    c704:	3b7f      	subs	r3, #127	; 0x7f
    c706:	2b16      	cmp	r3, #22
    c708:	dc0e      	bgt.n	c728 <roundf+0x2c>
    c70a:	2b00      	cmp	r3, #0
    c70c:	4602      	mov	r2, r0
    c70e:	db10      	blt.n	c732 <roundf+0x36>
    c710:	480b      	ldr	r0, [pc, #44]	; (c740 <roundf+0x44>)
    c712:	4118      	asrs	r0, r3
    c714:	4201      	tst	r1, r0
    c716:	d005      	beq.n	c724 <roundf+0x28>
    c718:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    c71c:	4119      	asrs	r1, r3
    c71e:	4411      	add	r1, r2
    c720:	ea21 0100 	bic.w	r1, r1, r0
    c724:	4608      	mov	r0, r1
    c726:	bd08      	pop	{r3, pc}
    c728:	2b80      	cmp	r3, #128	; 0x80
    c72a:	d1fb      	bne.n	c724 <roundf+0x28>
    c72c:	f7f4 f9e8 	bl	b00 <__addsf3>
    c730:	bd08      	pop	{r3, pc}
    c732:	3301      	adds	r3, #1
    c734:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    c738:	d1f4      	bne.n	c724 <roundf+0x28>
    c73a:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
    c73e:	e7f1      	b.n	c724 <roundf+0x28>
    c740:	007fffff 	.word	0x007fffff

0000c744 <__assert_func>:
    c744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c746:	4614      	mov	r4, r2
    c748:	461a      	mov	r2, r3
    c74a:	4b09      	ldr	r3, [pc, #36]	; (c770 <__assert_func+0x2c>)
    c74c:	4605      	mov	r5, r0
    c74e:	681b      	ldr	r3, [r3, #0]
    c750:	68d8      	ldr	r0, [r3, #12]
    c752:	b14c      	cbz	r4, c768 <__assert_func+0x24>
    c754:	4b07      	ldr	r3, [pc, #28]	; (c774 <__assert_func+0x30>)
    c756:	9100      	str	r1, [sp, #0]
    c758:	4907      	ldr	r1, [pc, #28]	; (c778 <__assert_func+0x34>)
    c75a:	e9cd 3401 	strd	r3, r4, [sp, #4]
    c75e:	462b      	mov	r3, r5
    c760:	f000 f80e 	bl	c780 <fiprintf>
    c764:	f003 fcfe 	bl	10164 <abort>
    c768:	4b04      	ldr	r3, [pc, #16]	; (c77c <__assert_func+0x38>)
    c76a:	461c      	mov	r4, r3
    c76c:	e7f3      	b.n	c756 <__assert_func+0x12>
    c76e:	bf00      	nop
    c770:	200000d0 	.word	0x200000d0
    c774:	00057a5c 	.word	0x00057a5c
    c778:	00057a69 	.word	0x00057a69
    c77c:	00057a97 	.word	0x00057a97

0000c780 <fiprintf>:
    c780:	b40e      	push	{r1, r2, r3}
    c782:	b503      	push	{r0, r1, lr}
    c784:	ab03      	add	r3, sp, #12
    c786:	4601      	mov	r1, r0
    c788:	4805      	ldr	r0, [pc, #20]	; (c7a0 <fiprintf+0x20>)
    c78a:	f853 2b04 	ldr.w	r2, [r3], #4
    c78e:	6800      	ldr	r0, [r0, #0]
    c790:	9301      	str	r3, [sp, #4]
    c792:	f000 f8bf 	bl	c914 <_vfiprintf_r>
    c796:	b002      	add	sp, #8
    c798:	f85d eb04 	ldr.w	lr, [sp], #4
    c79c:	b003      	add	sp, #12
    c79e:	4770      	bx	lr
    c7a0:	200000d0 	.word	0x200000d0

0000c7a4 <malloc>:
    c7a4:	4b02      	ldr	r3, [pc, #8]	; (c7b0 <malloc+0xc>)
    c7a6:	4601      	mov	r1, r0
    c7a8:	6818      	ldr	r0, [r3, #0]
    c7aa:	f000 b859 	b.w	c860 <_malloc_r>
    c7ae:	bf00      	nop
    c7b0:	200000d0 	.word	0x200000d0

0000c7b4 <free>:
    c7b4:	4b02      	ldr	r3, [pc, #8]	; (c7c0 <free+0xc>)
    c7b6:	4601      	mov	r1, r0
    c7b8:	6818      	ldr	r0, [r3, #0]
    c7ba:	f000 b803 	b.w	c7c4 <_free_r>
    c7be:	bf00      	nop
    c7c0:	200000d0 	.word	0x200000d0

0000c7c4 <_free_r>:
    c7c4:	b538      	push	{r3, r4, r5, lr}
    c7c6:	4605      	mov	r5, r0
    c7c8:	2900      	cmp	r1, #0
    c7ca:	d045      	beq.n	c858 <_free_r+0x94>
    c7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c7d0:	1f0c      	subs	r4, r1, #4
    c7d2:	2b00      	cmp	r3, #0
    c7d4:	bfb8      	it	lt
    c7d6:	18e4      	addlt	r4, r4, r3
    c7d8:	f001 f88c 	bl	d8f4 <__malloc_lock>
    c7dc:	4a1f      	ldr	r2, [pc, #124]	; (c85c <_free_r+0x98>)
    c7de:	6813      	ldr	r3, [r2, #0]
    c7e0:	4610      	mov	r0, r2
    c7e2:	b933      	cbnz	r3, c7f2 <_free_r+0x2e>
    c7e4:	6063      	str	r3, [r4, #4]
    c7e6:	6014      	str	r4, [r2, #0]
    c7e8:	4628      	mov	r0, r5
    c7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c7ee:	f001 b887 	b.w	d900 <__malloc_unlock>
    c7f2:	42a3      	cmp	r3, r4
    c7f4:	d90b      	bls.n	c80e <_free_r+0x4a>
    c7f6:	6821      	ldr	r1, [r4, #0]
    c7f8:	1862      	adds	r2, r4, r1
    c7fa:	4293      	cmp	r3, r2
    c7fc:	bf02      	ittt	eq
    c7fe:	681a      	ldreq	r2, [r3, #0]
    c800:	685b      	ldreq	r3, [r3, #4]
    c802:	1852      	addeq	r2, r2, r1
    c804:	6063      	str	r3, [r4, #4]
    c806:	bf08      	it	eq
    c808:	6022      	streq	r2, [r4, #0]
    c80a:	6004      	str	r4, [r0, #0]
    c80c:	e7ec      	b.n	c7e8 <_free_r+0x24>
    c80e:	461a      	mov	r2, r3
    c810:	685b      	ldr	r3, [r3, #4]
    c812:	b10b      	cbz	r3, c818 <_free_r+0x54>
    c814:	42a3      	cmp	r3, r4
    c816:	d9fa      	bls.n	c80e <_free_r+0x4a>
    c818:	6811      	ldr	r1, [r2, #0]
    c81a:	1850      	adds	r0, r2, r1
    c81c:	42a0      	cmp	r0, r4
    c81e:	d10b      	bne.n	c838 <_free_r+0x74>
    c820:	6820      	ldr	r0, [r4, #0]
    c822:	4401      	add	r1, r0
    c824:	1850      	adds	r0, r2, r1
    c826:	6011      	str	r1, [r2, #0]
    c828:	4283      	cmp	r3, r0
    c82a:	d1dd      	bne.n	c7e8 <_free_r+0x24>
    c82c:	6818      	ldr	r0, [r3, #0]
    c82e:	685b      	ldr	r3, [r3, #4]
    c830:	4401      	add	r1, r0
    c832:	6053      	str	r3, [r2, #4]
    c834:	6011      	str	r1, [r2, #0]
    c836:	e7d7      	b.n	c7e8 <_free_r+0x24>
    c838:	d902      	bls.n	c840 <_free_r+0x7c>
    c83a:	230c      	movs	r3, #12
    c83c:	602b      	str	r3, [r5, #0]
    c83e:	e7d3      	b.n	c7e8 <_free_r+0x24>
    c840:	6820      	ldr	r0, [r4, #0]
    c842:	1821      	adds	r1, r4, r0
    c844:	428b      	cmp	r3, r1
    c846:	bf02      	ittt	eq
    c848:	6819      	ldreq	r1, [r3, #0]
    c84a:	685b      	ldreq	r3, [r3, #4]
    c84c:	1809      	addeq	r1, r1, r0
    c84e:	6063      	str	r3, [r4, #4]
    c850:	bf08      	it	eq
    c852:	6021      	streq	r1, [r4, #0]
    c854:	6054      	str	r4, [r2, #4]
    c856:	e7c7      	b.n	c7e8 <_free_r+0x24>
    c858:	bd38      	pop	{r3, r4, r5, pc}
    c85a:	bf00      	nop
    c85c:	2001b694 	.word	0x2001b694

0000c860 <_malloc_r>:
    c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c862:	1ccd      	adds	r5, r1, #3
    c864:	4606      	mov	r6, r0
    c866:	f025 0503 	bic.w	r5, r5, #3
    c86a:	3508      	adds	r5, #8
    c86c:	2d0c      	cmp	r5, #12
    c86e:	bf38      	it	cc
    c870:	250c      	movcc	r5, #12
    c872:	2d00      	cmp	r5, #0
    c874:	db01      	blt.n	c87a <_malloc_r+0x1a>
    c876:	42a9      	cmp	r1, r5
    c878:	d903      	bls.n	c882 <_malloc_r+0x22>
    c87a:	230c      	movs	r3, #12
    c87c:	6033      	str	r3, [r6, #0]
    c87e:	2000      	movs	r0, #0
    c880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c882:	f001 f837 	bl	d8f4 <__malloc_lock>
    c886:	4921      	ldr	r1, [pc, #132]	; (c90c <_malloc_r+0xac>)
    c888:	680a      	ldr	r2, [r1, #0]
    c88a:	4614      	mov	r4, r2
    c88c:	b99c      	cbnz	r4, c8b6 <_malloc_r+0x56>
    c88e:	4f20      	ldr	r7, [pc, #128]	; (c910 <_malloc_r+0xb0>)
    c890:	683b      	ldr	r3, [r7, #0]
    c892:	b923      	cbnz	r3, c89e <_malloc_r+0x3e>
    c894:	4621      	mov	r1, r4
    c896:	4630      	mov	r0, r6
    c898:	f000 fcbc 	bl	d214 <_sbrk_r>
    c89c:	6038      	str	r0, [r7, #0]
    c89e:	4629      	mov	r1, r5
    c8a0:	4630      	mov	r0, r6
    c8a2:	f000 fcb7 	bl	d214 <_sbrk_r>
    c8a6:	1c43      	adds	r3, r0, #1
    c8a8:	d123      	bne.n	c8f2 <_malloc_r+0x92>
    c8aa:	230c      	movs	r3, #12
    c8ac:	4630      	mov	r0, r6
    c8ae:	6033      	str	r3, [r6, #0]
    c8b0:	f001 f826 	bl	d900 <__malloc_unlock>
    c8b4:	e7e3      	b.n	c87e <_malloc_r+0x1e>
    c8b6:	6823      	ldr	r3, [r4, #0]
    c8b8:	1b5b      	subs	r3, r3, r5
    c8ba:	d417      	bmi.n	c8ec <_malloc_r+0x8c>
    c8bc:	2b0b      	cmp	r3, #11
    c8be:	d903      	bls.n	c8c8 <_malloc_r+0x68>
    c8c0:	6023      	str	r3, [r4, #0]
    c8c2:	441c      	add	r4, r3
    c8c4:	6025      	str	r5, [r4, #0]
    c8c6:	e004      	b.n	c8d2 <_malloc_r+0x72>
    c8c8:	6863      	ldr	r3, [r4, #4]
    c8ca:	42a2      	cmp	r2, r4
    c8cc:	bf0c      	ite	eq
    c8ce:	600b      	streq	r3, [r1, #0]
    c8d0:	6053      	strne	r3, [r2, #4]
    c8d2:	4630      	mov	r0, r6
    c8d4:	f001 f814 	bl	d900 <__malloc_unlock>
    c8d8:	f104 000b 	add.w	r0, r4, #11
    c8dc:	1d23      	adds	r3, r4, #4
    c8de:	f020 0007 	bic.w	r0, r0, #7
    c8e2:	1ac2      	subs	r2, r0, r3
    c8e4:	d0cc      	beq.n	c880 <_malloc_r+0x20>
    c8e6:	1a1b      	subs	r3, r3, r0
    c8e8:	50a3      	str	r3, [r4, r2]
    c8ea:	e7c9      	b.n	c880 <_malloc_r+0x20>
    c8ec:	4622      	mov	r2, r4
    c8ee:	6864      	ldr	r4, [r4, #4]
    c8f0:	e7cc      	b.n	c88c <_malloc_r+0x2c>
    c8f2:	1cc4      	adds	r4, r0, #3
    c8f4:	f024 0403 	bic.w	r4, r4, #3
    c8f8:	42a0      	cmp	r0, r4
    c8fa:	d0e3      	beq.n	c8c4 <_malloc_r+0x64>
    c8fc:	1a21      	subs	r1, r4, r0
    c8fe:	4630      	mov	r0, r6
    c900:	f000 fc88 	bl	d214 <_sbrk_r>
    c904:	3001      	adds	r0, #1
    c906:	d1dd      	bne.n	c8c4 <_malloc_r+0x64>
    c908:	e7cf      	b.n	c8aa <_malloc_r+0x4a>
    c90a:	bf00      	nop
    c90c:	2001b694 	.word	0x2001b694
    c910:	2001b698 	.word	0x2001b698

0000c914 <_vfiprintf_r>:
    c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c918:	460d      	mov	r5, r1
    c91a:	b09d      	sub	sp, #116	; 0x74
    c91c:	4614      	mov	r4, r2
    c91e:	4698      	mov	r8, r3
    c920:	4606      	mov	r6, r0
    c922:	b118      	cbz	r0, c92c <_vfiprintf_r+0x18>
    c924:	6983      	ldr	r3, [r0, #24]
    c926:	b90b      	cbnz	r3, c92c <_vfiprintf_r+0x18>
    c928:	f000 ff22 	bl	d770 <__sinit>
    c92c:	4b89      	ldr	r3, [pc, #548]	; (cb54 <_vfiprintf_r+0x240>)
    c92e:	429d      	cmp	r5, r3
    c930:	d11b      	bne.n	c96a <_vfiprintf_r+0x56>
    c932:	6875      	ldr	r5, [r6, #4]
    c934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c936:	07d9      	lsls	r1, r3, #31
    c938:	d405      	bmi.n	c946 <_vfiprintf_r+0x32>
    c93a:	89ab      	ldrh	r3, [r5, #12]
    c93c:	059a      	lsls	r2, r3, #22
    c93e:	d402      	bmi.n	c946 <_vfiprintf_r+0x32>
    c940:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c942:	f001 fe98 	bl	e676 <__retarget_lock_acquire_recursive>
    c946:	89ab      	ldrh	r3, [r5, #12]
    c948:	071b      	lsls	r3, r3, #28
    c94a:	d501      	bpl.n	c950 <_vfiprintf_r+0x3c>
    c94c:	692b      	ldr	r3, [r5, #16]
    c94e:	b9eb      	cbnz	r3, c98c <_vfiprintf_r+0x78>
    c950:	4629      	mov	r1, r5
    c952:	4630      	mov	r0, r6
    c954:	f000 fd9c 	bl	d490 <__swsetup_r>
    c958:	b1c0      	cbz	r0, c98c <_vfiprintf_r+0x78>
    c95a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c95c:	07dc      	lsls	r4, r3, #31
    c95e:	d50e      	bpl.n	c97e <_vfiprintf_r+0x6a>
    c960:	f04f 30ff 	mov.w	r0, #4294967295
    c964:	b01d      	add	sp, #116	; 0x74
    c966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c96a:	4b7b      	ldr	r3, [pc, #492]	; (cb58 <_vfiprintf_r+0x244>)
    c96c:	429d      	cmp	r5, r3
    c96e:	d101      	bne.n	c974 <_vfiprintf_r+0x60>
    c970:	68b5      	ldr	r5, [r6, #8]
    c972:	e7df      	b.n	c934 <_vfiprintf_r+0x20>
    c974:	4b79      	ldr	r3, [pc, #484]	; (cb5c <_vfiprintf_r+0x248>)
    c976:	429d      	cmp	r5, r3
    c978:	bf08      	it	eq
    c97a:	68f5      	ldreq	r5, [r6, #12]
    c97c:	e7da      	b.n	c934 <_vfiprintf_r+0x20>
    c97e:	89ab      	ldrh	r3, [r5, #12]
    c980:	0598      	lsls	r0, r3, #22
    c982:	d4ed      	bmi.n	c960 <_vfiprintf_r+0x4c>
    c984:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c986:	f001 fe7e 	bl	e686 <__retarget_lock_release_recursive>
    c98a:	e7e9      	b.n	c960 <_vfiprintf_r+0x4c>
    c98c:	2300      	movs	r3, #0
    c98e:	f8cd 800c 	str.w	r8, [sp, #12]
    c992:	f04f 0901 	mov.w	r9, #1
    c996:	f8df 81c8 	ldr.w	r8, [pc, #456]	; cb60 <_vfiprintf_r+0x24c>
    c99a:	9309      	str	r3, [sp, #36]	; 0x24
    c99c:	2320      	movs	r3, #32
    c99e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c9a2:	2330      	movs	r3, #48	; 0x30
    c9a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c9a8:	4623      	mov	r3, r4
    c9aa:	469a      	mov	sl, r3
    c9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
    c9b0:	b10a      	cbz	r2, c9b6 <_vfiprintf_r+0xa2>
    c9b2:	2a25      	cmp	r2, #37	; 0x25
    c9b4:	d1f9      	bne.n	c9aa <_vfiprintf_r+0x96>
    c9b6:	ebba 0b04 	subs.w	fp, sl, r4
    c9ba:	d00b      	beq.n	c9d4 <_vfiprintf_r+0xc0>
    c9bc:	465b      	mov	r3, fp
    c9be:	4622      	mov	r2, r4
    c9c0:	4629      	mov	r1, r5
    c9c2:	4630      	mov	r0, r6
    c9c4:	f003 fc11 	bl	101ea <__sfputs_r>
    c9c8:	3001      	adds	r0, #1
    c9ca:	f000 80aa 	beq.w	cb22 <_vfiprintf_r+0x20e>
    c9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c9d0:	445a      	add	r2, fp
    c9d2:	9209      	str	r2, [sp, #36]	; 0x24
    c9d4:	f89a 3000 	ldrb.w	r3, [sl]
    c9d8:	2b00      	cmp	r3, #0
    c9da:	f000 80a2 	beq.w	cb22 <_vfiprintf_r+0x20e>
    c9de:	2300      	movs	r3, #0
    c9e0:	f04f 32ff 	mov.w	r2, #4294967295
    c9e4:	f10a 0a01 	add.w	sl, sl, #1
    c9e8:	9304      	str	r3, [sp, #16]
    c9ea:	9307      	str	r3, [sp, #28]
    c9ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c9f0:	931a      	str	r3, [sp, #104]	; 0x68
    c9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    c9f6:	4654      	mov	r4, sl
    c9f8:	2205      	movs	r2, #5
    c9fa:	4859      	ldr	r0, [pc, #356]	; (cb60 <_vfiprintf_r+0x24c>)
    c9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
    ca00:	f003 fbbb 	bl	1017a <memchr>
    ca04:	9a04      	ldr	r2, [sp, #16]
    ca06:	b9d8      	cbnz	r0, ca40 <_vfiprintf_r+0x12c>
    ca08:	06d1      	lsls	r1, r2, #27
    ca0a:	bf44      	itt	mi
    ca0c:	2320      	movmi	r3, #32
    ca0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    ca12:	0713      	lsls	r3, r2, #28
    ca14:	bf44      	itt	mi
    ca16:	232b      	movmi	r3, #43	; 0x2b
    ca18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    ca1c:	f89a 3000 	ldrb.w	r3, [sl]
    ca20:	2b2a      	cmp	r3, #42	; 0x2a
    ca22:	d015      	beq.n	ca50 <_vfiprintf_r+0x13c>
    ca24:	9a07      	ldr	r2, [sp, #28]
    ca26:	4654      	mov	r4, sl
    ca28:	2000      	movs	r0, #0
    ca2a:	f04f 0c0a 	mov.w	ip, #10
    ca2e:	4621      	mov	r1, r4
    ca30:	f811 3b01 	ldrb.w	r3, [r1], #1
    ca34:	3b30      	subs	r3, #48	; 0x30
    ca36:	2b09      	cmp	r3, #9
    ca38:	d94e      	bls.n	cad8 <_vfiprintf_r+0x1c4>
    ca3a:	b1b0      	cbz	r0, ca6a <_vfiprintf_r+0x156>
    ca3c:	9207      	str	r2, [sp, #28]
    ca3e:	e014      	b.n	ca6a <_vfiprintf_r+0x156>
    ca40:	eba0 0308 	sub.w	r3, r0, r8
    ca44:	46a2      	mov	sl, r4
    ca46:	fa09 f303 	lsl.w	r3, r9, r3
    ca4a:	4313      	orrs	r3, r2
    ca4c:	9304      	str	r3, [sp, #16]
    ca4e:	e7d2      	b.n	c9f6 <_vfiprintf_r+0xe2>
    ca50:	9b03      	ldr	r3, [sp, #12]
    ca52:	1d19      	adds	r1, r3, #4
    ca54:	681b      	ldr	r3, [r3, #0]
    ca56:	2b00      	cmp	r3, #0
    ca58:	9103      	str	r1, [sp, #12]
    ca5a:	bfbb      	ittet	lt
    ca5c:	425b      	neglt	r3, r3
    ca5e:	f042 0202 	orrlt.w	r2, r2, #2
    ca62:	9307      	strge	r3, [sp, #28]
    ca64:	9307      	strlt	r3, [sp, #28]
    ca66:	bfb8      	it	lt
    ca68:	9204      	strlt	r2, [sp, #16]
    ca6a:	7823      	ldrb	r3, [r4, #0]
    ca6c:	2b2e      	cmp	r3, #46	; 0x2e
    ca6e:	d10c      	bne.n	ca8a <_vfiprintf_r+0x176>
    ca70:	7863      	ldrb	r3, [r4, #1]
    ca72:	2b2a      	cmp	r3, #42	; 0x2a
    ca74:	d135      	bne.n	cae2 <_vfiprintf_r+0x1ce>
    ca76:	9b03      	ldr	r3, [sp, #12]
    ca78:	3402      	adds	r4, #2
    ca7a:	1d1a      	adds	r2, r3, #4
    ca7c:	681b      	ldr	r3, [r3, #0]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	9203      	str	r2, [sp, #12]
    ca82:	bfb8      	it	lt
    ca84:	f04f 33ff 	movlt.w	r3, #4294967295
    ca88:	9305      	str	r3, [sp, #20]
    ca8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; cb70 <_vfiprintf_r+0x25c>
    ca8e:	2203      	movs	r2, #3
    ca90:	7821      	ldrb	r1, [r4, #0]
    ca92:	4650      	mov	r0, sl
    ca94:	f003 fb71 	bl	1017a <memchr>
    ca98:	b140      	cbz	r0, caac <_vfiprintf_r+0x198>
    ca9a:	2340      	movs	r3, #64	; 0x40
    ca9c:	eba0 000a 	sub.w	r0, r0, sl
    caa0:	3401      	adds	r4, #1
    caa2:	fa03 f000 	lsl.w	r0, r3, r0
    caa6:	9b04      	ldr	r3, [sp, #16]
    caa8:	4303      	orrs	r3, r0
    caaa:	9304      	str	r3, [sp, #16]
    caac:	f814 1b01 	ldrb.w	r1, [r4], #1
    cab0:	2206      	movs	r2, #6
    cab2:	482c      	ldr	r0, [pc, #176]	; (cb64 <_vfiprintf_r+0x250>)
    cab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    cab8:	f003 fb5f 	bl	1017a <memchr>
    cabc:	2800      	cmp	r0, #0
    cabe:	d03f      	beq.n	cb40 <_vfiprintf_r+0x22c>
    cac0:	4b29      	ldr	r3, [pc, #164]	; (cb68 <_vfiprintf_r+0x254>)
    cac2:	bb1b      	cbnz	r3, cb0c <_vfiprintf_r+0x1f8>
    cac4:	9b03      	ldr	r3, [sp, #12]
    cac6:	3307      	adds	r3, #7
    cac8:	f023 0307 	bic.w	r3, r3, #7
    cacc:	3308      	adds	r3, #8
    cace:	9303      	str	r3, [sp, #12]
    cad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cad2:	443b      	add	r3, r7
    cad4:	9309      	str	r3, [sp, #36]	; 0x24
    cad6:	e767      	b.n	c9a8 <_vfiprintf_r+0x94>
    cad8:	fb0c 3202 	mla	r2, ip, r2, r3
    cadc:	460c      	mov	r4, r1
    cade:	2001      	movs	r0, #1
    cae0:	e7a5      	b.n	ca2e <_vfiprintf_r+0x11a>
    cae2:	2300      	movs	r3, #0
    cae4:	3401      	adds	r4, #1
    cae6:	f04f 0c0a 	mov.w	ip, #10
    caea:	4619      	mov	r1, r3
    caec:	9305      	str	r3, [sp, #20]
    caee:	4620      	mov	r0, r4
    caf0:	f810 2b01 	ldrb.w	r2, [r0], #1
    caf4:	3a30      	subs	r2, #48	; 0x30
    caf6:	2a09      	cmp	r2, #9
    caf8:	d903      	bls.n	cb02 <_vfiprintf_r+0x1ee>
    cafa:	2b00      	cmp	r3, #0
    cafc:	d0c5      	beq.n	ca8a <_vfiprintf_r+0x176>
    cafe:	9105      	str	r1, [sp, #20]
    cb00:	e7c3      	b.n	ca8a <_vfiprintf_r+0x176>
    cb02:	fb0c 2101 	mla	r1, ip, r1, r2
    cb06:	4604      	mov	r4, r0
    cb08:	2301      	movs	r3, #1
    cb0a:	e7f0      	b.n	caee <_vfiprintf_r+0x1da>
    cb0c:	ab03      	add	r3, sp, #12
    cb0e:	462a      	mov	r2, r5
    cb10:	a904      	add	r1, sp, #16
    cb12:	4630      	mov	r0, r6
    cb14:	9300      	str	r3, [sp, #0]
    cb16:	4b15      	ldr	r3, [pc, #84]	; (cb6c <_vfiprintf_r+0x258>)
    cb18:	f000 f82c 	bl	cb74 <_printf_float>
    cb1c:	4607      	mov	r7, r0
    cb1e:	1c78      	adds	r0, r7, #1
    cb20:	d1d6      	bne.n	cad0 <_vfiprintf_r+0x1bc>
    cb22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    cb24:	07d9      	lsls	r1, r3, #31
    cb26:	d405      	bmi.n	cb34 <_vfiprintf_r+0x220>
    cb28:	89ab      	ldrh	r3, [r5, #12]
    cb2a:	059a      	lsls	r2, r3, #22
    cb2c:	d402      	bmi.n	cb34 <_vfiprintf_r+0x220>
    cb2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    cb30:	f001 fda9 	bl	e686 <__retarget_lock_release_recursive>
    cb34:	89ab      	ldrh	r3, [r5, #12]
    cb36:	065b      	lsls	r3, r3, #25
    cb38:	f53f af12 	bmi.w	c960 <_vfiprintf_r+0x4c>
    cb3c:	9809      	ldr	r0, [sp, #36]	; 0x24
    cb3e:	e711      	b.n	c964 <_vfiprintf_r+0x50>
    cb40:	ab03      	add	r3, sp, #12
    cb42:	462a      	mov	r2, r5
    cb44:	a904      	add	r1, sp, #16
    cb46:	4630      	mov	r0, r6
    cb48:	9300      	str	r3, [sp, #0]
    cb4a:	4b08      	ldr	r3, [pc, #32]	; (cb6c <_vfiprintf_r+0x258>)
    cb4c:	f000 fa3c 	bl	cfc8 <_printf_i>
    cb50:	e7e4      	b.n	cb1c <_vfiprintf_r+0x208>
    cb52:	bf00      	nop
    cb54:	00057a10 	.word	0x00057a10
    cb58:	00057a30 	.word	0x00057a30
    cb5c:	000579f0 	.word	0x000579f0
    cb60:	00057b99 	.word	0x00057b99
    cb64:	00057ba3 	.word	0x00057ba3
    cb68:	0000cb75 	.word	0x0000cb75
    cb6c:	000101eb 	.word	0x000101eb
    cb70:	00057b9f 	.word	0x00057b9f

0000cb74 <_printf_float>:
    cb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb78:	b091      	sub	sp, #68	; 0x44
    cb7a:	460c      	mov	r4, r1
    cb7c:	4616      	mov	r6, r2
    cb7e:	461f      	mov	r7, r3
    cb80:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    cb84:	4605      	mov	r5, r0
    cb86:	f000 fe71 	bl	d86c <_localeconv_r>
    cb8a:	6803      	ldr	r3, [r0, #0]
    cb8c:	4618      	mov	r0, r3
    cb8e:	9309      	str	r3, [sp, #36]	; 0x24
    cb90:	f7f4 fca0 	bl	14d4 <strlen>
    cb94:	2300      	movs	r3, #0
    cb96:	900a      	str	r0, [sp, #40]	; 0x28
    cb98:	930e      	str	r3, [sp, #56]	; 0x38
    cb9a:	f8d8 3000 	ldr.w	r3, [r8]
    cb9e:	f894 9018 	ldrb.w	r9, [r4, #24]
    cba2:	3307      	adds	r3, #7
    cba4:	f8d4 b000 	ldr.w	fp, [r4]
    cba8:	f023 0307 	bic.w	r3, r3, #7
    cbac:	f103 0208 	add.w	r2, r3, #8
    cbb0:	f8c8 2000 	str.w	r2, [r8]
    cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cbb8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    cbbc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
    cbc0:	f04f 32ff 	mov.w	r2, #4294967295
    cbc4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
    cbc8:	4640      	mov	r0, r8
    cbca:	930b      	str	r3, [sp, #44]	; 0x2c
    cbcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cbce:	4b9b      	ldr	r3, [pc, #620]	; (ce3c <_printf_float+0x2c8>)
    cbd0:	f7f4 fc60 	bl	1494 <__aeabi_dcmpun>
    cbd4:	bb70      	cbnz	r0, cc34 <_printf_float+0xc0>
    cbd6:	f04f 32ff 	mov.w	r2, #4294967295
    cbda:	4b98      	ldr	r3, [pc, #608]	; (ce3c <_printf_float+0x2c8>)
    cbdc:	4640      	mov	r0, r8
    cbde:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cbe0:	f7f3 fef2 	bl	9c8 <__aeabi_dcmple>
    cbe4:	bb30      	cbnz	r0, cc34 <_printf_float+0xc0>
    cbe6:	2200      	movs	r2, #0
    cbe8:	2300      	movs	r3, #0
    cbea:	4640      	mov	r0, r8
    cbec:	4651      	mov	r1, sl
    cbee:	f7f3 fee1 	bl	9b4 <__aeabi_dcmplt>
    cbf2:	b110      	cbz	r0, cbfa <_printf_float+0x86>
    cbf4:	232d      	movs	r3, #45	; 0x2d
    cbf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    cbfa:	4b91      	ldr	r3, [pc, #580]	; (ce40 <_printf_float+0x2cc>)
    cbfc:	4891      	ldr	r0, [pc, #580]	; (ce44 <_printf_float+0x2d0>)
    cbfe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    cc02:	bf94      	ite	ls
    cc04:	4698      	movls	r8, r3
    cc06:	4680      	movhi	r8, r0
    cc08:	2303      	movs	r3, #3
    cc0a:	f04f 0a00 	mov.w	sl, #0
    cc0e:	6123      	str	r3, [r4, #16]
    cc10:	f02b 0304 	bic.w	r3, fp, #4
    cc14:	6023      	str	r3, [r4, #0]
    cc16:	4633      	mov	r3, r6
    cc18:	aa0f      	add	r2, sp, #60	; 0x3c
    cc1a:	4621      	mov	r1, r4
    cc1c:	4628      	mov	r0, r5
    cc1e:	9700      	str	r7, [sp, #0]
    cc20:	f003 fb93 	bl	1034a <_printf_common>
    cc24:	3001      	adds	r0, #1
    cc26:	f040 808f 	bne.w	cd48 <_printf_float+0x1d4>
    cc2a:	f04f 30ff 	mov.w	r0, #4294967295
    cc2e:	b011      	add	sp, #68	; 0x44
    cc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc34:	4642      	mov	r2, r8
    cc36:	4653      	mov	r3, sl
    cc38:	4640      	mov	r0, r8
    cc3a:	4651      	mov	r1, sl
    cc3c:	f7f4 fc2a 	bl	1494 <__aeabi_dcmpun>
    cc40:	b140      	cbz	r0, cc54 <_printf_float+0xe0>
    cc42:	f1ba 0f00 	cmp.w	sl, #0
    cc46:	4880      	ldr	r0, [pc, #512]	; (ce48 <_printf_float+0x2d4>)
    cc48:	bfbc      	itt	lt
    cc4a:	232d      	movlt	r3, #45	; 0x2d
    cc4c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
    cc50:	4b7e      	ldr	r3, [pc, #504]	; (ce4c <_printf_float+0x2d8>)
    cc52:	e7d4      	b.n	cbfe <_printf_float+0x8a>
    cc54:	6863      	ldr	r3, [r4, #4]
    cc56:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    cc5a:	1c5a      	adds	r2, r3, #1
    cc5c:	d142      	bne.n	cce4 <_printf_float+0x170>
    cc5e:	2306      	movs	r3, #6
    cc60:	6063      	str	r3, [r4, #4]
    cc62:	2200      	movs	r2, #0
    cc64:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
    cc68:	4628      	mov	r0, r5
    cc6a:	910b      	str	r1, [sp, #44]	; 0x2c
    cc6c:	9206      	str	r2, [sp, #24]
    cc6e:	aa0e      	add	r2, sp, #56	; 0x38
    cc70:	6023      	str	r3, [r4, #0]
    cc72:	e9cd 9204 	strd	r9, r2, [sp, #16]
    cc76:	aa0d      	add	r2, sp, #52	; 0x34
    cc78:	9203      	str	r2, [sp, #12]
    cc7a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    cc7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cc82:	6863      	ldr	r3, [r4, #4]
    cc84:	4642      	mov	r2, r8
    cc86:	9300      	str	r3, [sp, #0]
    cc88:	4653      	mov	r3, sl
    cc8a:	f003 fac0 	bl	1020e <__cvt>
    cc8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cc90:	4680      	mov	r8, r0
    cc92:	2947      	cmp	r1, #71	; 0x47
    cc94:	990d      	ldr	r1, [sp, #52]	; 0x34
    cc96:	d108      	bne.n	ccaa <_printf_float+0x136>
    cc98:	1cc8      	adds	r0, r1, #3
    cc9a:	db02      	blt.n	cca2 <_printf_float+0x12e>
    cc9c:	6863      	ldr	r3, [r4, #4]
    cc9e:	4299      	cmp	r1, r3
    cca0:	dd40      	ble.n	cd24 <_printf_float+0x1b0>
    cca2:	f1a9 0902 	sub.w	r9, r9, #2
    cca6:	fa5f f989 	uxtb.w	r9, r9
    ccaa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    ccae:	d81f      	bhi.n	ccf0 <_printf_float+0x17c>
    ccb0:	3901      	subs	r1, #1
    ccb2:	464a      	mov	r2, r9
    ccb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
    ccb8:	910d      	str	r1, [sp, #52]	; 0x34
    ccba:	f003 fb08 	bl	102ce <__exponent>
    ccbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ccc0:	4682      	mov	sl, r0
    ccc2:	1813      	adds	r3, r2, r0
    ccc4:	2a01      	cmp	r2, #1
    ccc6:	6123      	str	r3, [r4, #16]
    ccc8:	dc02      	bgt.n	ccd0 <_printf_float+0x15c>
    ccca:	6822      	ldr	r2, [r4, #0]
    cccc:	07d2      	lsls	r2, r2, #31
    ccce:	d501      	bpl.n	ccd4 <_printf_float+0x160>
    ccd0:	3301      	adds	r3, #1
    ccd2:	6123      	str	r3, [r4, #16]
    ccd4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    ccd8:	2b00      	cmp	r3, #0
    ccda:	d09c      	beq.n	cc16 <_printf_float+0xa2>
    ccdc:	232d      	movs	r3, #45	; 0x2d
    ccde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    cce2:	e798      	b.n	cc16 <_printf_float+0xa2>
    cce4:	2947      	cmp	r1, #71	; 0x47
    cce6:	d1bc      	bne.n	cc62 <_printf_float+0xee>
    cce8:	2b00      	cmp	r3, #0
    ccea:	d1ba      	bne.n	cc62 <_printf_float+0xee>
    ccec:	2301      	movs	r3, #1
    ccee:	e7b7      	b.n	cc60 <_printf_float+0xec>
    ccf0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    ccf4:	d118      	bne.n	cd28 <_printf_float+0x1b4>
    ccf6:	2900      	cmp	r1, #0
    ccf8:	6863      	ldr	r3, [r4, #4]
    ccfa:	dd0b      	ble.n	cd14 <_printf_float+0x1a0>
    ccfc:	6121      	str	r1, [r4, #16]
    ccfe:	b913      	cbnz	r3, cd06 <_printf_float+0x192>
    cd00:	6822      	ldr	r2, [r4, #0]
    cd02:	07d0      	lsls	r0, r2, #31
    cd04:	d502      	bpl.n	cd0c <_printf_float+0x198>
    cd06:	3301      	adds	r3, #1
    cd08:	440b      	add	r3, r1
    cd0a:	6123      	str	r3, [r4, #16]
    cd0c:	f04f 0a00 	mov.w	sl, #0
    cd10:	65a1      	str	r1, [r4, #88]	; 0x58
    cd12:	e7df      	b.n	ccd4 <_printf_float+0x160>
    cd14:	b913      	cbnz	r3, cd1c <_printf_float+0x1a8>
    cd16:	6822      	ldr	r2, [r4, #0]
    cd18:	07d2      	lsls	r2, r2, #31
    cd1a:	d501      	bpl.n	cd20 <_printf_float+0x1ac>
    cd1c:	3302      	adds	r3, #2
    cd1e:	e7f4      	b.n	cd0a <_printf_float+0x196>
    cd20:	2301      	movs	r3, #1
    cd22:	e7f2      	b.n	cd0a <_printf_float+0x196>
    cd24:	f04f 0967 	mov.w	r9, #103	; 0x67
    cd28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cd2a:	4299      	cmp	r1, r3
    cd2c:	db05      	blt.n	cd3a <_printf_float+0x1c6>
    cd2e:	6823      	ldr	r3, [r4, #0]
    cd30:	6121      	str	r1, [r4, #16]
    cd32:	07d8      	lsls	r0, r3, #31
    cd34:	d5ea      	bpl.n	cd0c <_printf_float+0x198>
    cd36:	1c4b      	adds	r3, r1, #1
    cd38:	e7e7      	b.n	cd0a <_printf_float+0x196>
    cd3a:	2900      	cmp	r1, #0
    cd3c:	bfd4      	ite	le
    cd3e:	f1c1 0202 	rsble	r2, r1, #2
    cd42:	2201      	movgt	r2, #1
    cd44:	4413      	add	r3, r2
    cd46:	e7e0      	b.n	cd0a <_printf_float+0x196>
    cd48:	6823      	ldr	r3, [r4, #0]
    cd4a:	055a      	lsls	r2, r3, #21
    cd4c:	d407      	bmi.n	cd5e <_printf_float+0x1ea>
    cd4e:	6923      	ldr	r3, [r4, #16]
    cd50:	4642      	mov	r2, r8
    cd52:	4631      	mov	r1, r6
    cd54:	4628      	mov	r0, r5
    cd56:	47b8      	blx	r7
    cd58:	3001      	adds	r0, #1
    cd5a:	d12b      	bne.n	cdb4 <_printf_float+0x240>
    cd5c:	e765      	b.n	cc2a <_printf_float+0xb6>
    cd5e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    cd62:	f240 80dc 	bls.w	cf1e <_printf_float+0x3aa>
    cd66:	2200      	movs	r2, #0
    cd68:	2300      	movs	r3, #0
    cd6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    cd6e:	f7f3 fe17 	bl	9a0 <__aeabi_dcmpeq>
    cd72:	2800      	cmp	r0, #0
    cd74:	d033      	beq.n	cdde <_printf_float+0x26a>
    cd76:	2301      	movs	r3, #1
    cd78:	4a35      	ldr	r2, [pc, #212]	; (ce50 <_printf_float+0x2dc>)
    cd7a:	4631      	mov	r1, r6
    cd7c:	4628      	mov	r0, r5
    cd7e:	47b8      	blx	r7
    cd80:	3001      	adds	r0, #1
    cd82:	f43f af52 	beq.w	cc2a <_printf_float+0xb6>
    cd86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    cd8a:	429a      	cmp	r2, r3
    cd8c:	db02      	blt.n	cd94 <_printf_float+0x220>
    cd8e:	6823      	ldr	r3, [r4, #0]
    cd90:	07d8      	lsls	r0, r3, #31
    cd92:	d50f      	bpl.n	cdb4 <_printf_float+0x240>
    cd94:	4631      	mov	r1, r6
    cd96:	4628      	mov	r0, r5
    cd98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    cd9c:	47b8      	blx	r7
    cd9e:	3001      	adds	r0, #1
    cda0:	f43f af43 	beq.w	cc2a <_printf_float+0xb6>
    cda4:	f04f 0800 	mov.w	r8, #0
    cda8:	f104 091a 	add.w	r9, r4, #26
    cdac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cdae:	3b01      	subs	r3, #1
    cdb0:	4543      	cmp	r3, r8
    cdb2:	dc09      	bgt.n	cdc8 <_printf_float+0x254>
    cdb4:	6823      	ldr	r3, [r4, #0]
    cdb6:	079b      	lsls	r3, r3, #30
    cdb8:	f100 8101 	bmi.w	cfbe <_printf_float+0x44a>
    cdbc:	68e0      	ldr	r0, [r4, #12]
    cdbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cdc0:	4298      	cmp	r0, r3
    cdc2:	bfb8      	it	lt
    cdc4:	4618      	movlt	r0, r3
    cdc6:	e732      	b.n	cc2e <_printf_float+0xba>
    cdc8:	2301      	movs	r3, #1
    cdca:	464a      	mov	r2, r9
    cdcc:	4631      	mov	r1, r6
    cdce:	4628      	mov	r0, r5
    cdd0:	47b8      	blx	r7
    cdd2:	3001      	adds	r0, #1
    cdd4:	f43f af29 	beq.w	cc2a <_printf_float+0xb6>
    cdd8:	f108 0801 	add.w	r8, r8, #1
    cddc:	e7e6      	b.n	cdac <_printf_float+0x238>
    cdde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cde0:	2b00      	cmp	r3, #0
    cde2:	dc37      	bgt.n	ce54 <_printf_float+0x2e0>
    cde4:	2301      	movs	r3, #1
    cde6:	4a1a      	ldr	r2, [pc, #104]	; (ce50 <_printf_float+0x2dc>)
    cde8:	4631      	mov	r1, r6
    cdea:	4628      	mov	r0, r5
    cdec:	47b8      	blx	r7
    cdee:	3001      	adds	r0, #1
    cdf0:	f43f af1b 	beq.w	cc2a <_printf_float+0xb6>
    cdf4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    cdf8:	4313      	orrs	r3, r2
    cdfa:	d102      	bne.n	ce02 <_printf_float+0x28e>
    cdfc:	6823      	ldr	r3, [r4, #0]
    cdfe:	07d9      	lsls	r1, r3, #31
    ce00:	d5d8      	bpl.n	cdb4 <_printf_float+0x240>
    ce02:	4631      	mov	r1, r6
    ce04:	4628      	mov	r0, r5
    ce06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    ce0a:	47b8      	blx	r7
    ce0c:	3001      	adds	r0, #1
    ce0e:	f43f af0c 	beq.w	cc2a <_printf_float+0xb6>
    ce12:	f04f 0900 	mov.w	r9, #0
    ce16:	f104 0a1a 	add.w	sl, r4, #26
    ce1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce1c:	425b      	negs	r3, r3
    ce1e:	454b      	cmp	r3, r9
    ce20:	dc01      	bgt.n	ce26 <_printf_float+0x2b2>
    ce22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ce24:	e794      	b.n	cd50 <_printf_float+0x1dc>
    ce26:	2301      	movs	r3, #1
    ce28:	4652      	mov	r2, sl
    ce2a:	4631      	mov	r1, r6
    ce2c:	4628      	mov	r0, r5
    ce2e:	47b8      	blx	r7
    ce30:	3001      	adds	r0, #1
    ce32:	f43f aefa 	beq.w	cc2a <_printf_float+0xb6>
    ce36:	f109 0901 	add.w	r9, r9, #1
    ce3a:	e7ee      	b.n	ce1a <_printf_float+0x2a6>
    ce3c:	7fefffff 	.word	0x7fefffff
    ce40:	00057baa 	.word	0x00057baa
    ce44:	00057bae 	.word	0x00057bae
    ce48:	00057bb6 	.word	0x00057bb6
    ce4c:	00057bb2 	.word	0x00057bb2
    ce50:	00057bba 	.word	0x00057bba
    ce54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ce56:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ce58:	429a      	cmp	r2, r3
    ce5a:	bfa8      	it	ge
    ce5c:	461a      	movge	r2, r3
    ce5e:	2a00      	cmp	r2, #0
    ce60:	4691      	mov	r9, r2
    ce62:	dc37      	bgt.n	ced4 <_printf_float+0x360>
    ce64:	f04f 0b00 	mov.w	fp, #0
    ce68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    ce6c:	f104 021a 	add.w	r2, r4, #26
    ce70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
    ce74:	ebaa 0309 	sub.w	r3, sl, r9
    ce78:	455b      	cmp	r3, fp
    ce7a:	dc33      	bgt.n	cee4 <_printf_float+0x370>
    ce7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    ce80:	429a      	cmp	r2, r3
    ce82:	db3b      	blt.n	cefc <_printf_float+0x388>
    ce84:	6823      	ldr	r3, [r4, #0]
    ce86:	07da      	lsls	r2, r3, #31
    ce88:	d438      	bmi.n	cefc <_printf_float+0x388>
    ce8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ce8c:	990d      	ldr	r1, [sp, #52]	; 0x34
    ce8e:	eba2 030a 	sub.w	r3, r2, sl
    ce92:	eba2 0901 	sub.w	r9, r2, r1
    ce96:	4599      	cmp	r9, r3
    ce98:	bfa8      	it	ge
    ce9a:	4699      	movge	r9, r3
    ce9c:	f1b9 0f00 	cmp.w	r9, #0
    cea0:	dc34      	bgt.n	cf0c <_printf_float+0x398>
    cea2:	f04f 0800 	mov.w	r8, #0
    cea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    ceaa:	f104 0a1a 	add.w	sl, r4, #26
    ceae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    ceb2:	1a9b      	subs	r3, r3, r2
    ceb4:	eba3 0309 	sub.w	r3, r3, r9
    ceb8:	4543      	cmp	r3, r8
    ceba:	f77f af7b 	ble.w	cdb4 <_printf_float+0x240>
    cebe:	2301      	movs	r3, #1
    cec0:	4652      	mov	r2, sl
    cec2:	4631      	mov	r1, r6
    cec4:	4628      	mov	r0, r5
    cec6:	47b8      	blx	r7
    cec8:	3001      	adds	r0, #1
    ceca:	f43f aeae 	beq.w	cc2a <_printf_float+0xb6>
    cece:	f108 0801 	add.w	r8, r8, #1
    ced2:	e7ec      	b.n	ceae <_printf_float+0x33a>
    ced4:	4613      	mov	r3, r2
    ced6:	4631      	mov	r1, r6
    ced8:	4642      	mov	r2, r8
    ceda:	4628      	mov	r0, r5
    cedc:	47b8      	blx	r7
    cede:	3001      	adds	r0, #1
    cee0:	d1c0      	bne.n	ce64 <_printf_float+0x2f0>
    cee2:	e6a2      	b.n	cc2a <_printf_float+0xb6>
    cee4:	2301      	movs	r3, #1
    cee6:	4631      	mov	r1, r6
    cee8:	4628      	mov	r0, r5
    ceea:	920b      	str	r2, [sp, #44]	; 0x2c
    ceec:	47b8      	blx	r7
    ceee:	3001      	adds	r0, #1
    cef0:	f43f ae9b 	beq.w	cc2a <_printf_float+0xb6>
    cef4:	f10b 0b01 	add.w	fp, fp, #1
    cef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cefa:	e7b9      	b.n	ce70 <_printf_float+0x2fc>
    cefc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    cf00:	4631      	mov	r1, r6
    cf02:	4628      	mov	r0, r5
    cf04:	47b8      	blx	r7
    cf06:	3001      	adds	r0, #1
    cf08:	d1bf      	bne.n	ce8a <_printf_float+0x316>
    cf0a:	e68e      	b.n	cc2a <_printf_float+0xb6>
    cf0c:	464b      	mov	r3, r9
    cf0e:	eb08 020a 	add.w	r2, r8, sl
    cf12:	4631      	mov	r1, r6
    cf14:	4628      	mov	r0, r5
    cf16:	47b8      	blx	r7
    cf18:	3001      	adds	r0, #1
    cf1a:	d1c2      	bne.n	cea2 <_printf_float+0x32e>
    cf1c:	e685      	b.n	cc2a <_printf_float+0xb6>
    cf1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cf20:	2a01      	cmp	r2, #1
    cf22:	dc01      	bgt.n	cf28 <_printf_float+0x3b4>
    cf24:	07db      	lsls	r3, r3, #31
    cf26:	d537      	bpl.n	cf98 <_printf_float+0x424>
    cf28:	2301      	movs	r3, #1
    cf2a:	4642      	mov	r2, r8
    cf2c:	4631      	mov	r1, r6
    cf2e:	4628      	mov	r0, r5
    cf30:	47b8      	blx	r7
    cf32:	3001      	adds	r0, #1
    cf34:	f43f ae79 	beq.w	cc2a <_printf_float+0xb6>
    cf38:	4631      	mov	r1, r6
    cf3a:	4628      	mov	r0, r5
    cf3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    cf40:	47b8      	blx	r7
    cf42:	3001      	adds	r0, #1
    cf44:	f43f ae71 	beq.w	cc2a <_printf_float+0xb6>
    cf48:	2200      	movs	r2, #0
    cf4a:	2300      	movs	r3, #0
    cf4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    cf50:	f7f3 fd26 	bl	9a0 <__aeabi_dcmpeq>
    cf54:	b9d8      	cbnz	r0, cf8e <_printf_float+0x41a>
    cf56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf58:	f108 0201 	add.w	r2, r8, #1
    cf5c:	3b01      	subs	r3, #1
    cf5e:	4631      	mov	r1, r6
    cf60:	4628      	mov	r0, r5
    cf62:	47b8      	blx	r7
    cf64:	3001      	adds	r0, #1
    cf66:	d10e      	bne.n	cf86 <_printf_float+0x412>
    cf68:	e65f      	b.n	cc2a <_printf_float+0xb6>
    cf6a:	2301      	movs	r3, #1
    cf6c:	464a      	mov	r2, r9
    cf6e:	4631      	mov	r1, r6
    cf70:	4628      	mov	r0, r5
    cf72:	47b8      	blx	r7
    cf74:	3001      	adds	r0, #1
    cf76:	f43f ae58 	beq.w	cc2a <_printf_float+0xb6>
    cf7a:	f108 0801 	add.w	r8, r8, #1
    cf7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf80:	3b01      	subs	r3, #1
    cf82:	4543      	cmp	r3, r8
    cf84:	dcf1      	bgt.n	cf6a <_printf_float+0x3f6>
    cf86:	4653      	mov	r3, sl
    cf88:	f104 0250 	add.w	r2, r4, #80	; 0x50
    cf8c:	e6e1      	b.n	cd52 <_printf_float+0x1de>
    cf8e:	f04f 0800 	mov.w	r8, #0
    cf92:	f104 091a 	add.w	r9, r4, #26
    cf96:	e7f2      	b.n	cf7e <_printf_float+0x40a>
    cf98:	2301      	movs	r3, #1
    cf9a:	4642      	mov	r2, r8
    cf9c:	e7df      	b.n	cf5e <_printf_float+0x3ea>
    cf9e:	2301      	movs	r3, #1
    cfa0:	464a      	mov	r2, r9
    cfa2:	4631      	mov	r1, r6
    cfa4:	4628      	mov	r0, r5
    cfa6:	47b8      	blx	r7
    cfa8:	3001      	adds	r0, #1
    cfaa:	f43f ae3e 	beq.w	cc2a <_printf_float+0xb6>
    cfae:	f108 0801 	add.w	r8, r8, #1
    cfb2:	68e3      	ldr	r3, [r4, #12]
    cfb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cfb6:	1a5b      	subs	r3, r3, r1
    cfb8:	4543      	cmp	r3, r8
    cfba:	dcf0      	bgt.n	cf9e <_printf_float+0x42a>
    cfbc:	e6fe      	b.n	cdbc <_printf_float+0x248>
    cfbe:	f04f 0800 	mov.w	r8, #0
    cfc2:	f104 0919 	add.w	r9, r4, #25
    cfc6:	e7f4      	b.n	cfb2 <_printf_float+0x43e>

0000cfc8 <_printf_i>:
    cfc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    cfcc:	460c      	mov	r4, r1
    cfce:	4691      	mov	r9, r2
    cfd0:	4680      	mov	r8, r0
    cfd2:	469a      	mov	sl, r3
    cfd4:	7e27      	ldrb	r7, [r4, #24]
    cfd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    cfda:	990c      	ldr	r1, [sp, #48]	; 0x30
    cfdc:	2f78      	cmp	r7, #120	; 0x78
    cfde:	d807      	bhi.n	cff0 <_printf_i+0x28>
    cfe0:	2f62      	cmp	r7, #98	; 0x62
    cfe2:	d80a      	bhi.n	cffa <_printf_i+0x32>
    cfe4:	2f00      	cmp	r7, #0
    cfe6:	f000 80d8 	beq.w	d19a <_printf_i+0x1d2>
    cfea:	2f58      	cmp	r7, #88	; 0x58
    cfec:	f000 80a3 	beq.w	d136 <_printf_i+0x16e>
    cff0:	f104 0642 	add.w	r6, r4, #66	; 0x42
    cff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    cff8:	e03a      	b.n	d070 <_printf_i+0xa8>
    cffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    cffe:	2b15      	cmp	r3, #21
    d000:	d8f6      	bhi.n	cff0 <_printf_i+0x28>
    d002:	a001      	add	r0, pc, #4	; (adr r0, d008 <_printf_i+0x40>)
    d004:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    d008:	0000d061 	.word	0x0000d061
    d00c:	0000d075 	.word	0x0000d075
    d010:	0000cff1 	.word	0x0000cff1
    d014:	0000cff1 	.word	0x0000cff1
    d018:	0000cff1 	.word	0x0000cff1
    d01c:	0000cff1 	.word	0x0000cff1
    d020:	0000d075 	.word	0x0000d075
    d024:	0000cff1 	.word	0x0000cff1
    d028:	0000cff1 	.word	0x0000cff1
    d02c:	0000cff1 	.word	0x0000cff1
    d030:	0000cff1 	.word	0x0000cff1
    d034:	0000d181 	.word	0x0000d181
    d038:	0000d0a5 	.word	0x0000d0a5
    d03c:	0000d163 	.word	0x0000d163
    d040:	0000cff1 	.word	0x0000cff1
    d044:	0000cff1 	.word	0x0000cff1
    d048:	0000d1a3 	.word	0x0000d1a3
    d04c:	0000cff1 	.word	0x0000cff1
    d050:	0000d0a5 	.word	0x0000d0a5
    d054:	0000cff1 	.word	0x0000cff1
    d058:	0000cff1 	.word	0x0000cff1
    d05c:	0000d16b 	.word	0x0000d16b
    d060:	680b      	ldr	r3, [r1, #0]
    d062:	f104 0642 	add.w	r6, r4, #66	; 0x42
    d066:	1d1a      	adds	r2, r3, #4
    d068:	681b      	ldr	r3, [r3, #0]
    d06a:	600a      	str	r2, [r1, #0]
    d06c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d070:	2301      	movs	r3, #1
    d072:	e0a3      	b.n	d1bc <_printf_i+0x1f4>
    d074:	6825      	ldr	r5, [r4, #0]
    d076:	6808      	ldr	r0, [r1, #0]
    d078:	062e      	lsls	r6, r5, #24
    d07a:	f100 0304 	add.w	r3, r0, #4
    d07e:	d50a      	bpl.n	d096 <_printf_i+0xce>
    d080:	6805      	ldr	r5, [r0, #0]
    d082:	600b      	str	r3, [r1, #0]
    d084:	2d00      	cmp	r5, #0
    d086:	da03      	bge.n	d090 <_printf_i+0xc8>
    d088:	232d      	movs	r3, #45	; 0x2d
    d08a:	426d      	negs	r5, r5
    d08c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d090:	485e      	ldr	r0, [pc, #376]	; (d20c <_printf_i+0x244>)
    d092:	230a      	movs	r3, #10
    d094:	e019      	b.n	d0ca <_printf_i+0x102>
    d096:	f015 0f40 	tst.w	r5, #64	; 0x40
    d09a:	6805      	ldr	r5, [r0, #0]
    d09c:	600b      	str	r3, [r1, #0]
    d09e:	bf18      	it	ne
    d0a0:	b22d      	sxthne	r5, r5
    d0a2:	e7ef      	b.n	d084 <_printf_i+0xbc>
    d0a4:	680b      	ldr	r3, [r1, #0]
    d0a6:	6825      	ldr	r5, [r4, #0]
    d0a8:	1d18      	adds	r0, r3, #4
    d0aa:	6008      	str	r0, [r1, #0]
    d0ac:	0628      	lsls	r0, r5, #24
    d0ae:	d501      	bpl.n	d0b4 <_printf_i+0xec>
    d0b0:	681d      	ldr	r5, [r3, #0]
    d0b2:	e002      	b.n	d0ba <_printf_i+0xf2>
    d0b4:	0669      	lsls	r1, r5, #25
    d0b6:	d5fb      	bpl.n	d0b0 <_printf_i+0xe8>
    d0b8:	881d      	ldrh	r5, [r3, #0]
    d0ba:	2f6f      	cmp	r7, #111	; 0x6f
    d0bc:	4853      	ldr	r0, [pc, #332]	; (d20c <_printf_i+0x244>)
    d0be:	bf0c      	ite	eq
    d0c0:	2308      	moveq	r3, #8
    d0c2:	230a      	movne	r3, #10
    d0c4:	2100      	movs	r1, #0
    d0c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    d0ca:	6866      	ldr	r6, [r4, #4]
    d0cc:	2e00      	cmp	r6, #0
    d0ce:	60a6      	str	r6, [r4, #8]
    d0d0:	bfa2      	ittt	ge
    d0d2:	6821      	ldrge	r1, [r4, #0]
    d0d4:	f021 0104 	bicge.w	r1, r1, #4
    d0d8:	6021      	strge	r1, [r4, #0]
    d0da:	b90d      	cbnz	r5, d0e0 <_printf_i+0x118>
    d0dc:	2e00      	cmp	r6, #0
    d0de:	d04d      	beq.n	d17c <_printf_i+0x1b4>
    d0e0:	4616      	mov	r6, r2
    d0e2:	fbb5 f1f3 	udiv	r1, r5, r3
    d0e6:	fb03 5711 	mls	r7, r3, r1, r5
    d0ea:	5dc7      	ldrb	r7, [r0, r7]
    d0ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
    d0f0:	462f      	mov	r7, r5
    d0f2:	460d      	mov	r5, r1
    d0f4:	42bb      	cmp	r3, r7
    d0f6:	d9f4      	bls.n	d0e2 <_printf_i+0x11a>
    d0f8:	2b08      	cmp	r3, #8
    d0fa:	d10b      	bne.n	d114 <_printf_i+0x14c>
    d0fc:	6823      	ldr	r3, [r4, #0]
    d0fe:	07df      	lsls	r7, r3, #31
    d100:	d508      	bpl.n	d114 <_printf_i+0x14c>
    d102:	6923      	ldr	r3, [r4, #16]
    d104:	6861      	ldr	r1, [r4, #4]
    d106:	4299      	cmp	r1, r3
    d108:	bfde      	ittt	le
    d10a:	2330      	movle	r3, #48	; 0x30
    d10c:	f806 3c01 	strble.w	r3, [r6, #-1]
    d110:	f106 36ff 	addle.w	r6, r6, #4294967295
    d114:	1b92      	subs	r2, r2, r6
    d116:	6122      	str	r2, [r4, #16]
    d118:	464b      	mov	r3, r9
    d11a:	aa03      	add	r2, sp, #12
    d11c:	4621      	mov	r1, r4
    d11e:	4640      	mov	r0, r8
    d120:	f8cd a000 	str.w	sl, [sp]
    d124:	f003 f911 	bl	1034a <_printf_common>
    d128:	3001      	adds	r0, #1
    d12a:	d14c      	bne.n	d1c6 <_printf_i+0x1fe>
    d12c:	f04f 30ff 	mov.w	r0, #4294967295
    d130:	b004      	add	sp, #16
    d132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d136:	4835      	ldr	r0, [pc, #212]	; (d20c <_printf_i+0x244>)
    d138:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    d13c:	6823      	ldr	r3, [r4, #0]
    d13e:	680e      	ldr	r6, [r1, #0]
    d140:	061f      	lsls	r7, r3, #24
    d142:	f856 5b04 	ldr.w	r5, [r6], #4
    d146:	600e      	str	r6, [r1, #0]
    d148:	d514      	bpl.n	d174 <_printf_i+0x1ac>
    d14a:	07d9      	lsls	r1, r3, #31
    d14c:	bf44      	itt	mi
    d14e:	f043 0320 	orrmi.w	r3, r3, #32
    d152:	6023      	strmi	r3, [r4, #0]
    d154:	b91d      	cbnz	r5, d15e <_printf_i+0x196>
    d156:	6823      	ldr	r3, [r4, #0]
    d158:	f023 0320 	bic.w	r3, r3, #32
    d15c:	6023      	str	r3, [r4, #0]
    d15e:	2310      	movs	r3, #16
    d160:	e7b0      	b.n	d0c4 <_printf_i+0xfc>
    d162:	6823      	ldr	r3, [r4, #0]
    d164:	f043 0320 	orr.w	r3, r3, #32
    d168:	6023      	str	r3, [r4, #0]
    d16a:	2378      	movs	r3, #120	; 0x78
    d16c:	4828      	ldr	r0, [pc, #160]	; (d210 <_printf_i+0x248>)
    d16e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    d172:	e7e3      	b.n	d13c <_printf_i+0x174>
    d174:	065e      	lsls	r6, r3, #25
    d176:	bf48      	it	mi
    d178:	b2ad      	uxthmi	r5, r5
    d17a:	e7e6      	b.n	d14a <_printf_i+0x182>
    d17c:	4616      	mov	r6, r2
    d17e:	e7bb      	b.n	d0f8 <_printf_i+0x130>
    d180:	680b      	ldr	r3, [r1, #0]
    d182:	6826      	ldr	r6, [r4, #0]
    d184:	1d1d      	adds	r5, r3, #4
    d186:	6960      	ldr	r0, [r4, #20]
    d188:	600d      	str	r5, [r1, #0]
    d18a:	0635      	lsls	r5, r6, #24
    d18c:	681b      	ldr	r3, [r3, #0]
    d18e:	d501      	bpl.n	d194 <_printf_i+0x1cc>
    d190:	6018      	str	r0, [r3, #0]
    d192:	e002      	b.n	d19a <_printf_i+0x1d2>
    d194:	0671      	lsls	r1, r6, #25
    d196:	d5fb      	bpl.n	d190 <_printf_i+0x1c8>
    d198:	8018      	strh	r0, [r3, #0]
    d19a:	2300      	movs	r3, #0
    d19c:	4616      	mov	r6, r2
    d19e:	6123      	str	r3, [r4, #16]
    d1a0:	e7ba      	b.n	d118 <_printf_i+0x150>
    d1a2:	680b      	ldr	r3, [r1, #0]
    d1a4:	1d1a      	adds	r2, r3, #4
    d1a6:	600a      	str	r2, [r1, #0]
    d1a8:	2100      	movs	r1, #0
    d1aa:	681e      	ldr	r6, [r3, #0]
    d1ac:	6862      	ldr	r2, [r4, #4]
    d1ae:	4630      	mov	r0, r6
    d1b0:	f002 ffe3 	bl	1017a <memchr>
    d1b4:	b108      	cbz	r0, d1ba <_printf_i+0x1f2>
    d1b6:	1b80      	subs	r0, r0, r6
    d1b8:	6060      	str	r0, [r4, #4]
    d1ba:	6863      	ldr	r3, [r4, #4]
    d1bc:	6123      	str	r3, [r4, #16]
    d1be:	2300      	movs	r3, #0
    d1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d1c4:	e7a8      	b.n	d118 <_printf_i+0x150>
    d1c6:	6923      	ldr	r3, [r4, #16]
    d1c8:	4632      	mov	r2, r6
    d1ca:	4649      	mov	r1, r9
    d1cc:	4640      	mov	r0, r8
    d1ce:	47d0      	blx	sl
    d1d0:	3001      	adds	r0, #1
    d1d2:	d0ab      	beq.n	d12c <_printf_i+0x164>
    d1d4:	6823      	ldr	r3, [r4, #0]
    d1d6:	079b      	lsls	r3, r3, #30
    d1d8:	d413      	bmi.n	d202 <_printf_i+0x23a>
    d1da:	68e0      	ldr	r0, [r4, #12]
    d1dc:	9b03      	ldr	r3, [sp, #12]
    d1de:	4298      	cmp	r0, r3
    d1e0:	bfb8      	it	lt
    d1e2:	4618      	movlt	r0, r3
    d1e4:	e7a4      	b.n	d130 <_printf_i+0x168>
    d1e6:	2301      	movs	r3, #1
    d1e8:	4632      	mov	r2, r6
    d1ea:	4649      	mov	r1, r9
    d1ec:	4640      	mov	r0, r8
    d1ee:	47d0      	blx	sl
    d1f0:	3001      	adds	r0, #1
    d1f2:	d09b      	beq.n	d12c <_printf_i+0x164>
    d1f4:	3501      	adds	r5, #1
    d1f6:	68e3      	ldr	r3, [r4, #12]
    d1f8:	9903      	ldr	r1, [sp, #12]
    d1fa:	1a5b      	subs	r3, r3, r1
    d1fc:	42ab      	cmp	r3, r5
    d1fe:	dcf2      	bgt.n	d1e6 <_printf_i+0x21e>
    d200:	e7eb      	b.n	d1da <_printf_i+0x212>
    d202:	2500      	movs	r5, #0
    d204:	f104 0619 	add.w	r6, r4, #25
    d208:	e7f5      	b.n	d1f6 <_printf_i+0x22e>
    d20a:	bf00      	nop
    d20c:	00057bbc 	.word	0x00057bbc
    d210:	00057bcd 	.word	0x00057bcd

0000d214 <_sbrk_r>:
    d214:	b538      	push	{r3, r4, r5, lr}
    d216:	2300      	movs	r3, #0
    d218:	4d05      	ldr	r5, [pc, #20]	; (d230 <_sbrk_r+0x1c>)
    d21a:	4604      	mov	r4, r0
    d21c:	4608      	mov	r0, r1
    d21e:	602b      	str	r3, [r5, #0]
    d220:	f7f7 f9fc 	bl	461c <_sbrk>
    d224:	1c43      	adds	r3, r0, #1
    d226:	d102      	bne.n	d22e <_sbrk_r+0x1a>
    d228:	682b      	ldr	r3, [r5, #0]
    d22a:	b103      	cbz	r3, d22e <_sbrk_r+0x1a>
    d22c:	6023      	str	r3, [r4, #0]
    d22e:	bd38      	pop	{r3, r4, r5, pc}
    d230:	2001b85c 	.word	0x2001b85c

0000d234 <raise>:
    d234:	4b02      	ldr	r3, [pc, #8]	; (d240 <raise+0xc>)
    d236:	4601      	mov	r1, r0
    d238:	6818      	ldr	r0, [r3, #0]
    d23a:	f003 b8f6 	b.w	1042a <_raise_r>
    d23e:	bf00      	nop
    d240:	200000d0 	.word	0x200000d0

0000d244 <_kill_r>:
    d244:	b538      	push	{r3, r4, r5, lr}
    d246:	2300      	movs	r3, #0
    d248:	4d06      	ldr	r5, [pc, #24]	; (d264 <_kill_r+0x20>)
    d24a:	4604      	mov	r4, r0
    d24c:	4608      	mov	r0, r1
    d24e:	4611      	mov	r1, r2
    d250:	602b      	str	r3, [r5, #0]
    d252:	f001 f9fe 	bl	e652 <_kill>
    d256:	1c43      	adds	r3, r0, #1
    d258:	d102      	bne.n	d260 <_kill_r+0x1c>
    d25a:	682b      	ldr	r3, [r5, #0]
    d25c:	b103      	cbz	r3, d260 <_kill_r+0x1c>
    d25e:	6023      	str	r3, [r4, #0]
    d260:	bd38      	pop	{r3, r4, r5, pc}
    d262:	bf00      	nop
    d264:	2001b85c 	.word	0x2001b85c

0000d268 <strtok>:
    d268:	4b13      	ldr	r3, [pc, #76]	; (d2b8 <strtok+0x50>)
    d26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d26e:	681f      	ldr	r7, [r3, #0]
    d270:	4605      	mov	r5, r0
    d272:	460e      	mov	r6, r1
    d274:	6dbc      	ldr	r4, [r7, #88]	; 0x58
    d276:	b9b4      	cbnz	r4, d2a6 <strtok+0x3e>
    d278:	2050      	movs	r0, #80	; 0x50
    d27a:	f7ff fa93 	bl	c7a4 <malloc>
    d27e:	65b8      	str	r0, [r7, #88]	; 0x58
    d280:	6184      	str	r4, [r0, #24]
    d282:	7704      	strb	r4, [r0, #28]
    d284:	6244      	str	r4, [r0, #36]	; 0x24
    d286:	e9c0 4400 	strd	r4, r4, [r0]
    d28a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    d28e:	e9c0 4404 	strd	r4, r4, [r0, #16]
    d292:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
    d296:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
    d29a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
    d29e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
    d2a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    d2a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    d2a8:	4631      	mov	r1, r6
    d2aa:	4628      	mov	r0, r5
    d2ac:	2301      	movs	r3, #1
    d2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d2b2:	f003 b916 	b.w	104e2 <__strtok_r>
    d2b6:	bf00      	nop
    d2b8:	200000d0 	.word	0x200000d0

0000d2bc <_strtol_l.isra.0>:
    d2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2c0:	468c      	mov	ip, r1
    d2c2:	4686      	mov	lr, r0
    d2c4:	4e38      	ldr	r6, [pc, #224]	; (d3a8 <_strtol_l.isra.0+0xec>)
    d2c6:	4660      	mov	r0, ip
    d2c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
    d2cc:	5da5      	ldrb	r5, [r4, r6]
    d2ce:	f015 0508 	ands.w	r5, r5, #8
    d2d2:	d1f8      	bne.n	d2c6 <_strtol_l.isra.0+0xa>
    d2d4:	2c2d      	cmp	r4, #45	; 0x2d
    d2d6:	d133      	bne.n	d340 <_strtol_l.isra.0+0x84>
    d2d8:	f89c 4000 	ldrb.w	r4, [ip]
    d2dc:	f04f 0801 	mov.w	r8, #1
    d2e0:	f100 0c02 	add.w	ip, r0, #2
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d05b      	beq.n	d3a0 <_strtol_l.isra.0+0xe4>
    d2e8:	2b10      	cmp	r3, #16
    d2ea:	d10c      	bne.n	d306 <_strtol_l.isra.0+0x4a>
    d2ec:	2c30      	cmp	r4, #48	; 0x30
    d2ee:	d10a      	bne.n	d306 <_strtol_l.isra.0+0x4a>
    d2f0:	f89c 0000 	ldrb.w	r0, [ip]
    d2f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    d2f8:	2858      	cmp	r0, #88	; 0x58
    d2fa:	d14c      	bne.n	d396 <_strtol_l.isra.0+0xda>
    d2fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
    d300:	2310      	movs	r3, #16
    d302:	f10c 0c02 	add.w	ip, ip, #2
    d306:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
    d30a:	2600      	movs	r6, #0
    d30c:	3f01      	subs	r7, #1
    d30e:	4630      	mov	r0, r6
    d310:	fbb7 f9f3 	udiv	r9, r7, r3
    d314:	fb03 7a19 	mls	sl, r3, r9, r7
    d318:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
    d31c:	2d09      	cmp	r5, #9
    d31e:	d817      	bhi.n	d350 <_strtol_l.isra.0+0x94>
    d320:	462c      	mov	r4, r5
    d322:	42a3      	cmp	r3, r4
    d324:	dd23      	ble.n	d36e <_strtol_l.isra.0+0xb2>
    d326:	1c75      	adds	r5, r6, #1
    d328:	d007      	beq.n	d33a <_strtol_l.isra.0+0x7e>
    d32a:	4581      	cmp	r9, r0
    d32c:	d31c      	bcc.n	d368 <_strtol_l.isra.0+0xac>
    d32e:	d101      	bne.n	d334 <_strtol_l.isra.0+0x78>
    d330:	45a2      	cmp	sl, r4
    d332:	db19      	blt.n	d368 <_strtol_l.isra.0+0xac>
    d334:	fb00 4003 	mla	r0, r0, r3, r4
    d338:	2601      	movs	r6, #1
    d33a:	f81c 4b01 	ldrb.w	r4, [ip], #1
    d33e:	e7eb      	b.n	d318 <_strtol_l.isra.0+0x5c>
    d340:	2c2b      	cmp	r4, #43	; 0x2b
    d342:	46a8      	mov	r8, r5
    d344:	bf04      	itt	eq
    d346:	f89c 4000 	ldrbeq.w	r4, [ip]
    d34a:	f100 0c02 	addeq.w	ip, r0, #2
    d34e:	e7c9      	b.n	d2e4 <_strtol_l.isra.0+0x28>
    d350:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
    d354:	2d19      	cmp	r5, #25
    d356:	d801      	bhi.n	d35c <_strtol_l.isra.0+0xa0>
    d358:	3c37      	subs	r4, #55	; 0x37
    d35a:	e7e2      	b.n	d322 <_strtol_l.isra.0+0x66>
    d35c:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
    d360:	2d19      	cmp	r5, #25
    d362:	d804      	bhi.n	d36e <_strtol_l.isra.0+0xb2>
    d364:	3c57      	subs	r4, #87	; 0x57
    d366:	e7dc      	b.n	d322 <_strtol_l.isra.0+0x66>
    d368:	f04f 36ff 	mov.w	r6, #4294967295
    d36c:	e7e5      	b.n	d33a <_strtol_l.isra.0+0x7e>
    d36e:	1c73      	adds	r3, r6, #1
    d370:	d106      	bne.n	d380 <_strtol_l.isra.0+0xc4>
    d372:	2322      	movs	r3, #34	; 0x22
    d374:	4638      	mov	r0, r7
    d376:	f8ce 3000 	str.w	r3, [lr]
    d37a:	b942      	cbnz	r2, d38e <_strtol_l.isra.0+0xd2>
    d37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d380:	f1b8 0f00 	cmp.w	r8, #0
    d384:	d000      	beq.n	d388 <_strtol_l.isra.0+0xcc>
    d386:	4240      	negs	r0, r0
    d388:	2a00      	cmp	r2, #0
    d38a:	d0f7      	beq.n	d37c <_strtol_l.isra.0+0xc0>
    d38c:	b10e      	cbz	r6, d392 <_strtol_l.isra.0+0xd6>
    d38e:	f10c 31ff 	add.w	r1, ip, #4294967295
    d392:	6011      	str	r1, [r2, #0]
    d394:	e7f2      	b.n	d37c <_strtol_l.isra.0+0xc0>
    d396:	2430      	movs	r4, #48	; 0x30
    d398:	2b00      	cmp	r3, #0
    d39a:	d1b4      	bne.n	d306 <_strtol_l.isra.0+0x4a>
    d39c:	2308      	movs	r3, #8
    d39e:	e7b2      	b.n	d306 <_strtol_l.isra.0+0x4a>
    d3a0:	2c30      	cmp	r4, #48	; 0x30
    d3a2:	d0a5      	beq.n	d2f0 <_strtol_l.isra.0+0x34>
    d3a4:	230a      	movs	r3, #10
    d3a6:	e7ae      	b.n	d306 <_strtol_l.isra.0+0x4a>
    d3a8:	00057a99 	.word	0x00057a99

0000d3ac <strtol>:
    d3ac:	4613      	mov	r3, r2
    d3ae:	460a      	mov	r2, r1
    d3b0:	4601      	mov	r1, r0
    d3b2:	4802      	ldr	r0, [pc, #8]	; (d3bc <strtol+0x10>)
    d3b4:	6800      	ldr	r0, [r0, #0]
    d3b6:	f7ff bf81 	b.w	d2bc <_strtol_l.isra.0>
    d3ba:	bf00      	nop
    d3bc:	200000d0 	.word	0x200000d0

0000d3c0 <viprintf>:
    d3c0:	4b09      	ldr	r3, [pc, #36]	; (d3e8 <viprintf+0x28>)
    d3c2:	b570      	push	{r4, r5, r6, lr}
    d3c4:	681c      	ldr	r4, [r3, #0]
    d3c6:	4605      	mov	r5, r0
    d3c8:	460e      	mov	r6, r1
    d3ca:	b124      	cbz	r4, d3d6 <viprintf+0x16>
    d3cc:	69a3      	ldr	r3, [r4, #24]
    d3ce:	b913      	cbnz	r3, d3d6 <viprintf+0x16>
    d3d0:	4620      	mov	r0, r4
    d3d2:	f000 f9cd 	bl	d770 <__sinit>
    d3d6:	4633      	mov	r3, r6
    d3d8:	462a      	mov	r2, r5
    d3da:	68a1      	ldr	r1, [r4, #8]
    d3dc:	4620      	mov	r0, r4
    d3de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d3e2:	f7ff ba97 	b.w	c914 <_vfiprintf_r>
    d3e6:	bf00      	nop
    d3e8:	200000d0 	.word	0x200000d0

0000d3ec <__swbuf_r>:
    d3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3ee:	460e      	mov	r6, r1
    d3f0:	4614      	mov	r4, r2
    d3f2:	4605      	mov	r5, r0
    d3f4:	b118      	cbz	r0, d3fe <__swbuf_r+0x12>
    d3f6:	6983      	ldr	r3, [r0, #24]
    d3f8:	b90b      	cbnz	r3, d3fe <__swbuf_r+0x12>
    d3fa:	f000 f9b9 	bl	d770 <__sinit>
    d3fe:	4b21      	ldr	r3, [pc, #132]	; (d484 <__swbuf_r+0x98>)
    d400:	429c      	cmp	r4, r3
    d402:	d12b      	bne.n	d45c <__swbuf_r+0x70>
    d404:	686c      	ldr	r4, [r5, #4]
    d406:	69a3      	ldr	r3, [r4, #24]
    d408:	60a3      	str	r3, [r4, #8]
    d40a:	89a3      	ldrh	r3, [r4, #12]
    d40c:	071a      	lsls	r2, r3, #28
    d40e:	d52f      	bpl.n	d470 <__swbuf_r+0x84>
    d410:	6923      	ldr	r3, [r4, #16]
    d412:	b36b      	cbz	r3, d470 <__swbuf_r+0x84>
    d414:	6923      	ldr	r3, [r4, #16]
    d416:	b2f6      	uxtb	r6, r6
    d418:	6820      	ldr	r0, [r4, #0]
    d41a:	4637      	mov	r7, r6
    d41c:	1ac0      	subs	r0, r0, r3
    d41e:	6963      	ldr	r3, [r4, #20]
    d420:	4283      	cmp	r3, r0
    d422:	dc04      	bgt.n	d42e <__swbuf_r+0x42>
    d424:	4621      	mov	r1, r4
    d426:	4628      	mov	r0, r5
    d428:	f000 f924 	bl	d674 <_fflush_r>
    d42c:	bb30      	cbnz	r0, d47c <__swbuf_r+0x90>
    d42e:	68a3      	ldr	r3, [r4, #8]
    d430:	3001      	adds	r0, #1
    d432:	3b01      	subs	r3, #1
    d434:	60a3      	str	r3, [r4, #8]
    d436:	6823      	ldr	r3, [r4, #0]
    d438:	1c5a      	adds	r2, r3, #1
    d43a:	6022      	str	r2, [r4, #0]
    d43c:	701e      	strb	r6, [r3, #0]
    d43e:	6963      	ldr	r3, [r4, #20]
    d440:	4283      	cmp	r3, r0
    d442:	d004      	beq.n	d44e <__swbuf_r+0x62>
    d444:	89a3      	ldrh	r3, [r4, #12]
    d446:	07db      	lsls	r3, r3, #31
    d448:	d506      	bpl.n	d458 <__swbuf_r+0x6c>
    d44a:	2e0a      	cmp	r6, #10
    d44c:	d104      	bne.n	d458 <__swbuf_r+0x6c>
    d44e:	4621      	mov	r1, r4
    d450:	4628      	mov	r0, r5
    d452:	f000 f90f 	bl	d674 <_fflush_r>
    d456:	b988      	cbnz	r0, d47c <__swbuf_r+0x90>
    d458:	4638      	mov	r0, r7
    d45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d45c:	4b0a      	ldr	r3, [pc, #40]	; (d488 <__swbuf_r+0x9c>)
    d45e:	429c      	cmp	r4, r3
    d460:	d101      	bne.n	d466 <__swbuf_r+0x7a>
    d462:	68ac      	ldr	r4, [r5, #8]
    d464:	e7cf      	b.n	d406 <__swbuf_r+0x1a>
    d466:	4b09      	ldr	r3, [pc, #36]	; (d48c <__swbuf_r+0xa0>)
    d468:	429c      	cmp	r4, r3
    d46a:	bf08      	it	eq
    d46c:	68ec      	ldreq	r4, [r5, #12]
    d46e:	e7ca      	b.n	d406 <__swbuf_r+0x1a>
    d470:	4621      	mov	r1, r4
    d472:	4628      	mov	r0, r5
    d474:	f000 f80c 	bl	d490 <__swsetup_r>
    d478:	2800      	cmp	r0, #0
    d47a:	d0cb      	beq.n	d414 <__swbuf_r+0x28>
    d47c:	f04f 37ff 	mov.w	r7, #4294967295
    d480:	e7ea      	b.n	d458 <__swbuf_r+0x6c>
    d482:	bf00      	nop
    d484:	00057a10 	.word	0x00057a10
    d488:	00057a30 	.word	0x00057a30
    d48c:	000579f0 	.word	0x000579f0

0000d490 <__swsetup_r>:
    d490:	4b32      	ldr	r3, [pc, #200]	; (d55c <__swsetup_r+0xcc>)
    d492:	b570      	push	{r4, r5, r6, lr}
    d494:	681d      	ldr	r5, [r3, #0]
    d496:	4606      	mov	r6, r0
    d498:	460c      	mov	r4, r1
    d49a:	b125      	cbz	r5, d4a6 <__swsetup_r+0x16>
    d49c:	69ab      	ldr	r3, [r5, #24]
    d49e:	b913      	cbnz	r3, d4a6 <__swsetup_r+0x16>
    d4a0:	4628      	mov	r0, r5
    d4a2:	f000 f965 	bl	d770 <__sinit>
    d4a6:	4b2e      	ldr	r3, [pc, #184]	; (d560 <__swsetup_r+0xd0>)
    d4a8:	429c      	cmp	r4, r3
    d4aa:	d10f      	bne.n	d4cc <__swsetup_r+0x3c>
    d4ac:	686c      	ldr	r4, [r5, #4]
    d4ae:	89a3      	ldrh	r3, [r4, #12]
    d4b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    d4b4:	0719      	lsls	r1, r3, #28
    d4b6:	d42c      	bmi.n	d512 <__swsetup_r+0x82>
    d4b8:	06dd      	lsls	r5, r3, #27
    d4ba:	d411      	bmi.n	d4e0 <__swsetup_r+0x50>
    d4bc:	2309      	movs	r3, #9
    d4be:	6033      	str	r3, [r6, #0]
    d4c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    d4c4:	f04f 30ff 	mov.w	r0, #4294967295
    d4c8:	81a3      	strh	r3, [r4, #12]
    d4ca:	e03e      	b.n	d54a <__swsetup_r+0xba>
    d4cc:	4b25      	ldr	r3, [pc, #148]	; (d564 <__swsetup_r+0xd4>)
    d4ce:	429c      	cmp	r4, r3
    d4d0:	d101      	bne.n	d4d6 <__swsetup_r+0x46>
    d4d2:	68ac      	ldr	r4, [r5, #8]
    d4d4:	e7eb      	b.n	d4ae <__swsetup_r+0x1e>
    d4d6:	4b24      	ldr	r3, [pc, #144]	; (d568 <__swsetup_r+0xd8>)
    d4d8:	429c      	cmp	r4, r3
    d4da:	bf08      	it	eq
    d4dc:	68ec      	ldreq	r4, [r5, #12]
    d4de:	e7e6      	b.n	d4ae <__swsetup_r+0x1e>
    d4e0:	0758      	lsls	r0, r3, #29
    d4e2:	d512      	bpl.n	d50a <__swsetup_r+0x7a>
    d4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d4e6:	b141      	cbz	r1, d4fa <__swsetup_r+0x6a>
    d4e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d4ec:	4299      	cmp	r1, r3
    d4ee:	d002      	beq.n	d4f6 <__swsetup_r+0x66>
    d4f0:	4630      	mov	r0, r6
    d4f2:	f7ff f967 	bl	c7c4 <_free_r>
    d4f6:	2300      	movs	r3, #0
    d4f8:	6363      	str	r3, [r4, #52]	; 0x34
    d4fa:	89a3      	ldrh	r3, [r4, #12]
    d4fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    d500:	81a3      	strh	r3, [r4, #12]
    d502:	2300      	movs	r3, #0
    d504:	6063      	str	r3, [r4, #4]
    d506:	6923      	ldr	r3, [r4, #16]
    d508:	6023      	str	r3, [r4, #0]
    d50a:	89a3      	ldrh	r3, [r4, #12]
    d50c:	f043 0308 	orr.w	r3, r3, #8
    d510:	81a3      	strh	r3, [r4, #12]
    d512:	6923      	ldr	r3, [r4, #16]
    d514:	b94b      	cbnz	r3, d52a <__swsetup_r+0x9a>
    d516:	89a3      	ldrh	r3, [r4, #12]
    d518:	f403 7320 	and.w	r3, r3, #640	; 0x280
    d51c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d520:	d003      	beq.n	d52a <__swsetup_r+0x9a>
    d522:	4621      	mov	r1, r4
    d524:	4630      	mov	r0, r6
    d526:	f000 f9a5 	bl	d874 <__smakebuf_r>
    d52a:	89a0      	ldrh	r0, [r4, #12]
    d52c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    d530:	f010 0301 	ands.w	r3, r0, #1
    d534:	d00a      	beq.n	d54c <__swsetup_r+0xbc>
    d536:	2300      	movs	r3, #0
    d538:	60a3      	str	r3, [r4, #8]
    d53a:	6963      	ldr	r3, [r4, #20]
    d53c:	425b      	negs	r3, r3
    d53e:	61a3      	str	r3, [r4, #24]
    d540:	6923      	ldr	r3, [r4, #16]
    d542:	b943      	cbnz	r3, d556 <__swsetup_r+0xc6>
    d544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    d548:	d1ba      	bne.n	d4c0 <__swsetup_r+0x30>
    d54a:	bd70      	pop	{r4, r5, r6, pc}
    d54c:	0781      	lsls	r1, r0, #30
    d54e:	bf58      	it	pl
    d550:	6963      	ldrpl	r3, [r4, #20]
    d552:	60a3      	str	r3, [r4, #8]
    d554:	e7f4      	b.n	d540 <__swsetup_r+0xb0>
    d556:	2000      	movs	r0, #0
    d558:	e7f7      	b.n	d54a <__swsetup_r+0xba>
    d55a:	bf00      	nop
    d55c:	200000d0 	.word	0x200000d0
    d560:	00057a10 	.word	0x00057a10
    d564:	00057a30 	.word	0x00057a30
    d568:	000579f0 	.word	0x000579f0

0000d56c <__sflush_r>:
    d56c:	898a      	ldrh	r2, [r1, #12]
    d56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d572:	4605      	mov	r5, r0
    d574:	0710      	lsls	r0, r2, #28
    d576:	460c      	mov	r4, r1
    d578:	d458      	bmi.n	d62c <__sflush_r+0xc0>
    d57a:	684b      	ldr	r3, [r1, #4]
    d57c:	2b00      	cmp	r3, #0
    d57e:	dc05      	bgt.n	d58c <__sflush_r+0x20>
    d580:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d582:	2b00      	cmp	r3, #0
    d584:	dc02      	bgt.n	d58c <__sflush_r+0x20>
    d586:	2000      	movs	r0, #0
    d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d58c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d58e:	2e00      	cmp	r6, #0
    d590:	d0f9      	beq.n	d586 <__sflush_r+0x1a>
    d592:	2300      	movs	r3, #0
    d594:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    d598:	682f      	ldr	r7, [r5, #0]
    d59a:	602b      	str	r3, [r5, #0]
    d59c:	d032      	beq.n	d604 <__sflush_r+0x98>
    d59e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d5a0:	89a3      	ldrh	r3, [r4, #12]
    d5a2:	075a      	lsls	r2, r3, #29
    d5a4:	d505      	bpl.n	d5b2 <__sflush_r+0x46>
    d5a6:	6863      	ldr	r3, [r4, #4]
    d5a8:	1ac0      	subs	r0, r0, r3
    d5aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d5ac:	b10b      	cbz	r3, d5b2 <__sflush_r+0x46>
    d5ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d5b0:	1ac0      	subs	r0, r0, r3
    d5b2:	2300      	movs	r3, #0
    d5b4:	4602      	mov	r2, r0
    d5b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d5b8:	4628      	mov	r0, r5
    d5ba:	6a21      	ldr	r1, [r4, #32]
    d5bc:	47b0      	blx	r6
    d5be:	1c43      	adds	r3, r0, #1
    d5c0:	89a3      	ldrh	r3, [r4, #12]
    d5c2:	d106      	bne.n	d5d2 <__sflush_r+0x66>
    d5c4:	6829      	ldr	r1, [r5, #0]
    d5c6:	291d      	cmp	r1, #29
    d5c8:	d82c      	bhi.n	d624 <__sflush_r+0xb8>
    d5ca:	4a29      	ldr	r2, [pc, #164]	; (d670 <__sflush_r+0x104>)
    d5cc:	40ca      	lsrs	r2, r1
    d5ce:	07d6      	lsls	r6, r2, #31
    d5d0:	d528      	bpl.n	d624 <__sflush_r+0xb8>
    d5d2:	2200      	movs	r2, #0
    d5d4:	04d9      	lsls	r1, r3, #19
    d5d6:	6062      	str	r2, [r4, #4]
    d5d8:	6922      	ldr	r2, [r4, #16]
    d5da:	6022      	str	r2, [r4, #0]
    d5dc:	d504      	bpl.n	d5e8 <__sflush_r+0x7c>
    d5de:	1c42      	adds	r2, r0, #1
    d5e0:	d101      	bne.n	d5e6 <__sflush_r+0x7a>
    d5e2:	682b      	ldr	r3, [r5, #0]
    d5e4:	b903      	cbnz	r3, d5e8 <__sflush_r+0x7c>
    d5e6:	6560      	str	r0, [r4, #84]	; 0x54
    d5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d5ea:	602f      	str	r7, [r5, #0]
    d5ec:	2900      	cmp	r1, #0
    d5ee:	d0ca      	beq.n	d586 <__sflush_r+0x1a>
    d5f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d5f4:	4299      	cmp	r1, r3
    d5f6:	d002      	beq.n	d5fe <__sflush_r+0x92>
    d5f8:	4628      	mov	r0, r5
    d5fa:	f7ff f8e3 	bl	c7c4 <_free_r>
    d5fe:	2000      	movs	r0, #0
    d600:	6360      	str	r0, [r4, #52]	; 0x34
    d602:	e7c1      	b.n	d588 <__sflush_r+0x1c>
    d604:	6a21      	ldr	r1, [r4, #32]
    d606:	2301      	movs	r3, #1
    d608:	4628      	mov	r0, r5
    d60a:	47b0      	blx	r6
    d60c:	1c41      	adds	r1, r0, #1
    d60e:	d1c7      	bne.n	d5a0 <__sflush_r+0x34>
    d610:	682b      	ldr	r3, [r5, #0]
    d612:	2b00      	cmp	r3, #0
    d614:	d0c4      	beq.n	d5a0 <__sflush_r+0x34>
    d616:	2b1d      	cmp	r3, #29
    d618:	d001      	beq.n	d61e <__sflush_r+0xb2>
    d61a:	2b16      	cmp	r3, #22
    d61c:	d101      	bne.n	d622 <__sflush_r+0xb6>
    d61e:	602f      	str	r7, [r5, #0]
    d620:	e7b1      	b.n	d586 <__sflush_r+0x1a>
    d622:	89a3      	ldrh	r3, [r4, #12]
    d624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d628:	81a3      	strh	r3, [r4, #12]
    d62a:	e7ad      	b.n	d588 <__sflush_r+0x1c>
    d62c:	690f      	ldr	r7, [r1, #16]
    d62e:	2f00      	cmp	r7, #0
    d630:	d0a9      	beq.n	d586 <__sflush_r+0x1a>
    d632:	0793      	lsls	r3, r2, #30
    d634:	680e      	ldr	r6, [r1, #0]
    d636:	600f      	str	r7, [r1, #0]
    d638:	bf0c      	ite	eq
    d63a:	694b      	ldreq	r3, [r1, #20]
    d63c:	2300      	movne	r3, #0
    d63e:	eba6 0807 	sub.w	r8, r6, r7
    d642:	608b      	str	r3, [r1, #8]
    d644:	f1b8 0f00 	cmp.w	r8, #0
    d648:	dd9d      	ble.n	d586 <__sflush_r+0x1a>
    d64a:	4643      	mov	r3, r8
    d64c:	463a      	mov	r2, r7
    d64e:	6a21      	ldr	r1, [r4, #32]
    d650:	4628      	mov	r0, r5
    d652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    d654:	47b0      	blx	r6
    d656:	2800      	cmp	r0, #0
    d658:	dc06      	bgt.n	d668 <__sflush_r+0xfc>
    d65a:	89a3      	ldrh	r3, [r4, #12]
    d65c:	f04f 30ff 	mov.w	r0, #4294967295
    d660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d664:	81a3      	strh	r3, [r4, #12]
    d666:	e78f      	b.n	d588 <__sflush_r+0x1c>
    d668:	4407      	add	r7, r0
    d66a:	eba8 0800 	sub.w	r8, r8, r0
    d66e:	e7e9      	b.n	d644 <__sflush_r+0xd8>
    d670:	20400001 	.word	0x20400001

0000d674 <_fflush_r>:
    d674:	b538      	push	{r3, r4, r5, lr}
    d676:	690b      	ldr	r3, [r1, #16]
    d678:	4605      	mov	r5, r0
    d67a:	460c      	mov	r4, r1
    d67c:	b913      	cbnz	r3, d684 <_fflush_r+0x10>
    d67e:	2500      	movs	r5, #0
    d680:	4628      	mov	r0, r5
    d682:	bd38      	pop	{r3, r4, r5, pc}
    d684:	b118      	cbz	r0, d68e <_fflush_r+0x1a>
    d686:	6983      	ldr	r3, [r0, #24]
    d688:	b90b      	cbnz	r3, d68e <_fflush_r+0x1a>
    d68a:	f000 f871 	bl	d770 <__sinit>
    d68e:	4b14      	ldr	r3, [pc, #80]	; (d6e0 <_fflush_r+0x6c>)
    d690:	429c      	cmp	r4, r3
    d692:	d11b      	bne.n	d6cc <_fflush_r+0x58>
    d694:	686c      	ldr	r4, [r5, #4]
    d696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d69a:	2b00      	cmp	r3, #0
    d69c:	d0ef      	beq.n	d67e <_fflush_r+0xa>
    d69e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d6a0:	07d0      	lsls	r0, r2, #31
    d6a2:	d404      	bmi.n	d6ae <_fflush_r+0x3a>
    d6a4:	0599      	lsls	r1, r3, #22
    d6a6:	d402      	bmi.n	d6ae <_fflush_r+0x3a>
    d6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d6aa:	f000 ffe4 	bl	e676 <__retarget_lock_acquire_recursive>
    d6ae:	4628      	mov	r0, r5
    d6b0:	4621      	mov	r1, r4
    d6b2:	f7ff ff5b 	bl	d56c <__sflush_r>
    d6b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d6b8:	4605      	mov	r5, r0
    d6ba:	07da      	lsls	r2, r3, #31
    d6bc:	d4e0      	bmi.n	d680 <_fflush_r+0xc>
    d6be:	89a3      	ldrh	r3, [r4, #12]
    d6c0:	059b      	lsls	r3, r3, #22
    d6c2:	d4dd      	bmi.n	d680 <_fflush_r+0xc>
    d6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d6c6:	f000 ffde 	bl	e686 <__retarget_lock_release_recursive>
    d6ca:	e7d9      	b.n	d680 <_fflush_r+0xc>
    d6cc:	4b05      	ldr	r3, [pc, #20]	; (d6e4 <_fflush_r+0x70>)
    d6ce:	429c      	cmp	r4, r3
    d6d0:	d101      	bne.n	d6d6 <_fflush_r+0x62>
    d6d2:	68ac      	ldr	r4, [r5, #8]
    d6d4:	e7df      	b.n	d696 <_fflush_r+0x22>
    d6d6:	4b04      	ldr	r3, [pc, #16]	; (d6e8 <_fflush_r+0x74>)
    d6d8:	429c      	cmp	r4, r3
    d6da:	bf08      	it	eq
    d6dc:	68ec      	ldreq	r4, [r5, #12]
    d6de:	e7da      	b.n	d696 <_fflush_r+0x22>
    d6e0:	00057a10 	.word	0x00057a10
    d6e4:	00057a30 	.word	0x00057a30
    d6e8:	000579f0 	.word	0x000579f0

0000d6ec <std>:
    d6ec:	2300      	movs	r3, #0
    d6ee:	b510      	push	{r4, lr}
    d6f0:	4604      	mov	r4, r0
    d6f2:	6083      	str	r3, [r0, #8]
    d6f4:	8181      	strh	r1, [r0, #12]
    d6f6:	4619      	mov	r1, r3
    d6f8:	6643      	str	r3, [r0, #100]	; 0x64
    d6fa:	81c2      	strh	r2, [r0, #14]
    d6fc:	2208      	movs	r2, #8
    d6fe:	6183      	str	r3, [r0, #24]
    d700:	e9c0 3300 	strd	r3, r3, [r0]
    d704:	e9c0 3304 	strd	r3, r3, [r0, #16]
    d708:	305c      	adds	r0, #92	; 0x5c
    d70a:	f002 fd51 	bl	101b0 <memset>
    d70e:	4b05      	ldr	r3, [pc, #20]	; (d724 <std+0x38>)
    d710:	6224      	str	r4, [r4, #32]
    d712:	6263      	str	r3, [r4, #36]	; 0x24
    d714:	4b04      	ldr	r3, [pc, #16]	; (d728 <std+0x3c>)
    d716:	62a3      	str	r3, [r4, #40]	; 0x28
    d718:	4b04      	ldr	r3, [pc, #16]	; (d72c <std+0x40>)
    d71a:	62e3      	str	r3, [r4, #44]	; 0x2c
    d71c:	4b04      	ldr	r3, [pc, #16]	; (d730 <std+0x44>)
    d71e:	6323      	str	r3, [r4, #48]	; 0x30
    d720:	bd10      	pop	{r4, pc}
    d722:	bf00      	nop
    d724:	00010ca3 	.word	0x00010ca3
    d728:	00010cc5 	.word	0x00010cc5
    d72c:	00010cfd 	.word	0x00010cfd
    d730:	00010d21 	.word	0x00010d21

0000d734 <_cleanup_r>:
    d734:	4901      	ldr	r1, [pc, #4]	; (d73c <_cleanup_r+0x8>)
    d736:	f002 bfa1 	b.w	1067c <_fwalk_reent>
    d73a:	bf00      	nop
    d73c:	0000d675 	.word	0x0000d675

0000d740 <__sfp_lock_acquire>:
    d740:	4801      	ldr	r0, [pc, #4]	; (d748 <__sfp_lock_acquire+0x8>)
    d742:	f000 bf98 	b.w	e676 <__retarget_lock_acquire_recursive>
    d746:	bf00      	nop
    d748:	200002c8 	.word	0x200002c8

0000d74c <__sfp_lock_release>:
    d74c:	4801      	ldr	r0, [pc, #4]	; (d754 <__sfp_lock_release+0x8>)
    d74e:	f000 bf9a 	b.w	e686 <__retarget_lock_release_recursive>
    d752:	bf00      	nop
    d754:	200002c8 	.word	0x200002c8

0000d758 <__sinit_lock_acquire>:
    d758:	4801      	ldr	r0, [pc, #4]	; (d760 <__sinit_lock_acquire+0x8>)
    d75a:	f000 bf8c 	b.w	e676 <__retarget_lock_acquire_recursive>
    d75e:	bf00      	nop
    d760:	200002dc 	.word	0x200002dc

0000d764 <__sinit_lock_release>:
    d764:	4801      	ldr	r0, [pc, #4]	; (d76c <__sinit_lock_release+0x8>)
    d766:	f000 bf8e 	b.w	e686 <__retarget_lock_release_recursive>
    d76a:	bf00      	nop
    d76c:	200002dc 	.word	0x200002dc

0000d770 <__sinit>:
    d770:	b510      	push	{r4, lr}
    d772:	4604      	mov	r4, r0
    d774:	f7ff fff0 	bl	d758 <__sinit_lock_acquire>
    d778:	69a3      	ldr	r3, [r4, #24]
    d77a:	b11b      	cbz	r3, d784 <__sinit+0x14>
    d77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d780:	f7ff bff0 	b.w	d764 <__sinit_lock_release>
    d784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    d788:	6523      	str	r3, [r4, #80]	; 0x50
    d78a:	4620      	mov	r0, r4
    d78c:	4b12      	ldr	r3, [pc, #72]	; (d7d8 <__sinit+0x68>)
    d78e:	4a13      	ldr	r2, [pc, #76]	; (d7dc <__sinit+0x6c>)
    d790:	681b      	ldr	r3, [r3, #0]
    d792:	62a2      	str	r2, [r4, #40]	; 0x28
    d794:	42a3      	cmp	r3, r4
    d796:	bf04      	itt	eq
    d798:	2301      	moveq	r3, #1
    d79a:	61a3      	streq	r3, [r4, #24]
    d79c:	f000 f820 	bl	d7e0 <__sfp>
    d7a0:	6060      	str	r0, [r4, #4]
    d7a2:	4620      	mov	r0, r4
    d7a4:	f000 f81c 	bl	d7e0 <__sfp>
    d7a8:	60a0      	str	r0, [r4, #8]
    d7aa:	4620      	mov	r0, r4
    d7ac:	f000 f818 	bl	d7e0 <__sfp>
    d7b0:	2200      	movs	r2, #0
    d7b2:	2104      	movs	r1, #4
    d7b4:	60e0      	str	r0, [r4, #12]
    d7b6:	6860      	ldr	r0, [r4, #4]
    d7b8:	f7ff ff98 	bl	d6ec <std>
    d7bc:	2201      	movs	r2, #1
    d7be:	2109      	movs	r1, #9
    d7c0:	68a0      	ldr	r0, [r4, #8]
    d7c2:	f7ff ff93 	bl	d6ec <std>
    d7c6:	2202      	movs	r2, #2
    d7c8:	2112      	movs	r1, #18
    d7ca:	68e0      	ldr	r0, [r4, #12]
    d7cc:	f7ff ff8e 	bl	d6ec <std>
    d7d0:	2301      	movs	r3, #1
    d7d2:	61a3      	str	r3, [r4, #24]
    d7d4:	e7d2      	b.n	d77c <__sinit+0xc>
    d7d6:	bf00      	nop
    d7d8:	000579ec 	.word	0x000579ec
    d7dc:	0000d735 	.word	0x0000d735

0000d7e0 <__sfp>:
    d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d7e2:	4607      	mov	r7, r0
    d7e4:	f7ff ffac 	bl	d740 <__sfp_lock_acquire>
    d7e8:	4b1e      	ldr	r3, [pc, #120]	; (d864 <__sfp+0x84>)
    d7ea:	681e      	ldr	r6, [r3, #0]
    d7ec:	69b3      	ldr	r3, [r6, #24]
    d7ee:	b913      	cbnz	r3, d7f6 <__sfp+0x16>
    d7f0:	4630      	mov	r0, r6
    d7f2:	f7ff ffbd 	bl	d770 <__sinit>
    d7f6:	3648      	adds	r6, #72	; 0x48
    d7f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    d7fc:	3b01      	subs	r3, #1
    d7fe:	d503      	bpl.n	d808 <__sfp+0x28>
    d800:	6833      	ldr	r3, [r6, #0]
    d802:	b30b      	cbz	r3, d848 <__sfp+0x68>
    d804:	6836      	ldr	r6, [r6, #0]
    d806:	e7f7      	b.n	d7f8 <__sfp+0x18>
    d808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    d80c:	b9d5      	cbnz	r5, d844 <__sfp+0x64>
    d80e:	4b16      	ldr	r3, [pc, #88]	; (d868 <__sfp+0x88>)
    d810:	f104 0058 	add.w	r0, r4, #88	; 0x58
    d814:	6665      	str	r5, [r4, #100]	; 0x64
    d816:	60e3      	str	r3, [r4, #12]
    d818:	f000 ff24 	bl	e664 <__retarget_lock_init_recursive>
    d81c:	f7ff ff96 	bl	d74c <__sfp_lock_release>
    d820:	2208      	movs	r2, #8
    d822:	4629      	mov	r1, r5
    d824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d828:	6025      	str	r5, [r4, #0]
    d82a:	61a5      	str	r5, [r4, #24]
    d82c:	e9c4 5501 	strd	r5, r5, [r4, #4]
    d830:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d834:	f002 fcbc 	bl	101b0 <memset>
    d838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    d83c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    d840:	4620      	mov	r0, r4
    d842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d844:	3468      	adds	r4, #104	; 0x68
    d846:	e7d9      	b.n	d7fc <__sfp+0x1c>
    d848:	2104      	movs	r1, #4
    d84a:	4638      	mov	r0, r7
    d84c:	f002 ff00 	bl	10650 <__sfmoreglue>
    d850:	4604      	mov	r4, r0
    d852:	6030      	str	r0, [r6, #0]
    d854:	2800      	cmp	r0, #0
    d856:	d1d5      	bne.n	d804 <__sfp+0x24>
    d858:	f7ff ff78 	bl	d74c <__sfp_lock_release>
    d85c:	230c      	movs	r3, #12
    d85e:	603b      	str	r3, [r7, #0]
    d860:	e7ee      	b.n	d840 <__sfp+0x60>
    d862:	bf00      	nop
    d864:	000579ec 	.word	0x000579ec
    d868:	ffff0001 	.word	0xffff0001

0000d86c <_localeconv_r>:
    d86c:	4800      	ldr	r0, [pc, #0]	; (d870 <_localeconv_r+0x4>)
    d86e:	4770      	bx	lr
    d870:	20000224 	.word	0x20000224

0000d874 <__smakebuf_r>:
    d874:	898b      	ldrh	r3, [r1, #12]
    d876:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d878:	079d      	lsls	r5, r3, #30
    d87a:	4606      	mov	r6, r0
    d87c:	460c      	mov	r4, r1
    d87e:	d507      	bpl.n	d890 <__smakebuf_r+0x1c>
    d880:	f104 0347 	add.w	r3, r4, #71	; 0x47
    d884:	6023      	str	r3, [r4, #0]
    d886:	6123      	str	r3, [r4, #16]
    d888:	2301      	movs	r3, #1
    d88a:	6163      	str	r3, [r4, #20]
    d88c:	b002      	add	sp, #8
    d88e:	bd70      	pop	{r4, r5, r6, pc}
    d890:	ab01      	add	r3, sp, #4
    d892:	466a      	mov	r2, sp
    d894:	f002 ff11 	bl	106ba <__swhatbuf_r>
    d898:	9900      	ldr	r1, [sp, #0]
    d89a:	4605      	mov	r5, r0
    d89c:	4630      	mov	r0, r6
    d89e:	f7fe ffdf 	bl	c860 <_malloc_r>
    d8a2:	b948      	cbnz	r0, d8b8 <__smakebuf_r+0x44>
    d8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d8a8:	059a      	lsls	r2, r3, #22
    d8aa:	d4ef      	bmi.n	d88c <__smakebuf_r+0x18>
    d8ac:	f023 0303 	bic.w	r3, r3, #3
    d8b0:	f043 0302 	orr.w	r3, r3, #2
    d8b4:	81a3      	strh	r3, [r4, #12]
    d8b6:	e7e3      	b.n	d880 <__smakebuf_r+0xc>
    d8b8:	4b0d      	ldr	r3, [pc, #52]	; (d8f0 <__smakebuf_r+0x7c>)
    d8ba:	62b3      	str	r3, [r6, #40]	; 0x28
    d8bc:	89a3      	ldrh	r3, [r4, #12]
    d8be:	6020      	str	r0, [r4, #0]
    d8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d8c4:	6120      	str	r0, [r4, #16]
    d8c6:	81a3      	strh	r3, [r4, #12]
    d8c8:	9b00      	ldr	r3, [sp, #0]
    d8ca:	6163      	str	r3, [r4, #20]
    d8cc:	9b01      	ldr	r3, [sp, #4]
    d8ce:	b15b      	cbz	r3, d8e8 <__smakebuf_r+0x74>
    d8d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d8d4:	4630      	mov	r0, r6
    d8d6:	f000 f89b 	bl	da10 <_isatty_r>
    d8da:	b128      	cbz	r0, d8e8 <__smakebuf_r+0x74>
    d8dc:	89a3      	ldrh	r3, [r4, #12]
    d8de:	f023 0303 	bic.w	r3, r3, #3
    d8e2:	f043 0301 	orr.w	r3, r3, #1
    d8e6:	81a3      	strh	r3, [r4, #12]
    d8e8:	89a0      	ldrh	r0, [r4, #12]
    d8ea:	4305      	orrs	r5, r0
    d8ec:	81a5      	strh	r5, [r4, #12]
    d8ee:	e7cd      	b.n	d88c <__smakebuf_r+0x18>
    d8f0:	0000d735 	.word	0x0000d735

0000d8f4 <__malloc_lock>:
    d8f4:	4801      	ldr	r0, [pc, #4]	; (d8fc <__malloc_lock+0x8>)
    d8f6:	f000 bebe 	b.w	e676 <__retarget_lock_acquire_recursive>
    d8fa:	bf00      	nop
    d8fc:	200002b4 	.word	0x200002b4

0000d900 <__malloc_unlock>:
    d900:	4801      	ldr	r0, [pc, #4]	; (d908 <__malloc_unlock+0x8>)
    d902:	f000 bec0 	b.w	e686 <__retarget_lock_release_recursive>
    d906:	bf00      	nop
    d908:	200002b4 	.word	0x200002b4

0000d90c <__pow5mult>:
    d90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d910:	4615      	mov	r5, r2
    d912:	f012 0203 	ands.w	r2, r2, #3
    d916:	4606      	mov	r6, r0
    d918:	460f      	mov	r7, r1
    d91a:	d007      	beq.n	d92c <__pow5mult+0x20>
    d91c:	3a01      	subs	r2, #1
    d91e:	4c21      	ldr	r4, [pc, #132]	; (d9a4 <__pow5mult+0x98>)
    d920:	2300      	movs	r3, #0
    d922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    d926:	f002 ff37 	bl	10798 <__multadd>
    d92a:	4607      	mov	r7, r0
    d92c:	10ad      	asrs	r5, r5, #2
    d92e:	d035      	beq.n	d99c <__pow5mult+0x90>
    d930:	6a74      	ldr	r4, [r6, #36]	; 0x24
    d932:	b93c      	cbnz	r4, d944 <__pow5mult+0x38>
    d934:	2010      	movs	r0, #16
    d936:	f7fe ff35 	bl	c7a4 <malloc>
    d93a:	6270      	str	r0, [r6, #36]	; 0x24
    d93c:	6004      	str	r4, [r0, #0]
    d93e:	60c4      	str	r4, [r0, #12]
    d940:	e9c0 4401 	strd	r4, r4, [r0, #4]
    d944:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    d948:	f8d8 4008 	ldr.w	r4, [r8, #8]
    d94c:	b94c      	cbnz	r4, d962 <__pow5mult+0x56>
    d94e:	f240 2171 	movw	r1, #625	; 0x271
    d952:	4630      	mov	r0, r6
    d954:	f002 ffad 	bl	108b2 <__i2b>
    d958:	2300      	movs	r3, #0
    d95a:	4604      	mov	r4, r0
    d95c:	f8c8 0008 	str.w	r0, [r8, #8]
    d960:	6003      	str	r3, [r0, #0]
    d962:	f04f 0900 	mov.w	r9, #0
    d966:	07eb      	lsls	r3, r5, #31
    d968:	d50a      	bpl.n	d980 <__pow5mult+0x74>
    d96a:	4639      	mov	r1, r7
    d96c:	4622      	mov	r2, r4
    d96e:	4630      	mov	r0, r6
    d970:	f002 ffa8 	bl	108c4 <__multiply>
    d974:	4680      	mov	r8, r0
    d976:	4639      	mov	r1, r7
    d978:	4630      	mov	r0, r6
    d97a:	4647      	mov	r7, r8
    d97c:	f002 fef5 	bl	1076a <_Bfree>
    d980:	106d      	asrs	r5, r5, #1
    d982:	d00b      	beq.n	d99c <__pow5mult+0x90>
    d984:	6820      	ldr	r0, [r4, #0]
    d986:	b938      	cbnz	r0, d998 <__pow5mult+0x8c>
    d988:	4622      	mov	r2, r4
    d98a:	4621      	mov	r1, r4
    d98c:	4630      	mov	r0, r6
    d98e:	f002 ff99 	bl	108c4 <__multiply>
    d992:	6020      	str	r0, [r4, #0]
    d994:	f8c0 9000 	str.w	r9, [r0]
    d998:	4604      	mov	r4, r0
    d99a:	e7e4      	b.n	d966 <__pow5mult+0x5a>
    d99c:	4638      	mov	r0, r7
    d99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9a2:	bf00      	nop
    d9a4:	00057a50 	.word	0x00057a50

0000d9a8 <_write_r>:
    d9a8:	b538      	push	{r3, r4, r5, lr}
    d9aa:	4604      	mov	r4, r0
    d9ac:	4d06      	ldr	r5, [pc, #24]	; (d9c8 <_write_r+0x20>)
    d9ae:	4608      	mov	r0, r1
    d9b0:	4611      	mov	r1, r2
    d9b2:	2200      	movs	r2, #0
    d9b4:	602a      	str	r2, [r5, #0]
    d9b6:	461a      	mov	r2, r3
    d9b8:	f000 fe3b 	bl	e632 <_write>
    d9bc:	1c43      	adds	r3, r0, #1
    d9be:	d102      	bne.n	d9c6 <_write_r+0x1e>
    d9c0:	682b      	ldr	r3, [r5, #0]
    d9c2:	b103      	cbz	r3, d9c6 <_write_r+0x1e>
    d9c4:	6023      	str	r3, [r4, #0]
    d9c6:	bd38      	pop	{r3, r4, r5, pc}
    d9c8:	2001b85c 	.word	0x2001b85c

0000d9cc <_close_r>:
    d9cc:	b538      	push	{r3, r4, r5, lr}
    d9ce:	2300      	movs	r3, #0
    d9d0:	4d05      	ldr	r5, [pc, #20]	; (d9e8 <_close_r+0x1c>)
    d9d2:	4604      	mov	r4, r0
    d9d4:	4608      	mov	r0, r1
    d9d6:	602b      	str	r3, [r5, #0]
    d9d8:	f000 fe31 	bl	e63e <_close>
    d9dc:	1c43      	adds	r3, r0, #1
    d9de:	d102      	bne.n	d9e6 <_close_r+0x1a>
    d9e0:	682b      	ldr	r3, [r5, #0]
    d9e2:	b103      	cbz	r3, d9e6 <_close_r+0x1a>
    d9e4:	6023      	str	r3, [r4, #0]
    d9e6:	bd38      	pop	{r3, r4, r5, pc}
    d9e8:	2001b85c 	.word	0x2001b85c

0000d9ec <_fstat_r>:
    d9ec:	b538      	push	{r3, r4, r5, lr}
    d9ee:	2300      	movs	r3, #0
    d9f0:	4d06      	ldr	r5, [pc, #24]	; (da0c <_fstat_r+0x20>)
    d9f2:	4604      	mov	r4, r0
    d9f4:	4608      	mov	r0, r1
    d9f6:	4611      	mov	r1, r2
    d9f8:	602b      	str	r3, [r5, #0]
    d9fa:	f000 fe2e 	bl	e65a <_fstat>
    d9fe:	1c43      	adds	r3, r0, #1
    da00:	d102      	bne.n	da08 <_fstat_r+0x1c>
    da02:	682b      	ldr	r3, [r5, #0]
    da04:	b103      	cbz	r3, da08 <_fstat_r+0x1c>
    da06:	6023      	str	r3, [r4, #0]
    da08:	bd38      	pop	{r3, r4, r5, pc}
    da0a:	bf00      	nop
    da0c:	2001b85c 	.word	0x2001b85c

0000da10 <_isatty_r>:
    da10:	b538      	push	{r3, r4, r5, lr}
    da12:	2300      	movs	r3, #0
    da14:	4d05      	ldr	r5, [pc, #20]	; (da2c <_isatty_r+0x1c>)
    da16:	4604      	mov	r4, r0
    da18:	4608      	mov	r0, r1
    da1a:	602b      	str	r3, [r5, #0]
    da1c:	f000 fe14 	bl	e648 <_isatty>
    da20:	1c43      	adds	r3, r0, #1
    da22:	d102      	bne.n	da2a <_isatty_r+0x1a>
    da24:	682b      	ldr	r3, [r5, #0]
    da26:	b103      	cbz	r3, da2a <_isatty_r+0x1a>
    da28:	6023      	str	r3, [r4, #0]
    da2a:	bd38      	pop	{r3, r4, r5, pc}
    da2c:	2001b85c 	.word	0x2001b85c

0000da30 <_lseek_r>:
    da30:	b538      	push	{r3, r4, r5, lr}
    da32:	4604      	mov	r4, r0
    da34:	4d06      	ldr	r5, [pc, #24]	; (da50 <_lseek_r+0x20>)
    da36:	4608      	mov	r0, r1
    da38:	4611      	mov	r1, r2
    da3a:	2200      	movs	r2, #0
    da3c:	602a      	str	r2, [r5, #0]
    da3e:	461a      	mov	r2, r3
    da40:	f000 fe00 	bl	e644 <_lseek>
    da44:	1c43      	adds	r3, r0, #1
    da46:	d102      	bne.n	da4e <_lseek_r+0x1e>
    da48:	682b      	ldr	r3, [r5, #0]
    da4a:	b103      	cbz	r3, da4e <_lseek_r+0x1e>
    da4c:	6023      	str	r3, [r4, #0]
    da4e:	bd38      	pop	{r3, r4, r5, pc}
    da50:	2001b85c 	.word	0x2001b85c

0000da54 <_read_r>:
    da54:	b538      	push	{r3, r4, r5, lr}
    da56:	4604      	mov	r4, r0
    da58:	4d06      	ldr	r5, [pc, #24]	; (da74 <_read_r+0x20>)
    da5a:	4608      	mov	r0, r1
    da5c:	4611      	mov	r1, r2
    da5e:	2200      	movs	r2, #0
    da60:	602a      	str	r2, [r5, #0]
    da62:	461a      	mov	r2, r3
    da64:	f000 fddf 	bl	e626 <_read>
    da68:	1c43      	adds	r3, r0, #1
    da6a:	d102      	bne.n	da72 <_read_r+0x1e>
    da6c:	682b      	ldr	r3, [r5, #0]
    da6e:	b103      	cbz	r3, da72 <_read_r+0x1e>
    da70:	6023      	str	r3, [r4, #0]
    da72:	bd38      	pop	{r3, r4, r5, pc}
    da74:	2001b85c 	.word	0x2001b85c

0000da78 <_Z9ee_hexdecPc>:
long ee_hexdec(char *hex) {
    da78:	4601      	mov	r1, r0
  long ret = 0;
    da7a:	2000      	movs	r0, #0
    da7c:	e007      	b.n	da8e <_Z9ee_hexdecPc+0x16>
    } else if (c >= 'a' && c <= 'f') {
    da7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    da82:	b2d2      	uxtb	r2, r2
    da84:	2a05      	cmp	r2, #5
    da86:	d80e      	bhi.n	daa6 <_Z9ee_hexdecPc+0x2e>
      dec = c - 'a' + 10;
    da88:	3b57      	subs	r3, #87	; 0x57
    ret = (ret << 4) + dec;
    da8a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
    da8e:	780b      	ldrb	r3, [r1, #0]
    da90:	b193      	cbz	r3, dab8 <_Z9ee_hexdecPc+0x40>
    da92:	2800      	cmp	r0, #0
    da94:	db10      	blt.n	dab8 <_Z9ee_hexdecPc+0x40>
    c = *hex++;
    da96:	3101      	adds	r1, #1
    if (c >= '0' && c <= '9') {
    da98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    da9c:	b2d2      	uxtb	r2, r2
    da9e:	2a09      	cmp	r2, #9
    daa0:	d8ed      	bhi.n	da7e <_Z9ee_hexdecPc+0x6>
      dec = c - '0';
    daa2:	3b30      	subs	r3, #48	; 0x30
    daa4:	e7f1      	b.n	da8a <_Z9ee_hexdecPc+0x12>
    } else if (c >= 'A' && c <= 'F') {
    daa6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    daaa:	b2d2      	uxtb	r2, r2
    daac:	2a05      	cmp	r2, #5
    daae:	d801      	bhi.n	dab4 <_Z9ee_hexdecPc+0x3c>
      dec = c - 'A' + 10;
    dab0:	3b37      	subs	r3, #55	; 0x37
    dab2:	e7ea      	b.n	da8a <_Z9ee_hexdecPc+0x12>
      return -1;
    dab4:	f04f 30ff 	mov.w	r0, #4294967295
}
    dab8:	4770      	bx	lr

0000daba <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
    daba:	4770      	bx	lr

0000dabc <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
    dabc:	2200      	movs	r2, #0
    dabe:	6002      	str	r2, [r0, #0]
    dac0:	6042      	str	r2, [r0, #4]
    dac2:	6082      	str	r2, [r0, #8]
  }
    dac4:	4770      	bx	lr

0000dac6 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
    dac6:	2001      	movs	r0, #1
    dac8:	4770      	bx	lr

0000daca <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
    daca:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
    dacc:	6803      	ldr	r3, [r0, #0]
    dace:	699b      	ldr	r3, [r3, #24]
    dad0:	4798      	blx	r3
  }
    dad2:	bd08      	pop	{r3, pc}

0000dad4 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    dad4:	b508      	push	{r3, lr}
    return FindOp(op);
    dad6:	6803      	ldr	r3, [r0, #0]
    dad8:	69db      	ldr	r3, [r3, #28]
    dada:	4798      	blx	r3
  }
    dadc:	bd08      	pop	{r3, pc}

0000dade <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    dade:	2920      	cmp	r1, #32
    dae0:	d00d      	beq.n	dafe <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x20>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
    dae2:	b410      	push	{r4}
    dae4:	4604      	mov	r4, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    dae6:	2300      	movs	r3, #0
    dae8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    daea:	429a      	cmp	r2, r3
    daec:	d909      	bls.n	db02 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TfLiteRegistration& registration = registrations_[i];
    daee:	eb04 1243 	add.w	r2, r4, r3, lsl #5
    daf2:	1d10      	adds	r0, r2, #4
      if (registration.builtin_code == op) {
    daf4:	6992      	ldr	r2, [r2, #24]
    daf6:	428a      	cmp	r2, r1
    daf8:	d004      	beq.n	db04 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    dafa:	3301      	adds	r3, #1
    dafc:	e7f4      	b.n	dae8 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0xa>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    dafe:	2000      	movs	r0, #0
  }
    db00:	4770      	bx	lr
    return nullptr;
    db02:	2000      	movs	r0, #0
  }
    db04:	bc10      	pop	{r4}
    db06:	4770      	bx	lr

0000db08 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
    db08:	4770      	bx	lr

0000db0a <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
    db0a:	b510      	push	{r4, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    db0c:	6f84      	ldr	r4, [r0, #120]	; 0x78
    db0e:	2c03      	cmp	r4, #3
    db10:	d801      	bhi.n	db16 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0xc>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
    db12:	2300      	movs	r3, #0
    db14:	e002      	b.n	db1c <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x12>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    db16:	f002 fb25 	bl	10164 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
    db1a:	3301      	adds	r3, #1
    db1c:	429c      	cmp	r4, r3
    db1e:	d909      	bls.n	db34 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
    db20:	18c2      	adds	r2, r0, r3
    db22:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
    db26:	428a      	cmp	r2, r1
    db28:	d1f7      	bne.n	db1a <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x10>
    db2a:	331a      	adds	r3, #26
    db2c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    db30:	6858      	ldr	r0, [r3, #4]
    db32:	e000      	b.n	db36 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    return nullptr;
    db34:	2000      	movs	r0, #0
  }
    db36:	bd10      	pop	{r4, pc}

0000db38 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
    db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db3a:	4605      	mov	r5, r0
    db3c:	460f      	mov	r7, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    db3e:	2400      	movs	r4, #0
    db40:	e000      	b.n	db44 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xc>
    db42:	3401      	adds	r4, #1
    db44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    db46:	42a3      	cmp	r3, r4
    db48:	d90e      	bls.n	db68 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x30>
      const TfLiteRegistration& registration = registrations_[i];
    db4a:	eb05 1344 	add.w	r3, r5, r4, lsl #5
    db4e:	1d1e      	adds	r6, r3, #4
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    db50:	699b      	ldr	r3, [r3, #24]
    db52:	2b20      	cmp	r3, #32
    db54:	d1f5      	bne.n	db42 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
    db56:	eb05 1344 	add.w	r3, r5, r4, lsl #5
    db5a:	4639      	mov	r1, r7
    db5c:	69d8      	ldr	r0, [r3, #28]
    db5e:	f7f3 fcaf 	bl	14c0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    db62:	2800      	cmp	r0, #0
    db64:	d1ed      	bne.n	db42 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xa>
    db66:	e000      	b.n	db6a <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x32>
    return nullptr;
    db68:	2600      	movs	r6, #0
  }
    db6a:	4630      	mov	r0, r6
    db6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db6e <_ZN6tflite22MicroMutableOpResolverILj3EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
    db6e:	b510      	push	{r4, lr}
    db70:	4604      	mov	r4, r0
    db72:	f002 fae0 	bl	10136 <_ZdlPv>
    db76:	4620      	mov	r0, r4
    db78:	bd10      	pop	{r4, pc}

0000db7a <_ZN6tflite18MicroErrorReporterD0Ev>:
    db7a:	b510      	push	{r4, lr}
    db7c:	4604      	mov	r4, r0
    db7e:	f002 fada 	bl	10136 <_ZdlPv>
    db82:	4620      	mov	r0, r4
    db84:	bd10      	pop	{r4, pc}

0000db86 <_Z6th_prev>:
void th_pre() {}
    db86:	4770      	bx	lr

0000db88 <_Z7th_postv>:
void th_post() {}
    db88:	4770      	bx	lr

0000db8a <_Z16th_command_readyPVc>:
void th_command_ready(char volatile *p_command) {
    db8a:	b508      	push	{r3, lr}
  ee_serial_command_parser_callback((char *)p_command);
    db8c:	f7f4 fcb2 	bl	24f4 <_Z33ee_serial_command_parser_callbackPc>
}
    db90:	bd08      	pop	{r3, pc}

0000db92 <_Z10th_strnlenPKcj>:
size_t th_strnlen(const char *str, size_t maxlen) {
    db92:	b508      	push	{r3, lr}
  return strnlen(str, maxlen);
    db94:	f002 fc98 	bl	104c8 <strnlen>
}
    db98:	bd08      	pop	{r3, pc}

0000db9a <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
    db9a:	b508      	push	{r3, lr}
    db9c:	f7ff fc10 	bl	d3c0 <viprintf>
    dba0:	bd08      	pop	{r3, pc}

0000dba2 <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
    dba2:	b40f      	push	{r0, r1, r2, r3}
    dba4:	b500      	push	{lr}
    dba6:	b083      	sub	sp, #12
    dba8:	a904      	add	r1, sp, #16
    dbaa:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
    dbae:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
    dbb0:	f7ff fff3 	bl	db9a <_Z10th_vprintfPKcSt9__va_list>
}
    dbb4:	b003      	add	sp, #12
    dbb6:	f85d eb04 	ldr.w	lr, [sp], #4
    dbba:	b004      	add	sp, #16
    dbbc:	4770      	bx	lr

0000dbbe <_Z24th_serialport_initializev>:
}
    dbbe:	4770      	bx	lr

0000dbc0 <main>:
// Enables 128MHz for the nRF53
#define MHz128 0
//  Increases clock precision.
#define PREC 1

int main(int argc, char *argv[]) {
    dbc0:	b508      	push	{r3, lr}
//nrfx_clock_hfclk_start();
//while (!nrfx_clock_hfclk_is_running()) { }



ee_benchmark_initialize();
    dbc2:	f7f4 fad9 	bl	2178 <_Z23ee_benchmark_initializev>
    c = (int) cmd_buf[i];
    ee_serial_callback(c);
  }
  }
#else
  console_init();
    dbc6:	f7f5 fe89 	bl	38dc <console_init>

  while (1) {
    
    int c;

    c = console_getchar();
    dbca:	f7f5 fe75 	bl	38b8 <console_getchar>
    if (c < 0) {
    dbce:	2800      	cmp	r0, #0
    dbd0:	dbfb      	blt.n	dbca <main+0xa>
      continue;
    }
    // printk("c: %d", c);
    ee_serial_callback(c);
    dbd2:	b2c0      	uxtb	r0, r0
    dbd4:	f7f4 fab0 	bl	2138 <_Z18ee_serial_callbackc>
    dbd8:	e7f7      	b.n	dbca <main+0xa>

0000dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>:
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
  #else
    return EndianSwap(t);
  #endif
}
    dbda:	4770      	bx	lr

0000dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
    dbdc:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    dbde:	6800      	ldr	r0, [r0, #0]
    dbe0:	f7ff fffb 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    dbe4:	bd08      	pop	{r3, pc}

0000dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
}
    dbe6:	4770      	bx	lr

0000dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>:
T ReadScalar(const void *p) {
    dbe8:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    dbea:	6800      	ldr	r0, [r0, #0]
    dbec:	f7ff fffb 	bl	dbe6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
}
    dbf0:	bd08      	pop	{r3, pc}

0000dbf2 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
}
    dbf2:	4770      	bx	lr

0000dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
    dbf4:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    dbf6:	8800      	ldrh	r0, [r0, #0]
    dbf8:	f7ff fffb 	bl	dbf2 <_ZN11flatbuffers12EndianScalarItEET_S1_>
}
    dbfc:	bd08      	pop	{r3, pc}

0000dbfe <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
    dbfe:	b510      	push	{r4, lr}
    dc00:	4604      	mov	r4, r0
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
    dc02:	6800      	ldr	r0, [r0, #0]
    dc04:	f7ff ffe9 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    dc08:	4420      	add	r0, r4
    dc0a:	bd10      	pop	{r4, pc}

0000dc0c <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
    dc0c:	b508      	push	{r3, lr}
  return GetMutableRoot<T>(const_cast<void *>(buf));
    dc0e:	f7ff fff6 	bl	dbfe <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
}
    dc12:	bd08      	pop	{r3, pc}

0000dc14 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    dc14:	4602      	mov	r2, r0
    dc16:	b158      	cbz	r0, dc30 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    dc18:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    dc1a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    dc1e:	2b01      	cmp	r3, #1
    dc20:	d003      	beq.n	dc2a <sys_notify_validate+0x16>
    dc22:	2b03      	cmp	r3, #3
    dc24:	d107      	bne.n	dc36 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    dc26:	6803      	ldr	r3, [r0, #0]
    dc28:	b143      	cbz	r3, dc3c <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    dc2a:	2000      	movs	r0, #0
    dc2c:	6090      	str	r0, [r2, #8]
    dc2e:	4770      	bx	lr
		return -EINVAL;
    dc30:	f06f 0015 	mvn.w	r0, #21
    dc34:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    dc36:	f06f 0015 	mvn.w	r0, #21
    dc3a:	4770      	bx	lr
			rv = -EINVAL;
    dc3c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    dc40:	4770      	bx	lr

0000dc42 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    dc42:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    dc44:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    dc46:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    dc4a:	6081      	str	r1, [r0, #8]
	switch (method) {
    dc4c:	2a03      	cmp	r2, #3
    dc4e:	d103      	bne.n	dc58 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    dc50:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    dc52:	2200      	movs	r2, #0
    dc54:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    dc56:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    dc58:	2000      	movs	r0, #0
    dc5a:	e7fa      	b.n	dc52 <sys_notify_finalize+0x10>

0000dc5c <arch_printk_char_out>:
}
    dc5c:	2000      	movs	r0, #0
    dc5e:	4770      	bx	lr

0000dc60 <str_out>:
{
    dc60:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    dc62:	680c      	ldr	r4, [r1, #0]
    dc64:	b154      	cbz	r4, dc7c <str_out+0x1c>
    dc66:	688a      	ldr	r2, [r1, #8]
    dc68:	684b      	ldr	r3, [r1, #4]
    dc6a:	429a      	cmp	r2, r3
    dc6c:	da06      	bge.n	dc7c <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    dc6e:	3b01      	subs	r3, #1
    dc70:	429a      	cmp	r2, r3
    dc72:	d008      	beq.n	dc86 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    dc74:	1c53      	adds	r3, r2, #1
    dc76:	608b      	str	r3, [r1, #8]
    dc78:	54a0      	strb	r0, [r4, r2]
    dc7a:	e002      	b.n	dc82 <str_out+0x22>
		ctx->count++;
    dc7c:	688b      	ldr	r3, [r1, #8]
    dc7e:	3301      	adds	r3, #1
    dc80:	608b      	str	r3, [r1, #8]
}
    dc82:	bc10      	pop	{r4}
    dc84:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    dc86:	1c53      	adds	r3, r2, #1
    dc88:	608b      	str	r3, [r1, #8]
    dc8a:	2300      	movs	r3, #0
    dc8c:	54a3      	strb	r3, [r4, r2]
    dc8e:	e7f8      	b.n	dc82 <str_out+0x22>

0000dc90 <printk>:
{
    dc90:	b40f      	push	{r0, r1, r2, r3}
    dc92:	b500      	push	{lr}
    dc94:	b083      	sub	sp, #12
    dc96:	a904      	add	r1, sp, #16
    dc98:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    dc9c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    dc9e:	f7f4 ff2b 	bl	2af8 <vprintk>
}
    dca2:	b003      	add	sp, #12
    dca4:	f85d eb04 	ldr.w	lr, [sp], #4
    dca8:	b004      	add	sp, #16
    dcaa:	4770      	bx	lr

0000dcac <snprintk>:
{
    dcac:	b40c      	push	{r2, r3}
    dcae:	b500      	push	{lr}
    dcb0:	b083      	sub	sp, #12
    dcb2:	ab04      	add	r3, sp, #16
    dcb4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    dcb8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    dcba:	f7f4 ff2d 	bl	2b18 <vsnprintk>
}
    dcbe:	b003      	add	sp, #12
    dcc0:	f85d eb04 	ldr.w	lr, [sp], #4
    dcc4:	b002      	add	sp, #8
    dcc6:	4770      	bx	lr

0000dcc8 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    dcc8:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dccc:	8b81      	ldrh	r1, [r0, #28]
    dcce:	f021 0107 	bic.w	r1, r1, #7
    dcd2:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    dcd4:	8381      	strh	r1, [r0, #28]
}
    dcd6:	4770      	bx	lr

0000dcd8 <notify_monitors>:
{
    dcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcdc:	4606      	mov	r6, r0
    dcde:	460f      	mov	r7, r1
    dce0:	4690      	mov	r8, r2
	return list->head;
    dce2:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    dce4:	b119      	cbz	r1, dcee <notify_monitors+0x16>
    dce6:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    dce8:	b131      	cbz	r1, dcf8 <notify_monitors+0x20>
	return node->next;
    dcea:	680c      	ldr	r4, [r1, #0]
    dcec:	e004      	b.n	dcf8 <notify_monitors+0x20>
    dcee:	460c      	mov	r4, r1
    dcf0:	e002      	b.n	dcf8 <notify_monitors+0x20>
    dcf2:	4623      	mov	r3, r4
    dcf4:	4621      	mov	r1, r4
    dcf6:	461c      	mov	r4, r3
    dcf8:	b159      	cbz	r1, dd12 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    dcfa:	684d      	ldr	r5, [r1, #4]
    dcfc:	4643      	mov	r3, r8
    dcfe:	463a      	mov	r2, r7
    dd00:	4630      	mov	r0, r6
    dd02:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    dd04:	2c00      	cmp	r4, #0
    dd06:	d0f4      	beq.n	dcf2 <notify_monitors+0x1a>
    dd08:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    dd0a:	2c00      	cmp	r4, #0
    dd0c:	d0f2      	beq.n	dcf4 <notify_monitors+0x1c>
	return node->next;
    dd0e:	6823      	ldr	r3, [r4, #0]
    dd10:	e7f0      	b.n	dcf4 <notify_monitors+0x1c>
}
    dd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dd16 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dd16:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    dd18:	f013 0307 	ands.w	r3, r3, #7
    dd1c:	d103      	bne.n	dd26 <process_recheck+0x10>
	return list->head;
    dd1e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    dd20:	b10a      	cbz	r2, dd26 <process_recheck+0x10>
		evt = EVT_START;
    dd22:	2003      	movs	r0, #3
    dd24:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    dd26:	2b02      	cmp	r3, #2
    dd28:	d003      	beq.n	dd32 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    dd2a:	2b01      	cmp	r3, #1
    dd2c:	d006      	beq.n	dd3c <process_recheck+0x26>
	int evt = EVT_NOP;
    dd2e:	2000      	movs	r0, #0
    dd30:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    dd32:	8bc2      	ldrh	r2, [r0, #30]
    dd34:	2a00      	cmp	r2, #0
    dd36:	d1f8      	bne.n	dd2a <process_recheck+0x14>
		evt = EVT_STOP;
    dd38:	2004      	movs	r0, #4
    dd3a:	4770      	bx	lr
    dd3c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    dd3e:	b10b      	cbz	r3, dd44 <process_recheck+0x2e>
		evt = EVT_RESET;
    dd40:	2005      	movs	r0, #5
}
    dd42:	4770      	bx	lr
	int evt = EVT_NOP;
    dd44:	2000      	movs	r0, #0
    dd46:	4770      	bx	lr

0000dd48 <process_complete>:
{
    dd48:	b538      	push	{r3, r4, r5, lr}
    dd4a:	4604      	mov	r4, r0
    dd4c:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dd4e:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
    dd50:	2a00      	cmp	r2, #0
    dd52:	db07      	blt.n	dd64 <process_complete+0x1c>
    dd54:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    dd58:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    dd5a:	2a01      	cmp	r2, #1
    dd5c:	d90e      	bls.n	dd7c <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    dd5e:	2b04      	cmp	r3, #4
    dd60:	d032      	beq.n	ddc8 <process_complete+0x80>
}
    dd62:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    dd64:	e9d0 0100 	ldrd	r0, r1, [r0]
    dd68:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    dd6c:	2300      	movs	r3, #0
    dd6e:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    dd70:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    dd72:	2101      	movs	r1, #1
    dd74:	4620      	mov	r0, r4
    dd76:	f7ff ffa7 	bl	dcc8 <set_state>
    dd7a:	e7f2      	b.n	dd62 <process_complete+0x1a>
		*clients = mgr->clients;
    dd7c:	e9d0 0100 	ldrd	r0, r1, [r0]
    dd80:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    dd84:	2200      	movs	r2, #0
    dd86:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    dd88:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    dd8a:	2b06      	cmp	r3, #6
    dd8c:	d117      	bne.n	ddbe <process_complete+0x76>
	return list->head;
    dd8e:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dd90:	b13b      	cbz	r3, dda2 <process_complete+0x5a>
				mgr->refs += 1U;
    dd92:	8be2      	ldrh	r2, [r4, #30]
    dd94:	3201      	adds	r2, #1
    dd96:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
    dd98:	2b00      	cmp	r3, #0
    dd9a:	d0f9      	beq.n	dd90 <process_complete+0x48>
	return node->next;
    dd9c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dd9e:	2b00      	cmp	r3, #0
    dda0:	d1f6      	bne.n	dd90 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    dda2:	2102      	movs	r1, #2
    dda4:	4620      	mov	r0, r4
    dda6:	f7ff ff8f 	bl	dcc8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    ddaa:	4620      	mov	r0, r4
    ddac:	f7ff ffb3 	bl	dd16 <process_recheck>
    ddb0:	2800      	cmp	r0, #0
    ddb2:	d0d6      	beq.n	dd62 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ddb4:	8ba3      	ldrh	r3, [r4, #28]
    ddb6:	f043 0320 	orr.w	r3, r3, #32
    ddba:	83a3      	strh	r3, [r4, #28]
    ddbc:	e7d1      	b.n	dd62 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    ddbe:	2100      	movs	r1, #0
    ddc0:	4620      	mov	r0, r4
    ddc2:	f7ff ff81 	bl	dcc8 <set_state>
    ddc6:	e7f0      	b.n	ddaa <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    ddc8:	2100      	movs	r1, #0
    ddca:	f7ff ff7d 	bl	dcc8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    ddce:	4620      	mov	r0, r4
    ddd0:	f7ff ffa1 	bl	dd16 <process_recheck>
    ddd4:	2800      	cmp	r0, #0
    ddd6:	d0c4      	beq.n	dd62 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ddd8:	8ba3      	ldrh	r3, [r4, #28]
    ddda:	f043 0320 	orr.w	r3, r3, #32
    ddde:	83a3      	strh	r3, [r4, #28]
}
    dde0:	e7bf      	b.n	dd62 <process_complete+0x1a>

0000dde2 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    dde2:	b158      	cbz	r0, ddfc <validate_args+0x1a>
{
    dde4:	b510      	push	{r4, lr}
    dde6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    dde8:	b159      	cbz	r1, de02 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    ddea:	1d08      	adds	r0, r1, #4
    ddec:	f7ff ff12 	bl	dc14 <sys_notify_validate>
	if ((rv == 0)
    ddf0:	b918      	cbnz	r0, ddfa <validate_args+0x18>
	    && ((cli->notify.flags
    ddf2:	68a3      	ldr	r3, [r4, #8]
    ddf4:	f033 0303 	bics.w	r3, r3, #3
    ddf8:	d106      	bne.n	de08 <validate_args+0x26>
}
    ddfa:	bd10      	pop	{r4, pc}
		return -EINVAL;
    ddfc:	f06f 0015 	mvn.w	r0, #21
}
    de00:	4770      	bx	lr
		return -EINVAL;
    de02:	f06f 0015 	mvn.w	r0, #21
    de06:	e7f8      	b.n	ddfa <validate_args+0x18>
		rv = -EINVAL;
    de08:	f06f 0015 	mvn.w	r0, #21
    de0c:	e7f5      	b.n	ddfa <validate_args+0x18>

0000de0e <notify_one>:
{
    de0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de12:	4607      	mov	r7, r0
    de14:	460c      	mov	r4, r1
    de16:	4616      	mov	r6, r2
    de18:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    de1a:	4619      	mov	r1, r3
    de1c:	1d20      	adds	r0, r4, #4
    de1e:	f7ff ff10 	bl	dc42 <sys_notify_finalize>
	if (cb) {
    de22:	b128      	cbz	r0, de30 <notify_one+0x22>
    de24:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    de26:	462b      	mov	r3, r5
    de28:	4632      	mov	r2, r6
    de2a:	4621      	mov	r1, r4
    de2c:	4638      	mov	r0, r7
    de2e:	47c0      	blx	r8
}
    de30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000de34 <notify_all>:
{
    de34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de38:	4681      	mov	r9, r0
    de3a:	460c      	mov	r4, r1
    de3c:	4690      	mov	r8, r2
    de3e:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    de40:	e005      	b.n	de4e <notify_all+0x1a>
	list->tail = node;
    de42:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    de44:	463b      	mov	r3, r7
    de46:	4642      	mov	r2, r8
    de48:	4648      	mov	r0, r9
    de4a:	f7ff ffe0 	bl	de0e <notify_one>
	return list->head;
    de4e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    de50:	b129      	cbz	r1, de5e <notify_all+0x2a>
	return node->next;
    de52:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    de54:	6025      	str	r5, [r4, #0]
	return list->tail;
    de56:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    de58:	428e      	cmp	r6, r1
    de5a:	d1f3      	bne.n	de44 <notify_all+0x10>
    de5c:	e7f1      	b.n	de42 <notify_all+0xe>
}
    de5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000de62 <transition_complete>:
{
    de62:	b510      	push	{r4, lr}
	__asm__ volatile(
    de64:	f04f 0420 	mov.w	r4, #32
    de68:	f3ef 8211 	mrs	r2, BASEPRI
    de6c:	f384 8812 	msr	BASEPRI_MAX, r4
    de70:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    de74:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
    de76:	2101      	movs	r1, #1
    de78:	f7f4 fe64 	bl	2b44 <process_event>
}
    de7c:	bd10      	pop	{r4, pc}

0000de7e <onoff_manager_init>:
	if ((mgr == NULL)
    de7e:	b170      	cbz	r0, de9e <onoff_manager_init+0x20>
{
    de80:	b538      	push	{r3, r4, r5, lr}
    de82:	460c      	mov	r4, r1
    de84:	4605      	mov	r5, r0
	    || (transitions == NULL)
    de86:	b169      	cbz	r1, dea4 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    de88:	680b      	ldr	r3, [r1, #0]
    de8a:	b173      	cbz	r3, deaa <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    de8c:	684b      	ldr	r3, [r1, #4]
    de8e:	b17b      	cbz	r3, deb0 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    de90:	2220      	movs	r2, #32
    de92:	2100      	movs	r1, #0
    de94:	f002 f98c 	bl	101b0 <memset>
    de98:	612c      	str	r4, [r5, #16]
	return 0;
    de9a:	2000      	movs	r0, #0
}
    de9c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    de9e:	f06f 0015 	mvn.w	r0, #21
}
    dea2:	4770      	bx	lr
		return -EINVAL;
    dea4:	f06f 0015 	mvn.w	r0, #21
    dea8:	e7f8      	b.n	de9c <onoff_manager_init+0x1e>
    deaa:	f06f 0015 	mvn.w	r0, #21
    deae:	e7f5      	b.n	de9c <onoff_manager_init+0x1e>
    deb0:	f06f 0015 	mvn.w	r0, #21
    deb4:	e7f2      	b.n	de9c <onoff_manager_init+0x1e>

0000deb6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    deb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    deb8:	4604      	mov	r4, r0
    deba:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    debc:	f7ff ff91 	bl	dde2 <validate_args>

	if (rv < 0) {
    dec0:	1e06      	subs	r6, r0, #0
    dec2:	db37      	blt.n	df34 <onoff_request+0x7e>
    dec4:	f04f 0320 	mov.w	r3, #32
    dec8:	f3ef 8211 	mrs	r2, BASEPRI
    decc:	f383 8812 	msr	BASEPRI_MAX, r3
    ded0:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ded4:	8ba5      	ldrh	r5, [r4, #28]
    ded6:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    deda:	8be3      	ldrh	r3, [r4, #30]
    dedc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dee0:	428b      	cmp	r3, r1
    dee2:	d02f      	beq.n	df44 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    dee4:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    dee6:	2d02      	cmp	r5, #2
    dee8:	d00c      	beq.n	df04 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    deea:	b18d      	cbz	r5, df10 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    deec:	2d04      	cmp	r5, #4
    deee:	d00f      	beq.n	df10 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    def0:	2d06      	cmp	r5, #6
    def2:	d00d      	beq.n	df10 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    def4:	2d05      	cmp	r5, #5
    def6:	d01f      	beq.n	df38 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    def8:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    defc:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    defe:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    df00:	4608      	mov	r0, r1
    df02:	e00a      	b.n	df1a <onoff_request+0x64>
		mgr->refs += 1U;
    df04:	3301      	adds	r3, #1
    df06:	83e3      	strh	r3, [r4, #30]
		notify = true;
    df08:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    df0a:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    df0c:	4618      	mov	r0, r3
    df0e:	e004      	b.n	df1a <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    df10:	fab5 f385 	clz	r3, r5
    df14:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    df16:	2100      	movs	r1, #0
		add_client = true;
    df18:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    df1a:	b128      	cbz	r0, df28 <onoff_request+0x72>
	parent->next = child;
    df1c:	2000      	movs	r0, #0
    df1e:	6038      	str	r0, [r7, #0]
	return list->tail;
    df20:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    df22:	b1a8      	cbz	r0, df50 <onoff_request+0x9a>
	parent->next = child;
    df24:	6007      	str	r7, [r0, #0]
	list->tail = node;
    df26:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    df28:	b9ab      	cbnz	r3, df56 <onoff_request+0xa0>
	__asm__ volatile(
    df2a:	f382 8811 	msr	BASEPRI, r2
    df2e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    df32:	b9a9      	cbnz	r1, df60 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    df34:	4630      	mov	r0, r6
    df36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    df38:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    df3c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    df3e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    df40:	4608      	mov	r0, r1
    df42:	e7ea      	b.n	df1a <onoff_request+0x64>
		rv = -EAGAIN;
    df44:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    df48:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    df4a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    df4c:	4608      	mov	r0, r1
    df4e:	e7e4      	b.n	df1a <onoff_request+0x64>
    df50:	6067      	str	r7, [r4, #4]
	list->head = node;
    df52:	6027      	str	r7, [r4, #0]
}
    df54:	e7e8      	b.n	df28 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    df56:	2102      	movs	r1, #2
    df58:	4620      	mov	r0, r4
    df5a:	f7f4 fdf3 	bl	2b44 <process_event>
    df5e:	e7e9      	b.n	df34 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    df60:	2300      	movs	r3, #0
    df62:	462a      	mov	r2, r5
    df64:	4639      	mov	r1, r7
    df66:	4620      	mov	r0, r4
    df68:	f7ff ff51 	bl	de0e <notify_one>
    df6c:	e7e2      	b.n	df34 <onoff_request+0x7e>

0000df6e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    df6e:	b508      	push	{r3, lr}
    df70:	4604      	mov	r4, r0
    df72:	4608      	mov	r0, r1
    df74:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    df76:	461a      	mov	r2, r3
    df78:	47a0      	blx	r4
	return z_impl_z_current_get();
    df7a:	f7fd ffed 	bl	bf58 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    df7e:	f7f6 f95f 	bl	4240 <z_impl_k_thread_abort>

0000df82 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    df82:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    df84:	1d13      	adds	r3, r2, #4
    df86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    df8a:	b9d3      	cbnz	r3, dfc2 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    df8c:	2301      	movs	r3, #1
    df8e:	fa03 f402 	lsl.w	r4, r3, r2
    df92:	68c3      	ldr	r3, [r0, #12]
    df94:	4323      	orrs	r3, r4
    df96:	60c3      	str	r3, [r0, #12]
		b->next = c;
    df98:	3204      	adds	r2, #4
    df9a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    df9e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    dfa2:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
    dfa4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    dfa8:	d307      	bcc.n	dfba <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    dfaa:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    dfac:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    dfae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    dfb2:	d304      	bcc.n	dfbe <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    dfb4:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    dfb6:	bc70      	pop	{r4, r5, r6}
    dfb8:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    dfba:	8099      	strh	r1, [r3, #4]
    dfbc:	e7f6      	b.n	dfac <free_list_add_bidx+0x2a>
    dfbe:	80d9      	strh	r1, [r3, #6]
    dfc0:	e7f9      	b.n	dfb6 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    dfc2:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    dfc6:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    dfc8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    dfcc:	d318      	bcc.n	e000 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    dfce:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    dfd0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    dfd4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    dfd8:	d314      	bcc.n	e004 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    dfda:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
    dfdc:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    dfde:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    dfe2:	d311      	bcc.n	e008 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    dfe4:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    dfe6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    dfea:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    dfec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    dff0:	d30c      	bcc.n	e00c <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    dff2:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    dff4:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    dff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    dffa:	d309      	bcc.n	e010 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    dffc:	60a1      	str	r1, [r4, #8]
    dffe:	e7da      	b.n	dfb6 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    e000:	88a2      	ldrh	r2, [r4, #4]
    e002:	e7e5      	b.n	dfd0 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    e004:	80aa      	strh	r2, [r5, #4]
    e006:	e7e9      	b.n	dfdc <free_list_add_bidx+0x5a>
    e008:	80eb      	strh	r3, [r5, #6]
    e00a:	e7ec      	b.n	dfe6 <free_list_add_bidx+0x64>
    e00c:	80d1      	strh	r1, [r2, #6]
    e00e:	e7f1      	b.n	dff4 <free_list_add_bidx+0x72>
    e010:	80a1      	strh	r1, [r4, #4]
    e012:	e7d0      	b.n	dfb6 <free_list_add_bidx+0x34>

0000e014 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    e014:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    e016:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
    e018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e01c:	d307      	bcc.n	e02e <free_list_add+0x1a>
	void *cmem = &buf[c];
    e01e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    e022:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    e024:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    e026:	2a01      	cmp	r2, #1
    e028:	d002      	beq.n	e030 <free_list_add+0x1c>
    e02a:	2200      	movs	r2, #0
    e02c:	e000      	b.n	e030 <free_list_add+0x1c>
    e02e:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    e030:	b9a2      	cbnz	r2, e05c <free_list_add+0x48>
	void *cmem = &buf[c];
    e032:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    e036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e03a:	d310      	bcc.n	e05e <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    e03c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    e03e:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    e040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e044:	d30d      	bcc.n	e062 <free_list_add+0x4e>
    e046:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    e048:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    e04a:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    e04e:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    e050:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    e054:	f1c2 021f 	rsb	r2, r2, #31
    e058:	f7ff ff93 	bl	df82 <free_list_add_bidx>
	}
}
    e05c:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    e05e:	8852      	ldrh	r2, [r2, #2]
    e060:	e7ed      	b.n	e03e <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    e062:	2304      	movs	r3, #4
    e064:	e7f0      	b.n	e048 <free_list_add+0x34>

0000e066 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    e066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e068:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    e06a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    e06e:	d32a      	bcc.n	e0c6 <sys_heap_init+0x60>
    e070:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    e072:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    e074:	1dc8      	adds	r0, r1, #7
    e076:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    e07a:	440d      	add	r5, r1
    e07c:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    e080:	1a2d      	subs	r5, r5, r0
    e082:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    e084:	4606      	mov	r6, r0
	heap->heap = h;
    e086:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    e088:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    e08a:	2300      	movs	r3, #0
    e08c:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    e08e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    e092:	d31a      	bcc.n	e0ca <sys_heap_init+0x64>
    e094:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    e096:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    e098:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    e09c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    e09e:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    e0a2:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    e0a6:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    e0aa:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    e0ac:	f103 0e07 	add.w	lr, r3, #7
    e0b0:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    e0b4:	2300      	movs	r3, #0
    e0b6:	4563      	cmp	r3, ip
    e0b8:	da09      	bge.n	e0ce <sys_heap_init+0x68>
		h->buckets[i].next = 0;
    e0ba:	1d1a      	adds	r2, r3, #4
    e0bc:	2400      	movs	r4, #0
    e0be:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    e0c2:	3301      	adds	r3, #1
    e0c4:	e7f7      	b.n	e0b6 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
    e0c6:	2504      	movs	r5, #4
    e0c8:	e7d3      	b.n	e072 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    e0ca:	2304      	movs	r3, #4
    e0cc:	e7e3      	b.n	e096 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    e0ce:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    e0d0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    e0d4:	d333      	bcc.n	e13e <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    e0d6:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    e0d8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    e0dc:	d331      	bcc.n	e142 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
    e0de:	2300      	movs	r3, #0
    e0e0:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
    e0e2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    e0e6:	d32f      	bcc.n	e148 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    e0e8:	6843      	ldr	r3, [r0, #4]
    e0ea:	f043 0301 	orr.w	r3, r3, #1
    e0ee:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    e0f0:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    e0f2:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    e0f4:	f02e 0307 	bic.w	r3, lr, #7
    e0f8:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    e0fa:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    e0fe:	d328      	bcc.n	e152 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    e100:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    e102:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    e104:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    e108:	d325      	bcc.n	e156 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    e10a:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    e10c:	f025 0307 	bic.w	r3, r5, #7
    e110:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
    e112:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    e114:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    e118:	d31f      	bcc.n	e15a <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
    e11a:	2400      	movs	r4, #0
    e11c:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
    e11e:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    e120:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    e124:	d31c      	bcc.n	e160 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
    e126:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
    e128:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    e12a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    e12e:	d319      	bcc.n	e164 <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    e130:	686b      	ldr	r3, [r5, #4]
    e132:	f043 0301 	orr.w	r3, r3, #1
    e136:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    e138:	f7ff ff6c 	bl	e014 <free_list_add>
}
    e13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    e13e:	8043      	strh	r3, [r0, #2]
    e140:	e7ca      	b.n	e0d8 <sys_heap_init+0x72>
    e142:	2300      	movs	r3, #0
    e144:	8003      	strh	r3, [r0, #0]
    e146:	e7cc      	b.n	e0e2 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    e148:	8843      	ldrh	r3, [r0, #2]
    e14a:	f043 0301 	orr.w	r3, r3, #1
    e14e:	8043      	strh	r3, [r0, #2]
    e150:	e7ce      	b.n	e0f0 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
    e152:	8066      	strh	r6, [r4, #2]
    e154:	e7d5      	b.n	e102 <sys_heap_init+0x9c>
    e156:	52c1      	strh	r1, [r0, r3]
    e158:	e7d8      	b.n	e10c <sys_heap_init+0xa6>
    e15a:	2400      	movs	r4, #0
    e15c:	806c      	strh	r4, [r5, #2]
    e15e:	e7de      	b.n	e11e <sys_heap_init+0xb8>
    e160:	52c2      	strh	r2, [r0, r3]
    e162:	e7e1      	b.n	e128 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    e164:	886b      	ldrh	r3, [r5, #2]
    e166:	f043 0301 	orr.w	r3, r3, #1
    e16a:	806b      	strh	r3, [r5, #2]
    e16c:	e7e4      	b.n	e138 <sys_heap_init+0xd2>

0000e16e <outs>:
{
    e16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e172:	4607      	mov	r7, r0
    e174:	460e      	mov	r6, r1
    e176:	4614      	mov	r4, r2
    e178:	4698      	mov	r8, r3
	size_t count = 0;
    e17a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    e17c:	e006      	b.n	e18c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    e17e:	4631      	mov	r1, r6
    e180:	f814 0b01 	ldrb.w	r0, [r4], #1
    e184:	47b8      	blx	r7
		if (rc < 0) {
    e186:	2800      	cmp	r0, #0
    e188:	db09      	blt.n	e19e <outs+0x30>
		++count;
    e18a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    e18c:	4544      	cmp	r4, r8
    e18e:	d3f6      	bcc.n	e17e <outs+0x10>
    e190:	f1b8 0f00 	cmp.w	r8, #0
    e194:	d102      	bne.n	e19c <outs+0x2e>
    e196:	7823      	ldrb	r3, [r4, #0]
    e198:	2b00      	cmp	r3, #0
    e19a:	d1f0      	bne.n	e17e <outs+0x10>
	return (int)count;
    e19c:	4628      	mov	r0, r5
}
    e19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e1a2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    e1a2:	4770      	bx	lr

0000e1a4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    e1a4:	b084      	sub	sp, #16
    e1a6:	ab04      	add	r3, sp, #16
    e1a8:	e903 0007 	stmdb	r3, {r0, r1, r2}
    e1ac:	2300      	movs	r3, #0
    e1ae:	f383 8811 	msr	BASEPRI, r3
    e1b2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    e1b6:	b004      	add	sp, #16
    e1b8:	4770      	bx	lr

0000e1ba <tty_putchar>:
{
    e1ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e1be:	4604      	mov	r4, r0
    e1c0:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
    e1c2:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
    e1c6:	f001 fdde 	bl	fd86 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
    e1ca:	b330      	cbz	r0, e21a <tty_putchar+0x60>
    e1cc:	2200      	movs	r2, #0
    e1ce:	4613      	mov	r3, r2
	return z_impl_k_sem_take(sem, timeout);
    e1d0:	4630      	mov	r0, r6
    e1d2:	f7fd fad9 	bl	b788 <z_impl_k_sem_take>
	if (res < 0) {
    e1d6:	2800      	cmp	r0, #0
    e1d8:	db1d      	blt.n	e216 <tty_putchar+0x5c>
	__asm__ volatile(
    e1da:	f04f 0320 	mov.w	r3, #32
    e1de:	f3ef 8111 	mrs	r1, BASEPRI
    e1e2:	f383 8812 	msr	BASEPRI_MAX, r3
    e1e6:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
    e1ea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e1ec:	1c53      	adds	r3, r2, #1
	if (tx_next >= tty->tx_ringbuf_sz) {
    e1ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e1f0:	4298      	cmp	r0, r3
    e1f2:	d800      	bhi.n	e1f6 <tty_putchar+0x3c>
		tx_next = 0;
    e1f4:	2300      	movs	r3, #0
	if (tx_next == tty->tx_get) {
    e1f6:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    e1f8:	4298      	cmp	r0, r3
    e1fa:	d02e      	beq.n	e25a <tty_putchar+0xa0>
	tty->tx_ringbuf[tty->tx_put] = c;
    e1fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e1fe:	5485      	strb	r5, [r0, r2]
	tty->tx_put = tx_next;
    e200:	87e3      	strh	r3, [r4, #62]	; 0x3e
	__asm__ volatile(
    e202:	f381 8811 	msr	BASEPRI, r1
    e206:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
    e20a:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
    e20c:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
    e20e:	69db      	ldr	r3, [r3, #28]
    e210:	b353      	cbz	r3, e268 <tty_putchar+0xae>
		api->irq_tx_enable(dev);
    e212:	4798      	blx	r3
	return 0;
    e214:	2000      	movs	r0, #0
}
    e216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 SYS_TIMEOUT_MS(tty->tx_timeout));
    e21a:	6c23      	ldr	r3, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
    e21c:	f1b3 3fff 	cmp.w	r3, #4294967295
    e220:	d017      	beq.n	e252 <tty_putchar+0x98>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
    e222:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e226:	ea4f 79e3 	mov.w	r9, r3, asr #31
    e22a:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    e22e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    e232:	03d8      	lsls	r0, r3, #15
    e234:	f240 37e7 	movw	r7, #999	; 0x3e7
    e238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e23c:	2300      	movs	r3, #0
    e23e:	19c0      	adds	r0, r0, r7
    e240:	f04f 0700 	mov.w	r7, #0
    e244:	eb47 0101 	adc.w	r1, r7, r1
    e248:	f7f2 ff4e 	bl	10e8 <__aeabi_uldivmod>
	res = k_sem_take(&tty->tx_sem,
    e24c:	4602      	mov	r2, r0
    e24e:	460b      	mov	r3, r1
    e250:	e7be      	b.n	e1d0 <tty_putchar+0x16>
    e252:	f04f 32ff 	mov.w	r2, #4294967295
    e256:	4613      	mov	r3, r2
    e258:	e7ba      	b.n	e1d0 <tty_putchar+0x16>
    e25a:	f381 8811 	msr	BASEPRI, r1
    e25e:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
    e262:	f06f 001b 	mvn.w	r0, #27
    e266:	e7d6      	b.n	e216 <tty_putchar+0x5c>
	return 0;
    e268:	2000      	movs	r0, #0
    e26a:	e7d4      	b.n	e216 <tty_putchar+0x5c>

0000e26c <tty_getchar>:
{
    e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e26e:	4604      	mov	r4, r0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    e270:	1d05      	adds	r5, r0, #4
    e272:	6a03      	ldr	r3, [r0, #32]
    e274:	f1b3 3fff 	cmp.w	r3, #4294967295
    e278:	d031      	beq.n	e2de <tty_getchar+0x72>
    e27a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e27e:	17df      	asrs	r7, r3, #31
    e280:	03f9      	lsls	r1, r7, #15
    e282:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    e286:	03d8      	lsls	r0, r3, #15
    e288:	f240 36e7 	movw	r6, #999	; 0x3e7
    e28c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e290:	2300      	movs	r3, #0
    e292:	1980      	adds	r0, r0, r6
    e294:	f04f 0600 	mov.w	r6, #0
    e298:	eb46 0101 	adc.w	r1, r6, r1
    e29c:	f7f2 ff24 	bl	10e8 <__aeabi_uldivmod>
    e2a0:	4602      	mov	r2, r0
    e2a2:	460b      	mov	r3, r1
    e2a4:	4628      	mov	r0, r5
    e2a6:	f7fd fa6f 	bl	b788 <z_impl_k_sem_take>
	if (res < 0) {
    e2aa:	2800      	cmp	r0, #0
    e2ac:	db16      	blt.n	e2dc <tty_getchar+0x70>
	__asm__ volatile(
    e2ae:	f04f 0320 	mov.w	r3, #32
    e2b2:	f3ef 8111 	mrs	r1, BASEPRI
    e2b6:	f383 8812 	msr	BASEPRI_MAX, r3
    e2ba:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
    e2be:	6960      	ldr	r0, [r4, #20]
    e2c0:	8ba2      	ldrh	r2, [r4, #28]
    e2c2:	1c53      	adds	r3, r2, #1
    e2c4:	b29b      	uxth	r3, r3
    e2c6:	83a3      	strh	r3, [r4, #28]
    e2c8:	5c80      	ldrb	r0, [r0, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
    e2ca:	69a2      	ldr	r2, [r4, #24]
    e2cc:	4293      	cmp	r3, r2
    e2ce:	d301      	bcc.n	e2d4 <tty_getchar+0x68>
		tty->rx_get = 0U;
    e2d0:	2300      	movs	r3, #0
    e2d2:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
    e2d4:	f381 8811 	msr	BASEPRI, r1
    e2d8:	f3bf 8f6f 	isb	sy
}
    e2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    e2de:	f04f 32ff 	mov.w	r2, #4294967295
    e2e2:	4613      	mov	r3, r2
    e2e4:	e7de      	b.n	e2a4 <tty_getchar+0x38>

0000e2e6 <tty_read_unbuf>:
{
    e2e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e2ea:	b083      	sub	sp, #12
    e2ec:	4681      	mov	r9, r0
    e2ee:	460e      	mov	r6, r1
    e2f0:	4615      	mov	r5, r2
	uint32_t timeout = tty->rx_timeout;
    e2f2:	6a07      	ldr	r7, [r0, #32]
	size_t out_size = 0;
    e2f4:	f04f 0800 	mov.w	r8, #0
	while (size) {
    e2f8:	e01a      	b.n	e330 <tty_read_unbuf+0x4a>
		return -ENOSYS;
    e2fa:	f06f 0457 	mvn.w	r4, #87	; 0x57
			if (out_size == 0) {
    e2fe:	f1b8 0f00 	cmp.w	r8, #0
    e302:	d003      	beq.n	e30c <tty_read_unbuf+0x26>
	return out_size;
    e304:	4640      	mov	r0, r8
}
    e306:	b003      	add	sp, #12
    e308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				errno = res;
    e30c:	f000 f9bf 	bl	e68e <__errno>
    e310:	6004      	str	r4, [r0, #0]
				return -1;
    e312:	f04f 30ff 	mov.w	r0, #4294967295
    e316:	e7f6      	b.n	e306 <tty_read_unbuf+0x20>
		if (size == 0 ||
    e318:	2d00      	cmp	r5, #0
    e31a:	d0f3      	beq.n	e304 <tty_read_unbuf+0x1e>
    e31c:	f1b7 3fff 	cmp.w	r7, #4294967295
    e320:	d003      	beq.n	e32a <tty_read_unbuf+0x44>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
    e322:	1e7b      	subs	r3, r7, #1
    e324:	2f00      	cmp	r7, #0
    e326:	d0ed      	beq.n	e304 <tty_read_unbuf+0x1e>
    e328:	461f      	mov	r7, r3
		if (res == -1) {
    e32a:	f1b4 3fff 	cmp.w	r4, #4294967295
    e32e:	d018      	beq.n	e362 <tty_read_unbuf+0x7c>
	while (size) {
    e330:	2d00      	cmp	r5, #0
    e332:	d0e7      	beq.n	e304 <tty_read_unbuf+0x1e>
		res = uart_poll_in(tty->uart_dev, &c);
    e334:	f8d9 0000 	ldr.w	r0, [r9]
	const struct uart_driver_api *api =
    e338:	6883      	ldr	r3, [r0, #8]
	if (api->poll_in == NULL) {
    e33a:	681b      	ldr	r3, [r3, #0]
    e33c:	2b00      	cmp	r3, #0
    e33e:	d0dc      	beq.n	e2fa <tty_read_unbuf+0x14>
	return api->poll_in(dev, p_char);
    e340:	f10d 0107 	add.w	r1, sp, #7
    e344:	4798      	blx	r3
    e346:	4604      	mov	r4, r0
		if (res <= -2) {
    e348:	f1b0 3fff 	cmp.w	r0, #4294967295
    e34c:	dbd7      	blt.n	e2fe <tty_read_unbuf+0x18>
		if (res == 0) {
    e34e:	2800      	cmp	r0, #0
    e350:	d1e2      	bne.n	e318 <tty_read_unbuf+0x32>
			*p++ = c;
    e352:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e356:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
    e35a:	f108 0801 	add.w	r8, r8, #1
			size--;
    e35e:	3d01      	subs	r5, #1
    e360:	e7da      	b.n	e318 <tty_read_unbuf+0x32>
	return z_impl_k_sleep(timeout);
    e362:	2021      	movs	r0, #33	; 0x21
    e364:	2100      	movs	r1, #0
    e366:	f7fd fdcb 	bl	bf00 <z_impl_k_sleep>
    e36a:	e7e1      	b.n	e330 <tty_read_unbuf+0x4a>

0000e36c <tty_irq_input_hook>:
{
    e36c:	b510      	push	{r4, lr}
	int rx_next = tty->rx_put + 1;
    e36e:	8bc2      	ldrh	r2, [r0, #30]
    e370:	1c53      	adds	r3, r2, #1
	if (rx_next >= tty->rx_ringbuf_sz) {
    e372:	6984      	ldr	r4, [r0, #24]
    e374:	429c      	cmp	r4, r3
    e376:	d800      	bhi.n	e37a <tty_irq_input_hook+0xe>
		rx_next = 0;
    e378:	2300      	movs	r3, #0
	if (rx_next == tty->rx_get) {
    e37a:	8b84      	ldrh	r4, [r0, #28]
    e37c:	429c      	cmp	r4, r3
    e37e:	d007      	beq.n	e390 <tty_irq_input_hook+0x24>
	tty->rx_ringbuf[tty->rx_put] = c;
    e380:	6944      	ldr	r4, [r0, #20]
    e382:	54a1      	strb	r1, [r4, r2]
	tty->rx_put = rx_next;
    e384:	83c3      	strh	r3, [r0, #30]
	k_sem_give(&tty->rx_sem);
    e386:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    e388:	f7fd f9da 	bl	b740 <z_impl_k_sem_give>
}
    e38c:	2001      	movs	r0, #1
    e38e:	bd10      	pop	{r4, pc}
		tty_putchar(tty, '~');
    e390:	217e      	movs	r1, #126	; 0x7e
    e392:	f7ff ff12 	bl	e1ba <tty_putchar>
		return 1;
    e396:	e7f9      	b.n	e38c <tty_irq_input_hook+0x20>

0000e398 <tty_uart_isr>:
{
    e398:	b530      	push	{r4, r5, lr}
    e39a:	b083      	sub	sp, #12
    e39c:	4604      	mov	r4, r0
    e39e:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
    e3a0:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
    e3a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e3a4:	b103      	cbz	r3, e3a8 <tty_uart_isr+0x10>
	return api->irq_update(dev);
    e3a6:	4798      	blx	r3
	const struct uart_driver_api *api =
    e3a8:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
    e3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e3ac:	b143      	cbz	r3, e3c0 <tty_uart_isr+0x28>
	return api->irq_rx_ready(dev);
    e3ae:	4620      	mov	r0, r4
    e3b0:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    e3b2:	b180      	cbz	r0, e3d6 <tty_uart_isr+0x3e>
    e3b4:	e004      	b.n	e3c0 <tty_uart_isr+0x28>
			tty_irq_input_hook(tty, c);
    e3b6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e3ba:	4628      	mov	r0, r5
    e3bc:	f7ff ffd6 	bl	e36c <tty_irq_input_hook>
	const struct uart_driver_api *api =
    e3c0:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
    e3c2:	699b      	ldr	r3, [r3, #24]
    e3c4:	2b00      	cmp	r3, #0
    e3c6:	d0f6      	beq.n	e3b6 <tty_uart_isr+0x1e>
	return api->fifo_read(dev, rx_data, size);
    e3c8:	2201      	movs	r2, #1
    e3ca:	f10d 0107 	add.w	r1, sp, #7
    e3ce:	4620      	mov	r0, r4
    e3d0:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
    e3d2:	2800      	cmp	r0, #0
    e3d4:	d1ef      	bne.n	e3b6 <tty_uart_isr+0x1e>
	const struct uart_driver_api *api =
    e3d6:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
    e3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e3da:	b113      	cbz	r3, e3e2 <tty_uart_isr+0x4a>
	return api->irq_tx_ready(dev);
    e3dc:	4620      	mov	r0, r4
    e3de:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    e3e0:	b1b8      	cbz	r0, e412 <tty_uart_isr+0x7a>
		if (tty->tx_get == tty->tx_put) {
    e3e2:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
    e3e4:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
    e3e6:	4299      	cmp	r1, r3
    e3e8:	d015      	beq.n	e416 <tty_uart_isr+0x7e>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
    e3ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e3ec:	1c4a      	adds	r2, r1, #1
    e3ee:	87aa      	strh	r2, [r5, #60]	; 0x3c
    e3f0:	4419      	add	r1, r3
	const struct uart_driver_api *api =
    e3f2:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
    e3f4:	695b      	ldr	r3, [r3, #20]
    e3f6:	b113      	cbz	r3, e3fe <tty_uart_isr+0x66>
	return api->fifo_fill(dev, tx_data, size);
    e3f8:	2201      	movs	r2, #1
    e3fa:	4620      	mov	r0, r4
    e3fc:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
    e3fe:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
    e400:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e402:	429a      	cmp	r2, r3
    e404:	d301      	bcc.n	e40a <tty_uart_isr+0x72>
				tty->tx_get = 0U;
    e406:	2300      	movs	r3, #0
    e408:	87ab      	strh	r3, [r5, #60]	; 0x3c
			k_sem_give(&tty->tx_sem);
    e40a:	f105 0024 	add.w	r0, r5, #36	; 0x24
    e40e:	f7fd f997 	bl	b740 <z_impl_k_sem_give>
}
    e412:	b003      	add	sp, #12
    e414:	bd30      	pop	{r4, r5, pc}
	const struct uart_driver_api *api =
    e416:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
    e418:	6a1b      	ldr	r3, [r3, #32]
    e41a:	2b00      	cmp	r3, #0
    e41c:	d0f9      	beq.n	e412 <tty_uart_isr+0x7a>
		api->irq_tx_disable(dev);
    e41e:	4620      	mov	r0, r4
    e420:	4798      	blx	r3
    e422:	e7f6      	b.n	e412 <tty_uart_isr+0x7a>

0000e424 <tty_read>:
{
    e424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e428:	4607      	mov	r7, r0
    e42a:	460d      	mov	r5, r1
	if (tty->rx_ringbuf_sz == 0U) {
    e42c:	6983      	ldr	r3, [r0, #24]
    e42e:	b17b      	cbz	r3, e450 <tty_read+0x2c>
	size_t out_size = 0;
    e430:	2600      	movs	r6, #0
	while (size--) {
    e432:	f102 38ff 	add.w	r8, r2, #4294967295
    e436:	b1ba      	cbz	r2, e468 <tty_read+0x44>
		res = tty_getchar(tty);
    e438:	4638      	mov	r0, r7
    e43a:	f7ff ff17 	bl	e26c <tty_getchar>
		if (res < 0) {
    e43e:	1e04      	subs	r4, r0, #0
    e440:	db0a      	blt.n	e458 <tty_read+0x34>
		*p++ = (uint8_t)res;
    e442:	4629      	mov	r1, r5
    e444:	f801 4b01 	strb.w	r4, [r1], #1
		out_size++;
    e448:	3601      	adds	r6, #1
		*p++ = (uint8_t)res;
    e44a:	460d      	mov	r5, r1
	while (size--) {
    e44c:	4642      	mov	r2, r8
    e44e:	e7f0      	b.n	e432 <tty_read+0xe>
		return tty_read_unbuf(tty, buf, size);
    e450:	f7ff ff49 	bl	e2e6 <tty_read_unbuf>
    e454:	4604      	mov	r4, r0
    e456:	e008      	b.n	e46a <tty_read+0x46>
			if (out_size == 0) {
    e458:	b10e      	cbz	r6, e45e <tty_read+0x3a>
			return out_size;
    e45a:	4634      	mov	r4, r6
    e45c:	e005      	b.n	e46a <tty_read+0x46>
				errno = -res;
    e45e:	f000 f916 	bl	e68e <__errno>
    e462:	4263      	negs	r3, r4
    e464:	6003      	str	r3, [r0, #0]
				return res;
    e466:	e000      	b.n	e46a <tty_read+0x46>
	return out_size;
    e468:	4634      	mov	r4, r6
}
    e46a:	4620      	mov	r0, r4
    e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e470 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
    e470:	b570      	push	{r4, r5, r6, lr}
    e472:	4604      	mov	r4, r0
    e474:	460e      	mov	r6, r1
    e476:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
    e478:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
    e47a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
    e47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e47e:	b103      	cbz	r3, e482 <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
    e480:	4798      	blx	r3

	tty->rx_ringbuf = buf;
    e482:	6166      	str	r6, [r4, #20]
	tty->rx_ringbuf_sz = size;
    e484:	61a5      	str	r5, [r4, #24]

	if (size > 0) {
    e486:	b90d      	cbnz	r5, e48c <tty_set_rx_buf+0x1c>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
	}

	return 0;
}
    e488:	2000      	movs	r0, #0
    e48a:	bd70      	pop	{r4, r5, r6, pc}
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
    e48c:	1d20      	adds	r0, r4, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    e48e:	f04f 32ff 	mov.w	r2, #4294967295
    e492:	2100      	movs	r1, #0
    e494:	f001 fcbb 	bl	fe0e <z_impl_k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
    e498:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
    e49a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
    e49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e49e:	2b00      	cmp	r3, #0
    e4a0:	d0f2      	beq.n	e488 <tty_set_rx_buf+0x18>
		api->irq_rx_enable(dev);
    e4a2:	4798      	blx	r3
    e4a4:	e7f0      	b.n	e488 <tty_set_rx_buf+0x18>

0000e4a6 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
    e4a6:	b570      	push	{r4, r5, r6, lr}
    e4a8:	4604      	mov	r4, r0
    e4aa:	460e      	mov	r6, r1
    e4ac:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
    e4ae:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
    e4b0:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
    e4b2:	6a1b      	ldr	r3, [r3, #32]
    e4b4:	b103      	cbz	r3, e4b8 <tty_set_tx_buf+0x12>
		api->irq_tx_disable(dev);
    e4b6:	4798      	blx	r3

	tty->tx_ringbuf = buf;
    e4b8:	6366      	str	r6, [r4, #52]	; 0x34
	tty->tx_ringbuf_sz = size;
    e4ba:	63a5      	str	r5, [r4, #56]	; 0x38

	k_sem_init(&tty->tx_sem, size - 1, K_SEM_MAX_LIMIT);
    e4bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    e4c0:	1e69      	subs	r1, r5, #1
    e4c2:	f04f 32ff 	mov.w	r2, #4294967295
    e4c6:	f001 fca2 	bl	fe0e <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
    e4ca:	2000      	movs	r0, #0
    e4cc:	bd70      	pop	{r4, r5, r6, pc}

0000e4ce <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    e4ce:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
    e4d0:	f7f5 fa3c 	bl	394c <__do_global_ctors_aux>
	__do_init_array_aux();
    e4d4:	f7f5 fa2c 	bl	3930 <__do_init_array_aux>
}
    e4d8:	bd08      	pop	{r3, pc}

0000e4da <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
    e4da:	2000      	movs	r0, #0
    e4dc:	4770      	bx	lr

0000e4de <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    e4de:	2200      	movs	r2, #0
    e4e0:	6002      	str	r2, [r0, #0]
    e4e2:	6042      	str	r2, [r0, #4]
    e4e4:	6082      	str	r2, [r0, #8]
}
    e4e6:	4770      	bx	lr

0000e4e8 <abort_function>:
{
    e4e8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    e4ea:	2000      	movs	r0, #0
    e4ec:	f7f5 f946 	bl	377c <sys_reboot>

0000e4f0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    e4f0:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    e4f2:	f001 fbd0 	bl	fc96 <z_fatal_error>
}
    e4f6:	bd08      	pop	{r3, pc}

0000e4f8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    e4f8:	b508      	push	{r3, lr}
    e4fa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    e4fc:	6800      	ldr	r0, [r0, #0]
    e4fe:	f7ff fff7 	bl	e4f0 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    e502:	bd08      	pop	{r3, pc}

0000e504 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    e504:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    e506:	2100      	movs	r1, #0
    e508:	2001      	movs	r0, #1
    e50a:	f7ff fff1 	bl	e4f0 <z_arm_fatal_error>
}
    e50e:	bd08      	pop	{r3, pc}

0000e510 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    e510:	b508      	push	{r3, lr}
	handler();
    e512:	f7f5 fc0b 	bl	3d2c <z_SysNmiOnReset>
	z_arm_int_exit();
    e516:	f7f5 fcd9 	bl	3ecc <z_arm_exc_exit>
}
    e51a:	bd08      	pop	{r3, pc}

0000e51c <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    e51c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    e520:	f383 880b 	msr	PSPLIM, r3
}
    e524:	4770      	bx	lr

0000e526 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
    e526:	b508      	push	{r3, lr}
    e528:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
    e52a:	4601      	mov	r1, r0
    e52c:	4618      	mov	r0, r3
    e52e:	f7ff ffd4 	bl	e4da <__cxa_atexit>
}
    e532:	bd08      	pop	{r3, pc}

0000e534 <memory_fault_recoverable>:
}
    e534:	2000      	movs	r0, #0
    e536:	4770      	bx	lr

0000e538 <debug_monitor>:
	*recoverable = false;
    e538:	2300      	movs	r3, #0
    e53a:	700b      	strb	r3, [r1, #0]
}
    e53c:	4770      	bx	lr

0000e53e <fault_handle>:
{
    e53e:	b508      	push	{r3, lr}
	*recoverable = false;
    e540:	2300      	movs	r3, #0
    e542:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    e544:	1ecb      	subs	r3, r1, #3
    e546:	2b09      	cmp	r3, #9
    e548:	d81a      	bhi.n	e580 <fault_handle+0x42>
    e54a:	e8df f003 	tbb	[pc, r3]
    e54e:	0905      	.short	0x0905
    e550:	1919110d 	.word	0x1919110d
    e554:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    e558:	4611      	mov	r1, r2
    e55a:	f7f5 fd33 	bl	3fc4 <hard_fault>
		break;
    e55e:	e010      	b.n	e582 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    e560:	2100      	movs	r1, #0
    e562:	f7f5 fcc1 	bl	3ee8 <mem_manage_fault>
		break;
    e566:	e00c      	b.n	e582 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    e568:	2100      	movs	r1, #0
    e56a:	f7f5 fce9 	bl	3f40 <bus_fault>
		break;
    e56e:	e008      	b.n	e582 <fault_handle+0x44>
		reason = usage_fault(esf);
    e570:	f7f5 fd10 	bl	3f94 <usage_fault>
		break;
    e574:	e005      	b.n	e582 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    e576:	4611      	mov	r1, r2
    e578:	f7ff ffde 	bl	e538 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e57c:	2000      	movs	r0, #0
		break;
    e57e:	e000      	b.n	e582 <fault_handle+0x44>
	*recoverable = false;
    e580:	2000      	movs	r0, #0
}
    e582:	bd08      	pop	{r3, pc}

0000e584 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    e584:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    e588:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    e58c:	d001      	beq.n	e592 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    e58e:	b2c0      	uxtb	r0, r0
    e590:	4770      	bx	lr
	}

	return -EINVAL;
    e592:	f06f 0015 	mvn.w	r0, #21
}
    e596:	4770      	bx	lr

0000e598 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    e598:	6843      	ldr	r3, [r0, #4]
		&&
    e59a:	2b1f      	cmp	r3, #31
    e59c:	d90a      	bls.n	e5b4 <mpu_partition_is_valid+0x1c>
		&&
    e59e:	f013 0f1f 	tst.w	r3, #31
    e5a2:	d001      	beq.n	e5a8 <mpu_partition_is_valid+0x10>
		&&
    e5a4:	2000      	movs	r0, #0
    e5a6:	4770      	bx	lr
		((part->start &
    e5a8:	6803      	ldr	r3, [r0, #0]
		&&
    e5aa:	f013 0f1f 	tst.w	r3, #31
    e5ae:	d003      	beq.n	e5b8 <mpu_partition_is_valid+0x20>
    e5b0:	2000      	movs	r0, #0
    e5b2:	4770      	bx	lr
    e5b4:	2000      	movs	r0, #0
    e5b6:	4770      	bx	lr
    e5b8:	2001      	movs	r0, #1
}
    e5ba:	4770      	bx	lr

0000e5bc <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    e5bc:	2807      	cmp	r0, #7
    e5be:	d805      	bhi.n	e5cc <region_allocate_and_init+0x10>
{
    e5c0:	b510      	push	{r4, lr}
    e5c2:	4604      	mov	r4, r0
	region_init(index, region_conf);
    e5c4:	f7f5 fe78 	bl	42b8 <region_init>
	return index;
    e5c8:	4620      	mov	r0, r4
}
    e5ca:	bd10      	pop	{r4, pc}
		return -EINVAL;
    e5cc:	f06f 0015 	mvn.w	r0, #21
}
    e5d0:	4770      	bx	lr

0000e5d2 <mpu_configure_region>:
{
    e5d2:	b530      	push	{r4, r5, lr}
    e5d4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    e5d6:	680b      	ldr	r3, [r1, #0]
    e5d8:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e5da:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    e5dc:	890d      	ldrh	r5, [r1, #8]
    e5de:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e5e2:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    e5e6:	7a89      	ldrb	r1, [r1, #10]
    e5e8:	f361 1247 	bfi	r2, r1, #5, #3
    e5ec:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e5f0:	f023 031f 	bic.w	r3, r3, #31
    e5f4:	4423      	add	r3, r4
    e5f6:	3b01      	subs	r3, #1
    e5f8:	f023 031f 	bic.w	r3, r3, #31
    e5fc:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    e5fe:	4669      	mov	r1, sp
    e600:	f7ff ffdc 	bl	e5bc <region_allocate_and_init>
}
    e604:	b005      	add	sp, #20
    e606:	bd30      	pop	{r4, r5, pc}

0000e608 <arm_core_mpu_configure_static_mpu_regions>:
{
    e608:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e60a:	f7f5 ff33 	bl	4474 <mpu_configure_static_mpu_regions>
}
    e60e:	bd08      	pop	{r3, pc}

0000e610 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e610:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e612:	f7f5 ff39 	bl	4488 <mpu_mark_areas_for_dynamic_regions>
}
    e616:	bd08      	pop	{r3, pc}

0000e618 <malloc_prepare>:
}
    e618:	2000      	movs	r0, #0
    e61a:	4770      	bx	lr

0000e61c <_stdout_hook_default>:
}
    e61c:	f04f 30ff 	mov.w	r0, #4294967295
    e620:	4770      	bx	lr

0000e622 <_stdin_hook_default>:
}
    e622:	2000      	movs	r0, #0
    e624:	4770      	bx	lr

0000e626 <_read>:
{
    e626:	b508      	push	{r3, lr}
    e628:	4608      	mov	r0, r1
    e62a:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    e62c:	f7f5 ffbc 	bl	45a8 <z_impl_zephyr_read_stdin>
}
    e630:	bd08      	pop	{r3, pc}

0000e632 <_write>:
{
    e632:	b508      	push	{r3, lr}
    e634:	4608      	mov	r0, r1
    e636:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    e638:	f7f5 ffcc 	bl	45d4 <z_impl_zephyr_write_stdout>
}
    e63c:	bd08      	pop	{r3, pc}

0000e63e <_close>:
}
    e63e:	f04f 30ff 	mov.w	r0, #4294967295
    e642:	4770      	bx	lr

0000e644 <_lseek>:
}
    e644:	2000      	movs	r0, #0
    e646:	4770      	bx	lr

0000e648 <_isatty>:
}
    e648:	2802      	cmp	r0, #2
    e64a:	bfcc      	ite	gt
    e64c:	2000      	movgt	r0, #0
    e64e:	2001      	movle	r0, #1
    e650:	4770      	bx	lr

0000e652 <_kill>:
}
    e652:	2000      	movs	r0, #0
    e654:	4770      	bx	lr

0000e656 <_getpid>:
}
    e656:	2000      	movs	r0, #0
    e658:	4770      	bx	lr

0000e65a <_fstat>:
	st->st_mode = S_IFCHR;
    e65a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e65e:	604b      	str	r3, [r1, #4]
}
    e660:	2000      	movs	r0, #0
    e662:	4770      	bx	lr

0000e664 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    e664:	b510      	push	{r4, lr}
    e666:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    e668:	2014      	movs	r0, #20
    e66a:	f7fe f89b 	bl	c7a4 <malloc>
    e66e:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    e670:	f001 fbc6 	bl	fe00 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    e674:	bd10      	pop	{r4, pc}

0000e676 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    e676:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    e678:	f04f 32ff 	mov.w	r2, #4294967295
    e67c:	f04f 33ff 	mov.w	r3, #4294967295
    e680:	f7fc ff90 	bl	b5a4 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    e684:	bd08      	pop	{r3, pc}

0000e686 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    e686:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    e688:	f7fd f816 	bl	b6b8 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
    e68c:	bd08      	pop	{r3, pc}

0000e68e <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
    e68e:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    e690:	f7fc fd54 	bl	b13c <z_impl_z_errno>
	return z_errno();
}
    e694:	bd08      	pop	{r3, pc}

0000e696 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    e696:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    e698:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e69c:	0089      	lsls	r1, r1, #2
    e69e:	3180      	adds	r1, #128	; 0x80
}
    e6a0:	4408      	add	r0, r1
    e6a2:	4770      	bx	lr

0000e6a4 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    e6a4:	6840      	ldr	r0, [r0, #4]
}
    e6a6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    e6aa:	4770      	bx	lr

0000e6ac <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    e6ac:	6900      	ldr	r0, [r0, #16]
}
    e6ae:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    e6b2:	4770      	bx	lr

0000e6b4 <get_status>:
{
    e6b4:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e6b6:	b2c9      	uxtb	r1, r1
    e6b8:	f7ff ffed 	bl	e696 <get_sub_data>
    e6bc:	6880      	ldr	r0, [r0, #8]
}
    e6be:	f000 0007 	and.w	r0, r0, #7
    e6c2:	bd08      	pop	{r3, pc}

0000e6c4 <set_off_state>:
	__asm__ volatile(
    e6c4:	f04f 0320 	mov.w	r3, #32
    e6c8:	f3ef 8211 	mrs	r2, BASEPRI
    e6cc:	f383 8812 	msr	BASEPRI_MAX, r3
    e6d0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e6d4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e6d6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    e6da:	d001      	beq.n	e6e0 <set_off_state+0x1c>
    e6dc:	428b      	cmp	r3, r1
    e6de:	d107      	bne.n	e6f0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e6e0:	2301      	movs	r3, #1
    e6e2:	6003      	str	r3, [r0, #0]
	int err = 0;
    e6e4:	2000      	movs	r0, #0
	__asm__ volatile(
    e6e6:	f382 8811 	msr	BASEPRI, r2
    e6ea:	f3bf 8f6f 	isb	sy
}
    e6ee:	4770      	bx	lr
		err = -EPERM;
    e6f0:	f04f 30ff 	mov.w	r0, #4294967295
    e6f4:	e7f7      	b.n	e6e6 <set_off_state+0x22>

0000e6f6 <set_starting_state>:
{
    e6f6:	b410      	push	{r4}
	__asm__ volatile(
    e6f8:	f04f 0320 	mov.w	r3, #32
    e6fc:	f3ef 8211 	mrs	r2, BASEPRI
    e700:	f383 8812 	msr	BASEPRI_MAX, r3
    e704:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e708:	6803      	ldr	r3, [r0, #0]
    e70a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    e70e:	f003 0307 	and.w	r3, r3, #7
    e712:	2b01      	cmp	r3, #1
    e714:	d009      	beq.n	e72a <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    e716:	428c      	cmp	r4, r1
    e718:	d00a      	beq.n	e730 <set_starting_state+0x3a>
		err = -EPERM;
    e71a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    e71e:	f382 8811 	msr	BASEPRI, r2
    e722:	f3bf 8f6f 	isb	sy
}
    e726:	bc10      	pop	{r4}
    e728:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    e72a:	6001      	str	r1, [r0, #0]
	int err = 0;
    e72c:	2000      	movs	r0, #0
    e72e:	e7f6      	b.n	e71e <set_starting_state+0x28>
		err = -EALREADY;
    e730:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e734:	e7f3      	b.n	e71e <set_starting_state+0x28>

0000e736 <set_on_state>:
	__asm__ volatile(
    e736:	f04f 0320 	mov.w	r3, #32
    e73a:	f3ef 8211 	mrs	r2, BASEPRI
    e73e:	f383 8812 	msr	BASEPRI_MAX, r3
    e742:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    e746:	6803      	ldr	r3, [r0, #0]
    e748:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e74c:	f043 0302 	orr.w	r3, r3, #2
    e750:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    e752:	f382 8811 	msr	BASEPRI, r2
    e756:	f3bf 8f6f 	isb	sy
}
    e75a:	4770      	bx	lr

0000e75c <clkstarted_handle>:
{
    e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e75e:	4606      	mov	r6, r0
    e760:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    e762:	f7ff ff98 	bl	e696 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    e766:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    e768:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    e76a:	2300      	movs	r3, #0
    e76c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    e770:	f7ff ffe1 	bl	e736 <set_on_state>
	if (callback) {
    e774:	b11d      	cbz	r5, e77e <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e776:	463a      	mov	r2, r7
    e778:	4621      	mov	r1, r4
    e77a:	4630      	mov	r0, r6
    e77c:	47a8      	blx	r5
}
    e77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e780 <stop>:
{
    e780:	b570      	push	{r4, r5, r6, lr}
    e782:	4606      	mov	r6, r0
    e784:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    e786:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e788:	4621      	mov	r1, r4
    e78a:	f7ff ff84 	bl	e696 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    e78e:	4629      	mov	r1, r5
    e790:	3008      	adds	r0, #8
    e792:	f7ff ff97 	bl	e6c4 <set_off_state>
	if (err < 0) {
    e796:	2800      	cmp	r0, #0
    e798:	db06      	blt.n	e7a8 <stop+0x28>
	get_sub_config(dev, type)->stop();
    e79a:	4621      	mov	r1, r4
    e79c:	4630      	mov	r0, r6
    e79e:	f7ff ff81 	bl	e6a4 <get_sub_config>
    e7a2:	6843      	ldr	r3, [r0, #4]
    e7a4:	4798      	blx	r3
	return 0;
    e7a6:	2000      	movs	r0, #0
}
    e7a8:	bd70      	pop	{r4, r5, r6, pc}

0000e7aa <api_stop>:
{
    e7aa:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    e7ac:	2280      	movs	r2, #128	; 0x80
    e7ae:	f7ff ffe7 	bl	e780 <stop>
}
    e7b2:	bd08      	pop	{r3, pc}

0000e7b4 <async_start>:
{
    e7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7b8:	4606      	mov	r6, r0
    e7ba:	4690      	mov	r8, r2
    e7bc:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    e7be:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e7c0:	4629      	mov	r1, r5
    e7c2:	f7ff ff68 	bl	e696 <get_sub_data>
    e7c6:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    e7c8:	9906      	ldr	r1, [sp, #24]
    e7ca:	3008      	adds	r0, #8
    e7cc:	f7ff ff93 	bl	e6f6 <set_starting_state>
	if (err < 0) {
    e7d0:	2800      	cmp	r0, #0
    e7d2:	db09      	blt.n	e7e8 <async_start+0x34>
	subdata->cb = cb;
    e7d4:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    e7d8:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    e7da:	4629      	mov	r1, r5
    e7dc:	4630      	mov	r0, r6
    e7de:	f7ff ff61 	bl	e6a4 <get_sub_config>
    e7e2:	6803      	ldr	r3, [r0, #0]
    e7e4:	4798      	blx	r3
	return 0;
    e7e6:	2000      	movs	r0, #0
}
    e7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e7ec <api_start>:
{
    e7ec:	b510      	push	{r4, lr}
    e7ee:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    e7f0:	2480      	movs	r4, #128	; 0x80
    e7f2:	9400      	str	r4, [sp, #0]
    e7f4:	f7ff ffde 	bl	e7b4 <async_start>
}
    e7f8:	b002      	add	sp, #8
    e7fa:	bd10      	pop	{r4, pc}

0000e7fc <onoff_started_callback>:
{
    e7fc:	b510      	push	{r4, lr}
    e7fe:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    e800:	b2c9      	uxtb	r1, r1
    e802:	f7ff ff53 	bl	e6ac <get_onoff_manager>
	notify(mgr, 0);
    e806:	2100      	movs	r1, #0
    e808:	47a0      	blx	r4
}
    e80a:	bd10      	pop	{r4, pc}

0000e80c <hfclk_start>:
{
    e80c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    e80e:	2001      	movs	r0, #1
    e810:	f7f7 f95a 	bl	5ac8 <nrfx_clock_start>
}
    e814:	bd08      	pop	{r3, pc}

0000e816 <hfclkaudio_start>:
{
    e816:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    e818:	2003      	movs	r0, #3
    e81a:	f7f7 f955 	bl	5ac8 <nrfx_clock_start>
}
    e81e:	bd08      	pop	{r3, pc}

0000e820 <hfclk192m_start>:
{
    e820:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    e822:	2002      	movs	r0, #2
    e824:	f7f7 f950 	bl	5ac8 <nrfx_clock_start>
}
    e828:	bd08      	pop	{r3, pc}

0000e82a <lfclk_start>:
{
    e82a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    e82c:	2000      	movs	r0, #0
    e82e:	f7f7 f94b 	bl	5ac8 <nrfx_clock_start>
}
    e832:	bd08      	pop	{r3, pc}

0000e834 <hfclk_stop>:
{
    e834:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    e836:	2001      	movs	r0, #1
    e838:	f7f7 f9a0 	bl	5b7c <nrfx_clock_stop>
}
    e83c:	bd08      	pop	{r3, pc}

0000e83e <hfclkaudio_stop>:
{
    e83e:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    e840:	2003      	movs	r0, #3
    e842:	f7f7 f99b 	bl	5b7c <nrfx_clock_stop>
}
    e846:	bd08      	pop	{r3, pc}

0000e848 <hfclk192m_stop>:
{
    e848:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    e84a:	2002      	movs	r0, #2
    e84c:	f7f7 f996 	bl	5b7c <nrfx_clock_stop>
}
    e850:	bd08      	pop	{r3, pc}

0000e852 <lfclk_stop>:
{
    e852:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    e854:	2000      	movs	r0, #0
    e856:	f7f7 f991 	bl	5b7c <nrfx_clock_stop>
}
    e85a:	bd08      	pop	{r3, pc}

0000e85c <blocking_start_callback>:
{
    e85c:	b508      	push	{r3, lr}
    e85e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    e860:	f7fc ff6e 	bl	b740 <z_impl_k_sem_give>
}
    e864:	bd08      	pop	{r3, pc}

0000e866 <debug_hook_out_nop>:
}
    e866:	2000      	movs	r0, #0
    e868:	4770      	bx	lr

0000e86a <gpio_nrfx_port_get_raw>:
	return port->config;
    e86a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e86c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    e86e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    e870:	600b      	str	r3, [r1, #0]
}
    e872:	2000      	movs	r0, #0
    e874:	4770      	bx	lr

0000e876 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    e876:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e878:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    e87a:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    e87c:	4042      	eors	r2, r0
    e87e:	400a      	ands	r2, r1
    e880:	4042      	eors	r2, r0
    p_reg->OUT = value;
    e882:	605a      	str	r2, [r3, #4]
}
    e884:	2000      	movs	r0, #0
    e886:	4770      	bx	lr

0000e888 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    e888:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e88a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    e88c:	6099      	str	r1, [r3, #8]
}
    e88e:	2000      	movs	r0, #0
    e890:	4770      	bx	lr

0000e892 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    e892:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e894:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    e896:	60d9      	str	r1, [r3, #12]
}
    e898:	2000      	movs	r0, #0
    e89a:	4770      	bx	lr

0000e89c <gpio_nrfx_port_toggle_bits>:
	return port->config;
    e89c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e89e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    e8a0:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    e8a2:	404b      	eors	r3, r1
    p_reg->OUT = value;
    e8a4:	6053      	str	r3, [r2, #4]
}
    e8a6:	2000      	movs	r0, #0
    e8a8:	4770      	bx	lr

0000e8aa <gpio_nrfx_manage_callback>:
{
    e8aa:	b470      	push	{r4, r5, r6}
	return port->data;
    e8ac:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e8ae:	1d05      	adds	r5, r0, #4
	return list->head;
    e8b0:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
    e8b2:	b1db      	cbz	r3, e8ec <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    e8b4:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e8b6:	2400      	movs	r4, #0
    e8b8:	e00a      	b.n	e8d0 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    e8ba:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    e8bc:	6043      	str	r3, [r0, #4]
	return list->tail;
    e8be:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    e8c0:	42a1      	cmp	r1, r4
    e8c2:	d10f      	bne.n	e8e4 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    e8c4:	606b      	str	r3, [r5, #4]
}
    e8c6:	e00d      	b.n	e8e4 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    e8c8:	606c      	str	r4, [r5, #4]
}
    e8ca:	e00b      	b.n	e8e4 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e8cc:	461c      	mov	r4, r3
    e8ce:	681b      	ldr	r3, [r3, #0]
    e8d0:	b15b      	cbz	r3, e8ea <gpio_nrfx_manage_callback+0x40>
    e8d2:	429e      	cmp	r6, r3
    e8d4:	d1fa      	bne.n	e8cc <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    e8d6:	2c00      	cmp	r4, #0
    e8d8:	d0ef      	beq.n	e8ba <gpio_nrfx_manage_callback+0x10>
	return node->next;
    e8da:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    e8dc:	6023      	str	r3, [r4, #0]
	return list->tail;
    e8de:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    e8e0:	4299      	cmp	r1, r3
    e8e2:	d0f1      	beq.n	e8c8 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    e8e4:	2300      	movs	r3, #0
    e8e6:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e8e8:	e000      	b.n	e8ec <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    e8ea:	b152      	cbz	r2, e902 <gpio_nrfx_manage_callback+0x58>
	if (set) {
    e8ec:	b162      	cbz	r2, e908 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    e8ee:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    e8f0:	600b      	str	r3, [r1, #0]
	list->head = node;
    e8f2:	6041      	str	r1, [r0, #4]
	return list->tail;
    e8f4:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    e8f6:	b10b      	cbz	r3, e8fc <gpio_nrfx_manage_callback+0x52>
	return 0;
    e8f8:	2000      	movs	r0, #0
    e8fa:	e006      	b.n	e90a <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    e8fc:	6069      	str	r1, [r5, #4]
    e8fe:	2000      	movs	r0, #0
}
    e900:	e003      	b.n	e90a <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    e902:	f06f 0015 	mvn.w	r0, #21
    e906:	e000      	b.n	e90a <gpio_nrfx_manage_callback+0x60>
	return 0;
    e908:	2000      	movs	r0, #0
}
    e90a:	bc70      	pop	{r4, r5, r6}
    e90c:	4770      	bx	lr

0000e90e <endtx_isr>:
	return dev->config;
    e90e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e910:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    e912:	f04f 0120 	mov.w	r1, #32
    e916:	f3ef 8211 	mrs	r2, BASEPRI
    e91a:	f381 8812 	msr	BASEPRI_MAX, r1
    e91e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e922:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    e926:	b131      	cbz	r1, e936 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e928:	2100      	movs	r1, #0
    e92a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    e92e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e932:	2101      	movs	r1, #1
    e934:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    e936:	f382 8811 	msr	BASEPRI, r2
    e93a:	f3bf 8f6f 	isb	sy
}
    e93e:	4770      	bx	lr

0000e940 <uarte_nrfx_isr_int>:
{
    e940:	b538      	push	{r3, r4, r5, lr}
    e942:	4604      	mov	r4, r0
	return dev->config;
    e944:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e946:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    e948:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    e94c:	f413 7f80 	tst.w	r3, #256	; 0x100
    e950:	d003      	beq.n	e95a <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e952:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    e956:	2b00      	cmp	r3, #0
    e958:	d139      	bne.n	e9ce <uarte_nrfx_isr_int+0x8e>
	return dev->config;
    e95a:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e95c:	685b      	ldr	r3, [r3, #4]
    e95e:	f013 0f10 	tst.w	r3, #16
    e962:	d01a      	beq.n	e99a <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
    e964:	f04f 0320 	mov.w	r3, #32
    e968:	f3ef 8211 	mrs	r2, BASEPRI
    e96c:	f383 8812 	msr	BASEPRI_MAX, r3
    e970:	f3bf 8f6f 	isb	sy
    e974:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e978:	b113      	cbz	r3, e980 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e97a:	2300      	movs	r3, #0
    e97c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
    e980:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    e982:	68db      	ldr	r3, [r3, #12]
    e984:	b10b      	cbz	r3, e98a <uarte_nrfx_isr_int+0x4a>
    e986:	691b      	ldr	r3, [r3, #16]
    e988:	b91b      	cbnz	r3, e992 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
    e98a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    e98e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
    e992:	f382 8811 	msr	BASEPRI, r2
    e996:	f3bf 8f6f 	isb	sy
	return dev->data;
    e99a:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    e99c:	68da      	ldr	r2, [r3, #12]
    e99e:	b1aa      	cbz	r2, e9cc <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e9a0:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e9a4:	b121      	cbz	r1, e9b0 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
    e9a6:	2100      	movs	r1, #0
    e9a8:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    e9aa:	68da      	ldr	r2, [r3, #12]
    e9ac:	7b92      	ldrb	r2, [r2, #14]
    e9ae:	b98a      	cbnz	r2, e9d4 <uarte_nrfx_isr_int+0x94>
    e9b0:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    e9b4:	b122      	cbz	r2, e9c0 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e9b6:	2200      	movs	r2, #0
    e9b8:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    e9bc:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    e9c0:	68da      	ldr	r2, [r3, #12]
    e9c2:	6813      	ldr	r3, [r2, #0]
    e9c4:	b113      	cbz	r3, e9cc <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    e9c6:	6851      	ldr	r1, [r2, #4]
    e9c8:	4620      	mov	r0, r4
    e9ca:	4798      	blx	r3
}
    e9cc:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    e9ce:	f7ff ff9e 	bl	e90e <endtx_isr>
    e9d2:	e7c2      	b.n	e95a <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    e9d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    e9d8:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    e9dc:	68db      	ldr	r3, [r3, #12]
    e9de:	7399      	strb	r1, [r3, #14]
			return;
    e9e0:	e7f4      	b.n	e9cc <uarte_nrfx_isr_int+0x8c>

0000e9e2 <uarte_nrfx_configure>:
{
    e9e2:	b530      	push	{r4, r5, lr}
    e9e4:	b083      	sub	sp, #12
    e9e6:	4605      	mov	r5, r0
    e9e8:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    e9ea:	794b      	ldrb	r3, [r1, #5]
    e9ec:	2b01      	cmp	r3, #1
    e9ee:	d006      	beq.n	e9fe <uarte_nrfx_configure+0x1c>
    e9f0:	2b03      	cmp	r3, #3
    e9f2:	d011      	beq.n	ea18 <uarte_nrfx_configure+0x36>
    e9f4:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    e9f8:	4610      	mov	r0, r2
    e9fa:	b003      	add	sp, #12
    e9fc:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    e9fe:	2300      	movs	r3, #0
    ea00:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    ea04:	79a3      	ldrb	r3, [r4, #6]
    ea06:	2b03      	cmp	r3, #3
    ea08:	d14f      	bne.n	eaaa <uarte_nrfx_configure+0xc8>
	switch (cfg->flow_ctrl) {
    ea0a:	79e3      	ldrb	r3, [r4, #7]
    ea0c:	b143      	cbz	r3, ea20 <uarte_nrfx_configure+0x3e>
    ea0e:	2b01      	cmp	r3, #1
    ea10:	d015      	beq.n	ea3e <uarte_nrfx_configure+0x5c>
    ea12:	f06f 0285 	mvn.w	r2, #133	; 0x85
    ea16:	e7ef      	b.n	e9f8 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    ea18:	2310      	movs	r3, #16
    ea1a:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    ea1e:	e7f1      	b.n	ea04 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    ea20:	2300      	movs	r3, #0
    ea22:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    ea26:	2300      	movs	r3, #0
    ea28:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    ea2c:	7923      	ldrb	r3, [r4, #4]
    ea2e:	2b01      	cmp	r3, #1
    ea30:	d033      	beq.n	ea9a <uarte_nrfx_configure+0xb8>
    ea32:	2b02      	cmp	r3, #2
    ea34:	d02d      	beq.n	ea92 <uarte_nrfx_configure+0xb0>
    ea36:	b173      	cbz	r3, ea56 <uarte_nrfx_configure+0x74>
    ea38:	f06f 0285 	mvn.w	r2, #133	; 0x85
    ea3c:	e7dc      	b.n	e9f8 <uarte_nrfx_configure+0x16>
	return dev->config;
    ea3e:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    ea40:	685b      	ldr	r3, [r3, #4]
    ea42:	f003 0201 	and.w	r2, r3, #1
    ea46:	f003 0302 	and.w	r3, r3, #2
    ea4a:	4313      	orrs	r3, r2
    ea4c:	d030      	beq.n	eab0 <uarte_nrfx_configure+0xce>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    ea4e:	2301      	movs	r3, #1
    ea50:	f88d 3000 	strb.w	r3, [sp]
		break;
    ea54:	e7e7      	b.n	ea26 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    ea56:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    ea5a:	6821      	ldr	r1, [r4, #0]
    ea5c:	4628      	mov	r0, r5
    ea5e:	f7f6 faa9 	bl	4fb4 <baudrate_set>
    ea62:	4602      	mov	r2, r0
    ea64:	bb38      	cbnz	r0, eab6 <uarte_nrfx_configure+0xd4>
	return dev->config;
    ea66:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    ea68:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ea6a:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    ea6e:	f89d 0002 	ldrb.w	r0, [sp, #2]
    ea72:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    ea74:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ea78:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    ea7a:	f89d 0000 	ldrb.w	r0, [sp]
    ea7e:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ea80:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
    ea84:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    ea86:	3304      	adds	r3, #4
    ea88:	e894 0003 	ldmia.w	r4, {r0, r1}
    ea8c:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    ea90:	e7b2      	b.n	e9f8 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ea92:	230e      	movs	r3, #14
    ea94:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    ea98:	e7df      	b.n	ea5a <uarte_nrfx_configure+0x78>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ea9a:	230e      	movs	r3, #14
    ea9c:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    eaa0:	f44f 7380 	mov.w	r3, #256	; 0x100
    eaa4:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    eaa8:	e7d7      	b.n	ea5a <uarte_nrfx_configure+0x78>
		return -ENOTSUP;
    eaaa:	f06f 0285 	mvn.w	r2, #133	; 0x85
    eaae:	e7a3      	b.n	e9f8 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
    eab0:	f06f 0285 	mvn.w	r2, #133	; 0x85
    eab4:	e7a0      	b.n	e9f8 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    eab6:	f06f 0285 	mvn.w	r2, #133	; 0x85
    eaba:	e79d      	b.n	e9f8 <uarte_nrfx_configure+0x16>

0000eabc <uarte_nrfx_config_get>:
{
    eabc:	460b      	mov	r3, r1
	return dev->data;
    eabe:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    eac0:	6891      	ldr	r1, [r2, #8]
    eac2:	6850      	ldr	r0, [r2, #4]
    eac4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    eac8:	2000      	movs	r0, #0
    eaca:	4770      	bx	lr

0000eacc <uarte_nrfx_err_check>:
	return dev->config;
    eacc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eace:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    ead0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    ead4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    ead8:	4770      	bx	lr

0000eada <is_tx_ready>:
	return dev->config;
    eada:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eadc:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    eade:	685b      	ldr	r3, [r3, #4]
    eae0:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eae4:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    eae8:	b929      	cbnz	r1, eaf6 <is_tx_ready+0x1c>
    eaea:	b933      	cbnz	r3, eafa <is_tx_ready+0x20>
    eaec:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    eaf0:	b92b      	cbnz	r3, eafe <is_tx_ready+0x24>
    eaf2:	2000      	movs	r0, #0
    eaf4:	4770      	bx	lr
    eaf6:	2001      	movs	r0, #1
    eaf8:	4770      	bx	lr
    eafa:	2000      	movs	r0, #0
    eafc:	4770      	bx	lr
    eafe:	2001      	movs	r0, #1
}
    eb00:	4770      	bx	lr

0000eb02 <uarte_enable>:
	return dev->config;
    eb02:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb04:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    eb06:	2208      	movs	r2, #8
    eb08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    eb0c:	4770      	bx	lr

0000eb0e <tx_start>:
{
    eb0e:	b510      	push	{r4, lr}
	return dev->config;
    eb10:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb12:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    eb14:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    eb18:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    eb1c:	2300      	movs	r3, #0
    eb1e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    eb22:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    eb26:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    eb2a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    eb2e:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    eb30:	685b      	ldr	r3, [r3, #4]
    eb32:	f013 0f10 	tst.w	r3, #16
    eb36:	d102      	bne.n	eb3e <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    eb38:	2301      	movs	r3, #1
    eb3a:	60a3      	str	r3, [r4, #8]
}
    eb3c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    eb3e:	2101      	movs	r1, #1
    eb40:	f7ff ffdf 	bl	eb02 <uarte_enable>
    p_reg->INTENSET = mask;
    eb44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    eb48:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    eb4c:	e7f4      	b.n	eb38 <tx_start+0x2a>

0000eb4e <uarte_nrfx_poll_in>:
{
    eb4e:	b410      	push	{r4}
	return dev->data;
    eb50:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    eb52:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb54:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eb56:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    eb5a:	b152      	cbz	r2, eb72 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    eb5c:	7d62      	ldrb	r2, [r4, #21]
    eb5e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    eb60:	2000      	movs	r0, #0
    eb62:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    eb66:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    eb6a:	2201      	movs	r2, #1
    eb6c:	601a      	str	r2, [r3, #0]
}
    eb6e:	bc10      	pop	{r4}
    eb70:	4770      	bx	lr
		return -1;
    eb72:	f04f 30ff 	mov.w	r0, #4294967295
    eb76:	e7fa      	b.n	eb6e <uarte_nrfx_poll_in+0x20>

0000eb78 <uarte_nrfx_fifo_fill>:
{
    eb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb7c:	4680      	mov	r8, r0
	return dev->data;
    eb7e:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    eb80:	68fb      	ldr	r3, [r7, #12]
    eb82:	899e      	ldrh	r6, [r3, #12]
    eb84:	4296      	cmp	r6, r2
    eb86:	bfa8      	it	ge
    eb88:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    eb8a:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    eb8c:	2201      	movs	r2, #1
    eb8e:	e8d3 0fef 	ldaex	r0, [r3]
    eb92:	2800      	cmp	r0, #0
    eb94:	d103      	bne.n	eb9e <uarte_nrfx_fifo_fill+0x26>
    eb96:	e8c3 2fe4 	stlex	r4, r2, [r3]
    eb9a:	2c00      	cmp	r4, #0
    eb9c:	d1f7      	bne.n	eb8e <uarte_nrfx_fifo_fill+0x16>
    eb9e:	d101      	bne.n	eba4 <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
    eba0:	2300      	movs	r3, #0
    eba2:	e006      	b.n	ebb2 <uarte_nrfx_fifo_fill+0x3a>
		return 0;
    eba4:	2600      	movs	r6, #0
    eba6:	e019      	b.n	ebdc <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
    eba8:	68fc      	ldr	r4, [r7, #12]
    ebaa:	68a4      	ldr	r4, [r4, #8]
    ebac:	5ccd      	ldrb	r5, [r1, r3]
    ebae:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
    ebb0:	3301      	adds	r3, #1
    ebb2:	42b3      	cmp	r3, r6
    ebb4:	dbf8      	blt.n	eba8 <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
    ebb6:	f04f 0320 	mov.w	r3, #32
    ebba:	f3ef 8411 	mrs	r4, BASEPRI
    ebbe:	f383 8812 	msr	BASEPRI_MAX, r3
    ebc2:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    ebc6:	4640      	mov	r0, r8
    ebc8:	f7ff ff87 	bl	eada <is_tx_ready>
    ebcc:	b948      	cbnz	r0, ebe2 <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
    ebce:	68fb      	ldr	r3, [r7, #12]
    ebd0:	2600      	movs	r6, #0
    ebd2:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
    ebd4:	f384 8811 	msr	BASEPRI, r4
    ebd8:	f3bf 8f6f 	isb	sy
}
    ebdc:	4630      	mov	r0, r6
    ebde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    ebe2:	68fb      	ldr	r3, [r7, #12]
    ebe4:	4632      	mov	r2, r6
    ebe6:	6899      	ldr	r1, [r3, #8]
    ebe8:	4640      	mov	r0, r8
    ebea:	f7ff ff90 	bl	eb0e <tx_start>
    ebee:	e7f1      	b.n	ebd4 <uarte_nrfx_fifo_fill+0x5c>

0000ebf0 <uarte_nrfx_fifo_read>:
	return dev->config;
    ebf0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ebf2:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    ebf4:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ebf6:	2a00      	cmp	r2, #0
    ebf8:	dd0c      	ble.n	ec14 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ebfa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    ebfe:	b15a      	cbz	r2, ec18 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ec00:	2200      	movs	r2, #0
    ec02:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ec06:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    ec0a:	7d42      	ldrb	r2, [r0, #21]
    ec0c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ec0e:	2001      	movs	r0, #1
    ec10:	6018      	str	r0, [r3, #0]
}
    ec12:	4770      	bx	lr
	int num_rx = 0;
    ec14:	2000      	movs	r0, #0
    ec16:	4770      	bx	lr
    ec18:	2000      	movs	r0, #0
}
    ec1a:	4770      	bx	lr

0000ec1c <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    ec1c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ec1e:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    ec20:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    ec22:	f04f 0020 	mov.w	r0, #32
    ec26:	f3ef 8311 	mrs	r3, BASEPRI
    ec2a:	f380 8812 	msr	BASEPRI_MAX, r0
    ec2e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    ec32:	68c9      	ldr	r1, [r1, #12]
    ec34:	2000      	movs	r0, #0
    ec36:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    ec38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    ec3c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    ec40:	f383 8811 	msr	BASEPRI, r3
    ec44:	f3bf 8f6f 	isb	sy
}
    ec48:	4770      	bx	lr

0000ec4a <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    ec4a:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    ec4c:	68db      	ldr	r3, [r3, #12]
    ec4e:	2201      	movs	r2, #1
    ec50:	739a      	strb	r2, [r3, #14]
}
    ec52:	4770      	bx	lr

0000ec54 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    ec54:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ec56:	6819      	ldr	r1, [r3, #0]
	return dev->data;
    ec58:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    ec5a:	68db      	ldr	r3, [r3, #12]
    ec5c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    ec5e:	b94a      	cbnz	r2, ec74 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ec60:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    ec64:	b15a      	cbz	r2, ec7e <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
    ec66:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    ec6a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    ec6e:	d008      	beq.n	ec82 <uarte_nrfx_irq_tx_ready_complete+0x2e>
    ec70:	2001      	movs	r0, #1
    ec72:	e000      	b.n	ec76 <uarte_nrfx_irq_tx_ready_complete+0x22>
    ec74:	2000      	movs	r0, #0
	if (ready) {
    ec76:	b108      	cbz	r0, ec7c <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    ec78:	2200      	movs	r2, #0
    ec7a:	611a      	str	r2, [r3, #16]
}
    ec7c:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    ec7e:	2000      	movs	r0, #0
    ec80:	e7f9      	b.n	ec76 <uarte_nrfx_irq_tx_ready_complete+0x22>
    ec82:	2000      	movs	r0, #0
    ec84:	e7f7      	b.n	ec76 <uarte_nrfx_irq_tx_ready_complete+0x22>

0000ec86 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    ec86:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ec88:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ec8a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    ec8e:	3800      	subs	r0, #0
    ec90:	bf18      	it	ne
    ec92:	2001      	movne	r0, #1
    ec94:	4770      	bx	lr

0000ec96 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    ec96:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ec98:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    ec9a:	2210      	movs	r2, #16
    ec9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    eca0:	4770      	bx	lr

0000eca2 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    eca2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eca4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    eca6:	2210      	movs	r2, #16
    eca8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    ecac:	4770      	bx	lr

0000ecae <uarte_nrfx_irq_err_enable>:
	return dev->config;
    ecae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ecb0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    ecb2:	f44f 7200 	mov.w	r2, #512	; 0x200
    ecb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    ecba:	4770      	bx	lr

0000ecbc <uarte_nrfx_irq_err_disable>:
	return dev->config;
    ecbc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ecbe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    ecc0:	f44f 7200 	mov.w	r2, #512	; 0x200
    ecc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    ecc8:	4770      	bx	lr

0000ecca <uarte_nrfx_irq_is_pending>:
{
    ecca:	b538      	push	{r3, r4, r5, lr}
    eccc:	4604      	mov	r4, r0
	return dev->config;
    ecce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ecd0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    ecd2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    ecd6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    ecda:	d106      	bne.n	ecea <uarte_nrfx_irq_is_pending+0x20>
    ecdc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    ece0:	f013 0f10 	tst.w	r3, #16
    ece4:	d107      	bne.n	ecf6 <uarte_nrfx_irq_is_pending+0x2c>
    ece6:	2000      	movs	r0, #0
}
    ece8:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    ecea:	f7ff ffb3 	bl	ec54 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    ecee:	2800      	cmp	r0, #0
    ecf0:	d0f4      	beq.n	ecdc <uarte_nrfx_irq_is_pending+0x12>
		||
    ecf2:	2001      	movs	r0, #1
    ecf4:	e7f8      	b.n	ece8 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    ecf6:	4620      	mov	r0, r4
    ecf8:	f7ff ffc5 	bl	ec86 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    ecfc:	2800      	cmp	r0, #0
    ecfe:	d0f3      	beq.n	ece8 <uarte_nrfx_irq_is_pending+0x1e>
		||
    ed00:	2001      	movs	r0, #1
    ed02:	e7f1      	b.n	ece8 <uarte_nrfx_irq_is_pending+0x1e>

0000ed04 <uarte_nrfx_irq_update>:
}
    ed04:	2001      	movs	r0, #1
    ed06:	4770      	bx	lr

0000ed08 <uarte_nrfx_irq_callback_set>:
	return dev->data;
    ed08:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    ed0a:	68d8      	ldr	r0, [r3, #12]
    ed0c:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    ed0e:	68db      	ldr	r3, [r3, #12]
    ed10:	605a      	str	r2, [r3, #4]
}
    ed12:	4770      	bx	lr

0000ed14 <wait_tx_ready>:
{
    ed14:	b570      	push	{r4, r5, r6, lr}
    ed16:	4606      	mov	r6, r0
    ed18:	e014      	b.n	ed44 <wait_tx_ready+0x30>
		if (res) {
    ed1a:	b17d      	cbz	r5, ed3c <wait_tx_ready+0x28>
	__asm__ volatile(
    ed1c:	f04f 0320 	mov.w	r3, #32
    ed20:	f3ef 8411 	mrs	r4, BASEPRI
    ed24:	f383 8812 	msr	BASEPRI_MAX, r3
    ed28:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    ed2c:	4630      	mov	r0, r6
    ed2e:	f7ff fed4 	bl	eada <is_tx_ready>
    ed32:	b9a0      	cbnz	r0, ed5e <wait_tx_ready+0x4a>
	__asm__ volatile(
    ed34:	f384 8811 	msr	BASEPRI, r4
    ed38:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    ed3c:	2021      	movs	r0, #33	; 0x21
    ed3e:	2100      	movs	r1, #0
    ed40:	f7fd f8de 	bl	bf00 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    ed44:	2464      	movs	r4, #100	; 0x64
    ed46:	4630      	mov	r0, r6
    ed48:	f7ff fec7 	bl	eada <is_tx_ready>
    ed4c:	4605      	mov	r5, r0
    ed4e:	2800      	cmp	r0, #0
    ed50:	d1e3      	bne.n	ed1a <wait_tx_ready+0x6>
    ed52:	2001      	movs	r0, #1
    ed54:	f000 f8a1 	bl	ee9a <nrfx_busy_wait>
    ed58:	3c01      	subs	r4, #1
    ed5a:	d1f4      	bne.n	ed46 <wait_tx_ready+0x32>
    ed5c:	e7dd      	b.n	ed1a <wait_tx_ready+0x6>
}
    ed5e:	4620      	mov	r0, r4
    ed60:	bd70      	pop	{r4, r5, r6, pc}

0000ed62 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    ed62:	b510      	push	{r4, lr}
    ed64:	4604      	mov	r4, r0
    ed66:	2200      	movs	r2, #0
    ed68:	2101      	movs	r1, #1
    ed6a:	2008      	movs	r0, #8
    ed6c:	f7f4 ffc8 	bl	3d00 <z_arm_irq_priority_set>
    ed70:	2008      	movs	r0, #8
    ed72:	f7f4 ffa7 	bl	3cc4 <arch_irq_enable>
    ed76:	2101      	movs	r1, #1
    ed78:	4620      	mov	r0, r4
    ed7a:	f7f6 fa1b 	bl	51b4 <uarte_instance_init>
    ed7e:	bd10      	pop	{r4, pc}

0000ed80 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    ed80:	4770      	bx	lr

0000ed82 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ed82:	4770      	bx	lr

0000ed84 <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
    ed84:	4770      	bx	lr

0000ed86 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    ed86:	1a40      	subs	r0, r0, r1
}
    ed88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ed8c:	4770      	bx	lr

0000ed8e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ed8e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ed92:	009b      	lsls	r3, r3, #2
    ed94:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ed96:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    ed9a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ed9e:	2200      	movs	r2, #0
    eda0:	601a      	str	r2, [r3, #0]
    eda2:	681b      	ldr	r3, [r3, #0]
}
    eda4:	4770      	bx	lr

0000eda6 <absolute_time_to_cc>:
}
    eda6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    edaa:	4770      	bx	lr

0000edac <full_int_lock>:
	__asm__ volatile(
    edac:	f04f 0320 	mov.w	r3, #32
    edb0:	f3ef 8011 	mrs	r0, BASEPRI
    edb4:	f383 8812 	msr	BASEPRI_MAX, r3
    edb8:	f3bf 8f6f 	isb	sy
}
    edbc:	4770      	bx	lr

0000edbe <full_int_unlock>:
	__asm__ volatile(
    edbe:	f380 8811 	msr	BASEPRI, r0
    edc2:	f3bf 8f6f 	isb	sy
}
    edc6:	4770      	bx	lr

0000edc8 <set_absolute_alarm>:
{
    edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    edca:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    edcc:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    edd0:	f7f6 fac2 	bl	5358 <get_comparator>
    edd4:	4607      	mov	r7, r0
    edd6:	e019      	b.n	ee0c <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    edd8:	2013      	movs	r0, #19
    edda:	f001 f99d 	bl	10118 <z_impl_k_busy_wait>
}
    edde:	e022      	b.n	ee26 <set_absolute_alarm+0x5e>
		event_clear(chan);
    ede0:	4630      	mov	r0, r6
    ede2:	f7ff ffd4 	bl	ed8e <event_clear>
		event_enable(chan);
    ede6:	4630      	mov	r0, r6
    ede8:	f7f6 fabe 	bl	5368 <event_enable>
		set_comparator(chan, cc_val);
    edec:	4629      	mov	r1, r5
    edee:	4630      	mov	r0, r6
    edf0:	f7f6 faa8 	bl	5344 <set_comparator>
		now2 = counter();
    edf4:	f7f6 facc 	bl	5390 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    edf8:	4284      	cmp	r4, r0
    edfa:	d01e      	beq.n	ee3a <set_absolute_alarm+0x72>
    edfc:	1c81      	adds	r1, r0, #2
    edfe:	4628      	mov	r0, r5
    ee00:	f7ff ffc1 	bl	ed86 <counter_sub>
	} while ((now2 != now) &&
    ee04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ee08:	d917      	bls.n	ee3a <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    ee0a:	462f      	mov	r7, r5
		now = counter();
    ee0c:	f7f6 fac0 	bl	5390 <counter>
    ee10:	4604      	mov	r4, r0
		set_comparator(chan, now);
    ee12:	4601      	mov	r1, r0
    ee14:	4630      	mov	r0, r6
    ee16:	f7f6 fa95 	bl	5344 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    ee1a:	4621      	mov	r1, r4
    ee1c:	4638      	mov	r0, r7
    ee1e:	f7ff ffb2 	bl	ed86 <counter_sub>
    ee22:	2801      	cmp	r0, #1
    ee24:	d0d8      	beq.n	edd8 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    ee26:	1ca7      	adds	r7, r4, #2
    ee28:	4639      	mov	r1, r7
    ee2a:	4628      	mov	r0, r5
    ee2c:	f7ff ffab 	bl	ed86 <counter_sub>
    ee30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ee34:	d9d4      	bls.n	ede0 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    ee36:	463d      	mov	r5, r7
    ee38:	e7d2      	b.n	ede0 <set_absolute_alarm+0x18>
}
    ee3a:	4628      	mov	r0, r5
    ee3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ee3e <compare_set>:
{
    ee3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee40:	b083      	sub	sp, #12
    ee42:	4604      	mov	r4, r0
    ee44:	4617      	mov	r7, r2
    ee46:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    ee48:	f7f6 faa8 	bl	539c <compare_int_lock>
    ee4c:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    ee4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee50:	9301      	str	r3, [sp, #4]
    ee52:	9b08      	ldr	r3, [sp, #32]
    ee54:	9300      	str	r3, [sp, #0]
    ee56:	463a      	mov	r2, r7
    ee58:	462b      	mov	r3, r5
    ee5a:	4620      	mov	r0, r4
    ee5c:	f7f6 fb7c 	bl	5558 <compare_set_nolocks>
    ee60:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    ee62:	4631      	mov	r1, r6
    ee64:	4620      	mov	r0, r4
    ee66:	f7f6 faf3 	bl	5450 <compare_int_unlock>
}
    ee6a:	4628      	mov	r0, r5
    ee6c:	b003      	add	sp, #12
    ee6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ee70 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    ee70:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    ee72:	2000      	movs	r0, #0
    ee74:	f7f5 f998 	bl	41a8 <sys_arch_reboot>

0000ee78 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    ee78:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    ee7a:	f7fd fa49 	bl	c310 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    ee7e:	bd08      	pop	{r3, pc}

0000ee80 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    ee80:	b510      	push	{r4, lr}
    ee82:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    ee84:	f7f4 fe16 	bl	3ab4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    ee88:	f7f4 feea 	bl	3c60 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    ee8c:	4620      	mov	r0, r4
    ee8e:	f7ff fff3 	bl	ee78 <hw_cc3xx_init_internal>
	return res;
}
    ee92:	bd10      	pop	{r4, pc}

0000ee94 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    ee94:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    ee96:	4780      	blx	r0
}
    ee98:	bd08      	pop	{r3, pc}

0000ee9a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    ee9a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    ee9c:	f001 f93c 	bl	10118 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    eea0:	bd08      	pop	{r3, pc}

0000eea2 <nrfx_clock_enable>:
{
    eea2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    eea4:	2005      	movs	r0, #5
    eea6:	f7f4 ff1d 	bl	3ce4 <arch_irq_is_enabled>
    eeaa:	b138      	cbz	r0, eebc <nrfx_clock_enable+0x1a>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    eeac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    eeb0:	2201      	movs	r2, #1
    eeb2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    eeb6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    eeba:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    eebc:	2005      	movs	r0, #5
    eebe:	f7f4 ff01 	bl	3cc4 <arch_irq_enable>
    eec2:	e7f3      	b.n	eeac <nrfx_clock_enable+0xa>

0000eec4 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    eec4:	2301      	movs	r3, #1
    eec6:	4083      	lsls	r3, r0
    eec8:	f013 0fff 	tst.w	r3, #255	; 0xff
}
    eecc:	bf14      	ite	ne
    eece:	2001      	movne	r0, #1
    eed0:	2000      	moveq	r0, #0
    eed2:	4770      	bx	lr

0000eed4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    eed4:	4770      	bx	lr

0000eed6 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
    eed6:	6903      	ldr	r3, [r0, #16]
    eed8:	6183      	str	r3, [r0, #24]
    eeda:	4770      	bx	lr

0000eedc <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    eedc:	b510      	push	{r4, lr}
    eede:	4604      	mov	r4, r0
    eee0:	f001 f929 	bl	10136 <_ZdlPv>
    eee4:	4620      	mov	r0, r4
    eee6:	bd10      	pop	{r4, pc}

0000eee8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    eee8:	b510      	push	{r4, lr}
    eeea:	4604      	mov	r4, r0
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    eeec:	4413      	add	r3, r2
    eeee:	f7f7 f885 	bl	5ffc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
    eef2:	4620      	mov	r0, r4
    eef4:	bd10      	pop	{r4, pc}

0000eef6 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
    eef6:	6880      	ldr	r0, [r0, #8]
    eef8:	4770      	bx	lr

0000eefa <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
    eefa:	b570      	push	{r4, r5, r6, lr}
    eefc:	4604      	mov	r4, r0
    eefe:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
    ef00:	6980      	ldr	r0, [r0, #24]
    ef02:	f000 f81c 	bl	ef3e <_ZN6tflite14AlignPointerUpEPhj>
    ef06:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
    ef08:	4631      	mov	r1, r6
    ef0a:	6960      	ldr	r0, [r4, #20]
    ef0c:	f000 f81e 	bl	ef4c <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
    ef10:	1b40      	subs	r0, r0, r5
    ef12:	bd70      	pop	{r4, r5, r6, pc}

0000ef14 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
    ef14:	b508      	push	{r3, lr}
    ef16:	4608      	mov	r0, r1
  Log(format, args);
    ef18:	4611      	mov	r1, r2
    ef1a:	f7f7 f8b5 	bl	6088 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
    ef1e:	2000      	movs	r0, #0
    ef20:	bd08      	pop	{r3, pc}

0000ef22 <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
    ef22:	b40f      	push	{r0, r1, r2, r3}
    ef24:	b500      	push	{lr}
    ef26:	b083      	sub	sp, #12
    ef28:	a904      	add	r1, sp, #16
    ef2a:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
    ef2e:	9101      	str	r1, [sp, #4]
  Log(format, args);
    ef30:	f7f7 f8aa 	bl	6088 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
    ef34:	b003      	add	sp, #12
    ef36:	f85d eb04 	ldr.w	lr, [sp], #4
    ef3a:	b004      	add	sp, #16
    ef3c:	4770      	bx	lr

0000ef3e <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
    ef3e:	4408      	add	r0, r1
    ef40:	3801      	subs	r0, #1
    ef42:	fbb0 f0f1 	udiv	r0, r0, r1
}
    ef46:	fb01 f000 	mul.w	r0, r1, r0
    ef4a:	4770      	bx	lr

0000ef4c <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
    ef4c:	fbb0 f0f1 	udiv	r0, r0, r1
}
    ef50:	fb01 f000 	mul.w	r0, r1, r0
    ef54:	4770      	bx	lr

0000ef56 <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
    ef56:	4408      	add	r0, r1
    ef58:	3801      	subs	r0, #1
    ef5a:	fbb0 f0f1 	udiv	r0, r0, r1
}
    ef5e:	fb01 f000 	mul.w	r0, r1, r0
    ef62:	4770      	bx	lr

0000ef64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  switch (type) {
    ef64:	3801      	subs	r0, #1
    ef66:	280f      	cmp	r0, #15
    ef68:	d83d      	bhi.n	efe6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x82>
    ef6a:	e8df f000 	tbb	[pc, r0]
    ef6e:	180c      	.short	0x180c
    ef70:	303c2820 	.word	0x303c2820
    ef74:	08243414 	.word	0x08243414
    ef78:	3c2c3810 	.word	0x3c2c3810
    ef7c:	1c3c      	.short	0x1c3c
      *size = sizeof(int16_t);
    ef7e:	2302      	movs	r3, #2
    ef80:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ef82:	2000      	movs	r0, #0
      break;
    ef84:	4770      	bx	lr
      *size = sizeof(float);
    ef86:	2304      	movs	r3, #4
    ef88:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ef8a:	2000      	movs	r0, #0
      break;
    ef8c:	4770      	bx	lr
      *size = sizeof(double);
    ef8e:	2308      	movs	r3, #8
    ef90:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ef92:	2000      	movs	r0, #0
      break;
    ef94:	4770      	bx	lr
      *size = sizeof(int16_t);
    ef96:	2302      	movs	r3, #2
    ef98:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ef9a:	2000      	movs	r0, #0
      break;
    ef9c:	4770      	bx	lr
      *size = sizeof(int32_t);
    ef9e:	2304      	movs	r3, #4
    efa0:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efa2:	2000      	movs	r0, #0
      break;
    efa4:	4770      	bx	lr
      *size = sizeof(uint32_t);
    efa6:	2304      	movs	r3, #4
    efa8:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efaa:	2000      	movs	r0, #0
      break;
    efac:	4770      	bx	lr
      *size = sizeof(uint8_t);
    efae:	2301      	movs	r3, #1
    efb0:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efb2:	2000      	movs	r0, #0
      break;
    efb4:	4770      	bx	lr
      *size = sizeof(int8_t);
    efb6:	2301      	movs	r3, #1
    efb8:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efba:	2000      	movs	r0, #0
      break;
    efbc:	4770      	bx	lr
      *size = sizeof(int64_t);
    efbe:	2308      	movs	r3, #8
    efc0:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efc2:	2000      	movs	r0, #0
      break;
    efc4:	4770      	bx	lr
      *size = sizeof(uint64_t);
    efc6:	2308      	movs	r3, #8
    efc8:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efca:	2000      	movs	r0, #0
      break;
    efcc:	4770      	bx	lr
      *size = sizeof(bool);
    efce:	2301      	movs	r3, #1
    efd0:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efd2:	2000      	movs	r0, #0
      break;
    efd4:	4770      	bx	lr
      *size = sizeof(float) * 2;
    efd6:	2308      	movs	r3, #8
    efd8:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efda:	2000      	movs	r0, #0
      break;
    efdc:	4770      	bx	lr
      *size = sizeof(double) * 2;
    efde:	2310      	movs	r3, #16
    efe0:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    efe2:	2000      	movs	r0, #0
      break;
    efe4:	4770      	bx	lr
  return kTfLiteOk;
    efe6:	2001      	movs	r0, #1
}
    efe8:	4770      	bx	lr

0000efea <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
    efea:	b530      	push	{r4, r5, lr}
    efec:	b083      	sub	sp, #12
  TFLITE_DCHECK(out_bytes != nullptr);
    efee:	b129      	cbz	r1, effc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x12>
    eff0:	460d      	mov	r5, r1

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
    eff2:	6842      	ldr	r2, [r0, #4]
    eff4:	b1c2      	cbz	r2, f028 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    eff6:	2300      	movs	r3, #0
  int element_count = 1;
    eff8:	2401      	movs	r4, #1
    effa:	e007      	b.n	f00c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  TFLITE_DCHECK(out_bytes != nullptr);
    effc:	f001 f8b2 	bl	10164 <abort>
      element_count *= eval_tensor->dims->data[n];
    f000:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    f004:	6849      	ldr	r1, [r1, #4]
    f006:	fb01 f404 	mul.w	r4, r1, r4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    f00a:	3301      	adds	r3, #1
    f00c:	6811      	ldr	r1, [r2, #0]
    f00e:	4299      	cmp	r1, r3
    f010:	dcf6      	bgt.n	f000 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
    f012:	a901      	add	r1, sp, #4
    f014:	7a00      	ldrb	r0, [r0, #8]
    f016:	f7ff ffa5 	bl	ef64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    f01a:	b918      	cbnz	r0, f024 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
    f01c:	9b01      	ldr	r3, [sp, #4]
    f01e:	fb03 f404 	mul.w	r4, r3, r4
    f022:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
    f024:	b003      	add	sp, #12
    f026:	bd30      	pop	{r4, r5, pc}
  int element_count = 1;
    f028:	2401      	movs	r4, #1
    f02a:	e7f2      	b.n	f012 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>

0000f02c <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
}
    f02c:	4770      	bx	lr

0000f02e <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
    f02e:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    f030:	f990 0000 	ldrsb.w	r0, [r0]
    f034:	f7ff fffa 	bl	f02c <_ZN11flatbuffers12EndianScalarIaEET_S1_>
}
    f038:	bd08      	pop	{r3, pc}

0000f03a <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
}
    f03a:	4770      	bx	lr

0000f03c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:
  char* p2 = end - 1;
    f03c:	3901      	subs	r1, #1
  char* p1 = start;
    f03e:	4603      	mov	r3, r0
  while (p1 < p2) {
    f040:	4288      	cmp	r0, r1
    f042:	d20a      	bcs.n	f05a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x1e>
char* ReverseStringInPlace(char* start, char* end) {
    f044:	b410      	push	{r4}
    char tmp = *p1;
    f046:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
    f048:	780c      	ldrb	r4, [r1, #0]
    f04a:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
    f04e:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
    f052:	428b      	cmp	r3, r1
    f054:	d3f7      	bcc.n	f046 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0xa>
}
    f056:	bc10      	pop	{r4}
    f058:	4770      	bx	lr
    f05a:	4770      	bx	lr

0000f05c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
    f05c:	b410      	push	{r4}
    f05e:	4604      	mov	r4, r0
  while (*current != 0) {
    f060:	7803      	ldrb	r3, [r0, #0]
    f062:	b10b      	cbz	r3, f068 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
    f064:	3001      	adds	r0, #1
  while (*current != 0) {
    f066:	e7fb      	b.n	f060 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x4>
  char* current_end = main + (main_max_length - 1);
    f068:	3901      	subs	r1, #1
    f06a:	4421      	add	r1, r4
  while ((*to_append != 0) && (current < current_end)) {
    f06c:	7813      	ldrb	r3, [r2, #0]
    f06e:	b12b      	cbz	r3, f07c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    f070:	4288      	cmp	r0, r1
    f072:	d203      	bcs.n	f07c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    *current = *to_append;
    f074:	f800 3b01 	strb.w	r3, [r0], #1
    ++to_append;
    f078:	3201      	adds	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
    f07a:	e7f7      	b.n	f06c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  *current = 0;
    f07c:	2300      	movs	r3, #0
    f07e:	7003      	strb	r3, [r0, #0]
}
    f080:	bc10      	pop	{r4}
    f082:	4770      	bx	lr

0000f084 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
    f084:	b538      	push	{r3, r4, r5, lr}
    f086:	4605      	mov	r5, r0
    f088:	4608      	mov	r0, r1
    f08a:	460c      	mov	r4, r1
    f08c:	e008      	b.n	f0a0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1c>
      character = '0' + digit;
    f08e:	3330      	adds	r3, #48	; 0x30
    f090:	b2db      	uxtb	r3, r3
    *buffer++ = character;
    f092:	f804 3b01 	strb.w	r3, [r4], #1
    i /= base;
    f096:	fbb5 f3f2 	udiv	r3, r5, r2
  } while (i > 0);
    f09a:	42aa      	cmp	r2, r5
    f09c:	d809      	bhi.n	f0b2 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    i /= base;
    f09e:	461d      	mov	r5, r3
    int32_t digit = i % base;
    f0a0:	fbb5 f3f2 	udiv	r3, r5, r2
    f0a4:	fb02 5313 	mls	r3, r2, r3, r5
    if (digit < 10) {
    f0a8:	2b09      	cmp	r3, #9
    f0aa:	ddf0      	ble.n	f08e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xa>
      character = 'a' + (digit - 10);
    f0ac:	3357      	adds	r3, #87	; 0x57
    f0ae:	b2db      	uxtb	r3, r3
    f0b0:	e7ef      	b.n	f092 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xe>
  *buffer = 0;
    f0b2:	2300      	movs	r3, #0
    f0b4:	7023      	strb	r3, [r4, #0]
  ReverseStringInPlace(start, buffer);
    f0b6:	4621      	mov	r1, r4
    f0b8:	f7ff ffc0 	bl	f03c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
}
    f0bc:	4620      	mov	r0, r4
    f0be:	bd38      	pop	{r3, r4, r5, pc}

0000f0c0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>:
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
    f0c0:	b508      	push	{r3, lr}
  if (i < 0) {
    f0c2:	2800      	cmp	r0, #0
    f0c4:	db03      	blt.n	f0ce <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0xe>
  return FastUInt32ToBufferLeft(u, buffer, 10);
    f0c6:	220a      	movs	r2, #10
    f0c8:	f7ff ffdc 	bl	f084 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
    f0cc:	bd08      	pop	{r3, pc}
    *buffer++ = '-';
    f0ce:	222d      	movs	r2, #45	; 0x2d
    f0d0:	f801 2b01 	strb.w	r2, [r1], #1
    u = -u;
    f0d4:	4240      	negs	r0, r0
    f0d6:	e7f6      	b.n	f0c6 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0x6>

0000f0d8 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>:
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
    f0d8:	b530      	push	{r4, r5, lr}
    f0da:	b08d      	sub	sp, #52	; 0x34
    f0dc:	4604      	mov	r4, r0
    f0de:	460d      	mov	r5, r1
  FastInt32ToBufferLeft(number, number_string);
    f0e0:	4669      	mov	r1, sp
    f0e2:	4610      	mov	r0, r2
    f0e4:	f7ff ffec 	bl	f0c0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
  return StrCatStr(main, main_max_length, number_string);
    f0e8:	466a      	mov	r2, sp
    f0ea:	4629      	mov	r1, r5
    f0ec:	4620      	mov	r0, r4
    f0ee:	f7ff ffb5 	bl	f05c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
    f0f2:	b00d      	add	sp, #52	; 0x34
    f0f4:	bd30      	pop	{r4, r5, pc}

0000f0f6 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>:
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
    f0f6:	b530      	push	{r4, r5, lr}
    f0f8:	b08d      	sub	sp, #52	; 0x34
    f0fa:	4604      	mov	r4, r0
    f0fc:	460d      	mov	r5, r1
    f0fe:	4610      	mov	r0, r2
  FastUInt32ToBufferLeft(number, number_string, base);
    f100:	461a      	mov	r2, r3
    f102:	4669      	mov	r1, sp
    f104:	f7ff ffbe 	bl	f084 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    f108:	466a      	mov	r2, sp
    f10a:	4629      	mov	r1, r5
    f10c:	4620      	mov	r0, r4
    f10e:	f7ff ffa5 	bl	f05c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
    f112:	b00d      	add	sp, #52	; 0x34
    f114:	bd30      	pop	{r4, r5, pc}

0000f116 <_ZN12_GLOBAL__N_111FormatInt32EPci>:
int FormatInt32(char* output, int32_t i) {
    f116:	b510      	push	{r4, lr}
    f118:	4604      	mov	r4, r0
    f11a:	4608      	mov	r0, r1
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
    f11c:	4621      	mov	r1, r4
    f11e:	f7ff ffcf 	bl	f0c0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
}
    f122:	1b00      	subs	r0, r0, r4
    f124:	bd10      	pop	{r4, pc}

0000f126 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>:
int FormatUInt32(char* output, uint32_t i) {
    f126:	b510      	push	{r4, lr}
    f128:	4604      	mov	r4, r0
    f12a:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    f12c:	220a      	movs	r2, #10
    f12e:	4621      	mov	r1, r4
    f130:	f7ff ffa8 	bl	f084 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
    f134:	1b00      	subs	r0, r0, r4
    f136:	bd10      	pop	{r4, pc}

0000f138 <_ZN12_GLOBAL__N_19FormatHexEPcj>:
int FormatHex(char* output, uint32_t i) {
    f138:	b510      	push	{r4, lr}
    f13a:	4604      	mov	r4, r0
    f13c:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    f13e:	2210      	movs	r2, #16
    f140:	4621      	mov	r1, r4
    f142:	f7ff ff9f 	bl	f084 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
    f146:	1b00      	subs	r0, r0, r4
    f148:	bd10      	pop	{r4, pc}

0000f14a <_ZN12_GLOBAL__N_111FormatFloatEPcf>:
int FormatFloat(char* output, float i) {
    f14a:	b510      	push	{r4, lr}
    f14c:	4604      	mov	r4, r0
    f14e:	4608      	mov	r0, r1
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
    f150:	4621      	mov	r1, r4
    f152:	f7f7 f833 	bl	61bc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
}
    f156:	1b00      	subs	r0, r0, r4
    f158:	bd10      	pop	{r4, pc}

0000f15a <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
    f15a:	4602      	mov	r2, r0
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
    f15c:	2300      	movs	r3, #0
  int result = 1;
    f15e:	2001      	movs	r0, #1
  for (int i = 0; i < dims.size; ++i) {
    f160:	6811      	ldr	r1, [r2, #0]
    f162:	4299      	cmp	r1, r3
    f164:	dd06      	ble.n	f174 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
    f166:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    f16a:	6849      	ldr	r1, [r1, #4]
    f16c:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
    f170:	3301      	adds	r3, #1
    f172:	e7f5      	b.n	f160 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x6>
  }
  return result;
}
    f174:	4770      	bx	lr

0000f176 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
    f176:	b538      	push	{r3, r4, r5, lr}
    f178:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    f17a:	f7fe fd35 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    f17e:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    f180:	4628      	mov	r0, r5
    f182:	f7fe fd37 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f186:	280a      	cmp	r0, #10
    f188:	d90e      	bls.n	f1a8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
    f18a:	f105 000a 	add.w	r0, r5, #10
    f18e:	f7fe fd31 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    f192:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    f194:	b150      	cbz	r0, f1ac <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x36>
    f196:	4620      	mov	r0, r4
    f198:	f7fe fd20 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    f19c:	4420      	add	r0, r4
  if (subgraph->operators() != nullptr) {
    f19e:	b138      	cbz	r0, f1b0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x3a>
  uoffset_t size() const { return EndianScalar(length_); }
    f1a0:	6800      	ldr	r0, [r0, #0]
    f1a2:	f7fe fd1a 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    f1a6:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f1a8:	2000      	movs	r0, #0
    f1aa:	e7f2      	b.n	f192 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    f1ac:	2000      	movs	r0, #0
    f1ae:	e7f6      	b.n	f19e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    return 0;
    f1b0:	2000      	movs	r0, #0
    f1b2:	e7f8      	b.n	f1a6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>

0000f1b4 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
    f1b4:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    f1b6:	7800      	ldrb	r0, [r0, #0]
    f1b8:	f7ff ff3f 	bl	f03a <_ZN11flatbuffers12EndianScalarIhEET_S1_>
}
    f1bc:	bd08      	pop	{r3, pc}

0000f1be <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
}
    f1be:	4770      	bx	lr

0000f1c0 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
    f1c0:	4770      	bx	lr

0000f1c2 <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
    f1c2:	4770      	bx	lr

0000f1c4 <_ZN6tflite10MicroGraphD0Ev>:
    f1c4:	b510      	push	{r4, lr}
    f1c6:	4604      	mov	r4, r0
    f1c8:	f000 ffb5 	bl	10136 <_ZdlPv>
    f1cc:	4620      	mov	r0, r4
    f1ce:	bd10      	pop	{r4, pc}

0000f1d0 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
    f1d0:	6101      	str	r1, [r0, #16]
}
    f1d2:	4770      	bx	lr

0000f1d4 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
    f1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f1d8:	4606      	mov	r6, r0
  int previous_subgraph_idx = current_subgraph_index_;
    f1da:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    f1de:	2700      	movs	r7, #0
    f1e0:	e017      	b.n	f212 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3e>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
    f1e2:	6961      	ldr	r1, [r4, #20]
        init_data_size = 0;
    f1e4:	2200      	movs	r2, #0
      if (registration->init) {
    f1e6:	681b      	ldr	r3, [r3, #0]
    f1e8:	b113      	cbz	r3, f1f0 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1c>
            registration->init(context_, init_data, init_data_size);
    f1ea:	6870      	ldr	r0, [r6, #4]
    f1ec:	4798      	blx	r3
        node->user_data =
    f1ee:	6120      	str	r0, [r4, #16]
    for (size_t i = 0; i < operators_size; ++i) {
    f1f0:	3501      	adds	r5, #1
    f1f2:	4545      	cmp	r5, r8
    f1f4:	d20c      	bcs.n	f210 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    f1f6:	6933      	ldr	r3, [r6, #16]
    f1f8:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
    f1fc:	242c      	movs	r4, #44	; 0x2c
    f1fe:	fb04 3405 	mla	r4, r4, r5, r3
      const TfLiteRegistration* registration =
    f202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    f204:	695a      	ldr	r2, [r3, #20]
    f206:	2a20      	cmp	r2, #32
    f208:	d1eb      	bne.n	f1e2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
    f20a:	69a1      	ldr	r1, [r4, #24]
        init_data_size = node->custom_initial_data_size;
    f20c:	69e2      	ldr	r2, [r4, #28]
    f20e:	e7ea      	b.n	f1e6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    f210:	3701      	adds	r7, #1
    f212:	69b3      	ldr	r3, [r6, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    f214:	6818      	ldr	r0, [r3, #0]
    f216:	f7fe fce0 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    f21a:	4287      	cmp	r7, r0
    f21c:	d207      	bcs.n	f22e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
    f21e:	6177      	str	r7, [r6, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    f220:	4639      	mov	r1, r7
    f222:	68b0      	ldr	r0, [r6, #8]
    f224:	f7f7 f920 	bl	6468 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    f228:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
    f22a:	2500      	movs	r5, #0
    f22c:	e7e1      	b.n	f1f2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1e>
  current_subgraph_index_ = previous_subgraph_idx;
    f22e:	f8c6 9014 	str.w	r9, [r6, #20]
}
    f232:	2000      	movs	r0, #0
    f234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f238 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
    f238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f23c:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    f23e:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    f242:	2600      	movs	r6, #0
    f244:	e013      	b.n	f26e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x36>
    for (size_t i = 0; i < operators_size; ++i) {
    f246:	3401      	adds	r4, #1
    f248:	42bc      	cmp	r4, r7
    f24a:	d20f      	bcs.n	f26c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x34>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    f24c:	692b      	ldr	r3, [r5, #16]
    f24e:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
    f252:	232c      	movs	r3, #44	; 0x2c
    f254:	fb03 2304 	mla	r3, r3, r4, r2
      const TfLiteRegistration* registration =
    f258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
    f25a:	2a00      	cmp	r2, #0
    f25c:	d0f3      	beq.n	f246 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
    f25e:	6852      	ldr	r2, [r2, #4]
    f260:	2a00      	cmp	r2, #0
    f262:	d0f0      	beq.n	f246 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
        registration->free(context_, node->user_data);
    f264:	6919      	ldr	r1, [r3, #16]
    f266:	6868      	ldr	r0, [r5, #4]
    f268:	4790      	blx	r2
    f26a:	e7ec      	b.n	f246 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    f26c:	3601      	adds	r6, #1
    f26e:	69ab      	ldr	r3, [r5, #24]
    f270:	6818      	ldr	r0, [r3, #0]
    f272:	f7fe fcb2 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    f276:	4286      	cmp	r6, r0
    f278:	d207      	bcs.n	f28a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x52>
    current_subgraph_index_ = subgraph_idx;
    f27a:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    f27c:	4631      	mov	r1, r6
    f27e:	68a8      	ldr	r0, [r5, #8]
    f280:	f7f7 f8f2 	bl	6468 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    f284:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    f286:	2400      	movs	r4, #0
    f288:	e7de      	b.n	f248 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
    f28a:	f8c5 8014 	str.w	r8, [r5, #20]
}
    f28e:	2000      	movs	r0, #0
    f290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f294 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
    f294:	b538      	push	{r3, r4, r5, lr}
    f296:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    f298:	4620      	mov	r0, r4
    f29a:	f7fe fca5 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    f29e:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    f2a0:	4628      	mov	r0, r5
    f2a2:	f7fe fca7 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f2a6:	2808      	cmp	r0, #8
    f2a8:	d90d      	bls.n	f2c6 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x32>
    f2aa:	f105 0008 	add.w	r0, r5, #8
    f2ae:	f7fe fca1 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    f2b2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    f2b4:	b148      	cbz	r0, f2ca <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x36>
    f2b6:	4620      	mov	r0, r4
    f2b8:	f7fe fc90 	bl	dbdc <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    f2bc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    f2be:	6820      	ldr	r0, [r4, #0]
    f2c0:	f7fe fc8b 	bl	dbda <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    f2c4:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f2c6:	2000      	movs	r0, #0
    f2c8:	e7f3      	b.n	f2b2 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    f2ca:	2400      	movs	r4, #0
    f2cc:	e7f7      	b.n	f2be <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x2a>

0000f2ce <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
    f2ce:	b508      	push	{r3, lr}
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
    f2d0:	68c3      	ldr	r3, [r0, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
    f2d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f2d4:	6803      	ldr	r3, [r0, #0]
    f2d6:	68db      	ldr	r3, [r3, #12]
    f2d8:	4798      	blx	r3
}
    f2da:	bd08      	pop	{r3, pc}

0000f2dc <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:
  return interpreter->allocator_.RequestScratchBufferInArena(
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
    f2dc:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
    f2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  return handle->data;
}
    f2e2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    f2e6:	4770      	bx	lr

0000f2e8 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
    f2e8:	b570      	push	{r4, r5, r6, lr}
    f2ea:	b082      	sub	sp, #8
    f2ec:	460b      	mov	r3, r1
  MicroInterpreter* interpreter =
    f2ee:	68c4      	ldr	r4, [r0, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
    f2f0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
    f2f2:	6802      	ldr	r2, [r0, #0]
    f2f4:	6855      	ldr	r5, [r2, #4]
    f2f6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
    f2f8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  return interpreter->allocator_.AllocateTempTfLiteTensor(
    f2fc:	6821      	ldr	r1, [r4, #0]
    f2fe:	9600      	str	r6, [sp, #0]
    f300:	47a8      	blx	r5
}
    f302:	b002      	add	sp, #8
    f304:	bd70      	pop	{r4, r5, r6, pc}

0000f306 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
    f306:	68c2      	ldr	r2, [r0, #12]
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    f308:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
    f30a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
    f30e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
              .tensors[tensor_idx];
    f312:	6858      	ldr	r0, [r3, #4]
    f314:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    f318:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    f31c:	4770      	bx	lr

0000f31e <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
    f31e:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
    f320:	336c      	adds	r3, #108	; 0x6c
    f322:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
}
    f324:	2000      	movs	r0, #0
    f326:	4770      	bx	lr

0000f328 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                           int* buffer_idx) {
    f328:	b508      	push	{r3, lr}
    f32a:	4613      	mov	r3, r2
  MicroInterpreter* interpreter =
    f32c:	68c0      	ldr	r0, [r0, #12]
  return interpreter->allocator_.RequestScratchBufferInArena(
    f32e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    f332:	6e80      	ldr	r0, [r0, #104]	; 0x68
    f334:	f7f8 fa36 	bl	77a4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
}
    f338:	bd08      	pop	{r3, pc}

0000f33a <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
    f33a:	b40e      	push	{r1, r2, r3}
    f33c:	b500      	push	{lr}
    f33e:	b082      	sub	sp, #8
    f340:	aa03      	add	r2, sp, #12
    f342:	f852 1b04 	ldr.w	r1, [r2], #4
  MicroInterpreter* interpreter =
    f346:	68c3      	ldr	r3, [r0, #12]
  va_start(args, format);
    f348:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
    f34a:	6898      	ldr	r0, [r3, #8]
    f34c:	6803      	ldr	r3, [r0, #0]
    f34e:	689b      	ldr	r3, [r3, #8]
    f350:	4798      	blx	r3
}
    f352:	b002      	add	sp, #8
    f354:	f85d eb04 	ldr.w	lr, [sp], #4
    f358:	b003      	add	sp, #12
    f35a:	4770      	bx	lr

0000f35c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
    f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f360:	4604      	mov	r4, r0
    f362:	460d      	mov	r5, r1
    f364:	461e      	mov	r6, r3
    f366:	f8dd 801c 	ldr.w	r8, [sp, #28]
      output_tensors_(nullptr) {
    f36a:	6001      	str	r1, [r0, #0]
    f36c:	6042      	str	r2, [r0, #4]
    f36e:	f8c0 8008 	str.w	r8, [r0, #8]
    f372:	f100 070c 	add.w	r7, r0, #12
    f376:	225c      	movs	r2, #92	; 0x5c
    f378:	2100      	movs	r1, #0
    f37a:	4638      	mov	r0, r7
    f37c:	f000 ff18 	bl	101b0 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    f380:	4642      	mov	r2, r8
    f382:	9906      	ldr	r1, [sp, #24]
    f384:	4630      	mov	r0, r6
    f386:	f000 f90a 	bl	f59e <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
    f38a:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
    f38c:	66a0      	str	r0, [r4, #104]	; 0x68
    f38e:	462a      	mov	r2, r5
    f390:	4639      	mov	r1, r7
    f392:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    f396:	f7f7 f95d 	bl	6654 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
    f39a:	2300      	movs	r3, #0
    f39c:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    f3a0:	2201      	movs	r2, #1
    f3a2:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
    f3a6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    f3aa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    f3ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  Init(profiler);
    f3b2:	9908      	ldr	r1, [sp, #32]
    f3b4:	4620      	mov	r0, r4
    f3b6:	f7f7 fbdd 	bl	6b74 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
    f3ba:	4620      	mov	r0, r4
    f3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f3c0 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
    f3c0:	b510      	push	{r4, lr}
    f3c2:	4604      	mov	r4, r0
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    f3c4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  if (graph_.GetAllocations() != nullptr) {
    f3c6:	b113      	cbz	r3, f3ce <_ZN6tflite16MicroInterpreterD1Ev+0xe>
    graph_.FreeSubgraphs();
    f3c8:	306c      	adds	r0, #108	; 0x6c
    f3ca:	f7ff ff35 	bl	f238 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
    f3ce:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    f3d2:	f7ff fef6 	bl	f1c2 <_ZN6tflite10MicroGraphD1Ev>
}
    f3d6:	4620      	mov	r0, r4
    f3d8:	bd10      	pop	{r4, pc}

0000f3da <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
    f3da:	b508      	push	{r3, lr}
  return graph_.ResetVariableTensors();
    f3dc:	306c      	adds	r0, #108	; 0x6c
    f3de:	f7f7 fad5 	bl	698c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
    f3e2:	bd08      	pop	{r3, pc}

0000f3e4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  void* Allocate(size_t size, size_t alignment_hint) override {
    f3e4:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
    f3e6:	6840      	ldr	r0, [r0, #4]
    f3e8:	6803      	ldr	r3, [r0, #0]
    f3ea:	68db      	ldr	r3, [r3, #12]
    f3ec:	4798      	blx	r3
  }
    f3ee:	bd08      	pop	{r3, pc}

0000f3f0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
    f3f0:	4770      	bx	lr

0000f3f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
    f3f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    f3f4:	6844      	ldr	r4, [r0, #4]
    f3f6:	6843      	ldr	r3, [r0, #4]
    f3f8:	6885      	ldr	r5, [r0, #8]
    f3fa:	441d      	add	r5, r3
    f3fc:	42a5      	cmp	r5, r4
    f3fe:	d91a      	bls.n	f436 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x44>
        &(scratch_buffer_requests[i - tensor_count_]);
    f400:	1ae3      	subs	r3, r4, r3
    internal::ScratchBufferRequest* current_request =
    f402:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
    ScratchBufferHandle* current_handle =
    f406:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    AllocationInfo* current = &info_[i];
    f40a:	6806      	ldr	r6, [r0, #0]
    f40c:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    f410:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
    f414:	f8c5 e004 	str.w	lr, [r5, #4]
    current->bytes = current_request->bytes;
    f418:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    f41c:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    current->first_created = current_request->node_idx;
    f420:	f8dc 3004 	ldr.w	r3, [ip, #4]
    f424:	60ab      	str	r3, [r5, #8]
    current->last_used = current_request->node_idx;
    f426:	60eb      	str	r3, [r5, #12]
    current->offline_offset = kOnlinePlannedBuffer;
    f428:	f04f 33ff 	mov.w	r3, #4294967295
    f42c:	612b      	str	r3, [r5, #16]
    current->needs_allocating = true;
    f42e:	2301      	movs	r3, #1
    f430:	752b      	strb	r3, [r5, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    f432:	441c      	add	r4, r3
    f434:	e7df      	b.n	f3f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x4>
}
    f436:	2000      	movs	r0, #0
    f438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f43a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
    f43a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f43e:	b085      	sub	sp, #20
    f440:	9001      	str	r0, [sp, #4]
    f442:	4688      	mov	r8, r1
    f444:	4693      	mov	fp, r2
    f446:	461f      	mov	r7, r3
    f448:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  for (size_t i = 0; i < allocation_info_size; ++i) {
    f44c:	2400      	movs	r4, #0
  int planner_index = 0;
    f44e:	4626      	mov	r6, r4
    f450:	e000      	b.n	f454 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x1a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    f452:	3401      	adds	r4, #1
    f454:	454c      	cmp	r4, r9
    f456:	d21a      	bcs.n	f48e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x54>
    const AllocationInfo* current = &allocation_info[i];
    f458:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    f45c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    if (current->needs_allocating) {
    f460:	7d2b      	ldrb	r3, [r5, #20]
    f462:	2b00      	cmp	r3, #0
    f464:	d0f5      	beq.n	f452 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
      int offset = -1;
    f466:	f04f 33ff 	mov.w	r3, #4294967295
    f46a:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
    f46c:	f8d8 3000 	ldr.w	r3, [r8]
    f470:	f8d3 a014 	ldr.w	sl, [r3, #20]
    f474:	ab03      	add	r3, sp, #12
    f476:	4632      	mov	r2, r6
    f478:	9901      	ldr	r1, [sp, #4]
    f47a:	4640      	mov	r0, r8
    f47c:	47d0      	blx	sl
    f47e:	4603      	mov	r3, r0
    f480:	b930      	cbnz	r0, f490 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x56>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    f482:	686a      	ldr	r2, [r5, #4]
    f484:	9b03      	ldr	r3, [sp, #12]
    f486:	445b      	add	r3, fp
    f488:	6013      	str	r3, [r2, #0]
      ++planner_index;
    f48a:	3601      	adds	r6, #1
    f48c:	e7e1      	b.n	f452 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
  return kTfLiteOk;
    f48e:	2300      	movs	r3, #0
}
    f490:	4618      	mov	r0, r3
    f492:	b005      	add	sp, #20
    f494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f498 <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
    f498:	4770      	bx	lr

0000f49a <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
    f49a:	b508      	push	{r3, lr}
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    f49c:	6840      	ldr	r0, [r0, #4]
    f49e:	6803      	ldr	r3, [r0, #0]
    f4a0:	68db      	ldr	r3, [r3, #12]
    f4a2:	2210      	movs	r2, #16
    f4a4:	4798      	blx	r3
}
    f4a6:	bd08      	pop	{r3, pc}

0000f4a8 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
void MicroAllocator::ResetTempAllocations() {
    f4a8:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
    f4aa:	6840      	ldr	r0, [r0, #4]
    f4ac:	6803      	ldr	r3, [r0, #0]
    f4ae:	695b      	ldr	r3, [r3, #20]
    f4b0:	4798      	blx	r3
}
    f4b2:	bd08      	pop	{r3, pc}

0000f4b4 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
    f4b4:	b508      	push	{r3, lr}
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    f4b6:	6840      	ldr	r0, [r0, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    f4b8:	6803      	ldr	r3, [r0, #0]
    f4ba:	68db      	ldr	r3, [r3, #12]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    f4bc:	2204      	movs	r2, #4
    f4be:	2140      	movs	r1, #64	; 0x40
    f4c0:	4798      	blx	r3
}
    f4c2:	bd08      	pop	{r3, pc}

0000f4c4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    f4c4:	4770      	bx	lr

0000f4c6 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
    f4c6:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
    f4c8:	b161      	cbz	r1, f4e4 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
    f4ca:	4613      	mov	r3, r2
    f4cc:	460c      	mov	r4, r1

  if (scratch_buffer_request_count_ == 0) {
    f4ce:	6942      	ldr	r2, [r0, #20]
    f4d0:	b132      	cbz	r2, f4e0 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
    f4d2:	6840      	ldr	r0, [r0, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
    f4d4:	6802      	ldr	r2, [r0, #0]
    f4d6:	68d5      	ldr	r5, [r2, #12]
      memory_allocator_->AllocateFromTail(
    f4d8:	2204      	movs	r2, #4
    f4da:	0099      	lsls	r1, r3, #2
    f4dc:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
    f4de:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
    f4e0:	2000      	movs	r0, #0
    f4e2:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
    f4e4:	f000 fe3e 	bl	10164 <abort>

0000f4e8 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
    f4e8:	b510      	push	{r4, lr}
    f4ea:	4604      	mov	r4, r0
    f4ec:	f000 fe23 	bl	10136 <_ZdlPv>
    f4f0:	4620      	mov	r0, r4
    f4f2:	bd10      	pop	{r4, pc}

0000f4f4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    f4f4:	b510      	push	{r4, lr}
    f4f6:	4604      	mov	r4, r0
    f4f8:	f000 fe1d 	bl	10136 <_ZdlPv>
    f4fc:	4620      	mov	r0, r4
    f4fe:	bd10      	pop	{r4, pc}

0000f500 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
    f500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f504:	b082      	sub	sp, #8
    f506:	4682      	mov	sl, r0
    f508:	4689      	mov	r9, r1
    f50a:	4617      	mov	r7, r2
    f50c:	4698      	mov	r8, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
    f50e:	2500      	movs	r5, #0
    f510:	e00a      	b.n	f528 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x28>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    f512:	68e1      	ldr	r1, [r4, #12]
    f514:	9301      	str	r3, [sp, #4]
    f516:	9100      	str	r1, [sp, #0]
    f518:	68a3      	ldr	r3, [r4, #8]
    f51a:	4651      	mov	r1, sl
    f51c:	4648      	mov	r0, r9
    f51e:	f000 f8c9 	bl	f6b4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
    f522:	4603      	mov	r3, r0
    f524:	bb08      	cbnz	r0, f56a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    f526:	3501      	adds	r5, #1
    f528:	4545      	cmp	r5, r8
    f52a:	d21d      	bcs.n	f568 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x68>
    const AllocationInfo* current = &allocation_info[i];
    f52c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    f530:	00e3      	lsls	r3, r4, #3
    f532:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    if (current->needs_allocating) {
    f536:	7d26      	ldrb	r6, [r4, #20]
    f538:	2e00      	cmp	r6, #0
    f53a:	d0f4      	beq.n	f526 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
          AlignSizeUp(current->bytes, kBufferAlignment);
    f53c:	2110      	movs	r1, #16
    f53e:	58f8      	ldr	r0, [r7, r3]
    f540:	f7ff fd09 	bl	ef56 <_ZN6tflite11AlignSizeUpEjj>
    f544:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    f546:	6923      	ldr	r3, [r4, #16]
    f548:	f1b3 3fff 	cmp.w	r3, #4294967295
    f54c:	d1e1      	bne.n	f512 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
        TF_LITE_ENSURE_STATUS(
    f54e:	f8d9 3000 	ldr.w	r3, [r9]
    f552:	689e      	ldr	r6, [r3, #8]
    f554:	68e3      	ldr	r3, [r4, #12]
    f556:	9300      	str	r3, [sp, #0]
    f558:	68a3      	ldr	r3, [r4, #8]
    f55a:	4651      	mov	r1, sl
    f55c:	4648      	mov	r0, r9
    f55e:	47b0      	blx	r6
    f560:	4603      	mov	r3, r0
    f562:	2800      	cmp	r0, #0
    f564:	d0df      	beq.n	f526 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
    f566:	e000      	b.n	f56a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  return kTfLiteOk;
    f568:	2300      	movs	r3, #0
}
    f56a:	4618      	mov	r0, r3
    f56c:	b002      	add	sp, #8
    f56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f572 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    f572:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
    f574:	b178      	cbz	r0, f596 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x24>
    f576:	460c      	mov	r4, r1
    f578:	4605      	mov	r5, r0
  TFLITE_DCHECK(error_reporter != nullptr);
    f57a:	b171      	cbz	r1, f59a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      sizeof(MicroAllocator), alignof(MicroAllocator));
    f57c:	6803      	ldr	r3, [r0, #0]
    f57e:	68db      	ldr	r3, [r3, #12]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
    f580:	2204      	movs	r2, #4
    f582:	211c      	movs	r1, #28
    f584:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    f586:	4606      	mov	r6, r0
    f588:	b118      	cbz	r0, f592 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x20>
    f58a:	4622      	mov	r2, r4
    f58c:	4629      	mov	r1, r5
    f58e:	f7f8 f8fb 	bl	7788 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
    f592:	4630      	mov	r0, r6
    f594:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
    f596:	f000 fde5 	bl	10164 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    f59a:	f000 fde3 	bl	10164 <abort>

0000f59e <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    f59e:	b570      	push	{r4, r5, r6, lr}
    f5a0:	4604      	mov	r4, r0
    f5a2:	460e      	mov	r6, r1
    f5a4:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    f5a6:	2110      	movs	r1, #16
    f5a8:	f7ff fcc9 	bl	ef3e <_ZN6tflite14AlignPointerUpEPhj>
    f5ac:	4601      	mov	r1, r0
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    f5ae:	4434      	add	r4, r6
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    f5b0:	1a22      	subs	r2, r4, r0
    f5b2:	4628      	mov	r0, r5
    f5b4:	f7f6 fd30 	bl	6018 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
    f5b8:	4629      	mov	r1, r5
    f5ba:	f7ff ffda 	bl	f572 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
    f5be:	bd70      	pop	{r4, r5, r6, pc}

0000f5c0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
    f5c0:	b508      	push	{r3, lr}
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
    f5c2:	2300      	movs	r3, #0
    f5c4:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    f5c6:	6840      	ldr	r0, [r0, #4]
    f5c8:	6803      	ldr	r3, [r0, #0]
    f5ca:	689b      	ldr	r3, [r3, #8]
    f5cc:	2204      	movs	r2, #4
    f5ce:	2160      	movs	r1, #96	; 0x60
    f5d0:	4798      	blx	r3
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}
    f5d2:	bd08      	pop	{r3, pc}

0000f5d4 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
    f5d4:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
    f5d6:	6840      	ldr	r0, [r0, #4]
    f5d8:	f7ff fc8d 	bl	eef6 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    f5dc:	2104      	movs	r1, #4
    f5de:	f7ff fcae 	bl	ef3e <_ZN6tflite14AlignPointerUpEPhj>
                     alignof(internal::ScratchBufferRequest)));
}
    f5e2:	bd08      	pop	{r3, pc}

0000f5e4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
    f5e4:	b570      	push	{r4, r5, r6, lr}
    f5e6:	4605      	mov	r5, r0
    f5e8:	460e      	mov	r6, r1
  ResetTempAllocations();
    f5ea:	6803      	ldr	r3, [r0, #0]
    f5ec:	689b      	ldr	r3, [r3, #8]
    f5ee:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    f5f0:	4628      	mov	r0, r5
    f5f2:	f7ff ffef 	bl	f5d4 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    f5f6:	2300      	movs	r3, #0
    f5f8:	e000      	b.n	f5fc <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
    f5fa:	3301      	adds	r3, #1
    f5fc:	6969      	ldr	r1, [r5, #20]
    f5fe:	4299      	cmp	r1, r3
    f600:	d907      	bls.n	f612 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    f602:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
    f606:	6854      	ldr	r4, [r2, #4]
    f608:	f1b4 3fff 	cmp.w	r4, #4294967295
    f60c:	d1f5      	bne.n	f5fa <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
      requests[i].node_idx = node_id;
    f60e:	6056      	str	r6, [r2, #4]
    f610:	e7f3      	b.n	f5fa <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    f612:	6868      	ldr	r0, [r5, #4]
    f614:	6803      	ldr	r3, [r0, #0]
    f616:	689b      	ldr	r3, [r3, #8]
    f618:	310c      	adds	r1, #12
    f61a:	2204      	movs	r2, #4
    f61c:	00c9      	lsls	r1, r1, #3
    f61e:	4798      	blx	r3
}
    f620:	bd70      	pop	{r4, r5, r6, pc}

0000f622 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
    f622:	6880      	ldr	r0, [r0, #8]
    f624:	4770      	bx	lr

0000f626 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
    f626:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
    f628:	b119      	cbz	r1, f632 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    f62a:	b122      	cbz	r2, f636 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
    f62c:	601a      	str	r2, [r3, #0]
}
    f62e:	2000      	movs	r0, #0
    f630:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    f632:	f000 fd97 	bl	10164 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    f636:	f000 fd95 	bl	10164 <abort>

0000f63a <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
    TfLiteIntArray** result) {
    f63a:	b508      	push	{r3, lr}
    f63c:	4613      	mov	r3, r2
  return internal::FlatBufferVectorToTfLiteTypeArray(
    f63e:	460a      	mov	r2, r1
    f640:	68c1      	ldr	r1, [r0, #12]
    f642:	6840      	ldr	r0, [r0, #4]
    f644:	f7ff ffef 	bl	f626 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
}
    f648:	bd08      	pop	{r3, pc}

0000f64a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
    f64a:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
    f64c:	b119      	cbz	r1, f656 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    f64e:	b122      	cbz	r2, f65a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
    f650:	601a      	str	r2, [r3, #0]
}
    f652:	2000      	movs	r0, #0
    f654:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    f656:	f000 fd85 	bl	10164 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    f65a:	f000 fd83 	bl	10164 <abort>

0000f65e <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
    f65e:	4770      	bx	lr

0000f660 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
    f660:	6880      	ldr	r0, [r0, #8]
    f662:	4770      	bx	lr

0000f664 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
    f664:	b510      	push	{r4, lr}
    f666:	4604      	mov	r4, r0
}
    f668:	f000 fd65 	bl	10136 <_ZdlPv>
    f66c:	4620      	mov	r0, r4
    f66e:	bd10      	pop	{r4, pc}

0000f670 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
    f670:	b4f0      	push	{r4, r5, r6, r7}
    for (int i = 1; i < size; ++i) {
    f672:	2301      	movs	r3, #1
    any_swapped = false;
    f674:	2700      	movs	r7, #0
    f676:	e000      	b.n	f67a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
    for (int i = 1; i < size; ++i) {
    f678:	3301      	adds	r3, #1
    f67a:	4293      	cmp	r3, r2
    f67c:	da16      	bge.n	f6ac <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
      if (values[i - 1] < values[i]) {
    f67e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
    f682:	3c01      	subs	r4, #1
    f684:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    f688:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
    f68c:	42b5      	cmp	r5, r6
    f68e:	daf3      	bge.n	f678 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
        values[i - 1] = values[i];
    f690:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        values[i] = value_temp;
    f694:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        const int id_temp = ids[i - 1];
    f698:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        ids[i - 1] = ids[i];
    f69c:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
    f6a0:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
        ids[i] = id_temp;
    f6a4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
        any_swapped = true;
    f6a8:	2701      	movs	r7, #1
    f6aa:	e7e5      	b.n	f678 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
    f6ac:	2f00      	cmp	r7, #0
    f6ae:	d1e0      	bne.n	f672 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
    f6b0:	bcf0      	pop	{r4, r5, r6, r7}
    f6b2:	4770      	bx	lr

0000f6b4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
    f6b4:	b570      	push	{r4, r5, r6, lr}
    f6b6:	b082      	sub	sp, #8
  BufferRequirements* current = &requirements_[buffer_count_];
    f6b8:	68c5      	ldr	r5, [r0, #12]
    f6ba:	6886      	ldr	r6, [r0, #8]
    f6bc:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    f6c0:	6804      	ldr	r4, [r0, #0]
    f6c2:	68a4      	ldr	r4, [r4, #8]
    f6c4:	9e06      	ldr	r6, [sp, #24]
    f6c6:	9600      	str	r6, [sp, #0]
    f6c8:	47a0      	blx	r4
    f6ca:	b918      	cbnz	r0, f6d4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
    f6cc:	9b07      	ldr	r3, [sp, #28]
    f6ce:	606b      	str	r3, [r5, #4]
}
    f6d0:	b002      	add	sp, #8
    f6d2:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
    f6d4:	2001      	movs	r0, #1
    f6d6:	e7fb      	b.n	f6d0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

0000f6d8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
    f6d8:	68c0      	ldr	r0, [r0, #12]
    f6da:	6849      	ldr	r1, [r1, #4]
  const BufferRequirements* entry_requirements =
    f6dc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
    f6e0:	6888      	ldr	r0, [r1, #8]
    f6e2:	4298      	cmp	r0, r3
    f6e4:	dc04      	bgt.n	f6f0 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x18>
  if (first_time_used > entry_requirements->last_time_used) {
    f6e6:	68cb      	ldr	r3, [r1, #12]
    f6e8:	4293      	cmp	r3, r2
    f6ea:	db03      	blt.n	f6f4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  return true;
    f6ec:	2001      	movs	r0, #1
    f6ee:	4770      	bx	lr
    return false;
    f6f0:	2000      	movs	r0, #0
    f6f2:	4770      	bx	lr
    return false;
    f6f4:	2000      	movs	r0, #0
}
    f6f6:	4770      	bx	lr

0000f6f8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
    f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6fa:	4605      	mov	r5, r0
    f6fc:	4616      	mov	r6, r2
    f6fe:	461f      	mov	r7, r3
  if (start == nullptr) {
    f700:	b1c9      	cbz	r1, f736 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (start->next_entry_index == -1) {
    f702:	688b      	ldr	r3, [r1, #8]
    f704:	f1b3 3fff 	cmp.w	r3, #4294967295
    f708:	d01c      	beq.n	f744 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4c>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
    f70a:	6984      	ldr	r4, [r0, #24]
    f70c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f710:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    f714:	463b      	mov	r3, r7
    f716:	4632      	mov	r2, r6
    f718:	4621      	mov	r1, r4
    f71a:	4628      	mov	r0, r5
    f71c:	f7ff ffdc 	bl	f6d8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
    f720:	b998      	cbnz	r0, f74a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
    if (candidate_next_entry->next_entry_index == -1) {
    f722:	68a4      	ldr	r4, [r4, #8]
    f724:	f1b4 3fff 	cmp.w	r4, #4294967295
    f728:	d00e      	beq.n	f748 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x50>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
    f72a:	69a9      	ldr	r1, [r5, #24]
    f72c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    candidate_next_entry =
    f730:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    f734:	e7ee      	b.n	f714 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
    f736:	6984      	ldr	r4, [r0, #24]
    f738:	6a03      	ldr	r3, [r0, #32]
    f73a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f73e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    f742:	e7e7      	b.n	f714 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
      return nullptr;
    f744:	2400      	movs	r4, #0
    f746:	e000      	b.n	f74a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
  ListEntry* result = nullptr;
    f748:	2400      	movs	r4, #0
}
    f74a:	4620      	mov	r0, r4
    f74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f74e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    f74e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f752:	2b00      	cmp	r3, #0
    f754:	f000 80d5 	beq.w	f902 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b4>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
    f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f75c:	b083      	sub	sp, #12
    f75e:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    f760:	6886      	ldr	r6, [r0, #8]
    f762:	2e00      	cmp	r6, #0
    f764:	f000 80ca 	beq.w	f8fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
  need_to_calculate_offsets_ = false;
    f768:	2000      	movs	r0, #0
    f76a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
    f76e:	4603      	mov	r3, r0
    f770:	e00e      	b.n	f790 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x42>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
    f772:	6925      	ldr	r5, [r4, #16]
    f774:	5852      	ldr	r2, [r2, r1]
    f776:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
    f77a:	6962      	ldr	r2, [r4, #20]
    f77c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
    f780:	68e2      	ldr	r2, [r4, #12]
    f782:	4411      	add	r1, r2
    f784:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f786:	6849      	ldr	r1, [r1, #4]
    f788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
    f78c:	3001      	adds	r0, #1
  for (int i = 0; i < buffer_count_; ++i) {
    f78e:	3301      	adds	r3, #1
    f790:	68a2      	ldr	r2, [r4, #8]
    f792:	429a      	cmp	r2, r3
    f794:	dd15      	ble.n	f7c2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    f796:	68e2      	ldr	r2, [r4, #12]
    f798:	0119      	lsls	r1, r3, #4
    f79a:	eb02 1503 	add.w	r5, r2, r3, lsl #4
    f79e:	686d      	ldr	r5, [r5, #4]
    f7a0:	f1b5 3fff 	cmp.w	r5, #4294967295
    f7a4:	d1e5      	bne.n	f772 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      idx_from_tail--;
    f7a6:	3e01      	subs	r6, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    f7a8:	6925      	ldr	r5, [r4, #16]
    f7aa:	5852      	ldr	r2, [r2, r1]
    f7ac:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
    f7b0:	6962      	ldr	r2, [r4, #20]
    f7b2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      buffer_offsets_[i] = -1;
    f7b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f7b8:	f04f 31ff 	mov.w	r1, #4294967295
    f7bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    f7c0:	e7e5      	b.n	f78e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    f7c2:	6923      	ldr	r3, [r4, #16]
                     &buffer_ids_sorted_[idx_from_head],
    f7c4:	6961      	ldr	r1, [r4, #20]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    f7c6:	1a12      	subs	r2, r2, r0
    f7c8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    f7cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f7d0:	f7ff ff4e 	bl	f670 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  first_entry_index_ = 0;
    f7d4:	2300      	movs	r3, #0
    f7d6:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
    f7d8:	2301      	movs	r3, #1
    f7da:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
    f7dc:	f8d4 a018 	ldr.w	sl, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
    f7e0:	f04f 33ff 	mov.w	r3, #4294967295
    f7e4:	f8ca 3008 	str.w	r3, [sl, #8]
  int buffer_id = buffer_ids_sorted_[0];
    f7e8:	6963      	ldr	r3, [r4, #20]
    f7ea:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
    f7ec:	f8ca 3004 	str.w	r3, [sl, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    f7f0:	68e2      	ldr	r2, [r4, #12]
    f7f2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    f7f6:	6852      	ldr	r2, [r2, #4]
    f7f8:	f1b2 3fff 	cmp.w	r2, #4294967295
    f7fc:	d007      	beq.n	f80e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc0>
  first_entry->offset = buffer_offsets_[buffer_id];
    f7fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f804:	f8ca 3000 	str.w	r3, [sl]
  for (int i = 1; i < buffer_count_; ++i) {
    f808:	f04f 0901 	mov.w	r9, #1
    f80c:	e036      	b.n	f87c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
    buffer_offsets_[buffer_id] = 0;
    f80e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f810:	2100      	movs	r1, #0
    f812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    f816:	e7f2      	b.n	f7fe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb0>
      ListEntry* prior_entry = nullptr;
    f818:	2100      	movs	r1, #0
    int candidate_offset = 0;
    f81a:	460d      	mov	r5, r1
    f81c:	f8cd a000 	str.w	sl, [sp]
    f820:	f8cd 9004 	str.w	r9, [sp, #4]
    f824:	4681      	mov	r9, r0
    f826:	4692      	mov	sl, r2
    f828:	e004      	b.n	f834 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
        if (next_entry == nullptr) {
    f82a:	b1d9      	cbz	r1, f864 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x116>
        const int gap = next_entry->offset - candidate_offset;
    f82c:	680b      	ldr	r3, [r1, #0]
    f82e:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
    f830:	459b      	cmp	fp, r3
    f832:	dd12      	ble.n	f85a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
    f834:	460e      	mov	r6, r1
    f836:	4653      	mov	r3, sl
    f838:	464a      	mov	r2, r9
    f83a:	4620      	mov	r0, r4
    f83c:	f7ff ff5c 	bl	f6f8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
    f840:	4601      	mov	r1, r0
        if (prior_entry) {
    f842:	2e00      	cmp	r6, #0
    f844:	d0f1      	beq.n	f82a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
              &requirements_[prior_entry->requirements_index];
    f846:	6873      	ldr	r3, [r6, #4]
    f848:	011a      	lsls	r2, r3, #4
              prior_entry->offset + candidate_requirements->size;
    f84a:	6833      	ldr	r3, [r6, #0]
    f84c:	f858 2002 	ldr.w	r2, [r8, r2]
          const int prior_entry_offset =
    f850:	4413      	add	r3, r2
          if (prior_entry_offset > candidate_offset) {
    f852:	429d      	cmp	r5, r3
    f854:	dae9      	bge.n	f82a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
            candidate_offset = prior_entry_offset;
    f856:	461d      	mov	r5, r3
    f858:	e7e7      	b.n	f82a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
    f85a:	f8dd a000 	ldr.w	sl, [sp]
    f85e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    f862:	e01f      	b.n	f8a4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
    f864:	f8dd a000 	ldr.w	sl, [sp]
    f868:	f8dd 9004 	ldr.w	r9, [sp, #4]
    f86c:	e01a      	b.n	f8a4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
      first_entry->next_entry_index = first_entry_index_;
    f86e:	6a23      	ldr	r3, [r4, #32]
    f870:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
    f874:	6227      	str	r7, [r4, #32]
      first_entry = new_entry;
    f876:	46e2      	mov	sl, ip
  for (int i = 1; i < buffer_count_; ++i) {
    f878:	f109 0901 	add.w	r9, r9, #1
    f87c:	68a3      	ldr	r3, [r4, #8]
    f87e:	454b      	cmp	r3, r9
    f880:	dd3c      	ble.n	f8fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
    f882:	6963      	ldr	r3, [r4, #20]
    f884:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
    f888:	f8d4 800c 	ldr.w	r8, [r4, #12]
    f88c:	013a      	lsls	r2, r7, #4
    f88e:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    const int wanted_size = wanted_requirements->size;
    f892:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
    f896:	689a      	ldr	r2, [r3, #8]
    f898:	4610      	mov	r0, r2
    const int wanted_last_time_used = wanted_requirements->last_time_used;
    f89a:	68da      	ldr	r2, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    f89c:	685d      	ldr	r5, [r3, #4]
    f89e:	f1b5 3fff 	cmp.w	r5, #4294967295
    f8a2:	d0b9      	beq.n	f818 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    buffer_offsets_[buffer_id] = candidate_offset;
    f8a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8a6:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    f8aa:	69a2      	ldr	r2, [r4, #24]
    f8ac:	69e3      	ldr	r3, [r4, #28]
    f8ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f8b2:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
    f8b6:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
    f8ba:	f8cc 7004 	str.w	r7, [ip, #4]
    const int new_entry_index = next_free_entry_;
    f8be:	69e7      	ldr	r7, [r4, #28]
    ++next_free_entry_;
    f8c0:	1c7b      	adds	r3, r7, #1
    f8c2:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
    f8c4:	f8da 3000 	ldr.w	r3, [sl]
    f8c8:	42ab      	cmp	r3, r5
    f8ca:	dcd0      	bgt.n	f86e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x120>
      ListEntry* current_entry = first_entry;
    f8cc:	4650      	mov	r0, sl
    f8ce:	e000      	b.n	f8d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
        current_entry = next_entry;
    f8d0:	4630      	mov	r0, r6
        const int next_entry_index = current_entry->next_entry_index;
    f8d2:	6883      	ldr	r3, [r0, #8]
        if (next_entry_index == -1) {
    f8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
    f8d8:	d00c      	beq.n	f8f4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a6>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
    f8da:	69a2      	ldr	r2, [r4, #24]
    f8dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    f8e0:	eb02 0681 	add.w	r6, r2, r1, lsl #2
        if (next_entry->offset > candidate_offset) {
    f8e4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    f8e8:	42aa      	cmp	r2, r5
    f8ea:	ddf1      	ble.n	f8d0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x182>
          new_entry->next_entry_index = current_entry->next_entry_index;
    f8ec:	f8cc 3008 	str.w	r3, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
    f8f0:	6087      	str	r7, [r0, #8]
          break;
    f8f2:	e7c1      	b.n	f878 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
          current_entry->next_entry_index = new_entry_index;
    f8f4:	6087      	str	r7, [r0, #8]
          new_entry->next_entry_index = -1;
    f8f6:	f8cc 3008 	str.w	r3, [ip, #8]
          break;
    f8fa:	e7bd      	b.n	f878 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
}
    f8fc:	b003      	add	sp, #12
    f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f902:	4770      	bx	lr

0000f904 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
    f904:	b570      	push	{r4, r5, r6, lr}
    f906:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
    f908:	f7ff ff21 	bl	f74e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
    f90c:	68a3      	ldr	r3, [r4, #8]
    f90e:	b1d3      	cbz	r3, f946 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    f910:	69a6      	ldr	r6, [r4, #24]
    f912:	6a23      	ldr	r3, [r4, #32]
    f914:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f918:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  size_t max_size = 0;
    f91c:	2000      	movs	r0, #0
    f91e:	e007      	b.n	f930 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x2c>
    if (entry->next_entry_index == -1) {
    f920:	689b      	ldr	r3, [r3, #8]
    f922:	f1b3 3fff 	cmp.w	r3, #4294967295
    f926:	d00f      	beq.n	f948 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
    f928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f92c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (entry) {
    f930:	b153      	cbz	r3, f948 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
        &requirements_[entry->requirements_index];
    f932:	68e5      	ldr	r5, [r4, #12]
    f934:	685a      	ldr	r2, [r3, #4]
    f936:	0111      	lsls	r1, r2, #4
    const size_t current_size = entry->offset + requirements->size;
    f938:	681a      	ldr	r2, [r3, #0]
    f93a:	5869      	ldr	r1, [r5, r1]
    f93c:	440a      	add	r2, r1
    if (current_size > max_size) {
    f93e:	4290      	cmp	r0, r2
    f940:	d2ee      	bcs.n	f920 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
      max_size = current_size;
    f942:	4610      	mov	r0, r2
    f944:	e7ec      	b.n	f920 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
    return 0;
    f946:	2000      	movs	r0, #0
}
    f948:	bd70      	pop	{r4, r5, r6, pc}

0000f94a <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
    f94a:	3001      	adds	r0, #1
}
    f94c:	0080      	lsls	r0, r0, #2
    f94e:	4770      	bx	lr

0000f950 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                             const TfLiteNode* node, int index) {
    f950:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
    f952:	680b      	ldr	r3, [r1, #0]
    f954:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
    f958:	2a00      	cmp	r2, #0
    f95a:	db10      	blt.n	f97e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
    f95c:	428a      	cmp	r2, r1
    f95e:	da10      	bge.n	f982 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
    f960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
    f964:	f1b1 3fff 	cmp.w	r1, #4294967295
    f968:	d00d      	beq.n	f986 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
    f96a:	2900      	cmp	r1, #0
    f96c:	db0d      	blt.n	f98a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
    f96e:	6883      	ldr	r3, [r0, #8]
    f970:	b113      	cbz	r3, f978 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
    f972:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
    f976:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
    f978:	6d03      	ldr	r3, [r0, #80]	; 0x50
    f97a:	4798      	blx	r3
    f97c:	e7fb      	b.n	f976 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
    f97e:	2000      	movs	r0, #0
    f980:	e7f9      	b.n	f976 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    f982:	2000      	movs	r0, #0
    f984:	e7f7      	b.n	f976 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    f986:	2000      	movs	r0, #0
    f988:	e7f5      	b.n	f976 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    f98a:	2000      	movs	r0, #0
  return GetMutableInput(context, node, index);
    f98c:	e7f3      	b.n	f976 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>

0000f98e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
    f98e:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
    f990:	684b      	ldr	r3, [r1, #4]
    f992:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
    f996:	2a00      	cmp	r2, #0
    f998:	db10      	blt.n	f9bc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
    f99a:	4291      	cmp	r1, r2
    f99c:	dd10      	ble.n	f9c0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
    f99e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
    f9a2:	f1b1 3fff 	cmp.w	r1, #4294967295
    f9a6:	d00d      	beq.n	f9c4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
    f9a8:	2900      	cmp	r1, #0
    f9aa:	db0d      	blt.n	f9c8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
    f9ac:	6883      	ldr	r3, [r0, #8]
    f9ae:	b113      	cbz	r3, f9b6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
    f9b0:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
    f9b4:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
    f9b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
    f9b8:	4798      	blx	r3
    f9ba:	e7fb      	b.n	f9b4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
    f9bc:	2000      	movs	r0, #0
    f9be:	e7f9      	b.n	f9b4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    f9c0:	2000      	movs	r0, #0
    f9c2:	e7f7      	b.n	f9b4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    f9c4:	2000      	movs	r0, #0
    f9c6:	e7f5      	b.n	f9b4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    f9c8:	2000      	movs	r0, #0
    f9ca:	e7f3      	b.n	f9b4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>

0000f9cc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                           const TfLiteNode* node, int index) {
    f9cc:	b508      	push	{r3, lr}
  return GetInput(context, node, index);
    f9ce:	f7ff ffbf 	bl	f950 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
}
    f9d2:	bd08      	pop	{r3, pc}

0000f9d4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  switch (activation) {
    f9d4:	1e43      	subs	r3, r0, #1
    f9d6:	2b04      	cmp	r3, #4
    f9d8:	d804      	bhi.n	f9e4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>
    f9da:	e8df f003 	tbb	[pc, r3]
    f9de:	0404      	.short	0x0404
    f9e0:	0404      	.short	0x0404
    f9e2:	04          	.byte	0x04
    f9e3:	00          	.byte	0x00
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
    f9e4:	2000      	movs	r0, #0
}
    f9e6:	4770      	bx	lr

0000f9e8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
    f9e8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
    f9ea:	b118      	cbz	r0, f9f4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
  TFLITE_DCHECK(error_reporter != nullptr);
    f9ec:	b121      	cbz	r1, f9f8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
  TFLITE_DCHECK(allocator != nullptr);
    f9ee:	b12a      	cbz	r2, f9fc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
  TFLITE_DCHECK(builtin_data != nullptr);
    f9f0:	b133      	cbz	r3, fa00 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
}
    f9f2:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op != nullptr);
    f9f4:	f000 fbb6 	bl	10164 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    f9f8:	f000 fbb4 	bl	10164 <abort>
  TFLITE_DCHECK(allocator != nullptr);
    f9fc:	f000 fbb2 	bl	10164 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
    fa00:	f000 fbb0 	bl	10164 <abort>

0000fa04 <_ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}
    fa04:	2000      	movs	r0, #0
    fa06:	4770      	bx	lr

0000fa08 <_ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
// switch-case in ParseOpData because this function is used as part of the
// selective registration for the OpResolver implementation in micro.
TfLiteStatus ParseQuantize(const Operator*, ErrorReporter*,
                           BuiltinDataAllocator*, void**) {
  return kTfLiteOk;
}
    fa08:	2000      	movs	r0, #0
    fa0a:	4770      	bx	lr

0000fa0c <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
    fa0c:	b40e      	push	{r1, r2, r3}
    fa0e:	b500      	push	{lr}
    fa10:	b082      	sub	sp, #8
    fa12:	aa03      	add	r2, sp, #12
    fa14:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    fa18:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    fa1a:	6803      	ldr	r3, [r0, #0]
    fa1c:	689b      	ldr	r3, [r3, #8]
    fa1e:	4798      	blx	r3
  va_end(args);
  return code;
}
    fa20:	b002      	add	sp, #8
    fa22:	f85d eb04 	ldr.w	lr, [sp], #4
    fa26:	b003      	add	sp, #12
    fa28:	4770      	bx	lr

0000fa2a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
    fa2a:	b40c      	push	{r2, r3}
    fa2c:	b500      	push	{lr}
    fa2e:	b083      	sub	sp, #12
    fa30:	aa04      	add	r2, sp, #16
    fa32:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    fa36:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    fa38:	6803      	ldr	r3, [r0, #0]
    fa3a:	689b      	ldr	r3, [r3, #8]
    fa3c:	4798      	blx	r3
  va_end(args);
  return code;
}
    fa3e:	b003      	add	sp, #12
    fa40:	f85d eb04 	ldr.w	lr, [sp], #4
    fa44:	b002      	add	sp, #8
    fa46:	4770      	bx	lr

0000fa48 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
    fa48:	b570      	push	{r4, r5, r6, lr}
    fa4a:	b082      	sub	sp, #8
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
    fa4c:	b368      	cbz	r0, faaa <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x62>
    fa4e:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    fa50:	f7fe f8ca 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    fa54:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    fa56:	4628      	mov	r0, r5
    fa58:	f7fe f8cc 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    fa5c:	280a      	cmp	r0, #10
    fa5e:	d926      	bls.n	faae <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
    fa60:	f105 000a 	add.w	r0, r5, #10
    fa64:	f7fe f8c6 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    fa68:	b318      	cbz	r0, fab2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6a>
    fa6a:	4420      	add	r0, r4
    fa6c:	f7fe f8bc 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
    fa70:	b2c5      	uxtb	r5, r0

  return std::max(
      op_code->builtin_code(),
    fa72:	f88d 5006 	strb.w	r5, [sp, #6]
    return data_ - ReadScalar<soffset_t>(data_);
    fa76:	4620      	mov	r0, r4
    fa78:	f7fe f8b6 	bl	dbe8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    fa7c:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    fa7e:	4630      	mov	r0, r6
    fa80:	f7fe f8b8 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    fa84:	2804      	cmp	r0, #4
    fa86:	d916      	bls.n	fab6 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6e>
    fa88:	1d30      	adds	r0, r6, #4
    fa8a:	f7fe f8b3 	bl	dbf4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    fa8e:	b1a0      	cbz	r0, faba <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x72>
    fa90:	4420      	add	r0, r4
    fa92:	f7ff facc 	bl	f02e <_ZN11flatbuffers10ReadScalarIaEET_PKv>
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
    fa96:	b2c0      	uxtb	r0, r0
    fa98:	f88d 0007 	strb.w	r0, [sp, #7]
      if (__a < __b)
    fa9c:	42a8      	cmp	r0, r5
    fa9e:	d80e      	bhi.n	fabe <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x76>
      return __a;
    faa0:	f10d 0306 	add.w	r3, sp, #6
}
    faa4:	7818      	ldrb	r0, [r3, #0]
    faa6:	b002      	add	sp, #8
    faa8:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(op_code != nullptr);
    faaa:	f000 fb5b 	bl	10164 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    faae:	2000      	movs	r0, #0
    fab0:	e7da      	b.n	fa68 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    fab2:	2000      	movs	r0, #0
    fab4:	e7dc      	b.n	fa70 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    fab6:	2000      	movs	r0, #0
    fab8:	e7e9      	b.n	fa8e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    faba:	2000      	movs	r0, #0
    fabc:	e7eb      	b.n	fa96 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>
	return __b;
    fabe:	f10d 0307 	add.w	r3, sp, #7
    fac2:	e7ef      	b.n	faa4 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5c>

0000fac4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    fac4:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    fac6:	b108      	cbz	r0, facc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x8>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
    fac8:	6800      	ldr	r0, [r0, #0]
    faca:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    facc:	f000 fb4a 	bl	10164 <abort>

0000fad0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fad0:	b108      	cbz	r0, fad6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x6>
    fad2:	6800      	ldr	r0, [r0, #0]
    fad4:	4770      	bx	lr
}
    fad6:	4770      	bx	lr

0000fad8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    fad8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    fada:	b108      	cbz	r0, fae0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
}
    fadc:	6800      	ldr	r0, [r0, #0]
    fade:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    fae0:	f000 fb40 	bl	10164 <abort>

0000fae4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fae4:	b108      	cbz	r0, faea <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x6>
    fae6:	6800      	ldr	r0, [r0, #0]
    fae8:	4770      	bx	lr
}
    faea:	4770      	bx	lr

0000faec <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
}
    faec:	4770      	bx	lr

0000faee <_ZN8gemmlowp6BitAndIiEET_S1_S1_>:
}
    faee:	4008      	ands	r0, r1
    faf0:	4770      	bx	lr

0000faf2 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>:
}
    faf2:	4108      	asrs	r0, r1
    faf4:	4770      	bx	lr

0000faf6 <_ZN8gemmlowp3AddIiEET_S1_S1_>:
}
    faf6:	4408      	add	r0, r1
    faf8:	4770      	bx	lr

0000fafa <_ZN8gemmlowp6BitNotIiEET_S1_>:
}
    fafa:	43c0      	mvns	r0, r0
    fafc:	4770      	bx	lr

0000fafe <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
    fafe:	b508      	push	{r3, lr}
  return a ? BitNot(zero) : zero;
    fb00:	b110      	cbz	r0, fb08 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_+0xa>
    fb02:	2000      	movs	r0, #0
    fb04:	f7ff fff9 	bl	fafa <_ZN8gemmlowp6BitNotIiEET_S1_>
}
    fb08:	bd08      	pop	{r3, pc}

0000fb0a <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
    fb0a:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a < b);
    fb0c:	4288      	cmp	r0, r1
    fb0e:	bfac      	ite	ge
    fb10:	2000      	movge	r0, #0
    fb12:	2001      	movlt	r0, #1
    fb14:	f7ff fff3 	bl	fafe <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
    fb18:	bd08      	pop	{r3, pc}

0000fb1a <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
    fb1a:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a > b);
    fb1c:	4288      	cmp	r0, r1
    fb1e:	bfd4      	ite	le
    fb20:	2000      	movle	r0, #0
    fb22:	2001      	movgt	r0, #1
    fb24:	f7ff ffeb 	bl	fafe <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
    fb28:	bd08      	pop	{r3, pc}

0000fb2a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    fb2a:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    fb2c:	b108      	cbz	r0, fb32 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x8>
}
    fb2e:	6800      	ldr	r0, [r0, #0]
    fb30:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    fb32:	f000 fb17 	bl	10164 <abort>

0000fb36 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fb36:	b108      	cbz	r0, fb3c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x6>
    fb38:	6800      	ldr	r0, [r0, #0]
    fb3a:	4770      	bx	lr
}
    fb3c:	4770      	bx	lr

0000fb3e <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    fb3e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    fb40:	b108      	cbz	r0, fb46 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
}
    fb42:	6800      	ldr	r0, [r0, #0]
    fb44:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    fb46:	f000 fb0d 	bl	10164 <abort>

0000fb4a <_ZN6tflite5micro13GetTensorDataIiEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fb4a:	b108      	cbz	r0, fb50 <_ZN6tflite5micro13GetTensorDataIiEEPT_P16TfLiteEvalTensor+0x6>
    fb4c:	6800      	ldr	r0, [r0, #0]
    fb4e:	4770      	bx	lr
}
    fb50:	4770      	bx	lr

0000fb52 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    fb52:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    fb54:	b108      	cbz	r0, fb5a <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x8>
}
    fb56:	6800      	ldr	r0, [r0, #0]
    fb58:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    fb5a:	f000 fb03 	bl	10164 <abort>

0000fb5e <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    fb5e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fb60:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fb62:	b113      	cbz	r3, fb6a <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
    fb64:	2120      	movs	r1, #32
    fb66:	4798      	blx	r3
}
    fb68:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fb6a:	f000 fafb 	bl	10164 <abort>

0000fb6e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    fb6e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fb70:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fb72:	b113      	cbz	r3, fb7a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
    fb74:	2120      	movs	r1, #32
    fb76:	4798      	blx	r3
}
    fb78:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fb7a:	f000 faf3 	bl	10164 <abort>

0000fb7e <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
    fb7e:	694a      	ldr	r2, [r1, #20]
    fb80:	4252      	negs	r2, r2
    fb82:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
    fb84:	698a      	ldr	r2, [r1, #24]
    fb86:	4252      	negs	r2, r2
    fb88:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
    fb8a:	69ca      	ldr	r2, [r1, #28]
    fb8c:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
    fb8e:	680a      	ldr	r2, [r1, #0]
    fb90:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
    fb92:	684a      	ldr	r2, [r1, #4]
    fb94:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
    fb96:	688a      	ldr	r2, [r1, #8]
    fb98:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
    fb9a:	68ca      	ldr	r2, [r1, #12]
    fb9c:	6182      	str	r2, [r0, #24]
  return op_params;
}
    fb9e:	4770      	bx	lr

0000fba0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
    fba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fba4:	b084      	sub	sp, #16
    fba6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    fba8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
    fbaa:	2a01      	cmp	r2, #1
    fbac:	d103      	bne.n	fbb6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
    fbae:	2000      	movs	r0, #0
}
    fbb0:	b004      	add	sp, #16
    fbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fbb6:	4604      	mov	r4, r0
    fbb8:	4688      	mov	r8, r1
    fbba:	461f      	mov	r7, r3
    double real_multiplier = 0.0;
    fbbc:	2200      	movs	r2, #0
    fbbe:	2300      	movs	r3, #0
    fbc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    fbc4:	ab02      	add	r3, sp, #8
    fbc6:	9301      	str	r3, [sp, #4]
    fbc8:	9600      	str	r6, [sp, #0]
    fbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fbcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fbce:	4639      	mov	r1, r7
    fbd0:	f7f1 fc8a 	bl	14e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    fbd4:	2800      	cmp	r0, #0
    fbd6:	d1eb      	bne.n	fbb0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
    fbd8:	1d2b      	adds	r3, r5, #4
    fbda:	462a      	mov	r2, r5
    fbdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    fbe0:	f7f9 f93e 	bl	8e60 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
    fbe4:	693b      	ldr	r3, [r7, #16]
    fbe6:	616b      	str	r3, [r5, #20]
    TFLITE_DCHECK(filter->params.zero_point == 0);
    fbe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fbea:	691b      	ldr	r3, [r3, #16]
    fbec:	b96b      	cbnz	r3, fc0a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
    data->filter_zero_point = filter->params.zero_point;
    fbee:	61ab      	str	r3, [r5, #24]
    data->output_zero_point = output->params.zero_point;
    fbf0:	6933      	ldr	r3, [r6, #16]
    fbf2:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
    fbf4:	f105 030c 	add.w	r3, r5, #12
    fbf8:	9300      	str	r3, [sp, #0]
    fbfa:	f105 0308 	add.w	r3, r5, #8
    fbfe:	4632      	mov	r2, r6
    fc00:	4641      	mov	r1, r8
    fc02:	4620      	mov	r0, r4
    fc04:	f7f9 fada 	bl	91bc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_max);
    fc08:	e7d2      	b.n	fbb0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    TFLITE_DCHECK(filter->params.zero_point == 0);
    fc0a:	f000 faab 	bl	10164 <abort>

0000fc0e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
    TfLiteFusedActivation activation) {
    fc0e:	b510      	push	{r4, lr}
    fc10:	4604      	mov	r4, r0
    fc12:	4608      	mov	r0, r1
  CalculateActivationRange(activation, &op_params.float_activation_min,
    fc14:	f104 0220 	add.w	r2, r4, #32
    fc18:	f104 011c 	add.w	r1, r4, #28
    fc1c:	f7f9 fca2 	bl	9564 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
}
    fc20:	4620      	mov	r0, r4
    fc22:	bd10      	pop	{r4, pc}

0000fc24 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
    fc24:	b570      	push	{r4, r5, r6, lr}
    fc26:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
    fc28:	b1b9      	cbz	r1, fc5a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    fc2a:	684d      	ldr	r5, [r1, #4]
    fc2c:	b1ad      	cbz	r5, fc5a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
    fc2e:	f855 6b04 	ldr.w	r6, [r5], #4
    size_ = dimensions_count;
    fc32:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
    fc34:	2e05      	cmp	r6, #5
    fc36:	dd07      	ble.n	fc48 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
      dims_pointer_ = new int32_t[dimensions_count];
    fc38:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    fc3c:	429e      	cmp	r6, r3
    fc3e:	d210      	bcs.n	fc62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3e>
    fc40:	00b0      	lsls	r0, r6, #2
    fc42:	f000 fa8d 	bl	10160 <_Znaj>
    fc46:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fc48:	6823      	ldr	r3, [r4, #0]
    fc4a:	2b05      	cmp	r3, #5
    fc4c:	dd0c      	ble.n	fc68 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x44>
    fc4e:	6860      	ldr	r0, [r4, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
    fc50:	00b2      	lsls	r2, r6, #2
    fc52:	4629      	mov	r1, r5
    fc54:	f000 fa9f 	bl	10196 <memcpy>
  }
    fc58:	e001      	b.n	fc5e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
  RuntimeShape() : size_(0) {}
    fc5a:	2300      	movs	r3, #0
    fc5c:	6023      	str	r3, [r4, #0]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
    fc5e:	4620      	mov	r0, r4
    fc60:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
    fc62:	f04f 30ff 	mov.w	r0, #4294967295
    fc66:	e7ec      	b.n	fc42 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fc68:	1d20      	adds	r0, r4, #4
    fc6a:	e7f1      	b.n	fc50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>

0000fc6c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    fc6c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fc6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fc70:	b113      	cbz	r3, fc78 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
    fc72:	2120      	movs	r1, #32
    fc74:	4798      	blx	r3
}
    fc76:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fc78:	f000 fa74 	bl	10164 <abort>

0000fc7c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    fc7c:	b148      	cbz	r0, fc92 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    fc7e:	68c3      	ldr	r3, [r0, #12]
    fc80:	8818      	ldrh	r0, [r3, #0]
    fc82:	f3c0 0008 	ubfx	r0, r0, #0, #9
    fc86:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    fc8a:	bf14      	ite	ne
    fc8c:	2000      	movne	r0, #0
    fc8e:	2001      	moveq	r0, #1
    fc90:	4770      	bx	lr
		return false;
    fc92:	2000      	movs	r0, #0
}
    fc94:	4770      	bx	lr

0000fc96 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc98:	4605      	mov	r5, r0
    fc9a:	460e      	mov	r6, r1
	__asm__ volatile(
    fc9c:	f04f 0320 	mov.w	r3, #32
    fca0:	f3ef 8711 	mrs	r7, BASEPRI
    fca4:	f383 8812 	msr	BASEPRI_MAX, r3
    fca8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    fcac:	f7fc f954 	bl	bf58 <z_impl_z_current_get>
    fcb0:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    fcb2:	4631      	mov	r1, r6
    fcb4:	4628      	mov	r0, r5
    fcb6:	f7ff f8db 	bl	ee70 <k_sys_fatal_error_handler>
	__asm__ volatile(
    fcba:	f387 8811 	msr	BASEPRI, r7
    fcbe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    fcc2:	4620      	mov	r0, r4
    fcc4:	f7f4 fabc 	bl	4240 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    fcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fcca <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    fcca:	6902      	ldr	r2, [r0, #16]
    fccc:	6943      	ldr	r3, [r0, #20]
    fcce:	431a      	orrs	r2, r3
    fcd0:	f012 0203 	ands.w	r2, r2, #3
    fcd4:	d10d      	bne.n	fcf2 <create_free_list+0x28>
	slab->free_list = NULL;
    fcd6:	2100      	movs	r1, #0
    fcd8:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    fcda:	e005      	b.n	fce8 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    fcdc:	6981      	ldr	r1, [r0, #24]
    fcde:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    fce0:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    fce2:	6901      	ldr	r1, [r0, #16]
    fce4:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    fce6:	3201      	adds	r2, #1
    fce8:	68c1      	ldr	r1, [r0, #12]
    fcea:	4291      	cmp	r1, r2
    fcec:	d8f6      	bhi.n	fcdc <create_free_list+0x12>
	return 0;
    fcee:	2000      	movs	r0, #0
    fcf0:	4770      	bx	lr
		return -EINVAL;
    fcf2:	f06f 0015 	mvn.w	r0, #21
}
    fcf6:	4770      	bx	lr

0000fcf8 <k_mem_slab_init>:
{
    fcf8:	b510      	push	{r4, lr}
    fcfa:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    fcfc:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    fcfe:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    fd00:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    fd02:	2300      	movs	r3, #0
    fd04:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    fd06:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
    fd08:	f7ff ffdf 	bl	fcca <create_free_list>
	if (rc < 0) {
    fd0c:	2800      	cmp	r0, #0
    fd0e:	db01      	blt.n	fd14 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    fd10:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    fd12:	6064      	str	r4, [r4, #4]
}
    fd14:	bd10      	pop	{r4, pc}

0000fd16 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    fd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd18:	4604      	mov	r4, r0
    fd1a:	460d      	mov	r5, r1
	__asm__ volatile(
    fd1c:	f04f 0320 	mov.w	r3, #32
    fd20:	f3ef 8611 	mrs	r6, BASEPRI
    fd24:	f383 8812 	msr	BASEPRI_MAX, r3
    fd28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    fd2c:	6983      	ldr	r3, [r0, #24]
    fd2e:	b163      	cbz	r3, fd4a <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    fd30:	682b      	ldr	r3, [r5, #0]
    fd32:	69a2      	ldr	r2, [r4, #24]
    fd34:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    fd36:	682b      	ldr	r3, [r5, #0]
    fd38:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    fd3a:	69e3      	ldr	r3, [r4, #28]
    fd3c:	3b01      	subs	r3, #1
    fd3e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    fd40:	f386 8811 	msr	BASEPRI, r6
    fd44:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    fd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd4a:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    fd4e:	f000 f93a 	bl	ffc6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    fd52:	2800      	cmp	r0, #0
    fd54:	d0ec      	beq.n	fd30 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    fd56:	682a      	ldr	r2, [r5, #0]
    fd58:	2100      	movs	r1, #0
    fd5a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    fd5e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    fd60:	f000 f896 	bl	fe90 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    fd64:	4631      	mov	r1, r6
    fd66:	4638      	mov	r0, r7
    fd68:	f7fb fd9a 	bl	b8a0 <z_reschedule>
			return;
    fd6c:	e7ec      	b.n	fd48 <k_mem_slab_free+0x32>

0000fd6e <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fd6e:	3207      	adds	r2, #7
    fd70:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    fd74:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    fd78:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    fd7c:	2300      	movs	r3, #0
    fd7e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    fd82:	1888      	adds	r0, r1, r2
    fd84:	4770      	bx	lr

0000fd86 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fd86:	f3ef 8005 	mrs	r0, IPSR
}
    fd8a:	3800      	subs	r0, #0
    fd8c:	bf18      	it	ne
    fd8e:	2001      	movne	r0, #1
    fd90:	4770      	bx	lr

0000fd92 <z_impl_k_thread_start>:
{
    fd92:	b508      	push	{r3, lr}
	z_sched_start(thread);
    fd94:	f7fb feae 	bl	baf4 <z_sched_start>
}
    fd98:	bd08      	pop	{r3, pc}

0000fd9a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    fd9a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    fd9c:	2400      	movs	r4, #0
    fd9e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    fda0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    fda2:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    fda4:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    fda6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    fda8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    fdaa:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    fdac:	bc10      	pop	{r4}
    fdae:	4770      	bx	lr

0000fdb0 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
    fdb0:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
    fdb2:	f7f3 fddb 	bl	396c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
    fdb6:	f7fe ffe4 	bl	ed82 <sys_clock_idle_exit>
}
    fdba:	bd08      	pop	{r3, pc}

0000fdbc <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
    fdbc:	b508      	push	{r3, lr}
	__asm__ volatile(
    fdbe:	f04f 0220 	mov.w	r2, #32
    fdc2:	f3ef 8311 	mrs	r3, BASEPRI
    fdc6:	f382 8812 	msr	BASEPRI_MAX, r2
    fdca:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
    fdce:	f7fb fbdb 	bl	b588 <pm_save_idle>
    fdd2:	e7f4      	b.n	fdbe <idle+0x2>

0000fdd4 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    fdd4:	4288      	cmp	r0, r1
    fdd6:	da00      	bge.n	fdda <new_prio_for_inheritance+0x6>
    fdd8:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    fdda:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    fdde:	db01      	blt.n	fde4 <new_prio_for_inheritance+0x10>
    fde0:	4608      	mov	r0, r1
    fde2:	4770      	bx	lr
    fde4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    fde8:	4770      	bx	lr

0000fdea <adjust_owner_prio>:
{
    fdea:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    fdec:	6880      	ldr	r0, [r0, #8]
    fdee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    fdf2:	428b      	cmp	r3, r1
    fdf4:	d101      	bne.n	fdfa <adjust_owner_prio+0x10>
	return false;
    fdf6:	2000      	movs	r0, #0
}
    fdf8:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    fdfa:	f7fb fec9 	bl	bb90 <z_set_prio>
    fdfe:	e7fb      	b.n	fdf8 <adjust_owner_prio+0xe>

0000fe00 <z_impl_k_mutex_init>:
{
    fe00:	4603      	mov	r3, r0
	mutex->owner = NULL;
    fe02:	2000      	movs	r0, #0
    fe04:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    fe06:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    fe08:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    fe0a:	605b      	str	r3, [r3, #4]
}
    fe0c:	4770      	bx	lr

0000fe0e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    fe0e:	b13a      	cbz	r2, fe20 <z_impl_k_sem_init+0x12>
    fe10:	428a      	cmp	r2, r1
    fe12:	d308      	bcc.n	fe26 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    fe14:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    fe16:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    fe18:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    fe1a:	6040      	str	r0, [r0, #4]
	return 0;
    fe1c:	2000      	movs	r0, #0
    fe1e:	4770      	bx	lr
		return -EINVAL;
    fe20:	f06f 0015 	mvn.w	r0, #21
    fe24:	4770      	bx	lr
    fe26:	f06f 0015 	mvn.w	r0, #21
}
    fe2a:	4770      	bx	lr

0000fe2c <thread_active_elsewhere>:
}
    fe2c:	2000      	movs	r0, #0
    fe2e:	4770      	bx	lr

0000fe30 <pended_on_thread>:
}
    fe30:	6880      	ldr	r0, [r0, #8]
    fe32:	4770      	bx	lr

0000fe34 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    fe34:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    fe38:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    fe3c:	4283      	cmp	r3, r0
    fe3e:	d001      	beq.n	fe44 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    fe40:	1ac0      	subs	r0, r0, r3
    fe42:	4770      	bx	lr
	return 0;
    fe44:	2000      	movs	r0, #0
}
    fe46:	4770      	bx	lr

0000fe48 <z_reschedule_irqlock>:
{
    fe48:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fe4a:	4603      	mov	r3, r0
    fe4c:	b920      	cbnz	r0, fe58 <z_reschedule_irqlock+0x10>
    fe4e:	f3ef 8205 	mrs	r2, IPSR
    fe52:	b942      	cbnz	r2, fe66 <z_reschedule_irqlock+0x1e>
    fe54:	2201      	movs	r2, #1
    fe56:	e000      	b.n	fe5a <z_reschedule_irqlock+0x12>
    fe58:	2200      	movs	r2, #0
	if (resched(key)) {
    fe5a:	b932      	cbnz	r2, fe6a <z_reschedule_irqlock+0x22>
	__asm__ volatile(
    fe5c:	f383 8811 	msr	BASEPRI, r3
    fe60:	f3bf 8f6f 	isb	sy
}
    fe64:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fe66:	2200      	movs	r2, #0
    fe68:	e7f7      	b.n	fe5a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    fe6a:	4618      	mov	r0, r3
    fe6c:	f7f3 ff7e 	bl	3d6c <arch_swap>
	return ret;
    fe70:	e7f8      	b.n	fe64 <z_reschedule_irqlock+0x1c>

0000fe72 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    fe72:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    fe74:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    fe76:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    fe78:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fe7a:	2300      	movs	r3, #0
    fe7c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    fe7e:	604b      	str	r3, [r1, #4]
}
    fe80:	4770      	bx	lr

0000fe82 <z_priq_dumb_best>:
{
    fe82:	4603      	mov	r3, r0
	return list->head == list;
    fe84:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe86:	4283      	cmp	r3, r0
    fe88:	d000      	beq.n	fe8c <z_priq_dumb_best+0xa>
}
    fe8a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    fe8c:	2000      	movs	r0, #0
	return thread;
    fe8e:	e7fc      	b.n	fe8a <z_priq_dumb_best+0x8>

0000fe90 <z_ready_thread>:
{
    fe90:	b538      	push	{r3, r4, r5, lr}
    fe92:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    fe94:	2300      	movs	r3, #0
	__asm__ volatile(
    fe96:	f04f 0220 	mov.w	r2, #32
    fe9a:	f3ef 8511 	mrs	r5, BASEPRI
    fe9e:	f382 8812 	msr	BASEPRI_MAX, r2
    fea2:	f3bf 8f6f 	isb	sy
    fea6:	e007      	b.n	feb8 <z_ready_thread+0x28>
			ready_thread(thread);
    fea8:	4620      	mov	r0, r4
    feaa:	f7fb fde3 	bl	ba74 <ready_thread>
	__asm__ volatile(
    feae:	f385 8811 	msr	BASEPRI, r5
    feb2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    feb6:	2301      	movs	r3, #1
    feb8:	b92b      	cbnz	r3, fec6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    feba:	4620      	mov	r0, r4
    febc:	f7ff ffb6 	bl	fe2c <thread_active_elsewhere>
    fec0:	2800      	cmp	r0, #0
    fec2:	d1f4      	bne.n	feae <z_ready_thread+0x1e>
    fec4:	e7f0      	b.n	fea8 <z_ready_thread+0x18>
}
    fec6:	bd38      	pop	{r3, r4, r5, pc}

0000fec8 <z_thread_timeout>:
{
    fec8:	b570      	push	{r4, r5, r6, lr}
    feca:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    fecc:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    fed0:	2300      	movs	r3, #0
	__asm__ volatile(
    fed2:	f04f 0220 	mov.w	r2, #32
    fed6:	f3ef 8611 	mrs	r6, BASEPRI
    feda:	f382 8812 	msr	BASEPRI_MAX, r2
    fede:	f3bf 8f6f 	isb	sy
    fee2:	e019      	b.n	ff18 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    fee4:	4628      	mov	r0, r5
    fee6:	f7ff ffa3 	bl	fe30 <pended_on_thread>
    feea:	4629      	mov	r1, r5
    feec:	f7ff ffc1 	bl	fe72 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fef0:	7b6b      	ldrb	r3, [r5, #13]
    fef2:	f023 0302 	bic.w	r3, r3, #2
    fef6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    fef8:	2300      	movs	r3, #0
    fefa:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fefc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ff00:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    ff04:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    ff08:	4628      	mov	r0, r5
    ff0a:	f7fb fdb3 	bl	ba74 <ready_thread>
	__asm__ volatile(
    ff0e:	f386 8811 	msr	BASEPRI, r6
    ff12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ff16:	2301      	movs	r3, #1
    ff18:	b94b      	cbnz	r3, ff2e <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    ff1a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    ff1e:	f013 0f28 	tst.w	r3, #40	; 0x28
    ff22:	d1f4      	bne.n	ff0e <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    ff24:	f854 3c10 	ldr.w	r3, [r4, #-16]
    ff28:	2b00      	cmp	r3, #0
    ff2a:	d1db      	bne.n	fee4 <z_thread_timeout+0x1c>
    ff2c:	e7e6      	b.n	fefc <z_thread_timeout+0x34>
}
    ff2e:	bd70      	pop	{r4, r5, r6, pc}

0000ff30 <add_to_waitq_locked>:
{
    ff30:	b570      	push	{r4, r5, r6, lr}
    ff32:	4605      	mov	r5, r0
    ff34:	460e      	mov	r6, r1
	unready_thread(thread);
    ff36:	f7fb fdfb 	bl	bb30 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    ff3a:	7b6b      	ldrb	r3, [r5, #13]
    ff3c:	f043 0302 	orr.w	r3, r3, #2
    ff40:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    ff42:	b1b6      	cbz	r6, ff72 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    ff44:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    ff46:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff48:	42a6      	cmp	r6, r4
    ff4a:	d019      	beq.n	ff80 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ff4c:	b164      	cbz	r4, ff68 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ff4e:	4621      	mov	r1, r4
    ff50:	4628      	mov	r0, r5
    ff52:	f7ff ff6f 	bl	fe34 <z_sched_prio_cmp>
    ff56:	2800      	cmp	r0, #0
    ff58:	dc0c      	bgt.n	ff74 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ff5a:	b12c      	cbz	r4, ff68 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    ff5c:	6873      	ldr	r3, [r6, #4]
    ff5e:	429c      	cmp	r4, r3
    ff60:	d002      	beq.n	ff68 <add_to_waitq_locked+0x38>
    ff62:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ff64:	2c00      	cmp	r4, #0
    ff66:	d1f1      	bne.n	ff4c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    ff68:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    ff6a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    ff6c:	606b      	str	r3, [r5, #4]
	tail->next = node;
    ff6e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    ff70:	6075      	str	r5, [r6, #4]
}
    ff72:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    ff74:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    ff76:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ff78:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ff7a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ff7c:	6065      	str	r5, [r4, #4]
}
    ff7e:	e7f8      	b.n	ff72 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ff80:	2400      	movs	r4, #0
    ff82:	e7e3      	b.n	ff4c <add_to_waitq_locked+0x1c>

0000ff84 <pend>:
{
    ff84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff88:	4605      	mov	r5, r0
    ff8a:	460f      	mov	r7, r1
    ff8c:	4691      	mov	r9, r2
    ff8e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    ff90:	2400      	movs	r4, #0
	__asm__ volatile(
    ff92:	f04f 0320 	mov.w	r3, #32
    ff96:	f3ef 8611 	mrs	r6, BASEPRI
    ff9a:	f383 8812 	msr	BASEPRI_MAX, r3
    ff9e:	f3bf 8f6f 	isb	sy
    ffa2:	b94c      	cbnz	r4, ffb8 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    ffa4:	4639      	mov	r1, r7
    ffa6:	4628      	mov	r0, r5
    ffa8:	f7ff ffc2 	bl	ff30 <add_to_waitq_locked>
	__asm__ volatile(
    ffac:	f386 8811 	msr	BASEPRI, r6
    ffb0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ffb4:	2401      	movs	r4, #1
    ffb6:	e7f4      	b.n	ffa2 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    ffb8:	464a      	mov	r2, r9
    ffba:	4643      	mov	r3, r8
    ffbc:	4628      	mov	r0, r5
    ffbe:	f7fb fc0d 	bl	b7dc <add_thread_timeout>
}
    ffc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ffc6 <z_unpend_first_thread>:
{
    ffc6:	b570      	push	{r4, r5, r6, lr}
    ffc8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    ffca:	2300      	movs	r3, #0
	__asm__ volatile(
    ffcc:	f04f 0220 	mov.w	r2, #32
    ffd0:	f3ef 8511 	mrs	r5, BASEPRI
    ffd4:	f382 8812 	msr	BASEPRI_MAX, r2
    ffd8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    ffdc:	461c      	mov	r4, r3
    ffde:	e013      	b.n	10008 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ffe0:	f7ff ff26 	bl	fe30 <pended_on_thread>
    ffe4:	4621      	mov	r1, r4
    ffe6:	f7ff ff44 	bl	fe72 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ffea:	7b63      	ldrb	r3, [r4, #13]
    ffec:	f023 0302 	bic.w	r3, r3, #2
    fff0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    fff2:	2300      	movs	r3, #0
    fff4:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    fff6:	f104 0018 	add.w	r0, r4, #24
    fffa:	f000 f826 	bl	1004a <z_abort_timeout>
	__asm__ volatile(
    fffe:	f385 8811 	msr	BASEPRI, r5
   10002:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   10006:	2301      	movs	r3, #1
   10008:	b933      	cbnz	r3, 10018 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   1000a:	4630      	mov	r0, r6
   1000c:	f7ff ff39 	bl	fe82 <z_priq_dumb_best>
		if (thread != NULL) {
   10010:	4604      	mov	r4, r0
   10012:	2800      	cmp	r0, #0
   10014:	d1e4      	bne.n	ffe0 <z_unpend_first_thread+0x1a>
   10016:	e7f2      	b.n	fffe <z_unpend_first_thread+0x38>
}
   10018:	4620      	mov	r0, r4
   1001a:	bd70      	pop	{r4, r5, r6, pc}

0001001c <remove_timeout>:
{
   1001c:	b538      	push	{r3, r4, r5, lr}
   1001e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   10020:	f7fb ffec 	bl	bffc <next>
   10024:	b148      	cbz	r0, 1003a <remove_timeout+0x1e>
   10026:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   10028:	6920      	ldr	r0, [r4, #16]
   1002a:	6965      	ldr	r5, [r4, #20]
   1002c:	6913      	ldr	r3, [r2, #16]
   1002e:	6951      	ldr	r1, [r2, #20]
   10030:	181b      	adds	r3, r3, r0
   10032:	eb45 0101 	adc.w	r1, r5, r1
   10036:	6113      	str	r3, [r2, #16]
   10038:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1003a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1003c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1003e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10040:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10042:	2300      	movs	r3, #0
   10044:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   10046:	6063      	str	r3, [r4, #4]
}
   10048:	bd38      	pop	{r3, r4, r5, pc}

0001004a <z_abort_timeout>:
{
   1004a:	b570      	push	{r4, r5, r6, lr}
   1004c:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1004e:	2300      	movs	r3, #0
	__asm__ volatile(
   10050:	f04f 0220 	mov.w	r2, #32
   10054:	f3ef 8611 	mrs	r6, BASEPRI
   10058:	f382 8812 	msr	BASEPRI_MAX, r2
   1005c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   10060:	f06f 0015 	mvn.w	r0, #21
   10064:	e008      	b.n	10078 <z_abort_timeout+0x2e>
			remove_timeout(to);
   10066:	4620      	mov	r0, r4
   10068:	f7ff ffd8 	bl	1001c <remove_timeout>
			ret = 0;
   1006c:	4628      	mov	r0, r5
	__asm__ volatile(
   1006e:	f386 8811 	msr	BASEPRI, r6
   10072:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   10076:	2301      	movs	r3, #1
   10078:	461d      	mov	r5, r3
   1007a:	b91b      	cbnz	r3, 10084 <z_abort_timeout+0x3a>
	return node->next != NULL;
   1007c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1007e:	2b00      	cmp	r3, #0
   10080:	d1f1      	bne.n	10066 <z_abort_timeout+0x1c>
   10082:	e7f4      	b.n	1006e <z_abort_timeout+0x24>
}
   10084:	bd70      	pop	{r4, r5, r6, pc}

00010086 <z_get_next_timeout_expiry>:
{
   10086:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   10088:	2300      	movs	r3, #0
	__asm__ volatile(
   1008a:	f04f 0220 	mov.w	r2, #32
   1008e:	f3ef 8411 	mrs	r4, BASEPRI
   10092:	f382 8812 	msr	BASEPRI_MAX, r2
   10096:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1009a:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   1009e:	b93b      	cbnz	r3, 100b0 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   100a0:	f7fb ffc4 	bl	c02c <next_timeout>
	__asm__ volatile(
   100a4:	f384 8811 	msr	BASEPRI, r4
   100a8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   100ac:	2301      	movs	r3, #1
   100ae:	e7f6      	b.n	1009e <z_get_next_timeout_expiry+0x18>
}
   100b0:	bd10      	pop	{r4, pc}

000100b2 <z_set_timeout_expiry>:
{
   100b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100b4:	4606      	mov	r6, r0
   100b6:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   100b8:	2300      	movs	r3, #0
	__asm__ volatile(
   100ba:	f04f 0220 	mov.w	r2, #32
   100be:	f3ef 8511 	mrs	r5, BASEPRI
   100c2:	f382 8812 	msr	BASEPRI_MAX, r2
   100c6:	f3bf 8f6f 	isb	sy
   100ca:	e00a      	b.n	100e2 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   100cc:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   100ce:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   100d2:	2801      	cmp	r0, #1
   100d4:	dd00      	ble.n	100d8 <z_set_timeout_expiry+0x26>
   100d6:	b97c      	cbnz	r4, 100f8 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   100d8:	f385 8811 	msr	BASEPRI, r5
   100dc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   100e0:	2301      	movs	r3, #1
   100e2:	461c      	mov	r4, r3
   100e4:	b97b      	cbnz	r3, 10106 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   100e6:	f7fb ffa1 	bl	c02c <next_timeout>
			      || (ticks <= next_to);
   100ea:	f1b0 3fff 	cmp.w	r0, #4294967295
   100ee:	d0ed      	beq.n	100cc <z_set_timeout_expiry+0x1a>
   100f0:	42b0      	cmp	r0, r6
   100f2:	dbec      	blt.n	100ce <z_set_timeout_expiry+0x1c>
   100f4:	2401      	movs	r4, #1
   100f6:	e7ea      	b.n	100ce <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   100f8:	4639      	mov	r1, r7
   100fa:	42b0      	cmp	r0, r6
   100fc:	bfa8      	it	ge
   100fe:	4630      	movge	r0, r6
   10100:	f7f5 fb24 	bl	574c <sys_clock_set_timeout>
   10104:	e7e8      	b.n	100d8 <z_set_timeout_expiry+0x26>
}
   10106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010108 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   10108:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1010a:	f7fc f8c1 	bl	c290 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1010e:	bd08      	pop	{r3, pc}

00010110 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   10110:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   10112:	f7fc f8bd 	bl	c290 <sys_clock_tick_get>
}
   10116:	bd08      	pop	{r3, pc}

00010118 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   10118:	b900      	cbnz	r0, 1011c <z_impl_k_busy_wait+0x4>
   1011a:	4770      	bx	lr
{
   1011c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1011e:	f7f3 fb7b 	bl	3818 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   10122:	bd08      	pop	{r3, pc}

00010124 <k_heap_init>:
{
   10124:	b510      	push	{r4, lr}
   10126:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1012a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1012c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1012e:	f7fd ff9a 	bl	e066 <sys_heap_init>
}
   10132:	bd10      	pop	{r4, pc}

00010134 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   10134:	4770      	bx	lr

00010136 <_ZdlPv>:
   10136:	f7fc bb3d 	b.w	c7b4 <free>

0001013a <_ZdaPv>:
   1013a:	f7ff bffc 	b.w	10136 <_ZdlPv>

0001013e <_Znwj>:
   1013e:	2801      	cmp	r0, #1
   10140:	bf38      	it	cc
   10142:	2001      	movcc	r0, #1
   10144:	b510      	push	{r4, lr}
   10146:	4604      	mov	r4, r0
   10148:	4620      	mov	r0, r4
   1014a:	f7fc fb2b 	bl	c7a4 <malloc>
   1014e:	b930      	cbnz	r0, 1015e <_Znwj+0x20>
   10150:	f7fc fa4e 	bl	c5f0 <_ZSt15get_new_handlerv>
   10154:	b908      	cbnz	r0, 1015a <_Znwj+0x1c>
   10156:	f000 f805 	bl	10164 <abort>
   1015a:	4780      	blx	r0
   1015c:	e7f4      	b.n	10148 <_Znwj+0xa>
   1015e:	bd10      	pop	{r4, pc}

00010160 <_Znaj>:
   10160:	f7ff bfed 	b.w	1013e <_Znwj>

00010164 <abort>:
   10164:	2006      	movs	r0, #6
   10166:	b508      	push	{r3, lr}
   10168:	f7fd f864 	bl	d234 <raise>
   1016c:	2001      	movs	r0, #1
   1016e:	f7f4 fa4b 	bl	4608 <_exit>

00010172 <atoi>:
   10172:	220a      	movs	r2, #10
   10174:	2100      	movs	r1, #0
   10176:	f7fd b919 	b.w	d3ac <strtol>

0001017a <memchr>:
   1017a:	b2c9      	uxtb	r1, r1
   1017c:	4603      	mov	r3, r0
   1017e:	4402      	add	r2, r0
   10180:	b510      	push	{r4, lr}
   10182:	4293      	cmp	r3, r2
   10184:	4618      	mov	r0, r3
   10186:	d101      	bne.n	1018c <memchr+0x12>
   10188:	2000      	movs	r0, #0
   1018a:	e003      	b.n	10194 <memchr+0x1a>
   1018c:	7804      	ldrb	r4, [r0, #0]
   1018e:	3301      	adds	r3, #1
   10190:	428c      	cmp	r4, r1
   10192:	d1f6      	bne.n	10182 <memchr+0x8>
   10194:	bd10      	pop	{r4, pc}

00010196 <memcpy>:
   10196:	440a      	add	r2, r1
   10198:	1e43      	subs	r3, r0, #1
   1019a:	4291      	cmp	r1, r2
   1019c:	d100      	bne.n	101a0 <memcpy+0xa>
   1019e:	4770      	bx	lr
   101a0:	b510      	push	{r4, lr}
   101a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   101a6:	4291      	cmp	r1, r2
   101a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   101ac:	d1f9      	bne.n	101a2 <memcpy+0xc>
   101ae:	bd10      	pop	{r4, pc}

000101b0 <memset>:
   101b0:	4402      	add	r2, r0
   101b2:	4603      	mov	r3, r0
   101b4:	4293      	cmp	r3, r2
   101b6:	d100      	bne.n	101ba <memset+0xa>
   101b8:	4770      	bx	lr
   101ba:	f803 1b01 	strb.w	r1, [r3], #1
   101be:	e7f9      	b.n	101b4 <memset+0x4>

000101c0 <__sfputc_r>:
   101c0:	6893      	ldr	r3, [r2, #8]
   101c2:	3b01      	subs	r3, #1
   101c4:	2b00      	cmp	r3, #0
   101c6:	6093      	str	r3, [r2, #8]
   101c8:	b410      	push	{r4}
   101ca:	da07      	bge.n	101dc <__sfputc_r+0x1c>
   101cc:	6994      	ldr	r4, [r2, #24]
   101ce:	42a3      	cmp	r3, r4
   101d0:	db01      	blt.n	101d6 <__sfputc_r+0x16>
   101d2:	290a      	cmp	r1, #10
   101d4:	d102      	bne.n	101dc <__sfputc_r+0x1c>
   101d6:	bc10      	pop	{r4}
   101d8:	f7fd b908 	b.w	d3ec <__swbuf_r>
   101dc:	6813      	ldr	r3, [r2, #0]
   101de:	1c58      	adds	r0, r3, #1
   101e0:	6010      	str	r0, [r2, #0]
   101e2:	4608      	mov	r0, r1
   101e4:	7019      	strb	r1, [r3, #0]
   101e6:	bc10      	pop	{r4}
   101e8:	4770      	bx	lr

000101ea <__sfputs_r>:
   101ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101ec:	4606      	mov	r6, r0
   101ee:	460f      	mov	r7, r1
   101f0:	4614      	mov	r4, r2
   101f2:	18d5      	adds	r5, r2, r3
   101f4:	42ac      	cmp	r4, r5
   101f6:	d101      	bne.n	101fc <__sfputs_r+0x12>
   101f8:	2000      	movs	r0, #0
   101fa:	e007      	b.n	1020c <__sfputs_r+0x22>
   101fc:	463a      	mov	r2, r7
   101fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   10202:	4630      	mov	r0, r6
   10204:	f7ff ffdc 	bl	101c0 <__sfputc_r>
   10208:	1c43      	adds	r3, r0, #1
   1020a:	d1f3      	bne.n	101f4 <__sfputs_r+0xa>
   1020c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001020e <__cvt>:
   1020e:	2b00      	cmp	r3, #0
   10210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10214:	461f      	mov	r7, r3
   10216:	b088      	sub	sp, #32
   10218:	bfb4      	ite	lt
   1021a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   1021e:	2300      	movge	r3, #0
   10220:	4614      	mov	r4, r2
   10222:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10224:	bfbc      	itt	lt
   10226:	461f      	movlt	r7, r3
   10228:	232d      	movlt	r3, #45	; 0x2d
   1022a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1022c:	7013      	strb	r3, [r2, #0]
   1022e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10230:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   10234:	f023 0820 	bic.w	r8, r3, #32
   10238:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1023c:	d005      	beq.n	1024a <__cvt+0x3c>
   1023e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   10242:	d100      	bne.n	10246 <__cvt+0x38>
   10244:	3501      	adds	r5, #1
   10246:	2302      	movs	r3, #2
   10248:	e000      	b.n	1024c <__cvt+0x3e>
   1024a:	2303      	movs	r3, #3
   1024c:	aa07      	add	r2, sp, #28
   1024e:	9204      	str	r2, [sp, #16]
   10250:	aa06      	add	r2, sp, #24
   10252:	e9cd 3500 	strd	r3, r5, [sp]
   10256:	e9cd a202 	strd	sl, r2, [sp, #8]
   1025a:	463b      	mov	r3, r7
   1025c:	4622      	mov	r2, r4
   1025e:	f7f1 f99b 	bl	1598 <_dtoa_r>
   10262:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   10266:	4606      	mov	r6, r0
   10268:	d102      	bne.n	10270 <__cvt+0x62>
   1026a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1026c:	07db      	lsls	r3, r3, #31
   1026e:	d522      	bpl.n	102b6 <__cvt+0xa8>
   10270:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   10274:	eb06 0905 	add.w	r9, r6, r5
   10278:	d110      	bne.n	1029c <__cvt+0x8e>
   1027a:	7833      	ldrb	r3, [r6, #0]
   1027c:	2b30      	cmp	r3, #48	; 0x30
   1027e:	d10a      	bne.n	10296 <__cvt+0x88>
   10280:	2200      	movs	r2, #0
   10282:	2300      	movs	r3, #0
   10284:	4620      	mov	r0, r4
   10286:	4639      	mov	r1, r7
   10288:	f7f0 fb8a 	bl	9a0 <__aeabi_dcmpeq>
   1028c:	b918      	cbnz	r0, 10296 <__cvt+0x88>
   1028e:	f1c5 0501 	rsb	r5, r5, #1
   10292:	f8ca 5000 	str.w	r5, [sl]
   10296:	f8da 3000 	ldr.w	r3, [sl]
   1029a:	4499      	add	r9, r3
   1029c:	2200      	movs	r2, #0
   1029e:	2300      	movs	r3, #0
   102a0:	4620      	mov	r0, r4
   102a2:	4639      	mov	r1, r7
   102a4:	f7f0 fb7c 	bl	9a0 <__aeabi_dcmpeq>
   102a8:	b108      	cbz	r0, 102ae <__cvt+0xa0>
   102aa:	f8cd 901c 	str.w	r9, [sp, #28]
   102ae:	2230      	movs	r2, #48	; 0x30
   102b0:	9b07      	ldr	r3, [sp, #28]
   102b2:	454b      	cmp	r3, r9
   102b4:	d307      	bcc.n	102c6 <__cvt+0xb8>
   102b6:	9b07      	ldr	r3, [sp, #28]
   102b8:	4630      	mov	r0, r6
   102ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
   102bc:	1b9b      	subs	r3, r3, r6
   102be:	6013      	str	r3, [r2, #0]
   102c0:	b008      	add	sp, #32
   102c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   102c6:	1c59      	adds	r1, r3, #1
   102c8:	9107      	str	r1, [sp, #28]
   102ca:	701a      	strb	r2, [r3, #0]
   102cc:	e7f0      	b.n	102b0 <__cvt+0xa2>

000102ce <__exponent>:
   102ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   102d0:	2900      	cmp	r1, #0
   102d2:	4603      	mov	r3, r0
   102d4:	bfb8      	it	lt
   102d6:	4249      	neglt	r1, r1
   102d8:	f803 2b02 	strb.w	r2, [r3], #2
   102dc:	bfb4      	ite	lt
   102de:	222d      	movlt	r2, #45	; 0x2d
   102e0:	222b      	movge	r2, #43	; 0x2b
   102e2:	2909      	cmp	r1, #9
   102e4:	7042      	strb	r2, [r0, #1]
   102e6:	dd2a      	ble.n	1033e <__exponent+0x70>
   102e8:	f10d 0407 	add.w	r4, sp, #7
   102ec:	270a      	movs	r7, #10
   102ee:	46a4      	mov	ip, r4
   102f0:	460a      	mov	r2, r1
   102f2:	46a6      	mov	lr, r4
   102f4:	3c01      	subs	r4, #1
   102f6:	2a63      	cmp	r2, #99	; 0x63
   102f8:	fb91 f6f7 	sdiv	r6, r1, r7
   102fc:	fb07 1516 	mls	r5, r7, r6, r1
   10300:	4631      	mov	r1, r6
   10302:	f105 0530 	add.w	r5, r5, #48	; 0x30
   10306:	f80e 5c01 	strb.w	r5, [lr, #-1]
   1030a:	dcf1      	bgt.n	102f0 <__exponent+0x22>
   1030c:	3130      	adds	r1, #48	; 0x30
   1030e:	f1ae 0502 	sub.w	r5, lr, #2
   10312:	f804 1c01 	strb.w	r1, [r4, #-1]
   10316:	1c44      	adds	r4, r0, #1
   10318:	4629      	mov	r1, r5
   1031a:	4561      	cmp	r1, ip
   1031c:	d30a      	bcc.n	10334 <__exponent+0x66>
   1031e:	f10d 0209 	add.w	r2, sp, #9
   10322:	eba2 020e 	sub.w	r2, r2, lr
   10326:	4565      	cmp	r5, ip
   10328:	bf88      	it	hi
   1032a:	2200      	movhi	r2, #0
   1032c:	4413      	add	r3, r2
   1032e:	1a18      	subs	r0, r3, r0
   10330:	b003      	add	sp, #12
   10332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10334:	f811 2b01 	ldrb.w	r2, [r1], #1
   10338:	f804 2f01 	strb.w	r2, [r4, #1]!
   1033c:	e7ed      	b.n	1031a <__exponent+0x4c>
   1033e:	2330      	movs	r3, #48	; 0x30
   10340:	3130      	adds	r1, #48	; 0x30
   10342:	7083      	strb	r3, [r0, #2]
   10344:	1d03      	adds	r3, r0, #4
   10346:	70c1      	strb	r1, [r0, #3]
   10348:	e7f1      	b.n	1032e <__exponent+0x60>

0001034a <_printf_common>:
   1034a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1034e:	4616      	mov	r6, r2
   10350:	4699      	mov	r9, r3
   10352:	688a      	ldr	r2, [r1, #8]
   10354:	4607      	mov	r7, r0
   10356:	690b      	ldr	r3, [r1, #16]
   10358:	460c      	mov	r4, r1
   1035a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1035e:	4293      	cmp	r3, r2
   10360:	bfb8      	it	lt
   10362:	4613      	movlt	r3, r2
   10364:	6033      	str	r3, [r6, #0]
   10366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1036a:	b10a      	cbz	r2, 10370 <_printf_common+0x26>
   1036c:	3301      	adds	r3, #1
   1036e:	6033      	str	r3, [r6, #0]
   10370:	6823      	ldr	r3, [r4, #0]
   10372:	0699      	lsls	r1, r3, #26
   10374:	bf42      	ittt	mi
   10376:	6833      	ldrmi	r3, [r6, #0]
   10378:	3302      	addmi	r3, #2
   1037a:	6033      	strmi	r3, [r6, #0]
   1037c:	6825      	ldr	r5, [r4, #0]
   1037e:	f015 0506 	ands.w	r5, r5, #6
   10382:	d106      	bne.n	10392 <_printf_common+0x48>
   10384:	f104 0a19 	add.w	sl, r4, #25
   10388:	68e3      	ldr	r3, [r4, #12]
   1038a:	6832      	ldr	r2, [r6, #0]
   1038c:	1a9b      	subs	r3, r3, r2
   1038e:	42ab      	cmp	r3, r5
   10390:	dc29      	bgt.n	103e6 <_printf_common+0x9c>
   10392:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   10396:	1e13      	subs	r3, r2, #0
   10398:	6822      	ldr	r2, [r4, #0]
   1039a:	bf18      	it	ne
   1039c:	2301      	movne	r3, #1
   1039e:	0692      	lsls	r2, r2, #26
   103a0:	d42e      	bmi.n	10400 <_printf_common+0xb6>
   103a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   103a6:	4649      	mov	r1, r9
   103a8:	4638      	mov	r0, r7
   103aa:	47c0      	blx	r8
   103ac:	3001      	adds	r0, #1
   103ae:	d021      	beq.n	103f4 <_printf_common+0xaa>
   103b0:	6823      	ldr	r3, [r4, #0]
   103b2:	341a      	adds	r4, #26
   103b4:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   103b8:	f003 0306 	and.w	r3, r3, #6
   103bc:	6832      	ldr	r2, [r6, #0]
   103be:	2600      	movs	r6, #0
   103c0:	2b04      	cmp	r3, #4
   103c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
   103c6:	bf08      	it	eq
   103c8:	1aad      	subeq	r5, r5, r2
   103ca:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   103ce:	bf14      	ite	ne
   103d0:	2500      	movne	r5, #0
   103d2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   103d6:	4293      	cmp	r3, r2
   103d8:	bfc4      	itt	gt
   103da:	1a9b      	subgt	r3, r3, r2
   103dc:	18ed      	addgt	r5, r5, r3
   103de:	42b5      	cmp	r5, r6
   103e0:	d11a      	bne.n	10418 <_printf_common+0xce>
   103e2:	2000      	movs	r0, #0
   103e4:	e008      	b.n	103f8 <_printf_common+0xae>
   103e6:	2301      	movs	r3, #1
   103e8:	4652      	mov	r2, sl
   103ea:	4649      	mov	r1, r9
   103ec:	4638      	mov	r0, r7
   103ee:	47c0      	blx	r8
   103f0:	3001      	adds	r0, #1
   103f2:	d103      	bne.n	103fc <_printf_common+0xb2>
   103f4:	f04f 30ff 	mov.w	r0, #4294967295
   103f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   103fc:	3501      	adds	r5, #1
   103fe:	e7c3      	b.n	10388 <_printf_common+0x3e>
   10400:	18e1      	adds	r1, r4, r3
   10402:	1c5a      	adds	r2, r3, #1
   10404:	2030      	movs	r0, #48	; 0x30
   10406:	3302      	adds	r3, #2
   10408:	4422      	add	r2, r4
   1040a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1040e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   10412:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   10416:	e7c4      	b.n	103a2 <_printf_common+0x58>
   10418:	2301      	movs	r3, #1
   1041a:	4622      	mov	r2, r4
   1041c:	4649      	mov	r1, r9
   1041e:	4638      	mov	r0, r7
   10420:	47c0      	blx	r8
   10422:	3001      	adds	r0, #1
   10424:	d0e6      	beq.n	103f4 <_printf_common+0xaa>
   10426:	3601      	adds	r6, #1
   10428:	e7d9      	b.n	103de <_printf_common+0x94>

0001042a <_raise_r>:
   1042a:	291f      	cmp	r1, #31
   1042c:	b538      	push	{r3, r4, r5, lr}
   1042e:	4604      	mov	r4, r0
   10430:	460d      	mov	r5, r1
   10432:	d904      	bls.n	1043e <_raise_r+0x14>
   10434:	2316      	movs	r3, #22
   10436:	6003      	str	r3, [r0, #0]
   10438:	f04f 30ff 	mov.w	r0, #4294967295
   1043c:	bd38      	pop	{r3, r4, r5, pc}
   1043e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10440:	b112      	cbz	r2, 10448 <_raise_r+0x1e>
   10442:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   10446:	b94b      	cbnz	r3, 1045c <_raise_r+0x32>
   10448:	4620      	mov	r0, r4
   1044a:	f000 f816 	bl	1047a <_getpid_r>
   1044e:	462a      	mov	r2, r5
   10450:	4601      	mov	r1, r0
   10452:	4620      	mov	r0, r4
   10454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10458:	f7fc bef4 	b.w	d244 <_kill_r>
   1045c:	2b01      	cmp	r3, #1
   1045e:	d00a      	beq.n	10476 <_raise_r+0x4c>
   10460:	1c59      	adds	r1, r3, #1
   10462:	d103      	bne.n	1046c <_raise_r+0x42>
   10464:	2316      	movs	r3, #22
   10466:	6003      	str	r3, [r0, #0]
   10468:	2001      	movs	r0, #1
   1046a:	e7e7      	b.n	1043c <_raise_r+0x12>
   1046c:	2400      	movs	r4, #0
   1046e:	4628      	mov	r0, r5
   10470:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   10474:	4798      	blx	r3
   10476:	2000      	movs	r0, #0
   10478:	e7e0      	b.n	1043c <_raise_r+0x12>

0001047a <_getpid_r>:
   1047a:	f7fe b8ec 	b.w	e656 <_getpid>

0001047e <strncmp>:
   1047e:	b510      	push	{r4, lr}
   10480:	b16a      	cbz	r2, 1049e <strncmp+0x20>
   10482:	3901      	subs	r1, #1
   10484:	1884      	adds	r4, r0, r2
   10486:	f810 3b01 	ldrb.w	r3, [r0], #1
   1048a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1048e:	4293      	cmp	r3, r2
   10490:	d103      	bne.n	1049a <strncmp+0x1c>
   10492:	42a0      	cmp	r0, r4
   10494:	d001      	beq.n	1049a <strncmp+0x1c>
   10496:	2b00      	cmp	r3, #0
   10498:	d1f5      	bne.n	10486 <strncmp+0x8>
   1049a:	1a98      	subs	r0, r3, r2
   1049c:	bd10      	pop	{r4, pc}
   1049e:	4610      	mov	r0, r2
   104a0:	e7fc      	b.n	1049c <strncmp+0x1e>

000104a2 <strncpy>:
   104a2:	3901      	subs	r1, #1
   104a4:	4603      	mov	r3, r0
   104a6:	b510      	push	{r4, lr}
   104a8:	b132      	cbz	r2, 104b8 <strncpy+0x16>
   104aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   104ae:	3a01      	subs	r2, #1
   104b0:	f803 4b01 	strb.w	r4, [r3], #1
   104b4:	2c00      	cmp	r4, #0
   104b6:	d1f7      	bne.n	104a8 <strncpy+0x6>
   104b8:	441a      	add	r2, r3
   104ba:	2100      	movs	r1, #0
   104bc:	4293      	cmp	r3, r2
   104be:	d100      	bne.n	104c2 <strncpy+0x20>
   104c0:	bd10      	pop	{r4, pc}
   104c2:	f803 1b01 	strb.w	r1, [r3], #1
   104c6:	e7f9      	b.n	104bc <strncpy+0x1a>

000104c8 <strnlen>:
   104c8:	4602      	mov	r2, r0
   104ca:	4401      	add	r1, r0
   104cc:	b510      	push	{r4, lr}
   104ce:	428a      	cmp	r2, r1
   104d0:	4613      	mov	r3, r2
   104d2:	d101      	bne.n	104d8 <strnlen+0x10>
   104d4:	1a18      	subs	r0, r3, r0
   104d6:	bd10      	pop	{r4, pc}
   104d8:	781c      	ldrb	r4, [r3, #0]
   104da:	3201      	adds	r2, #1
   104dc:	2c00      	cmp	r4, #0
   104de:	d1f6      	bne.n	104ce <strnlen+0x6>
   104e0:	e7f8      	b.n	104d4 <strnlen+0xc>

000104e2 <__strtok_r>:
   104e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   104e4:	b908      	cbnz	r0, 104ea <__strtok_r+0x8>
   104e6:	6810      	ldr	r0, [r2, #0]
   104e8:	b188      	cbz	r0, 1050e <__strtok_r+0x2c>
   104ea:	4604      	mov	r4, r0
   104ec:	4620      	mov	r0, r4
   104ee:	460f      	mov	r7, r1
   104f0:	f814 5b01 	ldrb.w	r5, [r4], #1
   104f4:	f817 6b01 	ldrb.w	r6, [r7], #1
   104f8:	b91e      	cbnz	r6, 10502 <__strtok_r+0x20>
   104fa:	b965      	cbnz	r5, 10516 <__strtok_r+0x34>
   104fc:	4628      	mov	r0, r5
   104fe:	6015      	str	r5, [r2, #0]
   10500:	e005      	b.n	1050e <__strtok_r+0x2c>
   10502:	42b5      	cmp	r5, r6
   10504:	d1f6      	bne.n	104f4 <__strtok_r+0x12>
   10506:	2b00      	cmp	r3, #0
   10508:	d1f0      	bne.n	104ec <__strtok_r+0xa>
   1050a:	6014      	str	r4, [r2, #0]
   1050c:	7003      	strb	r3, [r0, #0]
   1050e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10510:	461c      	mov	r4, r3
   10512:	e00c      	b.n	1052e <__strtok_r+0x4c>
   10514:	b915      	cbnz	r5, 1051c <__strtok_r+0x3a>
   10516:	f814 3b01 	ldrb.w	r3, [r4], #1
   1051a:	460e      	mov	r6, r1
   1051c:	f816 5b01 	ldrb.w	r5, [r6], #1
   10520:	42ab      	cmp	r3, r5
   10522:	d1f7      	bne.n	10514 <__strtok_r+0x32>
   10524:	2b00      	cmp	r3, #0
   10526:	d0f3      	beq.n	10510 <__strtok_r+0x2e>
   10528:	2300      	movs	r3, #0
   1052a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1052e:	6014      	str	r4, [r2, #0]
   10530:	e7ed      	b.n	1050e <__strtok_r+0x2c>

00010532 <quorem>:
   10532:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10536:	6903      	ldr	r3, [r0, #16]
   10538:	4607      	mov	r7, r0
   1053a:	690c      	ldr	r4, [r1, #16]
   1053c:	42a3      	cmp	r3, r4
   1053e:	f2c0 8085 	blt.w	1064c <quorem+0x11a>
   10542:	3c01      	subs	r4, #1
   10544:	f100 0514 	add.w	r5, r0, #20
   10548:	f101 0814 	add.w	r8, r1, #20
   1054c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   10554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   10558:	9301      	str	r3, [sp, #4]
   1055a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   1055e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   10562:	3301      	adds	r3, #1
   10564:	429a      	cmp	r2, r3
   10566:	fbb2 f6f3 	udiv	r6, r2, r3
   1056a:	d333      	bcc.n	105d4 <quorem+0xa2>
   1056c:	f04f 0e00 	mov.w	lr, #0
   10570:	4640      	mov	r0, r8
   10572:	46ac      	mov	ip, r5
   10574:	46f2      	mov	sl, lr
   10576:	f850 2b04 	ldr.w	r2, [r0], #4
   1057a:	b293      	uxth	r3, r2
   1057c:	4581      	cmp	r9, r0
   1057e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   10582:	fb06 e303 	mla	r3, r6, r3, lr
   10586:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   1058a:	b29b      	uxth	r3, r3
   1058c:	fb06 e202 	mla	r2, r6, r2, lr
   10590:	ebaa 0303 	sub.w	r3, sl, r3
   10594:	f8dc a000 	ldr.w	sl, [ip]
   10598:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   1059c:	fa1f fa8a 	uxth.w	sl, sl
   105a0:	4453      	add	r3, sl
   105a2:	fa1f fa82 	uxth.w	sl, r2
   105a6:	f8dc 2000 	ldr.w	r2, [ip]
   105aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   105ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
   105b2:	b29b      	uxth	r3, r3
   105b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
   105b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   105bc:	f84c 3b04 	str.w	r3, [ip], #4
   105c0:	d2d9      	bcs.n	10576 <quorem+0x44>
   105c2:	f855 300b 	ldr.w	r3, [r5, fp]
   105c6:	b92b      	cbnz	r3, 105d4 <quorem+0xa2>
   105c8:	9b01      	ldr	r3, [sp, #4]
   105ca:	3b04      	subs	r3, #4
   105cc:	429d      	cmp	r5, r3
   105ce:	461a      	mov	r2, r3
   105d0:	d330      	bcc.n	10634 <quorem+0x102>
   105d2:	613c      	str	r4, [r7, #16]
   105d4:	4638      	mov	r0, r7
   105d6:	f000 fa6f 	bl	10ab8 <__mcmp>
   105da:	2800      	cmp	r0, #0
   105dc:	db26      	blt.n	1062c <quorem+0xfa>
   105de:	3601      	adds	r6, #1
   105e0:	4628      	mov	r0, r5
   105e2:	f04f 0c00 	mov.w	ip, #0
   105e6:	f858 1b04 	ldr.w	r1, [r8], #4
   105ea:	f8d0 e000 	ldr.w	lr, [r0]
   105ee:	b28b      	uxth	r3, r1
   105f0:	45c1      	cmp	r9, r8
   105f2:	fa1f f28e 	uxth.w	r2, lr
   105f6:	ebac 0303 	sub.w	r3, ip, r3
   105fa:	4413      	add	r3, r2
   105fc:	ea4f 4211 	mov.w	r2, r1, lsr #16
   10600:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   10604:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10608:	b29b      	uxth	r3, r3
   1060a:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1060e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10612:	f840 3b04 	str.w	r3, [r0], #4
   10616:	d2e6      	bcs.n	105e6 <quorem+0xb4>
   10618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1061c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10620:	b922      	cbnz	r2, 1062c <quorem+0xfa>
   10622:	3b04      	subs	r3, #4
   10624:	429d      	cmp	r5, r3
   10626:	461a      	mov	r2, r3
   10628:	d30a      	bcc.n	10640 <quorem+0x10e>
   1062a:	613c      	str	r4, [r7, #16]
   1062c:	4630      	mov	r0, r6
   1062e:	b003      	add	sp, #12
   10630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10634:	6812      	ldr	r2, [r2, #0]
   10636:	3b04      	subs	r3, #4
   10638:	2a00      	cmp	r2, #0
   1063a:	d1ca      	bne.n	105d2 <quorem+0xa0>
   1063c:	3c01      	subs	r4, #1
   1063e:	e7c5      	b.n	105cc <quorem+0x9a>
   10640:	6812      	ldr	r2, [r2, #0]
   10642:	3b04      	subs	r3, #4
   10644:	2a00      	cmp	r2, #0
   10646:	d1f0      	bne.n	1062a <quorem+0xf8>
   10648:	3c01      	subs	r4, #1
   1064a:	e7eb      	b.n	10624 <quorem+0xf2>
   1064c:	2000      	movs	r0, #0
   1064e:	e7ee      	b.n	1062e <quorem+0xfc>

00010650 <__sfmoreglue>:
   10650:	b570      	push	{r4, r5, r6, lr}
   10652:	1e4a      	subs	r2, r1, #1
   10654:	2568      	movs	r5, #104	; 0x68
   10656:	460e      	mov	r6, r1
   10658:	4355      	muls	r5, r2
   1065a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1065e:	f7fc f8ff 	bl	c860 <_malloc_r>
   10662:	4604      	mov	r4, r0
   10664:	b140      	cbz	r0, 10678 <__sfmoreglue+0x28>
   10666:	2100      	movs	r1, #0
   10668:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1066c:	e9c0 1600 	strd	r1, r6, [r0]
   10670:	300c      	adds	r0, #12
   10672:	60a0      	str	r0, [r4, #8]
   10674:	f7ff fd9c 	bl	101b0 <memset>
   10678:	4620      	mov	r0, r4
   1067a:	bd70      	pop	{r4, r5, r6, pc}

0001067c <_fwalk_reent>:
   1067c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10680:	4606      	mov	r6, r0
   10682:	4688      	mov	r8, r1
   10684:	f100 0448 	add.w	r4, r0, #72	; 0x48
   10688:	2700      	movs	r7, #0
   1068a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1068e:	f1b9 0901 	subs.w	r9, r9, #1
   10692:	d505      	bpl.n	106a0 <_fwalk_reent+0x24>
   10694:	6824      	ldr	r4, [r4, #0]
   10696:	2c00      	cmp	r4, #0
   10698:	d1f7      	bne.n	1068a <_fwalk_reent+0xe>
   1069a:	4638      	mov	r0, r7
   1069c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   106a0:	89ab      	ldrh	r3, [r5, #12]
   106a2:	2b01      	cmp	r3, #1
   106a4:	d907      	bls.n	106b6 <_fwalk_reent+0x3a>
   106a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   106aa:	3301      	adds	r3, #1
   106ac:	d003      	beq.n	106b6 <_fwalk_reent+0x3a>
   106ae:	4629      	mov	r1, r5
   106b0:	4630      	mov	r0, r6
   106b2:	47c0      	blx	r8
   106b4:	4307      	orrs	r7, r0
   106b6:	3568      	adds	r5, #104	; 0x68
   106b8:	e7e9      	b.n	1068e <_fwalk_reent+0x12>

000106ba <__swhatbuf_r>:
   106ba:	b570      	push	{r4, r5, r6, lr}
   106bc:	460e      	mov	r6, r1
   106be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   106c2:	b096      	sub	sp, #88	; 0x58
   106c4:	4614      	mov	r4, r2
   106c6:	2900      	cmp	r1, #0
   106c8:	461d      	mov	r5, r3
   106ca:	da07      	bge.n	106dc <__swhatbuf_r+0x22>
   106cc:	2300      	movs	r3, #0
   106ce:	602b      	str	r3, [r5, #0]
   106d0:	89b3      	ldrh	r3, [r6, #12]
   106d2:	061a      	lsls	r2, r3, #24
   106d4:	d410      	bmi.n	106f8 <__swhatbuf_r+0x3e>
   106d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   106da:	e00e      	b.n	106fa <__swhatbuf_r+0x40>
   106dc:	466a      	mov	r2, sp
   106de:	f7fd f985 	bl	d9ec <_fstat_r>
   106e2:	2800      	cmp	r0, #0
   106e4:	dbf2      	blt.n	106cc <__swhatbuf_r+0x12>
   106e6:	9a01      	ldr	r2, [sp, #4]
   106e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   106ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   106f0:	425a      	negs	r2, r3
   106f2:	415a      	adcs	r2, r3
   106f4:	602a      	str	r2, [r5, #0]
   106f6:	e7ee      	b.n	106d6 <__swhatbuf_r+0x1c>
   106f8:	2340      	movs	r3, #64	; 0x40
   106fa:	2000      	movs	r0, #0
   106fc:	6023      	str	r3, [r4, #0]
   106fe:	b016      	add	sp, #88	; 0x58
   10700:	bd70      	pop	{r4, r5, r6, pc}

00010702 <_Balloc>:
   10702:	b570      	push	{r4, r5, r6, lr}
   10704:	6a46      	ldr	r6, [r0, #36]	; 0x24
   10706:	4604      	mov	r4, r0
   10708:	460d      	mov	r5, r1
   1070a:	b93e      	cbnz	r6, 1071c <_Balloc+0x1a>
   1070c:	2010      	movs	r0, #16
   1070e:	f7fc f849 	bl	c7a4 <malloc>
   10712:	6260      	str	r0, [r4, #36]	; 0x24
   10714:	6006      	str	r6, [r0, #0]
   10716:	60c6      	str	r6, [r0, #12]
   10718:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1071c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1071e:	68f3      	ldr	r3, [r6, #12]
   10720:	b183      	cbz	r3, 10744 <_Balloc+0x42>
   10722:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10724:	68db      	ldr	r3, [r3, #12]
   10726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1072a:	b9b8      	cbnz	r0, 1075c <_Balloc+0x5a>
   1072c:	2101      	movs	r1, #1
   1072e:	4620      	mov	r0, r4
   10730:	fa01 f605 	lsl.w	r6, r1, r5
   10734:	1d72      	adds	r2, r6, #5
   10736:	0092      	lsls	r2, r2, #2
   10738:	f000 faa5 	bl	10c86 <_calloc_r>
   1073c:	b160      	cbz	r0, 10758 <_Balloc+0x56>
   1073e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   10742:	e00e      	b.n	10762 <_Balloc+0x60>
   10744:	2221      	movs	r2, #33	; 0x21
   10746:	2104      	movs	r1, #4
   10748:	4620      	mov	r0, r4
   1074a:	f000 fa9c 	bl	10c86 <_calloc_r>
   1074e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10750:	60f0      	str	r0, [r6, #12]
   10752:	68db      	ldr	r3, [r3, #12]
   10754:	2b00      	cmp	r3, #0
   10756:	d1e4      	bne.n	10722 <_Balloc+0x20>
   10758:	2000      	movs	r0, #0
   1075a:	bd70      	pop	{r4, r5, r6, pc}
   1075c:	6802      	ldr	r2, [r0, #0]
   1075e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   10762:	2300      	movs	r3, #0
   10764:	e9c0 3303 	strd	r3, r3, [r0, #12]
   10768:	e7f7      	b.n	1075a <_Balloc+0x58>

0001076a <_Bfree>:
   1076a:	b570      	push	{r4, r5, r6, lr}
   1076c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1076e:	4605      	mov	r5, r0
   10770:	460c      	mov	r4, r1
   10772:	b93e      	cbnz	r6, 10784 <_Bfree+0x1a>
   10774:	2010      	movs	r0, #16
   10776:	f7fc f815 	bl	c7a4 <malloc>
   1077a:	6268      	str	r0, [r5, #36]	; 0x24
   1077c:	6006      	str	r6, [r0, #0]
   1077e:	60c6      	str	r6, [r0, #12]
   10780:	e9c0 6601 	strd	r6, r6, [r0, #4]
   10784:	b13c      	cbz	r4, 10796 <_Bfree+0x2c>
   10786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10788:	6862      	ldr	r2, [r4, #4]
   1078a:	68db      	ldr	r3, [r3, #12]
   1078c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10790:	6021      	str	r1, [r4, #0]
   10792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   10796:	bd70      	pop	{r4, r5, r6, pc}

00010798 <__multadd>:
   10798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1079c:	4607      	mov	r7, r0
   1079e:	4698      	mov	r8, r3
   107a0:	460c      	mov	r4, r1
   107a2:	690e      	ldr	r6, [r1, #16]
   107a4:	f101 0014 	add.w	r0, r1, #20
   107a8:	2300      	movs	r3, #0
   107aa:	6805      	ldr	r5, [r0, #0]
   107ac:	3301      	adds	r3, #1
   107ae:	b2a9      	uxth	r1, r5
   107b0:	429e      	cmp	r6, r3
   107b2:	ea4f 4515 	mov.w	r5, r5, lsr #16
   107b6:	fb02 8101 	mla	r1, r2, r1, r8
   107ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   107be:	b289      	uxth	r1, r1
   107c0:	fb02 c505 	mla	r5, r2, r5, ip
   107c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   107c8:	ea4f 4815 	mov.w	r8, r5, lsr #16
   107cc:	f840 1b04 	str.w	r1, [r0], #4
   107d0:	dceb      	bgt.n	107aa <__multadd+0x12>
   107d2:	f1b8 0f00 	cmp.w	r8, #0
   107d6:	d01b      	beq.n	10810 <__multadd+0x78>
   107d8:	68a3      	ldr	r3, [r4, #8]
   107da:	42b3      	cmp	r3, r6
   107dc:	dc12      	bgt.n	10804 <__multadd+0x6c>
   107de:	6861      	ldr	r1, [r4, #4]
   107e0:	4638      	mov	r0, r7
   107e2:	3101      	adds	r1, #1
   107e4:	f7ff ff8d 	bl	10702 <_Balloc>
   107e8:	6922      	ldr	r2, [r4, #16]
   107ea:	4605      	mov	r5, r0
   107ec:	f104 010c 	add.w	r1, r4, #12
   107f0:	3202      	adds	r2, #2
   107f2:	300c      	adds	r0, #12
   107f4:	0092      	lsls	r2, r2, #2
   107f6:	f7ff fcce 	bl	10196 <memcpy>
   107fa:	4621      	mov	r1, r4
   107fc:	462c      	mov	r4, r5
   107fe:	4638      	mov	r0, r7
   10800:	f7ff ffb3 	bl	1076a <_Bfree>
   10804:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   10808:	3601      	adds	r6, #1
   1080a:	f8c3 8014 	str.w	r8, [r3, #20]
   1080e:	6126      	str	r6, [r4, #16]
   10810:	4620      	mov	r0, r4
   10812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010816 <__hi0bits>:
   10816:	0c02      	lsrs	r2, r0, #16
   10818:	4603      	mov	r3, r0
   1081a:	0412      	lsls	r2, r2, #16
   1081c:	b9ca      	cbnz	r2, 10852 <__hi0bits+0x3c>
   1081e:	0403      	lsls	r3, r0, #16
   10820:	2010      	movs	r0, #16
   10822:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   10826:	bf04      	itt	eq
   10828:	021b      	lsleq	r3, r3, #8
   1082a:	3008      	addeq	r0, #8
   1082c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   10830:	bf04      	itt	eq
   10832:	011b      	lsleq	r3, r3, #4
   10834:	3004      	addeq	r0, #4
   10836:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   1083a:	bf04      	itt	eq
   1083c:	009b      	lsleq	r3, r3, #2
   1083e:	3002      	addeq	r0, #2
   10840:	2b00      	cmp	r3, #0
   10842:	db05      	blt.n	10850 <__hi0bits+0x3a>
   10844:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   10848:	f100 0001 	add.w	r0, r0, #1
   1084c:	bf08      	it	eq
   1084e:	2020      	moveq	r0, #32
   10850:	4770      	bx	lr
   10852:	2000      	movs	r0, #0
   10854:	e7e5      	b.n	10822 <__hi0bits+0xc>

00010856 <__lo0bits>:
   10856:	6803      	ldr	r3, [r0, #0]
   10858:	4602      	mov	r2, r0
   1085a:	f013 0007 	ands.w	r0, r3, #7
   1085e:	d00b      	beq.n	10878 <__lo0bits+0x22>
   10860:	07d9      	lsls	r1, r3, #31
   10862:	d422      	bmi.n	108aa <__lo0bits+0x54>
   10864:	0798      	lsls	r0, r3, #30
   10866:	bf47      	ittee	mi
   10868:	085b      	lsrmi	r3, r3, #1
   1086a:	2001      	movmi	r0, #1
   1086c:	089b      	lsrpl	r3, r3, #2
   1086e:	2002      	movpl	r0, #2
   10870:	bf4c      	ite	mi
   10872:	6013      	strmi	r3, [r2, #0]
   10874:	6013      	strpl	r3, [r2, #0]
   10876:	4770      	bx	lr
   10878:	b299      	uxth	r1, r3
   1087a:	b909      	cbnz	r1, 10880 <__lo0bits+0x2a>
   1087c:	0c1b      	lsrs	r3, r3, #16
   1087e:	2010      	movs	r0, #16
   10880:	f013 0fff 	tst.w	r3, #255	; 0xff
   10884:	bf04      	itt	eq
   10886:	0a1b      	lsreq	r3, r3, #8
   10888:	3008      	addeq	r0, #8
   1088a:	0719      	lsls	r1, r3, #28
   1088c:	bf04      	itt	eq
   1088e:	091b      	lsreq	r3, r3, #4
   10890:	3004      	addeq	r0, #4
   10892:	0799      	lsls	r1, r3, #30
   10894:	bf04      	itt	eq
   10896:	089b      	lsreq	r3, r3, #2
   10898:	3002      	addeq	r0, #2
   1089a:	07d9      	lsls	r1, r3, #31
   1089c:	d403      	bmi.n	108a6 <__lo0bits+0x50>
   1089e:	085b      	lsrs	r3, r3, #1
   108a0:	f100 0001 	add.w	r0, r0, #1
   108a4:	d003      	beq.n	108ae <__lo0bits+0x58>
   108a6:	6013      	str	r3, [r2, #0]
   108a8:	4770      	bx	lr
   108aa:	2000      	movs	r0, #0
   108ac:	4770      	bx	lr
   108ae:	2020      	movs	r0, #32
   108b0:	4770      	bx	lr

000108b2 <__i2b>:
   108b2:	b510      	push	{r4, lr}
   108b4:	460c      	mov	r4, r1
   108b6:	2101      	movs	r1, #1
   108b8:	f7ff ff23 	bl	10702 <_Balloc>
   108bc:	2201      	movs	r2, #1
   108be:	6144      	str	r4, [r0, #20]
   108c0:	6102      	str	r2, [r0, #16]
   108c2:	bd10      	pop	{r4, pc}

000108c4 <__multiply>:
   108c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108c8:	4615      	mov	r5, r2
   108ca:	690a      	ldr	r2, [r1, #16]
   108cc:	460c      	mov	r4, r1
   108ce:	b085      	sub	sp, #20
   108d0:	692b      	ldr	r3, [r5, #16]
   108d2:	429a      	cmp	r2, r3
   108d4:	bfbe      	ittt	lt
   108d6:	460b      	movlt	r3, r1
   108d8:	462c      	movlt	r4, r5
   108da:	461d      	movlt	r5, r3
   108dc:	6927      	ldr	r7, [r4, #16]
   108de:	68a3      	ldr	r3, [r4, #8]
   108e0:	f8d5 9010 	ldr.w	r9, [r5, #16]
   108e4:	6861      	ldr	r1, [r4, #4]
   108e6:	eb07 0609 	add.w	r6, r7, r9
   108ea:	42b3      	cmp	r3, r6
   108ec:	bfb8      	it	lt
   108ee:	3101      	addlt	r1, #1
   108f0:	f7ff ff07 	bl	10702 <_Balloc>
   108f4:	f100 0114 	add.w	r1, r0, #20
   108f8:	2200      	movs	r2, #0
   108fa:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   108fe:	460b      	mov	r3, r1
   10900:	4543      	cmp	r3, r8
   10902:	d31d      	bcc.n	10940 <__multiply+0x7c>
   10904:	f104 0314 	add.w	r3, r4, #20
   10908:	f105 0214 	add.w	r2, r5, #20
   1090c:	f104 0515 	add.w	r5, r4, #21
   10910:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   10914:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   10918:	9302      	str	r3, [sp, #8]
   1091a:	1b3b      	subs	r3, r7, r4
   1091c:	3b15      	subs	r3, #21
   1091e:	f023 0303 	bic.w	r3, r3, #3
   10922:	3304      	adds	r3, #4
   10924:	42af      	cmp	r7, r5
   10926:	bf38      	it	cc
   10928:	2304      	movcc	r3, #4
   1092a:	9301      	str	r3, [sp, #4]
   1092c:	9b02      	ldr	r3, [sp, #8]
   1092e:	9203      	str	r2, [sp, #12]
   10930:	4293      	cmp	r3, r2
   10932:	d808      	bhi.n	10946 <__multiply+0x82>
   10934:	2e00      	cmp	r6, #0
   10936:	dc5a      	bgt.n	109ee <__multiply+0x12a>
   10938:	6106      	str	r6, [r0, #16]
   1093a:	b005      	add	sp, #20
   1093c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10940:	f843 2b04 	str.w	r2, [r3], #4
   10944:	e7dc      	b.n	10900 <__multiply+0x3c>
   10946:	f8b2 a000 	ldrh.w	sl, [r2]
   1094a:	f1ba 0f00 	cmp.w	sl, #0
   1094e:	d024      	beq.n	1099a <__multiply+0xd6>
   10950:	f104 0e14 	add.w	lr, r4, #20
   10954:	4689      	mov	r9, r1
   10956:	f04f 0c00 	mov.w	ip, #0
   1095a:	f85e 5b04 	ldr.w	r5, [lr], #4
   1095e:	f8d9 b000 	ldr.w	fp, [r9]
   10962:	b2ab      	uxth	r3, r5
   10964:	4577      	cmp	r7, lr
   10966:	fa1f fb8b 	uxth.w	fp, fp
   1096a:	fb0a b303 	mla	r3, sl, r3, fp
   1096e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   10972:	f8d9 5000 	ldr.w	r5, [r9]
   10976:	4463      	add	r3, ip
   10978:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   1097c:	fb0a c50b 	mla	r5, sl, fp, ip
   10980:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   10984:	b29b      	uxth	r3, r3
   10986:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   1098a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1098e:	f849 3b04 	str.w	r3, [r9], #4
   10992:	d8e2      	bhi.n	1095a <__multiply+0x96>
   10994:	9b01      	ldr	r3, [sp, #4]
   10996:	f841 c003 	str.w	ip, [r1, r3]
   1099a:	9b03      	ldr	r3, [sp, #12]
   1099c:	3204      	adds	r2, #4
   1099e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   109a2:	f1b9 0f00 	cmp.w	r9, #0
   109a6:	d020      	beq.n	109ea <__multiply+0x126>
   109a8:	680b      	ldr	r3, [r1, #0]
   109aa:	f104 0c14 	add.w	ip, r4, #20
   109ae:	468e      	mov	lr, r1
   109b0:	f04f 0a00 	mov.w	sl, #0
   109b4:	f8bc 5000 	ldrh.w	r5, [ip]
   109b8:	b29b      	uxth	r3, r3
   109ba:	f8be b002 	ldrh.w	fp, [lr, #2]
   109be:	fb09 b505 	mla	r5, r9, r5, fp
   109c2:	44aa      	add	sl, r5
   109c4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   109c8:	f84e 3b04 	str.w	r3, [lr], #4
   109cc:	f85c 3b04 	ldr.w	r3, [ip], #4
   109d0:	f8be 5000 	ldrh.w	r5, [lr]
   109d4:	0c1b      	lsrs	r3, r3, #16
   109d6:	4567      	cmp	r7, ip
   109d8:	fb09 5303 	mla	r3, r9, r3, r5
   109dc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   109e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   109e4:	d8e6      	bhi.n	109b4 <__multiply+0xf0>
   109e6:	9d01      	ldr	r5, [sp, #4]
   109e8:	514b      	str	r3, [r1, r5]
   109ea:	3104      	adds	r1, #4
   109ec:	e79e      	b.n	1092c <__multiply+0x68>
   109ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   109f2:	2b00      	cmp	r3, #0
   109f4:	d1a0      	bne.n	10938 <__multiply+0x74>
   109f6:	3e01      	subs	r6, #1
   109f8:	e79c      	b.n	10934 <__multiply+0x70>

000109fa <__lshift>:
   109fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   109fe:	460c      	mov	r4, r1
   10a00:	4607      	mov	r7, r0
   10a02:	4691      	mov	r9, r2
   10a04:	ea4f 1a62 	mov.w	sl, r2, asr #5
   10a08:	6923      	ldr	r3, [r4, #16]
   10a0a:	6849      	ldr	r1, [r1, #4]
   10a0c:	eb03 1862 	add.w	r8, r3, r2, asr #5
   10a10:	68a3      	ldr	r3, [r4, #8]
   10a12:	f108 0601 	add.w	r6, r8, #1
   10a16:	42b3      	cmp	r3, r6
   10a18:	db3f      	blt.n	10a9a <__lshift+0xa0>
   10a1a:	4638      	mov	r0, r7
   10a1c:	f7ff fe71 	bl	10702 <_Balloc>
   10a20:	2300      	movs	r3, #0
   10a22:	4605      	mov	r5, r0
   10a24:	f100 0114 	add.w	r1, r0, #20
   10a28:	f100 0210 	add.w	r2, r0, #16
   10a2c:	4618      	mov	r0, r3
   10a2e:	4553      	cmp	r3, sl
   10a30:	db36      	blt.n	10aa0 <__lshift+0xa6>
   10a32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   10a36:	f104 0314 	add.w	r3, r4, #20
   10a3a:	6920      	ldr	r0, [r4, #16]
   10a3c:	f019 091f 	ands.w	r9, r9, #31
   10a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   10a44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   10a48:	d02e      	beq.n	10aa8 <__lshift+0xae>
   10a4a:	f1c9 0e20 	rsb	lr, r9, #32
   10a4e:	468a      	mov	sl, r1
   10a50:	2200      	movs	r2, #0
   10a52:	6818      	ldr	r0, [r3, #0]
   10a54:	fa00 f009 	lsl.w	r0, r0, r9
   10a58:	4302      	orrs	r2, r0
   10a5a:	f84a 2b04 	str.w	r2, [sl], #4
   10a5e:	f853 2b04 	ldr.w	r2, [r3], #4
   10a62:	459c      	cmp	ip, r3
   10a64:	fa22 f20e 	lsr.w	r2, r2, lr
   10a68:	d8f3      	bhi.n	10a52 <__lshift+0x58>
   10a6a:	ebac 0304 	sub.w	r3, ip, r4
   10a6e:	f104 0015 	add.w	r0, r4, #21
   10a72:	3b15      	subs	r3, #21
   10a74:	f023 0303 	bic.w	r3, r3, #3
   10a78:	3304      	adds	r3, #4
   10a7a:	4560      	cmp	r0, ip
   10a7c:	bf88      	it	hi
   10a7e:	2304      	movhi	r3, #4
   10a80:	50ca      	str	r2, [r1, r3]
   10a82:	b10a      	cbz	r2, 10a88 <__lshift+0x8e>
   10a84:	f108 0602 	add.w	r6, r8, #2
   10a88:	3e01      	subs	r6, #1
   10a8a:	4638      	mov	r0, r7
   10a8c:	4621      	mov	r1, r4
   10a8e:	612e      	str	r6, [r5, #16]
   10a90:	f7ff fe6b 	bl	1076a <_Bfree>
   10a94:	4628      	mov	r0, r5
   10a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a9a:	3101      	adds	r1, #1
   10a9c:	005b      	lsls	r3, r3, #1
   10a9e:	e7ba      	b.n	10a16 <__lshift+0x1c>
   10aa0:	3301      	adds	r3, #1
   10aa2:	f842 0f04 	str.w	r0, [r2, #4]!
   10aa6:	e7c2      	b.n	10a2e <__lshift+0x34>
   10aa8:	3904      	subs	r1, #4
   10aaa:	f853 2b04 	ldr.w	r2, [r3], #4
   10aae:	459c      	cmp	ip, r3
   10ab0:	f841 2f04 	str.w	r2, [r1, #4]!
   10ab4:	d8f9      	bhi.n	10aaa <__lshift+0xb0>
   10ab6:	e7e7      	b.n	10a88 <__lshift+0x8e>

00010ab8 <__mcmp>:
   10ab8:	4603      	mov	r3, r0
   10aba:	690a      	ldr	r2, [r1, #16]
   10abc:	6900      	ldr	r0, [r0, #16]
   10abe:	1a80      	subs	r0, r0, r2
   10ac0:	b530      	push	{r4, r5, lr}
   10ac2:	d10d      	bne.n	10ae0 <__mcmp+0x28>
   10ac4:	3314      	adds	r3, #20
   10ac6:	3114      	adds	r1, #20
   10ac8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   10acc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   10ad0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   10ad4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   10ad8:	4295      	cmp	r5, r2
   10ada:	d002      	beq.n	10ae2 <__mcmp+0x2a>
   10adc:	d304      	bcc.n	10ae8 <__mcmp+0x30>
   10ade:	2001      	movs	r0, #1
   10ae0:	bd30      	pop	{r4, r5, pc}
   10ae2:	42a3      	cmp	r3, r4
   10ae4:	d3f4      	bcc.n	10ad0 <__mcmp+0x18>
   10ae6:	e7fb      	b.n	10ae0 <__mcmp+0x28>
   10ae8:	f04f 30ff 	mov.w	r0, #4294967295
   10aec:	e7f8      	b.n	10ae0 <__mcmp+0x28>

00010aee <__mdiff>:
   10aee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10af2:	460c      	mov	r4, r1
   10af4:	4606      	mov	r6, r0
   10af6:	4611      	mov	r1, r2
   10af8:	4692      	mov	sl, r2
   10afa:	4620      	mov	r0, r4
   10afc:	f7ff ffdc 	bl	10ab8 <__mcmp>
   10b00:	1e05      	subs	r5, r0, #0
   10b02:	d108      	bne.n	10b16 <__mdiff+0x28>
   10b04:	4629      	mov	r1, r5
   10b06:	4630      	mov	r0, r6
   10b08:	f7ff fdfb 	bl	10702 <_Balloc>
   10b0c:	2301      	movs	r3, #1
   10b0e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   10b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b16:	bfa3      	ittte	ge
   10b18:	4653      	movge	r3, sl
   10b1a:	46a2      	movge	sl, r4
   10b1c:	2500      	movge	r5, #0
   10b1e:	2501      	movlt	r5, #1
   10b20:	bfa8      	it	ge
   10b22:	461c      	movge	r4, r3
   10b24:	f8da 1004 	ldr.w	r1, [sl, #4]
   10b28:	4630      	mov	r0, r6
   10b2a:	f7ff fdea 	bl	10702 <_Balloc>
   10b2e:	f104 0914 	add.w	r9, r4, #20
   10b32:	f8da 7010 	ldr.w	r7, [sl, #16]
   10b36:	f100 0814 	add.w	r8, r0, #20
   10b3a:	6926      	ldr	r6, [r4, #16]
   10b3c:	f10a 0210 	add.w	r2, sl, #16
   10b40:	60c5      	str	r5, [r0, #12]
   10b42:	f10a 0514 	add.w	r5, sl, #20
   10b46:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   10b4a:	46c2      	mov	sl, r8
   10b4c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   10b50:	f04f 0c00 	mov.w	ip, #0
   10b54:	f852 bf04 	ldr.w	fp, [r2, #4]!
   10b58:	f859 3b04 	ldr.w	r3, [r9], #4
   10b5c:	fa1f f18b 	uxth.w	r1, fp
   10b60:	454e      	cmp	r6, r9
   10b62:	4461      	add	r1, ip
   10b64:	fa1f fc83 	uxth.w	ip, r3
   10b68:	ea4f 4313 	mov.w	r3, r3, lsr #16
   10b6c:	eba1 010c 	sub.w	r1, r1, ip
   10b70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   10b74:	eb03 4321 	add.w	r3, r3, r1, asr #16
   10b78:	b289      	uxth	r1, r1
   10b7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
   10b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   10b82:	f84a 3b04 	str.w	r3, [sl], #4
   10b86:	d8e5      	bhi.n	10b54 <__mdiff+0x66>
   10b88:	1b33      	subs	r3, r6, r4
   10b8a:	3415      	adds	r4, #21
   10b8c:	3b15      	subs	r3, #21
   10b8e:	f023 0303 	bic.w	r3, r3, #3
   10b92:	3304      	adds	r3, #4
   10b94:	42a6      	cmp	r6, r4
   10b96:	bf38      	it	cc
   10b98:	2304      	movcc	r3, #4
   10b9a:	441d      	add	r5, r3
   10b9c:	4443      	add	r3, r8
   10b9e:	462c      	mov	r4, r5
   10ba0:	461e      	mov	r6, r3
   10ba2:	4574      	cmp	r4, lr
   10ba4:	d30e      	bcc.n	10bc4 <__mdiff+0xd6>
   10ba6:	f10e 0203 	add.w	r2, lr, #3
   10baa:	1b52      	subs	r2, r2, r5
   10bac:	3d03      	subs	r5, #3
   10bae:	f022 0203 	bic.w	r2, r2, #3
   10bb2:	45ae      	cmp	lr, r5
   10bb4:	bf38      	it	cc
   10bb6:	2200      	movcc	r2, #0
   10bb8:	441a      	add	r2, r3
   10bba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   10bbe:	b18b      	cbz	r3, 10be4 <__mdiff+0xf6>
   10bc0:	6107      	str	r7, [r0, #16]
   10bc2:	e7a6      	b.n	10b12 <__mdiff+0x24>
   10bc4:	f854 8b04 	ldr.w	r8, [r4], #4
   10bc8:	fa1f f288 	uxth.w	r2, r8
   10bcc:	4462      	add	r2, ip
   10bce:	1411      	asrs	r1, r2, #16
   10bd0:	b292      	uxth	r2, r2
   10bd2:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   10bd6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   10bda:	ea4f 4c21 	mov.w	ip, r1, asr #16
   10bde:	f846 2b04 	str.w	r2, [r6], #4
   10be2:	e7de      	b.n	10ba2 <__mdiff+0xb4>
   10be4:	3f01      	subs	r7, #1
   10be6:	e7e8      	b.n	10bba <__mdiff+0xcc>

00010be8 <__d2b>:
   10be8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10bec:	461c      	mov	r4, r3
   10bee:	2101      	movs	r1, #1
   10bf0:	4690      	mov	r8, r2
   10bf2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   10bf6:	f7ff fd84 	bl	10702 <_Balloc>
   10bfa:	f3c4 0313 	ubfx	r3, r4, #0, #20
   10bfe:	f3c4 540a 	ubfx	r4, r4, #20, #11
   10c02:	4607      	mov	r7, r0
   10c04:	bb2c      	cbnz	r4, 10c52 <__d2b+0x6a>
   10c06:	9301      	str	r3, [sp, #4]
   10c08:	f1b8 0300 	subs.w	r3, r8, #0
   10c0c:	d026      	beq.n	10c5c <__d2b+0x74>
   10c0e:	4668      	mov	r0, sp
   10c10:	9300      	str	r3, [sp, #0]
   10c12:	f7ff fe20 	bl	10856 <__lo0bits>
   10c16:	9900      	ldr	r1, [sp, #0]
   10c18:	b1f0      	cbz	r0, 10c58 <__d2b+0x70>
   10c1a:	9a01      	ldr	r2, [sp, #4]
   10c1c:	f1c0 0320 	rsb	r3, r0, #32
   10c20:	fa02 f303 	lsl.w	r3, r2, r3
   10c24:	40c2      	lsrs	r2, r0
   10c26:	430b      	orrs	r3, r1
   10c28:	9201      	str	r2, [sp, #4]
   10c2a:	617b      	str	r3, [r7, #20]
   10c2c:	9b01      	ldr	r3, [sp, #4]
   10c2e:	2b00      	cmp	r3, #0
   10c30:	61bb      	str	r3, [r7, #24]
   10c32:	bf14      	ite	ne
   10c34:	2102      	movne	r1, #2
   10c36:	2101      	moveq	r1, #1
   10c38:	6139      	str	r1, [r7, #16]
   10c3a:	b1c4      	cbz	r4, 10c6e <__d2b+0x86>
   10c3c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   10c40:	4404      	add	r4, r0
   10c42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   10c46:	6034      	str	r4, [r6, #0]
   10c48:	6028      	str	r0, [r5, #0]
   10c4a:	4638      	mov	r0, r7
   10c4c:	b002      	add	sp, #8
   10c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10c56:	e7d6      	b.n	10c06 <__d2b+0x1e>
   10c58:	6179      	str	r1, [r7, #20]
   10c5a:	e7e7      	b.n	10c2c <__d2b+0x44>
   10c5c:	a801      	add	r0, sp, #4
   10c5e:	f7ff fdfa 	bl	10856 <__lo0bits>
   10c62:	9b01      	ldr	r3, [sp, #4]
   10c64:	2101      	movs	r1, #1
   10c66:	3020      	adds	r0, #32
   10c68:	617b      	str	r3, [r7, #20]
   10c6a:	6139      	str	r1, [r7, #16]
   10c6c:	e7e5      	b.n	10c3a <__d2b+0x52>
   10c6e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   10c72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   10c76:	6030      	str	r0, [r6, #0]
   10c78:	6918      	ldr	r0, [r3, #16]
   10c7a:	f7ff fdcc 	bl	10816 <__hi0bits>
   10c7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   10c82:	6029      	str	r1, [r5, #0]
   10c84:	e7e1      	b.n	10c4a <__d2b+0x62>

00010c86 <_calloc_r>:
   10c86:	b538      	push	{r3, r4, r5, lr}
   10c88:	fb02 f501 	mul.w	r5, r2, r1
   10c8c:	4629      	mov	r1, r5
   10c8e:	f7fb fde7 	bl	c860 <_malloc_r>
   10c92:	4604      	mov	r4, r0
   10c94:	b118      	cbz	r0, 10c9e <_calloc_r+0x18>
   10c96:	462a      	mov	r2, r5
   10c98:	2100      	movs	r1, #0
   10c9a:	f7ff fa89 	bl	101b0 <memset>
   10c9e:	4620      	mov	r0, r4
   10ca0:	bd38      	pop	{r3, r4, r5, pc}

00010ca2 <__sread>:
   10ca2:	b510      	push	{r4, lr}
   10ca4:	460c      	mov	r4, r1
   10ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10caa:	f7fc fed3 	bl	da54 <_read_r>
   10cae:	2800      	cmp	r0, #0
   10cb0:	bfab      	itete	ge
   10cb2:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   10cb4:	89a3      	ldrhlt	r3, [r4, #12]
   10cb6:	181b      	addge	r3, r3, r0
   10cb8:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   10cbc:	bfac      	ite	ge
   10cbe:	6563      	strge	r3, [r4, #84]	; 0x54
   10cc0:	81a3      	strhlt	r3, [r4, #12]
   10cc2:	bd10      	pop	{r4, pc}

00010cc4 <__swrite>:
   10cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cc8:	461f      	mov	r7, r3
   10cca:	898b      	ldrh	r3, [r1, #12]
   10ccc:	4605      	mov	r5, r0
   10cce:	460c      	mov	r4, r1
   10cd0:	05db      	lsls	r3, r3, #23
   10cd2:	4616      	mov	r6, r2
   10cd4:	d505      	bpl.n	10ce2 <__swrite+0x1e>
   10cd6:	2302      	movs	r3, #2
   10cd8:	2200      	movs	r2, #0
   10cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10cde:	f7fc fea7 	bl	da30 <_lseek_r>
   10ce2:	89a3      	ldrh	r3, [r4, #12]
   10ce4:	4632      	mov	r2, r6
   10ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10cea:	4628      	mov	r0, r5
   10cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   10cf0:	81a3      	strh	r3, [r4, #12]
   10cf2:	463b      	mov	r3, r7
   10cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10cf8:	f7fc be56 	b.w	d9a8 <_write_r>

00010cfc <__sseek>:
   10cfc:	b510      	push	{r4, lr}
   10cfe:	460c      	mov	r4, r1
   10d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10d04:	f7fc fe94 	bl	da30 <_lseek_r>
   10d08:	1c43      	adds	r3, r0, #1
   10d0a:	89a3      	ldrh	r3, [r4, #12]
   10d0c:	bf15      	itete	ne
   10d0e:	6560      	strne	r0, [r4, #84]	; 0x54
   10d10:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   10d14:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   10d18:	81a3      	strheq	r3, [r4, #12]
   10d1a:	bf18      	it	ne
   10d1c:	81a3      	strhne	r3, [r4, #12]
   10d1e:	bd10      	pop	{r4, pc}

00010d20 <__sclose>:
   10d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10d24:	f7fc be52 	b.w	d9cc <_close_r>

00010d28 <__ascii_mbtowc>:
   10d28:	b082      	sub	sp, #8
   10d2a:	b901      	cbnz	r1, 10d2e <__ascii_mbtowc+0x6>
   10d2c:	a901      	add	r1, sp, #4
   10d2e:	b142      	cbz	r2, 10d42 <__ascii_mbtowc+0x1a>
   10d30:	b14b      	cbz	r3, 10d46 <__ascii_mbtowc+0x1e>
   10d32:	7813      	ldrb	r3, [r2, #0]
   10d34:	600b      	str	r3, [r1, #0]
   10d36:	7812      	ldrb	r2, [r2, #0]
   10d38:	1e10      	subs	r0, r2, #0
   10d3a:	bf18      	it	ne
   10d3c:	2001      	movne	r0, #1
   10d3e:	b002      	add	sp, #8
   10d40:	4770      	bx	lr
   10d42:	4610      	mov	r0, r2
   10d44:	e7fb      	b.n	10d3e <__ascii_mbtowc+0x16>
   10d46:	f06f 0001 	mvn.w	r0, #1
   10d4a:	e7f8      	b.n	10d3e <__ascii_mbtowc+0x16>

00010d4c <__ascii_wctomb>:
   10d4c:	4603      	mov	r3, r0
   10d4e:	4608      	mov	r0, r1
   10d50:	b141      	cbz	r1, 10d64 <__ascii_wctomb+0x18>
   10d52:	2aff      	cmp	r2, #255	; 0xff
   10d54:	d904      	bls.n	10d60 <__ascii_wctomb+0x14>
   10d56:	228a      	movs	r2, #138	; 0x8a
   10d58:	f04f 30ff 	mov.w	r0, #4294967295
   10d5c:	601a      	str	r2, [r3, #0]
   10d5e:	4770      	bx	lr
   10d60:	2001      	movs	r0, #1
   10d62:	700a      	strb	r2, [r1, #0]
   10d64:	4770      	bx	lr
	...

00010d68 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10d68:	f7f4 bdc4 	b.w	58f4 <SystemInit>
