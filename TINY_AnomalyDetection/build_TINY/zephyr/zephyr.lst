
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20025920 	.word	0x20025920
   4:	0000411d 	.word	0x0000411d
   8:	0000e36b 	.word	0x0000e36b
   c:	000040d5 	.word	0x000040d5
  10:	000040d5 	.word	0x000040d5
  14:	000040d5 	.word	0x000040d5
  18:	000040d5 	.word	0x000040d5
	...
  2c:	00003d55 	.word	0x00003d55
  30:	000040d5 	.word	0x000040d5
  34:	00000000 	.word	0x00000000
  38:	00003cfd 	.word	0x00003cfd
  3c:	0000ec63 	.word	0x0000ec63

00000040 <_irq_vector_table>:
  40:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  50:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  60:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  70:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  80:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  90:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  a0:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  b0:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  c0:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  d0:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  e0:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..
  f0:	00003e41 00003e41 00003e41 00003e41     A>..A>..A>..A>..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__data_size+0xce>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__data_size+0xba>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__data_size+0x4>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__data_size+0x120>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__data_size+0x4e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__data_size+0x4a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__data_size+0x64>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__data_size+0xb2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__data_size+0x9a>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__data_size+0x12e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__data_size+0xf2>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__data_size+0x110>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__data_size+0x18>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__data_size+0x18>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__data_size+0x18>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__gedf2>:
     93c:	f04f 3cff 	mov.w	ip, #4294967295
     940:	e006      	b.n	950 <__cmpdf2+0x4>
     942:	bf00      	nop

00000944 <__ledf2>:
     944:	f04f 0c01 	mov.w	ip, #1
     948:	e002      	b.n	950 <__cmpdf2+0x4>
     94a:	bf00      	nop

0000094c <__cmpdf2>:
     94c:	f04f 0c01 	mov.w	ip, #1
     950:	f84d cd04 	str.w	ip, [sp, #-4]!
     954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     95c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     960:	bf18      	it	ne
     962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     966:	d01b      	beq.n	9a0 <__cmpdf2+0x54>
     968:	b001      	add	sp, #4
     96a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     96e:	bf0c      	ite	eq
     970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     974:	ea91 0f03 	teqne	r1, r3
     978:	bf02      	ittt	eq
     97a:	ea90 0f02 	teqeq	r0, r2
     97e:	2000      	moveq	r0, #0
     980:	4770      	bxeq	lr
     982:	f110 0f00 	cmn.w	r0, #0
     986:	ea91 0f03 	teq	r1, r3
     98a:	bf58      	it	pl
     98c:	4299      	cmppl	r1, r3
     98e:	bf08      	it	eq
     990:	4290      	cmpeq	r0, r2
     992:	bf2c      	ite	cs
     994:	17d8      	asrcs	r0, r3, #31
     996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     99a:	f040 0001 	orr.w	r0, r0, #1
     99e:	4770      	bx	lr
     9a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9a8:	d102      	bne.n	9b0 <__cmpdf2+0x64>
     9aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9ae:	d107      	bne.n	9c0 <__cmpdf2+0x74>
     9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9b8:	d1d6      	bne.n	968 <__cmpdf2+0x1c>
     9ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9be:	d0d3      	beq.n	968 <__cmpdf2+0x1c>
     9c0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <__aeabi_cdrcmple>:
     9c8:	4684      	mov	ip, r0
     9ca:	4610      	mov	r0, r2
     9cc:	4662      	mov	r2, ip
     9ce:	468c      	mov	ip, r1
     9d0:	4619      	mov	r1, r3
     9d2:	4663      	mov	r3, ip
     9d4:	e000      	b.n	9d8 <__aeabi_cdcmpeq>
     9d6:	bf00      	nop

000009d8 <__aeabi_cdcmpeq>:
     9d8:	b501      	push	{r0, lr}
     9da:	f7ff ffb7 	bl	94c <__cmpdf2>
     9de:	2800      	cmp	r0, #0
     9e0:	bf48      	it	mi
     9e2:	f110 0f00 	cmnmi.w	r0, #0
     9e6:	bd01      	pop	{r0, pc}

000009e8 <__aeabi_dcmpeq>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff fff4 	bl	9d8 <__aeabi_cdcmpeq>
     9f0:	bf0c      	ite	eq
     9f2:	2001      	moveq	r0, #1
     9f4:	2000      	movne	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_dcmplt>:
     9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
     a00:	f7ff ffea 	bl	9d8 <__aeabi_cdcmpeq>
     a04:	bf34      	ite	cc
     a06:	2001      	movcc	r0, #1
     a08:	2000      	movcs	r0, #0
     a0a:	f85d fb08 	ldr.w	pc, [sp], #8
     a0e:	bf00      	nop

00000a10 <__aeabi_dcmple>:
     a10:	f84d ed08 	str.w	lr, [sp, #-8]!
     a14:	f7ff ffe0 	bl	9d8 <__aeabi_cdcmpeq>
     a18:	bf94      	ite	ls
     a1a:	2001      	movls	r0, #1
     a1c:	2000      	movhi	r0, #0
     a1e:	f85d fb08 	ldr.w	pc, [sp], #8
     a22:	bf00      	nop

00000a24 <__aeabi_dcmpge>:
     a24:	f84d ed08 	str.w	lr, [sp, #-8]!
     a28:	f7ff ffce 	bl	9c8 <__aeabi_cdrcmple>
     a2c:	bf94      	ite	ls
     a2e:	2001      	movls	r0, #1
     a30:	2000      	movhi	r0, #0
     a32:	f85d fb08 	ldr.w	pc, [sp], #8
     a36:	bf00      	nop

00000a38 <__aeabi_dcmpgt>:
     a38:	f84d ed08 	str.w	lr, [sp, #-8]!
     a3c:	f7ff ffc4 	bl	9c8 <__aeabi_cdrcmple>
     a40:	bf34      	ite	cc
     a42:	2001      	movcc	r0, #1
     a44:	2000      	movcs	r0, #0
     a46:	f85d fb08 	ldr.w	pc, [sp], #8
     a4a:	bf00      	nop

00000a4c <__aeabi_d2iz>:
     a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d215      	bcs.n	a82 <__aeabi_d2iz+0x36>
     a56:	d511      	bpl.n	a7c <__aeabi_d2iz+0x30>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d912      	bls.n	a88 <__aeabi_d2iz+0x3c>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a72:	fa23 f002 	lsr.w	r0, r3, r2
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	4770      	bx	lr
     a7c:	f04f 0000 	mov.w	r0, #0
     a80:	4770      	bx	lr
     a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a86:	d105      	bne.n	a94 <__aeabi_d2iz+0x48>
     a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a8c:	bf08      	it	eq
     a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a92:	4770      	bx	lr
     a94:	f04f 0000 	mov.w	r0, #0
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_d2f>:
     a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     aa4:	bf24      	itt	cs
     aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     aae:	d90d      	bls.n	acc <__aeabi_d2f+0x30>
     ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     ac4:	bf08      	it	eq
     ac6:	f020 0001 	biceq.w	r0, r0, #1
     aca:	4770      	bx	lr
     acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     ad0:	d121      	bne.n	b16 <__aeabi_d2f+0x7a>
     ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     ad6:	bfbc      	itt	lt
     ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     adc:	4770      	bxlt	lr
     ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     ae6:	f1c2 0218 	rsb	r2, r2, #24
     aea:	f1c2 0c20 	rsb	ip, r2, #32
     aee:	fa10 f30c 	lsls.w	r3, r0, ip
     af2:	fa20 f002 	lsr.w	r0, r0, r2
     af6:	bf18      	it	ne
     af8:	f040 0001 	orrne.w	r0, r0, #1
     afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     b04:	fa03 fc0c 	lsl.w	ip, r3, ip
     b08:	ea40 000c 	orr.w	r0, r0, ip
     b0c:	fa23 f302 	lsr.w	r3, r3, r2
     b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b14:	e7cc      	b.n	ab0 <__aeabi_d2f+0x14>
     b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
     b1a:	d107      	bne.n	b2c <__aeabi_d2f+0x90>
     b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     b20:	bf1e      	ittt	ne
     b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     b2a:	4770      	bxne	lr
     b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <__aeabi_frsub>:
     b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     b40:	e002      	b.n	b48 <__addsf3>
     b42:	bf00      	nop

00000b44 <__aeabi_fsub>:
     b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b48 <__addsf3>:
     b48:	0042      	lsls	r2, r0, #1
     b4a:	bf1f      	itttt	ne
     b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b50:	ea92 0f03 	teqne	r2, r3
     b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b5c:	d06a      	beq.n	c34 <__addsf3+0xec>
     b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b66:	bfc1      	itttt	gt
     b68:	18d2      	addgt	r2, r2, r3
     b6a:	4041      	eorgt	r1, r0
     b6c:	4048      	eorgt	r0, r1
     b6e:	4041      	eorgt	r1, r0
     b70:	bfb8      	it	lt
     b72:	425b      	neglt	r3, r3
     b74:	2b19      	cmp	r3, #25
     b76:	bf88      	it	hi
     b78:	4770      	bxhi	lr
     b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b86:	bf18      	it	ne
     b88:	4240      	negne	r0, r0
     b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b96:	bf18      	it	ne
     b98:	4249      	negne	r1, r1
     b9a:	ea92 0f03 	teq	r2, r3
     b9e:	d03f      	beq.n	c20 <__addsf3+0xd8>
     ba0:	f1a2 0201 	sub.w	r2, r2, #1
     ba4:	fa41 fc03 	asr.w	ip, r1, r3
     ba8:	eb10 000c 	adds.w	r0, r0, ip
     bac:	f1c3 0320 	rsb	r3, r3, #32
     bb0:	fa01 f103 	lsl.w	r1, r1, r3
     bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     bb8:	d502      	bpl.n	bc0 <__addsf3+0x78>
     bba:	4249      	negs	r1, r1
     bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     bc4:	d313      	bcc.n	bee <__addsf3+0xa6>
     bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     bca:	d306      	bcc.n	bda <__addsf3+0x92>
     bcc:	0840      	lsrs	r0, r0, #1
     bce:	ea4f 0131 	mov.w	r1, r1, rrx
     bd2:	f102 0201 	add.w	r2, r2, #1
     bd6:	2afe      	cmp	r2, #254	; 0xfe
     bd8:	d251      	bcs.n	c7e <__addsf3+0x136>
     bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     be2:	bf08      	it	eq
     be4:	f020 0001 	biceq.w	r0, r0, #1
     be8:	ea40 0003 	orr.w	r0, r0, r3
     bec:	4770      	bx	lr
     bee:	0049      	lsls	r1, r1, #1
     bf0:	eb40 0000 	adc.w	r0, r0, r0
     bf4:	3a01      	subs	r2, #1
     bf6:	bf28      	it	cs
     bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bfc:	d2ed      	bcs.n	bda <__addsf3+0x92>
     bfe:	fab0 fc80 	clz	ip, r0
     c02:	f1ac 0c08 	sub.w	ip, ip, #8
     c06:	ebb2 020c 	subs.w	r2, r2, ip
     c0a:	fa00 f00c 	lsl.w	r0, r0, ip
     c0e:	bfaa      	itet	ge
     c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     c14:	4252      	neglt	r2, r2
     c16:	4318      	orrge	r0, r3
     c18:	bfbc      	itt	lt
     c1a:	40d0      	lsrlt	r0, r2
     c1c:	4318      	orrlt	r0, r3
     c1e:	4770      	bx	lr
     c20:	f092 0f00 	teq	r2, #0
     c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     c28:	bf06      	itte	eq
     c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     c2e:	3201      	addeq	r2, #1
     c30:	3b01      	subne	r3, #1
     c32:	e7b5      	b.n	ba0 <__addsf3+0x58>
     c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     c3c:	bf18      	it	ne
     c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     c42:	d021      	beq.n	c88 <__addsf3+0x140>
     c44:	ea92 0f03 	teq	r2, r3
     c48:	d004      	beq.n	c54 <__addsf3+0x10c>
     c4a:	f092 0f00 	teq	r2, #0
     c4e:	bf08      	it	eq
     c50:	4608      	moveq	r0, r1
     c52:	4770      	bx	lr
     c54:	ea90 0f01 	teq	r0, r1
     c58:	bf1c      	itt	ne
     c5a:	2000      	movne	r0, #0
     c5c:	4770      	bxne	lr
     c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c62:	d104      	bne.n	c6e <__addsf3+0x126>
     c64:	0040      	lsls	r0, r0, #1
     c66:	bf28      	it	cs
     c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c6c:	4770      	bx	lr
     c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c72:	bf3c      	itt	cc
     c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c78:	4770      	bxcc	lr
     c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c86:	4770      	bx	lr
     c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c8c:	bf16      	itet	ne
     c8e:	4608      	movne	r0, r1
     c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c94:	4601      	movne	r1, r0
     c96:	0242      	lsls	r2, r0, #9
     c98:	bf06      	itte	eq
     c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c9e:	ea90 0f01 	teqeq	r0, r1
     ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     ca6:	4770      	bx	lr

00000ca8 <__aeabi_ui2f>:
     ca8:	f04f 0300 	mov.w	r3, #0
     cac:	e004      	b.n	cb8 <__aeabi_i2f+0x8>
     cae:	bf00      	nop

00000cb0 <__aeabi_i2f>:
     cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     cb4:	bf48      	it	mi
     cb6:	4240      	negmi	r0, r0
     cb8:	ea5f 0c00 	movs.w	ip, r0
     cbc:	bf08      	it	eq
     cbe:	4770      	bxeq	lr
     cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     cc4:	4601      	mov	r1, r0
     cc6:	f04f 0000 	mov.w	r0, #0
     cca:	e01c      	b.n	d06 <__aeabi_l2f+0x2a>

00000ccc <__aeabi_ul2f>:
     ccc:	ea50 0201 	orrs.w	r2, r0, r1
     cd0:	bf08      	it	eq
     cd2:	4770      	bxeq	lr
     cd4:	f04f 0300 	mov.w	r3, #0
     cd8:	e00a      	b.n	cf0 <__aeabi_l2f+0x14>
     cda:	bf00      	nop

00000cdc <__aeabi_l2f>:
     cdc:	ea50 0201 	orrs.w	r2, r0, r1
     ce0:	bf08      	it	eq
     ce2:	4770      	bxeq	lr
     ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ce8:	d502      	bpl.n	cf0 <__aeabi_l2f+0x14>
     cea:	4240      	negs	r0, r0
     cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     cf0:	ea5f 0c01 	movs.w	ip, r1
     cf4:	bf02      	ittt	eq
     cf6:	4684      	moveq	ip, r0
     cf8:	4601      	moveq	r1, r0
     cfa:	2000      	moveq	r0, #0
     cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     d00:	bf08      	it	eq
     d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     d0a:	fabc f28c 	clz	r2, ip
     d0e:	3a08      	subs	r2, #8
     d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     d14:	db10      	blt.n	d38 <__aeabi_l2f+0x5c>
     d16:	fa01 fc02 	lsl.w	ip, r1, r2
     d1a:	4463      	add	r3, ip
     d1c:	fa00 fc02 	lsl.w	ip, r0, r2
     d20:	f1c2 0220 	rsb	r2, r2, #32
     d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     d28:	fa20 f202 	lsr.w	r2, r0, r2
     d2c:	eb43 0002 	adc.w	r0, r3, r2
     d30:	bf08      	it	eq
     d32:	f020 0001 	biceq.w	r0, r0, #1
     d36:	4770      	bx	lr
     d38:	f102 0220 	add.w	r2, r2, #32
     d3c:	fa01 fc02 	lsl.w	ip, r1, r2
     d40:	f1c2 0220 	rsb	r2, r2, #32
     d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d48:	fa21 f202 	lsr.w	r2, r1, r2
     d4c:	eb43 0002 	adc.w	r0, r3, r2
     d50:	bf08      	it	eq
     d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d56:	4770      	bx	lr

00000d58 <__aeabi_fmul>:
     d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d60:	bf1e      	ittt	ne
     d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d66:	ea92 0f0c 	teqne	r2, ip
     d6a:	ea93 0f0c 	teqne	r3, ip
     d6e:	d06f      	beq.n	e50 <__aeabi_fmul+0xf8>
     d70:	441a      	add	r2, r3
     d72:	ea80 0c01 	eor.w	ip, r0, r1
     d76:	0240      	lsls	r0, r0, #9
     d78:	bf18      	it	ne
     d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d7e:	d01e      	beq.n	dbe <__aeabi_fmul+0x66>
     d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d8c:	fba0 3101 	umull	r3, r1, r0, r1
     d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d98:	bf3e      	ittt	cc
     d9a:	0049      	lslcc	r1, r1, #1
     d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     da0:	005b      	lslcc	r3, r3, #1
     da2:	ea40 0001 	orr.w	r0, r0, r1
     da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     daa:	2afd      	cmp	r2, #253	; 0xfd
     dac:	d81d      	bhi.n	dea <__aeabi_fmul+0x92>
     dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     db6:	bf08      	it	eq
     db8:	f020 0001 	biceq.w	r0, r0, #1
     dbc:	4770      	bx	lr
     dbe:	f090 0f00 	teq	r0, #0
     dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     dc6:	bf08      	it	eq
     dc8:	0249      	lsleq	r1, r1, #9
     dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     dd2:	3a7f      	subs	r2, #127	; 0x7f
     dd4:	bfc2      	ittt	gt
     dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dde:	4770      	bxgt	lr
     de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     de4:	f04f 0300 	mov.w	r3, #0
     de8:	3a01      	subs	r2, #1
     dea:	dc5d      	bgt.n	ea8 <__aeabi_fmul+0x150>
     dec:	f112 0f19 	cmn.w	r2, #25
     df0:	bfdc      	itt	le
     df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     df6:	4770      	bxle	lr
     df8:	f1c2 0200 	rsb	r2, r2, #0
     dfc:	0041      	lsls	r1, r0, #1
     dfe:	fa21 f102 	lsr.w	r1, r1, r2
     e02:	f1c2 0220 	rsb	r2, r2, #32
     e06:	fa00 fc02 	lsl.w	ip, r0, r2
     e0a:	ea5f 0031 	movs.w	r0, r1, rrx
     e0e:	f140 0000 	adc.w	r0, r0, #0
     e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     e16:	bf08      	it	eq
     e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     e1c:	4770      	bx	lr
     e1e:	f092 0f00 	teq	r2, #0
     e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e26:	bf02      	ittt	eq
     e28:	0040      	lsleq	r0, r0, #1
     e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e2e:	3a01      	subeq	r2, #1
     e30:	d0f9      	beq.n	e26 <__aeabi_fmul+0xce>
     e32:	ea40 000c 	orr.w	r0, r0, ip
     e36:	f093 0f00 	teq	r3, #0
     e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e3e:	bf02      	ittt	eq
     e40:	0049      	lsleq	r1, r1, #1
     e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e46:	3b01      	subeq	r3, #1
     e48:	d0f9      	beq.n	e3e <__aeabi_fmul+0xe6>
     e4a:	ea41 010c 	orr.w	r1, r1, ip
     e4e:	e78f      	b.n	d70 <__aeabi_fmul+0x18>
     e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e54:	ea92 0f0c 	teq	r2, ip
     e58:	bf18      	it	ne
     e5a:	ea93 0f0c 	teqne	r3, ip
     e5e:	d00a      	beq.n	e76 <__aeabi_fmul+0x11e>
     e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e64:	bf18      	it	ne
     e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e6a:	d1d8      	bne.n	e1e <__aeabi_fmul+0xc6>
     e6c:	ea80 0001 	eor.w	r0, r0, r1
     e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e74:	4770      	bx	lr
     e76:	f090 0f00 	teq	r0, #0
     e7a:	bf17      	itett	ne
     e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e80:	4608      	moveq	r0, r1
     e82:	f091 0f00 	teqne	r1, #0
     e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e8a:	d014      	beq.n	eb6 <__aeabi_fmul+0x15e>
     e8c:	ea92 0f0c 	teq	r2, ip
     e90:	d101      	bne.n	e96 <__aeabi_fmul+0x13e>
     e92:	0242      	lsls	r2, r0, #9
     e94:	d10f      	bne.n	eb6 <__aeabi_fmul+0x15e>
     e96:	ea93 0f0c 	teq	r3, ip
     e9a:	d103      	bne.n	ea4 <__aeabi_fmul+0x14c>
     e9c:	024b      	lsls	r3, r1, #9
     e9e:	bf18      	it	ne
     ea0:	4608      	movne	r0, r1
     ea2:	d108      	bne.n	eb6 <__aeabi_fmul+0x15e>
     ea4:	ea80 0001 	eor.w	r0, r0, r1
     ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     eb4:	4770      	bx	lr
     eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     ebe:	4770      	bx	lr

00000ec0 <__aeabi_fdiv>:
     ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     ec8:	bf1e      	ittt	ne
     eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     ece:	ea92 0f0c 	teqne	r2, ip
     ed2:	ea93 0f0c 	teqne	r3, ip
     ed6:	d069      	beq.n	fac <__aeabi_fdiv+0xec>
     ed8:	eba2 0203 	sub.w	r2, r2, r3
     edc:	ea80 0c01 	eor.w	ip, r0, r1
     ee0:	0249      	lsls	r1, r1, #9
     ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     ee6:	d037      	beq.n	f58 <__aeabi_fdiv+0x98>
     ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     ef8:	428b      	cmp	r3, r1
     efa:	bf38      	it	cc
     efc:	005b      	lslcc	r3, r3, #1
     efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     f06:	428b      	cmp	r3, r1
     f08:	bf24      	itt	cs
     f0a:	1a5b      	subcs	r3, r3, r1
     f0c:	ea40 000c 	orrcs.w	r0, r0, ip
     f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     f14:	bf24      	itt	cs
     f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     f22:	bf24      	itt	cs
     f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     f30:	bf24      	itt	cs
     f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     f3a:	011b      	lsls	r3, r3, #4
     f3c:	bf18      	it	ne
     f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     f42:	d1e0      	bne.n	f06 <__aeabi_fdiv+0x46>
     f44:	2afd      	cmp	r2, #253	; 0xfd
     f46:	f63f af50 	bhi.w	dea <__aeabi_fmul+0x92>
     f4a:	428b      	cmp	r3, r1
     f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f50:	bf08      	it	eq
     f52:	f020 0001 	biceq.w	r0, r0, #1
     f56:	4770      	bx	lr
     f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f60:	327f      	adds	r2, #127	; 0x7f
     f62:	bfc2      	ittt	gt
     f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f6c:	4770      	bxgt	lr
     f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f72:	f04f 0300 	mov.w	r3, #0
     f76:	3a01      	subs	r2, #1
     f78:	e737      	b.n	dea <__aeabi_fmul+0x92>
     f7a:	f092 0f00 	teq	r2, #0
     f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f82:	bf02      	ittt	eq
     f84:	0040      	lsleq	r0, r0, #1
     f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f8a:	3a01      	subeq	r2, #1
     f8c:	d0f9      	beq.n	f82 <__aeabi_fdiv+0xc2>
     f8e:	ea40 000c 	orr.w	r0, r0, ip
     f92:	f093 0f00 	teq	r3, #0
     f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f9a:	bf02      	ittt	eq
     f9c:	0049      	lsleq	r1, r1, #1
     f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     fa2:	3b01      	subeq	r3, #1
     fa4:	d0f9      	beq.n	f9a <__aeabi_fdiv+0xda>
     fa6:	ea41 010c 	orr.w	r1, r1, ip
     faa:	e795      	b.n	ed8 <__aeabi_fdiv+0x18>
     fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     fb0:	ea92 0f0c 	teq	r2, ip
     fb4:	d108      	bne.n	fc8 <__aeabi_fdiv+0x108>
     fb6:	0242      	lsls	r2, r0, #9
     fb8:	f47f af7d 	bne.w	eb6 <__aeabi_fmul+0x15e>
     fbc:	ea93 0f0c 	teq	r3, ip
     fc0:	f47f af70 	bne.w	ea4 <__aeabi_fmul+0x14c>
     fc4:	4608      	mov	r0, r1
     fc6:	e776      	b.n	eb6 <__aeabi_fmul+0x15e>
     fc8:	ea93 0f0c 	teq	r3, ip
     fcc:	d104      	bne.n	fd8 <__aeabi_fdiv+0x118>
     fce:	024b      	lsls	r3, r1, #9
     fd0:	f43f af4c 	beq.w	e6c <__aeabi_fmul+0x114>
     fd4:	4608      	mov	r0, r1
     fd6:	e76e      	b.n	eb6 <__aeabi_fmul+0x15e>
     fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     fdc:	bf18      	it	ne
     fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     fe2:	d1ca      	bne.n	f7a <__aeabi_fdiv+0xba>
     fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fe8:	f47f af5c 	bne.w	ea4 <__aeabi_fmul+0x14c>
     fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     ff0:	f47f af3c 	bne.w	e6c <__aeabi_fmul+0x114>
     ff4:	e75f      	b.n	eb6 <__aeabi_fmul+0x15e>
     ff6:	bf00      	nop

00000ff8 <__gesf2>:
     ff8:	f04f 3cff 	mov.w	ip, #4294967295
     ffc:	e006      	b.n	100c <__cmpsf2+0x4>
     ffe:	bf00      	nop

00001000 <__lesf2>:
    1000:	f04f 0c01 	mov.w	ip, #1
    1004:	e002      	b.n	100c <__cmpsf2+0x4>
    1006:	bf00      	nop

00001008 <__cmpsf2>:
    1008:	f04f 0c01 	mov.w	ip, #1
    100c:	f84d cd04 	str.w	ip, [sp, #-4]!
    1010:	ea4f 0240 	mov.w	r2, r0, lsl #1
    1014:	ea4f 0341 	mov.w	r3, r1, lsl #1
    1018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    101c:	bf18      	it	ne
    101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1022:	d011      	beq.n	1048 <__cmpsf2+0x40>
    1024:	b001      	add	sp, #4
    1026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    102a:	bf18      	it	ne
    102c:	ea90 0f01 	teqne	r0, r1
    1030:	bf58      	it	pl
    1032:	ebb2 0003 	subspl.w	r0, r2, r3
    1036:	bf88      	it	hi
    1038:	17c8      	asrhi	r0, r1, #31
    103a:	bf38      	it	cc
    103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    1040:	bf18      	it	ne
    1042:	f040 0001 	orrne.w	r0, r0, #1
    1046:	4770      	bx	lr
    1048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    104c:	d102      	bne.n	1054 <__cmpsf2+0x4c>
    104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    1052:	d105      	bne.n	1060 <__cmpsf2+0x58>
    1054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1058:	d1e4      	bne.n	1024 <__cmpsf2+0x1c>
    105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    105e:	d0e1      	beq.n	1024 <__cmpsf2+0x1c>
    1060:	f85d 0b04 	ldr.w	r0, [sp], #4
    1064:	4770      	bx	lr
    1066:	bf00      	nop

00001068 <__aeabi_cfrcmple>:
    1068:	4684      	mov	ip, r0
    106a:	4608      	mov	r0, r1
    106c:	4661      	mov	r1, ip
    106e:	e7ff      	b.n	1070 <__aeabi_cfcmpeq>

00001070 <__aeabi_cfcmpeq>:
    1070:	b50f      	push	{r0, r1, r2, r3, lr}
    1072:	f7ff ffc9 	bl	1008 <__cmpsf2>
    1076:	2800      	cmp	r0, #0
    1078:	bf48      	it	mi
    107a:	f110 0f00 	cmnmi.w	r0, #0
    107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001080 <__aeabi_fcmpeq>:
    1080:	f84d ed08 	str.w	lr, [sp, #-8]!
    1084:	f7ff fff4 	bl	1070 <__aeabi_cfcmpeq>
    1088:	bf0c      	ite	eq
    108a:	2001      	moveq	r0, #1
    108c:	2000      	movne	r0, #0
    108e:	f85d fb08 	ldr.w	pc, [sp], #8
    1092:	bf00      	nop

00001094 <__aeabi_fcmplt>:
    1094:	f84d ed08 	str.w	lr, [sp, #-8]!
    1098:	f7ff ffea 	bl	1070 <__aeabi_cfcmpeq>
    109c:	bf34      	ite	cc
    109e:	2001      	movcc	r0, #1
    10a0:	2000      	movcs	r0, #0
    10a2:	f85d fb08 	ldr.w	pc, [sp], #8
    10a6:	bf00      	nop

000010a8 <__aeabi_fcmple>:
    10a8:	f84d ed08 	str.w	lr, [sp, #-8]!
    10ac:	f7ff ffe0 	bl	1070 <__aeabi_cfcmpeq>
    10b0:	bf94      	ite	ls
    10b2:	2001      	movls	r0, #1
    10b4:	2000      	movhi	r0, #0
    10b6:	f85d fb08 	ldr.w	pc, [sp], #8
    10ba:	bf00      	nop

000010bc <__aeabi_fcmpge>:
    10bc:	f84d ed08 	str.w	lr, [sp, #-8]!
    10c0:	f7ff ffd2 	bl	1068 <__aeabi_cfrcmple>
    10c4:	bf94      	ite	ls
    10c6:	2001      	movls	r0, #1
    10c8:	2000      	movhi	r0, #0
    10ca:	f85d fb08 	ldr.w	pc, [sp], #8
    10ce:	bf00      	nop

000010d0 <__aeabi_fcmpgt>:
    10d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    10d4:	f7ff ffc8 	bl	1068 <__aeabi_cfrcmple>
    10d8:	bf34      	ite	cc
    10da:	2001      	movcc	r0, #1
    10dc:	2000      	movcs	r0, #0
    10de:	f85d fb08 	ldr.w	pc, [sp], #8
    10e2:	bf00      	nop

000010e4 <__aeabi_f2iz>:
    10e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10ec:	d30f      	bcc.n	110e <__aeabi_f2iz+0x2a>
    10ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10f6:	d90d      	bls.n	1114 <__aeabi_f2iz+0x30>
    10f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    1104:	fa23 f002 	lsr.w	r0, r3, r2
    1108:	bf18      	it	ne
    110a:	4240      	negne	r0, r0
    110c:	4770      	bx	lr
    110e:	f04f 0000 	mov.w	r0, #0
    1112:	4770      	bx	lr
    1114:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1118:	d101      	bne.n	111e <__aeabi_f2iz+0x3a>
    111a:	0242      	lsls	r2, r0, #9
    111c:	d105      	bne.n	112a <__aeabi_f2iz+0x46>
    111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    1122:	bf08      	it	eq
    1124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1128:	4770      	bx	lr
    112a:	f04f 0000 	mov.w	r0, #0
    112e:	4770      	bx	lr

00001130 <__aeabi_uldivmod>:
    1130:	b953      	cbnz	r3, 1148 <__aeabi_uldivmod+0x18>
    1132:	b94a      	cbnz	r2, 1148 <__aeabi_uldivmod+0x18>
    1134:	2900      	cmp	r1, #0
    1136:	bf08      	it	eq
    1138:	2800      	cmpeq	r0, #0
    113a:	bf1c      	itt	ne
    113c:	f04f 31ff 	movne.w	r1, #4294967295
    1140:	f04f 30ff 	movne.w	r0, #4294967295
    1144:	f000 b9a4 	b.w	1490 <__aeabi_idiv0>
    1148:	f1ad 0c08 	sub.w	ip, sp, #8
    114c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1150:	f000 f83e 	bl	11d0 <__udivmoddi4>
    1154:	f8dd e004 	ldr.w	lr, [sp, #4]
    1158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    115c:	b004      	add	sp, #16
    115e:	4770      	bx	lr

00001160 <__aeabi_d2lz>:
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4605      	mov	r5, r0
    1164:	460c      	mov	r4, r1
    1166:	4628      	mov	r0, r5
    1168:	4621      	mov	r1, r4
    116a:	2200      	movs	r2, #0
    116c:	2300      	movs	r3, #0
    116e:	f7ff fc45 	bl	9fc <__aeabi_dcmplt>
    1172:	b928      	cbnz	r0, 1180 <__aeabi_d2lz+0x20>
    1174:	4628      	mov	r0, r5
    1176:	4621      	mov	r1, r4
    1178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    117c:	f000 b80a 	b.w	1194 <__aeabi_d2ulz>
    1180:	4628      	mov	r0, r5
    1182:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    1186:	f000 f805 	bl	1194 <__aeabi_d2ulz>
    118a:	4240      	negs	r0, r0
    118c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1190:	bd38      	pop	{r3, r4, r5, pc}
    1192:	bf00      	nop

00001194 <__aeabi_d2ulz>:
    1194:	b5d0      	push	{r4, r6, r7, lr}
    1196:	4b0c      	ldr	r3, [pc, #48]	; (11c8 <__aeabi_d2ulz+0x34>)
    1198:	2200      	movs	r2, #0
    119a:	4606      	mov	r6, r0
    119c:	460f      	mov	r7, r1
    119e:	f7ff f9bb 	bl	518 <__aeabi_dmul>
    11a2:	f000 f977 	bl	1494 <__aeabi_d2uiz>
    11a6:	4604      	mov	r4, r0
    11a8:	f7ff f93c 	bl	424 <__aeabi_ui2d>
    11ac:	4b07      	ldr	r3, [pc, #28]	; (11cc <__aeabi_d2ulz+0x38>)
    11ae:	2200      	movs	r2, #0
    11b0:	f7ff f9b2 	bl	518 <__aeabi_dmul>
    11b4:	4602      	mov	r2, r0
    11b6:	460b      	mov	r3, r1
    11b8:	4630      	mov	r0, r6
    11ba:	4639      	mov	r1, r7
    11bc:	f7fe fff4 	bl	1a8 <__aeabi_dsub>
    11c0:	f000 f968 	bl	1494 <__aeabi_d2uiz>
    11c4:	4621      	mov	r1, r4
    11c6:	bdd0      	pop	{r4, r6, r7, pc}
    11c8:	3df00000 	.word	0x3df00000
    11cc:	41f00000 	.word	0x41f00000

000011d0 <__udivmoddi4>:
    11d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11d4:	9e08      	ldr	r6, [sp, #32]
    11d6:	460d      	mov	r5, r1
    11d8:	4604      	mov	r4, r0
    11da:	468e      	mov	lr, r1
    11dc:	2b00      	cmp	r3, #0
    11de:	f040 8082 	bne.w	12e6 <__udivmoddi4+0x116>
    11e2:	428a      	cmp	r2, r1
    11e4:	4617      	mov	r7, r2
    11e6:	d946      	bls.n	1276 <__udivmoddi4+0xa6>
    11e8:	fab2 f282 	clz	r2, r2
    11ec:	b14a      	cbz	r2, 1202 <__udivmoddi4+0x32>
    11ee:	f1c2 0120 	rsb	r1, r2, #32
    11f2:	fa05 f302 	lsl.w	r3, r5, r2
    11f6:	fa20 f101 	lsr.w	r1, r0, r1
    11fa:	4097      	lsls	r7, r2
    11fc:	ea41 0e03 	orr.w	lr, r1, r3
    1200:	4094      	lsls	r4, r2
    1202:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1206:	0c23      	lsrs	r3, r4, #16
    1208:	fbbe fcf8 	udiv	ip, lr, r8
    120c:	b2b9      	uxth	r1, r7
    120e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1212:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1216:	fb0c f001 	mul.w	r0, ip, r1
    121a:	4298      	cmp	r0, r3
    121c:	d90a      	bls.n	1234 <__udivmoddi4+0x64>
    121e:	18fb      	adds	r3, r7, r3
    1220:	f10c 35ff 	add.w	r5, ip, #4294967295
    1224:	f080 8116 	bcs.w	1454 <__udivmoddi4+0x284>
    1228:	4298      	cmp	r0, r3
    122a:	f240 8113 	bls.w	1454 <__udivmoddi4+0x284>
    122e:	f1ac 0c02 	sub.w	ip, ip, #2
    1232:	443b      	add	r3, r7
    1234:	1a1b      	subs	r3, r3, r0
    1236:	b2a4      	uxth	r4, r4
    1238:	fbb3 f0f8 	udiv	r0, r3, r8
    123c:	fb08 3310 	mls	r3, r8, r0, r3
    1240:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1244:	fb00 f101 	mul.w	r1, r0, r1
    1248:	42a1      	cmp	r1, r4
    124a:	d909      	bls.n	1260 <__udivmoddi4+0x90>
    124c:	193c      	adds	r4, r7, r4
    124e:	f100 33ff 	add.w	r3, r0, #4294967295
    1252:	f080 8101 	bcs.w	1458 <__udivmoddi4+0x288>
    1256:	42a1      	cmp	r1, r4
    1258:	f240 80fe 	bls.w	1458 <__udivmoddi4+0x288>
    125c:	3802      	subs	r0, #2
    125e:	443c      	add	r4, r7
    1260:	1a64      	subs	r4, r4, r1
    1262:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1266:	2100      	movs	r1, #0
    1268:	b11e      	cbz	r6, 1272 <__udivmoddi4+0xa2>
    126a:	40d4      	lsrs	r4, r2
    126c:	2300      	movs	r3, #0
    126e:	e9c6 4300 	strd	r4, r3, [r6]
    1272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1276:	b902      	cbnz	r2, 127a <__udivmoddi4+0xaa>
    1278:	deff      	udf	#255	; 0xff
    127a:	fab2 f282 	clz	r2, r2
    127e:	2a00      	cmp	r2, #0
    1280:	d14f      	bne.n	1322 <__udivmoddi4+0x152>
    1282:	1bcb      	subs	r3, r1, r7
    1284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1288:	fa1f f887 	uxth.w	r8, r7
    128c:	2101      	movs	r1, #1
    128e:	fbb3 fcfe 	udiv	ip, r3, lr
    1292:	0c25      	lsrs	r5, r4, #16
    1294:	fb0e 331c 	mls	r3, lr, ip, r3
    1298:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    129c:	fb08 f30c 	mul.w	r3, r8, ip
    12a0:	42ab      	cmp	r3, r5
    12a2:	d907      	bls.n	12b4 <__udivmoddi4+0xe4>
    12a4:	197d      	adds	r5, r7, r5
    12a6:	f10c 30ff 	add.w	r0, ip, #4294967295
    12aa:	d202      	bcs.n	12b2 <__udivmoddi4+0xe2>
    12ac:	42ab      	cmp	r3, r5
    12ae:	f200 80e7 	bhi.w	1480 <__udivmoddi4+0x2b0>
    12b2:	4684      	mov	ip, r0
    12b4:	1aed      	subs	r5, r5, r3
    12b6:	b2a3      	uxth	r3, r4
    12b8:	fbb5 f0fe 	udiv	r0, r5, lr
    12bc:	fb0e 5510 	mls	r5, lr, r0, r5
    12c0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    12c4:	fb08 f800 	mul.w	r8, r8, r0
    12c8:	45a0      	cmp	r8, r4
    12ca:	d907      	bls.n	12dc <__udivmoddi4+0x10c>
    12cc:	193c      	adds	r4, r7, r4
    12ce:	f100 33ff 	add.w	r3, r0, #4294967295
    12d2:	d202      	bcs.n	12da <__udivmoddi4+0x10a>
    12d4:	45a0      	cmp	r8, r4
    12d6:	f200 80d7 	bhi.w	1488 <__udivmoddi4+0x2b8>
    12da:	4618      	mov	r0, r3
    12dc:	eba4 0408 	sub.w	r4, r4, r8
    12e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    12e4:	e7c0      	b.n	1268 <__udivmoddi4+0x98>
    12e6:	428b      	cmp	r3, r1
    12e8:	d908      	bls.n	12fc <__udivmoddi4+0x12c>
    12ea:	2e00      	cmp	r6, #0
    12ec:	f000 80af 	beq.w	144e <__udivmoddi4+0x27e>
    12f0:	2100      	movs	r1, #0
    12f2:	e9c6 0500 	strd	r0, r5, [r6]
    12f6:	4608      	mov	r0, r1
    12f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12fc:	fab3 f183 	clz	r1, r3
    1300:	2900      	cmp	r1, #0
    1302:	d14b      	bne.n	139c <__udivmoddi4+0x1cc>
    1304:	42ab      	cmp	r3, r5
    1306:	d302      	bcc.n	130e <__udivmoddi4+0x13e>
    1308:	4282      	cmp	r2, r0
    130a:	f200 80b7 	bhi.w	147c <__udivmoddi4+0x2ac>
    130e:	1a84      	subs	r4, r0, r2
    1310:	eb65 0303 	sbc.w	r3, r5, r3
    1314:	2001      	movs	r0, #1
    1316:	469e      	mov	lr, r3
    1318:	2e00      	cmp	r6, #0
    131a:	d0aa      	beq.n	1272 <__udivmoddi4+0xa2>
    131c:	e9c6 4e00 	strd	r4, lr, [r6]
    1320:	e7a7      	b.n	1272 <__udivmoddi4+0xa2>
    1322:	f1c2 0c20 	rsb	ip, r2, #32
    1326:	fa01 f302 	lsl.w	r3, r1, r2
    132a:	4097      	lsls	r7, r2
    132c:	fa20 f00c 	lsr.w	r0, r0, ip
    1330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1334:	fa21 fc0c 	lsr.w	ip, r1, ip
    1338:	4318      	orrs	r0, r3
    133a:	fbbc f1fe 	udiv	r1, ip, lr
    133e:	0c05      	lsrs	r5, r0, #16
    1340:	fb0e cc11 	mls	ip, lr, r1, ip
    1344:	fa1f f887 	uxth.w	r8, r7
    1348:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    134c:	fb01 f308 	mul.w	r3, r1, r8
    1350:	42ab      	cmp	r3, r5
    1352:	fa04 f402 	lsl.w	r4, r4, r2
    1356:	d909      	bls.n	136c <__udivmoddi4+0x19c>
    1358:	197d      	adds	r5, r7, r5
    135a:	f101 3cff 	add.w	ip, r1, #4294967295
    135e:	f080 808b 	bcs.w	1478 <__udivmoddi4+0x2a8>
    1362:	42ab      	cmp	r3, r5
    1364:	f240 8088 	bls.w	1478 <__udivmoddi4+0x2a8>
    1368:	3902      	subs	r1, #2
    136a:	443d      	add	r5, r7
    136c:	1aeb      	subs	r3, r5, r3
    136e:	b285      	uxth	r5, r0
    1370:	fbb3 f0fe 	udiv	r0, r3, lr
    1374:	fb0e 3310 	mls	r3, lr, r0, r3
    1378:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    137c:	fb00 f308 	mul.w	r3, r0, r8
    1380:	42ab      	cmp	r3, r5
    1382:	d907      	bls.n	1394 <__udivmoddi4+0x1c4>
    1384:	197d      	adds	r5, r7, r5
    1386:	f100 3cff 	add.w	ip, r0, #4294967295
    138a:	d271      	bcs.n	1470 <__udivmoddi4+0x2a0>
    138c:	42ab      	cmp	r3, r5
    138e:	d96f      	bls.n	1470 <__udivmoddi4+0x2a0>
    1390:	3802      	subs	r0, #2
    1392:	443d      	add	r5, r7
    1394:	1aeb      	subs	r3, r5, r3
    1396:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    139a:	e778      	b.n	128e <__udivmoddi4+0xbe>
    139c:	f1c1 0c20 	rsb	ip, r1, #32
    13a0:	408b      	lsls	r3, r1
    13a2:	fa22 f70c 	lsr.w	r7, r2, ip
    13a6:	431f      	orrs	r7, r3
    13a8:	fa20 f40c 	lsr.w	r4, r0, ip
    13ac:	fa05 f301 	lsl.w	r3, r5, r1
    13b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    13b4:	fa25 f50c 	lsr.w	r5, r5, ip
    13b8:	431c      	orrs	r4, r3
    13ba:	0c23      	lsrs	r3, r4, #16
    13bc:	fbb5 f9fe 	udiv	r9, r5, lr
    13c0:	fa1f f887 	uxth.w	r8, r7
    13c4:	fb0e 5519 	mls	r5, lr, r9, r5
    13c8:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    13cc:	fb09 fa08 	mul.w	sl, r9, r8
    13d0:	45aa      	cmp	sl, r5
    13d2:	fa02 f201 	lsl.w	r2, r2, r1
    13d6:	fa00 f301 	lsl.w	r3, r0, r1
    13da:	d908      	bls.n	13ee <__udivmoddi4+0x21e>
    13dc:	197d      	adds	r5, r7, r5
    13de:	f109 30ff 	add.w	r0, r9, #4294967295
    13e2:	d247      	bcs.n	1474 <__udivmoddi4+0x2a4>
    13e4:	45aa      	cmp	sl, r5
    13e6:	d945      	bls.n	1474 <__udivmoddi4+0x2a4>
    13e8:	f1a9 0902 	sub.w	r9, r9, #2
    13ec:	443d      	add	r5, r7
    13ee:	eba5 050a 	sub.w	r5, r5, sl
    13f2:	b2a4      	uxth	r4, r4
    13f4:	fbb5 f0fe 	udiv	r0, r5, lr
    13f8:	fb0e 5510 	mls	r5, lr, r0, r5
    13fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1400:	fb00 f808 	mul.w	r8, r0, r8
    1404:	45a0      	cmp	r8, r4
    1406:	d907      	bls.n	1418 <__udivmoddi4+0x248>
    1408:	193c      	adds	r4, r7, r4
    140a:	f100 35ff 	add.w	r5, r0, #4294967295
    140e:	d22d      	bcs.n	146c <__udivmoddi4+0x29c>
    1410:	45a0      	cmp	r8, r4
    1412:	d92b      	bls.n	146c <__udivmoddi4+0x29c>
    1414:	3802      	subs	r0, #2
    1416:	443c      	add	r4, r7
    1418:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    141c:	eba4 0408 	sub.w	r4, r4, r8
    1420:	fba0 8902 	umull	r8, r9, r0, r2
    1424:	454c      	cmp	r4, r9
    1426:	46c6      	mov	lr, r8
    1428:	464d      	mov	r5, r9
    142a:	d319      	bcc.n	1460 <__udivmoddi4+0x290>
    142c:	d016      	beq.n	145c <__udivmoddi4+0x28c>
    142e:	b15e      	cbz	r6, 1448 <__udivmoddi4+0x278>
    1430:	ebb3 020e 	subs.w	r2, r3, lr
    1434:	eb64 0405 	sbc.w	r4, r4, r5
    1438:	fa04 fc0c 	lsl.w	ip, r4, ip
    143c:	40ca      	lsrs	r2, r1
    143e:	ea4c 0202 	orr.w	r2, ip, r2
    1442:	40cc      	lsrs	r4, r1
    1444:	e9c6 2400 	strd	r2, r4, [r6]
    1448:	2100      	movs	r1, #0
    144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    144e:	4631      	mov	r1, r6
    1450:	4630      	mov	r0, r6
    1452:	e70e      	b.n	1272 <__udivmoddi4+0xa2>
    1454:	46ac      	mov	ip, r5
    1456:	e6ed      	b.n	1234 <__udivmoddi4+0x64>
    1458:	4618      	mov	r0, r3
    145a:	e701      	b.n	1260 <__udivmoddi4+0x90>
    145c:	4543      	cmp	r3, r8
    145e:	d2e6      	bcs.n	142e <__udivmoddi4+0x25e>
    1460:	ebb8 0e02 	subs.w	lr, r8, r2
    1464:	eb69 0507 	sbc.w	r5, r9, r7
    1468:	3801      	subs	r0, #1
    146a:	e7e0      	b.n	142e <__udivmoddi4+0x25e>
    146c:	4628      	mov	r0, r5
    146e:	e7d3      	b.n	1418 <__udivmoddi4+0x248>
    1470:	4660      	mov	r0, ip
    1472:	e78f      	b.n	1394 <__udivmoddi4+0x1c4>
    1474:	4681      	mov	r9, r0
    1476:	e7ba      	b.n	13ee <__udivmoddi4+0x21e>
    1478:	4661      	mov	r1, ip
    147a:	e777      	b.n	136c <__udivmoddi4+0x19c>
    147c:	4608      	mov	r0, r1
    147e:	e74b      	b.n	1318 <__udivmoddi4+0x148>
    1480:	f1ac 0c02 	sub.w	ip, ip, #2
    1484:	443d      	add	r5, r7
    1486:	e715      	b.n	12b4 <__udivmoddi4+0xe4>
    1488:	3802      	subs	r0, #2
    148a:	443c      	add	r4, r7
    148c:	e726      	b.n	12dc <__udivmoddi4+0x10c>
    148e:	bf00      	nop

00001490 <__aeabi_idiv0>:
    1490:	4770      	bx	lr
    1492:	bf00      	nop

00001494 <__aeabi_d2uiz>:
    1494:	004a      	lsls	r2, r1, #1
    1496:	d211      	bcs.n	14bc <__aeabi_d2uiz+0x28>
    1498:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    149c:	d211      	bcs.n	14c2 <__aeabi_d2uiz+0x2e>
    149e:	d50d      	bpl.n	14bc <__aeabi_d2uiz+0x28>
    14a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    14a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    14a8:	d40e      	bmi.n	14c8 <__aeabi_d2uiz+0x34>
    14aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    14ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    14b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    14b6:	fa23 f002 	lsr.w	r0, r3, r2
    14ba:	4770      	bx	lr
    14bc:	f04f 0000 	mov.w	r0, #0
    14c0:	4770      	bx	lr
    14c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    14c6:	d102      	bne.n	14ce <__aeabi_d2uiz+0x3a>
    14c8:	f04f 30ff 	mov.w	r0, #4294967295
    14cc:	4770      	bx	lr
    14ce:	f04f 0000 	mov.w	r0, #0
    14d2:	4770      	bx	lr

000014d4 <__aeabi_dcmpun>:
    14d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    14d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14dc:	d102      	bne.n	14e4 <__aeabi_dcmpun+0x10>
    14de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14e2:	d10a      	bne.n	14fa <__aeabi_dcmpun+0x26>
    14e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ec:	d102      	bne.n	14f4 <__aeabi_dcmpun+0x20>
    14ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14f2:	d102      	bne.n	14fa <__aeabi_dcmpun+0x26>
    14f4:	f04f 0000 	mov.w	r0, #0
    14f8:	4770      	bx	lr
    14fa:	f04f 0001 	mov.w	r0, #1
    14fe:	4770      	bx	lr

00001500 <strcmp>:
    1500:	f810 2b01 	ldrb.w	r2, [r0], #1
    1504:	f811 3b01 	ldrb.w	r3, [r1], #1
    1508:	2a01      	cmp	r2, #1
    150a:	bf28      	it	cs
    150c:	429a      	cmpcs	r2, r3
    150e:	d0f7      	beq.n	1500 <strcmp>
    1510:	1ad0      	subs	r0, r2, r3
    1512:	4770      	bx	lr

00001514 <strlen>:
    1514:	4603      	mov	r3, r0
    1516:	f813 2b01 	ldrb.w	r2, [r3], #1
    151a:	2a00      	cmp	r2, #0
    151c:	d1fb      	bne.n	1516 <strlen+0x2>
    151e:	1a18      	subs	r0, r3, r0
    1520:	3801      	subs	r0, #1
    1522:	4770      	bx	lr
    1524:	0000      	movs	r0, r0
	...

00001528 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    152c:	b082      	sub	sp, #8
    152e:	4607      	mov	r7, r0
    1530:	460d      	mov	r5, r1
    1532:	4616      	mov	r6, r2
    1534:	461c      	mov	r4, r3
    1536:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  const double input_product_scale = static_cast<double>(input->params.scale) *
    153a:	68c8      	ldr	r0, [r1, #12]
    153c:	f7fe ff94 	bl	468 <__aeabi_f2d>
    1540:	4680      	mov	r8, r0
    1542:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    1544:	68f0      	ldr	r0, [r6, #12]
    1546:	f7fe ff8f 	bl	468 <__aeabi_f2d>
    154a:	4602      	mov	r2, r0
    154c:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    154e:	4640      	mov	r0, r8
    1550:	4649      	mov	r1, r9
    1552:	f7fe ffe1 	bl	518 <__aeabi_dmul>
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    1556:	b1ec      	cbz	r4, 1594 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6c>
    1558:	4680      	mov	r8, r0
    155a:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    155c:	68e0      	ldr	r0, [r4, #12]
    155e:	f7fe ff83 	bl	468 <__aeabi_f2d>
    1562:	4602      	mov	r2, r0
    1564:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    1566:	4640      	mov	r0, r8
    1568:	4649      	mov	r1, r9
    156a:	f7fe fe1d 	bl	1a8 <__aeabi_dsub>
    156e:	4680      	mov	r8, r0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1570:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    1574:	f8da 000c 	ldr.w	r0, [sl, #12]
    1578:	f7fe ff76 	bl	468 <__aeabi_f2d>
    157c:	4602      	mov	r2, r0
    157e:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1580:	4640      	mov	r0, r8
    1582:	4621      	mov	r1, r4
    1584:	f7ff f8f2 	bl	76c <__aeabi_ddiv>
    1588:	a30d      	add	r3, pc, #52	; (adr r3, 15c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    158a:	e9d3 2300 	ldrd	r2, r3, [r3]
    158e:	f7ff fa3f 	bl	a10 <__aeabi_dcmple>
    1592:	b150      	cbz	r0, 15aa <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x82>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    1594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1596:	9300      	str	r3, [sp, #0]
    1598:	4653      	mov	r3, sl
    159a:	4632      	mov	r2, r6
    159c:	4629      	mov	r1, r5
    159e:	4638      	mov	r0, r7
    15a0:	f007 fc7a 	bl	8e98 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                          multiplier);
}
    15a4:	b002      	add	sp, #8
    15a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15aa:	697c      	ldr	r4, [r7, #20]
    15ac:	4b06      	ldr	r3, [pc, #24]	; (15c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    15ae:	9300      	str	r3, [sp, #0]
    15b0:	f44f 739f 	mov.w	r3, #318	; 0x13e
    15b4:	4a05      	ldr	r2, [pc, #20]	; (15cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    15b6:	4906      	ldr	r1, [pc, #24]	; (15d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    15b8:	4638      	mov	r0, r7
    15ba:	47a0      	blx	r4
    15bc:	2001      	movs	r0, #1
    15be:	e7f1      	b.n	15a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7c>
    15c0:	47ae147b 	.word	0x47ae147b
    15c4:	3f947ae1 	.word	0x3f947ae1
    15c8:	00056fe4 	.word	0x00056fe4
    15cc:	00056f54 	.word	0x00056f54
    15d0:	00056d50 	.word	0x00056d50
    15d4:	00000000 	.word	0x00000000

000015d8 <_dtoa_r>:
    15d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    15de:	b099      	sub	sp, #100	; 0x64
    15e0:	4616      	mov	r6, r2
    15e2:	461f      	mov	r7, r3
    15e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
    15e8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    15ec:	4605      	mov	r5, r0
    15ee:	b93c      	cbnz	r4, 1600 <_dtoa_r+0x28>
    15f0:	2010      	movs	r0, #16
    15f2:	f00a fff1 	bl	c5d8 <malloc>
    15f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
    15fa:	6268      	str	r0, [r5, #36]	; 0x24
    15fc:	6004      	str	r4, [r0, #0]
    15fe:	60c4      	str	r4, [r0, #12]
    1600:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1602:	6819      	ldr	r1, [r3, #0]
    1604:	b151      	cbz	r1, 161c <_dtoa_r+0x44>
    1606:	685a      	ldr	r2, [r3, #4]
    1608:	604a      	str	r2, [r1, #4]
    160a:	2301      	movs	r3, #1
    160c:	4093      	lsls	r3, r2
    160e:	608b      	str	r3, [r1, #8]
    1610:	4628      	mov	r0, r5
    1612:	f00f f80e 	bl	10632 <_Bfree>
    1616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1618:	2200      	movs	r2, #0
    161a:	601a      	str	r2, [r3, #0]
    161c:	1e3b      	subs	r3, r7, #0
    161e:	bfb9      	ittee	lt
    1620:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1624:	9305      	strlt	r3, [sp, #20]
    1626:	2300      	movge	r3, #0
    1628:	f8c8 3000 	strge.w	r3, [r8]
    162c:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1630:	4ba7      	ldr	r3, [pc, #668]	; (18d0 <_dtoa_r+0x2f8>)
    1632:	bfbc      	itt	lt
    1634:	2201      	movlt	r2, #1
    1636:	f8c8 2000 	strlt.w	r2, [r8]
    163a:	ea33 0309 	bics.w	r3, r3, r9
    163e:	d119      	bne.n	1674 <_dtoa_r+0x9c>
    1640:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1642:	f242 730f 	movw	r3, #9999	; 0x270f
    1646:	6013      	str	r3, [r2, #0]
    1648:	f3c9 0313 	ubfx	r3, r9, #0, #20
    164c:	4333      	orrs	r3, r6
    164e:	f000 856d 	beq.w	212c <_dtoa_r+0xb54>
    1652:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1654:	b953      	cbnz	r3, 166c <_dtoa_r+0x94>
    1656:	4b9f      	ldr	r3, [pc, #636]	; (18d4 <_dtoa_r+0x2fc>)
    1658:	e023      	b.n	16a2 <_dtoa_r+0xca>
    165a:	4b9f      	ldr	r3, [pc, #636]	; (18d8 <_dtoa_r+0x300>)
    165c:	9303      	str	r3, [sp, #12]
    165e:	3308      	adds	r3, #8
    1660:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1662:	6013      	str	r3, [r2, #0]
    1664:	9803      	ldr	r0, [sp, #12]
    1666:	b019      	add	sp, #100	; 0x64
    1668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    166c:	4b99      	ldr	r3, [pc, #612]	; (18d4 <_dtoa_r+0x2fc>)
    166e:	9303      	str	r3, [sp, #12]
    1670:	3303      	adds	r3, #3
    1672:	e7f5      	b.n	1660 <_dtoa_r+0x88>
    1674:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1678:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    167c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1680:	2200      	movs	r2, #0
    1682:	2300      	movs	r3, #0
    1684:	f7ff f9b0 	bl	9e8 <__aeabi_dcmpeq>
    1688:	4680      	mov	r8, r0
    168a:	b160      	cbz	r0, 16a6 <_dtoa_r+0xce>
    168c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    168e:	2301      	movs	r3, #1
    1690:	6013      	str	r3, [r2, #0]
    1692:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1694:	2b00      	cmp	r3, #0
    1696:	f000 8546 	beq.w	2126 <_dtoa_r+0xb4e>
    169a:	4b90      	ldr	r3, [pc, #576]	; (18dc <_dtoa_r+0x304>)
    169c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    169e:	6013      	str	r3, [r2, #0]
    16a0:	3b01      	subs	r3, #1
    16a2:	9303      	str	r3, [sp, #12]
    16a4:	e7de      	b.n	1664 <_dtoa_r+0x8c>
    16a6:	ab16      	add	r3, sp, #88	; 0x58
    16a8:	9301      	str	r3, [sp, #4]
    16aa:	ab17      	add	r3, sp, #92	; 0x5c
    16ac:	9300      	str	r3, [sp, #0]
    16ae:	4628      	mov	r0, r5
    16b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    16b4:	f00f f9f5 	bl	10aa2 <__d2b>
    16b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
    16bc:	4683      	mov	fp, r0
    16be:	2c00      	cmp	r4, #0
    16c0:	d07e      	beq.n	17c0 <_dtoa_r+0x1e8>
    16c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    16c4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    16c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    16cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    16d0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    16d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    16d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    16dc:	4b80      	ldr	r3, [pc, #512]	; (18e0 <_dtoa_r+0x308>)
    16de:	2200      	movs	r2, #0
    16e0:	f7fe fd62 	bl	1a8 <__aeabi_dsub>
    16e4:	a374      	add	r3, pc, #464	; (adr r3, 18b8 <_dtoa_r+0x2e0>)
    16e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    16ea:	f7fe ff15 	bl	518 <__aeabi_dmul>
    16ee:	a374      	add	r3, pc, #464	; (adr r3, 18c0 <_dtoa_r+0x2e8>)
    16f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    16f4:	f7fe fd5a 	bl	1ac <__adddf3>
    16f8:	4606      	mov	r6, r0
    16fa:	4620      	mov	r0, r4
    16fc:	460f      	mov	r7, r1
    16fe:	f7fe fea1 	bl	444 <__aeabi_i2d>
    1702:	a371      	add	r3, pc, #452	; (adr r3, 18c8 <_dtoa_r+0x2f0>)
    1704:	e9d3 2300 	ldrd	r2, r3, [r3]
    1708:	f7fe ff06 	bl	518 <__aeabi_dmul>
    170c:	4602      	mov	r2, r0
    170e:	460b      	mov	r3, r1
    1710:	4630      	mov	r0, r6
    1712:	4639      	mov	r1, r7
    1714:	f7fe fd4a 	bl	1ac <__adddf3>
    1718:	4606      	mov	r6, r0
    171a:	460f      	mov	r7, r1
    171c:	f7ff f996 	bl	a4c <__aeabi_d2iz>
    1720:	2200      	movs	r2, #0
    1722:	4682      	mov	sl, r0
    1724:	2300      	movs	r3, #0
    1726:	4630      	mov	r0, r6
    1728:	4639      	mov	r1, r7
    172a:	f7ff f967 	bl	9fc <__aeabi_dcmplt>
    172e:	b148      	cbz	r0, 1744 <_dtoa_r+0x16c>
    1730:	4650      	mov	r0, sl
    1732:	f7fe fe87 	bl	444 <__aeabi_i2d>
    1736:	4632      	mov	r2, r6
    1738:	463b      	mov	r3, r7
    173a:	f7ff f955 	bl	9e8 <__aeabi_dcmpeq>
    173e:	b908      	cbnz	r0, 1744 <_dtoa_r+0x16c>
    1740:	f10a 3aff 	add.w	sl, sl, #4294967295
    1744:	f1ba 0f16 	cmp.w	sl, #22
    1748:	d857      	bhi.n	17fa <_dtoa_r+0x222>
    174a:	4b66      	ldr	r3, [pc, #408]	; (18e4 <_dtoa_r+0x30c>)
    174c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1750:	e9d3 2300 	ldrd	r2, r3, [r3]
    1754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1758:	f7ff f950 	bl	9fc <__aeabi_dcmplt>
    175c:	2800      	cmp	r0, #0
    175e:	d04e      	beq.n	17fe <_dtoa_r+0x226>
    1760:	f10a 3aff 	add.w	sl, sl, #4294967295
    1764:	2300      	movs	r3, #0
    1766:	930f      	str	r3, [sp, #60]	; 0x3c
    1768:	9b16      	ldr	r3, [sp, #88]	; 0x58
    176a:	1b1c      	subs	r4, r3, r4
    176c:	1e63      	subs	r3, r4, #1
    176e:	9309      	str	r3, [sp, #36]	; 0x24
    1770:	bf45      	ittet	mi
    1772:	f1c4 0301 	rsbmi	r3, r4, #1
    1776:	9306      	strmi	r3, [sp, #24]
    1778:	2300      	movpl	r3, #0
    177a:	2300      	movmi	r3, #0
    177c:	bf4c      	ite	mi
    177e:	9309      	strmi	r3, [sp, #36]	; 0x24
    1780:	9306      	strpl	r3, [sp, #24]
    1782:	f1ba 0f00 	cmp.w	sl, #0
    1786:	db3c      	blt.n	1802 <_dtoa_r+0x22a>
    1788:	9b09      	ldr	r3, [sp, #36]	; 0x24
    178a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    178e:	4453      	add	r3, sl
    1790:	9309      	str	r3, [sp, #36]	; 0x24
    1792:	2300      	movs	r3, #0
    1794:	930a      	str	r3, [sp, #40]	; 0x28
    1796:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1798:	2b09      	cmp	r3, #9
    179a:	f200 80b5 	bhi.w	1908 <_dtoa_r+0x330>
    179e:	2b05      	cmp	r3, #5
    17a0:	bfc4      	itt	gt
    17a2:	3b04      	subgt	r3, #4
    17a4:	9322      	strgt	r3, [sp, #136]	; 0x88
    17a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    17a8:	f1a3 0302 	sub.w	r3, r3, #2
    17ac:	bfcc      	ite	gt
    17ae:	2400      	movgt	r4, #0
    17b0:	2401      	movle	r4, #1
    17b2:	2b03      	cmp	r3, #3
    17b4:	f200 80b4 	bhi.w	1920 <_dtoa_r+0x348>
    17b8:	e8df f003 	tbb	[pc, r3]
    17bc:	a47a982d 	.word	0xa47a982d
    17c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    17c4:	441c      	add	r4, r3
    17c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
    17ca:	2b20      	cmp	r3, #32
    17cc:	bfc3      	ittte	gt
    17ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    17d2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    17d6:	fa09 f303 	lslgt.w	r3, r9, r3
    17da:	f1c3 0320 	rsble	r3, r3, #32
    17de:	bfc6      	itte	gt
    17e0:	fa26 f000 	lsrgt.w	r0, r6, r0
    17e4:	4318      	orrgt	r0, r3
    17e6:	fa06 f003 	lslle.w	r0, r6, r3
    17ea:	f7fe fe1b 	bl	424 <__aeabi_ui2d>
    17ee:	2301      	movs	r3, #1
    17f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    17f4:	3c01      	subs	r4, #1
    17f6:	9313      	str	r3, [sp, #76]	; 0x4c
    17f8:	e770      	b.n	16dc <_dtoa_r+0x104>
    17fa:	2301      	movs	r3, #1
    17fc:	e7b3      	b.n	1766 <_dtoa_r+0x18e>
    17fe:	900f      	str	r0, [sp, #60]	; 0x3c
    1800:	e7b2      	b.n	1768 <_dtoa_r+0x190>
    1802:	9b06      	ldr	r3, [sp, #24]
    1804:	eba3 030a 	sub.w	r3, r3, sl
    1808:	9306      	str	r3, [sp, #24]
    180a:	f1ca 0300 	rsb	r3, sl, #0
    180e:	930a      	str	r3, [sp, #40]	; 0x28
    1810:	2300      	movs	r3, #0
    1812:	930e      	str	r3, [sp, #56]	; 0x38
    1814:	e7bf      	b.n	1796 <_dtoa_r+0x1be>
    1816:	2300      	movs	r3, #0
    1818:	930b      	str	r3, [sp, #44]	; 0x2c
    181a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    181c:	2b00      	cmp	r3, #0
    181e:	f300 8082 	bgt.w	1926 <_dtoa_r+0x34e>
    1822:	f04f 0901 	mov.w	r9, #1
    1826:	f8cd 9020 	str.w	r9, [sp, #32]
    182a:	464b      	mov	r3, r9
    182c:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    1830:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    1832:	2200      	movs	r2, #0
    1834:	6072      	str	r2, [r6, #4]
    1836:	2204      	movs	r2, #4
    1838:	f102 0014 	add.w	r0, r2, #20
    183c:	4298      	cmp	r0, r3
    183e:	6871      	ldr	r1, [r6, #4]
    1840:	d977      	bls.n	1932 <_dtoa_r+0x35a>
    1842:	4628      	mov	r0, r5
    1844:	f00e fec1 	bl	105ca <_Balloc>
    1848:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    184a:	6030      	str	r0, [r6, #0]
    184c:	681b      	ldr	r3, [r3, #0]
    184e:	9303      	str	r3, [sp, #12]
    1850:	9b08      	ldr	r3, [sp, #32]
    1852:	2b0e      	cmp	r3, #14
    1854:	f200 80ee 	bhi.w	1a34 <_dtoa_r+0x45c>
    1858:	2c00      	cmp	r4, #0
    185a:	f000 80eb 	beq.w	1a34 <_dtoa_r+0x45c>
    185e:	f1ba 0f00 	cmp.w	sl, #0
    1862:	dd7a      	ble.n	195a <_dtoa_r+0x382>
    1864:	4a1f      	ldr	r2, [pc, #124]	; (18e4 <_dtoa_r+0x30c>)
    1866:	f00a 030f 	and.w	r3, sl, #15
    186a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    186e:	e9d3 3400 	ldrd	r3, r4, [r3]
    1872:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1876:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    187a:	ea4f 142a 	mov.w	r4, sl, asr #4
    187e:	d05c      	beq.n	193a <_dtoa_r+0x362>
    1880:	4b19      	ldr	r3, [pc, #100]	; (18e8 <_dtoa_r+0x310>)
    1882:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    188a:	f7fe ff6f 	bl	76c <__aeabi_ddiv>
    188e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1892:	f004 040f 	and.w	r4, r4, #15
    1896:	2703      	movs	r7, #3
    1898:	4e13      	ldr	r6, [pc, #76]	; (18e8 <_dtoa_r+0x310>)
    189a:	2c00      	cmp	r4, #0
    189c:	d14f      	bne.n	193e <_dtoa_r+0x366>
    189e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    18a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    18a6:	f7fe ff61 	bl	76c <__aeabi_ddiv>
    18aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
    18ae:	e06e      	b.n	198e <_dtoa_r+0x3b6>
    18b0:	2301      	movs	r3, #1
    18b2:	e7b1      	b.n	1818 <_dtoa_r+0x240>
    18b4:	f3af 8000 	nop.w
    18b8:	636f4361 	.word	0x636f4361
    18bc:	3fd287a7 	.word	0x3fd287a7
    18c0:	8b60c8b3 	.word	0x8b60c8b3
    18c4:	3fc68a28 	.word	0x3fc68a28
    18c8:	509f79fb 	.word	0x509f79fb
    18cc:	3fd34413 	.word	0x3fd34413
    18d0:	7ff00000 	.word	0x7ff00000
    18d4:	00057a47 	.word	0x00057a47
    18d8:	00057a3e 	.word	0x00057a3e
    18dc:	00057a1b 	.word	0x00057a1b
    18e0:	3ff80000 	.word	0x3ff80000
    18e4:	00010fb0 	.word	0x00010fb0
    18e8:	00010f88 	.word	0x00010f88
    18ec:	2300      	movs	r3, #0
    18ee:	930b      	str	r3, [sp, #44]	; 0x2c
    18f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    18f2:	eb0a 0903 	add.w	r9, sl, r3
    18f6:	f109 0301 	add.w	r3, r9, #1
    18fa:	2b01      	cmp	r3, #1
    18fc:	9308      	str	r3, [sp, #32]
    18fe:	bfb8      	it	lt
    1900:	2301      	movlt	r3, #1
    1902:	e795      	b.n	1830 <_dtoa_r+0x258>
    1904:	2301      	movs	r3, #1
    1906:	e7f2      	b.n	18ee <_dtoa_r+0x316>
    1908:	2401      	movs	r4, #1
    190a:	2300      	movs	r3, #0
    190c:	9322      	str	r3, [sp, #136]	; 0x88
    190e:	940b      	str	r4, [sp, #44]	; 0x2c
    1910:	f04f 39ff 	mov.w	r9, #4294967295
    1914:	2200      	movs	r2, #0
    1916:	f8cd 9020 	str.w	r9, [sp, #32]
    191a:	2312      	movs	r3, #18
    191c:	9223      	str	r2, [sp, #140]	; 0x8c
    191e:	e787      	b.n	1830 <_dtoa_r+0x258>
    1920:	2301      	movs	r3, #1
    1922:	930b      	str	r3, [sp, #44]	; 0x2c
    1924:	e7f4      	b.n	1910 <_dtoa_r+0x338>
    1926:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    192a:	f8cd 9020 	str.w	r9, [sp, #32]
    192e:	464b      	mov	r3, r9
    1930:	e77e      	b.n	1830 <_dtoa_r+0x258>
    1932:	3101      	adds	r1, #1
    1934:	6071      	str	r1, [r6, #4]
    1936:	0052      	lsls	r2, r2, #1
    1938:	e77e      	b.n	1838 <_dtoa_r+0x260>
    193a:	2702      	movs	r7, #2
    193c:	e7ac      	b.n	1898 <_dtoa_r+0x2c0>
    193e:	07e1      	lsls	r1, r4, #31
    1940:	d508      	bpl.n	1954 <_dtoa_r+0x37c>
    1942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1946:	e9d6 2300 	ldrd	r2, r3, [r6]
    194a:	f7fe fde5 	bl	518 <__aeabi_dmul>
    194e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1952:	3701      	adds	r7, #1
    1954:	1064      	asrs	r4, r4, #1
    1956:	3608      	adds	r6, #8
    1958:	e79f      	b.n	189a <_dtoa_r+0x2c2>
    195a:	f000 80a5 	beq.w	1aa8 <_dtoa_r+0x4d0>
    195e:	f1ca 0400 	rsb	r4, sl, #0
    1962:	4ba4      	ldr	r3, [pc, #656]	; (1bf4 <_dtoa_r+0x61c>)
    1964:	4ea4      	ldr	r6, [pc, #656]	; (1bf8 <_dtoa_r+0x620>)
    1966:	f004 020f 	and.w	r2, r4, #15
    196a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    196e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1972:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1976:	f7fe fdcf 	bl	518 <__aeabi_dmul>
    197a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    197e:	1124      	asrs	r4, r4, #4
    1980:	2300      	movs	r3, #0
    1982:	2702      	movs	r7, #2
    1984:	2c00      	cmp	r4, #0
    1986:	f040 8084 	bne.w	1a92 <_dtoa_r+0x4ba>
    198a:	2b00      	cmp	r3, #0
    198c:	d18d      	bne.n	18aa <_dtoa_r+0x2d2>
    198e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1990:	2b00      	cmp	r3, #0
    1992:	f000 808b 	beq.w	1aac <_dtoa_r+0x4d4>
    1996:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    199a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    199e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    19a2:	4b96      	ldr	r3, [pc, #600]	; (1bfc <_dtoa_r+0x624>)
    19a4:	2200      	movs	r2, #0
    19a6:	f7ff f829 	bl	9fc <__aeabi_dcmplt>
    19aa:	2800      	cmp	r0, #0
    19ac:	d07e      	beq.n	1aac <_dtoa_r+0x4d4>
    19ae:	9b08      	ldr	r3, [sp, #32]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d07b      	beq.n	1aac <_dtoa_r+0x4d4>
    19b4:	f1b9 0f00 	cmp.w	r9, #0
    19b8:	dd38      	ble.n	1a2c <_dtoa_r+0x454>
    19ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    19be:	4b90      	ldr	r3, [pc, #576]	; (1c00 <_dtoa_r+0x628>)
    19c0:	2200      	movs	r2, #0
    19c2:	f7fe fda9 	bl	518 <__aeabi_dmul>
    19c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    19ca:	f10a 38ff 	add.w	r8, sl, #4294967295
    19ce:	3701      	adds	r7, #1
    19d0:	464c      	mov	r4, r9
    19d2:	4638      	mov	r0, r7
    19d4:	f7fe fd36 	bl	444 <__aeabi_i2d>
    19d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    19dc:	f7fe fd9c 	bl	518 <__aeabi_dmul>
    19e0:	4b88      	ldr	r3, [pc, #544]	; (1c04 <_dtoa_r+0x62c>)
    19e2:	2200      	movs	r2, #0
    19e4:	f7fe fbe2 	bl	1ac <__adddf3>
    19e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    19ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    19f0:	9611      	str	r6, [sp, #68]	; 0x44
    19f2:	2c00      	cmp	r4, #0
    19f4:	d15d      	bne.n	1ab2 <_dtoa_r+0x4da>
    19f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    19fa:	4b83      	ldr	r3, [pc, #524]	; (1c08 <_dtoa_r+0x630>)
    19fc:	2200      	movs	r2, #0
    19fe:	f7fe fbd3 	bl	1a8 <__aeabi_dsub>
    1a02:	4602      	mov	r2, r0
    1a04:	460b      	mov	r3, r1
    1a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1a0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a0c:	4633      	mov	r3, r6
    1a0e:	f7ff f813 	bl	a38 <__aeabi_dcmpgt>
    1a12:	2800      	cmp	r0, #0
    1a14:	f040 8297 	bne.w	1f46 <_dtoa_r+0x96e>
    1a18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1a22:	f7fe ffeb 	bl	9fc <__aeabi_dcmplt>
    1a26:	2800      	cmp	r0, #0
    1a28:	f040 828b 	bne.w	1f42 <_dtoa_r+0x96a>
    1a2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1a30:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1a36:	2b00      	cmp	r3, #0
    1a38:	f2c0 8151 	blt.w	1cde <_dtoa_r+0x706>
    1a3c:	f1ba 0f0e 	cmp.w	sl, #14
    1a40:	f300 814d 	bgt.w	1cde <_dtoa_r+0x706>
    1a44:	4b6b      	ldr	r3, [pc, #428]	; (1bf4 <_dtoa_r+0x61c>)
    1a46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1a4a:	e9d3 3400 	ldrd	r3, r4, [r3]
    1a4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1a52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1a54:	2b00      	cmp	r3, #0
    1a56:	f280 80db 	bge.w	1c10 <_dtoa_r+0x638>
    1a5a:	9b08      	ldr	r3, [sp, #32]
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	f300 80d7 	bgt.w	1c10 <_dtoa_r+0x638>
    1a62:	f040 826d 	bne.w	1f40 <_dtoa_r+0x968>
    1a66:	4b68      	ldr	r3, [pc, #416]	; (1c08 <_dtoa_r+0x630>)
    1a68:	2200      	movs	r2, #0
    1a6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1a6e:	f7fe fd53 	bl	518 <__aeabi_dmul>
    1a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1a76:	f7fe ffd5 	bl	a24 <__aeabi_dcmpge>
    1a7a:	9c08      	ldr	r4, [sp, #32]
    1a7c:	4626      	mov	r6, r4
    1a7e:	2800      	cmp	r0, #0
    1a80:	f040 8243 	bne.w	1f0a <_dtoa_r+0x932>
    1a84:	9f03      	ldr	r7, [sp, #12]
    1a86:	2331      	movs	r3, #49	; 0x31
    1a88:	f807 3b01 	strb.w	r3, [r7], #1
    1a8c:	f10a 0a01 	add.w	sl, sl, #1
    1a90:	e23f      	b.n	1f12 <_dtoa_r+0x93a>
    1a92:	07e2      	lsls	r2, r4, #31
    1a94:	d505      	bpl.n	1aa2 <_dtoa_r+0x4ca>
    1a96:	e9d6 2300 	ldrd	r2, r3, [r6]
    1a9a:	f7fe fd3d 	bl	518 <__aeabi_dmul>
    1a9e:	3701      	adds	r7, #1
    1aa0:	2301      	movs	r3, #1
    1aa2:	1064      	asrs	r4, r4, #1
    1aa4:	3608      	adds	r6, #8
    1aa6:	e76d      	b.n	1984 <_dtoa_r+0x3ac>
    1aa8:	2702      	movs	r7, #2
    1aaa:	e770      	b.n	198e <_dtoa_r+0x3b6>
    1aac:	9c08      	ldr	r4, [sp, #32]
    1aae:	46d0      	mov	r8, sl
    1ab0:	e78f      	b.n	19d2 <_dtoa_r+0x3fa>
    1ab2:	9903      	ldr	r1, [sp, #12]
    1ab4:	4b4f      	ldr	r3, [pc, #316]	; (1bf4 <_dtoa_r+0x61c>)
    1ab6:	4421      	add	r1, r4
    1ab8:	9112      	str	r1, [sp, #72]	; 0x48
    1aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1abc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1ac0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1ac4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1ac8:	2900      	cmp	r1, #0
    1aca:	d046      	beq.n	1b5a <_dtoa_r+0x582>
    1acc:	494f      	ldr	r1, [pc, #316]	; (1c0c <_dtoa_r+0x634>)
    1ace:	2000      	movs	r0, #0
    1ad0:	f7fe fe4c 	bl	76c <__aeabi_ddiv>
    1ad4:	463b      	mov	r3, r7
    1ad6:	4632      	mov	r2, r6
    1ad8:	f7fe fb66 	bl	1a8 <__aeabi_dsub>
    1adc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1ae0:	9f03      	ldr	r7, [sp, #12]
    1ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1ae6:	f7fe ffb1 	bl	a4c <__aeabi_d2iz>
    1aea:	4604      	mov	r4, r0
    1aec:	f7fe fcaa 	bl	444 <__aeabi_i2d>
    1af0:	4602      	mov	r2, r0
    1af2:	460b      	mov	r3, r1
    1af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1af8:	f7fe fb56 	bl	1a8 <__aeabi_dsub>
    1afc:	3430      	adds	r4, #48	; 0x30
    1afe:	4602      	mov	r2, r0
    1b00:	460b      	mov	r3, r1
    1b02:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1b06:	f807 4b01 	strb.w	r4, [r7], #1
    1b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1b0e:	f7fe ff75 	bl	9fc <__aeabi_dcmplt>
    1b12:	2800      	cmp	r0, #0
    1b14:	d165      	bne.n	1be2 <_dtoa_r+0x60a>
    1b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1b1a:	4938      	ldr	r1, [pc, #224]	; (1bfc <_dtoa_r+0x624>)
    1b1c:	2000      	movs	r0, #0
    1b1e:	f7fe fb43 	bl	1a8 <__aeabi_dsub>
    1b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1b26:	f7fe ff69 	bl	9fc <__aeabi_dcmplt>
    1b2a:	2800      	cmp	r0, #0
    1b2c:	f040 80b6 	bne.w	1c9c <_dtoa_r+0x6c4>
    1b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b32:	429f      	cmp	r7, r3
    1b34:	f43f af7a 	beq.w	1a2c <_dtoa_r+0x454>
    1b38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1b3c:	4b30      	ldr	r3, [pc, #192]	; (1c00 <_dtoa_r+0x628>)
    1b3e:	2200      	movs	r2, #0
    1b40:	f7fe fcea 	bl	518 <__aeabi_dmul>
    1b44:	4b2e      	ldr	r3, [pc, #184]	; (1c00 <_dtoa_r+0x628>)
    1b46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1b4a:	2200      	movs	r2, #0
    1b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b50:	f7fe fce2 	bl	518 <__aeabi_dmul>
    1b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1b58:	e7c3      	b.n	1ae2 <_dtoa_r+0x50a>
    1b5a:	4630      	mov	r0, r6
    1b5c:	4639      	mov	r1, r7
    1b5e:	f7fe fcdb 	bl	518 <__aeabi_dmul>
    1b62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1b66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b68:	9c03      	ldr	r4, [sp, #12]
    1b6a:	9314      	str	r3, [sp, #80]	; 0x50
    1b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b70:	f7fe ff6c 	bl	a4c <__aeabi_d2iz>
    1b74:	9015      	str	r0, [sp, #84]	; 0x54
    1b76:	f7fe fc65 	bl	444 <__aeabi_i2d>
    1b7a:	4602      	mov	r2, r0
    1b7c:	460b      	mov	r3, r1
    1b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b82:	f7fe fb11 	bl	1a8 <__aeabi_dsub>
    1b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b88:	3330      	adds	r3, #48	; 0x30
    1b8a:	f804 3b01 	strb.w	r3, [r4], #1
    1b8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b90:	429c      	cmp	r4, r3
    1b92:	4606      	mov	r6, r0
    1b94:	460f      	mov	r7, r1
    1b96:	f04f 0200 	mov.w	r2, #0
    1b9a:	d124      	bne.n	1be6 <_dtoa_r+0x60e>
    1b9c:	4b1b      	ldr	r3, [pc, #108]	; (1c0c <_dtoa_r+0x634>)
    1b9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1ba2:	f7fe fb03 	bl	1ac <__adddf3>
    1ba6:	4602      	mov	r2, r0
    1ba8:	460b      	mov	r3, r1
    1baa:	4630      	mov	r0, r6
    1bac:	4639      	mov	r1, r7
    1bae:	f7fe ff43 	bl	a38 <__aeabi_dcmpgt>
    1bb2:	2800      	cmp	r0, #0
    1bb4:	d171      	bne.n	1c9a <_dtoa_r+0x6c2>
    1bb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1bba:	4914      	ldr	r1, [pc, #80]	; (1c0c <_dtoa_r+0x634>)
    1bbc:	2000      	movs	r0, #0
    1bbe:	f7fe faf3 	bl	1a8 <__aeabi_dsub>
    1bc2:	4602      	mov	r2, r0
    1bc4:	460b      	mov	r3, r1
    1bc6:	4630      	mov	r0, r6
    1bc8:	4639      	mov	r1, r7
    1bca:	f7fe ff17 	bl	9fc <__aeabi_dcmplt>
    1bce:	2800      	cmp	r0, #0
    1bd0:	f43f af2c 	beq.w	1a2c <_dtoa_r+0x454>
    1bd4:	9f14      	ldr	r7, [sp, #80]	; 0x50
    1bd6:	1e7b      	subs	r3, r7, #1
    1bd8:	9314      	str	r3, [sp, #80]	; 0x50
    1bda:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    1bde:	2b30      	cmp	r3, #48	; 0x30
    1be0:	d0f8      	beq.n	1bd4 <_dtoa_r+0x5fc>
    1be2:	46c2      	mov	sl, r8
    1be4:	e049      	b.n	1c7a <_dtoa_r+0x6a2>
    1be6:	4b06      	ldr	r3, [pc, #24]	; (1c00 <_dtoa_r+0x628>)
    1be8:	f7fe fc96 	bl	518 <__aeabi_dmul>
    1bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1bf0:	e7bc      	b.n	1b6c <_dtoa_r+0x594>
    1bf2:	bf00      	nop
    1bf4:	00010fb0 	.word	0x00010fb0
    1bf8:	00010f88 	.word	0x00010f88
    1bfc:	3ff00000 	.word	0x3ff00000
    1c00:	40240000 	.word	0x40240000
    1c04:	401c0000 	.word	0x401c0000
    1c08:	40140000 	.word	0x40140000
    1c0c:	3fe00000 	.word	0x3fe00000
    1c10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    1c14:	9f03      	ldr	r7, [sp, #12]
    1c16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1c1a:	4640      	mov	r0, r8
    1c1c:	4649      	mov	r1, r9
    1c1e:	f7fe fda5 	bl	76c <__aeabi_ddiv>
    1c22:	f7fe ff13 	bl	a4c <__aeabi_d2iz>
    1c26:	4604      	mov	r4, r0
    1c28:	f7fe fc0c 	bl	444 <__aeabi_i2d>
    1c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1c30:	f7fe fc72 	bl	518 <__aeabi_dmul>
    1c34:	f104 0630 	add.w	r6, r4, #48	; 0x30
    1c38:	460b      	mov	r3, r1
    1c3a:	4602      	mov	r2, r0
    1c3c:	4649      	mov	r1, r9
    1c3e:	4640      	mov	r0, r8
    1c40:	f7fe fab2 	bl	1a8 <__aeabi_dsub>
    1c44:	f807 6b01 	strb.w	r6, [r7], #1
    1c48:	9e03      	ldr	r6, [sp, #12]
    1c4a:	9b08      	ldr	r3, [sp, #32]
    1c4c:	1bbe      	subs	r6, r7, r6
    1c4e:	42b3      	cmp	r3, r6
    1c50:	d138      	bne.n	1cc4 <_dtoa_r+0x6ec>
    1c52:	4602      	mov	r2, r0
    1c54:	460b      	mov	r3, r1
    1c56:	f7fe faa9 	bl	1ac <__adddf3>
    1c5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1c5e:	4680      	mov	r8, r0
    1c60:	4689      	mov	r9, r1
    1c62:	f7fe fee9 	bl	a38 <__aeabi_dcmpgt>
    1c66:	bb58      	cbnz	r0, 1cc0 <_dtoa_r+0x6e8>
    1c68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1c6c:	4640      	mov	r0, r8
    1c6e:	4649      	mov	r1, r9
    1c70:	f7fe feba 	bl	9e8 <__aeabi_dcmpeq>
    1c74:	b108      	cbz	r0, 1c7a <_dtoa_r+0x6a2>
    1c76:	07e1      	lsls	r1, r4, #31
    1c78:	d422      	bmi.n	1cc0 <_dtoa_r+0x6e8>
    1c7a:	4628      	mov	r0, r5
    1c7c:	4659      	mov	r1, fp
    1c7e:	f00e fcd8 	bl	10632 <_Bfree>
    1c82:	2300      	movs	r3, #0
    1c84:	703b      	strb	r3, [r7, #0]
    1c86:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1c88:	f10a 0001 	add.w	r0, sl, #1
    1c8c:	6018      	str	r0, [r3, #0]
    1c8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1c90:	2b00      	cmp	r3, #0
    1c92:	f43f ace7 	beq.w	1664 <_dtoa_r+0x8c>
    1c96:	601f      	str	r7, [r3, #0]
    1c98:	e4e4      	b.n	1664 <_dtoa_r+0x8c>
    1c9a:	4627      	mov	r7, r4
    1c9c:	463b      	mov	r3, r7
    1c9e:	461f      	mov	r7, r3
    1ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1ca4:	2a39      	cmp	r2, #57	; 0x39
    1ca6:	d107      	bne.n	1cb8 <_dtoa_r+0x6e0>
    1ca8:	9a03      	ldr	r2, [sp, #12]
    1caa:	429a      	cmp	r2, r3
    1cac:	d1f7      	bne.n	1c9e <_dtoa_r+0x6c6>
    1cae:	9903      	ldr	r1, [sp, #12]
    1cb0:	2230      	movs	r2, #48	; 0x30
    1cb2:	f108 0801 	add.w	r8, r8, #1
    1cb6:	700a      	strb	r2, [r1, #0]
    1cb8:	781a      	ldrb	r2, [r3, #0]
    1cba:	3201      	adds	r2, #1
    1cbc:	701a      	strb	r2, [r3, #0]
    1cbe:	e790      	b.n	1be2 <_dtoa_r+0x60a>
    1cc0:	46d0      	mov	r8, sl
    1cc2:	e7eb      	b.n	1c9c <_dtoa_r+0x6c4>
    1cc4:	4ba1      	ldr	r3, [pc, #644]	; (1f4c <_dtoa_r+0x974>)
    1cc6:	2200      	movs	r2, #0
    1cc8:	f7fe fc26 	bl	518 <__aeabi_dmul>
    1ccc:	2200      	movs	r2, #0
    1cce:	2300      	movs	r3, #0
    1cd0:	4680      	mov	r8, r0
    1cd2:	4689      	mov	r9, r1
    1cd4:	f7fe fe88 	bl	9e8 <__aeabi_dcmpeq>
    1cd8:	2800      	cmp	r0, #0
    1cda:	d09c      	beq.n	1c16 <_dtoa_r+0x63e>
    1cdc:	e7cd      	b.n	1c7a <_dtoa_r+0x6a2>
    1cde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1ce0:	2a00      	cmp	r2, #0
    1ce2:	f000 80cd 	beq.w	1e80 <_dtoa_r+0x8a8>
    1ce6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1ce8:	2a01      	cmp	r2, #1
    1cea:	f300 80af 	bgt.w	1e4c <_dtoa_r+0x874>
    1cee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1cf0:	2a00      	cmp	r2, #0
    1cf2:	f000 80a7 	beq.w	1e44 <_dtoa_r+0x86c>
    1cf6:	f203 4333 	addw	r3, r3, #1075	; 0x433
    1cfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1cfc:	9f06      	ldr	r7, [sp, #24]
    1cfe:	9a06      	ldr	r2, [sp, #24]
    1d00:	441a      	add	r2, r3
    1d02:	9206      	str	r2, [sp, #24]
    1d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d06:	2101      	movs	r1, #1
    1d08:	441a      	add	r2, r3
    1d0a:	4628      	mov	r0, r5
    1d0c:	9209      	str	r2, [sp, #36]	; 0x24
    1d0e:	f00e fd33 	bl	10778 <__i2b>
    1d12:	4606      	mov	r6, r0
    1d14:	2f00      	cmp	r7, #0
    1d16:	dd0c      	ble.n	1d32 <_dtoa_r+0x75a>
    1d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	dd09      	ble.n	1d32 <_dtoa_r+0x75a>
    1d1e:	42bb      	cmp	r3, r7
    1d20:	9a06      	ldr	r2, [sp, #24]
    1d22:	bfa8      	it	ge
    1d24:	463b      	movge	r3, r7
    1d26:	1ad2      	subs	r2, r2, r3
    1d28:	9206      	str	r2, [sp, #24]
    1d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d2c:	1aff      	subs	r7, r7, r3
    1d2e:	1ad3      	subs	r3, r2, r3
    1d30:	9309      	str	r3, [sp, #36]	; 0x24
    1d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d34:	b1f3      	cbz	r3, 1d74 <_dtoa_r+0x79c>
    1d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d38:	2b00      	cmp	r3, #0
    1d3a:	f000 80a5 	beq.w	1e88 <_dtoa_r+0x8b0>
    1d3e:	2c00      	cmp	r4, #0
    1d40:	dd10      	ble.n	1d64 <_dtoa_r+0x78c>
    1d42:	4631      	mov	r1, r6
    1d44:	4622      	mov	r2, r4
    1d46:	4628      	mov	r0, r5
    1d48:	f00b fcfe 	bl	d748 <__pow5mult>
    1d4c:	465a      	mov	r2, fp
    1d4e:	4601      	mov	r1, r0
    1d50:	4606      	mov	r6, r0
    1d52:	4628      	mov	r0, r5
    1d54:	f00e fd19 	bl	1078a <__multiply>
    1d58:	4659      	mov	r1, fp
    1d5a:	4680      	mov	r8, r0
    1d5c:	4628      	mov	r0, r5
    1d5e:	f00e fc68 	bl	10632 <_Bfree>
    1d62:	46c3      	mov	fp, r8
    1d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d66:	1b1a      	subs	r2, r3, r4
    1d68:	d004      	beq.n	1d74 <_dtoa_r+0x79c>
    1d6a:	4659      	mov	r1, fp
    1d6c:	4628      	mov	r0, r5
    1d6e:	f00b fceb 	bl	d748 <__pow5mult>
    1d72:	4683      	mov	fp, r0
    1d74:	2101      	movs	r1, #1
    1d76:	4628      	mov	r0, r5
    1d78:	f00e fcfe 	bl	10778 <__i2b>
    1d7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1d7e:	2b00      	cmp	r3, #0
    1d80:	4604      	mov	r4, r0
    1d82:	f340 8083 	ble.w	1e8c <_dtoa_r+0x8b4>
    1d86:	461a      	mov	r2, r3
    1d88:	4601      	mov	r1, r0
    1d8a:	4628      	mov	r0, r5
    1d8c:	f00b fcdc 	bl	d748 <__pow5mult>
    1d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1d92:	2b01      	cmp	r3, #1
    1d94:	4604      	mov	r4, r0
    1d96:	dd7c      	ble.n	1e92 <_dtoa_r+0x8ba>
    1d98:	f04f 0800 	mov.w	r8, #0
    1d9c:	6923      	ldr	r3, [r4, #16]
    1d9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1da2:	6918      	ldr	r0, [r3, #16]
    1da4:	f00e fc9a 	bl	106dc <__hi0bits>
    1da8:	f1c0 0020 	rsb	r0, r0, #32
    1dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dae:	4418      	add	r0, r3
    1db0:	f010 001f 	ands.w	r0, r0, #31
    1db4:	f000 808e 	beq.w	1ed4 <_dtoa_r+0x8fc>
    1db8:	f1c0 0320 	rsb	r3, r0, #32
    1dbc:	2b04      	cmp	r3, #4
    1dbe:	f340 8087 	ble.w	1ed0 <_dtoa_r+0x8f8>
    1dc2:	f1c0 001c 	rsb	r0, r0, #28
    1dc6:	9b06      	ldr	r3, [sp, #24]
    1dc8:	4403      	add	r3, r0
    1dca:	9306      	str	r3, [sp, #24]
    1dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dce:	4403      	add	r3, r0
    1dd0:	4407      	add	r7, r0
    1dd2:	9309      	str	r3, [sp, #36]	; 0x24
    1dd4:	9b06      	ldr	r3, [sp, #24]
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	dd05      	ble.n	1de6 <_dtoa_r+0x80e>
    1dda:	4659      	mov	r1, fp
    1ddc:	461a      	mov	r2, r3
    1dde:	4628      	mov	r0, r5
    1de0:	f00e fd6f 	bl	108c2 <__lshift>
    1de4:	4683      	mov	fp, r0
    1de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1de8:	2b00      	cmp	r3, #0
    1dea:	dd05      	ble.n	1df8 <_dtoa_r+0x820>
    1dec:	4621      	mov	r1, r4
    1dee:	461a      	mov	r2, r3
    1df0:	4628      	mov	r0, r5
    1df2:	f00e fd66 	bl	108c2 <__lshift>
    1df6:	4604      	mov	r4, r0
    1df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d06c      	beq.n	1ed8 <_dtoa_r+0x900>
    1dfe:	4621      	mov	r1, r4
    1e00:	4658      	mov	r0, fp
    1e02:	f00e fdbd 	bl	10980 <__mcmp>
    1e06:	2800      	cmp	r0, #0
    1e08:	da66      	bge.n	1ed8 <_dtoa_r+0x900>
    1e0a:	2300      	movs	r3, #0
    1e0c:	4659      	mov	r1, fp
    1e0e:	220a      	movs	r2, #10
    1e10:	4628      	mov	r0, r5
    1e12:	f00e fc25 	bl	10660 <__multadd>
    1e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e18:	f10a 3aff 	add.w	sl, sl, #4294967295
    1e1c:	4683      	mov	fp, r0
    1e1e:	2b00      	cmp	r3, #0
    1e20:	f000 818b 	beq.w	213a <_dtoa_r+0xb62>
    1e24:	4631      	mov	r1, r6
    1e26:	2300      	movs	r3, #0
    1e28:	220a      	movs	r2, #10
    1e2a:	4628      	mov	r0, r5
    1e2c:	f00e fc18 	bl	10660 <__multadd>
    1e30:	f1b9 0f00 	cmp.w	r9, #0
    1e34:	4606      	mov	r6, r0
    1e36:	f300 8091 	bgt.w	1f5c <_dtoa_r+0x984>
    1e3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e3c:	2b02      	cmp	r3, #2
    1e3e:	f340 808d 	ble.w	1f5c <_dtoa_r+0x984>
    1e42:	e051      	b.n	1ee8 <_dtoa_r+0x910>
    1e44:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1e46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    1e4a:	e756      	b.n	1cfa <_dtoa_r+0x722>
    1e4c:	9b08      	ldr	r3, [sp, #32]
    1e4e:	1e5c      	subs	r4, r3, #1
    1e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e52:	42a3      	cmp	r3, r4
    1e54:	bfbf      	itttt	lt
    1e56:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    1e58:	940a      	strlt	r4, [sp, #40]	; 0x28
    1e5a:	1ae2      	sublt	r2, r4, r3
    1e5c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    1e5e:	bfb6      	itet	lt
    1e60:	189b      	addlt	r3, r3, r2
    1e62:	1b1c      	subge	r4, r3, r4
    1e64:	930e      	strlt	r3, [sp, #56]	; 0x38
    1e66:	9b08      	ldr	r3, [sp, #32]
    1e68:	bfb8      	it	lt
    1e6a:	2400      	movlt	r4, #0
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	bfb9      	ittee	lt
    1e70:	9b06      	ldrlt	r3, [sp, #24]
    1e72:	9a08      	ldrlt	r2, [sp, #32]
    1e74:	9f06      	ldrge	r7, [sp, #24]
    1e76:	9b08      	ldrge	r3, [sp, #32]
    1e78:	bfbc      	itt	lt
    1e7a:	1a9f      	sublt	r7, r3, r2
    1e7c:	2300      	movlt	r3, #0
    1e7e:	e73e      	b.n	1cfe <_dtoa_r+0x726>
    1e80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1e82:	9f06      	ldr	r7, [sp, #24]
    1e84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1e86:	e745      	b.n	1d14 <_dtoa_r+0x73c>
    1e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e8a:	e76e      	b.n	1d6a <_dtoa_r+0x792>
    1e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e8e:	2b01      	cmp	r3, #1
    1e90:	dc19      	bgt.n	1ec6 <_dtoa_r+0x8ee>
    1e92:	9b04      	ldr	r3, [sp, #16]
    1e94:	b9bb      	cbnz	r3, 1ec6 <_dtoa_r+0x8ee>
    1e96:	9b05      	ldr	r3, [sp, #20]
    1e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1e9c:	b99b      	cbnz	r3, 1ec6 <_dtoa_r+0x8ee>
    1e9e:	9b05      	ldr	r3, [sp, #20]
    1ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1ea4:	0d1b      	lsrs	r3, r3, #20
    1ea6:	051b      	lsls	r3, r3, #20
    1ea8:	b183      	cbz	r3, 1ecc <_dtoa_r+0x8f4>
    1eaa:	9b06      	ldr	r3, [sp, #24]
    1eac:	3301      	adds	r3, #1
    1eae:	9306      	str	r3, [sp, #24]
    1eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1eb2:	3301      	adds	r3, #1
    1eb4:	9309      	str	r3, [sp, #36]	; 0x24
    1eb6:	f04f 0801 	mov.w	r8, #1
    1eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	f47f af6d 	bne.w	1d9c <_dtoa_r+0x7c4>
    1ec2:	2001      	movs	r0, #1
    1ec4:	e772      	b.n	1dac <_dtoa_r+0x7d4>
    1ec6:	f04f 0800 	mov.w	r8, #0
    1eca:	e7f6      	b.n	1eba <_dtoa_r+0x8e2>
    1ecc:	4698      	mov	r8, r3
    1ece:	e7f4      	b.n	1eba <_dtoa_r+0x8e2>
    1ed0:	d080      	beq.n	1dd4 <_dtoa_r+0x7fc>
    1ed2:	4618      	mov	r0, r3
    1ed4:	301c      	adds	r0, #28
    1ed6:	e776      	b.n	1dc6 <_dtoa_r+0x7ee>
    1ed8:	9b08      	ldr	r3, [sp, #32]
    1eda:	2b00      	cmp	r3, #0
    1edc:	dc38      	bgt.n	1f50 <_dtoa_r+0x978>
    1ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1ee0:	2b02      	cmp	r3, #2
    1ee2:	dd35      	ble.n	1f50 <_dtoa_r+0x978>
    1ee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1ee8:	f1b9 0f00 	cmp.w	r9, #0
    1eec:	d10d      	bne.n	1f0a <_dtoa_r+0x932>
    1eee:	4621      	mov	r1, r4
    1ef0:	464b      	mov	r3, r9
    1ef2:	2205      	movs	r2, #5
    1ef4:	4628      	mov	r0, r5
    1ef6:	f00e fbb3 	bl	10660 <__multadd>
    1efa:	4601      	mov	r1, r0
    1efc:	4604      	mov	r4, r0
    1efe:	4658      	mov	r0, fp
    1f00:	f00e fd3e 	bl	10980 <__mcmp>
    1f04:	2800      	cmp	r0, #0
    1f06:	f73f adbd 	bgt.w	1a84 <_dtoa_r+0x4ac>
    1f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1f0c:	9f03      	ldr	r7, [sp, #12]
    1f0e:	ea6f 0a03 	mvn.w	sl, r3
    1f12:	f04f 0800 	mov.w	r8, #0
    1f16:	4621      	mov	r1, r4
    1f18:	4628      	mov	r0, r5
    1f1a:	f00e fb8a 	bl	10632 <_Bfree>
    1f1e:	2e00      	cmp	r6, #0
    1f20:	f43f aeab 	beq.w	1c7a <_dtoa_r+0x6a2>
    1f24:	f1b8 0f00 	cmp.w	r8, #0
    1f28:	d005      	beq.n	1f36 <_dtoa_r+0x95e>
    1f2a:	45b0      	cmp	r8, r6
    1f2c:	d003      	beq.n	1f36 <_dtoa_r+0x95e>
    1f2e:	4641      	mov	r1, r8
    1f30:	4628      	mov	r0, r5
    1f32:	f00e fb7e 	bl	10632 <_Bfree>
    1f36:	4631      	mov	r1, r6
    1f38:	4628      	mov	r0, r5
    1f3a:	f00e fb7a 	bl	10632 <_Bfree>
    1f3e:	e69c      	b.n	1c7a <_dtoa_r+0x6a2>
    1f40:	2400      	movs	r4, #0
    1f42:	4626      	mov	r6, r4
    1f44:	e7e1      	b.n	1f0a <_dtoa_r+0x932>
    1f46:	46c2      	mov	sl, r8
    1f48:	4626      	mov	r6, r4
    1f4a:	e59b      	b.n	1a84 <_dtoa_r+0x4ac>
    1f4c:	40240000 	.word	0x40240000
    1f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f52:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1f56:	2b00      	cmp	r3, #0
    1f58:	f000 80f6 	beq.w	2148 <_dtoa_r+0xb70>
    1f5c:	2f00      	cmp	r7, #0
    1f5e:	dd05      	ble.n	1f6c <_dtoa_r+0x994>
    1f60:	4631      	mov	r1, r6
    1f62:	463a      	mov	r2, r7
    1f64:	4628      	mov	r0, r5
    1f66:	f00e fcac 	bl	108c2 <__lshift>
    1f6a:	4606      	mov	r6, r0
    1f6c:	f1b8 0f00 	cmp.w	r8, #0
    1f70:	d055      	beq.n	201e <_dtoa_r+0xa46>
    1f72:	6871      	ldr	r1, [r6, #4]
    1f74:	4628      	mov	r0, r5
    1f76:	f00e fb28 	bl	105ca <_Balloc>
    1f7a:	6932      	ldr	r2, [r6, #16]
    1f7c:	3202      	adds	r2, #2
    1f7e:	4607      	mov	r7, r0
    1f80:	0092      	lsls	r2, r2, #2
    1f82:	f106 010c 	add.w	r1, r6, #12
    1f86:	300c      	adds	r0, #12
    1f88:	f00e f86f 	bl	1006a <memcpy>
    1f8c:	2201      	movs	r2, #1
    1f8e:	4639      	mov	r1, r7
    1f90:	4628      	mov	r0, r5
    1f92:	f00e fc96 	bl	108c2 <__lshift>
    1f96:	9b03      	ldr	r3, [sp, #12]
    1f98:	3301      	adds	r3, #1
    1f9a:	9308      	str	r3, [sp, #32]
    1f9c:	9b03      	ldr	r3, [sp, #12]
    1f9e:	444b      	add	r3, r9
    1fa0:	930a      	str	r3, [sp, #40]	; 0x28
    1fa2:	9b04      	ldr	r3, [sp, #16]
    1fa4:	f003 0301 	and.w	r3, r3, #1
    1fa8:	46b0      	mov	r8, r6
    1faa:	9309      	str	r3, [sp, #36]	; 0x24
    1fac:	4606      	mov	r6, r0
    1fae:	9b08      	ldr	r3, [sp, #32]
    1fb0:	4621      	mov	r1, r4
    1fb2:	3b01      	subs	r3, #1
    1fb4:	4658      	mov	r0, fp
    1fb6:	9304      	str	r3, [sp, #16]
    1fb8:	f00e fa23 	bl	10402 <quorem>
    1fbc:	4603      	mov	r3, r0
    1fbe:	3330      	adds	r3, #48	; 0x30
    1fc0:	9006      	str	r0, [sp, #24]
    1fc2:	4641      	mov	r1, r8
    1fc4:	4658      	mov	r0, fp
    1fc6:	930b      	str	r3, [sp, #44]	; 0x2c
    1fc8:	f00e fcda 	bl	10980 <__mcmp>
    1fcc:	4632      	mov	r2, r6
    1fce:	4681      	mov	r9, r0
    1fd0:	4621      	mov	r1, r4
    1fd2:	4628      	mov	r0, r5
    1fd4:	f00e fcef 	bl	109b6 <__mdiff>
    1fd8:	68c2      	ldr	r2, [r0, #12]
    1fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fdc:	4607      	mov	r7, r0
    1fde:	bb02      	cbnz	r2, 2022 <_dtoa_r+0xa4a>
    1fe0:	4601      	mov	r1, r0
    1fe2:	4658      	mov	r0, fp
    1fe4:	f00e fccc 	bl	10980 <__mcmp>
    1fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fea:	4602      	mov	r2, r0
    1fec:	4639      	mov	r1, r7
    1fee:	4628      	mov	r0, r5
    1ff0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    1ff4:	f00e fb1d 	bl	10632 <_Bfree>
    1ff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1ffc:	9f08      	ldr	r7, [sp, #32]
    1ffe:	ea43 0102 	orr.w	r1, r3, r2
    2002:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2004:	430b      	orrs	r3, r1
    2006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2008:	d10d      	bne.n	2026 <_dtoa_r+0xa4e>
    200a:	2b39      	cmp	r3, #57	; 0x39
    200c:	d029      	beq.n	2062 <_dtoa_r+0xa8a>
    200e:	f1b9 0f00 	cmp.w	r9, #0
    2012:	dd01      	ble.n	2018 <_dtoa_r+0xa40>
    2014:	9b06      	ldr	r3, [sp, #24]
    2016:	3331      	adds	r3, #49	; 0x31
    2018:	9a04      	ldr	r2, [sp, #16]
    201a:	7013      	strb	r3, [r2, #0]
    201c:	e77b      	b.n	1f16 <_dtoa_r+0x93e>
    201e:	4630      	mov	r0, r6
    2020:	e7b9      	b.n	1f96 <_dtoa_r+0x9be>
    2022:	2201      	movs	r2, #1
    2024:	e7e2      	b.n	1fec <_dtoa_r+0xa14>
    2026:	f1b9 0f00 	cmp.w	r9, #0
    202a:	db06      	blt.n	203a <_dtoa_r+0xa62>
    202c:	9922      	ldr	r1, [sp, #136]	; 0x88
    202e:	ea41 0909 	orr.w	r9, r1, r9
    2032:	9909      	ldr	r1, [sp, #36]	; 0x24
    2034:	ea59 0101 	orrs.w	r1, r9, r1
    2038:	d120      	bne.n	207c <_dtoa_r+0xaa4>
    203a:	2a00      	cmp	r2, #0
    203c:	ddec      	ble.n	2018 <_dtoa_r+0xa40>
    203e:	4659      	mov	r1, fp
    2040:	2201      	movs	r2, #1
    2042:	4628      	mov	r0, r5
    2044:	9308      	str	r3, [sp, #32]
    2046:	f00e fc3c 	bl	108c2 <__lshift>
    204a:	4621      	mov	r1, r4
    204c:	4683      	mov	fp, r0
    204e:	f00e fc97 	bl	10980 <__mcmp>
    2052:	2800      	cmp	r0, #0
    2054:	9b08      	ldr	r3, [sp, #32]
    2056:	dc02      	bgt.n	205e <_dtoa_r+0xa86>
    2058:	d1de      	bne.n	2018 <_dtoa_r+0xa40>
    205a:	07da      	lsls	r2, r3, #31
    205c:	d5dc      	bpl.n	2018 <_dtoa_r+0xa40>
    205e:	2b39      	cmp	r3, #57	; 0x39
    2060:	d1d8      	bne.n	2014 <_dtoa_r+0xa3c>
    2062:	9a04      	ldr	r2, [sp, #16]
    2064:	2339      	movs	r3, #57	; 0x39
    2066:	7013      	strb	r3, [r2, #0]
    2068:	463b      	mov	r3, r7
    206a:	461f      	mov	r7, r3
    206c:	3b01      	subs	r3, #1
    206e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2072:	2a39      	cmp	r2, #57	; 0x39
    2074:	d050      	beq.n	2118 <_dtoa_r+0xb40>
    2076:	3201      	adds	r2, #1
    2078:	701a      	strb	r2, [r3, #0]
    207a:	e74c      	b.n	1f16 <_dtoa_r+0x93e>
    207c:	2a00      	cmp	r2, #0
    207e:	dd03      	ble.n	2088 <_dtoa_r+0xab0>
    2080:	2b39      	cmp	r3, #57	; 0x39
    2082:	d0ee      	beq.n	2062 <_dtoa_r+0xa8a>
    2084:	3301      	adds	r3, #1
    2086:	e7c7      	b.n	2018 <_dtoa_r+0xa40>
    2088:	9a08      	ldr	r2, [sp, #32]
    208a:	990a      	ldr	r1, [sp, #40]	; 0x28
    208c:	f802 3c01 	strb.w	r3, [r2, #-1]
    2090:	428a      	cmp	r2, r1
    2092:	d02a      	beq.n	20ea <_dtoa_r+0xb12>
    2094:	4659      	mov	r1, fp
    2096:	2300      	movs	r3, #0
    2098:	220a      	movs	r2, #10
    209a:	4628      	mov	r0, r5
    209c:	f00e fae0 	bl	10660 <__multadd>
    20a0:	45b0      	cmp	r8, r6
    20a2:	4683      	mov	fp, r0
    20a4:	f04f 0300 	mov.w	r3, #0
    20a8:	f04f 020a 	mov.w	r2, #10
    20ac:	4641      	mov	r1, r8
    20ae:	4628      	mov	r0, r5
    20b0:	d107      	bne.n	20c2 <_dtoa_r+0xaea>
    20b2:	f00e fad5 	bl	10660 <__multadd>
    20b6:	4680      	mov	r8, r0
    20b8:	4606      	mov	r6, r0
    20ba:	9b08      	ldr	r3, [sp, #32]
    20bc:	3301      	adds	r3, #1
    20be:	9308      	str	r3, [sp, #32]
    20c0:	e775      	b.n	1fae <_dtoa_r+0x9d6>
    20c2:	f00e facd 	bl	10660 <__multadd>
    20c6:	4631      	mov	r1, r6
    20c8:	4680      	mov	r8, r0
    20ca:	2300      	movs	r3, #0
    20cc:	220a      	movs	r2, #10
    20ce:	4628      	mov	r0, r5
    20d0:	f00e fac6 	bl	10660 <__multadd>
    20d4:	4606      	mov	r6, r0
    20d6:	e7f0      	b.n	20ba <_dtoa_r+0xae2>
    20d8:	f1b9 0f00 	cmp.w	r9, #0
    20dc:	9a03      	ldr	r2, [sp, #12]
    20de:	bfcc      	ite	gt
    20e0:	464f      	movgt	r7, r9
    20e2:	2701      	movle	r7, #1
    20e4:	4417      	add	r7, r2
    20e6:	f04f 0800 	mov.w	r8, #0
    20ea:	4659      	mov	r1, fp
    20ec:	2201      	movs	r2, #1
    20ee:	4628      	mov	r0, r5
    20f0:	9308      	str	r3, [sp, #32]
    20f2:	f00e fbe6 	bl	108c2 <__lshift>
    20f6:	4621      	mov	r1, r4
    20f8:	4683      	mov	fp, r0
    20fa:	f00e fc41 	bl	10980 <__mcmp>
    20fe:	2800      	cmp	r0, #0
    2100:	dcb2      	bgt.n	2068 <_dtoa_r+0xa90>
    2102:	d102      	bne.n	210a <_dtoa_r+0xb32>
    2104:	9b08      	ldr	r3, [sp, #32]
    2106:	07db      	lsls	r3, r3, #31
    2108:	d4ae      	bmi.n	2068 <_dtoa_r+0xa90>
    210a:	463b      	mov	r3, r7
    210c:	461f      	mov	r7, r3
    210e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2112:	2a30      	cmp	r2, #48	; 0x30
    2114:	d0fa      	beq.n	210c <_dtoa_r+0xb34>
    2116:	e6fe      	b.n	1f16 <_dtoa_r+0x93e>
    2118:	9a03      	ldr	r2, [sp, #12]
    211a:	429a      	cmp	r2, r3
    211c:	d1a5      	bne.n	206a <_dtoa_r+0xa92>
    211e:	f10a 0a01 	add.w	sl, sl, #1
    2122:	2331      	movs	r3, #49	; 0x31
    2124:	e779      	b.n	201a <_dtoa_r+0xa42>
    2126:	4b13      	ldr	r3, [pc, #76]	; (2174 <_dtoa_r+0xb9c>)
    2128:	f7ff babb 	b.w	16a2 <_dtoa_r+0xca>
    212c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    212e:	2b00      	cmp	r3, #0
    2130:	f47f aa93 	bne.w	165a <_dtoa_r+0x82>
    2134:	4b10      	ldr	r3, [pc, #64]	; (2178 <_dtoa_r+0xba0>)
    2136:	f7ff bab4 	b.w	16a2 <_dtoa_r+0xca>
    213a:	f1b9 0f00 	cmp.w	r9, #0
    213e:	dc03      	bgt.n	2148 <_dtoa_r+0xb70>
    2140:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2142:	2b02      	cmp	r3, #2
    2144:	f73f aed0 	bgt.w	1ee8 <_dtoa_r+0x910>
    2148:	9f03      	ldr	r7, [sp, #12]
    214a:	4621      	mov	r1, r4
    214c:	4658      	mov	r0, fp
    214e:	f00e f958 	bl	10402 <quorem>
    2152:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2156:	f807 3b01 	strb.w	r3, [r7], #1
    215a:	9a03      	ldr	r2, [sp, #12]
    215c:	1aba      	subs	r2, r7, r2
    215e:	4591      	cmp	r9, r2
    2160:	ddba      	ble.n	20d8 <_dtoa_r+0xb00>
    2162:	4659      	mov	r1, fp
    2164:	2300      	movs	r3, #0
    2166:	220a      	movs	r2, #10
    2168:	4628      	mov	r0, r5
    216a:	f00e fa79 	bl	10660 <__multadd>
    216e:	4683      	mov	fp, r0
    2170:	e7eb      	b.n	214a <_dtoa_r+0xb72>
    2172:	bf00      	nop
    2174:	00057a1a 	.word	0x00057a1a
    2178:	00057a3e 	.word	0x00057a3e

0000217c <_Z18ee_serial_callbackc>:
 * from the UART ISR for each new character received. When the parser sees the
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
    217c:	b538      	push	{r3, r4, r5, lr}
  if (c == EE_CMD_TERMINATOR) {
    217e:	2825      	cmp	r0, #37	; 0x25
    2180:	d00c      	beq.n	219c <_Z18ee_serial_callbackc+0x20>
    g_cmd_buf[g_cmd_pos] = (char)0;
    th_command_ready(g_cmd_buf);
    g_cmd_pos = 0;
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    2182:	4b0c      	ldr	r3, [pc, #48]	; (21b4 <_Z18ee_serial_callbackc+0x38>)
    2184:	681a      	ldr	r2, [r3, #0]
    2186:	490c      	ldr	r1, [pc, #48]	; (21b8 <_Z18ee_serial_callbackc+0x3c>)
    2188:	5488      	strb	r0, [r1, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    218a:	681b      	ldr	r3, [r3, #0]
    218c:	2b4f      	cmp	r3, #79	; 0x4f
    218e:	d80e      	bhi.n	21ae <_Z18ee_serial_callbackc+0x32>
    2190:	4b08      	ldr	r3, [pc, #32]	; (21b4 <_Z18ee_serial_callbackc+0x38>)
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	3301      	adds	r3, #1
    2196:	4a07      	ldr	r2, [pc, #28]	; (21b4 <_Z18ee_serial_callbackc+0x38>)
    2198:	6013      	str	r3, [r2, #0]
  }
}
    219a:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = (char)0;
    219c:	4c05      	ldr	r4, [pc, #20]	; (21b4 <_Z18ee_serial_callbackc+0x38>)
    219e:	6823      	ldr	r3, [r4, #0]
    21a0:	4805      	ldr	r0, [pc, #20]	; (21b8 <_Z18ee_serial_callbackc+0x3c>)
    21a2:	2500      	movs	r5, #0
    21a4:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    21a6:	f00b fc0e 	bl	d9c6 <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    21aa:	6025      	str	r5, [r4, #0]
    21ac:	e7f5      	b.n	219a <_Z18ee_serial_callbackc+0x1e>
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    21ae:	2350      	movs	r3, #80	; 0x50
    21b0:	e7f1      	b.n	2196 <_Z18ee_serial_callbackc+0x1a>
    21b2:	bf00      	nop
    21b4:	20000554 	.word	0x20000554
    21b8:	20000500 	.word	0x20000500

000021bc <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    21bc:	b508      	push	{r3, lr}
  th_serialport_initialize();
    21be:	f00b fc1c 	bl	d9fa <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    21c2:	f000 fb01 	bl	27c8 <_Z23th_timestamp_initializev>
  th_final_initialize();
    21c6:	f000 fb09 	bl	27dc <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    21ca:	4805      	ldr	r0, [pc, #20]	; (21e0 <_Z23ee_benchmark_initializev+0x24>)
    21cc:	f00b fc07 	bl	d9de <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    21d0:	4b04      	ldr	r3, [pc, #16]	; (21e4 <_Z23ee_benchmark_initializev+0x28>)
    21d2:	2201      	movs	r2, #1
    21d4:	701a      	strb	r2, [r3, #0]
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    21d6:	4804      	ldr	r0, [pc, #16]	; (21e8 <_Z23ee_benchmark_initializev+0x2c>)
    21d8:	f00b fc01 	bl	d9de <_Z9th_printfPKcz>
  
}
    21dc:	bd08      	pop	{r3, pc}
    21de:	bf00      	nop
    21e0:	00011078 	.word	0x00011078
    21e4:	2001d744 	.word	0x2001d744
    21e8:	00011088 	.word	0x00011088

000021ec <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    21ec:	b570      	push	{r4, r5, r6, lr}
    21ee:	4604      	mov	r4, r0
    21f0:	460d      	mov	r5, r1
  th_load_tensor(); /* if necessary */
    21f2:	f000 fa59 	bl	26a8 <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    21f6:	4629      	mov	r1, r5
    21f8:	4811      	ldr	r0, [pc, #68]	; (2240 <_Z8ee_inferjj+0x54>)
    21fa:	f00b fbf0 	bl	d9de <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    21fe:	1e6e      	subs	r6, r5, #1
    2200:	b11d      	cbz	r5, 220a <_Z8ee_inferjj+0x1e>
    th_infer(); /* call the API inference function */
    2202:	f000 fa3d 	bl	2680 <_Z8th_inferv>
  while (n_warmup-- > 0) {
    2206:	4635      	mov	r5, r6
    2208:	e7f9      	b.n	21fe <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    220a:	480e      	ldr	r0, [pc, #56]	; (2244 <_Z8ee_inferjj+0x58>)
    220c:	f00b fbe7 	bl	d9de <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    2210:	4621      	mov	r1, r4
    2212:	480d      	ldr	r0, [pc, #52]	; (2248 <_Z8ee_inferjj+0x5c>)
    2214:	f00b fbe3 	bl	d9de <_Z9th_printfPKcz>
  th_timestamp();
    2218:	f000 faa2 	bl	2760 <_Z12th_timestampv>
  th_pre();
    221c:	f00b fbd1 	bl	d9c2 <_Z6th_prev>
  while (n-- > 0) {
    2220:	1e65      	subs	r5, r4, #1
    2222:	b11c      	cbz	r4, 222c <_Z8ee_inferjj+0x40>
    th_infer(); /* call the API inference function */
    2224:	f000 fa2c 	bl	2680 <_Z8th_inferv>
  while (n-- > 0) {
    2228:	462c      	mov	r4, r5
    222a:	e7f9      	b.n	2220 <_Z8ee_inferjj+0x34>
  }
  th_post();
    222c:	f00b fbca 	bl	d9c4 <_Z7th_postv>
  th_timestamp();
    2230:	f000 fa96 	bl	2760 <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    2234:	4805      	ldr	r0, [pc, #20]	; (224c <_Z8ee_inferjj+0x60>)
    2236:	f00b fbd2 	bl	d9de <_Z9th_printfPKcz>
  th_results();
    223a:	f000 fa7f 	bl	273c <_Z10th_resultsv>
}
    223e:	bd70      	pop	{r4, r5, r6, pc}
    2240:	00011094 	.word	0x00011094
    2244:	000110a8 	.word	0x000110a8
    2248:	000110b8 	.word	0x000110b8
    224c:	000110cc 	.word	0x000110cc

00002250 <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    2250:	b570      	push	{r4, r5, r6, lr}
    2252:	b082      	sub	sp, #8
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    2254:	2250      	movs	r2, #80	; 0x50
    2256:	4951      	ldr	r1, [pc, #324]	; (239c <_Z15ee_buffer_parsePc+0x14c>)
    2258:	f00e f879 	bl	1034e <strncmp>
    225c:	b110      	cbz	r0, 2264 <_Z15ee_buffer_parsePc+0x14>
    return EE_ARG_UNCLAIMED;
    225e:	2001      	movs	r0, #1
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    2260:	b002      	add	sp, #8
    2262:	bd70      	pop	{r4, r5, r6, pc}
  p_next = strtok(NULL, EE_CMD_DELIMITER);
    2264:	494e      	ldr	r1, [pc, #312]	; (23a0 <_Z15ee_buffer_parsePc+0x150>)
    2266:	f00a ff19 	bl	d09c <strtok>
  if (p_next == NULL) {
    226a:	4605      	mov	r5, r0
    226c:	b1d8      	cbz	r0, 22a6 <_Z15ee_buffer_parsePc+0x56>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    226e:	2250      	movs	r2, #80	; 0x50
    2270:	494c      	ldr	r1, [pc, #304]	; (23a4 <_Z15ee_buffer_parsePc+0x154>)
    2272:	f00e f86c 	bl	1034e <strncmp>
    2276:	bb50      	cbnz	r0, 22ce <_Z15ee_buffer_parsePc+0x7e>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    2278:	4949      	ldr	r1, [pc, #292]	; (23a0 <_Z15ee_buffer_parsePc+0x150>)
    227a:	f00a ff0f 	bl	d09c <strtok>
    if (p_next == NULL) {
    227e:	b1b8      	cbz	r0, 22b0 <_Z15ee_buffer_parsePc+0x60>
      g_buff_size = (size_t)atoi(p_next);
    2280:	f00d feef 	bl	10062 <atoi>
    2284:	4601      	mov	r1, r0
    2286:	4b48      	ldr	r3, [pc, #288]	; (23a8 <_Z15ee_buffer_parsePc+0x158>)
    2288:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    228a:	b1b0      	cbz	r0, 22ba <_Z15ee_buffer_parsePc+0x6a>
        g_buff_pos = 0;
    228c:	4b47      	ldr	r3, [pc, #284]	; (23ac <_Z15ee_buffer_parsePc+0x15c>)
    228e:	2200      	movs	r2, #0
    2290:	601a      	str	r2, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    2292:	f5b0 3fc8 	cmp.w	r0, #102400	; 0x19000
    2296:	d915      	bls.n	22c4 <_Z15ee_buffer_parsePc+0x74>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    2298:	f44f 32c8 	mov.w	r2, #102400	; 0x19000
    229c:	4844      	ldr	r0, [pc, #272]	; (23b0 <_Z15ee_buffer_parsePc+0x160>)
    229e:	f00b fb9e 	bl	d9de <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    22a2:	2000      	movs	r0, #0
    22a4:	e7dc      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    22a6:	4843      	ldr	r0, [pc, #268]	; (23b4 <_Z15ee_buffer_parsePc+0x164>)
    22a8:	f00b fb99 	bl	d9de <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    22ac:	2000      	movs	r0, #0
    22ae:	e7d7      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    22b0:	4841      	ldr	r0, [pc, #260]	; (23b8 <_Z15ee_buffer_parsePc+0x168>)
    22b2:	f00b fb94 	bl	d9de <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    22b6:	2000      	movs	r0, #0
    22b8:	e7d2      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    22ba:	4840      	ldr	r0, [pc, #256]	; (23bc <_Z15ee_buffer_parsePc+0x16c>)
    22bc:	f00b fb8f 	bl	d9de <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    22c0:	2000      	movs	r0, #0
    22c2:	e7cd      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    22c4:	483e      	ldr	r0, [pc, #248]	; (23c0 <_Z15ee_buffer_parsePc+0x170>)
    22c6:	f00b fb8a 	bl	d9de <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    22ca:	2000      	movs	r0, #0
    22cc:	e7c8      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    22ce:	2250      	movs	r2, #80	; 0x50
    22d0:	493c      	ldr	r1, [pc, #240]	; (23c4 <_Z15ee_buffer_parsePc+0x174>)
    22d2:	4628      	mov	r0, r5
    22d4:	f00e f83b 	bl	1034e <strncmp>
    22d8:	bb60      	cbnz	r0, 2334 <_Z15ee_buffer_parsePc+0xe4>
    size_t i = 0;
    22da:	2400      	movs	r4, #0
    22dc:	e012      	b.n	2304 <_Z15ee_buffer_parsePc+0xb4>
        th_printf("m-buffer-");
    22de:	483a      	ldr	r0, [pc, #232]	; (23c8 <_Z15ee_buffer_parsePc+0x178>)
    22e0:	f00b fb7d 	bl	d9de <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    22e4:	4b39      	ldr	r3, [pc, #228]	; (23cc <_Z15ee_buffer_parsePc+0x17c>)
    22e6:	5d19      	ldrb	r1, [r3, r4]
    22e8:	4839      	ldr	r0, [pc, #228]	; (23d0 <_Z15ee_buffer_parsePc+0x180>)
    22ea:	f00b fb78 	bl	d9de <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    22ee:	3401      	adds	r4, #1
    22f0:	f014 0f07 	tst.w	r4, #7
    22f4:	d003      	beq.n	22fe <_Z15ee_buffer_parsePc+0xae>
    22f6:	4b2c      	ldr	r3, [pc, #176]	; (23a8 <_Z15ee_buffer_parsePc+0x158>)
    22f8:	681b      	ldr	r3, [r3, #0]
    22fa:	429c      	cmp	r4, r3
    22fc:	d10c      	bne.n	2318 <_Z15ee_buffer_parsePc+0xc8>
        th_printf("\r\n");
    22fe:	4835      	ldr	r0, [pc, #212]	; (23d4 <_Z15ee_buffer_parsePc+0x184>)
    2300:	f00b fb6d 	bl	d9de <_Z9th_printfPKcz>
    for (; i < g_buff_size; ++i) {
    2304:	4b28      	ldr	r3, [pc, #160]	; (23a8 <_Z15ee_buffer_parsePc+0x158>)
    2306:	681b      	ldr	r3, [r3, #0]
    2308:	42a3      	cmp	r3, r4
    230a:	d909      	bls.n	2320 <_Z15ee_buffer_parsePc+0xd0>
    if ((i + max) % max == 0 || i == 0) {
    230c:	f014 0f07 	tst.w	r4, #7
    2310:	d0e5      	beq.n	22de <_Z15ee_buffer_parsePc+0x8e>
    2312:	2c00      	cmp	r4, #0
    2314:	d1e6      	bne.n	22e4 <_Z15ee_buffer_parsePc+0x94>
    2316:	e7e2      	b.n	22de <_Z15ee_buffer_parsePc+0x8e>
        th_printf("-");
    2318:	482f      	ldr	r0, [pc, #188]	; (23d8 <_Z15ee_buffer_parsePc+0x188>)
    231a:	f00b fb60 	bl	d9de <_Z9th_printfPKcz>
    231e:	e7f1      	b.n	2304 <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    2320:	f014 0f07 	tst.w	r4, #7
    2324:	d101      	bne.n	232a <_Z15ee_buffer_parsePc+0xda>
  return EE_ARG_CLAIMED;
    2326:	2000      	movs	r0, #0
    2328:	e79a      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
    th_printf("\r\n");
    232a:	482a      	ldr	r0, [pc, #168]	; (23d4 <_Z15ee_buffer_parsePc+0x184>)
    232c:	f00b fb57 	bl	d9de <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2330:	2000      	movs	r0, #0
    2332:	e795      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
     numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    2334:	2150      	movs	r1, #80	; 0x50
    2336:	4628      	mov	r0, r5
    2338:	f00b fb49 	bl	d9ce <_Z10th_strnlenPKcj>
    233c:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    233e:	f010 0401 	ands.w	r4, r0, #1
    2342:	d11f      	bne.n	2384 <_Z15ee_buffer_parsePc+0x134>
    test[2] = 0;
    2344:	2300      	movs	r3, #0
    2346:	f88d 3006 	strb.w	r3, [sp, #6]
    for (size_t i = 0; i < numbytes;) {
    234a:	42b4      	cmp	r4, r6
    234c:	d224      	bcs.n	2398 <_Z15ee_buffer_parsePc+0x148>
      test[0] = p_next[i++];
    234e:	1c63      	adds	r3, r4, #1
    2350:	5d2a      	ldrb	r2, [r5, r4]
    2352:	f88d 2004 	strb.w	r2, [sp, #4]
      test[1] = p_next[i++];
    2356:	5ceb      	ldrb	r3, [r5, r3]
    2358:	3402      	adds	r4, #2
    235a:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    235e:	a801      	add	r0, sp, #4
    2360:	f00b faa8 	bl	d8b4 <_Z9ee_hexdecPc>
      if (res < 0) {
    2364:	2800      	cmp	r0, #0
    2366:	db11      	blt.n	238c <_Z15ee_buffer_parsePc+0x13c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    2368:	4a10      	ldr	r2, [pc, #64]	; (23ac <_Z15ee_buffer_parsePc+0x15c>)
    236a:	6813      	ldr	r3, [r2, #0]
    236c:	4917      	ldr	r1, [pc, #92]	; (23cc <_Z15ee_buffer_parsePc+0x17c>)
    236e:	54c8      	strb	r0, [r1, r3]
        g_buff_pos++;
    2370:	3301      	adds	r3, #1
    2372:	6013      	str	r3, [r2, #0]
        if (g_buff_pos == g_buff_size) {
    2374:	4a0c      	ldr	r2, [pc, #48]	; (23a8 <_Z15ee_buffer_parsePc+0x158>)
    2376:	6812      	ldr	r2, [r2, #0]
    2378:	4293      	cmp	r3, r2
    237a:	d1e6      	bne.n	234a <_Z15ee_buffer_parsePc+0xfa>
          th_printf("m-load-done\r\n");
    237c:	4817      	ldr	r0, [pc, #92]	; (23dc <_Z15ee_buffer_parsePc+0x18c>)
    237e:	f00b fb2e 	bl	d9de <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    2382:	e007      	b.n	2394 <_Z15ee_buffer_parsePc+0x144>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    2384:	4816      	ldr	r0, [pc, #88]	; (23e0 <_Z15ee_buffer_parsePc+0x190>)
    2386:	f00b fb2a 	bl	d9de <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    238a:	e003      	b.n	2394 <_Z15ee_buffer_parsePc+0x144>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    238c:	a901      	add	r1, sp, #4
    238e:	4815      	ldr	r0, [pc, #84]	; (23e4 <_Z15ee_buffer_parsePc+0x194>)
    2390:	f00b fb25 	bl	d9de <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    2394:	2000      	movs	r0, #0
    2396:	e763      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
  return EE_ARG_CLAIMED;
    2398:	2000      	movs	r0, #0
    239a:	e761      	b.n	2260 <_Z15ee_buffer_parsePc+0x10>
    239c:	000110dc 	.word	0x000110dc
    23a0:	000110e0 	.word	0x000110e0
    23a4:	00011110 	.word	0x00011110
    23a8:	200004fc 	.word	0x200004fc
    23ac:	200004f8 	.word	0x200004f8
    23b0:	00011174 	.word	0x00011174
    23b4:	000110e4 	.word	0x000110e4
    23b8:	00011118 	.word	0x00011118
    23bc:	00011148 	.word	0x00011148
    23c0:	000111a4 	.word	0x000111a4
    23c4:	000111c0 	.word	0x000111c0
    23c8:	000111c8 	.word	0x000111c8
    23cc:	20000558 	.word	0x20000558
    23d0:	000111d4 	.word	0x000111d4
    23d4:	00057828 	.word	0x00057828
    23d8:	000111d0 	.word	0x000111d0
    23dc:	00011224 	.word	0x00011224
    23e0:	000111dc 	.word	0x000111dc
    23e4:	00011204 	.word	0x00011204

000023e8 <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    23e8:	b510      	push	{r4, lr}
    23ea:	4604      	mov	r4, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    23ec:	2250      	movs	r2, #80	; 0x50
    23ee:	493b      	ldr	r1, [pc, #236]	; (24dc <_Z16ee_profile_parsePc+0xf4>)
    23f0:	f00d ffad 	bl	1034e <strncmp>
    23f4:	b948      	cbnz	r0, 240a <_Z16ee_profile_parsePc+0x22>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    23f6:	493a      	ldr	r1, [pc, #232]	; (24e0 <_Z16ee_profile_parsePc+0xf8>)
    23f8:	483a      	ldr	r0, [pc, #232]	; (24e4 <_Z16ee_profile_parsePc+0xfc>)
    23fa:	f00b faf0 	bl	d9de <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    23fe:	493a      	ldr	r1, [pc, #232]	; (24e8 <_Z16ee_profile_parsePc+0x100>)
    2400:	483a      	ldr	r0, [pc, #232]	; (24ec <_Z16ee_profile_parsePc+0x104>)
    2402:	f00b faec 	bl	d9de <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2406:	2000      	movs	r0, #0
}
    2408:	bd10      	pop	{r4, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    240a:	2250      	movs	r2, #80	; 0x50
    240c:	4938      	ldr	r1, [pc, #224]	; (24f0 <_Z16ee_profile_parsePc+0x108>)
    240e:	4620      	mov	r0, r4
    2410:	f00d ff9d 	bl	1034e <strncmp>
    2414:	bb30      	cbnz	r0, 2464 <_Z16ee_profile_parsePc+0x7c>
    th_printf("%s\r\n", EE_FW_VERSION);
    2416:	4932      	ldr	r1, [pc, #200]	; (24e0 <_Z16ee_profile_parsePc+0xf8>)
    2418:	4836      	ldr	r0, [pc, #216]	; (24f4 <_Z16ee_profile_parsePc+0x10c>)
    241a:	f00b fae0 	bl	d9de <_Z9th_printfPKcz>
    th_printf("\r\n");
    241e:	4836      	ldr	r0, [pc, #216]	; (24f8 <_Z16ee_profile_parsePc+0x110>)
    2420:	f00b fadd 	bl	d9de <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    2424:	4835      	ldr	r0, [pc, #212]	; (24fc <_Z16ee_profile_parsePc+0x114>)
    2426:	f00b fada 	bl	d9de <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    242a:	4835      	ldr	r0, [pc, #212]	; (2500 <_Z16ee_profile_parsePc+0x118>)
    242c:	f00b fad7 	bl	d9de <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    2430:	4834      	ldr	r0, [pc, #208]	; (2504 <_Z16ee_profile_parsePc+0x11c>)
    2432:	f00b fad4 	bl	d9de <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    2436:	4834      	ldr	r0, [pc, #208]	; (2508 <_Z16ee_profile_parsePc+0x120>)
    2438:	f00b fad1 	bl	d9de <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    243c:	4833      	ldr	r0, [pc, #204]	; (250c <_Z16ee_profile_parsePc+0x124>)
    243e:	f00b face 	bl	d9de <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    2442:	4833      	ldr	r0, [pc, #204]	; (2510 <_Z16ee_profile_parsePc+0x128>)
    2444:	f00b facb 	bl	d9de <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    2448:	4832      	ldr	r0, [pc, #200]	; (2514 <_Z16ee_profile_parsePc+0x12c>)
    244a:	f00b fac8 	bl	d9de <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    244e:	4832      	ldr	r0, [pc, #200]	; (2518 <_Z16ee_profile_parsePc+0x130>)
    2450:	f00b fac5 	bl	d9de <_Z9th_printfPKcz>
    th_printf(
    2454:	4831      	ldr	r0, [pc, #196]	; (251c <_Z16ee_profile_parsePc+0x134>)
    2456:	f00b fac2 	bl	d9de <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    245a:	4831      	ldr	r0, [pc, #196]	; (2520 <_Z16ee_profile_parsePc+0x138>)
    245c:	f00b fabf 	bl	d9de <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2460:	2000      	movs	r0, #0
    2462:	e7d1      	b.n	2408 <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    2464:	4620      	mov	r0, r4
    2466:	f7ff fef3 	bl	2250 <_Z15ee_buffer_parsePc>
    246a:	2800      	cmp	r0, #0
    246c:	d0cc      	beq.n	2408 <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    246e:	2250      	movs	r2, #80	; 0x50
    2470:	492c      	ldr	r1, [pc, #176]	; (2524 <_Z16ee_profile_parsePc+0x13c>)
    2472:	4620      	mov	r0, r4
    2474:	f00d ff6b 	bl	1034e <strncmp>
    2478:	bb18      	cbnz	r0, 24c2 <_Z16ee_profile_parsePc+0xda>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    247a:	492b      	ldr	r1, [pc, #172]	; (2528 <_Z16ee_profile_parsePc+0x140>)
    247c:	f00a fe0e 	bl	d09c <strtok>
    if (p_next) {
    2480:	b1b0      	cbz	r0, 24b0 <_Z16ee_profile_parsePc+0xc8>
      i = atoi(p_next);
    2482:	f00d fdee 	bl	10062 <atoi>
      if (i <= 0) {
    2486:	1e04      	subs	r4, r0, #0
    2488:	dd0d      	ble.n	24a6 <_Z16ee_profile_parsePc+0xbe>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    248a:	4927      	ldr	r1, [pc, #156]	; (2528 <_Z16ee_profile_parsePc+0x140>)
    248c:	2000      	movs	r0, #0
    248e:	f00a fe05 	bl	d09c <strtok>
      if (p_next) {
    2492:	b1a0      	cbz	r0, 24be <_Z16ee_profile_parsePc+0xd6>
        i = atoi(p_next);
    2494:	f00d fde5 	bl	10062 <atoi>
        if (i < 0) {
    2498:	1e01      	subs	r1, r0, #0
    249a:	da0b      	bge.n	24b4 <_Z16ee_profile_parsePc+0xcc>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    249c:	4823      	ldr	r0, [pc, #140]	; (252c <_Z16ee_profile_parsePc+0x144>)
    249e:	f00b fa9e 	bl	d9de <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    24a2:	2000      	movs	r0, #0
    24a4:	e7b0      	b.n	2408 <_Z16ee_profile_parsePc+0x20>
        th_printf("e-[Inference iterations must be >0]\r\n");
    24a6:	4822      	ldr	r0, [pc, #136]	; (2530 <_Z16ee_profile_parsePc+0x148>)
    24a8:	f00b fa99 	bl	d9de <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    24ac:	2000      	movs	r0, #0
    24ae:	e7ab      	b.n	2408 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    24b0:	210a      	movs	r1, #10
    size_t n = 1;
    24b2:	2401      	movs	r4, #1
    ee_infer(n, w);
    24b4:	4620      	mov	r0, r4
    24b6:	f7ff fe99 	bl	21ec <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    24ba:	2000      	movs	r0, #0
    24bc:	e7a4      	b.n	2408 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    24be:	210a      	movs	r1, #10
    24c0:	e7f8      	b.n	24b4 <_Z16ee_profile_parsePc+0xcc>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    24c2:	2250      	movs	r2, #80	; 0x50
    24c4:	491b      	ldr	r1, [pc, #108]	; (2534 <_Z16ee_profile_parsePc+0x14c>)
    24c6:	4620      	mov	r0, r4
    24c8:	f00d ff41 	bl	1034e <strncmp>
    24cc:	b108      	cbz	r0, 24d2 <_Z16ee_profile_parsePc+0xea>
    return EE_ARG_UNCLAIMED;
    24ce:	2001      	movs	r0, #1
    24d0:	e79a      	b.n	2408 <_Z16ee_profile_parsePc+0x20>
    th_results();
    24d2:	f000 f933 	bl	273c <_Z10th_resultsv>
  return EE_ARG_CLAIMED;
    24d6:	2000      	movs	r0, #0
    24d8:	e796      	b.n	2408 <_Z16ee_profile_parsePc+0x20>
    24da:	bf00      	nop
    24dc:	00011234 	.word	0x00011234
    24e0:	0001123c 	.word	0x0001123c
    24e4:	00011260 	.word	0x00011260
    24e8:	00011274 	.word	0x00011274
    24ec:	0001127c 	.word	0x0001127c
    24f0:	0001128c 	.word	0x0001128c
    24f4:	00011294 	.word	0x00011294
    24f8:	00057828 	.word	0x00057828
    24fc:	0001129c 	.word	0x0001129c
    2500:	000112c4 	.word	0x000112c4
    2504:	000112f4 	.word	0x000112f4
    2508:	0001131c 	.word	0x0001131c
    250c:	00011350 	.word	0x00011350
    2510:	00011388 	.word	0x00011388
    2514:	000113c0 	.word	0x000113c0
    2518:	000113dc 	.word	0x000113dc
    251c:	0001140c 	.word	0x0001140c
    2520:	00011454 	.word	0x00011454
    2524:	00011484 	.word	0x00011484
    2528:	000110e0 	.word	0x000110e0
    252c:	000114b4 	.word	0x000114b4
    2530:	0001148c 	.word	0x0001148c
    2534:	000114d8 	.word	0x000114d8

00002538 <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    2538:	4b14      	ldr	r3, [pc, #80]	; (258c <_Z33ee_serial_command_parser_callbackPc+0x54>)
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	b903      	cbnz	r3, 2540 <_Z33ee_serial_command_parser_callbackPc+0x8>
    253e:	4770      	bx	lr
void ee_serial_command_parser_callback(char *p_command) {
    2540:	b510      	push	{r4, lr}
  tok = strtok(p_command, EE_CMD_DELIMITER);
    2542:	4913      	ldr	r1, [pc, #76]	; (2590 <_Z33ee_serial_command_parser_callbackPc+0x58>)
    2544:	f00a fdaa 	bl	d09c <strtok>
    2548:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    254a:	2250      	movs	r2, #80	; 0x50
    254c:	4911      	ldr	r1, [pc, #68]	; (2594 <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    254e:	f00d fefe 	bl	1034e <strncmp>
    2552:	b940      	cbnz	r0, 2566 <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    2554:	4a10      	ldr	r2, [pc, #64]	; (2598 <_Z33ee_serial_command_parser_callbackPc+0x60>)
    2556:	4911      	ldr	r1, [pc, #68]	; (259c <_Z33ee_serial_command_parser_callbackPc+0x64>)
    2558:	4811      	ldr	r0, [pc, #68]	; (25a0 <_Z33ee_serial_command_parser_callbackPc+0x68>)
    255a:	f00b fa40 	bl	d9de <_Z9th_printfPKcz>
  th_printf(EE_MSG_READY);
    255e:	4811      	ldr	r0, [pc, #68]	; (25a4 <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    2560:	f00b fa3d 	bl	d9de <_Z9th_printfPKcz>
}
    2564:	bd10      	pop	{r4, pc}
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    2566:	2250      	movs	r2, #80	; 0x50
    2568:	490f      	ldr	r1, [pc, #60]	; (25a8 <_Z33ee_serial_command_parser_callbackPc+0x70>)
    256a:	4620      	mov	r0, r4
    256c:	f00d feef 	bl	1034e <strncmp>
    2570:	b910      	cbnz	r0, 2578 <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    2572:	f000 f8f5 	bl	2760 <_Z12th_timestampv>
    2576:	e7f2      	b.n	255e <_Z33ee_serial_command_parser_callbackPc+0x26>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    2578:	4620      	mov	r0, r4
    257a:	f7ff ff35 	bl	23e8 <_Z16ee_profile_parsePc>
    257e:	2800      	cmp	r0, #0
    2580:	d0ed      	beq.n	255e <_Z33ee_serial_command_parser_callbackPc+0x26>
    th_printf(EE_ERR_CMD, tok);
    2582:	4621      	mov	r1, r4
    2584:	4809      	ldr	r0, [pc, #36]	; (25ac <_Z33ee_serial_command_parser_callbackPc+0x74>)
    2586:	f00b fa2a 	bl	d9de <_Z9th_printfPKcz>
    258a:	e7e8      	b.n	255e <_Z33ee_serial_command_parser_callbackPc+0x26>
    258c:	2001d744 	.word	0x2001d744
    2590:	000110e0 	.word	0x000110e0
    2594:	000114e0 	.word	0x000114e0
    2598:	000114e8 	.word	0x000114e8
    259c:	000114f4 	.word	0x000114f4
    25a0:	000114f8 	.word	0x000114f8
    25a4:	00011088 	.word	0x00011088
    25a8:	0001150c 	.word	0x0001150c
    25ac:	00011518 	.word	0x00011518

000025b0 <_Z13ee_get_bufferPhj>:
 * typically the length of the provided buffer.
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    25b0:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    25b2:	4b06      	ldr	r3, [pc, #24]	; (25cc <_Z13ee_get_bufferPhj+0x1c>)
    25b4:	681c      	ldr	r4, [r3, #0]
    25b6:	428c      	cmp	r4, r1
    25b8:	d900      	bls.n	25bc <_Z13ee_get_bufferPhj+0xc>
    25ba:	460c      	mov	r4, r1
  if (buffer != nullptr) {
    25bc:	b118      	cbz	r0, 25c6 <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    25be:	4622      	mov	r2, r4
    25c0:	4903      	ldr	r1, [pc, #12]	; (25d0 <_Z13ee_get_bufferPhj+0x20>)
    25c2:	f00d fd52 	bl	1006a <memcpy>
  }
  return len;
    25c6:	4620      	mov	r0, r4
    25c8:	bd10      	pop	{r4, pc}
    25ca:	bf00      	nop
    25cc:	200004f8 	.word	0x200004f8
    25d0:	20000558 	.word	0x20000558

000025d4 <_Z10copy_inputv>:
tflite::MicroInterpreter* interpreter = nullptr;
TfLiteTensor* model_input = nullptr;

// copy input into interpreter's buffer
void copy_input() {
  int8_t *model_input_buffer = model_input->data.int8;
    25d4:	4b06      	ldr	r3, [pc, #24]	; (25f0 <_Z10copy_inputv+0x1c>)
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	6859      	ldr	r1, [r3, #4]
  int8_t *feature_buffer_ptr = input_quantized;

  // Copy feature buffer to input tensor
  for (int i = 0; i < kFeatureElementCount; i++) {
    25da:	2300      	movs	r3, #0
    25dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
    25e0:	da04      	bge.n	25ec <_Z10copy_inputv+0x18>
    model_input_buffer[i] = feature_buffer_ptr[i];
    25e2:	4a04      	ldr	r2, [pc, #16]	; (25f4 <_Z10copy_inputv+0x20>)
    25e4:	56d2      	ldrsb	r2, [r2, r3]
    25e6:	54ca      	strb	r2, [r1, r3]
  for (int i = 0; i < kFeatureElementCount; i++) {
    25e8:	3301      	adds	r3, #1
    25ea:	e7f7      	b.n	25dc <_Z10copy_inputv+0x8>
  }
}
    25ec:	4770      	bx	lr
    25ee:	bf00      	nop
    25f0:	2001a308 	.word	0x2001a308
    25f4:	2001a080 	.word	0x2001a080

000025f8 <_Z16calculate_resultv>:

// calculate |output - input|
void calculate_result(){
    25f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float diffsum = 0;

  TfLiteTensor* output = interpreter->output(0);
    25fc:	2100      	movs	r1, #0
    25fe:	4b1c      	ldr	r3, [pc, #112]	; (2670 <_Z16calculate_resultv+0x78>)
    2600:	6818      	ldr	r0, [r3, #0]
    2602:	f004 f96d 	bl	68e0 <_ZN6tflite16MicroInterpreter6outputEj>
    2606:	4607      	mov	r7, r0
  for (size_t i = 0; i < kFeatureElementCount; i++) {
    2608:	2400      	movs	r4, #0
  float diffsum = 0;
    260a:	2500      	movs	r5, #0
  for (size_t i = 0; i < kFeatureElementCount; i++) {
    260c:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
    2610:	d225      	bcs.n	265e <_Z16calculate_resultv+0x66>
    float converted = DequantizeInt8ToFloat(output->data.int8[i], interpreter->output(0)->params.scale,
    2612:	687b      	ldr	r3, [r7, #4]
    2614:	f913 9004 	ldrsb.w	r9, [r3, r4]
    2618:	4e15      	ldr	r6, [pc, #84]	; (2670 <_Z16calculate_resultv+0x78>)
    261a:	2100      	movs	r1, #0
    261c:	6830      	ldr	r0, [r6, #0]
    261e:	f004 f95f 	bl	68e0 <_ZN6tflite16MicroInterpreter6outputEj>
    2622:	f8d0 800c 	ldr.w	r8, [r0, #12]
                                            interpreter->output(0)->params.zero_point);
    2626:	2100      	movs	r1, #0
    2628:	6830      	ldr	r0, [r6, #0]
    262a:	f004 f959 	bl	68e0 <_ZN6tflite16MicroInterpreter6outputEj>
    float converted = DequantizeInt8ToFloat(output->data.int8[i], interpreter->output(0)->params.scale,
    262e:	6900      	ldr	r0, [r0, #16]

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    2630:	eba9 0000 	sub.w	r0, r9, r0
    2634:	f7fe fb3c 	bl	cb0 <__aeabi_i2f>
    2638:	4601      	mov	r1, r0
    263a:	4640      	mov	r0, r8
    263c:	f7fe fb8c 	bl	d58 <__aeabi_fmul>
    float diff = converted - input_float[i];
    2640:	4b0c      	ldr	r3, [pc, #48]	; (2674 <_Z16calculate_resultv+0x7c>)
    2642:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    2646:	f7fe fa7d 	bl	b44 <__aeabi_fsub>
    264a:	4601      	mov	r1, r0
    diffsum += diff * diff;
    264c:	f7fe fb84 	bl	d58 <__aeabi_fmul>
    2650:	4601      	mov	r1, r0
    2652:	4628      	mov	r0, r5
    2654:	f7fe fa78 	bl	b48 <__addsf3>
    2658:	4605      	mov	r5, r0
  for (size_t i = 0; i < kFeatureElementCount; i++) {
    265a:	3401      	adds	r4, #1
    265c:	e7d6      	b.n	260c <_Z16calculate_resultv+0x14>
  }
  diffsum /= kFeatureElementCount;
    265e:	4906      	ldr	r1, [pc, #24]	; (2678 <_Z16calculate_resultv+0x80>)
    2660:	4628      	mov	r0, r5
    2662:	f7fe fc2d 	bl	ec0 <__aeabi_fdiv>

  result = diffsum;
    2666:	4b05      	ldr	r3, [pc, #20]	; (267c <_Z16calculate_resultv+0x84>)
    2668:	6018      	str	r0, [r3, #0]
}
    266a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    266e:	bf00      	nop
    2670:	2001a300 	.word	0x2001a300
    2674:	20019680 	.word	0x20019680
    2678:	44200000 	.word	0x44200000
    267c:	2001a30c 	.word	0x2001a30c

00002680 <_Z8th_inferv>:
   */
  th_printf("m-results-[%0.3f]\r\n", result);
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() {
    2680:	b508      	push	{r3, lr}

  // Run the model on the spectrogram input and make sure it succeeds.
  TfLiteStatus invoke_status = interpreter->Invoke();
    2682:	4b06      	ldr	r3, [pc, #24]	; (269c <_Z8th_inferv+0x1c>)
    2684:	6818      	ldr	r0, [r3, #0]
    2686:	f004 ff09 	bl	749c <_ZN6tflite16MicroInterpreter6InvokeEv>
  if (invoke_status != kTfLiteOk) {
    268a:	b900      	cbnz	r0, 268e <_Z8th_inferv+0xe>
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed");
    return;
  }
}
    268c:	bd08      	pop	{r3, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed");
    268e:	4904      	ldr	r1, [pc, #16]	; (26a0 <_Z8th_inferv+0x20>)
    2690:	4b04      	ldr	r3, [pc, #16]	; (26a4 <_Z8th_inferv+0x24>)
    2692:	6818      	ldr	r0, [r3, #0]
    2694:	f00d f92c 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
    2698:	e7f8      	b.n	268c <_Z8th_inferv+0xc>
    269a:	bf00      	nop
    269c:	2001a300 	.word	0x2001a300
    26a0:	00011534 	.word	0x00011534
    26a4:	2001967c 	.word	0x2001967c

000026a8 <_Z14th_load_tensorv>:
void th_load_tensor() {
    26a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input_float),
    26aa:	f44f 6120 	mov.w	r1, #2560	; 0xa00
    26ae:	481f      	ldr	r0, [pc, #124]	; (272c <_Z14th_load_tensorv+0x84>)
    26b0:	f7ff ff7e 	bl	25b0 <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(float) != kInputSize) {
    26b4:	f5a0 6320 	sub.w	r3, r0, #2560	; 0xa00
    26b8:	2b03      	cmp	r3, #3
    26ba:	d80c      	bhi.n	26d6 <_Z14th_load_tensorv+0x2e>
  float input_scale = interpreter->input(0)->params.scale;
    26bc:	4c1c      	ldr	r4, [pc, #112]	; (2730 <_Z14th_load_tensorv+0x88>)
    26be:	2100      	movs	r1, #0
    26c0:	6820      	ldr	r0, [r4, #0]
    26c2:	f004 f969 	bl	6998 <_ZN6tflite16MicroInterpreter5inputEj>
    26c6:	68c7      	ldr	r7, [r0, #12]
  int input_zero_point = interpreter->input(0)->params.zero_point;
    26c8:	2100      	movs	r1, #0
    26ca:	6820      	ldr	r0, [r4, #0]
    26cc:	f004 f964 	bl	6998 <_ZN6tflite16MicroInterpreter5inputEj>
    26d0:	6906      	ldr	r6, [r0, #16]
  for (int i = 0; i < kInputSize; i++) {
    26d2:	2400      	movs	r4, #0
    26d4:	e00b      	b.n	26ee <_Z14th_load_tensorv+0x46>
    th_printf("Input db has %d elemented, expected %d\n", bytes / sizeof(float),
    26d6:	f44f 7220 	mov.w	r2, #640	; 0x280
    26da:	0881      	lsrs	r1, r0, #2
    26dc:	4815      	ldr	r0, [pc, #84]	; (2734 <_Z14th_load_tensorv+0x8c>)
    26de:	f00b f97e 	bl	d9de <_Z9th_printfPKcz>
    return;
    26e2:	e021      	b.n	2728 <_Z14th_load_tensorv+0x80>
}

inline int8_t QuantizeFloatToInt8(float value, float scale, int zero_point) {
  int32_t result = round(value / scale) + zero_point;
  if (result < INT8_MIN) {
    result = INT8_MIN;
    26e4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    input_quantized[i] = QuantizeFloatToInt8(
    26e8:	4b13      	ldr	r3, [pc, #76]	; (2738 <_Z14th_load_tensorv+0x90>)
    26ea:	5518      	strb	r0, [r3, r4]
  for (int i = 0; i < kInputSize; i++) {
    26ec:	3401      	adds	r4, #1
    26ee:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
    26f2:	da17      	bge.n	2724 <_Z14th_load_tensorv+0x7c>
  int32_t result = round(value / scale) + zero_point;
    26f4:	4639      	mov	r1, r7
    26f6:	4b0d      	ldr	r3, [pc, #52]	; (272c <_Z14th_load_tensorv+0x84>)
    26f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    26fc:	f7fe fbe0 	bl	ec0 <__aeabi_fdiv>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    2700:	f009 ff16 	bl	c530 <roundf>
    2704:	4605      	mov	r5, r0
    2706:	4630      	mov	r0, r6
    2708:	f7fe fad2 	bl	cb0 <__aeabi_i2f>
    270c:	4629      	mov	r1, r5
    270e:	f7fe fa1b 	bl	b48 <__addsf3>
    2712:	f7fe fce7 	bl	10e4 <__aeabi_f2iz>
  if (result < INT8_MIN) {
    2716:	f110 0f80 	cmn.w	r0, #128	; 0x80
    271a:	dbe3      	blt.n	26e4 <_Z14th_load_tensorv+0x3c>
  }
  if (result > INT8_MAX) {
    271c:	287f      	cmp	r0, #127	; 0x7f
    271e:	dde3      	ble.n	26e8 <_Z14th_load_tensorv+0x40>
    result = INT8_MAX;
    2720:	207f      	movs	r0, #127	; 0x7f
    2722:	e7e1      	b.n	26e8 <_Z14th_load_tensorv+0x40>
  copy_input();
    2724:	f7ff ff56 	bl	25d4 <_Z10copy_inputv>
}
    2728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    272a:	bf00      	nop
    272c:	20019680 	.word	0x20019680
    2730:	2001a300 	.word	0x2001a300
    2734:	00011544 	.word	0x00011544
    2738:	2001a080 	.word	0x2001a080

0000273c <_Z10th_resultsv>:
void th_results() {
    273c:	b508      	push	{r3, lr}
  calculate_result();
    273e:	f7ff ff5b 	bl	25f8 <_Z16calculate_resultv>
  th_printf("m-results-[%0.3f]\r\n", result);
    2742:	4b05      	ldr	r3, [pc, #20]	; (2758 <_Z10th_resultsv+0x1c>)
    2744:	6818      	ldr	r0, [r3, #0]
    2746:	f7fd fe8f 	bl	468 <__aeabi_f2d>
    274a:	4602      	mov	r2, r0
    274c:	460b      	mov	r3, r1
    274e:	4803      	ldr	r0, [pc, #12]	; (275c <_Z10th_resultsv+0x20>)
    2750:	f00b f945 	bl	d9de <_Z9th_printfPKcz>
}
    2754:	bd08      	pop	{r3, pc}
    2756:	bf00      	nop
    2758:	2001a30c 	.word	0x2001a30c
    275c:	0001156c 	.word	0x0001156c

00002760 <_Z12th_timestampv>:
}




void th_timestamp(void) {
    2760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2762:	f00d fc4d 	bl	10000 <z_impl_k_uptime_ticks>
      nrf_gpio_pin_set(PIN7(1,7));

      //nrf_gpio_pin_clear(PIN7(1,7));
/* USER CODE 1 END */
#else
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2766:	014e      	lsls	r6, r1, #5
    2768:	0143      	lsls	r3, r0, #5
    276a:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
    276e:	1a1b      	subs	r3, r3, r0
    2770:	eb62 0201 	sbc.w	r2, r2, r1
    2774:	0256      	lsls	r6, r2, #9
    2776:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
    277a:	025f      	lsls	r7, r3, #9
    277c:	4632      	mov	r2, r6
    277e:	183b      	adds	r3, r7, r0
    2780:	eb41 0202 	adc.w	r2, r1, r2
    2784:	0197      	lsls	r7, r2, #6
    2786:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
    278a:	019e      	lsls	r6, r3, #6
    278c:	1af3      	subs	r3, r6, r3
    278e:	eb67 0202 	sbc.w	r2, r7, r2
    2792:	181c      	adds	r4, r3, r0
    2794:	eb42 0501 	adc.w	r5, r2, r1
    2798:	4623      	mov	r3, r4
    279a:	4629      	mov	r1, r5
    279c:	2c00      	cmp	r4, #0
    279e:	f175 0200 	sbcs.w	r2, r5, #0
    27a2:	db06      	blt.n	27b2 <_Z12th_timestampv+0x52>
    27a4:	0bdb      	lsrs	r3, r3, #15
       unsigned long microSeconds = (unsigned long) uptime_usec;
       /* USER CODE 2 BEGIN */
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
    27a6:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
    27aa:	4806      	ldr	r0, [pc, #24]	; (27c4 <_Z12th_timestampv+0x64>)
    27ac:	f00b f917 	bl	d9de <_Z9th_printfPKcz>
#endif
}
    27b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    27b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
    27b6:	18e3      	adds	r3, r4, r3
    27b8:	f04f 0100 	mov.w	r1, #0
    27bc:	eb45 0101 	adc.w	r1, r5, r1
    27c0:	e7f0      	b.n	27a4 <_Z12th_timestampv+0x44>
    27c2:	bf00      	nop
    27c4:	00011580 	.word	0x00011580

000027c8 <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    27c8:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    27ca:	4803      	ldr	r0, [pc, #12]	; (27d8 <_Z23th_timestamp_initializev+0x10>)
    27cc:	f00b f907 	bl	d9de <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
    27d0:	f7ff ffc6 	bl	2760 <_Z12th_timestampv>
}
    27d4:	bd08      	pop	{r3, pc}
    27d6:	bf00      	nop
    27d8:	00011590 	.word	0x00011590

000027dc <_Z19th_final_initializev>:
void th_final_initialize(void) {
    27dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27de:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroErrorReporter micro_error_reporter;
    27e0:	4b9c      	ldr	r3, [pc, #624]	; (2a54 <_Z19th_final_initializev+0x278>)
    27e2:	681b      	ldr	r3, [r3, #0]
    27e4:	f013 0f01 	tst.w	r3, #1
    27e8:	d035      	beq.n	2856 <_Z19th_final_initializev+0x7a>
  error_reporter = &micro_error_reporter;
    27ea:	4b9b      	ldr	r3, [pc, #620]	; (2a58 <_Z19th_final_initializev+0x27c>)
    27ec:	4a9b      	ldr	r2, [pc, #620]	; (2a5c <_Z19th_final_initializev+0x280>)
    27ee:	601a      	str	r2, [r3, #0]
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<tflite::Model>(buf);
    27f0:	489b      	ldr	r0, [pc, #620]	; (2a60 <_Z19th_final_initializev+0x284>)
    27f2:	f00b f943 	bl	da7c <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
    27f6:	4604      	mov	r4, r0
  model = tflite::GetModel(g_model);
    27f8:	4b9a      	ldr	r3, [pc, #616]	; (2a64 <_Z19th_final_initializev+0x288>)
    27fa:	6018      	str	r0, [r3, #0]
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    27fc:	f00b f92c 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    2800:	1a25      	subs	r5, r4, r0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    2802:	4628      	mov	r0, r5
    2804:	f00b f92e 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    2808:	2804      	cmp	r0, #4
    280a:	d92d      	bls.n	2868 <_Z19th_final_initializev+0x8c>
    280c:	1d28      	adds	r0, r5, #4
    280e:	f00b f929 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    2812:	b358      	cbz	r0, 286c <_Z19th_final_initializev+0x90>
    2814:	4420      	add	r0, r4
    2816:	f00b f919 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    281a:	4602      	mov	r2, r0
  if (model->version() != TFLITE_SCHEMA_VERSION) {
    281c:	2a03      	cmp	r2, #3
    281e:	d127      	bne.n	2870 <_Z19th_final_initializev+0x94>
  static tflite::MicroMutableOpResolver<3> micro_op_resolver(error_reporter);
    2820:	4b91      	ldr	r3, [pc, #580]	; (2a68 <_Z19th_final_initializev+0x28c>)
    2822:	681b      	ldr	r3, [r3, #0]
    2824:	f013 0f01 	tst.w	r3, #1
    2828:	d028      	beq.n	287c <_Z19th_final_initializev+0xa0>
  if (micro_op_resolver.AddFullyConnected() != kTfLiteOk) {
    282a:	a804      	add	r0, sp, #16
    282c:	f007 f87c 	bl	9928 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
    2830:	488e      	ldr	r0, [pc, #568]	; (2a6c <_Z19th_final_initializev+0x290>)
    2832:	6803      	ldr	r3, [r0, #0]
    2834:	699b      	ldr	r3, [r3, #24]
    2836:	2109      	movs	r1, #9
    2838:	4798      	blx	r3
    283a:	2800      	cmp	r0, #0
    283c:	d02e      	beq.n	289c <_Z19th_final_initializev+0xc0>
      if (error_reporter_ != nullptr) {
    283e:	4b8b      	ldr	r3, [pc, #556]	; (2a6c <_Z19th_final_initializev+0x290>)
    2840:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2842:	b118      	cbz	r0, 284c <_Z19th_final_initializev+0x70>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2844:	2209      	movs	r2, #9
    2846:	498a      	ldr	r1, [pc, #552]	; (2a70 <_Z19th_final_initializev+0x294>)
    2848:	f00d f852 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
    284c:	2401      	movs	r4, #1
    284e:	2c00      	cmp	r4, #0
    2850:	d050      	beq.n	28f4 <_Z19th_final_initializev+0x118>
}
    2852:	b00d      	add	sp, #52	; 0x34
    2854:	bdf0      	pop	{r4, r5, r6, r7, pc}
  static tflite::MicroErrorReporter micro_error_reporter;
    2856:	4b7f      	ldr	r3, [pc, #508]	; (2a54 <_Z19th_final_initializev+0x278>)
    2858:	2201      	movs	r2, #1
    285a:	601a      	str	r2, [r3, #0]
    285c:	4a85      	ldr	r2, [pc, #532]	; (2a74 <_Z19th_final_initializev+0x298>)
    285e:	4986      	ldr	r1, [pc, #536]	; (2a78 <_Z19th_final_initializev+0x29c>)
    2860:	487e      	ldr	r0, [pc, #504]	; (2a5c <_Z19th_final_initializev+0x280>)
    2862:	f00b fd88 	bl	e376 <__aeabi_atexit>
    2866:	e7c0      	b.n	27ea <_Z19th_final_initializev+0xe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    2868:	2000      	movs	r0, #0
    286a:	e7d2      	b.n	2812 <_Z19th_final_initializev+0x36>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    286c:	2200      	movs	r2, #0
    286e:	e7d5      	b.n	281c <_Z19th_final_initializev+0x40>
    TF_LITE_REPORT_ERROR(error_reporter,
    2870:	2303      	movs	r3, #3
    2872:	4982      	ldr	r1, [pc, #520]	; (2a7c <_Z19th_final_initializev+0x2a0>)
    2874:	4879      	ldr	r0, [pc, #484]	; (2a5c <_Z19th_final_initializev+0x280>)
    2876:	f00d f83b 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
    287a:	e7ea      	b.n	2852 <_Z19th_final_initializev+0x76>
      : error_reporter_(error_reporter) {}
    287c:	487b      	ldr	r0, [pc, #492]	; (2a6c <_Z19th_final_initializev+0x290>)
    287e:	4b80      	ldr	r3, [pc, #512]	; (2a80 <_Z19th_final_initializev+0x2a4>)
    2880:	6003      	str	r3, [r0, #0]
    2882:	2300      	movs	r3, #0
    2884:	6643      	str	r3, [r0, #100]	; 0x64
    2886:	6783      	str	r3, [r0, #120]	; 0x78
    2888:	4b74      	ldr	r3, [pc, #464]	; (2a5c <_Z19th_final_initializev+0x280>)
    288a:	67c3      	str	r3, [r0, #124]	; 0x7c
  static tflite::MicroMutableOpResolver<3> micro_op_resolver(error_reporter);
    288c:	4b76      	ldr	r3, [pc, #472]	; (2a68 <_Z19th_final_initializev+0x28c>)
    288e:	2201      	movs	r2, #1
    2890:	601a      	str	r2, [r3, #0]
    2892:	4a78      	ldr	r2, [pc, #480]	; (2a74 <_Z19th_final_initializev+0x298>)
    2894:	497b      	ldr	r1, [pc, #492]	; (2a84 <_Z19th_final_initializev+0x2a8>)
    2896:	f00b fd6e 	bl	e376 <__aeabi_atexit>
    289a:	e7c6      	b.n	282a <_Z19th_final_initializev+0x4e>
    }

    if (registrations_len_ >= tOpCount) {
    289c:	4b73      	ldr	r3, [pc, #460]	; (2a6c <_Z19th_final_initializev+0x290>)
    289e:	6e5e      	ldr	r6, [r3, #100]	; 0x64
    28a0:	2e02      	cmp	r6, #2
    28a2:	d81e      	bhi.n	28e2 <_Z19th_final_initializev+0x106>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    28a4:	4f71      	ldr	r7, [pc, #452]	; (2a6c <_Z19th_final_initializev+0x290>)
    28a6:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    28aa:	f10c 0404 	add.w	r4, ip, #4
    28ae:	ad04      	add	r5, sp, #16
    28b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    28b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    28b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    28b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    28bc:	2209      	movs	r2, #9
    28be:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    28c2:	3601      	adds	r6, #1
    28c4:	667e      	str	r6, [r7, #100]	; 0x64

    builtin_codes_[num_buitin_ops_] = op;
    28c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    28c8:	18f9      	adds	r1, r7, r3
    28ca:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
    28ce:	f103 021a 	add.w	r2, r3, #26
    28d2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    28d6:	496c      	ldr	r1, [pc, #432]	; (2a88 <_Z19th_final_initializev+0x2ac>)
    28d8:	6051      	str	r1, [r2, #4]
    num_buitin_ops_++;
    28da:	3301      	adds	r3, #1
    28dc:	67bb      	str	r3, [r7, #120]	; 0x78

    return kTfLiteOk;
    28de:	2400      	movs	r4, #0
    28e0:	e7b5      	b.n	284e <_Z19th_final_initializev+0x72>
      if (error_reporter_) {
    28e2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    28e4:	b120      	cbz	r0, 28f0 <_Z19th_final_initializev+0x114>
        TF_LITE_REPORT_ERROR(error_reporter_,
    28e6:	2303      	movs	r3, #3
    28e8:	2209      	movs	r2, #9
    28ea:	4968      	ldr	r1, [pc, #416]	; (2a8c <_Z19th_final_initializev+0x2b0>)
    28ec:	f00d f800 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    28f0:	2401      	movs	r4, #1
    28f2:	e7ac      	b.n	284e <_Z19th_final_initializev+0x72>
    return AddBuiltin(BuiltinOperator_QUANTIZE, Register_QUANTIZE(),
    28f4:	a804      	add	r0, sp, #16
    28f6:	f007 fb29 	bl	9f4c <_ZN6tflite17Register_QUANTIZEEv>
    if (FindOp(op) != nullptr) {
    28fa:	485c      	ldr	r0, [pc, #368]	; (2a6c <_Z19th_final_initializev+0x290>)
    28fc:	6803      	ldr	r3, [r0, #0]
    28fe:	699b      	ldr	r3, [r3, #24]
    2900:	2172      	movs	r1, #114	; 0x72
    2902:	4798      	blx	r3
    2904:	2800      	cmp	r0, #0
    2906:	d047      	beq.n	2998 <_Z19th_final_initializev+0x1bc>
      if (error_reporter_ != nullptr) {
    2908:	4b58      	ldr	r3, [pc, #352]	; (2a6c <_Z19th_final_initializev+0x290>)
    290a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    290c:	b118      	cbz	r0, 2916 <_Z19th_final_initializev+0x13a>
        TF_LITE_REPORT_ERROR(error_reporter_,
    290e:	2272      	movs	r2, #114	; 0x72
    2910:	4957      	ldr	r1, [pc, #348]	; (2a70 <_Z19th_final_initializev+0x294>)
    2912:	f00c ffed 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2916:	2401      	movs	r4, #1
  if (micro_op_resolver.AddQuantize() != kTfLiteOk) {
    2918:	2c00      	cmp	r4, #0
    291a:	d19a      	bne.n	2852 <_Z19th_final_initializev+0x76>
                      tflite::ops::micro::Register_DEQUANTIZE(),
    291c:	a804      	add	r0, sp, #16
    291e:	f006 fd8b 	bl	9438 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
    if (FindOp(op) != nullptr) {
    2922:	4852      	ldr	r0, [pc, #328]	; (2a6c <_Z19th_final_initializev+0x290>)
    2924:	6803      	ldr	r3, [r0, #0]
    2926:	699b      	ldr	r3, [r3, #24]
    2928:	2106      	movs	r1, #6
    292a:	4798      	blx	r3
    292c:	2800      	cmp	r0, #0
    292e:	d063      	beq.n	29f8 <_Z19th_final_initializev+0x21c>
      if (error_reporter_ != nullptr) {
    2930:	4b4e      	ldr	r3, [pc, #312]	; (2a6c <_Z19th_final_initializev+0x290>)
    2932:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2934:	b118      	cbz	r0, 293e <_Z19th_final_initializev+0x162>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2936:	2206      	movs	r2, #6
    2938:	494d      	ldr	r1, [pc, #308]	; (2a70 <_Z19th_final_initializev+0x294>)
    293a:	f00c ffd9 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    293e:	2401      	movs	r4, #1
  if (micro_op_resolver.AddDequantize() != kTfLiteOk) {
    2940:	2c00      	cmp	r4, #0
    2942:	d186      	bne.n	2852 <_Z19th_final_initializev+0x76>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
    2944:	4b52      	ldr	r3, [pc, #328]	; (2a90 <_Z19th_final_initializev+0x2b4>)
    2946:	681b      	ldr	r3, [r3, #0]
    2948:	f013 0f01 	tst.w	r3, #1
    294c:	f000 80ae 	beq.w	2aac <_Z19th_final_initializev+0x2d0>
  interpreter = &static_interpreter;
    2950:	4850      	ldr	r0, [pc, #320]	; (2a94 <_Z19th_final_initializev+0x2b8>)
    2952:	4b51      	ldr	r3, [pc, #324]	; (2a98 <_Z19th_final_initializev+0x2bc>)
    2954:	6018      	str	r0, [r3, #0]
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
    2956:	f004 fa89 	bl	6e6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  if (allocate_status != kTfLiteOk) {
    295a:	2800      	cmp	r0, #0
    295c:	f040 80bf 	bne.w	2ade <_Z19th_final_initializev+0x302>
  model_input = interpreter->input(0);
    2960:	2100      	movs	r1, #0
    2962:	4b4d      	ldr	r3, [pc, #308]	; (2a98 <_Z19th_final_initializev+0x2bc>)
    2964:	6818      	ldr	r0, [r3, #0]
    2966:	f004 f817 	bl	6998 <_ZN6tflite16MicroInterpreter5inputEj>
    296a:	4b4c      	ldr	r3, [pc, #304]	; (2a9c <_Z19th_final_initializev+0x2c0>)
    296c:	6018      	str	r0, [r3, #0]
  if ((model_input->dims->size != 2) || (model_input->dims->data[0] != 1) ||
    296e:	6883      	ldr	r3, [r0, #8]
    2970:	681a      	ldr	r2, [r3, #0]
    2972:	2a02      	cmp	r2, #2
    2974:	d10a      	bne.n	298c <_Z19th_final_initializev+0x1b0>
    2976:	685a      	ldr	r2, [r3, #4]
    2978:	2a01      	cmp	r2, #1
    297a:	d107      	bne.n	298c <_Z19th_final_initializev+0x1b0>
      (model_input->dims->data[1] !=
    297c:	689b      	ldr	r3, [r3, #8]
  if ((model_input->dims->size != 2) || (model_input->dims->data[0] != 1) ||
    297e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
    2982:	d103      	bne.n	298c <_Z19th_final_initializev+0x1b0>
      (model_input->type != kTfLiteInt8)) {
    2984:	7803      	ldrb	r3, [r0, #0]
       (kFeatureSliceCount * kFeatureSliceSize)) ||
    2986:	2b09      	cmp	r3, #9
    2988:	f000 80af 	beq.w	2aea <_Z19th_final_initializev+0x30e>
    TF_LITE_REPORT_ERROR(error_reporter,
    298c:	4944      	ldr	r1, [pc, #272]	; (2aa0 <_Z19th_final_initializev+0x2c4>)
    298e:	4b32      	ldr	r3, [pc, #200]	; (2a58 <_Z19th_final_initializev+0x27c>)
    2990:	6818      	ldr	r0, [r3, #0]
    2992:	f00c ffad 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
    2996:	e75c      	b.n	2852 <_Z19th_final_initializev+0x76>
    if (registrations_len_ >= tOpCount) {
    2998:	4b34      	ldr	r3, [pc, #208]	; (2a6c <_Z19th_final_initializev+0x290>)
    299a:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    299c:	2f02      	cmp	r7, #2
    299e:	d822      	bhi.n	29e6 <_Z19th_final_initializev+0x20a>
    registrations_[registrations_len_] = registration;
    29a0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2a6c <_Z19th_final_initializev+0x290>
    29a4:	eb0c 1e47 	add.w	lr, ip, r7, lsl #5
    29a8:	f10e 0504 	add.w	r5, lr, #4
    29ac:	ae04      	add	r6, sp, #16
    29ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    29b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    29b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    29b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    29ba:	2272      	movs	r2, #114	; 0x72
    29bc:	f8ce 2018 	str.w	r2, [lr, #24]
    registrations_len_++;
    29c0:	3701      	adds	r7, #1
    29c2:	f8cc 7064 	str.w	r7, [ip, #100]	; 0x64
    builtin_codes_[num_buitin_ops_] = op;
    29c6:	f8dc 3078 	ldr.w	r3, [ip, #120]	; 0x78
    29ca:	eb0c 0103 	add.w	r1, ip, r3
    29ce:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
    29d2:	f103 021a 	add.w	r2, r3, #26
    29d6:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    29da:	4932      	ldr	r1, [pc, #200]	; (2aa4 <_Z19th_final_initializev+0x2c8>)
    29dc:	6051      	str	r1, [r2, #4]
    num_buitin_ops_++;
    29de:	3301      	adds	r3, #1
    29e0:	f8cc 3078 	str.w	r3, [ip, #120]	; 0x78
    return kTfLiteOk;
    29e4:	e798      	b.n	2918 <_Z19th_final_initializev+0x13c>
      if (error_reporter_) {
    29e6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    29e8:	b120      	cbz	r0, 29f4 <_Z19th_final_initializev+0x218>
        TF_LITE_REPORT_ERROR(error_reporter_,
    29ea:	2303      	movs	r3, #3
    29ec:	2272      	movs	r2, #114	; 0x72
    29ee:	4927      	ldr	r1, [pc, #156]	; (2a8c <_Z19th_final_initializev+0x2b0>)
    29f0:	f00c ff7e 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    29f4:	2401      	movs	r4, #1
    29f6:	e78f      	b.n	2918 <_Z19th_final_initializev+0x13c>
    if (registrations_len_ >= tOpCount) {
    29f8:	4b1c      	ldr	r3, [pc, #112]	; (2a6c <_Z19th_final_initializev+0x290>)
    29fa:	f8d3 c064 	ldr.w	ip, [r3, #100]	; 0x64
    29fe:	f1bc 0f02 	cmp.w	ip, #2
    2a02:	d81e      	bhi.n	2a42 <_Z19th_final_initializev+0x266>
    registrations_[registrations_len_] = registration;
    2a04:	4f19      	ldr	r7, [pc, #100]	; (2a6c <_Z19th_final_initializev+0x290>)
    2a06:	eb07 1e4c 	add.w	lr, r7, ip, lsl #5
    2a0a:	f10e 0504 	add.w	r5, lr, #4
    2a0e:	ae04      	add	r6, sp, #16
    2a10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2a14:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    2a18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2a1c:	2206      	movs	r2, #6
    2a1e:	f8ce 2018 	str.w	r2, [lr, #24]
    registrations_len_++;
    2a22:	f10c 0301 	add.w	r3, ip, #1
    2a26:	667b      	str	r3, [r7, #100]	; 0x64
    builtin_codes_[num_buitin_ops_] = op;
    2a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    2a2a:	18f9      	adds	r1, r7, r3
    2a2c:	f881 2068 	strb.w	r2, [r1, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
    2a30:	f103 021a 	add.w	r2, r3, #26
    2a34:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2a38:	491b      	ldr	r1, [pc, #108]	; (2aa8 <_Z19th_final_initializev+0x2cc>)
    2a3a:	6051      	str	r1, [r2, #4]
    num_buitin_ops_++;
    2a3c:	3301      	adds	r3, #1
    2a3e:	67bb      	str	r3, [r7, #120]	; 0x78
    return kTfLiteOk;
    2a40:	e77e      	b.n	2940 <_Z19th_final_initializev+0x164>
      if (error_reporter_) {
    2a42:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2a44:	b120      	cbz	r0, 2a50 <_Z19th_final_initializev+0x274>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2a46:	2303      	movs	r3, #3
    2a48:	2206      	movs	r2, #6
    2a4a:	4910      	ldr	r1, [pc, #64]	; (2a8c <_Z19th_final_initializev+0x2b0>)
    2a4c:	f00c ff50 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2a50:	2401      	movs	r4, #1
    2a52:	e775      	b.n	2940 <_Z19th_final_initializev+0x164>
    2a54:	20019560 	.word	0x20019560
    2a58:	2001967c 	.word	0x2001967c
    2a5c:	20000000 	.word	0x20000000
    2a60:	0001170c 	.word	0x0001170c
    2a64:	2001a304 	.word	0x2001a304
    2a68:	20019558 	.word	0x20019558
    2a6c:	20019564 	.word	0x20019564
    2a70:	000115f8 	.word	0x000115f8
    2a74:	2001cb74 	.word	0x2001cb74
    2a78:	0000d8f7 	.word	0x0000d8f7
    2a7c:	000115b0 	.word	0x000115b0
    2a80:	000116e8 	.word	0x000116e8
    2a84:	0000d945 	.word	0x0000d945
    2a88:	00009015 	.word	0x00009015
    2a8c:	00011648 	.word	0x00011648
    2a90:	2001955c 	.word	0x2001955c
    2a94:	200195e4 	.word	0x200195e4
    2a98:	2001a300 	.word	0x2001a300
    2a9c:	2001a308 	.word	0x2001a308
    2aa0:	000116a8 	.word	0x000116a8
    2aa4:	0000f8ed 	.word	0x0000f8ed
    2aa8:	0000f8e9 	.word	0x0000f8e9
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
    2aac:	4c11      	ldr	r4, [pc, #68]	; (2af4 <_Z19th_final_initializev+0x318>)
    2aae:	2300      	movs	r3, #0
    2ab0:	9302      	str	r3, [sp, #8]
    2ab2:	4b11      	ldr	r3, [pc, #68]	; (2af8 <_Z19th_final_initializev+0x31c>)
    2ab4:	681b      	ldr	r3, [r3, #0]
    2ab6:	9301      	str	r3, [sp, #4]
    2ab8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    2abc:	9300      	str	r3, [sp, #0]
    2abe:	4b0f      	ldr	r3, [pc, #60]	; (2afc <_Z19th_final_initializev+0x320>)
    2ac0:	4a0f      	ldr	r2, [pc, #60]	; (2b00 <_Z19th_final_initializev+0x324>)
    2ac2:	4910      	ldr	r1, [pc, #64]	; (2b04 <_Z19th_final_initializev+0x328>)
    2ac4:	6809      	ldr	r1, [r1, #0]
    2ac6:	4620      	mov	r0, r4
    2ac8:	f00c fbba 	bl	f240 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    2acc:	4b0e      	ldr	r3, [pc, #56]	; (2b08 <_Z19th_final_initializev+0x32c>)
    2ace:	2201      	movs	r2, #1
    2ad0:	601a      	str	r2, [r3, #0]
    2ad2:	4a0e      	ldr	r2, [pc, #56]	; (2b0c <_Z19th_final_initializev+0x330>)
    2ad4:	490e      	ldr	r1, [pc, #56]	; (2b10 <_Z19th_final_initializev+0x334>)
    2ad6:	4620      	mov	r0, r4
    2ad8:	f00b fc4d 	bl	e376 <__aeabi_atexit>
    2adc:	e738      	b.n	2950 <_Z19th_final_initializev+0x174>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
    2ade:	490d      	ldr	r1, [pc, #52]	; (2b14 <_Z19th_final_initializev+0x338>)
    2ae0:	4b05      	ldr	r3, [pc, #20]	; (2af8 <_Z19th_final_initializev+0x31c>)
    2ae2:	6818      	ldr	r0, [r3, #0]
    2ae4:	f00c ff04 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
    2ae8:	e6b3      	b.n	2852 <_Z19th_final_initializev+0x76>
  th_printf("Initialized\r\n");
    2aea:	480b      	ldr	r0, [pc, #44]	; (2b18 <_Z19th_final_initializev+0x33c>)
    2aec:	f00a ff77 	bl	d9de <_Z9th_printfPKcz>
    2af0:	e6af      	b.n	2852 <_Z19th_final_initializev+0x76>
    2af2:	bf00      	nop
    2af4:	200195e4 	.word	0x200195e4
    2af8:	2001967c 	.word	0x2001967c
    2afc:	2001a310 	.word	0x2001a310
    2b00:	20019564 	.word	0x20019564
    2b04:	2001a304 	.word	0x2001a304
    2b08:	2001955c 	.word	0x2001955c
    2b0c:	2001cb74 	.word	0x2001cb74
    2b10:	0000f2a5 	.word	0x0000f2a5
    2b14:	0001168c 	.word	0x0001168c
    2b18:	000116d0 	.word	0x000116d0

00002b1c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2b1c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2b1e:	680b      	ldr	r3, [r1, #0]
    2b20:	3301      	adds	r3, #1
    2b22:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2b24:	4b01      	ldr	r3, [pc, #4]	; (2b2c <char_out+0x10>)
    2b26:	681b      	ldr	r3, [r3, #0]
    2b28:	4798      	blx	r3
}
    2b2a:	bd08      	pop	{r3, pc}
    2b2c:	20000004 	.word	0x20000004

00002b30 <__printk_hook_install>:
	_char_out = fn;
    2b30:	4b01      	ldr	r3, [pc, #4]	; (2b38 <__printk_hook_install+0x8>)
    2b32:	6018      	str	r0, [r3, #0]
}
    2b34:	4770      	bx	lr
    2b36:	bf00      	nop
    2b38:	20000004 	.word	0x20000004

00002b3c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2b3c:	b500      	push	{lr}
    2b3e:	b083      	sub	sp, #12
    2b40:	4602      	mov	r2, r0
    2b42:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2b44:	2100      	movs	r1, #0
    2b46:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2b48:	a901      	add	r1, sp, #4
    2b4a:	4803      	ldr	r0, [pc, #12]	; (2b58 <vprintk+0x1c>)
    2b4c:	f000 f94e 	bl	2dec <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2b50:	b003      	add	sp, #12
    2b52:	f85d fb04 	ldr.w	pc, [sp], #4
    2b56:	bf00      	nop
    2b58:	00002b1d 	.word	0x00002b1d

00002b5c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2b5c:	b510      	push	{r4, lr}
    2b5e:	b084      	sub	sp, #16
    2b60:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2b62:	9001      	str	r0, [sp, #4]
    2b64:	9102      	str	r1, [sp, #8]
    2b66:	2100      	movs	r1, #0
    2b68:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    2b6a:	a901      	add	r1, sp, #4
    2b6c:	4805      	ldr	r0, [pc, #20]	; (2b84 <vsnprintk+0x28>)
    2b6e:	f000 f93d 	bl	2dec <cbvprintf>

	if (ctx.count < ctx.max) {
    2b72:	9b03      	ldr	r3, [sp, #12]
    2b74:	9a02      	ldr	r2, [sp, #8]
    2b76:	4293      	cmp	r3, r2
    2b78:	da01      	bge.n	2b7e <vsnprintk+0x22>
		str[ctx.count] = '\0';
    2b7a:	2200      	movs	r2, #0
    2b7c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2b7e:	9803      	ldr	r0, [sp, #12]
    2b80:	b004      	add	sp, #16
    2b82:	bd10      	pop	{r4, pc}
    2b84:	0000dad1 	.word	0x0000dad1

00002b88 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b8c:	b083      	sub	sp, #12
    2b8e:	4604      	mov	r4, r0
    2b90:	4608      	mov	r0, r1
    2b92:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2b94:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2b96:	f013 0f08 	tst.w	r3, #8
    2b9a:	d105      	bne.n	2ba8 <process_event+0x20>
    2b9c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2ba0:	2300      	movs	r3, #0
    2ba2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2ba4:	9301      	str	r3, [sp, #4]
}
    2ba6:	e069      	b.n	2c7c <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    2ba8:	2901      	cmp	r1, #1
    2baa:	d009      	beq.n	2bc0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2bac:	f043 0320 	orr.w	r3, r3, #32
    2bb0:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2bb2:	f385 8811 	msr	BASEPRI, r5
    2bb6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2bba:	b003      	add	sp, #12
    2bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2bc0:	f043 0310 	orr.w	r3, r3, #16
    2bc4:	83a3      	strh	r3, [r4, #28]
    2bc6:	e7f4      	b.n	2bb2 <process_event+0x2a>
			evt = process_recheck(mgr);
    2bc8:	4620      	mov	r0, r4
    2bca:	f00a ffdc 	bl	db86 <process_recheck>
    2bce:	e057      	b.n	2c80 <process_event+0xf8>
			res = mgr->last_res;
    2bd0:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    2bd4:	464a      	mov	r2, r9
    2bd6:	4669      	mov	r1, sp
    2bd8:	4620      	mov	r0, r4
    2bda:	f00a ffed 	bl	dbb8 <process_complete>
		onoff_transition_fn transit = NULL;
    2bde:	2700      	movs	r7, #0
    2be0:	e05a      	b.n	2c98 <process_event+0x110>
			transit = mgr->transitions->start;
    2be2:	6923      	ldr	r3, [r4, #16]
    2be4:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    2be6:	2106      	movs	r1, #6
    2be8:	4620      	mov	r0, r4
    2bea:	f00a ffa5 	bl	db38 <set_state>
		res = 0;
    2bee:	f04f 0900 	mov.w	r9, #0
    2bf2:	e051      	b.n	2c98 <process_event+0x110>
			transit = mgr->transitions->stop;
    2bf4:	6923      	ldr	r3, [r4, #16]
    2bf6:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    2bf8:	2104      	movs	r1, #4
    2bfa:	4620      	mov	r0, r4
    2bfc:	f00a ff9c 	bl	db38 <set_state>
		res = 0;
    2c00:	f04f 0900 	mov.w	r9, #0
    2c04:	e048      	b.n	2c98 <process_event+0x110>
			transit = mgr->transitions->reset;
    2c06:	6923      	ldr	r3, [r4, #16]
    2c08:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    2c0a:	2105      	movs	r1, #5
    2c0c:	4620      	mov	r0, r4
    2c0e:	f00a ff93 	bl	db38 <set_state>
		res = 0;
    2c12:	f04f 0900 	mov.w	r9, #0
    2c16:	e03f      	b.n	2c98 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    2c18:	2200      	movs	r2, #0
    2c1a:	e046      	b.n	2caa <process_event+0x122>
    2c1c:	2200      	movs	r2, #0
    2c1e:	e044      	b.n	2caa <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2c20:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2c24:	83a3      	strh	r3, [r4, #28]
    2c26:	f385 8811 	msr	BASEPRI, r5
    2c2a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2c2e:	2900      	cmp	r1, #0
    2c30:	d144      	bne.n	2cbc <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2c32:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    2c34:	b12b      	cbz	r3, 2c42 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    2c36:	464b      	mov	r3, r9
    2c38:	4642      	mov	r2, r8
    2c3a:	4669      	mov	r1, sp
    2c3c:	4620      	mov	r0, r4
    2c3e:	f00b f831 	bl	dca4 <notify_all>
			if (transit != NULL) {
    2c42:	b117      	cbz	r7, 2c4a <process_event+0xc2>
				transit(mgr, transition_complete);
    2c44:	4925      	ldr	r1, [pc, #148]	; (2cdc <process_event+0x154>)
    2c46:	4620      	mov	r0, r4
    2c48:	47b8      	blx	r7
	__asm__ volatile(
    2c4a:	f04f 0320 	mov.w	r3, #32
    2c4e:	f3ef 8511 	mrs	r5, BASEPRI
    2c52:	f383 8812 	msr	BASEPRI_MAX, r3
    2c56:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2c5a:	8ba3      	ldrh	r3, [r4, #28]
    2c5c:	f023 0308 	bic.w	r3, r3, #8
    2c60:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2c62:	8ba3      	ldrh	r3, [r4, #28]
    2c64:	f013 0f10 	tst.w	r3, #16
    2c68:	d02e      	beq.n	2cc8 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2c6a:	f023 0310 	bic.w	r3, r3, #16
    2c6e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    2c70:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2c72:	8ba6      	ldrh	r6, [r4, #28]
    2c74:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    2c78:	2800      	cmp	r0, #0
    2c7a:	d09a      	beq.n	2bb2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    2c7c:	2802      	cmp	r0, #2
    2c7e:	d0a3      	beq.n	2bc8 <process_event+0x40>
		if (evt == EVT_NOP) {
    2c80:	2800      	cmp	r0, #0
    2c82:	d096      	beq.n	2bb2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    2c84:	2801      	cmp	r0, #1
    2c86:	d0a3      	beq.n	2bd0 <process_event+0x48>
		} else if (evt == EVT_START) {
    2c88:	2803      	cmp	r0, #3
    2c8a:	d0aa      	beq.n	2be2 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    2c8c:	2804      	cmp	r0, #4
    2c8e:	d0b1      	beq.n	2bf4 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    2c90:	2805      	cmp	r0, #5
    2c92:	d0b8      	beq.n	2c06 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    2c94:	2700      	movs	r7, #0
		res = 0;
    2c96:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2c98:	8ba3      	ldrh	r3, [r4, #28]
    2c9a:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2c9e:	45b0      	cmp	r8, r6
    2ca0:	d0ba      	beq.n	2c18 <process_event+0x90>
    2ca2:	68a2      	ldr	r2, [r4, #8]
    2ca4:	2a00      	cmp	r2, #0
    2ca6:	d0b9      	beq.n	2c1c <process_event+0x94>
    2ca8:	2201      	movs	r2, #1
		if (do_monitors
    2caa:	4611      	mov	r1, r2
    2cac:	2a00      	cmp	r2, #0
    2cae:	d1b7      	bne.n	2c20 <process_event+0x98>
    2cb0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    2cb2:	2a00      	cmp	r2, #0
    2cb4:	d1b4      	bne.n	2c20 <process_event+0x98>
		    || (transit != NULL)) {
    2cb6:	2f00      	cmp	r7, #0
    2cb8:	d1b2      	bne.n	2c20 <process_event+0x98>
    2cba:	e7d2      	b.n	2c62 <process_event+0xda>
				notify_monitors(mgr, state, res);
    2cbc:	464a      	mov	r2, r9
    2cbe:	4641      	mov	r1, r8
    2cc0:	4620      	mov	r0, r4
    2cc2:	f00a ff41 	bl	db48 <notify_monitors>
    2cc6:	e7b4      	b.n	2c32 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2cc8:	f013 0f20 	tst.w	r3, #32
    2ccc:	d004      	beq.n	2cd8 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2cce:	f023 0320 	bic.w	r3, r3, #32
    2cd2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    2cd4:	2002      	movs	r0, #2
    2cd6:	e7cc      	b.n	2c72 <process_event+0xea>
		evt = EVT_NOP;
    2cd8:	2000      	movs	r0, #0
    2cda:	e7ca      	b.n	2c72 <process_event+0xea>
    2cdc:	0000dcd3 	.word	0x0000dcd3

00002ce0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    2ce0:	b410      	push	{r4}
    2ce2:	4604      	mov	r4, r0
	const char *sp = *str;
    2ce4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    2ce6:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    2ce8:	7813      	ldrb	r3, [r2, #0]
    2cea:	4907      	ldr	r1, [pc, #28]	; (2d08 <extract_decimal+0x28>)
    2cec:	5c59      	ldrb	r1, [r3, r1]
    2cee:	f011 0f04 	tst.w	r1, #4
    2cf2:	d006      	beq.n	2d02 <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    2cf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2cf8:	3201      	adds	r2, #1
    2cfa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2cfe:	3830      	subs	r0, #48	; 0x30
    2d00:	e7f2      	b.n	2ce8 <extract_decimal+0x8>
	}
	*str = sp;
    2d02:	6022      	str	r2, [r4, #0]
	return val;
}
    2d04:	bc10      	pop	{r4}
    2d06:	4770      	bx	lr
    2d08:	000578f9 	.word	0x000578f9

00002d0c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    2d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d10:	b083      	sub	sp, #12
    2d12:	4604      	mov	r4, r0
    2d14:	460d      	mov	r5, r1
    2d16:	9201      	str	r2, [sp, #4]
    2d18:	469a      	mov	sl, r3
    2d1a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    2d1e:	78d3      	ldrb	r3, [r2, #3]
    2d20:	4a31      	ldr	r2, [pc, #196]	; (2de8 <encode_uint+0xdc>)
    2d22:	f813 b002 	ldrb.w	fp, [r3, r2]
    2d26:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    2d2a:	2b6f      	cmp	r3, #111	; 0x6f
    2d2c:	d00f      	beq.n	2d4e <encode_uint+0x42>
    2d2e:	d906      	bls.n	2d3e <encode_uint+0x32>
    2d30:	2b70      	cmp	r3, #112	; 0x70
    2d32:	d00f      	beq.n	2d54 <encode_uint+0x48>
    2d34:	2b78      	cmp	r3, #120	; 0x78
    2d36:	d110      	bne.n	2d5a <encode_uint+0x4e>
		return 16;
    2d38:	f04f 0910 	mov.w	r9, #16
    2d3c:	e023      	b.n	2d86 <encode_uint+0x7a>
	switch (specifier) {
    2d3e:	2b58      	cmp	r3, #88	; 0x58
    2d40:	d002      	beq.n	2d48 <encode_uint+0x3c>
    2d42:	f04f 090a 	mov.w	r9, #10
    2d46:	e01e      	b.n	2d86 <encode_uint+0x7a>
		return 16;
    2d48:	f04f 0910 	mov.w	r9, #16
    2d4c:	e01b      	b.n	2d86 <encode_uint+0x7a>
		return 8;
    2d4e:	f04f 0908 	mov.w	r9, #8
    2d52:	e018      	b.n	2d86 <encode_uint+0x7a>
		return 16;
    2d54:	f04f 0910 	mov.w	r9, #16
    2d58:	e015      	b.n	2d86 <encode_uint+0x7a>
	switch (specifier) {
    2d5a:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    2d5e:	e012      	b.n	2d86 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    2d60:	b2d2      	uxtb	r2, r2
    2d62:	3230      	adds	r2, #48	; 0x30
    2d64:	b2d2      	uxtb	r2, r2
    2d66:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    2d6a:	4632      	mov	r2, r6
    2d6c:	463b      	mov	r3, r7
    2d6e:	4620      	mov	r0, r4
    2d70:	4629      	mov	r1, r5
    2d72:	f7fe f9dd 	bl	1130 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    2d76:	42bd      	cmp	r5, r7
    2d78:	bf08      	it	eq
    2d7a:	42b4      	cmpeq	r4, r6
    2d7c:	d318      	bcc.n	2db0 <encode_uint+0xa4>
    2d7e:	45d0      	cmp	r8, sl
    2d80:	d916      	bls.n	2db0 <encode_uint+0xa4>
		value /= radix;
    2d82:	4604      	mov	r4, r0
    2d84:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    2d86:	464e      	mov	r6, r9
    2d88:	2700      	movs	r7, #0
    2d8a:	464a      	mov	r2, r9
    2d8c:	463b      	mov	r3, r7
    2d8e:	4620      	mov	r0, r4
    2d90:	4629      	mov	r1, r5
    2d92:	f7fe f9cd 	bl	1130 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2d96:	2a09      	cmp	r2, #9
    2d98:	d9e2      	bls.n	2d60 <encode_uint+0x54>
    2d9a:	f1bb 0f01 	cmp.w	fp, #1
    2d9e:	d003      	beq.n	2da8 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    2da0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2da2:	3257      	adds	r2, #87	; 0x57
    2da4:	b2d2      	uxtb	r2, r2
    2da6:	e7de      	b.n	2d66 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    2da8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2daa:	3237      	adds	r2, #55	; 0x37
    2dac:	b2d2      	uxtb	r2, r2
    2dae:	e7da      	b.n	2d66 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    2db0:	9b01      	ldr	r3, [sp, #4]
    2db2:	781b      	ldrb	r3, [r3, #0]
    2db4:	f013 0f20 	tst.w	r3, #32
    2db8:	d005      	beq.n	2dc6 <encode_uint+0xba>
		if (radix == 8) {
    2dba:	f1b9 0f08 	cmp.w	r9, #8
    2dbe:	d006      	beq.n	2dce <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    2dc0:	f1b9 0f10 	cmp.w	r9, #16
    2dc4:	d009      	beq.n	2dda <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    2dc6:	4640      	mov	r0, r8
    2dc8:	b003      	add	sp, #12
    2dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    2dce:	9a01      	ldr	r2, [sp, #4]
    2dd0:	7893      	ldrb	r3, [r2, #2]
    2dd2:	f043 0308 	orr.w	r3, r3, #8
    2dd6:	7093      	strb	r3, [r2, #2]
    2dd8:	e7f5      	b.n	2dc6 <encode_uint+0xba>
			conv->altform_0c = true;
    2dda:	9a01      	ldr	r2, [sp, #4]
    2ddc:	7893      	ldrb	r3, [r2, #2]
    2dde:	f043 0310 	orr.w	r3, r3, #16
    2de2:	7093      	strb	r3, [r2, #2]
    2de4:	e7ef      	b.n	2dc6 <encode_uint+0xba>
    2de6:	bf00      	nop
    2de8:	000578f9 	.word	0x000578f9

00002dec <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2df0:	b093      	sub	sp, #76	; 0x4c
    2df2:	4606      	mov	r6, r0
    2df4:	460d      	mov	r5, r1
    2df6:	4692      	mov	sl, r2
    2df8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2dfa:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2dfc:	f89a 0000 	ldrb.w	r0, [sl]
    2e00:	2800      	cmp	r0, #0
    2e02:	f000 84d6 	beq.w	37b2 <cbvprintf+0x9c6>
		if (*fp != '%') {
    2e06:	2825      	cmp	r0, #37	; 0x25
    2e08:	d008      	beq.n	2e1c <cbvprintf+0x30>
			OUTC(*fp++);
    2e0a:	f10a 0a01 	add.w	sl, sl, #1
    2e0e:	4629      	mov	r1, r5
    2e10:	47b0      	blx	r6
    2e12:	2800      	cmp	r0, #0
    2e14:	f2c0 84ce 	blt.w	37b4 <cbvprintf+0x9c8>
    2e18:	3401      	adds	r4, #1
			continue;
    2e1a:	e7ef      	b.n	2dfc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2e1c:	2300      	movs	r3, #0
    2e1e:	9306      	str	r3, [sp, #24]
    2e20:	9307      	str	r3, [sp, #28]
    2e22:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    2e24:	9308      	str	r3, [sp, #32]
    2e26:	9309      	str	r3, [sp, #36]	; 0x24
    2e28:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    2e2a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    2e2e:	f89a 3001 	ldrb.w	r3, [sl, #1]
    2e32:	2b25      	cmp	r3, #37	; 0x25
    2e34:	d001      	beq.n	2e3a <cbvprintf+0x4e>
	bool loop = true;
    2e36:	2701      	movs	r7, #1
    2e38:	e02c      	b.n	2e94 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    2e3a:	f10a 0802 	add.w	r8, sl, #2
    2e3e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    2e42:	e1a8      	b.n	3196 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    2e44:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e48:	f043 0304 	orr.w	r3, r3, #4
    2e4c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    2e50:	b1ff      	cbz	r7, 2e92 <cbvprintf+0xa6>
			++sp;
    2e52:	f108 0801 	add.w	r8, r8, #1
    2e56:	e01c      	b.n	2e92 <cbvprintf+0xa6>
			conv->flag_plus = true;
    2e58:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e5c:	f043 0308 	orr.w	r3, r3, #8
    2e60:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2e64:	e7f4      	b.n	2e50 <cbvprintf+0x64>
			conv->flag_space = true;
    2e66:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e6a:	f043 0310 	orr.w	r3, r3, #16
    2e6e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2e72:	e7ed      	b.n	2e50 <cbvprintf+0x64>
			conv->flag_hash = true;
    2e74:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e78:	f043 0320 	orr.w	r3, r3, #32
    2e7c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2e80:	e7e6      	b.n	2e50 <cbvprintf+0x64>
			conv->flag_zero = true;
    2e82:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2e8a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2e8e:	e7df      	b.n	2e50 <cbvprintf+0x64>
		switch (*sp) {
    2e90:	2700      	movs	r7, #0
	} while (loop);
    2e92:	b34f      	cbz	r7, 2ee8 <cbvprintf+0xfc>
		switch (*sp) {
    2e94:	f898 3000 	ldrb.w	r3, [r8]
    2e98:	3b20      	subs	r3, #32
    2e9a:	2b10      	cmp	r3, #16
    2e9c:	d8f8      	bhi.n	2e90 <cbvprintf+0xa4>
    2e9e:	a201      	add	r2, pc, #4	; (adr r2, 2ea4 <cbvprintf+0xb8>)
    2ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2ea4:	00002e67 	.word	0x00002e67
    2ea8:	00002e91 	.word	0x00002e91
    2eac:	00002e91 	.word	0x00002e91
    2eb0:	00002e75 	.word	0x00002e75
    2eb4:	00002e91 	.word	0x00002e91
    2eb8:	00002e91 	.word	0x00002e91
    2ebc:	00002e91 	.word	0x00002e91
    2ec0:	00002e91 	.word	0x00002e91
    2ec4:	00002e91 	.word	0x00002e91
    2ec8:	00002e91 	.word	0x00002e91
    2ecc:	00002e91 	.word	0x00002e91
    2ed0:	00002e59 	.word	0x00002e59
    2ed4:	00002e91 	.word	0x00002e91
    2ed8:	00002e45 	.word	0x00002e45
    2edc:	00002e91 	.word	0x00002e91
    2ee0:	00002e91 	.word	0x00002e91
    2ee4:	00002e83 	.word	0x00002e83
	if (conv->flag_zero && conv->flag_dash) {
    2ee8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2eec:	f003 0344 	and.w	r3, r3, #68	; 0x44
    2ef0:	2b44      	cmp	r3, #68	; 0x44
    2ef2:	d06d      	beq.n	2fd0 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    2ef4:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    2ef8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2f00:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    2f04:	f898 3000 	ldrb.w	r3, [r8]
    2f08:	2b2a      	cmp	r3, #42	; 0x2a
    2f0a:	d068      	beq.n	2fde <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    2f0c:	a805      	add	r0, sp, #20
    2f0e:	f7ff fee7 	bl	2ce0 <extract_decimal>
	if (sp != wp) {
    2f12:	9b05      	ldr	r3, [sp, #20]
    2f14:	4598      	cmp	r8, r3
    2f16:	d012      	beq.n	2f3e <cbvprintf+0x152>
		conv->width_present = true;
    2f18:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2f20:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    2f24:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    2f26:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    2f2a:	2800      	cmp	r0, #0
    2f2c:	db60      	blt.n	2ff0 <cbvprintf+0x204>
    2f2e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    2f30:	4313      	orrs	r3, r2
    2f32:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2f36:	f363 0241 	bfi	r2, r3, #1, #1
    2f3a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2f3e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    2f40:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    2f42:	781b      	ldrb	r3, [r3, #0]
    2f44:	2b2e      	cmp	r3, #46	; 0x2e
    2f46:	bf14      	ite	ne
    2f48:	2300      	movne	r3, #0
    2f4a:	2301      	moveq	r3, #1
    2f4c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2f50:	f363 0241 	bfi	r2, r3, #1, #1
    2f54:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d04b      	beq.n	2ff4 <cbvprintf+0x208>
	++sp;
    2f5c:	9b05      	ldr	r3, [sp, #20]
    2f5e:	1c5a      	adds	r2, r3, #1
    2f60:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    2f62:	785b      	ldrb	r3, [r3, #1]
    2f64:	2b2a      	cmp	r3, #42	; 0x2a
    2f66:	d048      	beq.n	2ffa <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    2f68:	a805      	add	r0, sp, #20
    2f6a:	f7ff feb9 	bl	2ce0 <extract_decimal>
	conv->prec_value = prec;
    2f6e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    2f70:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2f74:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    2f78:	2800      	cmp	r0, #0
    2f7a:	db47      	blt.n	300c <cbvprintf+0x220>
    2f7c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2f7e:	4313      	orrs	r3, r2
    2f80:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2f84:	f363 0241 	bfi	r2, r3, #1, #1
    2f88:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2f8c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    2f90:	f898 3000 	ldrb.w	r3, [r8]
    2f94:	3b4c      	subs	r3, #76	; 0x4c
    2f96:	2b2e      	cmp	r3, #46	; 0x2e
    2f98:	f200 80dc 	bhi.w	3154 <cbvprintf+0x368>
    2f9c:	e8df f003 	tbb	[pc, r3]
    2fa0:	dadadaca 	.word	0xdadadaca
    2fa4:	dadadada 	.word	0xdadadada
    2fa8:	dadadada 	.word	0xdadadada
    2fac:	dadadada 	.word	0xdadadada
    2fb0:	dadadada 	.word	0xdadadada
    2fb4:	dadadada 	.word	0xdadadada
    2fb8:	dadadada 	.word	0xdadadada
    2fbc:	da6ada38 	.word	0xda6ada38
    2fc0:	dadada51 	.word	0xdadada51
    2fc4:	dadadada 	.word	0xdadadada
    2fc8:	dadadac0 	.word	0xdadadac0
    2fcc:	dada      	.short	0xdada
    2fce:	b6          	.byte	0xb6
    2fcf:	00          	.byte	0x00
		conv->flag_zero = false;
    2fd0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2fd4:	f36f 1386 	bfc	r3, #6, #1
    2fd8:	f88d 3020 	strb.w	r3, [sp, #32]
    2fdc:	e78a      	b.n	2ef4 <cbvprintf+0x108>
		conv->width_star = true;
    2fde:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2fe2:	f043 0301 	orr.w	r3, r3, #1
    2fe6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    2fea:	4643      	mov	r3, r8
    2fec:	3301      	adds	r3, #1
    2fee:	e7a7      	b.n	2f40 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    2ff0:	2201      	movs	r2, #1
    2ff2:	e79d      	b.n	2f30 <cbvprintf+0x144>
		return sp;
    2ff4:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2ff8:	e7ca      	b.n	2f90 <cbvprintf+0x1a4>
		conv->prec_star = true;
    2ffa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2ffe:	f043 0304 	orr.w	r3, r3, #4
    3002:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3006:	f102 0801 	add.w	r8, r2, #1
    300a:	e7c1      	b.n	2f90 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    300c:	2201      	movs	r2, #1
    300e:	e7b6      	b.n	2f7e <cbvprintf+0x192>
		if (*++sp == 'h') {
    3010:	f108 0201 	add.w	r2, r8, #1
    3014:	f898 3001 	ldrb.w	r3, [r8, #1]
    3018:	2b68      	cmp	r3, #104	; 0x68
    301a:	d008      	beq.n	302e <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    301c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3020:	2102      	movs	r1, #2
    3022:	f361 03c6 	bfi	r3, r1, #3, #4
    3026:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    302a:	4690      	mov	r8, r2
    302c:	e02b      	b.n	3086 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    302e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3032:	2201      	movs	r2, #1
    3034:	f362 03c6 	bfi	r3, r2, #3, #4
    3038:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    303c:	f108 0802 	add.w	r8, r8, #2
    3040:	e021      	b.n	3086 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    3042:	f108 0201 	add.w	r2, r8, #1
    3046:	f898 3001 	ldrb.w	r3, [r8, #1]
    304a:	2b6c      	cmp	r3, #108	; 0x6c
    304c:	d008      	beq.n	3060 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    304e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3052:	2103      	movs	r1, #3
    3054:	f361 03c6 	bfi	r3, r1, #3, #4
    3058:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    305c:	4690      	mov	r8, r2
    305e:	e012      	b.n	3086 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    3060:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3064:	2204      	movs	r2, #4
    3066:	f362 03c6 	bfi	r3, r2, #3, #4
    306a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    306e:	f108 0802 	add.w	r8, r8, #2
    3072:	e008      	b.n	3086 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    3074:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3078:	2205      	movs	r2, #5
    307a:	f362 03c6 	bfi	r3, r2, #3, #4
    307e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    3082:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    3086:	f818 3b01 	ldrb.w	r3, [r8], #1
    308a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    308e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    3092:	2a37      	cmp	r2, #55	; 0x37
    3094:	f200 8150 	bhi.w	3338 <cbvprintf+0x54c>
    3098:	e8df f012 	tbh	[pc, r2, lsl #1]
    309c:	014e0126 	.word	0x014e0126
    30a0:	014e014e 	.word	0x014e014e
    30a4:	01260126 	.word	0x01260126
    30a8:	014e0126 	.word	0x014e0126
    30ac:	014e014e 	.word	0x014e014e
    30b0:	014e014e 	.word	0x014e014e
    30b4:	014e014e 	.word	0x014e014e
    30b8:	014e014e 	.word	0x014e014e
    30bc:	014e014e 	.word	0x014e014e
    30c0:	014e014e 	.word	0x014e014e
    30c4:	014e014e 	.word	0x014e014e
    30c8:	0113014e 	.word	0x0113014e
    30cc:	014e014e 	.word	0x014e014e
    30d0:	014e014e 	.word	0x014e014e
    30d4:	014e014e 	.word	0x014e014e
    30d8:	014e014e 	.word	0x014e014e
    30dc:	014e0126 	.word	0x014e0126
    30e0:	00630113 	.word	0x00630113
    30e4:	01260126 	.word	0x01260126
    30e8:	014e0126 	.word	0x014e0126
    30ec:	014e0063 	.word	0x014e0063
    30f0:	014e014e 	.word	0x014e014e
    30f4:	012f014e 	.word	0x012f014e
    30f8:	013f0113 	.word	0x013f0113
    30fc:	014e014e 	.word	0x014e014e
    3100:	014e013f 	.word	0x014e013f
    3104:	014e0113 	.word	0x014e0113
    3108:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    310c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3110:	2206      	movs	r2, #6
    3112:	f362 03c6 	bfi	r3, r2, #3, #4
    3116:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    311a:	f108 0801 	add.w	r8, r8, #1
		break;
    311e:	e7b2      	b.n	3086 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    3120:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3124:	2207      	movs	r2, #7
    3126:	f362 03c6 	bfi	r3, r2, #3, #4
    312a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    312e:	f108 0801 	add.w	r8, r8, #1
		break;
    3132:	e7a8      	b.n	3086 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    3134:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3138:	2208      	movs	r2, #8
    313a:	f362 03c6 	bfi	r3, r2, #3, #4
    313e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    3142:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    3146:	f89d 3020 	ldrb.w	r3, [sp, #32]
    314a:	f043 0302 	orr.w	r3, r3, #2
    314e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    3152:	e798      	b.n	3086 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    3154:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3158:	f36f 03c6 	bfc	r3, #3, #4
    315c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    3160:	e791      	b.n	3086 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    3162:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3166:	2101      	movs	r1, #1
    3168:	f361 0202 	bfi	r2, r1, #0, #3
    316c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    3170:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    3174:	f002 0278 	and.w	r2, r2, #120	; 0x78
    3178:	2a40      	cmp	r2, #64	; 0x40
    317a:	f000 80aa 	beq.w	32d2 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    317e:	2b63      	cmp	r3, #99	; 0x63
    3180:	f000 80ae 	beq.w	32e0 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    3184:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3188:	f3c3 0240 	ubfx	r2, r3, #1, #1
    318c:	4317      	orrs	r7, r2
    318e:	f367 0341 	bfi	r3, r7, #1, #1
    3192:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    3196:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    319a:	f013 0f01 	tst.w	r3, #1
    319e:	f000 80da 	beq.w	3356 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    31a2:	9b03      	ldr	r3, [sp, #12]
    31a4:	1d1a      	adds	r2, r3, #4
    31a6:	9203      	str	r2, [sp, #12]
    31a8:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    31aa:	2f00      	cmp	r7, #0
    31ac:	f2c0 80cb 	blt.w	3346 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    31b0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    31b4:	f013 0f04 	tst.w	r3, #4
    31b8:	f000 80df 	beq.w	337a <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    31bc:	9b03      	ldr	r3, [sp, #12]
    31be:	1d1a      	adds	r2, r3, #4
    31c0:	9203      	str	r2, [sp, #12]
    31c2:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    31c6:	f1bb 0f00 	cmp.w	fp, #0
    31ca:	f2c0 80cd 	blt.w	3368 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    31ce:	2300      	movs	r3, #0
    31d0:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    31d2:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    31d4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    31d8:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    31dc:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    31e0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    31e4:	2b01      	cmp	r3, #1
    31e6:	f000 80d1 	beq.w	338c <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    31ea:	2b02      	cmp	r3, #2
    31ec:	f000 8116 	beq.w	341c <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    31f0:	2b04      	cmp	r3, #4
    31f2:	f000 8167 	beq.w	34c4 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    31f6:	2b03      	cmp	r3, #3
    31f8:	f000 817e 	beq.w	34f8 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    31fc:	f89d 9020 	ldrb.w	r9, [sp, #32]
    3200:	f019 0303 	ands.w	r3, r9, #3
    3204:	9302      	str	r3, [sp, #8]
    3206:	f040 817d 	bne.w	3504 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    320a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    320e:	3b25      	subs	r3, #37	; 0x25
    3210:	2b53      	cmp	r3, #83	; 0x53
    3212:	f200 8233 	bhi.w	367c <cbvprintf+0x890>
    3216:	e8df f013 	tbh	[pc, r3, lsl #1]
    321a:	0181      	.short	0x0181
    321c:	02310231 	.word	0x02310231
    3220:	02310231 	.word	0x02310231
    3224:	02310231 	.word	0x02310231
    3228:	02310231 	.word	0x02310231
    322c:	02310231 	.word	0x02310231
    3230:	02310231 	.word	0x02310231
    3234:	02310231 	.word	0x02310231
    3238:	02310231 	.word	0x02310231
    323c:	02310231 	.word	0x02310231
    3240:	02310231 	.word	0x02310231
    3244:	02310231 	.word	0x02310231
    3248:	02310231 	.word	0x02310231
    324c:	02310231 	.word	0x02310231
    3250:	02310231 	.word	0x02310231
    3254:	02310231 	.word	0x02310231
    3258:	02310231 	.word	0x02310231
    325c:	02310231 	.word	0x02310231
    3260:	02310231 	.word	0x02310231
    3264:	02310231 	.word	0x02310231
    3268:	02310231 	.word	0x02310231
    326c:	02310231 	.word	0x02310231
    3270:	02310231 	.word	0x02310231
    3274:	02310231 	.word	0x02310231
    3278:	02310231 	.word	0x02310231
    327c:	02310231 	.word	0x02310231
    3280:	023101c7 	.word	0x023101c7
    3284:	02310231 	.word	0x02310231
    3288:	02310231 	.word	0x02310231
    328c:	02310231 	.word	0x02310231
    3290:	02310231 	.word	0x02310231
    3294:	01a10231 	.word	0x01a10231
    3298:	023101ab 	.word	0x023101ab
    329c:	02310231 	.word	0x02310231
    32a0:	01ab0231 	.word	0x01ab0231
    32a4:	02310231 	.word	0x02310231
    32a8:	02310231 	.word	0x02310231
    32ac:	01c70208 	.word	0x01c70208
    32b0:	023101ea 	.word	0x023101ea
    32b4:	018f0231 	.word	0x018f0231
    32b8:	01c70231 	.word	0x01c70231
    32bc:	02310231 	.word	0x02310231
    32c0:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    32c2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    32c6:	2102      	movs	r1, #2
    32c8:	f361 0202 	bfi	r2, r1, #0, #3
    32cc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    32d0:	e74e      	b.n	3170 <cbvprintf+0x384>
			conv->invalid = true;
    32d2:	f89d 1020 	ldrb.w	r1, [sp, #32]
    32d6:	f041 0101 	orr.w	r1, r1, #1
    32da:	f88d 1020 	strb.w	r1, [sp, #32]
    32de:	e74e      	b.n	317e <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    32e0:	1e17      	subs	r7, r2, #0
    32e2:	bf18      	it	ne
    32e4:	2701      	movne	r7, #1
    32e6:	e74d      	b.n	3184 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    32e8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    32ec:	2204      	movs	r2, #4
    32ee:	f362 0302 	bfi	r3, r2, #0, #3
    32f2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    32f6:	2701      	movs	r7, #1
			break;
    32f8:	e744      	b.n	3184 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    32fa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    32fe:	2203      	movs	r2, #3
    3300:	f362 0302 	bfi	r3, r2, #0, #3
    3304:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    3308:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    330c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3310:	2b40      	cmp	r3, #64	; 0x40
    3312:	f47f af37 	bne.w	3184 <cbvprintf+0x398>
			unsupported = true;
    3316:	2701      	movs	r7, #1
    3318:	e734      	b.n	3184 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    331a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    331e:	2203      	movs	r2, #3
    3320:	f362 0302 	bfi	r3, r2, #0, #3
    3324:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    3328:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    332c:	f013 0f78 	tst.w	r3, #120	; 0x78
    3330:	f43f af28 	beq.w	3184 <cbvprintf+0x398>
			unsupported = true;
    3334:	2701      	movs	r7, #1
    3336:	e725      	b.n	3184 <cbvprintf+0x398>
		conv->invalid = true;
    3338:	f89d 3020 	ldrb.w	r3, [sp, #32]
    333c:	f043 0301 	orr.w	r3, r3, #1
    3340:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    3344:	e71e      	b.n	3184 <cbvprintf+0x398>
				conv->flag_dash = true;
    3346:	f89d 3020 	ldrb.w	r3, [sp, #32]
    334a:	f043 0304 	orr.w	r3, r3, #4
    334e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    3352:	427f      	negs	r7, r7
    3354:	e72c      	b.n	31b0 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    3356:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    335a:	2b00      	cmp	r3, #0
    335c:	db02      	blt.n	3364 <cbvprintf+0x578>
		int width = -1;
    335e:	f04f 37ff 	mov.w	r7, #4294967295
    3362:	e725      	b.n	31b0 <cbvprintf+0x3c4>
			width = conv->width_value;
    3364:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3366:	e723      	b.n	31b0 <cbvprintf+0x3c4>
				conv->prec_present = false;
    3368:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    336c:	f36f 0341 	bfc	r3, #1, #1
    3370:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    3374:	f04f 3bff 	mov.w	fp, #4294967295
    3378:	e729      	b.n	31ce <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    337a:	f013 0f02 	tst.w	r3, #2
    337e:	d002      	beq.n	3386 <cbvprintf+0x59a>
			precision = conv->prec_value;
    3380:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    3384:	e723      	b.n	31ce <cbvprintf+0x3e2>
		int precision = -1;
    3386:	f04f 3bff 	mov.w	fp, #4294967295
    338a:	e720      	b.n	31ce <cbvprintf+0x3e2>
			switch (length_mod) {
    338c:	1ecb      	subs	r3, r1, #3
    338e:	2b04      	cmp	r3, #4
    3390:	d804      	bhi.n	339c <cbvprintf+0x5b0>
    3392:	e8df f003 	tbb	[pc, r3]
    3396:	1d0b      	.short	0x1d0b
    3398:	3529      	.short	0x3529
    339a:	35          	.byte	0x35
    339b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    339c:	9b03      	ldr	r3, [sp, #12]
    339e:	1d1a      	adds	r2, r3, #4
    33a0:	9203      	str	r2, [sp, #12]
    33a2:	681a      	ldr	r2, [r3, #0]
    33a4:	17d3      	asrs	r3, r2, #31
    33a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    33aa:	e006      	b.n	33ba <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    33ac:	9b03      	ldr	r3, [sp, #12]
    33ae:	1d1a      	adds	r2, r3, #4
    33b0:	9203      	str	r2, [sp, #12]
    33b2:	681a      	ldr	r2, [r3, #0]
    33b4:	17d3      	asrs	r3, r2, #31
    33b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    33ba:	2901      	cmp	r1, #1
    33bc:	d028      	beq.n	3410 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    33be:	2902      	cmp	r1, #2
    33c0:	f47f af1c 	bne.w	31fc <cbvprintf+0x410>
				value->sint = (short)value->sint;
    33c4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    33c8:	17d3      	asrs	r3, r2, #31
    33ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    33ce:	e715      	b.n	31fc <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    33d0:	9b03      	ldr	r3, [sp, #12]
    33d2:	3307      	adds	r3, #7
    33d4:	f023 0307 	bic.w	r3, r3, #7
    33d8:	f103 0208 	add.w	r2, r3, #8
    33dc:	9203      	str	r2, [sp, #12]
    33de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    33e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    33e6:	e7e8      	b.n	33ba <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    33e8:	9b03      	ldr	r3, [sp, #12]
    33ea:	3307      	adds	r3, #7
    33ec:	f023 0307 	bic.w	r3, r3, #7
    33f0:	f103 0208 	add.w	r2, r3, #8
    33f4:	9203      	str	r2, [sp, #12]
    33f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    33fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    33fe:	e7dc      	b.n	33ba <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3400:	9b03      	ldr	r3, [sp, #12]
    3402:	1d1a      	adds	r2, r3, #4
    3404:	9203      	str	r2, [sp, #12]
    3406:	681a      	ldr	r2, [r3, #0]
    3408:	17d3      	asrs	r3, r2, #31
				value->sint =
    340a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    340e:	e7d4      	b.n	33ba <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    3410:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3414:	9306      	str	r3, [sp, #24]
    3416:	2300      	movs	r3, #0
    3418:	9307      	str	r3, [sp, #28]
    341a:	e6ef      	b.n	31fc <cbvprintf+0x410>
			switch (length_mod) {
    341c:	1ecb      	subs	r3, r1, #3
    341e:	2b04      	cmp	r3, #4
    3420:	d804      	bhi.n	342c <cbvprintf+0x640>
    3422:	e8df f003 	tbb	[pc, r3]
    3426:	1f0b      	.short	0x1f0b
    3428:	4135      	.short	0x4135
    342a:	41          	.byte	0x41
    342b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    342c:	9b03      	ldr	r3, [sp, #12]
    342e:	1d1a      	adds	r2, r3, #4
    3430:	9203      	str	r2, [sp, #12]
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	9306      	str	r3, [sp, #24]
    3436:	2300      	movs	r3, #0
    3438:	9307      	str	r3, [sp, #28]
				break;
    343a:	e01e      	b.n	347a <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    343c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    3440:	2b63      	cmp	r3, #99	; 0x63
    3442:	d007      	beq.n	3454 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    3444:	9b03      	ldr	r3, [sp, #12]
    3446:	1d1a      	adds	r2, r3, #4
    3448:	9203      	str	r2, [sp, #12]
    344a:	681b      	ldr	r3, [r3, #0]
    344c:	9306      	str	r3, [sp, #24]
    344e:	2300      	movs	r3, #0
    3450:	9307      	str	r3, [sp, #28]
    3452:	e012      	b.n	347a <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    3454:	9b03      	ldr	r3, [sp, #12]
    3456:	1d1a      	adds	r2, r3, #4
    3458:	9203      	str	r2, [sp, #12]
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	9306      	str	r3, [sp, #24]
    345e:	2300      	movs	r3, #0
    3460:	9307      	str	r3, [sp, #28]
    3462:	e00a      	b.n	347a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    3464:	9b03      	ldr	r3, [sp, #12]
    3466:	3307      	adds	r3, #7
    3468:	f023 0307 	bic.w	r3, r3, #7
    346c:	f103 0208 	add.w	r2, r3, #8
    3470:	9203      	str	r2, [sp, #12]
    3472:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3476:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    347a:	2901      	cmp	r1, #1
    347c:	d01c      	beq.n	34b8 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    347e:	2902      	cmp	r1, #2
    3480:	f47f aebc 	bne.w	31fc <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    3484:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    3488:	9306      	str	r3, [sp, #24]
    348a:	2300      	movs	r3, #0
    348c:	9307      	str	r3, [sp, #28]
    348e:	e6b5      	b.n	31fc <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    3490:	9b03      	ldr	r3, [sp, #12]
    3492:	3307      	adds	r3, #7
    3494:	f023 0307 	bic.w	r3, r3, #7
    3498:	f103 0208 	add.w	r2, r3, #8
    349c:	9203      	str	r2, [sp, #12]
    349e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    34a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    34a6:	e7e8      	b.n	347a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    34a8:	9b03      	ldr	r3, [sp, #12]
    34aa:	1d1a      	adds	r2, r3, #4
    34ac:	9203      	str	r2, [sp, #12]
    34ae:	681b      	ldr	r3, [r3, #0]
				value->uint =
    34b0:	9306      	str	r3, [sp, #24]
    34b2:	2300      	movs	r3, #0
    34b4:	9307      	str	r3, [sp, #28]
				break;
    34b6:	e7e0      	b.n	347a <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    34b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    34bc:	9306      	str	r3, [sp, #24]
    34be:	2300      	movs	r3, #0
    34c0:	9307      	str	r3, [sp, #28]
    34c2:	e69b      	b.n	31fc <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    34c4:	2908      	cmp	r1, #8
    34c6:	d00b      	beq.n	34e0 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    34c8:	9b03      	ldr	r3, [sp, #12]
    34ca:	3307      	adds	r3, #7
    34cc:	f023 0307 	bic.w	r3, r3, #7
    34d0:	f103 0208 	add.w	r2, r3, #8
    34d4:	9203      	str	r2, [sp, #12]
    34d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    34da:	e9cd 2306 	strd	r2, r3, [sp, #24]
    34de:	e68d      	b.n	31fc <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    34e0:	9b03      	ldr	r3, [sp, #12]
    34e2:	3307      	adds	r3, #7
    34e4:	f023 0307 	bic.w	r3, r3, #7
    34e8:	f103 0208 	add.w	r2, r3, #8
    34ec:	9203      	str	r2, [sp, #12]
    34ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    34f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    34f6:	e681      	b.n	31fc <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    34f8:	9b03      	ldr	r3, [sp, #12]
    34fa:	1d1a      	adds	r2, r3, #4
    34fc:	9203      	str	r2, [sp, #12]
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	9306      	str	r3, [sp, #24]
    3502:	e67b      	b.n	31fc <cbvprintf+0x410>
			OUTS(sp, fp);
    3504:	4643      	mov	r3, r8
    3506:	4652      	mov	r2, sl
    3508:	4629      	mov	r1, r5
    350a:	4630      	mov	r0, r6
    350c:	f00a fd67 	bl	dfde <outs>
    3510:	2800      	cmp	r0, #0
    3512:	f2c0 814f 	blt.w	37b4 <cbvprintf+0x9c8>
    3516:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    3518:	46c2      	mov	sl, r8
			continue;
    351a:	e46f      	b.n	2dfc <cbvprintf+0x10>
		case '%':
			OUTC('%');
    351c:	4629      	mov	r1, r5
    351e:	2025      	movs	r0, #37	; 0x25
    3520:	47b0      	blx	r6
    3522:	2800      	cmp	r0, #0
    3524:	f2c0 8146 	blt.w	37b4 <cbvprintf+0x9c8>
    3528:	3401      	adds	r4, #1
		char sign = 0;
    352a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    352e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3532:	f04f 0a00 	mov.w	sl, #0
			break;
    3536:	e0a7      	b.n	3688 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    3538:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    353c:	f1bb 0f00 	cmp.w	fp, #0
    3540:	db08      	blt.n	3554 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    3542:	4659      	mov	r1, fp
    3544:	4650      	mov	r0, sl
    3546:	f00c ff27 	bl	10398 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    354a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    354e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    3552:	e099      	b.n	3688 <cbvprintf+0x89c>
				len = strlen(bps);
    3554:	4650      	mov	r0, sl
    3556:	f7fd ffdd 	bl	1514 <strlen>
    355a:	e7f6      	b.n	354a <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    355c:	9b06      	ldr	r3, [sp, #24]
    355e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    3562:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    3566:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    356a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    356e:	e08b      	b.n	3688 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    3570:	f019 0f08 	tst.w	r9, #8
    3574:	d105      	bne.n	3582 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    3576:	f019 0910 	ands.w	r9, r9, #16
    357a:	d004      	beq.n	3586 <cbvprintf+0x79a>
				sign = ' ';
    357c:	f04f 0920 	mov.w	r9, #32
    3580:	e001      	b.n	3586 <cbvprintf+0x79a>
				sign = '+';
    3582:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3586:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    358a:	2a00      	cmp	r2, #0
    358c:	f173 0100 	sbcs.w	r1, r3, #0
    3590:	db02      	blt.n	3598 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    3592:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3596:	e009      	b.n	35ac <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    3598:	4252      	negs	r2, r2
    359a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    359e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    35a2:	f04f 092d 	mov.w	r9, #45	; 0x2d
    35a6:	e001      	b.n	35ac <cbvprintf+0x7c0>
		switch (conv->specifier) {
    35a8:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    35ac:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    35b0:	9300      	str	r3, [sp, #0]
    35b2:	ab0c      	add	r3, sp, #48	; 0x30
    35b4:	aa08      	add	r2, sp, #32
    35b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    35ba:	f7ff fba7 	bl	2d0c <encode_uint>
    35be:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    35c0:	f1bb 0f00 	cmp.w	fp, #0
    35c4:	f2c0 8090 	blt.w	36e8 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    35c8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    35cc:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    35d0:	f89d 2020 	ldrb.w	r2, [sp, #32]
    35d4:	f36f 1286 	bfc	r2, #6, #1
    35d8:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    35dc:	459b      	cmp	fp, r3
    35de:	f240 8086 	bls.w	36ee <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    35e2:	ebab 0303 	sub.w	r3, fp, r3
    35e6:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    35e8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    35ec:	e04c      	b.n	3688 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    35ee:	9806      	ldr	r0, [sp, #24]
    35f0:	b930      	cbnz	r0, 3600 <cbvprintf+0x814>
		char sign = 0;
    35f2:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    35f6:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 37bc <cbvprintf+0x9d0>
			bps = "(nil)";
    35fa:	f1ab 0a05 	sub.w	sl, fp, #5
    35fe:	e043      	b.n	3688 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3600:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3604:	9300      	str	r3, [sp, #0]
    3606:	ab0c      	add	r3, sp, #48	; 0x30
    3608:	aa08      	add	r2, sp, #32
    360a:	2100      	movs	r1, #0
    360c:	f7ff fb7e 	bl	2d0c <encode_uint>
    3610:	4682      	mov	sl, r0
				conv->altform_0c = true;
    3612:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3616:	f043 0310 	orr.w	r3, r3, #16
    361a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    361e:	2378      	movs	r3, #120	; 0x78
    3620:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    3624:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    3628:	e7ca      	b.n	35c0 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    362a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    362c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3630:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3634:	2b07      	cmp	r3, #7
    3636:	d806      	bhi.n	3646 <cbvprintf+0x85a>
    3638:	e8df f003 	tbb	[pc, r3]
    363c:	100e0c04 	.word	0x100e0c04
    3640:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    3644:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3646:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    364a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    364e:	f04f 0a00 	mov.w	sl, #0
}
    3652:	e019      	b.n	3688 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    3654:	7014      	strb	r4, [r2, #0]
		break;
    3656:	e7f6      	b.n	3646 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    3658:	8014      	strh	r4, [r2, #0]
		break;
    365a:	e7f4      	b.n	3646 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    365c:	6014      	str	r4, [r2, #0]
		break;
    365e:	e7f2      	b.n	3646 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    3660:	4620      	mov	r0, r4
    3662:	17e1      	asrs	r1, r4, #31
    3664:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3668:	e7ed      	b.n	3646 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    366a:	4620      	mov	r0, r4
    366c:	17e1      	asrs	r1, r4, #31
    366e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3672:	e7e8      	b.n	3646 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    3674:	6014      	str	r4, [r2, #0]
		break;
    3676:	e7e6      	b.n	3646 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3678:	6014      	str	r4, [r2, #0]
		break;
    367a:	e7e4      	b.n	3646 <cbvprintf+0x85a>
		switch (conv->specifier) {
    367c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3680:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3684:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3688:	f1ba 0f00 	cmp.w	sl, #0
    368c:	f000 808e 	beq.w	37ac <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3690:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    3694:	f1b9 0f00 	cmp.w	r9, #0
    3698:	d000      	beq.n	369c <cbvprintf+0x8b0>
			nj_len += 1U;
    369a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    369c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    36a0:	f011 0f10 	tst.w	r1, #16
    36a4:	d026      	beq.n	36f4 <cbvprintf+0x908>
			nj_len += 2U;
    36a6:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    36a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36aa:	4413      	add	r3, r2
		if (conv->pad_fp) {
    36ac:	f011 0f40 	tst.w	r1, #64	; 0x40
    36b0:	d001      	beq.n	36b6 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    36b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    36b4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    36b6:	2f00      	cmp	r7, #0
    36b8:	dd32      	ble.n	3720 <cbvprintf+0x934>
			width -= (int)nj_len;
    36ba:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    36bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    36c0:	f013 0f04 	tst.w	r3, #4
    36c4:	d12c      	bne.n	3720 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    36c6:	f013 0f40 	tst.w	r3, #64	; 0x40
    36ca:	d018      	beq.n	36fe <cbvprintf+0x912>
					if (sign != 0) {
    36cc:	f1b9 0f00 	cmp.w	r9, #0
    36d0:	d018      	beq.n	3704 <cbvprintf+0x918>
						OUTC(sign);
    36d2:	4629      	mov	r1, r5
    36d4:	4648      	mov	r0, r9
    36d6:	47b0      	blx	r6
    36d8:	2800      	cmp	r0, #0
    36da:	db6b      	blt.n	37b4 <cbvprintf+0x9c8>
    36dc:	3401      	adds	r4, #1
						sign = 0;
    36de:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    36e2:	2330      	movs	r3, #48	; 0x30
    36e4:	9302      	str	r3, [sp, #8]
    36e6:	e00f      	b.n	3708 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    36e8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    36ec:	e7cc      	b.n	3688 <cbvprintf+0x89c>
    36ee:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    36f2:	e7c9      	b.n	3688 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    36f4:	f011 0f08 	tst.w	r1, #8
    36f8:	d0d6      	beq.n	36a8 <cbvprintf+0x8bc>
			nj_len += 1U;
    36fa:	3201      	adds	r2, #1
    36fc:	e7d4      	b.n	36a8 <cbvprintf+0x8bc>
				char pad = ' ';
    36fe:	2320      	movs	r3, #32
    3700:	9302      	str	r3, [sp, #8]
    3702:	e001      	b.n	3708 <cbvprintf+0x91c>
					pad = '0';
    3704:	2330      	movs	r3, #48	; 0x30
    3706:	9302      	str	r3, [sp, #8]
    3708:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    370a:	1e5f      	subs	r7, r3, #1
    370c:	2b00      	cmp	r3, #0
    370e:	dd07      	ble.n	3720 <cbvprintf+0x934>
					OUTC(pad);
    3710:	4629      	mov	r1, r5
    3712:	9802      	ldr	r0, [sp, #8]
    3714:	47b0      	blx	r6
    3716:	2800      	cmp	r0, #0
    3718:	db4c      	blt.n	37b4 <cbvprintf+0x9c8>
    371a:	3401      	adds	r4, #1
				while (width-- > 0) {
    371c:	463b      	mov	r3, r7
    371e:	e7f4      	b.n	370a <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3720:	f1b9 0f00 	cmp.w	r9, #0
    3724:	d005      	beq.n	3732 <cbvprintf+0x946>
			OUTC(sign);
    3726:	4629      	mov	r1, r5
    3728:	4648      	mov	r0, r9
    372a:	47b0      	blx	r6
    372c:	2800      	cmp	r0, #0
    372e:	db41      	blt.n	37b4 <cbvprintf+0x9c8>
    3730:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3732:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3736:	f3c3 1200 	ubfx	r2, r3, #4, #1
    373a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    373e:	4313      	orrs	r3, r2
    3740:	d005      	beq.n	374e <cbvprintf+0x962>
				OUTC('0');
    3742:	4629      	mov	r1, r5
    3744:	2030      	movs	r0, #48	; 0x30
    3746:	47b0      	blx	r6
    3748:	2800      	cmp	r0, #0
    374a:	db33      	blt.n	37b4 <cbvprintf+0x9c8>
    374c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    374e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3752:	f013 0f10 	tst.w	r3, #16
    3756:	d006      	beq.n	3766 <cbvprintf+0x97a>
				OUTC(conv->specifier);
    3758:	4629      	mov	r1, r5
    375a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    375e:	47b0      	blx	r6
    3760:	2800      	cmp	r0, #0
    3762:	db27      	blt.n	37b4 <cbvprintf+0x9c8>
    3764:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    3766:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    3768:	f103 39ff 	add.w	r9, r3, #4294967295
    376c:	2b00      	cmp	r3, #0
    376e:	dd07      	ble.n	3780 <cbvprintf+0x994>
				OUTC('0');
    3770:	4629      	mov	r1, r5
    3772:	2030      	movs	r0, #48	; 0x30
    3774:	47b0      	blx	r6
    3776:	2800      	cmp	r0, #0
    3778:	db1c      	blt.n	37b4 <cbvprintf+0x9c8>
    377a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    377c:	464b      	mov	r3, r9
    377e:	e7f3      	b.n	3768 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    3780:	465b      	mov	r3, fp
    3782:	4652      	mov	r2, sl
    3784:	4629      	mov	r1, r5
    3786:	4630      	mov	r0, r6
    3788:	f00a fc29 	bl	dfde <outs>
    378c:	2800      	cmp	r0, #0
    378e:	db11      	blt.n	37b4 <cbvprintf+0x9c8>
    3790:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3792:	2f00      	cmp	r7, #0
    3794:	dd07      	ble.n	37a6 <cbvprintf+0x9ba>
			OUTC(' ');
    3796:	4629      	mov	r1, r5
    3798:	2020      	movs	r0, #32
    379a:	47b0      	blx	r6
    379c:	2800      	cmp	r0, #0
    379e:	db09      	blt.n	37b4 <cbvprintf+0x9c8>
    37a0:	3401      	adds	r4, #1
			--width;
    37a2:	3f01      	subs	r7, #1
    37a4:	e7f5      	b.n	3792 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    37a6:	46c2      	mov	sl, r8
    37a8:	f7ff bb28 	b.w	2dfc <cbvprintf+0x10>
    37ac:	46c2      	mov	sl, r8
    37ae:	f7ff bb25 	b.w	2dfc <cbvprintf+0x10>
		}
	}

	return count;
    37b2:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    37b4:	b013      	add	sp, #76	; 0x4c
    37b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37ba:	bf00      	nop
    37bc:	00055101 	.word	0x00055101

000037c0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    37c0:	b508      	push	{r3, lr}
    37c2:	4604      	mov	r4, r0
    37c4:	f04f 0220 	mov.w	r2, #32
    37c8:	f3ef 8311 	mrs	r3, BASEPRI
    37cc:	f382 8812 	msr	BASEPRI_MAX, r2
    37d0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    37d4:	f00b fa47 	bl	ec66 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    37d8:	4620      	mov	r0, r4
    37da:	f000 fdf5 	bl	43c8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    37de:	4803      	ldr	r0, [pc, #12]	; (37ec <sys_reboot+0x2c>)
    37e0:	f00a f98e 	bl	db00 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    37e4:	f000 fa02 	bl	3bec <arch_cpu_idle>
    37e8:	e7fc      	b.n	37e4 <sys_reboot+0x24>
    37ea:	bf00      	nop
    37ec:	00055104 	.word	0x00055104

000037f0 <tty_init>:
	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
	if (!uart_dev) {
    37f0:	b1c1      	cbz	r1, 3824 <tty_init+0x34>
{
    37f2:	b508      	push	{r3, lr}
    37f4:	4602      	mov	r2, r0
    37f6:	4608      	mov	r0, r1
		return -ENODEV;
	}

	tty->uart_dev = uart_dev;
    37f8:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    37fa:	2300      	movs	r3, #0
    37fc:	6153      	str	r3, [r2, #20]
	tty->rx_ringbuf_sz = 0U;
    37fe:	6193      	str	r3, [r2, #24]
	tty->tx_ringbuf = NULL;
    3800:	6353      	str	r3, [r2, #52]	; 0x34
	tty->tx_ringbuf_sz = 0U;
    3802:	6393      	str	r3, [r2, #56]	; 0x38

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3804:	87d3      	strh	r3, [r2, #62]	; 0x3e
    3806:	8793      	strh	r3, [r2, #60]	; 0x3c
    3808:	83d3      	strh	r3, [r2, #30]
    380a:	8393      	strh	r3, [r2, #28]

	tty->rx_timeout = SYS_FOREVER_MS;
    380c:	f04f 33ff 	mov.w	r3, #4294967295
    3810:	6213      	str	r3, [r2, #32]
	tty->tx_timeout = SYS_FOREVER_MS;
    3812:	6413      	str	r3, [r2, #64]	; 0x40
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3814:	688b      	ldr	r3, [r1, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3816:	b143      	cbz	r3, 382a <tty_init+0x3a>
    3818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    381a:	b143      	cbz	r3, 382e <tty_init+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    381c:	4905      	ldr	r1, [pc, #20]	; (3834 <tty_init+0x44>)
    381e:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    3820:	2000      	movs	r0, #0
}
    3822:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3824:	f06f 0012 	mvn.w	r0, #18
}
    3828:	4770      	bx	lr
	return 0;
    382a:	2000      	movs	r0, #0
    382c:	e7f9      	b.n	3822 <tty_init+0x32>
    382e:	2000      	movs	r0, #0
    3830:	e7f7      	b.n	3822 <tty_init+0x32>
    3832:	bf00      	nop
    3834:	0000e1f3 	.word	0x0000e1f3

00003838 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    3838:	b500      	push	{lr}
    383a:	b083      	sub	sp, #12
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    383c:	2201      	movs	r2, #1
    383e:	f10d 0107 	add.w	r1, sp, #7
    3842:	4805      	ldr	r0, [pc, #20]	; (3858 <console_getchar+0x20>)
    3844:	f00a fd1b 	bl	e27e <tty_read>
	if (res < 0) {
    3848:	2800      	cmp	r0, #0
    384a:	db01      	blt.n	3850 <console_getchar+0x18>
		return res;
	}

	return c;
    384c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3850:	b003      	add	sp, #12
    3852:	f85d fb04 	ldr.w	pc, [sp], #4
    3856:	bf00      	nop
    3858:	2001cb20 	.word	0x2001cb20

0000385c <console_init>:

int console_init(void)
{
    385c:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    385e:	4810      	ldr	r0, [pc, #64]	; (38a0 <console_init+0x44>)
    3860:	f00c f97e 	bl	fb60 <z_device_ready>
    3864:	b1b0      	cbz	r0, 3894 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    3866:	490e      	ldr	r1, [pc, #56]	; (38a0 <console_init+0x44>)
    3868:	480e      	ldr	r0, [pc, #56]	; (38a4 <console_init+0x48>)
    386a:	f7ff ffc1 	bl	37f0 <tty_init>

	if (ret) {
    386e:	4604      	mov	r4, r0
    3870:	b970      	cbnz	r0, 3890 <console_init+0x34>
		return ret;
	}

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
    3872:	4b0b      	ldr	r3, [pc, #44]	; (38a0 <console_init+0x44>)
    3874:	689b      	ldr	r3, [r3, #8]
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    3876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3878:	b17b      	cbz	r3, 389a <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    387a:	4d0a      	ldr	r5, [pc, #40]	; (38a4 <console_init+0x48>)
    387c:	2210      	movs	r2, #16
    387e:	490a      	ldr	r1, [pc, #40]	; (38a8 <console_init+0x4c>)
    3880:	4628      	mov	r0, r5
    3882:	f00a fd3d 	bl	e300 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    3886:	2210      	movs	r2, #16
    3888:	4908      	ldr	r1, [pc, #32]	; (38ac <console_init+0x50>)
    388a:	4628      	mov	r0, r5
    388c:	f00a fd1d 	bl	e2ca <tty_set_rx_buf>

	return 0;
}
    3890:	4620      	mov	r0, r4
    3892:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3894:	f06f 0412 	mvn.w	r4, #18
    3898:	e7fa      	b.n	3890 <console_init+0x34>
			return -ENOTSUP;
    389a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    389e:	e7f7      	b.n	3890 <console_init+0x34>
    38a0:	00010ccc 	.word	0x00010ccc
    38a4:	2001cb20 	.word	0x2001cb20
    38a8:	2001cb64 	.word	0x2001cb64
    38ac:	2001cb10 	.word	0x2001cb10

000038b0 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    38b0:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    38b2:	4c04      	ldr	r4, [pc, #16]	; (38c4 <__do_init_array_aux+0x14>)
    38b4:	4b04      	ldr	r3, [pc, #16]	; (38c8 <__do_init_array_aux+0x18>)
    38b6:	429c      	cmp	r4, r3
    38b8:	d203      	bcs.n	38c2 <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
    38ba:	f854 3b04 	ldr.w	r3, [r4], #4
    38be:	4798      	blx	r3
		func++) {
    38c0:	e7f8      	b.n	38b4 <__do_init_array_aux+0x4>
	}
}
    38c2:	bd10      	pop	{r4, pc}
    38c4:	00010eb4 	.word	0x00010eb4
    38c8:	00010eb4 	.word	0x00010eb4

000038cc <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    38cc:	4b06      	ldr	r3, [pc, #24]	; (38e8 <__do_global_ctors_aux+0x1c>)
    38ce:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    38d0:	b14b      	cbz	r3, 38e6 <__do_global_ctors_aux+0x1a>
{
    38d2:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    38d4:	1e5c      	subs	r4, r3, #1
    38d6:	4a04      	ldr	r2, [pc, #16]	; (38e8 <__do_global_ctors_aux+0x1c>)
    38d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    38dc:	4798      	blx	r3
    38de:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    38e0:	2c00      	cmp	r4, #0
    38e2:	d1f7      	bne.n	38d4 <__do_global_ctors_aux+0x8>
	}
}
    38e4:	bd10      	pop	{r4, pc}
    38e6:	4770      	bx	lr
    38e8:	00010eac 	.word	0x00010eac

000038ec <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    38ec:	4b1b      	ldr	r3, [pc, #108]	; (395c <pm_system_resume+0x70>)
    38ee:	681b      	ldr	r3, [r3, #0]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d132      	bne.n	395a <pm_system_resume+0x6e>
{
    38f4:	b530      	push	{r4, r5, lr}
    38f6:	b085      	sub	sp, #20
		post_ops_done = 1;
    38f8:	4b18      	ldr	r3, [pc, #96]	; (395c <pm_system_resume+0x70>)
    38fa:	2201      	movs	r2, #1
    38fc:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    38fe:	4b18      	ldr	r3, [pc, #96]	; (3960 <pm_system_resume+0x74>)
    3900:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3904:	ab04      	add	r3, sp, #16
    3906:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    390a:	4b16      	ldr	r3, [pc, #88]	; (3964 <pm_system_resume+0x78>)
    390c:	b163      	cbz	r3, 3928 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    390e:	f00a fe31 	bl	e574 <pm_power_state_exit_post_ops>
    3912:	f04f 0320 	mov.w	r3, #32
    3916:	f3ef 8511 	mrs	r5, BASEPRI
    391a:	f383 8812 	msr	BASEPRI_MAX, r3
    391e:	f3bf 8f6f 	isb	sy
    3922:	4b11      	ldr	r3, [pc, #68]	; (3968 <pm_system_resume+0x7c>)
    3924:	681c      	ldr	r4, [r3, #0]
    3926:	e00a      	b.n	393e <pm_system_resume+0x52>
	__asm__ volatile(
    3928:	2300      	movs	r3, #0
    392a:	f383 8811 	msr	BASEPRI, r3
    392e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3932:	e7ee      	b.n	3912 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3934:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3936:	b10c      	cbz	r4, 393c <pm_system_resume+0x50>
	return node->next;
    3938:	6823      	ldr	r3, [r4, #0]
    393a:	b143      	cbz	r3, 394e <pm_system_resume+0x62>
{
    393c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    393e:	b134      	cbz	r4, 394e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3940:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3942:	2b00      	cmp	r3, #0
    3944:	d0f6      	beq.n	3934 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3946:	4a06      	ldr	r2, [pc, #24]	; (3960 <pm_system_resume+0x74>)
    3948:	7810      	ldrb	r0, [r2, #0]
    394a:	4798      	blx	r3
    394c:	e7f2      	b.n	3934 <pm_system_resume+0x48>
	__asm__ volatile(
    394e:	f385 8811 	msr	BASEPRI, r5
    3952:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3956:	b005      	add	sp, #20
    3958:	bd30      	pop	{r4, r5, pc}
    395a:	4770      	bx	lr
    395c:	20000008 	.word	0x20000008
    3960:	2001cb80 	.word	0x2001cb80
    3964:	0000e575 	.word	0x0000e575
    3968:	2001cb78 	.word	0x2001cb78

0000396c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    396c:	b570      	push	{r4, r5, r6, lr}
    396e:	b088      	sub	sp, #32
    3970:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3972:	4c2a      	ldr	r4, [pc, #168]	; (3a1c <pm_system_suspend+0xb0>)
    3974:	466d      	mov	r5, sp
    3976:	4601      	mov	r1, r0
    3978:	4628      	mov	r0, r5
    397a:	f00a fcdd 	bl	e338 <pm_policy_next_state>
    397e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3986:	7820      	ldrb	r0, [r4, #0]
    3988:	2800      	cmp	r0, #0
    398a:	d045      	beq.n	3a18 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    398c:	4b24      	ldr	r3, [pc, #144]	; (3a20 <pm_system_suspend+0xb4>)
    398e:	2200      	movs	r2, #0
    3990:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3992:	f1b6 3fff 	cmp.w	r6, #4294967295
    3996:	d10c      	bne.n	39b2 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3998:	f007 fe44 	bl	b624 <k_sched_lock>
	__asm__ volatile(
    399c:	f04f 0320 	mov.w	r3, #32
    39a0:	f3ef 8511 	mrs	r5, BASEPRI
    39a4:	f383 8812 	msr	BASEPRI_MAX, r3
    39a8:	f3bf 8f6f 	isb	sy
	return list->head;
    39ac:	4b1d      	ldr	r3, [pc, #116]	; (3a24 <pm_system_suspend+0xb8>)
    39ae:	681c      	ldr	r4, [r3, #0]
    39b0:	e016      	b.n	39e0 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    39b2:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    39b4:	0c59      	lsrs	r1, r3, #17
    39b6:	03d8      	lsls	r0, r3, #15
    39b8:	4c1b      	ldr	r4, [pc, #108]	; (3a28 <pm_system_suspend+0xbc>)
    39ba:	4a1c      	ldr	r2, [pc, #112]	; (3a2c <pm_system_suspend+0xc0>)
    39bc:	2300      	movs	r3, #0
    39be:	1900      	adds	r0, r0, r4
    39c0:	f04f 0400 	mov.w	r4, #0
    39c4:	eb44 0101 	adc.w	r1, r4, r1
    39c8:	f7fd fbb2 	bl	1130 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    39cc:	2101      	movs	r1, #1
    39ce:	1a30      	subs	r0, r6, r0
    39d0:	f00c fae7 	bl	ffa2 <z_set_timeout_expiry>
    39d4:	e7e0      	b.n	3998 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    39d6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    39d8:	b10c      	cbz	r4, 39de <pm_system_suspend+0x72>
	return node->next;
    39da:	6823      	ldr	r3, [r4, #0]
    39dc:	b143      	cbz	r3, 39f0 <pm_system_suspend+0x84>
{
    39de:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    39e0:	b134      	cbz	r4, 39f0 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    39e2:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    39e4:	2b00      	cmp	r3, #0
    39e6:	d0f6      	beq.n	39d6 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    39e8:	4a0c      	ldr	r2, [pc, #48]	; (3a1c <pm_system_suspend+0xb0>)
    39ea:	7810      	ldrb	r0, [r2, #0]
    39ec:	4798      	blx	r3
    39ee:	e7f2      	b.n	39d6 <pm_system_suspend+0x6a>
	__asm__ volatile(
    39f0:	f385 8811 	msr	BASEPRI, r5
    39f4:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    39f8:	4b08      	ldr	r3, [pc, #32]	; (3a1c <pm_system_suspend+0xb0>)
    39fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    39fe:	ab08      	add	r3, sp, #32
    3a00:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3a04:	4b0a      	ldr	r3, [pc, #40]	; (3a30 <pm_system_suspend+0xc4>)
    3a06:	b10b      	cbz	r3, 3a0c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3a08:	f00a fda1 	bl	e54e <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3a0c:	f7ff ff6e 	bl	38ec <pm_system_resume>
	k_sched_unlock();
    3a10:	f008 f806 	bl	ba20 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3a14:	4b01      	ldr	r3, [pc, #4]	; (3a1c <pm_system_suspend+0xb0>)
    3a16:	7818      	ldrb	r0, [r3, #0]
}
    3a18:	b008      	add	sp, #32
    3a1a:	bd70      	pop	{r4, r5, r6, pc}
    3a1c:	2001cb80 	.word	0x2001cb80
    3a20:	20000008 	.word	0x20000008
    3a24:	2001cb78 	.word	0x2001cb78
    3a28:	000f423f 	.word	0x000f423f
    3a2c:	000f4240 	.word	0x000f4240
    3a30:	0000e54f 	.word	0x0000e54f

00003a34 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3a34:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3a36:	4802      	ldr	r0, [pc, #8]	; (3a40 <nrf_cc3xx_platform_abort_init+0xc>)
    3a38:	f008 fb5e 	bl	c0f8 <nrf_cc3xx_platform_set_abort>
}
    3a3c:	bd08      	pop	{r3, pc}
    3a3e:	bf00      	nop
    3a40:	00055130 	.word	0x00055130

00003a44 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3a44:	b1d0      	cbz	r0, 3a7c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a46:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3a48:	6842      	ldr	r2, [r0, #4]
    3a4a:	2a04      	cmp	r2, #4
    3a4c:	d005      	beq.n	3a5a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a4e:	b1d2      	cbz	r2, 3a86 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3a50:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3a52:	f007 fcd7 	bl	b404 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3a56:	2000      	movs	r0, #0
    }
}
    3a58:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3a5a:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3a5c:	2200      	movs	r2, #0
    3a5e:	f3bf 8f5b 	dmb	ish
    3a62:	e853 1f00 	ldrex	r1, [r3]
    3a66:	2901      	cmp	r1, #1
    3a68:	d103      	bne.n	3a72 <mutex_unlock_platform+0x2e>
    3a6a:	e843 2000 	strex	r0, r2, [r3]
    3a6e:	2800      	cmp	r0, #0
    3a70:	d1f7      	bne.n	3a62 <mutex_unlock_platform+0x1e>
    3a72:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a76:	d104      	bne.n	3a82 <mutex_unlock_platform+0x3e>
    3a78:	4610      	mov	r0, r2
    3a7a:	e7ed      	b.n	3a58 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3a7c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3a80:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a82:	4802      	ldr	r0, [pc, #8]	; (3a8c <mutex_unlock_platform+0x48>)
    3a84:	e7e8      	b.n	3a58 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3a86:	4802      	ldr	r0, [pc, #8]	; (3a90 <mutex_unlock_platform+0x4c>)
    3a88:	e7e6      	b.n	3a58 <mutex_unlock_platform+0x14>
    3a8a:	bf00      	nop
    3a8c:	ffff8fe9 	.word	0xffff8fe9
    3a90:	ffff8fea 	.word	0xffff8fea

00003a94 <mutex_lock_platform>:
    if(mutex == NULL) {
    3a94:	b320      	cbz	r0, 3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a96:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3a98:	6842      	ldr	r2, [r0, #4]
    3a9a:	2a04      	cmp	r2, #4
    3a9c:	d002      	beq.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a9e:	b992      	cbnz	r2, 3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3aa0:	4811      	ldr	r0, [pc, #68]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
    3aa2:	e00f      	b.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3aa4:	6803      	ldr	r3, [r0, #0]
    3aa6:	2201      	movs	r2, #1
    3aa8:	f3bf 8f5b 	dmb	ish
    3aac:	e853 1f00 	ldrex	r1, [r3]
    3ab0:	2900      	cmp	r1, #0
    3ab2:	d103      	bne.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
    3ab4:	e843 2000 	strex	r0, r2, [r3]
    3ab8:	2800      	cmp	r0, #0
    3aba:	d1f7      	bne.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3abc:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3ac0:	d10c      	bne.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
    3ac2:	2000      	movs	r0, #0
}
    3ac4:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    3ac6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3ac8:	f04f 32ff 	mov.w	r2, #4294967295
    3acc:	f04f 33ff 	mov.w	r3, #4294967295
    3ad0:	f007 fc0e 	bl	b2f0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3ad4:	2800      	cmp	r0, #0
    3ad6:	d0f5      	beq.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3ad8:	4804      	ldr	r0, [pc, #16]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3ada:	e7f3      	b.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3adc:	4803      	ldr	r0, [pc, #12]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3ade:	e7f1      	b.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3ae0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop
    3ae8:	ffff8fea 	.word	0xffff8fea
    3aec:	ffff8fe9 	.word	0xffff8fe9

00003af0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3af0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3af2:	4604      	mov	r4, r0
    3af4:	b190      	cbz	r0, 3b1c <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3af6:	6863      	ldr	r3, [r4, #4]
    3af8:	2b04      	cmp	r3, #4
    3afa:	d00e      	beq.n	3b1a <mutex_free_platform+0x2a>
    3afc:	2b08      	cmp	r3, #8
    3afe:	d00c      	beq.n	3b1a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3b00:	b15b      	cbz	r3, 3b1a <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3b02:	f013 0f02 	tst.w	r3, #2
    3b06:	d10e      	bne.n	3b26 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3b08:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3b0a:	2200      	movs	r2, #0
    3b0c:	601a      	str	r2, [r3, #0]
    3b0e:	605a      	str	r2, [r3, #4]
    3b10:	609a      	str	r2, [r3, #8]
    3b12:	60da      	str	r2, [r3, #12]
    3b14:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3b16:	2300      	movs	r3, #0
    3b18:	6063      	str	r3, [r4, #4]
}
    3b1a:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3b1c:	4b05      	ldr	r3, [pc, #20]	; (3b34 <mutex_free_platform+0x44>)
    3b1e:	685b      	ldr	r3, [r3, #4]
    3b20:	4805      	ldr	r0, [pc, #20]	; (3b38 <mutex_free_platform+0x48>)
    3b22:	4798      	blx	r3
    3b24:	e7e7      	b.n	3af6 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3b26:	4621      	mov	r1, r4
    3b28:	4804      	ldr	r0, [pc, #16]	; (3b3c <mutex_free_platform+0x4c>)
    3b2a:	f00c f866 	bl	fbfa <k_mem_slab_free>
        mutex->mutex = NULL;
    3b2e:	2300      	movs	r3, #0
    3b30:	6023      	str	r3, [r4, #0]
    3b32:	e7f0      	b.n	3b16 <mutex_free_platform+0x26>
    3b34:	2000009c 	.word	0x2000009c
    3b38:	00055138 	.word	0x00055138
    3b3c:	2001cb8c 	.word	0x2001cb8c

00003b40 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b40:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3b42:	4604      	mov	r4, r0
    3b44:	b178      	cbz	r0, 3b66 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3b46:	6863      	ldr	r3, [r4, #4]
    3b48:	2b04      	cmp	r3, #4
    3b4a:	d00b      	beq.n	3b64 <mutex_init_platform+0x24>
    3b4c:	2b08      	cmp	r3, #8
    3b4e:	d009      	beq.n	3b64 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3b50:	b90b      	cbnz	r3, 3b56 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3b52:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3b54:	b163      	cbz	r3, 3b70 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3b56:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3b58:	f00c f8ca 	bl	fcf0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3b5c:	6863      	ldr	r3, [r4, #4]
    3b5e:	f043 0301 	orr.w	r3, r3, #1
    3b62:	6063      	str	r3, [r4, #4]
}
    3b64:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3b66:	4b10      	ldr	r3, [pc, #64]	; (3ba8 <mutex_init_platform+0x68>)
    3b68:	685b      	ldr	r3, [r3, #4]
    3b6a:	4810      	ldr	r0, [pc, #64]	; (3bac <mutex_init_platform+0x6c>)
    3b6c:	4798      	blx	r3
    3b6e:	e7ea      	b.n	3b46 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3b70:	f04f 32ff 	mov.w	r2, #4294967295
    3b74:	f04f 33ff 	mov.w	r3, #4294967295
    3b78:	4621      	mov	r1, r4
    3b7a:	480d      	ldr	r0, [pc, #52]	; (3bb0 <mutex_init_platform+0x70>)
    3b7c:	f007 fa90 	bl	b0a0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3b80:	b908      	cbnz	r0, 3b86 <mutex_init_platform+0x46>
    3b82:	6823      	ldr	r3, [r4, #0]
    3b84:	b91b      	cbnz	r3, 3b8e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3b86:	4b08      	ldr	r3, [pc, #32]	; (3ba8 <mutex_init_platform+0x68>)
    3b88:	685b      	ldr	r3, [r3, #4]
    3b8a:	480a      	ldr	r0, [pc, #40]	; (3bb4 <mutex_init_platform+0x74>)
    3b8c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3b8e:	6823      	ldr	r3, [r4, #0]
    3b90:	2200      	movs	r2, #0
    3b92:	601a      	str	r2, [r3, #0]
    3b94:	605a      	str	r2, [r3, #4]
    3b96:	609a      	str	r2, [r3, #8]
    3b98:	60da      	str	r2, [r3, #12]
    3b9a:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3b9c:	6863      	ldr	r3, [r4, #4]
    3b9e:	f043 0302 	orr.w	r3, r3, #2
    3ba2:	6063      	str	r3, [r4, #4]
    3ba4:	e7d7      	b.n	3b56 <mutex_init_platform+0x16>
    3ba6:	bf00      	nop
    3ba8:	2000009c 	.word	0x2000009c
    3bac:	00055138 	.word	0x00055138
    3bb0:	2001cb8c 	.word	0x2001cb8c
    3bb4:	00055160 	.word	0x00055160

00003bb8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3bb8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3bba:	2340      	movs	r3, #64	; 0x40
    3bbc:	2214      	movs	r2, #20
    3bbe:	4904      	ldr	r1, [pc, #16]	; (3bd0 <nrf_cc3xx_platform_mutex_init+0x18>)
    3bc0:	4804      	ldr	r0, [pc, #16]	; (3bd4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3bc2:	f00c f80b 	bl	fbdc <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3bc6:	4904      	ldr	r1, [pc, #16]	; (3bd8 <nrf_cc3xx_platform_mutex_init+0x20>)
    3bc8:	4804      	ldr	r0, [pc, #16]	; (3bdc <nrf_cc3xx_platform_mutex_init+0x24>)
    3bca:	f008 faf7 	bl	c1bc <nrf_cc3xx_platform_set_mutexes>
}
    3bce:	bd08      	pop	{r3, pc}
    3bd0:	2001cbac 	.word	0x2001cbac
    3bd4:	2001cb8c 	.word	0x2001cb8c
    3bd8:	000551a0 	.word	0x000551a0
    3bdc:	00055190 	.word	0x00055190

00003be0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3be0:	4901      	ldr	r1, [pc, #4]	; (3be8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3be2:	2210      	movs	r2, #16
	str	r2, [r1]
    3be4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3be6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3be8:	e000ed10 	.word	0xe000ed10

00003bec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3bec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3bee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3bf0:	f380 8811 	msr	BASEPRI, r0
	isb
    3bf4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3bf8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3bfc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3bfe:	b662      	cpsie	i
	isb
    3c00:	f3bf 8f6f 	isb	sy

	bx	lr
    3c04:	4770      	bx	lr
    3c06:	bf00      	nop

00003c08 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3c08:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3c0a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3c0c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3c10:	bf20      	wfe

	msr	BASEPRI, r0
    3c12:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3c16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3c18:	4770      	bx	lr
    3c1a:	bf00      	nop

00003c1c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3c1c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3c1e:	2b00      	cmp	r3, #0
    3c20:	db08      	blt.n	3c34 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c22:	f000 001f 	and.w	r0, r0, #31
    3c26:	095b      	lsrs	r3, r3, #5
    3c28:	2201      	movs	r2, #1
    3c2a:	fa02 f000 	lsl.w	r0, r2, r0
    3c2e:	4a02      	ldr	r2, [pc, #8]	; (3c38 <arch_irq_enable+0x1c>)
    3c30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3c34:	4770      	bx	lr
    3c36:	bf00      	nop
    3c38:	e000e100 	.word	0xe000e100

00003c3c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3c3c:	0942      	lsrs	r2, r0, #5
    3c3e:	4b05      	ldr	r3, [pc, #20]	; (3c54 <arch_irq_is_enabled+0x18>)
    3c40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3c44:	f000 001f 	and.w	r0, r0, #31
    3c48:	2301      	movs	r3, #1
    3c4a:	fa03 f000 	lsl.w	r0, r3, r0
}
    3c4e:	4010      	ands	r0, r2
    3c50:	4770      	bx	lr
    3c52:	bf00      	nop
    3c54:	e000e100 	.word	0xe000e100

00003c58 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3c58:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3c5a:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	db08      	blt.n	3c72 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c60:	0149      	lsls	r1, r1, #5
    3c62:	b2c9      	uxtb	r1, r1
    3c64:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3c68:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3c6c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3c70:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c72:	f000 000f 	and.w	r0, r0, #15
    3c76:	0149      	lsls	r1, r1, #5
    3c78:	b2c9      	uxtb	r1, r1
    3c7a:	4b01      	ldr	r3, [pc, #4]	; (3c80 <z_arm_irq_priority_set+0x28>)
    3c7c:	5419      	strb	r1, [r3, r0]
}
    3c7e:	4770      	bx	lr
    3c80:	e000ed14 	.word	0xe000ed14

00003c84 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3c84:	bf30      	wfi
    b z_SysNmiOnReset
    3c86:	f7ff bffd 	b.w	3c84 <z_SysNmiOnReset>
    3c8a:	bf00      	nop

00003c8c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3c8c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3c8e:	4b0b      	ldr	r3, [pc, #44]	; (3cbc <z_arm_prep_c+0x30>)
    3c90:	4a0b      	ldr	r2, [pc, #44]	; (3cc0 <z_arm_prep_c+0x34>)
    3c92:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3c96:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3c98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c9c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3ca0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3ca4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3cac:	f007 f998 	bl	afe0 <z_bss_zero>
	z_data_copy();
    3cb0:	f008 f826 	bl	bd00 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3cb4:	f000 fa18 	bl	40e8 <z_arm_interrupt_init>
	z_cstart();
    3cb8:	f007 f99e 	bl	aff8 <z_cstart>
    3cbc:	e000ed00 	.word	0xe000ed00
    3cc0:	00000000 	.word	0x00000000

00003cc4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3cc4:	4a0a      	ldr	r2, [pc, #40]	; (3cf0 <arch_swap+0x2c>)
    3cc6:	6893      	ldr	r3, [r2, #8]
    3cc8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3ccc:	4909      	ldr	r1, [pc, #36]	; (3cf4 <arch_swap+0x30>)
    3cce:	6809      	ldr	r1, [r1, #0]
    3cd0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3cd4:	4908      	ldr	r1, [pc, #32]	; (3cf8 <arch_swap+0x34>)
    3cd6:	684b      	ldr	r3, [r1, #4]
    3cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3cdc:	604b      	str	r3, [r1, #4]
    3cde:	2300      	movs	r3, #0
    3ce0:	f383 8811 	msr	BASEPRI, r3
    3ce4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3ce8:	6893      	ldr	r3, [r2, #8]
}
    3cea:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    3cee:	4770      	bx	lr
    3cf0:	2001d6d8 	.word	0x2001d6d8
    3cf4:	00057768 	.word	0x00057768
    3cf8:	e000ed00 	.word	0xe000ed00

00003cfc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3cfc:	4913      	ldr	r1, [pc, #76]	; (3d4c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3cfe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3d00:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3d04:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3d06:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3d0a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3d0e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3d10:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3d14:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3d18:	4f0d      	ldr	r7, [pc, #52]	; (3d50 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3d1a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3d1e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3d20:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3d22:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3d24:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    3d28:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3d2a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3d2e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3d32:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3d34:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3d36:	f000 fa79 	bl	422c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3d3a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3d3e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3d42:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3d46:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3d4a:	4770      	bx	lr
    ldr r1, =_kernel
    3d4c:	2001d6d8 	.word	0x2001d6d8
    ldr v4, =_SCS_ICSR
    3d50:	e000ed04 	.word	0xe000ed04

00003d54 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3d54:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3d58:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3d5a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3d5e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3d62:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3d64:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3d68:	2902      	cmp	r1, #2
    beq _oops
    3d6a:	d0ff      	beq.n	3d6c <_oops>

00003d6c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3d6c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3d6e:	f00a faf0 	bl	e352 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3d72:	bd01      	pop	{r0, pc}

00003d74 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    3d74:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3d76:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    3d7a:	490d      	ldr	r1, [pc, #52]	; (3db0 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    3d7c:	f021 0101 	bic.w	r1, r1, #1
    3d80:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    3d84:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3d88:	9b01      	ldr	r3, [sp, #4]
    3d8a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3d8e:	9b02      	ldr	r3, [sp, #8]
    3d90:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3d94:	9b03      	ldr	r3, [sp, #12]
    3d96:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3d9e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    3da2:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3da4:	2300      	movs	r3, #0
    3da6:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3daa:	bc10      	pop	{r4}
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop
    3db0:	0000dddf 	.word	0x0000dddf

00003db4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3db4:	4b16      	ldr	r3, [pc, #88]	; (3e10 <z_check_thread_stack_fail+0x5c>)
    3db6:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    3db8:	b1da      	cbz	r2, 3df2 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3dba:	f110 0f16 	cmn.w	r0, #22
    3dbe:	d01a      	beq.n	3df6 <z_check_thread_stack_fail+0x42>
{
    3dc0:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3dc2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3dc6:	f1a3 0420 	sub.w	r4, r3, #32
    3dca:	4284      	cmp	r4, r0
    3dcc:	d805      	bhi.n	3dda <z_check_thread_stack_fail+0x26>
    3dce:	4283      	cmp	r3, r0
    3dd0:	d908      	bls.n	3de4 <z_check_thread_stack_fail+0x30>
    3dd2:	428b      	cmp	r3, r1
    3dd4:	d808      	bhi.n	3de8 <z_check_thread_stack_fail+0x34>
    3dd6:	2100      	movs	r1, #0
    3dd8:	e000      	b.n	3ddc <z_check_thread_stack_fail+0x28>
    3dda:	2100      	movs	r1, #0
    3ddc:	b931      	cbnz	r1, 3dec <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3dde:	2000      	movs	r0, #0
}
    3de0:	bc10      	pop	{r4}
    3de2:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3de4:	2100      	movs	r1, #0
    3de6:	e7f9      	b.n	3ddc <z_check_thread_stack_fail+0x28>
    3de8:	2101      	movs	r1, #1
    3dea:	e7f7      	b.n	3ddc <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    3dec:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3df0:	e7f6      	b.n	3de0 <z_check_thread_stack_fail+0x2c>
		return 0;
    3df2:	2000      	movs	r0, #0
    3df4:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3df6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3dfa:	428b      	cmp	r3, r1
    3dfc:	bf94      	ite	ls
    3dfe:	2100      	movls	r1, #0
    3e00:	2101      	movhi	r1, #1
    3e02:	b909      	cbnz	r1, 3e08 <z_check_thread_stack_fail+0x54>
	return 0;
    3e04:	2000      	movs	r0, #0
}
    3e06:	4770      	bx	lr
		return thread->stack_info.start;
    3e08:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3e0c:	4770      	bx	lr
    3e0e:	bf00      	nop
    3e10:	2001d6d8 	.word	0x2001d6d8

00003e14 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3e14:	b508      	push	{r3, lr}
    3e16:	460d      	mov	r5, r1
    3e18:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3e1a:	4b08      	ldr	r3, [pc, #32]	; (3e3c <arch_switch_to_main_thread+0x28>)
    3e1c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3e1e:	f000 fa05 	bl	422c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3e22:	4620      	mov	r0, r4
    3e24:	f385 8809 	msr	PSP, r5
    3e28:	2100      	movs	r1, #0
    3e2a:	b663      	cpsie	if
    3e2c:	f381 8811 	msr	BASEPRI, r1
    3e30:	f3bf 8f6f 	isb	sy
    3e34:	2200      	movs	r2, #0
    3e36:	2300      	movs	r3, #0
    3e38:	f009 ffd1 	bl	ddde <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3e3c:	2001d6d8 	.word	0x2001d6d8

00003e40 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3e40:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3e42:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3e44:	4a0b      	ldr	r2, [pc, #44]	; (3e74 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3e46:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3e48:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3e4a:	bf1e      	ittt	ne
	movne	r1, #0
    3e4c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3e4e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3e50:	f00b ff26 	blne	fca0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3e54:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3e56:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3e5a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3e5e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3e62:	4905      	ldr	r1, [pc, #20]	; (3e78 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3e64:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3e66:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3e68:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3e6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3e6e:	4903      	ldr	r1, [pc, #12]	; (3e7c <_isr_wrapper+0x3c>)
	bx r1
    3e70:	4708      	bx	r1
    3e72:	0000      	.short	0x0000
	ldr r2, =_kernel
    3e74:	2001d6d8 	.word	0x2001d6d8
	ldr r1, =_sw_isr_table
    3e78:	00010d2c 	.word	0x00010d2c
	ldr r1, =z_arm_int_exit
    3e7c:	00003e81 	.word	0x00003e81

00003e80 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3e80:	4b04      	ldr	r3, [pc, #16]	; (3e94 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3e82:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3e84:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3e86:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3e88:	d003      	beq.n	3e92 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3e8a:	4903      	ldr	r1, [pc, #12]	; (3e98 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3e90:	600a      	str	r2, [r1, #0]

00003e92 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3e92:	4770      	bx	lr
	ldr r3, =_kernel
    3e94:	2001d6d8 	.word	0x2001d6d8
	ldr r1, =_SCS_ICSR
    3e98:	e000ed04 	.word	0xe000ed04

00003e9c <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    3e9c:	b510      	push	{r4, lr}
    3e9e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3ea0:	4b12      	ldr	r3, [pc, #72]	; (3eec <bus_fault+0x50>)
    3ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ea8:	f413 7f00 	tst.w	r3, #512	; 0x200
    3eac:	d00b      	beq.n	3ec6 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3eae:	4b0f      	ldr	r3, [pc, #60]	; (3eec <bus_fault+0x50>)
    3eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3eb4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3eb8:	d005      	beq.n	3ec6 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3eba:	b121      	cbz	r1, 3ec6 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3ebc:	4a0b      	ldr	r2, [pc, #44]	; (3eec <bus_fault+0x50>)
    3ebe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ec0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3ec4:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3ec6:	4b09      	ldr	r3, [pc, #36]	; (3eec <bus_fault+0x50>)
    3ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ecc:	f413 7f80 	tst.w	r3, #256	; 0x100
    3ed0:	d101      	bne.n	3ed6 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3ed2:	4b06      	ldr	r3, [pc, #24]	; (3eec <bus_fault+0x50>)
    3ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3ed6:	4a05      	ldr	r2, [pc, #20]	; (3eec <bus_fault+0x50>)
    3ed8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3eda:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3ede:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3ee0:	2101      	movs	r1, #1
    3ee2:	f00a fa4f 	bl	e384 <memory_fault_recoverable>
    3ee6:	7020      	strb	r0, [r4, #0]

	return reason;
}
    3ee8:	2000      	movs	r0, #0
    3eea:	bd10      	pop	{r4, pc}
    3eec:	e000ed00 	.word	0xe000ed00

00003ef0 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3ef0:	4b07      	ldr	r3, [pc, #28]	; (3f10 <usage_fault+0x20>)
    3ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3ef6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f00:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3f04:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3f08:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    3f0a:	2000      	movs	r0, #0
    3f0c:	4770      	bx	lr
    3f0e:	bf00      	nop
    3f10:	e000ed00 	.word	0xe000ed00

00003f14 <mem_manage_fault>:
{
    3f14:	b570      	push	{r4, r5, r6, lr}
    3f16:	4605      	mov	r5, r0
    3f18:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3f1a:	4b20      	ldr	r3, [pc, #128]	; (3f9c <mem_manage_fault+0x88>)
    3f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f22:	f013 0f02 	tst.w	r3, #2
    3f26:	d00c      	beq.n	3f42 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    3f28:	4b1c      	ldr	r3, [pc, #112]	; (3f9c <mem_manage_fault+0x88>)
    3f2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f2e:	f013 0f80 	tst.w	r3, #128	; 0x80
    3f32:	d025      	beq.n	3f80 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    3f34:	b139      	cbz	r1, 3f46 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3f36:	4a19      	ldr	r2, [pc, #100]	; (3f9c <mem_manage_fault+0x88>)
    3f38:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3f3e:	6293      	str	r3, [r2, #40]	; 0x28
    3f40:	e001      	b.n	3f46 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    3f42:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3f46:	4b15      	ldr	r3, [pc, #84]	; (3f9c <mem_manage_fault+0x88>)
    3f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f4e:	f013 0f10 	tst.w	r3, #16
    3f52:	d104      	bne.n	3f5e <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3f54:	4b11      	ldr	r3, [pc, #68]	; (3f9c <mem_manage_fault+0x88>)
    3f56:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3f58:	f014 0402 	ands.w	r4, r4, #2
    3f5c:	d004      	beq.n	3f68 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3f5e:	4b0f      	ldr	r3, [pc, #60]	; (3f9c <mem_manage_fault+0x88>)
    3f60:	685c      	ldr	r4, [r3, #4]
    3f62:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    3f66:	d10e      	bne.n	3f86 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3f68:	4a0c      	ldr	r2, [pc, #48]	; (3f9c <mem_manage_fault+0x88>)
    3f6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f6c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3f70:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3f72:	2101      	movs	r1, #1
    3f74:	4628      	mov	r0, r5
    3f76:	f00a fa05 	bl	e384 <memory_fault_recoverable>
    3f7a:	7030      	strb	r0, [r6, #0]
}
    3f7c:	4620      	mov	r0, r4
    3f7e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    3f80:	f06f 0015 	mvn.w	r0, #21
    3f84:	e7df      	b.n	3f46 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3f86:	4629      	mov	r1, r5
    3f88:	f7ff ff14 	bl	3db4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3f8c:	4604      	mov	r4, r0
    3f8e:	2800      	cmp	r0, #0
    3f90:	d0ea      	beq.n	3f68 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3f92:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3f96:	2402      	movs	r4, #2
    3f98:	e7e6      	b.n	3f68 <mem_manage_fault+0x54>
    3f9a:	bf00      	nop
    3f9c:	e000ed00 	.word	0xe000ed00

00003fa0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    3fa0:	b510      	push	{r4, lr}
    3fa2:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    3fa4:	2300      	movs	r3, #0
    3fa6:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3fa8:	4b1b      	ldr	r3, [pc, #108]	; (4018 <hard_fault+0x78>)
    3faa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3fac:	f010 0002 	ands.w	r0, r0, #2
    3fb0:	d12d      	bne.n	400e <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	db2b      	blt.n	4010 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3fb8:	4b17      	ldr	r3, [pc, #92]	; (4018 <hard_fault+0x78>)
    3fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3fbc:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    3fc0:	d027      	beq.n	4012 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3fc2:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    3fc4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3fc8:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3fcc:	429a      	cmp	r2, r3
    3fce:	d010      	beq.n	3ff2 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    3fd0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3fd4:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    3fd8:	781b      	ldrb	r3, [r3, #0]
    3fda:	b963      	cbnz	r3, 3ff6 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    3fdc:	4b0f      	ldr	r3, [pc, #60]	; (401c <hard_fault+0x7c>)
    3fde:	781b      	ldrb	r3, [r3, #0]
    3fe0:	b97b      	cbnz	r3, 4002 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    3fe2:	4b0f      	ldr	r3, [pc, #60]	; (4020 <hard_fault+0x80>)
    3fe4:	881b      	ldrh	r3, [r3, #0]
    3fe6:	b29b      	uxth	r3, r3
    3fe8:	b193      	cbz	r3, 4010 <hard_fault+0x70>
			reason = usage_fault(esf);
    3fea:	4620      	mov	r0, r4
    3fec:	f7ff ff80 	bl	3ef0 <usage_fault>
    3ff0:	e00e      	b.n	4010 <hard_fault+0x70>
			reason = esf->basic.r0;
    3ff2:	6820      	ldr	r0, [r4, #0]
    3ff4:	e00c      	b.n	4010 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    3ff6:	460a      	mov	r2, r1
    3ff8:	2101      	movs	r1, #1
    3ffa:	4620      	mov	r0, r4
    3ffc:	f7ff ff8a 	bl	3f14 <mem_manage_fault>
    4000:	e006      	b.n	4010 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    4002:	460a      	mov	r2, r1
    4004:	2101      	movs	r1, #1
    4006:	4620      	mov	r0, r4
    4008:	f7ff ff48 	bl	3e9c <bus_fault>
    400c:	e000      	b.n	4010 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    400e:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4010:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4012:	4618      	mov	r0, r3
	return reason;
    4014:	e7fc      	b.n	4010 <hard_fault+0x70>
    4016:	bf00      	nop
    4018:	e000ed00 	.word	0xe000ed00
    401c:	e000ed29 	.word	0xe000ed29
    4020:	e000ed2a 	.word	0xe000ed2a

00004024 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4024:	b5f0      	push	{r4, r5, r6, r7, lr}
    4026:	b08b      	sub	sp, #44	; 0x2c
    4028:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    402a:	4b25      	ldr	r3, [pc, #148]	; (40c0 <z_arm_fault+0x9c>)
    402c:	6859      	ldr	r1, [r3, #4]
    402e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    4032:	2300      	movs	r3, #0
    4034:	f383 8811 	msr	BASEPRI, r3
    4038:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    403c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4040:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4044:	d115      	bne.n	4072 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4046:	f002 030c 	and.w	r3, r2, #12
    404a:	2b08      	cmp	r3, #8
    404c:	d014      	beq.n	4078 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    404e:	f012 0f08 	tst.w	r2, #8
    4052:	d00b      	beq.n	406c <z_arm_fault+0x48>
	*nested_exc = false;
    4054:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4056:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    405a:	4620      	mov	r0, r4
    405c:	f00a f997 	bl	e38e <fault_handle>
    4060:	4606      	mov	r6, r0
	if (recoverable) {
    4062:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4066:	b153      	cbz	r3, 407e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4068:	b00b      	add	sp, #44	; 0x2c
    406a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    406c:	4604      	mov	r4, r0
			*nested_exc = true;
    406e:	2701      	movs	r7, #1
    4070:	e7f1      	b.n	4056 <z_arm_fault+0x32>
	*nested_exc = false;
    4072:	2700      	movs	r7, #0
		return NULL;
    4074:	463c      	mov	r4, r7
    4076:	e7ee      	b.n	4056 <z_arm_fault+0x32>
	*nested_exc = false;
    4078:	2700      	movs	r7, #0
		return NULL;
    407a:	463c      	mov	r4, r7
    407c:	e7eb      	b.n	4056 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    407e:	ad01      	add	r5, sp, #4
    4080:	6820      	ldr	r0, [r4, #0]
    4082:	6861      	ldr	r1, [r4, #4]
    4084:	68a2      	ldr	r2, [r4, #8]
    4086:	68e3      	ldr	r3, [r4, #12]
    4088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    408a:	6920      	ldr	r0, [r4, #16]
    408c:	6961      	ldr	r1, [r4, #20]
    408e:	69a2      	ldr	r2, [r4, #24]
    4090:	69e3      	ldr	r3, [r4, #28]
    4092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    4094:	b14f      	cbz	r7, 40aa <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4096:	9b08      	ldr	r3, [sp, #32]
    4098:	f3c3 0208 	ubfx	r2, r3, #0, #9
    409c:	b95a      	cbnz	r2, 40b6 <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    409e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    40a2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    40a6:	9308      	str	r3, [sp, #32]
    40a8:	e005      	b.n	40b6 <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    40aa:	9b08      	ldr	r3, [sp, #32]
    40ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    40b0:	f023 0301 	bic.w	r3, r3, #1
    40b4:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    40b6:	a901      	add	r1, sp, #4
    40b8:	4630      	mov	r0, r6
    40ba:	f00a f946 	bl	e34a <z_arm_fatal_error>
    40be:	e7d3      	b.n	4068 <z_arm_fault+0x44>
    40c0:	e000ed00 	.word	0xe000ed00

000040c4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    40c4:	4a02      	ldr	r2, [pc, #8]	; (40d0 <z_arm_fault_init+0xc>)
    40c6:	6953      	ldr	r3, [r2, #20]
    40c8:	f043 0310 	orr.w	r3, r3, #16
    40cc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    40ce:	4770      	bx	lr
    40d0:	e000ed00 	.word	0xe000ed00

000040d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    40d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    40d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    40dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    40de:	4672      	mov	r2, lr
	bl z_arm_fault
    40e0:	f7ff ffa0 	bl	4024 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    40e4:	bd01      	pop	{r0, pc}
    40e6:	bf00      	nop

000040e8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    40e8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    40ea:	e006      	b.n	40fa <z_arm_interrupt_init+0x12>
    40ec:	f002 010f 	and.w	r1, r2, #15
    40f0:	4b09      	ldr	r3, [pc, #36]	; (4118 <z_arm_interrupt_init+0x30>)
    40f2:	440b      	add	r3, r1
    40f4:	2120      	movs	r1, #32
    40f6:	7619      	strb	r1, [r3, #24]
    40f8:	3201      	adds	r2, #1
    40fa:	2a2f      	cmp	r2, #47	; 0x2f
    40fc:	dc0a      	bgt.n	4114 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    40fe:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4100:	2b00      	cmp	r3, #0
    4102:	dbf3      	blt.n	40ec <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4104:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4108:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    410c:	2120      	movs	r1, #32
    410e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4112:	e7f1      	b.n	40f8 <z_arm_interrupt_init+0x10>
	}
}
    4114:	4770      	bx	lr
    4116:	bf00      	nop
    4118:	e000ecfc 	.word	0xe000ecfc

0000411c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    411c:	2000      	movs	r0, #0
    msr CONTROL, r0
    411e:	f380 8814 	msr	CONTROL, r0
    isb
    4122:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4126:	f00c fd7b 	bl	10c20 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    412a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    412c:	490d      	ldr	r1, [pc, #52]	; (4164 <__start+0x48>)
    str r0, [r1]
    412e:	6008      	str	r0, [r1, #0]
    dsb
    4130:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4134:	480c      	ldr	r0, [pc, #48]	; (4168 <__start+0x4c>)
    msr msp, r0
    4136:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    413a:	f000 f829 	bl	4190 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    413e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4140:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4144:	4809      	ldr	r0, [pc, #36]	; (416c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4146:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    414a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    414c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4150:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4154:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4156:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4158:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    415c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4160:	f7ff fd94 	bl	3c8c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4164:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4168:	20025920 	.word	0x20025920
    ldr r0, =z_interrupt_stacks
    416c:	20025aa0 	.word	0x20025aa0

00004170 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4170:	4b06      	ldr	r3, [pc, #24]	; (418c <z_arm_clear_arm_mpu_config+0x1c>)
    4172:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4174:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4178:	2300      	movs	r3, #0
    417a:	4283      	cmp	r3, r0
    417c:	da05      	bge.n	418a <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    417e:	4a03      	ldr	r2, [pc, #12]	; (418c <z_arm_clear_arm_mpu_config+0x1c>)
    4180:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4182:	2100      	movs	r1, #0
    4184:	6111      	str	r1, [r2, #16]
    4186:	3301      	adds	r3, #1
    4188:	e7f7      	b.n	417a <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    418a:	4770      	bx	lr
    418c:	e000ed90 	.word	0xe000ed90

00004190 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4190:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4192:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4194:	2400      	movs	r4, #0
    4196:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    419a:	f7ff ffe9 	bl	4170 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    419e:	4623      	mov	r3, r4
    41a0:	e008      	b.n	41b4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    41a2:	f103 0120 	add.w	r1, r3, #32
    41a6:	4a0e      	ldr	r2, [pc, #56]	; (41e0 <z_arm_init_arch_hw_at_boot+0x50>)
    41a8:	f04f 30ff 	mov.w	r0, #4294967295
    41ac:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    41b0:	3301      	adds	r3, #1
    41b2:	b2db      	uxtb	r3, r3
    41b4:	2b07      	cmp	r3, #7
    41b6:	d9f4      	bls.n	41a2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    41b8:	2300      	movs	r3, #0
    41ba:	e008      	b.n	41ce <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    41bc:	f103 0160 	add.w	r1, r3, #96	; 0x60
    41c0:	4a07      	ldr	r2, [pc, #28]	; (41e0 <z_arm_init_arch_hw_at_boot+0x50>)
    41c2:	f04f 30ff 	mov.w	r0, #4294967295
    41c6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    41ca:	3301      	adds	r3, #1
    41cc:	b2db      	uxtb	r3, r3
    41ce:	2b07      	cmp	r3, #7
    41d0:	d9f4      	bls.n	41bc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    41d2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    41d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41d8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    41dc:	bd10      	pop	{r4, pc}
    41de:	bf00      	nop
    41e0:	e000e100 	.word	0xe000e100

000041e4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    41e4:	b508      	push	{r3, lr}
	if (_current == thread) {
    41e6:	4b08      	ldr	r3, [pc, #32]	; (4208 <z_impl_k_thread_abort+0x24>)
    41e8:	689b      	ldr	r3, [r3, #8]
    41ea:	4283      	cmp	r3, r0
    41ec:	d002      	beq.n	41f4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    41ee:	f007 fd5f 	bl	bcb0 <z_thread_abort>
}
    41f2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    41f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    41f8:	2b00      	cmp	r3, #0
    41fa:	d0f8      	beq.n	41ee <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    41fc:	4a03      	ldr	r2, [pc, #12]	; (420c <z_impl_k_thread_abort+0x28>)
    41fe:	6853      	ldr	r3, [r2, #4]
    4200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4204:	6053      	str	r3, [r2, #4]
    4206:	e7f2      	b.n	41ee <z_impl_k_thread_abort+0xa>
    4208:	2001d6d8 	.word	0x2001d6d8
    420c:	e000ed00 	.word	0xe000ed00

00004210 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4210:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4212:	4b03      	ldr	r3, [pc, #12]	; (4220 <z_arm_configure_static_mpu_regions+0x10>)
    4214:	4a03      	ldr	r2, [pc, #12]	; (4224 <z_arm_configure_static_mpu_regions+0x14>)
    4216:	2101      	movs	r1, #1
    4218:	4803      	ldr	r0, [pc, #12]	; (4228 <z_arm_configure_static_mpu_regions+0x18>)
    421a:	f00a f93e 	bl	e49a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    421e:	bd08      	pop	{r3, pc}
    4220:	20040000 	.word	0x20040000
    4224:	20000000 	.word	0x20000000
    4228:	000551b4 	.word	0x000551b4

0000422c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    422c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    422e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4232:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4234:	4804      	ldr	r0, [pc, #16]	; (4248 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4236:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4238:	2320      	movs	r3, #32
    423a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    423c:	4b03      	ldr	r3, [pc, #12]	; (424c <z_arm_configure_dynamic_mpu_regions+0x20>)
    423e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4240:	2101      	movs	r1, #1
    4242:	f00a f92e 	bl	e4a2 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4246:	bd08      	pop	{r3, pc}
    4248:	2001d0ac 	.word	0x2001d0ac
    424c:	150b0000 	.word	0x150b0000

00004250 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4250:	4a06      	ldr	r2, [pc, #24]	; (426c <region_init+0x1c>)
    4252:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4254:	680b      	ldr	r3, [r1, #0]
    4256:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    425a:	4303      	orrs	r3, r0
    425c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4260:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4262:	688b      	ldr	r3, [r1, #8]
    4264:	f043 0301 	orr.w	r3, r3, #1
    4268:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    426a:	4770      	bx	lr
    426c:	e000ed90 	.word	0xe000ed90

00004270 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4270:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4272:	4c03      	ldr	r4, [pc, #12]	; (4280 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4274:	2301      	movs	r3, #1
    4276:	7822      	ldrb	r2, [r4, #0]
    4278:	f00a f8e7 	bl	e44a <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    427c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    427e:	bd10      	pop	{r4, pc}
    4280:	2001d745 	.word	0x2001d745

00004284 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4284:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4286:	2300      	movs	r3, #0
    4288:	4a08      	ldr	r2, [pc, #32]	; (42ac <mpu_configure_dynamic_mpu_regions+0x28>)
    428a:	7812      	ldrb	r2, [r2, #0]
    428c:	f00a f8dd 	bl	e44a <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4290:	f110 0f16 	cmn.w	r0, #22
    4294:	d008      	beq.n	42a8 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4296:	4603      	mov	r3, r0
    4298:	2b07      	cmp	r3, #7
    429a:	dc05      	bgt.n	42a8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    429c:	4a04      	ldr	r2, [pc, #16]	; (42b0 <mpu_configure_dynamic_mpu_regions+0x2c>)
    429e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    42a0:	2100      	movs	r1, #0
    42a2:	6111      	str	r1, [r2, #16]
    42a4:	3301      	adds	r3, #1
    42a6:	e7f7      	b.n	4298 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    42a8:	bd08      	pop	{r3, pc}
    42aa:	bf00      	nop
    42ac:	2001d745 	.word	0x2001d745
    42b0:	e000ed90 	.word	0xe000ed90

000042b4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    42b4:	4b03      	ldr	r3, [pc, #12]	; (42c4 <arm_core_mpu_enable+0x10>)
    42b6:	2205      	movs	r2, #5
    42b8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    42ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42be:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    42c2:	4770      	bx	lr
    42c4:	e000ed90 	.word	0xe000ed90

000042c8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    42c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    42cc:	4b01      	ldr	r3, [pc, #4]	; (42d4 <arm_core_mpu_disable+0xc>)
    42ce:	2200      	movs	r2, #0
    42d0:	605a      	str	r2, [r3, #4]
}
    42d2:	4770      	bx	lr
    42d4:	e000ed90 	.word	0xe000ed90

000042d8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    42d8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    42da:	4b0e      	ldr	r3, [pc, #56]	; (4314 <z_arm_mpu_init+0x3c>)
    42dc:	681d      	ldr	r5, [r3, #0]
    42de:	2d08      	cmp	r5, #8
    42e0:	d815      	bhi.n	430e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    42e2:	f7ff fff1 	bl	42c8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    42e6:	2400      	movs	r4, #0
    42e8:	42a5      	cmp	r5, r4
    42ea:	d90a      	bls.n	4302 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    42ec:	4b09      	ldr	r3, [pc, #36]	; (4314 <z_arm_mpu_init+0x3c>)
    42ee:	6859      	ldr	r1, [r3, #4]
    42f0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    42f4:	0093      	lsls	r3, r2, #2
    42f6:	4419      	add	r1, r3
    42f8:	4620      	mov	r0, r4
    42fa:	f7ff ffa9 	bl	4250 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    42fe:	3401      	adds	r4, #1
    4300:	e7f2      	b.n	42e8 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4302:	4b05      	ldr	r3, [pc, #20]	; (4318 <z_arm_mpu_init+0x40>)
    4304:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4306:	f7ff ffd5 	bl	42b4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    430a:	2000      	movs	r0, #0
}
    430c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    430e:	f04f 30ff 	mov.w	r0, #4294967295
    4312:	e7fb      	b.n	430c <z_arm_mpu_init+0x34>
    4314:	000551d8 	.word	0x000551d8
    4318:	2001d745 	.word	0x2001d745

0000431c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    431c:	4b01      	ldr	r3, [pc, #4]	; (4324 <__stdout_hook_install+0x8>)
    431e:	6018      	str	r0, [r3, #0]
}
    4320:	4770      	bx	lr
    4322:	bf00      	nop
    4324:	20000030 	.word	0x20000030

00004328 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4328:	b570      	push	{r4, r5, r6, lr}
    432a:	4606      	mov	r6, r0
    432c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    432e:	2400      	movs	r4, #0
    4330:	e000      	b.n	4334 <z_impl_zephyr_read_stdin+0xc>
    4332:	3401      	adds	r4, #1
    4334:	42ac      	cmp	r4, r5
    4336:	da08      	bge.n	434a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    4338:	4b05      	ldr	r3, [pc, #20]	; (4350 <z_impl_zephyr_read_stdin+0x28>)
    433a:	681b      	ldr	r3, [r3, #0]
    433c:	4798      	blx	r3
    433e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4340:	280a      	cmp	r0, #10
    4342:	d001      	beq.n	4348 <z_impl_zephyr_read_stdin+0x20>
    4344:	280d      	cmp	r0, #13
    4346:	d1f4      	bne.n	4332 <z_impl_zephyr_read_stdin+0xa>
			i++;
    4348:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    434a:	4620      	mov	r0, r4
    434c:	bd70      	pop	{r4, r5, r6, pc}
    434e:	bf00      	nop
    4350:	2000002c 	.word	0x2000002c

00004354 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4356:	4605      	mov	r5, r0
    4358:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    435a:	2400      	movs	r4, #0
    435c:	e004      	b.n	4368 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    435e:	4b09      	ldr	r3, [pc, #36]	; (4384 <z_impl_zephyr_write_stdout+0x30>)
    4360:	681b      	ldr	r3, [r3, #0]
    4362:	7830      	ldrb	r0, [r6, #0]
    4364:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4366:	3401      	adds	r4, #1
    4368:	42bc      	cmp	r4, r7
    436a:	da08      	bge.n	437e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    436c:	192e      	adds	r6, r5, r4
    436e:	5d2b      	ldrb	r3, [r5, r4]
    4370:	2b0a      	cmp	r3, #10
    4372:	d1f4      	bne.n	435e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    4374:	4b03      	ldr	r3, [pc, #12]	; (4384 <z_impl_zephyr_write_stdout+0x30>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	200d      	movs	r0, #13
    437a:	4798      	blx	r3
    437c:	e7ef      	b.n	435e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    437e:	4638      	mov	r0, r7
    4380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4382:	bf00      	nop
    4384:	20000030 	.word	0x20000030

00004388 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4388:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    438a:	2205      	movs	r2, #5
    438c:	4902      	ldr	r1, [pc, #8]	; (4398 <_exit+0x10>)
    438e:	2001      	movs	r0, #1
    4390:	f00a f898 	bl	e4c4 <_write>
	while (1) {
    4394:	e7fe      	b.n	4394 <_exit+0xc>
    4396:	bf00      	nop
    4398:	000551c0 	.word	0x000551c0

0000439c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    439c:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    439e:	4b08      	ldr	r3, [pc, #32]	; (43c0 <_sbrk+0x24>)
    43a0:	6819      	ldr	r1, [r3, #0]
    43a2:	4b08      	ldr	r3, [pc, #32]	; (43c4 <_sbrk+0x28>)
    43a4:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    43a6:	440a      	add	r2, r1
    43a8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    43ac:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    43b0:	429a      	cmp	r2, r3
    43b2:	d202      	bcs.n	43ba <_sbrk+0x1e>
		heap_sz += count;
    43b4:	4b02      	ldr	r3, [pc, #8]	; (43c0 <_sbrk+0x24>)
    43b6:	601a      	str	r2, [r3, #0]
		ret = ptr;
    43b8:	4770      	bx	lr
	} else {
		ret = (void *)-1;
    43ba:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    43be:	4770      	bx	lr
    43c0:	2001d0b8 	.word	0x2001d0b8
    43c4:	200262c0 	.word	0x200262c0

000043c8 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    43c8:	b2c0      	uxtb	r0, r0
    43ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43ce:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    43d2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    43d6:	4905      	ldr	r1, [pc, #20]	; (43ec <sys_arch_reboot+0x24>)
    43d8:	68ca      	ldr	r2, [r1, #12]
    43da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    43de:	4b04      	ldr	r3, [pc, #16]	; (43f0 <sys_arch_reboot+0x28>)
    43e0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    43e2:	60cb      	str	r3, [r1, #12]
    43e4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    43e8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    43ea:	e7fd      	b.n	43e8 <sys_arch_reboot+0x20>
    43ec:	e000ed00 	.word	0xe000ed00
    43f0:	05fa0004 	.word	0x05fa0004

000043f4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    43f4:	b130      	cbz	r0, 4404 <arch_busy_wait+0x10>

	return 0;
}

void arch_busy_wait(uint32_t time_us)
{
    43f6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    43f8:	0180      	lsls	r0, r0, #6
    43fa:	4b03      	ldr	r3, [pc, #12]	; (4408 <arch_busy_wait+0x14>)
    43fc:	f043 0301 	orr.w	r3, r3, #1
    4400:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    4402:	bd08      	pop	{r3, pc}
    4404:	4770      	bx	lr
    4406:	bf00      	nop
    4408:	00010f80 	.word	0x00010f80

0000440c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    440c:	4800      	ldr	r0, [pc, #0]	; (4410 <get_hf_flags+0x4>)
    440e:	4770      	bx	lr
    4410:	2001d114 	.word	0x2001d114

00004414 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4414:	4b01      	ldr	r3, [pc, #4]	; (441c <get_subsys+0x8>)
    4416:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    4418:	1140      	asrs	r0, r0, #5
    441a:	4770      	bx	lr
    441c:	2001d0cc 	.word	0x2001d0cc

00004420 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4420:	b538      	push	{r3, r4, r5, lr}
    4422:	4605      	mov	r5, r0
    4424:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4426:	f7ff fff5 	bl	4414 <get_subsys>
    442a:	4601      	mov	r1, r0
    442c:	2240      	movs	r2, #64	; 0x40
    442e:	4803      	ldr	r0, [pc, #12]	; (443c <onoff_stop+0x1c>)
    4430:	f00a f920 	bl	e674 <stop>
    4434:	4601      	mov	r1, r0
	notify(mgr, res);
    4436:	4628      	mov	r0, r5
    4438:	47a0      	blx	r4
}
    443a:	bd38      	pop	{r3, r4, r5, pc}
    443c:	00010c9c 	.word	0x00010c9c

00004440 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4440:	b530      	push	{r4, r5, lr}
    4442:	b083      	sub	sp, #12
    4444:	4605      	mov	r5, r0
    4446:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4448:	f7ff ffe4 	bl	4414 <get_subsys>
    444c:	4601      	mov	r1, r0
    444e:	2340      	movs	r3, #64	; 0x40
    4450:	9300      	str	r3, [sp, #0]
    4452:	4623      	mov	r3, r4
    4454:	4a05      	ldr	r2, [pc, #20]	; (446c <onoff_start+0x2c>)
    4456:	4806      	ldr	r0, [pc, #24]	; (4470 <onoff_start+0x30>)
    4458:	f00a f926 	bl	e6a8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    445c:	1e01      	subs	r1, r0, #0
    445e:	db01      	blt.n	4464 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4460:	b003      	add	sp, #12
    4462:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4464:	4628      	mov	r0, r5
    4466:	47a0      	blx	r4
}
    4468:	e7fa      	b.n	4460 <onoff_start+0x20>
    446a:	bf00      	nop
    446c:	0000e6f1 	.word	0x0000e6f1
    4470:	00010c9c 	.word	0x00010c9c

00004474 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4474:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4476:	b110      	cbz	r0, 447e <clock_event_handler+0xa>
    4478:	2801      	cmp	r0, #1
    447a:	d00d      	beq.n	4498 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    447c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    447e:	2100      	movs	r1, #0
    4480:	4808      	ldr	r0, [pc, #32]	; (44a4 <clock_event_handler+0x30>)
    4482:	f00a f882 	bl	e58a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4486:	6883      	ldr	r3, [r0, #8]
    4488:	f013 0f07 	tst.w	r3, #7
    448c:	d1f6      	bne.n	447c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    448e:	2100      	movs	r1, #0
    4490:	4804      	ldr	r0, [pc, #16]	; (44a4 <clock_event_handler+0x30>)
    4492:	f00a f8dd 	bl	e650 <clkstarted_handle>
    4496:	e7f1      	b.n	447c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4498:	2101      	movs	r1, #1
    449a:	4802      	ldr	r0, [pc, #8]	; (44a4 <clock_event_handler+0x30>)
    449c:	f00a f8d8 	bl	e650 <clkstarted_handle>
}
    44a0:	e7ec      	b.n	447c <clock_event_handler+0x8>
    44a2:	bf00      	nop
    44a4:	00010c9c 	.word	0x00010c9c

000044a8 <generic_hfclk_start>:
{
    44a8:	b510      	push	{r4, lr}
	__asm__ volatile(
    44aa:	f04f 0320 	mov.w	r3, #32
    44ae:	f3ef 8411 	mrs	r4, BASEPRI
    44b2:	f383 8812 	msr	BASEPRI_MAX, r3
    44b6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    44ba:	4a13      	ldr	r2, [pc, #76]	; (4508 <generic_hfclk_start+0x60>)
    44bc:	6813      	ldr	r3, [r2, #0]
    44be:	f043 0302 	orr.w	r3, r3, #2
    44c2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    44c4:	f013 0f01 	tst.w	r3, #1
    44c8:	d108      	bne.n	44dc <generic_hfclk_start+0x34>
	bool already_started = false;
    44ca:	2300      	movs	r3, #0
	__asm__ volatile(
    44cc:	f384 8811 	msr	BASEPRI, r4
    44d0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    44d4:	b99b      	cbnz	r3, 44fe <generic_hfclk_start+0x56>
	hfclk_start();
    44d6:	f00a f913 	bl	e700 <hfclk_start>
}
    44da:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    44dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44e0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    44e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    44e8:	f012 0f01 	tst.w	r2, #1
    44ec:	d101      	bne.n	44f2 <generic_hfclk_start+0x4a>
	bool already_started = false;
    44ee:	2300      	movs	r3, #0
    44f0:	e7ec      	b.n	44cc <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    44f2:	f7ff ff8b 	bl	440c <get_hf_flags>
    44f6:	f00a f898 	bl	e62a <set_on_state>
			already_started = true;
    44fa:	2301      	movs	r3, #1
    44fc:	e7e6      	b.n	44cc <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    44fe:	2100      	movs	r1, #0
    4500:	4802      	ldr	r0, [pc, #8]	; (450c <generic_hfclk_start+0x64>)
    4502:	f00a f8a5 	bl	e650 <clkstarted_handle>
		return;
    4506:	e7e8      	b.n	44da <generic_hfclk_start+0x32>
    4508:	2001d124 	.word	0x2001d124
    450c:	00010c9c 	.word	0x00010c9c

00004510 <generic_hfclk_stop>:
{
    4510:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4512:	4b0a      	ldr	r3, [pc, #40]	; (453c <generic_hfclk_stop+0x2c>)
    4514:	f3bf 8f5b 	dmb	ish
    4518:	e853 2f00 	ldrex	r2, [r3]
    451c:	f022 0102 	bic.w	r1, r2, #2
    4520:	e843 1000 	strex	r0, r1, [r3]
    4524:	2800      	cmp	r0, #0
    4526:	d1f7      	bne.n	4518 <generic_hfclk_stop+0x8>
    4528:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    452c:	f012 0f01 	tst.w	r2, #1
    4530:	d000      	beq.n	4534 <generic_hfclk_stop+0x24>
}
    4532:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4534:	f00a f8ee 	bl	e714 <hfclk_stop>
    4538:	e7fb      	b.n	4532 <generic_hfclk_stop+0x22>
    453a:	bf00      	nop
    453c:	2001d124 	.word	0x2001d124

00004540 <api_blocking_start>:
{
    4540:	b500      	push	{lr}
    4542:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4544:	f8cd d000 	str.w	sp, [sp]
    4548:	f8cd d004 	str.w	sp, [sp, #4]
    454c:	2300      	movs	r3, #0
    454e:	9302      	str	r3, [sp, #8]
    4550:	2301      	movs	r3, #1
    4552:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4554:	466b      	mov	r3, sp
    4556:	4a07      	ldr	r2, [pc, #28]	; (4574 <api_blocking_start+0x34>)
    4558:	f00a f8c2 	bl	e6e0 <api_start>
	if (err < 0) {
    455c:	2800      	cmp	r0, #0
    455e:	db05      	blt.n	456c <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4560:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4564:	2300      	movs	r3, #0
    4566:	4668      	mov	r0, sp
    4568:	f006 ffb4 	bl	b4d4 <z_impl_k_sem_take>
}
    456c:	b005      	add	sp, #20
    456e:	f85d fb04 	ldr.w	pc, [sp], #4
    4572:	bf00      	nop
    4574:	0000e729 	.word	0x0000e729

00004578 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4578:	b570      	push	{r4, r5, r6, lr}
    457a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    457c:	2200      	movs	r2, #0
    457e:	2101      	movs	r1, #1
    4580:	4610      	mov	r0, r2
    4582:	f7ff fb69 	bl	3c58 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4586:	2000      	movs	r0, #0
    4588:	f7ff fb48 	bl	3c1c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    458c:	4811      	ldr	r0, [pc, #68]	; (45d4 <clk_init+0x5c>)
    458e:	f001 f969 	bl	5864 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4592:	4b11      	ldr	r3, [pc, #68]	; (45d8 <clk_init+0x60>)
    4594:	4298      	cmp	r0, r3
    4596:	d11a      	bne.n	45ce <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4598:	f00a fbf4 	bl	ed84 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    459c:	2400      	movs	r4, #0
    459e:	e003      	b.n	45a8 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    45a0:	2301      	movs	r3, #1
    45a2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    45a4:	441c      	add	r4, r3
    45a6:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    45a8:	2c01      	cmp	r4, #1
    45aa:	d80e      	bhi.n	45ca <clk_init+0x52>
						get_sub_data(dev, i);
    45ac:	4621      	mov	r1, r4
    45ae:	4630      	mov	r0, r6
    45b0:	f009 ffeb 	bl	e58a <get_sub_data>
    45b4:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    45b6:	4621      	mov	r1, r4
    45b8:	4630      	mov	r0, r6
    45ba:	f009 fff1 	bl	e5a0 <get_onoff_manager>
    45be:	4907      	ldr	r1, [pc, #28]	; (45dc <clk_init+0x64>)
    45c0:	f009 fb95 	bl	dcee <onoff_manager_init>
		if (err < 0) {
    45c4:	2800      	cmp	r0, #0
    45c6:	daeb      	bge.n	45a0 <clk_init+0x28>
    45c8:	e000      	b.n	45cc <clk_init+0x54>
	}

	return 0;
    45ca:	2000      	movs	r0, #0
}
    45cc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    45ce:	f06f 0004 	mvn.w	r0, #4
    45d2:	e7fb      	b.n	45cc <clk_init+0x54>
    45d4:	00004475 	.word	0x00004475
    45d8:	0bad0000 	.word	0x0bad0000
    45dc:	00055224 	.word	0x00055224

000045e0 <lfclk_spinwait>:
{
    45e0:	b570      	push	{r4, r5, r6, lr}
    45e2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    45e4:	2801      	cmp	r0, #1
    45e6:	d107      	bne.n	45f8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    45e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45ec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    45f0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    45f4:	2b01      	cmp	r3, #1
    45f6:	d058      	beq.n	46aa <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    45f8:	f00b fb3d 	bl	fc76 <k_is_in_isr>
    45fc:	b928      	cbnz	r0, 460a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    45fe:	4b2e      	ldr	r3, [pc, #184]	; (46b8 <lfclk_spinwait+0xd8>)
    4600:	781b      	ldrb	r3, [r3, #0]
    4602:	2b00      	cmp	r3, #0
    4604:	d041      	beq.n	468a <lfclk_spinwait+0xaa>
    4606:	2300      	movs	r3, #0
    4608:	e000      	b.n	460c <lfclk_spinwait+0x2c>
    460a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    460c:	461c      	mov	r4, r3
    460e:	2b00      	cmp	r3, #0
    4610:	d03d      	beq.n	468e <lfclk_spinwait+0xae>
	__asm__ volatile(
    4612:	f04f 0320 	mov.w	r3, #32
    4616:	f3ef 8611 	mrs	r6, BASEPRI
    461a:	f383 8812 	msr	BASEPRI_MAX, r3
    461e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4622:	b924      	cbnz	r4, 462e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    4624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4628:	2202      	movs	r2, #2
    462a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    462e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4632:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4636:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    463a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    463e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4642:	d12b      	bne.n	469c <lfclk_spinwait+0xbc>
    return false;
    4644:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4646:	b11a      	cbz	r2, 4650 <lfclk_spinwait+0x70>
    4648:	2b01      	cmp	r3, #1
    464a:	d029      	beq.n	46a0 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    464c:	2d01      	cmp	r5, #1
    464e:	d027      	beq.n	46a0 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4650:	b1fc      	cbz	r4, 4692 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4652:	4630      	mov	r0, r6
    4654:	f7ff fad8 	bl	3c08 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    465c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4660:	2b00      	cmp	r3, #0
    4662:	d1e4      	bne.n	462e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4664:	4b15      	ldr	r3, [pc, #84]	; (46bc <lfclk_spinwait+0xdc>)
    4666:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4668:	2b00      	cmp	r3, #0
    466a:	d0e0      	beq.n	462e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    466c:	4b13      	ldr	r3, [pc, #76]	; (46bc <lfclk_spinwait+0xdc>)
    466e:	2200      	movs	r2, #0
    4670:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4672:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4674:	2301      	movs	r3, #1
    4676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    467a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    467e:	4a10      	ldr	r2, [pc, #64]	; (46c0 <lfclk_spinwait+0xe0>)
    4680:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4684:	4a0f      	ldr	r2, [pc, #60]	; (46c4 <lfclk_spinwait+0xe4>)
    4686:	6013      	str	r3, [r2, #0]
}
    4688:	e7d1      	b.n	462e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    468a:	2301      	movs	r3, #1
    468c:	e7be      	b.n	460c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    468e:	2600      	movs	r6, #0
    4690:	e7c7      	b.n	4622 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    4692:	2021      	movs	r0, #33	; 0x21
    4694:	2100      	movs	r1, #0
    4696:	f007 fad9 	bl	bc4c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    469a:	e7dd      	b.n	4658 <lfclk_spinwait+0x78>
                return true;
    469c:	2201      	movs	r2, #1
    469e:	e7d2      	b.n	4646 <lfclk_spinwait+0x66>
	if (isr_mode) {
    46a0:	b124      	cbz	r4, 46ac <lfclk_spinwait+0xcc>
	__asm__ volatile(
    46a2:	f386 8811 	msr	BASEPRI, r6
    46a6:	f3bf 8f6f 	isb	sy
}
    46aa:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    46ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46b0:	2202      	movs	r2, #2
    46b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    46b6:	e7f8      	b.n	46aa <lfclk_spinwait+0xca>
    46b8:	2001d747 	.word	0x2001d747
    46bc:	40000104 	.word	0x40000104
    46c0:	e000e100 	.word	0xe000e100
    46c4:	40000008 	.word	0x40000008

000046c8 <z_nrf_clock_control_lf_on>:
{
    46c8:	b510      	push	{r4, lr}
    46ca:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    46cc:	4b10      	ldr	r3, [pc, #64]	; (4710 <z_nrf_clock_control_lf_on+0x48>)
    46ce:	2101      	movs	r1, #1
    46d0:	f3bf 8f5b 	dmb	ish
    46d4:	e853 2f00 	ldrex	r2, [r3]
    46d8:	e843 1000 	strex	r0, r1, [r3]
    46dc:	2800      	cmp	r0, #0
    46de:	d1f9      	bne.n	46d4 <z_nrf_clock_control_lf_on+0xc>
    46e0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    46e4:	b11a      	cbz	r2, 46ee <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    46e6:	1e63      	subs	r3, r4, #1
    46e8:	2b01      	cmp	r3, #1
    46ea:	d90c      	bls.n	4706 <z_nrf_clock_control_lf_on+0x3e>
}
    46ec:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    46ee:	4809      	ldr	r0, [pc, #36]	; (4714 <z_nrf_clock_control_lf_on+0x4c>)
    46f0:	f009 ff56 	bl	e5a0 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    46f4:	4908      	ldr	r1, [pc, #32]	; (4718 <z_nrf_clock_control_lf_on+0x50>)
    46f6:	2300      	movs	r3, #0
    46f8:	604b      	str	r3, [r1, #4]
    46fa:	60cb      	str	r3, [r1, #12]
    46fc:	2301      	movs	r3, #1
    46fe:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4700:	f009 fb11 	bl	dd26 <onoff_request>
    4704:	e7ef      	b.n	46e6 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    4706:	4620      	mov	r0, r4
    4708:	f7ff ff6a 	bl	45e0 <lfclk_spinwait>
		break;
    470c:	e7ee      	b.n	46ec <z_nrf_clock_control_lf_on+0x24>
    470e:	bf00      	nop
    4710:	2001d128 	.word	0x2001d128
    4714:	00010c9c 	.word	0x00010c9c
    4718:	2001d0bc 	.word	0x2001d0bc

0000471c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    471c:	b538      	push	{r3, r4, r5, lr}
    471e:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4720:	b2c5      	uxtb	r5, r0
    4722:	4b0b      	ldr	r3, [pc, #44]	; (4750 <console_out+0x34>)
    4724:	681b      	ldr	r3, [r3, #0]
    4726:	4628      	mov	r0, r5
    4728:	4798      	blx	r3

	if (handled_by_debug_server) {
    472a:	2801      	cmp	r0, #1
    472c:	d007      	beq.n	473e <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    472e:	2c0a      	cmp	r4, #10
    4730:	d007      	beq.n	4742 <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4732:	4b08      	ldr	r3, [pc, #32]	; (4754 <console_out+0x38>)
    4734:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4736:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4738:	685b      	ldr	r3, [r3, #4]
    473a:	4629      	mov	r1, r5
    473c:	4798      	blx	r3

	return c;
}
    473e:	4620      	mov	r0, r4
    4740:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    4742:	4b04      	ldr	r3, [pc, #16]	; (4754 <console_out+0x38>)
    4744:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4746:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4748:	685b      	ldr	r3, [r3, #4]
    474a:	210d      	movs	r1, #13
    474c:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    474e:	e7f0      	b.n	4732 <console_out+0x16>
    4750:	20000034 	.word	0x20000034
    4754:	2001d12c 	.word	0x2001d12c

00004758 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4758:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    475a:	4c04      	ldr	r4, [pc, #16]	; (476c <uart_console_hook_install+0x14>)
    475c:	4620      	mov	r0, r4
    475e:	f7ff fddd 	bl	431c <__stdout_hook_install>
	__printk_hook_install(console_out);
    4762:	4620      	mov	r0, r4
    4764:	f7fe f9e4 	bl	2b30 <__printk_hook_install>
}
    4768:	bd10      	pop	{r4, pc}
    476a:	bf00      	nop
    476c:	0000471d 	.word	0x0000471d

00004770 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4770:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4772:	4806      	ldr	r0, [pc, #24]	; (478c <uart_console_init+0x1c>)
    4774:	4b06      	ldr	r3, [pc, #24]	; (4790 <uart_console_init+0x20>)
    4776:	6018      	str	r0, [r3, #0]
    4778:	f00b f9f2 	bl	fb60 <z_device_ready>
    477c:	b118      	cbz	r0, 4786 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    477e:	f7ff ffeb 	bl	4758 <uart_console_hook_install>

	return 0;
    4782:	2000      	movs	r0, #0
}
    4784:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4786:	f06f 0012 	mvn.w	r0, #18
    478a:	e7fb      	b.n	4784 <uart_console_init+0x14>
    478c:	00010ccc 	.word	0x00010ccc
    4790:	2001d12c 	.word	0x2001d12c

00004794 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    4794:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    4796:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4798:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    479a:	4b37      	ldr	r3, [pc, #220]	; (4878 <gpio_nrfx_config+0xe4>)
    479c:	4013      	ands	r3, r2
    479e:	4c37      	ldr	r4, [pc, #220]	; (487c <gpio_nrfx_config+0xe8>)
    47a0:	42a3      	cmp	r3, r4
    47a2:	d027      	beq.n	47f4 <gpio_nrfx_config+0x60>
    47a4:	d812      	bhi.n	47cc <gpio_nrfx_config+0x38>
    47a6:	2b06      	cmp	r3, #6
    47a8:	d026      	beq.n	47f8 <gpio_nrfx_config+0x64>
    47aa:	d904      	bls.n	47b6 <gpio_nrfx_config+0x22>
    47ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    47b0:	d109      	bne.n	47c6 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    47b2:	2401      	movs	r4, #1
    47b4:	e016      	b.n	47e4 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    47b6:	b30b      	cbz	r3, 47fc <gpio_nrfx_config+0x68>
    47b8:	2b02      	cmp	r3, #2
    47ba:	d101      	bne.n	47c0 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    47bc:	2404      	movs	r4, #4
    47be:	e011      	b.n	47e4 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    47c0:	f06f 0015 	mvn.w	r0, #21
    47c4:	e046      	b.n	4854 <gpio_nrfx_config+0xc0>
    47c6:	f06f 0015 	mvn.w	r0, #21
    47ca:	e043      	b.n	4854 <gpio_nrfx_config+0xc0>
    47cc:	4c2c      	ldr	r4, [pc, #176]	; (4880 <gpio_nrfx_config+0xec>)
    47ce:	42a3      	cmp	r3, r4
    47d0:	d016      	beq.n	4800 <gpio_nrfx_config+0x6c>
    47d2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    47d6:	d101      	bne.n	47dc <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    47d8:	2403      	movs	r4, #3
    47da:	e003      	b.n	47e4 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    47dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    47e0:	d146      	bne.n	4870 <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
    47e2:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    47e4:	f012 0f10 	tst.w	r2, #16
    47e8:	d10c      	bne.n	4804 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    47ea:	f012 0f20 	tst.w	r2, #32
    47ee:	d033      	beq.n	4858 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    47f0:	2501      	movs	r5, #1
    47f2:	e008      	b.n	4806 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    47f4:	2407      	movs	r4, #7
    47f6:	e7f5      	b.n	47e4 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    47f8:	2406      	movs	r4, #6
    47fa:	e7f3      	b.n	47e4 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    47fc:	2400      	movs	r4, #0
    47fe:	e7f1      	b.n	47e4 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    4800:	2405      	movs	r4, #5
    4802:	e7ef      	b.n	47e4 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    4804:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    4806:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    480a:	f412 7f80 	tst.w	r2, #256	; 0x100
    480e:	bf0c      	ite	eq
    4810:	2601      	moveq	r6, #1
    4812:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    4814:	f412 7f00 	tst.w	r2, #512	; 0x200
    4818:	d006      	beq.n	4828 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    481a:	f412 6f00 	tst.w	r2, #2048	; 0x800
    481e:	d01d      	beq.n	485c <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4820:	2201      	movs	r2, #1
    4822:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    4824:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
    4828:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    482a:	7a12      	ldrb	r2, [r2, #8]
    482c:	f001 011f 	and.w	r1, r1, #31
    4830:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4834:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4836:	2a01      	cmp	r2, #1
    4838:	d018      	beq.n	486c <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
    483a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    483e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4842:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4846:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    484a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    484e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    4852:	2000      	movs	r0, #0
}
    4854:	bcf0      	pop	{r4, r5, r6, r7}
    4856:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    4858:	2500      	movs	r5, #0
    485a:	e7d4      	b.n	4806 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    485c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    4860:	d0e2      	beq.n	4828 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    4862:	2201      	movs	r2, #1
    4864:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    4866:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    486a:	e7dd      	b.n	4828 <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
    486c:	4a05      	ldr	r2, [pc, #20]	; (4884 <gpio_nrfx_config+0xf0>)
    486e:	e7e6      	b.n	483e <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4870:	f06f 0015 	mvn.w	r0, #21
    4874:	e7ee      	b.n	4854 <gpio_nrfx_config+0xc0>
    4876:	bf00      	nop
    4878:	00f00006 	.word	0x00f00006
    487c:	00100006 	.word	0x00100006
    4880:	00400002 	.word	0x00400002
    4884:	50000300 	.word	0x50000300

00004888 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    4888:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    488a:	6905      	ldr	r5, [r0, #16]
	return port->config;
    488c:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    488e:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4890:	696a      	ldr	r2, [r5, #20]
    4892:	69ab      	ldr	r3, [r5, #24]
    4894:	4313      	orrs	r3, r2
    4896:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    489a:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    489c:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    489e:	e011      	b.n	48c4 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    48a0:	f04f 0c02 	mov.w	ip, #2
    48a4:	e01d      	b.n	48e2 <cfg_level_pins+0x5a>
    48a6:	4f14      	ldr	r7, [pc, #80]	; (48f8 <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    48a8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    48ac:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    48b0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    48b4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    48b8:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    48bc:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    48c0:	3001      	adds	r0, #1
		bit <<= 1;
    48c2:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    48c4:	b1a9      	cbz	r1, 48f2 <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    48c6:	420b      	tst	r3, r1
    48c8:	d0fa      	beq.n	48c0 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    48ca:	7a34      	ldrb	r4, [r6, #8]
    48cc:	f000 021f 	and.w	r2, r0, #31
    48d0:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    48d4:	692c      	ldr	r4, [r5, #16]
    48d6:	40c4      	lsrs	r4, r0
    48d8:	f014 0f01 	tst.w	r4, #1
    48dc:	d1e0      	bne.n	48a0 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    48de:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    48e2:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    48e6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48e8:	2a01      	cmp	r2, #1
    48ea:	d0dc      	beq.n	48a6 <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    48ec:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    48f0:	e7da      	b.n	48a8 <cfg_level_pins+0x20>
	}
}
    48f2:	bcf0      	pop	{r4, r5, r6, r7}
    48f4:	4770      	bx	lr
    48f6:	bf00      	nop
    48f8:	50000300 	.word	0x50000300

000048fc <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    48fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    48fe:	468c      	mov	ip, r1
	return port->data;
    4900:	6903      	ldr	r3, [r0, #16]
	return port->config;
    4902:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    4904:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4906:	695a      	ldr	r2, [r3, #20]
    4908:	6998      	ldr	r0, [r3, #24]
    490a:	4302      	orrs	r2, r0
    490c:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    4910:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    4912:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    4916:	6918      	ldr	r0, [r3, #16]
    4918:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    491a:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    491e:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    4920:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4922:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    4924:	e015      	b.n	4952 <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
    4926:	f8df e074 	ldr.w	lr, [pc, #116]	; 499c <check_level_trigger_pins+0xa0>
    492a:	e025      	b.n	4978 <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
    492c:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    4930:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4932:	2a01      	cmp	r2, #1
    4934:	d02e      	beq.n	4994 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
    4936:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    493a:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    493e:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    4942:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4946:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    494a:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    494e:	3501      	adds	r5, #1
		bit <<= 1;
    4950:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    4952:	b314      	cbz	r4, 499a <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
    4954:	4223      	tst	r3, r4
    4956:	d0fa      	beq.n	494e <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4958:	7a0e      	ldrb	r6, [r1, #8]
    495a:	f005 021f 	and.w	r2, r5, #31
    495e:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    4962:	423b      	tst	r3, r7
    4964:	d1e2      	bne.n	492c <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
    4966:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    496a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    496e:	f1be 0f01 	cmp.w	lr, #1
    4972:	d0d8      	beq.n	4926 <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
    4974:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4978:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    497c:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4980:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    4984:	2e02      	cmp	r6, #2
    4986:	d1d1      	bne.n	492c <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
    4988:	f8dc 6000 	ldr.w	r6, [ip]
    498c:	431e      	orrs	r6, r3
    498e:	f8cc 6000 	str.w	r6, [ip]
    4992:	e7cb      	b.n	492c <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
    4994:	f8df e004 	ldr.w	lr, [pc, #4]	; 499c <check_level_trigger_pins+0xa0>
    4998:	e7cf      	b.n	493a <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    499a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    499c:	50000300 	.word	0x50000300

000049a0 <gpiote_pin_cleanup>:
{
    49a0:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    49a2:	4b14      	ldr	r3, [pc, #80]	; (49f4 <gpiote_pin_cleanup+0x54>)
    49a4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    49a8:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    49aa:	2300      	movs	r3, #0
    49ac:	e000      	b.n	49b0 <gpiote_pin_cleanup+0x10>
    49ae:	3301      	adds	r3, #1
    49b0:	2b07      	cmp	r3, #7
    49b2:	d81d      	bhi.n	49f0 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    49b4:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    49b8:	490e      	ldr	r1, [pc, #56]	; (49f4 <gpiote_pin_cleanup+0x54>)
    49ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    49be:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    49c2:	4290      	cmp	r0, r2
    49c4:	d1f3      	bne.n	49ae <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    49c6:	fa24 f203 	lsr.w	r2, r4, r3
    49ca:	f012 0f01 	tst.w	r2, #1
    49ce:	d0ee      	beq.n	49ae <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    49d0:	460a      	mov	r2, r1
    49d2:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    49d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    49da:	f021 0101 	bic.w	r1, r1, #1
    49de:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    49e2:	2101      	movs	r1, #1
    49e4:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    49e6:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    49ea:	b2d8      	uxtb	r0, r3
    49ec:	f001 f872 	bl	5ad4 <nrfx_gpiote_channel_free>
}
    49f0:	bd10      	pop	{r4, pc}
    49f2:	bf00      	nop
    49f4:	40006000 	.word	0x40006000

000049f8 <gpiote_channel_alloc>:
{
    49f8:	b570      	push	{r4, r5, r6, lr}
    49fa:	b082      	sub	sp, #8
    49fc:	4604      	mov	r4, r0
    49fe:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    4a00:	f10d 0007 	add.w	r0, sp, #7
    4a04:	f001 f882 	bl	5b0c <nrfx_gpiote_channel_alloc>
    4a08:	4b1c      	ldr	r3, [pc, #112]	; (4a7c <gpiote_channel_alloc+0x84>)
    4a0a:	4298      	cmp	r0, r3
    4a0c:	d132      	bne.n	4a74 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    4a0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a12:	f103 0240 	add.w	r2, r3, #64	; 0x40
    4a16:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4a18:	4e19      	ldr	r6, [pc, #100]	; (4a80 <gpiote_channel_alloc+0x88>)
    4a1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4a1e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    4a22:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    4a26:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4a2a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4a2e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    4a32:	0224      	lsls	r4, r4, #8
    4a34:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    4a38:	042d      	lsls	r5, r5, #16
    4a3a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4a3e:	432c      	orrs	r4, r5
    4a40:	430c      	orrs	r4, r1
    4a42:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    4a46:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    4a4a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a4e:	2000      	movs	r0, #0
    4a50:	6018      	str	r0, [r3, #0]
    4a52:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    4a54:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4a58:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    4a5c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    4a60:	f042 0201 	orr.w	r2, r2, #1
    4a64:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    4a68:	2301      	movs	r3, #1
    4a6a:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    4a6c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    4a70:	b002      	add	sp, #8
    4a72:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    4a74:	f06f 0012 	mvn.w	r0, #18
    4a78:	e7fa      	b.n	4a70 <gpiote_channel_alloc+0x78>
    4a7a:	bf00      	nop
    4a7c:	0bad0000 	.word	0x0bad0000
    4a80:	40006000 	.word	0x40006000

00004a84 <gpiote_pin_int_cfg>:
{
    4a84:	b570      	push	{r4, r5, r6, lr}
    4a86:	460d      	mov	r5, r1
	return port->data;
    4a88:	6906      	ldr	r6, [r0, #16]
	return port->config;
    4a8a:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4a8c:	7a1b      	ldrb	r3, [r3, #8]
    4a8e:	f001 041f 	and.w	r4, r1, #31
    4a92:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    4a96:	4620      	mov	r0, r4
    4a98:	f7ff ff82 	bl	49a0 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    4a9c:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    4aa0:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4aa2:	2b01      	cmp	r3, #1
    4aa4:	d020      	beq.n	4ae8 <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
    4aa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4aaa:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    4aae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    4ab2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4ab6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    4aba:	68f3      	ldr	r3, [r6, #12]
    4abc:	40eb      	lsrs	r3, r5
    4abe:	f013 0f01 	tst.w	r3, #1
    4ac2:	d02f      	beq.n	4b24 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
    4ac4:	6973      	ldr	r3, [r6, #20]
    4ac6:	40eb      	lsrs	r3, r5
    4ac8:	f013 0f01 	tst.w	r3, #1
    4acc:	d015      	beq.n	4afa <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
    4ace:	69b3      	ldr	r3, [r6, #24]
    4ad0:	40eb      	lsrs	r3, r5
    4ad2:	f013 0f01 	tst.w	r3, #1
    4ad6:	d109      	bne.n	4aec <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    4ad8:	6931      	ldr	r1, [r6, #16]
    4ada:	fa21 f505 	lsr.w	r5, r1, r5
    4ade:	f015 0f01 	tst.w	r5, #1
    4ae2:	d008      	beq.n	4af6 <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    4ae4:	2101      	movs	r1, #1
    4ae6:	e002      	b.n	4aee <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
    4ae8:	4a0f      	ldr	r2, [pc, #60]	; (4b28 <gpiote_pin_int_cfg+0xa4>)
    4aea:	e7de      	b.n	4aaa <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    4aec:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    4aee:	4620      	mov	r0, r4
    4af0:	f7ff ff82 	bl	49f8 <gpiote_channel_alloc>
    4af4:	e017      	b.n	4b26 <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    4af6:	2102      	movs	r1, #2
    4af8:	e7f9      	b.n	4aee <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4afa:	6931      	ldr	r1, [r6, #16]
    4afc:	fa21 f505 	lsr.w	r5, r1, r5
    4b00:	f015 0f01 	tst.w	r5, #1
    4b04:	d10c      	bne.n	4b20 <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    4b06:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4b08:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    4b0c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    4b10:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4b14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4b18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    4b1c:	2000      	movs	r0, #0
}
    4b1e:	e002      	b.n	4b26 <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    4b20:	2102      	movs	r1, #2
    4b22:	e7f1      	b.n	4b08 <gpiote_pin_int_cfg+0x84>
	int res = 0;
    4b24:	2000      	movs	r0, #0
}
    4b26:	bd70      	pop	{r4, r5, r6, pc}
    4b28:	50000300 	.word	0x50000300

00004b2c <gpio_nrfx_pin_interrupt_configure>:
{
    4b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    4b2e:	6904      	ldr	r4, [r0, #16]
	return port->config;
    4b30:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4b32:	7a2e      	ldrb	r6, [r5, #8]
    4b34:	f001 051f 	and.w	r5, r1, #31
    4b38:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    4b3c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4b40:	d025      	beq.n	4b8e <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4b42:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    4b46:	d035      	beq.n	4bb4 <gpio_nrfx_pin_interrupt_configure+0x88>
    4b48:	68e5      	ldr	r5, [r4, #12]
    4b4a:	2601      	movs	r6, #1
    4b4c:	408e      	lsls	r6, r1
    4b4e:	4335      	orrs	r5, r6
    4b50:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    4b52:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4b56:	d033      	beq.n	4bc0 <gpio_nrfx_pin_interrupt_configure+0x94>
    4b58:	6962      	ldr	r2, [r4, #20]
    4b5a:	2501      	movs	r5, #1
    4b5c:	408d      	lsls	r5, r1
    4b5e:	ea22 0205 	bic.w	r2, r2, r5
    4b62:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    4b64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4b68:	d02f      	beq.n	4bca <gpio_nrfx_pin_interrupt_configure+0x9e>
    4b6a:	69a2      	ldr	r2, [r4, #24]
    4b6c:	2501      	movs	r5, #1
    4b6e:	408d      	lsls	r5, r1
    4b70:	ea22 0205 	bic.w	r2, r2, r5
    4b74:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    4b76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    4b7a:	d02b      	beq.n	4bd4 <gpio_nrfx_pin_interrupt_configure+0xa8>
    4b7c:	6923      	ldr	r3, [r4, #16]
    4b7e:	2201      	movs	r2, #1
    4b80:	408a      	lsls	r2, r1
    4b82:	ea23 0302 	bic.w	r3, r3, r2
    4b86:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    4b88:	f7ff ff7c 	bl	4a84 <gpiote_pin_int_cfg>
}
    4b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    4b8e:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    4b92:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b94:	2d01      	cmp	r5, #1
    4b96:	d00b      	beq.n	4bb0 <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
    4b98:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4b9c:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
    4ba0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4ba4:	f015 0f01 	tst.w	r5, #1
    4ba8:	d0cb      	beq.n	4b42 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    4baa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4bae:	e7ed      	b.n	4b8c <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    4bb0:	4f0b      	ldr	r7, [pc, #44]	; (4be0 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    4bb2:	e7f3      	b.n	4b9c <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4bb4:	68e5      	ldr	r5, [r4, #12]
    4bb6:	2601      	movs	r6, #1
    4bb8:	408e      	lsls	r6, r1
    4bba:	ea25 0506 	bic.w	r5, r5, r6
    4bbe:	e7c7      	b.n	4b50 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    4bc0:	6962      	ldr	r2, [r4, #20]
    4bc2:	2501      	movs	r5, #1
    4bc4:	408d      	lsls	r5, r1
    4bc6:	432a      	orrs	r2, r5
    4bc8:	e7cb      	b.n	4b62 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    4bca:	69a2      	ldr	r2, [r4, #24]
    4bcc:	2501      	movs	r5, #1
    4bce:	408d      	lsls	r5, r1
    4bd0:	432a      	orrs	r2, r5
    4bd2:	e7cf      	b.n	4b74 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    4bd4:	6923      	ldr	r3, [r4, #16]
    4bd6:	2201      	movs	r2, #1
    4bd8:	408a      	lsls	r2, r1
    4bda:	4313      	orrs	r3, r2
    4bdc:	e7d3      	b.n	4b86 <gpio_nrfx_pin_interrupt_configure+0x5a>
    4bde:	bf00      	nop
    4be0:	50000300 	.word	0x50000300

00004be4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4be4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    4be6:	4b0b      	ldr	r3, [pc, #44]	; (4c14 <gpio_nrfx_init+0x30>)
    4be8:	781b      	ldrb	r3, [r3, #0]
    4bea:	b10b      	cbz	r3, 4bf0 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    4bec:	2000      	movs	r0, #0
    4bee:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    4bf0:	4b08      	ldr	r3, [pc, #32]	; (4c14 <gpio_nrfx_init+0x30>)
    4bf2:	2201      	movs	r2, #1
    4bf4:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4bf6:	2200      	movs	r2, #0
    4bf8:	2105      	movs	r1, #5
    4bfa:	2006      	movs	r0, #6
    4bfc:	f7ff f82c 	bl	3c58 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    4c00:	2006      	movs	r0, #6
    4c02:	f7ff f80b 	bl	3c1c <arch_irq_enable>
    4c06:	4b04      	ldr	r3, [pc, #16]	; (4c18 <gpio_nrfx_init+0x34>)
    4c08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4c0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4c10:	e7ec      	b.n	4bec <gpio_nrfx_init+0x8>
    4c12:	bf00      	nop
    4c14:	2001d746 	.word	0x2001d746
    4c18:	40006000 	.word	0x40006000

00004c1c <gpiote_event_handler>:
{
    4c1c:	b570      	push	{r4, r5, r6, lr}
    4c1e:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    4c20:	2300      	movs	r3, #0
    4c22:	9302      	str	r3, [sp, #8]
    4c24:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    4c26:	9300      	str	r3, [sp, #0]
    4c28:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c2a:	4b46      	ldr	r3, [pc, #280]	; (4d44 <gpiote_event_handler+0x128>)
    4c2c:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    4c2e:	b90c      	cbnz	r4, 4c34 <gpiote_event_handler+0x18>
{
    4c30:	2100      	movs	r1, #0
    4c32:	e011      	b.n	4c58 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    4c34:	4d44      	ldr	r5, [pc, #272]	; (4d48 <gpiote_event_handler+0x12c>)
    4c36:	4669      	mov	r1, sp
    4c38:	4628      	mov	r0, r5
    4c3a:	f7ff fe5f 	bl	48fc <check_level_trigger_pins>
		fired_triggers[0] =
    4c3e:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    4c40:	a901      	add	r1, sp, #4
    4c42:	f105 0018 	add.w	r0, r5, #24
    4c46:	f7ff fe59 	bl	48fc <check_level_trigger_pins>
		fired_triggers[1] =
    4c4a:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4c4c:	4b3d      	ldr	r3, [pc, #244]	; (4d44 <gpiote_event_handler+0x128>)
    4c4e:	2200      	movs	r2, #0
    4c50:	601a      	str	r2, [r3, #0]
    4c52:	681b      	ldr	r3, [r3, #0]
}
    4c54:	e7ec      	b.n	4c30 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4c56:	3101      	adds	r1, #1
    4c58:	2907      	cmp	r1, #7
    4c5a:	d82d      	bhi.n	4cb8 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    4c5c:	f101 0340 	add.w	r3, r1, #64	; 0x40
    4c60:	009b      	lsls	r3, r3, #2
    4c62:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    4c64:	2301      	movs	r3, #1
    4c66:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    4c68:	4838      	ldr	r0, [pc, #224]	; (4d4c <gpiote_event_handler+0x130>)
    4c6a:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    4c6e:	4203      	tst	r3, r0
    4c70:	d0f1      	beq.n	4c56 <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c72:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    4c76:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d0ea      	beq.n	4c56 <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4c80:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    4c84:	4831      	ldr	r0, [pc, #196]	; (4d4c <gpiote_event_handler+0x130>)
    4c86:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    4c8a:	f3c0 3340 	ubfx	r3, r0, #13, #1
    4c8e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4c92:	2501      	movs	r5, #1
    4c94:	fa05 f000 	lsl.w	r0, r5, r0
    4c98:	ad04      	add	r5, sp, #16
    4c9a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4c9e:	f853 5c08 	ldr.w	r5, [r3, #-8]
    4ca2:	4305      	orrs	r5, r0
    4ca4:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    4ca8:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    4cac:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4cb0:	2200      	movs	r2, #0
    4cb2:	601a      	str	r2, [r3, #0]
    4cb4:	681b      	ldr	r3, [r3, #0]
}
    4cb6:	e7ce      	b.n	4c56 <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    4cb8:	9e02      	ldr	r6, [sp, #8]
    4cba:	b92e      	cbnz	r6, 4cc8 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    4cbc:	9e03      	ldr	r6, [sp, #12]
    4cbe:	b9ee      	cbnz	r6, 4cfc <gpiote_event_handler+0xe0>
	if (port_event) {
    4cc0:	2c00      	cmp	r4, #0
    4cc2:	d135      	bne.n	4d30 <gpiote_event_handler+0x114>
}
    4cc4:	b004      	add	sp, #16
    4cc6:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    4cc8:	4b21      	ldr	r3, [pc, #132]	; (4d50 <gpiote_event_handler+0x134>)
    4cca:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4ccc:	b119      	cbz	r1, 4cd6 <gpiote_event_handler+0xba>
    4cce:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    4cd0:	b149      	cbz	r1, 4ce6 <gpiote_event_handler+0xca>
	return node->next;
    4cd2:	680d      	ldr	r5, [r1, #0]
    4cd4:	e007      	b.n	4ce6 <gpiote_event_handler+0xca>
    4cd6:	460d      	mov	r5, r1
    4cd8:	e005      	b.n	4ce6 <gpiote_event_handler+0xca>
    4cda:	b16d      	cbz	r5, 4cf8 <gpiote_event_handler+0xdc>
    4cdc:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    4cde:	b105      	cbz	r5, 4ce2 <gpiote_event_handler+0xc6>
	return node->next;
    4ce0:	682b      	ldr	r3, [r5, #0]
    4ce2:	4629      	mov	r1, r5
    4ce4:	461d      	mov	r5, r3
    4ce6:	2900      	cmp	r1, #0
    4ce8:	d0e8      	beq.n	4cbc <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    4cea:	688a      	ldr	r2, [r1, #8]
    4cec:	4032      	ands	r2, r6
    4cee:	d0f4      	beq.n	4cda <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4cf0:	684b      	ldr	r3, [r1, #4]
    4cf2:	4815      	ldr	r0, [pc, #84]	; (4d48 <gpiote_event_handler+0x12c>)
    4cf4:	4798      	blx	r3
    4cf6:	e7f0      	b.n	4cda <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4cf8:	462b      	mov	r3, r5
    4cfa:	e7f2      	b.n	4ce2 <gpiote_event_handler+0xc6>
	return list->head;
    4cfc:	4b15      	ldr	r3, [pc, #84]	; (4d54 <gpiote_event_handler+0x138>)
    4cfe:	6859      	ldr	r1, [r3, #4]
    4d00:	b119      	cbz	r1, 4d0a <gpiote_event_handler+0xee>
    4d02:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    4d04:	b149      	cbz	r1, 4d1a <gpiote_event_handler+0xfe>
	return node->next;
    4d06:	680d      	ldr	r5, [r1, #0]
    4d08:	e007      	b.n	4d1a <gpiote_event_handler+0xfe>
    4d0a:	460d      	mov	r5, r1
    4d0c:	e005      	b.n	4d1a <gpiote_event_handler+0xfe>
    4d0e:	b16d      	cbz	r5, 4d2c <gpiote_event_handler+0x110>
    4d10:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    4d12:	b105      	cbz	r5, 4d16 <gpiote_event_handler+0xfa>
	return node->next;
    4d14:	682b      	ldr	r3, [r5, #0]
    4d16:	4629      	mov	r1, r5
    4d18:	461d      	mov	r5, r3
    4d1a:	2900      	cmp	r1, #0
    4d1c:	d0d0      	beq.n	4cc0 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    4d1e:	688a      	ldr	r2, [r1, #8]
    4d20:	4032      	ands	r2, r6
    4d22:	d0f4      	beq.n	4d0e <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    4d24:	684b      	ldr	r3, [r1, #4]
    4d26:	480c      	ldr	r0, [pc, #48]	; (4d58 <gpiote_event_handler+0x13c>)
    4d28:	4798      	blx	r3
    4d2a:	e7f0      	b.n	4d0e <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d2c:	462b      	mov	r3, r5
    4d2e:	e7f2      	b.n	4d16 <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    4d30:	4c05      	ldr	r4, [pc, #20]	; (4d48 <gpiote_event_handler+0x12c>)
    4d32:	4620      	mov	r0, r4
    4d34:	f7ff fda8 	bl	4888 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    4d38:	f104 0018 	add.w	r0, r4, #24
    4d3c:	f7ff fda4 	bl	4888 <cfg_level_pins>
}
    4d40:	e7c0      	b.n	4cc4 <gpiote_event_handler+0xa8>
    4d42:	bf00      	nop
    4d44:	4000617c 	.word	0x4000617c
    4d48:	00010cfc 	.word	0x00010cfc
    4d4c:	40006000 	.word	0x40006000
    4d50:	2001d130 	.word	0x2001d130
    4d54:	2001d14c 	.word	0x2001d14c
    4d58:	00010d14 	.word	0x00010d14

00004d5c <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    4d5c:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    4d5e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    4d60:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    4d64:	d06f      	beq.n	4e46 <baudrate_set+0xea>
    4d66:	d83a      	bhi.n	4dde <baudrate_set+0x82>
    4d68:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4d6c:	d06e      	beq.n	4e4c <baudrate_set+0xf0>
    4d6e:	d90a      	bls.n	4d86 <baudrate_set+0x2a>
    4d70:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    4d74:	d075      	beq.n	4e62 <baudrate_set+0x106>
    4d76:	d924      	bls.n	4dc2 <baudrate_set+0x66>
    4d78:	f647 2312 	movw	r3, #31250	; 0x7a12
    4d7c:	4299      	cmp	r1, r3
    4d7e:	d12b      	bne.n	4dd8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4d80:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4d84:	e013      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4d86:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    4d8a:	d061      	beq.n	4e50 <baudrate_set+0xf4>
    4d8c:	d907      	bls.n	4d9e <baudrate_set+0x42>
    4d8e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    4d92:	d063      	beq.n	4e5c <baudrate_set+0x100>
    4d94:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    4d98:	d110      	bne.n	4dbc <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4d9a:	4b3c      	ldr	r3, [pc, #240]	; (4e8c <baudrate_set+0x130>)
    4d9c:	e007      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4d9e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    4da2:	d058      	beq.n	4e56 <baudrate_set+0xfa>
    4da4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    4da8:	d105      	bne.n	4db6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    4daa:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4dae:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    4db2:	2000      	movs	r0, #0
    4db4:	4770      	bx	lr
	switch (baudrate) {
    4db6:	f06f 0015 	mvn.w	r0, #21
    4dba:	4770      	bx	lr
    4dbc:	f06f 0015 	mvn.w	r0, #21
    4dc0:	4770      	bx	lr
    4dc2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    4dc6:	d04e      	beq.n	4e66 <baudrate_set+0x10a>
    4dc8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    4dcc:	d101      	bne.n	4dd2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4dce:	4b30      	ldr	r3, [pc, #192]	; (4e90 <baudrate_set+0x134>)
    4dd0:	e7ed      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4dd2:	f06f 0015 	mvn.w	r0, #21
    4dd6:	4770      	bx	lr
    4dd8:	f06f 0015 	mvn.w	r0, #21
    4ddc:	4770      	bx	lr
    4dde:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    4de2:	d042      	beq.n	4e6a <baudrate_set+0x10e>
    4de4:	d909      	bls.n	4dfa <baudrate_set+0x9e>
    4de6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    4dea:	d046      	beq.n	4e7a <baudrate_set+0x11e>
    4dec:	d91f      	bls.n	4e2e <baudrate_set+0xd2>
    4dee:	4b29      	ldr	r3, [pc, #164]	; (4e94 <baudrate_set+0x138>)
    4df0:	4299      	cmp	r1, r3
    4df2:	d148      	bne.n	4e86 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4df4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4df8:	e7d9      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4dfa:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    4dfe:	d037      	beq.n	4e70 <baudrate_set+0x114>
    4e00:	d905      	bls.n	4e0e <baudrate_set+0xb2>
    4e02:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    4e06:	d10f      	bne.n	4e28 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4e08:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4e0c:	e7cf      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4e0e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    4e12:	4299      	cmp	r1, r3
    4e14:	d02e      	beq.n	4e74 <baudrate_set+0x118>
    4e16:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    4e1a:	d102      	bne.n	4e22 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4e1c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4e20:	e7c5      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4e22:	f06f 0015 	mvn.w	r0, #21
    4e26:	4770      	bx	lr
    4e28:	f06f 0015 	mvn.w	r0, #21
    4e2c:	4770      	bx	lr
    4e2e:	4b1a      	ldr	r3, [pc, #104]	; (4e98 <baudrate_set+0x13c>)
    4e30:	4299      	cmp	r1, r3
    4e32:	d025      	beq.n	4e80 <baudrate_set+0x124>
    4e34:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4e38:	d102      	bne.n	4e40 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4e3a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4e3e:	e7b6      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4e40:	f06f 0015 	mvn.w	r0, #21
    4e44:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4e46:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4e4a:	e7b0      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4e4c:	4b13      	ldr	r3, [pc, #76]	; (4e9c <baudrate_set+0x140>)
    4e4e:	e7ae      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4e50:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4e54:	e7ab      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4e56:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4e5a:	e7a8      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4e5c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4e60:	e7a5      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4e62:	4b0f      	ldr	r3, [pc, #60]	; (4ea0 <baudrate_set+0x144>)
    4e64:	e7a3      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4e66:	4b0f      	ldr	r3, [pc, #60]	; (4ea4 <baudrate_set+0x148>)
    4e68:	e7a1      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4e6a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4e6e:	e79e      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4e70:	4b0d      	ldr	r3, [pc, #52]	; (4ea8 <baudrate_set+0x14c>)
    4e72:	e79c      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4e74:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4e78:	e799      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4e7a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4e7e:	e796      	b.n	4dae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4e80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4e84:	e793      	b.n	4dae <baudrate_set+0x52>
	switch (baudrate) {
    4e86:	f06f 0015 	mvn.w	r0, #21
}
    4e8a:	4770      	bx	lr
    4e8c:	0013b000 	.word	0x0013b000
    4e90:	004ea000 	.word	0x004ea000
    4e94:	000f4240 	.word	0x000f4240
    4e98:	0003d090 	.word	0x0003d090
    4e9c:	00275000 	.word	0x00275000
    4ea0:	0075c000 	.word	0x0075c000
    4ea4:	003af000 	.word	0x003af000
    4ea8:	013a9000 	.word	0x013a9000

00004eac <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4eb0:	4605      	mov	r5, r0
    4eb2:	460f      	mov	r7, r1
	return dev->data;
    4eb4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4eb8:	f00a fedd 	bl	fc76 <k_is_in_isr>
    4ebc:	b920      	cbnz	r0, 4ec8 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    4ebe:	4b16      	ldr	r3, [pc, #88]	; (4f18 <uarte_nrfx_poll_out+0x6c>)
    4ec0:	781b      	ldrb	r3, [r3, #0]
    4ec2:	b1ab      	cbz	r3, 4ef0 <uarte_nrfx_poll_out+0x44>
    4ec4:	2300      	movs	r3, #0
    4ec6:	e000      	b.n	4eca <uarte_nrfx_poll_out+0x1e>
    4ec8:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    4eca:	b19b      	cbz	r3, 4ef4 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    4ecc:	f04f 0320 	mov.w	r3, #32
    4ed0:	f3ef 8411 	mrs	r4, BASEPRI
    4ed4:	f383 8812 	msr	BASEPRI_MAX, r3
    4ed8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    4edc:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    4ede:	4628      	mov	r0, r5
    4ee0:	f009 fd59 	bl	e996 <is_tx_ready>
    4ee4:	b950      	cbnz	r0, 4efc <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    4ee6:	f384 8811 	msr	BASEPRI, r4
    4eea:	f3bf 8f6f 	isb	sy
}
    4eee:	e7ed      	b.n	4ecc <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4ef0:	2301      	movs	r3, #1
    4ef2:	e7ea      	b.n	4eca <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    4ef4:	4628      	mov	r0, r5
    4ef6:	f009 fe6f 	bl	ebd8 <wait_tx_ready>
    4efa:	4606      	mov	r6, r0
	}

	data->char_out = c;
    4efc:	4641      	mov	r1, r8
    4efe:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    4f02:	2201      	movs	r2, #1
    4f04:	4628      	mov	r0, r5
    4f06:	f009 fd60 	bl	e9ca <tx_start>
	__asm__ volatile(
    4f0a:	f386 8811 	msr	BASEPRI, r6
    4f0e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f16:	bf00      	nop
    4f18:	2001d747 	.word	0x2001d747

00004f1c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4f1c:	b538      	push	{r3, r4, r5, lr}
    4f1e:	4604      	mov	r4, r0
    4f20:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4f22:	f101 0016 	add.w	r0, r1, #22
    4f26:	f000 fe3f 	bl	5ba8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4f2a:	4b0c      	ldr	r3, [pc, #48]	; (4f5c <endtx_stoptx_ppi_init+0x40>)
    4f2c:	4298      	cmp	r0, r3
    4f2e:	d111      	bne.n	4f54 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4f30:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4f32:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4f36:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4f38:	4a09      	ldr	r2, [pc, #36]	; (4f60 <endtx_stoptx_ppi_init+0x44>)
    4f3a:	33a2      	adds	r3, #162	; 0xa2
    4f3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4f40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4f44:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4f46:	7da9      	ldrb	r1, [r5, #22]
    4f48:	2301      	movs	r3, #1
    4f4a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    4f4c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4f50:	2000      	movs	r0, #0
}
    4f52:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    4f54:	f06f 0004 	mvn.w	r0, #4
    4f58:	e7fb      	b.n	4f52 <endtx_stoptx_ppi_init+0x36>
    4f5a:	bf00      	nop
    4f5c:	0bad0000 	.word	0x0bad0000
    4f60:	4001f000 	.word	0x4001f000

00004f64 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    4f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    4f66:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    4f68:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    4f6a:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4f6c:	2300      	movs	r3, #0
    4f6e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    4f72:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    4f74:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    4f76:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    4f7a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f7c:	2b01      	cmp	r3, #1
    4f7e:	f000 8097 	beq.w	50b0 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
    4f82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4f86:	2301      	movs	r3, #1
    4f88:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4f8a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    4f8e:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    4f90:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4f94:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f96:	2b01      	cmp	r3, #1
    4f98:	f000 808c 	beq.w	50b4 <uarte_instance_init+0x150>
        case 0: return NRF_P0;
    4f9c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4fa0:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    4fa4:	2203      	movs	r2, #3
    4fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    4faa:	68e3      	ldr	r3, [r4, #12]
    4fac:	f1b3 3fff 	cmp.w	r3, #4294967295
    4fb0:	d00c      	beq.n	4fcc <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    4fb2:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
    4fb4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4fb8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fba:	2b01      	cmp	r3, #1
    4fbc:	d07c      	beq.n	50b8 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
    4fbe:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4fc2:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    4fc4:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    4fc8:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    4fcc:	68a2      	ldr	r2, [r4, #8]
    4fce:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    4fd0:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4fd4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    4fd8:	6923      	ldr	r3, [r4, #16]
    4fda:	f1b3 3fff 	cmp.w	r3, #4294967295
    4fde:	d00c      	beq.n	4ffa <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    4fe0:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
    4fe2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4fe6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fe8:	2b01      	cmp	r3, #1
    4fea:	d067      	beq.n	50bc <uarte_instance_init+0x158>
        case 0: return NRF_P0;
    4fec:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4ff0:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    4ff2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    4ff6:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    4ffa:	6963      	ldr	r3, [r4, #20]
    4ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
    5000:	d017      	beq.n	5032 <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
    5002:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5006:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5008:	2b01      	cmp	r3, #1
    500a:	d059      	beq.n	50c0 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
    500c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5010:	2301      	movs	r3, #1
    5012:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    5014:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    5018:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    501a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    501e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5020:	2b01      	cmp	r3, #1
    5022:	d04f      	beq.n	50c4 <uarte_instance_init+0x160>
        case 0: return NRF_P0;
    5024:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5028:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    502c:	2203      	movs	r2, #3
    502e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    5032:	6962      	ldr	r2, [r4, #20]
    5034:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    5036:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    503a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    503e:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5040:	3104      	adds	r1, #4
    5042:	f009 fc3b 	bl	e8bc <uarte_nrfx_configure>
	if (err) {
    5046:	4607      	mov	r7, r0
    5048:	bb80      	cbnz	r0, 50ac <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    504a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    504c:	f013 0f08 	tst.w	r3, #8
    5050:	d13a      	bne.n	50c8 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5052:	2308      	movs	r3, #8
    5054:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    5058:	68e3      	ldr	r3, [r4, #12]
    505a:	f1b3 3fff 	cmp.w	r3, #4294967295
    505e:	d00c      	beq.n	507a <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5060:	2300      	movs	r3, #0
    5062:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5066:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    506a:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    506e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5072:	2301      	movs	r3, #1
    5074:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5078:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    507a:	6863      	ldr	r3, [r4, #4]
    507c:	f013 0f08 	tst.w	r3, #8
    5080:	d103      	bne.n	508a <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
    5082:	f44f 7380 	mov.w	r3, #256	; 0x100
    5086:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    508a:	6863      	ldr	r3, [r4, #4]
    508c:	f013 0f10 	tst.w	r3, #16
    5090:	d003      	beq.n	509a <uarte_instance_init+0x136>
    5092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5096:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    509a:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    509c:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    50a0:	2300      	movs	r3, #0
    50a2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50a6:	2301      	movs	r3, #1
    50a8:	60ab      	str	r3, [r5, #8]
    50aa:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    50ac:	4638      	mov	r0, r7
    50ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    50b0:	4a09      	ldr	r2, [pc, #36]	; (50d8 <uarte_instance_init+0x174>)
    50b2:	e768      	b.n	4f86 <uarte_instance_init+0x22>
    50b4:	4908      	ldr	r1, [pc, #32]	; (50d8 <uarte_instance_init+0x174>)
    50b6:	e773      	b.n	4fa0 <uarte_instance_init+0x3c>
    50b8:	4f07      	ldr	r7, [pc, #28]	; (50d8 <uarte_instance_init+0x174>)
    50ba:	e782      	b.n	4fc2 <uarte_instance_init+0x5e>
    50bc:	4f06      	ldr	r7, [pc, #24]	; (50d8 <uarte_instance_init+0x174>)
    50be:	e797      	b.n	4ff0 <uarte_instance_init+0x8c>
    50c0:	4905      	ldr	r1, [pc, #20]	; (50d8 <uarte_instance_init+0x174>)
    50c2:	e7a5      	b.n	5010 <uarte_instance_init+0xac>
    50c4:	4904      	ldr	r1, [pc, #16]	; (50d8 <uarte_instance_init+0x174>)
    50c6:	e7af      	b.n	5028 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
    50c8:	4631      	mov	r1, r6
    50ca:	4628      	mov	r0, r5
    50cc:	f7ff ff26 	bl	4f1c <endtx_stoptx_ppi_init>
		if (err < 0) {
    50d0:	2800      	cmp	r0, #0
    50d2:	dabe      	bge.n	5052 <uarte_instance_init+0xee>
			return err;
    50d4:	4607      	mov	r7, r0
    50d6:	e7e9      	b.n	50ac <uarte_instance_init+0x148>
    50d8:	50000300 	.word	0x50000300

000050dc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    50dc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    50e0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    50e4:	4b01      	ldr	r3, [pc, #4]	; (50ec <set_comparator+0x10>)
    50e6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    50ea:	4770      	bx	lr
    50ec:	40011000 	.word	0x40011000

000050f0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    50f0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    50f4:	4b01      	ldr	r3, [pc, #4]	; (50fc <get_comparator+0xc>)
    50f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    50fa:	4770      	bx	lr
    50fc:	40011000 	.word	0x40011000

00005100 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5104:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5106:	4a02      	ldr	r2, [pc, #8]	; (5110 <event_enable+0x10>)
    5108:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    510c:	4770      	bx	lr
    510e:	bf00      	nop
    5110:	40011000 	.word	0x40011000

00005114 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5118:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    511a:	4a02      	ldr	r2, [pc, #8]	; (5124 <event_disable+0x10>)
    511c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    5120:	4770      	bx	lr
    5122:	bf00      	nop
    5124:	40011000 	.word	0x40011000

00005128 <counter>:
     return p_reg->COUNTER;
    5128:	4b01      	ldr	r3, [pc, #4]	; (5130 <counter+0x8>)
    512a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    512e:	4770      	bx	lr
    5130:	40011000 	.word	0x40011000

00005134 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    5134:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5136:	2301      	movs	r3, #1
    5138:	4083      	lsls	r3, r0
    513a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    513c:	4a10      	ldr	r2, [pc, #64]	; (5180 <compare_int_lock+0x4c>)
    513e:	f3bf 8f5b 	dmb	ish
    5142:	e852 1f00 	ldrex	r1, [r2]
    5146:	ea01 0c04 	and.w	ip, r1, r4
    514a:	e842 ce00 	strex	lr, ip, [r2]
    514e:	f1be 0f00 	cmp.w	lr, #0
    5152:	d1f6      	bne.n	5142 <compare_int_lock+0xe>
    5154:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    515c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5160:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5164:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5168:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    516c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5170:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5174:	420b      	tst	r3, r1
}
    5176:	bf14      	ite	ne
    5178:	2001      	movne	r0, #1
    517a:	2000      	moveq	r0, #0
    517c:	bd10      	pop	{r4, pc}
    517e:	bf00      	nop
    5180:	2001d1ac 	.word	0x2001d1ac

00005184 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5184:	b570      	push	{r4, r5, r6, lr}
    5186:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5188:	f009 fd81 	bl	ec8e <full_int_lock>
    518c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    518e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5192:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    5194:	4a17      	ldr	r2, [pc, #92]	; (51f4 <channel_processing_check_and_clear+0x70>)
    5196:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    519a:	4213      	tst	r3, r2
    519c:	d105      	bne.n	51aa <channel_processing_check_and_clear+0x26>
	bool result = false;
    519e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    51a0:	4628      	mov	r0, r5
    51a2:	f009 fd7d 	bl	eca0 <full_int_unlock>

	return result;
}
    51a6:	4630      	mov	r0, r6
    51a8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    51aa:	2301      	movs	r3, #1
    51ac:	40a3      	lsls	r3, r4
    51ae:	43db      	mvns	r3, r3
    51b0:	4a11      	ldr	r2, [pc, #68]	; (51f8 <channel_processing_check_and_clear+0x74>)
    51b2:	f3bf 8f5b 	dmb	ish
    51b6:	e852 1f00 	ldrex	r1, [r2]
    51ba:	ea01 0003 	and.w	r0, r1, r3
    51be:	e842 0600 	strex	r6, r0, [r2]
    51c2:	2e00      	cmp	r6, #0
    51c4:	d1f7      	bne.n	51b6 <channel_processing_check_and_clear+0x32>
    51c6:	f3bf 8f5b 	dmb	ish
    51ca:	b959      	cbnz	r1, 51e4 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    51cc:	f104 0350 	add.w	r3, r4, #80	; 0x50
    51d0:	009b      	lsls	r3, r3, #2
    51d2:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    51d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    51d8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    51dc:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    51de:	b113      	cbz	r3, 51e6 <channel_processing_check_and_clear+0x62>
    51e0:	2301      	movs	r3, #1
    51e2:	e000      	b.n	51e6 <channel_processing_check_and_clear+0x62>
    51e4:	2301      	movs	r3, #1
		if (result) {
    51e6:	461e      	mov	r6, r3
    51e8:	2b00      	cmp	r3, #0
    51ea:	d0d9      	beq.n	51a0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    51ec:	4620      	mov	r0, r4
    51ee:	f009 fd3f 	bl	ec70 <event_clear>
    51f2:	e7d5      	b.n	51a0 <channel_processing_check_and_clear+0x1c>
    51f4:	40011000 	.word	0x40011000
    51f8:	2001d1a8 	.word	0x2001d1a8

000051fc <compare_int_unlock>:
	if (key) {
    51fc:	b901      	cbnz	r1, 5200 <compare_int_unlock+0x4>
}
    51fe:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    5200:	2301      	movs	r3, #1
    5202:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5204:	4a11      	ldr	r2, [pc, #68]	; (524c <compare_int_unlock+0x50>)
    5206:	f3bf 8f5b 	dmb	ish
    520a:	e852 1f00 	ldrex	r1, [r2]
    520e:	4319      	orrs	r1, r3
    5210:	e842 1c00 	strex	ip, r1, [r2]
    5214:	f1bc 0f00 	cmp.w	ip, #0
    5218:	d1f7      	bne.n	520a <compare_int_unlock+0xe>
    521a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    521e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5222:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    5224:	4a0a      	ldr	r2, [pc, #40]	; (5250 <compare_int_unlock+0x54>)
    5226:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    522a:	f3bf 8f5b 	dmb	ish
    522e:	4b09      	ldr	r3, [pc, #36]	; (5254 <compare_int_unlock+0x58>)
    5230:	681b      	ldr	r3, [r3, #0]
    5232:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5236:	fa23 f000 	lsr.w	r0, r3, r0
    523a:	f010 0f01 	tst.w	r0, #1
    523e:	d0de      	beq.n	51fe <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5240:	4b05      	ldr	r3, [pc, #20]	; (5258 <compare_int_unlock+0x5c>)
    5242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5246:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    524a:	e7d8      	b.n	51fe <compare_int_unlock+0x2>
    524c:	2001d1ac 	.word	0x2001d1ac
    5250:	40011000 	.word	0x40011000
    5254:	2001d1a8 	.word	0x2001d1a8
    5258:	e000e100 	.word	0xe000e100

0000525c <sys_clock_timeout_handler>:
{
    525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    525e:	4607      	mov	r7, r0
    5260:	4614      	mov	r4, r2
    5262:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    5264:	4610      	mov	r0, r2
    5266:	4619      	mov	r1, r3
    5268:	f009 fd0e 	bl	ec88 <absolute_time_to_cc>
    526c:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    526e:	4b15      	ldr	r3, [pc, #84]	; (52c4 <sys_clock_timeout_handler+0x68>)
    5270:	681a      	ldr	r2, [r3, #0]
    5272:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    5274:	601c      	str	r4, [r3, #0]
    5276:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5278:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    527c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5280:	d308      	bcc.n	5294 <sys_clock_timeout_handler+0x38>
	return false;
    5282:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5284:	f006 fe48 	bl	bf18 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5288:	4638      	mov	r0, r7
    528a:	f7ff ff31 	bl	50f0 <get_comparator>
    528e:	42a8      	cmp	r0, r5
    5290:	d00c      	beq.n	52ac <sys_clock_timeout_handler+0x50>
}
    5292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5294:	4b0c      	ldr	r3, [pc, #48]	; (52c8 <sys_clock_timeout_handler+0x6c>)
    5296:	6819      	ldr	r1, [r3, #0]
    5298:	0a0b      	lsrs	r3, r1, #8
    529a:	060a      	lsls	r2, r1, #24
    529c:	1952      	adds	r2, r2, r5
    529e:	f143 0300 	adc.w	r3, r3, #0
    52a2:	490a      	ldr	r1, [pc, #40]	; (52cc <sys_clock_timeout_handler+0x70>)
    52a4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    52a8:	2401      	movs	r4, #1
    52aa:	e7eb      	b.n	5284 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    52ac:	b11c      	cbz	r4, 52b6 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    52ae:	4638      	mov	r0, r7
    52b0:	f7ff ff26 	bl	5100 <event_enable>
}
    52b4:	e7ed      	b.n	5292 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    52b6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    52ba:	4638      	mov	r0, r7
    52bc:	f7ff ff0e 	bl	50dc <set_comparator>
    52c0:	e7f5      	b.n	52ae <sys_clock_timeout_handler+0x52>
    52c2:	bf00      	nop
    52c4:	20000388 	.word	0x20000388
    52c8:	2001d1b0 	.word	0x2001d1b0
    52cc:	20000370 	.word	0x20000370

000052d0 <z_nrf_rtc_timer_read>:
{
    52d0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    52d2:	4b0d      	ldr	r3, [pc, #52]	; (5308 <z_nrf_rtc_timer_read+0x38>)
    52d4:	681b      	ldr	r3, [r3, #0]
    52d6:	0a1d      	lsrs	r5, r3, #8
    52d8:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    52da:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    52de:	f7ff ff23 	bl	5128 <counter>
    52e2:	4603      	mov	r3, r0
	val += cntr;
    52e4:	1820      	adds	r0, r4, r0
    52e6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    52ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    52ee:	d20a      	bcs.n	5306 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    52f0:	4b06      	ldr	r3, [pc, #24]	; (530c <z_nrf_rtc_timer_read+0x3c>)
    52f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    52f6:	4299      	cmp	r1, r3
    52f8:	bf08      	it	eq
    52fa:	4290      	cmpeq	r0, r2
    52fc:	d203      	bcs.n	5306 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    52fe:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5302:	f141 0100 	adc.w	r1, r1, #0
}
    5306:	bd38      	pop	{r3, r4, r5, pc}
    5308:	2001d1b0 	.word	0x2001d1b0
    530c:	20000370 	.word	0x20000370

00005310 <compare_set_nolocks>:
{
    5310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5314:	4606      	mov	r6, r0
    5316:	4614      	mov	r4, r2
    5318:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    531a:	4610      	mov	r0, r2
    531c:	4619      	mov	r1, r3
    531e:	f009 fcb3 	bl	ec88 <absolute_time_to_cc>
    5322:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5324:	f7ff ffd4 	bl	52d0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5328:	42a9      	cmp	r1, r5
    532a:	bf08      	it	eq
    532c:	42a0      	cmpeq	r0, r4
    532e:	d21e      	bcs.n	536e <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5330:	ebb4 0800 	subs.w	r8, r4, r0
    5334:	eb65 0901 	sbc.w	r9, r5, r1
    5338:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    533c:	2300      	movs	r3, #0
    533e:	454b      	cmp	r3, r9
    5340:	bf08      	it	eq
    5342:	4542      	cmpeq	r2, r8
    5344:	d32e      	bcc.n	53a4 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    5346:	4b19      	ldr	r3, [pc, #100]	; (53ac <compare_set_nolocks+0x9c>)
    5348:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    534c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5350:	42ab      	cmp	r3, r5
    5352:	bf08      	it	eq
    5354:	42a2      	cmpeq	r2, r4
    5356:	d018      	beq.n	538a <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    5358:	4639      	mov	r1, r7
    535a:	4630      	mov	r0, r6
    535c:	f009 fca5 	bl	ecaa <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    5360:	4639      	mov	r1, r7
    5362:	f009 fc81 	bl	ec68 <counter_sub>
    5366:	1824      	adds	r4, r4, r0
    5368:	f145 0500 	adc.w	r5, r5, #0
    536c:	e00d      	b.n	538a <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    536e:	2301      	movs	r3, #1
    5370:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5372:	4a0f      	ldr	r2, [pc, #60]	; (53b0 <compare_set_nolocks+0xa0>)
    5374:	f3bf 8f5b 	dmb	ish
    5378:	e852 1f00 	ldrex	r1, [r2]
    537c:	4319      	orrs	r1, r3
    537e:	e842 1000 	strex	r0, r1, [r2]
    5382:	2800      	cmp	r0, #0
    5384:	d1f8      	bne.n	5378 <compare_set_nolocks+0x68>
    5386:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    538a:	4b08      	ldr	r3, [pc, #32]	; (53ac <compare_set_nolocks+0x9c>)
    538c:	0132      	lsls	r2, r6, #4
    538e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    5392:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    5396:	9908      	ldr	r1, [sp, #32]
    5398:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    539a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    539c:	6073      	str	r3, [r6, #4]
	return ret;
    539e:	2000      	movs	r0, #0
}
    53a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    53a4:	f06f 0015 	mvn.w	r0, #21
    53a8:	e7fa      	b.n	53a0 <compare_set_nolocks+0x90>
    53aa:	bf00      	nop
    53ac:	20000378 	.word	0x20000378
    53b0:	2001d1a8 	.word	0x2001d1a8

000053b4 <process_channel>:

static void process_channel(int32_t chan)
{
    53b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53b8:	b082      	sub	sp, #8
    53ba:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    53bc:	f7ff fee2 	bl	5184 <channel_processing_check_and_clear>
    53c0:	b910      	cbnz	r0, 53c8 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    53c2:	b002      	add	sp, #8
    53c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    53c8:	f7ff ff82 	bl	52d0 <z_nrf_rtc_timer_read>
    53cc:	4606      	mov	r6, r0
    53ce:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    53d0:	f009 fc5d 	bl	ec8e <full_int_lock>
    53d4:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    53d6:	4b13      	ldr	r3, [pc, #76]	; (5424 <process_channel+0x70>)
    53d8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    53dc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    53e0:	454f      	cmp	r7, r9
    53e2:	bf08      	it	eq
    53e4:	4546      	cmpeq	r6, r8
    53e6:	d20b      	bcs.n	5400 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    53e8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    53ea:	4650      	mov	r0, sl
    53ec:	f009 fc58 	bl	eca0 <full_int_unlock>
		if (handler) {
    53f0:	2e00      	cmp	r6, #0
    53f2:	d0e6      	beq.n	53c2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    53f4:	9500      	str	r5, [sp, #0]
    53f6:	4642      	mov	r2, r8
    53f8:	464b      	mov	r3, r9
    53fa:	4620      	mov	r0, r4
    53fc:	47b0      	blx	r6
}
    53fe:	e7e0      	b.n	53c2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5400:	4a08      	ldr	r2, [pc, #32]	; (5424 <process_channel+0x70>)
    5402:	0123      	lsls	r3, r4, #4
    5404:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5408:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    540a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    540c:	2000      	movs	r0, #0
    540e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5410:	f04f 32ff 	mov.w	r2, #4294967295
    5414:	f04f 33ff 	mov.w	r3, #4294967295
    5418:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    541c:	4620      	mov	r0, r4
    541e:	f7ff fe79 	bl	5114 <event_disable>
    5422:	e7e2      	b.n	53ea <process_channel+0x36>
    5424:	20000378 	.word	0x20000378

00005428 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5428:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    542a:	4b0d      	ldr	r3, [pc, #52]	; (5460 <rtc_nrf_isr+0x38>)
    542c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5430:	f013 0f02 	tst.w	r3, #2
    5434:	d00a      	beq.n	544c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5436:	4b0b      	ldr	r3, [pc, #44]	; (5464 <rtc_nrf_isr+0x3c>)
    5438:	681b      	ldr	r3, [r3, #0]
    543a:	b13b      	cbz	r3, 544c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    543c:	4b09      	ldr	r3, [pc, #36]	; (5464 <rtc_nrf_isr+0x3c>)
    543e:	2200      	movs	r2, #0
    5440:	601a      	str	r2, [r3, #0]
    5442:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    5444:	4a08      	ldr	r2, [pc, #32]	; (5468 <rtc_nrf_isr+0x40>)
    5446:	6813      	ldr	r3, [r2, #0]
    5448:	3301      	adds	r3, #1
    544a:	6013      	str	r3, [r2, #0]
{
    544c:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    544e:	2c00      	cmp	r4, #0
    5450:	dd00      	ble.n	5454 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    5452:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5454:	4620      	mov	r0, r4
    5456:	f7ff ffad 	bl	53b4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    545a:	3401      	adds	r4, #1
    545c:	e7f7      	b.n	544e <rtc_nrf_isr+0x26>
    545e:	bf00      	nop
    5460:	40011000 	.word	0x40011000
    5464:	40011104 	.word	0x40011104
    5468:	2001d1b0 	.word	0x2001d1b0

0000546c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    546c:	b530      	push	{r4, r5, lr}
    546e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    5470:	2300      	movs	r3, #0
    5472:	4a1f      	ldr	r2, [pc, #124]	; (54f0 <sys_clock_driver_init+0x84>)
    5474:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5478:	2b00      	cmp	r3, #0
    547a:	dd27      	ble.n	54cc <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    547c:	4c1c      	ldr	r4, [pc, #112]	; (54f0 <sys_clock_driver_init+0x84>)
    547e:	2502      	movs	r5, #2
    5480:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5484:	4b1b      	ldr	r3, [pc, #108]	; (54f4 <sys_clock_driver_init+0x88>)
    5486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    548a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    548e:	2200      	movs	r2, #0
    5490:	2101      	movs	r1, #1
    5492:	2011      	movs	r0, #17
    5494:	f7fe fbe0 	bl	3c58 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5498:	2011      	movs	r0, #17
    549a:	f7fe fbbf 	bl	3c1c <arch_irq_enable>
    549e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    54a2:	2301      	movs	r3, #1
    54a4:	4a14      	ldr	r2, [pc, #80]	; (54f8 <sys_clock_driver_init+0x8c>)
    54a6:	6013      	str	r3, [r2, #0]
    54a8:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    54aa:	4a14      	ldr	r2, [pc, #80]	; (54fc <sys_clock_driver_init+0x90>)
    54ac:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    54ae:	2400      	movs	r4, #0
    54b0:	9401      	str	r4, [sp, #4]
    54b2:	4b13      	ldr	r3, [pc, #76]	; (5500 <sys_clock_driver_init+0x94>)
    54b4:	9300      	str	r3, [sp, #0]
    54b6:	4a13      	ldr	r2, [pc, #76]	; (5504 <sys_clock_driver_init+0x98>)
    54b8:	2300      	movs	r3, #0
    54ba:	4620      	mov	r0, r4
    54bc:	f009 fc30 	bl	ed20 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    54c0:	4628      	mov	r0, r5
    54c2:	f7ff f901 	bl	46c8 <z_nrf_clock_control_lf_on>

	return 0;
}
    54c6:	4620      	mov	r0, r4
    54c8:	b003      	add	sp, #12
    54ca:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    54cc:	4a0e      	ldr	r2, [pc, #56]	; (5508 <sys_clock_driver_init+0x9c>)
    54ce:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    54d2:	f04f 30ff 	mov.w	r0, #4294967295
    54d6:	f04f 31ff 	mov.w	r1, #4294967295
    54da:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    54de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    54e2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    54e4:	4902      	ldr	r1, [pc, #8]	; (54f0 <sys_clock_driver_init+0x84>)
    54e6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    54ea:	3301      	adds	r3, #1
    54ec:	e7c4      	b.n	5478 <sys_clock_driver_init+0xc>
    54ee:	bf00      	nop
    54f0:	40011000 	.word	0x40011000
    54f4:	e000e100 	.word	0xe000e100
    54f8:	40011008 	.word	0x40011008
    54fc:	2001d1ac 	.word	0x2001d1ac
    5500:	0000525d 	.word	0x0000525d
    5504:	007fffff 	.word	0x007fffff
    5508:	20000378 	.word	0x20000378

0000550c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    550c:	b510      	push	{r4, lr}
    550e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5510:	f1b0 3fff 	cmp.w	r0, #4294967295
    5514:	d007      	beq.n	5526 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5516:	1e44      	subs	r4, r0, #1
    5518:	2c00      	cmp	r4, #0
    551a:	dd07      	ble.n	552c <sys_clock_set_timeout+0x20>
    551c:	4b11      	ldr	r3, [pc, #68]	; (5564 <sys_clock_set_timeout+0x58>)
    551e:	429c      	cmp	r4, r3
    5520:	dd05      	ble.n	552e <sys_clock_set_timeout+0x22>
    5522:	4c11      	ldr	r4, [pc, #68]	; (5568 <sys_clock_set_timeout+0x5c>)
    5524:	e003      	b.n	552e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5526:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    552a:	e7f4      	b.n	5516 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    552c:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    552e:	f7ff fecf 	bl	52d0 <z_nrf_rtc_timer_read>
    5532:	4b0e      	ldr	r3, [pc, #56]	; (556c <sys_clock_set_timeout+0x60>)
    5534:	e9d3 2300 	ldrd	r2, r3, [r3]
    5538:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    553a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    553e:	d300      	bcc.n	5542 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5540:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5542:	4404      	add	r4, r0
    5544:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5546:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    554a:	d300      	bcc.n	554e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    554c:	4c06      	ldr	r4, [pc, #24]	; (5568 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    554e:	2000      	movs	r0, #0
    5550:	9001      	str	r0, [sp, #4]
    5552:	4907      	ldr	r1, [pc, #28]	; (5570 <sys_clock_set_timeout+0x64>)
    5554:	9100      	str	r1, [sp, #0]
    5556:	1912      	adds	r2, r2, r4
    5558:	f143 0300 	adc.w	r3, r3, #0
    555c:	f009 fbe0 	bl	ed20 <compare_set>
}
    5560:	b002      	add	sp, #8
    5562:	bd10      	pop	{r4, pc}
    5564:	007ffffe 	.word	0x007ffffe
    5568:	007fffff 	.word	0x007fffff
    556c:	20000388 	.word	0x20000388
    5570:	0000525d 	.word	0x0000525d

00005574 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    5574:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5576:	f7ff feab 	bl	52d0 <z_nrf_rtc_timer_read>
    557a:	4b02      	ldr	r3, [pc, #8]	; (5584 <sys_clock_elapsed+0x10>)
    557c:	681b      	ldr	r3, [r3, #0]
}
    557e:	1ac0      	subs	r0, r0, r3
    5580:	bd08      	pop	{r3, pc}
    5582:	bf00      	nop
    5584:	20000388 	.word	0x20000388

00005588 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5588:	4b03      	ldr	r3, [pc, #12]	; (5598 <nrf52_errata_36+0x10>)
    558a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    558c:	2b08      	cmp	r3, #8
    558e:	d001      	beq.n	5594 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5590:	2000      	movs	r0, #0
    5592:	4770      	bx	lr
                        return true;
    5594:	2001      	movs	r0, #1
    #endif
}
    5596:	4770      	bx	lr
    5598:	10000130 	.word	0x10000130

0000559c <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    559c:	4b03      	ldr	r3, [pc, #12]	; (55ac <nrf52_errata_66+0x10>)
    559e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    55a0:	2b08      	cmp	r3, #8
    55a2:	d001      	beq.n	55a8 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    55a4:	2000      	movs	r0, #0
    55a6:	4770      	bx	lr
                        return true;
    55a8:	2001      	movs	r0, #1
    #endif
}
    55aa:	4770      	bx	lr
    55ac:	10000130 	.word	0x10000130

000055b0 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    55b0:	4b08      	ldr	r3, [pc, #32]	; (55d4 <nrf52_errata_98+0x24>)
    55b2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    55b4:	3304      	adds	r3, #4
    55b6:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    55b8:	2a08      	cmp	r2, #8
    55ba:	d001      	beq.n	55c0 <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    55bc:	2000      	movs	r0, #0
    55be:	4770      	bx	lr
                switch(var2)
    55c0:	2b00      	cmp	r3, #0
    55c2:	d804      	bhi.n	55ce <nrf52_errata_98+0x1e>
    55c4:	e8df f003 	tbb	[pc, r3]
    55c8:	01          	.byte	0x01
    55c9:	00          	.byte	0x00
            if (var1 == 0x08)
    55ca:	2001      	movs	r0, #1
    55cc:	4770      	bx	lr
                        return false;
    55ce:	2000      	movs	r0, #0
    #endif
}
    55d0:	4770      	bx	lr
    55d2:	bf00      	nop
    55d4:	10000130 	.word	0x10000130

000055d8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    55d8:	4b08      	ldr	r3, [pc, #32]	; (55fc <nrf52_errata_103+0x24>)
    55da:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    55dc:	3304      	adds	r3, #4
    55de:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    55e0:	2a08      	cmp	r2, #8
    55e2:	d001      	beq.n	55e8 <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    55e4:	2000      	movs	r0, #0
    55e6:	4770      	bx	lr
                switch(var2)
    55e8:	2b00      	cmp	r3, #0
    55ea:	d804      	bhi.n	55f6 <nrf52_errata_103+0x1e>
    55ec:	e8df f003 	tbb	[pc, r3]
    55f0:	01          	.byte	0x01
    55f1:	00          	.byte	0x00
            if (var1 == 0x08)
    55f2:	2001      	movs	r0, #1
    55f4:	4770      	bx	lr
                        return false;
    55f6:	2000      	movs	r0, #0
    #endif
}
    55f8:	4770      	bx	lr
    55fa:	bf00      	nop
    55fc:	10000130 	.word	0x10000130

00005600 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5600:	4b08      	ldr	r3, [pc, #32]	; (5624 <nrf52_errata_115+0x24>)
    5602:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5604:	3304      	adds	r3, #4
    5606:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5608:	2a08      	cmp	r2, #8
    560a:	d001      	beq.n	5610 <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    560c:	2000      	movs	r0, #0
    560e:	4770      	bx	lr
                switch(var2)
    5610:	2b00      	cmp	r3, #0
    5612:	d804      	bhi.n	561e <nrf52_errata_115+0x1e>
    5614:	e8df f003 	tbb	[pc, r3]
    5618:	01          	.byte	0x01
    5619:	00          	.byte	0x00
            if (var1 == 0x08)
    561a:	2001      	movs	r0, #1
    561c:	4770      	bx	lr
                        return false;
    561e:	2000      	movs	r0, #0
    #endif
}
    5620:	4770      	bx	lr
    5622:	bf00      	nop
    5624:	10000130 	.word	0x10000130

00005628 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5628:	4b08      	ldr	r3, [pc, #32]	; (564c <nrf52_errata_120+0x24>)
    562a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    562c:	3304      	adds	r3, #4
    562e:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5630:	2a08      	cmp	r2, #8
    5632:	d001      	beq.n	5638 <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5634:	2000      	movs	r0, #0
    5636:	4770      	bx	lr
                switch(var2)
    5638:	2b00      	cmp	r3, #0
    563a:	d804      	bhi.n	5646 <nrf52_errata_120+0x1e>
    563c:	e8df f003 	tbb	[pc, r3]
    5640:	01          	.byte	0x01
    5641:	00          	.byte	0x00
            if (var1 == 0x08)
    5642:	2001      	movs	r0, #1
    5644:	4770      	bx	lr
                        return false;
    5646:	2000      	movs	r0, #0
    #endif
}
    5648:	4770      	bx	lr
    564a:	bf00      	nop
    564c:	10000130 	.word	0x10000130

00005650 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5650:	4b03      	ldr	r3, [pc, #12]	; (5660 <nrf52_errata_136+0x10>)
    5652:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5654:	2b08      	cmp	r3, #8
    5656:	d001      	beq.n	565c <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5658:	2000      	movs	r0, #0
    565a:	4770      	bx	lr
                        return true;
    565c:	2001      	movs	r0, #1
    #endif
}
    565e:	4770      	bx	lr
    5660:	10000130 	.word	0x10000130

00005664 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5664:	4b06      	ldr	r3, [pc, #24]	; (5680 <nrf52_errata_249+0x1c>)
    5666:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5668:	4a06      	ldr	r2, [pc, #24]	; (5684 <nrf52_errata_249+0x20>)
    566a:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    566c:	2b08      	cmp	r3, #8
    566e:	d001      	beq.n	5674 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5670:	2000      	movs	r0, #0
    5672:	4770      	bx	lr
                switch(var2)
    5674:	2a03      	cmp	r2, #3
    5676:	d801      	bhi.n	567c <nrf52_errata_249+0x18>
    5678:	2000      	movs	r0, #0
    567a:	4770      	bx	lr
                        return true;
    567c:	2001      	movs	r0, #1
    #endif
}
    567e:	4770      	bx	lr
    5680:	10000130 	.word	0x10000130
    5684:	10000134 	.word	0x10000134

00005688 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5688:	4b02      	ldr	r3, [pc, #8]	; (5694 <nvmc_wait+0xc>)
    568a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    568e:	2b00      	cmp	r3, #0
    5690:	d0fa      	beq.n	5688 <nvmc_wait>
}
    5692:	4770      	bx	lr
    5694:	4001e000 	.word	0x4001e000

00005698 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    5698:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    569a:	4b03      	ldr	r3, [pc, #12]	; (56a8 <nvmc_config+0x10>)
    569c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    56a0:	f7ff fff2 	bl	5688 <nvmc_wait>
}
    56a4:	bd08      	pop	{r3, pc}
    56a6:	bf00      	nop
    56a8:	4001e000 	.word	0x4001e000

000056ac <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    56ac:	4b01      	ldr	r3, [pc, #4]	; (56b4 <SystemCoreClockUpdate+0x8>)
    56ae:	4a02      	ldr	r2, [pc, #8]	; (56b8 <SystemCoreClockUpdate+0xc>)
    56b0:	601a      	str	r2, [r3, #0]
}
    56b2:	4770      	bx	lr
    56b4:	20000090 	.word	0x20000090
    56b8:	03d09000 	.word	0x03d09000

000056bc <SystemInit>:

void SystemInit(void)
{
    56bc:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    56be:	f7ff ff63 	bl	5588 <nrf52_errata_36>
    56c2:	b140      	cbz	r0, 56d6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    56c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56c8:	2200      	movs	r2, #0
    56ca:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    56ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    56d2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    56d6:	f7ff ff61 	bl	559c <nrf52_errata_66>
    56da:	2800      	cmp	r0, #0
    56dc:	d046      	beq.n	576c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    56de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    56e2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    56e6:	4b56      	ldr	r3, [pc, #344]	; (5840 <SystemInit+0x184>)
    56e8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    56ec:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    56f0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    56f4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    56f8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    56fc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5700:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5704:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5708:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    570c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5710:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5714:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5718:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    571c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5720:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5724:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5728:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    572c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5730:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5734:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5738:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    573c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5740:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5744:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5748:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    574c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5750:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5754:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5758:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    575c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5760:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5764:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5768:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    576c:	f7ff ff20 	bl	55b0 <nrf52_errata_98>
    5770:	b110      	cbz	r0, 5778 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5772:	4b34      	ldr	r3, [pc, #208]	; (5844 <SystemInit+0x188>)
    5774:	4a34      	ldr	r2, [pc, #208]	; (5848 <SystemInit+0x18c>)
    5776:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5778:	f7ff ff2e 	bl	55d8 <nrf52_errata_103>
    577c:	b118      	cbz	r0, 5786 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    577e:	4b33      	ldr	r3, [pc, #204]	; (584c <SystemInit+0x190>)
    5780:	22fb      	movs	r2, #251	; 0xfb
    5782:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5786:	f7ff ff3b 	bl	5600 <nrf52_errata_115>
    578a:	b148      	cbz	r0, 57a0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    578c:	4930      	ldr	r1, [pc, #192]	; (5850 <SystemInit+0x194>)
    578e:	680b      	ldr	r3, [r1, #0]
    5790:	f023 030f 	bic.w	r3, r3, #15
    5794:	4a2f      	ldr	r2, [pc, #188]	; (5854 <SystemInit+0x198>)
    5796:	6812      	ldr	r2, [r2, #0]
    5798:	f002 020f 	and.w	r2, r2, #15
    579c:	4313      	orrs	r3, r2
    579e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    57a0:	f7ff ff42 	bl	5628 <nrf52_errata_120>
    57a4:	b118      	cbz	r0, 57ae <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    57a6:	4b2c      	ldr	r3, [pc, #176]	; (5858 <SystemInit+0x19c>)
    57a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    57ac:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    57ae:	f7ff ff4f 	bl	5650 <nrf52_errata_136>
    57b2:	b160      	cbz	r0, 57ce <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    57b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    57bc:	f013 0f01 	tst.w	r3, #1
    57c0:	d005      	beq.n	57ce <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    57c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57c6:	f06f 0201 	mvn.w	r2, #1
    57ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    57ce:	f7ff ff49 	bl	5664 <nrf52_errata_249>
    57d2:	b138      	cbz	r0, 57e4 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    57d4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    57d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    57dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57e0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    57e4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    57e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    57ec:	2b00      	cmp	r3, #0
    57ee:	db08      	blt.n	5802 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    57f0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    57f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    57f8:	2b00      	cmp	r3, #0
    57fa:	db02      	blt.n	5802 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    57fc:	f7ff ff56 	bl	56ac <SystemCoreClockUpdate>
}
    5800:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    5802:	2001      	movs	r0, #1
    5804:	f7ff ff48 	bl	5698 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5808:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    580c:	2512      	movs	r5, #18
    580e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    5812:	f7ff ff39 	bl	5688 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5816:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    581a:	f7ff ff35 	bl	5688 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    581e:	2000      	movs	r0, #0
    5820:	f7ff ff3a 	bl	5698 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    5824:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5828:	490c      	ldr	r1, [pc, #48]	; (585c <SystemInit+0x1a0>)
    582a:	68ca      	ldr	r2, [r1, #12]
    582c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5830:	4b0b      	ldr	r3, [pc, #44]	; (5860 <SystemInit+0x1a4>)
    5832:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5834:	60cb      	str	r3, [r1, #12]
    5836:	f3bf 8f4f 	dsb	sy
    __NOP();
    583a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    583c:	e7fd      	b.n	583a <SystemInit+0x17e>
    583e:	bf00      	nop
    5840:	4000c000 	.word	0x4000c000
    5844:	4000568c 	.word	0x4000568c
    5848:	00038148 	.word	0x00038148
    584c:	4000f000 	.word	0x4000f000
    5850:	40000ee4 	.word	0x40000ee4
    5854:	10000258 	.word	0x10000258
    5858:	40029640 	.word	0x40029640
    585c:	e000ed00 	.word	0xe000ed00
    5860:	05fa0004 	.word	0x05fa0004

00005864 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5864:	4b06      	ldr	r3, [pc, #24]	; (5880 <nrfx_clock_init+0x1c>)
    5866:	791b      	ldrb	r3, [r3, #4]
    5868:	b93b      	cbnz	r3, 587a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    586a:	4b05      	ldr	r3, [pc, #20]	; (5880 <nrfx_clock_init+0x1c>)
    586c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    586e:	2201      	movs	r2, #1
    5870:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    5872:	2200      	movs	r2, #0
    5874:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5876:	4803      	ldr	r0, [pc, #12]	; (5884 <nrfx_clock_init+0x20>)
    5878:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    587a:	4803      	ldr	r0, [pc, #12]	; (5888 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    587c:	4770      	bx	lr
    587e:	bf00      	nop
    5880:	2001d1b4 	.word	0x2001d1b4
    5884:	0bad0000 	.word	0x0bad0000
    5888:	0bad000c 	.word	0x0bad000c

0000588c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    588c:	b110      	cbz	r0, 5894 <nrfx_clock_start+0x8>
    588e:	2801      	cmp	r0, #1
    5890:	d025      	beq.n	58de <nrfx_clock_start+0x52>
    5892:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5898:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    589c:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    58a0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    58a4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    58a8:	d111      	bne.n	58ce <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    58aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58ae:	2200      	movs	r2, #0
    58b0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58b4:	4b0f      	ldr	r3, [pc, #60]	; (58f4 <nrfx_clock_start+0x68>)
    58b6:	2200      	movs	r2, #0
    58b8:	601a      	str	r2, [r3, #0]
    58ba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    58bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58c0:	2202      	movs	r2, #2
    58c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58c6:	3308      	adds	r3, #8
    58c8:	2201      	movs	r2, #1
    58ca:	601a      	str	r2, [r3, #0]
}
    58cc:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    58ce:	2b01      	cmp	r3, #1
    58d0:	d1eb      	bne.n	58aa <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    58d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58d6:	2201      	movs	r2, #1
    58d8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    58dc:	e7ea      	b.n	58b4 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58de:	4b06      	ldr	r3, [pc, #24]	; (58f8 <nrfx_clock_start+0x6c>)
    58e0:	2200      	movs	r2, #0
    58e2:	601a      	str	r2, [r3, #0]
    58e4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    58e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58ea:	2201      	movs	r2, #1
    58ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58f0:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    58f2:	4770      	bx	lr
    58f4:	40000104 	.word	0x40000104
    58f8:	40000100 	.word	0x40000100

000058fc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    58fc:	b530      	push	{r4, r5, lr}
    58fe:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5900:	4604      	mov	r4, r0
    5902:	b118      	cbz	r0, 590c <nrfx_clock_stop+0x10>
    5904:	2801      	cmp	r0, #1
    5906:	d013      	beq.n	5930 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5908:	b003      	add	sp, #12
    590a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    590c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5910:	2202      	movs	r2, #2
    5912:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5916:	f503 7382 	add.w	r3, r3, #260	; 0x104
    591a:	2200      	movs	r2, #0
    591c:	601a      	str	r2, [r3, #0]
    591e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5920:	4b39      	ldr	r3, [pc, #228]	; (5a08 <nrfx_clock_stop+0x10c>)
    5922:	2201      	movs	r2, #1
    5924:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5926:	2c01      	cmp	r4, #1
    5928:	d00f      	beq.n	594a <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    592a:	f242 7510 	movw	r5, #10000	; 0x2710
    592e:	e052      	b.n	59d6 <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    5930:	2301      	movs	r3, #1
    5932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5936:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    593a:	f502 7280 	add.w	r2, r2, #256	; 0x100
    593e:	2100      	movs	r1, #0
    5940:	6011      	str	r1, [r2, #0]
    5942:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5944:	4a31      	ldr	r2, [pc, #196]	; (5a0c <nrfx_clock_stop+0x110>)
    5946:	6013      	str	r3, [r2, #0]
}
    5948:	e7ed      	b.n	5926 <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    594a:	2301      	movs	r3, #1
    594c:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5950:	f242 7510 	movw	r5, #10000	; 0x2710
    5954:	e018      	b.n	5988 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    595a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    595e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5962:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5966:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    596a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    596e:	d120      	bne.n	59b2 <nrfx_clock_stop+0xb6>
    return false;
    5970:	2300      	movs	r3, #0
    5972:	2b00      	cmp	r3, #0
    5974:	d042      	beq.n	59fc <nrfx_clock_stop+0x100>
    5976:	f89d 3007 	ldrb.w	r3, [sp, #7]
    597a:	2b01      	cmp	r3, #1
    597c:	d13e      	bne.n	59fc <nrfx_clock_stop+0x100>
    597e:	2001      	movs	r0, #1
    5980:	f009 f9fc 	bl	ed7c <nrfx_busy_wait>
    5984:	3d01      	subs	r5, #1
    5986:	d039      	beq.n	59fc <nrfx_clock_stop+0x100>
    switch (domain)
    5988:	2c00      	cmp	r4, #0
    598a:	d0e4      	beq.n	5956 <nrfx_clock_stop+0x5a>
    598c:	2c01      	cmp	r4, #1
    598e:	d001      	beq.n	5994 <nrfx_clock_stop+0x98>
    5990:	2300      	movs	r3, #0
    5992:	e7ee      	b.n	5972 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5998:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    599c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    59a0:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    59a4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    59a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    59ac:	d103      	bne.n	59b6 <nrfx_clock_stop+0xba>
    return false;
    59ae:	2300      	movs	r3, #0
    59b0:	e7df      	b.n	5972 <nrfx_clock_stop+0x76>
                return true;
    59b2:	2301      	movs	r3, #1
    59b4:	e7dd      	b.n	5972 <nrfx_clock_stop+0x76>
                return true;
    59b6:	2301      	movs	r3, #1
    59b8:	e7db      	b.n	5972 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    59ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59be:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    59c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    59c6:	d115      	bne.n	59f4 <nrfx_clock_stop+0xf8>
    return false;
    59c8:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    59ca:	b1bb      	cbz	r3, 59fc <nrfx_clock_stop+0x100>
    59cc:	2001      	movs	r0, #1
    59ce:	f009 f9d5 	bl	ed7c <nrfx_busy_wait>
    59d2:	3d01      	subs	r5, #1
    59d4:	d012      	beq.n	59fc <nrfx_clock_stop+0x100>
    switch (domain)
    59d6:	2c00      	cmp	r4, #0
    59d8:	d0ef      	beq.n	59ba <nrfx_clock_stop+0xbe>
    59da:	2c01      	cmp	r4, #1
    59dc:	d001      	beq.n	59e2 <nrfx_clock_stop+0xe6>
    59de:	2300      	movs	r3, #0
    59e0:	e7f3      	b.n	59ca <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    59e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    59ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    59ee:	d103      	bne.n	59f8 <nrfx_clock_stop+0xfc>
    return false;
    59f0:	2300      	movs	r3, #0
    59f2:	e7ea      	b.n	59ca <nrfx_clock_stop+0xce>
                return true;
    59f4:	2301      	movs	r3, #1
    59f6:	e7e8      	b.n	59ca <nrfx_clock_stop+0xce>
                return true;
    59f8:	2301      	movs	r3, #1
    59fa:	e7e6      	b.n	59ca <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    59fc:	2c01      	cmp	r4, #1
    59fe:	d183      	bne.n	5908 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    5a00:	4b03      	ldr	r3, [pc, #12]	; (5a10 <nrfx_clock_stop+0x114>)
    5a02:	2200      	movs	r2, #0
    5a04:	715a      	strb	r2, [r3, #5]
    5a06:	e77f      	b.n	5908 <nrfx_clock_stop+0xc>
    5a08:	4000000c 	.word	0x4000000c
    5a0c:	40000004 	.word	0x40000004
    5a10:	2001d1b4 	.word	0x2001d1b4

00005a14 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5a14:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5a16:	4b1b      	ldr	r3, [pc, #108]	; (5a84 <nrfx_power_clock_irq_handler+0x70>)
    5a18:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5a1a:	b183      	cbz	r3, 5a3e <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a1c:	4b19      	ldr	r3, [pc, #100]	; (5a84 <nrfx_power_clock_irq_handler+0x70>)
    5a1e:	2200      	movs	r2, #0
    5a20:	601a      	str	r2, [r3, #0]
    5a22:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a28:	2201      	movs	r2, #1
    5a2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5a2e:	4b16      	ldr	r3, [pc, #88]	; (5a88 <nrfx_power_clock_irq_handler+0x74>)
    5a30:	795b      	ldrb	r3, [r3, #5]
    5a32:	b923      	cbnz	r3, 5a3e <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    5a34:	4b14      	ldr	r3, [pc, #80]	; (5a88 <nrfx_power_clock_irq_handler+0x74>)
    5a36:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5a38:	681b      	ldr	r3, [r3, #0]
    5a3a:	2000      	movs	r0, #0
    5a3c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5a3e:	4b13      	ldr	r3, [pc, #76]	; (5a8c <nrfx_power_clock_irq_handler+0x78>)
    5a40:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5a42:	b19b      	cbz	r3, 5a6c <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a44:	4b11      	ldr	r3, [pc, #68]	; (5a8c <nrfx_power_clock_irq_handler+0x78>)
    5a46:	2200      	movs	r2, #0
    5a48:	601a      	str	r2, [r3, #0]
    5a4a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a50:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5a54:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5a58:	f012 0f03 	tst.w	r2, #3
    5a5c:	d107      	bne.n	5a6e <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5a5e:	2301      	movs	r3, #1
    5a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5a64:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a68:	3208      	adds	r2, #8
    5a6a:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5a6c:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a72:	2202      	movs	r2, #2
    5a74:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5a78:	4b03      	ldr	r3, [pc, #12]	; (5a88 <nrfx_power_clock_irq_handler+0x74>)
    5a7a:	681b      	ldr	r3, [r3, #0]
    5a7c:	2001      	movs	r0, #1
    5a7e:	4798      	blx	r3
}
    5a80:	e7f4      	b.n	5a6c <nrfx_power_clock_irq_handler+0x58>
    5a82:	bf00      	nop
    5a84:	40000100 	.word	0x40000100
    5a88:	2001d1b4 	.word	0x2001d1b4
    5a8c:	40000104 	.word	0x40000104

00005a90 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    5a90:	4b04      	ldr	r3, [pc, #16]	; (5aa4 <is_allocated_channel+0x14>)
    5a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5a94:	2301      	movs	r3, #1
    5a96:	4083      	lsls	r3, r0
    5a98:	421a      	tst	r2, r3
}
    5a9a:	bf14      	ite	ne
    5a9c:	2001      	movne	r0, #1
    5a9e:	2000      	moveq	r0, #0
    5aa0:	4770      	bx	lr
    5aa2:	bf00      	nop
    5aa4:	2001d1bc 	.word	0x2001d1bc

00005aa8 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    5aa8:	2301      	movs	r3, #1
    5aaa:	fa03 f000 	lsl.w	r0, r3, r0
    5aae:	4a02      	ldr	r2, [pc, #8]	; (5ab8 <channel_allocated_set+0x10>)
    5ab0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    5ab2:	4303      	orrs	r3, r0
    5ab4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    5ab6:	4770      	bx	lr
    5ab8:	2001d1bc 	.word	0x2001d1bc

00005abc <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    5abc:	2301      	movs	r3, #1
    5abe:	fa03 f000 	lsl.w	r0, r3, r0
    5ac2:	4a03      	ldr	r2, [pc, #12]	; (5ad0 <channel_allocated_clr+0x14>)
    5ac4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    5ac6:	ea23 0300 	bic.w	r3, r3, r0
    5aca:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    5acc:	4770      	bx	lr
    5ace:	bf00      	nop
    5ad0:	2001d1bc 	.word	0x2001d1bc

00005ad4 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    5ad4:	b538      	push	{r3, r4, r5, lr}
    5ad6:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    5ad8:	f009 f95d 	bl	ed96 <is_app_channel>
    5adc:	b908      	cbnz	r0, 5ae2 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    5ade:	4809      	ldr	r0, [pc, #36]	; (5b04 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5ae0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5ae2:	f04f 0320 	mov.w	r3, #32
    5ae6:	f3ef 8511 	mrs	r5, BASEPRI
    5aea:	f383 8812 	msr	BASEPRI_MAX, r3
    5aee:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    5af2:	4620      	mov	r0, r4
    5af4:	f7ff ffe2 	bl	5abc <channel_allocated_clr>
	__asm__ volatile(
    5af8:	f385 8811 	msr	BASEPRI, r5
    5afc:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    5b00:	4801      	ldr	r0, [pc, #4]	; (5b08 <nrfx_gpiote_channel_free+0x34>)
}
    5b02:	e7ed      	b.n	5ae0 <nrfx_gpiote_channel_free+0xc>
    5b04:	0bad0004 	.word	0x0bad0004
    5b08:	0bad0000 	.word	0x0bad0000

00005b0c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    5b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b10:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    5b12:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    5b14:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    5b16:	4f17      	ldr	r7, [pc, #92]	; (5b74 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    5b18:	e013      	b.n	5b42 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    5b1a:	4620      	mov	r0, r4
    5b1c:	f7ff ffc4 	bl	5aa8 <channel_allocated_set>
            *p_channel = ch_idx;
    5b20:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    5b24:	4f14      	ldr	r7, [pc, #80]	; (5b78 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    5b26:	f386 8811 	msr	BASEPRI, r6
    5b2a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    5b2e:	4b12      	ldr	r3, [pc, #72]	; (5b78 <nrfx_gpiote_channel_alloc+0x6c>)
    5b30:	429f      	cmp	r7, r3
    5b32:	d01b      	beq.n	5b6c <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    5b34:	2301      	movs	r3, #1
    5b36:	fa03 f309 	lsl.w	r3, r3, r9
    5b3a:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    5b3e:	3401      	adds	r4, #1
    5b40:	b2e4      	uxtb	r4, r4
    5b42:	b19d      	cbz	r5, 5b6c <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    5b44:	f04f 0320 	mov.w	r3, #32
    5b48:	f3ef 8611 	mrs	r6, BASEPRI
    5b4c:	f383 8812 	msr	BASEPRI_MAX, r3
    5b50:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    5b54:	46a1      	mov	r9, r4
    5b56:	fa25 f304 	lsr.w	r3, r5, r4
    5b5a:	f013 0f01 	tst.w	r3, #1
    5b5e:	d0e2      	beq.n	5b26 <nrfx_gpiote_channel_alloc+0x1a>
    5b60:	4620      	mov	r0, r4
    5b62:	f7ff ff95 	bl	5a90 <is_allocated_channel>
    5b66:	2800      	cmp	r0, #0
    5b68:	d1dd      	bne.n	5b26 <nrfx_gpiote_channel_alloc+0x1a>
    5b6a:	e7d6      	b.n	5b1a <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5b6c:	4638      	mov	r0, r7
    5b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5b72:	bf00      	nop
    5b74:	0bad0002 	.word	0x0bad0002
    5b78:	0bad0000 	.word	0x0bad0000

00005b7c <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    5b7c:	2301      	movs	r3, #1
    5b7e:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    5b80:	4a03      	ldr	r2, [pc, #12]	; (5b90 <is_allocated_channel+0x14>)
    5b82:	6812      	ldr	r2, [r2, #0]
    5b84:	4213      	tst	r3, r2
}
    5b86:	bf14      	ite	ne
    5b88:	2001      	movne	r0, #1
    5b8a:	2000      	moveq	r0, #0
    5b8c:	4770      	bx	lr
    5b8e:	bf00      	nop
    5b90:	2001d21c 	.word	0x2001d21c

00005b94 <channel_allocated_set>:
    5b94:	2301      	movs	r3, #1
    5b96:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    5b9a:	4a02      	ldr	r2, [pc, #8]	; (5ba4 <channel_allocated_set+0x10>)
    5b9c:	6813      	ldr	r3, [r2, #0]
    5b9e:	4303      	orrs	r3, r0
    5ba0:	6013      	str	r3, [r2, #0]
}
    5ba2:	4770      	bx	lr
    5ba4:	2001d21c 	.word	0x2001d21c

00005ba8 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5bac:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    5bae:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    5bb0:	4e15      	ldr	r6, [pc, #84]	; (5c08 <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    5bb2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5c10 <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    5bb6:	e011      	b.n	5bdc <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    5bb8:	4620      	mov	r0, r4
    5bba:	f7ff ffeb 	bl	5b94 <channel_allocated_set>
            *p_channel = channel;
    5bbe:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    5bc2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 5c0c <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    5bc6:	f387 8811 	msr	BASEPRI, r7
    5bca:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    5bce:	4b0f      	ldr	r3, [pc, #60]	; (5c0c <nrfx_ppi_channel_alloc+0x64>)
    5bd0:	4598      	cmp	r8, r3
    5bd2:	d016      	beq.n	5c02 <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    5bd4:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    5bd8:	3401      	adds	r4, #1
    5bda:	b2e4      	uxtb	r4, r4
    5bdc:	b18e      	cbz	r6, 5c02 <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    5bde:	f04f 0320 	mov.w	r3, #32
    5be2:	f3ef 8711 	mrs	r7, BASEPRI
    5be6:	f383 8812 	msr	BASEPRI_MAX, r3
    5bea:	f3bf 8f6f 	isb	sy
    5bee:	2501      	movs	r5, #1
    5bf0:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    5bf2:	4235      	tst	r5, r6
    5bf4:	d0e7      	beq.n	5bc6 <nrfx_ppi_channel_alloc+0x1e>
    5bf6:	4620      	mov	r0, r4
    5bf8:	f7ff ffc0 	bl	5b7c <is_allocated_channel>
    5bfc:	2800      	cmp	r0, #0
    5bfe:	d1e2      	bne.n	5bc6 <nrfx_ppi_channel_alloc+0x1e>
    5c00:	e7da      	b.n	5bb8 <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5c02:	4640      	mov	r0, r8
    5c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c08:	000fffff 	.word	0x000fffff
    5c0c:	0bad0000 	.word	0x0bad0000
    5c10:	0bad0002 	.word	0x0bad0002

00005c14 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5c14:	4b14      	ldr	r3, [pc, #80]	; (5c68 <_DoInit+0x54>)
    5c16:	2203      	movs	r2, #3
    5c18:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5c1a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5c1c:	4913      	ldr	r1, [pc, #76]	; (5c6c <_DoInit+0x58>)
    5c1e:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5c20:	4a13      	ldr	r2, [pc, #76]	; (5c70 <_DoInit+0x5c>)
    5c22:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5c28:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    5c2a:	2200      	movs	r2, #0
    5c2c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5c2e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5c30:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5c32:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5c34:	490f      	ldr	r1, [pc, #60]	; (5c74 <_DoInit+0x60>)
    5c36:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5c38:	2110      	movs	r1, #16
    5c3a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    5c3c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5c3e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5c40:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5c42:	4a0d      	ldr	r2, [pc, #52]	; (5c78 <_DoInit+0x64>)
    5c44:	6810      	ldr	r0, [r2, #0]
    5c46:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5c4a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    5c4e:	4a0b      	ldr	r2, [pc, #44]	; (5c7c <_DoInit+0x68>)
    5c50:	e892 0003 	ldmia.w	r2, {r0, r1}
    5c54:	6018      	str	r0, [r3, #0]
    5c56:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5c58:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    5c5c:	2220      	movs	r2, #32
    5c5e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5c60:	f3bf 8f5f 	dmb	sy
}
    5c64:	4770      	bx	lr
    5c66:	bf00      	nop
    5c68:	2001d220 	.word	0x2001d220
    5c6c:	0005531c 	.word	0x0005531c
    5c70:	2001d2d8 	.word	0x2001d2d8
    5c74:	2001d2c8 	.word	0x2001d2c8
    5c78:	00055328 	.word	0x00055328
    5c7c:	0005532c 	.word	0x0005532c

00005c80 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
    5c80:	b570      	push	{r4, r5, r6, lr}
    5c82:	b082      	sub	sp, #8
    5c84:	4604      	mov	r4, r0
  if (head_ != temp_) {
    5c86:	6905      	ldr	r5, [r0, #16]
    5c88:	6983      	ldr	r3, [r0, #24]
    5c8a:	429d      	cmp	r5, r3
    5c8c:	d006      	beq.n	5c9c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
    5c8e:	490f      	ldr	r1, [pc, #60]	; (5ccc <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    5c90:	6840      	ldr	r0, [r0, #4]
    5c92:	f009 fe2d 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
    5c96:	2001      	movs	r0, #1
  }
  head_ = aligned_result + size;
  temp_ = head_;

  return kTfLiteOk;
}
    5c98:	b002      	add	sp, #8
    5c9a:	bd70      	pop	{r4, r5, r6, pc}
    5c9c:	460e      	mov	r6, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    5c9e:	4611      	mov	r1, r2
    5ca0:	6880      	ldr	r0, [r0, #8]
    5ca2:	f009 f8be 	bl	ee22 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    5ca6:	6963      	ldr	r3, [r4, #20]
    5ca8:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    5caa:	42b3      	cmp	r3, r6
    5cac:	d304      	bcc.n	5cb8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x38>
  head_ = aligned_result + size;
    5cae:	4430      	add	r0, r6
    5cb0:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    5cb2:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    5cb4:	2000      	movs	r0, #0
    5cb6:	e7ef      	b.n	5c98 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    TF_LITE_REPORT_ERROR(
    5cb8:	1af2      	subs	r2, r6, r3
    5cba:	9200      	str	r2, [sp, #0]
    5cbc:	4632      	mov	r2, r6
    5cbe:	4904      	ldr	r1, [pc, #16]	; (5cd0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
    5cc0:	6860      	ldr	r0, [r4, #4]
    5cc2:	f009 fe15 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    5cc6:	2001      	movs	r0, #1
    5cc8:	e7e6      	b.n	5c98 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    5cca:	bf00      	nop
    5ccc:	00055334 	.word	0x00055334
    5cd0:	0005538c 	.word	0x0005538c

00005cd4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    5cd4:	b530      	push	{r4, r5, lr}
    5cd6:	b083      	sub	sp, #12
    5cd8:	4605      	mov	r5, r0
    5cda:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    5cdc:	4611      	mov	r1, r2
    5cde:	6980      	ldr	r0, [r0, #24]
    5ce0:	f009 f89f 	bl	ee22 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    5ce4:	696b      	ldr	r3, [r5, #20]
    5ce6:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    5ce8:	42a3      	cmp	r3, r4
    5cea:	d303      	bcc.n	5cf4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
  }
  temp_ = aligned_result + size;
    5cec:	4404      	add	r4, r0
    5cee:	61ac      	str	r4, [r5, #24]
  return aligned_result;
}
    5cf0:	b003      	add	sp, #12
    5cf2:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    5cf4:	1ae2      	subs	r2, r4, r3
    5cf6:	9200      	str	r2, [sp, #0]
    5cf8:	4622      	mov	r2, r4
    5cfa:	4903      	ldr	r1, [pc, #12]	; (5d08 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    5cfc:	6868      	ldr	r0, [r5, #4]
    5cfe:	f009 fdf7 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    5d02:	2000      	movs	r0, #0
    5d04:	e7f4      	b.n	5cf0 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    5d06:	bf00      	nop
    5d08:	000553d0 	.word	0x000553d0

00005d0c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    5d0c:	b530      	push	{r4, r5, lr}
    5d0e:	b083      	sub	sp, #12
    5d10:	4604      	mov	r4, r0
    5d12:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    5d14:	6940      	ldr	r0, [r0, #20]
    5d16:	4611      	mov	r1, r2
    5d18:	1b40      	subs	r0, r0, r5
    5d1a:	f009 f889 	bl	ee30 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    5d1e:	6923      	ldr	r3, [r4, #16]
    5d20:	4283      	cmp	r3, r0
    5d22:	d802      	bhi.n	5d2a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1e>
  tail_ = aligned_result;
    5d24:	6160      	str	r0, [r4, #20]
}
    5d26:	b003      	add	sp, #12
    5d28:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    5d2a:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    5d2c:	9300      	str	r3, [sp, #0]
    5d2e:	1aeb      	subs	r3, r5, r3
    5d30:	462a      	mov	r2, r5
    5d32:	4903      	ldr	r1, [pc, #12]	; (5d40 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    5d34:	6860      	ldr	r0, [r4, #4]
    5d36:	f009 fddb 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    5d3a:	2000      	movs	r0, #0
    5d3c:	e7f3      	b.n	5d26 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1a>
    5d3e:	bf00      	nop
    5d40:	0005541c 	.word	0x0005541c

00005d44 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    5d44:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    5d46:	4d05      	ldr	r5, [pc, #20]	; (5d5c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    5d48:	6005      	str	r5, [r0, #0]
    5d4a:	6041      	str	r1, [r0, #4]
    5d4c:	6082      	str	r2, [r0, #8]
    5d4e:	60c3      	str	r3, [r0, #12]
    5d50:	6102      	str	r2, [r0, #16]
    5d52:	6143      	str	r3, [r0, #20]
    5d54:	6182      	str	r2, [r0, #24]
    5d56:	bc30      	pop	{r4, r5}
    5d58:	4770      	bx	lr
    5d5a:	bf00      	nop
    5d5c:	00055470 	.word	0x00055470

00005d60 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    5d60:	b510      	push	{r4, lr}
    5d62:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    5d64:	b300      	cbz	r0, 5da8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    5d66:	460c      	mov	r4, r1
    5d68:	4613      	mov	r3, r2
    5d6a:	4601      	mov	r1, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    5d6c:	b1f4      	cbz	r4, 5dac <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
    5d6e:	4622      	mov	r2, r4
    5d70:	a801      	add	r0, sp, #4
    5d72:	f009 f82b 	bl	edcc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    5d76:	2204      	movs	r2, #4
    5d78:	211c      	movs	r1, #28
    5d7a:	eb0d 0002 	add.w	r0, sp, r2
    5d7e:	f7ff ffc5 	bl	5d0c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    5d82:	4603      	mov	r3, r0
    5d84:	b168      	cbz	r0, 5da2 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x42>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    5d86:	4a0a      	ldr	r2, [pc, #40]	; (5db0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    5d88:	6002      	str	r2, [r0, #0]
    5d8a:	9a02      	ldr	r2, [sp, #8]
    5d8c:	6042      	str	r2, [r0, #4]
    5d8e:	9a03      	ldr	r2, [sp, #12]
    5d90:	6082      	str	r2, [r0, #8]
    5d92:	9a04      	ldr	r2, [sp, #16]
    5d94:	60c2      	str	r2, [r0, #12]
    5d96:	9a05      	ldr	r2, [sp, #20]
    5d98:	6102      	str	r2, [r0, #16]
    5d9a:	9a06      	ldr	r2, [sp, #24]
    5d9c:	6142      	str	r2, [r0, #20]
    5d9e:	9a07      	ldr	r2, [sp, #28]
    5da0:	6182      	str	r2, [r0, #24]
}
    5da2:	4618      	mov	r0, r3
    5da4:	b008      	add	sp, #32
    5da6:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    5da8:	f00a f954 	bl	10054 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    5dac:	f00a f952 	bl	10054 <abort>
    5db0:	00055470 	.word	0x00055470

00005db4 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
    5db4:	b508      	push	{r3, lr}
    5db6:	4602      	mov	r2, r0
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    5db8:	4b03      	ldr	r3, [pc, #12]	; (5dc8 <DebugLog+0x14>)
    5dba:	681b      	ldr	r3, [r3, #0]
    5dbc:	4903      	ldr	r1, [pc, #12]	; (5dcc <DebugLog+0x18>)
    5dbe:	68d8      	ldr	r0, [r3, #12]
    5dc0:	f006 fbf8 	bl	c5b4 <fiprintf>
#endif
}
    5dc4:	bd08      	pop	{r3, pc}
    5dc6:	bf00      	nop
    5dc8:	200000fc 	.word	0x200000fc
    5dcc:	00055488 	.word	0x00055488

00005dd0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    5dd0:	b500      	push	{lr}
    5dd2:	b0c1      	sub	sp, #260	; 0x104
    5dd4:	4602      	mov	r2, r0
    5dd6:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    5dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
    5ddc:	4668      	mov	r0, sp
    5dde:	f000 f917 	bl	6010 <MicroVsnprintf>
  DebugLog(log_buffer);
    5de2:	4668      	mov	r0, sp
    5de4:	f7ff ffe6 	bl	5db4 <DebugLog>
  DebugLog("\r\n");
    5de8:	4802      	ldr	r0, [pc, #8]	; (5df4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    5dea:	f7ff ffe3 	bl	5db4 <DebugLog>
#endif
}
    5dee:	b041      	add	sp, #260	; 0x104
    5df0:	f85d fb04 	ldr.w	pc, [sp], #4
    5df4:	00057828 	.word	0x00057828

00005df8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:
  return kTfLiteOk;
}

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    5df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dfc:	b083      	sub	sp, #12
    5dfe:	4680      	mov	r8, r0
    5e00:	468b      	mov	fp, r1
    5e02:	4692      	mov	sl, r2
    5e04:	4699      	mov	r9, r3
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
    5e06:	4606      	mov	r6, r0
    return data_ - ReadScalar<soffset_t>(data_);
    5e08:	f007 fe26 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    5e0c:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    5e10:	4620      	mov	r0, r4
    5e12:	f007 fe27 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    5e16:	2804      	cmp	r0, #4
    5e18:	d90d      	bls.n	5e36 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    5e1a:	1d20      	adds	r0, r4, #4
    5e1c:	f007 fe22 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    5e20:	eb08 0400 	add.w	r4, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5e24:	b148      	cbz	r0, 5e3a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x42>
    5e26:	4620      	mov	r0, r4
    5e28:	f007 fe10 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    5e2c:	4404      	add	r4, r0
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    5e2e:	b3ac      	cbz	r4, 5e9c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa4>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    5e30:	2500      	movs	r5, #0
  int element_count = 1;
    5e32:	2701      	movs	r7, #1
    5e34:	e01e      	b.n	5e74 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    5e36:	2000      	movs	r0, #0
    5e38:	e7f2      	b.n	5e20 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5e3a:	2400      	movs	r4, #0
    5e3c:	e7f7      	b.n	5e2e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    5e3e:	1d20      	adds	r0, r4, #4
    5e40:	f007 fe10 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    5e44:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5e46:	b300      	cbz	r0, 5e8a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
    5e48:	4620      	mov	r0, r4
    5e4a:	f007 fdff 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    5e4e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    5e50:	6820      	ldr	r0, [r4, #0]
    5e52:	f007 fdfa 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    5e56:	4285      	cmp	r5, r0
    5e58:	d221      	bcs.n	5e9e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa6>
    5e5a:	6820      	ldr	r0, [r4, #0]
    5e5c:	f007 fdf5 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    5e60:	4285      	cmp	r5, r0
    5e62:	d214      	bcs.n	5e8e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    5e64:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    5e66:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    5e6a:	f007 fdf4 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    5e6e:	fb00 f707 	mul.w	r7, r0, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    5e72:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    5e74:	4630      	mov	r0, r6
    5e76:	f007 fdef 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    5e7a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    5e7c:	4620      	mov	r0, r4
    5e7e:	f007 fdf1 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    5e82:	2804      	cmp	r0, #4
    5e84:	d8db      	bhi.n	5e3e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x46>
    5e86:	2000      	movs	r0, #0
    5e88:	e7dc      	b.n	5e44 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5e8a:	2400      	movs	r4, #0
    5e8c:	e7e0      	b.n	5e50 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
    FLATBUFFERS_ASSERT(i < size());
    5e8e:	4b1a      	ldr	r3, [pc, #104]	; (5ef8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x100>)
    5e90:	4a1a      	ldr	r2, [pc, #104]	; (5efc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x104>)
    5e92:	f44f 7183 	mov.w	r1, #262	; 0x106
    5e96:	481a      	ldr	r0, [pc, #104]	; (5f00 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x108>)
    5e98:	f006 fb6e 	bl	c578 <__assert_func>
  int element_count = 1;
    5e9c:	2701      	movs	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    5e9e:	4640      	mov	r0, r8
    5ea0:	f007 fdda 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    5ea4:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    5ea8:	4620      	mov	r0, r4
    5eaa:	f007 fddb 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    5eae:	2806      	cmp	r0, #6
    5eb0:	d910      	bls.n	5ed4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xdc>
    5eb2:	1da0      	adds	r0, r4, #6
    5eb4:	f007 fdd6 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    5eb8:	b170      	cbz	r0, 5ed8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe0>
    5eba:	4440      	add	r0, r8
    5ebc:	f009 f829 	bl	ef12 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    5ec0:	464a      	mov	r2, r9
    5ec2:	f10d 0107 	add.w	r1, sp, #7
    5ec6:	b2c0      	uxtb	r0, r0
    5ec8:	f003 f84c 	bl	8f64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    5ecc:	b130      	cbz	r0, 5edc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe4>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    5ece:	b003      	add	sp, #12
    5ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    5ed4:	2000      	movs	r0, #0
    5ed6:	e7ef      	b.n	5eb8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    5ed8:	2000      	movs	r0, #0
    5eda:	e7f1      	b.n	5ec0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc8>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    5edc:	4651      	mov	r1, sl
    5ede:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5ee2:	f008 ffb1 	bl	ee48 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    5ee6:	2800      	cmp	r0, #0
    5ee8:	d1f1      	bne.n	5ece <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
  *bytes = element_count * (*type_size);
    5eea:	f8da 3000 	ldr.w	r3, [sl]
    5eee:	fb07 f703 	mul.w	r7, r7, r3
    5ef2:	f8cb 7000 	str.w	r7, [fp]
  return kTfLiteOk;
    5ef6:	e7ea      	b.n	5ece <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
    5ef8:	000554a0 	.word	0x000554a0
    5efc:	000554ac 	.word	0x000554ac
    5f00:	0005556c 	.word	0x0005556c

00005f04 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
    5f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f06:	b089      	sub	sp, #36	; 0x24
    5f08:	9001      	str	r0, [sp, #4]
    5f0a:	460e      	mov	r6, r1
  char* current = buffer;
  char* current_end = buffer + (kFastToBufferSize - 1);
    5f0c:	f101 052f 	add.w	r5, r1, #47	; 0x2f
  const uint32_t exponent_mask = 0x7f800000;
  const int32_t exponent_shift = 23;
  const int32_t exponent_bias = 127;
  const uint32_t fraction_mask = 0x007fffff;
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
    5f10:	2204      	movs	r2, #4
    5f12:	eb0d 0102 	add.w	r1, sp, r2
    5f16:	a807      	add	r0, sp, #28
    5f18:	f00a f8a7 	bl	1006a <memcpy>
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    5f1c:	9b07      	ldr	r3, [sp, #28]
    5f1e:	f3c3 54c7 	ubfx	r4, r3, #23, #8
    5f22:	3c7f      	subs	r4, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
    5f24:	f3c3 0716 	ubfx	r7, r3, #0, #23
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
    5f28:	2b00      	cmp	r3, #0
    5f2a:	db0e      	blt.n	5f4a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x46>
    *current = '-';
    current += 1;
  }
  *current = 0;
    5f2c:	2300      	movs	r3, #0
    5f2e:	7033      	strb	r3, [r6, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
    5f30:	2c80      	cmp	r4, #128	; 0x80
    5f32:	d00e      	beq.n	5f52 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x4e>
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    5f34:	4b32      	ldr	r3, [pc, #200]	; (6000 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xfc>)
    5f36:	f10d 0c0c 	add.w	ip, sp, #12
    5f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5f3c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    5f40:	f88c 3000 	strb.w	r3, [ip]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
    5f44:	463a      	mov	r2, r7
  for (int i = 0; i < scale_shifts_size; ++i) {
    5f46:	2300      	movs	r3, #0
    5f48:	e01a      	b.n	5f80 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7c>
    *current = '-';
    5f4a:	232d      	movs	r3, #45	; 0x2d
    5f4c:	f806 3b01 	strb.w	r3, [r6], #1
    current += 1;
    5f50:	e7ec      	b.n	5f2c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x28>
    if (fraction == 0) {
    5f52:	b937      	cbnz	r7, 5f62 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x5e>
      current = StrCatStr(current, (current_end - current), "Inf");
    5f54:	4a2b      	ldr	r2, [pc, #172]	; (6004 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x100>)
    5f56:	1ba9      	subs	r1, r5, r6
    5f58:	4630      	mov	r0, r6
    5f5a:	f008 fff1 	bl	ef40 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    5f5e:	4607      	mov	r7, r0
      return current;
    5f60:	e04a      	b.n	5ff8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
      current = StrCatStr(current, (current_end - current), "NaN");
    5f62:	4a29      	ldr	r2, [pc, #164]	; (6008 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>)
    5f64:	1ba9      	subs	r1, r5, r6
    5f66:	4630      	mov	r0, r6
    5f68:	f008 ffea 	bl	ef40 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    5f6c:	4607      	mov	r7, r0
      return current;
    5f6e:	e043      	b.n	5ff8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    scaled_fraction += (fraction >> scale_shifts[i]);
    5f70:	a908      	add	r1, sp, #32
    5f72:	18c8      	adds	r0, r1, r3
    5f74:	f910 0c14 	ldrsb.w	r0, [r0, #-20]
    5f78:	fa27 f000 	lsr.w	r0, r7, r0
    5f7c:	4402      	add	r2, r0
  for (int i = 0; i < scale_shifts_size; ++i) {
    5f7e:	3301      	adds	r3, #1
    5f80:	2b0c      	cmp	r3, #12
    5f82:	ddf5      	ble.n	5f70 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x6c>
  }
  *current = '1';
    5f84:	2331      	movs	r3, #49	; 0x31
    5f86:	7033      	strb	r3, [r6, #0]
  current += 1;
  *current = '.';
    5f88:	232e      	movs	r3, #46	; 0x2e
    5f8a:	7073      	strb	r3, [r6, #1]
  current += 1;
    5f8c:	1cb7      	adds	r7, r6, #2
  *current = 0;
    5f8e:	2300      	movs	r3, #0
    5f90:	70b3      	strb	r3, [r6, #2]
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
    5f92:	1be9      	subs	r1, r5, r7
    5f94:	2907      	cmp	r1, #7
    5f96:	dd2f      	ble.n	5ff8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    return current;
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    5f98:	2301      	movs	r3, #1
    5f9a:	2b06      	cmp	r3, #6
    5f9c:	dc03      	bgt.n	5fa6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xa2>
    *(current + i) = '0';
    5f9e:	2030      	movs	r0, #48	; 0x30
    5fa0:	54f8      	strb	r0, [r7, r3]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    5fa2:	3301      	adds	r3, #1
    5fa4:	e7f9      	b.n	5f9a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    5fa6:	230a      	movs	r3, #10
    5fa8:	4638      	mov	r0, r7
    5faa:	f009 f816 	bl	efda <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>
  int fraction_digits = current - previous;
    5fae:	1bc1      	subs	r1, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
    5fb0:	2330      	movs	r3, #48	; 0x30
    5fb2:	7003      	strb	r3, [r0, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
    5fb4:	f1d1 0607 	rsbs	r6, r1, #7
    5fb8:	d00c      	beq.n	5fd4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
    for (int i = 0; i < fraction_digits; i++) {
    5fba:	2300      	movs	r3, #0
    5fbc:	428b      	cmp	r3, r1
    5fbe:	da06      	bge.n	5fce <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xca>
      current--;
      *(current + leading_zeros) = *current;
    5fc0:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    5fc4:	5582      	strb	r2, [r0, r6]
      *current = '0';
    5fc6:	2230      	movs	r2, #48	; 0x30
    5fc8:	7002      	strb	r2, [r0, #0]
    for (int i = 0; i < fraction_digits; i++) {
    5fca:	3301      	adds	r3, #1
    5fcc:	e7f6      	b.n	5fbc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb8>
    }
    current += kMaxFractionalDigits;
    5fce:	3007      	adds	r0, #7
    5fd0:	e000      	b.n	5fd4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
    current--;
    5fd2:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    5fd4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5fd8:	2b30      	cmp	r3, #48	; 0x30
    5fda:	d102      	bne.n	5fe2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xde>
    5fdc:	1e43      	subs	r3, r0, #1
    5fde:	42bb      	cmp	r3, r7
    5fe0:	d8f7      	bhi.n	5fd2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
  }
  *current = 0;
    5fe2:	2300      	movs	r3, #0
    5fe4:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    5fe6:	4a09      	ldr	r2, [pc, #36]	; (600c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>)
    5fe8:	1a29      	subs	r1, r5, r0
    5fea:	f008 ffa9 	bl	ef40 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    5fee:	4622      	mov	r2, r4
    5ff0:	1a29      	subs	r1, r5, r0
    5ff2:	f008 ffe3 	bl	efbc <_ZN12_GLOBAL__N_111StrCatInt32EPcii>
    5ff6:	4607      	mov	r7, r0
  return current;
}
    5ff8:	4638      	mov	r0, r7
    5ffa:	b009      	add	sp, #36	; 0x24
    5ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ffe:	bf00      	nop
    6000:	000555e0 	.word	0x000555e0
    6004:	000555d4 	.word	0x000555d4
    6008:	000555d8 	.word	0x000555d8
    600c:	000555dc 	.word	0x000555dc

00006010 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    6010:	b5f0      	push	{r4, r5, r6, r7, lr}
    6012:	b083      	sub	sp, #12
    6014:	4607      	mov	r7, r0
    6016:	4615      	mov	r5, r2
    6018:	9301      	str	r3, [sp, #4]
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    601a:	1e4e      	subs	r6, r1, #1
  int output_index = 0;
    601c:	2400      	movs	r4, #0
    601e:	e07c      	b.n	611a <MicroVsnprintf+0x10a>
    if (*current == '%') {
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6020:	1b33      	subs	r3, r6, r4
    6022:	2b0a      	cmp	r3, #10
    6024:	dd09      	ble.n	603a <MicroVsnprintf+0x2a>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    6026:	9b01      	ldr	r3, [sp, #4]
    6028:	1d1a      	adds	r2, r3, #4
    602a:	9201      	str	r2, [sp, #4]
    602c:	6819      	ldr	r1, [r3, #0]
    602e:	1938      	adds	r0, r7, r4
    6030:	f008 ffe3 	bl	effa <_ZN12_GLOBAL__N_111FormatInt32EPci>
          output_index +=
    6034:	4404      	add	r4, r0
          current++;
    6036:	1caa      	adds	r2, r5, #2
          break;
    6038:	e06e      	b.n	6118 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    603a:	1c60      	adds	r0, r4, #1
    603c:	2300      	movs	r3, #0
    603e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6040:	e0b1      	b.n	61a6 <MicroVsnprintf+0x196>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6042:	1b33      	subs	r3, r6, r4
    6044:	2b0a      	cmp	r3, #10
    6046:	dd09      	ble.n	605c <MicroVsnprintf+0x4c>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    6048:	9b01      	ldr	r3, [sp, #4]
    604a:	1d1a      	adds	r2, r3, #4
    604c:	9201      	str	r2, [sp, #4]
    604e:	6819      	ldr	r1, [r3, #0]
    6050:	1938      	adds	r0, r7, r4
    6052:	f008 ffda 	bl	f00a <_ZN12_GLOBAL__N_112FormatUInt32EPcj>
          output_index +=
    6056:	4404      	add	r4, r0
          current++;
    6058:	1caa      	adds	r2, r5, #2
          break;
    605a:	e05d      	b.n	6118 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    605c:	1c60      	adds	r0, r4, #1
    605e:	2300      	movs	r3, #0
    6060:	553b      	strb	r3, [r7, r4]
            return output_index;
    6062:	e0a0      	b.n	61a6 <MicroVsnprintf+0x196>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    6064:	1b33      	subs	r3, r6, r4
    6066:	2b09      	cmp	r3, #9
    6068:	dd0f      	ble.n	608a <MicroVsnprintf+0x7a>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = '0';
    606a:	1c63      	adds	r3, r4, #1
    606c:	2230      	movs	r2, #48	; 0x30
    606e:	553a      	strb	r2, [r7, r4]
          output[output_index++] = 'x';
    6070:	3402      	adds	r4, #2
    6072:	2278      	movs	r2, #120	; 0x78
    6074:	54fa      	strb	r2, [r7, r3]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6076:	9b01      	ldr	r3, [sp, #4]
    6078:	1d1a      	adds	r2, r3, #4
    607a:	9201      	str	r2, [sp, #4]
    607c:	6819      	ldr	r1, [r3, #0]
    607e:	1938      	adds	r0, r7, r4
    6080:	f008 ffcc 	bl	f01c <_ZN12_GLOBAL__N_19FormatHexEPcj>
          output_index +=
    6084:	4404      	add	r4, r0
          current++;
    6086:	1caa      	adds	r2, r5, #2
          break;
    6088:	e046      	b.n	6118 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    608a:	1c60      	adds	r0, r4, #1
    608c:	2300      	movs	r3, #0
    608e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6090:	e089      	b.n	61a6 <MicroVsnprintf+0x196>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6092:	1b30      	subs	r0, r6, r4
    6094:	f7fa fe0c 	bl	cb0 <__aeabi_i2f>
    6098:	4944      	ldr	r1, [pc, #272]	; (61ac <MicroVsnprintf+0x19c>)
    609a:	f7fa fffb 	bl	1094 <__aeabi_fcmplt>
    609e:	b988      	cbnz	r0, 60c4 <MicroVsnprintf+0xb4>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
    60a0:	9b01      	ldr	r3, [sp, #4]
    60a2:	3307      	adds	r3, #7
    60a4:	f023 0307 	bic.w	r3, r3, #7
    60a8:	f103 0208 	add.w	r2, r3, #8
    60ac:	9201      	str	r2, [sp, #4]
    60ae:	e9d3 0100 	ldrd	r0, r1, [r3]
    60b2:	f7fa fcf3 	bl	a9c <__aeabi_d2f>
    60b6:	4601      	mov	r1, r0
    60b8:	1938      	adds	r0, r7, r4
    60ba:	f008 ffb8 	bl	f02e <_ZN12_GLOBAL__N_111FormatFloatEPcf>
          output_index +=
    60be:	4404      	add	r4, r0
          current++;
    60c0:	1caa      	adds	r2, r5, #2
          break;
    60c2:	e029      	b.n	6118 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    60c4:	1c60      	adds	r0, r4, #1
    60c6:	2300      	movs	r3, #0
    60c8:	553b      	strb	r3, [r7, r4]
            return output_index;
    60ca:	e06c      	b.n	61a6 <MicroVsnprintf+0x196>
        case '%':
          output[output_index++] = *current++;
    60cc:	1caa      	adds	r2, r5, #2
    60ce:	553b      	strb	r3, [r7, r4]
    60d0:	3401      	adds	r4, #1
          break;
    60d2:	e021      	b.n	6118 <MicroVsnprintf+0x108>
        case 'c':
          if (usable_length - output_index < 1) {
    60d4:	1b33      	subs	r3, r6, r4
    60d6:	2b00      	cmp	r3, #0
    60d8:	dd07      	ble.n	60ea <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
    60da:	9b01      	ldr	r3, [sp, #4]
    60dc:	1d1a      	adds	r2, r3, #4
    60de:	9201      	str	r2, [sp, #4]
    60e0:	681b      	ldr	r3, [r3, #0]
    60e2:	553b      	strb	r3, [r7, r4]
          current++;
    60e4:	1caa      	adds	r2, r5, #2
          output[output_index++] = va_arg(args, int32_t);
    60e6:	3401      	adds	r4, #1
          break;
    60e8:	e016      	b.n	6118 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    60ea:	1c60      	adds	r0, r4, #1
    60ec:	2300      	movs	r3, #0
    60ee:	553b      	strb	r3, [r7, r4]
            return output_index;
    60f0:	e059      	b.n	61a6 <MicroVsnprintf+0x196>
        case 's':
          char* string = va_arg(args, char*);
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	1d1a      	adds	r2, r3, #4
    60f6:	9201      	str	r2, [sp, #4]
    60f8:	6819      	ldr	r1, [r3, #0]
          int string_idx = 0;
    60fa:	2300      	movs	r3, #0
          while (string_idx + output_index < usable_length &&
    60fc:	18e2      	adds	r2, r4, r3
    60fe:	42b2      	cmp	r2, r6
    6100:	da05      	bge.n	610e <MicroVsnprintf+0xfe>
                 string[string_idx] != '\0') {
    6102:	5cca      	ldrb	r2, [r1, r3]
          while (string_idx + output_index < usable_length &&
    6104:	b11a      	cbz	r2, 610e <MicroVsnprintf+0xfe>
            output[output_index++] = string[string_idx++];
    6106:	3301      	adds	r3, #1
    6108:	553a      	strb	r2, [r7, r4]
    610a:	3401      	adds	r4, #1
          while (string_idx + output_index < usable_length &&
    610c:	e7f6      	b.n	60fc <MicroVsnprintf+0xec>
          }
          current++;
    610e:	1caa      	adds	r2, r5, #2
    6110:	e002      	b.n	6118 <MicroVsnprintf+0x108>
      }
    } else {
      output[output_index++] = *current++;
    6112:	1c6a      	adds	r2, r5, #1
    6114:	553b      	strb	r3, [r7, r4]
    6116:	3401      	adds	r4, #1
          output[output_index++] = va_arg(args, int32_t);
    6118:	4615      	mov	r5, r2
  while (*current != '\0' && output_index < usable_length) {
    611a:	782b      	ldrb	r3, [r5, #0]
    611c:	2b00      	cmp	r3, #0
    611e:	d03f      	beq.n	61a0 <MicroVsnprintf+0x190>
    6120:	42b4      	cmp	r4, r6
    6122:	da3d      	bge.n	61a0 <MicroVsnprintf+0x190>
    if (*current == '%') {
    6124:	2b25      	cmp	r3, #37	; 0x25
    6126:	d1f4      	bne.n	6112 <MicroVsnprintf+0x102>
      current++;
    6128:	1c6a      	adds	r2, r5, #1
      switch (*current) {
    612a:	786b      	ldrb	r3, [r5, #1]
    612c:	2b25      	cmp	r3, #37	; 0x25
    612e:	d0cd      	beq.n	60cc <MicroVsnprintf+0xbc>
    6130:	d3f2      	bcc.n	6118 <MicroVsnprintf+0x108>
    6132:	2b78      	cmp	r3, #120	; 0x78
    6134:	d8f0      	bhi.n	6118 <MicroVsnprintf+0x108>
    6136:	2b63      	cmp	r3, #99	; 0x63
    6138:	d3ee      	bcc.n	6118 <MicroVsnprintf+0x108>
    613a:	3b63      	subs	r3, #99	; 0x63
    613c:	2b15      	cmp	r3, #21
    613e:	d8eb      	bhi.n	6118 <MicroVsnprintf+0x108>
    6140:	a101      	add	r1, pc, #4	; (adr r1, 6148 <MicroVsnprintf+0x138>)
    6142:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    6146:	bf00      	nop
    6148:	000060d5 	.word	0x000060d5
    614c:	00006021 	.word	0x00006021
    6150:	00006119 	.word	0x00006119
    6154:	00006093 	.word	0x00006093
    6158:	00006119 	.word	0x00006119
    615c:	00006119 	.word	0x00006119
    6160:	00006119 	.word	0x00006119
    6164:	00006119 	.word	0x00006119
    6168:	00006119 	.word	0x00006119
    616c:	00006119 	.word	0x00006119
    6170:	00006119 	.word	0x00006119
    6174:	00006119 	.word	0x00006119
    6178:	00006119 	.word	0x00006119
    617c:	00006119 	.word	0x00006119
    6180:	00006119 	.word	0x00006119
    6184:	00006119 	.word	0x00006119
    6188:	000060f3 	.word	0x000060f3
    618c:	00006119 	.word	0x00006119
    6190:	00006043 	.word	0x00006043
    6194:	00006119 	.word	0x00006119
    6198:	00006119 	.word	0x00006119
    619c:	00006065 	.word	0x00006065
    }
  }
  output[output_index++] = '\0';
    61a0:	1c60      	adds	r0, r4, #1
    61a2:	2300      	movs	r3, #0
    61a4:	553b      	strb	r3, [r7, r4]
  return output_index;
}
    61a6:	b003      	add	sp, #12
    61a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61aa:	bf00      	nop
    61ac:	41600000 	.word	0x41600000

000061b0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    61b0:	b570      	push	{r4, r5, r6, lr}
    61b2:	4604      	mov	r4, r0
    61b4:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    61b6:	f007 fc4f 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    61ba:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    61bc:	4630      	mov	r0, r6
    61be:	f007 fc51 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    61c2:	2808      	cmp	r0, #8
    61c4:	d918      	bls.n	61f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>
    61c6:	f106 0008 	add.w	r0, r6, #8
    61ca:	f007 fc4b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    61ce:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    61d0:	b1a0      	cbz	r0, 61fc <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
    61d2:	4620      	mov	r0, r4
    61d4:	f007 fc3a 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    61d8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    61da:	6820      	ldr	r0, [r4, #0]
    61dc:	f007 fc35 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    61e0:	4285      	cmp	r5, r0
    61e2:	d20d      	bcs.n	6200 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x50>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    61e4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    61e6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    61ea:	4620      	mov	r0, r4
    61ec:	f007 fc2e 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
    61f0:	4420      	add	r0, r4
    61f2:	f008 ff32 	bl	f05a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
}
    61f6:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    61f8:	2000      	movs	r0, #0
    61fa:	e7e8      	b.n	61ce <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    61fc:	2400      	movs	r4, #0
    61fe:	e7ec      	b.n	61da <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    FLATBUFFERS_ASSERT(i < size());
    6200:	4b03      	ldr	r3, [pc, #12]	; (6210 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>)
    6202:	4a04      	ldr	r2, [pc, #16]	; (6214 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x64>)
    6204:	f44f 7183 	mov.w	r1, #262	; 0x106
    6208:	4803      	ldr	r0, [pc, #12]	; (6218 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x68>)
    620a:	f006 f9b5 	bl	c578 <__assert_func>
    620e:	bf00      	nop
    6210:	000554a0 	.word	0x000554a0
    6214:	000555f0 	.word	0x000555f0
    6218:	0005556c 	.word	0x0005556c

0000621c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    621c:	6943      	ldr	r3, [r0, #20]
    621e:	2b20      	cmp	r3, #32
    6220:	d007      	beq.n	6232 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    6222:	b2da      	uxtb	r2, r3
  return (v < low) || (high < v);
    6224:	2a91      	cmp	r2, #145	; 0x91
    6226:	d806      	bhi.n	6236 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1a>
  const size_t index = static_cast<size_t>(e);
    6228:	4613      	mov	r3, r2
  return EnumNamesBuiltinOperator()[index];
    622a:	4a04      	ldr	r2, [pc, #16]	; (623c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    622c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6230:	4770      	bx	lr
    return registration->custom_name;
    6232:	6980      	ldr	r0, [r0, #24]
    6234:	4770      	bx	lr
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6236:	4802      	ldr	r0, [pc, #8]	; (6240 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>)
  }
}
    6238:	4770      	bx	lr
    623a:	bf00      	nop
    623c:	00055ffc 	.word	0x00055ffc
    6240:	00011220 	.word	0x00011220

00006244 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    6244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6248:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    624a:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    624e:	2600      	movs	r6, #0
    6250:	e024      	b.n	629c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x58>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    6252:	4621      	mov	r1, r4
    6254:	68e8      	ldr	r0, [r5, #12]
    6256:	f009 f937 	bl	f4c8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    625a:	3401      	adds	r4, #1
    625c:	42bc      	cmp	r4, r7
    625e:	d21c      	bcs.n	629a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6260:	692b      	ldr	r3, [r5, #16]
    6262:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    6266:	212c      	movs	r1, #44	; 0x2c
    6268:	fb01 3104 	mla	r1, r1, r4, r3
      const TfLiteRegistration* registration =
    626c:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
    6270:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6274:	2b00      	cmp	r3, #0
    6276:	d0ec      	beq.n	6252 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    6278:	6868      	ldr	r0, [r5, #4]
    627a:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
    627c:	4682      	mov	sl, r0
    627e:	2800      	cmp	r0, #0
    6280:	d0e7      	beq.n	6252 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    6282:	4648      	mov	r0, r9
    6284:	f7ff ffca 	bl	621c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6288:	4601      	mov	r1, r0
    628a:	4653      	mov	r3, sl
    628c:	4622      	mov	r2, r4
    628e:	480c      	ldr	r0, [pc, #48]	; (62c0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    6290:	f008 fdb9 	bl	ee06 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6294:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    6296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    629a:	3601      	adds	r6, #1
    629c:	69ab      	ldr	r3, [r5, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    629e:	6818      	ldr	r0, [r3, #0]
    62a0:	f007 fbd3 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    62a4:	4286      	cmp	r6, r0
    62a6:	d207      	bcs.n	62b8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    current_subgraph_index_ = subgraph_idx;
    62a8:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    62aa:	4631      	mov	r1, r6
    62ac:	68a8      	ldr	r0, [r5, #8]
    62ae:	f7ff ff7f 	bl	61b0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    62b2:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    62b4:	2400      	movs	r4, #0
    62b6:	e7d1      	b.n	625c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x18>
  current_subgraph_index_ = previous_subgraph_idx;
    62b8:	f8c5 8014 	str.w	r8, [r5, #20]
  return kTfLiteOk;
    62bc:	2000      	movs	r0, #0
    62be:	e7ea      	b.n	6296 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x52>
    62c0:	000556e8 	.word	0x000556e8

000062c4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    62c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62c8:	b083      	sub	sp, #12
    62ca:	4606      	mov	r6, r0
    62cc:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    62ce:	f8d0 b014 	ldr.w	fp, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    62d2:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    62d4:	6983      	ldr	r3, [r0, #24]
    62d6:	6818      	ldr	r0, [r3, #0]
    62d8:	f007 fbb7 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    62dc:	4284      	cmp	r4, r0
    62de:	d207      	bcs.n	62f0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x2c>
    62e0:	46a2      	mov	sl, r4
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    62e2:	4621      	mov	r1, r4
    62e4:	68b0      	ldr	r0, [r6, #8]
    62e6:	f7ff ff63 	bl	61b0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    62ea:	4681      	mov	r9, r0
  for (size_t i = 0; i < operators_size; ++i) {
    62ec:	2700      	movs	r7, #0
    62ee:	e01d      	b.n	632c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    62f0:	4602      	mov	r2, r0
    62f2:	4621      	mov	r1, r4
    62f4:	4827      	ldr	r0, [pc, #156]	; (6394 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd0>)
    62f6:	f008 fd86 	bl	ee06 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    62fa:	2501      	movs	r5, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    62fc:	4628      	mov	r0, r5
    62fe:	b003      	add	sp, #12
    6300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK(registration->invoke);
    6304:	f009 fea6 	bl	10054 <abort>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    6308:	4640      	mov	r0, r8
    630a:	f7ff ff87 	bl	621c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    630e:	4601      	mov	r1, r0
    6310:	462b      	mov	r3, r5
    6312:	463a      	mov	r2, r7
    6314:	4820      	ldr	r0, [pc, #128]	; (6398 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd4>)
    6316:	f008 fd76 	bl	ee06 <_Z11MicroPrintfPKcz>
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
    631a:	2c00      	cmp	r4, #0
    631c:	d0ee      	beq.n	62fc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
      profiler_->EndEvent(event_handle_);
    631e:	6823      	ldr	r3, [r4, #0]
    6320:	68db      	ldr	r3, [r3, #12]
    6322:	9900      	ldr	r1, [sp, #0]
    6324:	4620      	mov	r0, r4
    6326:	4798      	blx	r3
    6328:	e7e8      	b.n	62fc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
  for (size_t i = 0; i < operators_size; ++i) {
    632a:	3701      	adds	r7, #1
    632c:	454f      	cmp	r7, r9
    632e:	d22d      	bcs.n	638c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6330:	6933      	ldr	r3, [r6, #16]
    6332:	f853 303a 	ldr.w	r3, [r3, sl, lsl #3]
    6336:	252c      	movs	r5, #44	; 0x2c
    6338:	fb05 3507 	mla	r5, r5, r7, r3
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    633c:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    6340:	4640      	mov	r0, r8
    6342:	f7ff ff6b 	bl	621c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6346:	4601      	mov	r1, r0
    6348:	6873      	ldr	r3, [r6, #4]
    634a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
      : profiler_(profiler) {
    634c:	2300      	movs	r3, #0
    634e:	9300      	str	r3, [sp, #0]
    if (profiler_ != nullptr) {
    6350:	b124      	cbz	r4, 635c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x98>
      event_handle_ = profiler_->BeginEvent(tag);
    6352:	6823      	ldr	r3, [r4, #0]
    6354:	689b      	ldr	r3, [r3, #8]
    6356:	4620      	mov	r0, r4
    6358:	4798      	blx	r3
    635a:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
    635c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6360:	2b00      	cmp	r3, #0
    6362:	d0cf      	beq.n	6304 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x40>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    6364:	4629      	mov	r1, r5
    6366:	6870      	ldr	r0, [r6, #4]
    6368:	4798      	blx	r3
    636a:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
    636c:	68f0      	ldr	r0, [r6, #12]
    636e:	6803      	ldr	r3, [r0, #0]
    6370:	689b      	ldr	r3, [r3, #8]
    6372:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
    6374:	2d01      	cmp	r5, #1
    6376:	d0c7      	beq.n	6308 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x44>
    } else if (invoke_status != kTfLiteOk) {
    6378:	2d00      	cmp	r5, #0
    637a:	d1ce      	bne.n	631a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x56>
    if (profiler_ != nullptr) {
    637c:	2c00      	cmp	r4, #0
    637e:	d0d4      	beq.n	632a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
      profiler_->EndEvent(event_handle_);
    6380:	6823      	ldr	r3, [r4, #0]
    6382:	68db      	ldr	r3, [r3, #12]
    6384:	9900      	ldr	r1, [sp, #0]
    6386:	4620      	mov	r0, r4
    6388:	4798      	blx	r3
    638a:	e7ce      	b.n	632a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
  current_subgraph_index_ = previous_subgraph_idx;
    638c:	f8c6 b014 	str.w	fp, [r6, #20]
  return kTfLiteOk;
    6390:	2500      	movs	r5, #0
    6392:	e7b3      	b.n	62fc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
    6394:	00055720 	.word	0x00055720
    6398:	00055754 	.word	0x00055754

0000639c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    639c:	b570      	push	{r4, r5, r6, lr}
    639e:	4604      	mov	r4, r0
    63a0:	4615      	mov	r5, r2
      current_subgraph_index_(0) {
    63a2:	4a11      	ldr	r2, [pc, #68]	; (63e8 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x4c>)
    63a4:	6002      	str	r2, [r0, #0]
    63a6:	6041      	str	r1, [r0, #4]
    63a8:	6085      	str	r5, [r0, #8]
    63aa:	60c3      	str	r3, [r0, #12]
    63ac:	2300      	movs	r3, #0
    63ae:	6103      	str	r3, [r0, #16]
    63b0:	6143      	str	r3, [r0, #20]
  if (model != nullptr) {
    63b2:	b19d      	cbz	r5, 63dc <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    63b4:	4628      	mov	r0, r5
    63b6:	f007 fb4f 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    63ba:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    63bc:	4630      	mov	r0, r6
    63be:	f007 fb51 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    63c2:	2808      	cmp	r0, #8
    63c4:	d90c      	bls.n	63e0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    63c6:	f106 0008 	add.w	r0, r6, #8
    63ca:	f007 fb4b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    63ce:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    63d0:	b140      	cbz	r0, 63e4 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x48>
    63d2:	4628      	mov	r0, r5
    63d4:	f007 fb3a 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    63d8:	4405      	add	r5, r0
    subgraphs_ = model->subgraphs();
    63da:	61a5      	str	r5, [r4, #24]
}
    63dc:	4620      	mov	r0, r4
    63de:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    63e0:	2000      	movs	r0, #0
    63e2:	e7f4      	b.n	63ce <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x32>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    63e4:	2500      	movs	r5, #0
    63e6:	e7f8      	b.n	63da <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3e>
    63e8:	00056250 	.word	0x00056250

000063ec <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    63ec:	b570      	push	{r4, r5, r6, lr}
    63ee:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    63f0:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    63f2:	4620      	mov	r0, r4
    63f4:	f007 fb30 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    63f8:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    63fa:	4630      	mov	r0, r6
    63fc:	f007 fb32 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6400:	2808      	cmp	r0, #8
    6402:	d92c      	bls.n	645e <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x72>
    6404:	f106 0008 	add.w	r0, r6, #8
    6408:	f007 fb2c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    640c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    640e:	b340      	cbz	r0, 6462 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x76>
    6410:	4620      	mov	r0, r4
    6412:	f007 fb1b 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6416:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6418:	6820      	ldr	r0, [r4, #0]
    641a:	f007 fb16 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    641e:	4285      	cmp	r5, r0
    6420:	d221      	bcs.n	6466 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x7a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6422:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6424:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6428:	4620      	mov	r0, r4
    642a:	f007 fb0f 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    642e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6430:	4620      	mov	r0, r4
    6432:	f007 fb11 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6436:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6438:	4628      	mov	r0, r5
    643a:	f007 fb13 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    643e:	2808      	cmp	r0, #8
    6440:	d918      	bls.n	6474 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x88>
    6442:	f105 0008 	add.w	r0, r5, #8
    6446:	f007 fb0d 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    644a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    644c:	b1a0      	cbz	r0, 6478 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x8c>
    644e:	4620      	mov	r0, r4
    6450:	f007 fafc 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6454:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6456:	6820      	ldr	r0, [r4, #0]
    6458:	f007 faf7 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    645c:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    645e:	2000      	movs	r0, #0
    6460:	e7d4      	b.n	640c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6462:	2400      	movs	r4, #0
    6464:	e7d8      	b.n	6418 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6466:	4b05      	ldr	r3, [pc, #20]	; (647c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x90>)
    6468:	4a05      	ldr	r2, [pc, #20]	; (6480 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x94>)
    646a:	f44f 7183 	mov.w	r1, #262	; 0x106
    646e:	4805      	ldr	r0, [pc, #20]	; (6484 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x98>)
    6470:	f006 f882 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6474:	2000      	movs	r0, #0
    6476:	e7e8      	b.n	644a <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6478:	2400      	movs	r4, #0
    647a:	e7ec      	b.n	6456 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x6a>
    647c:	000554a0 	.word	0x000554a0
    6480:	000555f0 	.word	0x000555f0
    6484:	0005556c 	.word	0x0005556c

00006488 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    6488:	b570      	push	{r4, r5, r6, lr}
    648a:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    648c:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    648e:	4620      	mov	r0, r4
    6490:	f007 fae2 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6494:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6496:	4630      	mov	r0, r6
    6498:	f007 fae4 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    649c:	2808      	cmp	r0, #8
    649e:	d92b      	bls.n	64f8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x70>
    64a0:	f106 0008 	add.w	r0, r6, #8
    64a4:	f007 fade 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    64a8:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    64aa:	b338      	cbz	r0, 64fc <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x74>
    64ac:	4620      	mov	r0, r4
    64ae:	f007 facd 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    64b2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    64b4:	6820      	ldr	r0, [r4, #0]
    64b6:	f007 fac8 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    64ba:	4285      	cmp	r5, r0
    64bc:	d220      	bcs.n	6500 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x78>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    64be:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    64c0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    64c4:	4620      	mov	r0, r4
    64c6:	f007 fac1 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    64ca:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    64cc:	4620      	mov	r0, r4
    64ce:	f007 fac3 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    64d2:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    64d4:	4628      	mov	r0, r5
    64d6:	f007 fac5 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    64da:	2806      	cmp	r0, #6
    64dc:	d917      	bls.n	650e <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x86>
    64de:	1da8      	adds	r0, r5, #6
    64e0:	f007 fac0 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    64e4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    64e6:	b1a0      	cbz	r0, 6512 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x8a>
    64e8:	4620      	mov	r0, r4
    64ea:	f007 faaf 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    64ee:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    64f0:	6820      	ldr	r0, [r4, #0]
    64f2:	f007 faaa 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    64f6:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    64f8:	2000      	movs	r0, #0
    64fa:	e7d5      	b.n	64a8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    64fc:	2400      	movs	r4, #0
    64fe:	e7d9      	b.n	64b4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6500:	4b05      	ldr	r3, [pc, #20]	; (6518 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x90>)
    6502:	4a06      	ldr	r2, [pc, #24]	; (651c <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x94>)
    6504:	f44f 7183 	mov.w	r1, #262	; 0x106
    6508:	4805      	ldr	r0, [pc, #20]	; (6520 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x98>)
    650a:	f006 f835 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    650e:	2000      	movs	r0, #0
    6510:	e7e8      	b.n	64e4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6512:	2400      	movs	r4, #0
    6514:	e7ec      	b.n	64f0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x68>
    6516:	bf00      	nop
    6518:	000554a0 	.word	0x000554a0
    651c:	000555f0 	.word	0x000555f0
    6520:	0005556c 	.word	0x0005556c

00006524 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    6524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6528:	4606      	mov	r6, r0
    652a:	460d      	mov	r5, r1
    652c:	4617      	mov	r7, r2
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    652e:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6530:	4620      	mov	r0, r4
    6532:	f007 fa91 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6536:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    653a:	4640      	mov	r0, r8
    653c:	f007 fa92 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6540:	2808      	cmp	r0, #8
    6542:	d93d      	bls.n	65c0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x9c>
    6544:	f108 0008 	add.w	r0, r8, #8
    6548:	f007 fa8c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    654c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    654e:	b3c8      	cbz	r0, 65c4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa0>
    6550:	4620      	mov	r0, r4
    6552:	f007 fa7b 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6556:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6558:	6820      	ldr	r0, [r4, #0]
    655a:	f007 fa76 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    655e:	4285      	cmp	r5, r0
    6560:	d232      	bcs.n	65c8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6562:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6564:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6568:	4620      	mov	r0, r4
    656a:	f007 fa6f 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    656e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6570:	4620      	mov	r0, r4
    6572:	f007 fa71 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6576:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    657a:	4640      	mov	r0, r8
    657c:	f007 fa72 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6580:	2808      	cmp	r0, #8
    6582:	d928      	bls.n	65d6 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb2>
    6584:	f108 0008 	add.w	r0, r8, #8
    6588:	f007 fa6c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    658c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    658e:	b320      	cbz	r0, 65da <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb6>
    6590:	4620      	mov	r0, r4
    6592:	f007 fa5b 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6596:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6598:	6820      	ldr	r0, [r4, #0]
    659a:	f007 fa56 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    659e:	4287      	cmp	r7, r0
    65a0:	d21d      	bcs.n	65de <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    65a2:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    65a4:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    65a8:	f007 fa55 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    65ac:	6931      	ldr	r1, [r6, #16]
    65ae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    65b2:	686b      	ldr	r3, [r5, #4]
    65b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    65b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    65bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    65c0:	2000      	movs	r0, #0
    65c2:	e7c3      	b.n	654c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    65c4:	2400      	movs	r4, #0
    65c6:	e7c7      	b.n	6558 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    65c8:	4b08      	ldr	r3, [pc, #32]	; (65ec <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    65ca:	4a09      	ldr	r2, [pc, #36]	; (65f0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xcc>)
    65cc:	f44f 7183 	mov.w	r1, #262	; 0x106
    65d0:	4808      	ldr	r0, [pc, #32]	; (65f4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    65d2:	f005 ffd1 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    65d6:	2000      	movs	r0, #0
    65d8:	e7d8      	b.n	658c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    65da:	2400      	movs	r4, #0
    65dc:	e7dc      	b.n	6598 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    65de:	4b03      	ldr	r3, [pc, #12]	; (65ec <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    65e0:	4a05      	ldr	r2, [pc, #20]	; (65f8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd4>)
    65e2:	f44f 7183 	mov.w	r1, #262	; 0x106
    65e6:	4803      	ldr	r0, [pc, #12]	; (65f4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    65e8:	f005 ffc6 	bl	c578 <__assert_func>
    65ec:	000554a0 	.word	0x000554a0
    65f0:	000555f0 	.word	0x000555f0
    65f4:	0005556c 	.word	0x0005556c
    65f8:	000554ac 	.word	0x000554ac

000065fc <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
                                               int input_idx) {
    65fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6600:	4606      	mov	r6, r0
    6602:	460d      	mov	r5, r1
    6604:	4617      	mov	r7, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    6606:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6608:	4620      	mov	r0, r4
    660a:	f007 fa25 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    660e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6612:	4640      	mov	r0, r8
    6614:	f007 fa26 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6618:	2808      	cmp	r0, #8
    661a:	d93d      	bls.n	6698 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x9c>
    661c:	f108 0008 	add.w	r0, r8, #8
    6620:	f007 fa20 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6624:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6626:	b3c8      	cbz	r0, 669c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa0>
    6628:	4620      	mov	r0, r4
    662a:	f007 fa0f 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    662e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6630:	6820      	ldr	r0, [r4, #0]
    6632:	f007 fa0a 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6636:	4285      	cmp	r5, r0
    6638:	d232      	bcs.n	66a0 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    663a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    663c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6640:	4620      	mov	r0, r4
    6642:	f007 fa03 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6646:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6648:	4620      	mov	r0, r4
    664a:	f007 fa05 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    664e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6652:	4640      	mov	r0, r8
    6654:	f007 fa06 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6658:	2806      	cmp	r0, #6
    665a:	d928      	bls.n	66ae <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb2>
    665c:	f108 0006 	add.w	r0, r8, #6
    6660:	f007 fa00 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6664:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6666:	b320      	cbz	r0, 66b2 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb6>
    6668:	4620      	mov	r0, r4
    666a:	f007 f9ef 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    666e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6670:	6820      	ldr	r0, [r4, #0]
    6672:	f007 f9ea 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6676:	4287      	cmp	r7, r0
    6678:	d21d      	bcs.n	66b6 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    667a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    667c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6680:	f007 f9e9 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6684:	6931      	ldr	r1, [r6, #16]
    6686:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    668a:	686b      	ldr	r3, [r5, #4]
    668c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6690:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6698:	2000      	movs	r0, #0
    669a:	e7c3      	b.n	6624 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    669c:	2400      	movs	r4, #0
    669e:	e7c7      	b.n	6630 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    66a0:	4b08      	ldr	r3, [pc, #32]	; (66c4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    66a2:	4a09      	ldr	r2, [pc, #36]	; (66c8 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xcc>)
    66a4:	f44f 7183 	mov.w	r1, #262	; 0x106
    66a8:	4808      	ldr	r0, [pc, #32]	; (66cc <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    66aa:	f005 ff65 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66ae:	2000      	movs	r0, #0
    66b0:	e7d8      	b.n	6664 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66b2:	2400      	movs	r4, #0
    66b4:	e7dc      	b.n	6670 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    66b6:	4b03      	ldr	r3, [pc, #12]	; (66c4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    66b8:	4a05      	ldr	r2, [pc, #20]	; (66d0 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd4>)
    66ba:	f44f 7183 	mov.w	r1, #262	; 0x106
    66be:	4803      	ldr	r0, [pc, #12]	; (66cc <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    66c0:	f005 ff5a 	bl	c578 <__assert_func>
    66c4:	000554a0 	.word	0x000554a0
    66c8:	000555f0 	.word	0x000555f0
    66cc:	0005556c 	.word	0x0005556c
    66d0:	000554ac 	.word	0x000554ac

000066d4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    66d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66d8:	b083      	sub	sp, #12
    66da:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    66dc:	2700      	movs	r7, #0
    66de:	e0c8      	b.n	6872 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19e>
    66e0:	4b71      	ldr	r3, [pc, #452]	; (68a8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    66e2:	4a72      	ldr	r2, [pc, #456]	; (68ac <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d8>)
    66e4:	f44f 7183 	mov.w	r1, #262	; 0x106
    66e8:	4871      	ldr	r0, [pc, #452]	; (68b0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    66ea:	f005 ff45 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66ee:	2000      	movs	r0, #0
    66f0:	e01d      	b.n	672e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66f2:	2400      	movs	r4, #0
    66f4:	e022      	b.n	673c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x68>
    FLATBUFFERS_ASSERT(i < size());
    66f6:	4b6c      	ldr	r3, [pc, #432]	; (68a8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    66f8:	4a6e      	ldr	r2, [pc, #440]	; (68b4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e0>)
    66fa:	f44f 7183 	mov.w	r1, #262	; 0x106
    66fe:	486c      	ldr	r0, [pc, #432]	; (68b0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6700:	f005 ff3a 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6704:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6706:	b118      	cbz	r0, 6710 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
    6708:	4420      	add	r0, r4
    670a:	f008 fcc5 	bl	f098 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    670e:	e000      	b.n	6712 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3e>
    6710:	2000      	movs	r0, #0
      if (tensor->is_variable()) {
    6712:	bba0      	cbnz	r0, 677e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6714:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6716:	4630      	mov	r0, r6
    6718:	f007 f99e 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    671c:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    671e:	4620      	mov	r0, r4
    6720:	f007 f9a0 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6724:	2804      	cmp	r0, #4
    6726:	d9e2      	bls.n	66ee <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1a>
    6728:	1d20      	adds	r0, r4, #4
    672a:	f007 f99b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    672e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6730:	2800      	cmp	r0, #0
    6732:	d0de      	beq.n	66f2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
    6734:	4620      	mov	r0, r4
    6736:	f007 f989 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    673a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    673c:	6820      	ldr	r0, [r4, #0]
    673e:	f007 f984 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6742:	4285      	cmp	r5, r0
    6744:	f080 8094 	bcs.w	6870 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19c>
    6748:	6820      	ldr	r0, [r4, #0]
    674a:	f007 f97e 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    674e:	4285      	cmp	r5, r0
    6750:	d2d1      	bcs.n	66f6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6752:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6754:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6758:	4620      	mov	r0, r4
    675a:	f007 f977 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    675e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6760:	4620      	mov	r0, r4
    6762:	f007 f979 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6766:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    676a:	4648      	mov	r0, r9
    676c:	f007 f97a 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6770:	280e      	cmp	r0, #14
    6772:	d9c7      	bls.n	6704 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x30>
    6774:	f109 000e 	add.w	r0, r9, #14
    6778:	f007 f974 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    677c:	e7c3      	b.n	6706 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x32>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    677e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6782:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    6786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    678a:	6858      	ldr	r0, [r3, #4]
    678c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6790:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    6794:	a901      	add	r1, sp, #4
    6796:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    679a:	f008 fb98 	bl	eece <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    679e:	4603      	mov	r3, r0
    67a0:	2800      	cmp	r0, #0
    67a2:	d17d      	bne.n	68a0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1cc>
    return data_ - ReadScalar<soffset_t>(data_);
    67a4:	4620      	mov	r0, r4
    67a6:	f007 f957 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    67aa:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    67ae:	4648      	mov	r0, r9
    67b0:	f007 f958 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    67b4:	2806      	cmp	r0, #6
    67b6:	d914      	bls.n	67e2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    67b8:	f109 0006 	add.w	r0, r9, #6
    67bc:	f007 f952 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    67c0:	b188      	cbz	r0, 67e6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
    67c2:	4420      	add	r0, r4
    67c4:	f008 fba5 	bl	ef12 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        if (tensor->type() == tflite::TensorType_INT8) {
    67c8:	2809      	cmp	r0, #9
    67ca:	d00e      	beq.n	67ea <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x116>
        int value = 0;
    67cc:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    67ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
    67d2:	4453      	add	r3, sl
    67d4:	685b      	ldr	r3, [r3, #4]
    67d6:	9a01      	ldr	r2, [sp, #4]
    67d8:	f853 000b 	ldr.w	r0, [r3, fp]
    67dc:	f009 fc53 	bl	10086 <memset>
    67e0:	e798      	b.n	6714 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    67e2:	2000      	movs	r0, #0
    67e4:	e7ec      	b.n	67c0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    67e6:	2000      	movs	r0, #0
    67e8:	e7ee      	b.n	67c8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
    return data_ - ReadScalar<soffset_t>(data_);
    67ea:	4620      	mov	r0, r4
    67ec:	f007 f934 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    67f0:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    67f4:	4648      	mov	r0, r9
    67f6:	f007 f935 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    67fa:	280c      	cmp	r0, #12
    67fc:	d928      	bls.n	6850 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17c>
    67fe:	f109 000c 	add.w	r0, r9, #12
    6802:	f007 f92f 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6806:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6808:	b320      	cbz	r0, 6854 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x180>
    680a:	4620      	mov	r0, r4
    680c:	f007 f91e 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6810:	4404      	add	r4, r0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    6812:	46a1      	mov	r9, r4
    return data_ - ReadScalar<soffset_t>(data_);
    6814:	4620      	mov	r0, r4
    6816:	f007 f91f 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    681a:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    681c:	4620      	mov	r0, r4
    681e:	f007 f921 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6822:	280a      	cmp	r0, #10
    6824:	d918      	bls.n	6858 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x184>
    6826:	f104 000a 	add.w	r0, r4, #10
    682a:	f007 f91b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    682e:	4481      	add	r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6830:	b1a0      	cbz	r0, 685c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x188>
    6832:	4648      	mov	r0, r9
    6834:	f007 f90a 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6838:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    683a:	f8d9 0000 	ldr.w	r0, [r9]
    683e:	f007 f904 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6842:	b170      	cbz	r0, 6862 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18e>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6844:	e9d9 0101 	ldrd	r0, r1, [r9, #4]
    6848:	f008 fc2b 	bl	f0a2 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    684c:	4601      	mov	r1, r0
    684e:	e7be      	b.n	67ce <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6850:	2000      	movs	r0, #0
    6852:	e7d8      	b.n	6806 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6854:	2400      	movs	r4, #0
    6856:	e7dc      	b.n	6812 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x13e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6858:	2000      	movs	r0, #0
    685a:	e7e8      	b.n	682e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    685c:	f04f 0900 	mov.w	r9, #0
    6860:	e7eb      	b.n	683a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x166>
    FLATBUFFERS_ASSERT(i < size());
    6862:	4b11      	ldr	r3, [pc, #68]	; (68a8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6864:	4a14      	ldr	r2, [pc, #80]	; (68b8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e4>)
    6866:	f44f 7183 	mov.w	r1, #262	; 0x106
    686a:	4811      	ldr	r0, [pc, #68]	; (68b0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    686c:	f005 fe84 	bl	c578 <__assert_func>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6870:	3701      	adds	r7, #1
    6872:	f8d8 6018 	ldr.w	r6, [r8, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6876:	6830      	ldr	r0, [r6, #0]
    6878:	f007 f8e7 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    687c:	4287      	cmp	r7, r0
    687e:	d20e      	bcs.n	689e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1ca>
    6880:	6830      	ldr	r0, [r6, #0]
    6882:	f007 f8e2 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6886:	4287      	cmp	r7, r0
    6888:	f4bf af2a 	bcs.w	66e0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    688c:	3604      	adds	r6, #4
    p += i * sizeof(uoffset_t);
    688e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6892:	4630      	mov	r0, r6
    6894:	f007 f8da 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6898:	4406      	add	r6, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    689a:	2500      	movs	r5, #0
    689c:	e73b      	b.n	6716 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x42>
  return kTfLiteOk;
    689e:	2300      	movs	r3, #0
}
    68a0:	4618      	mov	r0, r3
    68a2:	b003      	add	sp, #12
    68a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68a8:	000554a0 	.word	0x000554a0
    68ac:	000555f0 	.word	0x000555f0
    68b0:	0005556c 	.word	0x0005556c
    68b4:	00055788 	.word	0x00055788
    68b8:	0005587c 	.word	0x0005587c

000068bc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
    68bc:	6180      	str	r0, [r0, #24]
  context_.ReportError = ReportOpError;
    68be:	4b05      	ldr	r3, [pc, #20]	; (68d4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x18>)
    68c0:	6203      	str	r3, [r0, #32]
  context_.GetTensor = GetTensor;
    68c2:	4b05      	ldr	r3, [pc, #20]	; (68d8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x1c>)
    68c4:	65c3      	str	r3, [r0, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    68c6:	4b05      	ldr	r3, [pc, #20]	; (68dc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x20>)
    68c8:	6603      	str	r3, [r0, #96]	; 0x60
  context_.profiler = profiler;
    68ca:	6401      	str	r1, [r0, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
    68cc:	2300      	movs	r3, #0
    68ce:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
}
    68d2:	4770      	bx	lr
    68d4:	0000f21f 	.word	0x0000f21f
    68d8:	0000f1cd 	.word	0x0000f1cd
    68dc:	0000f1eb 	.word	0x0000f1eb

000068e0 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    68e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68e2:	4605      	mov	r5, r0
    68e4:	460e      	mov	r6, r1
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
    68e6:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    68e8:	4620      	mov	r0, r4
    68ea:	f007 f8b5 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    68ee:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    68f0:	4638      	mov	r0, r7
    68f2:	f007 f8b7 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    68f6:	2808      	cmp	r0, #8
    68f8:	d92f      	bls.n	695a <_ZN6tflite16MicroInterpreter6outputEj+0x7a>
    68fa:	f107 0008 	add.w	r0, r7, #8
    68fe:	f007 f8b1 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6902:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6904:	b358      	cbz	r0, 695e <_ZN6tflite16MicroInterpreter6outputEj+0x7e>
    6906:	4620      	mov	r0, r4
    6908:	f007 f8a0 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    690c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    690e:	6820      	ldr	r0, [r4, #0]
    6910:	f007 f89b 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6914:	b328      	cbz	r0, 6962 <_ZN6tflite16MicroInterpreter6outputEj+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6916:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6918:	4620      	mov	r0, r4
    691a:	f007 f897 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    691e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6920:	4620      	mov	r0, r4
    6922:	f007 f899 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6926:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6928:	4638      	mov	r0, r7
    692a:	f007 f89b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    692e:	2808      	cmp	r0, #8
    6930:	d91e      	bls.n	6970 <_ZN6tflite16MicroInterpreter6outputEj+0x90>
    6932:	f107 0008 	add.w	r0, r7, #8
    6936:	f007 f895 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    693a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    693c:	b1d0      	cbz	r0, 6974 <_ZN6tflite16MicroInterpreter6outputEj+0x94>
    693e:	4620      	mov	r0, r4
    6940:	f007 f884 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6944:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6946:	6820      	ldr	r0, [r4, #0]
    6948:	f007 f87f 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  const size_t length = outputs_size();
  if (index >= length) {
    694c:	4286      	cmp	r6, r0
    694e:	d213      	bcs.n	6978 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return output_tensors_[index];
    6950:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6954:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    6958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    695a:	2000      	movs	r0, #0
    695c:	e7d1      	b.n	6902 <_ZN6tflite16MicroInterpreter6outputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    695e:	2400      	movs	r4, #0
    6960:	e7d5      	b.n	690e <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    6962:	4b09      	ldr	r3, [pc, #36]	; (6988 <_ZN6tflite16MicroInterpreter6outputEj+0xa8>)
    6964:	4a09      	ldr	r2, [pc, #36]	; (698c <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
    6966:	f44f 7183 	mov.w	r1, #262	; 0x106
    696a:	4809      	ldr	r0, [pc, #36]	; (6990 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
    696c:	f005 fe04 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6970:	2000      	movs	r0, #0
    6972:	e7e2      	b.n	693a <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6974:	2400      	movs	r4, #0
    6976:	e7e6      	b.n	6946 <_ZN6tflite16MicroInterpreter6outputEj+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6978:	4603      	mov	r3, r0
    697a:	4632      	mov	r2, r6
    697c:	4905      	ldr	r1, [pc, #20]	; (6994 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
    697e:	68a8      	ldr	r0, [r5, #8]
    6980:	f008 ffb6 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6984:	2000      	movs	r0, #0
    6986:	e7e7      	b.n	6958 <_ZN6tflite16MicroInterpreter6outputEj+0x78>
    6988:	000554a0 	.word	0x000554a0
    698c:	000555f0 	.word	0x000555f0
    6990:	0005556c 	.word	0x0005556c
    6994:	00056280 	.word	0x00056280

00006998 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    6998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    699a:	4605      	mov	r5, r0
    699c:	460e      	mov	r6, r1
    return model_->subgraphs()->Get(0)->inputs()->size();
    699e:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    69a0:	4620      	mov	r0, r4
    69a2:	f007 f859 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    69a6:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    69a8:	4638      	mov	r0, r7
    69aa:	f007 f85b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69ae:	2808      	cmp	r0, #8
    69b0:	d92e      	bls.n	6a10 <_ZN6tflite16MicroInterpreter5inputEj+0x78>
    69b2:	f107 0008 	add.w	r0, r7, #8
    69b6:	f007 f855 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    69ba:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69bc:	b350      	cbz	r0, 6a14 <_ZN6tflite16MicroInterpreter5inputEj+0x7c>
    69be:	4620      	mov	r0, r4
    69c0:	f007 f844 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69c4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    69c6:	6820      	ldr	r0, [r4, #0]
    69c8:	f007 f83f 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    69cc:	b320      	cbz	r0, 6a18 <_ZN6tflite16MicroInterpreter5inputEj+0x80>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    69ce:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    69d0:	4620      	mov	r0, r4
    69d2:	f007 f83b 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69d6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    69d8:	4620      	mov	r0, r4
    69da:	f007 f83d 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    69de:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    69e0:	4638      	mov	r0, r7
    69e2:	f007 f83f 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69e6:	2806      	cmp	r0, #6
    69e8:	d91d      	bls.n	6a26 <_ZN6tflite16MicroInterpreter5inputEj+0x8e>
    69ea:	1db8      	adds	r0, r7, #6
    69ec:	f007 f83a 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    69f0:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69f2:	b1d0      	cbz	r0, 6a2a <_ZN6tflite16MicroInterpreter5inputEj+0x92>
    69f4:	4620      	mov	r0, r4
    69f6:	f007 f829 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69fa:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    69fc:	6820      	ldr	r0, [r4, #0]
    69fe:	f007 f824 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  if (index >= length) {
    6a02:	4286      	cmp	r6, r0
    6a04:	d213      	bcs.n	6a2e <_ZN6tflite16MicroInterpreter5inputEj+0x96>
  return input_tensors_[index];
    6a06:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    6a0a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    6a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a10:	2000      	movs	r0, #0
    6a12:	e7d2      	b.n	69ba <_ZN6tflite16MicroInterpreter5inputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a14:	2400      	movs	r4, #0
    6a16:	e7d6      	b.n	69c6 <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    6a18:	4b09      	ldr	r3, [pc, #36]	; (6a40 <_ZN6tflite16MicroInterpreter5inputEj+0xa8>)
    6a1a:	4a0a      	ldr	r2, [pc, #40]	; (6a44 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
    6a1c:	f44f 7183 	mov.w	r1, #262	; 0x106
    6a20:	4809      	ldr	r0, [pc, #36]	; (6a48 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
    6a22:	f005 fda9 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a26:	2000      	movs	r0, #0
    6a28:	e7e2      	b.n	69f0 <_ZN6tflite16MicroInterpreter5inputEj+0x58>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a2a:	2400      	movs	r4, #0
    6a2c:	e7e6      	b.n	69fc <_ZN6tflite16MicroInterpreter5inputEj+0x64>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6a2e:	4603      	mov	r3, r0
    6a30:	4632      	mov	r2, r6
    6a32:	4906      	ldr	r1, [pc, #24]	; (6a4c <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
    6a34:	68a8      	ldr	r0, [r5, #8]
    6a36:	f008 ff5b 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6a3a:	2000      	movs	r0, #0
    6a3c:	e7e7      	b.n	6a0e <_ZN6tflite16MicroInterpreter5inputEj+0x76>
    6a3e:	bf00      	nop
    6a40:	000554a0 	.word	0x000554a0
    6a44:	000555f0 	.word	0x000555f0
    6a48:	0005556c 	.word	0x0005556c
    6a4c:	000562ac 	.word	0x000562ac

00006a50 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    6a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a54:	b08b      	sub	sp, #44	; 0x2c
    6a56:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    6a58:	2300      	movs	r3, #0
    6a5a:	9305      	str	r3, [sp, #20]
    6a5c:	f10b 006c 	add.w	r0, fp, #108	; 0x6c
    6a60:	f008 fb8a 	bl	f178 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    6a64:	9b05      	ldr	r3, [sp, #20]
    6a66:	4298      	cmp	r0, r3
    6a68:	f340 81f6 	ble.w	6e58 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x408>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    6a6c:	f8db 5000 	ldr.w	r5, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
    6a70:	4628      	mov	r0, r5
    6a72:	f006 fff1 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a76:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a78:	4620      	mov	r0, r4
    6a7a:	f006 fff3 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a7e:	2808      	cmp	r0, #8
    6a80:	d927      	bls.n	6ad2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x82>
    6a82:	f104 0008 	add.w	r0, r4, #8
    6a86:	f006 ffed 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6a8a:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a8c:	b318      	cbz	r0, 6ad6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x86>
    6a8e:	4620      	mov	r0, r4
    6a90:	f006 ffdc 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a94:	4404      	add	r4, r0
    6a96:	9e05      	ldr	r6, [sp, #20]
    6a98:	9600      	str	r6, [sp, #0]
  uoffset_t size() const { return EndianScalar(length_); }
    6a9a:	6820      	ldr	r0, [r4, #0]
    6a9c:	f006 ffd5 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6aa0:	4286      	cmp	r6, r0
    6aa2:	d21a      	bcs.n	6ada <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6aa4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6aa6:	9b05      	ldr	r3, [sp, #20]
    6aa8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6aac:	4620      	mov	r0, r4
    6aae:	f006 ffcd 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    6ab2:	1823      	adds	r3, r4, r0
    6ab4:	9302      	str	r3, [sp, #8]
    6ab6:	d017      	beq.n	6ae8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
    return data_ - ReadScalar<soffset_t>(data_);
    6ab8:	4628      	mov	r0, r5
    6aba:	f006 ffcd 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6abe:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ac0:	4620      	mov	r0, r4
    6ac2:	f006 ffcf 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ac6:	2806      	cmp	r0, #6
    6ac8:	d910      	bls.n	6aec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9c>
    6aca:	1da0      	adds	r0, r4, #6
    6acc:	f006 ffca 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6ad0:	e00d      	b.n	6aee <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9e>
    6ad2:	2000      	movs	r0, #0
    6ad4:	e7d9      	b.n	6a8a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ad6:	2400      	movs	r4, #0
    6ad8:	e7dd      	b.n	6a96 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x46>
    FLATBUFFERS_ASSERT(i < size());
    6ada:	4b4e      	ldr	r3, [pc, #312]	; (6c14 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    6adc:	4a4e      	ldr	r2, [pc, #312]	; (6c18 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c8>)
    6ade:	f44f 7183 	mov.w	r1, #262	; 0x106
    6ae2:	484e      	ldr	r0, [pc, #312]	; (6c1c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    6ae4:	f005 fd48 	bl	c578 <__assert_func>
    6ae8:	f009 fab4 	bl	10054 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6aec:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6aee:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6af0:	b178      	cbz	r0, 6b12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc2>
    6af2:	4628      	mov	r0, r5
    6af4:	f006 ffaa 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6af8:	eb05 0900 	add.w	r9, r5, r0
        allocator_.GetBuiltinDataAllocator();
    6afc:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
    6b00:	f008 fd01 	bl	f506 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    6b04:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    6b06:	9802      	ldr	r0, [sp, #8]
    6b08:	f008 faa7 	bl	f05a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    6b0c:	9003      	str	r0, [sp, #12]
    for (size_t i = 0; i < operators_size; ++i) {
    6b0e:	2700      	movs	r7, #0
    6b10:	e0dd      	b.n	6cce <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
    6b12:	f04f 0900 	mov.w	r9, #0
    6b16:	e7f1      	b.n	6afc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b18:	2000      	movs	r0, #0
    6b1a:	e0eb      	b.n	6cf4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b1c:	2400      	movs	r4, #0
    6b1e:	e0f2      	b.n	6d06 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b6>
    FLATBUFFERS_ASSERT(i < size());
    6b20:	4b3c      	ldr	r3, [pc, #240]	; (6c14 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    6b22:	4a3f      	ldr	r2, [pc, #252]	; (6c20 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>)
    6b24:	f44f 7183 	mov.w	r1, #262	; 0x106
    6b28:	483c      	ldr	r0, [pc, #240]	; (6c1c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    6b2a:	f005 fd25 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b2e:	2000      	movs	r0, #0
    6b30:	e103      	b.n	6d3a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ea>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6b32:	2600      	movs	r6, #0
    6b34:	e108      	b.n	6d48 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    6b36:	4631      	mov	r1, r6
    6b38:	483a      	ldr	r0, [pc, #232]	; (6c24 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
    6b3a:	f008 f964 	bl	ee06 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    6b3e:	2301      	movs	r3, #1
    6b40:	461c      	mov	r4, r3
}
    6b42:	4620      	mov	r0, r4
    6b44:	b00b      	add	sp, #44	; 0x2c
    6b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    6b4a:	4b32      	ldr	r3, [pc, #200]	; (6c14 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    6b4c:	4a36      	ldr	r2, [pc, #216]	; (6c28 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
    6b4e:	f44f 7183 	mov.w	r1, #262	; 0x106
    6b52:	4832      	ldr	r0, [pc, #200]	; (6c1c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    6b54:	f005 fd10 	bl	c578 <__assert_func>
    6b58:	4604      	mov	r4, r0
        MicroPrintf("Failed to get registration from op code %s\n ",
    6b5a:	4650      	mov	r0, sl
    6b5c:	f008 fee6 	bl	f92c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    6b60:	2891      	cmp	r0, #145	; 0x91
    6b62:	d806      	bhi.n	6b72 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
  return EnumNamesBuiltinOperator()[index];
    6b64:	4b31      	ldr	r3, [pc, #196]	; (6c2c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    6b66:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    6b6a:	4831      	ldr	r0, [pc, #196]	; (6c30 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e0>)
    6b6c:	f008 f94b 	bl	ee06 <_Z11MicroPrintfPKcz>
        return status;
    6b70:	e7e7      	b.n	6b42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6b72:	4930      	ldr	r1, [pc, #192]	; (6c34 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    6b74:	e7f9      	b.n	6b6a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    6b76:	4631      	mov	r1, r6
    6b78:	482f      	ldr	r0, [pc, #188]	; (6c38 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>)
    6b7a:	f008 f944 	bl	ee06 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    6b7e:	2301      	movs	r3, #1
    6b80:	461c      	mov	r4, r3
    6b82:	e7de      	b.n	6b42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    return data_ - ReadScalar<soffset_t>(data_);
    6b84:	4620      	mov	r0, r4
    6b86:	f006 ff67 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6b8a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6b8c:	4630      	mov	r0, r6
    6b8e:	f006 ff69 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b92:	280e      	cmp	r0, #14
    6b94:	d904      	bls.n	6ba0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x150>
    6b96:	f106 000e 	add.w	r0, r6, #14
    6b9a:	f006 ff63 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6b9e:	e000      	b.n	6ba2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x152>
    6ba0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6ba2:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ba4:	b160      	cbz	r0, 6bc0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x170>
    6ba6:	4630      	mov	r0, r6
    6ba8:	f006 ff50 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bac:	4430      	add	r0, r6
        if (op->custom_options() != nullptr) {
    6bae:	b360      	cbz	r0, 6c0a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6bb0:	4603      	mov	r3, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6bb2:	f853 0b04 	ldr.w	r0, [r3], #4
    6bb6:	9301      	str	r3, [sp, #4]
    6bb8:	f006 ff47 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6bbc:	4682      	mov	sl, r0
    6bbe:	e131      	b.n	6e24 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bc0:	2000      	movs	r0, #0
    6bc2:	e7f4      	b.n	6bae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6bc4:	2000      	movs	r0, #0
    6bc6:	e10b      	b.n	6de0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x390>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bc8:	2300      	movs	r3, #0
    6bca:	9301      	str	r3, [sp, #4]
    6bcc:	e113      	b.n	6df6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a6>
  return (v < low) || (high < v);
    6bce:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    6bd2:	d809      	bhi.n	6be8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x198>
  const size_t index = static_cast<size_t>(e);
    6bd4:	b2f2      	uxtb	r2, r6
  return EnumNamesBuiltinOperator()[index];
    6bd6:	4b15      	ldr	r3, [pc, #84]	; (6c2c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    6bd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
          MicroPrintf(
    6bdc:	4817      	ldr	r0, [pc, #92]	; (6c3c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>)
    6bde:	f008 f912 	bl	ee06 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6be2:	2301      	movs	r3, #1
    6be4:	461c      	mov	r4, r3
    6be6:	e7ac      	b.n	6b42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6be8:	4912      	ldr	r1, [pc, #72]	; (6c34 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    6bea:	e7f7      	b.n	6bdc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18c>
    6bec:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    6bf0:	d804      	bhi.n	6bfc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
  const size_t index = static_cast<size_t>(e);
    6bf2:	b2f3      	uxtb	r3, r6
  return EnumNamesBuiltinOperator()[index];
    6bf4:	4a0d      	ldr	r2, [pc, #52]	; (6c2c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    6bf6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6bfa:	e000      	b.n	6bfe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ae>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6bfc:	490d      	ldr	r1, [pc, #52]	; (6c34 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
          MicroPrintf("Did not find a parser for %s",
    6bfe:	4810      	ldr	r0, [pc, #64]	; (6c40 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>)
    6c00:	f008 f901 	bl	ee06 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6c04:	2301      	movs	r3, #1
    6c06:	461c      	mov	r4, r3
    6c08:	e79b      	b.n	6b42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
      const char* custom_data = nullptr;
    6c0a:	9001      	str	r0, [sp, #4]
      size_t custom_data_size = 0;
    6c0c:	f04f 0a00 	mov.w	sl, #0
    6c10:	e108      	b.n	6e24 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    6c12:	bf00      	nop
    6c14:	000554a0 	.word	0x000554a0
    6c18:	000555f0 	.word	0x000555f0
    6c1c:	0005556c 	.word	0x0005556c
    6c20:	000562d8 	.word	0x000562d8
    6c24:	000563d0 	.word	0x000563d0
    6c28:	000563fc 	.word	0x000563fc
    6c2c:	00055ffc 	.word	0x00055ffc
    6c30:	000564fc 	.word	0x000564fc
    6c34:	00011220 	.word	0x00011220
    6c38:	0005652c 	.word	0x0005652c
    6c3c:	00056550 	.word	0x00056550
    6c40:	00056598 	.word	0x00056598
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c44:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6c46:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c48:	2800      	cmp	r0, #0
    6c4a:	f000 80fb 	beq.w	6e44 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f4>
    6c4e:	4630      	mov	r0, r6
    6c50:	f006 fefc 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c54:	1831      	adds	r1, r6, r0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    6c56:	aa08      	add	r2, sp, #32
    6c58:	4640      	mov	r0, r8
    6c5a:	f008 fc60 	bl	f51e <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    6c5e:	2800      	cmp	r0, #0
    6c60:	f040 80ff 	bne.w	6e62 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x412>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    6c64:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    6c68:	4620      	mov	r0, r4
    6c6a:	f006 fef5 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c6e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c70:	4630      	mov	r0, r6
    6c72:	f006 fef7 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c76:	2808      	cmp	r0, #8
    6c78:	f240 80e6 	bls.w	6e48 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f8>
    6c7c:	f106 0008 	add.w	r0, r6, #8
    6c80:	f006 fef0 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c84:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c86:	2800      	cmp	r0, #0
    6c88:	f000 80e0 	beq.w	6e4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3fc>
    6c8c:	4620      	mov	r0, r4
    6c8e:	f006 fedd 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c92:	1821      	adds	r1, r4, r0
    6c94:	aa09      	add	r2, sp, #36	; 0x24
    6c96:	4640      	mov	r0, r8
    6c98:	f008 fc41 	bl	f51e <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    6c9c:	2800      	cmp	r0, #0
    6c9e:	f040 80e2 	bne.w	6e66 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x416>
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    6ca2:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    6ca6:	9a00      	ldr	r2, [sp, #0]
    6ca8:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
    6cac:	1974      	adds	r4, r6, r5
      *node = {};
    6cae:	2228      	movs	r2, #40	; 0x28
    6cb0:	2100      	movs	r1, #0
    6cb2:	4620      	mov	r0, r4
    6cb4:	f009 f9e7 	bl	10086 <memset>
      node->inputs = inputs_array;
    6cb8:	9b08      	ldr	r3, [sp, #32]
    6cba:	5173      	str	r3, [r6, r5]
      node->outputs = outputs_array;
    6cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6cbe:	6063      	str	r3, [r4, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    6cc0:	9b07      	ldr	r3, [sp, #28]
    6cc2:	6163      	str	r3, [r4, #20]
      node->custom_initial_data = custom_data;
    6cc4:	9b01      	ldr	r3, [sp, #4]
    6cc6:	61a3      	str	r3, [r4, #24]
      node->custom_initial_data_size = custom_data_size;
    6cc8:	f8c4 a01c 	str.w	sl, [r4, #28]
    for (size_t i = 0; i < operators_size; ++i) {
    6ccc:	3701      	adds	r7, #1
    6cce:	9b03      	ldr	r3, [sp, #12]
    6cd0:	429f      	cmp	r7, r3
    6cd2:	f080 80bd 	bcs.w	6e50 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x400>
    return data_ - ReadScalar<soffset_t>(data_);
    6cd6:	9c02      	ldr	r4, [sp, #8]
    6cd8:	4620      	mov	r0, r4
    6cda:	f006 febd 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6cde:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ce0:	4620      	mov	r0, r4
    6ce2:	f006 febf 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ce6:	280a      	cmp	r0, #10
    6ce8:	f67f af16 	bls.w	6b18 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
    6cec:	f104 000a 	add.w	r0, r4, #10
    6cf0:	f006 feb8 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6cf4:	9b02      	ldr	r3, [sp, #8]
    6cf6:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cf8:	2800      	cmp	r0, #0
    6cfa:	f43f af0f 	beq.w	6b1c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xcc>
    6cfe:	4620      	mov	r0, r4
    6d00:	f006 fea4 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d04:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d06:	6820      	ldr	r0, [r4, #0]
    6d08:	f006 fe9f 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d0c:	4287      	cmp	r7, r0
    6d0e:	f4bf af07 	bcs.w	6b20 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d12:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6d14:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6d18:	4620      	mov	r0, r4
    6d1a:	f006 fe97 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d1e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6d20:	4620      	mov	r0, r4
    6d22:	f006 fe99 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d26:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d28:	4628      	mov	r0, r5
    6d2a:	f006 fe9b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d2e:	2804      	cmp	r0, #4
    6d30:	f67f aefd 	bls.w	6b2e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xde>
    6d34:	1d28      	adds	r0, r5, #4
    6d36:	f006 fe95 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6d3a:	2800      	cmp	r0, #0
    6d3c:	f43f aef9 	beq.w	6b32 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe2>
    6d40:	4420      	add	r0, r4
    6d42:	f006 fe83 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d46:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d48:	f8d9 0000 	ldr.w	r0, [r9]
    6d4c:	f006 fe7d 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (index >= opcodes->size()) {
    6d50:	42b0      	cmp	r0, r6
    6d52:	f67f aef0 	bls.w	6b36 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
    6d56:	f8d9 0000 	ldr.w	r0, [r9]
    6d5a:	f006 fe76 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d5e:	4286      	cmp	r6, r0
    6d60:	f4bf aef3 	bcs.w	6b4a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xfa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d64:	f109 0a04 	add.w	sl, r9, #4
    p += i * sizeof(uoffset_t);
    6d68:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6d6c:	4650      	mov	r0, sl
    6d6e:	f006 fe6d 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d72:	4482      	add	sl, r0
    6d74:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                          .node_and_registrations[i]
    6d78:	9a00      	ldr	r2, [sp, #0]
    6d7a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    6d7e:	252c      	movs	r5, #44	; 0x2c
    6d80:	fb05 f507 	mul.w	r5, r5, r7
    6d84:	442b      	add	r3, r5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    6d86:	3328      	adds	r3, #40	; 0x28
    6d88:	f8db 2008 	ldr.w	r2, [fp, #8]
    6d8c:	f8db 1004 	ldr.w	r1, [fp, #4]
    6d90:	4650      	mov	r0, sl
    6d92:	f002 fa17 	bl	91c4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    6d96:	2800      	cmp	r0, #0
    6d98:	f47f aede 	bne.w	6b58 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
    6d9c:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                     .node_and_registrations[i]
    6da0:	9a00      	ldr	r2, [sp, #0]
    6da2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    6da6:	442b      	add	r3, r5
                                     .registration;
    6da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
    6daa:	2b00      	cmp	r3, #0
    6dac:	f43f aee3 	beq.w	6b76 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
          static_cast<BuiltinOperator>(registration->builtin_code);
    6db0:	695e      	ldr	r6, [r3, #20]
      BuiltinOperator op_type =
    6db2:	fa5f fa86 	uxtb.w	sl, r6
      unsigned char* builtin_data = nullptr;
    6db6:	2300      	movs	r3, #0
    6db8:	9307      	str	r3, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    6dba:	f1ba 0f20 	cmp.w	sl, #32
    6dbe:	f43f aee1 	beq.w	6b84 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x134>
    return data_ - ReadScalar<soffset_t>(data_);
    6dc2:	4620      	mov	r0, r4
    6dc4:	f006 fe48 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6dc8:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6dcc:	4640      	mov	r0, r8
    6dce:	f006 fe49 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6dd2:	280e      	cmp	r0, #14
    6dd4:	f67f aef6 	bls.w	6bc4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
    6dd8:	f108 000e 	add.w	r0, r8, #14
    6ddc:	f006 fe42 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6de0:	eb04 0800 	add.w	r8, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6de4:	2800      	cmp	r0, #0
    6de6:	f43f aeef 	beq.w	6bc8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x178>
    6dea:	4640      	mov	r0, r8
    6dec:	f006 fe2e 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6df0:	eb08 0300 	add.w	r3, r8, r0
    6df4:	9301      	str	r3, [sp, #4]
        if (op->custom_options() != nullptr) {
    6df6:	9b01      	ldr	r3, [sp, #4]
    6df8:	2b00      	cmp	r3, #0
    6dfa:	f47f aee8 	bne.w	6bce <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17e>
            op_resolver_.GetOpDataParser(op_type);
    6dfe:	f8db 0004 	ldr.w	r0, [fp, #4]
    6e02:	6803      	ldr	r3, [r0, #0]
    6e04:	6a1b      	ldr	r3, [r3, #32]
    6e06:	4651      	mov	r1, sl
    6e08:	4798      	blx	r3
        if (parser == nullptr) {
    6e0a:	4680      	mov	r8, r0
    6e0c:	2800      	cmp	r0, #0
    6e0e:	f43f aeed 	beq.w	6bec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    6e12:	ab07      	add	r3, sp, #28
    6e14:	9a04      	ldr	r2, [sp, #16]
    6e16:	f8db 1008 	ldr.w	r1, [fp, #8]
    6e1a:	4620      	mov	r0, r4
    6e1c:	47c0      	blx	r8
    6e1e:	b9f0      	cbnz	r0, 6e5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x40e>
      size_t custom_data_size = 0;
    6e20:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    6e24:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    6e28:	4620      	mov	r0, r4
    6e2a:	f006 fe15 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e2e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e30:	4630      	mov	r0, r6
    6e32:	f006 fe17 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e36:	2806      	cmp	r0, #6
    6e38:	f67f af04 	bls.w	6c44 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f4>
    6e3c:	1db0      	adds	r0, r6, #6
    6e3e:	f006 fe11 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6e42:	e700      	b.n	6c46 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e44:	2100      	movs	r1, #0
    6e46:	e706      	b.n	6c56 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e48:	2000      	movs	r0, #0
    6e4a:	e71b      	b.n	6c84 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e4c:	2100      	movs	r1, #0
    6e4e:	e721      	b.n	6c94 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x244>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    6e50:	9b05      	ldr	r3, [sp, #20]
    6e52:	3301      	adds	r3, #1
    6e54:	9305      	str	r3, [sp, #20]
    6e56:	e601      	b.n	6a5c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    6e58:	2300      	movs	r3, #0
    6e5a:	461c      	mov	r4, r3
    6e5c:	e671      	b.n	6b42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    6e5e:	4604      	mov	r4, r0
    6e60:	e66f      	b.n	6b42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    6e62:	4604      	mov	r4, r0
    6e64:	e66d      	b.n	6b42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    6e66:	4604      	mov	r4, r0
    6e68:	e66b      	b.n	6b42 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    6e6a:	bf00      	nop

00006e6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    6e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e70:	b083      	sub	sp, #12
    6e72:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    6e74:	6801      	ldr	r1, [r0, #0]
    6e76:	6e80      	ldr	r0, [r0, #104]	; 0x68
    6e78:	f000 fe60 	bl	7b3c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    6e7c:	b170      	cbz	r0, 6e9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30>
    6e7e:	4601      	mov	r1, r0
  graph_.SetSubgraphAllocations(allocations);
    6e80:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    6e84:	4630      	mov	r0, r6
    6e86:	f008 f915 	bl	f0b4 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    6e8a:	4628      	mov	r0, r5
    6e8c:	f7ff fde0 	bl	6a50 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    6e90:	4603      	mov	r3, r0
    6e92:	b158      	cbz	r0, 6eac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
}
    6e94:	4618      	mov	r0, r3
    6e96:	b003      	add	sp, #12
    6e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    6e9c:	49bc      	ldr	r1, [pc, #752]	; (7190 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
    6e9e:	68a8      	ldr	r0, [r5, #8]
    6ea0:	f008 fd26 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    6ea4:	2301      	movs	r3, #1
    6ea6:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
    return kTfLiteError;
    6eaa:	e7f3      	b.n	6e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    6eac:	4bb9      	ldr	r3, [pc, #740]	; (7194 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x328>)
    6eae:	646b      	str	r3, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    6eb0:	2400      	movs	r4, #0
    6eb2:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
    6eb4:	652c      	str	r4, [r5, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
    6eb6:	4bb8      	ldr	r3, [pc, #736]	; (7198 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x32c>)
    6eb8:	612b      	str	r3, [r5, #16]
  graph_.InitSubgraphs();
    6eba:	4630      	mov	r0, r6
    6ebc:	f008 f8fc 	bl	f0b8 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    6ec0:	4bb6      	ldr	r3, [pc, #728]	; (719c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x330>)
    6ec2:	64eb      	str	r3, [r5, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    6ec4:	4630      	mov	r0, r6
    6ec6:	f7ff f9bd 	bl	6244 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.AllocatePersistentBuffer = nullptr;
    6eca:	646c      	str	r4, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    6ecc:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    6ece:	4bb4      	ldr	r3, [pc, #720]	; (71a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x334>)
    6ed0:	652b      	str	r3, [r5, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    6ed2:	462b      	mov	r3, r5
    6ed4:	f853 1b8c 	ldr.w	r1, [r3], #140
    6ed8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    6eda:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    6edc:	f000 fb90 	bl	7600 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    6ee0:	4603      	mov	r3, r0
    6ee2:	2800      	cmp	r0, #0
    6ee4:	d1d6      	bne.n	6e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    6ee6:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
    6ee8:	6833      	ldr	r3, [r6, #0]
    6eea:	68df      	ldr	r7, [r3, #12]
    6eec:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6eee:	4620      	mov	r0, r4
    6ef0:	f006 fdb2 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ef4:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ef8:	4640      	mov	r0, r8
    6efa:	f006 fdb3 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6efe:	2808      	cmp	r0, #8
    6f00:	d921      	bls.n	6f46 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    6f02:	f108 0008 	add.w	r0, r8, #8
    6f06:	f006 fdad 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6f0a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f0c:	b1e8      	cbz	r0, 6f4a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    6f0e:	4620      	mov	r0, r4
    6f10:	f006 fd9c 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f14:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6f16:	6820      	ldr	r0, [r4, #0]
    6f18:	f006 fd97 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6f1c:	b1b8      	cbz	r0, 6f4e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6f1e:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6f20:	4620      	mov	r0, r4
    6f22:	f006 fd93 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f26:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6f28:	4620      	mov	r0, r4
    6f2a:	f006 fd95 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f2e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f32:	4640      	mov	r0, r8
    6f34:	f006 fd96 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f38:	2806      	cmp	r0, #6
    6f3a:	d90f      	bls.n	6f5c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>
    6f3c:	f108 0006 	add.w	r0, r8, #6
    6f40:	f006 fd90 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6f44:	e00b      	b.n	6f5e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf2>
    6f46:	2000      	movs	r0, #0
    6f48:	e7df      	b.n	6f0a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f4a:	2400      	movs	r4, #0
    6f4c:	e7e3      	b.n	6f16 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xaa>
    FLATBUFFERS_ASSERT(i < size());
    6f4e:	4b95      	ldr	r3, [pc, #596]	; (71a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    6f50:	4a95      	ldr	r2, [pc, #596]	; (71a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    6f52:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f56:	4895      	ldr	r0, [pc, #596]	; (71ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    6f58:	f005 fb0e 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f5c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6f5e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f60:	b178      	cbz	r0, 6f82 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
    6f62:	4620      	mov	r0, r4
    6f64:	f006 fd72 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f68:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6f6a:	6820      	ldr	r0, [r4, #0]
    6f6c:	f006 fd6d 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    6f70:	0081      	lsls	r1, r0, #2
    6f72:	4630      	mov	r0, r6
    6f74:	47b8      	blx	r7
    6f76:	4604      	mov	r4, r0
  input_tensors_ =
    6f78:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    6f7c:	b118      	cbz	r0, 6f86 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
  for (size_t i = 0; i < inputs_size(); ++i) {
    6f7e:	2600      	movs	r6, #0
    6f80:	e09c      	b.n	70bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f82:	2400      	movs	r4, #0
    6f84:	e7f1      	b.n	6f6a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    TF_LITE_REPORT_ERROR(
    6f86:	68ae      	ldr	r6, [r5, #8]
    6f88:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6f8a:	4628      	mov	r0, r5
    6f8c:	f006 fd64 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f90:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f92:	4638      	mov	r0, r7
    6f94:	f006 fd66 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f98:	2808      	cmp	r0, #8
    6f9a:	d91f      	bls.n	6fdc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x170>
    6f9c:	f107 0008 	add.w	r0, r7, #8
    6fa0:	f006 fd60 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6fa4:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fa6:	b1d8      	cbz	r0, 6fe0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x174>
    6fa8:	4628      	mov	r0, r5
    6faa:	f006 fd4f 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fae:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6fb0:	6828      	ldr	r0, [r5, #0]
    6fb2:	f006 fd4a 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6fb6:	b1a8      	cbz	r0, 6fe4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6fb8:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6fba:	4628      	mov	r0, r5
    6fbc:	f006 fd46 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fc0:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6fc2:	4628      	mov	r0, r5
    6fc4:	f006 fd48 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6fc8:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6fca:	4638      	mov	r0, r7
    6fcc:	f006 fd4a 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fd0:	2806      	cmp	r0, #6
    6fd2:	d90e      	bls.n	6ff2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x186>
    6fd4:	1db8      	adds	r0, r7, #6
    6fd6:	f006 fd45 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6fda:	e00b      	b.n	6ff4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>
    6fdc:	2000      	movs	r0, #0
    6fde:	e7e1      	b.n	6fa4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fe0:	4625      	mov	r5, r4
    6fe2:	e7e5      	b.n	6fb0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
    FLATBUFFERS_ASSERT(i < size());
    6fe4:	4b6f      	ldr	r3, [pc, #444]	; (71a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    6fe6:	4a70      	ldr	r2, [pc, #448]	; (71a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    6fe8:	f44f 7183 	mov.w	r1, #262	; 0x106
    6fec:	486f      	ldr	r0, [pc, #444]	; (71ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    6fee:	f005 fac3 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ff2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6ff4:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ff6:	b118      	cbz	r0, 7000 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>
    6ff8:	4628      	mov	r0, r5
    6ffa:	f006 fd27 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ffe:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7000:	6820      	ldr	r0, [r4, #0]
    7002:	f006 fd22 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7006:	0082      	lsls	r2, r0, #2
    7008:	4969      	ldr	r1, [pc, #420]	; (71b0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x344>)
    700a:	4630      	mov	r0, r6
    700c:	f008 fc70 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7010:	2301      	movs	r3, #1
    7012:	e73f      	b.n	6e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7014:	2000      	movs	r0, #0
    7016:	e05f      	b.n	70d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7018:	2400      	movs	r4, #0
    701a:	e064      	b.n	70e6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27a>
    FLATBUFFERS_ASSERT(i < size());
    701c:	4b61      	ldr	r3, [pc, #388]	; (71a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    701e:	4a62      	ldr	r2, [pc, #392]	; (71a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7020:	f44f 7183 	mov.w	r1, #262	; 0x106
    7024:	4861      	ldr	r0, [pc, #388]	; (71ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7026:	f005 faa7 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    702a:	2000      	movs	r0, #0
    702c:	e071      	b.n	7112 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    702e:	2400      	movs	r4, #0
    7030:	e076      	b.n	7120 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7032:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7034:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7036:	2800      	cmp	r0, #0
    7038:	f000 808f 	beq.w	715a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ee>
    703c:	4620      	mov	r0, r4
    703e:	f006 fd05 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7042:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7044:	6820      	ldr	r0, [r4, #0]
    7046:	f006 fd00 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    704a:	2800      	cmp	r0, #0
    704c:	f000 8087 	beq.w	715e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7050:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7052:	4620      	mov	r0, r4
    7054:	f006 fcfa 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7058:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    705a:	4620      	mov	r0, r4
    705c:	f006 fcfc 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7060:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7064:	4658      	mov	r0, fp
    7066:	f006 fcfd 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    706a:	2806      	cmp	r0, #6
    706c:	d97e      	bls.n	716c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    706e:	f10b 0006 	add.w	r0, fp, #6
    7072:	f006 fcf7 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7076:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7078:	2800      	cmp	r0, #0
    707a:	d079      	beq.n	7170 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x304>
    707c:	4620      	mov	r0, r4
    707e:	f006 fce5 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7082:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7084:	6820      	ldr	r0, [r4, #0]
    7086:	f006 fce0 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    708a:	4286      	cmp	r6, r0
    708c:	d272      	bcs.n	7174 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    708e:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7090:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7094:	f006 fcdf 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7098:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    709a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
    709e:	2200      	movs	r2, #0
    70a0:	9200      	str	r2, [sp, #0]
    70a2:	4652      	mov	r2, sl
    70a4:	4639      	mov	r1, r7
    70a6:	4640      	mov	r0, r8
    70a8:	47c8      	blx	r9
    70aa:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (input_tensors_[i] == nullptr) {
    70ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    70b2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    70b6:	2b00      	cmp	r3, #0
    70b8:	d063      	beq.n	7182 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x316>
  for (size_t i = 0; i < inputs_size(); ++i) {
    70ba:	3601      	adds	r6, #1
    70bc:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    70be:	4620      	mov	r0, r4
    70c0:	f006 fcca 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    70c4:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    70c6:	4638      	mov	r0, r7
    70c8:	f006 fccc 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70cc:	2808      	cmp	r0, #8
    70ce:	d9a1      	bls.n	7014 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    70d0:	f107 0008 	add.w	r0, r7, #8
    70d4:	f006 fcc6 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    70d8:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70da:	2800      	cmp	r0, #0
    70dc:	d09c      	beq.n	7018 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
    70de:	4620      	mov	r0, r4
    70e0:	f006 fcb4 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70e4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    70e6:	6820      	ldr	r0, [r4, #0]
    70e8:	f006 fcaf 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    70ec:	2800      	cmp	r0, #0
    70ee:	d095      	beq.n	701c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    70f0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    70f2:	4620      	mov	r0, r4
    70f4:	f006 fcaa 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70f8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    70fa:	4620      	mov	r0, r4
    70fc:	f006 fcac 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7100:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7102:	4638      	mov	r0, r7
    7104:	f006 fcae 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7108:	2806      	cmp	r0, #6
    710a:	d98e      	bls.n	702a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
    710c:	1db8      	adds	r0, r7, #6
    710e:	f006 fca9 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7112:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7114:	2800      	cmp	r0, #0
    7116:	d08a      	beq.n	702e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    7118:	4620      	mov	r0, r4
    711a:	f006 fc97 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    711e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7120:	6820      	ldr	r0, [r4, #0]
    7122:	f006 fc92 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7126:	4286      	cmp	r6, r0
    7128:	d248      	bcs.n	71bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    712a:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    712e:	f8d8 3000 	ldr.w	r3, [r8]
    7132:	f8d3 9000 	ldr.w	r9, [r3]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7136:	682f      	ldr	r7, [r5, #0]
    7138:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    713c:	4638      	mov	r0, r7
    713e:	f006 fc8b 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7142:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7144:	4620      	mov	r0, r4
    7146:	f006 fc8d 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    714a:	2808      	cmp	r0, #8
    714c:	f67f af71 	bls.w	7032 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c6>
    7150:	f104 0008 	add.w	r0, r4, #8
    7154:	f006 fc86 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7158:	e76c      	b.n	7034 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    715a:	2400      	movs	r4, #0
    715c:	e772      	b.n	7044 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    FLATBUFFERS_ASSERT(i < size());
    715e:	4b11      	ldr	r3, [pc, #68]	; (71a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7160:	4a11      	ldr	r2, [pc, #68]	; (71a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7162:	f44f 7183 	mov.w	r1, #262	; 0x106
    7166:	4811      	ldr	r0, [pc, #68]	; (71ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7168:	f005 fa06 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    716c:	2000      	movs	r0, #0
    716e:	e782      	b.n	7076 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7170:	2400      	movs	r4, #0
    7172:	e787      	b.n	7084 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
    FLATBUFFERS_ASSERT(i < size());
    7174:	4b0b      	ldr	r3, [pc, #44]	; (71a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7176:	4a0f      	ldr	r2, [pc, #60]	; (71b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x348>)
    7178:	f44f 7183 	mov.w	r1, #262	; 0x106
    717c:	480b      	ldr	r0, [pc, #44]	; (71ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    717e:	f005 f9fb 	bl	c578 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7182:	4632      	mov	r2, r6
    7184:	490c      	ldr	r1, [pc, #48]	; (71b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>)
    7186:	68a8      	ldr	r0, [r5, #8]
    7188:	f008 fbb2 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    718c:	2301      	movs	r3, #1
    718e:	e681      	b.n	6e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7190:	000565b8 	.word	0x000565b8
    7194:	0000f1b3 	.word	0x0000f1b3
    7198:	0000f203 	.word	0x0000f203
    719c:	0000f20d 	.word	0x0000f20d
    71a0:	0000f1c1 	.word	0x0000f1c1
    71a4:	000554a0 	.word	0x000554a0
    71a8:	000555f0 	.word	0x000555f0
    71ac:	0005556c 	.word	0x0005556c
    71b0:	000565dc 	.word	0x000565dc
    71b4:	000554ac 	.word	0x000554ac
    71b8:	00056628 	.word	0x00056628
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    71bc:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
    71be:	6833      	ldr	r3, [r6, #0]
    71c0:	68df      	ldr	r7, [r3, #12]
    return model_->subgraphs()->Get(0)->outputs()->size();
    71c2:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    71c4:	4620      	mov	r0, r4
    71c6:	f006 fc47 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    71ca:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    71ce:	4640      	mov	r0, r8
    71d0:	f006 fc48 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71d4:	2808      	cmp	r0, #8
    71d6:	d904      	bls.n	71e2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x376>
    71d8:	f108 0008 	add.w	r0, r8, #8
    71dc:	f006 fc42 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    71e0:	e000      	b.n	71e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x378>
    71e2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    71e4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71e6:	b360      	cbz	r0, 7242 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d6>
    71e8:	4620      	mov	r0, r4
    71ea:	f006 fc2f 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71ee:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    71f0:	6820      	ldr	r0, [r4, #0]
    71f2:	f006 fc2a 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    71f6:	b330      	cbz	r0, 7246 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3da>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    71f8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    71fa:	4620      	mov	r0, r4
    71fc:	f006 fc26 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7200:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7202:	4620      	mov	r0, r4
    7204:	f006 fc28 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7208:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    720c:	4640      	mov	r0, r8
    720e:	f006 fc29 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7212:	2808      	cmp	r0, #8
    7214:	d91e      	bls.n	7254 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e8>
    7216:	f108 0008 	add.w	r0, r8, #8
    721a:	f006 fc23 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    721e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7220:	b1d0      	cbz	r0, 7258 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3ec>
    7222:	4620      	mov	r0, r4
    7224:	f006 fc12 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7228:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    722a:	6820      	ldr	r0, [r4, #0]
    722c:	f006 fc0d 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7230:	0081      	lsls	r1, r0, #2
    7232:	4630      	mov	r0, r6
    7234:	47b8      	blx	r7
    7236:	4604      	mov	r4, r0
  output_tensors_ =
    7238:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    723c:	b170      	cbz	r0, 725c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f0>
  for (size_t i = 0; i < outputs_size(); ++i) {
    723e:	2600      	movs	r6, #0
    7240:	e0c6      	b.n	73d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x564>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7242:	2400      	movs	r4, #0
    7244:	e7d4      	b.n	71f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x384>
    FLATBUFFERS_ASSERT(i < size());
    7246:	4b8f      	ldr	r3, [pc, #572]	; (7484 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7248:	4a8f      	ldr	r2, [pc, #572]	; (7488 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    724a:	f44f 7183 	mov.w	r1, #262	; 0x106
    724e:	488f      	ldr	r0, [pc, #572]	; (748c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7250:	f005 f992 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7254:	2000      	movs	r0, #0
    7256:	e7e2      	b.n	721e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3b2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7258:	2400      	movs	r4, #0
    725a:	e7e6      	b.n	722a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3be>
    TF_LITE_REPORT_ERROR(
    725c:	68ae      	ldr	r6, [r5, #8]
    725e:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7260:	4628      	mov	r0, r5
    7262:	f006 fbf9 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7266:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7268:	4638      	mov	r0, r7
    726a:	f006 fbfb 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    726e:	2808      	cmp	r0, #8
    7270:	d920      	bls.n	72b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x448>
    7272:	f107 0008 	add.w	r0, r7, #8
    7276:	f006 fbf5 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    727a:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    727c:	b1e0      	cbz	r0, 72b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x44c>
    727e:	4628      	mov	r0, r5
    7280:	f006 fbe4 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7284:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7286:	6828      	ldr	r0, [r5, #0]
    7288:	f006 fbdf 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    728c:	b1b0      	cbz	r0, 72bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x450>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    728e:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7290:	4628      	mov	r0, r5
    7292:	f006 fbdb 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7296:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7298:	4628      	mov	r0, r5
    729a:	f006 fbdd 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    729e:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    72a0:	4638      	mov	r0, r7
    72a2:	f006 fbdf 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72a6:	2808      	cmp	r0, #8
    72a8:	d90f      	bls.n	72ca <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x45e>
    72aa:	f107 0008 	add.w	r0, r7, #8
    72ae:	f006 fbd9 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    72b2:	e00b      	b.n	72cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x460>
    72b4:	2000      	movs	r0, #0
    72b6:	e7e0      	b.n	727a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72b8:	4625      	mov	r5, r4
    72ba:	e7e4      	b.n	7286 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x41a>
    FLATBUFFERS_ASSERT(i < size());
    72bc:	4b71      	ldr	r3, [pc, #452]	; (7484 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    72be:	4a72      	ldr	r2, [pc, #456]	; (7488 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    72c0:	f44f 7183 	mov.w	r1, #262	; 0x106
    72c4:	4871      	ldr	r0, [pc, #452]	; (748c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    72c6:	f005 f957 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72ca:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    72cc:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72ce:	b118      	cbz	r0, 72d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x46c>
    72d0:	4628      	mov	r0, r5
    72d2:	f006 fbbb 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    72d6:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    72d8:	6820      	ldr	r0, [r4, #0]
    72da:	f006 fbb6 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    72de:	0082      	lsls	r2, r0, #2
    72e0:	496b      	ldr	r1, [pc, #428]	; (7490 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x624>)
    72e2:	4630      	mov	r0, r6
    72e4:	f008 fb04 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    72e8:	2301      	movs	r3, #1
    72ea:	e5d3      	b.n	6e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72ec:	2000      	movs	r0, #0
    72ee:	e07d      	b.n	73ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x580>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72f0:	2400      	movs	r4, #0
    72f2:	e083      	b.n	73fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x590>
    FLATBUFFERS_ASSERT(i < size());
    72f4:	4b63      	ldr	r3, [pc, #396]	; (7484 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    72f6:	4a64      	ldr	r2, [pc, #400]	; (7488 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    72f8:	f44f 7183 	mov.w	r1, #262	; 0x106
    72fc:	4863      	ldr	r0, [pc, #396]	; (748c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    72fe:	f005 f93b 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7302:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7304:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7306:	2800      	cmp	r0, #0
    7308:	f000 8092 	beq.w	7430 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c4>
    730c:	4620      	mov	r0, r4
    730e:	f006 fb9d 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7312:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7314:	6820      	ldr	r0, [r4, #0]
    7316:	f006 fb98 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t i = 0; i < outputs_size(); ++i) {
    731a:	4286      	cmp	r6, r0
    731c:	f080 80a7 	bcs.w	746e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x602>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7320:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    7324:	f8d8 3000 	ldr.w	r3, [r8]
    7328:	f8d3 9000 	ldr.w	r9, [r3]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    732c:	682f      	ldr	r7, [r5, #0]
    732e:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    7332:	4638      	mov	r0, r7
    7334:	f006 fb90 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7338:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    733a:	4620      	mov	r0, r4
    733c:	f006 fb92 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7340:	2808      	cmp	r0, #8
    7342:	d977      	bls.n	7434 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c8>
    7344:	f104 0008 	add.w	r0, r4, #8
    7348:	f006 fb8c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    734c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    734e:	2800      	cmp	r0, #0
    7350:	d072      	beq.n	7438 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5cc>
    7352:	4620      	mov	r0, r4
    7354:	f006 fb7a 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7358:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    735a:	6820      	ldr	r0, [r4, #0]
    735c:	f006 fb75 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7360:	2800      	cmp	r0, #0
    7362:	d06b      	beq.n	743c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5d0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7364:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7366:	4620      	mov	r0, r4
    7368:	f006 fb70 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    736c:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    736e:	4620      	mov	r0, r4
    7370:	f006 fb72 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7374:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7378:	4658      	mov	r0, fp
    737a:	f006 fb73 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    737e:	2808      	cmp	r0, #8
    7380:	d963      	bls.n	744a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5de>
    7382:	f10b 0008 	add.w	r0, fp, #8
    7386:	f006 fb6d 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    738a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    738c:	2800      	cmp	r0, #0
    738e:	d05e      	beq.n	744e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e2>
    7390:	4620      	mov	r0, r4
    7392:	f006 fb5b 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7396:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7398:	6820      	ldr	r0, [r4, #0]
    739a:	f006 fb56 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    739e:	4286      	cmp	r6, r0
    73a0:	d257      	bcs.n	7452 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    73a2:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    73a4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    73a8:	f006 fb55 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    73ac:	4603      	mov	r3, r0
    73ae:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
    73b2:	2200      	movs	r2, #0
    73b4:	9200      	str	r2, [sp, #0]
    73b6:	4652      	mov	r2, sl
    73b8:	4639      	mov	r1, r7
    73ba:	4640      	mov	r0, r8
    73bc:	47c8      	blx	r9
    73be:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (output_tensors_[i] == nullptr) {
    73c2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    73c6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    73ca:	2b00      	cmp	r3, #0
    73cc:	d048      	beq.n	7460 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5f4>
  for (size_t i = 0; i < outputs_size(); ++i) {
    73ce:	3601      	adds	r6, #1
    73d0:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    73d2:	4620      	mov	r0, r4
    73d4:	f006 fb40 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    73d8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    73da:	4638      	mov	r0, r7
    73dc:	f006 fb42 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73e0:	2808      	cmp	r0, #8
    73e2:	d983      	bls.n	72ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x480>
    73e4:	f107 0008 	add.w	r0, r7, #8
    73e8:	f006 fb3c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    73ec:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73ee:	2800      	cmp	r0, #0
    73f0:	f43f af7e 	beq.w	72f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x484>
    73f4:	4620      	mov	r0, r4
    73f6:	f006 fb29 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    73fa:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    73fc:	6820      	ldr	r0, [r4, #0]
    73fe:	f006 fb24 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7402:	2800      	cmp	r0, #0
    7404:	f43f af76 	beq.w	72f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x488>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7408:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    740a:	4620      	mov	r0, r4
    740c:	f006 fb1e 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7410:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7412:	4620      	mov	r0, r4
    7414:	f006 fb20 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7418:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    741a:	4638      	mov	r0, r7
    741c:	f006 fb22 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7420:	2808      	cmp	r0, #8
    7422:	f67f af6e 	bls.w	7302 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x496>
    7426:	f107 0008 	add.w	r0, r7, #8
    742a:	f006 fb1b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    742e:	e769      	b.n	7304 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x498>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7430:	2400      	movs	r4, #0
    7432:	e76f      	b.n	7314 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7434:	2000      	movs	r0, #0
    7436:	e789      	b.n	734c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4e0>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7438:	2400      	movs	r4, #0
    743a:	e78e      	b.n	735a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4ee>
    FLATBUFFERS_ASSERT(i < size());
    743c:	4b11      	ldr	r3, [pc, #68]	; (7484 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    743e:	4a12      	ldr	r2, [pc, #72]	; (7488 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7440:	f44f 7183 	mov.w	r1, #262	; 0x106
    7444:	4811      	ldr	r0, [pc, #68]	; (748c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7446:	f005 f897 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    744a:	2000      	movs	r0, #0
    744c:	e79d      	b.n	738a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x51e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    744e:	2400      	movs	r4, #0
    7450:	e7a2      	b.n	7398 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x52c>
    FLATBUFFERS_ASSERT(i < size());
    7452:	4b0c      	ldr	r3, [pc, #48]	; (7484 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7454:	4a0f      	ldr	r2, [pc, #60]	; (7494 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x628>)
    7456:	f44f 7183 	mov.w	r1, #262	; 0x106
    745a:	480c      	ldr	r0, [pc, #48]	; (748c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    745c:	f005 f88c 	bl	c578 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7460:	4632      	mov	r2, r6
    7462:	490d      	ldr	r1, [pc, #52]	; (7498 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62c>)
    7464:	68a8      	ldr	r0, [r5, #8]
    7466:	f008 fa43 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    746a:	2301      	movs	r3, #1
    746c:	e512      	b.n	6e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    746e:	4628      	mov	r0, r5
    7470:	f007 ff25 	bl	f2be <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
    7474:	4603      	mov	r3, r0
    7476:	2800      	cmp	r0, #0
    7478:	f47f ad0c 	bne.w	6e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    747c:	2201      	movs	r2, #1
    747e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
  return kTfLiteOk;
    7482:	e507      	b.n	6e94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7484:	000554a0 	.word	0x000554a0
    7488:	000555f0 	.word	0x000555f0
    748c:	0005556c 	.word	0x0005556c
    7490:	00056650 	.word	0x00056650
    7494:	000554ac 	.word	0x000554ac
    7498:	0005669c 	.word	0x0005669c

0000749c <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    749c:	b510      	push	{r4, lr}
    749e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    74a0:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    74a4:	b95b      	cbnz	r3, 74be <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
  if (!tensors_allocated_) {
    74a6:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    74aa:	b913      	cbnz	r3, 74b2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    74ac:	f7ff fcde 	bl	6e6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    74b0:	b920      	cbnz	r0, 74bc <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
  return graph_.InvokeSubgraph(0);
    74b2:	2100      	movs	r1, #0
    74b4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    74b8:	f7fe ff04 	bl	62c4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
}
    74bc:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    74be:	4903      	ldr	r1, [pc, #12]	; (74cc <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
    74c0:	6880      	ldr	r0, [r0, #8]
    74c2:	f008 fa15 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    74c6:	2001      	movs	r0, #1
    74c8:	e7f8      	b.n	74bc <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    74ca:	bf00      	nop
    74cc:	000566c4 	.word	0x000566c4

000074d0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
  return kTfLiteOk;
}

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
    74d0:	b410      	push	{r4}
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
    74d2:	4c05      	ldr	r4, [pc, #20]	; (74e8 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x18>)
    74d4:	6004      	str	r4, [r0, #0]
    74d6:	6041      	str	r1, [r0, #4]
    74d8:	60c2      	str	r2, [r0, #12]
    74da:	2200      	movs	r2, #0
    74dc:	7402      	strb	r2, [r0, #16]
    74de:	6142      	str	r2, [r0, #20]
    74e0:	6182      	str	r2, [r0, #24]
    74e2:	bc10      	pop	{r4}
    74e4:	4770      	bx	lr
    74e6:	bf00      	nop
    74e8:	00056e10 	.word	0x00056e10

000074ec <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    74ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ee:	4605      	mov	r5, r0
    74f0:	460f      	mov	r7, r1
    74f2:	461e      	mov	r6, r3
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    74f4:	f007 ffe0 	bl	f4b8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    74f8:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    74fa:	4613      	mov	r3, r2
    74fc:	e000      	b.n	7500 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x14>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    74fe:	3201      	adds	r2, #1
    7500:	696c      	ldr	r4, [r5, #20]
    7502:	4294      	cmp	r4, r2
    7504:	d907      	bls.n	7516 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2a>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    7506:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    750a:	6864      	ldr	r4, [r4, #4]
    750c:	f1b4 3fff 	cmp.w	r4, #4294967295
    7510:	d1f5      	bne.n	74fe <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
      ++current_node_request_count;
    7512:	3301      	adds	r3, #1
    7514:	e7f3      	b.n	74fe <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    7516:	2b0b      	cmp	r3, #11
    7518:	d80d      	bhi.n	7536 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4a>
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
    751a:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
      &requests[scratch_buffer_request_count_];
  *current_request = {};
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
    751e:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    7522:	f04f 32ff 	mov.w	r2, #4294967295
    7526:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
    7528:	696b      	ldr	r3, [r5, #20]
    752a:	6033      	str	r3, [r6, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
    752c:	696b      	ldr	r3, [r5, #20]
    752e:	3301      	adds	r3, #1
    7530:	616b      	str	r3, [r5, #20]
  return kTfLiteOk;
    7532:	2000      	movs	r0, #0
}
    7534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
    7536:	220c      	movs	r2, #12
    7538:	4902      	ldr	r1, [pc, #8]	; (7544 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>)
    753a:	68e8      	ldr	r0, [r5, #12]
    753c:	f008 f9d8 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7540:	2001      	movs	r0, #1
    7542:	e7f7      	b.n	7534 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>
    7544:	000566f4 	.word	0x000566f4

00007548 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    7548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    754c:	b122      	cbz	r2, 7558 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    754e:	4607      	mov	r7, r0
    7550:	460e      	mov	r6, r1
    7552:	4690      	mov	r8, r2

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7554:	2500      	movs	r5, #0
    7556:	e029      	b.n	75ac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x64>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7558:	f008 fd7c 	bl	10054 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    755c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    755e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7560:	b390      	cbz	r0, 75c8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x80>
    7562:	4620      	mov	r0, r4
    7564:	f006 fa72 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7568:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    756a:	6820      	ldr	r0, [r4, #0]
    756c:	f006 fa6d 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7570:	4285      	cmp	r5, r0
    7572:	d23a      	bcs.n	75ea <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    7574:	6820      	ldr	r0, [r4, #0]
    7576:	f006 fa68 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    757a:	4285      	cmp	r5, r0
    757c:	d226      	bcs.n	75cc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    757e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7580:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7584:	4620      	mov	r0, r4
    7586:	f006 fa61 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    TFLITE_DCHECK(subgraph != nullptr);
    758a:	1820      	adds	r0, r4, r0
    758c:	d025      	beq.n	75da <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
    758e:	f007 fd64 	bl	f05a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
    7592:	687b      	ldr	r3, [r7, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
    7594:	681a      	ldr	r2, [r3, #0]
    7596:	68d4      	ldr	r4, [r2, #12]
        memory_allocator_->AllocateFromTail(
    7598:	2204      	movs	r2, #4
    759a:	212c      	movs	r1, #44	; 0x2c
    759c:	fb01 f100 	mul.w	r1, r1, r0
    75a0:	4618      	mov	r0, r3
    75a2:	47a0      	blx	r4
    if (output == nullptr) {
    75a4:	b1d8      	cbz	r0, 75de <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
      TF_LITE_REPORT_ERROR(
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    75a6:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    75aa:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    75ac:	4630      	mov	r0, r6
    75ae:	f006 fa53 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75b2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75b4:	4620      	mov	r0, r4
    75b6:	f006 fa55 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75ba:	2808      	cmp	r0, #8
    75bc:	d9ce      	bls.n	755c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    75be:	f104 0008 	add.w	r0, r4, #8
    75c2:	f006 fa4f 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    75c6:	e7ca      	b.n	755e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75c8:	2400      	movs	r4, #0
    75ca:	e7ce      	b.n	756a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x22>
    FLATBUFFERS_ASSERT(i < size());
    75cc:	4b08      	ldr	r3, [pc, #32]	; (75f0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
    75ce:	4a09      	ldr	r2, [pc, #36]	; (75f4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    75d0:	f44f 7183 	mov.w	r1, #262	; 0x106
    75d4:	4808      	ldr	r0, [pc, #32]	; (75f8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
    75d6:	f004 ffcf 	bl	c578 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    75da:	f008 fd3b 	bl	10054 <abort>
      TF_LITE_REPORT_ERROR(
    75de:	4907      	ldr	r1, [pc, #28]	; (75fc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
    75e0:	68f8      	ldr	r0, [r7, #12]
    75e2:	f008 f985 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    75e6:	2001      	movs	r0, #1
    75e8:	e000      	b.n	75ec <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
  }
  return kTfLiteOk;
    75ea:	2000      	movs	r0, #0
}
    75ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75f0:	000554a0 	.word	0x000554a0
    75f4:	000555f0 	.word	0x000555f0
    75f8:	0005556c 	.word	0x0005556c
    75fc:	0005672c 	.word	0x0005672c

00007600 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    7600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7604:	b083      	sub	sp, #12
    7606:	4605      	mov	r5, r0
    7608:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    760a:	7c03      	ldrb	r3, [r0, #16]
    760c:	b11b      	cbz	r3, 7616 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x16>
    760e:	460f      	mov	r7, r1
    7610:	4691      	mov	r9, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7612:	2600      	movs	r6, #0
    7614:	e043      	b.n	769e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7616:	4930      	ldr	r1, [pc, #192]	; (76d8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xd8>)
    7618:	68c0      	ldr	r0, [r0, #12]
    761a:	f008 f969 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    761e:	2301      	movs	r3, #1
    7620:	e055      	b.n	76ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7622:	f104 0008 	add.w	r0, r4, #8
    7626:	f006 fa1d 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    762a:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    762c:	2800      	cmp	r0, #0
    762e:	d041      	beq.n	76b4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    7630:	4620      	mov	r0, r4
    7632:	f006 fa0b 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7636:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7638:	6820      	ldr	r0, [r4, #0]
    763a:	f006 fa06 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    763e:	4286      	cmp	r6, r0
    7640:	d243      	bcs.n	76ca <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xca>
    7642:	6820      	ldr	r0, [r4, #0]
    7644:	f006 fa01 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7648:	4286      	cmp	r6, r0
    764a:	d235      	bcs.n	76b8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    764c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    764e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7652:	4620      	mov	r0, r4
    7654:	f006 f9fa 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7658:	1824      	adds	r4, r4, r0
    765a:	d034      	beq.n	76c6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xc6>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    765c:	682b      	ldr	r3, [r5, #0]
    765e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7660:	696a      	ldr	r2, [r5, #20]
    7662:	4641      	mov	r1, r8
    7664:	4628      	mov	r0, r5
    7666:	4798      	blx	r3
    7668:	4603      	mov	r3, r0
    766a:	bb80      	cbnz	r0, 76ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    766c:	682b      	ldr	r3, [r5, #0]
    766e:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    7672:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    7676:	9600      	str	r6, [sp, #0]
    7678:	f8d8 3000 	ldr.w	r3, [r8]
    767c:	f8da 2004 	ldr.w	r2, [sl, #4]
    7680:	4639      	mov	r1, r7
    7682:	4628      	mov	r0, r5
    7684:	47d8      	blx	fp
    7686:	4603      	mov	r3, r0
    7688:	bb08      	cbnz	r0, 76ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    768a:	682b      	ldr	r3, [r5, #0]
    768c:	6a1b      	ldr	r3, [r3, #32]
    768e:	f8da 2004 	ldr.w	r2, [sl, #4]
    7692:	4621      	mov	r1, r4
    7694:	4628      	mov	r0, r5
    7696:	4798      	blx	r3
    7698:	4603      	mov	r3, r0
    769a:	b9c0      	cbnz	r0, 76ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    769c:	3601      	adds	r6, #1
    return data_ - ReadScalar<soffset_t>(data_);
    769e:	4638      	mov	r0, r7
    76a0:	f006 f9da 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76a4:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76a6:	4620      	mov	r0, r4
    76a8:	f006 f9dc 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76ac:	2808      	cmp	r0, #8
    76ae:	d8b8      	bhi.n	7622 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x22>
    76b0:	2000      	movs	r0, #0
    76b2:	e7ba      	b.n	762a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76b4:	2400      	movs	r4, #0
    76b6:	e7bf      	b.n	7638 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x38>
    FLATBUFFERS_ASSERT(i < size());
    76b8:	4b08      	ldr	r3, [pc, #32]	; (76dc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xdc>)
    76ba:	4a09      	ldr	r2, [pc, #36]	; (76e0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe0>)
    76bc:	f44f 7183 	mov.w	r1, #262	; 0x106
    76c0:	4808      	ldr	r0, [pc, #32]	; (76e4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe4>)
    76c2:	f004 ff59 	bl	c578 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    76c6:	f008 fcc5 	bl	10054 <abort>
  model_is_allocating_ = false;
    76ca:	2300      	movs	r3, #0
    76cc:	742b      	strb	r3, [r5, #16]
}
    76ce:	4618      	mov	r0, r3
    76d0:	b003      	add	sp, #12
    76d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76d6:	bf00      	nop
    76d8:	00056764 	.word	0x00056764
    76dc:	000554a0 	.word	0x000554a0
    76e0:	000555f0 	.word	0x000555f0
    76e4:	0005556c 	.word	0x0005556c

000076e8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    76e8:	b570      	push	{r4, r5, r6, lr}
    76ea:	4606      	mov	r6, r0
    76ec:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    76ee:	f006 f9b3 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76f2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76f4:	4620      	mov	r0, r4
    76f6:	f006 f9b5 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76fa:	2808      	cmp	r0, #8
    76fc:	d923      	bls.n	7746 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5e>
    76fe:	f104 0008 	add.w	r0, r4, #8
    7702:	f006 f9af 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7706:	b300      	cbz	r0, 774a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x62>
    7708:	4430      	add	r0, r6
    770a:	f006 f99f 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    770e:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7710:	6828      	ldr	r0, [r5, #0]
    7712:	f006 f99a 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7716:	42b0      	cmp	r0, r6
    7718:	d919      	bls.n	774e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x66>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    771a:	1d2c      	adds	r4, r5, #4
    p += i * sizeof(uoffset_t);
    771c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7720:	4620      	mov	r0, r4
    7722:	f006 f993 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    7726:	1824      	adds	r4, r4, r0
    7728:	d025      	beq.n	7776 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
    772a:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    772c:	4620      	mov	r0, r4
    772e:	f006 f993 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7732:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7734:	4620      	mov	r0, r4
    7736:	f006 f995 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    773a:	2804      	cmp	r0, #4
    773c:	d90e      	bls.n	775c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x74>
    773e:	1d20      	adds	r0, r4, #4
    7740:	f006 f990 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7744:	e00b      	b.n	775e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x76>
    7746:	2000      	movs	r0, #0
    7748:	e7dd      	b.n	7706 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    774a:	2600      	movs	r6, #0
    774c:	e7e0      	b.n	7710 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x28>
    FLATBUFFERS_ASSERT(i < size());
    774e:	4b0d      	ldr	r3, [pc, #52]	; (7784 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x9c>)
    7750:	4a0d      	ldr	r2, [pc, #52]	; (7788 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa0>)
    7752:	f44f 7183 	mov.w	r1, #262	; 0x106
    7756:	480d      	ldr	r0, [pc, #52]	; (778c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa4>)
    7758:	f004 ff0e 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    775c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    775e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7760:	b158      	cbz	r0, 777a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x92>
    7762:	4628      	mov	r0, r5
    7764:	f006 f972 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7768:	182c      	adds	r4, r5, r0
    if (auto* array = buffer->data()) {
    776a:	b124      	cbz	r4, 7776 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
  uoffset_t size() const { return EndianScalar(length_); }
    776c:	6820      	ldr	r0, [r4, #0]
    776e:	f006 f96c 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (array->size()) {
    7772:	b120      	cbz	r0, 777e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7774:	3404      	adds	r4, #4
}
    7776:	4620      	mov	r0, r4
    7778:	bd70      	pop	{r4, r5, r6, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    777a:	2400      	movs	r4, #0
    777c:	e7f5      	b.n	776a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x82>
  void* out_buffer = nullptr;
    777e:	2400      	movs	r4, #0
  return out_buffer;
    7780:	e7f9      	b.n	7776 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    7782:	bf00      	nop
    7784:	000554a0 	.word	0x000554a0
    7788:	000567b0 	.word	0x000567b0
    778c:	0005556c 	.word	0x0005556c

00007790 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7794:	b082      	sub	sp, #8
    7796:	4606      	mov	r6, r0
    7798:	460f      	mov	r7, r1
    779a:	4690      	mov	r8, r2
    779c:	461d      	mov	r5, r3
    779e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    77a2:	4608      	mov	r0, r1
    77a4:	f006 f958 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    77a8:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    77aa:	4620      	mov	r0, r4
    77ac:	f006 f95a 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77b0:	2808      	cmp	r0, #8
    77b2:	d93e      	bls.n	7832 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    77b4:	f104 0008 	add.w	r0, r4, #8
    77b8:	f006 f954 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    77bc:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77be:	2800      	cmp	r0, #0
    77c0:	d039      	beq.n	7836 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    77c2:	4620      	mov	r0, r4
    77c4:	f006 f942 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77c8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    77ca:	6820      	ldr	r0, [r4, #0]
    77cc:	f006 f93d 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    77d0:	4581      	cmp	r9, r0
    77d2:	d232      	bcs.n	783a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    77d4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    77d6:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    77da:	4620      	mov	r0, r4
    77dc:	f006 f936 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    77e0:	42c4      	cmn	r4, r0
    77e2:	d031      	beq.n	7848 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    77e4:	6833      	ldr	r3, [r6, #0]
    77e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    77e8:	4630      	mov	r0, r6
    77ea:	4798      	blx	r3
    77ec:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
    77ee:	6833      	ldr	r3, [r6, #0]
    77f0:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(
    77f4:	2300      	movs	r3, #0
    77f6:	9301      	str	r3, [sp, #4]
    77f8:	f8cd 9000 	str.w	r9, [sp]
    77fc:	462b      	mov	r3, r5
    77fe:	4602      	mov	r2, r0
    7800:	4639      	mov	r1, r7
    7802:	4630      	mov	r0, r6
    7804:	47d0      	blx	sl
    7806:	bb08      	cbnz	r0, 784c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7808:	f1b8 0f00 	cmp.w	r8, #0
    780c:	d00d      	beq.n	782a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    780e:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
    7812:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    781a:	00ad      	lsls	r5, r5, #2
    781c:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    781e:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7820:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7824:	441d      	add	r5, r3
    7826:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7828:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    782a:	4620      	mov	r0, r4
    782c:	b002      	add	sp, #8
    782e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7832:	2000      	movs	r0, #0
    7834:	e7c2      	b.n	77bc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7836:	2400      	movs	r4, #0
    7838:	e7c7      	b.n	77ca <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    783a:	4b07      	ldr	r3, [pc, #28]	; (7858 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
    783c:	4a07      	ldr	r2, [pc, #28]	; (785c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    783e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7842:	4807      	ldr	r0, [pc, #28]	; (7860 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7844:	f004 fe98 	bl	c578 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7848:	f008 fc04 	bl	10054 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    784c:	4905      	ldr	r1, [pc, #20]	; (7864 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    784e:	68f0      	ldr	r0, [r6, #12]
    7850:	f008 f84e 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7854:	2400      	movs	r4, #0
    7856:	e7e8      	b.n	782a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7858:	000554a0 	.word	0x000554a0
    785c:	000555f0 	.word	0x000555f0
    7860:	0005556c 	.word	0x0005556c
    7864:	000568a4 	.word	0x000568a4

00007868 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    786c:	b082      	sub	sp, #8
    786e:	4680      	mov	r8, r0
    7870:	460e      	mov	r6, r1
    7872:	4617      	mov	r7, r2
    7874:	461d      	mov	r5, r3
    7876:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    787a:	4608      	mov	r0, r1
    787c:	f006 f8ec 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7880:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7882:	4620      	mov	r0, r4
    7884:	f006 f8ee 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7888:	2808      	cmp	r0, #8
    788a:	d93e      	bls.n	790a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    788c:	f104 0008 	add.w	r0, r4, #8
    7890:	f006 f8e8 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7894:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7896:	2800      	cmp	r0, #0
    7898:	d039      	beq.n	790e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    789a:	4620      	mov	r0, r4
    789c:	f006 f8d6 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78a0:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78a2:	6820      	ldr	r0, [r4, #0]
    78a4:	f006 f8d1 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    78a8:	4581      	cmp	r9, r0
    78aa:	d232      	bcs.n	7912 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    78ac:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    78ae:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    78b2:	4620      	mov	r0, r4
    78b4:	f006 f8ca 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    78b8:	42c4      	cmn	r4, r0
    78ba:	d031      	beq.n	7920 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    78bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    78c0:	6803      	ldr	r3, [r0, #0]
    78c2:	691b      	ldr	r3, [r3, #16]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    78c4:	2204      	movs	r2, #4
    78c6:	2140      	movs	r1, #64	; 0x40
    78c8:	4798      	blx	r3
    78ca:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    78cc:	f8d8 3000 	ldr.w	r3, [r8]
    78d0:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    78d4:	2301      	movs	r3, #1
    78d6:	9301      	str	r3, [sp, #4]
    78d8:	f8cd 9000 	str.w	r9, [sp]
    78dc:	462b      	mov	r3, r5
    78de:	4602      	mov	r2, r0
    78e0:	4631      	mov	r1, r6
    78e2:	4640      	mov	r0, r8
    78e4:	47d0      	blx	sl
    78e6:	b9e8      	cbnz	r0, 7924 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    78e8:	b15f      	cbz	r7, 7902 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    78ea:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
    78ee:	687b      	ldr	r3, [r7, #4]
    78f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    78f4:	00ad      	lsls	r5, r5, #2
    78f6:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    78f8:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    78fa:	687b      	ldr	r3, [r7, #4]
    78fc:	441d      	add	r5, r3
    78fe:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7900:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7902:	4620      	mov	r0, r4
    7904:	b002      	add	sp, #8
    7906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    790a:	2000      	movs	r0, #0
    790c:	e7c2      	b.n	7894 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    790e:	2400      	movs	r4, #0
    7910:	e7c7      	b.n	78a2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7912:	4b08      	ldr	r3, [pc, #32]	; (7934 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    7914:	4a08      	ldr	r2, [pc, #32]	; (7938 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7916:	f44f 7183 	mov.w	r1, #262	; 0x106
    791a:	4808      	ldr	r0, [pc, #32]	; (793c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    791c:	f004 fe2c 	bl	c578 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7920:	f008 fb98 	bl	10054 <abort>
    TF_LITE_REPORT_ERROR(
    7924:	4906      	ldr	r1, [pc, #24]	; (7940 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd8>)
    7926:	f8d8 000c 	ldr.w	r0, [r8, #12]
    792a:	f007 ffe1 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    792e:	2400      	movs	r4, #0
    7930:	e7e7      	b.n	7902 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7932:	bf00      	nop
    7934:	000554a0 	.word	0x000554a0
    7938:	000555f0 	.word	0x000555f0
    793c:	0005556c 	.word	0x0005556c
    7940:	000568f0 	.word	0x000568f0

00007944 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>:
    const Model* model, const int32_t** offline_planner_offsets) {
    7944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7948:	4607      	mov	r7, r0
    794a:	460c      	mov	r4, r1
    794c:	4690      	mov	r8, r2
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
    794e:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7950:	4608      	mov	r0, r1
    7952:	f006 f881 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7956:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7958:	4628      	mov	r0, r5
    795a:	f006 f883 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    795e:	2810      	cmp	r0, #16
    7960:	d904      	bls.n	796c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x28>
    7962:	f105 0010 	add.w	r0, r5, #16
    7966:	f006 f87d 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    796a:	e000      	b.n	796e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x2a>
    796c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    796e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7970:	b140      	cbz	r0, 7984 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x40>
    7972:	4620      	mov	r0, r4
    7974:	f006 f86a 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7978:	4404      	add	r4, r0
  if (model->metadata()) {
    797a:	2c00      	cmp	r4, #0
    797c:	f000 80cc 	beq.w	7b18 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    7980:	2500      	movs	r5, #0
    7982:	e023      	b.n	79cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x88>
    7984:	2400      	movs	r4, #0
    7986:	e7f8      	b.n	797a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7988:	2000      	movs	r0, #0
    798a:	e02c      	b.n	79e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xa2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    798c:	2400      	movs	r4, #0
    798e:	e031      	b.n	79f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xb0>
    FLATBUFFERS_ASSERT(i < size());
    7990:	4b64      	ldr	r3, [pc, #400]	; (7b24 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    7992:	4a65      	ldr	r2, [pc, #404]	; (7b28 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e4>)
    7994:	f44f 7183 	mov.w	r1, #262	; 0x106
    7998:	4864      	ldr	r0, [pc, #400]	; (7b2c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    799a:	f004 fded 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    799e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    79a0:	eb04 0900 	add.w	r9, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79a4:	2800      	cmp	r0, #0
    79a6:	d046      	beq.n	7a36 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf2>
    79a8:	4648      	mov	r0, r9
    79aa:	f006 f84f 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79ae:	4481      	add	r9, r0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    79b0:	f109 0904 	add.w	r9, r9, #4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    79b4:	f8df a180 	ldr.w	sl, [pc, #384]	; 7b38 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f4>
    79b8:	4650      	mov	r0, sl
    79ba:	f7f9 fdab 	bl	1514 <strlen>
    79be:	4602      	mov	r2, r0
    79c0:	4651      	mov	r1, sl
    79c2:	4648      	mov	r0, r9
    79c4:	f008 fcc3 	bl	1034e <strncmp>
    79c8:	b3c0      	cbz	r0, 7a3c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    79ca:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    79cc:	4630      	mov	r0, r6
    79ce:	f006 f843 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79d2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79d4:	4620      	mov	r0, r4
    79d6:	f006 f845 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79da:	2810      	cmp	r0, #16
    79dc:	d9d4      	bls.n	7988 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x44>
    79de:	f104 0010 	add.w	r0, r4, #16
    79e2:	f006 f83f 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    79e6:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79e8:	2800      	cmp	r0, #0
    79ea:	d0cf      	beq.n	798c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x48>
    79ec:	4620      	mov	r0, r4
    79ee:	f006 f82d 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79f2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    79f4:	6820      	ldr	r0, [r4, #0]
    79f6:	f006 f828 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    79fa:	4285      	cmp	r5, r0
    79fc:	f080 808e 	bcs.w	7b1c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d8>
    7a00:	6820      	ldr	r0, [r4, #0]
    7a02:	f006 f822 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a06:	4285      	cmp	r5, r0
    7a08:	d2c2      	bcs.n	7990 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x4c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a0a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7a0c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7a10:	4620      	mov	r0, r4
    7a12:	f006 f81b 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a16:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7a18:	4620      	mov	r0, r4
    7a1a:	f006 f81d 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a1e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a22:	4648      	mov	r0, r9
    7a24:	f006 f81e 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a28:	2804      	cmp	r0, #4
    7a2a:	d9b8      	bls.n	799e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5a>
    7a2c:	f109 0004 	add.w	r0, r9, #4
    7a30:	f006 f818 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7a34:	e7b4      	b.n	79a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a36:	f04f 0900 	mov.w	r9, #0
    7a3a:	e7b9      	b.n	79b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x6c>
    return data_ - ReadScalar<soffset_t>(data_);
    7a3c:	4630      	mov	r0, r6
    7a3e:	f006 f80b 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a42:	eba6 0900 	sub.w	r9, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a46:	4648      	mov	r0, r9
    7a48:	f006 f80c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a4c:	280c      	cmp	r0, #12
    7a4e:	d94e      	bls.n	7aee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1aa>
    7a50:	f109 000c 	add.w	r0, r9, #12
    7a54:	f006 f806 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7a58:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a5c:	2800      	cmp	r0, #0
    7a5e:	d048      	beq.n	7af2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ae>
    7a60:	4648      	mov	r0, r9
    7a62:	f005 fff3 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a66:	4481      	add	r9, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7a68:	4620      	mov	r0, r4
    7a6a:	f005 fff5 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a6e:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a72:	4650      	mov	r0, sl
    7a74:	f005 fff6 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a78:	2806      	cmp	r0, #6
    7a7a:	d93d      	bls.n	7af8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b4>
    7a7c:	f10a 0006 	add.w	r0, sl, #6
    7a80:	f005 fff0 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7a84:	b3d0      	cbz	r0, 7afc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b8>
    7a86:	4420      	add	r0, r4
    7a88:	f005 ffe0 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a8c:	4682      	mov	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a8e:	f8d9 0000 	ldr.w	r0, [r9]
    7a92:	f005 ffda 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a96:	4550      	cmp	r0, sl
    7a98:	d933      	bls.n	7b02 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1be>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a9a:	f109 0404 	add.w	r4, r9, #4
    p += i * sizeof(uoffset_t);
    7a9e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7aa2:	4620      	mov	r0, r4
    7aa4:	f005 ffd2 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7aa8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7aaa:	4620      	mov	r0, r4
    7aac:	f005 ffd4 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7ab0:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7ab4:	4648      	mov	r0, r9
    7ab6:	f005 ffd5 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7aba:	2804      	cmp	r0, #4
    7abc:	d928      	bls.n	7b10 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1cc>
    7abe:	f109 0004 	add.w	r0, r9, #4
    7ac2:	f005 ffcf 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7ac6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ac8:	b320      	cbz	r0, 7b14 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d0>
    7aca:	4620      	mov	r0, r4
    7acc:	f005 ffbe 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ad0:	4420      	add	r0, r4
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    7ad2:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    7ad4:	3010      	adds	r0, #16
        *offline_planner_offsets =
    7ad6:	f8c8 0000 	str.w	r0, [r8]
        if (tensor_count_ != nbr_tensors) {
    7ada:	687b      	ldr	r3, [r7, #4]
    7adc:	4293      	cmp	r3, r2
    7ade:	f43f af74 	beq.w	79ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x86>
          TF_LITE_REPORT_ERROR(reporter_,
    7ae2:	4913      	ldr	r1, [pc, #76]	; (7b30 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ec>)
    7ae4:	68f8      	ldr	r0, [r7, #12]
    7ae6:	f007 ff03 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
    7aea:	2001      	movs	r0, #1
    7aec:	e017      	b.n	7b1e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7aee:	2000      	movs	r0, #0
    7af0:	e7b2      	b.n	7a58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7af2:	f04f 0900 	mov.w	r9, #0
    7af6:	e7b7      	b.n	7a68 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x124>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7af8:	2000      	movs	r0, #0
    7afa:	e7c3      	b.n	7a84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x140>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7afc:	f04f 0a00 	mov.w	sl, #0
    7b00:	e7c5      	b.n	7a8e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x14a>
    FLATBUFFERS_ASSERT(i < size());
    7b02:	4b08      	ldr	r3, [pc, #32]	; (7b24 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    7b04:	4a0b      	ldr	r2, [pc, #44]	; (7b34 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f0>)
    7b06:	f44f 7183 	mov.w	r1, #262	; 0x106
    7b0a:	4808      	ldr	r0, [pc, #32]	; (7b2c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    7b0c:	f004 fd34 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b10:	2000      	movs	r0, #0
    7b12:	e7d8      	b.n	7ac6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x182>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b14:	2000      	movs	r0, #0
    7b16:	e7dc      	b.n	7ad2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x18e>
  return kTfLiteOk;
    7b18:	2000      	movs	r0, #0
    7b1a:	e000      	b.n	7b1e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    7b1c:	2000      	movs	r0, #0
}
    7b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b22:	bf00      	nop
    7b24:	000554a0 	.word	0x000554a0
    7b28:	00056934 	.word	0x00056934
    7b2c:	0005556c 	.word	0x0005556c
    7b30:	00056a2c 	.word	0x00056a2c
    7b34:	000567b0 	.word	0x000567b0
    7b38:	00056dd8 	.word	0x00056dd8

00007b3c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    7b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(model != nullptr);
    7b40:	b349      	cbz	r1, 7b96 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5a>
    7b42:	4604      	mov	r4, r0
    7b44:	460d      	mov	r5, r1
  if (model_is_allocating_) {
    7b46:	7c03      	ldrb	r3, [r0, #16]
    7b48:	bb3b      	cbnz	r3, 7b9a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5e>
  model_is_allocating_ = true;
    7b4a:	2301      	movs	r3, #1
    7b4c:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    7b4e:	6840      	ldr	r0, [r0, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    7b50:	6803      	ldr	r3, [r0, #0]
    7b52:	68db      	ldr	r3, [r3, #12]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    7b54:	2204      	movs	r2, #4
    7b56:	2108      	movs	r1, #8
    7b58:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    7b5a:	4603      	mov	r3, r0
    7b5c:	b118      	cbz	r0, 7b66 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    7b5e:	6862      	ldr	r2, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    7b60:	4926      	ldr	r1, [pc, #152]	; (7bfc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc0>)
    7b62:	6001      	str	r1, [r0, #0]
    7b64:	6042      	str	r2, [r0, #4]
  builtin_data_allocator_ =
    7b66:	60a3      	str	r3, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    7b68:	4620      	mov	r0, r4
    7b6a:	f007 fc9b 	bl	f4a4 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    7b6e:	2800      	cmp	r0, #0
    7b70:	d142      	bne.n	7bf8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xbc>
      memory_allocator_->AllocateFromTail(
    7b72:	6867      	ldr	r7, [r4, #4]
          alignof(SubgraphAllocations)));
    7b74:	683b      	ldr	r3, [r7, #0]
    7b76:	f8d3 800c 	ldr.w	r8, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    7b7a:	4628      	mov	r0, r5
    7b7c:	f005 ff6c 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b80:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b82:	4630      	mov	r0, r6
    7b84:	f005 ff6e 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b88:	2808      	cmp	r0, #8
    7b8a:	d90c      	bls.n	7ba6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
    7b8c:	f106 0008 	add.w	r0, r6, #8
    7b90:	f005 ff68 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7b94:	e008      	b.n	7ba8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
  TFLITE_DCHECK(model != nullptr);
    7b96:	f008 fa5d 	bl	10054 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7b9a:	4919      	ldr	r1, [pc, #100]	; (7c00 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc4>)
    7b9c:	68c0      	ldr	r0, [r0, #12]
    7b9e:	f007 fea7 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7ba2:	2600      	movs	r6, #0
    7ba4:	e01d      	b.n	7be2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    7ba6:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7ba8:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7baa:	b1e8      	cbz	r0, 7be8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>
    7bac:	4630      	mov	r0, r6
    7bae:	f005 ff4d 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7bb2:	4406      	add	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7bb4:	6830      	ldr	r0, [r6, #0]
    7bb6:	f005 ff48 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      memory_allocator_->AllocateFromTail(
    7bba:	2204      	movs	r2, #4
    7bbc:	00c1      	lsls	r1, r0, #3
    7bbe:	4638      	mov	r0, r7
    7bc0:	47c0      	blx	r8
  if (output == nullptr) {
    7bc2:	4606      	mov	r6, r0
    7bc4:	b190      	cbz	r0, 7bec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb0>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    7bc6:	6823      	ldr	r3, [r4, #0]
    7bc8:	69db      	ldr	r3, [r3, #28]
    7bca:	4602      	mov	r2, r0
    7bcc:	4629      	mov	r1, r5
    7bce:	4620      	mov	r0, r4
    7bd0:	4798      	blx	r3
    7bd2:	b978      	cbnz	r0, 7bf4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    7bd4:	6823      	ldr	r3, [r4, #0]
    7bd6:	699b      	ldr	r3, [r3, #24]
    7bd8:	4632      	mov	r2, r6
    7bda:	4629      	mov	r1, r5
    7bdc:	4620      	mov	r0, r4
    7bde:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    7be0:	b940      	cbnz	r0, 7bf4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
}
    7be2:	4630      	mov	r0, r6
    7be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7be8:	2600      	movs	r6, #0
    7bea:	e7e3      	b.n	7bb4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    MicroPrintf("Failed to allocate memory for model metadata.");
    7bec:	4805      	ldr	r0, [pc, #20]	; (7c04 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc8>)
    7bee:	f007 f90a 	bl	ee06 <_Z11MicroPrintfPKcz>
    return nullptr;
    7bf2:	e7f6      	b.n	7be2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    7bf4:	2600      	movs	r6, #0
    7bf6:	e7f4      	b.n	7be2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    7bf8:	2600      	movs	r6, #0
    7bfa:	e7f2      	b.n	7be2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    7bfc:	00056df8 	.word	0x00056df8
    7c00:	00056a78 	.word	0x00056a78
    7c04:	00056ad0 	.word	0x00056ad0

00007c08 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    7c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7c0c:	b083      	sub	sp, #12
    7c0e:	4680      	mov	r8, r0
    7c10:	460e      	mov	r6, r1
    7c12:	4617      	mov	r7, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    7c14:	2500      	movs	r5, #0
    7c16:	e013      	b.n	7c40 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c18:	2000      	movs	r0, #0
    7c1a:	e01d      	b.n	7c58 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x50>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c1c:	2400      	movs	r4, #0
    7c1e:	e022      	b.n	7c66 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    FLATBUFFERS_ASSERT(i < size());
    7c20:	4b31      	ldr	r3, [pc, #196]	; (7ce8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe0>)
    7c22:	4a32      	ldr	r2, [pc, #200]	; (7cec <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe4>)
    7c24:	f44f 7183 	mov.w	r1, #262	; 0x106
    7c28:	4831      	ldr	r0, [pc, #196]	; (7cf0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe8>)
    7c2a:	f004 fca5 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c2e:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7c30:	b118      	cbz	r0, 7c3a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
    7c32:	4420      	add	r0, r4
    7c34:	f007 fa30 	bl	f098 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    7c38:	e000      	b.n	7c3c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x34>
    7c3a:	2000      	movs	r0, #0
    auto* tensor = subgraph->tensors()->Get(i);
    if (tensor->is_variable()) {
    7c3c:	bb98      	cbnz	r0, 7ca6 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9e>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    7c3e:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7c40:	4630      	mov	r0, r6
    7c42:	f005 ff09 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c46:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c48:	4620      	mov	r0, r4
    7c4a:	f005 ff0b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c4e:	2804      	cmp	r0, #4
    7c50:	d9e2      	bls.n	7c18 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
    7c52:	1d20      	adds	r0, r4, #4
    7c54:	f005 ff06 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7c58:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c5a:	2800      	cmp	r0, #0
    7c5c:	d0de      	beq.n	7c1c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
    7c5e:	4620      	mov	r0, r4
    7c60:	f005 fef4 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c64:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7c66:	6820      	ldr	r0, [r4, #0]
    7c68:	f005 feef 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7c6c:	4285      	cmp	r5, r0
    7c6e:	d236      	bcs.n	7cde <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd6>
    7c70:	6820      	ldr	r0, [r4, #0]
    7c72:	f005 feea 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7c76:	4285      	cmp	r5, r0
    7c78:	d2d2      	bcs.n	7c20 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c7a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7c7c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7c80:	4620      	mov	r0, r4
    7c82:	f005 fee3 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c86:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7c88:	4620      	mov	r0, r4
    7c8a:	f005 fee5 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c8e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c92:	4648      	mov	r0, r9
    7c94:	f005 fee6 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c98:	280e      	cmp	r0, #14
    7c9a:	d9c8      	bls.n	7c2e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x26>
    7c9c:	f109 000e 	add.w	r0, r9, #14
    7ca0:	f005 fee0 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7ca4:	e7c4      	b.n	7c30 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    7ca6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    7caa:	0084      	lsls	r4, r0, #2
    7cac:	a901      	add	r1, sp, #4
    7cae:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    7cb2:	f007 f90c 	bl	eece <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    7cb6:	4603      	mov	r3, r0
    7cb8:	b990      	cbnz	r0, 7ce0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    7cba:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7cbe:	6803      	ldr	r3, [r0, #0]
    7cc0:	68db      	ldr	r3, [r3, #12]
    7cc2:	2210      	movs	r2, #16
    7cc4:	9901      	ldr	r1, [sp, #4]
    7cc6:	4798      	blx	r3
      eval_tensors[i].data.data =
    7cc8:	5138      	str	r0, [r7, r4]

      if (eval_tensors[i].data.data == nullptr) {
    7cca:	2800      	cmp	r0, #0
    7ccc:	d1b7      	bne.n	7c3e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        TF_LITE_REPORT_ERROR(error_reporter_,
    7cce:	9a01      	ldr	r2, [sp, #4]
    7cd0:	4908      	ldr	r1, [pc, #32]	; (7cf4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xec>)
    7cd2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    7cd6:	f007 fe0b 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    7cda:	2301      	movs	r3, #1
    7cdc:	e000      	b.n	7ce0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
      }
    }
  }
  return kTfLiteOk;
    7cde:	2300      	movs	r3, #0
}
    7ce0:	4618      	mov	r0, r3
    7ce2:	b003      	add	sp, #12
    7ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7ce8:	000554a0 	.word	0x000554a0
    7cec:	00055788 	.word	0x00055788
    7cf0:	0005556c 	.word	0x0005556c
    7cf4:	00056b00 	.word	0x00056b00

00007cf8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    7cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cfc:	b083      	sub	sp, #12
  TFLITE_DCHECK(eval_tensors != nullptr);
    7cfe:	b12b      	cbz	r3, 7d0c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x14>
    7d00:	4604      	mov	r4, r0
    7d02:	4688      	mov	r8, r1
    7d04:	4692      	mov	sl, r2
    7d06:	4699      	mov	r9, r3
  for (size_t i = 0; i < tensor_count_; ++i) {
    7d08:	2600      	movs	r6, #0
    7d0a:	e04b      	b.n	7da4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xac>
  TFLITE_DCHECK(eval_tensors != nullptr);
    7d0c:	f008 f9a2 	bl	10054 <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    7d10:	4640      	mov	r0, r8
    7d12:	f005 fea1 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7d16:	eba8 0b00 	sub.w	fp, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7d1a:	4658      	mov	r0, fp
    7d1c:	f005 fea2 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d20:	2804      	cmp	r0, #4
    7d22:	d92e      	bls.n	7d82 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8a>
    7d24:	f10b 0004 	add.w	r0, fp, #4
    7d28:	f005 fe9c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7d2c:	eb08 0b00 	add.w	fp, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d30:	b120      	cbz	r0, 7d3c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x44>
    7d32:	4658      	mov	r0, fp
    7d34:	f005 fe8a 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d38:	eb0b 0700 	add.w	r7, fp, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7d3c:	6838      	ldr	r0, [r7, #0]
    7d3e:	f005 fe84 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7d42:	4286      	cmp	r6, r0
    7d44:	d21f      	bcs.n	7d86 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7d46:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
    7d48:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7d4c:	4638      	mov	r0, r7
    7d4e:	f005 fe7d 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d52:	4407      	add	r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7d54:	4638      	mov	r0, r7
    7d56:	f005 fe7f 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7d5a:	eba7 0b00 	sub.w	fp, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7d5e:	4658      	mov	r0, fp
    7d60:	f005 fe80 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d64:	280e      	cmp	r0, #14
    7d66:	d915      	bls.n	7d94 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x9c>
    7d68:	f10b 000e 	add.w	r0, fp, #14
    7d6c:	f005 fe7a 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7d70:	b118      	cbz	r0, 7d7a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x82>
    7d72:	4438      	add	r0, r7
    7d74:	f007 f990 	bl	f098 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    7d78:	9001      	str	r0, [sp, #4]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    7d7a:	9b01      	ldr	r3, [sp, #4]
    7d7c:	b963      	cbnz	r3, 7d98 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa0>
    7d7e:	2301      	movs	r3, #1
    7d80:	e02c      	b.n	7ddc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d82:	2000      	movs	r0, #0
    7d84:	e7d2      	b.n	7d2c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x34>
    FLATBUFFERS_ASSERT(i < size());
    7d86:	4bb6      	ldr	r3, [pc, #728]	; (8060 <CONFIG_MAIN_STACK_SIZE+0x60>)
    7d88:	4ab6      	ldr	r2, [pc, #728]	; (8064 <CONFIG_MAIN_STACK_SIZE+0x64>)
    7d8a:	f44f 7183 	mov.w	r1, #262	; 0x106
    7d8e:	48b6      	ldr	r0, [pc, #728]	; (8068 <CONFIG_MAIN_STACK_SIZE+0x68>)
    7d90:	f004 fbf2 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d94:	2000      	movs	r0, #0
    7d96:	e7eb      	b.n	7d70 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x78>
    7d98:	2300      	movs	r3, #0
    7d9a:	e01f      	b.n	7ddc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
      current->offline_offset = kOnlinePlannedBuffer;
    7d9c:	f04f 33ff 	mov.w	r3, #4294967295
    7da0:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    7da2:	3601      	adds	r6, #1
    7da4:	6863      	ldr	r3, [r4, #4]
    7da6:	42b3      	cmp	r3, r6
    7da8:	d920      	bls.n	7dec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xf4>
    AllocationInfo* current = &info_[i];
    7daa:	6825      	ldr	r5, [r4, #0]
    7dac:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    7db0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    current->output_ptr = &(eval_tensors[i].data.data);
    7db4:	009f      	lsls	r7, r3, #2
    7db6:	eb09 0083 	add.w	r0, r9, r3, lsl #2
    7dba:	6068      	str	r0, [r5, #4]
    TF_LITE_ENSURE_STATUS(
    7dbc:	4629      	mov	r1, r5
    7dbe:	f007 f886 	bl	eece <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    7dc2:	9001      	str	r0, [sp, #4]
    7dc4:	2800      	cmp	r0, #0
    7dc6:	f040 8146 	bne.w	8056 <CONFIG_MAIN_STACK_SIZE+0x56>
    current->first_created = -1;
    7dca:	f04f 33ff 	mov.w	r3, #4294967295
    7dce:	60ab      	str	r3, [r5, #8]
    current->last_used = -1;
    7dd0:	60eb      	str	r3, [r5, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    7dd2:	f859 7007 	ldr.w	r7, [r9, r7]
    7dd6:	2f00      	cmp	r7, #0
    7dd8:	d09a      	beq.n	7d10 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x18>
    7dda:	2300      	movs	r3, #0
    7ddc:	752b      	strb	r3, [r5, #20]
    if (offline_offsets) {
    7dde:	f1ba 0f00 	cmp.w	sl, #0
    7de2:	d0db      	beq.n	7d9c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa4>
      current->offline_offset = offline_offsets[i];
    7de4:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    7de8:	612b      	str	r3, [r5, #16]
    7dea:	e7da      	b.n	7da2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xaa>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    7dec:	4640      	mov	r0, r8
    7dee:	f007 f934 	bl	f05a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    7df2:	4607      	mov	r7, r0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    7df4:	f04f 0900 	mov.w	r9, #0
    7df8:	e01f      	b.n	7e3a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x142>
    7dfa:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7dfc:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e00:	b350      	cbz	r0, 7e58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x160>
    7e02:	4628      	mov	r0, r5
    7e04:	f005 fe22 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e08:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7e0a:	6828      	ldr	r0, [r5, #0]
    7e0c:	f005 fe1d 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7e10:	4581      	cmp	r9, r0
    7e12:	d22a      	bcs.n	7e6a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x172>
    7e14:	6828      	ldr	r0, [r5, #0]
    7e16:	f005 fe18 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7e1a:	4581      	cmp	r9, r0
    7e1c:	d21e      	bcs.n	7e5c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x164>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7e1e:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7e20:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    7e24:	f005 fe17 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    7e28:	6823      	ldr	r3, [r4, #0]
    7e2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7e2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->first_created = 0;
    7e32:	2300      	movs	r3, #0
    7e34:	6083      	str	r3, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    7e36:	f109 0901 	add.w	r9, r9, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    7e3a:	4646      	mov	r6, r8
    return data_ - ReadScalar<soffset_t>(data_);
    7e3c:	4640      	mov	r0, r8
    7e3e:	f005 fe0b 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e42:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e46:	4628      	mov	r0, r5
    7e48:	f005 fe0c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e4c:	2806      	cmp	r0, #6
    7e4e:	d9d4      	bls.n	7dfa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x102>
    7e50:	1da8      	adds	r0, r5, #6
    7e52:	f005 fe07 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7e56:	e7d1      	b.n	7dfc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x104>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e58:	2500      	movs	r5, #0
    7e5a:	e7d6      	b.n	7e0a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x112>
    FLATBUFFERS_ASSERT(i < size());
    7e5c:	4b80      	ldr	r3, [pc, #512]	; (8060 <CONFIG_MAIN_STACK_SIZE+0x60>)
    7e5e:	4a83      	ldr	r2, [pc, #524]	; (806c <CONFIG_MAIN_STACK_SIZE+0x6c>)
    7e60:	f44f 7183 	mov.w	r1, #262	; 0x106
    7e64:	4880      	ldr	r0, [pc, #512]	; (8068 <CONFIG_MAIN_STACK_SIZE+0x68>)
    7e66:	f004 fb87 	bl	c578 <__assert_func>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    7e6a:	f04f 0800 	mov.w	r8, #0
    7e6e:	e01e      	b.n	7eae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1b6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e70:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7e72:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e74:	b348      	cbz	r0, 7eca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d2>
    7e76:	4628      	mov	r0, r5
    7e78:	f005 fde8 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e7c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7e7e:	6828      	ldr	r0, [r5, #0]
    7e80:	f005 fde3 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7e84:	4580      	cmp	r8, r0
    7e86:	d229      	bcs.n	7edc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e4>
    7e88:	6828      	ldr	r0, [r5, #0]
    7e8a:	f005 fdde 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7e8e:	4580      	cmp	r8, r0
    7e90:	d21d      	bcs.n	7ece <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7e92:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7e94:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
    7e98:	f005 fddd 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    7e9c:	6823      	ldr	r3, [r4, #0]
    7e9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7ea2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->last_used = operators_size - 1;
    7ea6:	1e7b      	subs	r3, r7, #1
    7ea8:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    7eaa:	f108 0801 	add.w	r8, r8, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7eae:	4630      	mov	r0, r6
    7eb0:	f005 fdd2 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7eb4:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7eb6:	4628      	mov	r0, r5
    7eb8:	f005 fdd4 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ebc:	2808      	cmp	r0, #8
    7ebe:	d9d7      	bls.n	7e70 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x178>
    7ec0:	f105 0008 	add.w	r0, r5, #8
    7ec4:	f005 fdce 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7ec8:	e7d3      	b.n	7e72 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x17a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7eca:	2500      	movs	r5, #0
    7ecc:	e7d7      	b.n	7e7e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x186>
    FLATBUFFERS_ASSERT(i < size());
    7ece:	4b64      	ldr	r3, [pc, #400]	; (8060 <CONFIG_MAIN_STACK_SIZE+0x60>)
    7ed0:	4a66      	ldr	r2, [pc, #408]	; (806c <CONFIG_MAIN_STACK_SIZE+0x6c>)
    7ed2:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ed6:	4864      	ldr	r0, [pc, #400]	; (8068 <CONFIG_MAIN_STACK_SIZE+0x68>)
    7ed8:	f004 fb4e 	bl	c578 <__assert_func>
  for (int i = (operators_size - 1); i >= 0; --i) {
    7edc:	3f01      	subs	r7, #1
    7ede:	e08d      	b.n	7ffc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x304>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ee0:	2000      	movs	r0, #0
    7ee2:	e09b      	b.n	801c <CONFIG_MAIN_STACK_SIZE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ee4:	f04f 0900 	mov.w	r9, #0
    7ee8:	e0a1      	b.n	802e <CONFIG_MAIN_STACK_SIZE+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    7eea:	4b5d      	ldr	r3, [pc, #372]	; (8060 <CONFIG_MAIN_STACK_SIZE+0x60>)
    7eec:	4a60      	ldr	r2, [pc, #384]	; (8070 <CONFIG_MAIN_STACK_SIZE+0x70>)
    7eee:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ef2:	485d      	ldr	r0, [pc, #372]	; (8068 <CONFIG_MAIN_STACK_SIZE+0x68>)
    7ef4:	f004 fb40 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ef8:	2000      	movs	r0, #0
    7efa:	e019      	b.n	7f30 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x238>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7efc:	2500      	movs	r5, #0
    7efe:	e01f      	b.n	7f40 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x248>
    FLATBUFFERS_ASSERT(i < size());
    7f00:	4b57      	ldr	r3, [pc, #348]	; (8060 <CONFIG_MAIN_STACK_SIZE+0x60>)
    7f02:	4a5a      	ldr	r2, [pc, #360]	; (806c <CONFIG_MAIN_STACK_SIZE+0x6c>)
    7f04:	f44f 7183 	mov.w	r1, #262	; 0x106
    7f08:	4857      	ldr	r0, [pc, #348]	; (8068 <CONFIG_MAIN_STACK_SIZE+0x68>)
    7f0a:	f004 fb35 	bl	c578 <__assert_func>
        current->last_used = i;
    7f0e:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    7f10:	f10a 0a01 	add.w	sl, sl, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    7f14:	46c8      	mov	r8, r9
    return data_ - ReadScalar<soffset_t>(data_);
    7f16:	4648      	mov	r0, r9
    7f18:	f005 fd9e 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f1c:	eba9 0500 	sub.w	r5, r9, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f20:	4628      	mov	r0, r5
    7f22:	f005 fd9f 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f26:	2806      	cmp	r0, #6
    7f28:	d9e6      	bls.n	7ef8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x200>
    7f2a:	1da8      	adds	r0, r5, #6
    7f2c:	f005 fd9a 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7f30:	eb09 0500 	add.w	r5, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f34:	2800      	cmp	r0, #0
    7f36:	d0e1      	beq.n	7efc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x204>
    7f38:	4628      	mov	r0, r5
    7f3a:	f005 fd87 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f3e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7f40:	6828      	ldr	r0, [r5, #0]
    7f42:	f005 fd82 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7f46:	4582      	cmp	sl, r0
    7f48:	d215      	bcs.n	7f76 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x27e>
    7f4a:	6828      	ldr	r0, [r5, #0]
    7f4c:	f005 fd7d 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7f50:	4582      	cmp	sl, r0
    7f52:	d2d5      	bcs.n	7f00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x208>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7f54:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7f56:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
    7f5a:	f005 fd7c 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    7f5e:	6823      	ldr	r3, [r4, #0]
    7f60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7f64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    7f68:	68c3      	ldr	r3, [r0, #12]
    7f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    7f6e:	d0ce      	beq.n	7f0e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    7f70:	42bb      	cmp	r3, r7
    7f72:	dacd      	bge.n	7f10 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x218>
    7f74:	e7cb      	b.n	7f0e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    7f76:	f04f 0900 	mov.w	r9, #0
    7f7a:	e00d      	b.n	7f98 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2a0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f7c:	2000      	movs	r0, #0
    7f7e:	e019      	b.n	7fb4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2bc>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f80:	2500      	movs	r5, #0
    7f82:	e01f      	b.n	7fc4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2cc>
    FLATBUFFERS_ASSERT(i < size());
    7f84:	4b36      	ldr	r3, [pc, #216]	; (8060 <CONFIG_MAIN_STACK_SIZE+0x60>)
    7f86:	4a39      	ldr	r2, [pc, #228]	; (806c <CONFIG_MAIN_STACK_SIZE+0x6c>)
    7f88:	f44f 7183 	mov.w	r1, #262	; 0x106
    7f8c:	4836      	ldr	r0, [pc, #216]	; (8068 <CONFIG_MAIN_STACK_SIZE+0x68>)
    7f8e:	f004 faf3 	bl	c578 <__assert_func>
        current->first_created = i;
    7f92:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    7f94:	f109 0901 	add.w	r9, r9, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7f98:	4640      	mov	r0, r8
    7f9a:	f005 fd5d 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f9e:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7fa2:	4628      	mov	r0, r5
    7fa4:	f005 fd5e 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fa8:	2808      	cmp	r0, #8
    7faa:	d9e7      	bls.n	7f7c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x284>
    7fac:	f105 0008 	add.w	r0, r5, #8
    7fb0:	f005 fd58 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7fb4:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7fb8:	2800      	cmp	r0, #0
    7fba:	d0e1      	beq.n	7f80 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x288>
    7fbc:	4628      	mov	r0, r5
    7fbe:	f005 fd45 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7fc2:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7fc4:	6828      	ldr	r0, [r5, #0]
    7fc6:	f005 fd40 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7fca:	4581      	cmp	r9, r0
    7fcc:	d215      	bcs.n	7ffa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x302>
    7fce:	6828      	ldr	r0, [r5, #0]
    7fd0:	f005 fd3b 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7fd4:	4581      	cmp	r9, r0
    7fd6:	d2d5      	bcs.n	7f84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7fd8:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7fda:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    7fde:	f005 fd3a 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    7fe2:	6823      	ldr	r3, [r4, #0]
    7fe4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7fe8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    7fec:	6883      	ldr	r3, [r0, #8]
    7fee:	f1b3 3fff 	cmp.w	r3, #4294967295
    7ff2:	d0ce      	beq.n	7f92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
    7ff4:	42bb      	cmp	r3, r7
    7ff6:	ddcd      	ble.n	7f94 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29c>
    7ff8:	e7cb      	b.n	7f92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
  for (int i = (operators_size - 1); i >= 0; --i) {
    7ffa:	3f01      	subs	r7, #1
    7ffc:	2f00      	cmp	r7, #0
    7ffe:	db28      	blt.n	8052 <CONFIG_MAIN_STACK_SIZE+0x52>
    return data_ - ReadScalar<soffset_t>(data_);
    8000:	4630      	mov	r0, r6
    8002:	f005 fd29 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8006:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8008:	4628      	mov	r0, r5
    800a:	f005 fd2b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    800e:	280a      	cmp	r0, #10
    8010:	f67f af66 	bls.w	7ee0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e8>
    8014:	f105 000a 	add.w	r0, r5, #10
    8018:	f005 fd24 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    801c:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8020:	2800      	cmp	r0, #0
    8022:	f43f af5f 	beq.w	7ee4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1ec>
    8026:	4648      	mov	r0, r9
    8028:	f005 fd10 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    802c:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    802e:	f8d9 0000 	ldr.w	r0, [r9]
    8032:	f005 fd0a 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8036:	4287      	cmp	r7, r0
    8038:	f4bf af57 	bcs.w	7eea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    803c:	f109 0904 	add.w	r9, r9, #4
    p += i * sizeof(uoffset_t);
    8040:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8044:	4648      	mov	r0, r9
    8046:	f005 fd01 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    804a:	4481      	add	r9, r0
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    804c:	f04f 0a00 	mov.w	sl, #0
    8050:	e760      	b.n	7f14 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x21c>
  return kTfLiteOk;
    8052:	2300      	movs	r3, #0
    8054:	9301      	str	r3, [sp, #4]
}
    8056:	9801      	ldr	r0, [sp, #4]
    8058:	b003      	add	sp, #12
    805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    805e:	bf00      	nop
    8060:	000554a0 	.word	0x000554a0
    8064:	00055788 	.word	0x00055788
    8068:	0005556c 	.word	0x0005556c
    806c:	000554ac 	.word	0x000554ac
    8070:	000562d8 	.word	0x000562d8

00008074 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8078:	b083      	sub	sp, #12
    807a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    807e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  TFLITE_DCHECK(result != nullptr);
    8080:	b31d      	cbz	r5, 80ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    8082:	4607      	mov	r7, r0
    8084:	4688      	mov	r8, r1
    8086:	4614      	mov	r4, r2
    8088:	469a      	mov	sl, r3
  *result = {};
    808a:	2240      	movs	r2, #64	; 0x40
    808c:	2100      	movs	r1, #0
    808e:	4628      	mov	r0, r5
    8090:	f007 fff9 	bl	10086 <memset>
    return data_ - ReadScalar<soffset_t>(data_);
    8094:	4620      	mov	r0, r4
    8096:	f005 fcdf 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    809a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    809c:	4630      	mov	r0, r6
    809e:	f005 fce1 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80a2:	2806      	cmp	r0, #6
    80a4:	d913      	bls.n	80ce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    80a6:	1db0      	adds	r0, r6, #6
    80a8:	f005 fcdc 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80ac:	b188      	cbz	r0, 80d2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5e>
    80ae:	4420      	add	r0, r4
    80b0:	f006 ff2f 	bl	ef12 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    80b4:	464a      	mov	r2, r9
    80b6:	4629      	mov	r1, r5
    80b8:	b2c0      	uxtb	r0, r0
    80ba:	f000 ff53 	bl	8f64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    80be:	4606      	mov	r6, r0
    80c0:	b148      	cbz	r0, 80d6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x62>
}
    80c2:	4630      	mov	r0, r6
    80c4:	b003      	add	sp, #12
    80c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(result != nullptr);
    80ca:	f007 ffc3 	bl	10054 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80ce:	2000      	movs	r0, #0
    80d0:	e7ec      	b.n	80ac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80d2:	2000      	movs	r0, #0
    80d4:	e7ee      	b.n	80b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    80d6:	4620      	mov	r0, r4
    80d8:	f005 fcbe 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    80dc:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    80e0:	4658      	mov	r0, fp
    80e2:	f005 fcbf 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80e6:	280e      	cmp	r0, #14
    80e8:	d93f      	bls.n	816a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf6>
    80ea:	f10b 000e 	add.w	r0, fp, #14
    80ee:	f005 fcb9 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80f2:	b118      	cbz	r0, 80fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x88>
    80f4:	4420      	add	r0, r4
    80f6:	f006 ffcf 	bl	f098 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    80fa:	4606      	mov	r6, r0
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    80fc:	3e00      	subs	r6, #0
    80fe:	bf18      	it	ne
    8100:	2601      	movne	r6, #1
  result->is_variable = flatbuffer_tensor.is_variable();
    8102:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8106:	4651      	mov	r1, sl
    8108:	4620      	mov	r0, r4
    810a:	f7ff faed 	bl	76e8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    810e:	6068      	str	r0, [r5, #4]
  if (result->data.data == nullptr) {
    8110:	b368      	cbz	r0, 816e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
    result->allocation_type = kTfLiteMmapRo;
    8112:	2301      	movs	r3, #1
    8114:	752b      	strb	r3, [r5, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    8116:	464b      	mov	r3, r9
    8118:	aa01      	add	r2, sp, #4
    811a:	f105 0118 	add.w	r1, r5, #24
    811e:	4620      	mov	r0, r4
    8120:	f7fd fe6a 	bl	5df8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    8124:	4606      	mov	r6, r0
    8126:	2800      	cmp	r0, #0
    8128:	d1cb      	bne.n	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    812a:	4620      	mov	r0, r4
    812c:	f005 fc94 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8130:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8134:	4650      	mov	r0, sl
    8136:	f005 fc95 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    813a:	2804      	cmp	r0, #4
    813c:	d91a      	bls.n	8174 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    813e:	f10a 0004 	add.w	r0, sl, #4
    8142:	f005 fc8f 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8146:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    814a:	b1a8      	cbz	r0, 8178 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    814c:	4650      	mov	r0, sl
    814e:	f005 fc7d 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8152:	eb0a 0200 	add.w	r2, sl, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8156:	b18a      	cbz	r2, 817c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8158:	f105 0308 	add.w	r3, r5, #8
    815c:	4649      	mov	r1, r9
    815e:	4638      	mov	r0, r7
    8160:	f007 f9d3 	bl	f50a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8164:	b160      	cbz	r0, 8180 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10c>
    8166:	4606      	mov	r6, r0
    8168:	e7ab      	b.n	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    816a:	2000      	movs	r0, #0
    816c:	e7c1      	b.n	80f2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    result->allocation_type = kTfLiteArenaRw;
    816e:	2302      	movs	r3, #2
    8170:	752b      	strb	r3, [r5, #20]
    8172:	e7d0      	b.n	8116 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    8174:	2000      	movs	r0, #0
    8176:	e7e6      	b.n	8146 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8178:	2200      	movs	r2, #0
    817a:	e7ec      	b.n	8156 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    817c:	4bb6      	ldr	r3, [pc, #728]	; (8458 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e4>)
    817e:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8180:	4620      	mov	r0, r4
    8182:	f005 fc69 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8186:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    818a:	4650      	mov	r0, sl
    818c:	f005 fc6a 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8190:	280c      	cmp	r0, #12
    8192:	d91a      	bls.n	81ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x156>
    8194:	f10a 000c 	add.w	r0, sl, #12
    8198:	f005 fc64 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    819c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    819e:	b1b0      	cbz	r0, 81ce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15a>
    81a0:	4620      	mov	r0, r4
    81a2:	f005 fc53 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    81a6:	4404      	add	r4, r0
      src_quantization->zero_point() &&
    81a8:	2c00      	cmp	r4, #0
    81aa:	d08a      	beq.n	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    81ac:	46a2      	mov	sl, r4
    return data_ - ReadScalar<soffset_t>(data_);
    81ae:	4620      	mov	r0, r4
    81b0:	f005 fc52 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    81b4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    81b6:	4620      	mov	r0, r4
    81b8:	f005 fc54 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81bc:	2808      	cmp	r0, #8
    81be:	d908      	bls.n	81d2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
    81c0:	f104 0008 	add.w	r0, r4, #8
    81c4:	f005 fc4e 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    81c8:	e004      	b.n	81d4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x160>
    81ca:	2000      	movs	r0, #0
    81cc:	e7e6      	b.n	819c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x128>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81ce:	2400      	movs	r4, #0
    81d0:	e7ea      	b.n	81a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81d2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    81d4:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81d8:	2800      	cmp	r0, #0
    81da:	d060      	beq.n	829e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22a>
    81dc:	4620      	mov	r0, r4
    81de:	f005 fc35 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    81e2:	4404      	add	r4, r0
  if (src_quantization && src_quantization->scale() &&
    81e4:	2c00      	cmp	r4, #0
    81e6:	f43f af6c 	beq.w	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    81ea:	6820      	ldr	r0, [r4, #0]
    81ec:	f005 fc2d 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    81f0:	2800      	cmp	r0, #0
    81f2:	f43f af66 	beq.w	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    81f6:	4650      	mov	r0, sl
    81f8:	f005 fc2e 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    81fc:	ebaa 0b00 	sub.w	fp, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8200:	4658      	mov	r0, fp
    8202:	f005 fc2f 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8206:	280a      	cmp	r0, #10
    8208:	d94b      	bls.n	82a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
    820a:	f10b 000a 	add.w	r0, fp, #10
    820e:	f005 fc29 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8212:	eb0a 0b00 	add.w	fp, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8216:	2800      	cmp	r0, #0
    8218:	d045      	beq.n	82a6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
    821a:	4658      	mov	r0, fp
    821c:	f005 fc16 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8220:	4458      	add	r0, fp
      (src_quantization->scale()->size() > 0) &&
    8222:	2800      	cmp	r0, #0
    8224:	f43f af4d 	beq.w	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    8228:	6800      	ldr	r0, [r0, #0]
    822a:	f005 fc0e 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      src_quantization->zero_point() &&
    822e:	2800      	cmp	r0, #0
    8230:	f43f af47 	beq.w	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    8234:	6820      	ldr	r0, [r4, #0]
    8236:	f005 fc08 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    823a:	b3b0      	cbz	r0, 82aa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x236>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    823c:	6860      	ldr	r0, [r4, #4]
    823e:	f006 ff31 	bl	f0a4 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
    result->params.scale = src_quantization->scale()->Get(0);
    8242:	60e8      	str	r0, [r5, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    8244:	4650      	mov	r0, sl
    8246:	f005 fc07 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    824a:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    824e:	4620      	mov	r0, r4
    8250:	f005 fc08 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8254:	280a      	cmp	r0, #10
    8256:	d92f      	bls.n	82b8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    8258:	f104 000a 	add.w	r0, r4, #10
    825c:	f005 fc02 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8260:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8264:	b350      	cbz	r0, 82bc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    8266:	4620      	mov	r0, r4
    8268:	f005 fbf0 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    826c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    826e:	6820      	ldr	r0, [r4, #0]
    8270:	f005 fbeb 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8274:	b320      	cbz	r0, 82c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8276:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    827a:	f006 ff12 	bl	f0a2 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    result->params.zero_point =
    827e:	6128      	str	r0, [r5, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8280:	4650      	mov	r0, sl
    8282:	f005 fbe9 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8286:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    828a:	4620      	mov	r0, r4
    828c:	f005 fbea 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8290:	2808      	cmp	r0, #8
    8292:	d91c      	bls.n	82ce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25a>
    8294:	f104 0008 	add.w	r0, r4, #8
    8298:	f005 fbe4 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    829c:	e018      	b.n	82d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    829e:	2400      	movs	r4, #0
    82a0:	e7a0      	b.n	81e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82a2:	2000      	movs	r0, #0
    82a4:	e7b5      	b.n	8212 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82a6:	2000      	movs	r0, #0
    82a8:	e7bb      	b.n	8222 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ae>
    FLATBUFFERS_ASSERT(i < size());
    82aa:	4b6c      	ldr	r3, [pc, #432]	; (845c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    82ac:	4a6c      	ldr	r2, [pc, #432]	; (8460 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ec>)
    82ae:	f44f 7183 	mov.w	r1, #262	; 0x106
    82b2:	486c      	ldr	r0, [pc, #432]	; (8464 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    82b4:	f004 f960 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82b8:	2000      	movs	r0, #0
    82ba:	e7d1      	b.n	8260 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82bc:	2400      	movs	r4, #0
    82be:	e7d6      	b.n	826e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fa>
    FLATBUFFERS_ASSERT(i < size());
    82c0:	4b66      	ldr	r3, [pc, #408]	; (845c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    82c2:	4a69      	ldr	r2, [pc, #420]	; (8468 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    82c4:	f44f 7183 	mov.w	r1, #262	; 0x106
    82c8:	4866      	ldr	r0, [pc, #408]	; (8464 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    82ca:	f004 f955 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82ce:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    82d0:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82d4:	b390      	cbz	r0, 833c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>
    82d6:	4620      	mov	r0, r4
    82d8:	f005 fbb8 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82dc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    82de:	6820      	ldr	r0, [r4, #0]
    82e0:	f005 fbb3 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    82e4:	4604      	mov	r4, r0
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    82e6:	f1b8 0f00 	cmp.w	r8, #0
    82ea:	d029      	beq.n	8340 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>
                                          alignof(TfLiteAffineQuantization)))
    82ec:	683b      	ldr	r3, [r7, #0]
    82ee:	691b      	ldr	r3, [r3, #16]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    82f0:	2204      	movs	r2, #4
    82f2:	210c      	movs	r1, #12
    82f4:	4638      	mov	r0, r7
    82f6:	4798      	blx	r3
    82f8:	4683      	mov	fp, r0
    if (quantization == nullptr) {
    82fa:	f1bb 0f00 	cmp.w	fp, #0
    82fe:	d027      	beq.n	8350 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8300:	f1b8 0f00 	cmp.w	r8, #0
    8304:	d02a      	beq.n	835c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
                  alignof(TfLiteIntArray)))
    8306:	683b      	ldr	r3, [r7, #0]
    8308:	691e      	ldr	r6, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    830a:	4620      	mov	r0, r4
    830c:	f007 fa8f 	bl	f82e <TfLiteIntArrayGetSizeInBytes>
    8310:	4601      	mov	r1, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8312:	2204      	movs	r2, #4
    8314:	4638      	mov	r0, r7
    8316:	47b0      	blx	r6
    quantization->zero_point =
    8318:	f8cb 0004 	str.w	r0, [fp, #4]
    if (quantization->zero_point == nullptr) {
    831c:	b340      	cbz	r0, 8370 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2fc>
    return data_ - ReadScalar<soffset_t>(data_);
    831e:	4650      	mov	r0, sl
    8320:	f005 fb9a 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8324:	ebaa 0600 	sub.w	r6, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8328:	4630      	mov	r0, r6
    832a:	f005 fb9b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    832e:	2808      	cmp	r0, #8
    8330:	d924      	bls.n	837c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    8332:	f106 0008 	add.w	r0, r6, #8
    8336:	f005 fb95 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    833a:	e020      	b.n	837e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x30a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    833c:	2400      	movs	r4, #0
    833e:	e7ce      	b.n	82de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
                      alignof(TfLiteAffineQuantization)));
    8340:	683b      	ldr	r3, [r7, #0]
    8342:	68db      	ldr	r3, [r3, #12]
                  allocator->AllocateFromTail(
    8344:	2204      	movs	r2, #4
    8346:	210c      	movs	r1, #12
    8348:	4638      	mov	r0, r7
    834a:	4798      	blx	r3
    834c:	4683      	mov	fp, r0
    834e:	e7d4      	b.n	82fa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      TF_LITE_REPORT_ERROR(error_reporter,
    8350:	4946      	ldr	r1, [pc, #280]	; (846c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f8>)
    8352:	4648      	mov	r0, r9
    8354:	f007 facc 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8358:	2601      	movs	r6, #1
    835a:	e6b2      	b.n	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
                  alignof(TfLiteIntArray)));
    835c:	683b      	ldr	r3, [r7, #0]
    835e:	68de      	ldr	r6, [r3, #12]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8360:	4620      	mov	r0, r4
    8362:	f007 fa64 	bl	f82e <TfLiteIntArrayGetSizeInBytes>
    8366:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8368:	2204      	movs	r2, #4
    836a:	4638      	mov	r0, r7
    836c:	47b0      	blx	r6
    836e:	e7d3      	b.n	8318 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a4>
      TF_LITE_REPORT_ERROR(error_reporter,
    8370:	493f      	ldr	r1, [pc, #252]	; (8470 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3fc>)
    8372:	4648      	mov	r0, r9
    8374:	f007 fabc 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8378:	2601      	movs	r6, #1
    837a:	e6a2      	b.n	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    837c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    837e:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8382:	b1b0      	cbz	r0, 83b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x33e>
    8384:	4630      	mov	r0, r6
    8386:	f005 fb61 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    838a:	1832      	adds	r2, r6, r0
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    838c:	465b      	mov	r3, fp
    838e:	4649      	mov	r1, r9
    8390:	4638      	mov	r0, r7
    8392:	f007 f8cc 	bl	f52e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8396:	4606      	mov	r6, r0
    8398:	2800      	cmp	r0, #0
    839a:	f47f ae92 	bne.w	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    quantization->zero_point->size = channels;
    839e:	f8db 3004 	ldr.w	r3, [fp, #4]
    83a2:	601c      	str	r4, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
    83a4:	f8db 3004 	ldr.w	r3, [fp, #4]
    83a8:	f103 0904 	add.w	r9, r3, #4
    for (int i = 0; i < channels; i++) {
    83ac:	f04f 0800 	mov.w	r8, #0
    83b0:	e019      	b.n	83e6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x372>
    83b2:	2200      	movs	r2, #0
    83b4:	e7ea      	b.n	838c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x318>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83b6:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    83b8:	eb0a 0700 	add.w	r7, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83bc:	b320      	cbz	r0, 8408 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x394>
    83be:	4638      	mov	r0, r7
    83c0:	f005 fb44 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    83c4:	4407      	add	r7, r0
  uoffset_t size() const { return EndianScalar(length_); }
    83c6:	6838      	ldr	r0, [r7, #0]
    83c8:	f005 fb3f 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    83cc:	4580      	cmp	r8, r0
    83ce:	d21d      	bcs.n	840c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x398>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    83d0:	3704      	adds	r7, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    83d2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    83d6:	e9d7 0100 	ldrd	r0, r1, [r7]
    83da:	f006 fe62 	bl	f0a2 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    83de:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
    for (int i = 0; i < channels; i++) {
    83e2:	f108 0801 	add.w	r8, r8, #1
    83e6:	45a0      	cmp	r8, r4
    83e8:	da17      	bge.n	841a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a6>
    return data_ - ReadScalar<soffset_t>(data_);
    83ea:	4650      	mov	r0, sl
    83ec:	f005 fb34 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    83f0:	ebaa 0700 	sub.w	r7, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    83f4:	4638      	mov	r0, r7
    83f6:	f005 fb35 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83fa:	280a      	cmp	r0, #10
    83fc:	d9db      	bls.n	83b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x342>
    83fe:	f107 000a 	add.w	r0, r7, #10
    8402:	f005 fb2f 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8406:	e7d7      	b.n	83b8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x344>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8408:	2700      	movs	r7, #0
    840a:	e7dc      	b.n	83c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x352>
    FLATBUFFERS_ASSERT(i < size());
    840c:	4b13      	ldr	r3, [pc, #76]	; (845c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    840e:	4a16      	ldr	r2, [pc, #88]	; (8468 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8410:	f44f 7183 	mov.w	r1, #262	; 0x106
    8414:	4813      	ldr	r0, [pc, #76]	; (8464 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8416:	f004 f8af 	bl	c578 <__assert_func>
    return data_ - ReadScalar<soffset_t>(data_);
    841a:	4650      	mov	r0, sl
    841c:	f005 fb1c 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8420:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8424:	4620      	mov	r0, r4
    8426:	f005 fb1d 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    842a:	2810      	cmp	r0, #16
    842c:	d90f      	bls.n	844e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3da>
    842e:	f104 0010 	add.w	r0, r4, #16
    8432:	f005 fb17 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8436:	b160      	cbz	r0, 8452 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3de>
    8438:	4450      	add	r0, sl
    843a:	f005 fb0d 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    843e:	f8cb 0008 	str.w	r0, [fp, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    8442:	2301      	movs	r3, #1
    8444:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    8448:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    844c:	e639      	b.n	80c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    844e:	2000      	movs	r0, #0
    8450:	e7f1      	b.n	8436 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8452:	2000      	movs	r0, #0
    8454:	e7f3      	b.n	843e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ca>
    8456:	bf00      	nop
    8458:	00056dd4 	.word	0x00056dd4
    845c:	000554a0 	.word	0x000554a0
    8460:	00056b30 	.word	0x00056b30
    8464:	0005556c 	.word	0x0005556c
    8468:	0005587c 	.word	0x0005587c
    846c:	00056bf4 	.word	0x00056bf4
    8470:	00056c24 	.word	0x00056c24

00008474 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
    8474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8478:	b082      	sub	sp, #8
    847a:	4607      	mov	r7, r0
    847c:	460e      	mov	r6, r1
    847e:	4690      	mov	r8, r2
    8480:	469a      	mov	sl, r3
    8482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    8484:	f8d0 9004 	ldr.w	r9, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8488:	4608      	mov	r0, r1
    848a:	f005 fae5 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    848e:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8490:	4628      	mov	r0, r5
    8492:	f005 fae7 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8496:	2808      	cmp	r0, #8
    8498:	d941      	bls.n	851e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xaa>
    849a:	f105 0008 	add.w	r0, r5, #8
    849e:	f005 fae1 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    84a2:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84a4:	b3e8      	cbz	r0, 8522 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xae>
    84a6:	4628      	mov	r0, r5
    84a8:	f005 fad0 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    84ac:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    84ae:	6828      	ldr	r0, [r5, #0]
    84b0:	f005 facb 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    84b4:	4284      	cmp	r4, r0
    84b6:	d236      	bcs.n	8526 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    84b8:	3504      	adds	r5, #4
    p += i * sizeof(uoffset_t);
    84ba:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    84be:	4620      	mov	r0, r4
    84c0:	f005 fac4 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    84c4:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    84c6:	4620      	mov	r0, r4
    84c8:	f005 fac6 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    84cc:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    84ce:	4628      	mov	r0, r5
    84d0:	f005 fac8 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84d4:	2804      	cmp	r0, #4
    84d6:	d92d      	bls.n	8534 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
    84d8:	1d28      	adds	r0, r5, #4
    84da:	f005 fac3 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    84de:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84e0:	b350      	cbz	r0, 8538 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc4>
    84e2:	4620      	mov	r0, r4
    84e4:	f005 fab2 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    84e8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    84ea:	6820      	ldr	r0, [r4, #0]
    84ec:	f005 faad 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    84f0:	4582      	cmp	sl, r0
    84f2:	d223      	bcs.n	853c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    84f4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    84f6:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    84fa:	4620      	mov	r0, r4
    84fc:	f005 faa6 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8500:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8502:	4630      	mov	r0, r6
    8504:	f005 faa8 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8508:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    850a:	4628      	mov	r0, r5
    850c:	f005 faaa 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8510:	280c      	cmp	r0, #12
    8512:	d91a      	bls.n	854a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd6>
    8514:	f105 000c 	add.w	r0, r5, #12
    8518:	f005 faa4 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    851c:	e016      	b.n	854c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd8>
    851e:	2000      	movs	r0, #0
    8520:	e7bf      	b.n	84a2 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x2e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8522:	2500      	movs	r5, #0
    8524:	e7c3      	b.n	84ae <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8526:	4b14      	ldr	r3, [pc, #80]	; (8578 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8528:	4a14      	ldr	r2, [pc, #80]	; (857c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x108>)
    852a:	f44f 7183 	mov.w	r1, #262	; 0x106
    852e:	4814      	ldr	r0, [pc, #80]	; (8580 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8530:	f004 f822 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8534:	2000      	movs	r0, #0
    8536:	e7d2      	b.n	84de <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8538:	2400      	movs	r4, #0
    853a:	e7d6      	b.n	84ea <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x76>
    FLATBUFFERS_ASSERT(i < size());
    853c:	4b0e      	ldr	r3, [pc, #56]	; (8578 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    853e:	4a11      	ldr	r2, [pc, #68]	; (8584 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x110>)
    8540:	f44f 7183 	mov.w	r1, #262	; 0x106
    8544:	480e      	ldr	r0, [pc, #56]	; (8580 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8546:	f004 f817 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    854a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    854c:	4406      	add	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    854e:	b180      	cbz	r0, 8572 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xfe>
    8550:	4630      	mov	r0, r6
    8552:	f005 fa7b 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8556:	1833      	adds	r3, r6, r0
    8558:	f8cd 8004 	str.w	r8, [sp, #4]
    855c:	68fa      	ldr	r2, [r7, #12]
    855e:	9200      	str	r2, [sp, #0]
    8560:	4622      	mov	r2, r4
    8562:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    8566:	4648      	mov	r0, r9
    8568:	f7ff fd84 	bl	8074 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
      model->buffers(), error_reporter_, tensor);
}
    856c:	b002      	add	sp, #8
    856e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8572:	2300      	movs	r3, #0
    8574:	e7f0      	b.n	8558 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xe4>
    8576:	bf00      	nop
    8578:	000554a0 	.word	0x000554a0
    857c:	000555f0 	.word	0x000555f0
    8580:	0005556c 	.word	0x0005556c
    8584:	00055788 	.word	0x00055788

00008588 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    8588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    858c:	4680      	mov	r8, r0
    858e:	460c      	mov	r4, r1
    8590:	4691      	mov	r9, r2
    8592:	461f      	mov	r7, r3
    8594:	9d08      	ldr	r5, [sp, #32]
  *result = {};
    8596:	2300      	movs	r3, #0
    8598:	602b      	str	r3, [r5, #0]
    859a:	606b      	str	r3, [r5, #4]
    859c:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    859e:	4608      	mov	r0, r1
    85a0:	f005 fa5a 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85a4:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    85a6:	4630      	mov	r0, r6
    85a8:	f005 fa5c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85ac:	2806      	cmp	r0, #6
    85ae:	d911      	bls.n	85d4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    85b0:	1db0      	adds	r0, r6, #6
    85b2:	f005 fa57 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    85b6:	b178      	cbz	r0, 85d8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x50>
    85b8:	4420      	add	r0, r4
    85ba:	f006 fcaa 	bl	ef12 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    85be:	463a      	mov	r2, r7
    85c0:	f105 0108 	add.w	r1, r5, #8
    85c4:	b2c0      	uxtb	r0, r0
    85c6:	f000 fccd 	bl	8f64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    85ca:	4606      	mov	r6, r0
    85cc:	b130      	cbz	r0, 85dc <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
}
    85ce:	4630      	mov	r0, r6
    85d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85d4:	2000      	movs	r0, #0
    85d6:	e7ee      	b.n	85b6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    85d8:	2000      	movs	r0, #0
    85da:	e7f0      	b.n	85be <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x36>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    85dc:	4649      	mov	r1, r9
    85de:	4620      	mov	r0, r4
    85e0:	f7ff f882 	bl	76e8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    85e4:	6028      	str	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    85e6:	4620      	mov	r0, r4
    85e8:	f005 fa36 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85ec:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    85f0:	4648      	mov	r0, r9
    85f2:	f005 fa37 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85f6:	2804      	cmp	r0, #4
    85f8:	d911      	bls.n	861e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x96>
    85fa:	f109 0004 	add.w	r0, r9, #4
    85fe:	f005 fa31 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8602:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8604:	b168      	cbz	r0, 8622 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9a>
    8606:	4620      	mov	r0, r4
    8608:	f005 fa20 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    860c:	1822      	adds	r2, r4, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    860e:	b152      	cbz	r2, 8626 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9e>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8610:	1d2b      	adds	r3, r5, #4
    8612:	4639      	mov	r1, r7
    8614:	4640      	mov	r0, r8
    8616:	f006 ff78 	bl	f50a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    861a:	4606      	mov	r6, r0
    861c:	e7d7      	b.n	85ce <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    861e:	2000      	movs	r0, #0
    8620:	e7ef      	b.n	8602 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8622:	2200      	movs	r2, #0
    8624:	e7f3      	b.n	860e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x86>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8626:	4b01      	ldr	r3, [pc, #4]	; (862c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0xa4>)
    8628:	606b      	str	r3, [r5, #4]
    862a:	e7d0      	b.n	85ce <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    862c:	00056dd4 	.word	0x00056dd4

00008630 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    8630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8634:	b087      	sub	sp, #28
    8636:	9104      	str	r1, [sp, #16]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8638:	9205      	str	r2, [sp, #20]
    863a:	b192      	cbz	r2, 8662 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x32>
    863c:	4683      	mov	fp, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    863e:	2300      	movs	r3, #0
    8640:	9303      	str	r3, [sp, #12]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    8642:	9c04      	ldr	r4, [sp, #16]
    8644:	46a0      	mov	r8, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8646:	4620      	mov	r0, r4
    8648:	f005 fa06 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    864c:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    864e:	4620      	mov	r0, r4
    8650:	f005 fa08 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8654:	2808      	cmp	r0, #8
    8656:	d906      	bls.n	8666 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x36>
    8658:	f104 0008 	add.w	r0, r4, #8
    865c:	f005 fa02 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8660:	e002      	b.n	8668 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8662:	f007 fcf7 	bl	10054 <abort>
    8666:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8668:	9b04      	ldr	r3, [sp, #16]
    866a:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    866c:	2800      	cmp	r0, #0
    866e:	d03d      	beq.n	86ec <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>
    8670:	4620      	mov	r0, r4
    8672:	f005 f9eb 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8676:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8678:	6820      	ldr	r0, [r4, #0]
    867a:	f005 f9e6 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    867e:	9d03      	ldr	r5, [sp, #12]
    8680:	4285      	cmp	r5, r0
    8682:	f080 80b3 	bcs.w	87ec <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1bc>
    8686:	6820      	ldr	r0, [r4, #0]
    8688:	f005 f9df 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    868c:	4285      	cmp	r5, r0
    868e:	d22f      	bcs.n	86f0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8690:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8692:	9b03      	ldr	r3, [sp, #12]
    8694:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8698:	4620      	mov	r0, r4
    869a:	f005 f9d7 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    869e:	1824      	adds	r4, r4, r0
    86a0:	d02d      	beq.n	86fe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xce>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    86a2:	4627      	mov	r7, r4
    return data_ - ReadScalar<soffset_t>(data_);
    86a4:	4620      	mov	r0, r4
    86a6:	f005 f9d7 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86aa:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86ac:	4628      	mov	r0, r5
    86ae:	f005 f9d9 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86b2:	2804      	cmp	r0, #4
    86b4:	d925      	bls.n	8702 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
    86b6:	1d28      	adds	r0, r5, #4
    86b8:	f005 f9d4 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    86bc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86be:	b310      	cbz	r0, 8706 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd6>
    86c0:	4620      	mov	r0, r4
    86c2:	f005 f9c3 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    86c6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    86c8:	6820      	ldr	r0, [r4, #0]
    86ca:	f005 f9be 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    86ce:	4682      	mov	sl, r0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    86d0:	f8db 0004 	ldr.w	r0, [fp, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    86d4:	6803      	ldr	r3, [r0, #0]
    86d6:	68db      	ldr	r3, [r3, #12]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    86d8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    86dc:	0089      	lsls	r1, r1, #2
    86de:	460c      	mov	r4, r1
    86e0:	2204      	movs	r2, #4
    86e2:	4798      	blx	r3
    if (tensors == nullptr) {
    86e4:	9002      	str	r0, [sp, #8]
    86e6:	b180      	cbz	r0, 870a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    for (size_t i = 0; i < alloc_count; ++i) {
    86e8:	2500      	movs	r5, #0
    86ea:	e038      	b.n	875e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86ec:	2400      	movs	r4, #0
    86ee:	e7c3      	b.n	8678 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
    FLATBUFFERS_ASSERT(i < size());
    86f0:	4b3f      	ldr	r3, [pc, #252]	; (87f0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    86f2:	4a40      	ldr	r2, [pc, #256]	; (87f4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c4>)
    86f4:	f44f 7183 	mov.w	r1, #262	; 0x106
    86f8:	483f      	ldr	r0, [pc, #252]	; (87f8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    86fa:	f003 ff3d 	bl	c578 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    86fe:	f007 fca9 	bl	10054 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8702:	2000      	movs	r0, #0
    8704:	e7da      	b.n	86bc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8706:	2400      	movs	r4, #0
    8708:	e7de      	b.n	86c8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x98>
      TF_LITE_REPORT_ERROR(
    870a:	4622      	mov	r2, r4
    870c:	493b      	ldr	r1, [pc, #236]	; (87fc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1cc>)
    870e:	f8db 000c 	ldr.w	r0, [fp, #12]
    8712:	f007 f8ed 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8716:	2001      	movs	r0, #1
    8718:	e05c      	b.n	87d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    871a:	2000      	movs	r0, #0
    871c:	e02f      	b.n	877e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    871e:	2400      	movs	r4, #0
    8720:	e034      	b.n	878c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15c>
    FLATBUFFERS_ASSERT(i < size());
    8722:	4b33      	ldr	r3, [pc, #204]	; (87f0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8724:	4a36      	ldr	r2, [pc, #216]	; (8800 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d0>)
    8726:	f44f 7183 	mov.w	r1, #262	; 0x106
    872a:	4833      	ldr	r0, [pc, #204]	; (87f8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    872c:	f003 ff24 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8730:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8732:	eb08 0600 	add.w	r6, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8736:	2800      	cmp	r0, #0
    8738:	d043      	beq.n	87c2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x192>
    873a:	4630      	mov	r0, r6
    873c:	f005 f986 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8740:	1832      	adds	r2, r6, r0
          error_reporter_, &tensors[i]);
    8742:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8746:	9902      	ldr	r1, [sp, #8]
    8748:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    874c:	9300      	str	r3, [sp, #0]
    874e:	f8db 300c 	ldr.w	r3, [fp, #12]
    8752:	4621      	mov	r1, r4
    8754:	4648      	mov	r0, r9
    8756:	f7ff ff17 	bl	8588 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    875a:	bba0      	cbnz	r0, 87c6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x196>
    for (size_t i = 0; i < alloc_count; ++i) {
    875c:	3501      	adds	r5, #1
    875e:	4555      	cmp	r5, sl
    8760:	d23b      	bcs.n	87da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1aa>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8762:	f8db 9004 	ldr.w	r9, [fp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8766:	4638      	mov	r0, r7
    8768:	f005 f976 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    876c:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    876e:	4620      	mov	r0, r4
    8770:	f005 f978 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8774:	2804      	cmp	r0, #4
    8776:	d9d0      	bls.n	871a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xea>
    8778:	1d20      	adds	r0, r4, #4
    877a:	f005 f973 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    877e:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8780:	2800      	cmp	r0, #0
    8782:	d0cc      	beq.n	871e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xee>
    8784:	4620      	mov	r0, r4
    8786:	f005 f961 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    878a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    878c:	6820      	ldr	r0, [r4, #0]
    878e:	f005 f95c 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8792:	4285      	cmp	r5, r0
    8794:	d2c5      	bcs.n	8722 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8796:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8798:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    879c:	4620      	mov	r0, r4
    879e:	f005 f955 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87a2:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    87a4:	4640      	mov	r0, r8
    87a6:	f005 f957 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    87aa:	eba8 0600 	sub.w	r6, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    87ae:	4630      	mov	r0, r6
    87b0:	f005 f958 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87b4:	280c      	cmp	r0, #12
    87b6:	d9bb      	bls.n	8730 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x100>
    87b8:	f106 000c 	add.w	r0, r6, #12
    87bc:	f005 f952 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    87c0:	e7b7      	b.n	8732 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87c2:	2200      	movs	r2, #0
    87c4:	e7bd      	b.n	8742 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    87c6:	462a      	mov	r2, r5
    87c8:	490e      	ldr	r1, [pc, #56]	; (8804 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d4>)
    87ca:	f8db 000c 	ldr.w	r0, [fp, #12]
    87ce:	f007 f88f 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    87d2:	2001      	movs	r0, #1
}
    87d4:	b007      	add	sp, #28
    87d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    subgraph_allocations[subgraph_idx].tensors = tensors;
    87da:	9b05      	ldr	r3, [sp, #20]
    87dc:	9a03      	ldr	r2, [sp, #12]
    87de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    87e2:	9902      	ldr	r1, [sp, #8]
    87e4:	6059      	str	r1, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    87e6:	1c53      	adds	r3, r2, #1
    87e8:	9303      	str	r3, [sp, #12]
    87ea:	e72a      	b.n	8642 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
    87ec:	2000      	movs	r0, #0
    87ee:	e7f1      	b.n	87d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    87f0:	000554a0 	.word	0x000554a0
    87f4:	000555f0 	.word	0x000555f0
    87f8:	0005556c 	.word	0x0005556c
    87fc:	00056c54 	.word	0x00056c54
    8800:	00055788 	.word	0x00055788
    8804:	00056c9c 	.word	0x00056c9c

00008808 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    8808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    880c:	b093      	sub	sp, #76	; 0x4c
    880e:	4606      	mov	r6, r0
    8810:	460f      	mov	r7, r1
    8812:	4690      	mov	r8, r2
    8814:	4699      	mov	r9, r3
    8816:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    881a:	4608      	mov	r0, r1
    881c:	f005 f91c 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8820:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8822:	4620      	mov	r0, r4
    8824:	f005 f91e 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8828:	2808      	cmp	r0, #8
    882a:	d948      	bls.n	88be <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb6>
    882c:	f104 0008 	add.w	r0, r4, #8
    8830:	f005 f918 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8834:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8836:	2800      	cmp	r0, #0
    8838:	d043      	beq.n	88c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xba>
    883a:	4620      	mov	r0, r4
    883c:	f005 f906 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8840:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8842:	6820      	ldr	r0, [r4, #0]
    8844:	f005 f901 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8848:	4582      	cmp	sl, r0
    884a:	d23c      	bcs.n	88c6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xbe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    884c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    884e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8852:	4620      	mov	r0, r4
    8854:	f005 f8fa 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8858:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    885a:	4620      	mov	r0, r4
    885c:	f005 f8fc 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8860:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8862:	4628      	mov	r0, r5
    8864:	f005 f8fe 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8868:	2804      	cmp	r0, #4
    886a:	d933      	bls.n	88d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xcc>
    886c:	1d28      	adds	r0, r5, #4
    886e:	f005 f8f9 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8872:	1825      	adds	r5, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8874:	b380      	cbz	r0, 88d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd0>
    8876:	4628      	mov	r0, r5
    8878:	f005 f8e8 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    887c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    887e:	6828      	ldr	r0, [r5, #0]
    8880:	f005 f8e3 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    8884:	6973      	ldr	r3, [r6, #20]
    8886:	18c5      	adds	r5, r0, r3
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    8888:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
    888c:	ea4f 0aca 	mov.w	sl, sl, lsl #3

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    8890:	6870      	ldr	r0, [r6, #4]
    8892:	6803      	ldr	r3, [r0, #0]
    8894:	691b      	ldr	r3, [r3, #16]
    8896:	2204      	movs	r2, #4
    8898:	4651      	mov	r1, sl
    889a:	4798      	blx	r3
  if (allocation_info == nullptr) {
    889c:	4683      	mov	fp, r0
    889e:	b1e8      	cbz	r0, 88dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd4>
    return data_ - ReadScalar<soffset_t>(data_);
    88a0:	4620      	mov	r0, r4
    88a2:	f005 f8d9 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    88a6:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    88aa:	4650      	mov	r0, sl
    88ac:	f005 f8da 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88b0:	2804      	cmp	r0, #4
    88b2:	d91a      	bls.n	88ea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe2>
    88b4:	f10a 0004 	add.w	r0, sl, #4
    88b8:	f005 f8d4 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    88bc:	e016      	b.n	88ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe4>
    88be:	2000      	movs	r0, #0
    88c0:	e7b8      	b.n	8834 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88c2:	2400      	movs	r4, #0
    88c4:	e7bd      	b.n	8842 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    88c6:	4b55      	ldr	r3, [pc, #340]	; (8a1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x214>)
    88c8:	4a55      	ldr	r2, [pc, #340]	; (8a20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x218>)
    88ca:	f44f 7183 	mov.w	r1, #262	; 0x106
    88ce:	4855      	ldr	r0, [pc, #340]	; (8a24 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21c>)
    88d0:	f003 fe52 	bl	c578 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88d4:	2000      	movs	r0, #0
    88d6:	e7cc      	b.n	8872 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88d8:	2500      	movs	r5, #0
    88da:	e7d0      	b.n	887e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x76>
    TF_LITE_REPORT_ERROR(
    88dc:	4652      	mov	r2, sl
    88de:	4952      	ldr	r1, [pc, #328]	; (8a28 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x220>)
    88e0:	68f0      	ldr	r0, [r6, #12]
    88e2:	f007 f805 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
    88e6:	2701      	movs	r7, #1
    88e8:	e01b      	b.n	8922 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88ea:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    88ec:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88f0:	b1d8      	cbz	r0, 892a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x122>
    88f2:	4650      	mov	r0, sl
    88f4:	f005 f8aa 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    88f8:	4482      	add	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    88fa:	f8da 0000 	ldr.w	r0, [sl]
    88fe:	f005 f8a4 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
                                scratch_buffer_request_count_, error_reporter_);
    8902:	6972      	ldr	r2, [r6, #20]
    8904:	68f3      	ldr	r3, [r6, #12]
        reporter_(reporter) {}
    8906:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    890a:	900f      	str	r0, [sp, #60]	; 0x3c
    890c:	9210      	str	r2, [sp, #64]	; 0x40
    890e:	9311      	str	r3, [sp, #68]	; 0x44

  const int32_t* offline_planner_offsets = nullptr;
    8910:	2300      	movs	r3, #0
    8912:	930d      	str	r3, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(
    8914:	aa0d      	add	r2, sp, #52	; 0x34
    8916:	4639      	mov	r1, r7
    8918:	a80e      	add	r0, sp, #56	; 0x38
    891a:	f7ff f813 	bl	7944 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>
    891e:	4607      	mov	r7, r0
    8920:	b130      	cbz	r0, 8930 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    8922:	4638      	mov	r0, r7
    8924:	b013      	add	sp, #76	; 0x4c
    8926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    892a:	f04f 0a00 	mov.w	sl, #0
    892e:	e7e4      	b.n	88fa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
  TF_LITE_ENSURE_STATUS(
    8930:	4643      	mov	r3, r8
    8932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8934:	4621      	mov	r1, r4
    8936:	a80e      	add	r0, sp, #56	; 0x38
    8938:	f7ff f9de 	bl	7cf8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>
    893c:	4607      	mov	r7, r0
    893e:	2800      	cmp	r0, #0
    8940:	d1ef      	bne.n	8922 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      GetScratchBufferRequests();
    8942:	4630      	mov	r0, r6
    8944:	f006 fdb8 	bl	f4b8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
    8948:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
    894a:	464a      	mov	r2, r9
    894c:	a80e      	add	r0, sp, #56	; 0x38
    894e:	f006 fcc2 	bl	f2d6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
    8952:	4607      	mov	r7, r0
    8954:	2800      	cmp	r0, #0
    8956:	d1e4      	bne.n	8922 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    8958:	2110      	movs	r1, #16
    895a:	6870      	ldr	r0, [r6, #4]
    895c:	f006 fa3f 	bl	edde <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    8960:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    8962:	6870      	ldr	r0, [r6, #4]
    8964:	6803      	ldr	r3, [r0, #0]
    8966:	691b      	ldr	r3, [r3, #16]
    8968:	2210      	movs	r2, #16
    896a:	4621      	mov	r1, r4
    896c:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    896e:	4601      	mov	r1, r0
    8970:	2800      	cmp	r0, #0
    8972:	d036      	beq.n	89e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1da>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8974:	4622      	mov	r2, r4
    8976:	a802      	add	r0, sp, #8
    8978:	f000 f882 	bl	8a80 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    897c:	462b      	mov	r3, r5
    897e:	465a      	mov	r2, fp
    8980:	a902      	add	r1, sp, #8
    8982:	68f0      	ldr	r0, [r6, #12]
    8984:	f006 fd2e 	bl	f3e4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
    8988:	4607      	mov	r7, r0
    898a:	2800      	cmp	r0, #0
    898c:	d141      	bne.n	8a12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  memory_allocator_->ResetTempAllocations();
    898e:	6870      	ldr	r0, [r6, #4]
    8990:	6803      	ldr	r3, [r0, #0]
    8992:	695b      	ldr	r3, [r3, #20]
    8994:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    8996:	2110      	movs	r1, #16
    8998:	6870      	ldr	r0, [r6, #4]
    899a:	f006 fa20 	bl	edde <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    899e:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    89a0:	a802      	add	r0, sp, #8
    89a2:	f006 ff21 	bl	f7e8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    89a6:	42a0      	cmp	r0, r4
    89a8:	d828      	bhi.n	89fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    89aa:	68f4      	ldr	r4, [r6, #12]
    89ac:	6870      	ldr	r0, [r6, #4]
    89ae:	f006 fa14 	bl	edda <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    89b2:	4602      	mov	r2, r0
    89b4:	9500      	str	r5, [sp, #0]
    89b6:	465b      	mov	r3, fp
    89b8:	a902      	add	r1, sp, #8
    89ba:	4620      	mov	r0, r4
    89bc:	f006 fcaf 	bl	f31e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
    89c0:	4607      	mov	r7, r0
    89c2:	bb30      	cbnz	r0, 8a12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  head_usage = planner.GetMaximumMemorySize();
    89c4:	a802      	add	r0, sp, #8
    89c6:	f006 ff0f 	bl	f7e8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    89ca:	69b3      	ldr	r3, [r6, #24]
    89cc:	4283      	cmp	r3, r0
    89ce:	d200      	bcs.n	89d2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ca>
    max_head_buffer_usage_ = head_usage;
    89d0:	61b0      	str	r0, [r6, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    89d2:	6870      	ldr	r0, [r6, #4]
    89d4:	6803      	ldr	r3, [r0, #0]
    89d6:	689b      	ldr	r3, [r3, #8]
    89d8:	2210      	movs	r2, #16
    89da:	69b1      	ldr	r1, [r6, #24]
    89dc:	4798      	blx	r3
    89de:	4607      	mov	r7, r0
    89e0:	e017      	b.n	8a12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    89e2:	68f0      	ldr	r0, [r6, #12]
    89e4:	4b11      	ldr	r3, [pc, #68]	; (8a2c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x224>)
    89e6:	9301      	str	r3, [sp, #4]
    89e8:	f240 33d2 	movw	r3, #978	; 0x3d2
    89ec:	9300      	str	r3, [sp, #0]
    89ee:	4b10      	ldr	r3, [pc, #64]	; (8a30 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>)
    89f0:	4a10      	ldr	r2, [pc, #64]	; (8a34 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x22c>)
    89f2:	4601      	mov	r1, r0
    89f4:	f006 ff8b 	bl	f90e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    89f8:	2701      	movs	r7, #1
    89fa:	e792      	b.n	8922 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    TF_LITE_REPORT_ERROR(
    89fc:	68f5      	ldr	r5, [r6, #12]
    89fe:	a802      	add	r0, sp, #8
    8a00:	f006 fef2 	bl	f7e8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    8a04:	4602      	mov	r2, r0
    8a06:	4623      	mov	r3, r4
    8a08:	490b      	ldr	r1, [pc, #44]	; (8a38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>)
    8a0a:	4628      	mov	r0, r5
    8a0c:	f006 ff70 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8a10:	2701      	movs	r7, #1
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8a12:	a802      	add	r0, sp, #8
    8a14:	f006 fd95 	bl	f542 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    8a18:	e783      	b.n	8922 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    8a1a:	bf00      	nop
    8a1c:	000554a0 	.word	0x000554a0
    8a20:	000555f0 	.word	0x000555f0
    8a24:	0005556c 	.word	0x0005556c
    8a28:	00056cbc 	.word	0x00056cbc
    8a2c:	00056d68 	.word	0x00056d68
    8a30:	00056d00 	.word	0x00056d00
    8a34:	00056d50 	.word	0x00056d50
    8a38:	00056d84 	.word	0x00056d84

00008a3c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    8a3c:	b538      	push	{r3, r4, r5, lr}
    8a3e:	4604      	mov	r4, r0
    8a40:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    8a42:	68a5      	ldr	r5, [r4, #8]
    8a44:	6861      	ldr	r1, [r4, #4]
    8a46:	428d      	cmp	r5, r1
    8a48:	da12      	bge.n	8a70 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
                         max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
    8a4a:	68e1      	ldr	r1, [r4, #12]
    8a4c:	0128      	lsls	r0, r5, #4
    8a4e:	eb01 1505 	add.w	r5, r1, r5, lsl #4
  current->size = size;
    8a52:	500a      	str	r2, [r1, r0]
  current->first_time_used = first_time_used;
    8a54:	60ab      	str	r3, [r5, #8]
  current->last_time_used = last_time_used;
    8a56:	9b04      	ldr	r3, [sp, #16]
    8a58:	60eb      	str	r3, [r5, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    8a5a:	f04f 33ff 	mov.w	r3, #4294967295
    8a5e:	606b      	str	r3, [r5, #4]
  ++buffer_count_;
    8a60:	68a3      	ldr	r3, [r4, #8]
    8a62:	3301      	adds	r3, #1
    8a64:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
    8a66:	2301      	movs	r3, #1
    8a68:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    8a6c:	2000      	movs	r0, #0
}
    8a6e:	bd38      	pop	{r3, r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    8a70:	460a      	mov	r2, r1
    8a72:	4902      	ldr	r1, [pc, #8]	; (8a7c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    8a74:	f006 ff3c 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8a78:	2001      	movs	r0, #1
    8a7a:	e7f8      	b.n	8a6e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x32>
    8a7c:	00056e44 	.word	0x00056e44

00008a80 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    8a80:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    8a82:	4c0f      	ldr	r4, [pc, #60]	; (8ac0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
    8a84:	6004      	str	r4, [r0, #0]
    8a86:	2400      	movs	r4, #0
    8a88:	6084      	str	r4, [r0, #8]
    8a8a:	2401      	movs	r4, #1
    8a8c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    8a90:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    8a94:	fba4 4202 	umull	r4, r2, r4, r2
    8a98:	0952      	lsrs	r2, r2, #5
    8a9a:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    8a9c:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    8a9e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    8aa2:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    8aa4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    8aa8:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    8aaa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    8aae:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    8ab0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8ab4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    8ab8:	6241      	str	r1, [r0, #36]	; 0x24
}
    8aba:	bc10      	pop	{r4}
    8abc:	4770      	bx	lr
    8abe:	bf00      	nop
    8ac0:	00056e98 	.word	0x00056e98

00008ac4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    8ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ac6:	4605      	mov	r5, r0
    8ac8:	460f      	mov	r7, r1
    8aca:	4614      	mov	r4, r2
    8acc:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    8ace:	f006 fdb0 	bl	f632 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    8ad2:	2c00      	cmp	r4, #0
    8ad4:	db08      	blt.n	8ae8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    8ad6:	68ab      	ldr	r3, [r5, #8]
    8ad8:	42a3      	cmp	r3, r4
    8ada:	dd05      	ble.n	8ae8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    8adc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8ade:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8ae2:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    8ae4:	2000      	movs	r0, #0
}
    8ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    8ae8:	68ab      	ldr	r3, [r5, #8]
    8aea:	4622      	mov	r2, r4
    8aec:	4902      	ldr	r1, [pc, #8]	; (8af8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    8aee:	4638      	mov	r0, r7
    8af0:	f006 fefe 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8af4:	2001      	movs	r0, #1
    8af6:	e7f6      	b.n	8ae6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    8af8:	00056e64 	.word	0x00056e64

00008afc <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    8afc:	2810      	cmp	r0, #16
    8afe:	d82a      	bhi.n	8b56 <TfLiteTypeGetName+0x5a>
    8b00:	e8df f000 	tbb	[pc, r0]
    8b04:	110d2b09 	.word	0x110d2b09
    8b08:	0b191f15 	.word	0x0b191f15
    8b0c:	2321131b 	.word	0x2321131b
    8b10:	2725171d 	.word	0x2725171d
    8b14:	0f          	.byte	0x0f
    8b15:	00          	.byte	0x00
    case kTfLiteFloat64:
      return "FLOAT64";
    case kTfLiteResource:
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
    8b16:	4812      	ldr	r0, [pc, #72]	; (8b60 <TfLiteTypeGetName+0x64>)
    8b18:	4770      	bx	lr
      return "INT16";
    8b1a:	4812      	ldr	r0, [pc, #72]	; (8b64 <TfLiteTypeGetName+0x68>)
    8b1c:	4770      	bx	lr
      return "INT32";
    8b1e:	4812      	ldr	r0, [pc, #72]	; (8b68 <TfLiteTypeGetName+0x6c>)
    8b20:	4770      	bx	lr
      return "UINT32";
    8b22:	4812      	ldr	r0, [pc, #72]	; (8b6c <TfLiteTypeGetName+0x70>)
    8b24:	4770      	bx	lr
      return "UINT8";
    8b26:	4812      	ldr	r0, [pc, #72]	; (8b70 <TfLiteTypeGetName+0x74>)
    8b28:	4770      	bx	lr
      return "INT8";
    8b2a:	4812      	ldr	r0, [pc, #72]	; (8b74 <TfLiteTypeGetName+0x78>)
    8b2c:	4770      	bx	lr
      return "INT64";
    8b2e:	4812      	ldr	r0, [pc, #72]	; (8b78 <TfLiteTypeGetName+0x7c>)
    8b30:	4770      	bx	lr
      return "UINT64";
    8b32:	4812      	ldr	r0, [pc, #72]	; (8b7c <TfLiteTypeGetName+0x80>)
    8b34:	4770      	bx	lr
      return "BOOL";
    8b36:	4812      	ldr	r0, [pc, #72]	; (8b80 <TfLiteTypeGetName+0x84>)
    8b38:	4770      	bx	lr
      return "COMPLEX64";
    8b3a:	4812      	ldr	r0, [pc, #72]	; (8b84 <TfLiteTypeGetName+0x88>)
    8b3c:	4770      	bx	lr
      return "COMPLEX128";
    8b3e:	4812      	ldr	r0, [pc, #72]	; (8b88 <TfLiteTypeGetName+0x8c>)
    8b40:	4770      	bx	lr
      return "STRING";
    8b42:	4812      	ldr	r0, [pc, #72]	; (8b8c <TfLiteTypeGetName+0x90>)
    8b44:	4770      	bx	lr
      return "FLOAT16";
    8b46:	4812      	ldr	r0, [pc, #72]	; (8b90 <TfLiteTypeGetName+0x94>)
    8b48:	4770      	bx	lr
      return "FLOAT64";
    8b4a:	4812      	ldr	r0, [pc, #72]	; (8b94 <TfLiteTypeGetName+0x98>)
    8b4c:	4770      	bx	lr
      return "RESOURCE";
    8b4e:	4812      	ldr	r0, [pc, #72]	; (8b98 <TfLiteTypeGetName+0x9c>)
    8b50:	4770      	bx	lr
      return "VARIANT";
    8b52:	4812      	ldr	r0, [pc, #72]	; (8b9c <TfLiteTypeGetName+0xa0>)
    8b54:	4770      	bx	lr
  }
  return "Unknown type";
    8b56:	4812      	ldr	r0, [pc, #72]	; (8ba0 <TfLiteTypeGetName+0xa4>)
    8b58:	4770      	bx	lr
      return "FLOAT32";
    8b5a:	4812      	ldr	r0, [pc, #72]	; (8ba4 <TfLiteTypeGetName+0xa8>)
}
    8b5c:	4770      	bx	lr
    8b5e:	bf00      	nop
    8b60:	00056f4c 	.word	0x00056f4c
    8b64:	00056ec8 	.word	0x00056ec8
    8b68:	00056ed0 	.word	0x00056ed0
    8b6c:	00056ed8 	.word	0x00056ed8
    8b70:	00056ee0 	.word	0x00056ee0
    8b74:	00056ee8 	.word	0x00056ee8
    8b78:	00056ef0 	.word	0x00056ef0
    8b7c:	00056ef8 	.word	0x00056ef8
    8b80:	00056f00 	.word	0x00056f00
    8b84:	00056f08 	.word	0x00056f08
    8b88:	00056f14 	.word	0x00056f14
    8b8c:	00056f20 	.word	0x00056f20
    8b90:	00056f28 	.word	0x00056f28
    8b94:	00056f30 	.word	0x00056f30
    8b98:	00056f38 	.word	0x00056f38
    8b9c:	00056f44 	.word	0x00056f44
    8ba0:	00056eb0 	.word	0x00056eb0
    8ba4:	00056ec0 	.word	0x00056ec0

00008ba8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
    8ba8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    8bac:	4606      	mov	r6, r0
    8bae:	460f      	mov	r7, r1
    8bb0:	4615      	mov	r5, r2
    8bb2:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    8bb4:	2200      	movs	r2, #0
    8bb6:	2300      	movs	r3, #0
    8bb8:	f7f7 ff16 	bl	9e8 <__aeabi_dcmpeq>
    8bbc:	b120      	cbz	r0, 8bc8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    8bbe:	2300      	movs	r3, #0
    8bc0:	602b      	str	r3, [r5, #0]
    *shift = 0;
    8bc2:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
    8bc4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  const double q = std::frexp(double_multiplier, shift);
    8bc8:	4622      	mov	r2, r4
    8bca:	4630      	mov	r0, r6
    8bcc:	4639      	mov	r1, r7
    8bce:	f003 fc2d 	bl	c42c <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    8bd2:	2200      	movs	r2, #0
    8bd4:	4b1a      	ldr	r3, [pc, #104]	; (8c40 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x98>)
    8bd6:	f7f7 fc9f 	bl	518 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    8bda:	f003 fc5f 	bl	c49c <round>
    8bde:	f7f8 fabf 	bl	1160 <__aeabi_d2lz>
    8be2:	4606      	mov	r6, r0
    8be4:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    8be6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8bea:	2300      	movs	r3, #0
    8bec:	4282      	cmp	r2, r0
    8bee:	418b      	sbcs	r3, r1
    8bf0:	db12      	blt.n	8c18 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>
  if (q_fixed == (1ll << 31)) {
    8bf2:	2900      	cmp	r1, #0
    8bf4:	bf08      	it	eq
    8bf6:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    8bfa:	d00f      	beq.n	8c1c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x74>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    8bfc:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    8c00:	f177 0300 	sbcs.w	r3, r7, #0
    8c04:	da19      	bge.n	8c3a <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x92>
  if (*shift < -31) {
    8c06:	6823      	ldr	r3, [r4, #0]
    8c08:	f113 0f1f 	cmn.w	r3, #31
    8c0c:	da02      	bge.n	8c14 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x6c>
    *shift = 0;
    8c0e:	2300      	movs	r3, #0
    8c10:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    8c12:	2600      	movs	r6, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    8c14:	602e      	str	r6, [r5, #0]
    8c16:	e7d5      	b.n	8bc4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    8c18:	f007 fa1c 	bl	10054 <abort>
    q_fixed /= 2;
    8c1c:	0fc9      	lsrs	r1, r1, #31
    8c1e:	eb16 0b01 	adds.w	fp, r6, r1
    8c22:	f147 0c00 	adc.w	ip, r7, #0
    8c26:	ea4f 025b 	mov.w	r2, fp, lsr #1
    8c2a:	ea42 76cc 	orr.w	r6, r2, ip, lsl #31
    8c2e:	ea4f 076c 	mov.w	r7, ip, asr #1
    ++*shift;
    8c32:	6823      	ldr	r3, [r4, #0]
    8c34:	3301      	adds	r3, #1
    8c36:	6023      	str	r3, [r4, #0]
    8c38:	e7e0      	b.n	8bfc <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x54>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    8c3a:	f007 fa0b 	bl	10054 <abort>
    8c3e:	bf00      	nop
    8c40:	41e00000 	.word	0x41e00000

00008c44 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>:
  return kTfLiteOk;
}

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
    8c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c46:	b087      	sub	sp, #28
    8c48:	4605      	mov	r5, r0
    8c4a:	460c      	mov	r4, r1
    8c4c:	9203      	str	r2, [sp, #12]
    8c4e:	9302      	str	r3, [sp, #8]
    8c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const auto scale = output->params.scale;
    8c52:	68de      	ldr	r6, [r3, #12]
  const auto zero_point = output->params.zero_point;
    8c54:	691f      	ldr	r7, [r3, #16]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
    8c56:	2901      	cmp	r1, #1
    8c58:	d00e      	beq.n	8c78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x34>
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
    8c5a:	2903      	cmp	r1, #3
    8c5c:	d042      	beq.n	8ce4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xa0>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else if (activation == kTfLiteActReluN1To1) {
    8c5e:	2902      	cmp	r1, #2
    8c60:	f000 80a7 	beq.w	8db2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16e>
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else {
    *act_min = qmin;
    8c64:	9b03      	ldr	r3, [sp, #12]
    8c66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c68:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    8c6a:	9b02      	ldr	r3, [sp, #8]
    8c6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8c6e:	6013      	str	r3, [r2, #0]
  }
  return kTfLiteOk;
    8c70:	2400      	movs	r4, #0
}
    8c72:	4620      	mov	r0, r4
    8c74:	b007      	add	sp, #28
    8c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const float tmp = TfLiteRound(f / scale);
    8c78:	4631      	mov	r1, r6
    8c7a:	2000      	movs	r0, #0
    8c7c:	f7f8 f920 	bl	ec0 <__aeabi_fdiv>
    8c80:	f7f7 fbf2 	bl	468 <__aeabi_f2d>
    8c84:	f003 fc0a 	bl	c49c <round>
    8c88:	f7f7 ff08 	bl	a9c <__aeabi_d2f>
    8c8c:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    8c8e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    8c92:	f7f8 fa13 	bl	10bc <__aeabi_fcmpge>
    8c96:	b160      	cbz	r0, 8cb2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
    8c98:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    8c9c:	4630      	mov	r0, r6
    8c9e:	f7f8 fa03 	bl	10a8 <__aeabi_fcmple>
    8ca2:	b130      	cbz	r0, 8cb2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
  q = zero_point + static_cast<int32_t>(tmp);
    8ca4:	4630      	mov	r0, r6
    8ca6:	f7f8 fa1d 	bl	10e4 <__aeabi_f2iz>
    8caa:	4407      	add	r7, r0
    8cac:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    8cae:	2400      	movs	r4, #0
    8cb0:	e008      	b.n	8cc4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x80>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    8cb2:	696e      	ldr	r6, [r5, #20]
    8cb4:	4b73      	ldr	r3, [pc, #460]	; (8e84 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    8cb6:	9300      	str	r3, [sp, #0]
    8cb8:	f240 1359 	movw	r3, #345	; 0x159
    8cbc:	4a72      	ldr	r2, [pc, #456]	; (8e88 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    8cbe:	4973      	ldr	r1, [pc, #460]	; (8e8c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    8cc0:	4628      	mov	r0, r5
    8cc2:	47b0      	blx	r6
    TF_LITE_ENSURE_OK(context,
    8cc4:	2c00      	cmp	r4, #0
    8cc6:	d1d4      	bne.n	8c72 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    8cc8:	9a05      	ldr	r2, [sp, #20]
    8cca:	9b03      	ldr	r3, [sp, #12]
    8ccc:	429a      	cmp	r2, r3
    8cce:	dc07      	bgt.n	8ce0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x9c>
	return __b;
      return __a;
    8cd0:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    8cd2:	681b      	ldr	r3, [r3, #0]
    8cd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8cd6:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    8cd8:	9b02      	ldr	r3, [sp, #8]
    8cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8cdc:	6013      	str	r3, [r2, #0]
    8cde:	e7c8      	b.n	8c72 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    8ce0:	ab05      	add	r3, sp, #20
    8ce2:	e7f6      	b.n	8cd2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x8e>
  const float tmp = TfLiteRound(f / scale);
    8ce4:	4631      	mov	r1, r6
    8ce6:	2000      	movs	r0, #0
    8ce8:	f7f8 f8ea 	bl	ec0 <__aeabi_fdiv>
    8cec:	f7f7 fbbc 	bl	468 <__aeabi_f2d>
    8cf0:	f003 fbd4 	bl	c49c <round>
    8cf4:	f7f7 fed2 	bl	a9c <__aeabi_d2f>
    8cf8:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    8cfa:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    8cfe:	f7f8 f9dd 	bl	10bc <__aeabi_fcmpge>
    8d02:	b160      	cbz	r0, 8d1e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
    8d04:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    8d08:	4620      	mov	r0, r4
    8d0a:	f7f8 f9cd 	bl	10a8 <__aeabi_fcmple>
    8d0e:	b130      	cbz	r0, 8d1e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
  q = zero_point + static_cast<int32_t>(tmp);
    8d10:	4620      	mov	r0, r4
    8d12:	f7f8 f9e7 	bl	10e4 <__aeabi_f2iz>
    8d16:	4438      	add	r0, r7
    8d18:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    8d1a:	2400      	movs	r4, #0
    8d1c:	e009      	b.n	8d32 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xee>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    8d1e:	696c      	ldr	r4, [r5, #20]
    8d20:	4b58      	ldr	r3, [pc, #352]	; (8e84 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    8d22:	9300      	str	r3, [sp, #0]
    8d24:	f240 1359 	movw	r3, #345	; 0x159
    8d28:	4a57      	ldr	r2, [pc, #348]	; (8e88 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    8d2a:	4958      	ldr	r1, [pc, #352]	; (8e8c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    8d2c:	4628      	mov	r0, r5
    8d2e:	47a0      	blx	r4
    8d30:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    8d32:	2c00      	cmp	r4, #0
    8d34:	d19d      	bne.n	8c72 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    8d36:	9a03      	ldr	r2, [sp, #12]
    8d38:	9b05      	ldr	r3, [sp, #20]
    8d3a:	429a      	cmp	r2, r3
    8d3c:	db1f      	blt.n	8d7e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13a>
      return __a;
    8d3e:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    8d40:	681b      	ldr	r3, [r3, #0]
    8d42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8d44:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    8d46:	4631      	mov	r1, r6
    8d48:	4851      	ldr	r0, [pc, #324]	; (8e90 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x24c>)
    8d4a:	f7f8 f8b9 	bl	ec0 <__aeabi_fdiv>
    8d4e:	f7f7 fb8b 	bl	468 <__aeabi_f2d>
    8d52:	f003 fba3 	bl	c49c <round>
    8d56:	f7f7 fea1 	bl	a9c <__aeabi_d2f>
    8d5a:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    8d5c:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    8d60:	f7f8 f9ac 	bl	10bc <__aeabi_fcmpge>
    8d64:	b168      	cbz	r0, 8d82 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
    8d66:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    8d6a:	4630      	mov	r0, r6
    8d6c:	f7f8 f99c 	bl	10a8 <__aeabi_fcmple>
    8d70:	b138      	cbz	r0, 8d82 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
  q = zero_point + static_cast<int32_t>(tmp);
    8d72:	4630      	mov	r0, r6
    8d74:	f7f8 f9b6 	bl	10e4 <__aeabi_f2iz>
    8d78:	4407      	add	r7, r0
    8d7a:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    8d7c:	e00b      	b.n	8d96 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x152>
	return __b;
    8d7e:	ab05      	add	r3, sp, #20
    8d80:	e7de      	b.n	8d40 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xfc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    8d82:	696c      	ldr	r4, [r5, #20]
    8d84:	4b3f      	ldr	r3, [pc, #252]	; (8e84 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    8d86:	9300      	str	r3, [sp, #0]
    8d88:	f240 1359 	movw	r3, #345	; 0x159
    8d8c:	4a3e      	ldr	r2, [pc, #248]	; (8e88 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    8d8e:	493f      	ldr	r1, [pc, #252]	; (8e8c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    8d90:	4628      	mov	r0, r5
    8d92:	47a0      	blx	r4
    8d94:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    8d96:	2c00      	cmp	r4, #0
    8d98:	f47f af6b 	bne.w	8c72 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    8d9c:	9a05      	ldr	r2, [sp, #20]
    8d9e:	9b02      	ldr	r3, [sp, #8]
    8da0:	429a      	cmp	r2, r3
    8da2:	db04      	blt.n	8dae <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16a>
      return __a;
    8da4:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    8da6:	681b      	ldr	r3, [r3, #0]
    8da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8daa:	6013      	str	r3, [r2, #0]
    8dac:	e761      	b.n	8c72 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    8dae:	ab05      	add	r3, sp, #20
    8db0:	e7f9      	b.n	8da6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x162>
  const float tmp = TfLiteRound(f / scale);
    8db2:	4631      	mov	r1, r6
    8db4:	4837      	ldr	r0, [pc, #220]	; (8e94 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x250>)
    8db6:	f7f8 f883 	bl	ec0 <__aeabi_fdiv>
    8dba:	f7f7 fb55 	bl	468 <__aeabi_f2d>
    8dbe:	f003 fb6d 	bl	c49c <round>
    8dc2:	f7f7 fe6b 	bl	a9c <__aeabi_d2f>
    8dc6:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    8dc8:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    8dcc:	f7f8 f976 	bl	10bc <__aeabi_fcmpge>
    8dd0:	b160      	cbz	r0, 8dec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
    8dd2:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    8dd6:	4620      	mov	r0, r4
    8dd8:	f7f8 f966 	bl	10a8 <__aeabi_fcmple>
    8ddc:	b130      	cbz	r0, 8dec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
  q = zero_point + static_cast<int32_t>(tmp);
    8dde:	4620      	mov	r0, r4
    8de0:	f7f8 f980 	bl	10e4 <__aeabi_f2iz>
    8de4:	4438      	add	r0, r7
    8de6:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    8de8:	2400      	movs	r4, #0
    8dea:	e009      	b.n	8e00 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1bc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    8dec:	696c      	ldr	r4, [r5, #20]
    8dee:	4b25      	ldr	r3, [pc, #148]	; (8e84 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    8df0:	9300      	str	r3, [sp, #0]
    8df2:	f240 1359 	movw	r3, #345	; 0x159
    8df6:	4a24      	ldr	r2, [pc, #144]	; (8e88 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    8df8:	4924      	ldr	r1, [pc, #144]	; (8e8c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    8dfa:	4628      	mov	r0, r5
    8dfc:	47a0      	blx	r4
    8dfe:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    8e00:	2c00      	cmp	r4, #0
    8e02:	f47f af36 	bne.w	8c72 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    8e06:	9a03      	ldr	r2, [sp, #12]
    8e08:	9b05      	ldr	r3, [sp, #20]
    8e0a:	429a      	cmp	r2, r3
    8e0c:	db20      	blt.n	8e50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x20c>
      return __a;
    8e0e:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    8e10:	681b      	ldr	r3, [r3, #0]
    8e12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8e14:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    8e16:	4631      	mov	r1, r6
    8e18:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    8e1c:	f7f8 f850 	bl	ec0 <__aeabi_fdiv>
    8e20:	f7f7 fb22 	bl	468 <__aeabi_f2d>
    8e24:	f003 fb3a 	bl	c49c <round>
    8e28:	f7f7 fe38 	bl	a9c <__aeabi_d2f>
    8e2c:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    8e2e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    8e32:	f7f8 f943 	bl	10bc <__aeabi_fcmpge>
    8e36:	b168      	cbz	r0, 8e54 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
    8e38:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    8e3c:	4630      	mov	r0, r6
    8e3e:	f7f8 f933 	bl	10a8 <__aeabi_fcmple>
    8e42:	b138      	cbz	r0, 8e54 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
  q = zero_point + static_cast<int32_t>(tmp);
    8e44:	4630      	mov	r0, r6
    8e46:	f7f8 f94d 	bl	10e4 <__aeabi_f2iz>
    8e4a:	4407      	add	r7, r0
    8e4c:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    8e4e:	e00b      	b.n	8e68 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x224>
	return __b;
    8e50:	ab05      	add	r3, sp, #20
    8e52:	e7dd      	b.n	8e10 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1cc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    8e54:	696c      	ldr	r4, [r5, #20]
    8e56:	4b0b      	ldr	r3, [pc, #44]	; (8e84 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    8e58:	9300      	str	r3, [sp, #0]
    8e5a:	f240 1359 	movw	r3, #345	; 0x159
    8e5e:	4a0a      	ldr	r2, [pc, #40]	; (8e88 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    8e60:	490a      	ldr	r1, [pc, #40]	; (8e8c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    8e62:	4628      	mov	r0, r5
    8e64:	47a0      	blx	r4
    8e66:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    8e68:	2c00      	cmp	r4, #0
    8e6a:	f47f af02 	bne.w	8c72 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    8e6e:	9a05      	ldr	r2, [sp, #20]
    8e70:	9b02      	ldr	r3, [sp, #8]
    8e72:	429a      	cmp	r2, r3
    8e74:	db04      	blt.n	8e80 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x23c>
      return __a;
    8e76:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    8e78:	681b      	ldr	r3, [r3, #0]
    8e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8e7c:	6013      	str	r3, [r2, #0]
    8e7e:	e6f8      	b.n	8c72 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    8e80:	ab05      	add	r3, sp, #20
    8e82:	e7f9      	b.n	8e78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x234>
    8e84:	00056fa0 	.word	0x00056fa0
    8e88:	00056f54 	.word	0x00056f54
    8e8c:	00056d50 	.word	0x00056d50
    8e90:	40c00000 	.word	0x40c00000
    8e94:	bf800000 	.word	0xbf800000

00008e98 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    8e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e9c:	b082      	sub	sp, #8
    8e9e:	4680      	mov	r8, r0
    8ea0:	4608      	mov	r0, r1
    8ea2:	461d      	mov	r5, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    8ea4:	68d1      	ldr	r1, [r2, #12]
    8ea6:	68c0      	ldr	r0, [r0, #12]
    8ea8:	f7f7 ff56 	bl	d58 <__aeabi_fmul>
    8eac:	4604      	mov	r4, r0
  const double input_product_scale =
    8eae:	f7f7 fadb 	bl	468 <__aeabi_f2d>
    8eb2:	4606      	mov	r6, r0
    8eb4:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    8eb6:	2100      	movs	r1, #0
    8eb8:	4620      	mov	r0, r4
    8eba:	f7f8 f8ff 	bl	10bc <__aeabi_fcmpge>
    8ebe:	b178      	cbz	r0, 8ee0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    8ec0:	68e8      	ldr	r0, [r5, #12]
    8ec2:	f7f7 fad1 	bl	468 <__aeabi_f2d>
    8ec6:	4602      	mov	r2, r0
    8ec8:	460b      	mov	r3, r1
    8eca:	4630      	mov	r0, r6
    8ecc:	4639      	mov	r1, r7
    8ece:	f7f7 fc4d 	bl	76c <__aeabi_ddiv>
    8ed2:	9b08      	ldr	r3, [sp, #32]
    8ed4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    8ed8:	2000      	movs	r0, #0
}
    8eda:	b002      	add	sp, #8
    8edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    8ee0:	f8d8 4014 	ldr.w	r4, [r8, #20]
    8ee4:	4b04      	ldr	r3, [pc, #16]	; (8ef8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    8ee6:	9300      	str	r3, [sp, #0]
    8ee8:	f240 134b 	movw	r3, #331	; 0x14b
    8eec:	4a03      	ldr	r2, [pc, #12]	; (8efc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    8eee:	4904      	ldr	r1, [pc, #16]	; (8f00 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    8ef0:	4640      	mov	r0, r8
    8ef2:	47a0      	blx	r4
    8ef4:	2001      	movs	r0, #1
    8ef6:	e7f0      	b.n	8eda <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    8ef8:	00056fc8 	.word	0x00056fc8
    8efc:	00056f54 	.word	0x00056f54
    8f00:	00056d50 	.word	0x00056d50

00008f04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    8f04:	b570      	push	{r4, r5, r6, lr}
    8f06:	b084      	sub	sp, #16
    8f08:	4614      	mov	r4, r2
    8f0a:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    8f0c:	7813      	ldrb	r3, [r2, #0]
    8f0e:	2b03      	cmp	r3, #3
    8f10:	d00d      	beq.n	8f2e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    8f12:	2b09      	cmp	r3, #9
    8f14:	d00e      	beq.n	8f34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    8f16:	2b07      	cmp	r3, #7
    8f18:	d017      	beq.n	8f4a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    8f1a:	6944      	ldr	r4, [r0, #20]
    8f1c:	4b0d      	ldr	r3, [pc, #52]	; (8f54 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>)
    8f1e:	9300      	str	r3, [sp, #0]
    8f20:	f240 1391 	movw	r3, #401	; 0x191
    8f24:	4a0c      	ldr	r2, [pc, #48]	; (8f58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x54>)
    8f26:	490d      	ldr	r1, [pc, #52]	; (8f5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>)
    8f28:	47a0      	blx	r4
    8f2a:	2001      	movs	r0, #1
    8f2c:	e00b      	b.n	8f46 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x42>
    qmax = std::numeric_limits<uint8_t>::max();
    8f2e:	23ff      	movs	r3, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    8f30:	2200      	movs	r2, #0
    8f32:	e002      	b.n	8f3a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    qmax = std::numeric_limits<int8_t>::max();
    8f34:	237f      	movs	r3, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    8f36:	f06f 027f 	mvn.w	r2, #127	; 0x7f
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
    8f3a:	9e08      	ldr	r6, [sp, #32]
    8f3c:	9602      	str	r6, [sp, #8]
    8f3e:	9501      	str	r5, [sp, #4]
    8f40:	9400      	str	r4, [sp, #0]
    8f42:	f7ff fe7f 	bl	8c44 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>
                                               output, act_min, act_max);
}
    8f46:	b004      	add	sp, #16
    8f48:	bd70      	pop	{r4, r5, r6, pc}
    qmax = std::numeric_limits<int16_t>::max();
    8f4a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    8f4e:	4a04      	ldr	r2, [pc, #16]	; (8f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>)
    8f50:	e7f3      	b.n	8f3a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    8f52:	bf00      	nop
    8f54:	00057008 	.word	0x00057008
    8f58:	00056f54 	.word	0x00056f54
    8f5c:	00056d50 	.word	0x00056d50
    8f60:	ffff8000 	.word	0xffff8000

00008f64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    8f64:	b508      	push	{r3, lr}
    8f66:	4613      	mov	r3, r2
  switch (tensor_type) {
    8f68:	280f      	cmp	r0, #15
    8f6a:	d848      	bhi.n	8ffe <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x9a>
    8f6c:	e8df f000 	tbb	[pc, r0]
    8f70:	1f17080c 	.word	0x1f17080c
    8f74:	13332f27 	.word	0x13332f27
    8f78:	3b0f2337 	.word	0x3b0f2337
    8f7c:	1b433f2b 	.word	0x1b433f2b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    8f80:	230a      	movs	r3, #10
    8f82:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8f84:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    8f86:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
    8f88:	2301      	movs	r3, #1
    8f8a:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8f8c:	e7fb      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
    8f8e:	230b      	movs	r3, #11
    8f90:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8f92:	2000      	movs	r0, #0
    8f94:	e7f7      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
    8f96:	2307      	movs	r3, #7
    8f98:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8f9a:	2000      	movs	r0, #0
    8f9c:	e7f3      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
    8f9e:	2302      	movs	r3, #2
    8fa0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fa2:	2000      	movs	r0, #0
    8fa4:	e7ef      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
    8fa6:	2310      	movs	r3, #16
    8fa8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8faa:	2000      	movs	r0, #0
    8fac:	e7eb      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
    8fae:	2303      	movs	r3, #3
    8fb0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fb2:	2000      	movs	r0, #0
    8fb4:	e7e7      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
    8fb6:	2309      	movs	r3, #9
    8fb8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fba:	2000      	movs	r0, #0
    8fbc:	e7e3      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
    8fbe:	2304      	movs	r3, #4
    8fc0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fc2:	2000      	movs	r0, #0
    8fc4:	e7df      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
    8fc6:	230d      	movs	r3, #13
    8fc8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fca:	2000      	movs	r0, #0
    8fcc:	e7db      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
    8fce:	2305      	movs	r3, #5
    8fd0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fd2:	2000      	movs	r0, #0
    8fd4:	e7d7      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
    8fd6:	2306      	movs	r3, #6
    8fd8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fda:	2000      	movs	r0, #0
    8fdc:	e7d3      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
    8fde:	2308      	movs	r3, #8
    8fe0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fe2:	2000      	movs	r0, #0
    8fe4:	e7cf      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
    8fe6:	230c      	movs	r3, #12
    8fe8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8fea:	2000      	movs	r0, #0
    8fec:	e7cb      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
    8fee:	230e      	movs	r3, #14
    8ff0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8ff2:	2000      	movs	r0, #0
    8ff4:	e7c7      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
    8ff6:	230f      	movs	r3, #15
    8ff8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    8ffa:	2000      	movs	r0, #0
    8ffc:	e7c3      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
    8ffe:	2200      	movs	r2, #0
    9000:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    9002:	4602      	mov	r2, r0
    9004:	4902      	ldr	r1, [pc, #8]	; (9010 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xac>)
    9006:	4618      	mov	r0, r3
    9008:	f006 fc72 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    900c:	2001      	movs	r0, #1
    900e:	e7ba      	b.n	8f86 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
    9010:	00057010 	.word	0x00057010

00009014 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
    9014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9018:	b084      	sub	sp, #16
    901a:	4604      	mov	r4, r0
    901c:	4688      	mov	r8, r1
    901e:	4616      	mov	r6, r2
    9020:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9022:	f006 fc53 	bl	f8cc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9026:	6833      	ldr	r3, [r6, #0]
    9028:	681b      	ldr	r3, [r3, #0]
    902a:	2201      	movs	r2, #1
    902c:	2104      	movs	r1, #4
    902e:	4630      	mov	r0, r6
    9030:	4798      	blx	r3
    return new (allocated_memory) T();
    9032:	4605      	mov	r5, r0
    9034:	b108      	cbz	r0, 903a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    9036:	2300      	movs	r3, #0
    9038:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    903a:	9602      	str	r6, [sp, #8]
    903c:	9503      	str	r5, [sp, #12]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    903e:	b305      	cbz	r5, 9082 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return data_ - ReadScalar<soffset_t>(data_);
    9040:	4620      	mov	r0, r4
    9042:	f004 fd09 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9046:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9048:	4630      	mov	r0, r6
    904a:	f004 fd0b 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    904e:	280a      	cmp	r0, #10
    9050:	d924      	bls.n	909c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    9052:	f106 000a 	add.w	r0, r6, #10
    9056:	f004 fd05 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    905a:	b308      	cbz	r0, 90a0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    905c:	4420      	add	r0, r4
    905e:	f006 f81b 	bl	f098 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    9062:	2808      	cmp	r0, #8
    9064:	d128      	bne.n	90b8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    9066:	4620      	mov	r0, r4
    9068:	f004 fcf6 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    906c:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    906e:	4630      	mov	r0, r6
    9070:	f004 fcf8 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9074:	280c      	cmp	r0, #12
    9076:	d915      	bls.n	90a4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    9078:	f106 000c 	add.w	r0, r6, #12
    907c:	f004 fcf2 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9080:	e011      	b.n	90a6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    9082:	4b4c      	ldr	r3, [pc, #304]	; (91b4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a0>)
    9084:	9301      	str	r3, [sp, #4]
    9086:	f240 531d 	movw	r3, #1309	; 0x51d
    908a:	9300      	str	r3, [sp, #0]
    908c:	4b4a      	ldr	r3, [pc, #296]	; (91b8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>)
    908e:	4a4b      	ldr	r2, [pc, #300]	; (91bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a8>)
    9090:	4641      	mov	r1, r8
    9092:	4640      	mov	r0, r8
    9094:	f006 fc3b 	bl	f90e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9098:	2401      	movs	r4, #1
    909a:	e07d      	b.n	9198 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
    909c:	2000      	movs	r0, #0
    909e:	e7dc      	b.n	905a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    90a0:	2000      	movs	r0, #0
    90a2:	e7de      	b.n	9062 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90a4:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    90a6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    90a8:	b120      	cbz	r0, 90b4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    90aa:	4620      	mov	r0, r4
    90ac:	f004 fcce 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    90b0:	4404      	add	r4, r0
    90b2:	e002      	b.n	90ba <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    90b4:	2400      	movs	r4, #0
    90b6:	e000      	b.n	90ba <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    90b8:	2400      	movs	r4, #0

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();

  if (schema_params != nullptr) {
    90ba:	2c00      	cmp	r4, #0
    90bc:	d069      	beq.n	9192 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    90be:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    90c0:	4620      	mov	r0, r4
    90c2:	f004 fcc9 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    90c6:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    90c8:	4620      	mov	r0, r4
    90ca:	f004 fccb 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90ce:	2804      	cmp	r0, #4
    90d0:	d903      	bls.n	90da <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    90d2:	1d20      	adds	r0, r4, #4
    90d4:	f004 fcc6 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    90d8:	e000      	b.n	90dc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    90da:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    90dc:	b118      	cbz	r0, 90e6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    90de:	4430      	add	r0, r6
    90e0:	f005 ff17 	bl	ef12 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    90e4:	e000      	b.n	90e8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    90e6:	2000      	movs	r0, #0
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
    90e8:	b2c0      	uxtb	r0, r0
    90ea:	f006 fbe5 	bl	f8b8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    90ee:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    90f0:	4630      	mov	r0, r6
    90f2:	f004 fcb1 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    90f6:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    90f8:	4620      	mov	r0, r4
    90fa:	f004 fcb3 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90fe:	2808      	cmp	r0, #8
    9100:	d904      	bls.n	910c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    9102:	f104 0008 	add.w	r0, r4, #8
    9106:	f004 fcad 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    910a:	e000      	b.n	910e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    910c:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    910e:	b118      	cbz	r0, 9118 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    9110:	4430      	add	r0, r6
    9112:	f005 ffc1 	bl	f098 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    9116:	e000      	b.n	911a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    9118:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    911a:	3800      	subs	r0, #0
    911c:	bf18      	it	ne
    911e:	2001      	movne	r0, #1
    params->keep_num_dims = schema_params->keep_num_dims();
    9120:	70a8      	strb	r0, [r5, #2]
    return data_ - ReadScalar<soffset_t>(data_);
    9122:	4630      	mov	r0, r6
    9124:	f004 fc98 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9128:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    912a:	4620      	mov	r0, r4
    912c:	f004 fc9a 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9130:	280a      	cmp	r0, #10
    9132:	d904      	bls.n	913e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    9134:	f104 000a 	add.w	r0, r4, #10
    9138:	f004 fc94 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    913c:	e000      	b.n	9140 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    913e:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9140:	b118      	cbz	r0, 914a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
    9142:	4430      	add	r0, r6
    9144:	f005 ffa8 	bl	f098 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    9148:	e000      	b.n	914c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    914a:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    914c:	3800      	subs	r0, #0
    914e:	bf18      	it	ne
    9150:	2001      	movne	r0, #1
    params->asymmetric_quantize_inputs =
    9152:	70e8      	strb	r0, [r5, #3]
    return data_ - ReadScalar<soffset_t>(data_);
    9154:	4630      	mov	r0, r6
    9156:	f004 fc7f 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    915a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    915c:	4620      	mov	r0, r4
    915e:	f004 fc81 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9162:	2806      	cmp	r0, #6
    9164:	d903      	bls.n	916e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    9166:	1da0      	adds	r0, r4, #6
    9168:	f004 fc7c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    916c:	e000      	b.n	9170 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15c>
    916e:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9170:	b118      	cbz	r0, 917a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x166>
    9172:	4430      	add	r0, r6
    9174:	f005 fecd 	bl	ef12 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    9178:	e000      	b.n	917c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    917a:	2000      	movs	r0, #0
        schema_params->asymmetric_quantize_inputs();

    switch (schema_params->weights_format()) {
    917c:	b138      	cbz	r0, 918e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17a>
    917e:	2801      	cmp	r0, #1
    9180:	d014      	beq.n	91ac <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
    9182:	490f      	ldr	r1, [pc, #60]	; (91c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>)
    9184:	4640      	mov	r0, r8
    9186:	f006 fbb3 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
    918a:	2401      	movs	r4, #1
    918c:	e004      	b.n	9198 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    918e:	2300      	movs	r3, #0
    9190:	706b      	strb	r3, [r5, #1]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
    9192:	2400      	movs	r4, #0
    9194:	9403      	str	r4, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    9196:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    9198:	9903      	ldr	r1, [sp, #12]
    919a:	b119      	cbz	r1, 91a4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x190>
    void operator()(void* data) { allocator_->Deallocate(data); }
    919c:	9802      	ldr	r0, [sp, #8]
    919e:	6803      	ldr	r3, [r0, #0]
    91a0:	685b      	ldr	r3, [r3, #4]
    91a2:	4798      	blx	r3
  return kTfLiteOk;
}
    91a4:	4620      	mov	r0, r4
    91a6:	b004      	add	sp, #16
    91a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->weights_format =
    91ac:	2301      	movs	r3, #1
    91ae:	706b      	strb	r3, [r5, #1]
        break;
    91b0:	e7ef      	b.n	9192 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    91b2:	bf00      	nop
    91b4:	0005708c 	.word	0x0005708c
    91b8:	00057034 	.word	0x00057034
    91bc:	00056d50 	.word	0x00056d50
    91c0:	000570a0 	.word	0x000570a0

000091c4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    91c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    91c8:	4604      	mov	r4, r0
    91ca:	4688      	mov	r8, r1
    91cc:	4691      	mov	r9, r2
    91ce:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    91d0:	2300      	movs	r3, #0
    91d2:	6033      	str	r3, [r6, #0]
  auto builtin_code = GetBuiltinCode(opcode);
    91d4:	f006 fbaa 	bl	f92c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    91d8:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    91da:	4620      	mov	r0, r4
    91dc:	f004 fc3c 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    91e0:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    91e2:	4638      	mov	r0, r7
    91e4:	f004 fc3e 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    91e8:	2808      	cmp	r0, #8
    91ea:	d904      	bls.n	91f6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    91ec:	f107 0008 	add.w	r0, r7, #8
    91f0:	f004 fc38 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    91f4:	e000      	b.n	91f8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x34>
    91f6:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    91f8:	b120      	cbz	r0, 9204 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
    91fa:	4420      	add	r0, r4
    91fc:	f004 fc2c 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9200:	4607      	mov	r7, r0
    9202:	e000      	b.n	9206 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    9204:	2701      	movs	r7, #1
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    9206:	2d91      	cmp	r5, #145	; 0x91
    9208:	d80d      	bhi.n	9226 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    920a:	2d20      	cmp	r5, #32
    920c:	d01c      	beq.n	9248 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
    *registration = op_resolver.FindOp(builtin_code, version);
    920e:	f8d8 3000 	ldr.w	r3, [r8]
    9212:	681b      	ldr	r3, [r3, #0]
    9214:	463a      	mov	r2, r7
    9216:	4629      	mov	r1, r5
    9218:	4640      	mov	r0, r8
    921a:	4798      	blx	r3
    921c:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    921e:	b148      	cbz	r0, 9234 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x70>
  TfLiteStatus status = kTfLiteOk;
    9220:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    9222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(
    9226:	462a      	mov	r2, r5
    9228:	491c      	ldr	r1, [pc, #112]	; (929c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd8>)
    922a:	4648      	mov	r0, r9
    922c:	f006 fb60 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    9230:	2001      	movs	r0, #1
    9232:	e7f6      	b.n	9222 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      TF_LITE_REPORT_ERROR(
    9234:	463b      	mov	r3, r7
    9236:	4a1a      	ldr	r2, [pc, #104]	; (92a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>)
    9238:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    923c:	4919      	ldr	r1, [pc, #100]	; (92a4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
    923e:	4648      	mov	r0, r9
    9240:	f006 fb56 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    9244:	2001      	movs	r0, #1
    9246:	e7ec      	b.n	9222 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return data_ - ReadScalar<soffset_t>(data_);
    9248:	4620      	mov	r0, r4
    924a:	f004 fc05 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    924e:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9250:	4628      	mov	r0, r5
    9252:	f004 fc07 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9256:	2806      	cmp	r0, #6
    9258:	d914      	bls.n	9284 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>
    925a:	1da8      	adds	r0, r5, #6
    925c:	f004 fc02 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9260:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9262:	b188      	cbz	r0, 9288 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>
    9264:	4620      	mov	r0, r4
    9266:	f004 fbf1 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    926a:	1821      	adds	r1, r4, r0
  } else if (!opcode->custom_code()) {
    926c:	b171      	cbz	r1, 928c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>
    *registration = op_resolver.FindOp(name, version);
    926e:	f8d8 3000 	ldr.w	r3, [r8]
    9272:	685b      	ldr	r3, [r3, #4]
    9274:	463a      	mov	r2, r7
    9276:	3104      	adds	r1, #4
    9278:	4640      	mov	r0, r8
    927a:	4798      	blx	r3
    927c:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    927e:	b158      	cbz	r0, 9298 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  TfLiteStatus status = kTfLiteOk;
    9280:	2000      	movs	r0, #0
    9282:	e7ce      	b.n	9222 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9284:	2000      	movs	r0, #0
    9286:	e7eb      	b.n	9260 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9288:	2100      	movs	r1, #0
    928a:	e7ef      	b.n	926c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
    TF_LITE_REPORT_ERROR(
    928c:	4906      	ldr	r1, [pc, #24]	; (92a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
    928e:	4648      	mov	r0, r9
    9290:	f006 fb2e 	bl	f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    9294:	2001      	movs	r0, #1
    9296:	e7c4      	b.n	9222 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      status = kTfLiteError;
    9298:	2001      	movs	r0, #1
    929a:	e7c2      	b.n	9222 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    929c:	000570cc 	.word	0x000570cc
    92a0:	00055ffc 	.word	0x00055ffc
    92a4:	00057120 	.word	0x00057120
    92a8:	000571c4 	.word	0x000571c4

000092ac <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    92ac:	2801      	cmp	r0, #1
    92ae:	d009      	beq.n	92c4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x18>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    92b0:	2803      	cmp	r0, #3
    92b2:	d00c      	beq.n	92ce <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x22>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    92b4:	2802      	cmp	r0, #2
    92b6:	d00f      	beq.n	92d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    92b8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    92bc:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    92be:	4b09      	ldr	r3, [pc, #36]	; (92e4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    92c0:	6013      	str	r3, [r2, #0]
  }
}
    92c2:	4770      	bx	lr
    *activation_min = 0;
    92c4:	2300      	movs	r3, #0
    92c6:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    92c8:	4b06      	ldr	r3, [pc, #24]	; (92e4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    92ca:	6013      	str	r3, [r2, #0]
    92cc:	4770      	bx	lr
    *activation_min = 0;
    92ce:	2300      	movs	r3, #0
    92d0:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    92d2:	4b05      	ldr	r3, [pc, #20]	; (92e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x3c>)
    92d4:	6013      	str	r3, [r2, #0]
    92d6:	4770      	bx	lr
    *activation_min = -1;
    92d8:	4b04      	ldr	r3, [pc, #16]	; (92ec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x40>)
    92da:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    92dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    92e0:	6013      	str	r3, [r2, #0]
    92e2:	4770      	bx	lr
    92e4:	7f7fffff 	.word	0x7f7fffff
    92e8:	40c00000 	.word	0x40c00000
    92ec:	bf800000 	.word	0xbf800000

000092f0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    92f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    92f4:	b085      	sub	sp, #20
  TFLITE_DCHECK(node->user_data != nullptr);
    92f6:	690e      	ldr	r6, [r1, #16]
    92f8:	b1ae      	cbz	r6, 9326 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
    92fa:	4605      	mov	r5, r0
    92fc:	460c      	mov	r4, r1
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    92fe:	680b      	ldr	r3, [r1, #0]
    9300:	681b      	ldr	r3, [r3, #0]
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    9302:	2b01      	cmp	r3, #1
    9304:	d011      	beq.n	932a <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    9306:	6946      	ldr	r6, [r0, #20]
    9308:	2401      	movs	r4, #1
    930a:	9403      	str	r4, [sp, #12]
    930c:	9302      	str	r3, [sp, #8]
    930e:	4b40      	ldr	r3, [pc, #256]	; (9410 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    9310:	9301      	str	r3, [sp, #4]
    9312:	4b40      	ldr	r3, [pc, #256]	; (9414 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    9314:	9300      	str	r3, [sp, #0]
    9316:	2332      	movs	r3, #50	; 0x32
    9318:	4a3f      	ldr	r2, [pc, #252]	; (9418 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    931a:	4940      	ldr	r1, [pc, #256]	; (941c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
    931c:	47b0      	blx	r6
    931e:	4620      	mov	r0, r4

  data->quantization_params.zero_point = input->params.zero_point;
  data->quantization_params.scale = static_cast<double>(input->params.scale);
  data->output_zero_point = output->params.zero_point;
  return kTfLiteOk;
}
    9320:	b005      	add	sp, #20
    9322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    9326:	f006 fe95 	bl	10054 <abort>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    932a:	684b      	ldr	r3, [r1, #4]
    932c:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    932e:	2b01      	cmp	r3, #1
    9330:	d00d      	beq.n	934e <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    9332:	6946      	ldr	r6, [r0, #20]
    9334:	2401      	movs	r4, #1
    9336:	9403      	str	r4, [sp, #12]
    9338:	9302      	str	r3, [sp, #8]
    933a:	4b35      	ldr	r3, [pc, #212]	; (9410 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    933c:	9301      	str	r3, [sp, #4]
    933e:	4b38      	ldr	r3, [pc, #224]	; (9420 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
    9340:	9300      	str	r3, [sp, #0]
    9342:	2333      	movs	r3, #51	; 0x33
    9344:	4a34      	ldr	r2, [pc, #208]	; (9418 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    9346:	4935      	ldr	r1, [pc, #212]	; (941c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
    9348:	47b0      	blx	r6
    934a:	4620      	mov	r0, r4
    934c:	e7e8      	b.n	9320 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* input = GetInput(context, node, 0);
    934e:	2200      	movs	r2, #0
    9350:	f006 fa70 	bl	f834 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    9354:	4607      	mov	r7, r0
    9356:	b1b8      	cbz	r0, 9388 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
  TfLiteTensor* output = GetOutput(context, node, 0);
    9358:	2200      	movs	r2, #0
    935a:	4621      	mov	r1, r4
    935c:	4628      	mov	r0, r5
    935e:	f006 fa88 	bl	f872 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    9362:	4604      	mov	r4, r0
    9364:	b1d0      	cbz	r0, 939c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
    9366:	783b      	ldrb	r3, [r7, #0]
    9368:	2b03      	cmp	r3, #3
    936a:	d021      	beq.n	93b0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    936c:	2b09      	cmp	r3, #9
    936e:	d01f      	beq.n	93b0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    9370:	2b07      	cmp	r3, #7
    9372:	d01d      	beq.n	93b0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    9374:	696c      	ldr	r4, [r5, #20]
    9376:	4b2b      	ldr	r3, [pc, #172]	; (9424 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
    9378:	9300      	str	r3, [sp, #0]
    937a:	233b      	movs	r3, #59	; 0x3b
    937c:	4a26      	ldr	r2, [pc, #152]	; (9418 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    937e:	492a      	ldr	r1, [pc, #168]	; (9428 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    9380:	4628      	mov	r0, r5
    9382:	47a0      	blx	r4
    9384:	2001      	movs	r0, #1
    9386:	e7cb      	b.n	9320 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, input != nullptr);
    9388:	696c      	ldr	r4, [r5, #20]
    938a:	4b28      	ldr	r3, [pc, #160]	; (942c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
    938c:	9300      	str	r3, [sp, #0]
    938e:	2337      	movs	r3, #55	; 0x37
    9390:	4a21      	ldr	r2, [pc, #132]	; (9418 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    9392:	4925      	ldr	r1, [pc, #148]	; (9428 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    9394:	4628      	mov	r0, r5
    9396:	47a0      	blx	r4
    9398:	2001      	movs	r0, #1
    939a:	e7c1      	b.n	9320 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, output != nullptr);
    939c:	696c      	ldr	r4, [r5, #20]
    939e:	4b24      	ldr	r3, [pc, #144]	; (9430 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
    93a0:	9300      	str	r3, [sp, #0]
    93a2:	2339      	movs	r3, #57	; 0x39
    93a4:	4a1c      	ldr	r2, [pc, #112]	; (9418 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    93a6:	4920      	ldr	r1, [pc, #128]	; (9428 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    93a8:	4628      	mov	r0, r5
    93aa:	47a0      	blx	r4
    93ac:	2001      	movs	r0, #1
    93ae:	e7b7      	b.n	9320 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
    93b0:	7823      	ldrb	r3, [r4, #0]
    93b2:	2b01      	cmp	r3, #1
    93b4:	d009      	beq.n	93ca <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    93b6:	696c      	ldr	r4, [r5, #20]
    93b8:	4b1e      	ldr	r3, [pc, #120]	; (9434 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
    93ba:	9300      	str	r3, [sp, #0]
    93bc:	233e      	movs	r3, #62	; 0x3e
    93be:	4a16      	ldr	r2, [pc, #88]	; (9418 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
    93c0:	4919      	ldr	r1, [pc, #100]	; (9428 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
    93c2:	4628      	mov	r0, r5
    93c4:	47a0      	blx	r4
    93c6:	2001      	movs	r0, #1
    93c8:	e7aa      	b.n	9320 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  if (output->type == kTfLiteInt32) {
    93ca:	2b02      	cmp	r3, #2
    93cc:	d00a      	beq.n	93e4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  data->quantization_params.zero_point = input->params.zero_point;
    93ce:	693b      	ldr	r3, [r7, #16]
    93d0:	60b3      	str	r3, [r6, #8]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
    93d2:	68f8      	ldr	r0, [r7, #12]
    93d4:	f7f7 f848 	bl	468 <__aeabi_f2d>
    93d8:	e9c6 0100 	strd	r0, r1, [r6]
  data->output_zero_point = output->params.zero_point;
    93dc:	6923      	ldr	r3, [r4, #16]
    93de:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
    93e0:	2000      	movs	r0, #0
    93e2:	e79d      	b.n	9320 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
        static_cast<double>(input->params.scale) /
    93e4:	68f8      	ldr	r0, [r7, #12]
    93e6:	f7f7 f83f 	bl	468 <__aeabi_f2d>
    93ea:	4680      	mov	r8, r0
    93ec:	4689      	mov	r9, r1
        static_cast<double>(output->params.scale);
    93ee:	68e0      	ldr	r0, [r4, #12]
    93f0:	f7f7 f83a 	bl	468 <__aeabi_f2d>
    93f4:	4602      	mov	r2, r0
    93f6:	460b      	mov	r3, r1
    const double effective_output_scale =
    93f8:	4640      	mov	r0, r8
    93fa:	4649      	mov	r1, r9
    93fc:	f7f7 f9b6 	bl	76c <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
    9400:	f106 0314 	add.w	r3, r6, #20
    9404:	f106 0210 	add.w	r2, r6, #16
    9408:	f7ff fbce 	bl	8ba8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    940c:	e7df      	b.n	93ce <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
    940e:	bf00      	nop
    9410:	00057668 	.word	0x00057668
    9414:	0005726c 	.word	0x0005726c
    9418:	000571fc 	.word	0x000571fc
    941c:	00057250 	.word	0x00057250
    9420:	0005727c 	.word	0x0005727c
    9424:	000572b8 	.word	0x000572b8
    9428:	00056d50 	.word	0x00056d50
    942c:	00057290 	.word	0x00057290
    9430:	000572a4 	.word	0x000572a4
    9434:	00057314 	.word	0x00057314

00009438 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:
  return kTfLiteOk;
}

}  // namespace dequantize

TfLiteRegistration Register_DEQUANTIZE() {
    9438:	b470      	push	{r4, r5, r6}
    943a:	4606      	mov	r6, r0
          /*prepare=*/dequantize::Prepare,
          /*invoke=*/dequantize::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    943c:	4604      	mov	r4, r0
    943e:	4d05      	ldr	r5, [pc, #20]	; (9454 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x1c>)
    9440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9444:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    944c:	4630      	mov	r0, r6
    944e:	bc70      	pop	{r4, r5, r6}
    9450:	4770      	bx	lr
    9452:	bf00      	nop
    9454:	00010f20 	.word	0x00010f20

00009458 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    945c:	b0a4      	sub	sp, #144	; 0x90
  TFLITE_DCHECK(node->user_data != nullptr);
    945e:	f8d1 8010 	ldr.w	r8, [r1, #16]
    9462:	f1b8 0f00 	cmp.w	r8, #0
    9466:	d02b      	beq.n	94c0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    9468:	4604      	mov	r4, r0
    946a:	460d      	mov	r5, r1
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    946c:	b350      	cbz	r0, 94c4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
  TFLITE_DCHECK(node != nullptr);
    946e:	b359      	cbz	r1, 94c8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    9470:	6d43      	ldr	r3, [r0, #84]	; 0x54
    9472:	680a      	ldr	r2, [r1, #0]
    9474:	6851      	ldr	r1, [r2, #4]
    9476:	4798      	blx	r3
    9478:	4606      	mov	r6, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    947a:	b33c      	cbz	r4, 94cc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
    947c:	b345      	cbz	r5, 94d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x78>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    947e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9480:	686a      	ldr	r2, [r5, #4]
    9482:	6851      	ldr	r1, [r2, #4]
    9484:	4620      	mov	r0, r4
    9486:	4798      	blx	r3
    9488:	4605      	mov	r5, r0
  if (output->type == kTfLiteFloat32) {
    948a:	7a07      	ldrb	r7, [r0, #8]
    948c:	2f01      	cmp	r7, #1
    948e:	f040 81a3 	bne.w	97d8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x380>
    switch (input->type) {
    9492:	7a30      	ldrb	r0, [r6, #8]
    9494:	2807      	cmp	r0, #7
    9496:	f000 811d 	beq.w	96d4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x27c>
    949a:	2809      	cmp	r0, #9
    949c:	f000 809a 	beq.w	95d4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x17c>
    94a0:	2803      	cmp	r0, #3
    94a2:	d017      	beq.n	94d4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    94a4:	f8d4 8014 	ldr.w	r8, [r4, #20]
    94a8:	f7ff fb28 	bl	8afc <TfLiteTypeGetName>
    94ac:	4606      	mov	r6, r0
    94ae:	7a28      	ldrb	r0, [r5, #8]
    94b0:	f7ff fb24 	bl	8afc <TfLiteTypeGetName>
    94b4:	4603      	mov	r3, r0
    94b6:	4632      	mov	r2, r6
    94b8:	49be      	ldr	r1, [pc, #760]	; (97b4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x35c>)
    94ba:	4620      	mov	r0, r4
    94bc:	47c0      	blx	r8
        return kTfLiteError;
    94be:	e199      	b.n	97f4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
  TFLITE_DCHECK(node->user_data != nullptr);
    94c0:	f006 fdc8 	bl	10054 <abort>
  TFLITE_DCHECK(context != nullptr);
    94c4:	f006 fdc6 	bl	10054 <abort>
  TFLITE_DCHECK(node != nullptr);
    94c8:	f006 fdc4 	bl	10054 <abort>
  TFLITE_DCHECK(context != nullptr);
    94cc:	f006 fdc2 	bl	10054 <abort>
  TFLITE_DCHECK(node != nullptr);
    94d0:	f006 fdc0 	bl	10054 <abort>
                                  tflite::micro::GetTensorShape(input),
    94d4:	4631      	mov	r1, r6
    94d6:	4668      	mov	r0, sp
    94d8:	f006 fb16 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    94dc:	4630      	mov	r0, r6
    94de:	f006 faaa 	bl	fa36 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
    94e2:	4604      	mov	r4, r0
                                  tflite::micro::GetTensorShape(output),
    94e4:	4629      	mov	r1, r5
    94e6:	a806      	add	r0, sp, #24
    94e8:	f006 fb0e 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    94ec:	4628      	mov	r0, r5
    94ee:	f006 fa61 	bl	f9b4 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    94f2:	4605      	mov	r5, r0
template <typename InputT, typename OutputT>
inline void Dequantize(const tflite::DequantizationParams& op_params,
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32_t zero_point = op_params.zero_point;
    94f4:	f8d8 9008 	ldr.w	r9, [r8, #8]
  const double scale = op_params.scale;
    94f8:	e9d8 6700 	ldrd	r6, r7, [r8]
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
  }

  inline int32_t DimensionsCount() const { return size_; }
    94fc:	9800      	ldr	r0, [sp, #0]
    94fe:	9b06      	ldr	r3, [sp, #24]

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    9500:	4298      	cmp	r0, r3
    9502:	d101      	bne.n	9508 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    9504:	2300      	movs	r3, #0
    9506:	e017      	b.n	9538 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    9508:	f006 fda4 	bl	10054 <abort>
    TFLITE_DCHECK_GE(i, 0);
    950c:	f006 fda2 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9510:	f006 fda0 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9514:	aa24      	add	r2, sp, #144	; 0x90
    9516:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    951a:	f852 2c8c 	ldr.w	r2, [r2, #-140]
    951e:	e017      	b.n	9550 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xf8>
    TFLITE_DCHECK_GE(i, 0);
    9520:	f006 fd98 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9524:	f006 fd96 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9528:	a924      	add	r1, sp, #144	; 0x90
    952a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    952e:	f851 1c74 	ldr.w	r1, [r1, #-116]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    9532:	4291      	cmp	r1, r2
    9534:	d117      	bne.n	9566 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x10e>
  for (int i = 0; i < dims_count; ++i) {
    9536:	3301      	adds	r3, #1
    9538:	4298      	cmp	r0, r3
    953a:	dd16      	ble.n	956a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x112>
    TFLITE_DCHECK_GE(i, 0);
    953c:	2b00      	cmp	r3, #0
    953e:	dbe5      	blt.n	950c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    9540:	9a00      	ldr	r2, [sp, #0]
    9542:	4293      	cmp	r3, r2
    9544:	dae4      	bge.n	9510 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xb8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9546:	2a05      	cmp	r2, #5
    9548:	dde4      	ble.n	9514 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xbc>
    954a:	9a01      	ldr	r2, [sp, #4]
    954c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    9550:	2b00      	cmp	r3, #0
    9552:	dbe5      	blt.n	9520 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xc8>
    TFLITE_DCHECK_LT(i, size_);
    9554:	9906      	ldr	r1, [sp, #24]
    9556:	428b      	cmp	r3, r1
    9558:	dae4      	bge.n	9524 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    955a:	2905      	cmp	r1, #5
    955c:	dde4      	ble.n	9528 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xd0>
    955e:	9907      	ldr	r1, [sp, #28]
    9560:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    9564:	e7e5      	b.n	9532 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xda>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    9566:	f006 fd75 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    956a:	2805      	cmp	r0, #5
    956c:	dd0b      	ble.n	9586 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x12e>
    956e:	9901      	ldr	r1, [sp, #4]
    for (int i = 0; i < size_; i++) {
    9570:	2300      	movs	r3, #0
    int buffer_size = 1;
    9572:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
    9576:	4298      	cmp	r0, r3
    9578:	dd07      	ble.n	958a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x132>
      buffer_size *= dims_data[i];
    957a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    957e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
    9582:	3301      	adds	r3, #1
    9584:	e7f7      	b.n	9576 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9586:	a901      	add	r1, sp, #4
    9588:	e7f2      	b.n	9570 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x118>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
    958a:	f04f 0800 	mov.w	r8, #0
    958e:	45d0      	cmp	r8, sl
    9590:	da10      	bge.n	95b4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    const int32_t val = input_data[i];
    9592:	f814 0008 	ldrb.w	r0, [r4, r8]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    9596:	eba0 0009 	sub.w	r0, r0, r9
    959a:	f7f6 ff53 	bl	444 <__aeabi_i2d>
    959e:	4632      	mov	r2, r6
    95a0:	463b      	mov	r3, r7
    95a2:	f7f6 ffb9 	bl	518 <__aeabi_dmul>
    95a6:	f7f7 fa79 	bl	a9c <__aeabi_d2f>
    output_data[i] = result;
    95aa:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
  for (int i = 0; i < flat_size; i++) {
    95ae:	f108 0801 	add.w	r8, r8, #1
    95b2:	e7ec      	b.n	958e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x136>
    if (size_ > kMaxSmallSize) {
    95b4:	9b06      	ldr	r3, [sp, #24]
    95b6:	2b05      	cmp	r3, #5
    95b8:	dd03      	ble.n	95c2 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      delete[] dims_pointer_;
    95ba:	9807      	ldr	r0, [sp, #28]
    95bc:	b108      	cbz	r0, 95c2 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    95be:	f006 fd34 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    95c2:	9b00      	ldr	r3, [sp, #0]
    95c4:	2b05      	cmp	r3, #5
    95c6:	dd03      	ble.n	95d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x178>
      delete[] dims_pointer_;
    95c8:	9801      	ldr	r0, [sp, #4]
    95ca:	b108      	cbz	r0, 95d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x178>
    95cc:	f006 fd2d 	bl	1002a <_ZdaPv>
  return kTfLiteOk;
    95d0:	2700      	movs	r7, #0
        break;
    95d2:	e10f      	b.n	97f4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
                                  tflite::micro::GetTensorShape(input),
    95d4:	4631      	mov	r1, r6
    95d6:	a80c      	add	r0, sp, #48	; 0x30
    95d8:	f006 fa96 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    95dc:	4630      	mov	r0, r6
    95de:	f006 f9ed 	bl	f9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    95e2:	4604      	mov	r4, r0
                                  tflite::micro::GetTensorShape(output),
    95e4:	4629      	mov	r1, r5
    95e6:	a812      	add	r0, sp, #72	; 0x48
    95e8:	f006 fa8e 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    95ec:	4628      	mov	r0, r5
    95ee:	f006 f9e1 	bl	f9b4 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    95f2:	4605      	mov	r5, r0
  int32_t zero_point = op_params.zero_point;
    95f4:	f8d8 9008 	ldr.w	r9, [r8, #8]
  const double scale = op_params.scale;
    95f8:	e9d8 6700 	ldrd	r6, r7, [r8]
  inline int32_t DimensionsCount() const { return size_; }
    95fc:	980c      	ldr	r0, [sp, #48]	; 0x30
    95fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    9600:	4298      	cmp	r0, r3
    9602:	d101      	bne.n	9608 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b0>
  for (int i = 0; i < dims_count; ++i) {
    9604:	2300      	movs	r3, #0
    9606:	e017      	b.n	9638 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    9608:	f006 fd24 	bl	10054 <abort>
    TFLITE_DCHECK_GE(i, 0);
    960c:	f006 fd22 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9610:	f006 fd20 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9614:	aa24      	add	r2, sp, #144	; 0x90
    9616:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    961a:	f852 2c5c 	ldr.w	r2, [r2, #-92]
    961e:	e017      	b.n	9650 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    TFLITE_DCHECK_GE(i, 0);
    9620:	f006 fd18 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9624:	f006 fd16 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9628:	a924      	add	r1, sp, #144	; 0x90
    962a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    962e:	f851 1c44 	ldr.w	r1, [r1, #-68]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    9632:	4291      	cmp	r1, r2
    9634:	d117      	bne.n	9666 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x20e>
  for (int i = 0; i < dims_count; ++i) {
    9636:	3301      	adds	r3, #1
    9638:	4298      	cmp	r0, r3
    963a:	dd16      	ble.n	966a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x212>
    TFLITE_DCHECK_GE(i, 0);
    963c:	2b00      	cmp	r3, #0
    963e:	dbe5      	blt.n	960c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b4>
    TFLITE_DCHECK_LT(i, size_);
    9640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9642:	4293      	cmp	r3, r2
    9644:	dae4      	bge.n	9610 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9646:	2a05      	cmp	r2, #5
    9648:	dde4      	ble.n	9614 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1bc>
    964a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    964c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    9650:	2b00      	cmp	r3, #0
    9652:	dbe5      	blt.n	9620 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
    9654:	9912      	ldr	r1, [sp, #72]	; 0x48
    9656:	428b      	cmp	r3, r1
    9658:	dae4      	bge.n	9624 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    965a:	2905      	cmp	r1, #5
    965c:	dde4      	ble.n	9628 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    965e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9660:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    9664:	e7e5      	b.n	9632 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1da>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    9666:	f006 fcf5 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    966a:	2805      	cmp	r0, #5
    966c:	dd0b      	ble.n	9686 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x22e>
    966e:	990d      	ldr	r1, [sp, #52]	; 0x34
    for (int i = 0; i < size_; i++) {
    9670:	2300      	movs	r3, #0
    int buffer_size = 1;
    9672:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
    9676:	4298      	cmp	r0, r3
    9678:	dd07      	ble.n	968a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x232>
      buffer_size *= dims_data[i];
    967a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    967e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
    9682:	3301      	adds	r3, #1
    9684:	e7f7      	b.n	9676 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9686:	a90d      	add	r1, sp, #52	; 0x34
    9688:	e7f2      	b.n	9670 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>
  for (int i = 0; i < flat_size; i++) {
    968a:	f04f 0800 	mov.w	r8, #0
    968e:	45d0      	cmp	r8, sl
    9690:	da10      	bge.n	96b4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x25c>
    const int32_t val = input_data[i];
    9692:	f914 0008 	ldrsb.w	r0, [r4, r8]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    9696:	eba0 0009 	sub.w	r0, r0, r9
    969a:	f7f6 fed3 	bl	444 <__aeabi_i2d>
    969e:	4632      	mov	r2, r6
    96a0:	463b      	mov	r3, r7
    96a2:	f7f6 ff39 	bl	518 <__aeabi_dmul>
    96a6:	f7f7 f9f9 	bl	a9c <__aeabi_d2f>
    output_data[i] = result;
    96aa:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
  for (int i = 0; i < flat_size; i++) {
    96ae:	f108 0801 	add.w	r8, r8, #1
    96b2:	e7ec      	b.n	968e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x236>
    if (size_ > kMaxSmallSize) {
    96b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    96b6:	2b05      	cmp	r3, #5
    96b8:	dd03      	ble.n	96c2 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x26a>
      delete[] dims_pointer_;
    96ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
    96bc:	b108      	cbz	r0, 96c2 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x26a>
    96be:	f006 fcb4 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    96c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    96c4:	2b05      	cmp	r3, #5
    96c6:	dd03      	ble.n	96d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x278>
      delete[] dims_pointer_;
    96c8:	980d      	ldr	r0, [sp, #52]	; 0x34
    96ca:	b108      	cbz	r0, 96d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x278>
    96cc:	f006 fcad 	bl	1002a <_ZdaPv>
  return kTfLiteOk;
    96d0:	2700      	movs	r7, #0
        break;
    96d2:	e08f      	b.n	97f4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
                                  tflite::micro::GetTensorShape(input),
    96d4:	4631      	mov	r1, r6
    96d6:	a818      	add	r0, sp, #96	; 0x60
    96d8:	f006 fa16 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    96dc:	4630      	mov	r0, r6
    96de:	f006 f996 	bl	fa0e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    96e2:	4604      	mov	r4, r0
                                  tflite::micro::GetTensorShape(output),
    96e4:	4629      	mov	r1, r5
    96e6:	a81e      	add	r0, sp, #120	; 0x78
    96e8:	f006 fa0e 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Dequantize(data->quantization_params,
    96ec:	4628      	mov	r0, r5
    96ee:	f006 f961 	bl	f9b4 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    96f2:	4605      	mov	r5, r0
  int32_t zero_point = op_params.zero_point;
    96f4:	f8d8 9008 	ldr.w	r9, [r8, #8]
  const double scale = op_params.scale;
    96f8:	e9d8 6700 	ldrd	r6, r7, [r8]
  inline int32_t DimensionsCount() const { return size_; }
    96fc:	9818      	ldr	r0, [sp, #96]	; 0x60
    96fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    9700:	4298      	cmp	r0, r3
    9702:	d101      	bne.n	9708 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
  for (int i = 0; i < dims_count; ++i) {
    9704:	2300      	movs	r3, #0
    9706:	e017      	b.n	9738 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    9708:	f006 fca4 	bl	10054 <abort>
    TFLITE_DCHECK_GE(i, 0);
    970c:	f006 fca2 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9710:	f006 fca0 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9714:	aa24      	add	r2, sp, #144	; 0x90
    9716:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    971a:	f852 2c2c 	ldr.w	r2, [r2, #-44]
    971e:	e017      	b.n	9750 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    TFLITE_DCHECK_GE(i, 0);
    9720:	f006 fc98 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9724:	f006 fc96 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9728:	a924      	add	r1, sp, #144	; 0x90
    972a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    972e:	f851 1c14 	ldr.w	r1, [r1, #-20]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    9732:	4291      	cmp	r1, r2
    9734:	d117      	bne.n	9766 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x30e>
  for (int i = 0; i < dims_count; ++i) {
    9736:	3301      	adds	r3, #1
    9738:	4298      	cmp	r0, r3
    973a:	dd16      	ble.n	976a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x312>
    TFLITE_DCHECK_GE(i, 0);
    973c:	2b00      	cmp	r3, #0
    973e:	dbe5      	blt.n	970c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
    TFLITE_DCHECK_LT(i, size_);
    9740:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9742:	4293      	cmp	r3, r2
    9744:	dae4      	bge.n	9710 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9746:	2a05      	cmp	r2, #5
    9748:	dde4      	ble.n	9714 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
    974a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    974c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    9750:	2b00      	cmp	r3, #0
    9752:	dbe5      	blt.n	9720 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
    TFLITE_DCHECK_LT(i, size_);
    9754:	991e      	ldr	r1, [sp, #120]	; 0x78
    9756:	428b      	cmp	r3, r1
    9758:	dae4      	bge.n	9724 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    975a:	2905      	cmp	r1, #5
    975c:	dde4      	ble.n	9728 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2d0>
    975e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9760:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    9764:	e7e5      	b.n	9732 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    9766:	f006 fc75 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    976a:	2805      	cmp	r0, #5
    976c:	dd0b      	ble.n	9786 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x32e>
    976e:	9919      	ldr	r1, [sp, #100]	; 0x64
    for (int i = 0; i < size_; i++) {
    9770:	2300      	movs	r3, #0
    int buffer_size = 1;
    9772:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < size_; i++) {
    9776:	4298      	cmp	r0, r3
    9778:	dd07      	ble.n	978a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x332>
      buffer_size *= dims_data[i];
    977a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    977e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
    9782:	3301      	adds	r3, #1
    9784:	e7f7      	b.n	9776 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x31e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9786:	a919      	add	r1, sp, #100	; 0x64
    9788:	e7f2      	b.n	9770 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x318>
  for (int i = 0; i < flat_size; i++) {
    978a:	f04f 0800 	mov.w	r8, #0
    978e:	45d0      	cmp	r8, sl
    9790:	da12      	bge.n	97b8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x360>
    const int32_t val = input_data[i];
    9792:	f934 0018 	ldrsh.w	r0, [r4, r8, lsl #1]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
    9796:	eba0 0009 	sub.w	r0, r0, r9
    979a:	f7f6 fe53 	bl	444 <__aeabi_i2d>
    979e:	4632      	mov	r2, r6
    97a0:	463b      	mov	r3, r7
    97a2:	f7f6 feb9 	bl	518 <__aeabi_dmul>
    97a6:	f7f7 f979 	bl	a9c <__aeabi_d2f>
    output_data[i] = result;
    97aa:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
  for (int i = 0; i < flat_size; i++) {
    97ae:	f108 0801 	add.w	r8, r8, #1
    97b2:	e7ec      	b.n	978e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x336>
    97b4:	00057334 	.word	0x00057334
    if (size_ > kMaxSmallSize) {
    97b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    97ba:	2b05      	cmp	r3, #5
    97bc:	dd03      	ble.n	97c6 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x36e>
      delete[] dims_pointer_;
    97be:	981f      	ldr	r0, [sp, #124]	; 0x7c
    97c0:	b108      	cbz	r0, 97c6 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    97c2:	f006 fc32 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    97c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    97c8:	2b05      	cmp	r3, #5
    97ca:	dd03      	ble.n	97d4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x37c>
      delete[] dims_pointer_;
    97cc:	9819      	ldr	r0, [sp, #100]	; 0x64
    97ce:	b108      	cbz	r0, 97d4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    97d0:	f006 fc2b 	bl	1002a <_ZdaPv>
  return kTfLiteOk;
    97d4:	2700      	movs	r7, #0
        break;
    97d6:	e00d      	b.n	97f4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x39c>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    97d8:	6967      	ldr	r7, [r4, #20]
    97da:	7a30      	ldrb	r0, [r6, #8]
    97dc:	f7ff f98e 	bl	8afc <TfLiteTypeGetName>
    97e0:	4606      	mov	r6, r0
    97e2:	7a28      	ldrb	r0, [r5, #8]
    97e4:	f7ff f98a 	bl	8afc <TfLiteTypeGetName>
    97e8:	4603      	mov	r3, r0
    97ea:	4632      	mov	r2, r6
    97ec:	4903      	ldr	r1, [pc, #12]	; (97fc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x3a4>)
    97ee:	4620      	mov	r0, r4
    97f0:	47b8      	blx	r7
    return kTfLiteError;
    97f2:	2701      	movs	r7, #1
}
    97f4:	4638      	mov	r0, r7
    97f6:	b024      	add	sp, #144	; 0x90
    97f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97fc:	00057334 	.word	0x00057334

00009800 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9804:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    9806:	690d      	ldr	r5, [r1, #16]
    9808:	b37d      	cbz	r5, 986a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    980a:	4607      	mov	r7, r0
    980c:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    980e:	694e      	ldr	r6, [r1, #20]
    9810:	b36e      	cbz	r6, 986e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    9812:	4b38      	ldr	r3, [pc, #224]	; (98f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    9814:	681a      	ldr	r2, [r3, #0]
    9816:	f006 f80d 	bl	f834 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    981a:	4681      	mov	r9, r0
    981c:	b348      	cbz	r0, 9872 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x72>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
    981e:	4b36      	ldr	r3, [pc, #216]	; (98f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    9820:	681a      	ldr	r2, [r3, #0]
    9822:	4621      	mov	r1, r4
    9824:	4638      	mov	r0, r7
    9826:	f006 f805 	bl	f834 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    982a:	4682      	mov	sl, r0
    982c:	b368      	cbz	r0, 988a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    982e:	4b33      	ldr	r3, [pc, #204]	; (98fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    9830:	681a      	ldr	r2, [r3, #0]
    9832:	4621      	mov	r1, r4
    9834:	4638      	mov	r0, r7
    9836:	f006 f83b 	bl	f8b0 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    983a:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    983c:	4b30      	ldr	r3, [pc, #192]	; (9900 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    983e:	681a      	ldr	r2, [r3, #0]
    9840:	4621      	mov	r1, r4
    9842:	4638      	mov	r0, r7
    9844:	f006 f815 	bl	f872 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    9848:	4604      	mov	r4, r0
    984a:	b340      	cbz	r0, 989e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    984c:	f899 0000 	ldrb.w	r0, [r9]
    9850:	7823      	ldrb	r3, [r4, #0]
    9852:	4298      	cmp	r0, r3
    9854:	d12d      	bne.n	98b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    9856:	f89a 3000 	ldrb.w	r3, [sl]
    985a:	4298      	cmp	r0, r3
    985c:	d03d      	beq.n	98da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    985e:	697b      	ldr	r3, [r7, #20]
    9860:	4928      	ldr	r1, [pc, #160]	; (9904 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    9862:	4638      	mov	r0, r7
    9864:	4798      	blx	r3
    9866:	2001      	movs	r0, #1
    9868:	e00c      	b.n	9884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TFLITE_DCHECK(node->user_data != nullptr);
    986a:	f006 fbf3 	bl	10054 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    986e:	f006 fbf1 	bl	10054 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    9872:	697c      	ldr	r4, [r7, #20]
    9874:	4b24      	ldr	r3, [pc, #144]	; (9908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    9876:	9300      	str	r3, [sp, #0]
    9878:	232f      	movs	r3, #47	; 0x2f
    987a:	4a24      	ldr	r2, [pc, #144]	; (990c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    987c:	4924      	ldr	r1, [pc, #144]	; (9910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    987e:	4638      	mov	r0, r7
    9880:	47a0      	blx	r4
    9882:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    9884:	b004      	add	sp, #16
    9886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, filter != nullptr);
    988a:	697c      	ldr	r4, [r7, #20]
    988c:	4b21      	ldr	r3, [pc, #132]	; (9914 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    988e:	9300      	str	r3, [sp, #0]
    9890:	2332      	movs	r3, #50	; 0x32
    9892:	4a1e      	ldr	r2, [pc, #120]	; (990c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    9894:	491e      	ldr	r1, [pc, #120]	; (9910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    9896:	4638      	mov	r0, r7
    9898:	47a0      	blx	r4
    989a:	2001      	movs	r0, #1
    989c:	e7f2      	b.n	9884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output != nullptr);
    989e:	697c      	ldr	r4, [r7, #20]
    98a0:	4b1d      	ldr	r3, [pc, #116]	; (9918 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    98a2:	9300      	str	r3, [sp, #0]
    98a4:	2336      	movs	r3, #54	; 0x36
    98a6:	4a19      	ldr	r2, [pc, #100]	; (990c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    98a8:	4919      	ldr	r1, [pc, #100]	; (9910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    98aa:	4638      	mov	r0, r7
    98ac:	47a0      	blx	r4
    98ae:	2001      	movs	r0, #1
    98b0:	e7e8      	b.n	9884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    98b2:	697e      	ldr	r6, [r7, #20]
    98b4:	f7ff f922 	bl	8afc <TfLiteTypeGetName>
    98b8:	4605      	mov	r5, r0
    98ba:	7820      	ldrb	r0, [r4, #0]
    98bc:	f7ff f91e 	bl	8afc <TfLiteTypeGetName>
    98c0:	9003      	str	r0, [sp, #12]
    98c2:	9502      	str	r5, [sp, #8]
    98c4:	4b15      	ldr	r3, [pc, #84]	; (991c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
    98c6:	9301      	str	r3, [sp, #4]
    98c8:	4b15      	ldr	r3, [pc, #84]	; (9920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    98ca:	9300      	str	r3, [sp, #0]
    98cc:	2338      	movs	r3, #56	; 0x38
    98ce:	4a0f      	ldr	r2, [pc, #60]	; (990c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    98d0:	4914      	ldr	r1, [pc, #80]	; (9924 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    98d2:	4638      	mov	r0, r7
    98d4:	47b0      	blx	r6
    98d6:	2001      	movs	r0, #1
    98d8:	e7d4      	b.n	9884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    98da:	7831      	ldrb	r1, [r6, #0]
    98dc:	9503      	str	r5, [sp, #12]
    98de:	9402      	str	r4, [sp, #8]
    98e0:	f8cd 8004 	str.w	r8, [sp, #4]
    98e4:	f8cd a000 	str.w	sl, [sp]
    98e8:	464b      	mov	r3, r9
    98ea:	4602      	mov	r2, r0
    98ec:	4638      	mov	r0, r7
    98ee:	f006 f8c9 	bl	fa84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    98f2:	e7c7      	b.n	9884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    98f4:	00057578 	.word	0x00057578
    98f8:	00057580 	.word	0x00057580
    98fc:	00057574 	.word	0x00057574
    9900:	0005757c 	.word	0x0005757c
    9904:	000573fc 	.word	0x000573fc
    9908:	00057290 	.word	0x00057290
    990c:	00057358 	.word	0x00057358
    9910:	00056d50 	.word	0x00056d50
    9914:	000573b0 	.word	0x000573b0
    9918:	000572a4 	.word	0x000572a4
    991c:	000573e0 	.word	0x000573e0
    9920:	000573f0 	.word	0x000573f0
    9924:	000573c4 	.word	0x000573c4

00009928 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    9928:	b470      	push	{r4, r5, r6}
    992a:	4606      	mov	r6, r0
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    992c:	4604      	mov	r4, r0
    992e:	4d05      	ldr	r5, [pc, #20]	; (9944 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
    9930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9934:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    993c:	4630      	mov	r0, r6
    993e:	bc70      	pop	{r4, r5, r6}
    9940:	4770      	bx	lr
    9942:	bf00      	nop
    9944:	00010f40 	.word	0x00010f40

00009948 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    9948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    994c:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    994e:	f8d1 a014 	ldr.w	sl, [r1, #20]
    9952:	f1ba 0f00 	cmp.w	sl, #0
    9956:	d04c      	beq.n	99f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    9958:	4604      	mov	r4, r0
    995a:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    995c:	4ba5      	ldr	r3, [pc, #660]	; (9bf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    995e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    9960:	2800      	cmp	r0, #0
    9962:	d048      	beq.n	99f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node != nullptr);
    9964:	2e00      	cmp	r6, #0
    9966:	d048      	beq.n	99fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    9968:	6d42      	ldr	r2, [r0, #84]	; 0x54
    996a:	6833      	ldr	r3, [r6, #0]
    996c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9970:	6859      	ldr	r1, [r3, #4]
    9972:	4790      	blx	r2
    9974:	4680      	mov	r8, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    9976:	4ba0      	ldr	r3, [pc, #640]	; (9bf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    9978:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    997a:	2c00      	cmp	r4, #0
    997c:	d03f      	beq.n	99fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  TFLITE_DCHECK(node != nullptr);
    997e:	2e00      	cmp	r6, #0
    9980:	d03f      	beq.n	9a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    9982:	6d62      	ldr	r2, [r4, #84]	; 0x54
    9984:	6833      	ldr	r3, [r6, #0]
    9986:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    998a:	6859      	ldr	r1, [r3, #4]
    998c:	4620      	mov	r0, r4
    998e:	4790      	blx	r2
    9990:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    9992:	4b9a      	ldr	r3, [pc, #616]	; (9bfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    9994:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    9996:	2c00      	cmp	r4, #0
    9998:	d035      	beq.n	9a06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node != nullptr);
    999a:	2e00      	cmp	r6, #0
    999c:	d035      	beq.n	9a0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    999e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    99a0:	6833      	ldr	r3, [r6, #0]
    99a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    99a6:	6859      	ldr	r1, [r3, #4]
    99a8:	4620      	mov	r0, r4
    99aa:	4790      	blx	r2
    99ac:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    99ae:	4b94      	ldr	r3, [pc, #592]	; (9c00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    99b0:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    99b2:	b364      	cbz	r4, 9a0e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node != nullptr);
    99b4:	b36e      	cbz	r6, 9a12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    99b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    99b8:	6873      	ldr	r3, [r6, #4]
    99ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    99be:	6859      	ldr	r1, [r3, #4]
    99c0:	4620      	mov	r0, r4
    99c2:	4790      	blx	r2
    99c4:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    99c6:	6931      	ldr	r1, [r6, #16]
    99c8:	b329      	cbz	r1, 9a16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  switch (input->type) {
    99ca:	f898 0008 	ldrb.w	r0, [r8, #8]
    99ce:	2801      	cmp	r0, #1
    99d0:	d023      	beq.n	9a1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    99d2:	2809      	cmp	r0, #9
    99d4:	f000 8136 	beq.w	9c44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    99d8:	6965      	ldr	r5, [r4, #20]
    99da:	f7ff f88f 	bl	8afc <TfLiteTypeGetName>
    99de:	4602      	mov	r2, r0
    99e0:	f898 3008 	ldrb.w	r3, [r8, #8]
    99e4:	4987      	ldr	r1, [pc, #540]	; (9c04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    99e6:	4620      	mov	r0, r4
    99e8:	47a8      	blx	r5
      return kTfLiteError;
    99ea:	2001      	movs	r0, #1
}
    99ec:	b04f      	add	sp, #316	; 0x13c
    99ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    99f2:	f006 fb2f 	bl	10054 <abort>
  TFLITE_DCHECK(context != nullptr);
    99f6:	f006 fb2d 	bl	10054 <abort>
  TFLITE_DCHECK(node != nullptr);
    99fa:	f006 fb2b 	bl	10054 <abort>
  TFLITE_DCHECK(context != nullptr);
    99fe:	f006 fb29 	bl	10054 <abort>
  TFLITE_DCHECK(node != nullptr);
    9a02:	f006 fb27 	bl	10054 <abort>
  TFLITE_DCHECK(context != nullptr);
    9a06:	f006 fb25 	bl	10054 <abort>
  TFLITE_DCHECK(node != nullptr);
    9a0a:	f006 fb23 	bl	10054 <abort>
  TFLITE_DCHECK(context != nullptr);
    9a0e:	f006 fb21 	bl	10054 <abort>
  TFLITE_DCHECK(node != nullptr);
    9a12:	f006 fb1f 	bl	10054 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    9a16:	f006 fb1d 	bl	10054 <abort>
          FullyConnectedParamsFloat(params->activation),
    9a1a:	f89a 1000 	ldrb.w	r1, [sl]
    9a1e:	a812      	add	r0, sp, #72	; 0x48
    9a20:	f006 f867 	bl	faf2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    9a24:	4641      	mov	r1, r8
    9a26:	a81c      	add	r0, sp, #112	; 0x70
    9a28:	f006 f86e 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    9a2c:	4640      	mov	r0, r8
    9a2e:	f005 ffbb 	bl	f9a8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    9a32:	9001      	str	r0, [sp, #4]
          tflite::micro::GetTensorShape(filter),
    9a34:	4649      	mov	r1, r9
    9a36:	a822      	add	r0, sp, #136	; 0x88
    9a38:	f006 f866 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    9a3c:	4648      	mov	r0, r9
    9a3e:	f005 ffb3 	bl	f9a8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    9a42:	9002      	str	r0, [sp, #8]
          tflite::micro::GetTensorShape(bias),
    9a44:	4639      	mov	r1, r7
    9a46:	a828      	add	r0, sp, #160	; 0xa0
    9a48:	f006 f85e 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    9a4c:	4638      	mov	r0, r7
    9a4e:	f005 ffab 	bl	f9a8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    9a52:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    9a54:	4629      	mov	r1, r5
    9a56:	a82e      	add	r0, sp, #184	; 0xb8
    9a58:	f006 f856 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    9a5c:	4628      	mov	r0, r5
    9a5e:	f005 ffa9 	bl	f9b4 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    9a62:	9003      	str	r0, [sp, #12]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  const float output_activation_min = params.float_activation_min;
    9a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9a66:	9304      	str	r3, [sp, #16]
  const float output_activation_max = params.float_activation_max;
    9a68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  inline int32_t DimensionsCount() const { return size_; }
    9a6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    9a6e:	9922      	ldr	r1, [sp, #136]	; 0x88
    9a70:	461c      	mov	r4, r3
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    9a72:	1e5a      	subs	r2, r3, #1
    9a74:	d405      	bmi.n	9a82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    9a76:	429a      	cmp	r2, r3
    9a78:	da03      	bge.n	9a82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9a7a:	2b05      	cmp	r3, #5
    9a7c:	dd03      	ble.n	9a86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
    9a7e:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    9a80:	e002      	b.n	9a88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    9a82:	f006 fae7 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    9a86:	ad2f      	add	r5, sp, #188	; 0xbc
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
    9a88:	2300      	movs	r3, #0
  int flat_size = 1;
    9a8a:	f04f 0801 	mov.w	r8, #1
    9a8e:	e004      	b.n	9a9a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    9a90:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    9a94:	fb00 f808 	mul.w	r8, r0, r8
  for (int i = 0; i < dims_count; ++i) {
    9a98:	3301      	adds	r3, #1
    9a9a:	429c      	cmp	r4, r3
    9a9c:	dd03      	ble.n	9aa6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    9a9e:	429a      	cmp	r2, r3
    9aa0:	d1f6      	bne.n	9a90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
    9aa2:	2001      	movs	r0, #1
    9aa4:	e7f6      	b.n	9a94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TFLITE_DCHECK_GE(i, 0);
    9aa6:	1e8b      	subs	r3, r1, #2
    9aa8:	d433      	bmi.n	9b12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TFLITE_DCHECK_LT(i, size_);
    9aaa:	9822      	ldr	r0, [sp, #136]	; 0x88
    9aac:	4283      	cmp	r3, r0
    9aae:	da32      	bge.n	9b16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9ab0:	2805      	cmp	r0, #5
    9ab2:	dd32      	ble.n	9b1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    9ab4:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9ab6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    9aba:	2a00      	cmp	r2, #0
    9abc:	db33      	blt.n	9b26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    9abe:	982e      	ldr	r0, [sp, #184]	; 0xb8
    9ac0:	4282      	cmp	r2, r0
    9ac2:	da32      	bge.n	9b2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9ac4:	2805      	cmp	r0, #5
    9ac6:	dd32      	ble.n	9b2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    9ac8:	982f      	ldr	r0, [sp, #188]	; 0xbc
    9aca:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    9ace:	4298      	cmp	r0, r3
    9ad0:	d133      	bne.n	9b3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    9ad2:	934d      	str	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_GE(i, 0);
    9ad4:	2a00      	cmp	r2, #0
    9ad6:	db32      	blt.n	9b3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
    9ad8:	982e      	ldr	r0, [sp, #184]	; 0xb8
    9ada:	4282      	cmp	r2, r0
    9adc:	da31      	bge.n	9b42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9ade:	2805      	cmp	r0, #5
    9ae0:	dd31      	ble.n	9b46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    9ae2:	982f      	ldr	r0, [sp, #188]	; 0xbc
    9ae4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    9ae8:	924c      	str	r2, [sp, #304]	; 0x130
      if (__b < __a)
    9aea:	4293      	cmp	r3, r2
    9aec:	dc31      	bgt.n	9b52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
      return __a;
    9aee:	ab4d      	add	r3, sp, #308	; 0x134
    9af0:	f8d3 b000 	ldr.w	fp, [r3]
    TFLITE_DCHECK_GE(i, 0);
    9af4:	3901      	subs	r1, #1
    9af6:	d42e      	bmi.n	9b56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    TFLITE_DCHECK_LT(i, size_);
    9af8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9afa:	4299      	cmp	r1, r3
    9afc:	da2d      	bge.n	9b5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9afe:	2b05      	cmp	r3, #5
    9b00:	dd2d      	ble.n	9b5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    9b02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9b04:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    9b08:	2700      	movs	r7, #0
    9b0a:	f8cd 8014 	str.w	r8, [sp, #20]
    9b0e:	46b0      	mov	r8, r6
    9b10:	e06a      	b.n	9be8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    TFLITE_DCHECK_GE(i, 0);
    9b12:	f006 fa9f 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9b16:	f006 fa9d 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9b1a:	a84e      	add	r0, sp, #312	; 0x138
    9b1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    9b20:	f853 3cac 	ldr.w	r3, [r3, #-172]
    9b24:	e7c9      	b.n	9aba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_GE(i, 0);
    9b26:	f006 fa95 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9b2a:	f006 fa93 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9b2e:	a84e      	add	r0, sp, #312	; 0x138
    9b30:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    9b34:	f850 0c7c 	ldr.w	r0, [r0, #-124]
    9b38:	e7c9      	b.n	9ace <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x186>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    9b3a:	f006 fa8b 	bl	10054 <abort>
    TFLITE_DCHECK_GE(i, 0);
    9b3e:	f006 fa89 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9b42:	f006 fa87 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9b46:	a84e      	add	r0, sp, #312	; 0x138
    9b48:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    9b4c:	f852 2c7c 	ldr.w	r2, [r2, #-124]
    9b50:	e7ca      	b.n	9ae8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
	return __b;
    9b52:	ab4c      	add	r3, sp, #304	; 0x130
    9b54:	e7cc      	b.n	9af0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    TFLITE_DCHECK_GE(i, 0);
    9b56:	f006 fa7d 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9b5a:	f006 fa7b 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9b5e:	ab4e      	add	r3, sp, #312	; 0x138
    9b60:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9b64:	f851 9cac 	ldr.w	r9, [r1, #-172]
    9b68:	e7ce      	b.n	9b08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    9b6a:	fb09 6307 	mla	r3, r9, r7, r6
                 weights_data[out_c * accum_depth + d];
    9b6e:	fb09 6204 	mla	r2, r9, r4, r6
        total += input_data[b * accum_depth + d] *
    9b72:	9902      	ldr	r1, [sp, #8]
    9b74:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    9b78:	9a01      	ldr	r2, [sp, #4]
    9b7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    9b7e:	f7f7 f8eb 	bl	d58 <__aeabi_fmul>
    9b82:	4601      	mov	r1, r0
    9b84:	4628      	mov	r0, r5
    9b86:	f7f6 ffdf 	bl	b48 <__addsf3>
    9b8a:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    9b8c:	3601      	adds	r6, #1
    9b8e:	454e      	cmp	r6, r9
    9b90:	dbeb      	blt.n	9b6a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
      }
      float bias_value = 0.0f;
      if (bias_data) {
    9b92:	f1b8 0f00 	cmp.w	r8, #0
    9b96:	d020      	beq.n	9bda <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
        bias_value = bias_data[out_c];
    9b98:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    9b9c:	4628      	mov	r0, r5
    9b9e:	f7f6 ffd3 	bl	b48 <__addsf3>
    9ba2:	4601      	mov	r1, r0
    9ba4:	fb0b 4607 	mla	r6, fp, r7, r4
    9ba8:	9011      	str	r0, [sp, #68]	; 0x44
    9baa:	9b04      	ldr	r3, [sp, #16]
    9bac:	9310      	str	r3, [sp, #64]	; 0x40
    9bae:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      if (__a < __b)
    9bb2:	4618      	mov	r0, r3
    9bb4:	f7f7 fa8c 	bl	10d0 <__aeabi_fcmpgt>
    9bb8:	b988      	cbnz	r0, 9bde <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
      return __a;
    9bba:	ad11      	add	r5, sp, #68	; 0x44
      if (__b < __a)
    9bbc:	6829      	ldr	r1, [r5, #0]
    9bbe:	4650      	mov	r0, sl
    9bc0:	f7f7 fa68 	bl	1094 <__aeabi_fcmplt>
    9bc4:	b968      	cbnz	r0, 9be2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29a>
template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
    9bc6:	682b      	ldr	r3, [r5, #0]
    9bc8:	9a03      	ldr	r2, [sp, #12]
    9bca:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    9bce:	3401      	adds	r4, #1
    9bd0:	455c      	cmp	r4, fp
    9bd2:	da08      	bge.n	9be6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      for (int d = 0; d < accum_depth; ++d) {
    9bd4:	2600      	movs	r6, #0
      float total = 0.f;
    9bd6:	2500      	movs	r5, #0
    9bd8:	e7d9      	b.n	9b8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
      float bias_value = 0.0f;
    9bda:	2100      	movs	r1, #0
    9bdc:	e7de      	b.n	9b9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
	return __b;
    9bde:	ad10      	add	r5, sp, #64	; 0x40
    9be0:	e7ec      	b.n	9bbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
	return __b;
    9be2:	ad0f      	add	r5, sp, #60	; 0x3c
    9be4:	e7ef      	b.n	9bc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    9be6:	3701      	adds	r7, #1
    9be8:	9b05      	ldr	r3, [sp, #20]
    9bea:	429f      	cmp	r7, r3
    9bec:	da0c      	bge.n	9c08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    9bee:	2400      	movs	r4, #0
    9bf0:	e7ee      	b.n	9bd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>
    9bf2:	bf00      	nop
    9bf4:	00057578 	.word	0x00057578
    9bf8:	00057580 	.word	0x00057580
    9bfc:	00057574 	.word	0x00057574
    9c00:	0005757c 	.word	0x0005757c
    9c04:	00057558 	.word	0x00057558
    if (size_ > kMaxSmallSize) {
    9c08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    9c0a:	2b05      	cmp	r3, #5
    9c0c:	dd03      	ble.n	9c16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      delete[] dims_pointer_;
    9c0e:	982f      	ldr	r0, [sp, #188]	; 0xbc
    9c10:	b108      	cbz	r0, 9c16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    9c12:	f006 fa0a 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9c16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    9c18:	2b05      	cmp	r3, #5
    9c1a:	dd03      	ble.n	9c24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
      delete[] dims_pointer_;
    9c1c:	9829      	ldr	r0, [sp, #164]	; 0xa4
    9c1e:	b108      	cbz	r0, 9c24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    9c20:	f006 fa03 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9c26:	2b05      	cmp	r3, #5
    9c28:	dd03      	ble.n	9c32 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
      delete[] dims_pointer_;
    9c2a:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9c2c:	b108      	cbz	r0, 9c32 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    9c2e:	f006 f9fc 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9c32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9c34:	2b05      	cmp	r3, #5
    9c36:	dd03      	ble.n	9c40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
      delete[] dims_pointer_;
    9c38:	981d      	ldr	r0, [sp, #116]	; 0x74
    9c3a:	b108      	cbz	r0, 9c40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    9c3c:	f006 f9f5 	bl	1002a <_ZdaPv>
  return kTfLiteOk;
    9c40:	2000      	movs	r0, #0
      break;
    9c42:	e6d3      	b.n	99ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
          FullyConnectedParamsQuantized(data),
    9c44:	a812      	add	r0, sp, #72	; 0x48
    9c46:	f005 ff0c 	bl	fa62 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    9c4a:	4641      	mov	r1, r8
    9c4c:	a834      	add	r0, sp, #208	; 0xd0
    9c4e:	f005 ff5b 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    9c52:	4640      	mov	r0, r8
    9c54:	f005 feb2 	bl	f9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    9c58:	9005      	str	r0, [sp, #20]
          tflite::micro::GetTensorShape(filter),
    9c5a:	4649      	mov	r1, r9
    9c5c:	a83a      	add	r0, sp, #232	; 0xe8
    9c5e:	f005 ff53 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    9c62:	4648      	mov	r0, r9
    9c64:	f005 feaa 	bl	f9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    9c68:	9006      	str	r0, [sp, #24]
          tflite::micro::GetTensorShape(bias),
    9c6a:	4639      	mov	r1, r7
    9c6c:	a840      	add	r0, sp, #256	; 0x100
    9c6e:	f005 ff4b 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    9c72:	4638      	mov	r0, r7
    9c74:	f005 fed5 	bl	fa22 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    9c78:	9007      	str	r0, [sp, #28]
          tflite::micro::GetTensorShape(output),
    9c7a:	4629      	mov	r1, r5
    9c7c:	a846      	add	r0, sp, #280	; 0x118
    9c7e:	f005 ff43 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    9c82:	4628      	mov	r0, r5
    9c84:	f005 fea0 	bl	f9c8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    9c88:	9008      	str	r0, [sp, #32]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    9c8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9c8c:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t filter_offset = params.weights_offset;
    9c8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9c90:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_offset = params.output_offset;
    9c92:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9c94:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32_t output_multiplier = params.output_multiplier;
    9c96:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
  const int output_shift = params.output_shift;
    9c9a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    9c9e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9ca0:	910f      	str	r1, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
    9ca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9ca4:	9210      	str	r2, [sp, #64]	; 0x40
  inline int32_t DimensionsCount() const { return size_; }
    9ca6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    9ca8:	2b01      	cmp	r3, #1
    9caa:	dd33      	ble.n	9d14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    9cac:	9846      	ldr	r0, [sp, #280]	; 0x118
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    9cae:	2802      	cmp	r0, #2
    9cb0:	d132      	bne.n	9d18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    9cb2:	4291      	cmp	r1, r2
    9cb4:	dc32      	bgt.n	9d1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    TFLITE_DCHECK_LT(i, size_);
    9cb6:	9a46      	ldr	r2, [sp, #280]	; 0x118
    9cb8:	2a00      	cmp	r2, #0
    9cba:	dd31      	ble.n	9d20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9cbc:	2a05      	cmp	r2, #5
    9cbe:	dd31      	ble.n	9d24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    9cc0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    9cc2:	6812      	ldr	r2, [r2, #0]
    9cc4:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    9cc6:	9a46      	ldr	r2, [sp, #280]	; 0x118
    9cc8:	2a01      	cmp	r2, #1
    9cca:	dd2e      	ble.n	9d2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9ccc:	2a05      	cmp	r2, #5
    9cce:	dd2e      	ble.n	9d2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    9cd0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    9cd2:	6852      	ldr	r2, [r2, #4]
    9cd4:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_GE(i, 0);
    9cd6:	1e9a      	subs	r2, r3, #2
    9cd8:	d42c      	bmi.n	9d34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    TFLITE_DCHECK_LT(i, size_);
    9cda:	993a      	ldr	r1, [sp, #232]	; 0xe8
    9cdc:	428a      	cmp	r2, r1
    9cde:	da2b      	bge.n	9d38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9ce0:	2905      	cmp	r1, #5
    9ce2:	dd2b      	ble.n	9d3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    9ce4:	993b      	ldr	r1, [sp, #236]	; 0xec
    9ce6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    9cea:	9901      	ldr	r1, [sp, #4]
    9cec:	428a      	cmp	r2, r1
    9cee:	db2b      	blt.n	9d48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x400>
    TFLITE_DCHECK_GE(i, 0);
    9cf0:	3b01      	subs	r3, #1
    9cf2:	d42b      	bmi.n	9d4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
    TFLITE_DCHECK_LT(i, size_);
    9cf4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    9cf6:	4293      	cmp	r3, r2
    9cf8:	da2a      	bge.n	9d50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x408>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9cfa:	2a05      	cmp	r2, #5
    9cfc:	dd2a      	ble.n	9d54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
    9cfe:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    9d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d04:	930d      	str	r3, [sp, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    9d06:	f04f 0a00 	mov.w	sl, #0
    9d0a:	4653      	mov	r3, sl
    9d0c:	46ca      	mov	sl, r9
    9d0e:	46d9      	mov	r9, fp
    9d10:	469b      	mov	fp, r3
    9d12:	e0ee      	b.n	9ef2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    9d14:	f006 f99e 	bl	10054 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    9d18:	f006 f99c 	bl	10054 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    9d1c:	f006 f99a 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9d20:	f006 f998 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9d24:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    9d26:	920c      	str	r2, [sp, #48]	; 0x30
    9d28:	e7cd      	b.n	9cc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    9d2a:	f006 f993 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9d2e:	9a48      	ldr	r2, [sp, #288]	; 0x120
    9d30:	9201      	str	r2, [sp, #4]
    9d32:	e7d0      	b.n	9cd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
    TFLITE_DCHECK_GE(i, 0);
    9d34:	f006 f98e 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9d38:	f006 f98c 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9d3c:	a94e      	add	r1, sp, #312	; 0x138
    9d3e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9d42:	f852 2c4c 	ldr.w	r2, [r2, #-76]
    9d46:	e7d0      	b.n	9cea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    9d48:	f006 f984 	bl	10054 <abort>
    TFLITE_DCHECK_GE(i, 0);
    9d4c:	f006 f982 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    9d50:	f006 f980 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    9d54:	aa4e      	add	r2, sp, #312	; 0x138
    9d56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9d5a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    9d5e:	930d      	str	r3, [sp, #52]	; 0x34
    9d60:	e7d1      	b.n	9d06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
      }
      if (bias_data) {
    9d62:	9b07      	ldr	r3, [sp, #28]
    9d64:	b123      	cbz	r3, 9d70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x428>
        acc += bias_data[out_c];
    9d66:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    9d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9d6c:	4413      	add	r3, r2
    9d6e:	9311      	str	r3, [sp, #68]	; 0x44
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
    9d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    9d72:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    9d76:	f1b9 0f00 	cmp.w	r9, #0
    9d7a:	f340 808f 	ble.w	9e9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x554>
    9d7e:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    9d80:	409a      	lsls	r2, r3
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    9d82:	4592      	cmp	sl, r2
    9d84:	f000 808d 	beq.w	9ea2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55a>
    9d88:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    9d8a:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    9d8c:	4653      	mov	r3, sl
    9d8e:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    9d90:	fb02 f304 	mul.w	r3, r2, r4
    9d94:	fb0a 3101 	mla	r1, sl, r1, r3
    9d98:	fba2 230a 	umull	r2, r3, r2, sl
    9d9c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    9d9e:	2a00      	cmp	r2, #0
    9da0:	f173 0100 	sbcs.w	r1, r3, #0
    9da4:	f2c0 8084 	blt.w	9eb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
    9da8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    9dac:	1852      	adds	r2, r2, r1
    9dae:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    9db2:	4611      	mov	r1, r2
    9db4:	461c      	mov	r4, r3
    9db6:	2a00      	cmp	r2, #0
    9db8:	f173 0000 	sbcs.w	r0, r3, #0
    9dbc:	db7a      	blt.n	9eb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56c>
    9dbe:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    9dc0:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    9dc4:	2f00      	cmp	r7, #0
    9dc6:	d17d      	bne.n	9ec4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57c>

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    9dc8:	2e00      	cmp	r6, #0
    9dca:	db7e      	blt.n	9eca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x582>
  assert(exponent <= 31);
    9dcc:	2e1f      	cmp	r6, #31
    9dce:	f300 8083 	bgt.w	9ed8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x590>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    9dd2:	2701      	movs	r7, #1
    9dd4:	fa07 f006 	lsl.w	r0, r7, r6
    9dd8:	3801      	subs	r0, #1
    9dda:	f005 fdf9 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    9dde:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    9de0:	2000      	movs	r0, #0
    9de2:	f005 fdf5 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    9de6:	9002      	str	r0, [sp, #8]
  const IntegerType one = Dup<IntegerType>(1);
    9de8:	4638      	mov	r0, r7
    9dea:	f005 fdf1 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    9dee:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    9df0:	4641      	mov	r1, r8
    9df2:	4620      	mov	r0, r4
    9df4:	f005 fded 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    9df8:	9004      	str	r0, [sp, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    9dfa:	4639      	mov	r1, r7
    9dfc:	4640      	mov	r0, r8
    9dfe:	f005 fdea 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    9e02:	4680      	mov	r8, r0
    9e04:	9902      	ldr	r1, [sp, #8]
    9e06:	4620      	mov	r0, r4
    9e08:	f005 fdf1 	bl	f9ee <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    9e0c:	9f03      	ldr	r7, [sp, #12]
    9e0e:	4639      	mov	r1, r7
    9e10:	f005 fddf 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    9e14:	4601      	mov	r1, r0
    9e16:	4640      	mov	r0, r8
    9e18:	f005 fddf 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
    9e1c:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    9e1e:	4631      	mov	r1, r6
    9e20:	4620      	mov	r0, r4
    9e22:	f005 fdd8 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    9e26:	4604      	mov	r4, r0
    9e28:	4641      	mov	r1, r8
    9e2a:	9804      	ldr	r0, [sp, #16]
    9e2c:	f005 fde7 	bl	f9fe <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    9e30:	4639      	mov	r1, r7
    9e32:	f005 fdce 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    9e36:	4601      	mov	r1, r0
    9e38:	4620      	mov	r0, r4
    9e3a:	f005 fdce 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
      acc += output_offset;
    9e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e40:	4418      	add	r0, r3
    9e42:	9011      	str	r0, [sp, #68]	; 0x44
      if (__a < __b)
    9e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9e46:	4298      	cmp	r0, r3
    9e48:	db4d      	blt.n	9ee6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59e>
      return __a;
    9e4a:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::max(acc, output_activation_min);
    9e4c:	681b      	ldr	r3, [r3, #0]
    9e4e:	9311      	str	r3, [sp, #68]	; 0x44
      if (__b < __a)
    9e50:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9e52:	4293      	cmp	r3, r2
    9e54:	dc49      	bgt.n	9eea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
      return __a;
    9e56:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::min(acc, output_activation_max);
    9e58:	681a      	ldr	r2, [r3, #0]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    9e5a:	9b01      	ldr	r3, [sp, #4]
    9e5c:	fb03 530b 	mla	r3, r3, fp, r5
    9e60:	9908      	ldr	r1, [sp, #32]
    9e62:	54ca      	strb	r2, [r1, r3]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    9e64:	3501      	adds	r5, #1
    9e66:	9b01      	ldr	r3, [sp, #4]
    9e68:	429d      	cmp	r5, r3
    9e6a:	da40      	bge.n	9eee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
      int32_t acc = 0;
    9e6c:	2300      	movs	r3, #0
    9e6e:	9311      	str	r3, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    9e70:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e72:	4283      	cmp	r3, r0
    9e74:	f6bf af75 	bge.w	9d62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41a>
        int32_t input_val = input_data[b * accum_depth + d];
    9e78:	fb00 320b 	mla	r2, r0, fp, r3
    9e7c:	9905      	ldr	r1, [sp, #20]
    9e7e:	5689      	ldrsb	r1, [r1, r2]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    9e80:	fb00 3205 	mla	r2, r0, r5, r3
    9e84:	9c06      	ldr	r4, [sp, #24]
    9e86:	56a2      	ldrsb	r2, [r4, r2]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    9e88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9e8a:	4422      	add	r2, r4
    9e8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9e8e:	4421      	add	r1, r4
    9e90:	9c11      	ldr	r4, [sp, #68]	; 0x44
    9e92:	fb01 4202 	mla	r2, r1, r2, r4
    9e96:	9211      	str	r2, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    9e98:	3301      	adds	r3, #1
    9e9a:	e7ea      	b.n	9e72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
  int right_shift = shift > 0 ? 0 : -shift;
    9e9c:	f1c9 0600 	rsb	r6, r9, #0
    9ea0:	e76e      	b.n	9d80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    9ea2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    9ea6:	d001      	beq.n	9eac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x564>
    9ea8:	2700      	movs	r7, #0
    9eaa:	e76e      	b.n	9d8a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
    9eac:	2701      	movs	r7, #1
    9eae:	e76c      	b.n	9d8a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    9eb0:	4921      	ldr	r1, [pc, #132]	; (9f38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>)
    9eb2:	e77b      	b.n	9dac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x464>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    9eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9eb8:	1851      	adds	r1, r2, r1
    9eba:	f04f 0400 	mov.w	r4, #0
    9ebe:	eb43 0404 	adc.w	r4, r3, r4
    9ec2:	e77c      	b.n	9dbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    9ec4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    9ec8:	e77e      	b.n	9dc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
  assert(exponent >= 0);
    9eca:	4b1c      	ldr	r3, [pc, #112]	; (9f3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f4>)
    9ecc:	4a1c      	ldr	r2, [pc, #112]	; (9f40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    9ece:	f44f 71b3 	mov.w	r1, #358	; 0x166
    9ed2:	481c      	ldr	r0, [pc, #112]	; (9f44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    9ed4:	f002 fb50 	bl	c578 <__assert_func>
  assert(exponent <= 31);
    9ed8:	4b1b      	ldr	r3, [pc, #108]	; (9f48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    9eda:	4a19      	ldr	r2, [pc, #100]	; (9f40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    9edc:	f240 1167 	movw	r1, #359	; 0x167
    9ee0:	4818      	ldr	r0, [pc, #96]	; (9f44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    9ee2:	f002 fb49 	bl	c578 <__assert_func>
	return __b;
    9ee6:	ab0f      	add	r3, sp, #60	; 0x3c
    9ee8:	e7b0      	b.n	9e4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x504>
	return __b;
    9eea:	ab10      	add	r3, sp, #64	; 0x40
    9eec:	e7b4      	b.n	9e58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x510>
  for (int b = 0; b < batches; ++b) {
    9eee:	f10b 0b01 	add.w	fp, fp, #1
    9ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ef4:	459b      	cmp	fp, r3
    9ef6:	da01      	bge.n	9efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    9ef8:	2500      	movs	r5, #0
    9efa:	e7b4      	b.n	9e66 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (size_ > kMaxSmallSize) {
    9efc:	9b46      	ldr	r3, [sp, #280]	; 0x118
    9efe:	2b05      	cmp	r3, #5
    9f00:	dd03      	ble.n	9f0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
      delete[] dims_pointer_;
    9f02:	9847      	ldr	r0, [sp, #284]	; 0x11c
    9f04:	b108      	cbz	r0, 9f0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    9f06:	f006 f890 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9f0a:	9b40      	ldr	r3, [sp, #256]	; 0x100
    9f0c:	2b05      	cmp	r3, #5
    9f0e:	dd03      	ble.n	9f18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
      delete[] dims_pointer_;
    9f10:	9841      	ldr	r0, [sp, #260]	; 0x104
    9f12:	b108      	cbz	r0, 9f18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    9f14:	f006 f889 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9f18:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    9f1a:	2b05      	cmp	r3, #5
    9f1c:	dd03      	ble.n	9f26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      delete[] dims_pointer_;
    9f1e:	983b      	ldr	r0, [sp, #236]	; 0xec
    9f20:	b108      	cbz	r0, 9f26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
    9f22:	f006 f882 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    9f26:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    9f28:	2b05      	cmp	r3, #5
    9f2a:	dd03      	ble.n	9f34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
      delete[] dims_pointer_;
    9f2c:	9835      	ldr	r0, [sp, #212]	; 0xd4
    9f2e:	b108      	cbz	r0, 9f34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    9f30:	f006 f87b 	bl	1002a <_ZdaPv>
  return kTfLiteOk;
    9f34:	2000      	movs	r0, #0
      break;
    9f36:	e559      	b.n	99ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    9f38:	c0000001 	.word	0xc0000001
    9f3c:	00057484 	.word	0x00057484
    9f40:	00057494 	.word	0x00057494
    9f44:	000574ec 	.word	0x000574ec
    9f48:	00057548 	.word	0x00057548

00009f4c <_ZN6tflite17Register_QUANTIZEEv>:
                                           sizeof(OpDataQuantizeReference));
}

}  // namespace

TfLiteRegistration Register_QUANTIZE() {
    9f4c:	b470      	push	{r4, r5, r6}
    9f4e:	4606      	mov	r6, r0
          /*prepare=*/PrepareQuantizeReference,
          /*invoke=*/EvalQuantizeReference,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    9f50:	4604      	mov	r4, r0
    9f52:	4d05      	ldr	r5, [pc, #20]	; (9f68 <_ZN6tflite17Register_QUANTIZEEv+0x1c>)
    9f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9f58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    9f60:	4630      	mov	r0, r6
    9f62:	bc70      	pop	{r4, r5, r6}
    9f64:	4770      	bx	lr
    9f66:	bf00      	nop
    9f68:	00010f60 	.word	0x00010f60

00009f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {

TfLiteStatus PrepareQuantizeReference(TfLiteContext* context,
                                      TfLiteNode* node) {
    9f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f70:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    9f72:	690e      	ldr	r6, [r1, #16]
    9f74:	b1ae      	cbz	r6, 9fa2 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
    9f76:	4605      	mov	r5, r0
    9f78:	460c      	mov	r4, r1
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    9f7a:	680b      	ldr	r3, [r1, #0]
    9f7c:	681b      	ldr	r3, [r3, #0]
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    9f7e:	2b01      	cmp	r3, #1
    9f80:	d011      	beq.n	9fa6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3a>
    9f82:	6946      	ldr	r6, [r0, #20]
    9f84:	2401      	movs	r4, #1
    9f86:	9403      	str	r4, [sp, #12]
    9f88:	9302      	str	r3, [sp, #8]
    9f8a:	4b68      	ldr	r3, [pc, #416]	; (a12c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>)
    9f8c:	9301      	str	r3, [sp, #4]
    9f8e:	4b68      	ldr	r3, [pc, #416]	; (a130 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c4>)
    9f90:	9300      	str	r3, [sp, #0]
    9f92:	2321      	movs	r3, #33	; 0x21
    9f94:	4a67      	ldr	r2, [pc, #412]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    9f96:	4968      	ldr	r1, [pc, #416]	; (a138 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1cc>)
    9f98:	47b0      	blx	r6
  data->quantization_params.zero_point = output->params.zero_point;
  data->quantization_params.scale = static_cast<double>(output->params.scale);

  data->input_zero_point = input->params.zero_point;
  return kTfLiteOk;
}
    9f9a:	4620      	mov	r0, r4
    9f9c:	b004      	add	sp, #16
    9f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    9fa2:	f006 f857 	bl	10054 <abort>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    9fa6:	684b      	ldr	r3, [r1, #4]
    9fa8:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    9faa:	2b01      	cmp	r3, #1
    9fac:	d00c      	beq.n	9fc8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5c>
    9fae:	6946      	ldr	r6, [r0, #20]
    9fb0:	2401      	movs	r4, #1
    9fb2:	9403      	str	r4, [sp, #12]
    9fb4:	9302      	str	r3, [sp, #8]
    9fb6:	4b5d      	ldr	r3, [pc, #372]	; (a12c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>)
    9fb8:	9301      	str	r3, [sp, #4]
    9fba:	4b60      	ldr	r3, [pc, #384]	; (a13c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d0>)
    9fbc:	9300      	str	r3, [sp, #0]
    9fbe:	2322      	movs	r3, #34	; 0x22
    9fc0:	4a5c      	ldr	r2, [pc, #368]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    9fc2:	495d      	ldr	r1, [pc, #372]	; (a138 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1cc>)
    9fc4:	47b0      	blx	r6
    9fc6:	e7e8      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
    9fc8:	2200      	movs	r2, #0
    9fca:	f005 fc33 	bl	f834 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    9fce:	4680      	mov	r8, r0
    9fd0:	b1c8      	cbz	r0, a006 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9a>
  TfLiteTensor* output = GetOutput(context, node, 0);
    9fd2:	2200      	movs	r2, #0
    9fd4:	4621      	mov	r1, r4
    9fd6:	4628      	mov	r0, r5
    9fd8:	f005 fc4b 	bl	f872 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    9fdc:	4607      	mov	r7, r0
    9fde:	b1e0      	cbz	r0, a01a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae>
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
    9fe0:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
    9fe4:	2c01      	cmp	r4, #1
    9fe6:	d022      	beq.n	a02e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc2>
    9fe8:	696f      	ldr	r7, [r5, #20]
    9fea:	2601      	movs	r6, #1
    9fec:	9603      	str	r6, [sp, #12]
    9fee:	9402      	str	r4, [sp, #8]
    9ff0:	4b53      	ldr	r3, [pc, #332]	; (a140 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d4>)
    9ff2:	9301      	str	r3, [sp, #4]
    9ff4:	4b53      	ldr	r3, [pc, #332]	; (a144 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d8>)
    9ff6:	9300      	str	r3, [sp, #0]
    9ff8:	232b      	movs	r3, #43	; 0x2b
    9ffa:	4a4e      	ldr	r2, [pc, #312]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    9ffc:	494e      	ldr	r1, [pc, #312]	; (a138 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1cc>)
    9ffe:	4628      	mov	r0, r5
    a000:	47b8      	blx	r7
    a002:	4634      	mov	r4, r6
    a004:	e7c9      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input != nullptr);
    a006:	696c      	ldr	r4, [r5, #20]
    a008:	4b4f      	ldr	r3, [pc, #316]	; (a148 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1dc>)
    a00a:	9300      	str	r3, [sp, #0]
    a00c:	2325      	movs	r3, #37	; 0x25
    a00e:	4a49      	ldr	r2, [pc, #292]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a010:	494e      	ldr	r1, [pc, #312]	; (a14c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a012:	4628      	mov	r0, r5
    a014:	47a0      	blx	r4
    a016:	2401      	movs	r4, #1
    a018:	e7bf      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, output != nullptr);
    a01a:	696c      	ldr	r4, [r5, #20]
    a01c:	4b4c      	ldr	r3, [pc, #304]	; (a150 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e4>)
    a01e:	9300      	str	r3, [sp, #0]
    a020:	2327      	movs	r3, #39	; 0x27
    a022:	4a44      	ldr	r2, [pc, #272]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a024:	4949      	ldr	r1, [pc, #292]	; (a14c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a026:	4628      	mov	r0, r5
    a028:	47a0      	blx	r4
    a02a:	2401      	movs	r4, #1
    a02c:	e7b5      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  const auto* affine_quantization =
    a02e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    a030:	b16b      	cbz	r3, a04e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xe2>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    a032:	681b      	ldr	r3, [r3, #0]
    a034:	b1a3      	cbz	r3, a060 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xf4>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
    a036:	681b      	ldr	r3, [r3, #0]
    a038:	2b01      	cmp	r3, #1
    a03a:	d01a      	beq.n	a072 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x106>
    a03c:	696e      	ldr	r6, [r5, #20]
    a03e:	4b45      	ldr	r3, [pc, #276]	; (a154 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e8>)
    a040:	9300      	str	r3, [sp, #0]
    a042:	2331      	movs	r3, #49	; 0x31
    a044:	4a3b      	ldr	r2, [pc, #236]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a046:	4941      	ldr	r1, [pc, #260]	; (a14c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a048:	4628      	mov	r0, r5
    a04a:	47b0      	blx	r6
    a04c:	e7a5      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, affine_quantization);
    a04e:	696e      	ldr	r6, [r5, #20]
    a050:	4b41      	ldr	r3, [pc, #260]	; (a158 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1ec>)
    a052:	9300      	str	r3, [sp, #0]
    a054:	232f      	movs	r3, #47	; 0x2f
    a056:	4a37      	ldr	r2, [pc, #220]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a058:	493c      	ldr	r1, [pc, #240]	; (a14c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a05a:	4628      	mov	r0, r5
    a05c:	47b0      	blx	r6
    a05e:	e79c      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    a060:	696e      	ldr	r6, [r5, #20]
    a062:	4b3e      	ldr	r3, [pc, #248]	; (a15c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f0>)
    a064:	9300      	str	r3, [sp, #0]
    a066:	2330      	movs	r3, #48	; 0x30
    a068:	4a32      	ldr	r2, [pc, #200]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a06a:	4938      	ldr	r1, [pc, #224]	; (a14c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a06c:	4628      	mov	r0, r5
    a06e:	47b0      	blx	r6
    a070:	e793      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||
    a072:	f898 3000 	ldrb.w	r3, [r8]
    a076:	2b01      	cmp	r3, #1
    a078:	d00c      	beq.n	a094 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x128>
    a07a:	2b07      	cmp	r3, #7
    a07c:	d00a      	beq.n	a094 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x128>
    a07e:	2b09      	cmp	r3, #9
    a080:	d008      	beq.n	a094 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x128>
    a082:	696e      	ldr	r6, [r5, #20]
    a084:	4b36      	ldr	r3, [pc, #216]	; (a160 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f4>)
    a086:	9300      	str	r3, [sp, #0]
    a088:	2333      	movs	r3, #51	; 0x33
    a08a:	4a2a      	ldr	r2, [pc, #168]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a08c:	492f      	ldr	r1, [pc, #188]	; (a14c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a08e:	4628      	mov	r0, r5
    a090:	47b0      	blx	r6
    a092:	e782      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, output->type == kTfLiteInt8 ||
    a094:	783a      	ldrb	r2, [r7, #0]
    a096:	2a09      	cmp	r2, #9
    a098:	d00c      	beq.n	a0b4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x148>
    a09a:	2a07      	cmp	r2, #7
    a09c:	d00a      	beq.n	a0b4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x148>
    a09e:	2a02      	cmp	r2, #2
    a0a0:	d008      	beq.n	a0b4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x148>
    a0a2:	696e      	ldr	r6, [r5, #20]
    a0a4:	4b2f      	ldr	r3, [pc, #188]	; (a164 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f8>)
    a0a6:	9300      	str	r3, [sp, #0]
    a0a8:	2336      	movs	r3, #54	; 0x36
    a0aa:	4a22      	ldr	r2, [pc, #136]	; (a134 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c8>)
    a0ac:	4927      	ldr	r1, [pc, #156]	; (a14c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>)
    a0ae:	4628      	mov	r0, r5
    a0b0:	47b0      	blx	r6
    a0b2:	e772      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
    a0b4:	2b07      	cmp	r3, #7
    a0b6:	d00c      	beq.n	a0d2 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x166>
    a0b8:	2b09      	cmp	r3, #9
    a0ba:	d00a      	beq.n	a0d2 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x166>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt8) ||
    a0bc:	2b09      	cmp	r3, #9
    a0be:	d02b      	beq.n	a118 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1ac>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt16) ||
    a0c0:	2b09      	cmp	r3, #9
    a0c2:	d02c      	beq.n	a11e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b2>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
    a0c4:	2b07      	cmp	r3, #7
    a0c6:	d02d      	beq.n	a124 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt16) ||
    a0c8:	2b07      	cmp	r3, #7
    a0ca:	d119      	bne.n	a100 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x194>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt32)) {
    a0cc:	2a02      	cmp	r2, #2
    a0ce:	d117      	bne.n	a100 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x194>
    a0d0:	e001      	b.n	a0d6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
    a0d2:	2a09      	cmp	r2, #9
    a0d4:	d1f2      	bne.n	a0bc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x150>
    double effective_scale = static_cast<double>(input->params.scale) /
    a0d6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    a0da:	f7f6 f9c5 	bl	468 <__aeabi_f2d>
    a0de:	4604      	mov	r4, r0
    a0e0:	460d      	mov	r5, r1
                             static_cast<double>(output->params.scale);
    a0e2:	68f8      	ldr	r0, [r7, #12]
    a0e4:	f7f6 f9c0 	bl	468 <__aeabi_f2d>
    a0e8:	4602      	mov	r2, r0
    a0ea:	460b      	mov	r3, r1
    double effective_scale = static_cast<double>(input->params.scale) /
    a0ec:	4620      	mov	r0, r4
    a0ee:	4629      	mov	r1, r5
    a0f0:	f7f6 fb3c 	bl	76c <__aeabi_ddiv>
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
    a0f4:	f106 0314 	add.w	r3, r6, #20
    a0f8:	f106 0210 	add.w	r2, r6, #16
    a0fc:	f7fe fd54 	bl	8ba8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  data->quantization_params.zero_point = output->params.zero_point;
    a100:	693b      	ldr	r3, [r7, #16]
    a102:	6033      	str	r3, [r6, #0]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
    a104:	68f8      	ldr	r0, [r7, #12]
    a106:	f7f6 f9af 	bl	468 <__aeabi_f2d>
    a10a:	e9c6 0102 	strd	r0, r1, [r6, #8]
  data->input_zero_point = input->params.zero_point;
    a10e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    a112:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
    a114:	2400      	movs	r4, #0
    a116:	e740      	b.n	9f9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt16) ||
    a118:	2a07      	cmp	r2, #7
    a11a:	d1d1      	bne.n	a0c0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x154>
    a11c:	e7db      	b.n	a0d6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
    a11e:	2a02      	cmp	r2, #2
    a120:	d1d0      	bne.n	a0c4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x158>
    a122:	e7d8      	b.n	a0d6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt16) ||
    a124:	2a07      	cmp	r2, #7
    a126:	d1cf      	bne.n	a0c8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x15c>
    a128:	e7d5      	b.n	a0d6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
    a12a:	bf00      	nop
    a12c:	00057668 	.word	0x00057668
    a130:	0005726c 	.word	0x0005726c
    a134:	00057584 	.word	0x00057584
    a138:	00057250 	.word	0x00057250
    a13c:	0005727c 	.word	0x0005727c
    a140:	000575dc 	.word	0x000575dc
    a144:	000575f8 	.word	0x000575f8
    a148:	00057290 	.word	0x00057290
    a14c:	00056d50 	.word	0x00056d50
    a150:	000572a4 	.word	0x000572a4
    a154:	00057644 	.word	0x00057644
    a158:	00057614 	.word	0x00057614
    a15c:	00057628 	.word	0x00057628
    a160:	0005766c 	.word	0x0005766c
    a164:	000576c8 	.word	0x000576c8

0000a168 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus EvalQuantizeReference(TfLiteContext* context, TfLiteNode* node) {
    a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a16c:	b0a5      	sub	sp, #148	; 0x94
  TFLITE_DCHECK(node->user_data != nullptr);
    a16e:	690c      	ldr	r4, [r1, #16]
    a170:	2c00      	cmp	r4, #0
    a172:	d03e      	beq.n	a1f2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8a>
    a174:	4606      	mov	r6, r0
    a176:	460d      	mov	r5, r1
  TFLITE_DCHECK(context != nullptr);
    a178:	2800      	cmp	r0, #0
    a17a:	d03c      	beq.n	a1f6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8e>
  TFLITE_DCHECK(node != nullptr);
    a17c:	2900      	cmp	r1, #0
    a17e:	d03c      	beq.n	a1fa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x92>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    a180:	6d43      	ldr	r3, [r0, #84]	; 0x54
    a182:	680a      	ldr	r2, [r1, #0]
    a184:	6851      	ldr	r1, [r2, #4]
    a186:	4798      	blx	r3
    a188:	4680      	mov	r8, r0
  TFLITE_DCHECK(context != nullptr);
    a18a:	2e00      	cmp	r6, #0
    a18c:	d037      	beq.n	a1fe <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x96>
  TFLITE_DCHECK(node != nullptr);
    a18e:	2d00      	cmp	r5, #0
    a190:	d037      	beq.n	a202 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9a>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    a192:	6d73      	ldr	r3, [r6, #84]	; 0x54
    a194:	686a      	ldr	r2, [r5, #4]
    a196:	6851      	ldr	r1, [r2, #4]
    a198:	4630      	mov	r0, r6
    a19a:	4798      	blx	r3
    a19c:	4605      	mov	r5, r0
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);

  if (input->type == kTfLiteFloat32) {
    a19e:	f898 7008 	ldrb.w	r7, [r8, #8]
    a1a2:	2f01      	cmp	r7, #1
    a1a4:	d02f      	beq.n	a206 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9e>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
                           TfLiteTypeGetName(input->type),
                           TfLiteTypeGetName(output->type));
        return kTfLiteError;
    }
  } else if (input->type == kTfLiteInt16) {
    a1a6:	2f07      	cmp	r7, #7
    a1a8:	f000 816f 	beq.w	a48a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x322>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
                           TfLiteTypeGetName(input->type),
                           TfLiteTypeGetName(output->type));
        return kTfLiteError;
    }
  } else if (input->type == kTfLiteInt8) {
    a1ac:	2f09      	cmp	r7, #9
    a1ae:	f040 860a 	bne.w	adc6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc5e>
    // Int8 to Int8 requantization, required if the input and output tensors
    // have different scales and/or zero points.
    size_t size = ElementCount(*input->dims);
    a1b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a1b6:	f004 ff42 	bl	f03e <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    a1ba:	9000      	str	r0, [sp, #0]
    switch (output->type) {
    a1bc:	7a2b      	ldrb	r3, [r5, #8]
    a1be:	2b07      	cmp	r3, #7
    a1c0:	f000 8484 	beq.w	aacc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x964>
    a1c4:	2b09      	cmp	r3, #9
    a1c6:	f000 83c4 	beq.w	a952 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7ea>
    a1ca:	2b02      	cmp	r3, #2
    a1cc:	f000 8550 	beq.w	ac70 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb08>
            data->requantize_output_multiplier, data->requantize_output_shift,
            data->input_zero_point, data->quantization_params.zero_point,
            tflite::micro::GetTensorData<int32_t>(output));
        break;
      default:
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a1d0:	6977      	ldr	r7, [r6, #20]
    a1d2:	f898 0008 	ldrb.w	r0, [r8, #8]
    a1d6:	f7fe fc91 	bl	8afc <TfLiteTypeGetName>
    a1da:	4604      	mov	r4, r0
    a1dc:	7a28      	ldrb	r0, [r5, #8]
    a1de:	f7fe fc8d 	bl	8afc <TfLiteTypeGetName>
    a1e2:	4603      	mov	r3, r0
    a1e4:	4622      	mov	r2, r4
    a1e6:	49b8      	ldr	r1, [pc, #736]	; (a4c8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>)
    a1e8:	4630      	mov	r0, r6
    a1ea:	47b8      	blx	r7
                           TfLiteTypeGetName(input->type),
                           TfLiteTypeGetName(output->type));
        return kTfLiteError;
    a1ec:	2701      	movs	r7, #1
    a1ee:	f000 bdf9 	b.w	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
  TFLITE_DCHECK(node->user_data != nullptr);
    a1f2:	f005 ff2f 	bl	10054 <abort>
  TFLITE_DCHECK(context != nullptr);
    a1f6:	f005 ff2d 	bl	10054 <abort>
  TFLITE_DCHECK(node != nullptr);
    a1fa:	f005 ff2b 	bl	10054 <abort>
  TFLITE_DCHECK(context != nullptr);
    a1fe:	f005 ff29 	bl	10054 <abort>
  TFLITE_DCHECK(node != nullptr);
    a202:	f005 ff27 	bl	10054 <abort>
    switch (output->type) {
    a206:	7a03      	ldrb	r3, [r0, #8]
    a208:	2b07      	cmp	r3, #7
    a20a:	f000 8098 	beq.w	a33e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d6>
    a20e:	2b09      	cmp	r3, #9
    a210:	f040 812b 	bne.w	a46a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x302>
            data->quantization_params, tflite::micro::GetTensorShape(input),
    a214:	4641      	mov	r1, r8
    a216:	a80c      	add	r0, sp, #48	; 0x30
    a218:	f005 fc76 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::AffineQuantize(
    a21c:	4640      	mov	r0, r8
    a21e:	f005 fbc3 	bl	f9a8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    a222:	4680      	mov	r8, r0
            tflite::micro::GetTensorShape(output),
    a224:	4629      	mov	r1, r5
    a226:	a812      	add	r0, sp, #72	; 0x48
    a228:	f005 fc6e 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::AffineQuantize(
    a22c:	4628      	mov	r0, r5
    a22e:	f005 fbcb 	bl	f9c8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    a232:	4681      	mov	r9, r0
inline void AffineQuantize(const tflite::QuantizationParams& op_params,
                           const RuntimeShape& input_shape,
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32_t zero_point = op_params.zero_point;
    a234:	f8d4 a000 	ldr.w	sl, [r4]
  const double scale = op_params.scale;
    a238:	e9d4 3402 	ldrd	r3, r4, [r4, #8]
    a23c:	e9cd 3400 	strd	r3, r4, [sp]
  inline int32_t DimensionsCount() const { return size_; }
    a240:	980c      	ldr	r0, [sp, #48]	; 0x30
    a242:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    a244:	4298      	cmp	r0, r3
    a246:	d101      	bne.n	a24c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xe4>
  for (int i = 0; i < dims_count; ++i) {
    a248:	2300      	movs	r3, #0
    a24a:	e017      	b.n	a27c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x114>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    a24c:	f005 ff02 	bl	10054 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a250:	f005 ff00 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a254:	f005 fefe 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a258:	aa24      	add	r2, sp, #144	; 0x90
    a25a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a25e:	f852 1c5c 	ldr.w	r1, [r2, #-92]
    a262:	e017      	b.n	a294 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x12c>
    TFLITE_DCHECK_GE(i, 0);
    a264:	f005 fef6 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a268:	f005 fef4 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a26c:	aa24      	add	r2, sp, #144	; 0x90
    a26e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a272:	f852 2c44 	ldr.w	r2, [r2, #-68]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    a276:	428a      	cmp	r2, r1
    a278:	d117      	bne.n	a2aa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x142>
  for (int i = 0; i < dims_count; ++i) {
    a27a:	3301      	adds	r3, #1
    a27c:	4298      	cmp	r0, r3
    a27e:	dd16      	ble.n	a2ae <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    TFLITE_DCHECK_GE(i, 0);
    a280:	2b00      	cmp	r3, #0
    a282:	dbe5      	blt.n	a250 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
    a284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a286:	4293      	cmp	r3, r2
    a288:	dae4      	bge.n	a254 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a28a:	2a05      	cmp	r2, #5
    a28c:	dde4      	ble.n	a258 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xf0>
    a28e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a290:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    a294:	2b00      	cmp	r3, #0
    a296:	dbe5      	blt.n	a264 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xfc>
    TFLITE_DCHECK_LT(i, size_);
    a298:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a29a:	4293      	cmp	r3, r2
    a29c:	dae4      	bge.n	a268 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x100>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a29e:	2a05      	cmp	r2, #5
    a2a0:	dde4      	ble.n	a26c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x104>
    a2a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a2a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a2a8:	e7e5      	b.n	a276 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x10e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    a2aa:	f005 fed3 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a2ae:	2805      	cmp	r0, #5
    a2b0:	dd0a      	ble.n	a2c8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x160>
    a2b2:	990d      	ldr	r1, [sp, #52]	; 0x34
    for (int i = 0; i < size_; i++) {
    a2b4:	2300      	movs	r3, #0
    int buffer_size = 1;
    a2b6:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    a2b8:	4298      	cmp	r0, r3
    a2ba:	dd07      	ble.n	a2cc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x164>
      buffer_size *= dims_data[i];
    a2bc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    a2c0:	fb02 f505 	mul.w	r5, r2, r5
    for (int i = 0; i < size_; i++) {
    a2c4:	3301      	adds	r3, #1
    a2c6:	e7f7      	b.n	a2b8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x150>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a2c8:	a90d      	add	r1, sp, #52	; 0x34
    a2ca:	e7f3      	b.n	a2b4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x14c>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  static constexpr int32_t min_val = std::numeric_limits<OutputT>::min();
  static constexpr int32_t max_val = std::numeric_limits<OutputT>::max();

  for (int i = 0; i < flat_size; i++) {
    a2cc:	2400      	movs	r4, #0
    a2ce:	e005      	b.n	a2dc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x174>
	return __b;
    a2d0:	4b7e      	ldr	r3, [pc, #504]	; (a4cc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x364>)
    a2d2:	e01e      	b.n	a312 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1aa>
    const InputT val = input_data[i];
    int32_t unclamped =
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
        zero_point;
    int32_t clamped = std::min(std::max(unclamped, min_val), max_val);
    a2d4:	681b      	ldr	r3, [r3, #0]
    output_data[i] = clamped;
    a2d6:	f809 3006 	strb.w	r3, [r9, r6]
  for (int i = 0; i < flat_size; i++) {
    a2da:	3401      	adds	r4, #1
    a2dc:	42ac      	cmp	r4, r5
    a2de:	da1d      	bge.n	a31c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b4>
    const InputT val = input_data[i];
    a2e0:	4626      	mov	r6, r4
    a2e2:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
    a2e6:	e9dd 0100 	ldrd	r0, r1, [sp]
    a2ea:	f7f6 fbd7 	bl	a9c <__aeabi_d2f>
    a2ee:	4601      	mov	r1, r0
    a2f0:	4638      	mov	r0, r7
    a2f2:	f7f6 fde5 	bl	ec0 <__aeabi_fdiv>
    a2f6:	f7f6 f8b7 	bl	468 <__aeabi_f2d>
    a2fa:	f002 f8cf 	bl	c49c <round>
    a2fe:	f7f6 fbcd 	bl	a9c <__aeabi_d2f>
    a302:	f7f6 feef 	bl	10e4 <__aeabi_f2iz>
    a306:	4450      	add	r0, sl
    int32_t unclamped =
    a308:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__a < __b)
    a30a:	f110 0f80 	cmn.w	r0, #128	; 0x80
    a30e:	dbdf      	blt.n	a2d0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x168>
      return __a;
    a310:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__b < __a)
    a312:	681a      	ldr	r2, [r3, #0]
    a314:	2a7f      	cmp	r2, #127	; 0x7f
    a316:	dddd      	ble.n	a2d4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
	return __b;
    a318:	4b6d      	ldr	r3, [pc, #436]	; (a4d0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x368>)
    a31a:	e7db      	b.n	a2d4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16c>
    if (size_ > kMaxSmallSize) {
    a31c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a31e:	2b05      	cmp	r3, #5
    a320:	dd03      	ble.n	a32a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c2>
      delete[] dims_pointer_;
    a322:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a324:	b108      	cbz	r0, a32a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c2>
    a326:	f005 fe80 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    a32a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a32c:	2b05      	cmp	r3, #5
    a32e:	dd03      	ble.n	a338 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d0>
      delete[] dims_pointer_;
    a330:	980d      	ldr	r0, [sp, #52]	; 0x34
    a332:	b108      	cbz	r0, a338 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1d0>
    a334:	f005 fe79 	bl	1002a <_ZdaPv>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
    a338:	2700      	movs	r7, #0
    a33a:	f000 bd53 	b.w	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
            data->quantization_params, tflite::micro::GetTensorShape(input),
    a33e:	4641      	mov	r1, r8
    a340:	a818      	add	r0, sp, #96	; 0x60
    a342:	f005 fbe1 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::AffineQuantize(
    a346:	4640      	mov	r0, r8
    a348:	f005 fb2e 	bl	f9a8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    a34c:	4680      	mov	r8, r0
            tflite::micro::GetTensorShape(output),
    a34e:	4629      	mov	r1, r5
    a350:	a81e      	add	r0, sp, #120	; 0x78
    a352:	f005 fbd9 	bl	fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::AffineQuantize(
    a356:	4628      	mov	r0, r5
    a358:	f005 fb5f 	bl	fa1a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    a35c:	4681      	mov	r9, r0
  const int32_t zero_point = op_params.zero_point;
    a35e:	f8d4 a000 	ldr.w	sl, [r4]
  const double scale = op_params.scale;
    a362:	e9d4 3402 	ldrd	r3, r4, [r4, #8]
    a366:	e9cd 3400 	strd	r3, r4, [sp]
  inline int32_t DimensionsCount() const { return size_; }
    a36a:	9818      	ldr	r0, [sp, #96]	; 0x60
    a36c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    a36e:	4298      	cmp	r0, r3
    a370:	d101      	bne.n	a376 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x20e>
  for (int i = 0; i < dims_count; ++i) {
    a372:	2300      	movs	r3, #0
    a374:	e017      	b.n	a3a6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x23e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    a376:	f005 fe6d 	bl	10054 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a37a:	f005 fe6b 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a37e:	f005 fe69 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a382:	aa24      	add	r2, sp, #144	; 0x90
    a384:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a388:	f852 1c2c 	ldr.w	r1, [r2, #-44]
    a38c:	e017      	b.n	a3be <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x256>
    TFLITE_DCHECK_GE(i, 0);
    a38e:	f005 fe61 	bl	10054 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a392:	f005 fe5f 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a396:	aa24      	add	r2, sp, #144	; 0x90
    a398:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a39c:	f852 2c14 	ldr.w	r2, [r2, #-20]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    a3a0:	428a      	cmp	r2, r1
    a3a2:	d117      	bne.n	a3d4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x26c>
  for (int i = 0; i < dims_count; ++i) {
    a3a4:	3301      	adds	r3, #1
    a3a6:	4298      	cmp	r0, r3
    a3a8:	dd16      	ble.n	a3d8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x270>
    TFLITE_DCHECK_GE(i, 0);
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	dbe5      	blt.n	a37a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x212>
    TFLITE_DCHECK_LT(i, size_);
    a3ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a3b0:	4293      	cmp	r3, r2
    a3b2:	dae4      	bge.n	a37e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x216>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a3b4:	2a05      	cmp	r2, #5
    a3b6:	dde4      	ble.n	a382 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x21a>
    a3b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a3ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    a3be:	2b00      	cmp	r3, #0
    a3c0:	dbe5      	blt.n	a38e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x226>
    TFLITE_DCHECK_LT(i, size_);
    a3c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    a3c4:	4293      	cmp	r3, r2
    a3c6:	dae4      	bge.n	a392 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a3c8:	2a05      	cmp	r2, #5
    a3ca:	dde4      	ble.n	a396 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22e>
    a3cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a3ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a3d2:	e7e5      	b.n	a3a0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x238>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    a3d4:	f005 fe3e 	bl	10054 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a3d8:	2805      	cmp	r0, #5
    a3da:	dd0a      	ble.n	a3f2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x28a>
    a3dc:	9919      	ldr	r1, [sp, #100]	; 0x64
    for (int i = 0; i < size_; i++) {
    a3de:	2300      	movs	r3, #0
    int buffer_size = 1;
    a3e0:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    a3e2:	4298      	cmp	r0, r3
    a3e4:	dd07      	ble.n	a3f6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x28e>
      buffer_size *= dims_data[i];
    a3e6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    a3ea:	fb02 f505 	mul.w	r5, r2, r5
    for (int i = 0; i < size_; i++) {
    a3ee:	3301      	adds	r3, #1
    a3f0:	e7f7      	b.n	a3e2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x27a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a3f2:	a919      	add	r1, sp, #100	; 0x64
    a3f4:	e7f3      	b.n	a3de <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x276>
  for (int i = 0; i < flat_size; i++) {
    a3f6:	2400      	movs	r4, #0
    a3f8:	e005      	b.n	a406 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x29e>
	return __b;
    a3fa:	4b36      	ldr	r3, [pc, #216]	; (a4d4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36c>)
    a3fc:	e01e      	b.n	a43c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2d4>
    int32_t clamped = std::min(std::max(unclamped, min_val), max_val);
    a3fe:	681b      	ldr	r3, [r3, #0]
    output_data[i] = clamped;
    a400:	f829 3016 	strh.w	r3, [r9, r6, lsl #1]
  for (int i = 0; i < flat_size; i++) {
    a404:	3401      	adds	r4, #1
    a406:	42ac      	cmp	r4, r5
    a408:	da1e      	bge.n	a448 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2e0>
    const InputT val = input_data[i];
    a40a:	4626      	mov	r6, r4
    a40c:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
    a410:	e9dd 0100 	ldrd	r0, r1, [sp]
    a414:	f7f6 fb42 	bl	a9c <__aeabi_d2f>
    a418:	4601      	mov	r1, r0
    a41a:	4638      	mov	r0, r7
    a41c:	f7f6 fd50 	bl	ec0 <__aeabi_fdiv>
    a420:	f7f6 f822 	bl	468 <__aeabi_f2d>
    a424:	f002 f83a 	bl	c49c <round>
    a428:	f7f6 fb38 	bl	a9c <__aeabi_d2f>
    a42c:	f7f6 fe5a 	bl	10e4 <__aeabi_f2iz>
    a430:	4450      	add	r0, sl
    int32_t unclamped =
    a432:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__a < __b)
    a434:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
    a438:	dbdf      	blt.n	a3fa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x292>
      return __a;
    a43a:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__b < __a)
    a43c:	681a      	ldr	r2, [r3, #0]
    a43e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    a442:	dbdc      	blt.n	a3fe <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x296>
	return __b;
    a444:	4b24      	ldr	r3, [pc, #144]	; (a4d8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x370>)
    a446:	e7da      	b.n	a3fe <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x296>
    if (size_ > kMaxSmallSize) {
    a448:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    a44a:	2b05      	cmp	r3, #5
    a44c:	dd03      	ble.n	a456 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2ee>
      delete[] dims_pointer_;
    a44e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a450:	b108      	cbz	r0, a456 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2ee>
    a452:	f005 fdea 	bl	1002a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    a456:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a458:	2b05      	cmp	r3, #5
    a45a:	dd03      	ble.n	a464 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2fc>
      delete[] dims_pointer_;
    a45c:	9819      	ldr	r0, [sp, #100]	; 0x64
    a45e:	b108      	cbz	r0, a464 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2fc>
    a460:	f005 fde3 	bl	1002a <_ZdaPv>
        return kTfLiteOk;
    a464:	2700      	movs	r7, #0
    a466:	f000 bcbd 	b.w	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a46a:	f8d6 8014 	ldr.w	r8, [r6, #20]
    a46e:	4638      	mov	r0, r7
    a470:	f7fe fb44 	bl	8afc <TfLiteTypeGetName>
    a474:	4604      	mov	r4, r0
    a476:	7a28      	ldrb	r0, [r5, #8]
    a478:	f7fe fb40 	bl	8afc <TfLiteTypeGetName>
    a47c:	4603      	mov	r3, r0
    a47e:	4622      	mov	r2, r4
    a480:	4911      	ldr	r1, [pc, #68]	; (a4c8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>)
    a482:	4630      	mov	r0, r6
    a484:	47c0      	blx	r8
        return kTfLiteError;
    a486:	f000 bcad 	b.w	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    size_t size = ElementCount(*input->dims);
    a48a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a48e:	f004 fdd6 	bl	f03e <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    a492:	9000      	str	r0, [sp, #0]
    switch (output->type) {
    a494:	7a2b      	ldrb	r3, [r5, #8]
    a496:	2b07      	cmp	r3, #7
    a498:	f000 80dd 	beq.w	a656 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4ee>
    a49c:	2b09      	cmp	r3, #9
    a49e:	d01d      	beq.n	a4dc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x374>
    a4a0:	2b02      	cmp	r3, #2
    a4a2:	f000 8197 	beq.w	a7d4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x66c>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    a4a6:	6977      	ldr	r7, [r6, #20]
    a4a8:	f898 0008 	ldrb.w	r0, [r8, #8]
    a4ac:	f7fe fb26 	bl	8afc <TfLiteTypeGetName>
    a4b0:	4604      	mov	r4, r0
    a4b2:	7a28      	ldrb	r0, [r5, #8]
    a4b4:	f7fe fb22 	bl	8afc <TfLiteTypeGetName>
    a4b8:	4603      	mov	r3, r0
    a4ba:	4622      	mov	r2, r4
    a4bc:	4902      	ldr	r1, [pc, #8]	; (a4c8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>)
    a4be:	4630      	mov	r0, r6
    a4c0:	47b8      	blx	r7
        return kTfLiteError;
    a4c2:	2701      	movs	r7, #1
    a4c4:	f000 bc8e 	b.w	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    a4c8:	00057334 	.word	0x00057334
    a4cc:	00057750 	.word	0x00057750
    a4d0:	0005774c 	.word	0x0005774c
    a4d4:	00057748 	.word	0x00057748
    a4d8:	00057744 	.word	0x00057744
        reference_ops::Requantize(
    a4dc:	4640      	mov	r0, r8
    a4de:	f005 fa96 	bl	fa0e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    a4e2:	9006      	str	r0, [sp, #24]
    a4e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
    a4e8:	f8d4 9014 	ldr.w	r9, [r4, #20]
    a4ec:	69a3      	ldr	r3, [r4, #24]
    a4ee:	9307      	str	r3, [sp, #28]
    a4f0:	6823      	ldr	r3, [r4, #0]
    a4f2:	9308      	str	r3, [sp, #32]
    a4f4:	4628      	mov	r0, r5
    a4f6:	f005 fa67 	bl	f9c8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    a4fa:	9009      	str	r0, [sp, #36]	; 0x24
    a4fc:	f04f 0800 	mov.w	r8, #0
    a500:	e05d      	b.n	a5be <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x456>
    a502:	f1c9 0600 	rsb	r6, r9, #0
    a506:	e06b      	b.n	a5e0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x478>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a508:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a50c:	d001      	beq.n	a512 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3aa>
    a50e:	2700      	movs	r7, #0
    a510:	e06a      	b.n	a5e8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x480>
    a512:	2701      	movs	r7, #1
    a514:	e068      	b.n	a5e8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x480>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a516:	49bf      	ldr	r1, [pc, #764]	; (a814 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6ac>)
    a518:	e076      	b.n	a608 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4a0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a51a:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    a51c:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a520:	2f00      	cmp	r7, #0
    a522:	f040 8083 	bne.w	a62c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4c4>
  assert(exponent >= 0);
    a526:	2e00      	cmp	r6, #0
    a528:	f2c0 8083 	blt.w	a632 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4ca>
  assert(exponent <= 31);
    a52c:	2e1f      	cmp	r6, #31
    a52e:	f300 8087 	bgt.w	a640 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4d8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    a532:	f04f 0a01 	mov.w	sl, #1
    a536:	fa0a f006 	lsl.w	r0, sl, r6
    a53a:	3801      	subs	r0, #1
    a53c:	f005 fa48 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a540:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    a542:	2000      	movs	r0, #0
    a544:	f005 fa44 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a548:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    a54a:	4650      	mov	r0, sl
    a54c:	f005 fa40 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a550:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    a552:	4639      	mov	r1, r7
    a554:	4620      	mov	r0, r4
    a556:	f005 fa3c 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a55a:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    a55c:	4651      	mov	r1, sl
    a55e:	4638      	mov	r0, r7
    a560:	f005 fa39 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a564:	4607      	mov	r7, r0
    a566:	9904      	ldr	r1, [sp, #16]
    a568:	4620      	mov	r0, r4
    a56a:	f005 fa40 	bl	f9ee <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    a56e:	4629      	mov	r1, r5
    a570:	f005 fa2f 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a574:	4601      	mov	r1, r0
    a576:	4638      	mov	r0, r7
    a578:	f005 fa2f 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
    a57c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    a57e:	4631      	mov	r1, r6
    a580:	4620      	mov	r0, r4
    a582:	f005 fa28 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a586:	4604      	mov	r4, r0
    a588:	4639      	mov	r1, r7
    a58a:	9805      	ldr	r0, [sp, #20]
    a58c:	f005 fa37 	bl	f9fe <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    a590:	4629      	mov	r1, r5
    a592:	f005 fa1e 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a596:	4601      	mov	r1, r0
    a598:	4620      	mov	r0, r4
    a59a:	f005 fa1e 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
  static constexpr int32_t kMaxOutput = std::numeric_limits<output_type>::max();
  for (int i = 0; i < size; ++i) {
    const int32_t input = input_data[i] - input_zeropoint;
    const int32_t output =
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
                                      effective_scale_shift) +
    a59e:	9b08      	ldr	r3, [sp, #32]
    a5a0:	4418      	add	r0, r3
    const int32_t output =
    a5a2:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__b < __a)
    a5a4:	287f      	cmp	r0, #127	; 0x7f
    a5a6:	dc52      	bgt.n	a64e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4e6>
      return __a;
    a5a8:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__a < __b)
    a5aa:	681a      	ldr	r2, [r3, #0]
    a5ac:	f112 0f80 	cmn.w	r2, #128	; 0x80
    a5b0:	db4f      	blt.n	a652 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4ea>
        output_zeropoint;
    const int32_t clamped_output =
    a5b2:	681b      	ldr	r3, [r3, #0]
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
    a5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a5b6:	9903      	ldr	r1, [sp, #12]
    a5b8:	5453      	strb	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    a5ba:	f108 0801 	add.w	r8, r8, #1
    a5be:	9b00      	ldr	r3, [sp, #0]
    a5c0:	4543      	cmp	r3, r8
    a5c2:	f340 8413 	ble.w	adec <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc84>
    const int32_t input = input_data[i] - input_zeropoint;
    a5c6:	f8cd 800c 	str.w	r8, [sp, #12]
    a5ca:	9b06      	ldr	r3, [sp, #24]
    a5cc:	f933 2018 	ldrsh.w	r2, [r3, r8, lsl #1]
    a5d0:	9b07      	ldr	r3, [sp, #28]
    a5d2:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    a5d4:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    a5d8:	f1b9 0f00 	cmp.w	r9, #0
    a5dc:	dd91      	ble.n	a502 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x39a>
    a5de:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    a5e0:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a5e2:	4593      	cmp	fp, r2
    a5e4:	d090      	beq.n	a508 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3a0>
    a5e6:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    a5e8:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    a5ea:	465c      	mov	r4, fp
    a5ec:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    a5ee:	fb02 f305 	mul.w	r3, r2, r5
    a5f2:	fb0b 3101 	mla	r1, fp, r1, r3
    a5f6:	fba2 230b 	umull	r2, r3, r2, fp
    a5fa:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a5fc:	2a00      	cmp	r2, #0
    a5fe:	f173 0100 	sbcs.w	r1, r3, #0
    a602:	db88      	blt.n	a516 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3ae>
    a604:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a608:	1852      	adds	r2, r2, r1
    a60a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    a60e:	4611      	mov	r1, r2
    a610:	461c      	mov	r4, r3
    a612:	2a00      	cmp	r2, #0
    a614:	f173 0000 	sbcs.w	r0, r3, #0
    a618:	f6bf af7f 	bge.w	a51a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3b2>
    a61c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a620:	1851      	adds	r1, r2, r1
    a622:	f04f 0400 	mov.w	r4, #0
    a626:	eb43 0404 	adc.w	r4, r3, r4
    a62a:	e776      	b.n	a51a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3b2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a62c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a630:	e779      	b.n	a526 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3be>
  assert(exponent >= 0);
    a632:	4b79      	ldr	r3, [pc, #484]	; (a818 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b0>)
    a634:	4a79      	ldr	r2, [pc, #484]	; (a81c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b4>)
    a636:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a63a:	4879      	ldr	r0, [pc, #484]	; (a820 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b8>)
    a63c:	f001 ff9c 	bl	c578 <__assert_func>
  assert(exponent <= 31);
    a640:	4b78      	ldr	r3, [pc, #480]	; (a824 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6bc>)
    a642:	4a76      	ldr	r2, [pc, #472]	; (a81c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b4>)
    a644:	f240 1167 	movw	r1, #359	; 0x167
    a648:	4875      	ldr	r0, [pc, #468]	; (a820 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b8>)
    a64a:	f001 ff95 	bl	c578 <__assert_func>
	return __b;
    a64e:	4b76      	ldr	r3, [pc, #472]	; (a828 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6c0>)
    a650:	e7ab      	b.n	a5aa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x442>
	return __b;
    a652:	4b76      	ldr	r3, [pc, #472]	; (a82c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6c4>)
    a654:	e7ad      	b.n	a5b2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44a>
        reference_ops::Requantize(
    a656:	4640      	mov	r0, r8
    a658:	f005 f9d9 	bl	fa0e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    a65c:	9006      	str	r0, [sp, #24]
    a65e:	f8d4 b010 	ldr.w	fp, [r4, #16]
    a662:	f8d4 9014 	ldr.w	r9, [r4, #20]
    a666:	69a3      	ldr	r3, [r4, #24]
    a668:	9307      	str	r3, [sp, #28]
    a66a:	6823      	ldr	r3, [r4, #0]
    a66c:	9308      	str	r3, [sp, #32]
    a66e:	4628      	mov	r0, r5
    a670:	f005 f9d3 	bl	fa1a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    a674:	9009      	str	r0, [sp, #36]	; 0x24
    a676:	f04f 0800 	mov.w	r8, #0
    a67a:	e05e      	b.n	a73a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5d2>
  int right_shift = shift > 0 ? 0 : -shift;
    a67c:	f1c9 0600 	rsb	r6, r9, #0
    a680:	e06d      	b.n	a75e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5f6>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a682:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a686:	d001      	beq.n	a68c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x524>
    a688:	2700      	movs	r7, #0
    a68a:	e06c      	b.n	a766 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5fe>
    a68c:	2701      	movs	r7, #1
    a68e:	e06a      	b.n	a766 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5fe>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a690:	4960      	ldr	r1, [pc, #384]	; (a814 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6ac>)
    a692:	e078      	b.n	a786 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x61e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a694:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    a696:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a69a:	2f00      	cmp	r7, #0
    a69c:	f040 8085 	bne.w	a7aa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x642>
  assert(exponent >= 0);
    a6a0:	2e00      	cmp	r6, #0
    a6a2:	f2c0 8085 	blt.w	a7b0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x648>
  assert(exponent <= 31);
    a6a6:	2e1f      	cmp	r6, #31
    a6a8:	f300 8089 	bgt.w	a7be <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x656>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    a6ac:	f04f 0a01 	mov.w	sl, #1
    a6b0:	fa0a f006 	lsl.w	r0, sl, r6
    a6b4:	3801      	subs	r0, #1
    a6b6:	f005 f98b 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a6ba:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    a6bc:	2000      	movs	r0, #0
    a6be:	f005 f987 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a6c2:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    a6c4:	4650      	mov	r0, sl
    a6c6:	f005 f983 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a6ca:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    a6cc:	4639      	mov	r1, r7
    a6ce:	4620      	mov	r0, r4
    a6d0:	f005 f97f 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a6d4:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    a6d6:	4651      	mov	r1, sl
    a6d8:	4638      	mov	r0, r7
    a6da:	f005 f97c 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a6de:	4607      	mov	r7, r0
    a6e0:	9904      	ldr	r1, [sp, #16]
    a6e2:	4620      	mov	r0, r4
    a6e4:	f005 f983 	bl	f9ee <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    a6e8:	4629      	mov	r1, r5
    a6ea:	f005 f972 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a6ee:	4601      	mov	r1, r0
    a6f0:	4638      	mov	r0, r7
    a6f2:	f005 f972 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
    a6f6:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    a6f8:	4631      	mov	r1, r6
    a6fa:	4620      	mov	r0, r4
    a6fc:	f005 f96b 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a700:	4604      	mov	r4, r0
    a702:	4639      	mov	r1, r7
    a704:	9805      	ldr	r0, [sp, #20]
    a706:	f005 f97a 	bl	f9fe <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    a70a:	4629      	mov	r1, r5
    a70c:	f005 f961 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a710:	4601      	mov	r1, r0
    a712:	4620      	mov	r0, r4
    a714:	f005 f961 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    a718:	9b08      	ldr	r3, [sp, #32]
    a71a:	4418      	add	r0, r3
    const int32_t output =
    a71c:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__b < __a)
    a71e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a722:	da53      	bge.n	a7cc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x664>
      return __a;
    a724:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__a < __b)
    a726:	681a      	ldr	r2, [r3, #0]
    a728:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    a72c:	db50      	blt.n	a7d0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x668>
    const int32_t clamped_output =
    a72e:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
    a730:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a732:	9903      	ldr	r1, [sp, #12]
    a734:	5253      	strh	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    a736:	f108 0801 	add.w	r8, r8, #1
    a73a:	9b00      	ldr	r3, [sp, #0]
    a73c:	4543      	cmp	r3, r8
    a73e:	f340 8357 	ble.w	adf0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc88>
    const int32_t input = input_data[i] - input_zeropoint;
    a742:	ea4f 0348 	mov.w	r3, r8, lsl #1
    a746:	9303      	str	r3, [sp, #12]
    a748:	9b06      	ldr	r3, [sp, #24]
    a74a:	f933 2018 	ldrsh.w	r2, [r3, r8, lsl #1]
    a74e:	9b07      	ldr	r3, [sp, #28]
    a750:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    a752:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    a756:	f1b9 0f00 	cmp.w	r9, #0
    a75a:	dd8f      	ble.n	a67c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x514>
    a75c:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    a75e:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a760:	4593      	cmp	fp, r2
    a762:	d08e      	beq.n	a682 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x51a>
    a764:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    a766:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    a768:	465c      	mov	r4, fp
    a76a:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    a76c:	fb02 f305 	mul.w	r3, r2, r5
    a770:	fb0b 3101 	mla	r1, fp, r1, r3
    a774:	fba2 230b 	umull	r2, r3, r2, fp
    a778:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a77a:	2a00      	cmp	r2, #0
    a77c:	f173 0100 	sbcs.w	r1, r3, #0
    a780:	db86      	blt.n	a690 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x528>
    a782:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a786:	1852      	adds	r2, r2, r1
    a788:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    a78c:	4611      	mov	r1, r2
    a78e:	461c      	mov	r4, r3
    a790:	2a00      	cmp	r2, #0
    a792:	f173 0000 	sbcs.w	r0, r3, #0
    a796:	f6bf af7d 	bge.w	a694 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x52c>
    a79a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a79e:	1851      	adds	r1, r2, r1
    a7a0:	f04f 0400 	mov.w	r4, #0
    a7a4:	eb43 0404 	adc.w	r4, r3, r4
    a7a8:	e774      	b.n	a694 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x52c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a7aa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a7ae:	e777      	b.n	a6a0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x538>
  assert(exponent >= 0);
    a7b0:	4b19      	ldr	r3, [pc, #100]	; (a818 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b0>)
    a7b2:	4a1a      	ldr	r2, [pc, #104]	; (a81c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b4>)
    a7b4:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a7b8:	4819      	ldr	r0, [pc, #100]	; (a820 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b8>)
    a7ba:	f001 fedd 	bl	c578 <__assert_func>
  assert(exponent <= 31);
    a7be:	4b19      	ldr	r3, [pc, #100]	; (a824 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6bc>)
    a7c0:	4a16      	ldr	r2, [pc, #88]	; (a81c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b4>)
    a7c2:	f240 1167 	movw	r1, #359	; 0x167
    a7c6:	4816      	ldr	r0, [pc, #88]	; (a820 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6b8>)
    a7c8:	f001 fed6 	bl	c578 <__assert_func>
	return __b;
    a7cc:	4b18      	ldr	r3, [pc, #96]	; (a830 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6c8>)
    a7ce:	e7aa      	b.n	a726 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5be>
	return __b;
    a7d0:	4b18      	ldr	r3, [pc, #96]	; (a834 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6cc>)
    a7d2:	e7ac      	b.n	a72e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5c6>
        reference_ops::Requantize(
    a7d4:	4640      	mov	r0, r8
    a7d6:	f005 f91a 	bl	fa0e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    a7da:	9006      	str	r0, [sp, #24]
    a7dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
    a7e0:	f8d4 9014 	ldr.w	r9, [r4, #20]
    a7e4:	69a3      	ldr	r3, [r4, #24]
    a7e6:	9307      	str	r3, [sp, #28]
    a7e8:	6823      	ldr	r3, [r4, #0]
    a7ea:	9308      	str	r3, [sp, #32]
    a7ec:	4628      	mov	r0, r5
    a7ee:	f005 f91e 	bl	fa2e <_ZN6tflite5micro13GetTensorDataIiEEPT_P16TfLiteEvalTensor>
    a7f2:	9009      	str	r0, [sp, #36]	; 0x24
    a7f4:	f04f 0800 	mov.w	r8, #0
    a7f8:	e064      	b.n	a8c4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x75c>
  int right_shift = shift > 0 ? 0 : -shift;
    a7fa:	f1c9 0600 	rsb	r6, r9, #0
    a7fe:	e072      	b.n	a8e6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x77e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a800:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a804:	d001      	beq.n	a80a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6a2>
    a806:	2700      	movs	r7, #0
    a808:	e071      	b.n	a8ee <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x786>
    a80a:	2701      	movs	r7, #1
    a80c:	e06f      	b.n	a8ee <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x786>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a80e:	4901      	ldr	r1, [pc, #4]	; (a814 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6ac>)
    a810:	e07d      	b.n	a90e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7a6>
    a812:	bf00      	nop
    a814:	c0000001 	.word	0xc0000001
    a818:	00057484 	.word	0x00057484
    a81c:	00057494 	.word	0x00057494
    a820:	000574ec 	.word	0x000574ec
    a824:	00057548 	.word	0x00057548
    a828:	0005773c 	.word	0x0005773c
    a82c:	00057740 	.word	0x00057740
    a830:	00057734 	.word	0x00057734
    a834:	00057738 	.word	0x00057738
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a838:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    a83a:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a83e:	2f00      	cmp	r7, #0
    a840:	d176      	bne.n	a930 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7c8>
  assert(exponent >= 0);
    a842:	2e00      	cmp	r6, #0
    a844:	db77      	blt.n	a936 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7ce>
  assert(exponent <= 31);
    a846:	2e1f      	cmp	r6, #31
    a848:	dc7c      	bgt.n	a944 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x7dc>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    a84a:	f04f 0a01 	mov.w	sl, #1
    a84e:	fa0a f006 	lsl.w	r0, sl, r6
    a852:	3801      	subs	r0, #1
    a854:	f005 f8bc 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a858:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    a85a:	2000      	movs	r0, #0
    a85c:	f005 f8b8 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a860:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    a862:	4650      	mov	r0, sl
    a864:	f005 f8b4 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a868:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    a86a:	4639      	mov	r1, r7
    a86c:	4620      	mov	r0, r4
    a86e:	f005 f8b0 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a872:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    a874:	4651      	mov	r1, sl
    a876:	4638      	mov	r0, r7
    a878:	f005 f8ad 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a87c:	4607      	mov	r7, r0
    a87e:	9904      	ldr	r1, [sp, #16]
    a880:	4620      	mov	r0, r4
    a882:	f005 f8b4 	bl	f9ee <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    a886:	4629      	mov	r1, r5
    a888:	f005 f8a3 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a88c:	4601      	mov	r1, r0
    a88e:	4638      	mov	r0, r7
    a890:	f005 f8a3 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
    a894:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    a896:	4631      	mov	r1, r6
    a898:	4620      	mov	r0, r4
    a89a:	f005 f89c 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a89e:	4604      	mov	r4, r0
    a8a0:	4639      	mov	r1, r7
    a8a2:	9805      	ldr	r0, [sp, #20]
    a8a4:	f005 f8ab 	bl	f9fe <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    a8a8:	4629      	mov	r1, r5
    a8aa:	f005 f892 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a8ae:	4601      	mov	r1, r0
    a8b0:	4620      	mov	r0, r4
    a8b2:	f005 f892 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    a8b6:	9b08      	ldr	r3, [sp, #32]
    a8b8:	4418      	add	r0, r3
    output_data[i] = static_cast<output_type>(clamped_output);
    a8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8bc:	9a03      	ldr	r2, [sp, #12]
    a8be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  for (int i = 0; i < size; ++i) {
    a8c2:	44d0      	add	r8, sl
    a8c4:	9b00      	ldr	r3, [sp, #0]
    a8c6:	4543      	cmp	r3, r8
    a8c8:	f340 8294 	ble.w	adf4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc8c>
    const int32_t input = input_data[i] - input_zeropoint;
    a8cc:	f8cd 800c 	str.w	r8, [sp, #12]
    a8d0:	9b06      	ldr	r3, [sp, #24]
    a8d2:	f933 2018 	ldrsh.w	r2, [r3, r8, lsl #1]
    a8d6:	9b07      	ldr	r3, [sp, #28]
    a8d8:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    a8da:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    a8de:	f1b9 0f00 	cmp.w	r9, #0
    a8e2:	dd8a      	ble.n	a7fa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x692>
    a8e4:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    a8e6:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a8e8:	4593      	cmp	fp, r2
    a8ea:	d089      	beq.n	a800 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x698>
    a8ec:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    a8ee:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    a8f0:	465c      	mov	r4, fp
    a8f2:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    a8f4:	fb02 f305 	mul.w	r3, r2, r5
    a8f8:	fb0b 3101 	mla	r1, fp, r1, r3
    a8fc:	fba2 230b 	umull	r2, r3, r2, fp
    a900:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a902:	2a00      	cmp	r2, #0
    a904:	f173 0100 	sbcs.w	r1, r3, #0
    a908:	db81      	blt.n	a80e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6a6>
    a90a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a90e:	1852      	adds	r2, r2, r1
    a910:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    a914:	4611      	mov	r1, r2
    a916:	461c      	mov	r4, r3
    a918:	2a00      	cmp	r2, #0
    a91a:	f173 0000 	sbcs.w	r0, r3, #0
    a91e:	da8b      	bge.n	a838 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6d0>
    a920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a924:	1851      	adds	r1, r2, r1
    a926:	f04f 0400 	mov.w	r4, #0
    a92a:	eb43 0404 	adc.w	r4, r3, r4
    a92e:	e783      	b.n	a838 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6d0>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a930:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a934:	e785      	b.n	a842 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6da>
  assert(exponent >= 0);
    a936:	4bc5      	ldr	r3, [pc, #788]	; (ac4c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae4>)
    a938:	4ac5      	ldr	r2, [pc, #788]	; (ac50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    a93a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a93e:	48c5      	ldr	r0, [pc, #788]	; (ac54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    a940:	f001 fe1a 	bl	c578 <__assert_func>
  assert(exponent <= 31);
    a944:	4bc4      	ldr	r3, [pc, #784]	; (ac58 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf0>)
    a946:	4ac2      	ldr	r2, [pc, #776]	; (ac50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    a948:	f240 1167 	movw	r1, #359	; 0x167
    a94c:	48c1      	ldr	r0, [pc, #772]	; (ac54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    a94e:	f001 fe13 	bl	c578 <__assert_func>
        reference_ops::Requantize(
    a952:	4640      	mov	r0, r8
    a954:	f005 f832 	bl	f9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    a958:	9006      	str	r0, [sp, #24]
    a95a:	f8d4 b010 	ldr.w	fp, [r4, #16]
    a95e:	f8d4 9014 	ldr.w	r9, [r4, #20]
    a962:	69a3      	ldr	r3, [r4, #24]
    a964:	9307      	str	r3, [sp, #28]
    a966:	6823      	ldr	r3, [r4, #0]
    a968:	9308      	str	r3, [sp, #32]
    a96a:	4628      	mov	r0, r5
    a96c:	f005 f82c 	bl	f9c8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    a970:	9009      	str	r0, [sp, #36]	; 0x24
    a972:	f04f 0800 	mov.w	r8, #0
    a976:	e05d      	b.n	aa34 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8cc>
  int right_shift = shift > 0 ? 0 : -shift;
    a978:	f1c9 0600 	rsb	r6, r9, #0
    a97c:	e06b      	b.n	aa56 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8ee>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    a97e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a982:	d001      	beq.n	a988 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x820>
    a984:	2700      	movs	r7, #0
    a986:	e06a      	b.n	aa5e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8f6>
    a988:	2701      	movs	r7, #1
    a98a:	e068      	b.n	aa5e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8f6>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    a98c:	49b3      	ldr	r1, [pc, #716]	; (ac5c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf4>)
    a98e:	e076      	b.n	aa7e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x916>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    a990:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    a992:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    a996:	2f00      	cmp	r7, #0
    a998:	f040 8083 	bne.w	aaa2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x93a>
  assert(exponent >= 0);
    a99c:	2e00      	cmp	r6, #0
    a99e:	f2c0 8083 	blt.w	aaa8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x940>
  assert(exponent <= 31);
    a9a2:	2e1f      	cmp	r6, #31
    a9a4:	f300 8087 	bgt.w	aab6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x94e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    a9a8:	f04f 0a01 	mov.w	sl, #1
    a9ac:	fa0a f006 	lsl.w	r0, sl, r6
    a9b0:	3801      	subs	r0, #1
    a9b2:	f005 f80d 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a9b6:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    a9b8:	2000      	movs	r0, #0
    a9ba:	f005 f809 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a9be:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    a9c0:	4650      	mov	r0, sl
    a9c2:	f005 f805 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    a9c6:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    a9c8:	4639      	mov	r1, r7
    a9ca:	4620      	mov	r0, r4
    a9cc:	f005 f801 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a9d0:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    a9d2:	4651      	mov	r1, sl
    a9d4:	4638      	mov	r0, r7
    a9d6:	f004 fffe 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a9da:	4607      	mov	r7, r0
    a9dc:	9904      	ldr	r1, [sp, #16]
    a9de:	4620      	mov	r0, r4
    a9e0:	f005 f805 	bl	f9ee <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    a9e4:	4629      	mov	r1, r5
    a9e6:	f004 fff4 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    a9ea:	4601      	mov	r1, r0
    a9ec:	4638      	mov	r0, r7
    a9ee:	f004 fff4 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
    a9f2:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    a9f4:	4631      	mov	r1, r6
    a9f6:	4620      	mov	r0, r4
    a9f8:	f004 ffed 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    a9fc:	4604      	mov	r4, r0
    a9fe:	4639      	mov	r1, r7
    aa00:	9805      	ldr	r0, [sp, #20]
    aa02:	f004 fffc 	bl	f9fe <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    aa06:	4629      	mov	r1, r5
    aa08:	f004 ffe3 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aa0c:	4601      	mov	r1, r0
    aa0e:	4620      	mov	r0, r4
    aa10:	f004 ffe3 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    aa14:	9b08      	ldr	r3, [sp, #32]
    aa16:	4418      	add	r0, r3
    const int32_t output =
    aa18:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__b < __a)
    aa1a:	287f      	cmp	r0, #127	; 0x7f
    aa1c:	dc52      	bgt.n	aac4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x95c>
      return __a;
    aa1e:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__a < __b)
    aa20:	681a      	ldr	r2, [r3, #0]
    aa22:	f112 0f80 	cmn.w	r2, #128	; 0x80
    aa26:	db4f      	blt.n	aac8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x960>
    const int32_t clamped_output =
    aa28:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
    aa2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa2c:	9903      	ldr	r1, [sp, #12]
    aa2e:	5453      	strb	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    aa30:	f108 0801 	add.w	r8, r8, #1
    aa34:	9b00      	ldr	r3, [sp, #0]
    aa36:	4543      	cmp	r3, r8
    aa38:	f340 81de 	ble.w	adf8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc90>
    const int32_t input = input_data[i] - input_zeropoint;
    aa3c:	f8cd 800c 	str.w	r8, [sp, #12]
    aa40:	9b06      	ldr	r3, [sp, #24]
    aa42:	f913 2008 	ldrsb.w	r2, [r3, r8]
    aa46:	9b07      	ldr	r3, [sp, #28]
    aa48:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    aa4a:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    aa4e:	f1b9 0f00 	cmp.w	r9, #0
    aa52:	dd91      	ble.n	a978 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x810>
    aa54:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    aa56:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    aa58:	4593      	cmp	fp, r2
    aa5a:	d090      	beq.n	a97e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x816>
    aa5c:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    aa5e:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    aa60:	465c      	mov	r4, fp
    aa62:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    aa64:	fb02 f305 	mul.w	r3, r2, r5
    aa68:	fb0b 3101 	mla	r1, fp, r1, r3
    aa6c:	fba2 230b 	umull	r2, r3, r2, fp
    aa70:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    aa72:	2a00      	cmp	r2, #0
    aa74:	f173 0100 	sbcs.w	r1, r3, #0
    aa78:	db88      	blt.n	a98c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x824>
    aa7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    aa7e:	1852      	adds	r2, r2, r1
    aa80:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    aa84:	4611      	mov	r1, r2
    aa86:	461c      	mov	r4, r3
    aa88:	2a00      	cmp	r2, #0
    aa8a:	f173 0000 	sbcs.w	r0, r3, #0
    aa8e:	f6bf af7f 	bge.w	a990 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x828>
    aa92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    aa96:	1851      	adds	r1, r2, r1
    aa98:	f04f 0400 	mov.w	r4, #0
    aa9c:	eb43 0404 	adc.w	r4, r3, r4
    aaa0:	e776      	b.n	a990 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x828>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    aaa2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    aaa6:	e779      	b.n	a99c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x834>
  assert(exponent >= 0);
    aaa8:	4b68      	ldr	r3, [pc, #416]	; (ac4c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae4>)
    aaaa:	4a69      	ldr	r2, [pc, #420]	; (ac50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    aaac:	f44f 71b3 	mov.w	r1, #358	; 0x166
    aab0:	4868      	ldr	r0, [pc, #416]	; (ac54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    aab2:	f001 fd61 	bl	c578 <__assert_func>
  assert(exponent <= 31);
    aab6:	4b68      	ldr	r3, [pc, #416]	; (ac58 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf0>)
    aab8:	4a65      	ldr	r2, [pc, #404]	; (ac50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    aaba:	f240 1167 	movw	r1, #359	; 0x167
    aabe:	4865      	ldr	r0, [pc, #404]	; (ac54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    aac0:	f001 fd5a 	bl	c578 <__assert_func>
	return __b;
    aac4:	4b66      	ldr	r3, [pc, #408]	; (ac60 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf8>)
    aac6:	e7ab      	b.n	aa20 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8b8>
	return __b;
    aac8:	4b66      	ldr	r3, [pc, #408]	; (ac64 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xafc>)
    aaca:	e7ad      	b.n	aa28 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8c0>
        reference_ops::Requantize(
    aacc:	4640      	mov	r0, r8
    aace:	f004 ff75 	bl	f9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    aad2:	9006      	str	r0, [sp, #24]
    aad4:	f8d4 b010 	ldr.w	fp, [r4, #16]
    aad8:	f8d4 9014 	ldr.w	r9, [r4, #20]
    aadc:	69a3      	ldr	r3, [r4, #24]
    aade:	9307      	str	r3, [sp, #28]
    aae0:	6823      	ldr	r3, [r4, #0]
    aae2:	9308      	str	r3, [sp, #32]
    aae4:	4628      	mov	r0, r5
    aae6:	f004 ff98 	bl	fa1a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    aaea:	9009      	str	r0, [sp, #36]	; 0x24
    aaec:	f04f 0800 	mov.w	r8, #0
    aaf0:	e05f      	b.n	abb2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa4a>
  int right_shift = shift > 0 ? 0 : -shift;
    aaf2:	f1c9 0600 	rsb	r6, r9, #0
    aaf6:	e06d      	b.n	abd4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa6c>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    aaf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    aafc:	d001      	beq.n	ab02 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x99a>
    aafe:	2700      	movs	r7, #0
    ab00:	e06c      	b.n	abdc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa74>
    ab02:	2701      	movs	r7, #1
    ab04:	e06a      	b.n	abdc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa74>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ab06:	4955      	ldr	r1, [pc, #340]	; (ac5c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf4>)
    ab08:	e078      	b.n	abfc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa94>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ab0a:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ab0c:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ab10:	2f00      	cmp	r7, #0
    ab12:	f040 8085 	bne.w	ac20 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xab8>
  assert(exponent >= 0);
    ab16:	2e00      	cmp	r6, #0
    ab18:	f2c0 8085 	blt.w	ac26 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xabe>
  assert(exponent <= 31);
    ab1c:	2e1f      	cmp	r6, #31
    ab1e:	f300 8089 	bgt.w	ac34 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xacc>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ab22:	f04f 0a01 	mov.w	sl, #1
    ab26:	fa0a f006 	lsl.w	r0, sl, r6
    ab2a:	3801      	subs	r0, #1
    ab2c:	f004 ff50 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab30:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ab32:	2000      	movs	r0, #0
    ab34:	f004 ff4c 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab38:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    ab3a:	4650      	mov	r0, sl
    ab3c:	f004 ff48 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab40:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    ab42:	4639      	mov	r1, r7
    ab44:	4620      	mov	r0, r4
    ab46:	f004 ff44 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ab4a:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ab4c:	4651      	mov	r1, sl
    ab4e:	4638      	mov	r0, r7
    ab50:	f004 ff41 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ab54:	4607      	mov	r7, r0
    ab56:	9904      	ldr	r1, [sp, #16]
    ab58:	4620      	mov	r0, r4
    ab5a:	f004 ff48 	bl	f9ee <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ab5e:	4629      	mov	r1, r5
    ab60:	f004 ff37 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ab64:	4601      	mov	r1, r0
    ab66:	4638      	mov	r0, r7
    ab68:	f004 ff37 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ab6c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    ab6e:	4631      	mov	r1, r6
    ab70:	4620      	mov	r0, r4
    ab72:	f004 ff30 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ab76:	4604      	mov	r4, r0
    ab78:	4639      	mov	r1, r7
    ab7a:	9805      	ldr	r0, [sp, #20]
    ab7c:	f004 ff3f 	bl	f9fe <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ab80:	4629      	mov	r1, r5
    ab82:	f004 ff26 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ab86:	4601      	mov	r1, r0
    ab88:	4620      	mov	r0, r4
    ab8a:	f004 ff26 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    ab8e:	9b08      	ldr	r3, [sp, #32]
    ab90:	4418      	add	r0, r3
    const int32_t output =
    ab92:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__b < __a)
    ab94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    ab98:	da53      	bge.n	ac42 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xada>
      return __a;
    ab9a:	ab0b      	add	r3, sp, #44	; 0x2c
      if (__a < __b)
    ab9c:	681a      	ldr	r2, [r3, #0]
    ab9e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    aba2:	db50      	blt.n	ac46 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xade>
    const int32_t clamped_output =
    aba4:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
    aba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aba8:	9903      	ldr	r1, [sp, #12]
    abaa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
  for (int i = 0; i < size; ++i) {
    abae:	f108 0801 	add.w	r8, r8, #1
    abb2:	9b00      	ldr	r3, [sp, #0]
    abb4:	4543      	cmp	r3, r8
    abb6:	f340 8121 	ble.w	adfc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc94>
    const int32_t input = input_data[i] - input_zeropoint;
    abba:	f8cd 800c 	str.w	r8, [sp, #12]
    abbe:	9b06      	ldr	r3, [sp, #24]
    abc0:	f913 2008 	ldrsb.w	r2, [r3, r8]
    abc4:	9b07      	ldr	r3, [sp, #28]
    abc6:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    abc8:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    abcc:	f1b9 0f00 	cmp.w	r9, #0
    abd0:	dd8f      	ble.n	aaf2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x98a>
    abd2:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    abd4:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    abd6:	4593      	cmp	fp, r2
    abd8:	d08e      	beq.n	aaf8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x990>
    abda:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    abdc:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    abde:	465c      	mov	r4, fp
    abe0:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    abe2:	fb02 f305 	mul.w	r3, r2, r5
    abe6:	fb0b 3101 	mla	r1, fp, r1, r3
    abea:	fba2 230b 	umull	r2, r3, r2, fp
    abee:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    abf0:	2a00      	cmp	r2, #0
    abf2:	f173 0100 	sbcs.w	r1, r3, #0
    abf6:	db86      	blt.n	ab06 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x99e>
    abf8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    abfc:	1852      	adds	r2, r2, r1
    abfe:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ac02:	4611      	mov	r1, r2
    ac04:	461c      	mov	r4, r3
    ac06:	2a00      	cmp	r2, #0
    ac08:	f173 0000 	sbcs.w	r0, r3, #0
    ac0c:	f6bf af7d 	bge.w	ab0a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9a2>
    ac10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ac14:	1851      	adds	r1, r2, r1
    ac16:	f04f 0400 	mov.w	r4, #0
    ac1a:	eb43 0404 	adc.w	r4, r3, r4
    ac1e:	e774      	b.n	ab0a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9a2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ac20:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ac24:	e777      	b.n	ab16 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x9ae>
  assert(exponent >= 0);
    ac26:	4b09      	ldr	r3, [pc, #36]	; (ac4c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae4>)
    ac28:	4a09      	ldr	r2, [pc, #36]	; (ac50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    ac2a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ac2e:	4809      	ldr	r0, [pc, #36]	; (ac54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    ac30:	f001 fca2 	bl	c578 <__assert_func>
  assert(exponent <= 31);
    ac34:	4b08      	ldr	r3, [pc, #32]	; (ac58 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaf0>)
    ac36:	4a06      	ldr	r2, [pc, #24]	; (ac50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xae8>)
    ac38:	f240 1167 	movw	r1, #359	; 0x167
    ac3c:	4805      	ldr	r0, [pc, #20]	; (ac54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xaec>)
    ac3e:	f001 fc9b 	bl	c578 <__assert_func>
	return __b;
    ac42:	4b09      	ldr	r3, [pc, #36]	; (ac68 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb00>)
    ac44:	e7aa      	b.n	ab9c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa34>
	return __b;
    ac46:	4b09      	ldr	r3, [pc, #36]	; (ac6c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb04>)
    ac48:	e7ac      	b.n	aba4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa3c>
    ac4a:	bf00      	nop
    ac4c:	00057484 	.word	0x00057484
    ac50:	00057494 	.word	0x00057494
    ac54:	000574ec 	.word	0x000574ec
    ac58:	00057548 	.word	0x00057548
    ac5c:	c0000001 	.word	0xc0000001
    ac60:	0005772c 	.word	0x0005772c
    ac64:	00057730 	.word	0x00057730
    ac68:	00057724 	.word	0x00057724
    ac6c:	00057728 	.word	0x00057728
        reference_ops::Requantize(
    ac70:	4640      	mov	r0, r8
    ac72:	f004 fea3 	bl	f9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    ac76:	9006      	str	r0, [sp, #24]
    ac78:	f8d4 b010 	ldr.w	fp, [r4, #16]
    ac7c:	f8d4 9014 	ldr.w	r9, [r4, #20]
    ac80:	69a3      	ldr	r3, [r4, #24]
    ac82:	9307      	str	r3, [sp, #28]
    ac84:	6823      	ldr	r3, [r4, #0]
    ac86:	9308      	str	r3, [sp, #32]
    ac88:	4628      	mov	r0, r5
    ac8a:	f004 fed0 	bl	fa2e <_ZN6tflite5micro13GetTensorDataIiEEPT_P16TfLiteEvalTensor>
    ac8e:	9009      	str	r0, [sp, #36]	; 0x24
    ac90:	f04f 0800 	mov.w	r8, #0
    ac94:	e051      	b.n	ad3a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbd2>
  int right_shift = shift > 0 ? 0 : -shift;
    ac96:	f1c9 0600 	rsb	r6, r9, #0
    ac9a:	e05e      	b.n	ad5a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbf2>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ac9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    aca0:	d001      	beq.n	aca6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb3e>
    aca2:	2700      	movs	r7, #0
    aca4:	e05d      	b.n	ad62 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbfa>
    aca6:	2701      	movs	r7, #1
    aca8:	e05b      	b.n	ad62 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbfa>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    acaa:	4956      	ldr	r1, [pc, #344]	; (ae04 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc9c>)
    acac:	e069      	b.n	ad82 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc1a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    acae:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    acb0:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    acb4:	2f00      	cmp	r7, #0
    acb6:	d175      	bne.n	ada4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc3c>
  assert(exponent >= 0);
    acb8:	2e00      	cmp	r6, #0
    acba:	db76      	blt.n	adaa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc42>
  assert(exponent <= 31);
    acbc:	2e1f      	cmp	r6, #31
    acbe:	dc7b      	bgt.n	adb8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc50>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    acc0:	f04f 0a01 	mov.w	sl, #1
    acc4:	fa0a f006 	lsl.w	r0, sl, r6
    acc8:	3801      	subs	r0, #1
    acca:	f004 fe81 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    acce:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    acd0:	2000      	movs	r0, #0
    acd2:	f004 fe7d 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    acd6:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    acd8:	4650      	mov	r0, sl
    acda:	f004 fe79 	bl	f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    acde:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
    ace0:	4639      	mov	r1, r7
    ace2:	4620      	mov	r0, r4
    ace4:	f004 fe75 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ace8:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    acea:	4651      	mov	r1, sl
    acec:	4638      	mov	r0, r7
    acee:	f004 fe72 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    acf2:	4607      	mov	r7, r0
    acf4:	9904      	ldr	r1, [sp, #16]
    acf6:	4620      	mov	r0, r4
    acf8:	f004 fe79 	bl	f9ee <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    acfc:	4629      	mov	r1, r5
    acfe:	f004 fe68 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ad02:	4601      	mov	r1, r0
    ad04:	4638      	mov	r0, r7
    ad06:	f004 fe68 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ad0a:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    ad0c:	4631      	mov	r1, r6
    ad0e:	4620      	mov	r0, r4
    ad10:	f004 fe61 	bl	f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ad14:	4604      	mov	r4, r0
    ad16:	4639      	mov	r1, r7
    ad18:	9805      	ldr	r0, [sp, #20]
    ad1a:	f004 fe70 	bl	f9fe <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ad1e:	4629      	mov	r1, r5
    ad20:	f004 fe57 	bl	f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ad24:	4601      	mov	r1, r0
    ad26:	4620      	mov	r0, r4
    ad28:	f004 fe57 	bl	f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>
                                      effective_scale_shift) +
    ad2c:	9b08      	ldr	r3, [sp, #32]
    ad2e:	4418      	add	r0, r3
    output_data[i] = static_cast<output_type>(clamped_output);
    ad30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad32:	9a03      	ldr	r2, [sp, #12]
    ad34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  for (int i = 0; i < size; ++i) {
    ad38:	44d0      	add	r8, sl
    ad3a:	9b00      	ldr	r3, [sp, #0]
    ad3c:	4543      	cmp	r3, r8
    ad3e:	dd5f      	ble.n	ae00 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc98>
    const int32_t input = input_data[i] - input_zeropoint;
    ad40:	f8cd 800c 	str.w	r8, [sp, #12]
    ad44:	9b06      	ldr	r3, [sp, #24]
    ad46:	f913 2008 	ldrsb.w	r2, [r3, r8]
    ad4a:	9b07      	ldr	r3, [sp, #28]
    ad4c:	1ad2      	subs	r2, r2, r3
  int left_shift = shift > 0 ? shift : 0;
    ad4e:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ad52:	f1b9 0f00 	cmp.w	r9, #0
    ad56:	dd9e      	ble.n	ac96 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb2e>
    ad58:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ad5a:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ad5c:	4593      	cmp	fp, r2
    ad5e:	d09d      	beq.n	ac9c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb34>
    ad60:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    ad62:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    ad64:	465c      	mov	r4, fp
    ad66:	17e5      	asrs	r5, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    ad68:	fb02 f305 	mul.w	r3, r2, r5
    ad6c:	fb0b 3101 	mla	r1, fp, r1, r3
    ad70:	fba2 230b 	umull	r2, r3, r2, fp
    ad74:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ad76:	2a00      	cmp	r2, #0
    ad78:	f173 0100 	sbcs.w	r1, r3, #0
    ad7c:	db95      	blt.n	acaa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb42>
    ad7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ad82:	1852      	adds	r2, r2, r1
    ad84:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ad88:	4611      	mov	r1, r2
    ad8a:	461c      	mov	r4, r3
    ad8c:	2a00      	cmp	r2, #0
    ad8e:	f173 0000 	sbcs.w	r0, r3, #0
    ad92:	da8c      	bge.n	acae <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb46>
    ad94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ad98:	1851      	adds	r1, r2, r1
    ad9a:	f04f 0400 	mov.w	r4, #0
    ad9e:	eb43 0404 	adc.w	r4, r3, r4
    ada2:	e784      	b.n	acae <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb46>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ada4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ada8:	e786      	b.n	acb8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb50>
  assert(exponent >= 0);
    adaa:	4b17      	ldr	r3, [pc, #92]	; (ae08 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca0>)
    adac:	4a17      	ldr	r2, [pc, #92]	; (ae0c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca4>)
    adae:	f44f 71b3 	mov.w	r1, #358	; 0x166
    adb2:	4817      	ldr	r0, [pc, #92]	; (ae10 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca8>)
    adb4:	f001 fbe0 	bl	c578 <__assert_func>
  assert(exponent <= 31);
    adb8:	4b16      	ldr	r3, [pc, #88]	; (ae14 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xcac>)
    adba:	4a14      	ldr	r2, [pc, #80]	; (ae0c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca4>)
    adbc:	f240 1167 	movw	r1, #359	; 0x167
    adc0:	4813      	ldr	r0, [pc, #76]	; (ae10 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca8>)
    adc2:	f001 fbd9 	bl	c578 <__assert_func>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
    adc6:	f8d6 8014 	ldr.w	r8, [r6, #20]
    adca:	4638      	mov	r0, r7
    adcc:	f7fd fe96 	bl	8afc <TfLiteTypeGetName>
    add0:	4604      	mov	r4, r0
    add2:	7a28      	ldrb	r0, [r5, #8]
    add4:	f7fd fe92 	bl	8afc <TfLiteTypeGetName>
    add8:	4603      	mov	r3, r0
    adda:	4622      	mov	r2, r4
    addc:	490e      	ldr	r1, [pc, #56]	; (ae18 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xcb0>)
    adde:	4630      	mov	r0, r6
    ade0:	47c0      	blx	r8
    return kTfLiteError;
    ade2:	2701      	movs	r7, #1
}
    ade4:	4638      	mov	r0, r7
    ade6:	b025      	add	sp, #148	; 0x94
    ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return kTfLiteOk;
    adec:	2700      	movs	r7, #0
    adee:	e7f9      	b.n	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
        return kTfLiteOk;
    adf0:	2700      	movs	r7, #0
    adf2:	e7f7      	b.n	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
        return kTfLiteOk;
    adf4:	2700      	movs	r7, #0
    adf6:	e7f5      	b.n	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
  return kTfLiteOk;
    adf8:	2700      	movs	r7, #0
    adfa:	e7f3      	b.n	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    adfc:	2700      	movs	r7, #0
    adfe:	e7f1      	b.n	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    ae00:	2700      	movs	r7, #0
    ae02:	e7ef      	b.n	ade4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xc7c>
    ae04:	c0000001 	.word	0xc0000001
    ae08:	00057484 	.word	0x00057484
    ae0c:	00057494 	.word	0x00057494
    ae10:	000574ec 	.word	0x000574ec
    ae14:	00057548 	.word	0x00057548
    ae18:	00057334 	.word	0x00057334

0000ae1c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    ae1c:	4b03      	ldr	r3, [pc, #12]	; (ae2c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    ae1e:	4a04      	ldr	r2, [pc, #16]	; (ae30 <z_device_state_init+0x14>)
    ae20:	4293      	cmp	r3, r2
    ae22:	d201      	bcs.n	ae28 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    ae24:	3318      	adds	r3, #24
    ae26:	e7fa      	b.n	ae1e <z_device_state_init+0x2>
	}
}
    ae28:	4770      	bx	lr
    ae2a:	bf00      	nop
    ae2c:	00010c9c 	.word	0x00010c9c
    ae30:	00010d2c 	.word	0x00010d2c

0000ae34 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    ae34:	b570      	push	{r4, r5, r6, lr}
    ae36:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ae38:	4b11      	ldr	r3, [pc, #68]	; (ae80 <z_sys_init_run_level+0x4c>)
    ae3a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ae3e:	e009      	b.n	ae54 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    ae40:	4240      	negs	r0, r0
    ae42:	e017      	b.n	ae74 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    ae44:	68eb      	ldr	r3, [r5, #12]
    ae46:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    ae48:	68ea      	ldr	r2, [r5, #12]
    ae4a:	7853      	ldrb	r3, [r2, #1]
    ae4c:	f043 0301 	orr.w	r3, r3, #1
    ae50:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ae52:	3408      	adds	r4, #8
    ae54:	1c73      	adds	r3, r6, #1
    ae56:	4a0a      	ldr	r2, [pc, #40]	; (ae80 <z_sys_init_run_level+0x4c>)
    ae58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae5c:	42a3      	cmp	r3, r4
    ae5e:	d90d      	bls.n	ae7c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    ae60:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    ae62:	6823      	ldr	r3, [r4, #0]
    ae64:	4628      	mov	r0, r5
    ae66:	4798      	blx	r3
		if (dev != NULL) {
    ae68:	2d00      	cmp	r5, #0
    ae6a:	d0f2      	beq.n	ae52 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    ae6c:	2800      	cmp	r0, #0
    ae6e:	d0eb      	beq.n	ae48 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    ae70:	2800      	cmp	r0, #0
    ae72:	dbe5      	blt.n	ae40 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    ae74:	28ff      	cmp	r0, #255	; 0xff
    ae76:	dde5      	ble.n	ae44 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    ae78:	20ff      	movs	r0, #255	; 0xff
    ae7a:	e7e3      	b.n	ae44 <z_sys_init_run_level+0x10>
		}
	}
}
    ae7c:	bd70      	pop	{r4, r5, r6, pc}
    ae7e:	bf00      	nop
    ae80:	00057754 	.word	0x00057754

0000ae84 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    ae84:	4b01      	ldr	r3, [pc, #4]	; (ae8c <z_impl_z_errno+0x8>)
    ae86:	6898      	ldr	r0, [r3, #8]
}
    ae88:	3094      	adds	r0, #148	; 0x94
    ae8a:	4770      	bx	lr
    ae8c:	2001d6d8 	.word	0x2001d6d8

0000ae90 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    ae90:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae92:	b089      	sub	sp, #36	; 0x24
    ae94:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    ae96:	4b15      	ldr	r3, [pc, #84]	; (aeec <init_idle_thread+0x5c>)
    ae98:	25b0      	movs	r5, #176	; 0xb0
    ae9a:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    ae9e:	4b14      	ldr	r3, [pc, #80]	; (aef0 <init_idle_thread+0x60>)
    aea0:	f44f 76b0 	mov.w	r6, #352	; 0x160
    aea4:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    aea8:	af06      	add	r7, sp, #24
    aeaa:	4603      	mov	r3, r0
    aeac:	4a11      	ldr	r2, [pc, #68]	; (aef4 <init_idle_thread+0x64>)
    aeae:	2108      	movs	r1, #8
    aeb0:	4638      	mov	r0, r7
    aeb2:	f002 fe33 	bl	db1c <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    aeb6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    aeba:	480f      	ldr	r0, [pc, #60]	; (aef8 <init_idle_thread+0x68>)
    aebc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    aec0:	9705      	str	r7, [sp, #20]
    aec2:	2301      	movs	r3, #1
    aec4:	9304      	str	r3, [sp, #16]
    aec6:	230f      	movs	r3, #15
    aec8:	9303      	str	r3, [sp, #12]
    aeca:	2300      	movs	r3, #0
    aecc:	9302      	str	r3, [sp, #8]
    aece:	9301      	str	r3, [sp, #4]
    aed0:	9400      	str	r4, [sp, #0]
    aed2:	4b0a      	ldr	r3, [pc, #40]	; (aefc <init_idle_thread+0x6c>)
    aed4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    aed8:	4631      	mov	r1, r6
    aeda:	4628      	mov	r0, r5
    aedc:	f000 f948 	bl	b170 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    aee0:	7b6b      	ldrb	r3, [r5, #13]
    aee2:	f023 0304 	bic.w	r3, r3, #4
    aee6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    aee8:	b009      	add	sp, #36	; 0x24
    aeea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aeec:	20000390 	.word	0x20000390
    aef0:	20025940 	.word	0x20025940
    aef4:	0005776c 	.word	0x0005776c
    aef8:	2001d6d8 	.word	0x2001d6d8
    aefc:	0000fcad 	.word	0x0000fcad

0000af00 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    af00:	b570      	push	{r4, r5, r6, lr}
    af02:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    af04:	f000 fe00 	bl	bb08 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    af08:	4d1b      	ldr	r5, [pc, #108]	; (af78 <prepare_multithreading+0x78>)
    af0a:	4b1c      	ldr	r3, [pc, #112]	; (af7c <prepare_multithreading+0x7c>)
    af0c:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    af0e:	4b1c      	ldr	r3, [pc, #112]	; (af80 <prepare_multithreading+0x80>)
    af10:	9305      	str	r3, [sp, #20]
    af12:	2301      	movs	r3, #1
    af14:	9304      	str	r3, [sp, #16]
    af16:	2400      	movs	r4, #0
    af18:	9403      	str	r4, [sp, #12]
    af1a:	9402      	str	r4, [sp, #8]
    af1c:	9401      	str	r4, [sp, #4]
    af1e:	9400      	str	r4, [sp, #0]
    af20:	4b18      	ldr	r3, [pc, #96]	; (af84 <prepare_multithreading+0x84>)
    af22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    af26:	4918      	ldr	r1, [pc, #96]	; (af88 <prepare_multithreading+0x88>)
    af28:	4628      	mov	r0, r5
    af2a:	f000 f921 	bl	b170 <z_setup_new_thread>
    af2e:	4606      	mov	r6, r0
    af30:	7b6b      	ldrb	r3, [r5, #13]
    af32:	f023 0304 	bic.w	r3, r3, #4
    af36:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    af38:	4628      	mov	r0, r5
    af3a:	f004 ff21 	bl	fd80 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    af3e:	2c00      	cmp	r4, #0
    af40:	dd02      	ble.n	af48 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    af42:	4630      	mov	r0, r6
    af44:	b006      	add	sp, #24
    af46:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    af48:	4620      	mov	r0, r4
    af4a:	f7ff ffa1 	bl	ae90 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    af4e:	4b0f      	ldr	r3, [pc, #60]	; (af8c <prepare_multithreading+0x8c>)
    af50:	22b0      	movs	r2, #176	; 0xb0
    af52:	fb02 3204 	mla	r2, r2, r4, r3
    af56:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    af5a:	4b08      	ldr	r3, [pc, #32]	; (af7c <prepare_multithreading+0x7c>)
    af5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    af60:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    af62:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    af64:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    af68:	4a09      	ldr	r2, [pc, #36]	; (af90 <prepare_multithreading+0x90>)
    af6a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    af6e:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    af72:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    af74:	3401      	adds	r4, #1
    af76:	e7e2      	b.n	af3e <prepare_multithreading+0x3e>
    af78:	20000440 	.word	0x20000440
    af7c:	2001d6d8 	.word	0x2001d6d8
    af80:	00057778 	.word	0x00057778
    af84:	0000af95 	.word	0x0000af95
    af88:	2001d920 	.word	0x2001d920
    af8c:	20000390 	.word	0x20000390
    af90:	20025aa0 	.word	0x20025aa0

0000af94 <bg_thread_main>:
{
    af94:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    af96:	4b0b      	ldr	r3, [pc, #44]	; (afc4 <bg_thread_main+0x30>)
    af98:	2201      	movs	r2, #1
    af9a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    af9c:	2002      	movs	r0, #2
    af9e:	f7ff ff49 	bl	ae34 <z_sys_init_run_level>
	boot_banner();
    afa2:	f001 f83b 	bl	c01c <boot_banner>
	z_cpp_init_static();
    afa6:	f003 f9bf 	bl	e328 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    afaa:	2003      	movs	r0, #3
    afac:	f7ff ff42 	bl	ae34 <z_sys_init_run_level>
	z_init_static_threads();
    afb0:	f000 f942 	bl	b238 <z_init_static_threads>
	main();
    afb4:	f002 fd22 	bl	d9fc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    afb8:	4a03      	ldr	r2, [pc, #12]	; (afc8 <bg_thread_main+0x34>)
    afba:	7b13      	ldrb	r3, [r2, #12]
    afbc:	f023 0301 	bic.w	r3, r3, #1
    afc0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    afc2:	bd08      	pop	{r3, pc}
    afc4:	2001d747 	.word	0x2001d747
    afc8:	20000440 	.word	0x20000440

0000afcc <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    afcc:	b508      	push	{r3, lr}
    afce:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    afd0:	4a01      	ldr	r2, [pc, #4]	; (afd8 <switch_to_main_thread+0xc>)
    afd2:	4802      	ldr	r0, [pc, #8]	; (afdc <switch_to_main_thread+0x10>)
    afd4:	f7f8 ff1e 	bl	3e14 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    afd8:	0000af95 	.word	0x0000af95
    afdc:	20000440 	.word	0x20000440

0000afe0 <z_bss_zero>:
{
    afe0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    afe2:	4803      	ldr	r0, [pc, #12]	; (aff0 <z_bss_zero+0x10>)
    afe4:	4a03      	ldr	r2, [pc, #12]	; (aff4 <z_bss_zero+0x14>)
    afe6:	1a12      	subs	r2, r2, r0
    afe8:	2100      	movs	r1, #0
    afea:	f005 f84c 	bl	10086 <memset>
}
    afee:	bd08      	pop	{r3, pc}
    aff0:	20000370 	.word	0x20000370
    aff4:	2001d908 	.word	0x2001d908

0000aff8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    aff8:	b500      	push	{lr}
    affa:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    affc:	4b1c      	ldr	r3, [pc, #112]	; (b070 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    affe:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    b002:	4c1c      	ldr	r4, [pc, #112]	; (b074 <z_cstart+0x7c>)
    b004:	6963      	ldr	r3, [r4, #20]
    b006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b00a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b00c:	23e0      	movs	r3, #224	; 0xe0
    b00e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    b012:	2500      	movs	r5, #0
    b014:	77e5      	strb	r5, [r4, #31]
    b016:	7625      	strb	r5, [r4, #24]
    b018:	7665      	strb	r5, [r4, #25]
    b01a:	76a5      	strb	r5, [r4, #26]
    b01c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b020:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b022:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    b026:	6263      	str	r3, [r4, #36]	; 0x24
    b028:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    b02c:	f7f9 f84a 	bl	40c4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    b030:	f7f8 fdd6 	bl	3be0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b034:	f04f 33ff 	mov.w	r3, #4294967295
    b038:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b03a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b03c:	f7f9 f94c 	bl	42d8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b040:	f7f9 f8e6 	bl	4210 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    b044:	2401      	movs	r4, #1
    b046:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    b04a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    b04e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    b050:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    b052:	4b09      	ldr	r3, [pc, #36]	; (b078 <z_cstart+0x80>)
    b054:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b058:	f7ff fee0 	bl	ae1c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    b05c:	4628      	mov	r0, r5
    b05e:	f7ff fee9 	bl	ae34 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b062:	4620      	mov	r0, r4
    b064:	f7ff fee6 	bl	ae34 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    b068:	f7ff ff4a 	bl	af00 <prepare_multithreading>
    b06c:	f7ff ffae 	bl	afcc <switch_to_main_thread>
    b070:	200262c0 	.word	0x200262c0
    b074:	e000ed00 	.word	0xe000ed00
    b078:	2001d6d8 	.word	0x2001d6d8

0000b07c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    b07c:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b07e:	4c06      	ldr	r4, [pc, #24]	; (b098 <init_mem_slab_module+0x1c>)
	int rc = 0;
    b080:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b082:	4b06      	ldr	r3, [pc, #24]	; (b09c <init_mem_slab_module+0x20>)
    b084:	429c      	cmp	r4, r3
    b086:	d206      	bcs.n	b096 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    b088:	4620      	mov	r0, r4
    b08a:	f004 fd90 	bl	fbae <create_free_list>
		if (rc < 0) {
    b08e:	2800      	cmp	r0, #0
    b090:	db01      	blt.n	b096 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b092:	3420      	adds	r4, #32
    b094:	e7f5      	b.n	b082 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    b096:	bd10      	pop	{r4, pc}
    b098:	200002e4 	.word	0x200002e4
    b09c:	200002e4 	.word	0x200002e4

0000b0a0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    b0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0a2:	b083      	sub	sp, #12
    b0a4:	460c      	mov	r4, r1
    b0a6:	461f      	mov	r7, r3
    b0a8:	f04f 0320 	mov.w	r3, #32
    b0ac:	f3ef 8111 	mrs	r1, BASEPRI
    b0b0:	f383 8812 	msr	BASEPRI_MAX, r3
    b0b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    b0b8:	6983      	ldr	r3, [r0, #24]
    b0ba:	b16b      	cbz	r3, b0d8 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    b0bc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    b0be:	6983      	ldr	r3, [r0, #24]
    b0c0:	681b      	ldr	r3, [r3, #0]
    b0c2:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    b0c4:	69c3      	ldr	r3, [r0, #28]
    b0c6:	3301      	adds	r3, #1
    b0c8:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    b0ca:	2000      	movs	r0, #0
	__asm__ volatile(
    b0cc:	f381 8811 	msr	BASEPRI, r1
    b0d0:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    b0d4:	b003      	add	sp, #12
    b0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0d8:	4616      	mov	r6, r2
    b0da:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    b0de:	ea56 0307 	orrs.w	r3, r6, r7
    b0e2:	d104      	bne.n	b0ee <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    b0e4:	2300      	movs	r3, #0
    b0e6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    b0e8:	f06f 000b 	mvn.w	r0, #11
    b0ec:	e7ee      	b.n	b0cc <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    b0ee:	e9cd 6700 	strd	r6, r7, [sp]
    b0f2:	4602      	mov	r2, r0
    b0f4:	4628      	mov	r0, r5
    b0f6:	f000 fbdd 	bl	b8b4 <z_pend_curr>
		if (result == 0) {
    b0fa:	2800      	cmp	r0, #0
    b0fc:	d1ea      	bne.n	b0d4 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    b0fe:	4b02      	ldr	r3, [pc, #8]	; (b108 <k_mem_slab_alloc+0x68>)
    b100:	689b      	ldr	r3, [r3, #8]
    b102:	695b      	ldr	r3, [r3, #20]
    b104:	6023      	str	r3, [r4, #0]
		return result;
    b106:	e7e5      	b.n	b0d4 <k_mem_slab_alloc+0x34>
    b108:	2001d6d8 	.word	0x2001d6d8

0000b10c <z_thread_monitor_exit>:
	__asm__ volatile(
    b10c:	f04f 0320 	mov.w	r3, #32
    b110:	f3ef 8111 	mrs	r1, BASEPRI
    b114:	f383 8812 	msr	BASEPRI_MAX, r3
    b118:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    b11c:	4b0a      	ldr	r3, [pc, #40]	; (b148 <z_thread_monitor_exit+0x3c>)
    b11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b120:	4283      	cmp	r3, r0
    b122:	d104      	bne.n	b12e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    b124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b126:	4b08      	ldr	r3, [pc, #32]	; (b148 <z_thread_monitor_exit+0x3c>)
    b128:	629a      	str	r2, [r3, #40]	; 0x28
    b12a:	e007      	b.n	b13c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    b12c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    b12e:	b113      	cbz	r3, b136 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    b130:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    b132:	4282      	cmp	r2, r0
    b134:	d1fa      	bne.n	b12c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    b136:	b10b      	cbz	r3, b13c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    b138:	6f02      	ldr	r2, [r0, #112]	; 0x70
    b13a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    b13c:	f381 8811 	msr	BASEPRI, r1
    b140:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    b144:	4770      	bx	lr
    b146:	bf00      	nop
    b148:	2001d6d8 	.word	0x2001d6d8

0000b14c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    b14c:	b538      	push	{r3, r4, r5, lr}
    b14e:	4614      	mov	r4, r2
    b150:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b152:	ea54 0305 	orrs.w	r3, r4, r5
    b156:	d102      	bne.n	b15e <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    b158:	f004 fd93 	bl	fc82 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    b15c:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b15e:	462b      	mov	r3, r5
    b160:	4902      	ldr	r1, [pc, #8]	; (b16c <schedule_new_thread+0x20>)
    b162:	3018      	adds	r0, #24
    b164:	f000 fe2e 	bl	bdc4 <z_add_timeout>
    b168:	e7f8      	b.n	b15c <schedule_new_thread+0x10>
    b16a:	bf00      	nop
    b16c:	0000fdb9 	.word	0x0000fdb9

0000b170 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b174:	b085      	sub	sp, #20
    b176:	4604      	mov	r4, r0
    b178:	460f      	mov	r7, r1
    b17a:	4615      	mov	r5, r2
    b17c:	461e      	mov	r6, r3
    b17e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    b182:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    b186:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    b18a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    b18e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    b192:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    b194:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    b196:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b198:	2204      	movs	r2, #4
    b19a:	9911      	ldr	r1, [sp, #68]	; 0x44
    b19c:	f004 fd75 	bl	fc8a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    b1a0:	462a      	mov	r2, r5
    b1a2:	4639      	mov	r1, r7
    b1a4:	4620      	mov	r0, r4
    b1a6:	f004 fd54 	bl	fc52 <setup_thread_stack>
    b1aa:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b1ac:	f8cd 8008 	str.w	r8, [sp, #8]
    b1b0:	f8cd 9004 	str.w	r9, [sp, #4]
    b1b4:	f8cd a000 	str.w	sl, [sp]
    b1b8:	4633      	mov	r3, r6
    b1ba:	4602      	mov	r2, r0
    b1bc:	4639      	mov	r1, r7
    b1be:	4620      	mov	r0, r4
    b1c0:	f7f8 fdd8 	bl	3d74 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    b1c4:	2300      	movs	r3, #0
    b1c6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    b1c8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    b1ca:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    b1ce:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    b1d2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    b1d6:	f04f 0320 	mov.w	r3, #32
    b1da:	f3ef 8211 	mrs	r2, BASEPRI
    b1de:	f383 8812 	msr	BASEPRI_MAX, r3
    b1e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    b1e6:	4b13      	ldr	r3, [pc, #76]	; (b234 <z_setup_new_thread+0xc4>)
    b1e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    b1ea:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    b1ec:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    b1ee:	f382 8811 	msr	BASEPRI, r2
    b1f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    b1f6:	f1bb 0f00 	cmp.w	fp, #0
    b1fa:	d013      	beq.n	b224 <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    b1fc:	221f      	movs	r2, #31
    b1fe:	4659      	mov	r1, fp
    b200:	f104 0074 	add.w	r0, r4, #116	; 0x74
    b204:	f005 f8b5 	bl	10372 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    b208:	2300      	movs	r3, #0
    b20a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    b20e:	4b09      	ldr	r3, [pc, #36]	; (b234 <z_setup_new_thread+0xc4>)
    b210:	689b      	ldr	r3, [r3, #8]
    b212:	b15b      	cbz	r3, b22c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    b214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    b218:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    b21c:	4628      	mov	r0, r5
    b21e:	b005      	add	sp, #20
    b220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    b224:	2300      	movs	r3, #0
    b226:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    b22a:	e7f0      	b.n	b20e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    b22c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    b230:	e7f4      	b.n	b21c <z_setup_new_thread+0xac>
    b232:	bf00      	nop
    b234:	2001d6d8 	.word	0x2001d6d8

0000b238 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    b238:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    b23c:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    b23e:	4c23      	ldr	r4, [pc, #140]	; (b2cc <z_init_static_threads+0x94>)
    b240:	4b23      	ldr	r3, [pc, #140]	; (b2d0 <z_init_static_threads+0x98>)
    b242:	429c      	cmp	r4, r3
    b244:	d215      	bcs.n	b272 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    b246:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b248:	9305      	str	r3, [sp, #20]
    b24a:	6a23      	ldr	r3, [r4, #32]
    b24c:	9304      	str	r3, [sp, #16]
    b24e:	69e3      	ldr	r3, [r4, #28]
    b250:	9303      	str	r3, [sp, #12]
    b252:	69a3      	ldr	r3, [r4, #24]
    b254:	9302      	str	r3, [sp, #8]
    b256:	6963      	ldr	r3, [r4, #20]
    b258:	9301      	str	r3, [sp, #4]
    b25a:	6923      	ldr	r3, [r4, #16]
    b25c:	9300      	str	r3, [sp, #0]
    b25e:	68e3      	ldr	r3, [r4, #12]
    b260:	68a2      	ldr	r2, [r4, #8]
    b262:	6861      	ldr	r1, [r4, #4]
    b264:	6820      	ldr	r0, [r4, #0]
    b266:	f7ff ff83 	bl	b170 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    b26a:	6823      	ldr	r3, [r4, #0]
    b26c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    b26e:	3430      	adds	r4, #48	; 0x30
    b270:	e7e6      	b.n	b240 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    b272:	f000 f9d7 	bl	b624 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    b276:	4c15      	ldr	r4, [pc, #84]	; (b2cc <z_init_static_threads+0x94>)
    b278:	e01b      	b.n	b2b2 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    b27a:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    b27c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b280:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    b284:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    b288:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    b28c:	03d8      	lsls	r0, r3, #15
    b28e:	f240 35e7 	movw	r5, #999	; 0x3e7
    b292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b296:	2300      	movs	r3, #0
    b298:	1940      	adds	r0, r0, r5
    b29a:	f04f 0500 	mov.w	r5, #0
    b29e:	eb45 0101 	adc.w	r1, r5, r1
    b2a2:	f7f5 ff45 	bl	1130 <__aeabi_uldivmod>
    b2a6:	4602      	mov	r2, r0
    b2a8:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    b2aa:	4630      	mov	r0, r6
    b2ac:	f7ff ff4e 	bl	b14c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    b2b0:	3430      	adds	r4, #48	; 0x30
    b2b2:	4b07      	ldr	r3, [pc, #28]	; (b2d0 <z_init_static_threads+0x98>)
    b2b4:	429c      	cmp	r4, r3
    b2b6:	d204      	bcs.n	b2c2 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    b2be:	d0f7      	beq.n	b2b0 <z_init_static_threads+0x78>
    b2c0:	e7db      	b.n	b27a <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    b2c2:	f000 fbad 	bl	ba20 <k_sched_unlock>
}
    b2c6:	b006      	add	sp, #24
    b2c8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    b2cc:	200002e4 	.word	0x200002e4
    b2d0:	200002e4 	.word	0x200002e4

0000b2d4 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    b2d4:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    b2d6:	f004 fe4e 	bl	ff76 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    b2da:	4b04      	ldr	r3, [pc, #16]	; (b2ec <pm_save_idle+0x18>)
    b2dc:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    b2de:	f7f8 fb45 	bl	396c <pm_system_suspend>
    b2e2:	b100      	cbz	r0, b2e6 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    b2e4:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    b2e6:	f7f8 fc81 	bl	3bec <arch_cpu_idle>
    b2ea:	e7fb      	b.n	b2e4 <pm_save_idle+0x10>
    b2ec:	2001d6d8 	.word	0x2001d6d8

0000b2f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b2f4:	b083      	sub	sp, #12
    b2f6:	4604      	mov	r4, r0
    b2f8:	461d      	mov	r5, r3
	__asm__ volatile(
    b2fa:	f04f 0320 	mov.w	r3, #32
    b2fe:	f3ef 8711 	mrs	r7, BASEPRI
    b302:	f383 8812 	msr	BASEPRI_MAX, r3
    b306:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b30a:	68c1      	ldr	r1, [r0, #12]
    b30c:	b999      	cbnz	r1, b336 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    b30e:	2900      	cmp	r1, #0
    b310:	d14f      	bne.n	b3b2 <z_impl_k_mutex_lock+0xc2>
    b312:	4b3a      	ldr	r3, [pc, #232]	; (b3fc <z_impl_k_mutex_lock+0x10c>)
    b314:	689b      	ldr	r3, [r3, #8]
    b316:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b31a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    b31c:	3101      	adds	r1, #1
    b31e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    b320:	4b36      	ldr	r3, [pc, #216]	; (b3fc <z_impl_k_mutex_lock+0x10c>)
    b322:	689b      	ldr	r3, [r3, #8]
    b324:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    b326:	f387 8811 	msr	BASEPRI, r7
    b32a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    b32e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b330:	b003      	add	sp, #12
    b332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b336:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b338:	6882      	ldr	r2, [r0, #8]
    b33a:	4b30      	ldr	r3, [pc, #192]	; (b3fc <z_impl_k_mutex_lock+0x10c>)
    b33c:	689b      	ldr	r3, [r3, #8]
    b33e:	429a      	cmp	r2, r3
    b340:	d0e5      	beq.n	b30e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b342:	ea55 0106 	orrs.w	r1, r5, r6
    b346:	bf0c      	ite	eq
    b348:	f04f 0801 	moveq.w	r8, #1
    b34c:	f04f 0800 	movne.w	r8, #0
    b350:	d031      	beq.n	b3b6 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    b352:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b356:	4649      	mov	r1, r9
    b358:	f993 000e 	ldrsb.w	r0, [r3, #14]
    b35c:	f004 fcb2 	bl	fcc4 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b360:	4581      	cmp	r9, r0
    b362:	dc2f      	bgt.n	b3c4 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    b364:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b368:	9600      	str	r6, [sp, #0]
    b36a:	9501      	str	r5, [sp, #4]
    b36c:	4622      	mov	r2, r4
    b36e:	4639      	mov	r1, r7
    b370:	4823      	ldr	r0, [pc, #140]	; (b400 <z_impl_k_mutex_lock+0x110>)
    b372:	f000 fa9f 	bl	b8b4 <z_pend_curr>
	if (got_mutex == 0) {
    b376:	2800      	cmp	r0, #0
    b378:	d0da      	beq.n	b330 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    b37a:	f04f 0320 	mov.w	r3, #32
    b37e:	f3ef 8511 	mrs	r5, BASEPRI
    b382:	f383 8812 	msr	BASEPRI_MAX, r3
    b386:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b38a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b38c:	429c      	cmp	r4, r3
    b38e:	d01f      	beq.n	b3d0 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b390:	b1f3      	cbz	r3, b3d0 <z_impl_k_mutex_lock+0xe0>
    b392:	6921      	ldr	r1, [r4, #16]
    b394:	f993 000e 	ldrsb.w	r0, [r3, #14]
    b398:	f004 fc94 	bl	fcc4 <new_prio_for_inheritance>
    b39c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b39e:	4620      	mov	r0, r4
    b3a0:	f004 fc9b 	bl	fcda <adjust_owner_prio>
    b3a4:	b9b0      	cbnz	r0, b3d4 <z_impl_k_mutex_lock+0xe4>
    b3a6:	f1b9 0f00 	cmp.w	r9, #0
    b3aa:	d015      	beq.n	b3d8 <z_impl_k_mutex_lock+0xe8>
    b3ac:	f04f 0801 	mov.w	r8, #1
    b3b0:	e012      	b.n	b3d8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    b3b2:	6923      	ldr	r3, [r4, #16]
    b3b4:	e7b1      	b.n	b31a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    b3b6:	f387 8811 	msr	BASEPRI, r7
    b3ba:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    b3be:	f06f 000f 	mvn.w	r0, #15
    b3c2:	e7b5      	b.n	b330 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    b3c4:	4601      	mov	r1, r0
    b3c6:	4620      	mov	r0, r4
    b3c8:	f004 fc87 	bl	fcda <adjust_owner_prio>
    b3cc:	4681      	mov	r9, r0
    b3ce:	e7cb      	b.n	b368 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b3d0:	6921      	ldr	r1, [r4, #16]
    b3d2:	e7e4      	b.n	b39e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b3d4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    b3d8:	f1b8 0f00 	cmp.w	r8, #0
    b3dc:	d106      	bne.n	b3ec <z_impl_k_mutex_lock+0xfc>
    b3de:	f385 8811 	msr	BASEPRI, r5
    b3e2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    b3e6:	f06f 000a 	mvn.w	r0, #10
    b3ea:	e7a1      	b.n	b330 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    b3ec:	4629      	mov	r1, r5
    b3ee:	4804      	ldr	r0, [pc, #16]	; (b400 <z_impl_k_mutex_lock+0x110>)
    b3f0:	f000 f8fc 	bl	b5ec <z_reschedule>
	return -EAGAIN;
    b3f4:	f06f 000a 	mvn.w	r0, #10
    b3f8:	e79a      	b.n	b330 <z_impl_k_mutex_lock+0x40>
    b3fa:	bf00      	nop
    b3fc:	2001d6d8 	.word	0x2001d6d8
    b400:	2001d704 	.word	0x2001d704

0000b404 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b404:	6882      	ldr	r2, [r0, #8]
    b406:	2a00      	cmp	r2, #0
    b408:	d035      	beq.n	b476 <z_impl_k_mutex_unlock+0x72>
{
    b40a:	b538      	push	{r3, r4, r5, lr}
    b40c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b40e:	4b1d      	ldr	r3, [pc, #116]	; (b484 <z_impl_k_mutex_unlock+0x80>)
    b410:	689b      	ldr	r3, [r3, #8]
    b412:	429a      	cmp	r2, r3
    b414:	d132      	bne.n	b47c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    b416:	7bda      	ldrb	r2, [r3, #15]
    b418:	3a01      	subs	r2, #1
    b41a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    b41c:	68c3      	ldr	r3, [r0, #12]
    b41e:	2b01      	cmp	r3, #1
    b420:	d905      	bls.n	b42e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    b422:	3b01      	subs	r3, #1
    b424:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    b426:	f000 fafb 	bl	ba20 <k_sched_unlock>

	return 0;
    b42a:	2000      	movs	r0, #0
}
    b42c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b42e:	f04f 0320 	mov.w	r3, #32
    b432:	f3ef 8511 	mrs	r5, BASEPRI
    b436:	f383 8812 	msr	BASEPRI_MAX, r3
    b43a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b43e:	6901      	ldr	r1, [r0, #16]
    b440:	f004 fc4b 	bl	fcda <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    b444:	4620      	mov	r0, r4
    b446:	f004 fd36 	bl	feb6 <z_unpend_first_thread>
	mutex->owner = new_owner;
    b44a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    b44c:	b160      	cbz	r0, b468 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    b44e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b452:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b454:	2300      	movs	r3, #0
    b456:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    b45a:	f004 fc91 	bl	fd80 <z_ready_thread>
		z_reschedule(&lock, key);
    b45e:	4629      	mov	r1, r5
    b460:	4809      	ldr	r0, [pc, #36]	; (b488 <z_impl_k_mutex_unlock+0x84>)
    b462:	f000 f8c3 	bl	b5ec <z_reschedule>
    b466:	e7de      	b.n	b426 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    b468:	2300      	movs	r3, #0
    b46a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    b46c:	f385 8811 	msr	BASEPRI, r5
    b470:	f3bf 8f6f 	isb	sy
    b474:	e7d7      	b.n	b426 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    b476:	f06f 0015 	mvn.w	r0, #21
}
    b47a:	4770      	bx	lr
		return -EPERM;
    b47c:	f04f 30ff 	mov.w	r0, #4294967295
    b480:	e7d4      	b.n	b42c <z_impl_k_mutex_unlock+0x28>
    b482:	bf00      	nop
    b484:	2001d6d8 	.word	0x2001d6d8
    b488:	2001d704 	.word	0x2001d704

0000b48c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b48c:	b538      	push	{r3, r4, r5, lr}
    b48e:	4604      	mov	r4, r0
	__asm__ volatile(
    b490:	f04f 0320 	mov.w	r3, #32
    b494:	f3ef 8511 	mrs	r5, BASEPRI
    b498:	f383 8812 	msr	BASEPRI_MAX, r3
    b49c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b4a0:	f004 fd09 	bl	feb6 <z_unpend_first_thread>

	if (thread != NULL) {
    b4a4:	b148      	cbz	r0, b4ba <z_impl_k_sem_give+0x2e>
    b4a6:	2200      	movs	r2, #0
    b4a8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b4ac:	f004 fc68 	bl	fd80 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b4b0:	4629      	mov	r1, r5
    b4b2:	4807      	ldr	r0, [pc, #28]	; (b4d0 <z_impl_k_sem_give+0x44>)
    b4b4:	f000 f89a 	bl	b5ec <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b4b8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b4ba:	68a3      	ldr	r3, [r4, #8]
    b4bc:	68e2      	ldr	r2, [r4, #12]
    b4be:	4293      	cmp	r3, r2
    b4c0:	d003      	beq.n	b4ca <z_impl_k_sem_give+0x3e>
    b4c2:	2201      	movs	r2, #1
    b4c4:	4413      	add	r3, r2
    b4c6:	60a3      	str	r3, [r4, #8]
}
    b4c8:	e7f2      	b.n	b4b0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b4ca:	2200      	movs	r2, #0
    b4cc:	e7fa      	b.n	b4c4 <z_impl_k_sem_give+0x38>
    b4ce:	bf00      	nop
    b4d0:	2001d708 	.word	0x2001d708

0000b4d4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b4d4:	b530      	push	{r4, r5, lr}
    b4d6:	b083      	sub	sp, #12
    b4d8:	461d      	mov	r5, r3
    b4da:	f04f 0320 	mov.w	r3, #32
    b4de:	f3ef 8111 	mrs	r1, BASEPRI
    b4e2:	f383 8812 	msr	BASEPRI_MAX, r3
    b4e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b4ea:	6883      	ldr	r3, [r0, #8]
    b4ec:	b143      	cbz	r3, b500 <z_impl_k_sem_take+0x2c>
		sem->count--;
    b4ee:	3b01      	subs	r3, #1
    b4f0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    b4f2:	f381 8811 	msr	BASEPRI, r1
    b4f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b4fa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b4fc:	b003      	add	sp, #12
    b4fe:	bd30      	pop	{r4, r5, pc}
    b500:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b502:	ea54 0305 	orrs.w	r3, r4, r5
    b506:	d006      	beq.n	b516 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b508:	e9cd 4500 	strd	r4, r5, [sp]
    b50c:	4602      	mov	r2, r0
    b50e:	4805      	ldr	r0, [pc, #20]	; (b524 <z_impl_k_sem_take+0x50>)
    b510:	f000 f9d0 	bl	b8b4 <z_pend_curr>
	return ret;
    b514:	e7f2      	b.n	b4fc <z_impl_k_sem_take+0x28>
    b516:	f381 8811 	msr	BASEPRI, r1
    b51a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b51e:	f06f 000f 	mvn.w	r0, #15
    b522:	e7eb      	b.n	b4fc <z_impl_k_sem_take+0x28>
    b524:	2001d708 	.word	0x2001d708

0000b528 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    b528:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b52a:	f1b3 3fff 	cmp.w	r3, #4294967295
    b52e:	bf08      	it	eq
    b530:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b534:	d100      	bne.n	b538 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    b536:	bd38      	pop	{r3, r4, r5, pc}
    b538:	4902      	ldr	r1, [pc, #8]	; (b544 <add_thread_timeout+0x1c>)
    b53a:	3018      	adds	r0, #24
    b53c:	f000 fc42 	bl	bdc4 <z_add_timeout>
    b540:	e7f9      	b.n	b536 <add_thread_timeout+0xe>
    b542:	bf00      	nop
    b544:	0000fdb9 	.word	0x0000fdb9

0000b548 <z_reset_time_slice>:
{
    b548:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    b54a:	4b08      	ldr	r3, [pc, #32]	; (b56c <z_reset_time_slice+0x24>)
    b54c:	681b      	ldr	r3, [r3, #0]
    b54e:	b903      	cbnz	r3, b552 <z_reset_time_slice+0xa>
}
    b550:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    b552:	f7fa f80f 	bl	5574 <sys_clock_elapsed>
    b556:	4603      	mov	r3, r0
    b558:	4a04      	ldr	r2, [pc, #16]	; (b56c <z_reset_time_slice+0x24>)
    b55a:	6810      	ldr	r0, [r2, #0]
    b55c:	4403      	add	r3, r0
    b55e:	4a04      	ldr	r2, [pc, #16]	; (b570 <z_reset_time_slice+0x28>)
    b560:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    b562:	2100      	movs	r1, #0
    b564:	f004 fd1d 	bl	ffa2 <z_set_timeout_expiry>
}
    b568:	e7f2      	b.n	b550 <z_reset_time_slice+0x8>
    b56a:	bf00      	nop
    b56c:	2001d718 	.word	0x2001d718
    b570:	2001d6d8 	.word	0x2001d6d8

0000b574 <k_sched_time_slice_set>:
{
    b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b578:	4606      	mov	r6, r0
    b57a:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    b57c:	2300      	movs	r3, #0
	__asm__ volatile(
    b57e:	f04f 0220 	mov.w	r2, #32
    b582:	f3ef 8711 	mrs	r7, BASEPRI
    b586:	f382 8812 	msr	BASEPRI_MAX, r2
    b58a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    b58e:	e009      	b.n	b5a4 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    b590:	4b13      	ldr	r3, [pc, #76]	; (b5e0 <k_sched_time_slice_set+0x6c>)
    b592:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    b596:	f7ff ffd7 	bl	b548 <z_reset_time_slice>
	__asm__ volatile(
    b59a:	f387 8811 	msr	BASEPRI, r7
    b59e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b5a2:	2301      	movs	r3, #1
    b5a4:	b9cb      	cbnz	r3, b5da <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    b5a6:	2300      	movs	r3, #0
    b5a8:	4a0e      	ldr	r2, [pc, #56]	; (b5e4 <k_sched_time_slice_set+0x70>)
    b5aa:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    b5ac:	0c75      	lsrs	r5, r6, #17
    b5ae:	03f4      	lsls	r4, r6, #15
    b5b0:	f240 30e7 	movw	r0, #999	; 0x3e7
    b5b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b5b8:	2300      	movs	r3, #0
    b5ba:	1820      	adds	r0, r4, r0
    b5bc:	f04f 0100 	mov.w	r1, #0
    b5c0:	eb45 0101 	adc.w	r1, r5, r1
    b5c4:	f7f5 fdb4 	bl	1130 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    b5c8:	4b07      	ldr	r3, [pc, #28]	; (b5e8 <k_sched_time_slice_set+0x74>)
    b5ca:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    b5cc:	2e00      	cmp	r6, #0
    b5ce:	dddf      	ble.n	b590 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    b5d0:	2802      	cmp	r0, #2
    b5d2:	bfb8      	it	lt
    b5d4:	2002      	movlt	r0, #2
    b5d6:	6018      	str	r0, [r3, #0]
    b5d8:	e7da      	b.n	b590 <k_sched_time_slice_set+0x1c>
}
    b5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5de:	bf00      	nop
    b5e0:	2001d714 	.word	0x2001d714
    b5e4:	2001d6d8 	.word	0x2001d6d8
    b5e8:	2001d718 	.word	0x2001d718

0000b5ec <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    b5ec:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    b5ee:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b5f0:	b921      	cbnz	r1, b5fc <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b5f2:	f3ef 8305 	mrs	r3, IPSR
    b5f6:	b913      	cbnz	r3, b5fe <z_reschedule+0x12>
    b5f8:	2101      	movs	r1, #1
    b5fa:	e000      	b.n	b5fe <z_reschedule+0x12>
    b5fc:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    b5fe:	f011 0f01 	tst.w	r1, #1
    b602:	d007      	beq.n	b614 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    b604:	4b06      	ldr	r3, [pc, #24]	; (b620 <z_reschedule+0x34>)
    b606:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    b608:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    b60a:	429a      	cmp	r2, r3
    b60c:	d002      	beq.n	b614 <z_reschedule+0x28>
	ret = arch_swap(key);
    b60e:	f7f8 fb59 	bl	3cc4 <arch_swap>
		z_swap(lock, key);
    b612:	e003      	b.n	b61c <z_reschedule+0x30>
    b614:	f380 8811 	msr	BASEPRI, r0
    b618:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    b61c:	bd08      	pop	{r3, pc}
    b61e:	bf00      	nop
    b620:	2001d6d8 	.word	0x2001d6d8

0000b624 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    b624:	2300      	movs	r3, #0
	__asm__ volatile(
    b626:	f04f 0220 	mov.w	r2, #32
    b62a:	f3ef 8111 	mrs	r1, BASEPRI
    b62e:	f382 8812 	msr	BASEPRI_MAX, r2
    b632:	f3bf 8f6f 	isb	sy
    b636:	b953      	cbnz	r3, b64e <k_sched_lock+0x2a>
    b638:	4b05      	ldr	r3, [pc, #20]	; (b650 <k_sched_lock+0x2c>)
    b63a:	689a      	ldr	r2, [r3, #8]
    b63c:	7bd3      	ldrb	r3, [r2, #15]
    b63e:	3b01      	subs	r3, #1
    b640:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    b642:	f381 8811 	msr	BASEPRI, r1
    b646:	f3bf 8f6f 	isb	sy
    b64a:	2301      	movs	r3, #1
    b64c:	e7f3      	b.n	b636 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    b64e:	4770      	bx	lr
    b650:	2001d6d8 	.word	0x2001d6d8

0000b654 <update_cache>:
{
    b654:	b538      	push	{r3, r4, r5, lr}
    b656:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    b658:	480f      	ldr	r0, [pc, #60]	; (b698 <update_cache+0x44>)
    b65a:	f004 fb8a 	bl	fd72 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b65e:	4605      	mov	r5, r0
    b660:	b170      	cbz	r0, b680 <update_cache+0x2c>
	if (preempt_ok != 0) {
    b662:	b984      	cbnz	r4, b686 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    b664:	4b0d      	ldr	r3, [pc, #52]	; (b69c <update_cache+0x48>)
    b666:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b668:	7b5a      	ldrb	r2, [r3, #13]
    b66a:	f012 0f1f 	tst.w	r2, #31
    b66e:	d10a      	bne.n	b686 <update_cache+0x32>
	return node->next != NULL;
    b670:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b672:	b942      	cbnz	r2, b686 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b674:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    b676:	2a7f      	cmp	r2, #127	; 0x7f
    b678:	d905      	bls.n	b686 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    b67a:	4a08      	ldr	r2, [pc, #32]	; (b69c <update_cache+0x48>)
    b67c:	61d3      	str	r3, [r2, #28]
    b67e:	e00a      	b.n	b696 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b680:	4b06      	ldr	r3, [pc, #24]	; (b69c <update_cache+0x48>)
    b682:	68dd      	ldr	r5, [r3, #12]
    b684:	e7ed      	b.n	b662 <update_cache+0xe>
		if (thread != _current) {
    b686:	4b05      	ldr	r3, [pc, #20]	; (b69c <update_cache+0x48>)
    b688:	689b      	ldr	r3, [r3, #8]
    b68a:	42ab      	cmp	r3, r5
    b68c:	d001      	beq.n	b692 <update_cache+0x3e>
			z_reset_time_slice();
    b68e:	f7ff ff5b 	bl	b548 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    b692:	4b02      	ldr	r3, [pc, #8]	; (b69c <update_cache+0x48>)
    b694:	61dd      	str	r5, [r3, #28]
}
    b696:	bd38      	pop	{r3, r4, r5, pc}
    b698:	2001d6f8 	.word	0x2001d6f8
    b69c:	2001d6d8 	.word	0x2001d6d8

0000b6a0 <move_thread_to_end_of_prio_q>:
{
    b6a0:	b538      	push	{r3, r4, r5, lr}
    b6a2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    b6a4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b6a6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	db28      	blt.n	b700 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    b6ae:	7b6b      	ldrb	r3, [r5, #13]
    b6b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b6b4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    b6b6:	4b1a      	ldr	r3, [pc, #104]	; (b720 <move_thread_to_end_of_prio_q+0x80>)
    b6b8:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b6bc:	429c      	cmp	r4, r3
    b6be:	d02d      	beq.n	b71c <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b6c0:	b16c      	cbz	r4, b6de <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b6c2:	4621      	mov	r1, r4
    b6c4:	4628      	mov	r0, r5
    b6c6:	f004 fb2d 	bl	fd24 <z_sched_prio_cmp>
    b6ca:	2800      	cmp	r0, #0
    b6cc:	dc20      	bgt.n	b710 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b6ce:	b134      	cbz	r4, b6de <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    b6d0:	4b13      	ldr	r3, [pc, #76]	; (b720 <move_thread_to_end_of_prio_q+0x80>)
    b6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b6d4:	429c      	cmp	r4, r3
    b6d6:	d002      	beq.n	b6de <move_thread_to_end_of_prio_q+0x3e>
    b6d8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b6da:	2c00      	cmp	r4, #0
    b6dc:	d1f0      	bne.n	b6c0 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    b6de:	4b10      	ldr	r3, [pc, #64]	; (b720 <move_thread_to_end_of_prio_q+0x80>)
    b6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    b6e2:	f103 0120 	add.w	r1, r3, #32
    b6e6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b6e8:	606a      	str	r2, [r5, #4]

	tail->next = node;
    b6ea:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b6ec:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    b6ee:	4b0c      	ldr	r3, [pc, #48]	; (b720 <move_thread_to_end_of_prio_q+0x80>)
    b6f0:	6898      	ldr	r0, [r3, #8]
    b6f2:	42a8      	cmp	r0, r5
    b6f4:	bf14      	ite	ne
    b6f6:	2000      	movne	r0, #0
    b6f8:	2001      	moveq	r0, #1
    b6fa:	f7ff ffab 	bl	b654 <update_cache>
}
    b6fe:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b700:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b704:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    b706:	4601      	mov	r1, r0
    b708:	4806      	ldr	r0, [pc, #24]	; (b724 <move_thread_to_end_of_prio_q+0x84>)
    b70a:	f004 fb2a 	bl	fd62 <z_priq_dumb_remove>
}
    b70e:	e7ce      	b.n	b6ae <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b710:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    b712:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b714:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b716:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b718:	6065      	str	r5, [r4, #4]
}
    b71a:	e7e8      	b.n	b6ee <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b71c:	2400      	movs	r4, #0
    b71e:	e7cf      	b.n	b6c0 <move_thread_to_end_of_prio_q+0x20>
    b720:	2001d6d8 	.word	0x2001d6d8
    b724:	2001d6f8 	.word	0x2001d6f8

0000b728 <z_time_slice>:
{
    b728:	b510      	push	{r4, lr}
	__asm__ volatile(
    b72a:	f04f 0320 	mov.w	r3, #32
    b72e:	f3ef 8411 	mrs	r4, BASEPRI
    b732:	f383 8812 	msr	BASEPRI_MAX, r3
    b736:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    b73a:	4b1c      	ldr	r3, [pc, #112]	; (b7ac <z_time_slice+0x84>)
    b73c:	689b      	ldr	r3, [r3, #8]
    b73e:	4a1c      	ldr	r2, [pc, #112]	; (b7b0 <z_time_slice+0x88>)
    b740:	6812      	ldr	r2, [r2, #0]
    b742:	4293      	cmp	r3, r2
    b744:	d01d      	beq.n	b782 <z_time_slice+0x5a>
	pending_current = NULL;
    b746:	4a1a      	ldr	r2, [pc, #104]	; (b7b0 <z_time_slice+0x88>)
    b748:	2100      	movs	r1, #0
    b74a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    b74c:	4a19      	ldr	r2, [pc, #100]	; (b7b4 <z_time_slice+0x8c>)
    b74e:	6812      	ldr	r2, [r2, #0]
    b750:	b322      	cbz	r2, b79c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b752:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    b754:	2a7f      	cmp	r2, #127	; 0x7f
    b756:	d821      	bhi.n	b79c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    b758:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    b75a:	f012 0f1f 	tst.w	r2, #31
    b75e:	d11d      	bne.n	b79c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b760:	f993 100e 	ldrsb.w	r1, [r3, #14]
    b764:	4a14      	ldr	r2, [pc, #80]	; (b7b8 <z_time_slice+0x90>)
    b766:	6812      	ldr	r2, [r2, #0]
    b768:	4291      	cmp	r1, r2
    b76a:	db17      	blt.n	b79c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    b76c:	4a13      	ldr	r2, [pc, #76]	; (b7bc <z_time_slice+0x94>)
    b76e:	4293      	cmp	r3, r2
    b770:	d014      	beq.n	b79c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    b772:	4a0e      	ldr	r2, [pc, #56]	; (b7ac <z_time_slice+0x84>)
    b774:	6912      	ldr	r2, [r2, #16]
    b776:	4282      	cmp	r2, r0
    b778:	dd0a      	ble.n	b790 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    b77a:	1a10      	subs	r0, r2, r0
    b77c:	4b0b      	ldr	r3, [pc, #44]	; (b7ac <z_time_slice+0x84>)
    b77e:	6118      	str	r0, [r3, #16]
    b780:	e00f      	b.n	b7a2 <z_time_slice+0x7a>
		z_reset_time_slice();
    b782:	f7ff fee1 	bl	b548 <z_reset_time_slice>
	__asm__ volatile(
    b786:	f384 8811 	msr	BASEPRI, r4
    b78a:	f3bf 8f6f 	isb	sy
		return;
    b78e:	e00c      	b.n	b7aa <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    b790:	4618      	mov	r0, r3
    b792:	f7ff ff85 	bl	b6a0 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    b796:	f7ff fed7 	bl	b548 <z_reset_time_slice>
    b79a:	e002      	b.n	b7a2 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    b79c:	4b03      	ldr	r3, [pc, #12]	; (b7ac <z_time_slice+0x84>)
    b79e:	2200      	movs	r2, #0
    b7a0:	611a      	str	r2, [r3, #16]
    b7a2:	f384 8811 	msr	BASEPRI, r4
    b7a6:	f3bf 8f6f 	isb	sy
}
    b7aa:	bd10      	pop	{r4, pc}
    b7ac:	2001d6d8 	.word	0x2001d6d8
    b7b0:	2001d70c 	.word	0x2001d70c
    b7b4:	2001d718 	.word	0x2001d718
    b7b8:	2001d714 	.word	0x2001d714
    b7bc:	20000390 	.word	0x20000390

0000b7c0 <ready_thread>:
{
    b7c0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    b7c2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b7c4:	f990 200d 	ldrsb.w	r2, [r0, #13]
    b7c8:	2a00      	cmp	r2, #0
    b7ca:	db2d      	blt.n	b828 <ready_thread+0x68>
    b7cc:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b7ce:	f013 0f1f 	tst.w	r3, #31
    b7d2:	d105      	bne.n	b7e0 <ready_thread+0x20>
	return node->next != NULL;
    b7d4:	6982      	ldr	r2, [r0, #24]
    b7d6:	b10a      	cbz	r2, b7dc <ready_thread+0x1c>
    b7d8:	2200      	movs	r2, #0
    b7da:	e002      	b.n	b7e2 <ready_thread+0x22>
    b7dc:	2201      	movs	r2, #1
    b7de:	e000      	b.n	b7e2 <ready_thread+0x22>
    b7e0:	2200      	movs	r2, #0
    b7e2:	b30a      	cbz	r2, b828 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    b7e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b7e8:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    b7ea:	4b14      	ldr	r3, [pc, #80]	; (b83c <ready_thread+0x7c>)
    b7ec:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b7f0:	429d      	cmp	r5, r3
    b7f2:	d020      	beq.n	b836 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b7f4:	b16d      	cbz	r5, b812 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b7f6:	4629      	mov	r1, r5
    b7f8:	4620      	mov	r0, r4
    b7fa:	f004 fa93 	bl	fd24 <z_sched_prio_cmp>
    b7fe:	2800      	cmp	r0, #0
    b800:	dc13      	bgt.n	b82a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b802:	b135      	cbz	r5, b812 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    b804:	4b0d      	ldr	r3, [pc, #52]	; (b83c <ready_thread+0x7c>)
    b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b808:	429d      	cmp	r5, r3
    b80a:	d002      	beq.n	b812 <ready_thread+0x52>
    b80c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b80e:	2d00      	cmp	r5, #0
    b810:	d1f0      	bne.n	b7f4 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    b812:	4b0a      	ldr	r3, [pc, #40]	; (b83c <ready_thread+0x7c>)
    b814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b816:	f103 0120 	add.w	r1, r3, #32
    b81a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    b81c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b81e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b820:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    b822:	2000      	movs	r0, #0
    b824:	f7ff ff16 	bl	b654 <update_cache>
}
    b828:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    b82a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    b82c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b82e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    b830:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b832:	606c      	str	r4, [r5, #4]
}
    b834:	e7f5      	b.n	b822 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b836:	2500      	movs	r5, #0
    b838:	e7dc      	b.n	b7f4 <ready_thread+0x34>
    b83a:	bf00      	nop
    b83c:	2001d6d8 	.word	0x2001d6d8

0000b840 <z_sched_start>:
{
    b840:	b510      	push	{r4, lr}
	__asm__ volatile(
    b842:	f04f 0320 	mov.w	r3, #32
    b846:	f3ef 8411 	mrs	r4, BASEPRI
    b84a:	f383 8812 	msr	BASEPRI_MAX, r3
    b84e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b852:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    b854:	f013 0f04 	tst.w	r3, #4
    b858:	d104      	bne.n	b864 <z_sched_start+0x24>
	__asm__ volatile(
    b85a:	f384 8811 	msr	BASEPRI, r4
    b85e:	f3bf 8f6f 	isb	sy
}
    b862:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b864:	f023 0304 	bic.w	r3, r3, #4
    b868:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    b86a:	f7ff ffa9 	bl	b7c0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b86e:	4621      	mov	r1, r4
    b870:	4801      	ldr	r0, [pc, #4]	; (b878 <z_sched_start+0x38>)
    b872:	f7ff febb 	bl	b5ec <z_reschedule>
    b876:	e7f4      	b.n	b862 <z_sched_start+0x22>
    b878:	2001d710 	.word	0x2001d710

0000b87c <unready_thread>:
{
    b87c:	b510      	push	{r4, lr}
    b87e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    b880:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b882:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b886:	2b00      	cmp	r3, #0
    b888:	db08      	blt.n	b89c <unready_thread+0x20>
	update_cache(thread == _current);
    b88a:	4b08      	ldr	r3, [pc, #32]	; (b8ac <unready_thread+0x30>)
    b88c:	6898      	ldr	r0, [r3, #8]
    b88e:	42a0      	cmp	r0, r4
    b890:	bf14      	ite	ne
    b892:	2000      	movne	r0, #0
    b894:	2001      	moveq	r0, #1
    b896:	f7ff fedd 	bl	b654 <update_cache>
}
    b89a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b89c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b8a0:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    b8a2:	4601      	mov	r1, r0
    b8a4:	4802      	ldr	r0, [pc, #8]	; (b8b0 <unready_thread+0x34>)
    b8a6:	f004 fa5c 	bl	fd62 <z_priq_dumb_remove>
}
    b8aa:	e7ee      	b.n	b88a <unready_thread+0xe>
    b8ac:	2001d6d8 	.word	0x2001d6d8
    b8b0:	2001d6f8 	.word	0x2001d6f8

0000b8b4 <z_pend_curr>:
{
    b8b4:	b510      	push	{r4, lr}
    b8b6:	460c      	mov	r4, r1
    b8b8:	4611      	mov	r1, r2
	pending_current = _current;
    b8ba:	4b06      	ldr	r3, [pc, #24]	; (b8d4 <z_pend_curr+0x20>)
    b8bc:	6898      	ldr	r0, [r3, #8]
    b8be:	4b06      	ldr	r3, [pc, #24]	; (b8d8 <z_pend_curr+0x24>)
    b8c0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    b8c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b8c6:	f004 fad5 	bl	fe74 <pend>
    b8ca:	4620      	mov	r0, r4
    b8cc:	f7f8 f9fa 	bl	3cc4 <arch_swap>
}
    b8d0:	bd10      	pop	{r4, pc}
    b8d2:	bf00      	nop
    b8d4:	2001d6d8 	.word	0x2001d6d8
    b8d8:	2001d70c 	.word	0x2001d70c

0000b8dc <z_set_prio>:
{
    b8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b8e0:	4604      	mov	r4, r0
    b8e2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    b8e4:	2300      	movs	r3, #0
	__asm__ volatile(
    b8e6:	f04f 0220 	mov.w	r2, #32
    b8ea:	f3ef 8611 	mrs	r6, BASEPRI
    b8ee:	f382 8812 	msr	BASEPRI_MAX, r2
    b8f2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    b8f6:	4698      	mov	r8, r3
    b8f8:	e008      	b.n	b90c <z_set_prio+0x30>
		if (need_sched) {
    b8fa:	f012 0801 	ands.w	r8, r2, #1
    b8fe:	d111      	bne.n	b924 <z_set_prio+0x48>
			thread->base.prio = prio;
    b900:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    b902:	f386 8811 	msr	BASEPRI, r6
    b906:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b90a:	2301      	movs	r3, #1
    b90c:	461a      	mov	r2, r3
    b90e:	2b00      	cmp	r3, #0
    b910:	d13d      	bne.n	b98e <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    b912:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b914:	f013 0f1f 	tst.w	r3, #31
    b918:	d1ef      	bne.n	b8fa <z_set_prio+0x1e>
	return node->next != NULL;
    b91a:	69a1      	ldr	r1, [r4, #24]
    b91c:	2900      	cmp	r1, #0
    b91e:	d1ec      	bne.n	b8fa <z_set_prio+0x1e>
    b920:	2201      	movs	r2, #1
    b922:	e7ea      	b.n	b8fa <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b928:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    b92a:	f8df 906c 	ldr.w	r9, [pc, #108]	; b998 <z_set_prio+0xbc>
    b92e:	4621      	mov	r1, r4
    b930:	4648      	mov	r0, r9
    b932:	f004 fa16 	bl	fd62 <z_priq_dumb_remove>
				thread->base.prio = prio;
    b936:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b938:	7b63      	ldrb	r3, [r4, #13]
    b93a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b93e:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    b940:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b944:	454d      	cmp	r5, r9
    b946:	d020      	beq.n	b98a <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b948:	b16d      	cbz	r5, b966 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b94a:	4629      	mov	r1, r5
    b94c:	4620      	mov	r0, r4
    b94e:	f004 f9e9 	bl	fd24 <z_sched_prio_cmp>
    b952:	2800      	cmp	r0, #0
    b954:	dc13      	bgt.n	b97e <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b956:	b135      	cbz	r5, b966 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    b958:	4b0e      	ldr	r3, [pc, #56]	; (b994 <z_set_prio+0xb8>)
    b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b95c:	429d      	cmp	r5, r3
    b95e:	d002      	beq.n	b966 <z_set_prio+0x8a>
    b960:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b962:	2d00      	cmp	r5, #0
    b964:	d1f0      	bne.n	b948 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    b966:	4b0b      	ldr	r3, [pc, #44]	; (b994 <z_set_prio+0xb8>)
    b968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b96a:	f103 0120 	add.w	r1, r3, #32
    b96e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    b970:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b972:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b974:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    b976:	2001      	movs	r0, #1
    b978:	f7ff fe6c 	bl	b654 <update_cache>
    b97c:	e7c1      	b.n	b902 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    b97e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    b980:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b982:	6025      	str	r5, [r4, #0]
	prev->next = node;
    b984:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b986:	606c      	str	r4, [r5, #4]
}
    b988:	e7f5      	b.n	b976 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b98a:	2500      	movs	r5, #0
    b98c:	e7dc      	b.n	b948 <z_set_prio+0x6c>
}
    b98e:	4640      	mov	r0, r8
    b990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b994:	2001d6d8 	.word	0x2001d6d8
    b998:	2001d6f8 	.word	0x2001d6f8

0000b99c <z_impl_k_thread_suspend>:
{
    b99c:	b538      	push	{r3, r4, r5, lr}
    b99e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b9a0:	3018      	adds	r0, #24
    b9a2:	f004 faca 	bl	ff3a <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    b9a6:	2300      	movs	r3, #0
	__asm__ volatile(
    b9a8:	f04f 0220 	mov.w	r2, #32
    b9ac:	f3ef 8511 	mrs	r5, BASEPRI
    b9b0:	f382 8812 	msr	BASEPRI_MAX, r2
    b9b4:	f3bf 8f6f 	isb	sy
    b9b8:	e010      	b.n	b9dc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b9ba:	7b63      	ldrb	r3, [r4, #13]
    b9bc:	f043 0310 	orr.w	r3, r3, #16
    b9c0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    b9c2:	4b15      	ldr	r3, [pc, #84]	; (ba18 <z_impl_k_thread_suspend+0x7c>)
    b9c4:	6898      	ldr	r0, [r3, #8]
    b9c6:	42a0      	cmp	r0, r4
    b9c8:	bf14      	ite	ne
    b9ca:	2000      	movne	r0, #0
    b9cc:	2001      	moveq	r0, #1
    b9ce:	f7ff fe41 	bl	b654 <update_cache>
	__asm__ volatile(
    b9d2:	f385 8811 	msr	BASEPRI, r5
    b9d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b9da:	2301      	movs	r3, #1
    b9dc:	b963      	cbnz	r3, b9f8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    b9de:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    b9e0:	f994 300d 	ldrsb.w	r3, [r4, #13]
    b9e4:	2b00      	cmp	r3, #0
    b9e6:	dae8      	bge.n	b9ba <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b9e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b9ec:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    b9ee:	4621      	mov	r1, r4
    b9f0:	480a      	ldr	r0, [pc, #40]	; (ba1c <z_impl_k_thread_suspend+0x80>)
    b9f2:	f004 f9b6 	bl	fd62 <z_priq_dumb_remove>
}
    b9f6:	e7e0      	b.n	b9ba <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    b9f8:	4b07      	ldr	r3, [pc, #28]	; (ba18 <z_impl_k_thread_suspend+0x7c>)
    b9fa:	689b      	ldr	r3, [r3, #8]
    b9fc:	42a3      	cmp	r3, r4
    b9fe:	d000      	beq.n	ba02 <z_impl_k_thread_suspend+0x66>
}
    ba00:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    ba02:	f04f 0320 	mov.w	r3, #32
    ba06:	f3ef 8011 	mrs	r0, BASEPRI
    ba0a:	f383 8812 	msr	BASEPRI_MAX, r3
    ba0e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ba12:	f004 f991 	bl	fd38 <z_reschedule_irqlock>
    ba16:	e7f3      	b.n	ba00 <z_impl_k_thread_suspend+0x64>
    ba18:	2001d6d8 	.word	0x2001d6d8
    ba1c:	2001d6f8 	.word	0x2001d6f8

0000ba20 <k_sched_unlock>:

void k_sched_unlock(void)
{
    ba20:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    ba22:	2300      	movs	r3, #0
    ba24:	f04f 0220 	mov.w	r2, #32
    ba28:	f3ef 8411 	mrs	r4, BASEPRI
    ba2c:	f382 8812 	msr	BASEPRI_MAX, r2
    ba30:	f3bf 8f6f 	isb	sy
    ba34:	b96b      	cbnz	r3, ba52 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    ba36:	4b0c      	ldr	r3, [pc, #48]	; (ba68 <k_sched_unlock+0x48>)
    ba38:	689a      	ldr	r2, [r3, #8]
    ba3a:	7bd3      	ldrb	r3, [r2, #15]
    ba3c:	3301      	adds	r3, #1
    ba3e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    ba40:	2000      	movs	r0, #0
    ba42:	f7ff fe07 	bl	b654 <update_cache>
	__asm__ volatile(
    ba46:	f384 8811 	msr	BASEPRI, r4
    ba4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ba4e:	2301      	movs	r3, #1
    ba50:	e7f0      	b.n	ba34 <k_sched_unlock+0x14>
	__asm__ volatile(
    ba52:	f04f 0320 	mov.w	r3, #32
    ba56:	f3ef 8011 	mrs	r0, BASEPRI
    ba5a:	f383 8812 	msr	BASEPRI_MAX, r3
    ba5e:	f3bf 8f6f 	isb	sy
    ba62:	f004 f969 	bl	fd38 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    ba66:	bd10      	pop	{r4, pc}
    ba68:	2001d6d8 	.word	0x2001d6d8

0000ba6c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    ba6e:	7b43      	ldrb	r3, [r0, #13]
    ba70:	f013 0f08 	tst.w	r3, #8
    ba74:	d145      	bne.n	bb02 <end_thread+0x96>
    ba76:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    ba78:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    ba7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ba80:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    ba82:	f013 0f80 	tst.w	r3, #128	; 0x80
    ba86:	d114      	bne.n	bab2 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    ba88:	68ab      	ldr	r3, [r5, #8]
    ba8a:	b15b      	cbz	r3, baa4 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ba8c:	4628      	mov	r0, r5
    ba8e:	f004 f947 	bl	fd20 <pended_on_thread>
    ba92:	4629      	mov	r1, r5
    ba94:	f004 f965 	bl	fd62 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ba98:	7b6b      	ldrb	r3, [r5, #13]
    ba9a:	f023 0302 	bic.w	r3, r3, #2
    ba9e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    baa0:	2300      	movs	r3, #0
    baa2:	60ab      	str	r3, [r5, #8]
    baa4:	f105 0018 	add.w	r0, r5, #24
    baa8:	f004 fa47 	bl	ff3a <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    baac:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    bab0:	e01c      	b.n	baec <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bab6:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    bab8:	4601      	mov	r1, r0
    baba:	4812      	ldr	r0, [pc, #72]	; (bb04 <end_thread+0x98>)
    babc:	f004 f951 	bl	fd62 <z_priq_dumb_remove>
}
    bac0:	e7e2      	b.n	ba88 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bac2:	4620      	mov	r0, r4
    bac4:	f004 f92c 	bl	fd20 <pended_on_thread>
    bac8:	4621      	mov	r1, r4
    baca:	f004 f94a 	bl	fd62 <z_priq_dumb_remove>
    bace:	7b63      	ldrb	r3, [r4, #13]
    bad0:	f023 0302 	bic.w	r3, r3, #2
    bad4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    bad6:	2600      	movs	r6, #0
    bad8:	60a6      	str	r6, [r4, #8]
    bada:	f104 0018 	add.w	r0, r4, #24
    bade:	f004 fa2c 	bl	ff3a <z_abort_timeout>
    bae2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    bae6:	4620      	mov	r0, r4
    bae8:	f7ff fe6a 	bl	b7c0 <ready_thread>
	return list->head == list;
    baec:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    baee:	42bc      	cmp	r4, r7
    baf0:	d001      	beq.n	baf6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    baf2:	2c00      	cmp	r4, #0
    baf4:	d1e5      	bne.n	bac2 <end_thread+0x56>
		update_cache(1);
    baf6:	2001      	movs	r0, #1
    baf8:	f7ff fdac 	bl	b654 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    bafc:	4628      	mov	r0, r5
    bafe:	f7ff fb05 	bl	b10c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    bb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb04:	2001d6f8 	.word	0x2001d6f8

0000bb08 <z_sched_init>:
{
    bb08:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    bb0a:	4b05      	ldr	r3, [pc, #20]	; (bb20 <z_sched_init+0x18>)
    bb0c:	f103 0220 	add.w	r2, r3, #32
    bb10:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    bb12:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    bb14:	2100      	movs	r1, #0
    bb16:	4608      	mov	r0, r1
    bb18:	f7ff fd2c 	bl	b574 <k_sched_time_slice_set>
}
    bb1c:	bd08      	pop	{r3, pc}
    bb1e:	bf00      	nop
    bb20:	2001d6d8 	.word	0x2001d6d8

0000bb24 <z_impl_k_yield>:
{
    bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb26:	f04f 0320 	mov.w	r3, #32
    bb2a:	f3ef 8611 	mrs	r6, BASEPRI
    bb2e:	f383 8812 	msr	BASEPRI_MAX, r3
    bb32:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    bb36:	4c1c      	ldr	r4, [pc, #112]	; (bba8 <z_impl_k_yield+0x84>)
    bb38:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bb3a:	7b4b      	ldrb	r3, [r1, #13]
    bb3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bb40:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    bb42:	f104 0720 	add.w	r7, r4, #32
    bb46:	4638      	mov	r0, r7
    bb48:	f004 f90b 	bl	fd62 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    bb4c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    bb4e:	7b6b      	ldrb	r3, [r5, #13]
    bb50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bb54:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    bb56:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb58:	42bc      	cmp	r4, r7
    bb5a:	d023      	beq.n	bba4 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb5c:	b16c      	cbz	r4, bb7a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bb5e:	4621      	mov	r1, r4
    bb60:	4628      	mov	r0, r5
    bb62:	f004 f8df 	bl	fd24 <z_sched_prio_cmp>
    bb66:	2800      	cmp	r0, #0
    bb68:	dc16      	bgt.n	bb98 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bb6a:	b134      	cbz	r4, bb7a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    bb6c:	4b0e      	ldr	r3, [pc, #56]	; (bba8 <z_impl_k_yield+0x84>)
    bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb70:	429c      	cmp	r4, r3
    bb72:	d002      	beq.n	bb7a <z_impl_k_yield+0x56>
    bb74:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb76:	2c00      	cmp	r4, #0
    bb78:	d1f0      	bne.n	bb5c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    bb7a:	4b0b      	ldr	r3, [pc, #44]	; (bba8 <z_impl_k_yield+0x84>)
    bb7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    bb7e:	f103 0120 	add.w	r1, r3, #32
    bb82:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    bb84:	606a      	str	r2, [r5, #4]
	tail->next = node;
    bb86:	6015      	str	r5, [r2, #0]
	list->tail = node;
    bb88:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    bb8a:	2001      	movs	r0, #1
    bb8c:	f7ff fd62 	bl	b654 <update_cache>
    bb90:	4630      	mov	r0, r6
    bb92:	f7f8 f897 	bl	3cc4 <arch_swap>
}
    bb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    bb98:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    bb9a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    bb9c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    bb9e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    bba0:	6065      	str	r5, [r4, #4]
}
    bba2:	e7f2      	b.n	bb8a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bba4:	2400      	movs	r4, #0
    bba6:	e7d9      	b.n	bb5c <z_impl_k_yield+0x38>
    bba8:	2001d6d8 	.word	0x2001d6d8

0000bbac <z_tick_sleep>:
{
    bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbb0:	4604      	mov	r4, r0
    bbb2:	460d      	mov	r5, r1
	if (ticks == 0) {
    bbb4:	ea54 0105 	orrs.w	r1, r4, r5
    bbb8:	d037      	beq.n	bc2a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    bbba:	f06f 0101 	mvn.w	r1, #1
    bbbe:	1a0a      	subs	r2, r1, r0
    bbc0:	f04f 31ff 	mov.w	r1, #4294967295
    bbc4:	eb61 0305 	sbc.w	r3, r1, r5
    bbc8:	2a01      	cmp	r2, #1
    bbca:	f173 0300 	sbcs.w	r3, r3, #0
    bbce:	db30      	blt.n	bc32 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    bbd0:	f06f 0601 	mvn.w	r6, #1
    bbd4:	1a36      	subs	r6, r6, r0
    bbd6:	f04f 0320 	mov.w	r3, #32
    bbda:	f3ef 8811 	mrs	r8, BASEPRI
    bbde:	f383 8812 	msr	BASEPRI_MAX, r3
    bbe2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    bbe6:	4f16      	ldr	r7, [pc, #88]	; (bc40 <z_tick_sleep+0x94>)
    bbe8:	68b8      	ldr	r0, [r7, #8]
    bbea:	4b16      	ldr	r3, [pc, #88]	; (bc44 <z_tick_sleep+0x98>)
    bbec:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    bbee:	f7ff fe45 	bl	b87c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    bbf2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bbf4:	4622      	mov	r2, r4
    bbf6:	462b      	mov	r3, r5
    bbf8:	4913      	ldr	r1, [pc, #76]	; (bc48 <z_tick_sleep+0x9c>)
    bbfa:	3018      	adds	r0, #24
    bbfc:	f000 f8e2 	bl	bdc4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    bc00:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bc02:	7b53      	ldrb	r3, [r2, #13]
    bc04:	f043 0310 	orr.w	r3, r3, #16
    bc08:	7353      	strb	r3, [r2, #13]
    bc0a:	4640      	mov	r0, r8
    bc0c:	f7f8 f85a 	bl	3cc4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    bc10:	2500      	movs	r5, #0
    bc12:	f004 f9f1 	bl	fff8 <sys_clock_tick_get_32>
    bc16:	1a34      	subs	r4, r6, r0
    bc18:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    bc1c:	2c01      	cmp	r4, #1
    bc1e:	f175 0300 	sbcs.w	r3, r5, #0
    bc22:	da0a      	bge.n	bc3a <z_tick_sleep+0x8e>
	return 0;
    bc24:	2000      	movs	r0, #0
}
    bc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    bc2a:	f7ff ff7b 	bl	bb24 <z_impl_k_yield>
		return 0;
    bc2e:	2000      	movs	r0, #0
    bc30:	e7f9      	b.n	bc26 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    bc32:	f004 f9e1 	bl	fff8 <sys_clock_tick_get_32>
    bc36:	1906      	adds	r6, r0, r4
    bc38:	e7cd      	b.n	bbd6 <z_tick_sleep+0x2a>
		return ticks;
    bc3a:	4620      	mov	r0, r4
    bc3c:	e7f3      	b.n	bc26 <z_tick_sleep+0x7a>
    bc3e:	bf00      	nop
    bc40:	2001d6d8 	.word	0x2001d6d8
    bc44:	2001d70c 	.word	0x2001d70c
    bc48:	0000fdb9 	.word	0x0000fdb9

0000bc4c <z_impl_k_sleep>:
{
    bc4c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bc4e:	f1b1 3fff 	cmp.w	r1, #4294967295
    bc52:	bf08      	it	eq
    bc54:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    bc58:	d01a      	beq.n	bc90 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    bc5a:	f7ff ffa7 	bl	bbac <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    bc5e:	4604      	mov	r4, r0
    bc60:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    bc62:	0169      	lsls	r1, r5, #5
    bc64:	0143      	lsls	r3, r0, #5
    bc66:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    bc6a:	1a18      	subs	r0, r3, r0
    bc6c:	eb62 0305 	sbc.w	r3, r2, r5
    bc70:	009a      	lsls	r2, r3, #2
    bc72:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    bc76:	0081      	lsls	r1, r0, #2
    bc78:	4613      	mov	r3, r2
    bc7a:	1908      	adds	r0, r1, r4
    bc7c:	eb45 0303 	adc.w	r3, r5, r3
    bc80:	00da      	lsls	r2, r3, #3
    bc82:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    bc86:	00c1      	lsls	r1, r0, #3
    bc88:	0bc8      	lsrs	r0, r1, #15
    bc8a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    bc8e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    bc90:	4b03      	ldr	r3, [pc, #12]	; (bca0 <z_impl_k_sleep+0x54>)
    bc92:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    bc94:	f7ff fe82 	bl	b99c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    bc98:	f04f 30ff 	mov.w	r0, #4294967295
    bc9c:	e7f7      	b.n	bc8e <z_impl_k_sleep+0x42>
    bc9e:	bf00      	nop
    bca0:	2001d6d8 	.word	0x2001d6d8

0000bca4 <z_impl_z_current_get>:
}
    bca4:	4b01      	ldr	r3, [pc, #4]	; (bcac <z_impl_z_current_get+0x8>)
    bca6:	6898      	ldr	r0, [r3, #8]
    bca8:	4770      	bx	lr
    bcaa:	bf00      	nop
    bcac:	2001d6d8 	.word	0x2001d6d8

0000bcb0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    bcb0:	b538      	push	{r3, r4, r5, lr}
    bcb2:	f04f 0320 	mov.w	r3, #32
    bcb6:	f3ef 8511 	mrs	r5, BASEPRI
    bcba:	f383 8812 	msr	BASEPRI_MAX, r3
    bcbe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    bcc2:	7b43      	ldrb	r3, [r0, #13]
    bcc4:	f013 0f08 	tst.w	r3, #8
    bcc8:	d004      	beq.n	bcd4 <z_thread_abort+0x24>
	__asm__ volatile(
    bcca:	f385 8811 	msr	BASEPRI, r5
    bcce:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    bcd2:	bd38      	pop	{r3, r4, r5, pc}
    bcd4:	4604      	mov	r4, r0
	end_thread(thread);
    bcd6:	f7ff fec9 	bl	ba6c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    bcda:	4b08      	ldr	r3, [pc, #32]	; (bcfc <z_thread_abort+0x4c>)
    bcdc:	689b      	ldr	r3, [r3, #8]
    bcde:	42a3      	cmp	r3, r4
    bce0:	d004      	beq.n	bcec <z_thread_abort+0x3c>
    bce2:	f385 8811 	msr	BASEPRI, r5
    bce6:	f3bf 8f6f 	isb	sy
    bcea:	e7f2      	b.n	bcd2 <z_thread_abort+0x22>
    bcec:	f3ef 8305 	mrs	r3, IPSR
    bcf0:	2b00      	cmp	r3, #0
    bcf2:	d1f6      	bne.n	bce2 <z_thread_abort+0x32>
    bcf4:	4628      	mov	r0, r5
    bcf6:	f7f7 ffe5 	bl	3cc4 <arch_swap>
	return ret;
    bcfa:	e7f2      	b.n	bce2 <z_thread_abort+0x32>
    bcfc:	2001d6d8 	.word	0x2001d6d8

0000bd00 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    bd00:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    bd02:	4806      	ldr	r0, [pc, #24]	; (bd1c <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bd04:	4a06      	ldr	r2, [pc, #24]	; (bd20 <z_data_copy+0x20>)
    bd06:	1a12      	subs	r2, r2, r0
    bd08:	4906      	ldr	r1, [pc, #24]	; (bd24 <z_data_copy+0x24>)
    bd0a:	f004 f9ae 	bl	1006a <memcpy>
    bd0e:	4a06      	ldr	r2, [pc, #24]	; (bd28 <z_data_copy+0x28>)
    bd10:	4906      	ldr	r1, [pc, #24]	; (bd2c <z_data_copy+0x2c>)
    bd12:	4807      	ldr	r0, [pc, #28]	; (bd30 <z_data_copy+0x30>)
    bd14:	f004 f9a9 	bl	1006a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    bd18:	bd08      	pop	{r3, pc}
    bd1a:	bf00      	nop
    bd1c:	20000000 	.word	0x20000000
    bd20:	20000370 	.word	0x20000370
    bd24:	00057a58 	.word	0x00057a58
    bd28:	00000000 	.word	0x00000000
    bd2c:	00057a58 	.word	0x00057a58
    bd30:	20000000 	.word	0x20000000

0000bd34 <first>:
	return list->head == list;
    bd34:	4b03      	ldr	r3, [pc, #12]	; (bd44 <first+0x10>)
    bd36:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bd38:	4298      	cmp	r0, r3
    bd3a:	d000      	beq.n	bd3e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    bd3c:	4770      	bx	lr
    bd3e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    bd40:	e7fc      	b.n	bd3c <first+0x8>
    bd42:	bf00      	nop
    bd44:	20000094 	.word	0x20000094

0000bd48 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bd48:	b130      	cbz	r0, bd58 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    bd4a:	4a04      	ldr	r2, [pc, #16]	; (bd5c <next+0x14>)
    bd4c:	6852      	ldr	r2, [r2, #4]
    bd4e:	4290      	cmp	r0, r2
    bd50:	d001      	beq.n	bd56 <next+0xe>
    bd52:	6800      	ldr	r0, [r0, #0]
    bd54:	4770      	bx	lr
    bd56:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    bd58:	4770      	bx	lr
    bd5a:	bf00      	nop
    bd5c:	20000094 	.word	0x20000094

0000bd60 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    bd60:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    bd62:	4b04      	ldr	r3, [pc, #16]	; (bd74 <elapsed+0x14>)
    bd64:	681b      	ldr	r3, [r3, #0]
    bd66:	b10b      	cbz	r3, bd6c <elapsed+0xc>
    bd68:	2000      	movs	r0, #0
}
    bd6a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    bd6c:	f7f9 fc02 	bl	5574 <sys_clock_elapsed>
    bd70:	e7fb      	b.n	bd6a <elapsed+0xa>
    bd72:	bf00      	nop
    bd74:	2001d71c 	.word	0x2001d71c

0000bd78 <next_timeout>:

static int32_t next_timeout(void)
{
    bd78:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    bd7a:	f7ff ffdb 	bl	bd34 <first>
    bd7e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    bd80:	f7ff ffee 	bl	bd60 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    bd84:	b18c      	cbz	r4, bdaa <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    bd86:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    bd8a:	1a12      	subs	r2, r2, r0
    bd8c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    bd90:	2a01      	cmp	r2, #1
    bd92:	f173 0100 	sbcs.w	r1, r3, #0
    bd96:	db11      	blt.n	bdbc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    bd98:	4610      	mov	r0, r2
    bd9a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bd9e:	f173 0300 	sbcs.w	r3, r3, #0
    bda2:	db04      	blt.n	bdae <next_timeout+0x36>
    bda4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    bda8:	e001      	b.n	bdae <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    bdaa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    bdae:	4b04      	ldr	r3, [pc, #16]	; (bdc0 <next_timeout+0x48>)
    bdb0:	691b      	ldr	r3, [r3, #16]
    bdb2:	b113      	cbz	r3, bdba <next_timeout+0x42>
    bdb4:	4283      	cmp	r3, r0
    bdb6:	da00      	bge.n	bdba <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    bdb8:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    bdba:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    bdbc:	2000      	movs	r0, #0
    bdbe:	e7f6      	b.n	bdae <next_timeout+0x36>
    bdc0:	2001d6d8 	.word	0x2001d6d8

0000bdc4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bdc8:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bdca:	f1b3 3fff 	cmp.w	r3, #4294967295
    bdce:	bf08      	it	eq
    bdd0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    bdd4:	f000 8096 	beq.w	bf04 <z_add_timeout+0x140>
    bdd8:	4682      	mov	sl, r0
    bdda:	4614      	mov	r4, r2
    bddc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    bdde:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    bde0:	2300      	movs	r3, #0
	__asm__ volatile(
    bde2:	f04f 0220 	mov.w	r2, #32
    bde6:	f3ef 8b11 	mrs	fp, BASEPRI
    bdea:	f382 8812 	msr	BASEPRI_MAX, r2
    bdee:	f3bf 8f6f 	isb	sy
    bdf2:	e02e      	b.n	be52 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    bdf4:	2201      	movs	r2, #1
    bdf6:	2300      	movs	r3, #0
    bdf8:	e04b      	b.n	be92 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    bdfa:	f7ff ffb1 	bl	bd60 <elapsed>
    bdfe:	1822      	adds	r2, r4, r0
    be00:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    be04:	3201      	adds	r2, #1
    be06:	f143 0300 	adc.w	r3, r3, #0
    be0a:	f8ca 2010 	str.w	r2, [sl, #16]
    be0e:	f8ca 3014 	str.w	r3, [sl, #20]
    be12:	e042      	b.n	be9a <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    be14:	9b00      	ldr	r3, [sp, #0]
    be16:	1ac2      	subs	r2, r0, r3
    be18:	9b01      	ldr	r3, [sp, #4]
    be1a:	eb61 0303 	sbc.w	r3, r1, r3
    be1e:	f8cc 2010 	str.w	r2, [ip, #16]
    be22:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    be26:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    be2a:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    be2e:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    be32:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    be36:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    be3a:	f1bc 0f00 	cmp.w	ip, #0
    be3e:	d049      	beq.n	bed4 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    be40:	f7ff ff78 	bl	bd34 <first>
    be44:	4582      	cmp	sl, r0
    be46:	d050      	beq.n	beea <z_add_timeout+0x126>
	__asm__ volatile(
    be48:	f38b 8811 	msr	BASEPRI, fp
    be4c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    be50:	2301      	movs	r3, #1
    be52:	2b00      	cmp	r3, #0
    be54:	d156      	bne.n	bf04 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    be56:	f06f 0301 	mvn.w	r3, #1
    be5a:	ebb3 0804 	subs.w	r8, r3, r4
    be5e:	f04f 30ff 	mov.w	r0, #4294967295
    be62:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    be66:	f1b8 0f00 	cmp.w	r8, #0
    be6a:	f179 0300 	sbcs.w	r3, r9, #0
    be6e:	dbc4      	blt.n	bdfa <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    be70:	4a26      	ldr	r2, [pc, #152]	; (bf0c <z_add_timeout+0x148>)
    be72:	6813      	ldr	r3, [r2, #0]
    be74:	6852      	ldr	r2, [r2, #4]
    be76:	18e3      	adds	r3, r4, r3
    be78:	eb45 0202 	adc.w	r2, r5, r2
    be7c:	f06f 0101 	mvn.w	r1, #1
    be80:	1ace      	subs	r6, r1, r3
    be82:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    be86:	4632      	mov	r2, r6
    be88:	463b      	mov	r3, r7
    be8a:	2e01      	cmp	r6, #1
    be8c:	f177 0100 	sbcs.w	r1, r7, #0
    be90:	dbb0      	blt.n	bdf4 <z_add_timeout+0x30>
    be92:	f8ca 2010 	str.w	r2, [sl, #16]
    be96:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    be9a:	f7ff ff4b 	bl	bd34 <first>
    be9e:	4684      	mov	ip, r0
    bea0:	f1bc 0f00 	cmp.w	ip, #0
    bea4:	d0c9      	beq.n	be3a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    bea6:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    beaa:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    beae:	e9cd 2300 	strd	r2, r3, [sp]
    beb2:	4282      	cmp	r2, r0
    beb4:	418b      	sbcs	r3, r1
    beb6:	dbad      	blt.n	be14 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    beb8:	9b00      	ldr	r3, [sp, #0]
    beba:	1a1a      	subs	r2, r3, r0
    bebc:	9b01      	ldr	r3, [sp, #4]
    bebe:	eb63 0301 	sbc.w	r3, r3, r1
    bec2:	f8ca 2010 	str.w	r2, [sl, #16]
    bec6:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    beca:	4660      	mov	r0, ip
    becc:	f7ff ff3c 	bl	bd48 <next>
    bed0:	4684      	mov	ip, r0
    bed2:	e7e5      	b.n	bea0 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    bed4:	4b0e      	ldr	r3, [pc, #56]	; (bf10 <z_add_timeout+0x14c>)
    bed6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    bed8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    bedc:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    bee0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    bee4:	f8c3 a004 	str.w	sl, [r3, #4]
}
    bee8:	e7aa      	b.n	be40 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    beea:	f7ff ff45 	bl	bd78 <next_timeout>

			if (next_time == 0 ||
    beee:	4603      	mov	r3, r0
    bef0:	b118      	cbz	r0, befa <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    bef2:	4a08      	ldr	r2, [pc, #32]	; (bf14 <z_add_timeout+0x150>)
    bef4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    bef6:	4282      	cmp	r2, r0
    bef8:	d0a6      	beq.n	be48 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    befa:	2100      	movs	r1, #0
    befc:	4618      	mov	r0, r3
    befe:	f7f9 fb05 	bl	550c <sys_clock_set_timeout>
    bf02:	e7a1      	b.n	be48 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    bf04:	b003      	add	sp, #12
    bf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf0a:	bf00      	nop
    bf0c:	200004f0 	.word	0x200004f0
    bf10:	20000094 	.word	0x20000094
    bf14:	2001d6d8 	.word	0x2001d6d8

0000bf18 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf1a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    bf1c:	f7ff fc04 	bl	b728 <z_time_slice>
	__asm__ volatile(
    bf20:	f04f 0320 	mov.w	r3, #32
    bf24:	f3ef 8511 	mrs	r5, BASEPRI
    bf28:	f383 8812 	msr	BASEPRI_MAX, r3
    bf2c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    bf30:	4b28      	ldr	r3, [pc, #160]	; (bfd4 <sys_clock_announce+0xbc>)
    bf32:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    bf34:	f7ff fefe 	bl	bd34 <first>
    bf38:	4604      	mov	r4, r0
    bf3a:	b350      	cbz	r0, bf92 <sys_clock_announce+0x7a>
    bf3c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    bf40:	4b24      	ldr	r3, [pc, #144]	; (bfd4 <sys_clock_announce+0xbc>)
    bf42:	681b      	ldr	r3, [r3, #0]
    bf44:	17d9      	asrs	r1, r3, #31
    bf46:	42b3      	cmp	r3, r6
    bf48:	eb71 0207 	sbcs.w	r2, r1, r7
    bf4c:	db21      	blt.n	bf92 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    bf4e:	4a22      	ldr	r2, [pc, #136]	; (bfd8 <sys_clock_announce+0xc0>)
    bf50:	e9d2 0100 	ldrd	r0, r1, [r2]
    bf54:	1980      	adds	r0, r0, r6
    bf56:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    bf5a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    bf5e:	1b9b      	subs	r3, r3, r6
    bf60:	4a1c      	ldr	r2, [pc, #112]	; (bfd4 <sys_clock_announce+0xbc>)
    bf62:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    bf64:	2200      	movs	r2, #0
    bf66:	2300      	movs	r3, #0
    bf68:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    bf6c:	4620      	mov	r0, r4
    bf6e:	f003 ffcd 	bl	ff0c <remove_timeout>
	__asm__ volatile(
    bf72:	f385 8811 	msr	BASEPRI, r5
    bf76:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    bf7a:	68a3      	ldr	r3, [r4, #8]
    bf7c:	4620      	mov	r0, r4
    bf7e:	4798      	blx	r3
	__asm__ volatile(
    bf80:	f04f 0320 	mov.w	r3, #32
    bf84:	f3ef 8511 	mrs	r5, BASEPRI
    bf88:	f383 8812 	msr	BASEPRI_MAX, r3
    bf8c:	f3bf 8f6f 	isb	sy
    bf90:	e7d0      	b.n	bf34 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    bf92:	b144      	cbz	r4, bfa6 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    bf94:	4b0f      	ldr	r3, [pc, #60]	; (bfd4 <sys_clock_announce+0xbc>)
    bf96:	6819      	ldr	r1, [r3, #0]
    bf98:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    bf9c:	1a52      	subs	r2, r2, r1
    bf9e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    bfa2:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    bfa6:	480c      	ldr	r0, [pc, #48]	; (bfd8 <sys_clock_announce+0xc0>)
    bfa8:	490a      	ldr	r1, [pc, #40]	; (bfd4 <sys_clock_announce+0xbc>)
    bfaa:	680c      	ldr	r4, [r1, #0]
    bfac:	e9d0 2300 	ldrd	r2, r3, [r0]
    bfb0:	1912      	adds	r2, r2, r4
    bfb2:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    bfb6:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    bfba:	2400      	movs	r4, #0
    bfbc:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    bfbe:	f7ff fedb 	bl	bd78 <next_timeout>
    bfc2:	4621      	mov	r1, r4
    bfc4:	f7f9 faa2 	bl	550c <sys_clock_set_timeout>
	__asm__ volatile(
    bfc8:	f385 8811 	msr	BASEPRI, r5
    bfcc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    bfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfd2:	bf00      	nop
    bfd4:	2001d71c 	.word	0x2001d71c
    bfd8:	200004f0 	.word	0x200004f0

0000bfdc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    bfdc:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    bfde:	2100      	movs	r1, #0
	__asm__ volatile(
    bfe0:	f04f 0320 	mov.w	r3, #32
    bfe4:	f3ef 8411 	mrs	r4, BASEPRI
    bfe8:	f383 8812 	msr	BASEPRI_MAX, r3
    bfec:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    bff0:	2200      	movs	r2, #0
    bff2:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    bff4:	b969      	cbnz	r1, c012 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    bff6:	f7f9 fabd 	bl	5574 <sys_clock_elapsed>
    bffa:	4b07      	ldr	r3, [pc, #28]	; (c018 <sys_clock_tick_get+0x3c>)
    bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
    c000:	1812      	adds	r2, r2, r0
    c002:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    c006:	f384 8811 	msr	BASEPRI, r4
    c00a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c00e:	2101      	movs	r1, #1
    c010:	e7f0      	b.n	bff4 <sys_clock_tick_get+0x18>
	}
	return t;
}
    c012:	4610      	mov	r0, r2
    c014:	4619      	mov	r1, r3
    c016:	bd10      	pop	{r4, pc}
    c018:	200004f0 	.word	0x200004f0

0000c01c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    c01c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    c01e:	4a03      	ldr	r2, [pc, #12]	; (c02c <boot_banner+0x10>)
    c020:	4903      	ldr	r1, [pc, #12]	; (c030 <boot_banner+0x14>)
    c022:	4804      	ldr	r0, [pc, #16]	; (c034 <boot_banner+0x18>)
    c024:	f001 fd6c 	bl	db00 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    c028:	bd08      	pop	{r3, pc}
    c02a:	bf00      	nop
    c02c:	00011220 	.word	0x00011220
    c030:	00057780 	.word	0x00057780
    c034:	0005779c 	.word	0x0005779c

0000c038 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    c038:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c03a:	4c06      	ldr	r4, [pc, #24]	; (c054 <statics_init+0x1c>)
    c03c:	4b06      	ldr	r3, [pc, #24]	; (c058 <statics_init+0x20>)
    c03e:	429c      	cmp	r4, r3
    c040:	d206      	bcs.n	c050 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    c042:	68a2      	ldr	r2, [r4, #8]
    c044:	6861      	ldr	r1, [r4, #4]
    c046:	4620      	mov	r0, r4
    c048:	f003 ffe4 	bl	10014 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c04c:	3418      	adds	r4, #24
    c04e:	e7f5      	b.n	c03c <statics_init+0x4>
		}
	}
	return 0;
}
    c050:	2000      	movs	r0, #0
    c052:	bd10      	pop	{r4, pc}
    c054:	200002e4 	.word	0x200002e4
    c058:	200002e4 	.word	0x200002e4

0000c05c <nrf_cc3xx_platform_init_no_rng>:
    c05c:	b510      	push	{r4, lr}
    c05e:	4c0a      	ldr	r4, [pc, #40]	; (c088 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    c060:	6823      	ldr	r3, [r4, #0]
    c062:	b11b      	cbz	r3, c06c <nrf_cc3xx_platform_init_no_rng+0x10>
    c064:	2301      	movs	r3, #1
    c066:	6023      	str	r3, [r4, #0]
    c068:	2000      	movs	r0, #0
    c06a:	bd10      	pop	{r4, pc}
    c06c:	f000 f8d6 	bl	c21c <CC_LibInitNoRng>
    c070:	2800      	cmp	r0, #0
    c072:	d0f7      	beq.n	c064 <nrf_cc3xx_platform_init_no_rng+0x8>
    c074:	3801      	subs	r0, #1
    c076:	2806      	cmp	r0, #6
    c078:	d803      	bhi.n	c082 <nrf_cc3xx_platform_init_no_rng+0x26>
    c07a:	4b04      	ldr	r3, [pc, #16]	; (c08c <nrf_cc3xx_platform_init_no_rng+0x30>)
    c07c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    c080:	bd10      	pop	{r4, pc}
    c082:	4803      	ldr	r0, [pc, #12]	; (c090 <nrf_cc3xx_platform_init_no_rng+0x34>)
    c084:	bd10      	pop	{r4, pc}
    c086:	bf00      	nop
    c088:	2001d720 	.word	0x2001d720
    c08c:	000577c4 	.word	0x000577c4
    c090:	ffff8ffe 	.word	0xffff8ffe

0000c094 <nrf_cc3xx_platform_abort>:
    c094:	f3bf 8f4f 	dsb	sy
    c098:	4905      	ldr	r1, [pc, #20]	; (c0b0 <nrf_cc3xx_platform_abort+0x1c>)
    c09a:	4b06      	ldr	r3, [pc, #24]	; (c0b4 <nrf_cc3xx_platform_abort+0x20>)
    c09c:	68ca      	ldr	r2, [r1, #12]
    c09e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c0a2:	4313      	orrs	r3, r2
    c0a4:	60cb      	str	r3, [r1, #12]
    c0a6:	f3bf 8f4f 	dsb	sy
    c0aa:	bf00      	nop
    c0ac:	e7fd      	b.n	c0aa <nrf_cc3xx_platform_abort+0x16>
    c0ae:	bf00      	nop
    c0b0:	e000ed00 	.word	0xe000ed00
    c0b4:	05fa0004 	.word	0x05fa0004

0000c0b8 <CC_PalAbort>:
    c0b8:	b4f0      	push	{r4, r5, r6, r7}
    c0ba:	4f09      	ldr	r7, [pc, #36]	; (c0e0 <CC_PalAbort+0x28>)
    c0bc:	4e09      	ldr	r6, [pc, #36]	; (c0e4 <CC_PalAbort+0x2c>)
    c0be:	4c0a      	ldr	r4, [pc, #40]	; (c0e8 <CC_PalAbort+0x30>)
    c0c0:	4a0a      	ldr	r2, [pc, #40]	; (c0ec <CC_PalAbort+0x34>)
    c0c2:	4d0b      	ldr	r5, [pc, #44]	; (c0f0 <CC_PalAbort+0x38>)
    c0c4:	490b      	ldr	r1, [pc, #44]	; (c0f4 <CC_PalAbort+0x3c>)
    c0c6:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    c0ca:	603b      	str	r3, [r7, #0]
    c0cc:	6852      	ldr	r2, [r2, #4]
    c0ce:	6033      	str	r3, [r6, #0]
    c0d0:	6023      	str	r3, [r4, #0]
    c0d2:	2400      	movs	r4, #0
    c0d4:	602b      	str	r3, [r5, #0]
    c0d6:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    c0da:	bcf0      	pop	{r4, r5, r6, r7}
    c0dc:	4710      	bx	r2
    c0de:	bf00      	nop
    c0e0:	5002b400 	.word	0x5002b400
    c0e4:	5002b404 	.word	0x5002b404
    c0e8:	5002b408 	.word	0x5002b408
    c0ec:	2000009c 	.word	0x2000009c
    c0f0:	5002b40c 	.word	0x5002b40c
    c0f4:	5002a000 	.word	0x5002a000

0000c0f8 <nrf_cc3xx_platform_set_abort>:
    c0f8:	e9d0 1200 	ldrd	r1, r2, [r0]
    c0fc:	4b01      	ldr	r3, [pc, #4]	; (c104 <nrf_cc3xx_platform_set_abort+0xc>)
    c0fe:	e9c3 1200 	strd	r1, r2, [r3]
    c102:	4770      	bx	lr
    c104:	2000009c 	.word	0x2000009c

0000c108 <mutex_free>:
    c108:	b510      	push	{r4, lr}
    c10a:	4604      	mov	r4, r0
    c10c:	b130      	cbz	r0, c11c <mutex_free+0x14>
    c10e:	6863      	ldr	r3, [r4, #4]
    c110:	06db      	lsls	r3, r3, #27
    c112:	d502      	bpl.n	c11a <mutex_free+0x12>
    c114:	2300      	movs	r3, #0
    c116:	6023      	str	r3, [r4, #0]
    c118:	6063      	str	r3, [r4, #4]
    c11a:	bd10      	pop	{r4, pc}
    c11c:	4b02      	ldr	r3, [pc, #8]	; (c128 <mutex_free+0x20>)
    c11e:	4803      	ldr	r0, [pc, #12]	; (c12c <mutex_free+0x24>)
    c120:	685b      	ldr	r3, [r3, #4]
    c122:	4798      	blx	r3
    c124:	e7f3      	b.n	c10e <mutex_free+0x6>
    c126:	bf00      	nop
    c128:	2000009c 	.word	0x2000009c
    c12c:	000577e0 	.word	0x000577e0

0000c130 <mutex_unlock>:
    c130:	b168      	cbz	r0, c14e <mutex_unlock+0x1e>
    c132:	6843      	ldr	r3, [r0, #4]
    c134:	b13b      	cbz	r3, c146 <mutex_unlock+0x16>
    c136:	06db      	lsls	r3, r3, #27
    c138:	d507      	bpl.n	c14a <mutex_unlock+0x1a>
    c13a:	f3bf 8f5f 	dmb	sy
    c13e:	2300      	movs	r3, #0
    c140:	6003      	str	r3, [r0, #0]
    c142:	4618      	mov	r0, r3
    c144:	4770      	bx	lr
    c146:	4803      	ldr	r0, [pc, #12]	; (c154 <mutex_unlock+0x24>)
    c148:	4770      	bx	lr
    c14a:	4803      	ldr	r0, [pc, #12]	; (c158 <mutex_unlock+0x28>)
    c14c:	4770      	bx	lr
    c14e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c152:	4770      	bx	lr
    c154:	ffff8fea 	.word	0xffff8fea
    c158:	ffff8fe9 	.word	0xffff8fe9

0000c15c <mutex_init>:
    c15c:	b510      	push	{r4, lr}
    c15e:	4604      	mov	r4, r0
    c160:	b120      	cbz	r0, c16c <mutex_init+0x10>
    c162:	2200      	movs	r2, #0
    c164:	2311      	movs	r3, #17
    c166:	6022      	str	r2, [r4, #0]
    c168:	6063      	str	r3, [r4, #4]
    c16a:	bd10      	pop	{r4, pc}
    c16c:	4801      	ldr	r0, [pc, #4]	; (c174 <mutex_init+0x18>)
    c16e:	f7ff ffa3 	bl	c0b8 <CC_PalAbort>
    c172:	e7f6      	b.n	c162 <mutex_init+0x6>
    c174:	00057808 	.word	0x00057808

0000c178 <mutex_lock>:
    c178:	b1c0      	cbz	r0, c1ac <mutex_lock+0x34>
    c17a:	6843      	ldr	r3, [r0, #4]
    c17c:	b1a3      	cbz	r3, c1a8 <mutex_lock+0x30>
    c17e:	06db      	lsls	r3, r3, #27
    c180:	d510      	bpl.n	c1a4 <mutex_lock+0x2c>
    c182:	2201      	movs	r2, #1
    c184:	f3bf 8f5b 	dmb	ish
    c188:	e850 3f00 	ldrex	r3, [r0]
    c18c:	e840 2100 	strex	r1, r2, [r0]
    c190:	2900      	cmp	r1, #0
    c192:	d1f9      	bne.n	c188 <mutex_lock+0x10>
    c194:	f3bf 8f5b 	dmb	ish
    c198:	2b01      	cmp	r3, #1
    c19a:	d0f3      	beq.n	c184 <mutex_lock+0xc>
    c19c:	f3bf 8f5f 	dmb	sy
    c1a0:	2000      	movs	r0, #0
    c1a2:	4770      	bx	lr
    c1a4:	4803      	ldr	r0, [pc, #12]	; (c1b4 <mutex_lock+0x3c>)
    c1a6:	4770      	bx	lr
    c1a8:	4803      	ldr	r0, [pc, #12]	; (c1b8 <mutex_lock+0x40>)
    c1aa:	4770      	bx	lr
    c1ac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c1b0:	4770      	bx	lr
    c1b2:	bf00      	nop
    c1b4:	ffff8fe9 	.word	0xffff8fe9
    c1b8:	ffff8fea 	.word	0xffff8fea

0000c1bc <nrf_cc3xx_platform_set_mutexes>:
    c1bc:	b570      	push	{r4, r5, r6, lr}
    c1be:	e9d0 2300 	ldrd	r2, r3, [r0]
    c1c2:	4c13      	ldr	r4, [pc, #76]	; (c210 <nrf_cc3xx_platform_set_mutexes+0x54>)
    c1c4:	4d13      	ldr	r5, [pc, #76]	; (c214 <nrf_cc3xx_platform_set_mutexes+0x58>)
    c1c6:	e9c4 2300 	strd	r2, r3, [r4]
    c1ca:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    c1ce:	e9c4 6302 	strd	r6, r3, [r4, #8]
    c1d2:	4b11      	ldr	r3, [pc, #68]	; (c218 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    c1d4:	6808      	ldr	r0, [r1, #0]
    c1d6:	6018      	str	r0, [r3, #0]
    c1d8:	6848      	ldr	r0, [r1, #4]
    c1da:	6058      	str	r0, [r3, #4]
    c1dc:	6888      	ldr	r0, [r1, #8]
    c1de:	6098      	str	r0, [r3, #8]
    c1e0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    c1e4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    c1e8:	60de      	str	r6, [r3, #12]
    c1ea:	6118      	str	r0, [r3, #16]
    c1ec:	06cb      	lsls	r3, r1, #27
    c1ee:	d50d      	bpl.n	c20c <nrf_cc3xx_platform_set_mutexes+0x50>
    c1f0:	2300      	movs	r3, #0
    c1f2:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    c1f6:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    c1fa:	f505 7088 	add.w	r0, r5, #272	; 0x110
    c1fe:	4790      	blx	r2
    c200:	6823      	ldr	r3, [r4, #0]
    c202:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    c206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c20a:	4718      	bx	r3
    c20c:	bd70      	pop	{r4, r5, r6, pc}
    c20e:	bf00      	nop
    c210:	200000ac 	.word	0x200000ac
    c214:	2001d748 	.word	0x2001d748
    c218:	200000bc 	.word	0x200000bc

0000c21c <CC_LibInitNoRng>:
    c21c:	b510      	push	{r4, lr}
    c21e:	f000 f833 	bl	c288 <CC_HalInit>
    c222:	b120      	cbz	r0, c22e <CC_LibInitNoRng+0x12>
    c224:	2403      	movs	r4, #3
    c226:	f000 f867 	bl	c2f8 <CC_PalTerminate>
    c22a:	4620      	mov	r0, r4
    c22c:	bd10      	pop	{r4, pc}
    c22e:	f000 f835 	bl	c29c <CC_PalInit>
    c232:	b990      	cbnz	r0, c25a <CC_LibInitNoRng+0x3e>
    c234:	f000 f8b0 	bl	c398 <CC_PalPowerSaveModeSelect>
    c238:	b990      	cbnz	r0, c260 <CC_LibInitNoRng+0x44>
    c23a:	4b0f      	ldr	r3, [pc, #60]	; (c278 <CC_LibInitNoRng+0x5c>)
    c23c:	681b      	ldr	r3, [r3, #0]
    c23e:	0e1b      	lsrs	r3, r3, #24
    c240:	2bf0      	cmp	r3, #240	; 0xf0
    c242:	d108      	bne.n	c256 <CC_LibInitNoRng+0x3a>
    c244:	4a0d      	ldr	r2, [pc, #52]	; (c27c <CC_LibInitNoRng+0x60>)
    c246:	4b0e      	ldr	r3, [pc, #56]	; (c280 <CC_LibInitNoRng+0x64>)
    c248:	6812      	ldr	r2, [r2, #0]
    c24a:	429a      	cmp	r2, r3
    c24c:	d00a      	beq.n	c264 <CC_LibInitNoRng+0x48>
    c24e:	2407      	movs	r4, #7
    c250:	f000 f81c 	bl	c28c <CC_HalTerminate>
    c254:	e7e7      	b.n	c226 <CC_LibInitNoRng+0xa>
    c256:	2406      	movs	r4, #6
    c258:	e7fa      	b.n	c250 <CC_LibInitNoRng+0x34>
    c25a:	2404      	movs	r4, #4
    c25c:	4620      	mov	r0, r4
    c25e:	bd10      	pop	{r4, pc}
    c260:	2400      	movs	r4, #0
    c262:	e7f5      	b.n	c250 <CC_LibInitNoRng+0x34>
    c264:	2001      	movs	r0, #1
    c266:	f000 f897 	bl	c398 <CC_PalPowerSaveModeSelect>
    c26a:	4604      	mov	r4, r0
    c26c:	2800      	cmp	r0, #0
    c26e:	d1f7      	bne.n	c260 <CC_LibInitNoRng+0x44>
    c270:	4b04      	ldr	r3, [pc, #16]	; (c284 <CC_LibInitNoRng+0x68>)
    c272:	6018      	str	r0, [r3, #0]
    c274:	e7d9      	b.n	c22a <CC_LibInitNoRng+0xe>
    c276:	bf00      	nop
    c278:	5002b928 	.word	0x5002b928
    c27c:	5002ba24 	.word	0x5002ba24
    c280:	20e00000 	.word	0x20e00000
    c284:	5002ba0c 	.word	0x5002ba0c

0000c288 <CC_HalInit>:
    c288:	2000      	movs	r0, #0
    c28a:	4770      	bx	lr

0000c28c <CC_HalTerminate>:
    c28c:	2000      	movs	r0, #0
    c28e:	4770      	bx	lr

0000c290 <CC_HalMaskInterrupt>:
    c290:	4b01      	ldr	r3, [pc, #4]	; (c298 <CC_HalMaskInterrupt+0x8>)
    c292:	6018      	str	r0, [r3, #0]
    c294:	4770      	bx	lr
    c296:	bf00      	nop
    c298:	5002ba04 	.word	0x5002ba04

0000c29c <CC_PalInit>:
    c29c:	b510      	push	{r4, lr}
    c29e:	4811      	ldr	r0, [pc, #68]	; (c2e4 <CC_PalInit+0x48>)
    c2a0:	f000 f848 	bl	c334 <CC_PalMutexCreate>
    c2a4:	b100      	cbz	r0, c2a8 <CC_PalInit+0xc>
    c2a6:	bd10      	pop	{r4, pc}
    c2a8:	480f      	ldr	r0, [pc, #60]	; (c2e8 <CC_PalInit+0x4c>)
    c2aa:	f000 f843 	bl	c334 <CC_PalMutexCreate>
    c2ae:	2800      	cmp	r0, #0
    c2b0:	d1f9      	bne.n	c2a6 <CC_PalInit+0xa>
    c2b2:	4c0e      	ldr	r4, [pc, #56]	; (c2ec <CC_PalInit+0x50>)
    c2b4:	4620      	mov	r0, r4
    c2b6:	f000 f83d 	bl	c334 <CC_PalMutexCreate>
    c2ba:	2800      	cmp	r0, #0
    c2bc:	d1f3      	bne.n	c2a6 <CC_PalInit+0xa>
    c2be:	4b0c      	ldr	r3, [pc, #48]	; (c2f0 <CC_PalInit+0x54>)
    c2c0:	480c      	ldr	r0, [pc, #48]	; (c2f4 <CC_PalInit+0x58>)
    c2c2:	601c      	str	r4, [r3, #0]
    c2c4:	f000 f836 	bl	c334 <CC_PalMutexCreate>
    c2c8:	4601      	mov	r1, r0
    c2ca:	2800      	cmp	r0, #0
    c2cc:	d1eb      	bne.n	c2a6 <CC_PalInit+0xa>
    c2ce:	f000 f82d 	bl	c32c <CC_PalDmaInit>
    c2d2:	4604      	mov	r4, r0
    c2d4:	b108      	cbz	r0, c2da <CC_PalInit+0x3e>
    c2d6:	4620      	mov	r0, r4
    c2d8:	bd10      	pop	{r4, pc}
    c2da:	f000 f83f 	bl	c35c <CC_PalPowerSaveModeInit>
    c2de:	4620      	mov	r0, r4
    c2e0:	e7fa      	b.n	c2d8 <CC_PalInit+0x3c>
    c2e2:	bf00      	nop
    c2e4:	200000f4 	.word	0x200000f4
    c2e8:	200000e8 	.word	0x200000e8
    c2ec:	200000f0 	.word	0x200000f0
    c2f0:	200000f8 	.word	0x200000f8
    c2f4:	200000ec 	.word	0x200000ec

0000c2f8 <CC_PalTerminate>:
    c2f8:	b508      	push	{r3, lr}
    c2fa:	4808      	ldr	r0, [pc, #32]	; (c31c <CC_PalTerminate+0x24>)
    c2fc:	f000 f824 	bl	c348 <CC_PalMutexDestroy>
    c300:	4807      	ldr	r0, [pc, #28]	; (c320 <CC_PalTerminate+0x28>)
    c302:	f000 f821 	bl	c348 <CC_PalMutexDestroy>
    c306:	4807      	ldr	r0, [pc, #28]	; (c324 <CC_PalTerminate+0x2c>)
    c308:	f000 f81e 	bl	c348 <CC_PalMutexDestroy>
    c30c:	4806      	ldr	r0, [pc, #24]	; (c328 <CC_PalTerminate+0x30>)
    c30e:	f000 f81b 	bl	c348 <CC_PalMutexDestroy>
    c312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c316:	f000 b80b 	b.w	c330 <CC_PalDmaTerminate>
    c31a:	bf00      	nop
    c31c:	200000f4 	.word	0x200000f4
    c320:	200000e8 	.word	0x200000e8
    c324:	200000f0 	.word	0x200000f0
    c328:	200000ec 	.word	0x200000ec

0000c32c <CC_PalDmaInit>:
    c32c:	2000      	movs	r0, #0
    c32e:	4770      	bx	lr

0000c330 <CC_PalDmaTerminate>:
    c330:	4770      	bx	lr
    c332:	bf00      	nop

0000c334 <CC_PalMutexCreate>:
    c334:	b508      	push	{r3, lr}
    c336:	4b03      	ldr	r3, [pc, #12]	; (c344 <CC_PalMutexCreate+0x10>)
    c338:	6802      	ldr	r2, [r0, #0]
    c33a:	681b      	ldr	r3, [r3, #0]
    c33c:	6810      	ldr	r0, [r2, #0]
    c33e:	4798      	blx	r3
    c340:	2000      	movs	r0, #0
    c342:	bd08      	pop	{r3, pc}
    c344:	200000ac 	.word	0x200000ac

0000c348 <CC_PalMutexDestroy>:
    c348:	b508      	push	{r3, lr}
    c34a:	4b03      	ldr	r3, [pc, #12]	; (c358 <CC_PalMutexDestroy+0x10>)
    c34c:	6802      	ldr	r2, [r0, #0]
    c34e:	685b      	ldr	r3, [r3, #4]
    c350:	6810      	ldr	r0, [r2, #0]
    c352:	4798      	blx	r3
    c354:	2000      	movs	r0, #0
    c356:	bd08      	pop	{r3, pc}
    c358:	200000ac 	.word	0x200000ac

0000c35c <CC_PalPowerSaveModeInit>:
    c35c:	b570      	push	{r4, r5, r6, lr}
    c35e:	4c09      	ldr	r4, [pc, #36]	; (c384 <CC_PalPowerSaveModeInit+0x28>)
    c360:	4d09      	ldr	r5, [pc, #36]	; (c388 <CC_PalPowerSaveModeInit+0x2c>)
    c362:	6920      	ldr	r0, [r4, #16]
    c364:	68ab      	ldr	r3, [r5, #8]
    c366:	4798      	blx	r3
    c368:	b118      	cbz	r0, c372 <CC_PalPowerSaveModeInit+0x16>
    c36a:	4b08      	ldr	r3, [pc, #32]	; (c38c <CC_PalPowerSaveModeInit+0x30>)
    c36c:	4808      	ldr	r0, [pc, #32]	; (c390 <CC_PalPowerSaveModeInit+0x34>)
    c36e:	685b      	ldr	r3, [r3, #4]
    c370:	4798      	blx	r3
    c372:	4a08      	ldr	r2, [pc, #32]	; (c394 <CC_PalPowerSaveModeInit+0x38>)
    c374:	68eb      	ldr	r3, [r5, #12]
    c376:	6920      	ldr	r0, [r4, #16]
    c378:	2100      	movs	r1, #0
    c37a:	6011      	str	r1, [r2, #0]
    c37c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c380:	4718      	bx	r3
    c382:	bf00      	nop
    c384:	200000bc 	.word	0x200000bc
    c388:	200000ac 	.word	0x200000ac
    c38c:	2000009c 	.word	0x2000009c
    c390:	0005782c 	.word	0x0005782c
    c394:	2001d734 	.word	0x2001d734

0000c398 <CC_PalPowerSaveModeSelect>:
    c398:	b570      	push	{r4, r5, r6, lr}
    c39a:	4d1a      	ldr	r5, [pc, #104]	; (c404 <CC_PalPowerSaveModeSelect+0x6c>)
    c39c:	4e1a      	ldr	r6, [pc, #104]	; (c408 <CC_PalPowerSaveModeSelect+0x70>)
    c39e:	4604      	mov	r4, r0
    c3a0:	68b2      	ldr	r2, [r6, #8]
    c3a2:	6928      	ldr	r0, [r5, #16]
    c3a4:	4790      	blx	r2
    c3a6:	b9f0      	cbnz	r0, c3e6 <CC_PalPowerSaveModeSelect+0x4e>
    c3a8:	b15c      	cbz	r4, c3c2 <CC_PalPowerSaveModeSelect+0x2a>
    c3aa:	4c18      	ldr	r4, [pc, #96]	; (c40c <CC_PalPowerSaveModeSelect+0x74>)
    c3ac:	6823      	ldr	r3, [r4, #0]
    c3ae:	b1ab      	cbz	r3, c3dc <CC_PalPowerSaveModeSelect+0x44>
    c3b0:	2b01      	cmp	r3, #1
    c3b2:	d01a      	beq.n	c3ea <CC_PalPowerSaveModeSelect+0x52>
    c3b4:	3b01      	subs	r3, #1
    c3b6:	6023      	str	r3, [r4, #0]
    c3b8:	6928      	ldr	r0, [r5, #16]
    c3ba:	68f3      	ldr	r3, [r6, #12]
    c3bc:	4798      	blx	r3
    c3be:	2000      	movs	r0, #0
    c3c0:	bd70      	pop	{r4, r5, r6, pc}
    c3c2:	4c12      	ldr	r4, [pc, #72]	; (c40c <CC_PalPowerSaveModeSelect+0x74>)
    c3c4:	6821      	ldr	r1, [r4, #0]
    c3c6:	b939      	cbnz	r1, c3d8 <CC_PalPowerSaveModeSelect+0x40>
    c3c8:	4b11      	ldr	r3, [pc, #68]	; (c410 <CC_PalPowerSaveModeSelect+0x78>)
    c3ca:	4a12      	ldr	r2, [pc, #72]	; (c414 <CC_PalPowerSaveModeSelect+0x7c>)
    c3cc:	2001      	movs	r0, #1
    c3ce:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    c3d2:	6813      	ldr	r3, [r2, #0]
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	d1fc      	bne.n	c3d2 <CC_PalPowerSaveModeSelect+0x3a>
    c3d8:	3101      	adds	r1, #1
    c3da:	6021      	str	r1, [r4, #0]
    c3dc:	68f3      	ldr	r3, [r6, #12]
    c3de:	6928      	ldr	r0, [r5, #16]
    c3e0:	4798      	blx	r3
    c3e2:	2000      	movs	r0, #0
    c3e4:	bd70      	pop	{r4, r5, r6, pc}
    c3e6:	480c      	ldr	r0, [pc, #48]	; (c418 <CC_PalPowerSaveModeSelect+0x80>)
    c3e8:	bd70      	pop	{r4, r5, r6, pc}
    c3ea:	4a0a      	ldr	r2, [pc, #40]	; (c414 <CC_PalPowerSaveModeSelect+0x7c>)
    c3ec:	6813      	ldr	r3, [r2, #0]
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d1fc      	bne.n	c3ec <CC_PalPowerSaveModeSelect+0x54>
    c3f2:	4a07      	ldr	r2, [pc, #28]	; (c410 <CC_PalPowerSaveModeSelect+0x78>)
    c3f4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    c3f8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    c3fc:	f7ff ff48 	bl	c290 <CC_HalMaskInterrupt>
    c400:	6823      	ldr	r3, [r4, #0]
    c402:	e7d7      	b.n	c3b4 <CC_PalPowerSaveModeSelect+0x1c>
    c404:	200000bc 	.word	0x200000bc
    c408:	200000ac 	.word	0x200000ac
    c40c:	2001d734 	.word	0x2001d734
    c410:	5002a000 	.word	0x5002a000
    c414:	5002b910 	.word	0x5002b910
    c418:	ffff8fe9 	.word	0xffff8fe9

0000c41c <_ZSt15get_new_handlerv>:
    c41c:	4b02      	ldr	r3, [pc, #8]	; (c428 <_ZSt15get_new_handlerv+0xc>)
    c41e:	6818      	ldr	r0, [r3, #0]
    c420:	f3bf 8f5b 	dmb	ish
    c424:	4770      	bx	lr
    c426:	bf00      	nop
    c428:	2001d738 	.word	0x2001d738

0000c42c <frexp>:
    c42c:	f8df c064 	ldr.w	ip, [pc, #100]	; c494 <frexp+0x68>
    c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c432:	4617      	mov	r7, r2
    c434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    c438:	2200      	movs	r2, #0
    c43a:	4563      	cmp	r3, ip
    c43c:	4604      	mov	r4, r0
    c43e:	460d      	mov	r5, r1
    c440:	603a      	str	r2, [r7, #0]
    c442:	dc22      	bgt.n	c48a <frexp+0x5e>
    c444:	4684      	mov	ip, r0
    c446:	ea53 0c0c 	orrs.w	ip, r3, ip
    c44a:	d01e      	beq.n	c48a <frexp+0x5e>
    c44c:	f8df c048 	ldr.w	ip, [pc, #72]	; c498 <frexp+0x6c>
    c450:	ea01 0c0c 	and.w	ip, r1, ip
    c454:	460e      	mov	r6, r1
    c456:	f1bc 0f00 	cmp.w	ip, #0
    c45a:	d109      	bne.n	c470 <frexp+0x44>
    c45c:	4b0c      	ldr	r3, [pc, #48]	; (c490 <frexp+0x64>)
    c45e:	2200      	movs	r2, #0
    c460:	f7f4 f85a 	bl	518 <__aeabi_dmul>
    c464:	f06f 0235 	mvn.w	r2, #53	; 0x35
    c468:	4604      	mov	r4, r0
    c46a:	460e      	mov	r6, r1
    c46c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    c470:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
    c474:	151b      	asrs	r3, r3, #20
    c476:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
    c47a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    c47e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
    c482:	4413      	add	r3, r2
    c484:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    c488:	603b      	str	r3, [r7, #0]
    c48a:	4620      	mov	r0, r4
    c48c:	4629      	mov	r1, r5
    c48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c490:	43500000 	.word	0x43500000
    c494:	7fefffff 	.word	0x7fefffff
    c498:	7ff00000 	.word	0x7ff00000

0000c49c <round>:
    c49c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    c4a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
    c4a4:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
    c4a8:	2c13      	cmp	r4, #19
    c4aa:	460b      	mov	r3, r1
    c4ac:	460d      	mov	r5, r1
    c4ae:	4602      	mov	r2, r0
    c4b0:	dc0f      	bgt.n	c4d2 <round+0x36>
    c4b2:	2c00      	cmp	r4, #0
    c4b4:	db2a      	blt.n	c50c <round+0x70>
    c4b6:	491d      	ldr	r1, [pc, #116]	; (c52c <round+0x90>)
    c4b8:	4121      	asrs	r1, r4
    c4ba:	ea03 0001 	and.w	r0, r3, r1
    c4be:	4310      	orrs	r0, r2
    c4c0:	d02f      	beq.n	c522 <round+0x86>
    c4c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    c4c6:	4123      	asrs	r3, r4
    c4c8:	441d      	add	r5, r3
    c4ca:	ea25 0501 	bic.w	r5, r5, r1
    c4ce:	2300      	movs	r3, #0
    c4d0:	e025      	b.n	c51e <round+0x82>
    c4d2:	2c33      	cmp	r4, #51	; 0x33
    c4d4:	dd07      	ble.n	c4e6 <round+0x4a>
    c4d6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    c4da:	d122      	bne.n	c522 <round+0x86>
    c4dc:	f7f3 fe66 	bl	1ac <__adddf3>
    c4e0:	4602      	mov	r2, r0
    c4e2:	460b      	mov	r3, r1
    c4e4:	e01d      	b.n	c522 <round+0x86>
    c4e6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    c4ea:	f04f 31ff 	mov.w	r1, #4294967295
    c4ee:	fa21 f707 	lsr.w	r7, r1, r7
    c4f2:	4238      	tst	r0, r7
    c4f4:	d015      	beq.n	c522 <round+0x86>
    c4f6:	2201      	movs	r2, #1
    c4f8:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
    c4fc:	fa02 f303 	lsl.w	r3, r2, r3
    c500:	18c3      	adds	r3, r0, r3
    c502:	bf28      	it	cs
    c504:	18ad      	addcs	r5, r5, r2
    c506:	ea23 0307 	bic.w	r3, r3, r7
    c50a:	e008      	b.n	c51e <round+0x82>
    c50c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c510:	3401      	adds	r4, #1
    c512:	bf04      	itt	eq
    c514:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
    c518:	f445 1540 	orreq.w	r5, r5, #3145728	; 0x300000
    c51c:	2300      	movs	r3, #0
    c51e:	461a      	mov	r2, r3
    c520:	462b      	mov	r3, r5
    c522:	4610      	mov	r0, r2
    c524:	4619      	mov	r1, r3
    c526:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    c52a:	bf00      	nop
    c52c:	000fffff 	.word	0x000fffff

0000c530 <roundf>:
    c530:	b508      	push	{r3, lr}
    c532:	f3c0 53c7 	ubfx	r3, r0, #23, #8
    c536:	3b7f      	subs	r3, #127	; 0x7f
    c538:	2b16      	cmp	r3, #22
    c53a:	4601      	mov	r1, r0
    c53c:	dc0e      	bgt.n	c55c <roundf+0x2c>
    c53e:	2b00      	cmp	r3, #0
    c540:	4602      	mov	r2, r0
    c542:	db10      	blt.n	c566 <roundf+0x36>
    c544:	480b      	ldr	r0, [pc, #44]	; (c574 <roundf+0x44>)
    c546:	4118      	asrs	r0, r3
    c548:	4201      	tst	r1, r0
    c54a:	d005      	beq.n	c558 <roundf+0x28>
    c54c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    c550:	4119      	asrs	r1, r3
    c552:	4411      	add	r1, r2
    c554:	ea21 0100 	bic.w	r1, r1, r0
    c558:	4608      	mov	r0, r1
    c55a:	bd08      	pop	{r3, pc}
    c55c:	2b80      	cmp	r3, #128	; 0x80
    c55e:	d1fb      	bne.n	c558 <roundf+0x28>
    c560:	f7f4 faf2 	bl	b48 <__addsf3>
    c564:	bd08      	pop	{r3, pc}
    c566:	3301      	adds	r3, #1
    c568:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    c56c:	d1f4      	bne.n	c558 <roundf+0x28>
    c56e:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
    c572:	e7f1      	b.n	c558 <roundf+0x28>
    c574:	007fffff 	.word	0x007fffff

0000c578 <__assert_func>:
    c578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c57a:	4614      	mov	r4, r2
    c57c:	461a      	mov	r2, r3
    c57e:	4b09      	ldr	r3, [pc, #36]	; (c5a4 <__assert_func+0x2c>)
    c580:	681b      	ldr	r3, [r3, #0]
    c582:	4605      	mov	r5, r0
    c584:	68d8      	ldr	r0, [r3, #12]
    c586:	b14c      	cbz	r4, c59c <__assert_func+0x24>
    c588:	4b07      	ldr	r3, [pc, #28]	; (c5a8 <__assert_func+0x30>)
    c58a:	9100      	str	r1, [sp, #0]
    c58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
    c590:	4906      	ldr	r1, [pc, #24]	; (c5ac <__assert_func+0x34>)
    c592:	462b      	mov	r3, r5
    c594:	f000 f80e 	bl	c5b4 <fiprintf>
    c598:	f003 fd5c 	bl	10054 <abort>
    c59c:	4b04      	ldr	r3, [pc, #16]	; (c5b0 <__assert_func+0x38>)
    c59e:	461c      	mov	r4, r3
    c5a0:	e7f3      	b.n	c58a <__assert_func+0x12>
    c5a2:	bf00      	nop
    c5a4:	200000fc 	.word	0x200000fc
    c5a8:	000578bc 	.word	0x000578bc
    c5ac:	000578c9 	.word	0x000578c9
    c5b0:	000578f7 	.word	0x000578f7

0000c5b4 <fiprintf>:
    c5b4:	b40e      	push	{r1, r2, r3}
    c5b6:	b503      	push	{r0, r1, lr}
    c5b8:	4601      	mov	r1, r0
    c5ba:	ab03      	add	r3, sp, #12
    c5bc:	4805      	ldr	r0, [pc, #20]	; (c5d4 <fiprintf+0x20>)
    c5be:	f853 2b04 	ldr.w	r2, [r3], #4
    c5c2:	6800      	ldr	r0, [r0, #0]
    c5c4:	9301      	str	r3, [sp, #4]
    c5c6:	f000 f8bf 	bl	c748 <_vfiprintf_r>
    c5ca:	b002      	add	sp, #8
    c5cc:	f85d eb04 	ldr.w	lr, [sp], #4
    c5d0:	b003      	add	sp, #12
    c5d2:	4770      	bx	lr
    c5d4:	200000fc 	.word	0x200000fc

0000c5d8 <malloc>:
    c5d8:	4b02      	ldr	r3, [pc, #8]	; (c5e4 <malloc+0xc>)
    c5da:	4601      	mov	r1, r0
    c5dc:	6818      	ldr	r0, [r3, #0]
    c5de:	f000 b859 	b.w	c694 <_malloc_r>
    c5e2:	bf00      	nop
    c5e4:	200000fc 	.word	0x200000fc

0000c5e8 <free>:
    c5e8:	4b02      	ldr	r3, [pc, #8]	; (c5f4 <free+0xc>)
    c5ea:	4601      	mov	r1, r0
    c5ec:	6818      	ldr	r0, [r3, #0]
    c5ee:	f000 b803 	b.w	c5f8 <_free_r>
    c5f2:	bf00      	nop
    c5f4:	200000fc 	.word	0x200000fc

0000c5f8 <_free_r>:
    c5f8:	b538      	push	{r3, r4, r5, lr}
    c5fa:	4605      	mov	r5, r0
    c5fc:	2900      	cmp	r1, #0
    c5fe:	d045      	beq.n	c68c <_free_r+0x94>
    c600:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c604:	1f0c      	subs	r4, r1, #4
    c606:	2b00      	cmp	r3, #0
    c608:	bfb8      	it	lt
    c60a:	18e4      	addlt	r4, r4, r3
    c60c:	f001 f890 	bl	d730 <__malloc_lock>
    c610:	4a1f      	ldr	r2, [pc, #124]	; (c690 <_free_r+0x98>)
    c612:	6813      	ldr	r3, [r2, #0]
    c614:	4610      	mov	r0, r2
    c616:	b933      	cbnz	r3, c626 <_free_r+0x2e>
    c618:	6063      	str	r3, [r4, #4]
    c61a:	6014      	str	r4, [r2, #0]
    c61c:	4628      	mov	r0, r5
    c61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c622:	f001 b88b 	b.w	d73c <__malloc_unlock>
    c626:	42a3      	cmp	r3, r4
    c628:	d90b      	bls.n	c642 <_free_r+0x4a>
    c62a:	6821      	ldr	r1, [r4, #0]
    c62c:	1862      	adds	r2, r4, r1
    c62e:	4293      	cmp	r3, r2
    c630:	bf04      	itt	eq
    c632:	681a      	ldreq	r2, [r3, #0]
    c634:	685b      	ldreq	r3, [r3, #4]
    c636:	6063      	str	r3, [r4, #4]
    c638:	bf04      	itt	eq
    c63a:	1852      	addeq	r2, r2, r1
    c63c:	6022      	streq	r2, [r4, #0]
    c63e:	6004      	str	r4, [r0, #0]
    c640:	e7ec      	b.n	c61c <_free_r+0x24>
    c642:	461a      	mov	r2, r3
    c644:	685b      	ldr	r3, [r3, #4]
    c646:	b10b      	cbz	r3, c64c <_free_r+0x54>
    c648:	42a3      	cmp	r3, r4
    c64a:	d9fa      	bls.n	c642 <_free_r+0x4a>
    c64c:	6811      	ldr	r1, [r2, #0]
    c64e:	1850      	adds	r0, r2, r1
    c650:	42a0      	cmp	r0, r4
    c652:	d10b      	bne.n	c66c <_free_r+0x74>
    c654:	6820      	ldr	r0, [r4, #0]
    c656:	4401      	add	r1, r0
    c658:	1850      	adds	r0, r2, r1
    c65a:	4283      	cmp	r3, r0
    c65c:	6011      	str	r1, [r2, #0]
    c65e:	d1dd      	bne.n	c61c <_free_r+0x24>
    c660:	6818      	ldr	r0, [r3, #0]
    c662:	685b      	ldr	r3, [r3, #4]
    c664:	6053      	str	r3, [r2, #4]
    c666:	4401      	add	r1, r0
    c668:	6011      	str	r1, [r2, #0]
    c66a:	e7d7      	b.n	c61c <_free_r+0x24>
    c66c:	d902      	bls.n	c674 <_free_r+0x7c>
    c66e:	230c      	movs	r3, #12
    c670:	602b      	str	r3, [r5, #0]
    c672:	e7d3      	b.n	c61c <_free_r+0x24>
    c674:	6820      	ldr	r0, [r4, #0]
    c676:	1821      	adds	r1, r4, r0
    c678:	428b      	cmp	r3, r1
    c67a:	bf04      	itt	eq
    c67c:	6819      	ldreq	r1, [r3, #0]
    c67e:	685b      	ldreq	r3, [r3, #4]
    c680:	6063      	str	r3, [r4, #4]
    c682:	bf04      	itt	eq
    c684:	1809      	addeq	r1, r1, r0
    c686:	6021      	streq	r1, [r4, #0]
    c688:	6054      	str	r4, [r2, #4]
    c68a:	e7c7      	b.n	c61c <_free_r+0x24>
    c68c:	bd38      	pop	{r3, r4, r5, pc}
    c68e:	bf00      	nop
    c690:	2001d73c 	.word	0x2001d73c

0000c694 <_malloc_r>:
    c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c696:	1ccd      	adds	r5, r1, #3
    c698:	f025 0503 	bic.w	r5, r5, #3
    c69c:	3508      	adds	r5, #8
    c69e:	2d0c      	cmp	r5, #12
    c6a0:	bf38      	it	cc
    c6a2:	250c      	movcc	r5, #12
    c6a4:	2d00      	cmp	r5, #0
    c6a6:	4606      	mov	r6, r0
    c6a8:	db01      	blt.n	c6ae <_malloc_r+0x1a>
    c6aa:	42a9      	cmp	r1, r5
    c6ac:	d903      	bls.n	c6b6 <_malloc_r+0x22>
    c6ae:	230c      	movs	r3, #12
    c6b0:	6033      	str	r3, [r6, #0]
    c6b2:	2000      	movs	r0, #0
    c6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6b6:	f001 f83b 	bl	d730 <__malloc_lock>
    c6ba:	4921      	ldr	r1, [pc, #132]	; (c740 <_malloc_r+0xac>)
    c6bc:	680a      	ldr	r2, [r1, #0]
    c6be:	4614      	mov	r4, r2
    c6c0:	b99c      	cbnz	r4, c6ea <_malloc_r+0x56>
    c6c2:	4f20      	ldr	r7, [pc, #128]	; (c744 <_malloc_r+0xb0>)
    c6c4:	683b      	ldr	r3, [r7, #0]
    c6c6:	b923      	cbnz	r3, c6d2 <_malloc_r+0x3e>
    c6c8:	4621      	mov	r1, r4
    c6ca:	4630      	mov	r0, r6
    c6cc:	f000 fcbc 	bl	d048 <_sbrk_r>
    c6d0:	6038      	str	r0, [r7, #0]
    c6d2:	4629      	mov	r1, r5
    c6d4:	4630      	mov	r0, r6
    c6d6:	f000 fcb7 	bl	d048 <_sbrk_r>
    c6da:	1c43      	adds	r3, r0, #1
    c6dc:	d123      	bne.n	c726 <_malloc_r+0x92>
    c6de:	230c      	movs	r3, #12
    c6e0:	6033      	str	r3, [r6, #0]
    c6e2:	4630      	mov	r0, r6
    c6e4:	f001 f82a 	bl	d73c <__malloc_unlock>
    c6e8:	e7e3      	b.n	c6b2 <_malloc_r+0x1e>
    c6ea:	6823      	ldr	r3, [r4, #0]
    c6ec:	1b5b      	subs	r3, r3, r5
    c6ee:	d417      	bmi.n	c720 <_malloc_r+0x8c>
    c6f0:	2b0b      	cmp	r3, #11
    c6f2:	d903      	bls.n	c6fc <_malloc_r+0x68>
    c6f4:	6023      	str	r3, [r4, #0]
    c6f6:	441c      	add	r4, r3
    c6f8:	6025      	str	r5, [r4, #0]
    c6fa:	e004      	b.n	c706 <_malloc_r+0x72>
    c6fc:	6863      	ldr	r3, [r4, #4]
    c6fe:	42a2      	cmp	r2, r4
    c700:	bf0c      	ite	eq
    c702:	600b      	streq	r3, [r1, #0]
    c704:	6053      	strne	r3, [r2, #4]
    c706:	4630      	mov	r0, r6
    c708:	f001 f818 	bl	d73c <__malloc_unlock>
    c70c:	f104 000b 	add.w	r0, r4, #11
    c710:	1d23      	adds	r3, r4, #4
    c712:	f020 0007 	bic.w	r0, r0, #7
    c716:	1ac2      	subs	r2, r0, r3
    c718:	d0cc      	beq.n	c6b4 <_malloc_r+0x20>
    c71a:	1a1b      	subs	r3, r3, r0
    c71c:	50a3      	str	r3, [r4, r2]
    c71e:	e7c9      	b.n	c6b4 <_malloc_r+0x20>
    c720:	4622      	mov	r2, r4
    c722:	6864      	ldr	r4, [r4, #4]
    c724:	e7cc      	b.n	c6c0 <_malloc_r+0x2c>
    c726:	1cc4      	adds	r4, r0, #3
    c728:	f024 0403 	bic.w	r4, r4, #3
    c72c:	42a0      	cmp	r0, r4
    c72e:	d0e3      	beq.n	c6f8 <_malloc_r+0x64>
    c730:	1a21      	subs	r1, r4, r0
    c732:	4630      	mov	r0, r6
    c734:	f000 fc88 	bl	d048 <_sbrk_r>
    c738:	3001      	adds	r0, #1
    c73a:	d1dd      	bne.n	c6f8 <_malloc_r+0x64>
    c73c:	e7cf      	b.n	c6de <_malloc_r+0x4a>
    c73e:	bf00      	nop
    c740:	2001d73c 	.word	0x2001d73c
    c744:	2001d740 	.word	0x2001d740

0000c748 <_vfiprintf_r>:
    c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c74c:	460d      	mov	r5, r1
    c74e:	b09d      	sub	sp, #116	; 0x74
    c750:	4614      	mov	r4, r2
    c752:	4698      	mov	r8, r3
    c754:	4606      	mov	r6, r0
    c756:	b118      	cbz	r0, c760 <_vfiprintf_r+0x18>
    c758:	6983      	ldr	r3, [r0, #24]
    c75a:	b90b      	cbnz	r3, c760 <_vfiprintf_r+0x18>
    c75c:	f000 ff26 	bl	d5ac <__sinit>
    c760:	4b89      	ldr	r3, [pc, #548]	; (c988 <_vfiprintf_r+0x240>)
    c762:	429d      	cmp	r5, r3
    c764:	d11b      	bne.n	c79e <_vfiprintf_r+0x56>
    c766:	6875      	ldr	r5, [r6, #4]
    c768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c76a:	07d9      	lsls	r1, r3, #31
    c76c:	d405      	bmi.n	c77a <_vfiprintf_r+0x32>
    c76e:	89ab      	ldrh	r3, [r5, #12]
    c770:	059a      	lsls	r2, r3, #22
    c772:	d402      	bmi.n	c77a <_vfiprintf_r+0x32>
    c774:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c776:	f001 fec7 	bl	e508 <__retarget_lock_acquire_recursive>
    c77a:	89ab      	ldrh	r3, [r5, #12]
    c77c:	071b      	lsls	r3, r3, #28
    c77e:	d501      	bpl.n	c784 <_vfiprintf_r+0x3c>
    c780:	692b      	ldr	r3, [r5, #16]
    c782:	b9eb      	cbnz	r3, c7c0 <_vfiprintf_r+0x78>
    c784:	4629      	mov	r1, r5
    c786:	4630      	mov	r0, r6
    c788:	f000 fd9e 	bl	d2c8 <__swsetup_r>
    c78c:	b1c0      	cbz	r0, c7c0 <_vfiprintf_r+0x78>
    c78e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c790:	07dc      	lsls	r4, r3, #31
    c792:	d50e      	bpl.n	c7b2 <_vfiprintf_r+0x6a>
    c794:	f04f 30ff 	mov.w	r0, #4294967295
    c798:	b01d      	add	sp, #116	; 0x74
    c79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c79e:	4b7b      	ldr	r3, [pc, #492]	; (c98c <_vfiprintf_r+0x244>)
    c7a0:	429d      	cmp	r5, r3
    c7a2:	d101      	bne.n	c7a8 <_vfiprintf_r+0x60>
    c7a4:	68b5      	ldr	r5, [r6, #8]
    c7a6:	e7df      	b.n	c768 <_vfiprintf_r+0x20>
    c7a8:	4b79      	ldr	r3, [pc, #484]	; (c990 <_vfiprintf_r+0x248>)
    c7aa:	429d      	cmp	r5, r3
    c7ac:	bf08      	it	eq
    c7ae:	68f5      	ldreq	r5, [r6, #12]
    c7b0:	e7da      	b.n	c768 <_vfiprintf_r+0x20>
    c7b2:	89ab      	ldrh	r3, [r5, #12]
    c7b4:	0598      	lsls	r0, r3, #22
    c7b6:	d4ed      	bmi.n	c794 <_vfiprintf_r+0x4c>
    c7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c7ba:	f001 fead 	bl	e518 <__retarget_lock_release_recursive>
    c7be:	e7e9      	b.n	c794 <_vfiprintf_r+0x4c>
    c7c0:	2300      	movs	r3, #0
    c7c2:	9309      	str	r3, [sp, #36]	; 0x24
    c7c4:	2320      	movs	r3, #32
    c7c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c7ca:	f8cd 800c 	str.w	r8, [sp, #12]
    c7ce:	2330      	movs	r3, #48	; 0x30
    c7d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; c994 <_vfiprintf_r+0x24c>
    c7d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c7d8:	f04f 0901 	mov.w	r9, #1
    c7dc:	4623      	mov	r3, r4
    c7de:	469a      	mov	sl, r3
    c7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
    c7e4:	b10a      	cbz	r2, c7ea <_vfiprintf_r+0xa2>
    c7e6:	2a25      	cmp	r2, #37	; 0x25
    c7e8:	d1f9      	bne.n	c7de <_vfiprintf_r+0x96>
    c7ea:	ebba 0b04 	subs.w	fp, sl, r4
    c7ee:	d00b      	beq.n	c808 <_vfiprintf_r+0xc0>
    c7f0:	465b      	mov	r3, fp
    c7f2:	4622      	mov	r2, r4
    c7f4:	4629      	mov	r1, r5
    c7f6:	4630      	mov	r0, r6
    c7f8:	f003 fc62 	bl	100c0 <__sfputs_r>
    c7fc:	3001      	adds	r0, #1
    c7fe:	f000 80aa 	beq.w	c956 <_vfiprintf_r+0x20e>
    c802:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c804:	445a      	add	r2, fp
    c806:	9209      	str	r2, [sp, #36]	; 0x24
    c808:	f89a 3000 	ldrb.w	r3, [sl]
    c80c:	2b00      	cmp	r3, #0
    c80e:	f000 80a2 	beq.w	c956 <_vfiprintf_r+0x20e>
    c812:	2300      	movs	r3, #0
    c814:	f04f 32ff 	mov.w	r2, #4294967295
    c818:	e9cd 2305 	strd	r2, r3, [sp, #20]
    c81c:	f10a 0a01 	add.w	sl, sl, #1
    c820:	9304      	str	r3, [sp, #16]
    c822:	9307      	str	r3, [sp, #28]
    c824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c828:	931a      	str	r3, [sp, #104]	; 0x68
    c82a:	4654      	mov	r4, sl
    c82c:	2205      	movs	r2, #5
    c82e:	f814 1b01 	ldrb.w	r1, [r4], #1
    c832:	4858      	ldr	r0, [pc, #352]	; (c994 <_vfiprintf_r+0x24c>)
    c834:	f7f3 fc64 	bl	100 <memchr>
    c838:	9a04      	ldr	r2, [sp, #16]
    c83a:	b9d8      	cbnz	r0, c874 <_vfiprintf_r+0x12c>
    c83c:	06d1      	lsls	r1, r2, #27
    c83e:	bf44      	itt	mi
    c840:	2320      	movmi	r3, #32
    c842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    c846:	0713      	lsls	r3, r2, #28
    c848:	bf44      	itt	mi
    c84a:	232b      	movmi	r3, #43	; 0x2b
    c84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    c850:	f89a 3000 	ldrb.w	r3, [sl]
    c854:	2b2a      	cmp	r3, #42	; 0x2a
    c856:	d015      	beq.n	c884 <_vfiprintf_r+0x13c>
    c858:	9a07      	ldr	r2, [sp, #28]
    c85a:	4654      	mov	r4, sl
    c85c:	2000      	movs	r0, #0
    c85e:	f04f 0c0a 	mov.w	ip, #10
    c862:	4621      	mov	r1, r4
    c864:	f811 3b01 	ldrb.w	r3, [r1], #1
    c868:	3b30      	subs	r3, #48	; 0x30
    c86a:	2b09      	cmp	r3, #9
    c86c:	d94e      	bls.n	c90c <_vfiprintf_r+0x1c4>
    c86e:	b1b0      	cbz	r0, c89e <_vfiprintf_r+0x156>
    c870:	9207      	str	r2, [sp, #28]
    c872:	e014      	b.n	c89e <_vfiprintf_r+0x156>
    c874:	eba0 0308 	sub.w	r3, r0, r8
    c878:	fa09 f303 	lsl.w	r3, r9, r3
    c87c:	4313      	orrs	r3, r2
    c87e:	9304      	str	r3, [sp, #16]
    c880:	46a2      	mov	sl, r4
    c882:	e7d2      	b.n	c82a <_vfiprintf_r+0xe2>
    c884:	9b03      	ldr	r3, [sp, #12]
    c886:	1d19      	adds	r1, r3, #4
    c888:	681b      	ldr	r3, [r3, #0]
    c88a:	9103      	str	r1, [sp, #12]
    c88c:	2b00      	cmp	r3, #0
    c88e:	bfbb      	ittet	lt
    c890:	425b      	neglt	r3, r3
    c892:	f042 0202 	orrlt.w	r2, r2, #2
    c896:	9307      	strge	r3, [sp, #28]
    c898:	9307      	strlt	r3, [sp, #28]
    c89a:	bfb8      	it	lt
    c89c:	9204      	strlt	r2, [sp, #16]
    c89e:	7823      	ldrb	r3, [r4, #0]
    c8a0:	2b2e      	cmp	r3, #46	; 0x2e
    c8a2:	d10c      	bne.n	c8be <_vfiprintf_r+0x176>
    c8a4:	7863      	ldrb	r3, [r4, #1]
    c8a6:	2b2a      	cmp	r3, #42	; 0x2a
    c8a8:	d135      	bne.n	c916 <_vfiprintf_r+0x1ce>
    c8aa:	9b03      	ldr	r3, [sp, #12]
    c8ac:	1d1a      	adds	r2, r3, #4
    c8ae:	681b      	ldr	r3, [r3, #0]
    c8b0:	9203      	str	r2, [sp, #12]
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	bfb8      	it	lt
    c8b6:	f04f 33ff 	movlt.w	r3, #4294967295
    c8ba:	3402      	adds	r4, #2
    c8bc:	9305      	str	r3, [sp, #20]
    c8be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c9a4 <_vfiprintf_r+0x25c>
    c8c2:	7821      	ldrb	r1, [r4, #0]
    c8c4:	2203      	movs	r2, #3
    c8c6:	4650      	mov	r0, sl
    c8c8:	f7f3 fc1a 	bl	100 <memchr>
    c8cc:	b140      	cbz	r0, c8e0 <_vfiprintf_r+0x198>
    c8ce:	2340      	movs	r3, #64	; 0x40
    c8d0:	eba0 000a 	sub.w	r0, r0, sl
    c8d4:	fa03 f000 	lsl.w	r0, r3, r0
    c8d8:	9b04      	ldr	r3, [sp, #16]
    c8da:	4303      	orrs	r3, r0
    c8dc:	3401      	adds	r4, #1
    c8de:	9304      	str	r3, [sp, #16]
    c8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
    c8e4:	482c      	ldr	r0, [pc, #176]	; (c998 <_vfiprintf_r+0x250>)
    c8e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c8ea:	2206      	movs	r2, #6
    c8ec:	f7f3 fc08 	bl	100 <memchr>
    c8f0:	2800      	cmp	r0, #0
    c8f2:	d03f      	beq.n	c974 <_vfiprintf_r+0x22c>
    c8f4:	4b29      	ldr	r3, [pc, #164]	; (c99c <_vfiprintf_r+0x254>)
    c8f6:	bb1b      	cbnz	r3, c940 <_vfiprintf_r+0x1f8>
    c8f8:	9b03      	ldr	r3, [sp, #12]
    c8fa:	3307      	adds	r3, #7
    c8fc:	f023 0307 	bic.w	r3, r3, #7
    c900:	3308      	adds	r3, #8
    c902:	9303      	str	r3, [sp, #12]
    c904:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c906:	443b      	add	r3, r7
    c908:	9309      	str	r3, [sp, #36]	; 0x24
    c90a:	e767      	b.n	c7dc <_vfiprintf_r+0x94>
    c90c:	fb0c 3202 	mla	r2, ip, r2, r3
    c910:	460c      	mov	r4, r1
    c912:	2001      	movs	r0, #1
    c914:	e7a5      	b.n	c862 <_vfiprintf_r+0x11a>
    c916:	2300      	movs	r3, #0
    c918:	3401      	adds	r4, #1
    c91a:	9305      	str	r3, [sp, #20]
    c91c:	4619      	mov	r1, r3
    c91e:	f04f 0c0a 	mov.w	ip, #10
    c922:	4620      	mov	r0, r4
    c924:	f810 2b01 	ldrb.w	r2, [r0], #1
    c928:	3a30      	subs	r2, #48	; 0x30
    c92a:	2a09      	cmp	r2, #9
    c92c:	d903      	bls.n	c936 <_vfiprintf_r+0x1ee>
    c92e:	2b00      	cmp	r3, #0
    c930:	d0c5      	beq.n	c8be <_vfiprintf_r+0x176>
    c932:	9105      	str	r1, [sp, #20]
    c934:	e7c3      	b.n	c8be <_vfiprintf_r+0x176>
    c936:	fb0c 2101 	mla	r1, ip, r1, r2
    c93a:	4604      	mov	r4, r0
    c93c:	2301      	movs	r3, #1
    c93e:	e7f0      	b.n	c922 <_vfiprintf_r+0x1da>
    c940:	ab03      	add	r3, sp, #12
    c942:	9300      	str	r3, [sp, #0]
    c944:	462a      	mov	r2, r5
    c946:	4b16      	ldr	r3, [pc, #88]	; (c9a0 <_vfiprintf_r+0x258>)
    c948:	a904      	add	r1, sp, #16
    c94a:	4630      	mov	r0, r6
    c94c:	f000 f82c 	bl	c9a8 <_printf_float>
    c950:	4607      	mov	r7, r0
    c952:	1c78      	adds	r0, r7, #1
    c954:	d1d6      	bne.n	c904 <_vfiprintf_r+0x1bc>
    c956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c958:	07d9      	lsls	r1, r3, #31
    c95a:	d405      	bmi.n	c968 <_vfiprintf_r+0x220>
    c95c:	89ab      	ldrh	r3, [r5, #12]
    c95e:	059a      	lsls	r2, r3, #22
    c960:	d402      	bmi.n	c968 <_vfiprintf_r+0x220>
    c962:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c964:	f001 fdd8 	bl	e518 <__retarget_lock_release_recursive>
    c968:	89ab      	ldrh	r3, [r5, #12]
    c96a:	065b      	lsls	r3, r3, #25
    c96c:	f53f af12 	bmi.w	c794 <_vfiprintf_r+0x4c>
    c970:	9809      	ldr	r0, [sp, #36]	; 0x24
    c972:	e711      	b.n	c798 <_vfiprintf_r+0x50>
    c974:	ab03      	add	r3, sp, #12
    c976:	9300      	str	r3, [sp, #0]
    c978:	462a      	mov	r2, r5
    c97a:	4b09      	ldr	r3, [pc, #36]	; (c9a0 <_vfiprintf_r+0x258>)
    c97c:	a904      	add	r1, sp, #16
    c97e:	4630      	mov	r0, r6
    c980:	f000 fa3c 	bl	cdfc <_printf_i>
    c984:	e7e4      	b.n	c950 <_vfiprintf_r+0x208>
    c986:	bf00      	nop
    c988:	00057870 	.word	0x00057870
    c98c:	00057890 	.word	0x00057890
    c990:	00057850 	.word	0x00057850
    c994:	000579f9 	.word	0x000579f9
    c998:	00057a03 	.word	0x00057a03
    c99c:	0000c9a9 	.word	0x0000c9a9
    c9a0:	000100c1 	.word	0x000100c1
    c9a4:	000579ff 	.word	0x000579ff

0000c9a8 <_printf_float>:
    c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9ac:	b091      	sub	sp, #68	; 0x44
    c9ae:	460c      	mov	r4, r1
    c9b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    c9b4:	4616      	mov	r6, r2
    c9b6:	461f      	mov	r7, r3
    c9b8:	4605      	mov	r5, r0
    c9ba:	f000 fe75 	bl	d6a8 <_localeconv_r>
    c9be:	6803      	ldr	r3, [r0, #0]
    c9c0:	9309      	str	r3, [sp, #36]	; 0x24
    c9c2:	4618      	mov	r0, r3
    c9c4:	f7f4 fda6 	bl	1514 <strlen>
    c9c8:	2300      	movs	r3, #0
    c9ca:	930e      	str	r3, [sp, #56]	; 0x38
    c9cc:	f8d8 3000 	ldr.w	r3, [r8]
    c9d0:	900a      	str	r0, [sp, #40]	; 0x28
    c9d2:	3307      	adds	r3, #7
    c9d4:	f023 0307 	bic.w	r3, r3, #7
    c9d8:	f103 0208 	add.w	r2, r3, #8
    c9dc:	f894 9018 	ldrb.w	r9, [r4, #24]
    c9e0:	f8d4 b000 	ldr.w	fp, [r4]
    c9e4:	f8c8 2000 	str.w	r2, [r8]
    c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    c9f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
    c9f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
    c9f8:	930b      	str	r3, [sp, #44]	; 0x2c
    c9fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c9fc:	4b9c      	ldr	r3, [pc, #624]	; (cc70 <_printf_float+0x2c8>)
    c9fe:	f04f 32ff 	mov.w	r2, #4294967295
    ca02:	4640      	mov	r0, r8
    ca04:	f7f4 fd66 	bl	14d4 <__aeabi_dcmpun>
    ca08:	bb70      	cbnz	r0, ca68 <_printf_float+0xc0>
    ca0a:	4b99      	ldr	r3, [pc, #612]	; (cc70 <_printf_float+0x2c8>)
    ca0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ca0e:	f04f 32ff 	mov.w	r2, #4294967295
    ca12:	4640      	mov	r0, r8
    ca14:	f7f3 fffc 	bl	a10 <__aeabi_dcmple>
    ca18:	bb30      	cbnz	r0, ca68 <_printf_float+0xc0>
    ca1a:	2200      	movs	r2, #0
    ca1c:	2300      	movs	r3, #0
    ca1e:	4640      	mov	r0, r8
    ca20:	4651      	mov	r1, sl
    ca22:	f7f3 ffeb 	bl	9fc <__aeabi_dcmplt>
    ca26:	b110      	cbz	r0, ca2e <_printf_float+0x86>
    ca28:	232d      	movs	r3, #45	; 0x2d
    ca2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    ca2e:	4b91      	ldr	r3, [pc, #580]	; (cc74 <_printf_float+0x2cc>)
    ca30:	4891      	ldr	r0, [pc, #580]	; (cc78 <_printf_float+0x2d0>)
    ca32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    ca36:	bf94      	ite	ls
    ca38:	4698      	movls	r8, r3
    ca3a:	4680      	movhi	r8, r0
    ca3c:	2303      	movs	r3, #3
    ca3e:	6123      	str	r3, [r4, #16]
    ca40:	f02b 0304 	bic.w	r3, fp, #4
    ca44:	6023      	str	r3, [r4, #0]
    ca46:	f04f 0a00 	mov.w	sl, #0
    ca4a:	9700      	str	r7, [sp, #0]
    ca4c:	4633      	mov	r3, r6
    ca4e:	aa0f      	add	r2, sp, #60	; 0x3c
    ca50:	4621      	mov	r1, r4
    ca52:	4628      	mov	r0, r5
    ca54:	f003 fbe4 	bl	10220 <_printf_common>
    ca58:	3001      	adds	r0, #1
    ca5a:	f040 808f 	bne.w	cb7c <_printf_float+0x1d4>
    ca5e:	f04f 30ff 	mov.w	r0, #4294967295
    ca62:	b011      	add	sp, #68	; 0x44
    ca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca68:	4642      	mov	r2, r8
    ca6a:	4653      	mov	r3, sl
    ca6c:	4640      	mov	r0, r8
    ca6e:	4651      	mov	r1, sl
    ca70:	f7f4 fd30 	bl	14d4 <__aeabi_dcmpun>
    ca74:	b140      	cbz	r0, ca88 <_printf_float+0xe0>
    ca76:	f1ba 0f00 	cmp.w	sl, #0
    ca7a:	bfbc      	itt	lt
    ca7c:	232d      	movlt	r3, #45	; 0x2d
    ca7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
    ca82:	487e      	ldr	r0, [pc, #504]	; (cc7c <_printf_float+0x2d4>)
    ca84:	4b7e      	ldr	r3, [pc, #504]	; (cc80 <_printf_float+0x2d8>)
    ca86:	e7d4      	b.n	ca32 <_printf_float+0x8a>
    ca88:	6863      	ldr	r3, [r4, #4]
    ca8a:	1c5a      	adds	r2, r3, #1
    ca8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    ca90:	d142      	bne.n	cb18 <_printf_float+0x170>
    ca92:	2306      	movs	r3, #6
    ca94:	6063      	str	r3, [r4, #4]
    ca96:	2200      	movs	r2, #0
    ca98:	9206      	str	r2, [sp, #24]
    ca9a:	aa0e      	add	r2, sp, #56	; 0x38
    ca9c:	e9cd 9204 	strd	r9, r2, [sp, #16]
    caa0:	aa0d      	add	r2, sp, #52	; 0x34
    caa2:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
    caa6:	9203      	str	r2, [sp, #12]
    caa8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    caac:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cab0:	6023      	str	r3, [r4, #0]
    cab2:	6863      	ldr	r3, [r4, #4]
    cab4:	9300      	str	r3, [sp, #0]
    cab6:	4642      	mov	r2, r8
    cab8:	4653      	mov	r3, sl
    caba:	4628      	mov	r0, r5
    cabc:	910b      	str	r1, [sp, #44]	; 0x2c
    cabe:	f003 fb11 	bl	100e4 <__cvt>
    cac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cac4:	2947      	cmp	r1, #71	; 0x47
    cac6:	4680      	mov	r8, r0
    cac8:	990d      	ldr	r1, [sp, #52]	; 0x34
    caca:	d108      	bne.n	cade <_printf_float+0x136>
    cacc:	1cc8      	adds	r0, r1, #3
    cace:	db02      	blt.n	cad6 <_printf_float+0x12e>
    cad0:	6863      	ldr	r3, [r4, #4]
    cad2:	4299      	cmp	r1, r3
    cad4:	dd40      	ble.n	cb58 <_printf_float+0x1b0>
    cad6:	f1a9 0902 	sub.w	r9, r9, #2
    cada:	fa5f f989 	uxtb.w	r9, r9
    cade:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    cae2:	d81f      	bhi.n	cb24 <_printf_float+0x17c>
    cae4:	3901      	subs	r1, #1
    cae6:	464a      	mov	r2, r9
    cae8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    caec:	910d      	str	r1, [sp, #52]	; 0x34
    caee:	f003 fb59 	bl	101a4 <__exponent>
    caf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    caf4:	1813      	adds	r3, r2, r0
    caf6:	2a01      	cmp	r2, #1
    caf8:	4682      	mov	sl, r0
    cafa:	6123      	str	r3, [r4, #16]
    cafc:	dc02      	bgt.n	cb04 <_printf_float+0x15c>
    cafe:	6822      	ldr	r2, [r4, #0]
    cb00:	07d2      	lsls	r2, r2, #31
    cb02:	d501      	bpl.n	cb08 <_printf_float+0x160>
    cb04:	3301      	adds	r3, #1
    cb06:	6123      	str	r3, [r4, #16]
    cb08:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    cb0c:	2b00      	cmp	r3, #0
    cb0e:	d09c      	beq.n	ca4a <_printf_float+0xa2>
    cb10:	232d      	movs	r3, #45	; 0x2d
    cb12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    cb16:	e798      	b.n	ca4a <_printf_float+0xa2>
    cb18:	2947      	cmp	r1, #71	; 0x47
    cb1a:	d1bc      	bne.n	ca96 <_printf_float+0xee>
    cb1c:	2b00      	cmp	r3, #0
    cb1e:	d1ba      	bne.n	ca96 <_printf_float+0xee>
    cb20:	2301      	movs	r3, #1
    cb22:	e7b7      	b.n	ca94 <_printf_float+0xec>
    cb24:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    cb28:	d118      	bne.n	cb5c <_printf_float+0x1b4>
    cb2a:	2900      	cmp	r1, #0
    cb2c:	6863      	ldr	r3, [r4, #4]
    cb2e:	dd0b      	ble.n	cb48 <_printf_float+0x1a0>
    cb30:	6121      	str	r1, [r4, #16]
    cb32:	b913      	cbnz	r3, cb3a <_printf_float+0x192>
    cb34:	6822      	ldr	r2, [r4, #0]
    cb36:	07d0      	lsls	r0, r2, #31
    cb38:	d502      	bpl.n	cb40 <_printf_float+0x198>
    cb3a:	3301      	adds	r3, #1
    cb3c:	440b      	add	r3, r1
    cb3e:	6123      	str	r3, [r4, #16]
    cb40:	65a1      	str	r1, [r4, #88]	; 0x58
    cb42:	f04f 0a00 	mov.w	sl, #0
    cb46:	e7df      	b.n	cb08 <_printf_float+0x160>
    cb48:	b913      	cbnz	r3, cb50 <_printf_float+0x1a8>
    cb4a:	6822      	ldr	r2, [r4, #0]
    cb4c:	07d2      	lsls	r2, r2, #31
    cb4e:	d501      	bpl.n	cb54 <_printf_float+0x1ac>
    cb50:	3302      	adds	r3, #2
    cb52:	e7f4      	b.n	cb3e <_printf_float+0x196>
    cb54:	2301      	movs	r3, #1
    cb56:	e7f2      	b.n	cb3e <_printf_float+0x196>
    cb58:	f04f 0967 	mov.w	r9, #103	; 0x67
    cb5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb5e:	4299      	cmp	r1, r3
    cb60:	db05      	blt.n	cb6e <_printf_float+0x1c6>
    cb62:	6823      	ldr	r3, [r4, #0]
    cb64:	6121      	str	r1, [r4, #16]
    cb66:	07d8      	lsls	r0, r3, #31
    cb68:	d5ea      	bpl.n	cb40 <_printf_float+0x198>
    cb6a:	1c4b      	adds	r3, r1, #1
    cb6c:	e7e7      	b.n	cb3e <_printf_float+0x196>
    cb6e:	2900      	cmp	r1, #0
    cb70:	bfd4      	ite	le
    cb72:	f1c1 0202 	rsble	r2, r1, #2
    cb76:	2201      	movgt	r2, #1
    cb78:	4413      	add	r3, r2
    cb7a:	e7e0      	b.n	cb3e <_printf_float+0x196>
    cb7c:	6823      	ldr	r3, [r4, #0]
    cb7e:	055a      	lsls	r2, r3, #21
    cb80:	d407      	bmi.n	cb92 <_printf_float+0x1ea>
    cb82:	6923      	ldr	r3, [r4, #16]
    cb84:	4642      	mov	r2, r8
    cb86:	4631      	mov	r1, r6
    cb88:	4628      	mov	r0, r5
    cb8a:	47b8      	blx	r7
    cb8c:	3001      	adds	r0, #1
    cb8e:	d12b      	bne.n	cbe8 <_printf_float+0x240>
    cb90:	e765      	b.n	ca5e <_printf_float+0xb6>
    cb92:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    cb96:	f240 80dc 	bls.w	cd52 <_printf_float+0x3aa>
    cb9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    cb9e:	2200      	movs	r2, #0
    cba0:	2300      	movs	r3, #0
    cba2:	f7f3 ff21 	bl	9e8 <__aeabi_dcmpeq>
    cba6:	2800      	cmp	r0, #0
    cba8:	d033      	beq.n	cc12 <_printf_float+0x26a>
    cbaa:	4a36      	ldr	r2, [pc, #216]	; (cc84 <_printf_float+0x2dc>)
    cbac:	2301      	movs	r3, #1
    cbae:	4631      	mov	r1, r6
    cbb0:	4628      	mov	r0, r5
    cbb2:	47b8      	blx	r7
    cbb4:	3001      	adds	r0, #1
    cbb6:	f43f af52 	beq.w	ca5e <_printf_float+0xb6>
    cbba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    cbbe:	429a      	cmp	r2, r3
    cbc0:	db02      	blt.n	cbc8 <_printf_float+0x220>
    cbc2:	6823      	ldr	r3, [r4, #0]
    cbc4:	07d8      	lsls	r0, r3, #31
    cbc6:	d50f      	bpl.n	cbe8 <_printf_float+0x240>
    cbc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    cbcc:	4631      	mov	r1, r6
    cbce:	4628      	mov	r0, r5
    cbd0:	47b8      	blx	r7
    cbd2:	3001      	adds	r0, #1
    cbd4:	f43f af43 	beq.w	ca5e <_printf_float+0xb6>
    cbd8:	f04f 0800 	mov.w	r8, #0
    cbdc:	f104 091a 	add.w	r9, r4, #26
    cbe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cbe2:	3b01      	subs	r3, #1
    cbe4:	4543      	cmp	r3, r8
    cbe6:	dc09      	bgt.n	cbfc <_printf_float+0x254>
    cbe8:	6823      	ldr	r3, [r4, #0]
    cbea:	079b      	lsls	r3, r3, #30
    cbec:	f100 8101 	bmi.w	cdf2 <_printf_float+0x44a>
    cbf0:	68e0      	ldr	r0, [r4, #12]
    cbf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cbf4:	4298      	cmp	r0, r3
    cbf6:	bfb8      	it	lt
    cbf8:	4618      	movlt	r0, r3
    cbfa:	e732      	b.n	ca62 <_printf_float+0xba>
    cbfc:	2301      	movs	r3, #1
    cbfe:	464a      	mov	r2, r9
    cc00:	4631      	mov	r1, r6
    cc02:	4628      	mov	r0, r5
    cc04:	47b8      	blx	r7
    cc06:	3001      	adds	r0, #1
    cc08:	f43f af29 	beq.w	ca5e <_printf_float+0xb6>
    cc0c:	f108 0801 	add.w	r8, r8, #1
    cc10:	e7e6      	b.n	cbe0 <_printf_float+0x238>
    cc12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc14:	2b00      	cmp	r3, #0
    cc16:	dc37      	bgt.n	cc88 <_printf_float+0x2e0>
    cc18:	4a1a      	ldr	r2, [pc, #104]	; (cc84 <_printf_float+0x2dc>)
    cc1a:	2301      	movs	r3, #1
    cc1c:	4631      	mov	r1, r6
    cc1e:	4628      	mov	r0, r5
    cc20:	47b8      	blx	r7
    cc22:	3001      	adds	r0, #1
    cc24:	f43f af1b 	beq.w	ca5e <_printf_float+0xb6>
    cc28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    cc2c:	4313      	orrs	r3, r2
    cc2e:	d102      	bne.n	cc36 <_printf_float+0x28e>
    cc30:	6823      	ldr	r3, [r4, #0]
    cc32:	07d9      	lsls	r1, r3, #31
    cc34:	d5d8      	bpl.n	cbe8 <_printf_float+0x240>
    cc36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    cc3a:	4631      	mov	r1, r6
    cc3c:	4628      	mov	r0, r5
    cc3e:	47b8      	blx	r7
    cc40:	3001      	adds	r0, #1
    cc42:	f43f af0c 	beq.w	ca5e <_printf_float+0xb6>
    cc46:	f04f 0900 	mov.w	r9, #0
    cc4a:	f104 0a1a 	add.w	sl, r4, #26
    cc4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc50:	425b      	negs	r3, r3
    cc52:	454b      	cmp	r3, r9
    cc54:	dc01      	bgt.n	cc5a <_printf_float+0x2b2>
    cc56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cc58:	e794      	b.n	cb84 <_printf_float+0x1dc>
    cc5a:	2301      	movs	r3, #1
    cc5c:	4652      	mov	r2, sl
    cc5e:	4631      	mov	r1, r6
    cc60:	4628      	mov	r0, r5
    cc62:	47b8      	blx	r7
    cc64:	3001      	adds	r0, #1
    cc66:	f43f aefa 	beq.w	ca5e <_printf_float+0xb6>
    cc6a:	f109 0901 	add.w	r9, r9, #1
    cc6e:	e7ee      	b.n	cc4e <_printf_float+0x2a6>
    cc70:	7fefffff 	.word	0x7fefffff
    cc74:	00057a0a 	.word	0x00057a0a
    cc78:	00057a0e 	.word	0x00057a0e
    cc7c:	00057a16 	.word	0x00057a16
    cc80:	00057a12 	.word	0x00057a12
    cc84:	00057a1a 	.word	0x00057a1a
    cc88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cc8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    cc8c:	429a      	cmp	r2, r3
    cc8e:	bfa8      	it	ge
    cc90:	461a      	movge	r2, r3
    cc92:	2a00      	cmp	r2, #0
    cc94:	4691      	mov	r9, r2
    cc96:	dc37      	bgt.n	cd08 <_printf_float+0x360>
    cc98:	f04f 0b00 	mov.w	fp, #0
    cc9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    cca0:	f104 021a 	add.w	r2, r4, #26
    cca4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
    cca8:	ebaa 0309 	sub.w	r3, sl, r9
    ccac:	455b      	cmp	r3, fp
    ccae:	dc33      	bgt.n	cd18 <_printf_float+0x370>
    ccb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    ccb4:	429a      	cmp	r2, r3
    ccb6:	db3b      	blt.n	cd30 <_printf_float+0x388>
    ccb8:	6823      	ldr	r3, [r4, #0]
    ccba:	07da      	lsls	r2, r3, #31
    ccbc:	d438      	bmi.n	cd30 <_printf_float+0x388>
    ccbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ccc0:	990d      	ldr	r1, [sp, #52]	; 0x34
    ccc2:	eba2 030a 	sub.w	r3, r2, sl
    ccc6:	eba2 0901 	sub.w	r9, r2, r1
    ccca:	4599      	cmp	r9, r3
    cccc:	bfa8      	it	ge
    ccce:	4699      	movge	r9, r3
    ccd0:	f1b9 0f00 	cmp.w	r9, #0
    ccd4:	dc34      	bgt.n	cd40 <_printf_float+0x398>
    ccd6:	f04f 0800 	mov.w	r8, #0
    ccda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    ccde:	f104 0a1a 	add.w	sl, r4, #26
    cce2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    cce6:	1a9b      	subs	r3, r3, r2
    cce8:	eba3 0309 	sub.w	r3, r3, r9
    ccec:	4543      	cmp	r3, r8
    ccee:	f77f af7b 	ble.w	cbe8 <_printf_float+0x240>
    ccf2:	2301      	movs	r3, #1
    ccf4:	4652      	mov	r2, sl
    ccf6:	4631      	mov	r1, r6
    ccf8:	4628      	mov	r0, r5
    ccfa:	47b8      	blx	r7
    ccfc:	3001      	adds	r0, #1
    ccfe:	f43f aeae 	beq.w	ca5e <_printf_float+0xb6>
    cd02:	f108 0801 	add.w	r8, r8, #1
    cd06:	e7ec      	b.n	cce2 <_printf_float+0x33a>
    cd08:	4613      	mov	r3, r2
    cd0a:	4631      	mov	r1, r6
    cd0c:	4642      	mov	r2, r8
    cd0e:	4628      	mov	r0, r5
    cd10:	47b8      	blx	r7
    cd12:	3001      	adds	r0, #1
    cd14:	d1c0      	bne.n	cc98 <_printf_float+0x2f0>
    cd16:	e6a2      	b.n	ca5e <_printf_float+0xb6>
    cd18:	2301      	movs	r3, #1
    cd1a:	4631      	mov	r1, r6
    cd1c:	4628      	mov	r0, r5
    cd1e:	920b      	str	r2, [sp, #44]	; 0x2c
    cd20:	47b8      	blx	r7
    cd22:	3001      	adds	r0, #1
    cd24:	f43f ae9b 	beq.w	ca5e <_printf_float+0xb6>
    cd28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd2a:	f10b 0b01 	add.w	fp, fp, #1
    cd2e:	e7b9      	b.n	cca4 <_printf_float+0x2fc>
    cd30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    cd34:	4631      	mov	r1, r6
    cd36:	4628      	mov	r0, r5
    cd38:	47b8      	blx	r7
    cd3a:	3001      	adds	r0, #1
    cd3c:	d1bf      	bne.n	ccbe <_printf_float+0x316>
    cd3e:	e68e      	b.n	ca5e <_printf_float+0xb6>
    cd40:	464b      	mov	r3, r9
    cd42:	eb08 020a 	add.w	r2, r8, sl
    cd46:	4631      	mov	r1, r6
    cd48:	4628      	mov	r0, r5
    cd4a:	47b8      	blx	r7
    cd4c:	3001      	adds	r0, #1
    cd4e:	d1c2      	bne.n	ccd6 <_printf_float+0x32e>
    cd50:	e685      	b.n	ca5e <_printf_float+0xb6>
    cd52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cd54:	2a01      	cmp	r2, #1
    cd56:	dc01      	bgt.n	cd5c <_printf_float+0x3b4>
    cd58:	07db      	lsls	r3, r3, #31
    cd5a:	d537      	bpl.n	cdcc <_printf_float+0x424>
    cd5c:	2301      	movs	r3, #1
    cd5e:	4642      	mov	r2, r8
    cd60:	4631      	mov	r1, r6
    cd62:	4628      	mov	r0, r5
    cd64:	47b8      	blx	r7
    cd66:	3001      	adds	r0, #1
    cd68:	f43f ae79 	beq.w	ca5e <_printf_float+0xb6>
    cd6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    cd70:	4631      	mov	r1, r6
    cd72:	4628      	mov	r0, r5
    cd74:	47b8      	blx	r7
    cd76:	3001      	adds	r0, #1
    cd78:	f43f ae71 	beq.w	ca5e <_printf_float+0xb6>
    cd7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    cd80:	2200      	movs	r2, #0
    cd82:	2300      	movs	r3, #0
    cd84:	f7f3 fe30 	bl	9e8 <__aeabi_dcmpeq>
    cd88:	b9d8      	cbnz	r0, cdc2 <_printf_float+0x41a>
    cd8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cd8c:	f108 0201 	add.w	r2, r8, #1
    cd90:	3b01      	subs	r3, #1
    cd92:	4631      	mov	r1, r6
    cd94:	4628      	mov	r0, r5
    cd96:	47b8      	blx	r7
    cd98:	3001      	adds	r0, #1
    cd9a:	d10e      	bne.n	cdba <_printf_float+0x412>
    cd9c:	e65f      	b.n	ca5e <_printf_float+0xb6>
    cd9e:	2301      	movs	r3, #1
    cda0:	464a      	mov	r2, r9
    cda2:	4631      	mov	r1, r6
    cda4:	4628      	mov	r0, r5
    cda6:	47b8      	blx	r7
    cda8:	3001      	adds	r0, #1
    cdaa:	f43f ae58 	beq.w	ca5e <_printf_float+0xb6>
    cdae:	f108 0801 	add.w	r8, r8, #1
    cdb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cdb4:	3b01      	subs	r3, #1
    cdb6:	4543      	cmp	r3, r8
    cdb8:	dcf1      	bgt.n	cd9e <_printf_float+0x3f6>
    cdba:	4653      	mov	r3, sl
    cdbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
    cdc0:	e6e1      	b.n	cb86 <_printf_float+0x1de>
    cdc2:	f04f 0800 	mov.w	r8, #0
    cdc6:	f104 091a 	add.w	r9, r4, #26
    cdca:	e7f2      	b.n	cdb2 <_printf_float+0x40a>
    cdcc:	2301      	movs	r3, #1
    cdce:	4642      	mov	r2, r8
    cdd0:	e7df      	b.n	cd92 <_printf_float+0x3ea>
    cdd2:	2301      	movs	r3, #1
    cdd4:	464a      	mov	r2, r9
    cdd6:	4631      	mov	r1, r6
    cdd8:	4628      	mov	r0, r5
    cdda:	47b8      	blx	r7
    cddc:	3001      	adds	r0, #1
    cdde:	f43f ae3e 	beq.w	ca5e <_printf_float+0xb6>
    cde2:	f108 0801 	add.w	r8, r8, #1
    cde6:	68e3      	ldr	r3, [r4, #12]
    cde8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cdea:	1a5b      	subs	r3, r3, r1
    cdec:	4543      	cmp	r3, r8
    cdee:	dcf0      	bgt.n	cdd2 <_printf_float+0x42a>
    cdf0:	e6fe      	b.n	cbf0 <_printf_float+0x248>
    cdf2:	f04f 0800 	mov.w	r8, #0
    cdf6:	f104 0919 	add.w	r9, r4, #25
    cdfa:	e7f4      	b.n	cde6 <_printf_float+0x43e>

0000cdfc <_printf_i>:
    cdfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ce00:	460c      	mov	r4, r1
    ce02:	4691      	mov	r9, r2
    ce04:	7e27      	ldrb	r7, [r4, #24]
    ce06:	990c      	ldr	r1, [sp, #48]	; 0x30
    ce08:	2f78      	cmp	r7, #120	; 0x78
    ce0a:	4680      	mov	r8, r0
    ce0c:	469a      	mov	sl, r3
    ce0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    ce12:	d807      	bhi.n	ce24 <_printf_i+0x28>
    ce14:	2f62      	cmp	r7, #98	; 0x62
    ce16:	d80a      	bhi.n	ce2e <_printf_i+0x32>
    ce18:	2f00      	cmp	r7, #0
    ce1a:	f000 80d8 	beq.w	cfce <_printf_i+0x1d2>
    ce1e:	2f58      	cmp	r7, #88	; 0x58
    ce20:	f000 80a3 	beq.w	cf6a <_printf_i+0x16e>
    ce24:	f104 0642 	add.w	r6, r4, #66	; 0x42
    ce28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    ce2c:	e03a      	b.n	cea4 <_printf_i+0xa8>
    ce2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    ce32:	2b15      	cmp	r3, #21
    ce34:	d8f6      	bhi.n	ce24 <_printf_i+0x28>
    ce36:	a001      	add	r0, pc, #4	; (adr r0, ce3c <_printf_i+0x40>)
    ce38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    ce3c:	0000ce95 	.word	0x0000ce95
    ce40:	0000cea9 	.word	0x0000cea9
    ce44:	0000ce25 	.word	0x0000ce25
    ce48:	0000ce25 	.word	0x0000ce25
    ce4c:	0000ce25 	.word	0x0000ce25
    ce50:	0000ce25 	.word	0x0000ce25
    ce54:	0000cea9 	.word	0x0000cea9
    ce58:	0000ce25 	.word	0x0000ce25
    ce5c:	0000ce25 	.word	0x0000ce25
    ce60:	0000ce25 	.word	0x0000ce25
    ce64:	0000ce25 	.word	0x0000ce25
    ce68:	0000cfb5 	.word	0x0000cfb5
    ce6c:	0000ced9 	.word	0x0000ced9
    ce70:	0000cf97 	.word	0x0000cf97
    ce74:	0000ce25 	.word	0x0000ce25
    ce78:	0000ce25 	.word	0x0000ce25
    ce7c:	0000cfd7 	.word	0x0000cfd7
    ce80:	0000ce25 	.word	0x0000ce25
    ce84:	0000ced9 	.word	0x0000ced9
    ce88:	0000ce25 	.word	0x0000ce25
    ce8c:	0000ce25 	.word	0x0000ce25
    ce90:	0000cf9f 	.word	0x0000cf9f
    ce94:	680b      	ldr	r3, [r1, #0]
    ce96:	1d1a      	adds	r2, r3, #4
    ce98:	681b      	ldr	r3, [r3, #0]
    ce9a:	600a      	str	r2, [r1, #0]
    ce9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
    cea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    cea4:	2301      	movs	r3, #1
    cea6:	e0a3      	b.n	cff0 <_printf_i+0x1f4>
    cea8:	6825      	ldr	r5, [r4, #0]
    ceaa:	6808      	ldr	r0, [r1, #0]
    ceac:	062e      	lsls	r6, r5, #24
    ceae:	f100 0304 	add.w	r3, r0, #4
    ceb2:	d50a      	bpl.n	ceca <_printf_i+0xce>
    ceb4:	6805      	ldr	r5, [r0, #0]
    ceb6:	600b      	str	r3, [r1, #0]
    ceb8:	2d00      	cmp	r5, #0
    ceba:	da03      	bge.n	cec4 <_printf_i+0xc8>
    cebc:	232d      	movs	r3, #45	; 0x2d
    cebe:	426d      	negs	r5, r5
    cec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    cec4:	485e      	ldr	r0, [pc, #376]	; (d040 <_printf_i+0x244>)
    cec6:	230a      	movs	r3, #10
    cec8:	e019      	b.n	cefe <_printf_i+0x102>
    ceca:	f015 0f40 	tst.w	r5, #64	; 0x40
    cece:	6805      	ldr	r5, [r0, #0]
    ced0:	600b      	str	r3, [r1, #0]
    ced2:	bf18      	it	ne
    ced4:	b22d      	sxthne	r5, r5
    ced6:	e7ef      	b.n	ceb8 <_printf_i+0xbc>
    ced8:	680b      	ldr	r3, [r1, #0]
    ceda:	6825      	ldr	r5, [r4, #0]
    cedc:	1d18      	adds	r0, r3, #4
    cede:	6008      	str	r0, [r1, #0]
    cee0:	0628      	lsls	r0, r5, #24
    cee2:	d501      	bpl.n	cee8 <_printf_i+0xec>
    cee4:	681d      	ldr	r5, [r3, #0]
    cee6:	e002      	b.n	ceee <_printf_i+0xf2>
    cee8:	0669      	lsls	r1, r5, #25
    ceea:	d5fb      	bpl.n	cee4 <_printf_i+0xe8>
    ceec:	881d      	ldrh	r5, [r3, #0]
    ceee:	4854      	ldr	r0, [pc, #336]	; (d040 <_printf_i+0x244>)
    cef0:	2f6f      	cmp	r7, #111	; 0x6f
    cef2:	bf0c      	ite	eq
    cef4:	2308      	moveq	r3, #8
    cef6:	230a      	movne	r3, #10
    cef8:	2100      	movs	r1, #0
    cefa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    cefe:	6866      	ldr	r6, [r4, #4]
    cf00:	60a6      	str	r6, [r4, #8]
    cf02:	2e00      	cmp	r6, #0
    cf04:	bfa2      	ittt	ge
    cf06:	6821      	ldrge	r1, [r4, #0]
    cf08:	f021 0104 	bicge.w	r1, r1, #4
    cf0c:	6021      	strge	r1, [r4, #0]
    cf0e:	b90d      	cbnz	r5, cf14 <_printf_i+0x118>
    cf10:	2e00      	cmp	r6, #0
    cf12:	d04d      	beq.n	cfb0 <_printf_i+0x1b4>
    cf14:	4616      	mov	r6, r2
    cf16:	fbb5 f1f3 	udiv	r1, r5, r3
    cf1a:	fb03 5711 	mls	r7, r3, r1, r5
    cf1e:	5dc7      	ldrb	r7, [r0, r7]
    cf20:	f806 7d01 	strb.w	r7, [r6, #-1]!
    cf24:	462f      	mov	r7, r5
    cf26:	42bb      	cmp	r3, r7
    cf28:	460d      	mov	r5, r1
    cf2a:	d9f4      	bls.n	cf16 <_printf_i+0x11a>
    cf2c:	2b08      	cmp	r3, #8
    cf2e:	d10b      	bne.n	cf48 <_printf_i+0x14c>
    cf30:	6823      	ldr	r3, [r4, #0]
    cf32:	07df      	lsls	r7, r3, #31
    cf34:	d508      	bpl.n	cf48 <_printf_i+0x14c>
    cf36:	6923      	ldr	r3, [r4, #16]
    cf38:	6861      	ldr	r1, [r4, #4]
    cf3a:	4299      	cmp	r1, r3
    cf3c:	bfde      	ittt	le
    cf3e:	2330      	movle	r3, #48	; 0x30
    cf40:	f806 3c01 	strble.w	r3, [r6, #-1]
    cf44:	f106 36ff 	addle.w	r6, r6, #4294967295
    cf48:	1b92      	subs	r2, r2, r6
    cf4a:	6122      	str	r2, [r4, #16]
    cf4c:	f8cd a000 	str.w	sl, [sp]
    cf50:	464b      	mov	r3, r9
    cf52:	aa03      	add	r2, sp, #12
    cf54:	4621      	mov	r1, r4
    cf56:	4640      	mov	r0, r8
    cf58:	f003 f962 	bl	10220 <_printf_common>
    cf5c:	3001      	adds	r0, #1
    cf5e:	d14c      	bne.n	cffa <_printf_i+0x1fe>
    cf60:	f04f 30ff 	mov.w	r0, #4294967295
    cf64:	b004      	add	sp, #16
    cf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf6a:	4835      	ldr	r0, [pc, #212]	; (d040 <_printf_i+0x244>)
    cf6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    cf70:	6823      	ldr	r3, [r4, #0]
    cf72:	680e      	ldr	r6, [r1, #0]
    cf74:	061f      	lsls	r7, r3, #24
    cf76:	f856 5b04 	ldr.w	r5, [r6], #4
    cf7a:	600e      	str	r6, [r1, #0]
    cf7c:	d514      	bpl.n	cfa8 <_printf_i+0x1ac>
    cf7e:	07d9      	lsls	r1, r3, #31
    cf80:	bf44      	itt	mi
    cf82:	f043 0320 	orrmi.w	r3, r3, #32
    cf86:	6023      	strmi	r3, [r4, #0]
    cf88:	b91d      	cbnz	r5, cf92 <_printf_i+0x196>
    cf8a:	6823      	ldr	r3, [r4, #0]
    cf8c:	f023 0320 	bic.w	r3, r3, #32
    cf90:	6023      	str	r3, [r4, #0]
    cf92:	2310      	movs	r3, #16
    cf94:	e7b0      	b.n	cef8 <_printf_i+0xfc>
    cf96:	6823      	ldr	r3, [r4, #0]
    cf98:	f043 0320 	orr.w	r3, r3, #32
    cf9c:	6023      	str	r3, [r4, #0]
    cf9e:	2378      	movs	r3, #120	; 0x78
    cfa0:	4828      	ldr	r0, [pc, #160]	; (d044 <_printf_i+0x248>)
    cfa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    cfa6:	e7e3      	b.n	cf70 <_printf_i+0x174>
    cfa8:	065e      	lsls	r6, r3, #25
    cfaa:	bf48      	it	mi
    cfac:	b2ad      	uxthmi	r5, r5
    cfae:	e7e6      	b.n	cf7e <_printf_i+0x182>
    cfb0:	4616      	mov	r6, r2
    cfb2:	e7bb      	b.n	cf2c <_printf_i+0x130>
    cfb4:	680b      	ldr	r3, [r1, #0]
    cfb6:	6826      	ldr	r6, [r4, #0]
    cfb8:	6960      	ldr	r0, [r4, #20]
    cfba:	1d1d      	adds	r5, r3, #4
    cfbc:	600d      	str	r5, [r1, #0]
    cfbe:	0635      	lsls	r5, r6, #24
    cfc0:	681b      	ldr	r3, [r3, #0]
    cfc2:	d501      	bpl.n	cfc8 <_printf_i+0x1cc>
    cfc4:	6018      	str	r0, [r3, #0]
    cfc6:	e002      	b.n	cfce <_printf_i+0x1d2>
    cfc8:	0671      	lsls	r1, r6, #25
    cfca:	d5fb      	bpl.n	cfc4 <_printf_i+0x1c8>
    cfcc:	8018      	strh	r0, [r3, #0]
    cfce:	2300      	movs	r3, #0
    cfd0:	6123      	str	r3, [r4, #16]
    cfd2:	4616      	mov	r6, r2
    cfd4:	e7ba      	b.n	cf4c <_printf_i+0x150>
    cfd6:	680b      	ldr	r3, [r1, #0]
    cfd8:	1d1a      	adds	r2, r3, #4
    cfda:	600a      	str	r2, [r1, #0]
    cfdc:	681e      	ldr	r6, [r3, #0]
    cfde:	6862      	ldr	r2, [r4, #4]
    cfe0:	2100      	movs	r1, #0
    cfe2:	4630      	mov	r0, r6
    cfe4:	f7f3 f88c 	bl	100 <memchr>
    cfe8:	b108      	cbz	r0, cfee <_printf_i+0x1f2>
    cfea:	1b80      	subs	r0, r0, r6
    cfec:	6060      	str	r0, [r4, #4]
    cfee:	6863      	ldr	r3, [r4, #4]
    cff0:	6123      	str	r3, [r4, #16]
    cff2:	2300      	movs	r3, #0
    cff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    cff8:	e7a8      	b.n	cf4c <_printf_i+0x150>
    cffa:	6923      	ldr	r3, [r4, #16]
    cffc:	4632      	mov	r2, r6
    cffe:	4649      	mov	r1, r9
    d000:	4640      	mov	r0, r8
    d002:	47d0      	blx	sl
    d004:	3001      	adds	r0, #1
    d006:	d0ab      	beq.n	cf60 <_printf_i+0x164>
    d008:	6823      	ldr	r3, [r4, #0]
    d00a:	079b      	lsls	r3, r3, #30
    d00c:	d413      	bmi.n	d036 <_printf_i+0x23a>
    d00e:	68e0      	ldr	r0, [r4, #12]
    d010:	9b03      	ldr	r3, [sp, #12]
    d012:	4298      	cmp	r0, r3
    d014:	bfb8      	it	lt
    d016:	4618      	movlt	r0, r3
    d018:	e7a4      	b.n	cf64 <_printf_i+0x168>
    d01a:	2301      	movs	r3, #1
    d01c:	4632      	mov	r2, r6
    d01e:	4649      	mov	r1, r9
    d020:	4640      	mov	r0, r8
    d022:	47d0      	blx	sl
    d024:	3001      	adds	r0, #1
    d026:	d09b      	beq.n	cf60 <_printf_i+0x164>
    d028:	3501      	adds	r5, #1
    d02a:	68e3      	ldr	r3, [r4, #12]
    d02c:	9903      	ldr	r1, [sp, #12]
    d02e:	1a5b      	subs	r3, r3, r1
    d030:	42ab      	cmp	r3, r5
    d032:	dcf2      	bgt.n	d01a <_printf_i+0x21e>
    d034:	e7eb      	b.n	d00e <_printf_i+0x212>
    d036:	2500      	movs	r5, #0
    d038:	f104 0619 	add.w	r6, r4, #25
    d03c:	e7f5      	b.n	d02a <_printf_i+0x22e>
    d03e:	bf00      	nop
    d040:	00057a1c 	.word	0x00057a1c
    d044:	00057a2d 	.word	0x00057a2d

0000d048 <_sbrk_r>:
    d048:	b538      	push	{r3, r4, r5, lr}
    d04a:	4d06      	ldr	r5, [pc, #24]	; (d064 <_sbrk_r+0x1c>)
    d04c:	2300      	movs	r3, #0
    d04e:	4604      	mov	r4, r0
    d050:	4608      	mov	r0, r1
    d052:	602b      	str	r3, [r5, #0]
    d054:	f7f7 f9a2 	bl	439c <_sbrk>
    d058:	1c43      	adds	r3, r0, #1
    d05a:	d102      	bne.n	d062 <_sbrk_r+0x1a>
    d05c:	682b      	ldr	r3, [r5, #0]
    d05e:	b103      	cbz	r3, d062 <_sbrk_r+0x1a>
    d060:	6023      	str	r3, [r4, #0]
    d062:	bd38      	pop	{r3, r4, r5, pc}
    d064:	2001d904 	.word	0x2001d904

0000d068 <raise>:
    d068:	4b02      	ldr	r3, [pc, #8]	; (d074 <raise+0xc>)
    d06a:	4601      	mov	r1, r0
    d06c:	6818      	ldr	r0, [r3, #0]
    d06e:	f003 b944 	b.w	102fa <_raise_r>
    d072:	bf00      	nop
    d074:	200000fc 	.word	0x200000fc

0000d078 <_kill_r>:
    d078:	b538      	push	{r3, r4, r5, lr}
    d07a:	4d07      	ldr	r5, [pc, #28]	; (d098 <_kill_r+0x20>)
    d07c:	2300      	movs	r3, #0
    d07e:	4604      	mov	r4, r0
    d080:	4608      	mov	r0, r1
    d082:	4611      	mov	r1, r2
    d084:	602b      	str	r3, [r5, #0]
    d086:	f001 fa2d 	bl	e4e4 <_kill>
    d08a:	1c43      	adds	r3, r0, #1
    d08c:	d102      	bne.n	d094 <_kill_r+0x1c>
    d08e:	682b      	ldr	r3, [r5, #0]
    d090:	b103      	cbz	r3, d094 <_kill_r+0x1c>
    d092:	6023      	str	r3, [r4, #0]
    d094:	bd38      	pop	{r3, r4, r5, pc}
    d096:	bf00      	nop
    d098:	2001d904 	.word	0x2001d904

0000d09c <strtok>:
    d09c:	4b13      	ldr	r3, [pc, #76]	; (d0ec <strtok+0x50>)
    d09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0a2:	681f      	ldr	r7, [r3, #0]
    d0a4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
    d0a6:	4605      	mov	r5, r0
    d0a8:	460e      	mov	r6, r1
    d0aa:	b9b4      	cbnz	r4, d0da <strtok+0x3e>
    d0ac:	2050      	movs	r0, #80	; 0x50
    d0ae:	f7ff fa93 	bl	c5d8 <malloc>
    d0b2:	65b8      	str	r0, [r7, #88]	; 0x58
    d0b4:	e9c0 4400 	strd	r4, r4, [r0]
    d0b8:	e9c0 4402 	strd	r4, r4, [r0, #8]
    d0bc:	e9c0 4404 	strd	r4, r4, [r0, #16]
    d0c0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
    d0c4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
    d0c8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
    d0cc:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
    d0d0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    d0d4:	6184      	str	r4, [r0, #24]
    d0d6:	7704      	strb	r4, [r0, #28]
    d0d8:	6244      	str	r4, [r0, #36]	; 0x24
    d0da:	6dba      	ldr	r2, [r7, #88]	; 0x58
    d0dc:	4631      	mov	r1, r6
    d0de:	4628      	mov	r0, r5
    d0e0:	2301      	movs	r3, #1
    d0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d0e6:	f003 b964 	b.w	103b2 <__strtok_r>
    d0ea:	bf00      	nop
    d0ec:	200000fc 	.word	0x200000fc

0000d0f0 <_strtol_l.isra.0>:
    d0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d0f4:	4e3a      	ldr	r6, [pc, #232]	; (d1e0 <_strtol_l.isra.0+0xf0>)
    d0f6:	4686      	mov	lr, r0
    d0f8:	468c      	mov	ip, r1
    d0fa:	4660      	mov	r0, ip
    d0fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
    d100:	5da5      	ldrb	r5, [r4, r6]
    d102:	f015 0508 	ands.w	r5, r5, #8
    d106:	d1f8      	bne.n	d0fa <_strtol_l.isra.0+0xa>
    d108:	2c2d      	cmp	r4, #45	; 0x2d
    d10a:	d133      	bne.n	d174 <_strtol_l.isra.0+0x84>
    d10c:	f89c 4000 	ldrb.w	r4, [ip]
    d110:	f04f 0801 	mov.w	r8, #1
    d114:	f100 0c02 	add.w	ip, r0, #2
    d118:	2b00      	cmp	r3, #0
    d11a:	d05c      	beq.n	d1d6 <_strtol_l.isra.0+0xe6>
    d11c:	2b10      	cmp	r3, #16
    d11e:	d10c      	bne.n	d13a <_strtol_l.isra.0+0x4a>
    d120:	2c30      	cmp	r4, #48	; 0x30
    d122:	d10a      	bne.n	d13a <_strtol_l.isra.0+0x4a>
    d124:	f89c 0000 	ldrb.w	r0, [ip]
    d128:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    d12c:	2858      	cmp	r0, #88	; 0x58
    d12e:	d14d      	bne.n	d1cc <_strtol_l.isra.0+0xdc>
    d130:	f89c 4001 	ldrb.w	r4, [ip, #1]
    d134:	2310      	movs	r3, #16
    d136:	f10c 0c02 	add.w	ip, ip, #2
    d13a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
    d13e:	3f01      	subs	r7, #1
    d140:	2600      	movs	r6, #0
    d142:	fbb7 f9f3 	udiv	r9, r7, r3
    d146:	4630      	mov	r0, r6
    d148:	fb03 7a19 	mls	sl, r3, r9, r7
    d14c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
    d150:	2d09      	cmp	r5, #9
    d152:	d818      	bhi.n	d186 <_strtol_l.isra.0+0x96>
    d154:	462c      	mov	r4, r5
    d156:	42a3      	cmp	r3, r4
    d158:	dd24      	ble.n	d1a4 <_strtol_l.isra.0+0xb4>
    d15a:	1c75      	adds	r5, r6, #1
    d15c:	d007      	beq.n	d16e <_strtol_l.isra.0+0x7e>
    d15e:	4581      	cmp	r9, r0
    d160:	d31d      	bcc.n	d19e <_strtol_l.isra.0+0xae>
    d162:	d101      	bne.n	d168 <_strtol_l.isra.0+0x78>
    d164:	45a2      	cmp	sl, r4
    d166:	db1a      	blt.n	d19e <_strtol_l.isra.0+0xae>
    d168:	fb00 4003 	mla	r0, r0, r3, r4
    d16c:	2601      	movs	r6, #1
    d16e:	f81c 4b01 	ldrb.w	r4, [ip], #1
    d172:	e7eb      	b.n	d14c <_strtol_l.isra.0+0x5c>
    d174:	2c2b      	cmp	r4, #43	; 0x2b
    d176:	bf08      	it	eq
    d178:	f89c 4000 	ldrbeq.w	r4, [ip]
    d17c:	46a8      	mov	r8, r5
    d17e:	bf08      	it	eq
    d180:	f100 0c02 	addeq.w	ip, r0, #2
    d184:	e7c8      	b.n	d118 <_strtol_l.isra.0+0x28>
    d186:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
    d18a:	2d19      	cmp	r5, #25
    d18c:	d801      	bhi.n	d192 <_strtol_l.isra.0+0xa2>
    d18e:	3c37      	subs	r4, #55	; 0x37
    d190:	e7e1      	b.n	d156 <_strtol_l.isra.0+0x66>
    d192:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
    d196:	2d19      	cmp	r5, #25
    d198:	d804      	bhi.n	d1a4 <_strtol_l.isra.0+0xb4>
    d19a:	3c57      	subs	r4, #87	; 0x57
    d19c:	e7db      	b.n	d156 <_strtol_l.isra.0+0x66>
    d19e:	f04f 36ff 	mov.w	r6, #4294967295
    d1a2:	e7e4      	b.n	d16e <_strtol_l.isra.0+0x7e>
    d1a4:	1c73      	adds	r3, r6, #1
    d1a6:	d106      	bne.n	d1b6 <_strtol_l.isra.0+0xc6>
    d1a8:	2322      	movs	r3, #34	; 0x22
    d1aa:	f8ce 3000 	str.w	r3, [lr]
    d1ae:	4638      	mov	r0, r7
    d1b0:	b942      	cbnz	r2, d1c4 <_strtol_l.isra.0+0xd4>
    d1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d1b6:	f1b8 0f00 	cmp.w	r8, #0
    d1ba:	d000      	beq.n	d1be <_strtol_l.isra.0+0xce>
    d1bc:	4240      	negs	r0, r0
    d1be:	2a00      	cmp	r2, #0
    d1c0:	d0f7      	beq.n	d1b2 <_strtol_l.isra.0+0xc2>
    d1c2:	b10e      	cbz	r6, d1c8 <_strtol_l.isra.0+0xd8>
    d1c4:	f10c 31ff 	add.w	r1, ip, #4294967295
    d1c8:	6011      	str	r1, [r2, #0]
    d1ca:	e7f2      	b.n	d1b2 <_strtol_l.isra.0+0xc2>
    d1cc:	2430      	movs	r4, #48	; 0x30
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	d1b3      	bne.n	d13a <_strtol_l.isra.0+0x4a>
    d1d2:	2308      	movs	r3, #8
    d1d4:	e7b1      	b.n	d13a <_strtol_l.isra.0+0x4a>
    d1d6:	2c30      	cmp	r4, #48	; 0x30
    d1d8:	d0a4      	beq.n	d124 <_strtol_l.isra.0+0x34>
    d1da:	230a      	movs	r3, #10
    d1dc:	e7ad      	b.n	d13a <_strtol_l.isra.0+0x4a>
    d1de:	bf00      	nop
    d1e0:	000578f9 	.word	0x000578f9

0000d1e4 <strtol>:
    d1e4:	4613      	mov	r3, r2
    d1e6:	460a      	mov	r2, r1
    d1e8:	4601      	mov	r1, r0
    d1ea:	4802      	ldr	r0, [pc, #8]	; (d1f4 <strtol+0x10>)
    d1ec:	6800      	ldr	r0, [r0, #0]
    d1ee:	f7ff bf7f 	b.w	d0f0 <_strtol_l.isra.0>
    d1f2:	bf00      	nop
    d1f4:	200000fc 	.word	0x200000fc

0000d1f8 <viprintf>:
    d1f8:	4b09      	ldr	r3, [pc, #36]	; (d220 <viprintf+0x28>)
    d1fa:	b570      	push	{r4, r5, r6, lr}
    d1fc:	681c      	ldr	r4, [r3, #0]
    d1fe:	4605      	mov	r5, r0
    d200:	460e      	mov	r6, r1
    d202:	b124      	cbz	r4, d20e <viprintf+0x16>
    d204:	69a3      	ldr	r3, [r4, #24]
    d206:	b913      	cbnz	r3, d20e <viprintf+0x16>
    d208:	4620      	mov	r0, r4
    d20a:	f000 f9cf 	bl	d5ac <__sinit>
    d20e:	68a1      	ldr	r1, [r4, #8]
    d210:	4633      	mov	r3, r6
    d212:	462a      	mov	r2, r5
    d214:	4620      	mov	r0, r4
    d216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d21a:	f7ff ba95 	b.w	c748 <_vfiprintf_r>
    d21e:	bf00      	nop
    d220:	200000fc 	.word	0x200000fc

0000d224 <__swbuf_r>:
    d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d226:	460e      	mov	r6, r1
    d228:	4614      	mov	r4, r2
    d22a:	4605      	mov	r5, r0
    d22c:	b118      	cbz	r0, d236 <__swbuf_r+0x12>
    d22e:	6983      	ldr	r3, [r0, #24]
    d230:	b90b      	cbnz	r3, d236 <__swbuf_r+0x12>
    d232:	f000 f9bb 	bl	d5ac <__sinit>
    d236:	4b21      	ldr	r3, [pc, #132]	; (d2bc <__swbuf_r+0x98>)
    d238:	429c      	cmp	r4, r3
    d23a:	d12b      	bne.n	d294 <__swbuf_r+0x70>
    d23c:	686c      	ldr	r4, [r5, #4]
    d23e:	69a3      	ldr	r3, [r4, #24]
    d240:	60a3      	str	r3, [r4, #8]
    d242:	89a3      	ldrh	r3, [r4, #12]
    d244:	071a      	lsls	r2, r3, #28
    d246:	d52f      	bpl.n	d2a8 <__swbuf_r+0x84>
    d248:	6923      	ldr	r3, [r4, #16]
    d24a:	b36b      	cbz	r3, d2a8 <__swbuf_r+0x84>
    d24c:	6923      	ldr	r3, [r4, #16]
    d24e:	6820      	ldr	r0, [r4, #0]
    d250:	1ac0      	subs	r0, r0, r3
    d252:	6963      	ldr	r3, [r4, #20]
    d254:	b2f6      	uxtb	r6, r6
    d256:	4283      	cmp	r3, r0
    d258:	4637      	mov	r7, r6
    d25a:	dc04      	bgt.n	d266 <__swbuf_r+0x42>
    d25c:	4621      	mov	r1, r4
    d25e:	4628      	mov	r0, r5
    d260:	f000 f926 	bl	d4b0 <_fflush_r>
    d264:	bb30      	cbnz	r0, d2b4 <__swbuf_r+0x90>
    d266:	68a3      	ldr	r3, [r4, #8]
    d268:	3b01      	subs	r3, #1
    d26a:	60a3      	str	r3, [r4, #8]
    d26c:	6823      	ldr	r3, [r4, #0]
    d26e:	1c5a      	adds	r2, r3, #1
    d270:	6022      	str	r2, [r4, #0]
    d272:	701e      	strb	r6, [r3, #0]
    d274:	6963      	ldr	r3, [r4, #20]
    d276:	3001      	adds	r0, #1
    d278:	4283      	cmp	r3, r0
    d27a:	d004      	beq.n	d286 <__swbuf_r+0x62>
    d27c:	89a3      	ldrh	r3, [r4, #12]
    d27e:	07db      	lsls	r3, r3, #31
    d280:	d506      	bpl.n	d290 <__swbuf_r+0x6c>
    d282:	2e0a      	cmp	r6, #10
    d284:	d104      	bne.n	d290 <__swbuf_r+0x6c>
    d286:	4621      	mov	r1, r4
    d288:	4628      	mov	r0, r5
    d28a:	f000 f911 	bl	d4b0 <_fflush_r>
    d28e:	b988      	cbnz	r0, d2b4 <__swbuf_r+0x90>
    d290:	4638      	mov	r0, r7
    d292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d294:	4b0a      	ldr	r3, [pc, #40]	; (d2c0 <__swbuf_r+0x9c>)
    d296:	429c      	cmp	r4, r3
    d298:	d101      	bne.n	d29e <__swbuf_r+0x7a>
    d29a:	68ac      	ldr	r4, [r5, #8]
    d29c:	e7cf      	b.n	d23e <__swbuf_r+0x1a>
    d29e:	4b09      	ldr	r3, [pc, #36]	; (d2c4 <__swbuf_r+0xa0>)
    d2a0:	429c      	cmp	r4, r3
    d2a2:	bf08      	it	eq
    d2a4:	68ec      	ldreq	r4, [r5, #12]
    d2a6:	e7ca      	b.n	d23e <__swbuf_r+0x1a>
    d2a8:	4621      	mov	r1, r4
    d2aa:	4628      	mov	r0, r5
    d2ac:	f000 f80c 	bl	d2c8 <__swsetup_r>
    d2b0:	2800      	cmp	r0, #0
    d2b2:	d0cb      	beq.n	d24c <__swbuf_r+0x28>
    d2b4:	f04f 37ff 	mov.w	r7, #4294967295
    d2b8:	e7ea      	b.n	d290 <__swbuf_r+0x6c>
    d2ba:	bf00      	nop
    d2bc:	00057870 	.word	0x00057870
    d2c0:	00057890 	.word	0x00057890
    d2c4:	00057850 	.word	0x00057850

0000d2c8 <__swsetup_r>:
    d2c8:	4b32      	ldr	r3, [pc, #200]	; (d394 <__swsetup_r+0xcc>)
    d2ca:	b570      	push	{r4, r5, r6, lr}
    d2cc:	681d      	ldr	r5, [r3, #0]
    d2ce:	4606      	mov	r6, r0
    d2d0:	460c      	mov	r4, r1
    d2d2:	b125      	cbz	r5, d2de <__swsetup_r+0x16>
    d2d4:	69ab      	ldr	r3, [r5, #24]
    d2d6:	b913      	cbnz	r3, d2de <__swsetup_r+0x16>
    d2d8:	4628      	mov	r0, r5
    d2da:	f000 f967 	bl	d5ac <__sinit>
    d2de:	4b2e      	ldr	r3, [pc, #184]	; (d398 <__swsetup_r+0xd0>)
    d2e0:	429c      	cmp	r4, r3
    d2e2:	d10f      	bne.n	d304 <__swsetup_r+0x3c>
    d2e4:	686c      	ldr	r4, [r5, #4]
    d2e6:	89a3      	ldrh	r3, [r4, #12]
    d2e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    d2ec:	0719      	lsls	r1, r3, #28
    d2ee:	d42c      	bmi.n	d34a <__swsetup_r+0x82>
    d2f0:	06dd      	lsls	r5, r3, #27
    d2f2:	d411      	bmi.n	d318 <__swsetup_r+0x50>
    d2f4:	2309      	movs	r3, #9
    d2f6:	6033      	str	r3, [r6, #0]
    d2f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    d2fc:	81a3      	strh	r3, [r4, #12]
    d2fe:	f04f 30ff 	mov.w	r0, #4294967295
    d302:	e03e      	b.n	d382 <__swsetup_r+0xba>
    d304:	4b25      	ldr	r3, [pc, #148]	; (d39c <__swsetup_r+0xd4>)
    d306:	429c      	cmp	r4, r3
    d308:	d101      	bne.n	d30e <__swsetup_r+0x46>
    d30a:	68ac      	ldr	r4, [r5, #8]
    d30c:	e7eb      	b.n	d2e6 <__swsetup_r+0x1e>
    d30e:	4b24      	ldr	r3, [pc, #144]	; (d3a0 <__swsetup_r+0xd8>)
    d310:	429c      	cmp	r4, r3
    d312:	bf08      	it	eq
    d314:	68ec      	ldreq	r4, [r5, #12]
    d316:	e7e6      	b.n	d2e6 <__swsetup_r+0x1e>
    d318:	0758      	lsls	r0, r3, #29
    d31a:	d512      	bpl.n	d342 <__swsetup_r+0x7a>
    d31c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d31e:	b141      	cbz	r1, d332 <__swsetup_r+0x6a>
    d320:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d324:	4299      	cmp	r1, r3
    d326:	d002      	beq.n	d32e <__swsetup_r+0x66>
    d328:	4630      	mov	r0, r6
    d32a:	f7ff f965 	bl	c5f8 <_free_r>
    d32e:	2300      	movs	r3, #0
    d330:	6363      	str	r3, [r4, #52]	; 0x34
    d332:	89a3      	ldrh	r3, [r4, #12]
    d334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    d338:	81a3      	strh	r3, [r4, #12]
    d33a:	2300      	movs	r3, #0
    d33c:	6063      	str	r3, [r4, #4]
    d33e:	6923      	ldr	r3, [r4, #16]
    d340:	6023      	str	r3, [r4, #0]
    d342:	89a3      	ldrh	r3, [r4, #12]
    d344:	f043 0308 	orr.w	r3, r3, #8
    d348:	81a3      	strh	r3, [r4, #12]
    d34a:	6923      	ldr	r3, [r4, #16]
    d34c:	b94b      	cbnz	r3, d362 <__swsetup_r+0x9a>
    d34e:	89a3      	ldrh	r3, [r4, #12]
    d350:	f403 7320 	and.w	r3, r3, #640	; 0x280
    d354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d358:	d003      	beq.n	d362 <__swsetup_r+0x9a>
    d35a:	4621      	mov	r1, r4
    d35c:	4630      	mov	r0, r6
    d35e:	f000 f9a7 	bl	d6b0 <__smakebuf_r>
    d362:	89a0      	ldrh	r0, [r4, #12]
    d364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    d368:	f010 0301 	ands.w	r3, r0, #1
    d36c:	d00a      	beq.n	d384 <__swsetup_r+0xbc>
    d36e:	2300      	movs	r3, #0
    d370:	60a3      	str	r3, [r4, #8]
    d372:	6963      	ldr	r3, [r4, #20]
    d374:	425b      	negs	r3, r3
    d376:	61a3      	str	r3, [r4, #24]
    d378:	6923      	ldr	r3, [r4, #16]
    d37a:	b943      	cbnz	r3, d38e <__swsetup_r+0xc6>
    d37c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    d380:	d1ba      	bne.n	d2f8 <__swsetup_r+0x30>
    d382:	bd70      	pop	{r4, r5, r6, pc}
    d384:	0781      	lsls	r1, r0, #30
    d386:	bf58      	it	pl
    d388:	6963      	ldrpl	r3, [r4, #20]
    d38a:	60a3      	str	r3, [r4, #8]
    d38c:	e7f4      	b.n	d378 <__swsetup_r+0xb0>
    d38e:	2000      	movs	r0, #0
    d390:	e7f7      	b.n	d382 <__swsetup_r+0xba>
    d392:	bf00      	nop
    d394:	200000fc 	.word	0x200000fc
    d398:	00057870 	.word	0x00057870
    d39c:	00057890 	.word	0x00057890
    d3a0:	00057850 	.word	0x00057850

0000d3a4 <__sflush_r>:
    d3a4:	898a      	ldrh	r2, [r1, #12]
    d3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3aa:	4605      	mov	r5, r0
    d3ac:	0710      	lsls	r0, r2, #28
    d3ae:	460c      	mov	r4, r1
    d3b0:	d458      	bmi.n	d464 <__sflush_r+0xc0>
    d3b2:	684b      	ldr	r3, [r1, #4]
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	dc05      	bgt.n	d3c4 <__sflush_r+0x20>
    d3b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	dc02      	bgt.n	d3c4 <__sflush_r+0x20>
    d3be:	2000      	movs	r0, #0
    d3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d3c6:	2e00      	cmp	r6, #0
    d3c8:	d0f9      	beq.n	d3be <__sflush_r+0x1a>
    d3ca:	2300      	movs	r3, #0
    d3cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    d3d0:	682f      	ldr	r7, [r5, #0]
    d3d2:	602b      	str	r3, [r5, #0]
    d3d4:	d032      	beq.n	d43c <__sflush_r+0x98>
    d3d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d3d8:	89a3      	ldrh	r3, [r4, #12]
    d3da:	075a      	lsls	r2, r3, #29
    d3dc:	d505      	bpl.n	d3ea <__sflush_r+0x46>
    d3de:	6863      	ldr	r3, [r4, #4]
    d3e0:	1ac0      	subs	r0, r0, r3
    d3e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d3e4:	b10b      	cbz	r3, d3ea <__sflush_r+0x46>
    d3e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d3e8:	1ac0      	subs	r0, r0, r3
    d3ea:	2300      	movs	r3, #0
    d3ec:	4602      	mov	r2, r0
    d3ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d3f0:	6a21      	ldr	r1, [r4, #32]
    d3f2:	4628      	mov	r0, r5
    d3f4:	47b0      	blx	r6
    d3f6:	1c43      	adds	r3, r0, #1
    d3f8:	89a3      	ldrh	r3, [r4, #12]
    d3fa:	d106      	bne.n	d40a <__sflush_r+0x66>
    d3fc:	6829      	ldr	r1, [r5, #0]
    d3fe:	291d      	cmp	r1, #29
    d400:	d82c      	bhi.n	d45c <__sflush_r+0xb8>
    d402:	4a2a      	ldr	r2, [pc, #168]	; (d4ac <__sflush_r+0x108>)
    d404:	40ca      	lsrs	r2, r1
    d406:	07d6      	lsls	r6, r2, #31
    d408:	d528      	bpl.n	d45c <__sflush_r+0xb8>
    d40a:	2200      	movs	r2, #0
    d40c:	6062      	str	r2, [r4, #4]
    d40e:	04d9      	lsls	r1, r3, #19
    d410:	6922      	ldr	r2, [r4, #16]
    d412:	6022      	str	r2, [r4, #0]
    d414:	d504      	bpl.n	d420 <__sflush_r+0x7c>
    d416:	1c42      	adds	r2, r0, #1
    d418:	d101      	bne.n	d41e <__sflush_r+0x7a>
    d41a:	682b      	ldr	r3, [r5, #0]
    d41c:	b903      	cbnz	r3, d420 <__sflush_r+0x7c>
    d41e:	6560      	str	r0, [r4, #84]	; 0x54
    d420:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d422:	602f      	str	r7, [r5, #0]
    d424:	2900      	cmp	r1, #0
    d426:	d0ca      	beq.n	d3be <__sflush_r+0x1a>
    d428:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d42c:	4299      	cmp	r1, r3
    d42e:	d002      	beq.n	d436 <__sflush_r+0x92>
    d430:	4628      	mov	r0, r5
    d432:	f7ff f8e1 	bl	c5f8 <_free_r>
    d436:	2000      	movs	r0, #0
    d438:	6360      	str	r0, [r4, #52]	; 0x34
    d43a:	e7c1      	b.n	d3c0 <__sflush_r+0x1c>
    d43c:	6a21      	ldr	r1, [r4, #32]
    d43e:	2301      	movs	r3, #1
    d440:	4628      	mov	r0, r5
    d442:	47b0      	blx	r6
    d444:	1c41      	adds	r1, r0, #1
    d446:	d1c7      	bne.n	d3d8 <__sflush_r+0x34>
    d448:	682b      	ldr	r3, [r5, #0]
    d44a:	2b00      	cmp	r3, #0
    d44c:	d0c4      	beq.n	d3d8 <__sflush_r+0x34>
    d44e:	2b1d      	cmp	r3, #29
    d450:	d001      	beq.n	d456 <__sflush_r+0xb2>
    d452:	2b16      	cmp	r3, #22
    d454:	d101      	bne.n	d45a <__sflush_r+0xb6>
    d456:	602f      	str	r7, [r5, #0]
    d458:	e7b1      	b.n	d3be <__sflush_r+0x1a>
    d45a:	89a3      	ldrh	r3, [r4, #12]
    d45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d460:	81a3      	strh	r3, [r4, #12]
    d462:	e7ad      	b.n	d3c0 <__sflush_r+0x1c>
    d464:	690f      	ldr	r7, [r1, #16]
    d466:	2f00      	cmp	r7, #0
    d468:	d0a9      	beq.n	d3be <__sflush_r+0x1a>
    d46a:	0793      	lsls	r3, r2, #30
    d46c:	680e      	ldr	r6, [r1, #0]
    d46e:	bf08      	it	eq
    d470:	694b      	ldreq	r3, [r1, #20]
    d472:	600f      	str	r7, [r1, #0]
    d474:	bf18      	it	ne
    d476:	2300      	movne	r3, #0
    d478:	eba6 0807 	sub.w	r8, r6, r7
    d47c:	608b      	str	r3, [r1, #8]
    d47e:	f1b8 0f00 	cmp.w	r8, #0
    d482:	dd9c      	ble.n	d3be <__sflush_r+0x1a>
    d484:	6a21      	ldr	r1, [r4, #32]
    d486:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    d488:	4643      	mov	r3, r8
    d48a:	463a      	mov	r2, r7
    d48c:	4628      	mov	r0, r5
    d48e:	47b0      	blx	r6
    d490:	2800      	cmp	r0, #0
    d492:	dc06      	bgt.n	d4a2 <__sflush_r+0xfe>
    d494:	89a3      	ldrh	r3, [r4, #12]
    d496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d49a:	81a3      	strh	r3, [r4, #12]
    d49c:	f04f 30ff 	mov.w	r0, #4294967295
    d4a0:	e78e      	b.n	d3c0 <__sflush_r+0x1c>
    d4a2:	4407      	add	r7, r0
    d4a4:	eba8 0800 	sub.w	r8, r8, r0
    d4a8:	e7e9      	b.n	d47e <__sflush_r+0xda>
    d4aa:	bf00      	nop
    d4ac:	20400001 	.word	0x20400001

0000d4b0 <_fflush_r>:
    d4b0:	b538      	push	{r3, r4, r5, lr}
    d4b2:	690b      	ldr	r3, [r1, #16]
    d4b4:	4605      	mov	r5, r0
    d4b6:	460c      	mov	r4, r1
    d4b8:	b913      	cbnz	r3, d4c0 <_fflush_r+0x10>
    d4ba:	2500      	movs	r5, #0
    d4bc:	4628      	mov	r0, r5
    d4be:	bd38      	pop	{r3, r4, r5, pc}
    d4c0:	b118      	cbz	r0, d4ca <_fflush_r+0x1a>
    d4c2:	6983      	ldr	r3, [r0, #24]
    d4c4:	b90b      	cbnz	r3, d4ca <_fflush_r+0x1a>
    d4c6:	f000 f871 	bl	d5ac <__sinit>
    d4ca:	4b14      	ldr	r3, [pc, #80]	; (d51c <_fflush_r+0x6c>)
    d4cc:	429c      	cmp	r4, r3
    d4ce:	d11b      	bne.n	d508 <_fflush_r+0x58>
    d4d0:	686c      	ldr	r4, [r5, #4]
    d4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	d0ef      	beq.n	d4ba <_fflush_r+0xa>
    d4da:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d4dc:	07d0      	lsls	r0, r2, #31
    d4de:	d404      	bmi.n	d4ea <_fflush_r+0x3a>
    d4e0:	0599      	lsls	r1, r3, #22
    d4e2:	d402      	bmi.n	d4ea <_fflush_r+0x3a>
    d4e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d4e6:	f001 f80f 	bl	e508 <__retarget_lock_acquire_recursive>
    d4ea:	4628      	mov	r0, r5
    d4ec:	4621      	mov	r1, r4
    d4ee:	f7ff ff59 	bl	d3a4 <__sflush_r>
    d4f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d4f4:	07da      	lsls	r2, r3, #31
    d4f6:	4605      	mov	r5, r0
    d4f8:	d4e0      	bmi.n	d4bc <_fflush_r+0xc>
    d4fa:	89a3      	ldrh	r3, [r4, #12]
    d4fc:	059b      	lsls	r3, r3, #22
    d4fe:	d4dd      	bmi.n	d4bc <_fflush_r+0xc>
    d500:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d502:	f001 f809 	bl	e518 <__retarget_lock_release_recursive>
    d506:	e7d9      	b.n	d4bc <_fflush_r+0xc>
    d508:	4b05      	ldr	r3, [pc, #20]	; (d520 <_fflush_r+0x70>)
    d50a:	429c      	cmp	r4, r3
    d50c:	d101      	bne.n	d512 <_fflush_r+0x62>
    d50e:	68ac      	ldr	r4, [r5, #8]
    d510:	e7df      	b.n	d4d2 <_fflush_r+0x22>
    d512:	4b04      	ldr	r3, [pc, #16]	; (d524 <_fflush_r+0x74>)
    d514:	429c      	cmp	r4, r3
    d516:	bf08      	it	eq
    d518:	68ec      	ldreq	r4, [r5, #12]
    d51a:	e7da      	b.n	d4d2 <_fflush_r+0x22>
    d51c:	00057870 	.word	0x00057870
    d520:	00057890 	.word	0x00057890
    d524:	00057850 	.word	0x00057850

0000d528 <std>:
    d528:	2300      	movs	r3, #0
    d52a:	b510      	push	{r4, lr}
    d52c:	4604      	mov	r4, r0
    d52e:	e9c0 3300 	strd	r3, r3, [r0]
    d532:	e9c0 3304 	strd	r3, r3, [r0, #16]
    d536:	6083      	str	r3, [r0, #8]
    d538:	8181      	strh	r1, [r0, #12]
    d53a:	6643      	str	r3, [r0, #100]	; 0x64
    d53c:	81c2      	strh	r2, [r0, #14]
    d53e:	6183      	str	r3, [r0, #24]
    d540:	4619      	mov	r1, r3
    d542:	2208      	movs	r2, #8
    d544:	305c      	adds	r0, #92	; 0x5c
    d546:	f002 fd9e 	bl	10086 <memset>
    d54a:	4b05      	ldr	r3, [pc, #20]	; (d560 <std+0x38>)
    d54c:	6263      	str	r3, [r4, #36]	; 0x24
    d54e:	4b05      	ldr	r3, [pc, #20]	; (d564 <std+0x3c>)
    d550:	62a3      	str	r3, [r4, #40]	; 0x28
    d552:	4b05      	ldr	r3, [pc, #20]	; (d568 <std+0x40>)
    d554:	62e3      	str	r3, [r4, #44]	; 0x2c
    d556:	4b05      	ldr	r3, [pc, #20]	; (d56c <std+0x44>)
    d558:	6224      	str	r4, [r4, #32]
    d55a:	6323      	str	r3, [r4, #48]	; 0x30
    d55c:	bd10      	pop	{r4, pc}
    d55e:	bf00      	nop
    d560:	00010b5d 	.word	0x00010b5d
    d564:	00010b7f 	.word	0x00010b7f
    d568:	00010bb7 	.word	0x00010bb7
    d56c:	00010bdb 	.word	0x00010bdb

0000d570 <_cleanup_r>:
    d570:	4901      	ldr	r1, [pc, #4]	; (d578 <_cleanup_r+0x8>)
    d572:	f002 bfe7 	b.w	10544 <_fwalk_reent>
    d576:	bf00      	nop
    d578:	0000d4b1 	.word	0x0000d4b1

0000d57c <__sfp_lock_acquire>:
    d57c:	4801      	ldr	r0, [pc, #4]	; (d584 <__sfp_lock_acquire+0x8>)
    d57e:	f000 bfc3 	b.w	e508 <__retarget_lock_acquire_recursive>
    d582:	bf00      	nop
    d584:	200002f8 	.word	0x200002f8

0000d588 <__sfp_lock_release>:
    d588:	4801      	ldr	r0, [pc, #4]	; (d590 <__sfp_lock_release+0x8>)
    d58a:	f000 bfc5 	b.w	e518 <__retarget_lock_release_recursive>
    d58e:	bf00      	nop
    d590:	200002f8 	.word	0x200002f8

0000d594 <__sinit_lock_acquire>:
    d594:	4801      	ldr	r0, [pc, #4]	; (d59c <__sinit_lock_acquire+0x8>)
    d596:	f000 bfb7 	b.w	e508 <__retarget_lock_acquire_recursive>
    d59a:	bf00      	nop
    d59c:	2000030c 	.word	0x2000030c

0000d5a0 <__sinit_lock_release>:
    d5a0:	4801      	ldr	r0, [pc, #4]	; (d5a8 <__sinit_lock_release+0x8>)
    d5a2:	f000 bfb9 	b.w	e518 <__retarget_lock_release_recursive>
    d5a6:	bf00      	nop
    d5a8:	2000030c 	.word	0x2000030c

0000d5ac <__sinit>:
    d5ac:	b510      	push	{r4, lr}
    d5ae:	4604      	mov	r4, r0
    d5b0:	f7ff fff0 	bl	d594 <__sinit_lock_acquire>
    d5b4:	69a3      	ldr	r3, [r4, #24]
    d5b6:	b11b      	cbz	r3, d5c0 <__sinit+0x14>
    d5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5bc:	f7ff bff0 	b.w	d5a0 <__sinit_lock_release>
    d5c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    d5c4:	6523      	str	r3, [r4, #80]	; 0x50
    d5c6:	4b13      	ldr	r3, [pc, #76]	; (d614 <__sinit+0x68>)
    d5c8:	4a13      	ldr	r2, [pc, #76]	; (d618 <__sinit+0x6c>)
    d5ca:	681b      	ldr	r3, [r3, #0]
    d5cc:	62a2      	str	r2, [r4, #40]	; 0x28
    d5ce:	42a3      	cmp	r3, r4
    d5d0:	bf04      	itt	eq
    d5d2:	2301      	moveq	r3, #1
    d5d4:	61a3      	streq	r3, [r4, #24]
    d5d6:	4620      	mov	r0, r4
    d5d8:	f000 f820 	bl	d61c <__sfp>
    d5dc:	6060      	str	r0, [r4, #4]
    d5de:	4620      	mov	r0, r4
    d5e0:	f000 f81c 	bl	d61c <__sfp>
    d5e4:	60a0      	str	r0, [r4, #8]
    d5e6:	4620      	mov	r0, r4
    d5e8:	f000 f818 	bl	d61c <__sfp>
    d5ec:	2200      	movs	r2, #0
    d5ee:	60e0      	str	r0, [r4, #12]
    d5f0:	2104      	movs	r1, #4
    d5f2:	6860      	ldr	r0, [r4, #4]
    d5f4:	f7ff ff98 	bl	d528 <std>
    d5f8:	68a0      	ldr	r0, [r4, #8]
    d5fa:	2201      	movs	r2, #1
    d5fc:	2109      	movs	r1, #9
    d5fe:	f7ff ff93 	bl	d528 <std>
    d602:	68e0      	ldr	r0, [r4, #12]
    d604:	2202      	movs	r2, #2
    d606:	2112      	movs	r1, #18
    d608:	f7ff ff8e 	bl	d528 <std>
    d60c:	2301      	movs	r3, #1
    d60e:	61a3      	str	r3, [r4, #24]
    d610:	e7d2      	b.n	d5b8 <__sinit+0xc>
    d612:	bf00      	nop
    d614:	0005784c 	.word	0x0005784c
    d618:	0000d571 	.word	0x0000d571

0000d61c <__sfp>:
    d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d61e:	4607      	mov	r7, r0
    d620:	f7ff ffac 	bl	d57c <__sfp_lock_acquire>
    d624:	4b1e      	ldr	r3, [pc, #120]	; (d6a0 <__sfp+0x84>)
    d626:	681e      	ldr	r6, [r3, #0]
    d628:	69b3      	ldr	r3, [r6, #24]
    d62a:	b913      	cbnz	r3, d632 <__sfp+0x16>
    d62c:	4630      	mov	r0, r6
    d62e:	f7ff ffbd 	bl	d5ac <__sinit>
    d632:	3648      	adds	r6, #72	; 0x48
    d634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    d638:	3b01      	subs	r3, #1
    d63a:	d503      	bpl.n	d644 <__sfp+0x28>
    d63c:	6833      	ldr	r3, [r6, #0]
    d63e:	b30b      	cbz	r3, d684 <__sfp+0x68>
    d640:	6836      	ldr	r6, [r6, #0]
    d642:	e7f7      	b.n	d634 <__sfp+0x18>
    d644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    d648:	b9d5      	cbnz	r5, d680 <__sfp+0x64>
    d64a:	4b16      	ldr	r3, [pc, #88]	; (d6a4 <__sfp+0x88>)
    d64c:	60e3      	str	r3, [r4, #12]
    d64e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    d652:	6665      	str	r5, [r4, #100]	; 0x64
    d654:	f000 ff4f 	bl	e4f6 <__retarget_lock_init_recursive>
    d658:	f7ff ff96 	bl	d588 <__sfp_lock_release>
    d65c:	e9c4 5501 	strd	r5, r5, [r4, #4]
    d660:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d664:	6025      	str	r5, [r4, #0]
    d666:	61a5      	str	r5, [r4, #24]
    d668:	2208      	movs	r2, #8
    d66a:	4629      	mov	r1, r5
    d66c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d670:	f002 fd09 	bl	10086 <memset>
    d674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    d678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    d67c:	4620      	mov	r0, r4
    d67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d680:	3468      	adds	r4, #104	; 0x68
    d682:	e7d9      	b.n	d638 <__sfp+0x1c>
    d684:	2104      	movs	r1, #4
    d686:	4638      	mov	r0, r7
    d688:	f002 ff46 	bl	10518 <__sfmoreglue>
    d68c:	4604      	mov	r4, r0
    d68e:	6030      	str	r0, [r6, #0]
    d690:	2800      	cmp	r0, #0
    d692:	d1d5      	bne.n	d640 <__sfp+0x24>
    d694:	f7ff ff78 	bl	d588 <__sfp_lock_release>
    d698:	230c      	movs	r3, #12
    d69a:	603b      	str	r3, [r7, #0]
    d69c:	e7ee      	b.n	d67c <__sfp+0x60>
    d69e:	bf00      	nop
    d6a0:	0005784c 	.word	0x0005784c
    d6a4:	ffff0001 	.word	0xffff0001

0000d6a8 <_localeconv_r>:
    d6a8:	4800      	ldr	r0, [pc, #0]	; (d6ac <_localeconv_r+0x4>)
    d6aa:	4770      	bx	lr
    d6ac:	20000250 	.word	0x20000250

0000d6b0 <__smakebuf_r>:
    d6b0:	898b      	ldrh	r3, [r1, #12]
    d6b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d6b4:	079d      	lsls	r5, r3, #30
    d6b6:	4606      	mov	r6, r0
    d6b8:	460c      	mov	r4, r1
    d6ba:	d507      	bpl.n	d6cc <__smakebuf_r+0x1c>
    d6bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
    d6c0:	6023      	str	r3, [r4, #0]
    d6c2:	6123      	str	r3, [r4, #16]
    d6c4:	2301      	movs	r3, #1
    d6c6:	6163      	str	r3, [r4, #20]
    d6c8:	b002      	add	sp, #8
    d6ca:	bd70      	pop	{r4, r5, r6, pc}
    d6cc:	ab01      	add	r3, sp, #4
    d6ce:	466a      	mov	r2, sp
    d6d0:	f002 ff57 	bl	10582 <__swhatbuf_r>
    d6d4:	9900      	ldr	r1, [sp, #0]
    d6d6:	4605      	mov	r5, r0
    d6d8:	4630      	mov	r0, r6
    d6da:	f7fe ffdb 	bl	c694 <_malloc_r>
    d6de:	b948      	cbnz	r0, d6f4 <__smakebuf_r+0x44>
    d6e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d6e4:	059a      	lsls	r2, r3, #22
    d6e6:	d4ef      	bmi.n	d6c8 <__smakebuf_r+0x18>
    d6e8:	f023 0303 	bic.w	r3, r3, #3
    d6ec:	f043 0302 	orr.w	r3, r3, #2
    d6f0:	81a3      	strh	r3, [r4, #12]
    d6f2:	e7e3      	b.n	d6bc <__smakebuf_r+0xc>
    d6f4:	4b0d      	ldr	r3, [pc, #52]	; (d72c <__smakebuf_r+0x7c>)
    d6f6:	62b3      	str	r3, [r6, #40]	; 0x28
    d6f8:	89a3      	ldrh	r3, [r4, #12]
    d6fa:	6020      	str	r0, [r4, #0]
    d6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d700:	81a3      	strh	r3, [r4, #12]
    d702:	9b00      	ldr	r3, [sp, #0]
    d704:	6163      	str	r3, [r4, #20]
    d706:	9b01      	ldr	r3, [sp, #4]
    d708:	6120      	str	r0, [r4, #16]
    d70a:	b15b      	cbz	r3, d724 <__smakebuf_r+0x74>
    d70c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d710:	4630      	mov	r0, r6
    d712:	f000 f89b 	bl	d84c <_isatty_r>
    d716:	b128      	cbz	r0, d724 <__smakebuf_r+0x74>
    d718:	89a3      	ldrh	r3, [r4, #12]
    d71a:	f023 0303 	bic.w	r3, r3, #3
    d71e:	f043 0301 	orr.w	r3, r3, #1
    d722:	81a3      	strh	r3, [r4, #12]
    d724:	89a0      	ldrh	r0, [r4, #12]
    d726:	4305      	orrs	r5, r0
    d728:	81a5      	strh	r5, [r4, #12]
    d72a:	e7cd      	b.n	d6c8 <__smakebuf_r+0x18>
    d72c:	0000d571 	.word	0x0000d571

0000d730 <__malloc_lock>:
    d730:	4801      	ldr	r0, [pc, #4]	; (d738 <__malloc_lock+0x8>)
    d732:	f000 bee9 	b.w	e508 <__retarget_lock_acquire_recursive>
    d736:	bf00      	nop
    d738:	200002e4 	.word	0x200002e4

0000d73c <__malloc_unlock>:
    d73c:	4801      	ldr	r0, [pc, #4]	; (d744 <__malloc_unlock+0x8>)
    d73e:	f000 beeb 	b.w	e518 <__retarget_lock_release_recursive>
    d742:	bf00      	nop
    d744:	200002e4 	.word	0x200002e4

0000d748 <__pow5mult>:
    d748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d74c:	4615      	mov	r5, r2
    d74e:	f012 0203 	ands.w	r2, r2, #3
    d752:	4606      	mov	r6, r0
    d754:	460f      	mov	r7, r1
    d756:	d007      	beq.n	d768 <__pow5mult+0x20>
    d758:	4c21      	ldr	r4, [pc, #132]	; (d7e0 <__pow5mult+0x98>)
    d75a:	3a01      	subs	r2, #1
    d75c:	2300      	movs	r3, #0
    d75e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    d762:	f002 ff7d 	bl	10660 <__multadd>
    d766:	4607      	mov	r7, r0
    d768:	10ad      	asrs	r5, r5, #2
    d76a:	d035      	beq.n	d7d8 <__pow5mult+0x90>
    d76c:	6a74      	ldr	r4, [r6, #36]	; 0x24
    d76e:	b93c      	cbnz	r4, d780 <__pow5mult+0x38>
    d770:	2010      	movs	r0, #16
    d772:	f7fe ff31 	bl	c5d8 <malloc>
    d776:	e9c0 4401 	strd	r4, r4, [r0, #4]
    d77a:	6270      	str	r0, [r6, #36]	; 0x24
    d77c:	6004      	str	r4, [r0, #0]
    d77e:	60c4      	str	r4, [r0, #12]
    d780:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    d784:	f8d8 4008 	ldr.w	r4, [r8, #8]
    d788:	b94c      	cbnz	r4, d79e <__pow5mult+0x56>
    d78a:	f240 2171 	movw	r1, #625	; 0x271
    d78e:	4630      	mov	r0, r6
    d790:	f002 fff2 	bl	10778 <__i2b>
    d794:	2300      	movs	r3, #0
    d796:	f8c8 0008 	str.w	r0, [r8, #8]
    d79a:	4604      	mov	r4, r0
    d79c:	6003      	str	r3, [r0, #0]
    d79e:	f04f 0900 	mov.w	r9, #0
    d7a2:	07eb      	lsls	r3, r5, #31
    d7a4:	d50a      	bpl.n	d7bc <__pow5mult+0x74>
    d7a6:	4639      	mov	r1, r7
    d7a8:	4622      	mov	r2, r4
    d7aa:	4630      	mov	r0, r6
    d7ac:	f002 ffed 	bl	1078a <__multiply>
    d7b0:	4639      	mov	r1, r7
    d7b2:	4680      	mov	r8, r0
    d7b4:	4630      	mov	r0, r6
    d7b6:	f002 ff3c 	bl	10632 <_Bfree>
    d7ba:	4647      	mov	r7, r8
    d7bc:	106d      	asrs	r5, r5, #1
    d7be:	d00b      	beq.n	d7d8 <__pow5mult+0x90>
    d7c0:	6820      	ldr	r0, [r4, #0]
    d7c2:	b938      	cbnz	r0, d7d4 <__pow5mult+0x8c>
    d7c4:	4622      	mov	r2, r4
    d7c6:	4621      	mov	r1, r4
    d7c8:	4630      	mov	r0, r6
    d7ca:	f002 ffde 	bl	1078a <__multiply>
    d7ce:	6020      	str	r0, [r4, #0]
    d7d0:	f8c0 9000 	str.w	r9, [r0]
    d7d4:	4604      	mov	r4, r0
    d7d6:	e7e4      	b.n	d7a2 <__pow5mult+0x5a>
    d7d8:	4638      	mov	r0, r7
    d7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d7de:	bf00      	nop
    d7e0:	000578b0 	.word	0x000578b0

0000d7e4 <_write_r>:
    d7e4:	b538      	push	{r3, r4, r5, lr}
    d7e6:	4d07      	ldr	r5, [pc, #28]	; (d804 <_write_r+0x20>)
    d7e8:	4604      	mov	r4, r0
    d7ea:	4608      	mov	r0, r1
    d7ec:	4611      	mov	r1, r2
    d7ee:	2200      	movs	r2, #0
    d7f0:	602a      	str	r2, [r5, #0]
    d7f2:	461a      	mov	r2, r3
    d7f4:	f000 fe66 	bl	e4c4 <_write>
    d7f8:	1c43      	adds	r3, r0, #1
    d7fa:	d102      	bne.n	d802 <_write_r+0x1e>
    d7fc:	682b      	ldr	r3, [r5, #0]
    d7fe:	b103      	cbz	r3, d802 <_write_r+0x1e>
    d800:	6023      	str	r3, [r4, #0]
    d802:	bd38      	pop	{r3, r4, r5, pc}
    d804:	2001d904 	.word	0x2001d904

0000d808 <_close_r>:
    d808:	b538      	push	{r3, r4, r5, lr}
    d80a:	4d06      	ldr	r5, [pc, #24]	; (d824 <_close_r+0x1c>)
    d80c:	2300      	movs	r3, #0
    d80e:	4604      	mov	r4, r0
    d810:	4608      	mov	r0, r1
    d812:	602b      	str	r3, [r5, #0]
    d814:	f000 fe5c 	bl	e4d0 <_close>
    d818:	1c43      	adds	r3, r0, #1
    d81a:	d102      	bne.n	d822 <_close_r+0x1a>
    d81c:	682b      	ldr	r3, [r5, #0]
    d81e:	b103      	cbz	r3, d822 <_close_r+0x1a>
    d820:	6023      	str	r3, [r4, #0]
    d822:	bd38      	pop	{r3, r4, r5, pc}
    d824:	2001d904 	.word	0x2001d904

0000d828 <_fstat_r>:
    d828:	b538      	push	{r3, r4, r5, lr}
    d82a:	4d07      	ldr	r5, [pc, #28]	; (d848 <_fstat_r+0x20>)
    d82c:	2300      	movs	r3, #0
    d82e:	4604      	mov	r4, r0
    d830:	4608      	mov	r0, r1
    d832:	4611      	mov	r1, r2
    d834:	602b      	str	r3, [r5, #0]
    d836:	f000 fe59 	bl	e4ec <_fstat>
    d83a:	1c43      	adds	r3, r0, #1
    d83c:	d102      	bne.n	d844 <_fstat_r+0x1c>
    d83e:	682b      	ldr	r3, [r5, #0]
    d840:	b103      	cbz	r3, d844 <_fstat_r+0x1c>
    d842:	6023      	str	r3, [r4, #0]
    d844:	bd38      	pop	{r3, r4, r5, pc}
    d846:	bf00      	nop
    d848:	2001d904 	.word	0x2001d904

0000d84c <_isatty_r>:
    d84c:	b538      	push	{r3, r4, r5, lr}
    d84e:	4d06      	ldr	r5, [pc, #24]	; (d868 <_isatty_r+0x1c>)
    d850:	2300      	movs	r3, #0
    d852:	4604      	mov	r4, r0
    d854:	4608      	mov	r0, r1
    d856:	602b      	str	r3, [r5, #0]
    d858:	f000 fe3f 	bl	e4da <_isatty>
    d85c:	1c43      	adds	r3, r0, #1
    d85e:	d102      	bne.n	d866 <_isatty_r+0x1a>
    d860:	682b      	ldr	r3, [r5, #0]
    d862:	b103      	cbz	r3, d866 <_isatty_r+0x1a>
    d864:	6023      	str	r3, [r4, #0]
    d866:	bd38      	pop	{r3, r4, r5, pc}
    d868:	2001d904 	.word	0x2001d904

0000d86c <_lseek_r>:
    d86c:	b538      	push	{r3, r4, r5, lr}
    d86e:	4d07      	ldr	r5, [pc, #28]	; (d88c <_lseek_r+0x20>)
    d870:	4604      	mov	r4, r0
    d872:	4608      	mov	r0, r1
    d874:	4611      	mov	r1, r2
    d876:	2200      	movs	r2, #0
    d878:	602a      	str	r2, [r5, #0]
    d87a:	461a      	mov	r2, r3
    d87c:	f000 fe2b 	bl	e4d6 <_lseek>
    d880:	1c43      	adds	r3, r0, #1
    d882:	d102      	bne.n	d88a <_lseek_r+0x1e>
    d884:	682b      	ldr	r3, [r5, #0]
    d886:	b103      	cbz	r3, d88a <_lseek_r+0x1e>
    d888:	6023      	str	r3, [r4, #0]
    d88a:	bd38      	pop	{r3, r4, r5, pc}
    d88c:	2001d904 	.word	0x2001d904

0000d890 <_read_r>:
    d890:	b538      	push	{r3, r4, r5, lr}
    d892:	4d07      	ldr	r5, [pc, #28]	; (d8b0 <_read_r+0x20>)
    d894:	4604      	mov	r4, r0
    d896:	4608      	mov	r0, r1
    d898:	4611      	mov	r1, r2
    d89a:	2200      	movs	r2, #0
    d89c:	602a      	str	r2, [r5, #0]
    d89e:	461a      	mov	r2, r3
    d8a0:	f000 fe0a 	bl	e4b8 <_read>
    d8a4:	1c43      	adds	r3, r0, #1
    d8a6:	d102      	bne.n	d8ae <_read_r+0x1e>
    d8a8:	682b      	ldr	r3, [r5, #0]
    d8aa:	b103      	cbz	r3, d8ae <_read_r+0x1e>
    d8ac:	6023      	str	r3, [r4, #0]
    d8ae:	bd38      	pop	{r3, r4, r5, pc}
    d8b0:	2001d904 	.word	0x2001d904

0000d8b4 <_Z9ee_hexdecPc>:
long ee_hexdec(char *hex) {
    d8b4:	4601      	mov	r1, r0
  long ret = 0;
    d8b6:	2000      	movs	r0, #0
    d8b8:	e007      	b.n	d8ca <_Z9ee_hexdecPc+0x16>
    } else if (c >= 'a' && c <= 'f') {
    d8ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    d8be:	b2d2      	uxtb	r2, r2
    d8c0:	2a05      	cmp	r2, #5
    d8c2:	d80e      	bhi.n	d8e2 <_Z9ee_hexdecPc+0x2e>
      dec = c - 'a' + 10;
    d8c4:	3b57      	subs	r3, #87	; 0x57
    ret = (ret << 4) + dec;
    d8c6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
    d8ca:	780b      	ldrb	r3, [r1, #0]
    d8cc:	b193      	cbz	r3, d8f4 <_Z9ee_hexdecPc+0x40>
    d8ce:	2800      	cmp	r0, #0
    d8d0:	db10      	blt.n	d8f4 <_Z9ee_hexdecPc+0x40>
    c = *hex++;
    d8d2:	3101      	adds	r1, #1
    if (c >= '0' && c <= '9') {
    d8d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d8d8:	b2d2      	uxtb	r2, r2
    d8da:	2a09      	cmp	r2, #9
    d8dc:	d8ed      	bhi.n	d8ba <_Z9ee_hexdecPc+0x6>
      dec = c - '0';
    d8de:	3b30      	subs	r3, #48	; 0x30
    d8e0:	e7f1      	b.n	d8c6 <_Z9ee_hexdecPc+0x12>
    } else if (c >= 'A' && c <= 'F') {
    d8e2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    d8e6:	b2d2      	uxtb	r2, r2
    d8e8:	2a05      	cmp	r2, #5
    d8ea:	d801      	bhi.n	d8f0 <_Z9ee_hexdecPc+0x3c>
      dec = c - 'A' + 10;
    d8ec:	3b37      	subs	r3, #55	; 0x37
    d8ee:	e7ea      	b.n	d8c6 <_Z9ee_hexdecPc+0x12>
      return -1;
    d8f0:	f04f 30ff 	mov.w	r0, #4294967295
}
    d8f4:	4770      	bx	lr

0000d8f6 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
    d8f6:	4770      	bx	lr

0000d8f8 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
    d8f8:	2200      	movs	r2, #0
    d8fa:	6002      	str	r2, [r0, #0]
    d8fc:	6042      	str	r2, [r0, #4]
    d8fe:	6082      	str	r2, [r0, #8]
  }
    d900:	4770      	bx	lr

0000d902 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
    d902:	2001      	movs	r0, #1
    d904:	4770      	bx	lr

0000d906 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
    d906:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
    d908:	6803      	ldr	r3, [r0, #0]
    d90a:	699b      	ldr	r3, [r3, #24]
    d90c:	4798      	blx	r3
  }
    d90e:	bd08      	pop	{r3, pc}

0000d910 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    d910:	b508      	push	{r3, lr}
    return FindOp(op);
    d912:	6803      	ldr	r3, [r0, #0]
    d914:	69db      	ldr	r3, [r3, #28]
    d916:	4798      	blx	r3
  }
    d918:	bd08      	pop	{r3, pc}

0000d91a <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    d91a:	2920      	cmp	r1, #32
    d91c:	d00d      	beq.n	d93a <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x20>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
    d91e:	b410      	push	{r4}
    d920:	4604      	mov	r4, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    d922:	2300      	movs	r3, #0
    d924:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d926:	429a      	cmp	r2, r3
    d928:	d909      	bls.n	d93e <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TfLiteRegistration& registration = registrations_[i];
    d92a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
    d92e:	1d10      	adds	r0, r2, #4
      if (registration.builtin_code == op) {
    d930:	6992      	ldr	r2, [r2, #24]
    d932:	428a      	cmp	r2, r1
    d934:	d004      	beq.n	d940 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    d936:	3301      	adds	r3, #1
    d938:	e7f4      	b.n	d924 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0xa>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    d93a:	2000      	movs	r0, #0
  }
    d93c:	4770      	bx	lr
    return nullptr;
    d93e:	2000      	movs	r0, #0
  }
    d940:	bc10      	pop	{r4}
    d942:	4770      	bx	lr

0000d944 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
    d944:	4770      	bx	lr

0000d946 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
    d946:	b510      	push	{r4, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    d948:	6f84      	ldr	r4, [r0, #120]	; 0x78
    d94a:	2c03      	cmp	r4, #3
    d94c:	d801      	bhi.n	d952 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0xc>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
    d94e:	2300      	movs	r3, #0
    d950:	e002      	b.n	d958 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x12>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    d952:	f002 fb7f 	bl	10054 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
    d956:	3301      	adds	r3, #1
    d958:	429c      	cmp	r4, r3
    d95a:	d909      	bls.n	d970 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
    d95c:	18c2      	adds	r2, r0, r3
    d95e:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
    d962:	428a      	cmp	r2, r1
    d964:	d1f7      	bne.n	d956 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x10>
    d966:	331a      	adds	r3, #26
    d968:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d96c:	6858      	ldr	r0, [r3, #4]
    d96e:	e000      	b.n	d972 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    return nullptr;
    d970:	2000      	movs	r0, #0
  }
    d972:	bd10      	pop	{r4, pc}

0000d974 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
    d974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d976:	4605      	mov	r5, r0
    d978:	460f      	mov	r7, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    d97a:	2400      	movs	r4, #0
    d97c:	e000      	b.n	d980 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xc>
    d97e:	3401      	adds	r4, #1
    d980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d982:	42a3      	cmp	r3, r4
    d984:	d90e      	bls.n	d9a4 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x30>
      const TfLiteRegistration& registration = registrations_[i];
    d986:	eb05 1344 	add.w	r3, r5, r4, lsl #5
    d98a:	1d1e      	adds	r6, r3, #4
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    d98c:	699b      	ldr	r3, [r3, #24]
    d98e:	2b20      	cmp	r3, #32
    d990:	d1f5      	bne.n	d97e <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
    d992:	eb05 1344 	add.w	r3, r5, r4, lsl #5
    d996:	4639      	mov	r1, r7
    d998:	69d8      	ldr	r0, [r3, #28]
    d99a:	f7f3 fdb1 	bl	1500 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    d99e:	2800      	cmp	r0, #0
    d9a0:	d1ed      	bne.n	d97e <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xa>
    d9a2:	e000      	b.n	d9a6 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x32>
    return nullptr;
    d9a4:	2600      	movs	r6, #0
  }
    d9a6:	4630      	mov	r0, r6
    d9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d9aa <_ZN6tflite22MicroMutableOpResolverILj3EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
    d9aa:	b510      	push	{r4, lr}
    d9ac:	4604      	mov	r4, r0
    d9ae:	f002 fb3a 	bl	10026 <_ZdlPv>
    d9b2:	4620      	mov	r0, r4
    d9b4:	bd10      	pop	{r4, pc}

0000d9b6 <_ZN6tflite18MicroErrorReporterD0Ev>:
    d9b6:	b510      	push	{r4, lr}
    d9b8:	4604      	mov	r4, r0
    d9ba:	f002 fb34 	bl	10026 <_ZdlPv>
    d9be:	4620      	mov	r0, r4
    d9c0:	bd10      	pop	{r4, pc}

0000d9c2 <_Z6th_prev>:
void th_pre() {}
    d9c2:	4770      	bx	lr

0000d9c4 <_Z7th_postv>:
void th_post() {}
    d9c4:	4770      	bx	lr

0000d9c6 <_Z16th_command_readyPVc>:
void th_command_ready(char volatile *p_command) {
    d9c6:	b508      	push	{r3, lr}
  ee_serial_command_parser_callback((char *)p_command);
    d9c8:	f7f4 fdb6 	bl	2538 <_Z33ee_serial_command_parser_callbackPc>
}
    d9cc:	bd08      	pop	{r3, pc}

0000d9ce <_Z10th_strnlenPKcj>:
size_t th_strnlen(const char *str, size_t maxlen) {
    d9ce:	b508      	push	{r3, lr}
  return strnlen(str, maxlen);
    d9d0:	f002 fce2 	bl	10398 <strnlen>
}
    d9d4:	bd08      	pop	{r3, pc}

0000d9d6 <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
    d9d6:	b508      	push	{r3, lr}
    d9d8:	f7ff fc0e 	bl	d1f8 <viprintf>
    d9dc:	bd08      	pop	{r3, pc}

0000d9de <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
    d9de:	b40f      	push	{r0, r1, r2, r3}
    d9e0:	b500      	push	{lr}
    d9e2:	b083      	sub	sp, #12
    d9e4:	a904      	add	r1, sp, #16
    d9e6:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
    d9ea:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
    d9ec:	f7ff fff3 	bl	d9d6 <_Z10th_vprintfPKcSt9__va_list>
}
    d9f0:	b003      	add	sp, #12
    d9f2:	f85d eb04 	ldr.w	lr, [sp], #4
    d9f6:	b004      	add	sp, #16
    d9f8:	4770      	bx	lr

0000d9fa <_Z24th_serialport_initializev>:
}
    d9fa:	4770      	bx	lr

0000d9fc <main>:
// Enables 128MHz for the nRF53
#define MHz128 0
//  Increases clock precision.
#define PREC 1

int main(int argc, char *argv[]) {
    d9fc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d9fe:	2001      	movs	r0, #1
    da00:	f7f7 ff44 	bl	588c <nrfx_clock_start>
}
    da04:	e003      	b.n	da0e <main+0x12>
                return true;
    da06:	2301      	movs	r3, #1
    da08:	e00d      	b.n	da26 <main+0x2a>

NRFX_STATIC_INLINE bool nrfx_clock_hfclk_is_running(void)
{
    nrf_clock_hfclk_t clk_src;
    bool ret = nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src);
    return (ret && (clk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY));
    da0a:	2300      	movs	r3, #0

//nrfx_clock_divider_set(NRF_CLOCK_DOMAIN_HFCLK, NRF_CLOCK_HFCLK_DIV_1);
 

nrfx_clock_hfclk_start();
while (!nrfx_clock_hfclk_is_running()) { }
    da0c:	b98b      	cbnz	r3, da32 <main+0x36>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    da0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    da12:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
    da16:	f002 0201 	and.w	r2, r2, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    da1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    da1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    da22:	d1f0      	bne.n	da06 <main+0xa>
    return false;
    da24:	2300      	movs	r3, #0
    da26:	2b00      	cmp	r3, #0
    da28:	d0ef      	beq.n	da0a <main+0xe>
    da2a:	2a00      	cmp	r2, #0
    da2c:	d1ee      	bne.n	da0c <main+0x10>
    da2e:	2300      	movs	r3, #0
    da30:	e7ec      	b.n	da0c <main+0x10>



ee_benchmark_initialize();
    da32:	f7f4 fbc3 	bl	21bc <_Z23ee_benchmark_initializev>
    c = (int) cmd_buf[i];
    ee_serial_callback(c);
  }
  }
#else
  console_init();
    da36:	f7f5 ff11 	bl	385c <console_init>

  while (1) {
    
    int c;

    c = console_getchar();
    da3a:	f7f5 fefd 	bl	3838 <console_getchar>
    if (c < 0) {
    da3e:	2800      	cmp	r0, #0
    da40:	dbfb      	blt.n	da3a <main+0x3e>
      continue;
    }
     //printk("c: %d", c);
    ee_serial_callback(c);
    da42:	b2c0      	uxtb	r0, r0
    da44:	f7f4 fb9a 	bl	217c <_Z18ee_serial_callbackc>
    da48:	e7f7      	b.n	da3a <main+0x3e>

0000da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>:
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
  #else
    return EndianSwap(t);
  #endif
}
    da4a:	4770      	bx	lr

0000da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
    da4c:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    da4e:	6800      	ldr	r0, [r0, #0]
    da50:	f7ff fffb 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    da54:	bd08      	pop	{r3, pc}

0000da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
}
    da56:	4770      	bx	lr

0000da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>:
T ReadScalar(const void *p) {
    da58:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    da5a:	6800      	ldr	r0, [r0, #0]
    da5c:	f7ff fffb 	bl	da56 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
}
    da60:	bd08      	pop	{r3, pc}

0000da62 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
}
    da62:	4770      	bx	lr

0000da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
    da64:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    da66:	8800      	ldrh	r0, [r0, #0]
    da68:	f7ff fffb 	bl	da62 <_ZN11flatbuffers12EndianScalarItEET_S1_>
}
    da6c:	bd08      	pop	{r3, pc}

0000da6e <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
    da6e:	b510      	push	{r4, lr}
    da70:	4604      	mov	r4, r0
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
    da72:	6800      	ldr	r0, [r0, #0]
    da74:	f7ff ffe9 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    da78:	4420      	add	r0, r4
    da7a:	bd10      	pop	{r4, pc}

0000da7c <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
    da7c:	b508      	push	{r3, lr}
  return GetMutableRoot<T>(const_cast<void *>(buf));
    da7e:	f7ff fff6 	bl	da6e <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
}
    da82:	bd08      	pop	{r3, pc}

0000da84 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    da84:	4602      	mov	r2, r0
    da86:	b158      	cbz	r0, daa0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    da88:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    da8a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    da8e:	2b01      	cmp	r3, #1
    da90:	d003      	beq.n	da9a <sys_notify_validate+0x16>
    da92:	2b03      	cmp	r3, #3
    da94:	d107      	bne.n	daa6 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    da96:	6803      	ldr	r3, [r0, #0]
    da98:	b143      	cbz	r3, daac <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    da9a:	2000      	movs	r0, #0
    da9c:	6090      	str	r0, [r2, #8]
    da9e:	4770      	bx	lr
		return -EINVAL;
    daa0:	f06f 0015 	mvn.w	r0, #21
    daa4:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    daa6:	f06f 0015 	mvn.w	r0, #21
    daaa:	4770      	bx	lr
			rv = -EINVAL;
    daac:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    dab0:	4770      	bx	lr

0000dab2 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    dab2:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    dab4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    dab6:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    daba:	6081      	str	r1, [r0, #8]
	switch (method) {
    dabc:	2a03      	cmp	r2, #3
    dabe:	d103      	bne.n	dac8 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    dac0:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    dac2:	2200      	movs	r2, #0
    dac4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    dac6:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    dac8:	2000      	movs	r0, #0
    daca:	e7fa      	b.n	dac2 <sys_notify_finalize+0x10>

0000dacc <arch_printk_char_out>:
}
    dacc:	2000      	movs	r0, #0
    dace:	4770      	bx	lr

0000dad0 <str_out>:
{
    dad0:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    dad2:	680c      	ldr	r4, [r1, #0]
    dad4:	b154      	cbz	r4, daec <str_out+0x1c>
    dad6:	688a      	ldr	r2, [r1, #8]
    dad8:	684b      	ldr	r3, [r1, #4]
    dada:	429a      	cmp	r2, r3
    dadc:	da06      	bge.n	daec <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    dade:	3b01      	subs	r3, #1
    dae0:	429a      	cmp	r2, r3
    dae2:	d008      	beq.n	daf6 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    dae4:	1c53      	adds	r3, r2, #1
    dae6:	608b      	str	r3, [r1, #8]
    dae8:	54a0      	strb	r0, [r4, r2]
    daea:	e002      	b.n	daf2 <str_out+0x22>
		ctx->count++;
    daec:	688b      	ldr	r3, [r1, #8]
    daee:	3301      	adds	r3, #1
    daf0:	608b      	str	r3, [r1, #8]
}
    daf2:	bc10      	pop	{r4}
    daf4:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    daf6:	1c53      	adds	r3, r2, #1
    daf8:	608b      	str	r3, [r1, #8]
    dafa:	2300      	movs	r3, #0
    dafc:	54a3      	strb	r3, [r4, r2]
    dafe:	e7f8      	b.n	daf2 <str_out+0x22>

0000db00 <printk>:
{
    db00:	b40f      	push	{r0, r1, r2, r3}
    db02:	b500      	push	{lr}
    db04:	b083      	sub	sp, #12
    db06:	a904      	add	r1, sp, #16
    db08:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    db0c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    db0e:	f7f5 f815 	bl	2b3c <vprintk>
}
    db12:	b003      	add	sp, #12
    db14:	f85d eb04 	ldr.w	lr, [sp], #4
    db18:	b004      	add	sp, #16
    db1a:	4770      	bx	lr

0000db1c <snprintk>:
{
    db1c:	b40c      	push	{r2, r3}
    db1e:	b500      	push	{lr}
    db20:	b083      	sub	sp, #12
    db22:	ab04      	add	r3, sp, #16
    db24:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    db28:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    db2a:	f7f5 f817 	bl	2b5c <vsnprintk>
}
    db2e:	b003      	add	sp, #12
    db30:	f85d eb04 	ldr.w	lr, [sp], #4
    db34:	b002      	add	sp, #8
    db36:	4770      	bx	lr

0000db38 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    db38:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    db3c:	8b81      	ldrh	r1, [r0, #28]
    db3e:	f021 0107 	bic.w	r1, r1, #7
    db42:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    db44:	8381      	strh	r1, [r0, #28]
}
    db46:	4770      	bx	lr

0000db48 <notify_monitors>:
{
    db48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db4c:	4606      	mov	r6, r0
    db4e:	460f      	mov	r7, r1
    db50:	4690      	mov	r8, r2
	return list->head;
    db52:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    db54:	b119      	cbz	r1, db5e <notify_monitors+0x16>
    db56:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    db58:	b131      	cbz	r1, db68 <notify_monitors+0x20>
	return node->next;
    db5a:	680c      	ldr	r4, [r1, #0]
    db5c:	e004      	b.n	db68 <notify_monitors+0x20>
    db5e:	460c      	mov	r4, r1
    db60:	e002      	b.n	db68 <notify_monitors+0x20>
    db62:	4623      	mov	r3, r4
    db64:	4621      	mov	r1, r4
    db66:	461c      	mov	r4, r3
    db68:	b159      	cbz	r1, db82 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    db6a:	684d      	ldr	r5, [r1, #4]
    db6c:	4643      	mov	r3, r8
    db6e:	463a      	mov	r2, r7
    db70:	4630      	mov	r0, r6
    db72:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    db74:	2c00      	cmp	r4, #0
    db76:	d0f4      	beq.n	db62 <notify_monitors+0x1a>
    db78:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    db7a:	2c00      	cmp	r4, #0
    db7c:	d0f2      	beq.n	db64 <notify_monitors+0x1c>
	return node->next;
    db7e:	6823      	ldr	r3, [r4, #0]
    db80:	e7f0      	b.n	db64 <notify_monitors+0x1c>
}
    db82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db86 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    db86:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    db88:	f013 0307 	ands.w	r3, r3, #7
    db8c:	d103      	bne.n	db96 <process_recheck+0x10>
	return list->head;
    db8e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    db90:	b10a      	cbz	r2, db96 <process_recheck+0x10>
		evt = EVT_START;
    db92:	2003      	movs	r0, #3
    db94:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    db96:	2b02      	cmp	r3, #2
    db98:	d003      	beq.n	dba2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    db9a:	2b01      	cmp	r3, #1
    db9c:	d006      	beq.n	dbac <process_recheck+0x26>
	int evt = EVT_NOP;
    db9e:	2000      	movs	r0, #0
    dba0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    dba2:	8bc2      	ldrh	r2, [r0, #30]
    dba4:	2a00      	cmp	r2, #0
    dba6:	d1f8      	bne.n	db9a <process_recheck+0x14>
		evt = EVT_STOP;
    dba8:	2004      	movs	r0, #4
    dbaa:	4770      	bx	lr
    dbac:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    dbae:	b10b      	cbz	r3, dbb4 <process_recheck+0x2e>
		evt = EVT_RESET;
    dbb0:	2005      	movs	r0, #5
}
    dbb2:	4770      	bx	lr
	int evt = EVT_NOP;
    dbb4:	2000      	movs	r0, #0
    dbb6:	4770      	bx	lr

0000dbb8 <process_complete>:
{
    dbb8:	b538      	push	{r3, r4, r5, lr}
    dbba:	4604      	mov	r4, r0
    dbbc:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dbbe:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
    dbc0:	2a00      	cmp	r2, #0
    dbc2:	db07      	blt.n	dbd4 <process_complete+0x1c>
    dbc4:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    dbc8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    dbca:	2a01      	cmp	r2, #1
    dbcc:	d90e      	bls.n	dbec <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    dbce:	2b04      	cmp	r3, #4
    dbd0:	d032      	beq.n	dc38 <process_complete+0x80>
}
    dbd2:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    dbd4:	e9d0 0100 	ldrd	r0, r1, [r0]
    dbd8:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    dbdc:	2300      	movs	r3, #0
    dbde:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    dbe0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    dbe2:	2101      	movs	r1, #1
    dbe4:	4620      	mov	r0, r4
    dbe6:	f7ff ffa7 	bl	db38 <set_state>
    dbea:	e7f2      	b.n	dbd2 <process_complete+0x1a>
		*clients = mgr->clients;
    dbec:	e9d0 0100 	ldrd	r0, r1, [r0]
    dbf0:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    dbf4:	2200      	movs	r2, #0
    dbf6:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    dbf8:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    dbfa:	2b06      	cmp	r3, #6
    dbfc:	d117      	bne.n	dc2e <process_complete+0x76>
	return list->head;
    dbfe:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dc00:	b13b      	cbz	r3, dc12 <process_complete+0x5a>
				mgr->refs += 1U;
    dc02:	8be2      	ldrh	r2, [r4, #30]
    dc04:	3201      	adds	r2, #1
    dc06:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
    dc08:	2b00      	cmp	r3, #0
    dc0a:	d0f9      	beq.n	dc00 <process_complete+0x48>
	return node->next;
    dc0c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dc0e:	2b00      	cmp	r3, #0
    dc10:	d1f6      	bne.n	dc00 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    dc12:	2102      	movs	r1, #2
    dc14:	4620      	mov	r0, r4
    dc16:	f7ff ff8f 	bl	db38 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    dc1a:	4620      	mov	r0, r4
    dc1c:	f7ff ffb3 	bl	db86 <process_recheck>
    dc20:	2800      	cmp	r0, #0
    dc22:	d0d6      	beq.n	dbd2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dc24:	8ba3      	ldrh	r3, [r4, #28]
    dc26:	f043 0320 	orr.w	r3, r3, #32
    dc2a:	83a3      	strh	r3, [r4, #28]
    dc2c:	e7d1      	b.n	dbd2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    dc2e:	2100      	movs	r1, #0
    dc30:	4620      	mov	r0, r4
    dc32:	f7ff ff81 	bl	db38 <set_state>
    dc36:	e7f0      	b.n	dc1a <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    dc38:	2100      	movs	r1, #0
    dc3a:	f7ff ff7d 	bl	db38 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    dc3e:	4620      	mov	r0, r4
    dc40:	f7ff ffa1 	bl	db86 <process_recheck>
    dc44:	2800      	cmp	r0, #0
    dc46:	d0c4      	beq.n	dbd2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dc48:	8ba3      	ldrh	r3, [r4, #28]
    dc4a:	f043 0320 	orr.w	r3, r3, #32
    dc4e:	83a3      	strh	r3, [r4, #28]
}
    dc50:	e7bf      	b.n	dbd2 <process_complete+0x1a>

0000dc52 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    dc52:	b158      	cbz	r0, dc6c <validate_args+0x1a>
{
    dc54:	b510      	push	{r4, lr}
    dc56:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    dc58:	b159      	cbz	r1, dc72 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    dc5a:	1d08      	adds	r0, r1, #4
    dc5c:	f7ff ff12 	bl	da84 <sys_notify_validate>
	if ((rv == 0)
    dc60:	b918      	cbnz	r0, dc6a <validate_args+0x18>
	    && ((cli->notify.flags
    dc62:	68a3      	ldr	r3, [r4, #8]
    dc64:	f033 0303 	bics.w	r3, r3, #3
    dc68:	d106      	bne.n	dc78 <validate_args+0x26>
}
    dc6a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    dc6c:	f06f 0015 	mvn.w	r0, #21
}
    dc70:	4770      	bx	lr
		return -EINVAL;
    dc72:	f06f 0015 	mvn.w	r0, #21
    dc76:	e7f8      	b.n	dc6a <validate_args+0x18>
		rv = -EINVAL;
    dc78:	f06f 0015 	mvn.w	r0, #21
    dc7c:	e7f5      	b.n	dc6a <validate_args+0x18>

0000dc7e <notify_one>:
{
    dc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc82:	4607      	mov	r7, r0
    dc84:	460c      	mov	r4, r1
    dc86:	4616      	mov	r6, r2
    dc88:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    dc8a:	4619      	mov	r1, r3
    dc8c:	1d20      	adds	r0, r4, #4
    dc8e:	f7ff ff10 	bl	dab2 <sys_notify_finalize>
	if (cb) {
    dc92:	b128      	cbz	r0, dca0 <notify_one+0x22>
    dc94:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    dc96:	462b      	mov	r3, r5
    dc98:	4632      	mov	r2, r6
    dc9a:	4621      	mov	r1, r4
    dc9c:	4638      	mov	r0, r7
    dc9e:	47c0      	blx	r8
}
    dca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dca4 <notify_all>:
{
    dca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dca8:	4681      	mov	r9, r0
    dcaa:	460c      	mov	r4, r1
    dcac:	4690      	mov	r8, r2
    dcae:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    dcb0:	e005      	b.n	dcbe <notify_all+0x1a>
	list->tail = node;
    dcb2:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    dcb4:	463b      	mov	r3, r7
    dcb6:	4642      	mov	r2, r8
    dcb8:	4648      	mov	r0, r9
    dcba:	f7ff ffe0 	bl	dc7e <notify_one>
	return list->head;
    dcbe:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    dcc0:	b129      	cbz	r1, dcce <notify_all+0x2a>
	return node->next;
    dcc2:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    dcc4:	6025      	str	r5, [r4, #0]
	return list->tail;
    dcc6:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    dcc8:	428e      	cmp	r6, r1
    dcca:	d1f3      	bne.n	dcb4 <notify_all+0x10>
    dccc:	e7f1      	b.n	dcb2 <notify_all+0xe>
}
    dcce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000dcd2 <transition_complete>:
{
    dcd2:	b510      	push	{r4, lr}
	__asm__ volatile(
    dcd4:	f04f 0420 	mov.w	r4, #32
    dcd8:	f3ef 8211 	mrs	r2, BASEPRI
    dcdc:	f384 8812 	msr	BASEPRI_MAX, r4
    dce0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    dce4:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
    dce6:	2101      	movs	r1, #1
    dce8:	f7f4 ff4e 	bl	2b88 <process_event>
}
    dcec:	bd10      	pop	{r4, pc}

0000dcee <onoff_manager_init>:
	if ((mgr == NULL)
    dcee:	b170      	cbz	r0, dd0e <onoff_manager_init+0x20>
{
    dcf0:	b538      	push	{r3, r4, r5, lr}
    dcf2:	460c      	mov	r4, r1
    dcf4:	4605      	mov	r5, r0
	    || (transitions == NULL)
    dcf6:	b169      	cbz	r1, dd14 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    dcf8:	680b      	ldr	r3, [r1, #0]
    dcfa:	b173      	cbz	r3, dd1a <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    dcfc:	684b      	ldr	r3, [r1, #4]
    dcfe:	b17b      	cbz	r3, dd20 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    dd00:	2220      	movs	r2, #32
    dd02:	2100      	movs	r1, #0
    dd04:	f002 f9bf 	bl	10086 <memset>
    dd08:	612c      	str	r4, [r5, #16]
	return 0;
    dd0a:	2000      	movs	r0, #0
}
    dd0c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    dd0e:	f06f 0015 	mvn.w	r0, #21
}
    dd12:	4770      	bx	lr
		return -EINVAL;
    dd14:	f06f 0015 	mvn.w	r0, #21
    dd18:	e7f8      	b.n	dd0c <onoff_manager_init+0x1e>
    dd1a:	f06f 0015 	mvn.w	r0, #21
    dd1e:	e7f5      	b.n	dd0c <onoff_manager_init+0x1e>
    dd20:	f06f 0015 	mvn.w	r0, #21
    dd24:	e7f2      	b.n	dd0c <onoff_manager_init+0x1e>

0000dd26 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    dd26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd28:	4604      	mov	r4, r0
    dd2a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    dd2c:	f7ff ff91 	bl	dc52 <validate_args>

	if (rv < 0) {
    dd30:	1e06      	subs	r6, r0, #0
    dd32:	db37      	blt.n	dda4 <onoff_request+0x7e>
    dd34:	f04f 0320 	mov.w	r3, #32
    dd38:	f3ef 8211 	mrs	r2, BASEPRI
    dd3c:	f383 8812 	msr	BASEPRI_MAX, r3
    dd40:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dd44:	8ba5      	ldrh	r5, [r4, #28]
    dd46:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    dd4a:	8be3      	ldrh	r3, [r4, #30]
    dd4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd50:	428b      	cmp	r3, r1
    dd52:	d02f      	beq.n	ddb4 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    dd54:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    dd56:	2d02      	cmp	r5, #2
    dd58:	d00c      	beq.n	dd74 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    dd5a:	b18d      	cbz	r5, dd80 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    dd5c:	2d04      	cmp	r5, #4
    dd5e:	d00f      	beq.n	dd80 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    dd60:	2d06      	cmp	r5, #6
    dd62:	d00d      	beq.n	dd80 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    dd64:	2d05      	cmp	r5, #5
    dd66:	d01f      	beq.n	dda8 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    dd68:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    dd6c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    dd6e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    dd70:	4608      	mov	r0, r1
    dd72:	e00a      	b.n	dd8a <onoff_request+0x64>
		mgr->refs += 1U;
    dd74:	3301      	adds	r3, #1
    dd76:	83e3      	strh	r3, [r4, #30]
		notify = true;
    dd78:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    dd7a:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    dd7c:	4618      	mov	r0, r3
    dd7e:	e004      	b.n	dd8a <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    dd80:	fab5 f385 	clz	r3, r5
    dd84:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    dd86:	2100      	movs	r1, #0
		add_client = true;
    dd88:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    dd8a:	b128      	cbz	r0, dd98 <onoff_request+0x72>
	parent->next = child;
    dd8c:	2000      	movs	r0, #0
    dd8e:	6038      	str	r0, [r7, #0]
	return list->tail;
    dd90:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    dd92:	b1a8      	cbz	r0, ddc0 <onoff_request+0x9a>
	parent->next = child;
    dd94:	6007      	str	r7, [r0, #0]
	list->tail = node;
    dd96:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    dd98:	b9ab      	cbnz	r3, ddc6 <onoff_request+0xa0>
	__asm__ volatile(
    dd9a:	f382 8811 	msr	BASEPRI, r2
    dd9e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    dda2:	b9a9      	cbnz	r1, ddd0 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    dda4:	4630      	mov	r0, r6
    dda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    dda8:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    ddac:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    ddae:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    ddb0:	4608      	mov	r0, r1
    ddb2:	e7ea      	b.n	dd8a <onoff_request+0x64>
		rv = -EAGAIN;
    ddb4:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    ddb8:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    ddba:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    ddbc:	4608      	mov	r0, r1
    ddbe:	e7e4      	b.n	dd8a <onoff_request+0x64>
    ddc0:	6067      	str	r7, [r4, #4]
	list->head = node;
    ddc2:	6027      	str	r7, [r4, #0]
}
    ddc4:	e7e8      	b.n	dd98 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    ddc6:	2102      	movs	r1, #2
    ddc8:	4620      	mov	r0, r4
    ddca:	f7f4 fedd 	bl	2b88 <process_event>
    ddce:	e7e9      	b.n	dda4 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    ddd0:	2300      	movs	r3, #0
    ddd2:	462a      	mov	r2, r5
    ddd4:	4639      	mov	r1, r7
    ddd6:	4620      	mov	r0, r4
    ddd8:	f7ff ff51 	bl	dc7e <notify_one>
    dddc:	e7e2      	b.n	dda4 <onoff_request+0x7e>

0000ddde <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    ddde:	b508      	push	{r3, lr}
    dde0:	4604      	mov	r4, r0
    dde2:	4608      	mov	r0, r1
    dde4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    dde6:	461a      	mov	r2, r3
    dde8:	47a0      	blx	r4
	return z_impl_z_current_get();
    ddea:	f7fd ff5b 	bl	bca4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    ddee:	f7f6 f9f9 	bl	41e4 <z_impl_k_thread_abort>

0000ddf2 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    ddf2:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    ddf4:	1d13      	adds	r3, r2, #4
    ddf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    ddfa:	b9d3      	cbnz	r3, de32 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    ddfc:	2301      	movs	r3, #1
    ddfe:	fa03 f402 	lsl.w	r4, r3, r2
    de02:	68c3      	ldr	r3, [r0, #12]
    de04:	4323      	orrs	r3, r4
    de06:	60c3      	str	r3, [r0, #12]
		b->next = c;
    de08:	3204      	adds	r2, #4
    de0a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    de0e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    de12:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
    de14:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    de18:	d307      	bcc.n	de2a <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    de1a:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    de1c:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    de1e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    de22:	d304      	bcc.n	de2e <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    de24:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    de26:	bc70      	pop	{r4, r5, r6}
    de28:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    de2a:	8099      	strh	r1, [r3, #4]
    de2c:	e7f6      	b.n	de1c <free_list_add_bidx+0x2a>
    de2e:	80d9      	strh	r1, [r3, #6]
    de30:	e7f9      	b.n	de26 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    de32:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    de36:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    de38:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    de3c:	d318      	bcc.n	de70 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    de3e:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    de40:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    de44:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    de48:	d314      	bcc.n	de74 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    de4a:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
    de4c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    de4e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    de52:	d311      	bcc.n	de78 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    de54:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    de56:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    de5a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    de5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    de60:	d30c      	bcc.n	de7c <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    de62:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    de64:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    de66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    de6a:	d309      	bcc.n	de80 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    de6c:	60a1      	str	r1, [r4, #8]
    de6e:	e7da      	b.n	de26 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    de70:	88a2      	ldrh	r2, [r4, #4]
    de72:	e7e5      	b.n	de40 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    de74:	80aa      	strh	r2, [r5, #4]
    de76:	e7e9      	b.n	de4c <free_list_add_bidx+0x5a>
    de78:	80eb      	strh	r3, [r5, #6]
    de7a:	e7ec      	b.n	de56 <free_list_add_bidx+0x64>
    de7c:	80d1      	strh	r1, [r2, #6]
    de7e:	e7f1      	b.n	de64 <free_list_add_bidx+0x72>
    de80:	80a1      	strh	r1, [r4, #4]
    de82:	e7d0      	b.n	de26 <free_list_add_bidx+0x34>

0000de84 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    de84:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    de86:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
    de88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    de8c:	d307      	bcc.n	de9e <free_list_add+0x1a>
	void *cmem = &buf[c];
    de8e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    de92:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    de94:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    de96:	2a01      	cmp	r2, #1
    de98:	d002      	beq.n	dea0 <free_list_add+0x1c>
    de9a:	2200      	movs	r2, #0
    de9c:	e000      	b.n	dea0 <free_list_add+0x1c>
    de9e:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    dea0:	b9a2      	cbnz	r2, decc <free_list_add+0x48>
	void *cmem = &buf[c];
    dea2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    dea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    deaa:	d310      	bcc.n	dece <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    deac:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    deae:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    deb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    deb4:	d30d      	bcc.n	ded2 <free_list_add+0x4e>
    deb6:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    deb8:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    deba:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    debe:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    dec0:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    dec4:	f1c2 021f 	rsb	r2, r2, #31
    dec8:	f7ff ff93 	bl	ddf2 <free_list_add_bidx>
	}
}
    decc:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    dece:	8852      	ldrh	r2, [r2, #2]
    ded0:	e7ed      	b.n	deae <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    ded2:	2304      	movs	r3, #4
    ded4:	e7f0      	b.n	deb8 <free_list_add+0x34>

0000ded6 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    ded6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ded8:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    deda:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    dede:	d32a      	bcc.n	df36 <sys_heap_init+0x60>
    dee0:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    dee2:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    dee4:	1dc8      	adds	r0, r1, #7
    dee6:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    deea:	440d      	add	r5, r1
    deec:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    def0:	1a2d      	subs	r5, r5, r0
    def2:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    def4:	4606      	mov	r6, r0
	heap->heap = h;
    def6:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    def8:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    defa:	2300      	movs	r3, #0
    defc:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    defe:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    df02:	d31a      	bcc.n	df3a <sys_heap_init+0x64>
    df04:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    df06:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    df08:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    df0c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    df0e:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    df12:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    df16:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    df1a:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    df1c:	f103 0e07 	add.w	lr, r3, #7
    df20:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    df24:	2300      	movs	r3, #0
    df26:	4563      	cmp	r3, ip
    df28:	da09      	bge.n	df3e <sys_heap_init+0x68>
		h->buckets[i].next = 0;
    df2a:	1d1a      	adds	r2, r3, #4
    df2c:	2400      	movs	r4, #0
    df2e:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    df32:	3301      	adds	r3, #1
    df34:	e7f7      	b.n	df26 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
    df36:	2504      	movs	r5, #4
    df38:	e7d3      	b.n	dee2 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    df3a:	2304      	movs	r3, #4
    df3c:	e7e3      	b.n	df06 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    df3e:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    df40:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    df44:	d333      	bcc.n	dfae <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    df46:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    df48:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    df4c:	d331      	bcc.n	dfb2 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
    df4e:	2300      	movs	r3, #0
    df50:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
    df52:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    df56:	d32f      	bcc.n	dfb8 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    df58:	6843      	ldr	r3, [r0, #4]
    df5a:	f043 0301 	orr.w	r3, r3, #1
    df5e:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    df60:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    df62:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    df64:	f02e 0307 	bic.w	r3, lr, #7
    df68:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    df6a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    df6e:	d328      	bcc.n	dfc2 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    df70:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    df72:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    df74:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    df78:	d325      	bcc.n	dfc6 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    df7a:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    df7c:	f025 0307 	bic.w	r3, r5, #7
    df80:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
    df82:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    df84:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    df88:	d31f      	bcc.n	dfca <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
    df8a:	2400      	movs	r4, #0
    df8c:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
    df8e:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    df90:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    df94:	d31c      	bcc.n	dfd0 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
    df96:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
    df98:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    df9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    df9e:	d319      	bcc.n	dfd4 <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    dfa0:	686b      	ldr	r3, [r5, #4]
    dfa2:	f043 0301 	orr.w	r3, r3, #1
    dfa6:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    dfa8:	f7ff ff6c 	bl	de84 <free_list_add>
}
    dfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    dfae:	8043      	strh	r3, [r0, #2]
    dfb0:	e7ca      	b.n	df48 <sys_heap_init+0x72>
    dfb2:	2300      	movs	r3, #0
    dfb4:	8003      	strh	r3, [r0, #0]
    dfb6:	e7cc      	b.n	df52 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dfb8:	8843      	ldrh	r3, [r0, #2]
    dfba:	f043 0301 	orr.w	r3, r3, #1
    dfbe:	8043      	strh	r3, [r0, #2]
    dfc0:	e7ce      	b.n	df60 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
    dfc2:	8066      	strh	r6, [r4, #2]
    dfc4:	e7d5      	b.n	df72 <sys_heap_init+0x9c>
    dfc6:	52c1      	strh	r1, [r0, r3]
    dfc8:	e7d8      	b.n	df7c <sys_heap_init+0xa6>
    dfca:	2400      	movs	r4, #0
    dfcc:	806c      	strh	r4, [r5, #2]
    dfce:	e7de      	b.n	df8e <sys_heap_init+0xb8>
    dfd0:	52c2      	strh	r2, [r0, r3]
    dfd2:	e7e1      	b.n	df98 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dfd4:	886b      	ldrh	r3, [r5, #2]
    dfd6:	f043 0301 	orr.w	r3, r3, #1
    dfda:	806b      	strh	r3, [r5, #2]
    dfdc:	e7e4      	b.n	dfa8 <sys_heap_init+0xd2>

0000dfde <outs>:
{
    dfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfe2:	4607      	mov	r7, r0
    dfe4:	460e      	mov	r6, r1
    dfe6:	4614      	mov	r4, r2
    dfe8:	4698      	mov	r8, r3
	size_t count = 0;
    dfea:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    dfec:	e006      	b.n	dffc <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    dfee:	4631      	mov	r1, r6
    dff0:	f814 0b01 	ldrb.w	r0, [r4], #1
    dff4:	47b8      	blx	r7
		if (rc < 0) {
    dff6:	2800      	cmp	r0, #0
    dff8:	db09      	blt.n	e00e <outs+0x30>
		++count;
    dffa:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    dffc:	4544      	cmp	r4, r8
    dffe:	d3f6      	bcc.n	dfee <outs+0x10>
    e000:	f1b8 0f00 	cmp.w	r8, #0
    e004:	d102      	bne.n	e00c <outs+0x2e>
    e006:	7823      	ldrb	r3, [r4, #0]
    e008:	2b00      	cmp	r3, #0
    e00a:	d1f0      	bne.n	dfee <outs+0x10>
	return (int)count;
    e00c:	4628      	mov	r0, r5
}
    e00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e012 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    e012:	4770      	bx	lr

0000e014 <tty_putchar>:
{
    e014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e018:	4604      	mov	r4, r0
    e01a:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
    e01c:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
    e020:	f001 fe29 	bl	fc76 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
    e024:	b330      	cbz	r0, e074 <tty_putchar+0x60>
    e026:	2200      	movs	r2, #0
    e028:	4613      	mov	r3, r2
	return z_impl_k_sem_take(sem, timeout);
    e02a:	4630      	mov	r0, r6
    e02c:	f7fd fa52 	bl	b4d4 <z_impl_k_sem_take>
	if (res < 0) {
    e030:	2800      	cmp	r0, #0
    e032:	db1d      	blt.n	e070 <tty_putchar+0x5c>
	__asm__ volatile(
    e034:	f04f 0320 	mov.w	r3, #32
    e038:	f3ef 8111 	mrs	r1, BASEPRI
    e03c:	f383 8812 	msr	BASEPRI_MAX, r3
    e040:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
    e044:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e046:	1c53      	adds	r3, r2, #1
	if (tx_next >= tty->tx_ringbuf_sz) {
    e048:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e04a:	4298      	cmp	r0, r3
    e04c:	d800      	bhi.n	e050 <tty_putchar+0x3c>
		tx_next = 0;
    e04e:	2300      	movs	r3, #0
	if (tx_next == tty->tx_get) {
    e050:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    e052:	4298      	cmp	r0, r3
    e054:	d02e      	beq.n	e0b4 <tty_putchar+0xa0>
	tty->tx_ringbuf[tty->tx_put] = c;
    e056:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e058:	5485      	strb	r5, [r0, r2]
	tty->tx_put = tx_next;
    e05a:	87e3      	strh	r3, [r4, #62]	; 0x3e
	__asm__ volatile(
    e05c:	f381 8811 	msr	BASEPRI, r1
    e060:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
    e064:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
    e066:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
    e068:	69db      	ldr	r3, [r3, #28]
    e06a:	b353      	cbz	r3, e0c2 <tty_putchar+0xae>
		api->irq_tx_enable(dev);
    e06c:	4798      	blx	r3
	return 0;
    e06e:	2000      	movs	r0, #0
}
    e070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 SYS_TIMEOUT_MS(tty->tx_timeout));
    e074:	6c23      	ldr	r3, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
    e076:	f1b3 3fff 	cmp.w	r3, #4294967295
    e07a:	d017      	beq.n	e0ac <tty_putchar+0x98>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
    e07c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e080:	ea4f 79e3 	mov.w	r9, r3, asr #31
    e084:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    e088:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    e08c:	03d8      	lsls	r0, r3, #15
    e08e:	f240 37e7 	movw	r7, #999	; 0x3e7
    e092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e096:	2300      	movs	r3, #0
    e098:	19c0      	adds	r0, r0, r7
    e09a:	f04f 0700 	mov.w	r7, #0
    e09e:	eb47 0101 	adc.w	r1, r7, r1
    e0a2:	f7f3 f845 	bl	1130 <__aeabi_uldivmod>
	res = k_sem_take(&tty->tx_sem,
    e0a6:	4602      	mov	r2, r0
    e0a8:	460b      	mov	r3, r1
    e0aa:	e7be      	b.n	e02a <tty_putchar+0x16>
    e0ac:	f04f 32ff 	mov.w	r2, #4294967295
    e0b0:	4613      	mov	r3, r2
    e0b2:	e7ba      	b.n	e02a <tty_putchar+0x16>
    e0b4:	f381 8811 	msr	BASEPRI, r1
    e0b8:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
    e0bc:	f06f 001b 	mvn.w	r0, #27
    e0c0:	e7d6      	b.n	e070 <tty_putchar+0x5c>
	return 0;
    e0c2:	2000      	movs	r0, #0
    e0c4:	e7d4      	b.n	e070 <tty_putchar+0x5c>

0000e0c6 <tty_getchar>:
{
    e0c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0c8:	4604      	mov	r4, r0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    e0ca:	1d05      	adds	r5, r0, #4
    e0cc:	6a03      	ldr	r3, [r0, #32]
    e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    e0d2:	d031      	beq.n	e138 <tty_getchar+0x72>
    e0d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e0d8:	17df      	asrs	r7, r3, #31
    e0da:	03f9      	lsls	r1, r7, #15
    e0dc:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    e0e0:	03d8      	lsls	r0, r3, #15
    e0e2:	f240 36e7 	movw	r6, #999	; 0x3e7
    e0e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e0ea:	2300      	movs	r3, #0
    e0ec:	1980      	adds	r0, r0, r6
    e0ee:	f04f 0600 	mov.w	r6, #0
    e0f2:	eb46 0101 	adc.w	r1, r6, r1
    e0f6:	f7f3 f81b 	bl	1130 <__aeabi_uldivmod>
    e0fa:	4602      	mov	r2, r0
    e0fc:	460b      	mov	r3, r1
    e0fe:	4628      	mov	r0, r5
    e100:	f7fd f9e8 	bl	b4d4 <z_impl_k_sem_take>
	if (res < 0) {
    e104:	2800      	cmp	r0, #0
    e106:	db16      	blt.n	e136 <tty_getchar+0x70>
	__asm__ volatile(
    e108:	f04f 0320 	mov.w	r3, #32
    e10c:	f3ef 8111 	mrs	r1, BASEPRI
    e110:	f383 8812 	msr	BASEPRI_MAX, r3
    e114:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
    e118:	6960      	ldr	r0, [r4, #20]
    e11a:	8ba2      	ldrh	r2, [r4, #28]
    e11c:	1c53      	adds	r3, r2, #1
    e11e:	b29b      	uxth	r3, r3
    e120:	83a3      	strh	r3, [r4, #28]
    e122:	5c80      	ldrb	r0, [r0, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
    e124:	69a2      	ldr	r2, [r4, #24]
    e126:	4293      	cmp	r3, r2
    e128:	d301      	bcc.n	e12e <tty_getchar+0x68>
		tty->rx_get = 0U;
    e12a:	2300      	movs	r3, #0
    e12c:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
    e12e:	f381 8811 	msr	BASEPRI, r1
    e132:	f3bf 8f6f 	isb	sy
}
    e136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    e138:	f04f 32ff 	mov.w	r2, #4294967295
    e13c:	4613      	mov	r3, r2
    e13e:	e7de      	b.n	e0fe <tty_getchar+0x38>

0000e140 <tty_read_unbuf>:
{
    e140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e144:	b083      	sub	sp, #12
    e146:	4681      	mov	r9, r0
    e148:	460e      	mov	r6, r1
    e14a:	4615      	mov	r5, r2
	uint32_t timeout = tty->rx_timeout;
    e14c:	6a07      	ldr	r7, [r0, #32]
	size_t out_size = 0;
    e14e:	f04f 0800 	mov.w	r8, #0
	while (size) {
    e152:	e01a      	b.n	e18a <tty_read_unbuf+0x4a>
		return -ENOSYS;
    e154:	f06f 0457 	mvn.w	r4, #87	; 0x57
			if (out_size == 0) {
    e158:	f1b8 0f00 	cmp.w	r8, #0
    e15c:	d003      	beq.n	e166 <tty_read_unbuf+0x26>
	return out_size;
    e15e:	4640      	mov	r0, r8
}
    e160:	b003      	add	sp, #12
    e162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				errno = res;
    e166:	f000 f9db 	bl	e520 <__errno>
    e16a:	6004      	str	r4, [r0, #0]
				return -1;
    e16c:	f04f 30ff 	mov.w	r0, #4294967295
    e170:	e7f6      	b.n	e160 <tty_read_unbuf+0x20>
		if (size == 0 ||
    e172:	2d00      	cmp	r5, #0
    e174:	d0f3      	beq.n	e15e <tty_read_unbuf+0x1e>
    e176:	f1b7 3fff 	cmp.w	r7, #4294967295
    e17a:	d003      	beq.n	e184 <tty_read_unbuf+0x44>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
    e17c:	1e7b      	subs	r3, r7, #1
    e17e:	2f00      	cmp	r7, #0
    e180:	d0ed      	beq.n	e15e <tty_read_unbuf+0x1e>
    e182:	461f      	mov	r7, r3
		if (res == -1) {
    e184:	f1b4 3fff 	cmp.w	r4, #4294967295
    e188:	d018      	beq.n	e1bc <tty_read_unbuf+0x7c>
	while (size) {
    e18a:	2d00      	cmp	r5, #0
    e18c:	d0e7      	beq.n	e15e <tty_read_unbuf+0x1e>
		res = uart_poll_in(tty->uart_dev, &c);
    e18e:	f8d9 0000 	ldr.w	r0, [r9]
	const struct uart_driver_api *api =
    e192:	6883      	ldr	r3, [r0, #8]
	if (api->poll_in == NULL) {
    e194:	681b      	ldr	r3, [r3, #0]
    e196:	2b00      	cmp	r3, #0
    e198:	d0dc      	beq.n	e154 <tty_read_unbuf+0x14>
	return api->poll_in(dev, p_char);
    e19a:	f10d 0107 	add.w	r1, sp, #7
    e19e:	4798      	blx	r3
    e1a0:	4604      	mov	r4, r0
		if (res <= -2) {
    e1a2:	f1b0 3fff 	cmp.w	r0, #4294967295
    e1a6:	dbd7      	blt.n	e158 <tty_read_unbuf+0x18>
		if (res == 0) {
    e1a8:	2800      	cmp	r0, #0
    e1aa:	d1e2      	bne.n	e172 <tty_read_unbuf+0x32>
			*p++ = c;
    e1ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1b0:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
    e1b4:	f108 0801 	add.w	r8, r8, #1
			size--;
    e1b8:	3d01      	subs	r5, #1
    e1ba:	e7da      	b.n	e172 <tty_read_unbuf+0x32>
	return z_impl_k_sleep(timeout);
    e1bc:	2021      	movs	r0, #33	; 0x21
    e1be:	2100      	movs	r1, #0
    e1c0:	f7fd fd44 	bl	bc4c <z_impl_k_sleep>
    e1c4:	e7e1      	b.n	e18a <tty_read_unbuf+0x4a>

0000e1c6 <tty_irq_input_hook>:
{
    e1c6:	b510      	push	{r4, lr}
	int rx_next = tty->rx_put + 1;
    e1c8:	8bc2      	ldrh	r2, [r0, #30]
    e1ca:	1c53      	adds	r3, r2, #1
	if (rx_next >= tty->rx_ringbuf_sz) {
    e1cc:	6984      	ldr	r4, [r0, #24]
    e1ce:	429c      	cmp	r4, r3
    e1d0:	d800      	bhi.n	e1d4 <tty_irq_input_hook+0xe>
		rx_next = 0;
    e1d2:	2300      	movs	r3, #0
	if (rx_next == tty->rx_get) {
    e1d4:	8b84      	ldrh	r4, [r0, #28]
    e1d6:	429c      	cmp	r4, r3
    e1d8:	d007      	beq.n	e1ea <tty_irq_input_hook+0x24>
	tty->rx_ringbuf[tty->rx_put] = c;
    e1da:	6944      	ldr	r4, [r0, #20]
    e1dc:	54a1      	strb	r1, [r4, r2]
	tty->rx_put = rx_next;
    e1de:	83c3      	strh	r3, [r0, #30]
	k_sem_give(&tty->rx_sem);
    e1e0:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    e1e2:	f7fd f953 	bl	b48c <z_impl_k_sem_give>
}
    e1e6:	2001      	movs	r0, #1
    e1e8:	bd10      	pop	{r4, pc}
		tty_putchar(tty, '~');
    e1ea:	217e      	movs	r1, #126	; 0x7e
    e1ec:	f7ff ff12 	bl	e014 <tty_putchar>
		return 1;
    e1f0:	e7f9      	b.n	e1e6 <tty_irq_input_hook+0x20>

0000e1f2 <tty_uart_isr>:
{
    e1f2:	b530      	push	{r4, r5, lr}
    e1f4:	b083      	sub	sp, #12
    e1f6:	4604      	mov	r4, r0
    e1f8:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
    e1fa:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
    e1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e1fe:	b103      	cbz	r3, e202 <tty_uart_isr+0x10>
	return api->irq_update(dev);
    e200:	4798      	blx	r3
	const struct uart_driver_api *api =
    e202:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
    e204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e206:	b143      	cbz	r3, e21a <tty_uart_isr+0x28>
	return api->irq_rx_ready(dev);
    e208:	4620      	mov	r0, r4
    e20a:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    e20c:	b180      	cbz	r0, e230 <tty_uart_isr+0x3e>
    e20e:	e004      	b.n	e21a <tty_uart_isr+0x28>
			tty_irq_input_hook(tty, c);
    e210:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e214:	4628      	mov	r0, r5
    e216:	f7ff ffd6 	bl	e1c6 <tty_irq_input_hook>
	const struct uart_driver_api *api =
    e21a:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
    e21c:	699b      	ldr	r3, [r3, #24]
    e21e:	2b00      	cmp	r3, #0
    e220:	d0f6      	beq.n	e210 <tty_uart_isr+0x1e>
	return api->fifo_read(dev, rx_data, size);
    e222:	2201      	movs	r2, #1
    e224:	f10d 0107 	add.w	r1, sp, #7
    e228:	4620      	mov	r0, r4
    e22a:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
    e22c:	2800      	cmp	r0, #0
    e22e:	d1ef      	bne.n	e210 <tty_uart_isr+0x1e>
	const struct uart_driver_api *api =
    e230:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
    e232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e234:	b113      	cbz	r3, e23c <tty_uart_isr+0x4a>
	return api->irq_tx_ready(dev);
    e236:	4620      	mov	r0, r4
    e238:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    e23a:	b1b8      	cbz	r0, e26c <tty_uart_isr+0x7a>
		if (tty->tx_get == tty->tx_put) {
    e23c:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
    e23e:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
    e240:	4299      	cmp	r1, r3
    e242:	d015      	beq.n	e270 <tty_uart_isr+0x7e>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
    e244:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e246:	1c4a      	adds	r2, r1, #1
    e248:	87aa      	strh	r2, [r5, #60]	; 0x3c
    e24a:	4419      	add	r1, r3
	const struct uart_driver_api *api =
    e24c:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
    e24e:	695b      	ldr	r3, [r3, #20]
    e250:	b113      	cbz	r3, e258 <tty_uart_isr+0x66>
	return api->fifo_fill(dev, tx_data, size);
    e252:	2201      	movs	r2, #1
    e254:	4620      	mov	r0, r4
    e256:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
    e258:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
    e25a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e25c:	429a      	cmp	r2, r3
    e25e:	d301      	bcc.n	e264 <tty_uart_isr+0x72>
				tty->tx_get = 0U;
    e260:	2300      	movs	r3, #0
    e262:	87ab      	strh	r3, [r5, #60]	; 0x3c
			k_sem_give(&tty->tx_sem);
    e264:	f105 0024 	add.w	r0, r5, #36	; 0x24
    e268:	f7fd f910 	bl	b48c <z_impl_k_sem_give>
}
    e26c:	b003      	add	sp, #12
    e26e:	bd30      	pop	{r4, r5, pc}
	const struct uart_driver_api *api =
    e270:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
    e272:	6a1b      	ldr	r3, [r3, #32]
    e274:	2b00      	cmp	r3, #0
    e276:	d0f9      	beq.n	e26c <tty_uart_isr+0x7a>
		api->irq_tx_disable(dev);
    e278:	4620      	mov	r0, r4
    e27a:	4798      	blx	r3
    e27c:	e7f6      	b.n	e26c <tty_uart_isr+0x7a>

0000e27e <tty_read>:
{
    e27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e282:	4607      	mov	r7, r0
    e284:	460d      	mov	r5, r1
	if (tty->rx_ringbuf_sz == 0U) {
    e286:	6983      	ldr	r3, [r0, #24]
    e288:	b17b      	cbz	r3, e2aa <tty_read+0x2c>
	size_t out_size = 0;
    e28a:	2600      	movs	r6, #0
	while (size--) {
    e28c:	f102 38ff 	add.w	r8, r2, #4294967295
    e290:	b1ba      	cbz	r2, e2c2 <tty_read+0x44>
		res = tty_getchar(tty);
    e292:	4638      	mov	r0, r7
    e294:	f7ff ff17 	bl	e0c6 <tty_getchar>
		if (res < 0) {
    e298:	1e04      	subs	r4, r0, #0
    e29a:	db0a      	blt.n	e2b2 <tty_read+0x34>
		*p++ = (uint8_t)res;
    e29c:	4629      	mov	r1, r5
    e29e:	f801 4b01 	strb.w	r4, [r1], #1
		out_size++;
    e2a2:	3601      	adds	r6, #1
		*p++ = (uint8_t)res;
    e2a4:	460d      	mov	r5, r1
	while (size--) {
    e2a6:	4642      	mov	r2, r8
    e2a8:	e7f0      	b.n	e28c <tty_read+0xe>
		return tty_read_unbuf(tty, buf, size);
    e2aa:	f7ff ff49 	bl	e140 <tty_read_unbuf>
    e2ae:	4604      	mov	r4, r0
    e2b0:	e008      	b.n	e2c4 <tty_read+0x46>
			if (out_size == 0) {
    e2b2:	b10e      	cbz	r6, e2b8 <tty_read+0x3a>
			return out_size;
    e2b4:	4634      	mov	r4, r6
    e2b6:	e005      	b.n	e2c4 <tty_read+0x46>
				errno = -res;
    e2b8:	f000 f932 	bl	e520 <__errno>
    e2bc:	4263      	negs	r3, r4
    e2be:	6003      	str	r3, [r0, #0]
				return res;
    e2c0:	e000      	b.n	e2c4 <tty_read+0x46>
	return out_size;
    e2c2:	4634      	mov	r4, r6
}
    e2c4:	4620      	mov	r0, r4
    e2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e2ca <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
    e2ca:	b570      	push	{r4, r5, r6, lr}
    e2cc:	4604      	mov	r4, r0
    e2ce:	460e      	mov	r6, r1
    e2d0:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
    e2d2:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
    e2d4:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
    e2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e2d8:	b103      	cbz	r3, e2dc <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
    e2da:	4798      	blx	r3

	tty->rx_ringbuf = buf;
    e2dc:	6166      	str	r6, [r4, #20]
	tty->rx_ringbuf_sz = size;
    e2de:	61a5      	str	r5, [r4, #24]

	if (size > 0) {
    e2e0:	b90d      	cbnz	r5, e2e6 <tty_set_rx_buf+0x1c>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
	}

	return 0;
}
    e2e2:	2000      	movs	r0, #0
    e2e4:	bd70      	pop	{r4, r5, r6, pc}
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
    e2e6:	1d20      	adds	r0, r4, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    e2e8:	f04f 32ff 	mov.w	r2, #4294967295
    e2ec:	2100      	movs	r1, #0
    e2ee:	f001 fd06 	bl	fcfe <z_impl_k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
    e2f2:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
    e2f4:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
    e2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	d0f2      	beq.n	e2e2 <tty_set_rx_buf+0x18>
		api->irq_rx_enable(dev);
    e2fc:	4798      	blx	r3
    e2fe:	e7f0      	b.n	e2e2 <tty_set_rx_buf+0x18>

0000e300 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
    e300:	b570      	push	{r4, r5, r6, lr}
    e302:	4604      	mov	r4, r0
    e304:	460e      	mov	r6, r1
    e306:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
    e308:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
    e30a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
    e30c:	6a1b      	ldr	r3, [r3, #32]
    e30e:	b103      	cbz	r3, e312 <tty_set_tx_buf+0x12>
		api->irq_tx_disable(dev);
    e310:	4798      	blx	r3

	tty->tx_ringbuf = buf;
    e312:	6366      	str	r6, [r4, #52]	; 0x34
	tty->tx_ringbuf_sz = size;
    e314:	63a5      	str	r5, [r4, #56]	; 0x38

	k_sem_init(&tty->tx_sem, size - 1, K_SEM_MAX_LIMIT);
    e316:	f104 0024 	add.w	r0, r4, #36	; 0x24
    e31a:	1e69      	subs	r1, r5, #1
    e31c:	f04f 32ff 	mov.w	r2, #4294967295
    e320:	f001 fced 	bl	fcfe <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
    e324:	2000      	movs	r0, #0
    e326:	bd70      	pop	{r4, r5, r6, pc}

0000e328 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    e328:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
    e32a:	f7f5 facf 	bl	38cc <__do_global_ctors_aux>
	__do_init_array_aux();
    e32e:	f7f5 fabf 	bl	38b0 <__do_init_array_aux>
}
    e332:	bd08      	pop	{r3, pc}

0000e334 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
    e334:	2000      	movs	r0, #0
    e336:	4770      	bx	lr

0000e338 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    e338:	2200      	movs	r2, #0
    e33a:	6002      	str	r2, [r0, #0]
    e33c:	6042      	str	r2, [r0, #4]
    e33e:	6082      	str	r2, [r0, #8]
}
    e340:	4770      	bx	lr

0000e342 <abort_function>:
{
    e342:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    e344:	2000      	movs	r0, #0
    e346:	f7f5 fa3b 	bl	37c0 <sys_reboot>

0000e34a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    e34a:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    e34c:	f001 fc15 	bl	fb7a <z_fatal_error>
}
    e350:	bd08      	pop	{r3, pc}

0000e352 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    e352:	b508      	push	{r3, lr}
    e354:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    e356:	6800      	ldr	r0, [r0, #0]
    e358:	f7ff fff7 	bl	e34a <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    e35c:	bd08      	pop	{r3, pc}

0000e35e <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    e35e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    e360:	2100      	movs	r1, #0
    e362:	2001      	movs	r0, #1
    e364:	f7ff fff1 	bl	e34a <z_arm_fatal_error>
}
    e368:	bd08      	pop	{r3, pc}

0000e36a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    e36a:	b508      	push	{r3, lr}
	handler();
    e36c:	f7f5 fc8a 	bl	3c84 <z_SysNmiOnReset>
	z_arm_int_exit();
    e370:	f7f5 fd86 	bl	3e80 <z_arm_exc_exit>
}
    e374:	bd08      	pop	{r3, pc}

0000e376 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
    e376:	b508      	push	{r3, lr}
    e378:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
    e37a:	4601      	mov	r1, r0
    e37c:	4618      	mov	r0, r3
    e37e:	f7ff ffd9 	bl	e334 <__cxa_atexit>
}
    e382:	bd08      	pop	{r3, pc}

0000e384 <memory_fault_recoverable>:
}
    e384:	2000      	movs	r0, #0
    e386:	4770      	bx	lr

0000e388 <debug_monitor>:
	*recoverable = false;
    e388:	2300      	movs	r3, #0
    e38a:	700b      	strb	r3, [r1, #0]
}
    e38c:	4770      	bx	lr

0000e38e <fault_handle>:
{
    e38e:	b508      	push	{r3, lr}
	*recoverable = false;
    e390:	2300      	movs	r3, #0
    e392:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    e394:	1ecb      	subs	r3, r1, #3
    e396:	2b09      	cmp	r3, #9
    e398:	d81a      	bhi.n	e3d0 <fault_handle+0x42>
    e39a:	e8df f003 	tbb	[pc, r3]
    e39e:	0905      	.short	0x0905
    e3a0:	1919110d 	.word	0x1919110d
    e3a4:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    e3a8:	4611      	mov	r1, r2
    e3aa:	f7f5 fdf9 	bl	3fa0 <hard_fault>
		break;
    e3ae:	e010      	b.n	e3d2 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    e3b0:	2100      	movs	r1, #0
    e3b2:	f7f5 fdaf 	bl	3f14 <mem_manage_fault>
		break;
    e3b6:	e00c      	b.n	e3d2 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    e3b8:	2100      	movs	r1, #0
    e3ba:	f7f5 fd6f 	bl	3e9c <bus_fault>
		break;
    e3be:	e008      	b.n	e3d2 <fault_handle+0x44>
		reason = usage_fault(esf);
    e3c0:	f7f5 fd96 	bl	3ef0 <usage_fault>
		break;
    e3c4:	e005      	b.n	e3d2 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    e3c6:	4611      	mov	r1, r2
    e3c8:	f7ff ffde 	bl	e388 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e3cc:	2000      	movs	r0, #0
		break;
    e3ce:	e000      	b.n	e3d2 <fault_handle+0x44>
	*recoverable = false;
    e3d0:	2000      	movs	r0, #0
}
    e3d2:	bd08      	pop	{r3, pc}

0000e3d4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    e3d4:	6843      	ldr	r3, [r0, #4]
    e3d6:	1e5a      	subs	r2, r3, #1
		&&
    e3d8:	4213      	tst	r3, r2
    e3da:	d106      	bne.n	e3ea <mpu_partition_is_valid+0x16>
		&&
    e3dc:	2b1f      	cmp	r3, #31
    e3de:	d906      	bls.n	e3ee <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    e3e0:	6803      	ldr	r3, [r0, #0]
		&&
    e3e2:	421a      	tst	r2, r3
    e3e4:	d005      	beq.n	e3f2 <mpu_partition_is_valid+0x1e>
    e3e6:	2000      	movs	r0, #0
    e3e8:	4770      	bx	lr
    e3ea:	2000      	movs	r0, #0
    e3ec:	4770      	bx	lr
    e3ee:	2000      	movs	r0, #0
    e3f0:	4770      	bx	lr
    e3f2:	2001      	movs	r0, #1
}
    e3f4:	4770      	bx	lr

0000e3f6 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    e3f6:	2807      	cmp	r0, #7
    e3f8:	d805      	bhi.n	e406 <region_allocate_and_init+0x10>
{
    e3fa:	b510      	push	{r4, lr}
    e3fc:	4604      	mov	r4, r0
	region_init(index, region_conf);
    e3fe:	f7f5 ff27 	bl	4250 <region_init>
	return index;
    e402:	4620      	mov	r0, r4
}
    e404:	bd10      	pop	{r4, pc}
		return -EINVAL;
    e406:	f06f 0015 	mvn.w	r0, #21
}
    e40a:	4770      	bx	lr

0000e40c <mpu_configure_region>:
{
    e40c:	b500      	push	{lr}
    e40e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    e410:	680b      	ldr	r3, [r1, #0]
    e412:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e414:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    e416:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    e418:	2b20      	cmp	r3, #32
    e41a:	d912      	bls.n	e442 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    e41c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    e420:	d811      	bhi.n	e446 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    e422:	3b01      	subs	r3, #1
    e424:	fab3 f383 	clz	r3, r3
    e428:	f1c3 031f 	rsb	r3, r3, #31
    e42c:	005b      	lsls	r3, r3, #1
    e42e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    e432:	4313      	orrs	r3, r2
    e434:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    e436:	a901      	add	r1, sp, #4
    e438:	f7ff ffdd 	bl	e3f6 <region_allocate_and_init>
}
    e43c:	b005      	add	sp, #20
    e43e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    e442:	2308      	movs	r3, #8
    e444:	e7f5      	b.n	e432 <mpu_configure_region+0x26>
		return REGION_4G;
    e446:	233e      	movs	r3, #62	; 0x3e
    e448:	e7f3      	b.n	e432 <mpu_configure_region+0x26>

0000e44a <mpu_configure_regions>:
{
    e44a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e44e:	4680      	mov	r8, r0
    e450:	460f      	mov	r7, r1
    e452:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    e454:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    e456:	2500      	movs	r5, #0
    e458:	e009      	b.n	e46e <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    e45a:	4621      	mov	r1, r4
    e45c:	b2f0      	uxtb	r0, r6
    e45e:	f7ff ffd5 	bl	e40c <mpu_configure_region>
    e462:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    e464:	f110 0f16 	cmn.w	r0, #22
    e468:	d014      	beq.n	e494 <mpu_configure_regions+0x4a>
		reg_index++;
    e46a:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    e46c:	3501      	adds	r5, #1
    e46e:	42bd      	cmp	r5, r7
    e470:	da10      	bge.n	e494 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    e472:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    e476:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    e47a:	6862      	ldr	r2, [r4, #4]
    e47c:	2a00      	cmp	r2, #0
    e47e:	d0f5      	beq.n	e46c <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    e480:	f1b9 0f00 	cmp.w	r9, #0
    e484:	d0e9      	beq.n	e45a <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    e486:	4620      	mov	r0, r4
    e488:	f7ff ffa4 	bl	e3d4 <mpu_partition_is_valid>
		if (do_sanity_check &&
    e48c:	2800      	cmp	r0, #0
    e48e:	d1e4      	bne.n	e45a <mpu_configure_regions+0x10>
			return -EINVAL;
    e490:	f06f 0615 	mvn.w	r6, #21
}
    e494:	4630      	mov	r0, r6
    e496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e49a <arm_core_mpu_configure_static_mpu_regions>:
{
    e49a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e49c:	f7f5 fee8 	bl	4270 <mpu_configure_static_mpu_regions>
}
    e4a0:	bd08      	pop	{r3, pc}

0000e4a2 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e4a2:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    e4a4:	f7f5 feee 	bl	4284 <mpu_configure_dynamic_mpu_regions>
}
    e4a8:	bd08      	pop	{r3, pc}

0000e4aa <malloc_prepare>:
}
    e4aa:	2000      	movs	r0, #0
    e4ac:	4770      	bx	lr

0000e4ae <_stdout_hook_default>:
}
    e4ae:	f04f 30ff 	mov.w	r0, #4294967295
    e4b2:	4770      	bx	lr

0000e4b4 <_stdin_hook_default>:
}
    e4b4:	2000      	movs	r0, #0
    e4b6:	4770      	bx	lr

0000e4b8 <_read>:
{
    e4b8:	b508      	push	{r3, lr}
    e4ba:	4608      	mov	r0, r1
    e4bc:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    e4be:	f7f5 ff33 	bl	4328 <z_impl_zephyr_read_stdin>
}
    e4c2:	bd08      	pop	{r3, pc}

0000e4c4 <_write>:
{
    e4c4:	b508      	push	{r3, lr}
    e4c6:	4608      	mov	r0, r1
    e4c8:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    e4ca:	f7f5 ff43 	bl	4354 <z_impl_zephyr_write_stdout>
}
    e4ce:	bd08      	pop	{r3, pc}

0000e4d0 <_close>:
}
    e4d0:	f04f 30ff 	mov.w	r0, #4294967295
    e4d4:	4770      	bx	lr

0000e4d6 <_lseek>:
}
    e4d6:	2000      	movs	r0, #0
    e4d8:	4770      	bx	lr

0000e4da <_isatty>:
}
    e4da:	2802      	cmp	r0, #2
    e4dc:	bfcc      	ite	gt
    e4de:	2000      	movgt	r0, #0
    e4e0:	2001      	movle	r0, #1
    e4e2:	4770      	bx	lr

0000e4e4 <_kill>:
}
    e4e4:	2000      	movs	r0, #0
    e4e6:	4770      	bx	lr

0000e4e8 <_getpid>:
}
    e4e8:	2000      	movs	r0, #0
    e4ea:	4770      	bx	lr

0000e4ec <_fstat>:
	st->st_mode = S_IFCHR;
    e4ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e4f0:	604b      	str	r3, [r1, #4]
}
    e4f2:	2000      	movs	r0, #0
    e4f4:	4770      	bx	lr

0000e4f6 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    e4f6:	b510      	push	{r4, lr}
    e4f8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    e4fa:	2014      	movs	r0, #20
    e4fc:	f7fe f86c 	bl	c5d8 <malloc>
    e500:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    e502:	f001 fbf5 	bl	fcf0 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    e506:	bd10      	pop	{r4, pc}

0000e508 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    e508:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    e50a:	f04f 32ff 	mov.w	r2, #4294967295
    e50e:	f04f 33ff 	mov.w	r3, #4294967295
    e512:	f7fc feed 	bl	b2f0 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    e516:	bd08      	pop	{r3, pc}

0000e518 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    e518:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    e51a:	f7fc ff73 	bl	b404 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
    e51e:	bd08      	pop	{r3, pc}

0000e520 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
    e520:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    e522:	f7fc fcaf 	bl	ae84 <z_impl_z_errno>
	return z_errno();
}
    e526:	bd08      	pop	{r3, pc}

0000e528 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    e528:	f04f 0220 	mov.w	r2, #32
    e52c:	f3ef 8311 	mrs	r3, BASEPRI
    e530:	f382 8812 	msr	BASEPRI_MAX, r2
    e534:	f3bf 8f6f 	isb	sy
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    e538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    e53c:	2101      	movs	r1, #1
    e53e:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
	__asm__ volatile(
    e542:	f383 8811 	msr	BASEPRI, r3
    e546:	f3bf 8f6f 	isb	sy
}
    e54a:	2000      	movs	r0, #0
    e54c:	4770      	bx	lr

0000e54e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    e54e:	b084      	sub	sp, #16
    e550:	ab04      	add	r3, sp, #16
    e552:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    e556:	f89d 3004 	ldrb.w	r3, [sp, #4]
    e55a:	2b06      	cmp	r3, #6
    e55c:	d001      	beq.n	e562 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    e55e:	b004      	add	sp, #16
    e560:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    e562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e566:	2201      	movs	r2, #1
    e568:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    e56c:	f3bf 8f4f 	dsb	sy
        __WFE();
    e570:	bf20      	wfe
    while (true)
    e572:	e7fd      	b.n	e570 <pm_power_state_set+0x22>

0000e574 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    e574:	b084      	sub	sp, #16
    e576:	ab04      	add	r3, sp, #16
    e578:	e903 0007 	stmdb	r3, {r0, r1, r2}
    e57c:	2300      	movs	r3, #0
    e57e:	f383 8811 	msr	BASEPRI, r3
    e582:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    e586:	b004      	add	sp, #16
    e588:	4770      	bx	lr

0000e58a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    e58a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    e58c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e590:	0089      	lsls	r1, r1, #2
    e592:	3140      	adds	r1, #64	; 0x40
}
    e594:	4408      	add	r0, r1
    e596:	4770      	bx	lr

0000e598 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    e598:	6840      	ldr	r0, [r0, #4]
}
    e59a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    e59e:	4770      	bx	lr

0000e5a0 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    e5a0:	6900      	ldr	r0, [r0, #16]
}
    e5a2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    e5a6:	4770      	bx	lr

0000e5a8 <get_status>:
{
    e5a8:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e5aa:	b2c9      	uxtb	r1, r1
    e5ac:	f7ff ffed 	bl	e58a <get_sub_data>
    e5b0:	6880      	ldr	r0, [r0, #8]
}
    e5b2:	f000 0007 	and.w	r0, r0, #7
    e5b6:	bd08      	pop	{r3, pc}

0000e5b8 <set_off_state>:
	__asm__ volatile(
    e5b8:	f04f 0320 	mov.w	r3, #32
    e5bc:	f3ef 8211 	mrs	r2, BASEPRI
    e5c0:	f383 8812 	msr	BASEPRI_MAX, r3
    e5c4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e5c8:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e5ca:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    e5ce:	d001      	beq.n	e5d4 <set_off_state+0x1c>
    e5d0:	428b      	cmp	r3, r1
    e5d2:	d107      	bne.n	e5e4 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e5d4:	2301      	movs	r3, #1
    e5d6:	6003      	str	r3, [r0, #0]
	int err = 0;
    e5d8:	2000      	movs	r0, #0
	__asm__ volatile(
    e5da:	f382 8811 	msr	BASEPRI, r2
    e5de:	f3bf 8f6f 	isb	sy
}
    e5e2:	4770      	bx	lr
		err = -EPERM;
    e5e4:	f04f 30ff 	mov.w	r0, #4294967295
    e5e8:	e7f7      	b.n	e5da <set_off_state+0x22>

0000e5ea <set_starting_state>:
{
    e5ea:	b410      	push	{r4}
	__asm__ volatile(
    e5ec:	f04f 0320 	mov.w	r3, #32
    e5f0:	f3ef 8211 	mrs	r2, BASEPRI
    e5f4:	f383 8812 	msr	BASEPRI_MAX, r3
    e5f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e5fc:	6803      	ldr	r3, [r0, #0]
    e5fe:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    e602:	f003 0307 	and.w	r3, r3, #7
    e606:	2b01      	cmp	r3, #1
    e608:	d009      	beq.n	e61e <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    e60a:	428c      	cmp	r4, r1
    e60c:	d00a      	beq.n	e624 <set_starting_state+0x3a>
		err = -EPERM;
    e60e:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    e612:	f382 8811 	msr	BASEPRI, r2
    e616:	f3bf 8f6f 	isb	sy
}
    e61a:	bc10      	pop	{r4}
    e61c:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    e61e:	6001      	str	r1, [r0, #0]
	int err = 0;
    e620:	2000      	movs	r0, #0
    e622:	e7f6      	b.n	e612 <set_starting_state+0x28>
		err = -EALREADY;
    e624:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e628:	e7f3      	b.n	e612 <set_starting_state+0x28>

0000e62a <set_on_state>:
	__asm__ volatile(
    e62a:	f04f 0320 	mov.w	r3, #32
    e62e:	f3ef 8211 	mrs	r2, BASEPRI
    e632:	f383 8812 	msr	BASEPRI_MAX, r3
    e636:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    e63a:	6803      	ldr	r3, [r0, #0]
    e63c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e640:	f043 0302 	orr.w	r3, r3, #2
    e644:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    e646:	f382 8811 	msr	BASEPRI, r2
    e64a:	f3bf 8f6f 	isb	sy
}
    e64e:	4770      	bx	lr

0000e650 <clkstarted_handle>:
{
    e650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e652:	4606      	mov	r6, r0
    e654:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    e656:	f7ff ff98 	bl	e58a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    e65a:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    e65c:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    e65e:	2300      	movs	r3, #0
    e660:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    e664:	f7ff ffe1 	bl	e62a <set_on_state>
	if (callback) {
    e668:	b11d      	cbz	r5, e672 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e66a:	463a      	mov	r2, r7
    e66c:	4621      	mov	r1, r4
    e66e:	4630      	mov	r0, r6
    e670:	47a8      	blx	r5
}
    e672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e674 <stop>:
{
    e674:	b570      	push	{r4, r5, r6, lr}
    e676:	4606      	mov	r6, r0
    e678:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    e67a:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e67c:	4621      	mov	r1, r4
    e67e:	f7ff ff84 	bl	e58a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    e682:	4629      	mov	r1, r5
    e684:	3008      	adds	r0, #8
    e686:	f7ff ff97 	bl	e5b8 <set_off_state>
	if (err < 0) {
    e68a:	2800      	cmp	r0, #0
    e68c:	db06      	blt.n	e69c <stop+0x28>
	get_sub_config(dev, type)->stop();
    e68e:	4621      	mov	r1, r4
    e690:	4630      	mov	r0, r6
    e692:	f7ff ff81 	bl	e598 <get_sub_config>
    e696:	6843      	ldr	r3, [r0, #4]
    e698:	4798      	blx	r3
	return 0;
    e69a:	2000      	movs	r0, #0
}
    e69c:	bd70      	pop	{r4, r5, r6, pc}

0000e69e <api_stop>:
{
    e69e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    e6a0:	2280      	movs	r2, #128	; 0x80
    e6a2:	f7ff ffe7 	bl	e674 <stop>
}
    e6a6:	bd08      	pop	{r3, pc}

0000e6a8 <async_start>:
{
    e6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6ac:	4606      	mov	r6, r0
    e6ae:	4690      	mov	r8, r2
    e6b0:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    e6b2:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e6b4:	4629      	mov	r1, r5
    e6b6:	f7ff ff68 	bl	e58a <get_sub_data>
    e6ba:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    e6bc:	9906      	ldr	r1, [sp, #24]
    e6be:	3008      	adds	r0, #8
    e6c0:	f7ff ff93 	bl	e5ea <set_starting_state>
	if (err < 0) {
    e6c4:	2800      	cmp	r0, #0
    e6c6:	db09      	blt.n	e6dc <async_start+0x34>
	subdata->cb = cb;
    e6c8:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    e6cc:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    e6ce:	4629      	mov	r1, r5
    e6d0:	4630      	mov	r0, r6
    e6d2:	f7ff ff61 	bl	e598 <get_sub_config>
    e6d6:	6803      	ldr	r3, [r0, #0]
    e6d8:	4798      	blx	r3
	return 0;
    e6da:	2000      	movs	r0, #0
}
    e6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e6e0 <api_start>:
{
    e6e0:	b510      	push	{r4, lr}
    e6e2:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    e6e4:	2480      	movs	r4, #128	; 0x80
    e6e6:	9400      	str	r4, [sp, #0]
    e6e8:	f7ff ffde 	bl	e6a8 <async_start>
}
    e6ec:	b002      	add	sp, #8
    e6ee:	bd10      	pop	{r4, pc}

0000e6f0 <onoff_started_callback>:
{
    e6f0:	b510      	push	{r4, lr}
    e6f2:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    e6f4:	b2c9      	uxtb	r1, r1
    e6f6:	f7ff ff53 	bl	e5a0 <get_onoff_manager>
	notify(mgr, 0);
    e6fa:	2100      	movs	r1, #0
    e6fc:	47a0      	blx	r4
}
    e6fe:	bd10      	pop	{r4, pc}

0000e700 <hfclk_start>:
{
    e700:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    e702:	2001      	movs	r0, #1
    e704:	f7f7 f8c2 	bl	588c <nrfx_clock_start>
}
    e708:	bd08      	pop	{r3, pc}

0000e70a <lfclk_start>:
{
    e70a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    e70c:	2000      	movs	r0, #0
    e70e:	f7f7 f8bd 	bl	588c <nrfx_clock_start>
}
    e712:	bd08      	pop	{r3, pc}

0000e714 <hfclk_stop>:
{
    e714:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    e716:	2001      	movs	r0, #1
    e718:	f7f7 f8f0 	bl	58fc <nrfx_clock_stop>
}
    e71c:	bd08      	pop	{r3, pc}

0000e71e <lfclk_stop>:
{
    e71e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    e720:	2000      	movs	r0, #0
    e722:	f7f7 f8eb 	bl	58fc <nrfx_clock_stop>
}
    e726:	bd08      	pop	{r3, pc}

0000e728 <blocking_start_callback>:
{
    e728:	b508      	push	{r3, lr}
    e72a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    e72c:	f7fc feae 	bl	b48c <z_impl_k_sem_give>
}
    e730:	bd08      	pop	{r3, pc}

0000e732 <debug_hook_out_nop>:
}
    e732:	2000      	movs	r0, #0
    e734:	4770      	bx	lr

0000e736 <gpio_nrfx_port_get_raw>:
	return port->config;
    e736:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e738:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    e73a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    e73e:	600b      	str	r3, [r1, #0]
}
    e740:	2000      	movs	r0, #0
    e742:	4770      	bx	lr

0000e744 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    e744:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e746:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    e748:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    e74c:	4042      	eors	r2, r0
    e74e:	400a      	ands	r2, r1
    e750:	4042      	eors	r2, r0
    p_reg->OUT = value;
    e752:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    e756:	2000      	movs	r0, #0
    e758:	4770      	bx	lr

0000e75a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    e75a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e75c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    e75e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    e762:	2000      	movs	r0, #0
    e764:	4770      	bx	lr

0000e766 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    e766:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e768:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    e76a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    e76e:	2000      	movs	r0, #0
    e770:	4770      	bx	lr

0000e772 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    e772:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e774:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    e776:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    e77a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    e77c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    e780:	2000      	movs	r0, #0
    e782:	4770      	bx	lr

0000e784 <gpio_nrfx_manage_callback>:
{
    e784:	b470      	push	{r4, r5, r6}
	return port->data;
    e786:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e788:	1d05      	adds	r5, r0, #4
	return list->head;
    e78a:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
    e78c:	b1db      	cbz	r3, e7c6 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    e78e:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e790:	2400      	movs	r4, #0
    e792:	e00a      	b.n	e7aa <gpio_nrfx_manage_callback+0x26>
	return node->next;
    e794:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    e796:	6043      	str	r3, [r0, #4]
	return list->tail;
    e798:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    e79a:	42a1      	cmp	r1, r4
    e79c:	d10f      	bne.n	e7be <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    e79e:	606b      	str	r3, [r5, #4]
}
    e7a0:	e00d      	b.n	e7be <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    e7a2:	606c      	str	r4, [r5, #4]
}
    e7a4:	e00b      	b.n	e7be <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e7a6:	461c      	mov	r4, r3
    e7a8:	681b      	ldr	r3, [r3, #0]
    e7aa:	b15b      	cbz	r3, e7c4 <gpio_nrfx_manage_callback+0x40>
    e7ac:	429e      	cmp	r6, r3
    e7ae:	d1fa      	bne.n	e7a6 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    e7b0:	2c00      	cmp	r4, #0
    e7b2:	d0ef      	beq.n	e794 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    e7b4:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    e7b6:	6023      	str	r3, [r4, #0]
	return list->tail;
    e7b8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    e7ba:	4299      	cmp	r1, r3
    e7bc:	d0f1      	beq.n	e7a2 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    e7be:	2300      	movs	r3, #0
    e7c0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e7c2:	e000      	b.n	e7c6 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    e7c4:	b152      	cbz	r2, e7dc <gpio_nrfx_manage_callback+0x58>
	if (set) {
    e7c6:	b162      	cbz	r2, e7e2 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    e7c8:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    e7ca:	600b      	str	r3, [r1, #0]
	list->head = node;
    e7cc:	6041      	str	r1, [r0, #4]
	return list->tail;
    e7ce:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    e7d0:	b10b      	cbz	r3, e7d6 <gpio_nrfx_manage_callback+0x52>
	return 0;
    e7d2:	2000      	movs	r0, #0
    e7d4:	e006      	b.n	e7e4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    e7d6:	6069      	str	r1, [r5, #4]
    e7d8:	2000      	movs	r0, #0
}
    e7da:	e003      	b.n	e7e4 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    e7dc:	f06f 0015 	mvn.w	r0, #21
    e7e0:	e000      	b.n	e7e4 <gpio_nrfx_manage_callback+0x60>
	return 0;
    e7e2:	2000      	movs	r0, #0
}
    e7e4:	bc70      	pop	{r4, r5, r6}
    e7e6:	4770      	bx	lr

0000e7e8 <endtx_isr>:
	return dev->config;
    e7e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e7ea:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    e7ec:	f04f 0120 	mov.w	r1, #32
    e7f0:	f3ef 8211 	mrs	r2, BASEPRI
    e7f4:	f381 8812 	msr	BASEPRI_MAX, r1
    e7f8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e7fc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    e800:	b131      	cbz	r1, e810 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e802:	2100      	movs	r1, #0
    e804:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    e808:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e80c:	2101      	movs	r1, #1
    e80e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    e810:	f382 8811 	msr	BASEPRI, r2
    e814:	f3bf 8f6f 	isb	sy
}
    e818:	4770      	bx	lr

0000e81a <uarte_nrfx_isr_int>:
{
    e81a:	b538      	push	{r3, r4, r5, lr}
    e81c:	4604      	mov	r4, r0
	return dev->config;
    e81e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e820:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    e822:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    e826:	f413 7f80 	tst.w	r3, #256	; 0x100
    e82a:	d003      	beq.n	e834 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e82c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    e830:	2b00      	cmp	r3, #0
    e832:	d139      	bne.n	e8a8 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
    e834:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e836:	685b      	ldr	r3, [r3, #4]
    e838:	f013 0f10 	tst.w	r3, #16
    e83c:	d01a      	beq.n	e874 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
    e83e:	f04f 0320 	mov.w	r3, #32
    e842:	f3ef 8211 	mrs	r2, BASEPRI
    e846:	f383 8812 	msr	BASEPRI_MAX, r3
    e84a:	f3bf 8f6f 	isb	sy
    e84e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e852:	b113      	cbz	r3, e85a <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e854:	2300      	movs	r3, #0
    e856:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
    e85a:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    e85c:	68db      	ldr	r3, [r3, #12]
    e85e:	b10b      	cbz	r3, e864 <uarte_nrfx_isr_int+0x4a>
    e860:	691b      	ldr	r3, [r3, #16]
    e862:	b91b      	cbnz	r3, e86c <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
    e864:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    e868:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
    e86c:	f382 8811 	msr	BASEPRI, r2
    e870:	f3bf 8f6f 	isb	sy
	return dev->data;
    e874:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    e876:	68da      	ldr	r2, [r3, #12]
    e878:	b1aa      	cbz	r2, e8a6 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e87a:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e87e:	b121      	cbz	r1, e88a <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
    e880:	2100      	movs	r1, #0
    e882:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    e884:	68da      	ldr	r2, [r3, #12]
    e886:	7b92      	ldrb	r2, [r2, #14]
    e888:	b98a      	cbnz	r2, e8ae <uarte_nrfx_isr_int+0x94>
    e88a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    e88e:	b122      	cbz	r2, e89a <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e890:	2200      	movs	r2, #0
    e892:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    e896:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    e89a:	68da      	ldr	r2, [r3, #12]
    e89c:	6813      	ldr	r3, [r2, #0]
    e89e:	b113      	cbz	r3, e8a6 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    e8a0:	6851      	ldr	r1, [r2, #4]
    e8a2:	4620      	mov	r0, r4
    e8a4:	4798      	blx	r3
}
    e8a6:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    e8a8:	f7ff ff9e 	bl	e7e8 <endtx_isr>
    e8ac:	e7c2      	b.n	e834 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    e8ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    e8b2:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    e8b6:	68db      	ldr	r3, [r3, #12]
    e8b8:	7399      	strb	r1, [r3, #14]
			return;
    e8ba:	e7f4      	b.n	e8a6 <uarte_nrfx_isr_int+0x8c>

0000e8bc <uarte_nrfx_configure>:
{
    e8bc:	b570      	push	{r4, r5, r6, lr}
    e8be:	b082      	sub	sp, #8
    e8c0:	4605      	mov	r5, r0
    e8c2:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    e8c4:	794b      	ldrb	r3, [r1, #5]
    e8c6:	2b01      	cmp	r3, #1
    e8c8:	d006      	beq.n	e8d8 <uarte_nrfx_configure+0x1c>
    e8ca:	2b03      	cmp	r3, #3
    e8cc:	d011      	beq.n	e8f2 <uarte_nrfx_configure+0x36>
    e8ce:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    e8d2:	4618      	mov	r0, r3
    e8d4:	b002      	add	sp, #8
    e8d6:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    e8d8:	2300      	movs	r3, #0
    e8da:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    e8de:	79a3      	ldrb	r3, [r4, #6]
    e8e0:	2b03      	cmp	r3, #3
    e8e2:	d140      	bne.n	e966 <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
    e8e4:	79e3      	ldrb	r3, [r4, #7]
    e8e6:	b143      	cbz	r3, e8fa <uarte_nrfx_configure+0x3e>
    e8e8:	2b01      	cmp	r3, #1
    e8ea:	d010      	beq.n	e90e <uarte_nrfx_configure+0x52>
    e8ec:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e8f0:	e7ef      	b.n	e8d2 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    e8f2:	2310      	movs	r3, #16
    e8f4:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    e8f8:	e7f1      	b.n	e8de <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    e8fa:	2300      	movs	r3, #0
    e8fc:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    e900:	7923      	ldrb	r3, [r4, #4]
    e902:	b183      	cbz	r3, e926 <uarte_nrfx_configure+0x6a>
    e904:	2b02      	cmp	r3, #2
    e906:	d02a      	beq.n	e95e <uarte_nrfx_configure+0xa2>
    e908:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e90c:	e7e1      	b.n	e8d2 <uarte_nrfx_configure+0x16>
	return dev->config;
    e90e:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    e910:	685b      	ldr	r3, [r3, #4]
    e912:	f003 0201 	and.w	r2, r3, #1
    e916:	f003 0302 	and.w	r3, r3, #2
    e91a:	4313      	orrs	r3, r2
    e91c:	d026      	beq.n	e96c <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    e91e:	2301      	movs	r3, #1
    e920:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    e924:	e7ec      	b.n	e900 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    e926:	2300      	movs	r3, #0
    e928:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    e92c:	6821      	ldr	r1, [r4, #0]
    e92e:	4628      	mov	r0, r5
    e930:	f7f6 fa14 	bl	4d5c <baudrate_set>
    e934:	4603      	mov	r3, r0
    e936:	b9e0      	cbnz	r0, e972 <uarte_nrfx_configure+0xb6>
	return dev->config;
    e938:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    e93a:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    e93c:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    e940:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    e944:	f89d 2004 	ldrb.w	r2, [sp, #4]
    e948:	4331      	orrs	r1, r6
    e94a:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    e94c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    e950:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    e952:	3204      	adds	r2, #4
    e954:	e894 0003 	ldmia.w	r4, {r0, r1}
    e958:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    e95c:	e7b9      	b.n	e8d2 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    e95e:	230e      	movs	r3, #14
    e960:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    e964:	e7e2      	b.n	e92c <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
    e966:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e96a:	e7b2      	b.n	e8d2 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
    e96c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e970:	e7af      	b.n	e8d2 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    e972:	f06f 0385 	mvn.w	r3, #133	; 0x85
    e976:	e7ac      	b.n	e8d2 <uarte_nrfx_configure+0x16>

0000e978 <uarte_nrfx_config_get>:
{
    e978:	460b      	mov	r3, r1
	return dev->data;
    e97a:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    e97c:	6891      	ldr	r1, [r2, #8]
    e97e:	6850      	ldr	r0, [r2, #4]
    e980:	e883 0003 	stmia.w	r3, {r0, r1}
}
    e984:	2000      	movs	r0, #0
    e986:	4770      	bx	lr

0000e988 <uarte_nrfx_err_check>:
	return dev->config;
    e988:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e98a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    e98c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    e990:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    e994:	4770      	bx	lr

0000e996 <is_tx_ready>:
	return dev->config;
    e996:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e998:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    e99a:	685b      	ldr	r3, [r3, #4]
    e99c:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e9a0:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    e9a4:	b929      	cbnz	r1, e9b2 <is_tx_ready+0x1c>
    e9a6:	b933      	cbnz	r3, e9b6 <is_tx_ready+0x20>
    e9a8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    e9ac:	b92b      	cbnz	r3, e9ba <is_tx_ready+0x24>
    e9ae:	2000      	movs	r0, #0
    e9b0:	4770      	bx	lr
    e9b2:	2001      	movs	r0, #1
    e9b4:	4770      	bx	lr
    e9b6:	2000      	movs	r0, #0
    e9b8:	4770      	bx	lr
    e9ba:	2001      	movs	r0, #1
}
    e9bc:	4770      	bx	lr

0000e9be <uarte_enable>:
	return dev->config;
    e9be:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e9c0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    e9c2:	2208      	movs	r2, #8
    e9c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    e9c8:	4770      	bx	lr

0000e9ca <tx_start>:
{
    e9ca:	b510      	push	{r4, lr}
	return dev->config;
    e9cc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    e9ce:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e9d0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e9d4:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e9d8:	2300      	movs	r3, #0
    e9da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    e9de:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    e9e2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    e9e6:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    e9ea:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e9ec:	685b      	ldr	r3, [r3, #4]
    e9ee:	f013 0f10 	tst.w	r3, #16
    e9f2:	d102      	bne.n	e9fa <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e9f4:	2301      	movs	r3, #1
    e9f6:	60a3      	str	r3, [r4, #8]
}
    e9f8:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    e9fa:	2101      	movs	r1, #1
    e9fc:	f7ff ffdf 	bl	e9be <uarte_enable>
    p_reg->INTENSET = mask;
    ea00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ea04:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    ea08:	e7f4      	b.n	e9f4 <tx_start+0x2a>

0000ea0a <uarte_nrfx_poll_in>:
{
    ea0a:	b410      	push	{r4}
	return dev->data;
    ea0c:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    ea0e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ea10:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ea12:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ea16:	b152      	cbz	r2, ea2e <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    ea18:	7d62      	ldrb	r2, [r4, #21]
    ea1a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ea1c:	2000      	movs	r0, #0
    ea1e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    ea22:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ea26:	2201      	movs	r2, #1
    ea28:	601a      	str	r2, [r3, #0]
}
    ea2a:	bc10      	pop	{r4}
    ea2c:	4770      	bx	lr
		return -1;
    ea2e:	f04f 30ff 	mov.w	r0, #4294967295
    ea32:	e7fa      	b.n	ea2a <uarte_nrfx_poll_in+0x20>

0000ea34 <uarte_nrfx_fifo_fill>:
{
    ea34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea38:	4680      	mov	r8, r0
	return dev->data;
    ea3a:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    ea3c:	68fb      	ldr	r3, [r7, #12]
    ea3e:	899e      	ldrh	r6, [r3, #12]
    ea40:	4296      	cmp	r6, r2
    ea42:	bfa8      	it	ge
    ea44:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    ea46:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ea48:	2201      	movs	r2, #1
    ea4a:	f3bf 8f5b 	dmb	ish
    ea4e:	e853 0f00 	ldrex	r0, [r3]
    ea52:	2800      	cmp	r0, #0
    ea54:	d103      	bne.n	ea5e <uarte_nrfx_fifo_fill+0x2a>
    ea56:	e843 2400 	strex	r4, r2, [r3]
    ea5a:	2c00      	cmp	r4, #0
    ea5c:	d1f7      	bne.n	ea4e <uarte_nrfx_fifo_fill+0x1a>
    ea5e:	f3bf 8f5b 	dmb	ish
    ea62:	d101      	bne.n	ea68 <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
    ea64:	2300      	movs	r3, #0
    ea66:	e006      	b.n	ea76 <uarte_nrfx_fifo_fill+0x42>
		return 0;
    ea68:	2600      	movs	r6, #0
    ea6a:	e019      	b.n	eaa0 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
    ea6c:	68fc      	ldr	r4, [r7, #12]
    ea6e:	68a4      	ldr	r4, [r4, #8]
    ea70:	5ccd      	ldrb	r5, [r1, r3]
    ea72:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
    ea74:	3301      	adds	r3, #1
    ea76:	42b3      	cmp	r3, r6
    ea78:	dbf8      	blt.n	ea6c <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
    ea7a:	f04f 0320 	mov.w	r3, #32
    ea7e:	f3ef 8411 	mrs	r4, BASEPRI
    ea82:	f383 8812 	msr	BASEPRI_MAX, r3
    ea86:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    ea8a:	4640      	mov	r0, r8
    ea8c:	f7ff ff83 	bl	e996 <is_tx_ready>
    ea90:	b948      	cbnz	r0, eaa6 <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
    ea92:	68fb      	ldr	r3, [r7, #12]
    ea94:	2600      	movs	r6, #0
    ea96:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
    ea98:	f384 8811 	msr	BASEPRI, r4
    ea9c:	f3bf 8f6f 	isb	sy
}
    eaa0:	4630      	mov	r0, r6
    eaa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    eaa6:	68fb      	ldr	r3, [r7, #12]
    eaa8:	4632      	mov	r2, r6
    eaaa:	6899      	ldr	r1, [r3, #8]
    eaac:	4640      	mov	r0, r8
    eaae:	f7ff ff8c 	bl	e9ca <tx_start>
    eab2:	e7f1      	b.n	ea98 <uarte_nrfx_fifo_fill+0x64>

0000eab4 <uarte_nrfx_fifo_read>:
	return dev->config;
    eab4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eab6:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    eab8:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    eaba:	2a00      	cmp	r2, #0
    eabc:	dd0c      	ble.n	ead8 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eabe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    eac2:	b15a      	cbz	r2, eadc <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    eac4:	2200      	movs	r2, #0
    eac6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    eaca:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    eace:	7d42      	ldrb	r2, [r0, #21]
    ead0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ead2:	2001      	movs	r0, #1
    ead4:	6018      	str	r0, [r3, #0]
}
    ead6:	4770      	bx	lr
	int num_rx = 0;
    ead8:	2000      	movs	r0, #0
    eada:	4770      	bx	lr
    eadc:	2000      	movs	r0, #0
}
    eade:	4770      	bx	lr

0000eae0 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    eae0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eae2:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    eae4:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    eae6:	f04f 0020 	mov.w	r0, #32
    eaea:	f3ef 8311 	mrs	r3, BASEPRI
    eaee:	f380 8812 	msr	BASEPRI_MAX, r0
    eaf2:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    eaf6:	68c9      	ldr	r1, [r1, #12]
    eaf8:	2000      	movs	r0, #0
    eafa:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    eafc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    eb00:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    eb04:	f383 8811 	msr	BASEPRI, r3
    eb08:	f3bf 8f6f 	isb	sy
}
    eb0c:	4770      	bx	lr

0000eb0e <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    eb0e:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    eb10:	68db      	ldr	r3, [r3, #12]
    eb12:	2201      	movs	r2, #1
    eb14:	739a      	strb	r2, [r3, #14]
}
    eb16:	4770      	bx	lr

0000eb18 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    eb18:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb1a:	6819      	ldr	r1, [r3, #0]
	return dev->data;
    eb1c:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    eb1e:	68db      	ldr	r3, [r3, #12]
    eb20:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    eb22:	b94a      	cbnz	r2, eb38 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eb24:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    eb28:	b15a      	cbz	r2, eb42 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
    eb2a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    eb2e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    eb32:	d008      	beq.n	eb46 <uarte_nrfx_irq_tx_ready_complete+0x2e>
    eb34:	2001      	movs	r0, #1
    eb36:	e000      	b.n	eb3a <uarte_nrfx_irq_tx_ready_complete+0x22>
    eb38:	2000      	movs	r0, #0
	if (ready) {
    eb3a:	b108      	cbz	r0, eb40 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    eb3c:	2200      	movs	r2, #0
    eb3e:	611a      	str	r2, [r3, #16]
}
    eb40:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    eb42:	2000      	movs	r0, #0
    eb44:	e7f9      	b.n	eb3a <uarte_nrfx_irq_tx_ready_complete+0x22>
    eb46:	2000      	movs	r0, #0
    eb48:	e7f7      	b.n	eb3a <uarte_nrfx_irq_tx_ready_complete+0x22>

0000eb4a <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    eb4a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb4c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eb4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    eb52:	3800      	subs	r0, #0
    eb54:	bf18      	it	ne
    eb56:	2001      	movne	r0, #1
    eb58:	4770      	bx	lr

0000eb5a <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    eb5a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb5c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    eb5e:	2210      	movs	r2, #16
    eb60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    eb64:	4770      	bx	lr

0000eb66 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    eb66:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb68:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    eb6a:	2210      	movs	r2, #16
    eb6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    eb70:	4770      	bx	lr

0000eb72 <uarte_nrfx_irq_err_enable>:
	return dev->config;
    eb72:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb74:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    eb76:	f44f 7200 	mov.w	r2, #512	; 0x200
    eb7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    eb7e:	4770      	bx	lr

0000eb80 <uarte_nrfx_irq_err_disable>:
	return dev->config;
    eb80:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb82:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    eb84:	f44f 7200 	mov.w	r2, #512	; 0x200
    eb88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    eb8c:	4770      	bx	lr

0000eb8e <uarte_nrfx_irq_is_pending>:
{
    eb8e:	b538      	push	{r3, r4, r5, lr}
    eb90:	4604      	mov	r4, r0
	return dev->config;
    eb92:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb94:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    eb96:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    eb9a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    eb9e:	d106      	bne.n	ebae <uarte_nrfx_irq_is_pending+0x20>
    eba0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    eba4:	f013 0f10 	tst.w	r3, #16
    eba8:	d107      	bne.n	ebba <uarte_nrfx_irq_is_pending+0x2c>
    ebaa:	2000      	movs	r0, #0
}
    ebac:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    ebae:	f7ff ffb3 	bl	eb18 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    ebb2:	2800      	cmp	r0, #0
    ebb4:	d0f4      	beq.n	eba0 <uarte_nrfx_irq_is_pending+0x12>
		||
    ebb6:	2001      	movs	r0, #1
    ebb8:	e7f8      	b.n	ebac <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    ebba:	4620      	mov	r0, r4
    ebbc:	f7ff ffc5 	bl	eb4a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    ebc0:	2800      	cmp	r0, #0
    ebc2:	d0f3      	beq.n	ebac <uarte_nrfx_irq_is_pending+0x1e>
		||
    ebc4:	2001      	movs	r0, #1
    ebc6:	e7f1      	b.n	ebac <uarte_nrfx_irq_is_pending+0x1e>

0000ebc8 <uarte_nrfx_irq_update>:
}
    ebc8:	2001      	movs	r0, #1
    ebca:	4770      	bx	lr

0000ebcc <uarte_nrfx_irq_callback_set>:
	return dev->data;
    ebcc:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    ebce:	68d8      	ldr	r0, [r3, #12]
    ebd0:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    ebd2:	68db      	ldr	r3, [r3, #12]
    ebd4:	605a      	str	r2, [r3, #4]
}
    ebd6:	4770      	bx	lr

0000ebd8 <wait_tx_ready>:
{
    ebd8:	b570      	push	{r4, r5, r6, lr}
    ebda:	4606      	mov	r6, r0
    ebdc:	e014      	b.n	ec08 <wait_tx_ready+0x30>
		if (res) {
    ebde:	b17d      	cbz	r5, ec00 <wait_tx_ready+0x28>
	__asm__ volatile(
    ebe0:	f04f 0320 	mov.w	r3, #32
    ebe4:	f3ef 8411 	mrs	r4, BASEPRI
    ebe8:	f383 8812 	msr	BASEPRI_MAX, r3
    ebec:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    ebf0:	4630      	mov	r0, r6
    ebf2:	f7ff fed0 	bl	e996 <is_tx_ready>
    ebf6:	b9a0      	cbnz	r0, ec22 <wait_tx_ready+0x4a>
	__asm__ volatile(
    ebf8:	f384 8811 	msr	BASEPRI, r4
    ebfc:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    ec00:	2021      	movs	r0, #33	; 0x21
    ec02:	2100      	movs	r1, #0
    ec04:	f7fd f822 	bl	bc4c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    ec08:	2464      	movs	r4, #100	; 0x64
    ec0a:	4630      	mov	r0, r6
    ec0c:	f7ff fec3 	bl	e996 <is_tx_ready>
    ec10:	4605      	mov	r5, r0
    ec12:	2800      	cmp	r0, #0
    ec14:	d1e3      	bne.n	ebde <wait_tx_ready+0x6>
    ec16:	2001      	movs	r0, #1
    ec18:	f000 f8b0 	bl	ed7c <nrfx_busy_wait>
    ec1c:	3c01      	subs	r4, #1
    ec1e:	d1f4      	bne.n	ec0a <wait_tx_ready+0x32>
    ec20:	e7dd      	b.n	ebde <wait_tx_ready+0x6>
}
    ec22:	4620      	mov	r0, r4
    ec24:	bd70      	pop	{r4, r5, r6, pc}

0000ec26 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    ec26:	b510      	push	{r4, lr}
    ec28:	4604      	mov	r4, r0
    ec2a:	2200      	movs	r2, #0
    ec2c:	2101      	movs	r1, #1
    ec2e:	2002      	movs	r0, #2
    ec30:	f7f5 f812 	bl	3c58 <z_arm_irq_priority_set>
    ec34:	2002      	movs	r0, #2
    ec36:	f7f4 fff1 	bl	3c1c <arch_irq_enable>
    ec3a:	2101      	movs	r1, #1
    ec3c:	4620      	mov	r0, r4
    ec3e:	f7f6 f991 	bl	4f64 <uarte_instance_init>
    ec42:	bd10      	pop	{r4, pc}

0000ec44 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    ec44:	b510      	push	{r4, lr}
    ec46:	4604      	mov	r4, r0
    ec48:	2200      	movs	r2, #0
    ec4a:	2101      	movs	r1, #1
    ec4c:	2028      	movs	r0, #40	; 0x28
    ec4e:	f7f5 f803 	bl	3c58 <z_arm_irq_priority_set>
    ec52:	2028      	movs	r0, #40	; 0x28
    ec54:	f7f4 ffe2 	bl	3c1c <arch_irq_enable>
    ec58:	2101      	movs	r1, #1
    ec5a:	4620      	mov	r0, r4
    ec5c:	f7f6 f982 	bl	4f64 <uarte_instance_init>
    ec60:	bd10      	pop	{r4, pc}

0000ec62 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    ec62:	4770      	bx	lr

0000ec64 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ec64:	4770      	bx	lr

0000ec66 <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
    ec66:	4770      	bx	lr

0000ec68 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    ec68:	1a40      	subs	r0, r0, r1
}
    ec6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ec6e:	4770      	bx	lr

0000ec70 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ec70:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ec74:	009b      	lsls	r3, r3, #2
    ec76:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ec78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ec7c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    ec80:	2200      	movs	r2, #0
    ec82:	601a      	str	r2, [r3, #0]
    ec84:	681b      	ldr	r3, [r3, #0]
}
    ec86:	4770      	bx	lr

0000ec88 <absolute_time_to_cc>:
}
    ec88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ec8c:	4770      	bx	lr

0000ec8e <full_int_lock>:
	__asm__ volatile(
    ec8e:	f04f 0320 	mov.w	r3, #32
    ec92:	f3ef 8011 	mrs	r0, BASEPRI
    ec96:	f383 8812 	msr	BASEPRI_MAX, r3
    ec9a:	f3bf 8f6f 	isb	sy
}
    ec9e:	4770      	bx	lr

0000eca0 <full_int_unlock>:
	__asm__ volatile(
    eca0:	f380 8811 	msr	BASEPRI, r0
    eca4:	f3bf 8f6f 	isb	sy
}
    eca8:	4770      	bx	lr

0000ecaa <set_absolute_alarm>:
{
    ecaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecac:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    ecae:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    ecb2:	f7f6 fa1d 	bl	50f0 <get_comparator>
    ecb6:	4607      	mov	r7, r0
    ecb8:	e019      	b.n	ecee <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    ecba:	2013      	movs	r0, #19
    ecbc:	f001 f9a4 	bl	10008 <z_impl_k_busy_wait>
}
    ecc0:	e022      	b.n	ed08 <set_absolute_alarm+0x5e>
		event_clear(chan);
    ecc2:	4630      	mov	r0, r6
    ecc4:	f7ff ffd4 	bl	ec70 <event_clear>
		event_enable(chan);
    ecc8:	4630      	mov	r0, r6
    ecca:	f7f6 fa19 	bl	5100 <event_enable>
		set_comparator(chan, cc_val);
    ecce:	4629      	mov	r1, r5
    ecd0:	4630      	mov	r0, r6
    ecd2:	f7f6 fa03 	bl	50dc <set_comparator>
		now2 = counter();
    ecd6:	f7f6 fa27 	bl	5128 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    ecda:	4284      	cmp	r4, r0
    ecdc:	d01e      	beq.n	ed1c <set_absolute_alarm+0x72>
    ecde:	1c81      	adds	r1, r0, #2
    ece0:	4628      	mov	r0, r5
    ece2:	f7ff ffc1 	bl	ec68 <counter_sub>
	} while ((now2 != now) &&
    ece6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ecea:	d917      	bls.n	ed1c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    ecec:	462f      	mov	r7, r5
		now = counter();
    ecee:	f7f6 fa1b 	bl	5128 <counter>
    ecf2:	4604      	mov	r4, r0
		set_comparator(chan, now);
    ecf4:	4601      	mov	r1, r0
    ecf6:	4630      	mov	r0, r6
    ecf8:	f7f6 f9f0 	bl	50dc <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    ecfc:	4621      	mov	r1, r4
    ecfe:	4638      	mov	r0, r7
    ed00:	f7ff ffb2 	bl	ec68 <counter_sub>
    ed04:	2801      	cmp	r0, #1
    ed06:	d0d8      	beq.n	ecba <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    ed08:	1ca7      	adds	r7, r4, #2
    ed0a:	4639      	mov	r1, r7
    ed0c:	4628      	mov	r0, r5
    ed0e:	f7ff ffab 	bl	ec68 <counter_sub>
    ed12:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ed16:	d9d4      	bls.n	ecc2 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    ed18:	463d      	mov	r5, r7
    ed1a:	e7d2      	b.n	ecc2 <set_absolute_alarm+0x18>
}
    ed1c:	4628      	mov	r0, r5
    ed1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ed20 <compare_set>:
{
    ed20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed22:	b083      	sub	sp, #12
    ed24:	4604      	mov	r4, r0
    ed26:	4617      	mov	r7, r2
    ed28:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    ed2a:	f7f6 fa03 	bl	5134 <compare_int_lock>
    ed2e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    ed30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed32:	9301      	str	r3, [sp, #4]
    ed34:	9b08      	ldr	r3, [sp, #32]
    ed36:	9300      	str	r3, [sp, #0]
    ed38:	463a      	mov	r2, r7
    ed3a:	462b      	mov	r3, r5
    ed3c:	4620      	mov	r0, r4
    ed3e:	f7f6 fae7 	bl	5310 <compare_set_nolocks>
    ed42:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    ed44:	4631      	mov	r1, r6
    ed46:	4620      	mov	r0, r4
    ed48:	f7f6 fa58 	bl	51fc <compare_int_unlock>
}
    ed4c:	4628      	mov	r0, r5
    ed4e:	b003      	add	sp, #12
    ed50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ed52 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    ed52:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    ed54:	2000      	movs	r0, #0
    ed56:	f7f5 fb37 	bl	43c8 <sys_arch_reboot>

0000ed5a <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    ed5a:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    ed5c:	f7fd f97e 	bl	c05c <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    ed60:	bd08      	pop	{r3, pc}

0000ed62 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    ed62:	b510      	push	{r4, lr}
    ed64:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    ed66:	f7f4 fe65 	bl	3a34 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    ed6a:	f7f4 ff25 	bl	3bb8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    ed6e:	4620      	mov	r0, r4
    ed70:	f7ff fff3 	bl	ed5a <hw_cc3xx_init_internal>
	return res;
}
    ed74:	bd10      	pop	{r4, pc}

0000ed76 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    ed76:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    ed78:	4780      	blx	r0
}
    ed7a:	bd08      	pop	{r3, pc}

0000ed7c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    ed7c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    ed7e:	f001 f943 	bl	10008 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    ed82:	bd08      	pop	{r3, pc}

0000ed84 <nrfx_clock_enable>:
{
    ed84:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    ed86:	2000      	movs	r0, #0
    ed88:	f7f4 ff58 	bl	3c3c <arch_irq_is_enabled>
    ed8c:	b100      	cbz	r0, ed90 <nrfx_clock_enable+0xc>
}
    ed8e:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    ed90:	f7f4 ff44 	bl	3c1c <arch_irq_enable>
    ed94:	e7fb      	b.n	ed8e <nrfx_clock_enable+0xa>

0000ed96 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    ed96:	2301      	movs	r3, #1
    ed98:	4083      	lsls	r3, r0
    ed9a:	f013 0fff 	tst.w	r3, #255	; 0xff
}
    ed9e:	bf14      	ite	ne
    eda0:	2001      	movne	r0, #1
    eda2:	2000      	moveq	r0, #0
    eda4:	4770      	bx	lr

0000eda6 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    eda6:	b508      	push	{r3, lr}
  _DoInit();
    eda8:	f7f6 ff34 	bl	5c14 <_DoInit>
}
    edac:	bd08      	pop	{r3, pc}

0000edae <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    edae:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    edb0:	f7ff fff9 	bl	eda6 <SEGGER_RTT_Init>

	return 0;
}
    edb4:	2000      	movs	r0, #0
    edb6:	bd08      	pop	{r3, pc}

0000edb8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    edb8:	4770      	bx	lr

0000edba <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
    edba:	6903      	ldr	r3, [r0, #16]
    edbc:	6183      	str	r3, [r0, #24]
    edbe:	4770      	bx	lr

0000edc0 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    edc0:	b510      	push	{r4, lr}
    edc2:	4604      	mov	r4, r0
    edc4:	f001 f92f 	bl	10026 <_ZdlPv>
    edc8:	4620      	mov	r0, r4
    edca:	bd10      	pop	{r4, pc}

0000edcc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    edcc:	b510      	push	{r4, lr}
    edce:	4604      	mov	r4, r0
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    edd0:	4413      	add	r3, r2
    edd2:	f7f6 ffb7 	bl	5d44 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
    edd6:	4620      	mov	r0, r4
    edd8:	bd10      	pop	{r4, pc}

0000edda <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
    edda:	6880      	ldr	r0, [r0, #8]
    eddc:	4770      	bx	lr

0000edde <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
    edde:	b570      	push	{r4, r5, r6, lr}
    ede0:	4604      	mov	r4, r0
    ede2:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
    ede4:	6980      	ldr	r0, [r0, #24]
    ede6:	f000 f81c 	bl	ee22 <_ZN6tflite14AlignPointerUpEPhj>
    edea:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
    edec:	4631      	mov	r1, r6
    edee:	6960      	ldr	r0, [r4, #20]
    edf0:	f000 f81e 	bl	ee30 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
    edf4:	1b40      	subs	r0, r0, r5
    edf6:	bd70      	pop	{r4, r5, r6, pc}

0000edf8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
    edf8:	b508      	push	{r3, lr}
    edfa:	4608      	mov	r0, r1
  Log(format, args);
    edfc:	4611      	mov	r1, r2
    edfe:	f7f6 ffe7 	bl	5dd0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
    ee02:	2000      	movs	r0, #0
    ee04:	bd08      	pop	{r3, pc}

0000ee06 <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
    ee06:	b40f      	push	{r0, r1, r2, r3}
    ee08:	b500      	push	{lr}
    ee0a:	b083      	sub	sp, #12
    ee0c:	a904      	add	r1, sp, #16
    ee0e:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
    ee12:	9101      	str	r1, [sp, #4]
  Log(format, args);
    ee14:	f7f6 ffdc 	bl	5dd0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
    ee18:	b003      	add	sp, #12
    ee1a:	f85d eb04 	ldr.w	lr, [sp], #4
    ee1e:	b004      	add	sp, #16
    ee20:	4770      	bx	lr

0000ee22 <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
    ee22:	4408      	add	r0, r1
    ee24:	3801      	subs	r0, #1
    ee26:	fbb0 f0f1 	udiv	r0, r0, r1
}
    ee2a:	fb01 f000 	mul.w	r0, r1, r0
    ee2e:	4770      	bx	lr

0000ee30 <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
    ee30:	fbb0 f0f1 	udiv	r0, r0, r1
}
    ee34:	fb01 f000 	mul.w	r0, r1, r0
    ee38:	4770      	bx	lr

0000ee3a <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
    ee3a:	4408      	add	r0, r1
    ee3c:	3801      	subs	r0, #1
    ee3e:	fbb0 f0f1 	udiv	r0, r0, r1
}
    ee42:	fb01 f000 	mul.w	r0, r1, r0
    ee46:	4770      	bx	lr

0000ee48 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  switch (type) {
    ee48:	3801      	subs	r0, #1
    ee4a:	280f      	cmp	r0, #15
    ee4c:	d83d      	bhi.n	eeca <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x82>
    ee4e:	e8df f000 	tbb	[pc, r0]
    ee52:	180c      	.short	0x180c
    ee54:	303c2820 	.word	0x303c2820
    ee58:	08243414 	.word	0x08243414
    ee5c:	3c2c3810 	.word	0x3c2c3810
    ee60:	1c3c      	.short	0x1c3c
      *size = sizeof(int16_t);
    ee62:	2302      	movs	r3, #2
    ee64:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ee66:	2000      	movs	r0, #0
      break;
    ee68:	4770      	bx	lr
      *size = sizeof(float);
    ee6a:	2304      	movs	r3, #4
    ee6c:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ee6e:	2000      	movs	r0, #0
      break;
    ee70:	4770      	bx	lr
      *size = sizeof(double);
    ee72:	2308      	movs	r3, #8
    ee74:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ee76:	2000      	movs	r0, #0
      break;
    ee78:	4770      	bx	lr
      *size = sizeof(int16_t);
    ee7a:	2302      	movs	r3, #2
    ee7c:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ee7e:	2000      	movs	r0, #0
      break;
    ee80:	4770      	bx	lr
      *size = sizeof(int32_t);
    ee82:	2304      	movs	r3, #4
    ee84:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ee86:	2000      	movs	r0, #0
      break;
    ee88:	4770      	bx	lr
      *size = sizeof(uint32_t);
    ee8a:	2304      	movs	r3, #4
    ee8c:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ee8e:	2000      	movs	r0, #0
      break;
    ee90:	4770      	bx	lr
      *size = sizeof(uint8_t);
    ee92:	2301      	movs	r3, #1
    ee94:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ee96:	2000      	movs	r0, #0
      break;
    ee98:	4770      	bx	lr
      *size = sizeof(int8_t);
    ee9a:	2301      	movs	r3, #1
    ee9c:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    ee9e:	2000      	movs	r0, #0
      break;
    eea0:	4770      	bx	lr
      *size = sizeof(int64_t);
    eea2:	2308      	movs	r3, #8
    eea4:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    eea6:	2000      	movs	r0, #0
      break;
    eea8:	4770      	bx	lr
      *size = sizeof(uint64_t);
    eeaa:	2308      	movs	r3, #8
    eeac:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    eeae:	2000      	movs	r0, #0
      break;
    eeb0:	4770      	bx	lr
      *size = sizeof(bool);
    eeb2:	2301      	movs	r3, #1
    eeb4:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    eeb6:	2000      	movs	r0, #0
      break;
    eeb8:	4770      	bx	lr
      *size = sizeof(float) * 2;
    eeba:	2308      	movs	r3, #8
    eebc:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    eebe:	2000      	movs	r0, #0
      break;
    eec0:	4770      	bx	lr
      *size = sizeof(double) * 2;
    eec2:	2310      	movs	r3, #16
    eec4:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    eec6:	2000      	movs	r0, #0
      break;
    eec8:	4770      	bx	lr
  return kTfLiteOk;
    eeca:	2001      	movs	r0, #1
}
    eecc:	4770      	bx	lr

0000eece <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
    eece:	b530      	push	{r4, r5, lr}
    eed0:	b083      	sub	sp, #12
  TFLITE_DCHECK(out_bytes != nullptr);
    eed2:	b129      	cbz	r1, eee0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x12>
    eed4:	460d      	mov	r5, r1

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
    eed6:	6842      	ldr	r2, [r0, #4]
    eed8:	b1c2      	cbz	r2, ef0c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    eeda:	2300      	movs	r3, #0
  int element_count = 1;
    eedc:	2401      	movs	r4, #1
    eede:	e007      	b.n	eef0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  TFLITE_DCHECK(out_bytes != nullptr);
    eee0:	f001 f8b8 	bl	10054 <abort>
      element_count *= eval_tensor->dims->data[n];
    eee4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    eee8:	6849      	ldr	r1, [r1, #4]
    eeea:	fb01 f404 	mul.w	r4, r1, r4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    eeee:	3301      	adds	r3, #1
    eef0:	6811      	ldr	r1, [r2, #0]
    eef2:	4299      	cmp	r1, r3
    eef4:	dcf6      	bgt.n	eee4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
    eef6:	a901      	add	r1, sp, #4
    eef8:	7a00      	ldrb	r0, [r0, #8]
    eefa:	f7ff ffa5 	bl	ee48 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    eefe:	b918      	cbnz	r0, ef08 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
    ef00:	9b01      	ldr	r3, [sp, #4]
    ef02:	fb03 f404 	mul.w	r4, r3, r4
    ef06:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
    ef08:	b003      	add	sp, #12
    ef0a:	bd30      	pop	{r4, r5, pc}
  int element_count = 1;
    ef0c:	2401      	movs	r4, #1
    ef0e:	e7f2      	b.n	eef6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>

0000ef10 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
}
    ef10:	4770      	bx	lr

0000ef12 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
    ef12:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    ef14:	f990 0000 	ldrsb.w	r0, [r0]
    ef18:	f7ff fffa 	bl	ef10 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
}
    ef1c:	bd08      	pop	{r3, pc}

0000ef1e <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
}
    ef1e:	4770      	bx	lr

0000ef20 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:
  char* p2 = end - 1;
    ef20:	3901      	subs	r1, #1
  char* p1 = start;
    ef22:	4603      	mov	r3, r0
  while (p1 < p2) {
    ef24:	4288      	cmp	r0, r1
    ef26:	d20a      	bcs.n	ef3e <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x1e>
char* ReverseStringInPlace(char* start, char* end) {
    ef28:	b410      	push	{r4}
    char tmp = *p1;
    ef2a:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
    ef2c:	780c      	ldrb	r4, [r1, #0]
    ef2e:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
    ef32:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
    ef36:	428b      	cmp	r3, r1
    ef38:	d3f7      	bcc.n	ef2a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0xa>
}
    ef3a:	bc10      	pop	{r4}
    ef3c:	4770      	bx	lr
    ef3e:	4770      	bx	lr

0000ef40 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
    ef40:	b410      	push	{r4}
    ef42:	4604      	mov	r4, r0
  while (*current != 0) {
    ef44:	7803      	ldrb	r3, [r0, #0]
    ef46:	b10b      	cbz	r3, ef4c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
    ef48:	3001      	adds	r0, #1
  while (*current != 0) {
    ef4a:	e7fb      	b.n	ef44 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x4>
  char* current_end = main + (main_max_length - 1);
    ef4c:	3901      	subs	r1, #1
    ef4e:	4421      	add	r1, r4
  while ((*to_append != 0) && (current < current_end)) {
    ef50:	7813      	ldrb	r3, [r2, #0]
    ef52:	b12b      	cbz	r3, ef60 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ef54:	4288      	cmp	r0, r1
    ef56:	d203      	bcs.n	ef60 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    *current = *to_append;
    ef58:	f800 3b01 	strb.w	r3, [r0], #1
    ++to_append;
    ef5c:	3201      	adds	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
    ef5e:	e7f7      	b.n	ef50 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  *current = 0;
    ef60:	2300      	movs	r3, #0
    ef62:	7003      	strb	r3, [r0, #0]
}
    ef64:	bc10      	pop	{r4}
    ef66:	4770      	bx	lr

0000ef68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
    ef68:	b538      	push	{r3, r4, r5, lr}
    ef6a:	4605      	mov	r5, r0
    ef6c:	4608      	mov	r0, r1
    ef6e:	460c      	mov	r4, r1
    ef70:	e008      	b.n	ef84 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1c>
      character = '0' + digit;
    ef72:	3330      	adds	r3, #48	; 0x30
    ef74:	b2db      	uxtb	r3, r3
    *buffer++ = character;
    ef76:	f804 3b01 	strb.w	r3, [r4], #1
    i /= base;
    ef7a:	fbb5 f3f2 	udiv	r3, r5, r2
  } while (i > 0);
    ef7e:	42aa      	cmp	r2, r5
    ef80:	d809      	bhi.n	ef96 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    i /= base;
    ef82:	461d      	mov	r5, r3
    int32_t digit = i % base;
    ef84:	fbb5 f3f2 	udiv	r3, r5, r2
    ef88:	fb02 5313 	mls	r3, r2, r3, r5
    if (digit < 10) {
    ef8c:	2b09      	cmp	r3, #9
    ef8e:	ddf0      	ble.n	ef72 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xa>
      character = 'a' + (digit - 10);
    ef90:	3357      	adds	r3, #87	; 0x57
    ef92:	b2db      	uxtb	r3, r3
    ef94:	e7ef      	b.n	ef76 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xe>
  *buffer = 0;
    ef96:	2300      	movs	r3, #0
    ef98:	7023      	strb	r3, [r4, #0]
  ReverseStringInPlace(start, buffer);
    ef9a:	4621      	mov	r1, r4
    ef9c:	f7ff ffc0 	bl	ef20 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
}
    efa0:	4620      	mov	r0, r4
    efa2:	bd38      	pop	{r3, r4, r5, pc}

0000efa4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>:
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
    efa4:	b508      	push	{r3, lr}
  if (i < 0) {
    efa6:	2800      	cmp	r0, #0
    efa8:	db03      	blt.n	efb2 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0xe>
  return FastUInt32ToBufferLeft(u, buffer, 10);
    efaa:	220a      	movs	r2, #10
    efac:	f7ff ffdc 	bl	ef68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
    efb0:	bd08      	pop	{r3, pc}
    *buffer++ = '-';
    efb2:	222d      	movs	r2, #45	; 0x2d
    efb4:	f801 2b01 	strb.w	r2, [r1], #1
    u = -u;
    efb8:	4240      	negs	r0, r0
    efba:	e7f6      	b.n	efaa <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0x6>

0000efbc <_ZN12_GLOBAL__N_111StrCatInt32EPcii>:
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
    efbc:	b530      	push	{r4, r5, lr}
    efbe:	b08d      	sub	sp, #52	; 0x34
    efc0:	4604      	mov	r4, r0
    efc2:	460d      	mov	r5, r1
  FastInt32ToBufferLeft(number, number_string);
    efc4:	4669      	mov	r1, sp
    efc6:	4610      	mov	r0, r2
    efc8:	f7ff ffec 	bl	efa4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
  return StrCatStr(main, main_max_length, number_string);
    efcc:	466a      	mov	r2, sp
    efce:	4629      	mov	r1, r5
    efd0:	4620      	mov	r0, r4
    efd2:	f7ff ffb5 	bl	ef40 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
    efd6:	b00d      	add	sp, #52	; 0x34
    efd8:	bd30      	pop	{r4, r5, pc}

0000efda <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>:
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
    efda:	b530      	push	{r4, r5, lr}
    efdc:	b08d      	sub	sp, #52	; 0x34
    efde:	4604      	mov	r4, r0
    efe0:	460d      	mov	r5, r1
    efe2:	4610      	mov	r0, r2
  FastUInt32ToBufferLeft(number, number_string, base);
    efe4:	461a      	mov	r2, r3
    efe6:	4669      	mov	r1, sp
    efe8:	f7ff ffbe 	bl	ef68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    efec:	466a      	mov	r2, sp
    efee:	4629      	mov	r1, r5
    eff0:	4620      	mov	r0, r4
    eff2:	f7ff ffa5 	bl	ef40 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
    eff6:	b00d      	add	sp, #52	; 0x34
    eff8:	bd30      	pop	{r4, r5, pc}

0000effa <_ZN12_GLOBAL__N_111FormatInt32EPci>:
int FormatInt32(char* output, int32_t i) {
    effa:	b510      	push	{r4, lr}
    effc:	4604      	mov	r4, r0
    effe:	4608      	mov	r0, r1
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
    f000:	4621      	mov	r1, r4
    f002:	f7ff ffcf 	bl	efa4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
}
    f006:	1b00      	subs	r0, r0, r4
    f008:	bd10      	pop	{r4, pc}

0000f00a <_ZN12_GLOBAL__N_112FormatUInt32EPcj>:
int FormatUInt32(char* output, uint32_t i) {
    f00a:	b510      	push	{r4, lr}
    f00c:	4604      	mov	r4, r0
    f00e:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    f010:	220a      	movs	r2, #10
    f012:	4621      	mov	r1, r4
    f014:	f7ff ffa8 	bl	ef68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
    f018:	1b00      	subs	r0, r0, r4
    f01a:	bd10      	pop	{r4, pc}

0000f01c <_ZN12_GLOBAL__N_19FormatHexEPcj>:
int FormatHex(char* output, uint32_t i) {
    f01c:	b510      	push	{r4, lr}
    f01e:	4604      	mov	r4, r0
    f020:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    f022:	2210      	movs	r2, #16
    f024:	4621      	mov	r1, r4
    f026:	f7ff ff9f 	bl	ef68 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
    f02a:	1b00      	subs	r0, r0, r4
    f02c:	bd10      	pop	{r4, pc}

0000f02e <_ZN12_GLOBAL__N_111FormatFloatEPcf>:
int FormatFloat(char* output, float i) {
    f02e:	b510      	push	{r4, lr}
    f030:	4604      	mov	r4, r0
    f032:	4608      	mov	r0, r1
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
    f034:	4621      	mov	r1, r4
    f036:	f7f6 ff65 	bl	5f04 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
}
    f03a:	1b00      	subs	r0, r0, r4
    f03c:	bd10      	pop	{r4, pc}

0000f03e <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
    f03e:	4602      	mov	r2, r0
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
    f040:	2300      	movs	r3, #0
  int result = 1;
    f042:	2001      	movs	r0, #1
  for (int i = 0; i < dims.size; ++i) {
    f044:	6811      	ldr	r1, [r2, #0]
    f046:	4299      	cmp	r1, r3
    f048:	dd06      	ble.n	f058 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
    f04a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    f04e:	6849      	ldr	r1, [r1, #4]
    f050:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
    f054:	3301      	adds	r3, #1
    f056:	e7f5      	b.n	f044 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x6>
  }
  return result;
}
    f058:	4770      	bx	lr

0000f05a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
    f05a:	b538      	push	{r3, r4, r5, lr}
    f05c:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    f05e:	f7fe fcfb 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    f062:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    f064:	4628      	mov	r0, r5
    f066:	f7fe fcfd 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f06a:	280a      	cmp	r0, #10
    f06c:	d90e      	bls.n	f08c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
    f06e:	f105 000a 	add.w	r0, r5, #10
    f072:	f7fe fcf7 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    f076:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    f078:	b150      	cbz	r0, f090 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x36>
    f07a:	4620      	mov	r0, r4
    f07c:	f7fe fce6 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    f080:	4420      	add	r0, r4
  if (subgraph->operators() != nullptr) {
    f082:	b138      	cbz	r0, f094 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x3a>
  uoffset_t size() const { return EndianScalar(length_); }
    f084:	6800      	ldr	r0, [r0, #0]
    f086:	f7fe fce0 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    f08a:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f08c:	2000      	movs	r0, #0
    f08e:	e7f2      	b.n	f076 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    f090:	2000      	movs	r0, #0
    f092:	e7f6      	b.n	f082 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    return 0;
    f094:	2000      	movs	r0, #0
    f096:	e7f8      	b.n	f08a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>

0000f098 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
    f098:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
    f09a:	7800      	ldrb	r0, [r0, #0]
    f09c:	f7ff ff3f 	bl	ef1e <_ZN11flatbuffers12EndianScalarIhEET_S1_>
}
    f0a0:	bd08      	pop	{r3, pc}

0000f0a2 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
}
    f0a2:	4770      	bx	lr

0000f0a4 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
    f0a4:	4770      	bx	lr

0000f0a6 <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
    f0a6:	4770      	bx	lr

0000f0a8 <_ZN6tflite10MicroGraphD0Ev>:
    f0a8:	b510      	push	{r4, lr}
    f0aa:	4604      	mov	r4, r0
    f0ac:	f000 ffbb 	bl	10026 <_ZdlPv>
    f0b0:	4620      	mov	r0, r4
    f0b2:	bd10      	pop	{r4, pc}

0000f0b4 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
    f0b4:	6101      	str	r1, [r0, #16]
}
    f0b6:	4770      	bx	lr

0000f0b8 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
    f0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f0bc:	4606      	mov	r6, r0
  int previous_subgraph_idx = current_subgraph_index_;
    f0be:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    f0c2:	2700      	movs	r7, #0
    f0c4:	e017      	b.n	f0f6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3e>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
    f0c6:	6961      	ldr	r1, [r4, #20]
        init_data_size = 0;
    f0c8:	2200      	movs	r2, #0
      if (registration->init) {
    f0ca:	681b      	ldr	r3, [r3, #0]
    f0cc:	b113      	cbz	r3, f0d4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1c>
            registration->init(context_, init_data, init_data_size);
    f0ce:	6870      	ldr	r0, [r6, #4]
    f0d0:	4798      	blx	r3
        node->user_data =
    f0d2:	6120      	str	r0, [r4, #16]
    for (size_t i = 0; i < operators_size; ++i) {
    f0d4:	3501      	adds	r5, #1
    f0d6:	4545      	cmp	r5, r8
    f0d8:	d20c      	bcs.n	f0f4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    f0da:	6933      	ldr	r3, [r6, #16]
    f0dc:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
    f0e0:	242c      	movs	r4, #44	; 0x2c
    f0e2:	fb04 3405 	mla	r4, r4, r5, r3
      const TfLiteRegistration* registration =
    f0e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    f0e8:	695a      	ldr	r2, [r3, #20]
    f0ea:	2a20      	cmp	r2, #32
    f0ec:	d1eb      	bne.n	f0c6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
    f0ee:	69a1      	ldr	r1, [r4, #24]
        init_data_size = node->custom_initial_data_size;
    f0f0:	69e2      	ldr	r2, [r4, #28]
    f0f2:	e7ea      	b.n	f0ca <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    f0f4:	3701      	adds	r7, #1
    f0f6:	69b3      	ldr	r3, [r6, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    f0f8:	6818      	ldr	r0, [r3, #0]
    f0fa:	f7fe fca6 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    f0fe:	4287      	cmp	r7, r0
    f100:	d207      	bcs.n	f112 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
    f102:	6177      	str	r7, [r6, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    f104:	4639      	mov	r1, r7
    f106:	68b0      	ldr	r0, [r6, #8]
    f108:	f7f7 f852 	bl	61b0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    f10c:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
    f10e:	2500      	movs	r5, #0
    f110:	e7e1      	b.n	f0d6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1e>
  current_subgraph_index_ = previous_subgraph_idx;
    f112:	f8c6 9014 	str.w	r9, [r6, #20]
}
    f116:	2000      	movs	r0, #0
    f118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f11c <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
    f11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f120:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    f122:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    f126:	2600      	movs	r6, #0
    f128:	e013      	b.n	f152 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x36>
    for (size_t i = 0; i < operators_size; ++i) {
    f12a:	3401      	adds	r4, #1
    f12c:	42bc      	cmp	r4, r7
    f12e:	d20f      	bcs.n	f150 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x34>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    f130:	692b      	ldr	r3, [r5, #16]
    f132:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
    f136:	232c      	movs	r3, #44	; 0x2c
    f138:	fb03 2304 	mla	r3, r3, r4, r2
      const TfLiteRegistration* registration =
    f13c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
    f13e:	2a00      	cmp	r2, #0
    f140:	d0f3      	beq.n	f12a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
    f142:	6852      	ldr	r2, [r2, #4]
    f144:	2a00      	cmp	r2, #0
    f146:	d0f0      	beq.n	f12a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
        registration->free(context_, node->user_data);
    f148:	6919      	ldr	r1, [r3, #16]
    f14a:	6868      	ldr	r0, [r5, #4]
    f14c:	4790      	blx	r2
    f14e:	e7ec      	b.n	f12a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    f150:	3601      	adds	r6, #1
    f152:	69ab      	ldr	r3, [r5, #24]
    f154:	6818      	ldr	r0, [r3, #0]
    f156:	f7fe fc78 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    f15a:	4286      	cmp	r6, r0
    f15c:	d207      	bcs.n	f16e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x52>
    current_subgraph_index_ = subgraph_idx;
    f15e:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    f160:	4631      	mov	r1, r6
    f162:	68a8      	ldr	r0, [r5, #8]
    f164:	f7f7 f824 	bl	61b0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    f168:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    f16a:	2400      	movs	r4, #0
    f16c:	e7de      	b.n	f12c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
    f16e:	f8c5 8014 	str.w	r8, [r5, #20]
}
    f172:	2000      	movs	r0, #0
    f174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f178 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
    f178:	b538      	push	{r3, r4, r5, lr}
    f17a:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    f17c:	4620      	mov	r0, r4
    f17e:	f7fe fc6b 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    f182:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    f184:	4628      	mov	r0, r5
    f186:	f7fe fc6d 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f18a:	2808      	cmp	r0, #8
    f18c:	d90d      	bls.n	f1aa <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x32>
    f18e:	f105 0008 	add.w	r0, r5, #8
    f192:	f7fe fc67 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    f196:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    f198:	b148      	cbz	r0, f1ae <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x36>
    f19a:	4620      	mov	r0, r4
    f19c:	f7fe fc56 	bl	da4c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    f1a0:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    f1a2:	6820      	ldr	r0, [r4, #0]
    f1a4:	f7fe fc51 	bl	da4a <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    f1a8:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f1aa:	2000      	movs	r0, #0
    f1ac:	e7f3      	b.n	f196 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    f1ae:	2400      	movs	r4, #0
    f1b0:	e7f7      	b.n	f1a2 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x2a>

0000f1b2 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
    f1b2:	b508      	push	{r3, lr}
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
    f1b4:	68c3      	ldr	r3, [r0, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
    f1b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f1b8:	6803      	ldr	r3, [r0, #0]
    f1ba:	68db      	ldr	r3, [r3, #12]
    f1bc:	4798      	blx	r3
}
    f1be:	bd08      	pop	{r3, pc}

0000f1c0 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:
  return interpreter->allocator_.RequestScratchBufferInArena(
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
    f1c0:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
    f1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  return handle->data;
}
    f1c6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    f1ca:	4770      	bx	lr

0000f1cc <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
    f1cc:	b570      	push	{r4, r5, r6, lr}
    f1ce:	b082      	sub	sp, #8
    f1d0:	460b      	mov	r3, r1
  MicroInterpreter* interpreter =
    f1d2:	68c4      	ldr	r4, [r0, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
    f1d4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
    f1d6:	6802      	ldr	r2, [r0, #0]
    f1d8:	6855      	ldr	r5, [r2, #4]
    f1da:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
    f1dc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  return interpreter->allocator_.AllocateTempTfLiteTensor(
    f1e0:	6821      	ldr	r1, [r4, #0]
    f1e2:	9600      	str	r6, [sp, #0]
    f1e4:	47a8      	blx	r5
}
    f1e6:	b002      	add	sp, #8
    f1e8:	bd70      	pop	{r4, r5, r6, pc}

0000f1ea <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
    f1ea:	68c2      	ldr	r2, [r0, #12]
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    f1ec:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
    f1ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
    f1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
              .tensors[tensor_idx];
    f1f6:	6858      	ldr	r0, [r3, #4]
    f1f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    f1fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    f200:	4770      	bx	lr

0000f202 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
    f202:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
    f204:	336c      	adds	r3, #108	; 0x6c
    f206:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
}
    f208:	2000      	movs	r0, #0
    f20a:	4770      	bx	lr

0000f20c <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                           int* buffer_idx) {
    f20c:	b508      	push	{r3, lr}
    f20e:	4613      	mov	r3, r2
  MicroInterpreter* interpreter =
    f210:	68c0      	ldr	r0, [r0, #12]
  return interpreter->allocator_.RequestScratchBufferInArena(
    f212:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    f216:	6e80      	ldr	r0, [r0, #104]	; 0x68
    f218:	f7f8 f968 	bl	74ec <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
}
    f21c:	bd08      	pop	{r3, pc}

0000f21e <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
    f21e:	b40e      	push	{r1, r2, r3}
    f220:	b500      	push	{lr}
    f222:	b082      	sub	sp, #8
    f224:	aa03      	add	r2, sp, #12
    f226:	f852 1b04 	ldr.w	r1, [r2], #4
  MicroInterpreter* interpreter =
    f22a:	68c3      	ldr	r3, [r0, #12]
  va_start(args, format);
    f22c:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
    f22e:	6898      	ldr	r0, [r3, #8]
    f230:	6803      	ldr	r3, [r0, #0]
    f232:	689b      	ldr	r3, [r3, #8]
    f234:	4798      	blx	r3
}
    f236:	b002      	add	sp, #8
    f238:	f85d eb04 	ldr.w	lr, [sp], #4
    f23c:	b003      	add	sp, #12
    f23e:	4770      	bx	lr

0000f240 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
    f240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f244:	4604      	mov	r4, r0
    f246:	460d      	mov	r5, r1
    f248:	461e      	mov	r6, r3
    f24a:	f8dd 801c 	ldr.w	r8, [sp, #28]
      output_tensors_(nullptr) {
    f24e:	6001      	str	r1, [r0, #0]
    f250:	6042      	str	r2, [r0, #4]
    f252:	f8c0 8008 	str.w	r8, [r0, #8]
    f256:	f100 070c 	add.w	r7, r0, #12
    f25a:	225c      	movs	r2, #92	; 0x5c
    f25c:	2100      	movs	r1, #0
    f25e:	4638      	mov	r0, r7
    f260:	f000 ff11 	bl	10086 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    f264:	4642      	mov	r2, r8
    f266:	9906      	ldr	r1, [sp, #24]
    f268:	4630      	mov	r0, r6
    f26a:	f000 f90a 	bl	f482 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
    f26e:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
    f270:	66a0      	str	r0, [r4, #104]	; 0x68
    f272:	462a      	mov	r2, r5
    f274:	4639      	mov	r1, r7
    f276:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    f27a:	f7f7 f88f 	bl	639c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
    f27e:	2300      	movs	r3, #0
    f280:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    f284:	2201      	movs	r2, #1
    f286:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
    f28a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    f28e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    f292:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  Init(profiler);
    f296:	9908      	ldr	r1, [sp, #32]
    f298:	4620      	mov	r0, r4
    f29a:	f7f7 fb0f 	bl	68bc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
    f29e:	4620      	mov	r0, r4
    f2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f2a4 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
    f2a4:	b510      	push	{r4, lr}
    f2a6:	4604      	mov	r4, r0
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    f2a8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  if (graph_.GetAllocations() != nullptr) {
    f2aa:	b113      	cbz	r3, f2b2 <_ZN6tflite16MicroInterpreterD1Ev+0xe>
    graph_.FreeSubgraphs();
    f2ac:	306c      	adds	r0, #108	; 0x6c
    f2ae:	f7ff ff35 	bl	f11c <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
    f2b2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    f2b6:	f7ff fef6 	bl	f0a6 <_ZN6tflite10MicroGraphD1Ev>
}
    f2ba:	4620      	mov	r0, r4
    f2bc:	bd10      	pop	{r4, pc}

0000f2be <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
    f2be:	b508      	push	{r3, lr}
  return graph_.ResetVariableTensors();
    f2c0:	306c      	adds	r0, #108	; 0x6c
    f2c2:	f7f7 fa07 	bl	66d4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
    f2c6:	bd08      	pop	{r3, pc}

0000f2c8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  void* Allocate(size_t size, size_t alignment_hint) override {
    f2c8:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
    f2ca:	6840      	ldr	r0, [r0, #4]
    f2cc:	6803      	ldr	r3, [r0, #0]
    f2ce:	68db      	ldr	r3, [r3, #12]
    f2d0:	4798      	blx	r3
  }
    f2d2:	bd08      	pop	{r3, pc}

0000f2d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
    f2d4:	4770      	bx	lr

0000f2d6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
    f2d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    f2d8:	6844      	ldr	r4, [r0, #4]
    f2da:	6843      	ldr	r3, [r0, #4]
    f2dc:	6885      	ldr	r5, [r0, #8]
    f2de:	441d      	add	r5, r3
    f2e0:	42a5      	cmp	r5, r4
    f2e2:	d91a      	bls.n	f31a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x44>
        &(scratch_buffer_requests[i - tensor_count_]);
    f2e4:	1ae3      	subs	r3, r4, r3
    internal::ScratchBufferRequest* current_request =
    f2e6:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
    ScratchBufferHandle* current_handle =
    f2ea:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    AllocationInfo* current = &info_[i];
    f2ee:	6806      	ldr	r6, [r0, #0]
    f2f0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    f2f4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
    f2f8:	f8c5 e004 	str.w	lr, [r5, #4]
    current->bytes = current_request->bytes;
    f2fc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    f300:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    current->first_created = current_request->node_idx;
    f304:	f8dc 3004 	ldr.w	r3, [ip, #4]
    f308:	60ab      	str	r3, [r5, #8]
    current->last_used = current_request->node_idx;
    f30a:	60eb      	str	r3, [r5, #12]
    current->offline_offset = kOnlinePlannedBuffer;
    f30c:	f04f 33ff 	mov.w	r3, #4294967295
    f310:	612b      	str	r3, [r5, #16]
    current->needs_allocating = true;
    f312:	2301      	movs	r3, #1
    f314:	752b      	strb	r3, [r5, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    f316:	441c      	add	r4, r3
    f318:	e7df      	b.n	f2da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x4>
}
    f31a:	2000      	movs	r0, #0
    f31c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f31e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
    f31e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f322:	b085      	sub	sp, #20
    f324:	9001      	str	r0, [sp, #4]
    f326:	4688      	mov	r8, r1
    f328:	4693      	mov	fp, r2
    f32a:	461f      	mov	r7, r3
    f32c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  for (size_t i = 0; i < allocation_info_size; ++i) {
    f330:	2400      	movs	r4, #0
  int planner_index = 0;
    f332:	4626      	mov	r6, r4
    f334:	e000      	b.n	f338 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x1a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    f336:	3401      	adds	r4, #1
    f338:	454c      	cmp	r4, r9
    f33a:	d21a      	bcs.n	f372 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x54>
    const AllocationInfo* current = &allocation_info[i];
    f33c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    f340:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    if (current->needs_allocating) {
    f344:	7d2b      	ldrb	r3, [r5, #20]
    f346:	2b00      	cmp	r3, #0
    f348:	d0f5      	beq.n	f336 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
      int offset = -1;
    f34a:	f04f 33ff 	mov.w	r3, #4294967295
    f34e:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
    f350:	f8d8 3000 	ldr.w	r3, [r8]
    f354:	f8d3 a014 	ldr.w	sl, [r3, #20]
    f358:	ab03      	add	r3, sp, #12
    f35a:	4632      	mov	r2, r6
    f35c:	9901      	ldr	r1, [sp, #4]
    f35e:	4640      	mov	r0, r8
    f360:	47d0      	blx	sl
    f362:	4603      	mov	r3, r0
    f364:	b930      	cbnz	r0, f374 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x56>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    f366:	686a      	ldr	r2, [r5, #4]
    f368:	9b03      	ldr	r3, [sp, #12]
    f36a:	445b      	add	r3, fp
    f36c:	6013      	str	r3, [r2, #0]
      ++planner_index;
    f36e:	3601      	adds	r6, #1
    f370:	e7e1      	b.n	f336 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
  return kTfLiteOk;
    f372:	2300      	movs	r3, #0
}
    f374:	4618      	mov	r0, r3
    f376:	b005      	add	sp, #20
    f378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f37c <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
    f37c:	4770      	bx	lr

0000f37e <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
    f37e:	b508      	push	{r3, lr}
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    f380:	6840      	ldr	r0, [r0, #4]
    f382:	6803      	ldr	r3, [r0, #0]
    f384:	68db      	ldr	r3, [r3, #12]
    f386:	2210      	movs	r2, #16
    f388:	4798      	blx	r3
}
    f38a:	bd08      	pop	{r3, pc}

0000f38c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
void MicroAllocator::ResetTempAllocations() {
    f38c:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
    f38e:	6840      	ldr	r0, [r0, #4]
    f390:	6803      	ldr	r3, [r0, #0]
    f392:	695b      	ldr	r3, [r3, #20]
    f394:	4798      	blx	r3
}
    f396:	bd08      	pop	{r3, pc}

0000f398 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
    f398:	b508      	push	{r3, lr}
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    f39a:	6840      	ldr	r0, [r0, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    f39c:	6803      	ldr	r3, [r0, #0]
    f39e:	68db      	ldr	r3, [r3, #12]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    f3a0:	2204      	movs	r2, #4
    f3a2:	2140      	movs	r1, #64	; 0x40
    f3a4:	4798      	blx	r3
}
    f3a6:	bd08      	pop	{r3, pc}

0000f3a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    f3a8:	4770      	bx	lr

0000f3aa <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
    f3aa:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
    f3ac:	b161      	cbz	r1, f3c8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
    f3ae:	4613      	mov	r3, r2
    f3b0:	460c      	mov	r4, r1

  if (scratch_buffer_request_count_ == 0) {
    f3b2:	6942      	ldr	r2, [r0, #20]
    f3b4:	b132      	cbz	r2, f3c4 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
    f3b6:	6840      	ldr	r0, [r0, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
    f3b8:	6802      	ldr	r2, [r0, #0]
    f3ba:	68d5      	ldr	r5, [r2, #12]
      memory_allocator_->AllocateFromTail(
    f3bc:	2204      	movs	r2, #4
    f3be:	0099      	lsls	r1, r3, #2
    f3c0:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
    f3c2:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
    f3c4:	2000      	movs	r0, #0
    f3c6:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
    f3c8:	f000 fe44 	bl	10054 <abort>

0000f3cc <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
    f3cc:	b510      	push	{r4, lr}
    f3ce:	4604      	mov	r4, r0
    f3d0:	f000 fe29 	bl	10026 <_ZdlPv>
    f3d4:	4620      	mov	r0, r4
    f3d6:	bd10      	pop	{r4, pc}

0000f3d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    f3d8:	b510      	push	{r4, lr}
    f3da:	4604      	mov	r4, r0
    f3dc:	f000 fe23 	bl	10026 <_ZdlPv>
    f3e0:	4620      	mov	r0, r4
    f3e2:	bd10      	pop	{r4, pc}

0000f3e4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
    f3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f3e8:	b082      	sub	sp, #8
    f3ea:	4682      	mov	sl, r0
    f3ec:	4689      	mov	r9, r1
    f3ee:	4617      	mov	r7, r2
    f3f0:	4698      	mov	r8, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
    f3f2:	2500      	movs	r5, #0
    f3f4:	e00a      	b.n	f40c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x28>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    f3f6:	68e1      	ldr	r1, [r4, #12]
    f3f8:	9301      	str	r3, [sp, #4]
    f3fa:	9100      	str	r1, [sp, #0]
    f3fc:	68a3      	ldr	r3, [r4, #8]
    f3fe:	4651      	mov	r1, sl
    f400:	4648      	mov	r0, r9
    f402:	f000 f8c9 	bl	f598 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
    f406:	4603      	mov	r3, r0
    f408:	bb08      	cbnz	r0, f44e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    f40a:	3501      	adds	r5, #1
    f40c:	4545      	cmp	r5, r8
    f40e:	d21d      	bcs.n	f44c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x68>
    const AllocationInfo* current = &allocation_info[i];
    f410:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    f414:	00e3      	lsls	r3, r4, #3
    f416:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    if (current->needs_allocating) {
    f41a:	7d26      	ldrb	r6, [r4, #20]
    f41c:	2e00      	cmp	r6, #0
    f41e:	d0f4      	beq.n	f40a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
          AlignSizeUp(current->bytes, kBufferAlignment);
    f420:	2110      	movs	r1, #16
    f422:	58f8      	ldr	r0, [r7, r3]
    f424:	f7ff fd09 	bl	ee3a <_ZN6tflite11AlignSizeUpEjj>
    f428:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    f42a:	6923      	ldr	r3, [r4, #16]
    f42c:	f1b3 3fff 	cmp.w	r3, #4294967295
    f430:	d1e1      	bne.n	f3f6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
        TF_LITE_ENSURE_STATUS(
    f432:	f8d9 3000 	ldr.w	r3, [r9]
    f436:	689e      	ldr	r6, [r3, #8]
    f438:	68e3      	ldr	r3, [r4, #12]
    f43a:	9300      	str	r3, [sp, #0]
    f43c:	68a3      	ldr	r3, [r4, #8]
    f43e:	4651      	mov	r1, sl
    f440:	4648      	mov	r0, r9
    f442:	47b0      	blx	r6
    f444:	4603      	mov	r3, r0
    f446:	2800      	cmp	r0, #0
    f448:	d0df      	beq.n	f40a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
    f44a:	e000      	b.n	f44e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  return kTfLiteOk;
    f44c:	2300      	movs	r3, #0
}
    f44e:	4618      	mov	r0, r3
    f450:	b002      	add	sp, #8
    f452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f456 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    f456:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
    f458:	b178      	cbz	r0, f47a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x24>
    f45a:	460c      	mov	r4, r1
    f45c:	4605      	mov	r5, r0
  TFLITE_DCHECK(error_reporter != nullptr);
    f45e:	b171      	cbz	r1, f47e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      sizeof(MicroAllocator), alignof(MicroAllocator));
    f460:	6803      	ldr	r3, [r0, #0]
    f462:	68db      	ldr	r3, [r3, #12]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
    f464:	2204      	movs	r2, #4
    f466:	211c      	movs	r1, #28
    f468:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    f46a:	4606      	mov	r6, r0
    f46c:	b118      	cbz	r0, f476 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x20>
    f46e:	4622      	mov	r2, r4
    f470:	4629      	mov	r1, r5
    f472:	f7f8 f82d 	bl	74d0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
    f476:	4630      	mov	r0, r6
    f478:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
    f47a:	f000 fdeb 	bl	10054 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    f47e:	f000 fde9 	bl	10054 <abort>

0000f482 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    f482:	b570      	push	{r4, r5, r6, lr}
    f484:	4604      	mov	r4, r0
    f486:	460e      	mov	r6, r1
    f488:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    f48a:	2110      	movs	r1, #16
    f48c:	f7ff fcc9 	bl	ee22 <_ZN6tflite14AlignPointerUpEPhj>
    f490:	4601      	mov	r1, r0
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    f492:	4434      	add	r4, r6
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    f494:	1a22      	subs	r2, r4, r0
    f496:	4628      	mov	r0, r5
    f498:	f7f6 fc62 	bl	5d60 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
    f49c:	4629      	mov	r1, r5
    f49e:	f7ff ffda 	bl	f456 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
    f4a2:	bd70      	pop	{r4, r5, r6, pc}

0000f4a4 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
    f4a4:	b508      	push	{r3, lr}
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
    f4a6:	2300      	movs	r3, #0
    f4a8:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    f4aa:	6840      	ldr	r0, [r0, #4]
    f4ac:	6803      	ldr	r3, [r0, #0]
    f4ae:	689b      	ldr	r3, [r3, #8]
    f4b0:	2204      	movs	r2, #4
    f4b2:	2160      	movs	r1, #96	; 0x60
    f4b4:	4798      	blx	r3
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}
    f4b6:	bd08      	pop	{r3, pc}

0000f4b8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
    f4b8:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
    f4ba:	6840      	ldr	r0, [r0, #4]
    f4bc:	f7ff fc8d 	bl	edda <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    f4c0:	2104      	movs	r1, #4
    f4c2:	f7ff fcae 	bl	ee22 <_ZN6tflite14AlignPointerUpEPhj>
                     alignof(internal::ScratchBufferRequest)));
}
    f4c6:	bd08      	pop	{r3, pc}

0000f4c8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
    f4c8:	b570      	push	{r4, r5, r6, lr}
    f4ca:	4605      	mov	r5, r0
    f4cc:	460e      	mov	r6, r1
  ResetTempAllocations();
    f4ce:	6803      	ldr	r3, [r0, #0]
    f4d0:	689b      	ldr	r3, [r3, #8]
    f4d2:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    f4d4:	4628      	mov	r0, r5
    f4d6:	f7ff ffef 	bl	f4b8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    f4da:	2300      	movs	r3, #0
    f4dc:	e000      	b.n	f4e0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
    f4de:	3301      	adds	r3, #1
    f4e0:	6969      	ldr	r1, [r5, #20]
    f4e2:	4299      	cmp	r1, r3
    f4e4:	d907      	bls.n	f4f6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    f4e6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
    f4ea:	6854      	ldr	r4, [r2, #4]
    f4ec:	f1b4 3fff 	cmp.w	r4, #4294967295
    f4f0:	d1f5      	bne.n	f4de <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
      requests[i].node_idx = node_id;
    f4f2:	6056      	str	r6, [r2, #4]
    f4f4:	e7f3      	b.n	f4de <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    f4f6:	6868      	ldr	r0, [r5, #4]
    f4f8:	6803      	ldr	r3, [r0, #0]
    f4fa:	689b      	ldr	r3, [r3, #8]
    f4fc:	310c      	adds	r1, #12
    f4fe:	2204      	movs	r2, #4
    f500:	00c9      	lsls	r1, r1, #3
    f502:	4798      	blx	r3
}
    f504:	bd70      	pop	{r4, r5, r6, pc}

0000f506 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
    f506:	6880      	ldr	r0, [r0, #8]
    f508:	4770      	bx	lr

0000f50a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
    f50a:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
    f50c:	b119      	cbz	r1, f516 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    f50e:	b122      	cbz	r2, f51a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
    f510:	601a      	str	r2, [r3, #0]
}
    f512:	2000      	movs	r0, #0
    f514:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    f516:	f000 fd9d 	bl	10054 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    f51a:	f000 fd9b 	bl	10054 <abort>

0000f51e <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
    TfLiteIntArray** result) {
    f51e:	b508      	push	{r3, lr}
    f520:	4613      	mov	r3, r2
  return internal::FlatBufferVectorToTfLiteTypeArray(
    f522:	460a      	mov	r2, r1
    f524:	68c1      	ldr	r1, [r0, #12]
    f526:	6840      	ldr	r0, [r0, #4]
    f528:	f7ff ffef 	bl	f50a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
}
    f52c:	bd08      	pop	{r3, pc}

0000f52e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
    f52e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
    f530:	b119      	cbz	r1, f53a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    f532:	b122      	cbz	r2, f53e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
    f534:	601a      	str	r2, [r3, #0]
}
    f536:	2000      	movs	r0, #0
    f538:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    f53a:	f000 fd8b 	bl	10054 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    f53e:	f000 fd89 	bl	10054 <abort>

0000f542 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
    f542:	4770      	bx	lr

0000f544 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
    f544:	6880      	ldr	r0, [r0, #8]
    f546:	4770      	bx	lr

0000f548 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
    f548:	b510      	push	{r4, lr}
    f54a:	4604      	mov	r4, r0
}
    f54c:	f000 fd6b 	bl	10026 <_ZdlPv>
    f550:	4620      	mov	r0, r4
    f552:	bd10      	pop	{r4, pc}

0000f554 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
    f554:	b4f0      	push	{r4, r5, r6, r7}
    for (int i = 1; i < size; ++i) {
    f556:	2301      	movs	r3, #1
    any_swapped = false;
    f558:	2700      	movs	r7, #0
    f55a:	e000      	b.n	f55e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
    for (int i = 1; i < size; ++i) {
    f55c:	3301      	adds	r3, #1
    f55e:	4293      	cmp	r3, r2
    f560:	da16      	bge.n	f590 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
      if (values[i - 1] < values[i]) {
    f562:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
    f566:	3c01      	subs	r4, #1
    f568:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    f56c:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
    f570:	42b5      	cmp	r5, r6
    f572:	daf3      	bge.n	f55c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
        values[i - 1] = values[i];
    f574:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        values[i] = value_temp;
    f578:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        const int id_temp = ids[i - 1];
    f57c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        ids[i - 1] = ids[i];
    f580:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
    f584:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
        ids[i] = id_temp;
    f588:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
        any_swapped = true;
    f58c:	2701      	movs	r7, #1
    f58e:	e7e5      	b.n	f55c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
    f590:	2f00      	cmp	r7, #0
    f592:	d1e0      	bne.n	f556 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
    f594:	bcf0      	pop	{r4, r5, r6, r7}
    f596:	4770      	bx	lr

0000f598 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
    f598:	b570      	push	{r4, r5, r6, lr}
    f59a:	b082      	sub	sp, #8
  BufferRequirements* current = &requirements_[buffer_count_];
    f59c:	68c5      	ldr	r5, [r0, #12]
    f59e:	6886      	ldr	r6, [r0, #8]
    f5a0:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    f5a4:	6804      	ldr	r4, [r0, #0]
    f5a6:	68a4      	ldr	r4, [r4, #8]
    f5a8:	9e06      	ldr	r6, [sp, #24]
    f5aa:	9600      	str	r6, [sp, #0]
    f5ac:	47a0      	blx	r4
    f5ae:	b918      	cbnz	r0, f5b8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
    f5b0:	9b07      	ldr	r3, [sp, #28]
    f5b2:	606b      	str	r3, [r5, #4]
}
    f5b4:	b002      	add	sp, #8
    f5b6:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
    f5b8:	2001      	movs	r0, #1
    f5ba:	e7fb      	b.n	f5b4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

0000f5bc <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
    f5bc:	68c0      	ldr	r0, [r0, #12]
    f5be:	6849      	ldr	r1, [r1, #4]
  const BufferRequirements* entry_requirements =
    f5c0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
    f5c4:	6888      	ldr	r0, [r1, #8]
    f5c6:	4298      	cmp	r0, r3
    f5c8:	dc04      	bgt.n	f5d4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x18>
  if (first_time_used > entry_requirements->last_time_used) {
    f5ca:	68cb      	ldr	r3, [r1, #12]
    f5cc:	4293      	cmp	r3, r2
    f5ce:	db03      	blt.n	f5d8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  return true;
    f5d0:	2001      	movs	r0, #1
    f5d2:	4770      	bx	lr
    return false;
    f5d4:	2000      	movs	r0, #0
    f5d6:	4770      	bx	lr
    return false;
    f5d8:	2000      	movs	r0, #0
}
    f5da:	4770      	bx	lr

0000f5dc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
    f5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5de:	4605      	mov	r5, r0
    f5e0:	4616      	mov	r6, r2
    f5e2:	461f      	mov	r7, r3
  if (start == nullptr) {
    f5e4:	b1c9      	cbz	r1, f61a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (start->next_entry_index == -1) {
    f5e6:	688b      	ldr	r3, [r1, #8]
    f5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
    f5ec:	d01c      	beq.n	f628 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4c>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
    f5ee:	6984      	ldr	r4, [r0, #24]
    f5f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f5f4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    f5f8:	463b      	mov	r3, r7
    f5fa:	4632      	mov	r2, r6
    f5fc:	4621      	mov	r1, r4
    f5fe:	4628      	mov	r0, r5
    f600:	f7ff ffdc 	bl	f5bc <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
    f604:	b998      	cbnz	r0, f62e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
    if (candidate_next_entry->next_entry_index == -1) {
    f606:	68a4      	ldr	r4, [r4, #8]
    f608:	f1b4 3fff 	cmp.w	r4, #4294967295
    f60c:	d00e      	beq.n	f62c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x50>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
    f60e:	69a9      	ldr	r1, [r5, #24]
    f610:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    candidate_next_entry =
    f614:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    f618:	e7ee      	b.n	f5f8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
    f61a:	6984      	ldr	r4, [r0, #24]
    f61c:	6a03      	ldr	r3, [r0, #32]
    f61e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f622:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    f626:	e7e7      	b.n	f5f8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
      return nullptr;
    f628:	2400      	movs	r4, #0
    f62a:	e000      	b.n	f62e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
  ListEntry* result = nullptr;
    f62c:	2400      	movs	r4, #0
}
    f62e:	4620      	mov	r0, r4
    f630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f632 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    f632:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f636:	2b00      	cmp	r3, #0
    f638:	f000 80d5 	beq.w	f7e6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b4>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
    f63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f640:	b083      	sub	sp, #12
    f642:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    f644:	6886      	ldr	r6, [r0, #8]
    f646:	2e00      	cmp	r6, #0
    f648:	f000 80ca 	beq.w	f7e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
  need_to_calculate_offsets_ = false;
    f64c:	2000      	movs	r0, #0
    f64e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
    f652:	4603      	mov	r3, r0
    f654:	e00e      	b.n	f674 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x42>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
    f656:	6925      	ldr	r5, [r4, #16]
    f658:	5852      	ldr	r2, [r2, r1]
    f65a:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
    f65e:	6962      	ldr	r2, [r4, #20]
    f660:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
    f664:	68e2      	ldr	r2, [r4, #12]
    f666:	4411      	add	r1, r2
    f668:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f66a:	6849      	ldr	r1, [r1, #4]
    f66c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
    f670:	3001      	adds	r0, #1
  for (int i = 0; i < buffer_count_; ++i) {
    f672:	3301      	adds	r3, #1
    f674:	68a2      	ldr	r2, [r4, #8]
    f676:	429a      	cmp	r2, r3
    f678:	dd15      	ble.n	f6a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    f67a:	68e2      	ldr	r2, [r4, #12]
    f67c:	0119      	lsls	r1, r3, #4
    f67e:	eb02 1503 	add.w	r5, r2, r3, lsl #4
    f682:	686d      	ldr	r5, [r5, #4]
    f684:	f1b5 3fff 	cmp.w	r5, #4294967295
    f688:	d1e5      	bne.n	f656 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      idx_from_tail--;
    f68a:	3e01      	subs	r6, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    f68c:	6925      	ldr	r5, [r4, #16]
    f68e:	5852      	ldr	r2, [r2, r1]
    f690:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
    f694:	6962      	ldr	r2, [r4, #20]
    f696:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      buffer_offsets_[i] = -1;
    f69a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f69c:	f04f 31ff 	mov.w	r1, #4294967295
    f6a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    f6a4:	e7e5      	b.n	f672 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    f6a6:	6923      	ldr	r3, [r4, #16]
                     &buffer_ids_sorted_[idx_from_head],
    f6a8:	6961      	ldr	r1, [r4, #20]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    f6aa:	1a12      	subs	r2, r2, r0
    f6ac:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    f6b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f6b4:	f7ff ff4e 	bl	f554 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  first_entry_index_ = 0;
    f6b8:	2300      	movs	r3, #0
    f6ba:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
    f6bc:	2301      	movs	r3, #1
    f6be:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
    f6c0:	f8d4 a018 	ldr.w	sl, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
    f6c4:	f04f 33ff 	mov.w	r3, #4294967295
    f6c8:	f8ca 3008 	str.w	r3, [sl, #8]
  int buffer_id = buffer_ids_sorted_[0];
    f6cc:	6963      	ldr	r3, [r4, #20]
    f6ce:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
    f6d0:	f8ca 3004 	str.w	r3, [sl, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    f6d4:	68e2      	ldr	r2, [r4, #12]
    f6d6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    f6da:	6852      	ldr	r2, [r2, #4]
    f6dc:	f1b2 3fff 	cmp.w	r2, #4294967295
    f6e0:	d007      	beq.n	f6f2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc0>
  first_entry->offset = buffer_offsets_[buffer_id];
    f6e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6e8:	f8ca 3000 	str.w	r3, [sl]
  for (int i = 1; i < buffer_count_; ++i) {
    f6ec:	f04f 0901 	mov.w	r9, #1
    f6f0:	e036      	b.n	f760 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
    buffer_offsets_[buffer_id] = 0;
    f6f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f6f4:	2100      	movs	r1, #0
    f6f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    f6fa:	e7f2      	b.n	f6e2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb0>
      ListEntry* prior_entry = nullptr;
    f6fc:	2100      	movs	r1, #0
    int candidate_offset = 0;
    f6fe:	460d      	mov	r5, r1
    f700:	f8cd a000 	str.w	sl, [sp]
    f704:	f8cd 9004 	str.w	r9, [sp, #4]
    f708:	4681      	mov	r9, r0
    f70a:	4692      	mov	sl, r2
    f70c:	e004      	b.n	f718 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
        if (next_entry == nullptr) {
    f70e:	b1d9      	cbz	r1, f748 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x116>
        const int gap = next_entry->offset - candidate_offset;
    f710:	680b      	ldr	r3, [r1, #0]
    f712:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
    f714:	459b      	cmp	fp, r3
    f716:	dd12      	ble.n	f73e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
    f718:	460e      	mov	r6, r1
    f71a:	4653      	mov	r3, sl
    f71c:	464a      	mov	r2, r9
    f71e:	4620      	mov	r0, r4
    f720:	f7ff ff5c 	bl	f5dc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
    f724:	4601      	mov	r1, r0
        if (prior_entry) {
    f726:	2e00      	cmp	r6, #0
    f728:	d0f1      	beq.n	f70e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
              &requirements_[prior_entry->requirements_index];
    f72a:	6873      	ldr	r3, [r6, #4]
    f72c:	011a      	lsls	r2, r3, #4
              prior_entry->offset + candidate_requirements->size;
    f72e:	6833      	ldr	r3, [r6, #0]
    f730:	f858 2002 	ldr.w	r2, [r8, r2]
          const int prior_entry_offset =
    f734:	4413      	add	r3, r2
          if (prior_entry_offset > candidate_offset) {
    f736:	429d      	cmp	r5, r3
    f738:	dae9      	bge.n	f70e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
            candidate_offset = prior_entry_offset;
    f73a:	461d      	mov	r5, r3
    f73c:	e7e7      	b.n	f70e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
    f73e:	f8dd a000 	ldr.w	sl, [sp]
    f742:	f8dd 9004 	ldr.w	r9, [sp, #4]
    f746:	e01f      	b.n	f788 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
    f748:	f8dd a000 	ldr.w	sl, [sp]
    f74c:	f8dd 9004 	ldr.w	r9, [sp, #4]
    f750:	e01a      	b.n	f788 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
      first_entry->next_entry_index = first_entry_index_;
    f752:	6a23      	ldr	r3, [r4, #32]
    f754:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
    f758:	6227      	str	r7, [r4, #32]
      first_entry = new_entry;
    f75a:	46e2      	mov	sl, ip
  for (int i = 1; i < buffer_count_; ++i) {
    f75c:	f109 0901 	add.w	r9, r9, #1
    f760:	68a3      	ldr	r3, [r4, #8]
    f762:	454b      	cmp	r3, r9
    f764:	dd3c      	ble.n	f7e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
    f766:	6963      	ldr	r3, [r4, #20]
    f768:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
    f76c:	f8d4 800c 	ldr.w	r8, [r4, #12]
    f770:	013a      	lsls	r2, r7, #4
    f772:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    const int wanted_size = wanted_requirements->size;
    f776:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
    f77a:	689a      	ldr	r2, [r3, #8]
    f77c:	4610      	mov	r0, r2
    const int wanted_last_time_used = wanted_requirements->last_time_used;
    f77e:	68da      	ldr	r2, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    f780:	685d      	ldr	r5, [r3, #4]
    f782:	f1b5 3fff 	cmp.w	r5, #4294967295
    f786:	d0b9      	beq.n	f6fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    buffer_offsets_[buffer_id] = candidate_offset;
    f788:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f78a:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    f78e:	69a2      	ldr	r2, [r4, #24]
    f790:	69e3      	ldr	r3, [r4, #28]
    f792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f796:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
    f79a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
    f79e:	f8cc 7004 	str.w	r7, [ip, #4]
    const int new_entry_index = next_free_entry_;
    f7a2:	69e7      	ldr	r7, [r4, #28]
    ++next_free_entry_;
    f7a4:	1c7b      	adds	r3, r7, #1
    f7a6:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
    f7a8:	f8da 3000 	ldr.w	r3, [sl]
    f7ac:	42ab      	cmp	r3, r5
    f7ae:	dcd0      	bgt.n	f752 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x120>
      ListEntry* current_entry = first_entry;
    f7b0:	4650      	mov	r0, sl
    f7b2:	e000      	b.n	f7b6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
        current_entry = next_entry;
    f7b4:	4630      	mov	r0, r6
        const int next_entry_index = current_entry->next_entry_index;
    f7b6:	6883      	ldr	r3, [r0, #8]
        if (next_entry_index == -1) {
    f7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
    f7bc:	d00c      	beq.n	f7d8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a6>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
    f7be:	69a2      	ldr	r2, [r4, #24]
    f7c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    f7c4:	eb02 0681 	add.w	r6, r2, r1, lsl #2
        if (next_entry->offset > candidate_offset) {
    f7c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    f7cc:	42aa      	cmp	r2, r5
    f7ce:	ddf1      	ble.n	f7b4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x182>
          new_entry->next_entry_index = current_entry->next_entry_index;
    f7d0:	f8cc 3008 	str.w	r3, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
    f7d4:	6087      	str	r7, [r0, #8]
          break;
    f7d6:	e7c1      	b.n	f75c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
          current_entry->next_entry_index = new_entry_index;
    f7d8:	6087      	str	r7, [r0, #8]
          new_entry->next_entry_index = -1;
    f7da:	f8cc 3008 	str.w	r3, [ip, #8]
          break;
    f7de:	e7bd      	b.n	f75c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
}
    f7e0:	b003      	add	sp, #12
    f7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7e6:	4770      	bx	lr

0000f7e8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
    f7e8:	b570      	push	{r4, r5, r6, lr}
    f7ea:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
    f7ec:	f7ff ff21 	bl	f632 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
    f7f0:	68a3      	ldr	r3, [r4, #8]
    f7f2:	b1d3      	cbz	r3, f82a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    f7f4:	69a6      	ldr	r6, [r4, #24]
    f7f6:	6a23      	ldr	r3, [r4, #32]
    f7f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f7fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  size_t max_size = 0;
    f800:	2000      	movs	r0, #0
    f802:	e007      	b.n	f814 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x2c>
    if (entry->next_entry_index == -1) {
    f804:	689b      	ldr	r3, [r3, #8]
    f806:	f1b3 3fff 	cmp.w	r3, #4294967295
    f80a:	d00f      	beq.n	f82c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
    f80c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f810:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (entry) {
    f814:	b153      	cbz	r3, f82c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
        &requirements_[entry->requirements_index];
    f816:	68e5      	ldr	r5, [r4, #12]
    f818:	685a      	ldr	r2, [r3, #4]
    f81a:	0111      	lsls	r1, r2, #4
    const size_t current_size = entry->offset + requirements->size;
    f81c:	681a      	ldr	r2, [r3, #0]
    f81e:	5869      	ldr	r1, [r5, r1]
    f820:	440a      	add	r2, r1
    if (current_size > max_size) {
    f822:	4290      	cmp	r0, r2
    f824:	d2ee      	bcs.n	f804 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
      max_size = current_size;
    f826:	4610      	mov	r0, r2
    f828:	e7ec      	b.n	f804 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
    return 0;
    f82a:	2000      	movs	r0, #0
}
    f82c:	bd70      	pop	{r4, r5, r6, pc}

0000f82e <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
    f82e:	3001      	adds	r0, #1
}
    f830:	0080      	lsls	r0, r0, #2
    f832:	4770      	bx	lr

0000f834 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                             const TfLiteNode* node, int index) {
    f834:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
    f836:	680b      	ldr	r3, [r1, #0]
    f838:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
    f83c:	2a00      	cmp	r2, #0
    f83e:	db10      	blt.n	f862 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
    f840:	428a      	cmp	r2, r1
    f842:	da10      	bge.n	f866 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
    f844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
    f848:	f1b1 3fff 	cmp.w	r1, #4294967295
    f84c:	d00d      	beq.n	f86a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
    f84e:	2900      	cmp	r1, #0
    f850:	db0d      	blt.n	f86e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
    f852:	6883      	ldr	r3, [r0, #8]
    f854:	b113      	cbz	r3, f85c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
    f856:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
    f85a:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
    f85c:	6d03      	ldr	r3, [r0, #80]	; 0x50
    f85e:	4798      	blx	r3
    f860:	e7fb      	b.n	f85a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
    f862:	2000      	movs	r0, #0
    f864:	e7f9      	b.n	f85a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    f866:	2000      	movs	r0, #0
    f868:	e7f7      	b.n	f85a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    f86a:	2000      	movs	r0, #0
    f86c:	e7f5      	b.n	f85a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    f86e:	2000      	movs	r0, #0
  return GetMutableInput(context, node, index);
    f870:	e7f3      	b.n	f85a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>

0000f872 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
    f872:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
    f874:	684b      	ldr	r3, [r1, #4]
    f876:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
    f87a:	2a00      	cmp	r2, #0
    f87c:	db10      	blt.n	f8a0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
    f87e:	4291      	cmp	r1, r2
    f880:	dd10      	ble.n	f8a4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
    f882:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
    f886:	f1b1 3fff 	cmp.w	r1, #4294967295
    f88a:	d00d      	beq.n	f8a8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
    f88c:	2900      	cmp	r1, #0
    f88e:	db0d      	blt.n	f8ac <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
    f890:	6883      	ldr	r3, [r0, #8]
    f892:	b113      	cbz	r3, f89a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
    f894:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
    f898:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
    f89a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    f89c:	4798      	blx	r3
    f89e:	e7fb      	b.n	f898 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
    f8a0:	2000      	movs	r0, #0
    f8a2:	e7f9      	b.n	f898 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    f8a4:	2000      	movs	r0, #0
    f8a6:	e7f7      	b.n	f898 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    f8a8:	2000      	movs	r0, #0
    f8aa:	e7f5      	b.n	f898 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    f8ac:	2000      	movs	r0, #0
    f8ae:	e7f3      	b.n	f898 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>

0000f8b0 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                           const TfLiteNode* node, int index) {
    f8b0:	b508      	push	{r3, lr}
  return GetInput(context, node, index);
    f8b2:	f7ff ffbf 	bl	f834 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
}
    f8b6:	bd08      	pop	{r3, pc}

0000f8b8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  switch (activation) {
    f8b8:	1e43      	subs	r3, r0, #1
    f8ba:	2b04      	cmp	r3, #4
    f8bc:	d804      	bhi.n	f8c8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>
    f8be:	e8df f003 	tbb	[pc, r3]
    f8c2:	0404      	.short	0x0404
    f8c4:	0404      	.short	0x0404
    f8c6:	04          	.byte	0x04
    f8c7:	00          	.byte	0x00
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
    f8c8:	2000      	movs	r0, #0
}
    f8ca:	4770      	bx	lr

0000f8cc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
    f8cc:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
    f8ce:	b118      	cbz	r0, f8d8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
  TFLITE_DCHECK(error_reporter != nullptr);
    f8d0:	b121      	cbz	r1, f8dc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
  TFLITE_DCHECK(allocator != nullptr);
    f8d2:	b12a      	cbz	r2, f8e0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
  TFLITE_DCHECK(builtin_data != nullptr);
    f8d4:	b133      	cbz	r3, f8e4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
}
    f8d6:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op != nullptr);
    f8d8:	f000 fbbc 	bl	10054 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    f8dc:	f000 fbba 	bl	10054 <abort>
  TFLITE_DCHECK(allocator != nullptr);
    f8e0:	f000 fbb8 	bl	10054 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
    f8e4:	f000 fbb6 	bl	10054 <abort>

0000f8e8 <_ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}
    f8e8:	2000      	movs	r0, #0
    f8ea:	4770      	bx	lr

0000f8ec <_ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
// switch-case in ParseOpData because this function is used as part of the
// selective registration for the OpResolver implementation in micro.
TfLiteStatus ParseQuantize(const Operator*, ErrorReporter*,
                           BuiltinDataAllocator*, void**) {
  return kTfLiteOk;
}
    f8ec:	2000      	movs	r0, #0
    f8ee:	4770      	bx	lr

0000f8f0 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
    f8f0:	b40e      	push	{r1, r2, r3}
    f8f2:	b500      	push	{lr}
    f8f4:	b082      	sub	sp, #8
    f8f6:	aa03      	add	r2, sp, #12
    f8f8:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    f8fc:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    f8fe:	6803      	ldr	r3, [r0, #0]
    f900:	689b      	ldr	r3, [r3, #8]
    f902:	4798      	blx	r3
  va_end(args);
  return code;
}
    f904:	b002      	add	sp, #8
    f906:	f85d eb04 	ldr.w	lr, [sp], #4
    f90a:	b003      	add	sp, #12
    f90c:	4770      	bx	lr

0000f90e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
    f90e:	b40c      	push	{r2, r3}
    f910:	b500      	push	{lr}
    f912:	b083      	sub	sp, #12
    f914:	aa04      	add	r2, sp, #16
    f916:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    f91a:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    f91c:	6803      	ldr	r3, [r0, #0]
    f91e:	689b      	ldr	r3, [r3, #8]
    f920:	4798      	blx	r3
  va_end(args);
  return code;
}
    f922:	b003      	add	sp, #12
    f924:	f85d eb04 	ldr.w	lr, [sp], #4
    f928:	b002      	add	sp, #8
    f92a:	4770      	bx	lr

0000f92c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
    f92c:	b570      	push	{r4, r5, r6, lr}
    f92e:	b082      	sub	sp, #8
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
    f930:	b368      	cbz	r0, f98e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x62>
    f932:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    f934:	f7fe f890 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    f938:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    f93a:	4628      	mov	r0, r5
    f93c:	f7fe f892 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f940:	280a      	cmp	r0, #10
    f942:	d926      	bls.n	f992 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
    f944:	f105 000a 	add.w	r0, r5, #10
    f948:	f7fe f88c 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    f94c:	b318      	cbz	r0, f996 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6a>
    f94e:	4420      	add	r0, r4
    f950:	f7fe f882 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
    f954:	b2c5      	uxtb	r5, r0

  return std::max(
      op_code->builtin_code(),
    f956:	f88d 5006 	strb.w	r5, [sp, #6]
    return data_ - ReadScalar<soffset_t>(data_);
    f95a:	4620      	mov	r0, r4
    f95c:	f7fe f87c 	bl	da58 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    f960:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    f962:	4630      	mov	r0, r6
    f964:	f7fe f87e 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f968:	2804      	cmp	r0, #4
    f96a:	d916      	bls.n	f99a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6e>
    f96c:	1d30      	adds	r0, r6, #4
    f96e:	f7fe f879 	bl	da64 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    f972:	b1a0      	cbz	r0, f99e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x72>
    f974:	4420      	add	r0, r4
    f976:	f7ff facc 	bl	ef12 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
    f97a:	b2c0      	uxtb	r0, r0
    f97c:	f88d 0007 	strb.w	r0, [sp, #7]
      if (__a < __b)
    f980:	42a8      	cmp	r0, r5
    f982:	d80e      	bhi.n	f9a2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x76>
      return __a;
    f984:	f10d 0306 	add.w	r3, sp, #6
}
    f988:	7818      	ldrb	r0, [r3, #0]
    f98a:	b002      	add	sp, #8
    f98c:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(op_code != nullptr);
    f98e:	f000 fb61 	bl	10054 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f992:	2000      	movs	r0, #0
    f994:	e7da      	b.n	f94c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    f996:	2000      	movs	r0, #0
    f998:	e7dc      	b.n	f954 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    f99a:	2000      	movs	r0, #0
    f99c:	e7e9      	b.n	f972 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    f99e:	2000      	movs	r0, #0
    f9a0:	e7eb      	b.n	f97a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>
	return __b;
    f9a2:	f10d 0307 	add.w	r3, sp, #7
    f9a6:	e7ef      	b.n	f988 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5c>

0000f9a8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    f9a8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    f9aa:	b108      	cbz	r0, f9b0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x8>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
    f9ac:	6800      	ldr	r0, [r0, #0]
    f9ae:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    f9b0:	f000 fb50 	bl	10054 <abort>

0000f9b4 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    f9b4:	b108      	cbz	r0, f9ba <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x6>
    f9b6:	6800      	ldr	r0, [r0, #0]
    f9b8:	4770      	bx	lr
}
    f9ba:	4770      	bx	lr

0000f9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    f9bc:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    f9be:	b108      	cbz	r0, f9c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
}
    f9c0:	6800      	ldr	r0, [r0, #0]
    f9c2:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    f9c4:	f000 fb46 	bl	10054 <abort>

0000f9c8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    f9c8:	b108      	cbz	r0, f9ce <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x6>
    f9ca:	6800      	ldr	r0, [r0, #0]
    f9cc:	4770      	bx	lr
}
    f9ce:	4770      	bx	lr

0000f9d0 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
}
    f9d0:	4770      	bx	lr

0000f9d2 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>:
}
    f9d2:	4008      	ands	r0, r1
    f9d4:	4770      	bx	lr

0000f9d6 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>:
}
    f9d6:	4108      	asrs	r0, r1
    f9d8:	4770      	bx	lr

0000f9da <_ZN8gemmlowp3AddIiEET_S1_S1_>:
}
    f9da:	4408      	add	r0, r1
    f9dc:	4770      	bx	lr

0000f9de <_ZN8gemmlowp6BitNotIiEET_S1_>:
}
    f9de:	43c0      	mvns	r0, r0
    f9e0:	4770      	bx	lr

0000f9e2 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
    f9e2:	b508      	push	{r3, lr}
  return a ? BitNot(zero) : zero;
    f9e4:	b110      	cbz	r0, f9ec <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_+0xa>
    f9e6:	2000      	movs	r0, #0
    f9e8:	f7ff fff9 	bl	f9de <_ZN8gemmlowp6BitNotIiEET_S1_>
}
    f9ec:	bd08      	pop	{r3, pc}

0000f9ee <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
    f9ee:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a < b);
    f9f0:	4288      	cmp	r0, r1
    f9f2:	bfac      	ite	ge
    f9f4:	2000      	movge	r0, #0
    f9f6:	2001      	movlt	r0, #1
    f9f8:	f7ff fff3 	bl	f9e2 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
    f9fc:	bd08      	pop	{r3, pc}

0000f9fe <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
    f9fe:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a > b);
    fa00:	4288      	cmp	r0, r1
    fa02:	bfd4      	ite	le
    fa04:	2000      	movle	r0, #0
    fa06:	2001      	movgt	r0, #1
    fa08:	f7ff ffeb 	bl	f9e2 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
    fa0c:	bd08      	pop	{r3, pc}

0000fa0e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    fa0e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    fa10:	b108      	cbz	r0, fa16 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x8>
}
    fa12:	6800      	ldr	r0, [r0, #0]
    fa14:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    fa16:	f000 fb1d 	bl	10054 <abort>

0000fa1a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fa1a:	b108      	cbz	r0, fa20 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x6>
    fa1c:	6800      	ldr	r0, [r0, #0]
    fa1e:	4770      	bx	lr
}
    fa20:	4770      	bx	lr

0000fa22 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    fa22:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    fa24:	b108      	cbz	r0, fa2a <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
}
    fa26:	6800      	ldr	r0, [r0, #0]
    fa28:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    fa2a:	f000 fb13 	bl	10054 <abort>

0000fa2e <_ZN6tflite5micro13GetTensorDataIiEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    fa2e:	b108      	cbz	r0, fa34 <_ZN6tflite5micro13GetTensorDataIiEEPT_P16TfLiteEvalTensor+0x6>
    fa30:	6800      	ldr	r0, [r0, #0]
    fa32:	4770      	bx	lr
}
    fa34:	4770      	bx	lr

0000fa36 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
    fa36:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
    fa38:	b108      	cbz	r0, fa3e <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x8>
}
    fa3a:	6800      	ldr	r0, [r0, #0]
    fa3c:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
    fa3e:	f000 fb09 	bl	10054 <abort>

0000fa42 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    fa42:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fa44:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fa46:	b113      	cbz	r3, fa4e <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
    fa48:	2120      	movs	r1, #32
    fa4a:	4798      	blx	r3
}
    fa4c:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fa4e:	f000 fb01 	bl	10054 <abort>

0000fa52 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    fa52:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fa54:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fa56:	b113      	cbz	r3, fa5e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
    fa58:	2120      	movs	r1, #32
    fa5a:	4798      	blx	r3
}
    fa5c:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fa5e:	f000 faf9 	bl	10054 <abort>

0000fa62 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
    fa62:	694a      	ldr	r2, [r1, #20]
    fa64:	4252      	negs	r2, r2
    fa66:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
    fa68:	698a      	ldr	r2, [r1, #24]
    fa6a:	4252      	negs	r2, r2
    fa6c:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
    fa6e:	69ca      	ldr	r2, [r1, #28]
    fa70:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
    fa72:	680a      	ldr	r2, [r1, #0]
    fa74:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
    fa76:	684a      	ldr	r2, [r1, #4]
    fa78:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
    fa7a:	688a      	ldr	r2, [r1, #8]
    fa7c:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
    fa7e:	68ca      	ldr	r2, [r1, #12]
    fa80:	6182      	str	r2, [r0, #24]
  return op_params;
}
    fa82:	4770      	bx	lr

0000fa84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
    fa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa88:	b084      	sub	sp, #16
    fa8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    fa8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
    fa8e:	2a01      	cmp	r2, #1
    fa90:	d103      	bne.n	fa9a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
    fa92:	2000      	movs	r0, #0
}
    fa94:	b004      	add	sp, #16
    fa96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa9a:	4604      	mov	r4, r0
    fa9c:	4688      	mov	r8, r1
    fa9e:	461f      	mov	r7, r3
    double real_multiplier = 0.0;
    faa0:	2200      	movs	r2, #0
    faa2:	2300      	movs	r3, #0
    faa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    faa8:	ab02      	add	r3, sp, #8
    faaa:	9301      	str	r3, [sp, #4]
    faac:	9600      	str	r6, [sp, #0]
    faae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fab2:	4639      	mov	r1, r7
    fab4:	f7f1 fd38 	bl	1528 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    fab8:	2800      	cmp	r0, #0
    faba:	d1eb      	bne.n	fa94 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
    fabc:	1d2b      	adds	r3, r5, #4
    fabe:	462a      	mov	r2, r5
    fac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    fac4:	f7f9 f870 	bl	8ba8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
    fac8:	693b      	ldr	r3, [r7, #16]
    faca:	616b      	str	r3, [r5, #20]
    TFLITE_DCHECK(filter->params.zero_point == 0);
    facc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    face:	691b      	ldr	r3, [r3, #16]
    fad0:	b96b      	cbnz	r3, faee <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
    data->filter_zero_point = filter->params.zero_point;
    fad2:	61ab      	str	r3, [r5, #24]
    data->output_zero_point = output->params.zero_point;
    fad4:	6933      	ldr	r3, [r6, #16]
    fad6:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
    fad8:	f105 030c 	add.w	r3, r5, #12
    fadc:	9300      	str	r3, [sp, #0]
    fade:	f105 0308 	add.w	r3, r5, #8
    fae2:	4632      	mov	r2, r6
    fae4:	4641      	mov	r1, r8
    fae6:	4620      	mov	r0, r4
    fae8:	f7f9 fa0c 	bl	8f04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_max);
    faec:	e7d2      	b.n	fa94 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    TFLITE_DCHECK(filter->params.zero_point == 0);
    faee:	f000 fab1 	bl	10054 <abort>

0000faf2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
    TfLiteFusedActivation activation) {
    faf2:	b510      	push	{r4, lr}
    faf4:	4604      	mov	r4, r0
    faf6:	4608      	mov	r0, r1
  CalculateActivationRange(activation, &op_params.float_activation_min,
    faf8:	f104 0220 	add.w	r2, r4, #32
    fafc:	f104 011c 	add.w	r1, r4, #28
    fb00:	f7f9 fbd4 	bl	92ac <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
}
    fb04:	4620      	mov	r0, r4
    fb06:	bd10      	pop	{r4, pc}

0000fb08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
    fb08:	b570      	push	{r4, r5, r6, lr}
    fb0a:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
    fb0c:	b1b9      	cbz	r1, fb3e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    fb0e:	684d      	ldr	r5, [r1, #4]
    fb10:	b1ad      	cbz	r5, fb3e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
    fb12:	f855 6b04 	ldr.w	r6, [r5], #4
    size_ = dimensions_count;
    fb16:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
    fb18:	2e05      	cmp	r6, #5
    fb1a:	dd07      	ble.n	fb2c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
      dims_pointer_ = new int32_t[dimensions_count];
    fb1c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    fb20:	429e      	cmp	r6, r3
    fb22:	d210      	bcs.n	fb46 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3e>
    fb24:	00b0      	lsls	r0, r6, #2
    fb26:	f000 fa93 	bl	10050 <_Znaj>
    fb2a:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fb2c:	6823      	ldr	r3, [r4, #0]
    fb2e:	2b05      	cmp	r3, #5
    fb30:	dd0c      	ble.n	fb4c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x44>
    fb32:	6860      	ldr	r0, [r4, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
    fb34:	00b2      	lsls	r2, r6, #2
    fb36:	4629      	mov	r1, r5
    fb38:	f000 fa97 	bl	1006a <memcpy>
  }
    fb3c:	e001      	b.n	fb42 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
  RuntimeShape() : size_(0) {}
    fb3e:	2300      	movs	r3, #0
    fb40:	6023      	str	r3, [r4, #0]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
    fb42:	4620      	mov	r0, r4
    fb44:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
    fb46:	f04f 30ff 	mov.w	r0, #4294967295
    fb4a:	e7ec      	b.n	fb26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fb4c:	1d20      	adds	r0, r4, #4
    fb4e:	e7f1      	b.n	fb34 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>

0000fb50 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    fb50:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fb52:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fb54:	b113      	cbz	r3, fb5c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
    fb56:	2120      	movs	r1, #32
    fb58:	4798      	blx	r3
}
    fb5a:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    fb5c:	f000 fa7a 	bl	10054 <abort>

0000fb60 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    fb60:	b148      	cbz	r0, fb76 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    fb62:	68c3      	ldr	r3, [r0, #12]
    fb64:	8818      	ldrh	r0, [r3, #0]
    fb66:	f3c0 0008 	ubfx	r0, r0, #0, #9
    fb6a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    fb6e:	bf14      	ite	ne
    fb70:	2000      	movne	r0, #0
    fb72:	2001      	moveq	r0, #1
    fb74:	4770      	bx	lr
		return false;
    fb76:	2000      	movs	r0, #0
}
    fb78:	4770      	bx	lr

0000fb7a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fb7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb7c:	4605      	mov	r5, r0
    fb7e:	460e      	mov	r6, r1
	__asm__ volatile(
    fb80:	f04f 0320 	mov.w	r3, #32
    fb84:	f3ef 8711 	mrs	r7, BASEPRI
    fb88:	f383 8812 	msr	BASEPRI_MAX, r3
    fb8c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    fb90:	f7fc f888 	bl	bca4 <z_impl_z_current_get>
    fb94:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    fb96:	4631      	mov	r1, r6
    fb98:	4628      	mov	r0, r5
    fb9a:	f7ff f8da 	bl	ed52 <k_sys_fatal_error_handler>
	__asm__ volatile(
    fb9e:	f387 8811 	msr	BASEPRI, r7
    fba2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    fba6:	4620      	mov	r0, r4
    fba8:	f7f4 fb1c 	bl	41e4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    fbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fbae <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    fbae:	6902      	ldr	r2, [r0, #16]
    fbb0:	6943      	ldr	r3, [r0, #20]
    fbb2:	431a      	orrs	r2, r3
    fbb4:	f012 0203 	ands.w	r2, r2, #3
    fbb8:	d10d      	bne.n	fbd6 <create_free_list+0x28>
	slab->free_list = NULL;
    fbba:	2100      	movs	r1, #0
    fbbc:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    fbbe:	e005      	b.n	fbcc <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    fbc0:	6981      	ldr	r1, [r0, #24]
    fbc2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    fbc4:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    fbc6:	6901      	ldr	r1, [r0, #16]
    fbc8:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    fbca:	3201      	adds	r2, #1
    fbcc:	68c1      	ldr	r1, [r0, #12]
    fbce:	4291      	cmp	r1, r2
    fbd0:	d8f6      	bhi.n	fbc0 <create_free_list+0x12>
	return 0;
    fbd2:	2000      	movs	r0, #0
    fbd4:	4770      	bx	lr
		return -EINVAL;
    fbd6:	f06f 0015 	mvn.w	r0, #21
}
    fbda:	4770      	bx	lr

0000fbdc <k_mem_slab_init>:
{
    fbdc:	b510      	push	{r4, lr}
    fbde:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    fbe0:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    fbe2:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    fbe4:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    fbe6:	2300      	movs	r3, #0
    fbe8:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    fbea:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
    fbec:	f7ff ffdf 	bl	fbae <create_free_list>
	if (rc < 0) {
    fbf0:	2800      	cmp	r0, #0
    fbf2:	db01      	blt.n	fbf8 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    fbf4:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    fbf6:	6064      	str	r4, [r4, #4]
}
    fbf8:	bd10      	pop	{r4, pc}

0000fbfa <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    fbfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbfc:	4604      	mov	r4, r0
    fbfe:	460d      	mov	r5, r1
	__asm__ volatile(
    fc00:	f04f 0320 	mov.w	r3, #32
    fc04:	f3ef 8611 	mrs	r6, BASEPRI
    fc08:	f383 8812 	msr	BASEPRI_MAX, r3
    fc0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    fc10:	6983      	ldr	r3, [r0, #24]
    fc12:	b163      	cbz	r3, fc2e <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    fc14:	682b      	ldr	r3, [r5, #0]
    fc16:	69a2      	ldr	r2, [r4, #24]
    fc18:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    fc1a:	682b      	ldr	r3, [r5, #0]
    fc1c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    fc1e:	69e3      	ldr	r3, [r4, #28]
    fc20:	3b01      	subs	r3, #1
    fc22:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    fc24:	f386 8811 	msr	BASEPRI, r6
    fc28:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    fc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc2e:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    fc32:	f000 f940 	bl	feb6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    fc36:	2800      	cmp	r0, #0
    fc38:	d0ec      	beq.n	fc14 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    fc3a:	682a      	ldr	r2, [r5, #0]
    fc3c:	2100      	movs	r1, #0
    fc3e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    fc42:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    fc44:	f000 f89c 	bl	fd80 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    fc48:	4631      	mov	r1, r6
    fc4a:	4638      	mov	r0, r7
    fc4c:	f7fb fcce 	bl	b5ec <z_reschedule>
			return;
    fc50:	e7ec      	b.n	fc2c <k_mem_slab_free+0x32>

0000fc52 <setup_thread_stack>:
{
    fc52:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fc54:	3207      	adds	r2, #7
    fc56:	f022 0207 	bic.w	r2, r2, #7
    fc5a:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    fc5e:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    fc62:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    fc66:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    fc6a:	2200      	movs	r2, #0
    fc6c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    fc70:	18c8      	adds	r0, r1, r3
    fc72:	bc10      	pop	{r4}
    fc74:	4770      	bx	lr

0000fc76 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fc76:	f3ef 8005 	mrs	r0, IPSR
}
    fc7a:	3800      	subs	r0, #0
    fc7c:	bf18      	it	ne
    fc7e:	2001      	movne	r0, #1
    fc80:	4770      	bx	lr

0000fc82 <z_impl_k_thread_start>:
{
    fc82:	b508      	push	{r3, lr}
	z_sched_start(thread);
    fc84:	f7fb fddc 	bl	b840 <z_sched_start>
}
    fc88:	bd08      	pop	{r3, pc}

0000fc8a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    fc8a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    fc8c:	2400      	movs	r4, #0
    fc8e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    fc90:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    fc92:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    fc94:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    fc96:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    fc98:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    fc9a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    fc9c:	bc10      	pop	{r4}
    fc9e:	4770      	bx	lr

0000fca0 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
    fca0:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
    fca2:	f7f3 fe23 	bl	38ec <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
    fca6:	f7fe ffdd 	bl	ec64 <sys_clock_idle_exit>
}
    fcaa:	bd08      	pop	{r3, pc}

0000fcac <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
    fcac:	b508      	push	{r3, lr}
	__asm__ volatile(
    fcae:	f04f 0220 	mov.w	r2, #32
    fcb2:	f3ef 8311 	mrs	r3, BASEPRI
    fcb6:	f382 8812 	msr	BASEPRI_MAX, r2
    fcba:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
    fcbe:	f7fb fb09 	bl	b2d4 <pm_save_idle>
    fcc2:	e7f4      	b.n	fcae <idle+0x2>

0000fcc4 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    fcc4:	4288      	cmp	r0, r1
    fcc6:	da00      	bge.n	fcca <new_prio_for_inheritance+0x6>
    fcc8:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    fcca:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    fcce:	db01      	blt.n	fcd4 <new_prio_for_inheritance+0x10>
    fcd0:	4608      	mov	r0, r1
    fcd2:	4770      	bx	lr
    fcd4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    fcd8:	4770      	bx	lr

0000fcda <adjust_owner_prio>:
{
    fcda:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    fcdc:	6880      	ldr	r0, [r0, #8]
    fcde:	f990 300e 	ldrsb.w	r3, [r0, #14]
    fce2:	428b      	cmp	r3, r1
    fce4:	d101      	bne.n	fcea <adjust_owner_prio+0x10>
	return false;
    fce6:	2000      	movs	r0, #0
}
    fce8:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    fcea:	f7fb fdf7 	bl	b8dc <z_set_prio>
    fcee:	e7fb      	b.n	fce8 <adjust_owner_prio+0xe>

0000fcf0 <z_impl_k_mutex_init>:
{
    fcf0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    fcf2:	2000      	movs	r0, #0
    fcf4:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    fcf6:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    fcf8:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    fcfa:	605b      	str	r3, [r3, #4]
}
    fcfc:	4770      	bx	lr

0000fcfe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    fcfe:	b13a      	cbz	r2, fd10 <z_impl_k_sem_init+0x12>
    fd00:	428a      	cmp	r2, r1
    fd02:	d308      	bcc.n	fd16 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    fd04:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    fd06:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    fd08:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    fd0a:	6040      	str	r0, [r0, #4]
	return 0;
    fd0c:	2000      	movs	r0, #0
    fd0e:	4770      	bx	lr
		return -EINVAL;
    fd10:	f06f 0015 	mvn.w	r0, #21
    fd14:	4770      	bx	lr
    fd16:	f06f 0015 	mvn.w	r0, #21
}
    fd1a:	4770      	bx	lr

0000fd1c <thread_active_elsewhere>:
}
    fd1c:	2000      	movs	r0, #0
    fd1e:	4770      	bx	lr

0000fd20 <pended_on_thread>:
}
    fd20:	6880      	ldr	r0, [r0, #8]
    fd22:	4770      	bx	lr

0000fd24 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    fd24:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    fd28:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    fd2c:	4283      	cmp	r3, r0
    fd2e:	d001      	beq.n	fd34 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    fd30:	1ac0      	subs	r0, r0, r3
    fd32:	4770      	bx	lr
	return 0;
    fd34:	2000      	movs	r0, #0
}
    fd36:	4770      	bx	lr

0000fd38 <z_reschedule_irqlock>:
{
    fd38:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fd3a:	4603      	mov	r3, r0
    fd3c:	b920      	cbnz	r0, fd48 <z_reschedule_irqlock+0x10>
    fd3e:	f3ef 8205 	mrs	r2, IPSR
    fd42:	b942      	cbnz	r2, fd56 <z_reschedule_irqlock+0x1e>
    fd44:	2201      	movs	r2, #1
    fd46:	e000      	b.n	fd4a <z_reschedule_irqlock+0x12>
    fd48:	2200      	movs	r2, #0
	if (resched(key)) {
    fd4a:	b932      	cbnz	r2, fd5a <z_reschedule_irqlock+0x22>
	__asm__ volatile(
    fd4c:	f383 8811 	msr	BASEPRI, r3
    fd50:	f3bf 8f6f 	isb	sy
}
    fd54:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fd56:	2200      	movs	r2, #0
    fd58:	e7f7      	b.n	fd4a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    fd5a:	4618      	mov	r0, r3
    fd5c:	f7f3 ffb2 	bl	3cc4 <arch_swap>
	return ret;
    fd60:	e7f8      	b.n	fd54 <z_reschedule_irqlock+0x1c>

0000fd62 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    fd62:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    fd64:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    fd66:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    fd68:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fd6a:	2300      	movs	r3, #0
    fd6c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    fd6e:	604b      	str	r3, [r1, #4]
}
    fd70:	4770      	bx	lr

0000fd72 <z_priq_dumb_best>:
{
    fd72:	4603      	mov	r3, r0
	return list->head == list;
    fd74:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fd76:	4283      	cmp	r3, r0
    fd78:	d000      	beq.n	fd7c <z_priq_dumb_best+0xa>
}
    fd7a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    fd7c:	2000      	movs	r0, #0
	return thread;
    fd7e:	e7fc      	b.n	fd7a <z_priq_dumb_best+0x8>

0000fd80 <z_ready_thread>:
{
    fd80:	b538      	push	{r3, r4, r5, lr}
    fd82:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    fd84:	2300      	movs	r3, #0
	__asm__ volatile(
    fd86:	f04f 0220 	mov.w	r2, #32
    fd8a:	f3ef 8511 	mrs	r5, BASEPRI
    fd8e:	f382 8812 	msr	BASEPRI_MAX, r2
    fd92:	f3bf 8f6f 	isb	sy
    fd96:	e007      	b.n	fda8 <z_ready_thread+0x28>
			ready_thread(thread);
    fd98:	4620      	mov	r0, r4
    fd9a:	f7fb fd11 	bl	b7c0 <ready_thread>
	__asm__ volatile(
    fd9e:	f385 8811 	msr	BASEPRI, r5
    fda2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fda6:	2301      	movs	r3, #1
    fda8:	b92b      	cbnz	r3, fdb6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    fdaa:	4620      	mov	r0, r4
    fdac:	f7ff ffb6 	bl	fd1c <thread_active_elsewhere>
    fdb0:	2800      	cmp	r0, #0
    fdb2:	d1f4      	bne.n	fd9e <z_ready_thread+0x1e>
    fdb4:	e7f0      	b.n	fd98 <z_ready_thread+0x18>
}
    fdb6:	bd38      	pop	{r3, r4, r5, pc}

0000fdb8 <z_thread_timeout>:
{
    fdb8:	b570      	push	{r4, r5, r6, lr}
    fdba:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    fdbc:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    fdc0:	2300      	movs	r3, #0
	__asm__ volatile(
    fdc2:	f04f 0220 	mov.w	r2, #32
    fdc6:	f3ef 8611 	mrs	r6, BASEPRI
    fdca:	f382 8812 	msr	BASEPRI_MAX, r2
    fdce:	f3bf 8f6f 	isb	sy
    fdd2:	e019      	b.n	fe08 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    fdd4:	4628      	mov	r0, r5
    fdd6:	f7ff ffa3 	bl	fd20 <pended_on_thread>
    fdda:	4629      	mov	r1, r5
    fddc:	f7ff ffc1 	bl	fd62 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fde0:	7b6b      	ldrb	r3, [r5, #13]
    fde2:	f023 0302 	bic.w	r3, r3, #2
    fde6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    fde8:	2300      	movs	r3, #0
    fdea:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fdec:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    fdf0:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    fdf4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    fdf8:	4628      	mov	r0, r5
    fdfa:	f7fb fce1 	bl	b7c0 <ready_thread>
	__asm__ volatile(
    fdfe:	f386 8811 	msr	BASEPRI, r6
    fe02:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fe06:	2301      	movs	r3, #1
    fe08:	b94b      	cbnz	r3, fe1e <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    fe0a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    fe0e:	f013 0f28 	tst.w	r3, #40	; 0x28
    fe12:	d1f4      	bne.n	fdfe <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    fe14:	f854 3c10 	ldr.w	r3, [r4, #-16]
    fe18:	2b00      	cmp	r3, #0
    fe1a:	d1db      	bne.n	fdd4 <z_thread_timeout+0x1c>
    fe1c:	e7e6      	b.n	fdec <z_thread_timeout+0x34>
}
    fe1e:	bd70      	pop	{r4, r5, r6, pc}

0000fe20 <add_to_waitq_locked>:
{
    fe20:	b570      	push	{r4, r5, r6, lr}
    fe22:	4605      	mov	r5, r0
    fe24:	460e      	mov	r6, r1
	unready_thread(thread);
    fe26:	f7fb fd29 	bl	b87c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    fe2a:	7b6b      	ldrb	r3, [r5, #13]
    fe2c:	f043 0302 	orr.w	r3, r3, #2
    fe30:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    fe32:	b1b6      	cbz	r6, fe62 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    fe34:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    fe36:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe38:	42a6      	cmp	r6, r4
    fe3a:	d019      	beq.n	fe70 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe3c:	b164      	cbz	r4, fe58 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fe3e:	4621      	mov	r1, r4
    fe40:	4628      	mov	r0, r5
    fe42:	f7ff ff6f 	bl	fd24 <z_sched_prio_cmp>
    fe46:	2800      	cmp	r0, #0
    fe48:	dc0c      	bgt.n	fe64 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fe4a:	b12c      	cbz	r4, fe58 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    fe4c:	6873      	ldr	r3, [r6, #4]
    fe4e:	429c      	cmp	r4, r3
    fe50:	d002      	beq.n	fe58 <add_to_waitq_locked+0x38>
    fe52:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe54:	2c00      	cmp	r4, #0
    fe56:	d1f1      	bne.n	fe3c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    fe58:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    fe5a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    fe5c:	606b      	str	r3, [r5, #4]
	tail->next = node;
    fe5e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    fe60:	6075      	str	r5, [r6, #4]
}
    fe62:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    fe64:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    fe66:	606b      	str	r3, [r5, #4]
	node->next = successor;
    fe68:	602c      	str	r4, [r5, #0]
	prev->next = node;
    fe6a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    fe6c:	6065      	str	r5, [r4, #4]
}
    fe6e:	e7f8      	b.n	fe62 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe70:	2400      	movs	r4, #0
    fe72:	e7e3      	b.n	fe3c <add_to_waitq_locked+0x1c>

0000fe74 <pend>:
{
    fe74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fe78:	4605      	mov	r5, r0
    fe7a:	460f      	mov	r7, r1
    fe7c:	4691      	mov	r9, r2
    fe7e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    fe80:	2400      	movs	r4, #0
	__asm__ volatile(
    fe82:	f04f 0320 	mov.w	r3, #32
    fe86:	f3ef 8611 	mrs	r6, BASEPRI
    fe8a:	f383 8812 	msr	BASEPRI_MAX, r3
    fe8e:	f3bf 8f6f 	isb	sy
    fe92:	b94c      	cbnz	r4, fea8 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    fe94:	4639      	mov	r1, r7
    fe96:	4628      	mov	r0, r5
    fe98:	f7ff ffc2 	bl	fe20 <add_to_waitq_locked>
	__asm__ volatile(
    fe9c:	f386 8811 	msr	BASEPRI, r6
    fea0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fea4:	2401      	movs	r4, #1
    fea6:	e7f4      	b.n	fe92 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    fea8:	464a      	mov	r2, r9
    feaa:	4643      	mov	r3, r8
    feac:	4628      	mov	r0, r5
    feae:	f7fb fb3b 	bl	b528 <add_thread_timeout>
}
    feb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000feb6 <z_unpend_first_thread>:
{
    feb6:	b570      	push	{r4, r5, r6, lr}
    feb8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    feba:	2300      	movs	r3, #0
	__asm__ volatile(
    febc:	f04f 0220 	mov.w	r2, #32
    fec0:	f3ef 8511 	mrs	r5, BASEPRI
    fec4:	f382 8812 	msr	BASEPRI_MAX, r2
    fec8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    fecc:	461c      	mov	r4, r3
    fece:	e013      	b.n	fef8 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    fed0:	f7ff ff26 	bl	fd20 <pended_on_thread>
    fed4:	4621      	mov	r1, r4
    fed6:	f7ff ff44 	bl	fd62 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    feda:	7b63      	ldrb	r3, [r4, #13]
    fedc:	f023 0302 	bic.w	r3, r3, #2
    fee0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    fee2:	2300      	movs	r3, #0
    fee4:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    fee6:	f104 0018 	add.w	r0, r4, #24
    feea:	f000 f826 	bl	ff3a <z_abort_timeout>
	__asm__ volatile(
    feee:	f385 8811 	msr	BASEPRI, r5
    fef2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fef6:	2301      	movs	r3, #1
    fef8:	b933      	cbnz	r3, ff08 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    fefa:	4630      	mov	r0, r6
    fefc:	f7ff ff39 	bl	fd72 <z_priq_dumb_best>
		if (thread != NULL) {
    ff00:	4604      	mov	r4, r0
    ff02:	2800      	cmp	r0, #0
    ff04:	d1e4      	bne.n	fed0 <z_unpend_first_thread+0x1a>
    ff06:	e7f2      	b.n	feee <z_unpend_first_thread+0x38>
}
    ff08:	4620      	mov	r0, r4
    ff0a:	bd70      	pop	{r4, r5, r6, pc}

0000ff0c <remove_timeout>:
{
    ff0c:	b538      	push	{r3, r4, r5, lr}
    ff0e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    ff10:	f7fb ff1a 	bl	bd48 <next>
    ff14:	b148      	cbz	r0, ff2a <remove_timeout+0x1e>
    ff16:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    ff18:	6920      	ldr	r0, [r4, #16]
    ff1a:	6965      	ldr	r5, [r4, #20]
    ff1c:	6913      	ldr	r3, [r2, #16]
    ff1e:	6951      	ldr	r1, [r2, #20]
    ff20:	181b      	adds	r3, r3, r0
    ff22:	eb45 0101 	adc.w	r1, r5, r1
    ff26:	6113      	str	r3, [r2, #16]
    ff28:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    ff2a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    ff2c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    ff2e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ff30:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ff32:	2300      	movs	r3, #0
    ff34:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    ff36:	6063      	str	r3, [r4, #4]
}
    ff38:	bd38      	pop	{r3, r4, r5, pc}

0000ff3a <z_abort_timeout>:
{
    ff3a:	b570      	push	{r4, r5, r6, lr}
    ff3c:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    ff3e:	2300      	movs	r3, #0
	__asm__ volatile(
    ff40:	f04f 0220 	mov.w	r2, #32
    ff44:	f3ef 8611 	mrs	r6, BASEPRI
    ff48:	f382 8812 	msr	BASEPRI_MAX, r2
    ff4c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    ff50:	f06f 0015 	mvn.w	r0, #21
    ff54:	e008      	b.n	ff68 <z_abort_timeout+0x2e>
			remove_timeout(to);
    ff56:	4620      	mov	r0, r4
    ff58:	f7ff ffd8 	bl	ff0c <remove_timeout>
			ret = 0;
    ff5c:	4628      	mov	r0, r5
	__asm__ volatile(
    ff5e:	f386 8811 	msr	BASEPRI, r6
    ff62:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ff66:	2301      	movs	r3, #1
    ff68:	461d      	mov	r5, r3
    ff6a:	b91b      	cbnz	r3, ff74 <z_abort_timeout+0x3a>
	return node->next != NULL;
    ff6c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    ff6e:	2b00      	cmp	r3, #0
    ff70:	d1f1      	bne.n	ff56 <z_abort_timeout+0x1c>
    ff72:	e7f4      	b.n	ff5e <z_abort_timeout+0x24>
}
    ff74:	bd70      	pop	{r4, r5, r6, pc}

0000ff76 <z_get_next_timeout_expiry>:
{
    ff76:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    ff78:	2300      	movs	r3, #0
	__asm__ volatile(
    ff7a:	f04f 0220 	mov.w	r2, #32
    ff7e:	f3ef 8411 	mrs	r4, BASEPRI
    ff82:	f382 8812 	msr	BASEPRI_MAX, r2
    ff86:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    ff8a:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    ff8e:	b93b      	cbnz	r3, ffa0 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    ff90:	f7fb fef2 	bl	bd78 <next_timeout>
	__asm__ volatile(
    ff94:	f384 8811 	msr	BASEPRI, r4
    ff98:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ff9c:	2301      	movs	r3, #1
    ff9e:	e7f6      	b.n	ff8e <z_get_next_timeout_expiry+0x18>
}
    ffa0:	bd10      	pop	{r4, pc}

0000ffa2 <z_set_timeout_expiry>:
{
    ffa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffa4:	4606      	mov	r6, r0
    ffa6:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    ffa8:	2300      	movs	r3, #0
	__asm__ volatile(
    ffaa:	f04f 0220 	mov.w	r2, #32
    ffae:	f3ef 8511 	mrs	r5, BASEPRI
    ffb2:	f382 8812 	msr	BASEPRI_MAX, r2
    ffb6:	f3bf 8f6f 	isb	sy
    ffba:	e00a      	b.n	ffd2 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    ffbc:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    ffbe:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    ffc2:	2801      	cmp	r0, #1
    ffc4:	dd00      	ble.n	ffc8 <z_set_timeout_expiry+0x26>
    ffc6:	b97c      	cbnz	r4, ffe8 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    ffc8:	f385 8811 	msr	BASEPRI, r5
    ffcc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ffd0:	2301      	movs	r3, #1
    ffd2:	461c      	mov	r4, r3
    ffd4:	b97b      	cbnz	r3, fff6 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    ffd6:	f7fb fecf 	bl	bd78 <next_timeout>
			      || (ticks <= next_to);
    ffda:	f1b0 3fff 	cmp.w	r0, #4294967295
    ffde:	d0ed      	beq.n	ffbc <z_set_timeout_expiry+0x1a>
    ffe0:	42b0      	cmp	r0, r6
    ffe2:	dbec      	blt.n	ffbe <z_set_timeout_expiry+0x1c>
    ffe4:	2401      	movs	r4, #1
    ffe6:	e7ea      	b.n	ffbe <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    ffe8:	4639      	mov	r1, r7
    ffea:	42b0      	cmp	r0, r6
    ffec:	bfa8      	it	ge
    ffee:	4630      	movge	r0, r6
    fff0:	f7f5 fa8c 	bl	550c <sys_clock_set_timeout>
    fff4:	e7e8      	b.n	ffc8 <z_set_timeout_expiry+0x26>
}
    fff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fff8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    fff8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    fffa:	f7fb ffef 	bl	bfdc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    fffe:	bd08      	pop	{r3, pc}

00010000 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   10000:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   10002:	f7fb ffeb 	bl	bfdc <sys_clock_tick_get>
}
   10006:	bd08      	pop	{r3, pc}

00010008 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   10008:	b900      	cbnz	r0, 1000c <z_impl_k_busy_wait+0x4>
   1000a:	4770      	bx	lr
{
   1000c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1000e:	f7f4 f9f1 	bl	43f4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   10012:	bd08      	pop	{r3, pc}

00010014 <k_heap_init>:
{
   10014:	b510      	push	{r4, lr}
   10016:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1001a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1001c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1001e:	f7fd ff5a 	bl	ded6 <sys_heap_init>
}
   10022:	bd10      	pop	{r4, pc}

00010024 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   10024:	4770      	bx	lr

00010026 <_ZdlPv>:
   10026:	f7fc badf 	b.w	c5e8 <free>

0001002a <_ZdaPv>:
   1002a:	f7ff bffc 	b.w	10026 <_ZdlPv>

0001002e <_Znwj>:
   1002e:	2801      	cmp	r0, #1
   10030:	bf38      	it	cc
   10032:	2001      	movcc	r0, #1
   10034:	b510      	push	{r4, lr}
   10036:	4604      	mov	r4, r0
   10038:	4620      	mov	r0, r4
   1003a:	f7fc facd 	bl	c5d8 <malloc>
   1003e:	b930      	cbnz	r0, 1004e <_Znwj+0x20>
   10040:	f7fc f9ec 	bl	c41c <_ZSt15get_new_handlerv>
   10044:	b908      	cbnz	r0, 1004a <_Znwj+0x1c>
   10046:	f000 f805 	bl	10054 <abort>
   1004a:	4780      	blx	r0
   1004c:	e7f4      	b.n	10038 <_Znwj+0xa>
   1004e:	bd10      	pop	{r4, pc}

00010050 <_Znaj>:
   10050:	f7ff bfed 	b.w	1002e <_Znwj>

00010054 <abort>:
   10054:	b508      	push	{r3, lr}
   10056:	2006      	movs	r0, #6
   10058:	f7fd f806 	bl	d068 <raise>
   1005c:	2001      	movs	r0, #1
   1005e:	f7f4 f993 	bl	4388 <_exit>

00010062 <atoi>:
   10062:	220a      	movs	r2, #10
   10064:	2100      	movs	r1, #0
   10066:	f7fd b8bd 	b.w	d1e4 <strtol>

0001006a <memcpy>:
   1006a:	440a      	add	r2, r1
   1006c:	4291      	cmp	r1, r2
   1006e:	f100 33ff 	add.w	r3, r0, #4294967295
   10072:	d100      	bne.n	10076 <memcpy+0xc>
   10074:	4770      	bx	lr
   10076:	b510      	push	{r4, lr}
   10078:	f811 4b01 	ldrb.w	r4, [r1], #1
   1007c:	f803 4f01 	strb.w	r4, [r3, #1]!
   10080:	4291      	cmp	r1, r2
   10082:	d1f9      	bne.n	10078 <memcpy+0xe>
   10084:	bd10      	pop	{r4, pc}

00010086 <memset>:
   10086:	4402      	add	r2, r0
   10088:	4603      	mov	r3, r0
   1008a:	4293      	cmp	r3, r2
   1008c:	d100      	bne.n	10090 <memset+0xa>
   1008e:	4770      	bx	lr
   10090:	f803 1b01 	strb.w	r1, [r3], #1
   10094:	e7f9      	b.n	1008a <memset+0x4>

00010096 <__sfputc_r>:
   10096:	6893      	ldr	r3, [r2, #8]
   10098:	3b01      	subs	r3, #1
   1009a:	2b00      	cmp	r3, #0
   1009c:	b410      	push	{r4}
   1009e:	6093      	str	r3, [r2, #8]
   100a0:	da07      	bge.n	100b2 <__sfputc_r+0x1c>
   100a2:	6994      	ldr	r4, [r2, #24]
   100a4:	42a3      	cmp	r3, r4
   100a6:	db01      	blt.n	100ac <__sfputc_r+0x16>
   100a8:	290a      	cmp	r1, #10
   100aa:	d102      	bne.n	100b2 <__sfputc_r+0x1c>
   100ac:	bc10      	pop	{r4}
   100ae:	f7fd b8b9 	b.w	d224 <__swbuf_r>
   100b2:	6813      	ldr	r3, [r2, #0]
   100b4:	1c58      	adds	r0, r3, #1
   100b6:	6010      	str	r0, [r2, #0]
   100b8:	7019      	strb	r1, [r3, #0]
   100ba:	4608      	mov	r0, r1
   100bc:	bc10      	pop	{r4}
   100be:	4770      	bx	lr

000100c0 <__sfputs_r>:
   100c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100c2:	4606      	mov	r6, r0
   100c4:	460f      	mov	r7, r1
   100c6:	4614      	mov	r4, r2
   100c8:	18d5      	adds	r5, r2, r3
   100ca:	42ac      	cmp	r4, r5
   100cc:	d101      	bne.n	100d2 <__sfputs_r+0x12>
   100ce:	2000      	movs	r0, #0
   100d0:	e007      	b.n	100e2 <__sfputs_r+0x22>
   100d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   100d6:	463a      	mov	r2, r7
   100d8:	4630      	mov	r0, r6
   100da:	f7ff ffdc 	bl	10096 <__sfputc_r>
   100de:	1c43      	adds	r3, r0, #1
   100e0:	d1f3      	bne.n	100ca <__sfputs_r+0xa>
   100e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000100e4 <__cvt>:
   100e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100e8:	b088      	sub	sp, #32
   100ea:	2b00      	cmp	r3, #0
   100ec:	461f      	mov	r7, r3
   100ee:	4614      	mov	r4, r2
   100f0:	bfb8      	it	lt
   100f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   100f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   100f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   100fa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   100fe:	bfb6      	itet	lt
   10100:	461f      	movlt	r7, r3
   10102:	2300      	movge	r3, #0
   10104:	232d      	movlt	r3, #45	; 0x2d
   10106:	7013      	strb	r3, [r2, #0]
   10108:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1010a:	f023 0820 	bic.w	r8, r3, #32
   1010e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   10112:	d005      	beq.n	10120 <__cvt+0x3c>
   10114:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   10118:	d100      	bne.n	1011c <__cvt+0x38>
   1011a:	3501      	adds	r5, #1
   1011c:	2302      	movs	r3, #2
   1011e:	e000      	b.n	10122 <__cvt+0x3e>
   10120:	2303      	movs	r3, #3
   10122:	aa07      	add	r2, sp, #28
   10124:	9204      	str	r2, [sp, #16]
   10126:	aa06      	add	r2, sp, #24
   10128:	e9cd a202 	strd	sl, r2, [sp, #8]
   1012c:	e9cd 3500 	strd	r3, r5, [sp]
   10130:	4622      	mov	r2, r4
   10132:	463b      	mov	r3, r7
   10134:	f7f1 fa50 	bl	15d8 <_dtoa_r>
   10138:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1013c:	4606      	mov	r6, r0
   1013e:	d102      	bne.n	10146 <__cvt+0x62>
   10140:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10142:	07db      	lsls	r3, r3, #31
   10144:	d522      	bpl.n	1018c <__cvt+0xa8>
   10146:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1014a:	eb06 0905 	add.w	r9, r6, r5
   1014e:	d110      	bne.n	10172 <__cvt+0x8e>
   10150:	7833      	ldrb	r3, [r6, #0]
   10152:	2b30      	cmp	r3, #48	; 0x30
   10154:	d10a      	bne.n	1016c <__cvt+0x88>
   10156:	2200      	movs	r2, #0
   10158:	2300      	movs	r3, #0
   1015a:	4620      	mov	r0, r4
   1015c:	4639      	mov	r1, r7
   1015e:	f7f0 fc43 	bl	9e8 <__aeabi_dcmpeq>
   10162:	b918      	cbnz	r0, 1016c <__cvt+0x88>
   10164:	f1c5 0501 	rsb	r5, r5, #1
   10168:	f8ca 5000 	str.w	r5, [sl]
   1016c:	f8da 3000 	ldr.w	r3, [sl]
   10170:	4499      	add	r9, r3
   10172:	2200      	movs	r2, #0
   10174:	2300      	movs	r3, #0
   10176:	4620      	mov	r0, r4
   10178:	4639      	mov	r1, r7
   1017a:	f7f0 fc35 	bl	9e8 <__aeabi_dcmpeq>
   1017e:	b108      	cbz	r0, 10184 <__cvt+0xa0>
   10180:	f8cd 901c 	str.w	r9, [sp, #28]
   10184:	2230      	movs	r2, #48	; 0x30
   10186:	9b07      	ldr	r3, [sp, #28]
   10188:	454b      	cmp	r3, r9
   1018a:	d307      	bcc.n	1019c <__cvt+0xb8>
   1018c:	9b07      	ldr	r3, [sp, #28]
   1018e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10190:	1b9b      	subs	r3, r3, r6
   10192:	4630      	mov	r0, r6
   10194:	6013      	str	r3, [r2, #0]
   10196:	b008      	add	sp, #32
   10198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1019c:	1c59      	adds	r1, r3, #1
   1019e:	9107      	str	r1, [sp, #28]
   101a0:	701a      	strb	r2, [r3, #0]
   101a2:	e7f0      	b.n	10186 <__cvt+0xa2>

000101a4 <__exponent>:
   101a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   101a6:	4603      	mov	r3, r0
   101a8:	2900      	cmp	r1, #0
   101aa:	bfb8      	it	lt
   101ac:	4249      	neglt	r1, r1
   101ae:	f803 2b02 	strb.w	r2, [r3], #2
   101b2:	bfb4      	ite	lt
   101b4:	222d      	movlt	r2, #45	; 0x2d
   101b6:	222b      	movge	r2, #43	; 0x2b
   101b8:	2909      	cmp	r1, #9
   101ba:	7042      	strb	r2, [r0, #1]
   101bc:	dd2a      	ble.n	10214 <__exponent+0x70>
   101be:	f10d 0407 	add.w	r4, sp, #7
   101c2:	46a4      	mov	ip, r4
   101c4:	270a      	movs	r7, #10
   101c6:	46a6      	mov	lr, r4
   101c8:	460a      	mov	r2, r1
   101ca:	fb91 f6f7 	sdiv	r6, r1, r7
   101ce:	fb07 1516 	mls	r5, r7, r6, r1
   101d2:	3530      	adds	r5, #48	; 0x30
   101d4:	2a63      	cmp	r2, #99	; 0x63
   101d6:	f104 34ff 	add.w	r4, r4, #4294967295
   101da:	f80e 5c01 	strb.w	r5, [lr, #-1]
   101de:	4631      	mov	r1, r6
   101e0:	dcf1      	bgt.n	101c6 <__exponent+0x22>
   101e2:	3130      	adds	r1, #48	; 0x30
   101e4:	f1ae 0502 	sub.w	r5, lr, #2
   101e8:	f804 1c01 	strb.w	r1, [r4, #-1]
   101ec:	1c44      	adds	r4, r0, #1
   101ee:	4629      	mov	r1, r5
   101f0:	4561      	cmp	r1, ip
   101f2:	d30a      	bcc.n	1020a <__exponent+0x66>
   101f4:	f10d 0209 	add.w	r2, sp, #9
   101f8:	eba2 020e 	sub.w	r2, r2, lr
   101fc:	4565      	cmp	r5, ip
   101fe:	bf88      	it	hi
   10200:	2200      	movhi	r2, #0
   10202:	4413      	add	r3, r2
   10204:	1a18      	subs	r0, r3, r0
   10206:	b003      	add	sp, #12
   10208:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1020a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1020e:	f804 2f01 	strb.w	r2, [r4, #1]!
   10212:	e7ed      	b.n	101f0 <__exponent+0x4c>
   10214:	2330      	movs	r3, #48	; 0x30
   10216:	3130      	adds	r1, #48	; 0x30
   10218:	7083      	strb	r3, [r0, #2]
   1021a:	70c1      	strb	r1, [r0, #3]
   1021c:	1d03      	adds	r3, r0, #4
   1021e:	e7f1      	b.n	10204 <__exponent+0x60>

00010220 <_printf_common>:
   10220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10224:	4616      	mov	r6, r2
   10226:	4699      	mov	r9, r3
   10228:	688a      	ldr	r2, [r1, #8]
   1022a:	690b      	ldr	r3, [r1, #16]
   1022c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10230:	4293      	cmp	r3, r2
   10232:	bfb8      	it	lt
   10234:	4613      	movlt	r3, r2
   10236:	6033      	str	r3, [r6, #0]
   10238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1023c:	4607      	mov	r7, r0
   1023e:	460c      	mov	r4, r1
   10240:	b10a      	cbz	r2, 10246 <_printf_common+0x26>
   10242:	3301      	adds	r3, #1
   10244:	6033      	str	r3, [r6, #0]
   10246:	6823      	ldr	r3, [r4, #0]
   10248:	0699      	lsls	r1, r3, #26
   1024a:	bf42      	ittt	mi
   1024c:	6833      	ldrmi	r3, [r6, #0]
   1024e:	3302      	addmi	r3, #2
   10250:	6033      	strmi	r3, [r6, #0]
   10252:	6825      	ldr	r5, [r4, #0]
   10254:	f015 0506 	ands.w	r5, r5, #6
   10258:	d106      	bne.n	10268 <_printf_common+0x48>
   1025a:	f104 0a19 	add.w	sl, r4, #25
   1025e:	68e3      	ldr	r3, [r4, #12]
   10260:	6832      	ldr	r2, [r6, #0]
   10262:	1a9b      	subs	r3, r3, r2
   10264:	42ab      	cmp	r3, r5
   10266:	dc26      	bgt.n	102b6 <_printf_common+0x96>
   10268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1026c:	1e13      	subs	r3, r2, #0
   1026e:	6822      	ldr	r2, [r4, #0]
   10270:	bf18      	it	ne
   10272:	2301      	movne	r3, #1
   10274:	0692      	lsls	r2, r2, #26
   10276:	d42b      	bmi.n	102d0 <_printf_common+0xb0>
   10278:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1027c:	4649      	mov	r1, r9
   1027e:	4638      	mov	r0, r7
   10280:	47c0      	blx	r8
   10282:	3001      	adds	r0, #1
   10284:	d01e      	beq.n	102c4 <_printf_common+0xa4>
   10286:	6823      	ldr	r3, [r4, #0]
   10288:	68e5      	ldr	r5, [r4, #12]
   1028a:	6832      	ldr	r2, [r6, #0]
   1028c:	f003 0306 	and.w	r3, r3, #6
   10290:	2b04      	cmp	r3, #4
   10292:	bf08      	it	eq
   10294:	1aad      	subeq	r5, r5, r2
   10296:	68a3      	ldr	r3, [r4, #8]
   10298:	6922      	ldr	r2, [r4, #16]
   1029a:	bf0c      	ite	eq
   1029c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   102a0:	2500      	movne	r5, #0
   102a2:	4293      	cmp	r3, r2
   102a4:	bfc4      	itt	gt
   102a6:	1a9b      	subgt	r3, r3, r2
   102a8:	18ed      	addgt	r5, r5, r3
   102aa:	2600      	movs	r6, #0
   102ac:	341a      	adds	r4, #26
   102ae:	42b5      	cmp	r5, r6
   102b0:	d11a      	bne.n	102e8 <_printf_common+0xc8>
   102b2:	2000      	movs	r0, #0
   102b4:	e008      	b.n	102c8 <_printf_common+0xa8>
   102b6:	2301      	movs	r3, #1
   102b8:	4652      	mov	r2, sl
   102ba:	4649      	mov	r1, r9
   102bc:	4638      	mov	r0, r7
   102be:	47c0      	blx	r8
   102c0:	3001      	adds	r0, #1
   102c2:	d103      	bne.n	102cc <_printf_common+0xac>
   102c4:	f04f 30ff 	mov.w	r0, #4294967295
   102c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   102cc:	3501      	adds	r5, #1
   102ce:	e7c6      	b.n	1025e <_printf_common+0x3e>
   102d0:	18e1      	adds	r1, r4, r3
   102d2:	1c5a      	adds	r2, r3, #1
   102d4:	2030      	movs	r0, #48	; 0x30
   102d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   102da:	4422      	add	r2, r4
   102dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   102e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   102e4:	3302      	adds	r3, #2
   102e6:	e7c7      	b.n	10278 <_printf_common+0x58>
   102e8:	2301      	movs	r3, #1
   102ea:	4622      	mov	r2, r4
   102ec:	4649      	mov	r1, r9
   102ee:	4638      	mov	r0, r7
   102f0:	47c0      	blx	r8
   102f2:	3001      	adds	r0, #1
   102f4:	d0e6      	beq.n	102c4 <_printf_common+0xa4>
   102f6:	3601      	adds	r6, #1
   102f8:	e7d9      	b.n	102ae <_printf_common+0x8e>

000102fa <_raise_r>:
   102fa:	291f      	cmp	r1, #31
   102fc:	b538      	push	{r3, r4, r5, lr}
   102fe:	4604      	mov	r4, r0
   10300:	460d      	mov	r5, r1
   10302:	d904      	bls.n	1030e <_raise_r+0x14>
   10304:	2316      	movs	r3, #22
   10306:	6003      	str	r3, [r0, #0]
   10308:	f04f 30ff 	mov.w	r0, #4294967295
   1030c:	bd38      	pop	{r3, r4, r5, pc}
   1030e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10310:	b112      	cbz	r2, 10318 <_raise_r+0x1e>
   10312:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   10316:	b94b      	cbnz	r3, 1032c <_raise_r+0x32>
   10318:	4620      	mov	r0, r4
   1031a:	f000 f816 	bl	1034a <_getpid_r>
   1031e:	462a      	mov	r2, r5
   10320:	4601      	mov	r1, r0
   10322:	4620      	mov	r0, r4
   10324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10328:	f7fc bea6 	b.w	d078 <_kill_r>
   1032c:	2b01      	cmp	r3, #1
   1032e:	d00a      	beq.n	10346 <_raise_r+0x4c>
   10330:	1c59      	adds	r1, r3, #1
   10332:	d103      	bne.n	1033c <_raise_r+0x42>
   10334:	2316      	movs	r3, #22
   10336:	6003      	str	r3, [r0, #0]
   10338:	2001      	movs	r0, #1
   1033a:	e7e7      	b.n	1030c <_raise_r+0x12>
   1033c:	2400      	movs	r4, #0
   1033e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   10342:	4628      	mov	r0, r5
   10344:	4798      	blx	r3
   10346:	2000      	movs	r0, #0
   10348:	e7e0      	b.n	1030c <_raise_r+0x12>

0001034a <_getpid_r>:
   1034a:	f7fe b8cd 	b.w	e4e8 <_getpid>

0001034e <strncmp>:
   1034e:	b510      	push	{r4, lr}
   10350:	b16a      	cbz	r2, 1036e <strncmp+0x20>
   10352:	3901      	subs	r1, #1
   10354:	1884      	adds	r4, r0, r2
   10356:	f810 3b01 	ldrb.w	r3, [r0], #1
   1035a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1035e:	4293      	cmp	r3, r2
   10360:	d103      	bne.n	1036a <strncmp+0x1c>
   10362:	42a0      	cmp	r0, r4
   10364:	d001      	beq.n	1036a <strncmp+0x1c>
   10366:	2b00      	cmp	r3, #0
   10368:	d1f5      	bne.n	10356 <strncmp+0x8>
   1036a:	1a98      	subs	r0, r3, r2
   1036c:	bd10      	pop	{r4, pc}
   1036e:	4610      	mov	r0, r2
   10370:	e7fc      	b.n	1036c <strncmp+0x1e>

00010372 <strncpy>:
   10372:	b510      	push	{r4, lr}
   10374:	3901      	subs	r1, #1
   10376:	4603      	mov	r3, r0
   10378:	b132      	cbz	r2, 10388 <strncpy+0x16>
   1037a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1037e:	f803 4b01 	strb.w	r4, [r3], #1
   10382:	3a01      	subs	r2, #1
   10384:	2c00      	cmp	r4, #0
   10386:	d1f7      	bne.n	10378 <strncpy+0x6>
   10388:	441a      	add	r2, r3
   1038a:	2100      	movs	r1, #0
   1038c:	4293      	cmp	r3, r2
   1038e:	d100      	bne.n	10392 <strncpy+0x20>
   10390:	bd10      	pop	{r4, pc}
   10392:	f803 1b01 	strb.w	r1, [r3], #1
   10396:	e7f9      	b.n	1038c <strncpy+0x1a>

00010398 <strnlen>:
   10398:	b510      	push	{r4, lr}
   1039a:	4602      	mov	r2, r0
   1039c:	4401      	add	r1, r0
   1039e:	428a      	cmp	r2, r1
   103a0:	4613      	mov	r3, r2
   103a2:	d101      	bne.n	103a8 <strnlen+0x10>
   103a4:	1a18      	subs	r0, r3, r0
   103a6:	bd10      	pop	{r4, pc}
   103a8:	781c      	ldrb	r4, [r3, #0]
   103aa:	3201      	adds	r2, #1
   103ac:	2c00      	cmp	r4, #0
   103ae:	d1f6      	bne.n	1039e <strnlen+0x6>
   103b0:	e7f8      	b.n	103a4 <strnlen+0xc>

000103b2 <__strtok_r>:
   103b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   103b4:	b908      	cbnz	r0, 103ba <__strtok_r+0x8>
   103b6:	6810      	ldr	r0, [r2, #0]
   103b8:	b188      	cbz	r0, 103de <__strtok_r+0x2c>
   103ba:	4604      	mov	r4, r0
   103bc:	4620      	mov	r0, r4
   103be:	f814 5b01 	ldrb.w	r5, [r4], #1
   103c2:	460f      	mov	r7, r1
   103c4:	f817 6b01 	ldrb.w	r6, [r7], #1
   103c8:	b91e      	cbnz	r6, 103d2 <__strtok_r+0x20>
   103ca:	b965      	cbnz	r5, 103e6 <__strtok_r+0x34>
   103cc:	6015      	str	r5, [r2, #0]
   103ce:	4628      	mov	r0, r5
   103d0:	e005      	b.n	103de <__strtok_r+0x2c>
   103d2:	42b5      	cmp	r5, r6
   103d4:	d1f6      	bne.n	103c4 <__strtok_r+0x12>
   103d6:	2b00      	cmp	r3, #0
   103d8:	d1f0      	bne.n	103bc <__strtok_r+0xa>
   103da:	6014      	str	r4, [r2, #0]
   103dc:	7003      	strb	r3, [r0, #0]
   103de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103e0:	461c      	mov	r4, r3
   103e2:	e00c      	b.n	103fe <__strtok_r+0x4c>
   103e4:	b915      	cbnz	r5, 103ec <__strtok_r+0x3a>
   103e6:	f814 3b01 	ldrb.w	r3, [r4], #1
   103ea:	460e      	mov	r6, r1
   103ec:	f816 5b01 	ldrb.w	r5, [r6], #1
   103f0:	42ab      	cmp	r3, r5
   103f2:	d1f7      	bne.n	103e4 <__strtok_r+0x32>
   103f4:	2b00      	cmp	r3, #0
   103f6:	d0f3      	beq.n	103e0 <__strtok_r+0x2e>
   103f8:	2300      	movs	r3, #0
   103fa:	f804 3c01 	strb.w	r3, [r4, #-1]
   103fe:	6014      	str	r4, [r2, #0]
   10400:	e7ed      	b.n	103de <__strtok_r+0x2c>

00010402 <quorem>:
   10402:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10406:	6903      	ldr	r3, [r0, #16]
   10408:	690c      	ldr	r4, [r1, #16]
   1040a:	42a3      	cmp	r3, r4
   1040c:	4607      	mov	r7, r0
   1040e:	f2c0 8081 	blt.w	10514 <quorem+0x112>
   10412:	3c01      	subs	r4, #1
   10414:	f101 0814 	add.w	r8, r1, #20
   10418:	f100 0514 	add.w	r5, r0, #20
   1041c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10420:	9301      	str	r3, [sp, #4]
   10422:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   10426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1042a:	3301      	adds	r3, #1
   1042c:	429a      	cmp	r2, r3
   1042e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   10432:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   10436:	fbb2 f6f3 	udiv	r6, r2, r3
   1043a:	d331      	bcc.n	104a0 <quorem+0x9e>
   1043c:	f04f 0e00 	mov.w	lr, #0
   10440:	4640      	mov	r0, r8
   10442:	46ac      	mov	ip, r5
   10444:	46f2      	mov	sl, lr
   10446:	f850 2b04 	ldr.w	r2, [r0], #4
   1044a:	b293      	uxth	r3, r2
   1044c:	fb06 e303 	mla	r3, r6, r3, lr
   10450:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   10454:	b29b      	uxth	r3, r3
   10456:	ebaa 0303 	sub.w	r3, sl, r3
   1045a:	0c12      	lsrs	r2, r2, #16
   1045c:	f8dc a000 	ldr.w	sl, [ip]
   10460:	fb06 e202 	mla	r2, r6, r2, lr
   10464:	fa13 f38a 	uxtah	r3, r3, sl
   10468:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   1046c:	fa1f fa82 	uxth.w	sl, r2
   10470:	f8dc 2000 	ldr.w	r2, [ip]
   10474:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   10478:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1047c:	b29b      	uxth	r3, r3
   1047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10482:	4581      	cmp	r9, r0
   10484:	f84c 3b04 	str.w	r3, [ip], #4
   10488:	ea4f 4a22 	mov.w	sl, r2, asr #16
   1048c:	d2db      	bcs.n	10446 <quorem+0x44>
   1048e:	f855 300b 	ldr.w	r3, [r5, fp]
   10492:	b92b      	cbnz	r3, 104a0 <quorem+0x9e>
   10494:	9b01      	ldr	r3, [sp, #4]
   10496:	3b04      	subs	r3, #4
   10498:	429d      	cmp	r5, r3
   1049a:	461a      	mov	r2, r3
   1049c:	d32e      	bcc.n	104fc <quorem+0xfa>
   1049e:	613c      	str	r4, [r7, #16]
   104a0:	4638      	mov	r0, r7
   104a2:	f000 fa6d 	bl	10980 <__mcmp>
   104a6:	2800      	cmp	r0, #0
   104a8:	db24      	blt.n	104f4 <quorem+0xf2>
   104aa:	3601      	adds	r6, #1
   104ac:	4628      	mov	r0, r5
   104ae:	f04f 0c00 	mov.w	ip, #0
   104b2:	f858 2b04 	ldr.w	r2, [r8], #4
   104b6:	f8d0 e000 	ldr.w	lr, [r0]
   104ba:	b293      	uxth	r3, r2
   104bc:	ebac 0303 	sub.w	r3, ip, r3
   104c0:	0c12      	lsrs	r2, r2, #16
   104c2:	fa13 f38e 	uxtah	r3, r3, lr
   104c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   104ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
   104ce:	b29b      	uxth	r3, r3
   104d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   104d4:	45c1      	cmp	r9, r8
   104d6:	f840 3b04 	str.w	r3, [r0], #4
   104da:	ea4f 4c22 	mov.w	ip, r2, asr #16
   104de:	d2e8      	bcs.n	104b2 <quorem+0xb0>
   104e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   104e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   104e8:	b922      	cbnz	r2, 104f4 <quorem+0xf2>
   104ea:	3b04      	subs	r3, #4
   104ec:	429d      	cmp	r5, r3
   104ee:	461a      	mov	r2, r3
   104f0:	d30a      	bcc.n	10508 <quorem+0x106>
   104f2:	613c      	str	r4, [r7, #16]
   104f4:	4630      	mov	r0, r6
   104f6:	b003      	add	sp, #12
   104f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104fc:	6812      	ldr	r2, [r2, #0]
   104fe:	3b04      	subs	r3, #4
   10500:	2a00      	cmp	r2, #0
   10502:	d1cc      	bne.n	1049e <quorem+0x9c>
   10504:	3c01      	subs	r4, #1
   10506:	e7c7      	b.n	10498 <quorem+0x96>
   10508:	6812      	ldr	r2, [r2, #0]
   1050a:	3b04      	subs	r3, #4
   1050c:	2a00      	cmp	r2, #0
   1050e:	d1f0      	bne.n	104f2 <quorem+0xf0>
   10510:	3c01      	subs	r4, #1
   10512:	e7eb      	b.n	104ec <quorem+0xea>
   10514:	2000      	movs	r0, #0
   10516:	e7ee      	b.n	104f6 <quorem+0xf4>

00010518 <__sfmoreglue>:
   10518:	b570      	push	{r4, r5, r6, lr}
   1051a:	1e4a      	subs	r2, r1, #1
   1051c:	2568      	movs	r5, #104	; 0x68
   1051e:	4355      	muls	r5, r2
   10520:	460e      	mov	r6, r1
   10522:	f105 0174 	add.w	r1, r5, #116	; 0x74
   10526:	f7fc f8b5 	bl	c694 <_malloc_r>
   1052a:	4604      	mov	r4, r0
   1052c:	b140      	cbz	r0, 10540 <__sfmoreglue+0x28>
   1052e:	2100      	movs	r1, #0
   10530:	e9c0 1600 	strd	r1, r6, [r0]
   10534:	300c      	adds	r0, #12
   10536:	60a0      	str	r0, [r4, #8]
   10538:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1053c:	f7ff fda3 	bl	10086 <memset>
   10540:	4620      	mov	r0, r4
   10542:	bd70      	pop	{r4, r5, r6, pc}

00010544 <_fwalk_reent>:
   10544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10548:	4606      	mov	r6, r0
   1054a:	4688      	mov	r8, r1
   1054c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   10550:	2700      	movs	r7, #0
   10552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   10556:	f1b9 0901 	subs.w	r9, r9, #1
   1055a:	d505      	bpl.n	10568 <_fwalk_reent+0x24>
   1055c:	6824      	ldr	r4, [r4, #0]
   1055e:	2c00      	cmp	r4, #0
   10560:	d1f7      	bne.n	10552 <_fwalk_reent+0xe>
   10562:	4638      	mov	r0, r7
   10564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10568:	89ab      	ldrh	r3, [r5, #12]
   1056a:	2b01      	cmp	r3, #1
   1056c:	d907      	bls.n	1057e <_fwalk_reent+0x3a>
   1056e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   10572:	3301      	adds	r3, #1
   10574:	d003      	beq.n	1057e <_fwalk_reent+0x3a>
   10576:	4629      	mov	r1, r5
   10578:	4630      	mov	r0, r6
   1057a:	47c0      	blx	r8
   1057c:	4307      	orrs	r7, r0
   1057e:	3568      	adds	r5, #104	; 0x68
   10580:	e7e9      	b.n	10556 <_fwalk_reent+0x12>

00010582 <__swhatbuf_r>:
   10582:	b570      	push	{r4, r5, r6, lr}
   10584:	460e      	mov	r6, r1
   10586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1058a:	2900      	cmp	r1, #0
   1058c:	b096      	sub	sp, #88	; 0x58
   1058e:	4614      	mov	r4, r2
   10590:	461d      	mov	r5, r3
   10592:	da07      	bge.n	105a4 <__swhatbuf_r+0x22>
   10594:	2300      	movs	r3, #0
   10596:	602b      	str	r3, [r5, #0]
   10598:	89b3      	ldrh	r3, [r6, #12]
   1059a:	061a      	lsls	r2, r3, #24
   1059c:	d410      	bmi.n	105c0 <__swhatbuf_r+0x3e>
   1059e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   105a2:	e00e      	b.n	105c2 <__swhatbuf_r+0x40>
   105a4:	466a      	mov	r2, sp
   105a6:	f7fd f93f 	bl	d828 <_fstat_r>
   105aa:	2800      	cmp	r0, #0
   105ac:	dbf2      	blt.n	10594 <__swhatbuf_r+0x12>
   105ae:	9a01      	ldr	r2, [sp, #4]
   105b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   105b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   105b8:	425a      	negs	r2, r3
   105ba:	415a      	adcs	r2, r3
   105bc:	602a      	str	r2, [r5, #0]
   105be:	e7ee      	b.n	1059e <__swhatbuf_r+0x1c>
   105c0:	2340      	movs	r3, #64	; 0x40
   105c2:	2000      	movs	r0, #0
   105c4:	6023      	str	r3, [r4, #0]
   105c6:	b016      	add	sp, #88	; 0x58
   105c8:	bd70      	pop	{r4, r5, r6, pc}

000105ca <_Balloc>:
   105ca:	b570      	push	{r4, r5, r6, lr}
   105cc:	6a46      	ldr	r6, [r0, #36]	; 0x24
   105ce:	4604      	mov	r4, r0
   105d0:	460d      	mov	r5, r1
   105d2:	b93e      	cbnz	r6, 105e4 <_Balloc+0x1a>
   105d4:	2010      	movs	r0, #16
   105d6:	f7fb ffff 	bl	c5d8 <malloc>
   105da:	e9c0 6601 	strd	r6, r6, [r0, #4]
   105de:	6260      	str	r0, [r4, #36]	; 0x24
   105e0:	6006      	str	r6, [r0, #0]
   105e2:	60c6      	str	r6, [r0, #12]
   105e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   105e6:	68f3      	ldr	r3, [r6, #12]
   105e8:	b183      	cbz	r3, 1060c <_Balloc+0x42>
   105ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   105ec:	68db      	ldr	r3, [r3, #12]
   105ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   105f2:	b9b8      	cbnz	r0, 10624 <_Balloc+0x5a>
   105f4:	2101      	movs	r1, #1
   105f6:	fa01 f605 	lsl.w	r6, r1, r5
   105fa:	1d72      	adds	r2, r6, #5
   105fc:	0092      	lsls	r2, r2, #2
   105fe:	4620      	mov	r0, r4
   10600:	f000 fa9e 	bl	10b40 <_calloc_r>
   10604:	b160      	cbz	r0, 10620 <_Balloc+0x56>
   10606:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1060a:	e00e      	b.n	1062a <_Balloc+0x60>
   1060c:	2221      	movs	r2, #33	; 0x21
   1060e:	2104      	movs	r1, #4
   10610:	4620      	mov	r0, r4
   10612:	f000 fa95 	bl	10b40 <_calloc_r>
   10616:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10618:	60f0      	str	r0, [r6, #12]
   1061a:	68db      	ldr	r3, [r3, #12]
   1061c:	2b00      	cmp	r3, #0
   1061e:	d1e4      	bne.n	105ea <_Balloc+0x20>
   10620:	2000      	movs	r0, #0
   10622:	bd70      	pop	{r4, r5, r6, pc}
   10624:	6802      	ldr	r2, [r0, #0]
   10626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   1062a:	2300      	movs	r3, #0
   1062c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   10630:	e7f7      	b.n	10622 <_Balloc+0x58>

00010632 <_Bfree>:
   10632:	b570      	push	{r4, r5, r6, lr}
   10634:	6a46      	ldr	r6, [r0, #36]	; 0x24
   10636:	4605      	mov	r5, r0
   10638:	460c      	mov	r4, r1
   1063a:	b93e      	cbnz	r6, 1064c <_Bfree+0x1a>
   1063c:	2010      	movs	r0, #16
   1063e:	f7fb ffcb 	bl	c5d8 <malloc>
   10642:	e9c0 6601 	strd	r6, r6, [r0, #4]
   10646:	6268      	str	r0, [r5, #36]	; 0x24
   10648:	6006      	str	r6, [r0, #0]
   1064a:	60c6      	str	r6, [r0, #12]
   1064c:	b13c      	cbz	r4, 1065e <_Bfree+0x2c>
   1064e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10650:	6862      	ldr	r2, [r4, #4]
   10652:	68db      	ldr	r3, [r3, #12]
   10654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10658:	6021      	str	r1, [r4, #0]
   1065a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1065e:	bd70      	pop	{r4, r5, r6, pc}

00010660 <__multadd>:
   10660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10664:	690e      	ldr	r6, [r1, #16]
   10666:	4607      	mov	r7, r0
   10668:	4698      	mov	r8, r3
   1066a:	460c      	mov	r4, r1
   1066c:	f101 0014 	add.w	r0, r1, #20
   10670:	2300      	movs	r3, #0
   10672:	6805      	ldr	r5, [r0, #0]
   10674:	b2a9      	uxth	r1, r5
   10676:	fb02 8101 	mla	r1, r2, r1, r8
   1067a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   1067e:	0c2d      	lsrs	r5, r5, #16
   10680:	fb02 c505 	mla	r5, r2, r5, ip
   10684:	b289      	uxth	r1, r1
   10686:	3301      	adds	r3, #1
   10688:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   1068c:	429e      	cmp	r6, r3
   1068e:	f840 1b04 	str.w	r1, [r0], #4
   10692:	ea4f 4815 	mov.w	r8, r5, lsr #16
   10696:	dcec      	bgt.n	10672 <__multadd+0x12>
   10698:	f1b8 0f00 	cmp.w	r8, #0
   1069c:	d01b      	beq.n	106d6 <__multadd+0x76>
   1069e:	68a3      	ldr	r3, [r4, #8]
   106a0:	42b3      	cmp	r3, r6
   106a2:	dc12      	bgt.n	106ca <__multadd+0x6a>
   106a4:	6861      	ldr	r1, [r4, #4]
   106a6:	4638      	mov	r0, r7
   106a8:	3101      	adds	r1, #1
   106aa:	f7ff ff8e 	bl	105ca <_Balloc>
   106ae:	6922      	ldr	r2, [r4, #16]
   106b0:	3202      	adds	r2, #2
   106b2:	f104 010c 	add.w	r1, r4, #12
   106b6:	4605      	mov	r5, r0
   106b8:	0092      	lsls	r2, r2, #2
   106ba:	300c      	adds	r0, #12
   106bc:	f7ff fcd5 	bl	1006a <memcpy>
   106c0:	4621      	mov	r1, r4
   106c2:	4638      	mov	r0, r7
   106c4:	f7ff ffb5 	bl	10632 <_Bfree>
   106c8:	462c      	mov	r4, r5
   106ca:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   106ce:	3601      	adds	r6, #1
   106d0:	f8c3 8014 	str.w	r8, [r3, #20]
   106d4:	6126      	str	r6, [r4, #16]
   106d6:	4620      	mov	r0, r4
   106d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000106dc <__hi0bits>:
   106dc:	0c02      	lsrs	r2, r0, #16
   106de:	0412      	lsls	r2, r2, #16
   106e0:	4603      	mov	r3, r0
   106e2:	b9ca      	cbnz	r2, 10718 <__hi0bits+0x3c>
   106e4:	0403      	lsls	r3, r0, #16
   106e6:	2010      	movs	r0, #16
   106e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   106ec:	bf04      	itt	eq
   106ee:	021b      	lsleq	r3, r3, #8
   106f0:	3008      	addeq	r0, #8
   106f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   106f6:	bf04      	itt	eq
   106f8:	011b      	lsleq	r3, r3, #4
   106fa:	3004      	addeq	r0, #4
   106fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   10700:	bf04      	itt	eq
   10702:	009b      	lsleq	r3, r3, #2
   10704:	3002      	addeq	r0, #2
   10706:	2b00      	cmp	r3, #0
   10708:	db05      	blt.n	10716 <__hi0bits+0x3a>
   1070a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1070e:	f100 0001 	add.w	r0, r0, #1
   10712:	bf08      	it	eq
   10714:	2020      	moveq	r0, #32
   10716:	4770      	bx	lr
   10718:	2000      	movs	r0, #0
   1071a:	e7e5      	b.n	106e8 <__hi0bits+0xc>

0001071c <__lo0bits>:
   1071c:	6803      	ldr	r3, [r0, #0]
   1071e:	4602      	mov	r2, r0
   10720:	f013 0007 	ands.w	r0, r3, #7
   10724:	d00b      	beq.n	1073e <__lo0bits+0x22>
   10726:	07d9      	lsls	r1, r3, #31
   10728:	d422      	bmi.n	10770 <__lo0bits+0x54>
   1072a:	0798      	lsls	r0, r3, #30
   1072c:	bf49      	itett	mi
   1072e:	085b      	lsrmi	r3, r3, #1
   10730:	089b      	lsrpl	r3, r3, #2
   10732:	2001      	movmi	r0, #1
   10734:	6013      	strmi	r3, [r2, #0]
   10736:	bf5c      	itt	pl
   10738:	6013      	strpl	r3, [r2, #0]
   1073a:	2002      	movpl	r0, #2
   1073c:	4770      	bx	lr
   1073e:	b299      	uxth	r1, r3
   10740:	b909      	cbnz	r1, 10746 <__lo0bits+0x2a>
   10742:	0c1b      	lsrs	r3, r3, #16
   10744:	2010      	movs	r0, #16
   10746:	f013 0fff 	tst.w	r3, #255	; 0xff
   1074a:	bf04      	itt	eq
   1074c:	0a1b      	lsreq	r3, r3, #8
   1074e:	3008      	addeq	r0, #8
   10750:	0719      	lsls	r1, r3, #28
   10752:	bf04      	itt	eq
   10754:	091b      	lsreq	r3, r3, #4
   10756:	3004      	addeq	r0, #4
   10758:	0799      	lsls	r1, r3, #30
   1075a:	bf04      	itt	eq
   1075c:	089b      	lsreq	r3, r3, #2
   1075e:	3002      	addeq	r0, #2
   10760:	07d9      	lsls	r1, r3, #31
   10762:	d403      	bmi.n	1076c <__lo0bits+0x50>
   10764:	085b      	lsrs	r3, r3, #1
   10766:	f100 0001 	add.w	r0, r0, #1
   1076a:	d003      	beq.n	10774 <__lo0bits+0x58>
   1076c:	6013      	str	r3, [r2, #0]
   1076e:	4770      	bx	lr
   10770:	2000      	movs	r0, #0
   10772:	4770      	bx	lr
   10774:	2020      	movs	r0, #32
   10776:	4770      	bx	lr

00010778 <__i2b>:
   10778:	b510      	push	{r4, lr}
   1077a:	460c      	mov	r4, r1
   1077c:	2101      	movs	r1, #1
   1077e:	f7ff ff24 	bl	105ca <_Balloc>
   10782:	2201      	movs	r2, #1
   10784:	6144      	str	r4, [r0, #20]
   10786:	6102      	str	r2, [r0, #16]
   10788:	bd10      	pop	{r4, pc}

0001078a <__multiply>:
   1078a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1078e:	4615      	mov	r5, r2
   10790:	690a      	ldr	r2, [r1, #16]
   10792:	692b      	ldr	r3, [r5, #16]
   10794:	429a      	cmp	r2, r3
   10796:	bfb8      	it	lt
   10798:	460b      	movlt	r3, r1
   1079a:	460c      	mov	r4, r1
   1079c:	bfbc      	itt	lt
   1079e:	462c      	movlt	r4, r5
   107a0:	461d      	movlt	r5, r3
   107a2:	6927      	ldr	r7, [r4, #16]
   107a4:	f8d5 9010 	ldr.w	r9, [r5, #16]
   107a8:	68a3      	ldr	r3, [r4, #8]
   107aa:	6861      	ldr	r1, [r4, #4]
   107ac:	eb07 0609 	add.w	r6, r7, r9
   107b0:	42b3      	cmp	r3, r6
   107b2:	bfb8      	it	lt
   107b4:	3101      	addlt	r1, #1
   107b6:	b085      	sub	sp, #20
   107b8:	f7ff ff07 	bl	105ca <_Balloc>
   107bc:	f100 0114 	add.w	r1, r0, #20
   107c0:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   107c4:	460b      	mov	r3, r1
   107c6:	2200      	movs	r2, #0
   107c8:	4543      	cmp	r3, r8
   107ca:	d31d      	bcc.n	10808 <__multiply+0x7e>
   107cc:	f104 0314 	add.w	r3, r4, #20
   107d0:	f105 0214 	add.w	r2, r5, #20
   107d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   107d8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   107dc:	9302      	str	r3, [sp, #8]
   107de:	1b3b      	subs	r3, r7, r4
   107e0:	3b15      	subs	r3, #21
   107e2:	f023 0303 	bic.w	r3, r3, #3
   107e6:	3304      	adds	r3, #4
   107e8:	f104 0515 	add.w	r5, r4, #21
   107ec:	42af      	cmp	r7, r5
   107ee:	bf38      	it	cc
   107f0:	2304      	movcc	r3, #4
   107f2:	9301      	str	r3, [sp, #4]
   107f4:	9b02      	ldr	r3, [sp, #8]
   107f6:	9203      	str	r2, [sp, #12]
   107f8:	4293      	cmp	r3, r2
   107fa:	d808      	bhi.n	1080e <__multiply+0x84>
   107fc:	2e00      	cmp	r6, #0
   107fe:	dc5a      	bgt.n	108b6 <__multiply+0x12c>
   10800:	6106      	str	r6, [r0, #16]
   10802:	b005      	add	sp, #20
   10804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10808:	f843 2b04 	str.w	r2, [r3], #4
   1080c:	e7dc      	b.n	107c8 <__multiply+0x3e>
   1080e:	f8b2 a000 	ldrh.w	sl, [r2]
   10812:	f1ba 0f00 	cmp.w	sl, #0
   10816:	d024      	beq.n	10862 <__multiply+0xd8>
   10818:	f104 0e14 	add.w	lr, r4, #20
   1081c:	4689      	mov	r9, r1
   1081e:	f04f 0c00 	mov.w	ip, #0
   10822:	f85e 5b04 	ldr.w	r5, [lr], #4
   10826:	f8d9 b000 	ldr.w	fp, [r9]
   1082a:	b2ab      	uxth	r3, r5
   1082c:	fa1f fb8b 	uxth.w	fp, fp
   10830:	fb0a b303 	mla	r3, sl, r3, fp
   10834:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   10838:	f8d9 5000 	ldr.w	r5, [r9]
   1083c:	4463      	add	r3, ip
   1083e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   10842:	fb0a c50b 	mla	r5, sl, fp, ip
   10846:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   1084a:	b29b      	uxth	r3, r3
   1084c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   10850:	4577      	cmp	r7, lr
   10852:	f849 3b04 	str.w	r3, [r9], #4
   10856:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   1085a:	d8e2      	bhi.n	10822 <__multiply+0x98>
   1085c:	9b01      	ldr	r3, [sp, #4]
   1085e:	f841 c003 	str.w	ip, [r1, r3]
   10862:	9b03      	ldr	r3, [sp, #12]
   10864:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   10868:	3204      	adds	r2, #4
   1086a:	f1b9 0f00 	cmp.w	r9, #0
   1086e:	d020      	beq.n	108b2 <__multiply+0x128>
   10870:	680b      	ldr	r3, [r1, #0]
   10872:	f104 0c14 	add.w	ip, r4, #20
   10876:	468e      	mov	lr, r1
   10878:	f04f 0a00 	mov.w	sl, #0
   1087c:	f8bc 5000 	ldrh.w	r5, [ip]
   10880:	f8be b002 	ldrh.w	fp, [lr, #2]
   10884:	fb09 b505 	mla	r5, r9, r5, fp
   10888:	44aa      	add	sl, r5
   1088a:	b29b      	uxth	r3, r3
   1088c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   10890:	f84e 3b04 	str.w	r3, [lr], #4
   10894:	f85c 3b04 	ldr.w	r3, [ip], #4
   10898:	f8be 5000 	ldrh.w	r5, [lr]
   1089c:	0c1b      	lsrs	r3, r3, #16
   1089e:	fb09 5303 	mla	r3, r9, r3, r5
   108a2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   108a6:	4567      	cmp	r7, ip
   108a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   108ac:	d8e6      	bhi.n	1087c <__multiply+0xf2>
   108ae:	9d01      	ldr	r5, [sp, #4]
   108b0:	514b      	str	r3, [r1, r5]
   108b2:	3104      	adds	r1, #4
   108b4:	e79e      	b.n	107f4 <__multiply+0x6a>
   108b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   108ba:	2b00      	cmp	r3, #0
   108bc:	d1a0      	bne.n	10800 <__multiply+0x76>
   108be:	3e01      	subs	r6, #1
   108c0:	e79c      	b.n	107fc <__multiply+0x72>

000108c2 <__lshift>:
   108c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   108c6:	460c      	mov	r4, r1
   108c8:	6849      	ldr	r1, [r1, #4]
   108ca:	6923      	ldr	r3, [r4, #16]
   108cc:	eb03 1862 	add.w	r8, r3, r2, asr #5
   108d0:	68a3      	ldr	r3, [r4, #8]
   108d2:	4607      	mov	r7, r0
   108d4:	4691      	mov	r9, r2
   108d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   108da:	f108 0601 	add.w	r6, r8, #1
   108de:	42b3      	cmp	r3, r6
   108e0:	db3f      	blt.n	10962 <__lshift+0xa0>
   108e2:	4638      	mov	r0, r7
   108e4:	f7ff fe71 	bl	105ca <_Balloc>
   108e8:	2300      	movs	r3, #0
   108ea:	4605      	mov	r5, r0
   108ec:	f100 0114 	add.w	r1, r0, #20
   108f0:	f100 0210 	add.w	r2, r0, #16
   108f4:	4618      	mov	r0, r3
   108f6:	4553      	cmp	r3, sl
   108f8:	db36      	blt.n	10968 <__lshift+0xa6>
   108fa:	6920      	ldr	r0, [r4, #16]
   108fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   10900:	f104 0314 	add.w	r3, r4, #20
   10904:	f019 091f 	ands.w	r9, r9, #31
   10908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1090c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   10910:	d02e      	beq.n	10970 <__lshift+0xae>
   10912:	f1c9 0e20 	rsb	lr, r9, #32
   10916:	468a      	mov	sl, r1
   10918:	2200      	movs	r2, #0
   1091a:	6818      	ldr	r0, [r3, #0]
   1091c:	fa00 f009 	lsl.w	r0, r0, r9
   10920:	4302      	orrs	r2, r0
   10922:	f84a 2b04 	str.w	r2, [sl], #4
   10926:	f853 2b04 	ldr.w	r2, [r3], #4
   1092a:	459c      	cmp	ip, r3
   1092c:	fa22 f20e 	lsr.w	r2, r2, lr
   10930:	d8f3      	bhi.n	1091a <__lshift+0x58>
   10932:	ebac 0304 	sub.w	r3, ip, r4
   10936:	3b15      	subs	r3, #21
   10938:	f023 0303 	bic.w	r3, r3, #3
   1093c:	3304      	adds	r3, #4
   1093e:	f104 0015 	add.w	r0, r4, #21
   10942:	4560      	cmp	r0, ip
   10944:	bf88      	it	hi
   10946:	2304      	movhi	r3, #4
   10948:	50ca      	str	r2, [r1, r3]
   1094a:	b10a      	cbz	r2, 10950 <__lshift+0x8e>
   1094c:	f108 0602 	add.w	r6, r8, #2
   10950:	3e01      	subs	r6, #1
   10952:	4638      	mov	r0, r7
   10954:	612e      	str	r6, [r5, #16]
   10956:	4621      	mov	r1, r4
   10958:	f7ff fe6b 	bl	10632 <_Bfree>
   1095c:	4628      	mov	r0, r5
   1095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10962:	3101      	adds	r1, #1
   10964:	005b      	lsls	r3, r3, #1
   10966:	e7ba      	b.n	108de <__lshift+0x1c>
   10968:	f842 0f04 	str.w	r0, [r2, #4]!
   1096c:	3301      	adds	r3, #1
   1096e:	e7c2      	b.n	108f6 <__lshift+0x34>
   10970:	3904      	subs	r1, #4
   10972:	f853 2b04 	ldr.w	r2, [r3], #4
   10976:	f841 2f04 	str.w	r2, [r1, #4]!
   1097a:	459c      	cmp	ip, r3
   1097c:	d8f9      	bhi.n	10972 <__lshift+0xb0>
   1097e:	e7e7      	b.n	10950 <__lshift+0x8e>

00010980 <__mcmp>:
   10980:	690a      	ldr	r2, [r1, #16]
   10982:	4603      	mov	r3, r0
   10984:	6900      	ldr	r0, [r0, #16]
   10986:	1a80      	subs	r0, r0, r2
   10988:	b530      	push	{r4, r5, lr}
   1098a:	d10d      	bne.n	109a8 <__mcmp+0x28>
   1098c:	3314      	adds	r3, #20
   1098e:	3114      	adds	r1, #20
   10990:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   10994:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   10998:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1099c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   109a0:	4295      	cmp	r5, r2
   109a2:	d002      	beq.n	109aa <__mcmp+0x2a>
   109a4:	d304      	bcc.n	109b0 <__mcmp+0x30>
   109a6:	2001      	movs	r0, #1
   109a8:	bd30      	pop	{r4, r5, pc}
   109aa:	42a3      	cmp	r3, r4
   109ac:	d3f4      	bcc.n	10998 <__mcmp+0x18>
   109ae:	e7fb      	b.n	109a8 <__mcmp+0x28>
   109b0:	f04f 30ff 	mov.w	r0, #4294967295
   109b4:	e7f8      	b.n	109a8 <__mcmp+0x28>

000109b6 <__mdiff>:
   109b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109ba:	460c      	mov	r4, r1
   109bc:	4606      	mov	r6, r0
   109be:	4611      	mov	r1, r2
   109c0:	4620      	mov	r0, r4
   109c2:	4617      	mov	r7, r2
   109c4:	f7ff ffdc 	bl	10980 <__mcmp>
   109c8:	1e05      	subs	r5, r0, #0
   109ca:	d108      	bne.n	109de <__mdiff+0x28>
   109cc:	4629      	mov	r1, r5
   109ce:	4630      	mov	r0, r6
   109d0:	f7ff fdfb 	bl	105ca <_Balloc>
   109d4:	2301      	movs	r3, #1
   109d6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   109da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109de:	bfa4      	itt	ge
   109e0:	463b      	movge	r3, r7
   109e2:	4627      	movge	r7, r4
   109e4:	4630      	mov	r0, r6
   109e6:	6879      	ldr	r1, [r7, #4]
   109e8:	bfa6      	itte	ge
   109ea:	461c      	movge	r4, r3
   109ec:	2500      	movge	r5, #0
   109ee:	2501      	movlt	r5, #1
   109f0:	f7ff fdeb 	bl	105ca <_Balloc>
   109f4:	693e      	ldr	r6, [r7, #16]
   109f6:	60c5      	str	r5, [r0, #12]
   109f8:	6925      	ldr	r5, [r4, #16]
   109fa:	f107 0114 	add.w	r1, r7, #20
   109fe:	f104 0914 	add.w	r9, r4, #20
   10a02:	f100 0e14 	add.w	lr, r0, #20
   10a06:	f107 0210 	add.w	r2, r7, #16
   10a0a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   10a0e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   10a12:	46f2      	mov	sl, lr
   10a14:	2700      	movs	r7, #0
   10a16:	f859 3b04 	ldr.w	r3, [r9], #4
   10a1a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   10a1e:	fa1f f883 	uxth.w	r8, r3
   10a22:	fa17 f78b 	uxtah	r7, r7, fp
   10a26:	0c1b      	lsrs	r3, r3, #16
   10a28:	eba7 0808 	sub.w	r8, r7, r8
   10a2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   10a30:	eb03 4328 	add.w	r3, r3, r8, asr #16
   10a34:	fa1f f888 	uxth.w	r8, r8
   10a38:	141f      	asrs	r7, r3, #16
   10a3a:	454d      	cmp	r5, r9
   10a3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   10a40:	f84a 3b04 	str.w	r3, [sl], #4
   10a44:	d8e7      	bhi.n	10a16 <__mdiff+0x60>
   10a46:	1b2b      	subs	r3, r5, r4
   10a48:	3b15      	subs	r3, #21
   10a4a:	f023 0303 	bic.w	r3, r3, #3
   10a4e:	3304      	adds	r3, #4
   10a50:	3415      	adds	r4, #21
   10a52:	42a5      	cmp	r5, r4
   10a54:	bf38      	it	cc
   10a56:	2304      	movcc	r3, #4
   10a58:	4419      	add	r1, r3
   10a5a:	4473      	add	r3, lr
   10a5c:	469e      	mov	lr, r3
   10a5e:	460d      	mov	r5, r1
   10a60:	4565      	cmp	r5, ip
   10a62:	d30e      	bcc.n	10a82 <__mdiff+0xcc>
   10a64:	f10c 0203 	add.w	r2, ip, #3
   10a68:	1a52      	subs	r2, r2, r1
   10a6a:	f022 0203 	bic.w	r2, r2, #3
   10a6e:	3903      	subs	r1, #3
   10a70:	458c      	cmp	ip, r1
   10a72:	bf38      	it	cc
   10a74:	2200      	movcc	r2, #0
   10a76:	441a      	add	r2, r3
   10a78:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   10a7c:	b17b      	cbz	r3, 10a9e <__mdiff+0xe8>
   10a7e:	6106      	str	r6, [r0, #16]
   10a80:	e7ab      	b.n	109da <__mdiff+0x24>
   10a82:	f855 8b04 	ldr.w	r8, [r5], #4
   10a86:	fa17 f488 	uxtah	r4, r7, r8
   10a8a:	1422      	asrs	r2, r4, #16
   10a8c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   10a90:	b2a4      	uxth	r4, r4
   10a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   10a96:	f84e 4b04 	str.w	r4, [lr], #4
   10a9a:	1417      	asrs	r7, r2, #16
   10a9c:	e7e0      	b.n	10a60 <__mdiff+0xaa>
   10a9e:	3e01      	subs	r6, #1
   10aa0:	e7ea      	b.n	10a78 <__mdiff+0xc2>

00010aa2 <__d2b>:
   10aa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10aa6:	2101      	movs	r1, #1
   10aa8:	461c      	mov	r4, r3
   10aaa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   10aae:	4690      	mov	r8, r2
   10ab0:	f7ff fd8b 	bl	105ca <_Balloc>
   10ab4:	f3c4 0313 	ubfx	r3, r4, #0, #20
   10ab8:	f3c4 540a 	ubfx	r4, r4, #20, #11
   10abc:	4607      	mov	r7, r0
   10abe:	bb2c      	cbnz	r4, 10b0c <__d2b+0x6a>
   10ac0:	9301      	str	r3, [sp, #4]
   10ac2:	f1b8 0300 	subs.w	r3, r8, #0
   10ac6:	d026      	beq.n	10b16 <__d2b+0x74>
   10ac8:	4668      	mov	r0, sp
   10aca:	9300      	str	r3, [sp, #0]
   10acc:	f7ff fe26 	bl	1071c <__lo0bits>
   10ad0:	9900      	ldr	r1, [sp, #0]
   10ad2:	b1f0      	cbz	r0, 10b12 <__d2b+0x70>
   10ad4:	9a01      	ldr	r2, [sp, #4]
   10ad6:	f1c0 0320 	rsb	r3, r0, #32
   10ada:	fa02 f303 	lsl.w	r3, r2, r3
   10ade:	430b      	orrs	r3, r1
   10ae0:	40c2      	lsrs	r2, r0
   10ae2:	617b      	str	r3, [r7, #20]
   10ae4:	9201      	str	r2, [sp, #4]
   10ae6:	9b01      	ldr	r3, [sp, #4]
   10ae8:	61bb      	str	r3, [r7, #24]
   10aea:	2b00      	cmp	r3, #0
   10aec:	bf14      	ite	ne
   10aee:	2102      	movne	r1, #2
   10af0:	2101      	moveq	r1, #1
   10af2:	6139      	str	r1, [r7, #16]
   10af4:	b1c4      	cbz	r4, 10b28 <__d2b+0x86>
   10af6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   10afa:	4404      	add	r4, r0
   10afc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   10b00:	6034      	str	r4, [r6, #0]
   10b02:	6028      	str	r0, [r5, #0]
   10b04:	4638      	mov	r0, r7
   10b06:	b002      	add	sp, #8
   10b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10b10:	e7d6      	b.n	10ac0 <__d2b+0x1e>
   10b12:	6179      	str	r1, [r7, #20]
   10b14:	e7e7      	b.n	10ae6 <__d2b+0x44>
   10b16:	a801      	add	r0, sp, #4
   10b18:	f7ff fe00 	bl	1071c <__lo0bits>
   10b1c:	9b01      	ldr	r3, [sp, #4]
   10b1e:	617b      	str	r3, [r7, #20]
   10b20:	2101      	movs	r1, #1
   10b22:	6139      	str	r1, [r7, #16]
   10b24:	3020      	adds	r0, #32
   10b26:	e7e5      	b.n	10af4 <__d2b+0x52>
   10b28:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   10b2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   10b30:	6030      	str	r0, [r6, #0]
   10b32:	6918      	ldr	r0, [r3, #16]
   10b34:	f7ff fdd2 	bl	106dc <__hi0bits>
   10b38:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   10b3c:	6029      	str	r1, [r5, #0]
   10b3e:	e7e1      	b.n	10b04 <__d2b+0x62>

00010b40 <_calloc_r>:
   10b40:	b538      	push	{r3, r4, r5, lr}
   10b42:	fb02 f501 	mul.w	r5, r2, r1
   10b46:	4629      	mov	r1, r5
   10b48:	f7fb fda4 	bl	c694 <_malloc_r>
   10b4c:	4604      	mov	r4, r0
   10b4e:	b118      	cbz	r0, 10b58 <_calloc_r+0x18>
   10b50:	462a      	mov	r2, r5
   10b52:	2100      	movs	r1, #0
   10b54:	f7ff fa97 	bl	10086 <memset>
   10b58:	4620      	mov	r0, r4
   10b5a:	bd38      	pop	{r3, r4, r5, pc}

00010b5c <__sread>:
   10b5c:	b510      	push	{r4, lr}
   10b5e:	460c      	mov	r4, r1
   10b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10b64:	f7fc fe94 	bl	d890 <_read_r>
   10b68:	2800      	cmp	r0, #0
   10b6a:	bfab      	itete	ge
   10b6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   10b6e:	89a3      	ldrhlt	r3, [r4, #12]
   10b70:	181b      	addge	r3, r3, r0
   10b72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   10b76:	bfac      	ite	ge
   10b78:	6563      	strge	r3, [r4, #84]	; 0x54
   10b7a:	81a3      	strhlt	r3, [r4, #12]
   10b7c:	bd10      	pop	{r4, pc}

00010b7e <__swrite>:
   10b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b82:	461f      	mov	r7, r3
   10b84:	898b      	ldrh	r3, [r1, #12]
   10b86:	05db      	lsls	r3, r3, #23
   10b88:	4605      	mov	r5, r0
   10b8a:	460c      	mov	r4, r1
   10b8c:	4616      	mov	r6, r2
   10b8e:	d505      	bpl.n	10b9c <__swrite+0x1e>
   10b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10b94:	2302      	movs	r3, #2
   10b96:	2200      	movs	r2, #0
   10b98:	f7fc fe68 	bl	d86c <_lseek_r>
   10b9c:	89a3      	ldrh	r3, [r4, #12]
   10b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   10ba6:	81a3      	strh	r3, [r4, #12]
   10ba8:	4632      	mov	r2, r6
   10baa:	463b      	mov	r3, r7
   10bac:	4628      	mov	r0, r5
   10bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10bb2:	f7fc be17 	b.w	d7e4 <_write_r>

00010bb6 <__sseek>:
   10bb6:	b510      	push	{r4, lr}
   10bb8:	460c      	mov	r4, r1
   10bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10bbe:	f7fc fe55 	bl	d86c <_lseek_r>
   10bc2:	1c43      	adds	r3, r0, #1
   10bc4:	89a3      	ldrh	r3, [r4, #12]
   10bc6:	bf15      	itete	ne
   10bc8:	6560      	strne	r0, [r4, #84]	; 0x54
   10bca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   10bce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   10bd2:	81a3      	strheq	r3, [r4, #12]
   10bd4:	bf18      	it	ne
   10bd6:	81a3      	strhne	r3, [r4, #12]
   10bd8:	bd10      	pop	{r4, pc}

00010bda <__sclose>:
   10bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10bde:	f7fc be13 	b.w	d808 <_close_r>

00010be2 <__ascii_mbtowc>:
   10be2:	b082      	sub	sp, #8
   10be4:	b901      	cbnz	r1, 10be8 <__ascii_mbtowc+0x6>
   10be6:	a901      	add	r1, sp, #4
   10be8:	b142      	cbz	r2, 10bfc <__ascii_mbtowc+0x1a>
   10bea:	b14b      	cbz	r3, 10c00 <__ascii_mbtowc+0x1e>
   10bec:	7813      	ldrb	r3, [r2, #0]
   10bee:	600b      	str	r3, [r1, #0]
   10bf0:	7812      	ldrb	r2, [r2, #0]
   10bf2:	1e10      	subs	r0, r2, #0
   10bf4:	bf18      	it	ne
   10bf6:	2001      	movne	r0, #1
   10bf8:	b002      	add	sp, #8
   10bfa:	4770      	bx	lr
   10bfc:	4610      	mov	r0, r2
   10bfe:	e7fb      	b.n	10bf8 <__ascii_mbtowc+0x16>
   10c00:	f06f 0001 	mvn.w	r0, #1
   10c04:	e7f8      	b.n	10bf8 <__ascii_mbtowc+0x16>

00010c06 <__ascii_wctomb>:
   10c06:	4603      	mov	r3, r0
   10c08:	4608      	mov	r0, r1
   10c0a:	b141      	cbz	r1, 10c1e <__ascii_wctomb+0x18>
   10c0c:	2aff      	cmp	r2, #255	; 0xff
   10c0e:	d904      	bls.n	10c1a <__ascii_wctomb+0x14>
   10c10:	228a      	movs	r2, #138	; 0x8a
   10c12:	601a      	str	r2, [r3, #0]
   10c14:	f04f 30ff 	mov.w	r0, #4294967295
   10c18:	4770      	bx	lr
   10c1a:	700a      	strb	r2, [r1, #0]
   10c1c:	2001      	movs	r0, #1
   10c1e:	4770      	bx	lr

00010c20 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10c20:	f7f4 bd4c 	b.w	56bc <SystemInit>
