
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20017920 	.word	0x20017920
   4:	0000467d 	.word	0x0000467d
   8:	00014631 	.word	0x00014631
   c:	00004635 	.word	0x00004635
  10:	00004635 	.word	0x00004635
  14:	00004635 	.word	0x00004635
  18:	00004635 	.word	0x00004635
	...
  2c:	000042b5 	.word	0x000042b5
  30:	00004635 	.word	0x00004635
  34:	00000000 	.word	0x00000000
  38:	0000425d 	.word	0x0000425d
  3c:	00014f03 	.word	0x00014f03

00000040 <_irq_vector_table>:
  40:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  50:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  60:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  70:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  80:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  90:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  a0:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  b0:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  c0:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  d0:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  e0:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..
  f0:	000043a1 000043a1 000043a1 000043a1     .C...C...C...C..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__data_size+0xd1>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__data_size+0xbd>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__data_size+0x7>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__data_size+0x123>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__data_size+0x51>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__data_size+0x4d>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__data_size+0x67>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__data_size+0xb5>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__data_size+0x9d>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__data_size+0x131>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__data_size+0xf5>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__data_size+0x113>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__data_size+0x1b>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__data_size+0x1b>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__data_size+0x1b>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__gedf2>:
     93c:	f04f 3cff 	mov.w	ip, #4294967295
     940:	e006      	b.n	950 <__cmpdf2+0x4>
     942:	bf00      	nop

00000944 <__ledf2>:
     944:	f04f 0c01 	mov.w	ip, #1
     948:	e002      	b.n	950 <__cmpdf2+0x4>
     94a:	bf00      	nop

0000094c <__cmpdf2>:
     94c:	f04f 0c01 	mov.w	ip, #1
     950:	f84d cd04 	str.w	ip, [sp, #-4]!
     954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     95c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     960:	bf18      	it	ne
     962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     966:	d01b      	beq.n	9a0 <__cmpdf2+0x54>
     968:	b001      	add	sp, #4
     96a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     96e:	bf0c      	ite	eq
     970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     974:	ea91 0f03 	teqne	r1, r3
     978:	bf02      	ittt	eq
     97a:	ea90 0f02 	teqeq	r0, r2
     97e:	2000      	moveq	r0, #0
     980:	4770      	bxeq	lr
     982:	f110 0f00 	cmn.w	r0, #0
     986:	ea91 0f03 	teq	r1, r3
     98a:	bf58      	it	pl
     98c:	4299      	cmppl	r1, r3
     98e:	bf08      	it	eq
     990:	4290      	cmpeq	r0, r2
     992:	bf2c      	ite	cs
     994:	17d8      	asrcs	r0, r3, #31
     996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     99a:	f040 0001 	orr.w	r0, r0, #1
     99e:	4770      	bx	lr
     9a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9a8:	d102      	bne.n	9b0 <__cmpdf2+0x64>
     9aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9ae:	d107      	bne.n	9c0 <__cmpdf2+0x74>
     9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9b8:	d1d6      	bne.n	968 <__cmpdf2+0x1c>
     9ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9be:	d0d3      	beq.n	968 <__cmpdf2+0x1c>
     9c0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <__aeabi_cdrcmple>:
     9c8:	4684      	mov	ip, r0
     9ca:	4610      	mov	r0, r2
     9cc:	4662      	mov	r2, ip
     9ce:	468c      	mov	ip, r1
     9d0:	4619      	mov	r1, r3
     9d2:	4663      	mov	r3, ip
     9d4:	e000      	b.n	9d8 <__aeabi_cdcmpeq>
     9d6:	bf00      	nop

000009d8 <__aeabi_cdcmpeq>:
     9d8:	b501      	push	{r0, lr}
     9da:	f7ff ffb7 	bl	94c <__cmpdf2>
     9de:	2800      	cmp	r0, #0
     9e0:	bf48      	it	mi
     9e2:	f110 0f00 	cmnmi.w	r0, #0
     9e6:	bd01      	pop	{r0, pc}

000009e8 <__aeabi_dcmpeq>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff fff4 	bl	9d8 <__aeabi_cdcmpeq>
     9f0:	bf0c      	ite	eq
     9f2:	2001      	moveq	r0, #1
     9f4:	2000      	movne	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_dcmplt>:
     9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
     a00:	f7ff ffea 	bl	9d8 <__aeabi_cdcmpeq>
     a04:	bf34      	ite	cc
     a06:	2001      	movcc	r0, #1
     a08:	2000      	movcs	r0, #0
     a0a:	f85d fb08 	ldr.w	pc, [sp], #8
     a0e:	bf00      	nop

00000a10 <__aeabi_dcmple>:
     a10:	f84d ed08 	str.w	lr, [sp, #-8]!
     a14:	f7ff ffe0 	bl	9d8 <__aeabi_cdcmpeq>
     a18:	bf94      	ite	ls
     a1a:	2001      	movls	r0, #1
     a1c:	2000      	movhi	r0, #0
     a1e:	f85d fb08 	ldr.w	pc, [sp], #8
     a22:	bf00      	nop

00000a24 <__aeabi_dcmpge>:
     a24:	f84d ed08 	str.w	lr, [sp, #-8]!
     a28:	f7ff ffce 	bl	9c8 <__aeabi_cdrcmple>
     a2c:	bf94      	ite	ls
     a2e:	2001      	movls	r0, #1
     a30:	2000      	movhi	r0, #0
     a32:	f85d fb08 	ldr.w	pc, [sp], #8
     a36:	bf00      	nop

00000a38 <__aeabi_dcmpgt>:
     a38:	f84d ed08 	str.w	lr, [sp, #-8]!
     a3c:	f7ff ffc4 	bl	9c8 <__aeabi_cdrcmple>
     a40:	bf34      	ite	cc
     a42:	2001      	movcc	r0, #1
     a44:	2000      	movcs	r0, #0
     a46:	f85d fb08 	ldr.w	pc, [sp], #8
     a4a:	bf00      	nop

00000a4c <__aeabi_d2iz>:
     a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d215      	bcs.n	a82 <__aeabi_d2iz+0x36>
     a56:	d511      	bpl.n	a7c <__aeabi_d2iz+0x30>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d912      	bls.n	a88 <__aeabi_d2iz+0x3c>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a72:	fa23 f002 	lsr.w	r0, r3, r2
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	4770      	bx	lr
     a7c:	f04f 0000 	mov.w	r0, #0
     a80:	4770      	bx	lr
     a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a86:	d105      	bne.n	a94 <__aeabi_d2iz+0x48>
     a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a8c:	bf08      	it	eq
     a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a92:	4770      	bx	lr
     a94:	f04f 0000 	mov.w	r0, #0
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_d2f>:
     a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     aa4:	bf24      	itt	cs
     aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     aae:	d90d      	bls.n	acc <__aeabi_d2f+0x30>
     ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     ac4:	bf08      	it	eq
     ac6:	f020 0001 	biceq.w	r0, r0, #1
     aca:	4770      	bx	lr
     acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     ad0:	d121      	bne.n	b16 <__aeabi_d2f+0x7a>
     ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     ad6:	bfbc      	itt	lt
     ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     adc:	4770      	bxlt	lr
     ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     ae6:	f1c2 0218 	rsb	r2, r2, #24
     aea:	f1c2 0c20 	rsb	ip, r2, #32
     aee:	fa10 f30c 	lsls.w	r3, r0, ip
     af2:	fa20 f002 	lsr.w	r0, r0, r2
     af6:	bf18      	it	ne
     af8:	f040 0001 	orrne.w	r0, r0, #1
     afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     b04:	fa03 fc0c 	lsl.w	ip, r3, ip
     b08:	ea40 000c 	orr.w	r0, r0, ip
     b0c:	fa23 f302 	lsr.w	r3, r3, r2
     b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b14:	e7cc      	b.n	ab0 <__aeabi_d2f+0x14>
     b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
     b1a:	d107      	bne.n	b2c <__aeabi_d2f+0x90>
     b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     b20:	bf1e      	ittt	ne
     b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     b2a:	4770      	bxne	lr
     b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <__aeabi_frsub>:
     b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     b40:	e002      	b.n	b48 <__addsf3>
     b42:	bf00      	nop

00000b44 <__aeabi_fsub>:
     b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b48 <__addsf3>:
     b48:	0042      	lsls	r2, r0, #1
     b4a:	bf1f      	itttt	ne
     b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b50:	ea92 0f03 	teqne	r2, r3
     b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b5c:	d06a      	beq.n	c34 <__addsf3+0xec>
     b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b66:	bfc1      	itttt	gt
     b68:	18d2      	addgt	r2, r2, r3
     b6a:	4041      	eorgt	r1, r0
     b6c:	4048      	eorgt	r0, r1
     b6e:	4041      	eorgt	r1, r0
     b70:	bfb8      	it	lt
     b72:	425b      	neglt	r3, r3
     b74:	2b19      	cmp	r3, #25
     b76:	bf88      	it	hi
     b78:	4770      	bxhi	lr
     b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b86:	bf18      	it	ne
     b88:	4240      	negne	r0, r0
     b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b96:	bf18      	it	ne
     b98:	4249      	negne	r1, r1
     b9a:	ea92 0f03 	teq	r2, r3
     b9e:	d03f      	beq.n	c20 <__addsf3+0xd8>
     ba0:	f1a2 0201 	sub.w	r2, r2, #1
     ba4:	fa41 fc03 	asr.w	ip, r1, r3
     ba8:	eb10 000c 	adds.w	r0, r0, ip
     bac:	f1c3 0320 	rsb	r3, r3, #32
     bb0:	fa01 f103 	lsl.w	r1, r1, r3
     bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     bb8:	d502      	bpl.n	bc0 <__addsf3+0x78>
     bba:	4249      	negs	r1, r1
     bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     bc4:	d313      	bcc.n	bee <__addsf3+0xa6>
     bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     bca:	d306      	bcc.n	bda <__addsf3+0x92>
     bcc:	0840      	lsrs	r0, r0, #1
     bce:	ea4f 0131 	mov.w	r1, r1, rrx
     bd2:	f102 0201 	add.w	r2, r2, #1
     bd6:	2afe      	cmp	r2, #254	; 0xfe
     bd8:	d251      	bcs.n	c7e <__addsf3+0x136>
     bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     be2:	bf08      	it	eq
     be4:	f020 0001 	biceq.w	r0, r0, #1
     be8:	ea40 0003 	orr.w	r0, r0, r3
     bec:	4770      	bx	lr
     bee:	0049      	lsls	r1, r1, #1
     bf0:	eb40 0000 	adc.w	r0, r0, r0
     bf4:	3a01      	subs	r2, #1
     bf6:	bf28      	it	cs
     bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bfc:	d2ed      	bcs.n	bda <__addsf3+0x92>
     bfe:	fab0 fc80 	clz	ip, r0
     c02:	f1ac 0c08 	sub.w	ip, ip, #8
     c06:	ebb2 020c 	subs.w	r2, r2, ip
     c0a:	fa00 f00c 	lsl.w	r0, r0, ip
     c0e:	bfaa      	itet	ge
     c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     c14:	4252      	neglt	r2, r2
     c16:	4318      	orrge	r0, r3
     c18:	bfbc      	itt	lt
     c1a:	40d0      	lsrlt	r0, r2
     c1c:	4318      	orrlt	r0, r3
     c1e:	4770      	bx	lr
     c20:	f092 0f00 	teq	r2, #0
     c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     c28:	bf06      	itte	eq
     c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     c2e:	3201      	addeq	r2, #1
     c30:	3b01      	subne	r3, #1
     c32:	e7b5      	b.n	ba0 <__addsf3+0x58>
     c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     c3c:	bf18      	it	ne
     c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     c42:	d021      	beq.n	c88 <__addsf3+0x140>
     c44:	ea92 0f03 	teq	r2, r3
     c48:	d004      	beq.n	c54 <__addsf3+0x10c>
     c4a:	f092 0f00 	teq	r2, #0
     c4e:	bf08      	it	eq
     c50:	4608      	moveq	r0, r1
     c52:	4770      	bx	lr
     c54:	ea90 0f01 	teq	r0, r1
     c58:	bf1c      	itt	ne
     c5a:	2000      	movne	r0, #0
     c5c:	4770      	bxne	lr
     c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c62:	d104      	bne.n	c6e <__addsf3+0x126>
     c64:	0040      	lsls	r0, r0, #1
     c66:	bf28      	it	cs
     c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c6c:	4770      	bx	lr
     c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c72:	bf3c      	itt	cc
     c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c78:	4770      	bxcc	lr
     c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c86:	4770      	bx	lr
     c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c8c:	bf16      	itet	ne
     c8e:	4608      	movne	r0, r1
     c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c94:	4601      	movne	r1, r0
     c96:	0242      	lsls	r2, r0, #9
     c98:	bf06      	itte	eq
     c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c9e:	ea90 0f01 	teqeq	r0, r1
     ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     ca6:	4770      	bx	lr

00000ca8 <__aeabi_ui2f>:
     ca8:	f04f 0300 	mov.w	r3, #0
     cac:	e004      	b.n	cb8 <__aeabi_i2f+0x8>
     cae:	bf00      	nop

00000cb0 <__aeabi_i2f>:
     cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     cb4:	bf48      	it	mi
     cb6:	4240      	negmi	r0, r0
     cb8:	ea5f 0c00 	movs.w	ip, r0
     cbc:	bf08      	it	eq
     cbe:	4770      	bxeq	lr
     cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     cc4:	4601      	mov	r1, r0
     cc6:	f04f 0000 	mov.w	r0, #0
     cca:	e01c      	b.n	d06 <__aeabi_l2f+0x2a>

00000ccc <__aeabi_ul2f>:
     ccc:	ea50 0201 	orrs.w	r2, r0, r1
     cd0:	bf08      	it	eq
     cd2:	4770      	bxeq	lr
     cd4:	f04f 0300 	mov.w	r3, #0
     cd8:	e00a      	b.n	cf0 <__aeabi_l2f+0x14>
     cda:	bf00      	nop

00000cdc <__aeabi_l2f>:
     cdc:	ea50 0201 	orrs.w	r2, r0, r1
     ce0:	bf08      	it	eq
     ce2:	4770      	bxeq	lr
     ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ce8:	d502      	bpl.n	cf0 <__aeabi_l2f+0x14>
     cea:	4240      	negs	r0, r0
     cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     cf0:	ea5f 0c01 	movs.w	ip, r1
     cf4:	bf02      	ittt	eq
     cf6:	4684      	moveq	ip, r0
     cf8:	4601      	moveq	r1, r0
     cfa:	2000      	moveq	r0, #0
     cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     d00:	bf08      	it	eq
     d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     d0a:	fabc f28c 	clz	r2, ip
     d0e:	3a08      	subs	r2, #8
     d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     d14:	db10      	blt.n	d38 <__aeabi_l2f+0x5c>
     d16:	fa01 fc02 	lsl.w	ip, r1, r2
     d1a:	4463      	add	r3, ip
     d1c:	fa00 fc02 	lsl.w	ip, r0, r2
     d20:	f1c2 0220 	rsb	r2, r2, #32
     d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     d28:	fa20 f202 	lsr.w	r2, r0, r2
     d2c:	eb43 0002 	adc.w	r0, r3, r2
     d30:	bf08      	it	eq
     d32:	f020 0001 	biceq.w	r0, r0, #1
     d36:	4770      	bx	lr
     d38:	f102 0220 	add.w	r2, r2, #32
     d3c:	fa01 fc02 	lsl.w	ip, r1, r2
     d40:	f1c2 0220 	rsb	r2, r2, #32
     d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d48:	fa21 f202 	lsr.w	r2, r1, r2
     d4c:	eb43 0002 	adc.w	r0, r3, r2
     d50:	bf08      	it	eq
     d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d56:	4770      	bx	lr

00000d58 <__aeabi_fmul>:
     d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d60:	bf1e      	ittt	ne
     d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d66:	ea92 0f0c 	teqne	r2, ip
     d6a:	ea93 0f0c 	teqne	r3, ip
     d6e:	d06f      	beq.n	e50 <__aeabi_fmul+0xf8>
     d70:	441a      	add	r2, r3
     d72:	ea80 0c01 	eor.w	ip, r0, r1
     d76:	0240      	lsls	r0, r0, #9
     d78:	bf18      	it	ne
     d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d7e:	d01e      	beq.n	dbe <__aeabi_fmul+0x66>
     d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d8c:	fba0 3101 	umull	r3, r1, r0, r1
     d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d98:	bf3e      	ittt	cc
     d9a:	0049      	lslcc	r1, r1, #1
     d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     da0:	005b      	lslcc	r3, r3, #1
     da2:	ea40 0001 	orr.w	r0, r0, r1
     da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     daa:	2afd      	cmp	r2, #253	; 0xfd
     dac:	d81d      	bhi.n	dea <__aeabi_fmul+0x92>
     dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     db6:	bf08      	it	eq
     db8:	f020 0001 	biceq.w	r0, r0, #1
     dbc:	4770      	bx	lr
     dbe:	f090 0f00 	teq	r0, #0
     dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     dc6:	bf08      	it	eq
     dc8:	0249      	lsleq	r1, r1, #9
     dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     dd2:	3a7f      	subs	r2, #127	; 0x7f
     dd4:	bfc2      	ittt	gt
     dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dde:	4770      	bxgt	lr
     de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     de4:	f04f 0300 	mov.w	r3, #0
     de8:	3a01      	subs	r2, #1
     dea:	dc5d      	bgt.n	ea8 <__aeabi_fmul+0x150>
     dec:	f112 0f19 	cmn.w	r2, #25
     df0:	bfdc      	itt	le
     df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     df6:	4770      	bxle	lr
     df8:	f1c2 0200 	rsb	r2, r2, #0
     dfc:	0041      	lsls	r1, r0, #1
     dfe:	fa21 f102 	lsr.w	r1, r1, r2
     e02:	f1c2 0220 	rsb	r2, r2, #32
     e06:	fa00 fc02 	lsl.w	ip, r0, r2
     e0a:	ea5f 0031 	movs.w	r0, r1, rrx
     e0e:	f140 0000 	adc.w	r0, r0, #0
     e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     e16:	bf08      	it	eq
     e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     e1c:	4770      	bx	lr
     e1e:	f092 0f00 	teq	r2, #0
     e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e26:	bf02      	ittt	eq
     e28:	0040      	lsleq	r0, r0, #1
     e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e2e:	3a01      	subeq	r2, #1
     e30:	d0f9      	beq.n	e26 <__aeabi_fmul+0xce>
     e32:	ea40 000c 	orr.w	r0, r0, ip
     e36:	f093 0f00 	teq	r3, #0
     e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e3e:	bf02      	ittt	eq
     e40:	0049      	lsleq	r1, r1, #1
     e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e46:	3b01      	subeq	r3, #1
     e48:	d0f9      	beq.n	e3e <__aeabi_fmul+0xe6>
     e4a:	ea41 010c 	orr.w	r1, r1, ip
     e4e:	e78f      	b.n	d70 <__aeabi_fmul+0x18>
     e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e54:	ea92 0f0c 	teq	r2, ip
     e58:	bf18      	it	ne
     e5a:	ea93 0f0c 	teqne	r3, ip
     e5e:	d00a      	beq.n	e76 <__aeabi_fmul+0x11e>
     e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e64:	bf18      	it	ne
     e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e6a:	d1d8      	bne.n	e1e <__aeabi_fmul+0xc6>
     e6c:	ea80 0001 	eor.w	r0, r0, r1
     e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e74:	4770      	bx	lr
     e76:	f090 0f00 	teq	r0, #0
     e7a:	bf17      	itett	ne
     e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e80:	4608      	moveq	r0, r1
     e82:	f091 0f00 	teqne	r1, #0
     e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e8a:	d014      	beq.n	eb6 <__aeabi_fmul+0x15e>
     e8c:	ea92 0f0c 	teq	r2, ip
     e90:	d101      	bne.n	e96 <__aeabi_fmul+0x13e>
     e92:	0242      	lsls	r2, r0, #9
     e94:	d10f      	bne.n	eb6 <__aeabi_fmul+0x15e>
     e96:	ea93 0f0c 	teq	r3, ip
     e9a:	d103      	bne.n	ea4 <__aeabi_fmul+0x14c>
     e9c:	024b      	lsls	r3, r1, #9
     e9e:	bf18      	it	ne
     ea0:	4608      	movne	r0, r1
     ea2:	d108      	bne.n	eb6 <__aeabi_fmul+0x15e>
     ea4:	ea80 0001 	eor.w	r0, r0, r1
     ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     eb4:	4770      	bx	lr
     eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     ebe:	4770      	bx	lr

00000ec0 <__aeabi_fdiv>:
     ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     ec8:	bf1e      	ittt	ne
     eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     ece:	ea92 0f0c 	teqne	r2, ip
     ed2:	ea93 0f0c 	teqne	r3, ip
     ed6:	d069      	beq.n	fac <__aeabi_fdiv+0xec>
     ed8:	eba2 0203 	sub.w	r2, r2, r3
     edc:	ea80 0c01 	eor.w	ip, r0, r1
     ee0:	0249      	lsls	r1, r1, #9
     ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     ee6:	d037      	beq.n	f58 <__aeabi_fdiv+0x98>
     ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     ef8:	428b      	cmp	r3, r1
     efa:	bf38      	it	cc
     efc:	005b      	lslcc	r3, r3, #1
     efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     f06:	428b      	cmp	r3, r1
     f08:	bf24      	itt	cs
     f0a:	1a5b      	subcs	r3, r3, r1
     f0c:	ea40 000c 	orrcs.w	r0, r0, ip
     f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     f14:	bf24      	itt	cs
     f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     f22:	bf24      	itt	cs
     f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     f30:	bf24      	itt	cs
     f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     f3a:	011b      	lsls	r3, r3, #4
     f3c:	bf18      	it	ne
     f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     f42:	d1e0      	bne.n	f06 <__aeabi_fdiv+0x46>
     f44:	2afd      	cmp	r2, #253	; 0xfd
     f46:	f63f af50 	bhi.w	dea <__aeabi_fmul+0x92>
     f4a:	428b      	cmp	r3, r1
     f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f50:	bf08      	it	eq
     f52:	f020 0001 	biceq.w	r0, r0, #1
     f56:	4770      	bx	lr
     f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f60:	327f      	adds	r2, #127	; 0x7f
     f62:	bfc2      	ittt	gt
     f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f6c:	4770      	bxgt	lr
     f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f72:	f04f 0300 	mov.w	r3, #0
     f76:	3a01      	subs	r2, #1
     f78:	e737      	b.n	dea <__aeabi_fmul+0x92>
     f7a:	f092 0f00 	teq	r2, #0
     f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f82:	bf02      	ittt	eq
     f84:	0040      	lsleq	r0, r0, #1
     f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f8a:	3a01      	subeq	r2, #1
     f8c:	d0f9      	beq.n	f82 <__aeabi_fdiv+0xc2>
     f8e:	ea40 000c 	orr.w	r0, r0, ip
     f92:	f093 0f00 	teq	r3, #0
     f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f9a:	bf02      	ittt	eq
     f9c:	0049      	lsleq	r1, r1, #1
     f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     fa2:	3b01      	subeq	r3, #1
     fa4:	d0f9      	beq.n	f9a <__aeabi_fdiv+0xda>
     fa6:	ea41 010c 	orr.w	r1, r1, ip
     faa:	e795      	b.n	ed8 <__aeabi_fdiv+0x18>
     fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     fb0:	ea92 0f0c 	teq	r2, ip
     fb4:	d108      	bne.n	fc8 <__aeabi_fdiv+0x108>
     fb6:	0242      	lsls	r2, r0, #9
     fb8:	f47f af7d 	bne.w	eb6 <__aeabi_fmul+0x15e>
     fbc:	ea93 0f0c 	teq	r3, ip
     fc0:	f47f af70 	bne.w	ea4 <__aeabi_fmul+0x14c>
     fc4:	4608      	mov	r0, r1
     fc6:	e776      	b.n	eb6 <__aeabi_fmul+0x15e>
     fc8:	ea93 0f0c 	teq	r3, ip
     fcc:	d104      	bne.n	fd8 <__aeabi_fdiv+0x118>
     fce:	024b      	lsls	r3, r1, #9
     fd0:	f43f af4c 	beq.w	e6c <__aeabi_fmul+0x114>
     fd4:	4608      	mov	r0, r1
     fd6:	e76e      	b.n	eb6 <__aeabi_fmul+0x15e>
     fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     fdc:	bf18      	it	ne
     fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     fe2:	d1ca      	bne.n	f7a <__aeabi_fdiv+0xba>
     fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fe8:	f47f af5c 	bne.w	ea4 <__aeabi_fmul+0x14c>
     fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     ff0:	f47f af3c 	bne.w	e6c <__aeabi_fmul+0x114>
     ff4:	e75f      	b.n	eb6 <__aeabi_fmul+0x15e>
     ff6:	bf00      	nop

00000ff8 <__gesf2>:
     ff8:	f04f 3cff 	mov.w	ip, #4294967295
     ffc:	e006      	b.n	100c <__cmpsf2+0x4>
     ffe:	bf00      	nop

00001000 <__lesf2>:
    1000:	f04f 0c01 	mov.w	ip, #1
    1004:	e002      	b.n	100c <__cmpsf2+0x4>
    1006:	bf00      	nop

00001008 <__cmpsf2>:
    1008:	f04f 0c01 	mov.w	ip, #1
    100c:	f84d cd04 	str.w	ip, [sp, #-4]!
    1010:	ea4f 0240 	mov.w	r2, r0, lsl #1
    1014:	ea4f 0341 	mov.w	r3, r1, lsl #1
    1018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    101c:	bf18      	it	ne
    101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1022:	d011      	beq.n	1048 <__cmpsf2+0x40>
    1024:	b001      	add	sp, #4
    1026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    102a:	bf18      	it	ne
    102c:	ea90 0f01 	teqne	r0, r1
    1030:	bf58      	it	pl
    1032:	ebb2 0003 	subspl.w	r0, r2, r3
    1036:	bf88      	it	hi
    1038:	17c8      	asrhi	r0, r1, #31
    103a:	bf38      	it	cc
    103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    1040:	bf18      	it	ne
    1042:	f040 0001 	orrne.w	r0, r0, #1
    1046:	4770      	bx	lr
    1048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    104c:	d102      	bne.n	1054 <__cmpsf2+0x4c>
    104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    1052:	d105      	bne.n	1060 <__cmpsf2+0x58>
    1054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1058:	d1e4      	bne.n	1024 <__cmpsf2+0x1c>
    105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    105e:	d0e1      	beq.n	1024 <__cmpsf2+0x1c>
    1060:	f85d 0b04 	ldr.w	r0, [sp], #4
    1064:	4770      	bx	lr
    1066:	bf00      	nop

00001068 <__aeabi_cfrcmple>:
    1068:	4684      	mov	ip, r0
    106a:	4608      	mov	r0, r1
    106c:	4661      	mov	r1, ip
    106e:	e7ff      	b.n	1070 <__aeabi_cfcmpeq>

00001070 <__aeabi_cfcmpeq>:
    1070:	b50f      	push	{r0, r1, r2, r3, lr}
    1072:	f7ff ffc9 	bl	1008 <__cmpsf2>
    1076:	2800      	cmp	r0, #0
    1078:	bf48      	it	mi
    107a:	f110 0f00 	cmnmi.w	r0, #0
    107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001080 <__aeabi_fcmpeq>:
    1080:	f84d ed08 	str.w	lr, [sp, #-8]!
    1084:	f7ff fff4 	bl	1070 <__aeabi_cfcmpeq>
    1088:	bf0c      	ite	eq
    108a:	2001      	moveq	r0, #1
    108c:	2000      	movne	r0, #0
    108e:	f85d fb08 	ldr.w	pc, [sp], #8
    1092:	bf00      	nop

00001094 <__aeabi_fcmplt>:
    1094:	f84d ed08 	str.w	lr, [sp, #-8]!
    1098:	f7ff ffea 	bl	1070 <__aeabi_cfcmpeq>
    109c:	bf34      	ite	cc
    109e:	2001      	movcc	r0, #1
    10a0:	2000      	movcs	r0, #0
    10a2:	f85d fb08 	ldr.w	pc, [sp], #8
    10a6:	bf00      	nop

000010a8 <__aeabi_fcmple>:
    10a8:	f84d ed08 	str.w	lr, [sp, #-8]!
    10ac:	f7ff ffe0 	bl	1070 <__aeabi_cfcmpeq>
    10b0:	bf94      	ite	ls
    10b2:	2001      	movls	r0, #1
    10b4:	2000      	movhi	r0, #0
    10b6:	f85d fb08 	ldr.w	pc, [sp], #8
    10ba:	bf00      	nop

000010bc <__aeabi_fcmpge>:
    10bc:	f84d ed08 	str.w	lr, [sp, #-8]!
    10c0:	f7ff ffd2 	bl	1068 <__aeabi_cfrcmple>
    10c4:	bf94      	ite	ls
    10c6:	2001      	movls	r0, #1
    10c8:	2000      	movhi	r0, #0
    10ca:	f85d fb08 	ldr.w	pc, [sp], #8
    10ce:	bf00      	nop

000010d0 <__aeabi_fcmpgt>:
    10d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    10d4:	f7ff ffc8 	bl	1068 <__aeabi_cfrcmple>
    10d8:	bf34      	ite	cc
    10da:	2001      	movcc	r0, #1
    10dc:	2000      	movcs	r0, #0
    10de:	f85d fb08 	ldr.w	pc, [sp], #8
    10e2:	bf00      	nop

000010e4 <__aeabi_f2iz>:
    10e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10ec:	d30f      	bcc.n	110e <__aeabi_f2iz+0x2a>
    10ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10f6:	d90d      	bls.n	1114 <__aeabi_f2iz+0x30>
    10f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    1104:	fa23 f002 	lsr.w	r0, r3, r2
    1108:	bf18      	it	ne
    110a:	4240      	negne	r0, r0
    110c:	4770      	bx	lr
    110e:	f04f 0000 	mov.w	r0, #0
    1112:	4770      	bx	lr
    1114:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1118:	d101      	bne.n	111e <__aeabi_f2iz+0x3a>
    111a:	0242      	lsls	r2, r0, #9
    111c:	d105      	bne.n	112a <__aeabi_f2iz+0x46>
    111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    1122:	bf08      	it	eq
    1124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1128:	4770      	bx	lr
    112a:	f04f 0000 	mov.w	r0, #0
    112e:	4770      	bx	lr

00001130 <__aeabi_uldivmod>:
    1130:	b953      	cbnz	r3, 1148 <__aeabi_uldivmod+0x18>
    1132:	b94a      	cbnz	r2, 1148 <__aeabi_uldivmod+0x18>
    1134:	2900      	cmp	r1, #0
    1136:	bf08      	it	eq
    1138:	2800      	cmpeq	r0, #0
    113a:	bf1c      	itt	ne
    113c:	f04f 31ff 	movne.w	r1, #4294967295
    1140:	f04f 30ff 	movne.w	r0, #4294967295
    1144:	f000 b9a4 	b.w	1490 <__aeabi_idiv0>
    1148:	f1ad 0c08 	sub.w	ip, sp, #8
    114c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1150:	f000 f83e 	bl	11d0 <__udivmoddi4>
    1154:	f8dd e004 	ldr.w	lr, [sp, #4]
    1158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    115c:	b004      	add	sp, #16
    115e:	4770      	bx	lr

00001160 <__aeabi_d2lz>:
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4605      	mov	r5, r0
    1164:	460c      	mov	r4, r1
    1166:	4628      	mov	r0, r5
    1168:	4621      	mov	r1, r4
    116a:	2200      	movs	r2, #0
    116c:	2300      	movs	r3, #0
    116e:	f7ff fc45 	bl	9fc <__aeabi_dcmplt>
    1172:	b928      	cbnz	r0, 1180 <__aeabi_d2lz+0x20>
    1174:	4628      	mov	r0, r5
    1176:	4621      	mov	r1, r4
    1178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    117c:	f000 b80a 	b.w	1194 <__aeabi_d2ulz>
    1180:	4628      	mov	r0, r5
    1182:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    1186:	f000 f805 	bl	1194 <__aeabi_d2ulz>
    118a:	4240      	negs	r0, r0
    118c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1190:	bd38      	pop	{r3, r4, r5, pc}
    1192:	bf00      	nop

00001194 <__aeabi_d2ulz>:
    1194:	b5d0      	push	{r4, r6, r7, lr}
    1196:	4b0c      	ldr	r3, [pc, #48]	; (11c8 <__aeabi_d2ulz+0x34>)
    1198:	2200      	movs	r2, #0
    119a:	4606      	mov	r6, r0
    119c:	460f      	mov	r7, r1
    119e:	f7ff f9bb 	bl	518 <__aeabi_dmul>
    11a2:	f000 f977 	bl	1494 <__aeabi_d2uiz>
    11a6:	4604      	mov	r4, r0
    11a8:	f7ff f93c 	bl	424 <__aeabi_ui2d>
    11ac:	4b07      	ldr	r3, [pc, #28]	; (11cc <__aeabi_d2ulz+0x38>)
    11ae:	2200      	movs	r2, #0
    11b0:	f7ff f9b2 	bl	518 <__aeabi_dmul>
    11b4:	4602      	mov	r2, r0
    11b6:	460b      	mov	r3, r1
    11b8:	4630      	mov	r0, r6
    11ba:	4639      	mov	r1, r7
    11bc:	f7fe fff4 	bl	1a8 <__aeabi_dsub>
    11c0:	f000 f968 	bl	1494 <__aeabi_d2uiz>
    11c4:	4621      	mov	r1, r4
    11c6:	bdd0      	pop	{r4, r6, r7, pc}
    11c8:	3df00000 	.word	0x3df00000
    11cc:	41f00000 	.word	0x41f00000

000011d0 <__udivmoddi4>:
    11d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11d4:	9e08      	ldr	r6, [sp, #32]
    11d6:	460d      	mov	r5, r1
    11d8:	4604      	mov	r4, r0
    11da:	468e      	mov	lr, r1
    11dc:	2b00      	cmp	r3, #0
    11de:	f040 8082 	bne.w	12e6 <__udivmoddi4+0x116>
    11e2:	428a      	cmp	r2, r1
    11e4:	4617      	mov	r7, r2
    11e6:	d946      	bls.n	1276 <__udivmoddi4+0xa6>
    11e8:	fab2 f282 	clz	r2, r2
    11ec:	b14a      	cbz	r2, 1202 <__udivmoddi4+0x32>
    11ee:	f1c2 0120 	rsb	r1, r2, #32
    11f2:	fa05 f302 	lsl.w	r3, r5, r2
    11f6:	fa20 f101 	lsr.w	r1, r0, r1
    11fa:	4097      	lsls	r7, r2
    11fc:	ea41 0e03 	orr.w	lr, r1, r3
    1200:	4094      	lsls	r4, r2
    1202:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1206:	0c23      	lsrs	r3, r4, #16
    1208:	fbbe fcf8 	udiv	ip, lr, r8
    120c:	b2b9      	uxth	r1, r7
    120e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1212:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1216:	fb0c f001 	mul.w	r0, ip, r1
    121a:	4298      	cmp	r0, r3
    121c:	d90a      	bls.n	1234 <__udivmoddi4+0x64>
    121e:	18fb      	adds	r3, r7, r3
    1220:	f10c 35ff 	add.w	r5, ip, #4294967295
    1224:	f080 8116 	bcs.w	1454 <__udivmoddi4+0x284>
    1228:	4298      	cmp	r0, r3
    122a:	f240 8113 	bls.w	1454 <__udivmoddi4+0x284>
    122e:	f1ac 0c02 	sub.w	ip, ip, #2
    1232:	443b      	add	r3, r7
    1234:	1a1b      	subs	r3, r3, r0
    1236:	b2a4      	uxth	r4, r4
    1238:	fbb3 f0f8 	udiv	r0, r3, r8
    123c:	fb08 3310 	mls	r3, r8, r0, r3
    1240:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1244:	fb00 f101 	mul.w	r1, r0, r1
    1248:	42a1      	cmp	r1, r4
    124a:	d909      	bls.n	1260 <__udivmoddi4+0x90>
    124c:	193c      	adds	r4, r7, r4
    124e:	f100 33ff 	add.w	r3, r0, #4294967295
    1252:	f080 8101 	bcs.w	1458 <__udivmoddi4+0x288>
    1256:	42a1      	cmp	r1, r4
    1258:	f240 80fe 	bls.w	1458 <__udivmoddi4+0x288>
    125c:	3802      	subs	r0, #2
    125e:	443c      	add	r4, r7
    1260:	1a64      	subs	r4, r4, r1
    1262:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1266:	2100      	movs	r1, #0
    1268:	b11e      	cbz	r6, 1272 <__udivmoddi4+0xa2>
    126a:	40d4      	lsrs	r4, r2
    126c:	2300      	movs	r3, #0
    126e:	e9c6 4300 	strd	r4, r3, [r6]
    1272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1276:	b902      	cbnz	r2, 127a <__udivmoddi4+0xaa>
    1278:	deff      	udf	#255	; 0xff
    127a:	fab2 f282 	clz	r2, r2
    127e:	2a00      	cmp	r2, #0
    1280:	d14f      	bne.n	1322 <__udivmoddi4+0x152>
    1282:	1bcb      	subs	r3, r1, r7
    1284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1288:	fa1f f887 	uxth.w	r8, r7
    128c:	2101      	movs	r1, #1
    128e:	fbb3 fcfe 	udiv	ip, r3, lr
    1292:	0c25      	lsrs	r5, r4, #16
    1294:	fb0e 331c 	mls	r3, lr, ip, r3
    1298:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    129c:	fb08 f30c 	mul.w	r3, r8, ip
    12a0:	42ab      	cmp	r3, r5
    12a2:	d907      	bls.n	12b4 <__udivmoddi4+0xe4>
    12a4:	197d      	adds	r5, r7, r5
    12a6:	f10c 30ff 	add.w	r0, ip, #4294967295
    12aa:	d202      	bcs.n	12b2 <__udivmoddi4+0xe2>
    12ac:	42ab      	cmp	r3, r5
    12ae:	f200 80e7 	bhi.w	1480 <__udivmoddi4+0x2b0>
    12b2:	4684      	mov	ip, r0
    12b4:	1aed      	subs	r5, r5, r3
    12b6:	b2a3      	uxth	r3, r4
    12b8:	fbb5 f0fe 	udiv	r0, r5, lr
    12bc:	fb0e 5510 	mls	r5, lr, r0, r5
    12c0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    12c4:	fb08 f800 	mul.w	r8, r8, r0
    12c8:	45a0      	cmp	r8, r4
    12ca:	d907      	bls.n	12dc <__udivmoddi4+0x10c>
    12cc:	193c      	adds	r4, r7, r4
    12ce:	f100 33ff 	add.w	r3, r0, #4294967295
    12d2:	d202      	bcs.n	12da <__udivmoddi4+0x10a>
    12d4:	45a0      	cmp	r8, r4
    12d6:	f200 80d7 	bhi.w	1488 <__udivmoddi4+0x2b8>
    12da:	4618      	mov	r0, r3
    12dc:	eba4 0408 	sub.w	r4, r4, r8
    12e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    12e4:	e7c0      	b.n	1268 <__udivmoddi4+0x98>
    12e6:	428b      	cmp	r3, r1
    12e8:	d908      	bls.n	12fc <__udivmoddi4+0x12c>
    12ea:	2e00      	cmp	r6, #0
    12ec:	f000 80af 	beq.w	144e <__udivmoddi4+0x27e>
    12f0:	2100      	movs	r1, #0
    12f2:	e9c6 0500 	strd	r0, r5, [r6]
    12f6:	4608      	mov	r0, r1
    12f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12fc:	fab3 f183 	clz	r1, r3
    1300:	2900      	cmp	r1, #0
    1302:	d14b      	bne.n	139c <__udivmoddi4+0x1cc>
    1304:	42ab      	cmp	r3, r5
    1306:	d302      	bcc.n	130e <__udivmoddi4+0x13e>
    1308:	4282      	cmp	r2, r0
    130a:	f200 80b7 	bhi.w	147c <__udivmoddi4+0x2ac>
    130e:	1a84      	subs	r4, r0, r2
    1310:	eb65 0303 	sbc.w	r3, r5, r3
    1314:	2001      	movs	r0, #1
    1316:	469e      	mov	lr, r3
    1318:	2e00      	cmp	r6, #0
    131a:	d0aa      	beq.n	1272 <__udivmoddi4+0xa2>
    131c:	e9c6 4e00 	strd	r4, lr, [r6]
    1320:	e7a7      	b.n	1272 <__udivmoddi4+0xa2>
    1322:	f1c2 0c20 	rsb	ip, r2, #32
    1326:	fa01 f302 	lsl.w	r3, r1, r2
    132a:	4097      	lsls	r7, r2
    132c:	fa20 f00c 	lsr.w	r0, r0, ip
    1330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1334:	fa21 fc0c 	lsr.w	ip, r1, ip
    1338:	4318      	orrs	r0, r3
    133a:	fbbc f1fe 	udiv	r1, ip, lr
    133e:	0c05      	lsrs	r5, r0, #16
    1340:	fb0e cc11 	mls	ip, lr, r1, ip
    1344:	fa1f f887 	uxth.w	r8, r7
    1348:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    134c:	fb01 f308 	mul.w	r3, r1, r8
    1350:	42ab      	cmp	r3, r5
    1352:	fa04 f402 	lsl.w	r4, r4, r2
    1356:	d909      	bls.n	136c <__udivmoddi4+0x19c>
    1358:	197d      	adds	r5, r7, r5
    135a:	f101 3cff 	add.w	ip, r1, #4294967295
    135e:	f080 808b 	bcs.w	1478 <__udivmoddi4+0x2a8>
    1362:	42ab      	cmp	r3, r5
    1364:	f240 8088 	bls.w	1478 <__udivmoddi4+0x2a8>
    1368:	3902      	subs	r1, #2
    136a:	443d      	add	r5, r7
    136c:	1aeb      	subs	r3, r5, r3
    136e:	b285      	uxth	r5, r0
    1370:	fbb3 f0fe 	udiv	r0, r3, lr
    1374:	fb0e 3310 	mls	r3, lr, r0, r3
    1378:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    137c:	fb00 f308 	mul.w	r3, r0, r8
    1380:	42ab      	cmp	r3, r5
    1382:	d907      	bls.n	1394 <__udivmoddi4+0x1c4>
    1384:	197d      	adds	r5, r7, r5
    1386:	f100 3cff 	add.w	ip, r0, #4294967295
    138a:	d271      	bcs.n	1470 <__udivmoddi4+0x2a0>
    138c:	42ab      	cmp	r3, r5
    138e:	d96f      	bls.n	1470 <__udivmoddi4+0x2a0>
    1390:	3802      	subs	r0, #2
    1392:	443d      	add	r5, r7
    1394:	1aeb      	subs	r3, r5, r3
    1396:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    139a:	e778      	b.n	128e <__udivmoddi4+0xbe>
    139c:	f1c1 0c20 	rsb	ip, r1, #32
    13a0:	408b      	lsls	r3, r1
    13a2:	fa22 f70c 	lsr.w	r7, r2, ip
    13a6:	431f      	orrs	r7, r3
    13a8:	fa20 f40c 	lsr.w	r4, r0, ip
    13ac:	fa05 f301 	lsl.w	r3, r5, r1
    13b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    13b4:	fa25 f50c 	lsr.w	r5, r5, ip
    13b8:	431c      	orrs	r4, r3
    13ba:	0c23      	lsrs	r3, r4, #16
    13bc:	fbb5 f9fe 	udiv	r9, r5, lr
    13c0:	fa1f f887 	uxth.w	r8, r7
    13c4:	fb0e 5519 	mls	r5, lr, r9, r5
    13c8:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    13cc:	fb09 fa08 	mul.w	sl, r9, r8
    13d0:	45aa      	cmp	sl, r5
    13d2:	fa02 f201 	lsl.w	r2, r2, r1
    13d6:	fa00 f301 	lsl.w	r3, r0, r1
    13da:	d908      	bls.n	13ee <__udivmoddi4+0x21e>
    13dc:	197d      	adds	r5, r7, r5
    13de:	f109 30ff 	add.w	r0, r9, #4294967295
    13e2:	d247      	bcs.n	1474 <__udivmoddi4+0x2a4>
    13e4:	45aa      	cmp	sl, r5
    13e6:	d945      	bls.n	1474 <__udivmoddi4+0x2a4>
    13e8:	f1a9 0902 	sub.w	r9, r9, #2
    13ec:	443d      	add	r5, r7
    13ee:	eba5 050a 	sub.w	r5, r5, sl
    13f2:	b2a4      	uxth	r4, r4
    13f4:	fbb5 f0fe 	udiv	r0, r5, lr
    13f8:	fb0e 5510 	mls	r5, lr, r0, r5
    13fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1400:	fb00 f808 	mul.w	r8, r0, r8
    1404:	45a0      	cmp	r8, r4
    1406:	d907      	bls.n	1418 <__udivmoddi4+0x248>
    1408:	193c      	adds	r4, r7, r4
    140a:	f100 35ff 	add.w	r5, r0, #4294967295
    140e:	d22d      	bcs.n	146c <__udivmoddi4+0x29c>
    1410:	45a0      	cmp	r8, r4
    1412:	d92b      	bls.n	146c <__udivmoddi4+0x29c>
    1414:	3802      	subs	r0, #2
    1416:	443c      	add	r4, r7
    1418:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    141c:	eba4 0408 	sub.w	r4, r4, r8
    1420:	fba0 8902 	umull	r8, r9, r0, r2
    1424:	454c      	cmp	r4, r9
    1426:	46c6      	mov	lr, r8
    1428:	464d      	mov	r5, r9
    142a:	d319      	bcc.n	1460 <__udivmoddi4+0x290>
    142c:	d016      	beq.n	145c <__udivmoddi4+0x28c>
    142e:	b15e      	cbz	r6, 1448 <__udivmoddi4+0x278>
    1430:	ebb3 020e 	subs.w	r2, r3, lr
    1434:	eb64 0405 	sbc.w	r4, r4, r5
    1438:	fa04 fc0c 	lsl.w	ip, r4, ip
    143c:	40ca      	lsrs	r2, r1
    143e:	ea4c 0202 	orr.w	r2, ip, r2
    1442:	40cc      	lsrs	r4, r1
    1444:	e9c6 2400 	strd	r2, r4, [r6]
    1448:	2100      	movs	r1, #0
    144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    144e:	4631      	mov	r1, r6
    1450:	4630      	mov	r0, r6
    1452:	e70e      	b.n	1272 <__udivmoddi4+0xa2>
    1454:	46ac      	mov	ip, r5
    1456:	e6ed      	b.n	1234 <__udivmoddi4+0x64>
    1458:	4618      	mov	r0, r3
    145a:	e701      	b.n	1260 <__udivmoddi4+0x90>
    145c:	4543      	cmp	r3, r8
    145e:	d2e6      	bcs.n	142e <__udivmoddi4+0x25e>
    1460:	ebb8 0e02 	subs.w	lr, r8, r2
    1464:	eb69 0507 	sbc.w	r5, r9, r7
    1468:	3801      	subs	r0, #1
    146a:	e7e0      	b.n	142e <__udivmoddi4+0x25e>
    146c:	4628      	mov	r0, r5
    146e:	e7d3      	b.n	1418 <__udivmoddi4+0x248>
    1470:	4660      	mov	r0, ip
    1472:	e78f      	b.n	1394 <__udivmoddi4+0x1c4>
    1474:	4681      	mov	r9, r0
    1476:	e7ba      	b.n	13ee <__udivmoddi4+0x21e>
    1478:	4661      	mov	r1, ip
    147a:	e777      	b.n	136c <__udivmoddi4+0x19c>
    147c:	4608      	mov	r0, r1
    147e:	e74b      	b.n	1318 <__udivmoddi4+0x148>
    1480:	f1ac 0c02 	sub.w	ip, ip, #2
    1484:	443d      	add	r5, r7
    1486:	e715      	b.n	12b4 <__udivmoddi4+0xe4>
    1488:	3802      	subs	r0, #2
    148a:	443c      	add	r4, r7
    148c:	e726      	b.n	12dc <__udivmoddi4+0x10c>
    148e:	bf00      	nop

00001490 <__aeabi_idiv0>:
    1490:	4770      	bx	lr
    1492:	bf00      	nop

00001494 <__aeabi_d2uiz>:
    1494:	004a      	lsls	r2, r1, #1
    1496:	d211      	bcs.n	14bc <__aeabi_d2uiz+0x28>
    1498:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    149c:	d211      	bcs.n	14c2 <__aeabi_d2uiz+0x2e>
    149e:	d50d      	bpl.n	14bc <__aeabi_d2uiz+0x28>
    14a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    14a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    14a8:	d40e      	bmi.n	14c8 <__aeabi_d2uiz+0x34>
    14aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    14ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    14b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    14b6:	fa23 f002 	lsr.w	r0, r3, r2
    14ba:	4770      	bx	lr
    14bc:	f04f 0000 	mov.w	r0, #0
    14c0:	4770      	bx	lr
    14c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    14c6:	d102      	bne.n	14ce <__aeabi_d2uiz+0x3a>
    14c8:	f04f 30ff 	mov.w	r0, #4294967295
    14cc:	4770      	bx	lr
    14ce:	f04f 0000 	mov.w	r0, #0
    14d2:	4770      	bx	lr

000014d4 <__aeabi_dcmpun>:
    14d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    14d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14dc:	d102      	bne.n	14e4 <__aeabi_dcmpun+0x10>
    14de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14e2:	d10a      	bne.n	14fa <__aeabi_dcmpun+0x26>
    14e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ec:	d102      	bne.n	14f4 <__aeabi_dcmpun+0x20>
    14ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14f2:	d102      	bne.n	14fa <__aeabi_dcmpun+0x26>
    14f4:	f04f 0000 	mov.w	r0, #0
    14f8:	4770      	bx	lr
    14fa:	f04f 0001 	mov.w	r0, #1
    14fe:	4770      	bx	lr

00001500 <strcmp>:
    1500:	f810 2b01 	ldrb.w	r2, [r0], #1
    1504:	f811 3b01 	ldrb.w	r3, [r1], #1
    1508:	2a01      	cmp	r2, #1
    150a:	bf28      	it	cs
    150c:	429a      	cmpcs	r2, r3
    150e:	d0f7      	beq.n	1500 <strcmp>
    1510:	1ad0      	subs	r0, r2, r3
    1512:	4770      	bx	lr

00001514 <strlen>:
    1514:	4603      	mov	r3, r0
    1516:	f813 2b01 	ldrb.w	r2, [r3], #1
    151a:	2a00      	cmp	r2, #0
    151c:	d1fb      	bne.n	1516 <strlen+0x2>
    151e:	1a18      	subs	r0, r3, r0
    1520:	3801      	subs	r0, #1
    1522:	4770      	bx	lr
    1524:	0000      	movs	r0, r0
	...

00001528 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    1528:	b530      	push	{r4, r5, lr}
    152a:	b085      	sub	sp, #20
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    152c:	f7fe fff4 	bl	518 <__aeabi_dmul>
    1530:	4604      	mov	r4, r0
    1532:	460d      	mov	r5, r1
    1534:	9b08      	ldr	r3, [sp, #32]
    1536:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    153a:	40d8      	lsrs	r0, r3
    153c:	f7fe ff82 	bl	444 <__aeabi_i2d>
    1540:	4622      	mov	r2, r4
    1542:	462b      	mov	r3, r5
    1544:	f7fe ffe8 	bl	518 <__aeabi_dmul>
    1548:	4602      	mov	r2, r0
    154a:	460b      	mov	r3, r1
    154c:	e9cd 2300 	strd	r2, r3, [sp]
    1550:	a309      	add	r3, pc, #36	; (adr r3, 1578 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x50>)
    1552:	e9d3 2300 	ldrd	r2, r3, [r3]
    1556:	e9cd 2302 	strd	r2, r3, [sp, #8]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    155a:	f7ff fa6d 	bl	a38 <__aeabi_dcmpgt>
    155e:	b940      	cbnz	r0, 1572 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4a>
	return __b;
      return __a;
    1560:	4669      	mov	r1, sp
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1564:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1566:	e9d1 0100 	ldrd	r0, r1, [r1]
    156a:	f007 fe33 	bl	91d4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
                                   quantized_multiplier, left_shift);
}
    156e:	b005      	add	sp, #20
    1570:	bd30      	pop	{r4, r5, pc}
	return __b;
    1572:	a902      	add	r1, sp, #8
    1574:	e7f5      	b.n	1562 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x3a>
    1576:	bf00      	nop
    1578:	ffc00000 	.word	0xffc00000
    157c:	41dfffff 	.word	0x41dfffff

00001580 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1584:	b082      	sub	sp, #8
    1586:	4607      	mov	r7, r0
    1588:	460d      	mov	r5, r1
    158a:	4616      	mov	r6, r2
    158c:	461c      	mov	r4, r3
    158e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1592:	68c8      	ldr	r0, [r1, #12]
    1594:	f7fe ff68 	bl	468 <__aeabi_f2d>
    1598:	4680      	mov	r8, r0
    159a:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    159c:	68f0      	ldr	r0, [r6, #12]
    159e:	f7fe ff63 	bl	468 <__aeabi_f2d>
    15a2:	4602      	mov	r2, r0
    15a4:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    15a6:	4640      	mov	r0, r8
    15a8:	4649      	mov	r1, r9
    15aa:	f7fe ffb5 	bl	518 <__aeabi_dmul>
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    15ae:	b1ec      	cbz	r4, 15ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6c>
    15b0:	4680      	mov	r8, r0
    15b2:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    15b4:	68e0      	ldr	r0, [r4, #12]
    15b6:	f7fe ff57 	bl	468 <__aeabi_f2d>
    15ba:	4602      	mov	r2, r0
    15bc:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    15be:	4640      	mov	r0, r8
    15c0:	4649      	mov	r1, r9
    15c2:	f7fe fdf1 	bl	1a8 <__aeabi_dsub>
    15c6:	4680      	mov	r8, r0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    15c8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    15cc:	f8da 000c 	ldr.w	r0, [sl, #12]
    15d0:	f7fe ff4a 	bl	468 <__aeabi_f2d>
    15d4:	4602      	mov	r2, r0
    15d6:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15d8:	4640      	mov	r0, r8
    15da:	4621      	mov	r1, r4
    15dc:	f7ff f8c6 	bl	76c <__aeabi_ddiv>
    15e0:	a30d      	add	r3, pc, #52	; (adr r3, 1618 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    15e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15e6:	f7ff fa13 	bl	a10 <__aeabi_dcmple>
    15ea:	b150      	cbz	r0, 1602 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x82>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    15ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15ee:	9300      	str	r3, [sp, #0]
    15f0:	4653      	mov	r3, sl
    15f2:	4632      	mov	r2, r6
    15f4:	4629      	mov	r1, r5
    15f6:	4638      	mov	r0, r7
    15f8:	f007 ff56 	bl	94a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                          multiplier);
}
    15fc:	b002      	add	sp, #8
    15fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1602:	697c      	ldr	r4, [r7, #20]
    1604:	4b06      	ldr	r3, [pc, #24]	; (1620 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    1606:	9300      	str	r3, [sp, #0]
    1608:	f44f 739f 	mov.w	r3, #318	; 0x13e
    160c:	4a05      	ldr	r2, [pc, #20]	; (1624 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    160e:	4906      	ldr	r1, [pc, #24]	; (1628 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    1610:	4638      	mov	r0, r7
    1612:	47a0      	blx	r4
    1614:	2001      	movs	r0, #1
    1616:	e7f1      	b.n	15fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7c>
    1618:	47ae147b 	.word	0x47ae147b
    161c:	3f947ae1 	.word	0x3f947ae1
    1620:	00033f3c 	.word	0x00033f3c
    1624:	00033eac 	.word	0x00033eac
    1628:	00033ca8 	.word	0x00033ca8
    162c:	00000000 	.word	0x00000000

00001630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
    1630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1634:	b088      	sub	sp, #32
    1636:	4605      	mov	r5, r0
    1638:	460e      	mov	r6, r1
    163a:	461f      	mov	r7, r3
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    163c:	780c      	ldrb	r4, [r1, #0]
    163e:	2c09      	cmp	r4, #9
    1640:	d013      	beq.n	166a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
    1642:	2c07      	cmp	r4, #7
    1644:	d011      	beq.n	166a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1646:	2c01      	cmp	r4, #1
    1648:	f040 8133 	bne.w	18b2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x282>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    164c:	7810      	ldrb	r0, [r2, #0]
    164e:	2801      	cmp	r0, #1
    1650:	f040 8144 	bne.w	18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>
    op_data->beta = static_cast<double>(params->beta);
    1654:	6818      	ldr	r0, [r3, #0]
    1656:	f7fe ff07 	bl	468 <__aeabi_f2d>
    165a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    165c:	e9c3 0100 	strd	r0, r1, [r3]
  }
  return kTfLiteOk;
    1660:	2400      	movs	r4, #0
}
    1662:	4620      	mov	r0, r4
    1664:	b008      	add	sp, #32
    1666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (input->type == kTfLiteInt16) {
    166a:	2c07      	cmp	r4, #7
    166c:	d01e      	beq.n	16ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7c>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    166e:	2c09      	cmp	r4, #9
    1670:	f040 8086 	bne.w	1780 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x150>
      if (output->type == kTfLiteInt16) {
    1674:	7810      	ldrb	r0, [r2, #0]
    1676:	2807      	cmp	r0, #7
    1678:	f000 8097 	beq.w	17aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    167c:	2809      	cmp	r0, #9
    167e:	f040 80d5 	bne.w	182c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1fc>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1682:	6913      	ldr	r3, [r2, #16]
    1684:	f113 0f80 	cmn.w	r3, #128	; 0x80
    1688:	f000 80e4 	beq.w	1854 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x224>
    168c:	696c      	ldr	r4, [r5, #20]
    168e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    1692:	9203      	str	r2, [sp, #12]
    1694:	9302      	str	r3, [sp, #8]
    1696:	4b9e      	ldr	r3, [pc, #632]	; (1910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
    1698:	9301      	str	r3, [sp, #4]
    169a:	4b9e      	ldr	r3, [pc, #632]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    169c:	9300      	str	r3, [sp, #0]
    169e:	2330      	movs	r3, #48	; 0x30
    16a0:	4a9d      	ldr	r2, [pc, #628]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    16a2:	499e      	ldr	r1, [pc, #632]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    16a4:	4628      	mov	r0, r5
    16a6:	47a0      	blx	r4
    16a8:	2401      	movs	r4, #1
    16aa:	e7da      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    16ac:	6913      	ldr	r3, [r2, #16]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d13b      	bne.n	172a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfa>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    16b2:	f8d2 800c 	ldr.w	r8, [r2, #12]
    16b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    16ba:	4640      	mov	r0, r8
    16bc:	f7ff fd08 	bl	10d0 <__aeabi_fcmpgt>
    16c0:	2800      	cmp	r0, #0
    16c2:	d041      	beq.n	1748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x118>
    16c4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    16c8:	4640      	mov	r0, r8
    16ca:	f7ff fa3b 	bl	b44 <__aeabi_fsub>
    16ce:	4994      	ldr	r1, [pc, #592]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
    16d0:	f7ff fcfe 	bl	10d0 <__aeabi_fcmpgt>
    16d4:	2800      	cmp	r0, #0
    16d6:	d13d      	bne.n	1754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x124>
    if (input->type == kTfLiteInt16) {
    16d8:	2c07      	cmp	r4, #7
    16da:	f000 80cd 	beq.w	1878 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
          static_cast<double>(params->beta),
    16de:	683f      	ldr	r7, [r7, #0]
      tflite::PreprocessSoftmaxScaling(
    16e0:	68f0      	ldr	r0, [r6, #12]
    16e2:	f7fe fec1 	bl	468 <__aeabi_f2d>
    16e6:	4604      	mov	r4, r0
    16e8:	460d      	mov	r5, r1
    16ea:	4638      	mov	r0, r7
    16ec:	f7fe febc 	bl	468 <__aeabi_f2d>
    16f0:	ab07      	add	r3, sp, #28
    16f2:	9302      	str	r3, [sp, #8]
    16f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16f6:	3308      	adds	r3, #8
    16f8:	9301      	str	r3, [sp, #4]
    16fa:	2605      	movs	r6, #5
    16fc:	9600      	str	r6, [sp, #0]
    16fe:	4622      	mov	r2, r4
    1700:	462b      	mov	r3, r5
    1702:	f7ff ff11 	bl	1528 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    1706:	9907      	ldr	r1, [sp, #28]
    1708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    170a:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    170c:	221f      	movs	r2, #31
    170e:	4630      	mov	r0, r6
    1710:	f014 fa2b 	bl	15b6a <_ZN6tflite20CalculateInputRadiusEiii>
    1714:	f7fe fe96 	bl	444 <__aeabi_i2d>
      op_data->diff_min =
    1718:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    171c:	4619      	mov	r1, r3
    171e:	f7ff f995 	bl	a4c <__aeabi_d2iz>
    1722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1724:	6198      	str	r0, [r3, #24]
  return kTfLiteOk;
    1726:	2400      	movs	r4, #0
    1728:	e79b      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    172a:	696c      	ldr	r4, [r5, #20]
    172c:	2200      	movs	r2, #0
    172e:	9203      	str	r2, [sp, #12]
    1730:	9302      	str	r3, [sp, #8]
    1732:	4b7c      	ldr	r3, [pc, #496]	; (1924 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
    1734:	9301      	str	r3, [sp, #4]
    1736:	4b77      	ldr	r3, [pc, #476]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    1738:	9300      	str	r3, [sp, #0]
    173a:	2325      	movs	r3, #37	; 0x25
    173c:	4a76      	ldr	r2, [pc, #472]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    173e:	4977      	ldr	r1, [pc, #476]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1740:	4628      	mov	r0, r5
    1742:	47a0      	blx	r4
    1744:	2401      	movs	r4, #1
    1746:	e78c      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1748:	4641      	mov	r1, r8
    174a:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
    174e:	f7ff f9f9 	bl	b44 <__aeabi_fsub>
    1752:	e7bc      	b.n	16ce <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9e>
    1754:	696c      	ldr	r4, [r5, #20]
    1756:	2200      	movs	r2, #0
    1758:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    175c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1760:	4640      	mov	r0, r8
    1762:	f7fe fe81 	bl	468 <__aeabi_f2d>
    1766:	e9cd 0102 	strd	r0, r1, [sp, #8]
    176a:	4b6f      	ldr	r3, [pc, #444]	; (1928 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
    176c:	9301      	str	r3, [sp, #4]
    176e:	4b6f      	ldr	r3, [pc, #444]	; (192c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    1770:	9300      	str	r3, [sp, #0]
    1772:	2326      	movs	r3, #38	; 0x26
    1774:	4a68      	ldr	r2, [pc, #416]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1776:	496e      	ldr	r1, [pc, #440]	; (1930 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    1778:	4628      	mov	r0, r5
    177a:	47a0      	blx	r4
    177c:	2401      	movs	r4, #1
    177e:	e770      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    1780:	696e      	ldr	r6, [r5, #20]
    1782:	4620      	mov	r0, r4
    1784:	f007 fc82 	bl	908c <TfLiteTypeGetName>
    1788:	4604      	mov	r4, r0
    178a:	2009      	movs	r0, #9
    178c:	f007 fc7e 	bl	908c <TfLiteTypeGetName>
    1790:	9003      	str	r0, [sp, #12]
    1792:	9402      	str	r4, [sp, #8]
    1794:	4b67      	ldr	r3, [pc, #412]	; (1934 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1796:	9301      	str	r3, [sp, #4]
    1798:	4b67      	ldr	r3, [pc, #412]	; (1938 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    179a:	9300      	str	r3, [sp, #0]
    179c:	2329      	movs	r3, #41	; 0x29
    179e:	4a5e      	ldr	r2, [pc, #376]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    17a0:	4966      	ldr	r1, [pc, #408]	; (193c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    17a2:	4628      	mov	r0, r5
    17a4:	47b0      	blx	r6
    17a6:	2401      	movs	r4, #1
    17a8:	e75b      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    17aa:	6913      	ldr	r3, [r2, #16]
    17ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    17b0:	d00e      	beq.n	17d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a0>
    17b2:	696c      	ldr	r4, [r5, #20]
    17b4:	4a62      	ldr	r2, [pc, #392]	; (1940 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
    17b6:	9203      	str	r2, [sp, #12]
    17b8:	9302      	str	r3, [sp, #8]
    17ba:	4b62      	ldr	r3, [pc, #392]	; (1944 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
    17bc:	9301      	str	r3, [sp, #4]
    17be:	4b55      	ldr	r3, [pc, #340]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    17c0:	9300      	str	r3, [sp, #0]
    17c2:	232b      	movs	r3, #43	; 0x2b
    17c4:	4a54      	ldr	r2, [pc, #336]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    17c6:	4955      	ldr	r1, [pc, #340]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    17c8:	4628      	mov	r0, r5
    17ca:	47a0      	blx	r4
    17cc:	2401      	movs	r4, #1
    17ce:	e748      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    17d0:	f8d2 800c 	ldr.w	r8, [r2, #12]
    17d4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    17d8:	4640      	mov	r0, r8
    17da:	f7ff fc79 	bl	10d0 <__aeabi_fcmpgt>
    17de:	b1f8      	cbz	r0, 1820 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f0>
    17e0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    17e4:	4640      	mov	r0, r8
    17e6:	f7ff f9ad 	bl	b44 <__aeabi_fsub>
    17ea:	4957      	ldr	r1, [pc, #348]	; (1948 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
    17ec:	f7ff fc70 	bl	10d0 <__aeabi_fcmpgt>
    17f0:	2800      	cmp	r0, #0
    17f2:	f43f af71 	beq.w	16d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    17f6:	696c      	ldr	r4, [r5, #20]
    17f8:	2200      	movs	r2, #0
    17fa:	4b54      	ldr	r3, [pc, #336]	; (194c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
    17fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1800:	4640      	mov	r0, r8
    1802:	f7fe fe31 	bl	468 <__aeabi_f2d>
    1806:	e9cd 0102 	strd	r0, r1, [sp, #8]
    180a:	4b51      	ldr	r3, [pc, #324]	; (1950 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
    180c:	9301      	str	r3, [sp, #4]
    180e:	4b47      	ldr	r3, [pc, #284]	; (192c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    1810:	9300      	str	r3, [sp, #0]
    1812:	232c      	movs	r3, #44	; 0x2c
    1814:	4a40      	ldr	r2, [pc, #256]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1816:	4946      	ldr	r1, [pc, #280]	; (1930 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    1818:	4628      	mov	r0, r5
    181a:	47a0      	blx	r4
    181c:	2401      	movs	r4, #1
    181e:	e720      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    1820:	4641      	mov	r1, r8
    1822:	f04f 505e 	mov.w	r0, #931135488	; 0x37800000
    1826:	f7ff f98d 	bl	b44 <__aeabi_fsub>
    182a:	e7de      	b.n	17ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ba>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    182c:	696e      	ldr	r6, [r5, #20]
    182e:	f007 fc2d 	bl	908c <TfLiteTypeGetName>
    1832:	4604      	mov	r4, r0
    1834:	2009      	movs	r0, #9
    1836:	f007 fc29 	bl	908c <TfLiteTypeGetName>
    183a:	9003      	str	r0, [sp, #12]
    183c:	9402      	str	r4, [sp, #8]
    183e:	4b3d      	ldr	r3, [pc, #244]	; (1934 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1840:	9301      	str	r3, [sp, #4]
    1842:	4b44      	ldr	r3, [pc, #272]	; (1954 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    1844:	9300      	str	r3, [sp, #0]
    1846:	232f      	movs	r3, #47	; 0x2f
    1848:	4a33      	ldr	r2, [pc, #204]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    184a:	493c      	ldr	r1, [pc, #240]	; (193c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    184c:	4628      	mov	r0, r5
    184e:	47b0      	blx	r6
    1850:	2401      	movs	r4, #1
    1852:	e706      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    1854:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    1858:	68d0      	ldr	r0, [r2, #12]
    185a:	f7ff fc11 	bl	1080 <__aeabi_fcmpeq>
    185e:	2800      	cmp	r0, #0
    1860:	f47f af3a 	bne.w	16d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    1864:	696c      	ldr	r4, [r5, #20]
    1866:	4b3c      	ldr	r3, [pc, #240]	; (1958 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
    1868:	9300      	str	r3, [sp, #0]
    186a:	2331      	movs	r3, #49	; 0x31
    186c:	4a2a      	ldr	r2, [pc, #168]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    186e:	493b      	ldr	r1, [pc, #236]	; (195c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
    1870:	4628      	mov	r0, r5
    1872:	47a0      	blx	r4
    1874:	2401      	movs	r4, #1
    1876:	e6f4      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
          static_cast<double>(input->params.scale) *
    1878:	68f0      	ldr	r0, [r6, #12]
    187a:	f7fe fdf5 	bl	468 <__aeabi_f2d>
    187e:	4604      	mov	r4, r0
    1880:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    1882:	6838      	ldr	r0, [r7, #0]
    1884:	f7fe fdf0 	bl	468 <__aeabi_f2d>
    1888:	4602      	mov	r2, r0
    188a:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    188c:	4620      	mov	r0, r4
    188e:	4629      	mov	r1, r5
    1890:	f7fe fe42 	bl	518 <__aeabi_dmul>
      double input_scale_beta_rescale =
    1894:	a31c      	add	r3, pc, #112	; (adr r3, 1908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
    1896:	e9d3 2300 	ldrd	r2, r3, [r3]
    189a:	f7fe ff67 	bl	76c <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    189e:	ab07      	add	r3, sp, #28
    18a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18a2:	3208      	adds	r2, #8
    18a4:	f007 fc48 	bl	9138 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    18a8:	9b07      	ldr	r3, [sp, #28]
    18aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18ac:	60d3      	str	r3, [r2, #12]
  return kTfLiteOk;
    18ae:	2400      	movs	r4, #0
    18b0:	e6d7      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    18b2:	6946      	ldr	r6, [r0, #20]
    18b4:	4620      	mov	r0, r4
    18b6:	f007 fbe9 	bl	908c <TfLiteTypeGetName>
    18ba:	4604      	mov	r4, r0
    18bc:	2001      	movs	r0, #1
    18be:	f007 fbe5 	bl	908c <TfLiteTypeGetName>
    18c2:	9003      	str	r0, [sp, #12]
    18c4:	9402      	str	r4, [sp, #8]
    18c6:	4b26      	ldr	r3, [pc, #152]	; (1960 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    18c8:	9301      	str	r3, [sp, #4]
    18ca:	4b1b      	ldr	r3, [pc, #108]	; (1938 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    18cc:	9300      	str	r3, [sp, #0]
    18ce:	234e      	movs	r3, #78	; 0x4e
    18d0:	4a11      	ldr	r2, [pc, #68]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    18d2:	491a      	ldr	r1, [pc, #104]	; (193c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    18d4:	4628      	mov	r0, r5
    18d6:	47b0      	blx	r6
    18d8:	2401      	movs	r4, #1
    18da:	e6c2      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    18dc:	696f      	ldr	r7, [r5, #20]
    18de:	f007 fbd5 	bl	908c <TfLiteTypeGetName>
    18e2:	4606      	mov	r6, r0
    18e4:	2001      	movs	r0, #1
    18e6:	f007 fbd1 	bl	908c <TfLiteTypeGetName>
    18ea:	9003      	str	r0, [sp, #12]
    18ec:	9602      	str	r6, [sp, #8]
    18ee:	4b1c      	ldr	r3, [pc, #112]	; (1960 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    18f0:	9301      	str	r3, [sp, #4]
    18f2:	4b18      	ldr	r3, [pc, #96]	; (1954 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    18f4:	9300      	str	r3, [sp, #0]
    18f6:	234f      	movs	r3, #79	; 0x4f
    18f8:	4a07      	ldr	r2, [pc, #28]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    18fa:	4910      	ldr	r1, [pc, #64]	; (193c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    18fc:	4628      	mov	r0, r5
    18fe:	47b8      	blx	r7
    1900:	e6af      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    1902:	bf00      	nop
    1904:	f3af 8000 	nop.w
    1908:	00140014 	.word	0x00140014
    190c:	3f240014 	.word	0x3f240014
    1910:	00034d00 	.word	0x00034d00
    1914:	00034c8c 	.word	0x00034c8c
    1918:	00034c34 	.word	0x00034c34
    191c:	00033f68 	.word	0x00033f68
    1920:	3303126f 	.word	0x3303126f
    1924:	000344cc 	.word	0x000344cc
    1928:	00034cc8 	.word	0x00034cc8
    192c:	00034cd4 	.word	0x00034cd4
    1930:	00034ca8 	.word	0x00034ca8
    1934:	00034044 	.word	0x00034044
    1938:	00034630 	.word	0x00034630
    193c:	00034968 	.word	0x00034968
    1940:	ffff8000 	.word	0xffff8000
    1944:	00034cec 	.word	0x00034cec
    1948:	3283126f 	.word	0x3283126f
    194c:	3ef00000 	.word	0x3ef00000
    1950:	00034cf4 	.word	0x00034cf4
    1954:	00034620 	.word	0x00034620
    1958:	00034d08 	.word	0x00034d08
    195c:	00033ca8 	.word	0x00033ca8
    1960:	00034d2c 	.word	0x00034d2c
    1964:	00000000 	.word	0x00000000

00001968 <floor>:
    1968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196a:	f3c1 570a 	ubfx	r7, r1, #20, #11
    196e:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
    1972:	2d13      	cmp	r5, #19
    1974:	460b      	mov	r3, r1
    1976:	460c      	mov	r4, r1
    1978:	4602      	mov	r2, r0
    197a:	4606      	mov	r6, r0
    197c:	dc20      	bgt.n	19c0 <floor+0x58>
    197e:	2d00      	cmp	r5, #0
    1980:	db40      	blt.n	1a04 <floor+0x9c>
    1982:	4f35      	ldr	r7, [pc, #212]	; (1a58 <floor+0xf0>)
    1984:	412f      	asrs	r7, r5
    1986:	ea01 0c07 	and.w	ip, r1, r7
    198a:	ea5c 0c00 	orrs.w	ip, ip, r0
    198e:	d014      	beq.n	19ba <floor+0x52>
    1990:	a32f      	add	r3, pc, #188	; (adr r3, 1a50 <floor+0xe8>)
    1992:	e9d3 2300 	ldrd	r2, r3, [r3]
    1996:	f7fe fc09 	bl	1ac <__adddf3>
    199a:	2200      	movs	r2, #0
    199c:	2300      	movs	r3, #0
    199e:	f7ff f84b 	bl	a38 <__aeabi_dcmpgt>
    19a2:	b140      	cbz	r0, 19b6 <floor+0x4e>
    19a4:	2c00      	cmp	r4, #0
    19a6:	da03      	bge.n	19b0 <floor+0x48>
    19a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    19ac:	412b      	asrs	r3, r5
    19ae:	441c      	add	r4, r3
    19b0:	ea24 0407 	bic.w	r4, r4, r7
    19b4:	2600      	movs	r6, #0
    19b6:	4632      	mov	r2, r6
    19b8:	4623      	mov	r3, r4
    19ba:	4610      	mov	r0, r2
    19bc:	4619      	mov	r1, r3
    19be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19c0:	2d33      	cmp	r5, #51	; 0x33
    19c2:	dd07      	ble.n	19d4 <floor+0x6c>
    19c4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    19c8:	d1f7      	bne.n	19ba <floor+0x52>
    19ca:	f7fe fbef 	bl	1ac <__adddf3>
    19ce:	4602      	mov	r2, r0
    19d0:	460b      	mov	r3, r1
    19d2:	e7f2      	b.n	19ba <floor+0x52>
    19d4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    19d8:	f04f 3cff 	mov.w	ip, #4294967295
    19dc:	fa2c f707 	lsr.w	r7, ip, r7
    19e0:	4207      	tst	r7, r0
    19e2:	d0ea      	beq.n	19ba <floor+0x52>
    19e4:	a31a      	add	r3, pc, #104	; (adr r3, 1a50 <floor+0xe8>)
    19e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ea:	f7fe fbdf 	bl	1ac <__adddf3>
    19ee:	2200      	movs	r2, #0
    19f0:	2300      	movs	r3, #0
    19f2:	f7ff f821 	bl	a38 <__aeabi_dcmpgt>
    19f6:	2800      	cmp	r0, #0
    19f8:	d0dd      	beq.n	19b6 <floor+0x4e>
    19fa:	2c00      	cmp	r4, #0
    19fc:	db1b      	blt.n	1a36 <floor+0xce>
    19fe:	ea26 0607 	bic.w	r6, r6, r7
    1a02:	e7d8      	b.n	19b6 <floor+0x4e>
    1a04:	a312      	add	r3, pc, #72	; (adr r3, 1a50 <floor+0xe8>)
    1a06:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a0a:	f7fe fbcf 	bl	1ac <__adddf3>
    1a0e:	2200      	movs	r2, #0
    1a10:	2300      	movs	r3, #0
    1a12:	f7ff f811 	bl	a38 <__aeabi_dcmpgt>
    1a16:	2800      	cmp	r0, #0
    1a18:	d0cd      	beq.n	19b6 <floor+0x4e>
    1a1a:	2c00      	cmp	r4, #0
    1a1c:	db02      	blt.n	1a24 <floor+0xbc>
    1a1e:	2600      	movs	r6, #0
    1a20:	4634      	mov	r4, r6
    1a22:	e7c8      	b.n	19b6 <floor+0x4e>
    1a24:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    1a28:	4a0c      	ldr	r2, [pc, #48]	; (1a5c <floor+0xf4>)
    1a2a:	431e      	orrs	r6, r3
    1a2c:	2e00      	cmp	r6, #0
    1a2e:	bf18      	it	ne
    1a30:	4614      	movne	r4, r2
    1a32:	2600      	movs	r6, #0
    1a34:	e7bf      	b.n	19b6 <floor+0x4e>
    1a36:	2d14      	cmp	r5, #20
    1a38:	d008      	beq.n	1a4c <floor+0xe4>
    1a3a:	2201      	movs	r2, #1
    1a3c:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
    1a40:	fa02 f303 	lsl.w	r3, r2, r3
    1a44:	199e      	adds	r6, r3, r6
    1a46:	bf28      	it	cs
    1a48:	18a4      	addcs	r4, r4, r2
    1a4a:	e7d8      	b.n	19fe <floor+0x96>
    1a4c:	3401      	adds	r4, #1
    1a4e:	e7d6      	b.n	19fe <floor+0x96>
    1a50:	8800759c 	.word	0x8800759c
    1a54:	7e37e43c 	.word	0x7e37e43c
    1a58:	000fffff 	.word	0x000fffff
    1a5c:	bff00000 	.word	0xbff00000

00001a60 <_dtoa_r>:
    1a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a64:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1a66:	b099      	sub	sp, #100	; 0x64
    1a68:	4616      	mov	r6, r2
    1a6a:	461f      	mov	r7, r3
    1a6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1a70:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1a74:	4605      	mov	r5, r0
    1a76:	b93c      	cbnz	r4, 1a88 <_dtoa_r+0x28>
    1a78:	2010      	movs	r0, #16
    1a7a:	f010 ff37 	bl	128ec <malloc>
    1a7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1a82:	6268      	str	r0, [r5, #36]	; 0x24
    1a84:	6004      	str	r4, [r0, #0]
    1a86:	60c4      	str	r4, [r0, #12]
    1a88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a8a:	6819      	ldr	r1, [r3, #0]
    1a8c:	b151      	cbz	r1, 1aa4 <_dtoa_r+0x44>
    1a8e:	685a      	ldr	r2, [r3, #4]
    1a90:	604a      	str	r2, [r1, #4]
    1a92:	2301      	movs	r3, #1
    1a94:	4093      	lsls	r3, r2
    1a96:	608b      	str	r3, [r1, #8]
    1a98:	4628      	mov	r0, r5
    1a9a:	f017 fa03 	bl	18ea4 <_Bfree>
    1a9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1aa0:	2200      	movs	r2, #0
    1aa2:	601a      	str	r2, [r3, #0]
    1aa4:	1e3b      	subs	r3, r7, #0
    1aa6:	bfb9      	ittee	lt
    1aa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1aac:	9305      	strlt	r3, [sp, #20]
    1aae:	2300      	movge	r3, #0
    1ab0:	f8c8 3000 	strge.w	r3, [r8]
    1ab4:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1ab8:	4ba7      	ldr	r3, [pc, #668]	; (1d58 <_dtoa_r+0x2f8>)
    1aba:	bfbc      	itt	lt
    1abc:	2201      	movlt	r2, #1
    1abe:	f8c8 2000 	strlt.w	r2, [r8]
    1ac2:	ea33 0309 	bics.w	r3, r3, r9
    1ac6:	d119      	bne.n	1afc <_dtoa_r+0x9c>
    1ac8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1aca:	f242 730f 	movw	r3, #9999	; 0x270f
    1ace:	6013      	str	r3, [r2, #0]
    1ad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
    1ad4:	4333      	orrs	r3, r6
    1ad6:	f000 856d 	beq.w	25b4 <_dtoa_r+0xb54>
    1ada:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1adc:	b953      	cbnz	r3, 1af4 <_dtoa_r+0x94>
    1ade:	4b9f      	ldr	r3, [pc, #636]	; (1d5c <_dtoa_r+0x2fc>)
    1ae0:	e023      	b.n	1b2a <_dtoa_r+0xca>
    1ae2:	4b9f      	ldr	r3, [pc, #636]	; (1d60 <_dtoa_r+0x300>)
    1ae4:	9303      	str	r3, [sp, #12]
    1ae6:	3308      	adds	r3, #8
    1ae8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1aea:	6013      	str	r3, [r2, #0]
    1aec:	9803      	ldr	r0, [sp, #12]
    1aee:	b019      	add	sp, #100	; 0x64
    1af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1af4:	4b99      	ldr	r3, [pc, #612]	; (1d5c <_dtoa_r+0x2fc>)
    1af6:	9303      	str	r3, [sp, #12]
    1af8:	3303      	adds	r3, #3
    1afa:	e7f5      	b.n	1ae8 <_dtoa_r+0x88>
    1afc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1b00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    1b04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b08:	2200      	movs	r2, #0
    1b0a:	2300      	movs	r3, #0
    1b0c:	f7fe ff6c 	bl	9e8 <__aeabi_dcmpeq>
    1b10:	4680      	mov	r8, r0
    1b12:	b160      	cbz	r0, 1b2e <_dtoa_r+0xce>
    1b14:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1b16:	2301      	movs	r3, #1
    1b18:	6013      	str	r3, [r2, #0]
    1b1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	f000 8546 	beq.w	25ae <_dtoa_r+0xb4e>
    1b22:	4b90      	ldr	r3, [pc, #576]	; (1d64 <_dtoa_r+0x304>)
    1b24:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1b26:	6013      	str	r3, [r2, #0]
    1b28:	3b01      	subs	r3, #1
    1b2a:	9303      	str	r3, [sp, #12]
    1b2c:	e7de      	b.n	1aec <_dtoa_r+0x8c>
    1b2e:	ab16      	add	r3, sp, #88	; 0x58
    1b30:	9301      	str	r3, [sp, #4]
    1b32:	ab17      	add	r3, sp, #92	; 0x5c
    1b34:	9300      	str	r3, [sp, #0]
    1b36:	4628      	mov	r0, r5
    1b38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1b3c:	f017 fbea 	bl	19314 <__d2b>
    1b40:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1b44:	4683      	mov	fp, r0
    1b46:	2c00      	cmp	r4, #0
    1b48:	d07e      	beq.n	1c48 <_dtoa_r+0x1e8>
    1b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b4c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b58:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1b5c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1b60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1b64:	4b80      	ldr	r3, [pc, #512]	; (1d68 <_dtoa_r+0x308>)
    1b66:	2200      	movs	r2, #0
    1b68:	f7fe fb1e 	bl	1a8 <__aeabi_dsub>
    1b6c:	a374      	add	r3, pc, #464	; (adr r3, 1d40 <_dtoa_r+0x2e0>)
    1b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b72:	f7fe fcd1 	bl	518 <__aeabi_dmul>
    1b76:	a374      	add	r3, pc, #464	; (adr r3, 1d48 <_dtoa_r+0x2e8>)
    1b78:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b7c:	f7fe fb16 	bl	1ac <__adddf3>
    1b80:	4606      	mov	r6, r0
    1b82:	4620      	mov	r0, r4
    1b84:	460f      	mov	r7, r1
    1b86:	f7fe fc5d 	bl	444 <__aeabi_i2d>
    1b8a:	a371      	add	r3, pc, #452	; (adr r3, 1d50 <_dtoa_r+0x2f0>)
    1b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b90:	f7fe fcc2 	bl	518 <__aeabi_dmul>
    1b94:	4602      	mov	r2, r0
    1b96:	460b      	mov	r3, r1
    1b98:	4630      	mov	r0, r6
    1b9a:	4639      	mov	r1, r7
    1b9c:	f7fe fb06 	bl	1ac <__adddf3>
    1ba0:	4606      	mov	r6, r0
    1ba2:	460f      	mov	r7, r1
    1ba4:	f7fe ff52 	bl	a4c <__aeabi_d2iz>
    1ba8:	2200      	movs	r2, #0
    1baa:	4682      	mov	sl, r0
    1bac:	2300      	movs	r3, #0
    1bae:	4630      	mov	r0, r6
    1bb0:	4639      	mov	r1, r7
    1bb2:	f7fe ff23 	bl	9fc <__aeabi_dcmplt>
    1bb6:	b148      	cbz	r0, 1bcc <_dtoa_r+0x16c>
    1bb8:	4650      	mov	r0, sl
    1bba:	f7fe fc43 	bl	444 <__aeabi_i2d>
    1bbe:	4632      	mov	r2, r6
    1bc0:	463b      	mov	r3, r7
    1bc2:	f7fe ff11 	bl	9e8 <__aeabi_dcmpeq>
    1bc6:	b908      	cbnz	r0, 1bcc <_dtoa_r+0x16c>
    1bc8:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bcc:	f1ba 0f16 	cmp.w	sl, #22
    1bd0:	d857      	bhi.n	1c82 <_dtoa_r+0x222>
    1bd2:	4b66      	ldr	r3, [pc, #408]	; (1d6c <_dtoa_r+0x30c>)
    1bd4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1be0:	f7fe ff0c 	bl	9fc <__aeabi_dcmplt>
    1be4:	2800      	cmp	r0, #0
    1be6:	d04e      	beq.n	1c86 <_dtoa_r+0x226>
    1be8:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bec:	2300      	movs	r3, #0
    1bee:	930f      	str	r3, [sp, #60]	; 0x3c
    1bf0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1bf2:	1b1c      	subs	r4, r3, r4
    1bf4:	1e63      	subs	r3, r4, #1
    1bf6:	9309      	str	r3, [sp, #36]	; 0x24
    1bf8:	bf45      	ittet	mi
    1bfa:	f1c4 0301 	rsbmi	r3, r4, #1
    1bfe:	9306      	strmi	r3, [sp, #24]
    1c00:	2300      	movpl	r3, #0
    1c02:	2300      	movmi	r3, #0
    1c04:	bf4c      	ite	mi
    1c06:	9309      	strmi	r3, [sp, #36]	; 0x24
    1c08:	9306      	strpl	r3, [sp, #24]
    1c0a:	f1ba 0f00 	cmp.w	sl, #0
    1c0e:	db3c      	blt.n	1c8a <_dtoa_r+0x22a>
    1c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    1c16:	4453      	add	r3, sl
    1c18:	9309      	str	r3, [sp, #36]	; 0x24
    1c1a:	2300      	movs	r3, #0
    1c1c:	930a      	str	r3, [sp, #40]	; 0x28
    1c1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1c20:	2b09      	cmp	r3, #9
    1c22:	f200 80b5 	bhi.w	1d90 <_dtoa_r+0x330>
    1c26:	2b05      	cmp	r3, #5
    1c28:	bfc4      	itt	gt
    1c2a:	3b04      	subgt	r3, #4
    1c2c:	9322      	strgt	r3, [sp, #136]	; 0x88
    1c2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1c30:	f1a3 0302 	sub.w	r3, r3, #2
    1c34:	bfcc      	ite	gt
    1c36:	2400      	movgt	r4, #0
    1c38:	2401      	movle	r4, #1
    1c3a:	2b03      	cmp	r3, #3
    1c3c:	f200 80b4 	bhi.w	1da8 <_dtoa_r+0x348>
    1c40:	e8df f003 	tbb	[pc, r3]
    1c44:	a47a982d 	.word	0xa47a982d
    1c48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1c4c:	441c      	add	r4, r3
    1c4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1c52:	2b20      	cmp	r3, #32
    1c54:	bfc3      	ittte	gt
    1c56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1c5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1c5e:	fa09 f303 	lslgt.w	r3, r9, r3
    1c62:	f1c3 0320 	rsble	r3, r3, #32
    1c66:	bfc6      	itte	gt
    1c68:	fa26 f000 	lsrgt.w	r0, r6, r0
    1c6c:	4318      	orrgt	r0, r3
    1c6e:	fa06 f003 	lslle.w	r0, r6, r3
    1c72:	f7fe fbd7 	bl	424 <__aeabi_ui2d>
    1c76:	2301      	movs	r3, #1
    1c78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1c7c:	3c01      	subs	r4, #1
    1c7e:	9313      	str	r3, [sp, #76]	; 0x4c
    1c80:	e770      	b.n	1b64 <_dtoa_r+0x104>
    1c82:	2301      	movs	r3, #1
    1c84:	e7b3      	b.n	1bee <_dtoa_r+0x18e>
    1c86:	900f      	str	r0, [sp, #60]	; 0x3c
    1c88:	e7b2      	b.n	1bf0 <_dtoa_r+0x190>
    1c8a:	9b06      	ldr	r3, [sp, #24]
    1c8c:	eba3 030a 	sub.w	r3, r3, sl
    1c90:	9306      	str	r3, [sp, #24]
    1c92:	f1ca 0300 	rsb	r3, sl, #0
    1c96:	930a      	str	r3, [sp, #40]	; 0x28
    1c98:	2300      	movs	r3, #0
    1c9a:	930e      	str	r3, [sp, #56]	; 0x38
    1c9c:	e7bf      	b.n	1c1e <_dtoa_r+0x1be>
    1c9e:	2300      	movs	r3, #0
    1ca0:	930b      	str	r3, [sp, #44]	; 0x2c
    1ca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	f300 8082 	bgt.w	1dae <_dtoa_r+0x34e>
    1caa:	f04f 0901 	mov.w	r9, #1
    1cae:	f8cd 9020 	str.w	r9, [sp, #32]
    1cb2:	464b      	mov	r3, r9
    1cb4:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    1cb8:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    1cba:	2200      	movs	r2, #0
    1cbc:	6072      	str	r2, [r6, #4]
    1cbe:	2204      	movs	r2, #4
    1cc0:	f102 0014 	add.w	r0, r2, #20
    1cc4:	4298      	cmp	r0, r3
    1cc6:	6871      	ldr	r1, [r6, #4]
    1cc8:	d977      	bls.n	1dba <_dtoa_r+0x35a>
    1cca:	4628      	mov	r0, r5
    1ccc:	f017 f8b6 	bl	18e3c <_Balloc>
    1cd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1cd2:	6030      	str	r0, [r6, #0]
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	9303      	str	r3, [sp, #12]
    1cd8:	9b08      	ldr	r3, [sp, #32]
    1cda:	2b0e      	cmp	r3, #14
    1cdc:	f200 80ee 	bhi.w	1ebc <_dtoa_r+0x45c>
    1ce0:	2c00      	cmp	r4, #0
    1ce2:	f000 80eb 	beq.w	1ebc <_dtoa_r+0x45c>
    1ce6:	f1ba 0f00 	cmp.w	sl, #0
    1cea:	dd7a      	ble.n	1de2 <_dtoa_r+0x382>
    1cec:	4a1f      	ldr	r2, [pc, #124]	; (1d6c <_dtoa_r+0x30c>)
    1cee:	f00a 030f 	and.w	r3, sl, #15
    1cf2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
    1cfa:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1cfe:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1d02:	ea4f 142a 	mov.w	r4, sl, asr #4
    1d06:	d05c      	beq.n	1dc2 <_dtoa_r+0x362>
    1d08:	4b19      	ldr	r3, [pc, #100]	; (1d70 <_dtoa_r+0x310>)
    1d0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1d0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1d12:	f7fe fd2b 	bl	76c <__aeabi_ddiv>
    1d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1d1a:	f004 040f 	and.w	r4, r4, #15
    1d1e:	2703      	movs	r7, #3
    1d20:	4e13      	ldr	r6, [pc, #76]	; (1d70 <_dtoa_r+0x310>)
    1d22:	2c00      	cmp	r4, #0
    1d24:	d14f      	bne.n	1dc6 <_dtoa_r+0x366>
    1d26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1d2e:	f7fe fd1d 	bl	76c <__aeabi_ddiv>
    1d32:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1d36:	e06e      	b.n	1e16 <_dtoa_r+0x3b6>
    1d38:	2301      	movs	r3, #1
    1d3a:	e7b1      	b.n	1ca0 <_dtoa_r+0x240>
    1d3c:	f3af 8000 	nop.w
    1d40:	636f4361 	.word	0x636f4361
    1d44:	3fd287a7 	.word	0x3fd287a7
    1d48:	8b60c8b3 	.word	0x8b60c8b3
    1d4c:	3fc68a28 	.word	0x3fc68a28
    1d50:	509f79fb 	.word	0x509f79fb
    1d54:	3fd34413 	.word	0x3fd34413
    1d58:	7ff00000 	.word	0x7ff00000
    1d5c:	000350c3 	.word	0x000350c3
    1d60:	000350ba 	.word	0x000350ba
    1d64:	00035097 	.word	0x00035097
    1d68:	3ff80000 	.word	0x3ff80000
    1d6c:	00031990 	.word	0x00031990
    1d70:	00031968 	.word	0x00031968
    1d74:	2300      	movs	r3, #0
    1d76:	930b      	str	r3, [sp, #44]	; 0x2c
    1d78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1d7a:	eb0a 0903 	add.w	r9, sl, r3
    1d7e:	f109 0301 	add.w	r3, r9, #1
    1d82:	2b01      	cmp	r3, #1
    1d84:	9308      	str	r3, [sp, #32]
    1d86:	bfb8      	it	lt
    1d88:	2301      	movlt	r3, #1
    1d8a:	e795      	b.n	1cb8 <_dtoa_r+0x258>
    1d8c:	2301      	movs	r3, #1
    1d8e:	e7f2      	b.n	1d76 <_dtoa_r+0x316>
    1d90:	2401      	movs	r4, #1
    1d92:	2300      	movs	r3, #0
    1d94:	9322      	str	r3, [sp, #136]	; 0x88
    1d96:	940b      	str	r4, [sp, #44]	; 0x2c
    1d98:	f04f 39ff 	mov.w	r9, #4294967295
    1d9c:	2200      	movs	r2, #0
    1d9e:	f8cd 9020 	str.w	r9, [sp, #32]
    1da2:	2312      	movs	r3, #18
    1da4:	9223      	str	r2, [sp, #140]	; 0x8c
    1da6:	e787      	b.n	1cb8 <_dtoa_r+0x258>
    1da8:	2301      	movs	r3, #1
    1daa:	930b      	str	r3, [sp, #44]	; 0x2c
    1dac:	e7f4      	b.n	1d98 <_dtoa_r+0x338>
    1dae:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1db2:	f8cd 9020 	str.w	r9, [sp, #32]
    1db6:	464b      	mov	r3, r9
    1db8:	e77e      	b.n	1cb8 <_dtoa_r+0x258>
    1dba:	3101      	adds	r1, #1
    1dbc:	6071      	str	r1, [r6, #4]
    1dbe:	0052      	lsls	r2, r2, #1
    1dc0:	e77e      	b.n	1cc0 <_dtoa_r+0x260>
    1dc2:	2702      	movs	r7, #2
    1dc4:	e7ac      	b.n	1d20 <_dtoa_r+0x2c0>
    1dc6:	07e1      	lsls	r1, r4, #31
    1dc8:	d508      	bpl.n	1ddc <_dtoa_r+0x37c>
    1dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1dce:	e9d6 2300 	ldrd	r2, r3, [r6]
    1dd2:	f7fe fba1 	bl	518 <__aeabi_dmul>
    1dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1dda:	3701      	adds	r7, #1
    1ddc:	1064      	asrs	r4, r4, #1
    1dde:	3608      	adds	r6, #8
    1de0:	e79f      	b.n	1d22 <_dtoa_r+0x2c2>
    1de2:	f000 80a5 	beq.w	1f30 <_dtoa_r+0x4d0>
    1de6:	f1ca 0400 	rsb	r4, sl, #0
    1dea:	4ba4      	ldr	r3, [pc, #656]	; (207c <_dtoa_r+0x61c>)
    1dec:	4ea4      	ldr	r6, [pc, #656]	; (2080 <_dtoa_r+0x620>)
    1dee:	f004 020f 	and.w	r2, r4, #15
    1df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1df6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1dfe:	f7fe fb8b 	bl	518 <__aeabi_dmul>
    1e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e06:	1124      	asrs	r4, r4, #4
    1e08:	2300      	movs	r3, #0
    1e0a:	2702      	movs	r7, #2
    1e0c:	2c00      	cmp	r4, #0
    1e0e:	f040 8084 	bne.w	1f1a <_dtoa_r+0x4ba>
    1e12:	2b00      	cmp	r3, #0
    1e14:	d18d      	bne.n	1d32 <_dtoa_r+0x2d2>
    1e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1e18:	2b00      	cmp	r3, #0
    1e1a:	f000 808b 	beq.w	1f34 <_dtoa_r+0x4d4>
    1e1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1e22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1e26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1e2a:	4b96      	ldr	r3, [pc, #600]	; (2084 <_dtoa_r+0x624>)
    1e2c:	2200      	movs	r2, #0
    1e2e:	f7fe fde5 	bl	9fc <__aeabi_dcmplt>
    1e32:	2800      	cmp	r0, #0
    1e34:	d07e      	beq.n	1f34 <_dtoa_r+0x4d4>
    1e36:	9b08      	ldr	r3, [sp, #32]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d07b      	beq.n	1f34 <_dtoa_r+0x4d4>
    1e3c:	f1b9 0f00 	cmp.w	r9, #0
    1e40:	dd38      	ble.n	1eb4 <_dtoa_r+0x454>
    1e42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1e46:	4b90      	ldr	r3, [pc, #576]	; (2088 <_dtoa_r+0x628>)
    1e48:	2200      	movs	r2, #0
    1e4a:	f7fe fb65 	bl	518 <__aeabi_dmul>
    1e4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e52:	f10a 38ff 	add.w	r8, sl, #4294967295
    1e56:	3701      	adds	r7, #1
    1e58:	464c      	mov	r4, r9
    1e5a:	4638      	mov	r0, r7
    1e5c:	f7fe faf2 	bl	444 <__aeabi_i2d>
    1e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1e64:	f7fe fb58 	bl	518 <__aeabi_dmul>
    1e68:	4b88      	ldr	r3, [pc, #544]	; (208c <_dtoa_r+0x62c>)
    1e6a:	2200      	movs	r2, #0
    1e6c:	f7fe f99e 	bl	1ac <__adddf3>
    1e70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    1e74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1e78:	9611      	str	r6, [sp, #68]	; 0x44
    1e7a:	2c00      	cmp	r4, #0
    1e7c:	d15d      	bne.n	1f3a <_dtoa_r+0x4da>
    1e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e82:	4b83      	ldr	r3, [pc, #524]	; (2090 <_dtoa_r+0x630>)
    1e84:	2200      	movs	r2, #0
    1e86:	f7fe f98f 	bl	1a8 <__aeabi_dsub>
    1e8a:	4602      	mov	r2, r0
    1e8c:	460b      	mov	r3, r1
    1e8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1e92:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e94:	4633      	mov	r3, r6
    1e96:	f7fe fdcf 	bl	a38 <__aeabi_dcmpgt>
    1e9a:	2800      	cmp	r0, #0
    1e9c:	f040 8297 	bne.w	23ce <_dtoa_r+0x96e>
    1ea0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1ea6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1eaa:	f7fe fda7 	bl	9fc <__aeabi_dcmplt>
    1eae:	2800      	cmp	r0, #0
    1eb0:	f040 828b 	bne.w	23ca <_dtoa_r+0x96a>
    1eb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1eb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	f2c0 8151 	blt.w	2166 <_dtoa_r+0x706>
    1ec4:	f1ba 0f0e 	cmp.w	sl, #14
    1ec8:	f300 814d 	bgt.w	2166 <_dtoa_r+0x706>
    1ecc:	4b6b      	ldr	r3, [pc, #428]	; (207c <_dtoa_r+0x61c>)
    1ece:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1ed2:	e9d3 3400 	ldrd	r3, r4, [r3]
    1ed6:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1edc:	2b00      	cmp	r3, #0
    1ede:	f280 80db 	bge.w	2098 <_dtoa_r+0x638>
    1ee2:	9b08      	ldr	r3, [sp, #32]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	f300 80d7 	bgt.w	2098 <_dtoa_r+0x638>
    1eea:	f040 826d 	bne.w	23c8 <_dtoa_r+0x968>
    1eee:	4b68      	ldr	r3, [pc, #416]	; (2090 <_dtoa_r+0x630>)
    1ef0:	2200      	movs	r2, #0
    1ef2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1ef6:	f7fe fb0f 	bl	518 <__aeabi_dmul>
    1efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1efe:	f7fe fd91 	bl	a24 <__aeabi_dcmpge>
    1f02:	9c08      	ldr	r4, [sp, #32]
    1f04:	4626      	mov	r6, r4
    1f06:	2800      	cmp	r0, #0
    1f08:	f040 8243 	bne.w	2392 <_dtoa_r+0x932>
    1f0c:	9f03      	ldr	r7, [sp, #12]
    1f0e:	2331      	movs	r3, #49	; 0x31
    1f10:	f807 3b01 	strb.w	r3, [r7], #1
    1f14:	f10a 0a01 	add.w	sl, sl, #1
    1f18:	e23f      	b.n	239a <_dtoa_r+0x93a>
    1f1a:	07e2      	lsls	r2, r4, #31
    1f1c:	d505      	bpl.n	1f2a <_dtoa_r+0x4ca>
    1f1e:	e9d6 2300 	ldrd	r2, r3, [r6]
    1f22:	f7fe faf9 	bl	518 <__aeabi_dmul>
    1f26:	3701      	adds	r7, #1
    1f28:	2301      	movs	r3, #1
    1f2a:	1064      	asrs	r4, r4, #1
    1f2c:	3608      	adds	r6, #8
    1f2e:	e76d      	b.n	1e0c <_dtoa_r+0x3ac>
    1f30:	2702      	movs	r7, #2
    1f32:	e770      	b.n	1e16 <_dtoa_r+0x3b6>
    1f34:	9c08      	ldr	r4, [sp, #32]
    1f36:	46d0      	mov	r8, sl
    1f38:	e78f      	b.n	1e5a <_dtoa_r+0x3fa>
    1f3a:	9903      	ldr	r1, [sp, #12]
    1f3c:	4b4f      	ldr	r3, [pc, #316]	; (207c <_dtoa_r+0x61c>)
    1f3e:	4421      	add	r1, r4
    1f40:	9112      	str	r1, [sp, #72]	; 0x48
    1f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1f48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1f4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1f50:	2900      	cmp	r1, #0
    1f52:	d046      	beq.n	1fe2 <_dtoa_r+0x582>
    1f54:	494f      	ldr	r1, [pc, #316]	; (2094 <_dtoa_r+0x634>)
    1f56:	2000      	movs	r0, #0
    1f58:	f7fe fc08 	bl	76c <__aeabi_ddiv>
    1f5c:	463b      	mov	r3, r7
    1f5e:	4632      	mov	r2, r6
    1f60:	f7fe f922 	bl	1a8 <__aeabi_dsub>
    1f64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f68:	9f03      	ldr	r7, [sp, #12]
    1f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f6e:	f7fe fd6d 	bl	a4c <__aeabi_d2iz>
    1f72:	4604      	mov	r4, r0
    1f74:	f7fe fa66 	bl	444 <__aeabi_i2d>
    1f78:	4602      	mov	r2, r0
    1f7a:	460b      	mov	r3, r1
    1f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f80:	f7fe f912 	bl	1a8 <__aeabi_dsub>
    1f84:	3430      	adds	r4, #48	; 0x30
    1f86:	4602      	mov	r2, r0
    1f88:	460b      	mov	r3, r1
    1f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f8e:	f807 4b01 	strb.w	r4, [r7], #1
    1f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f96:	f7fe fd31 	bl	9fc <__aeabi_dcmplt>
    1f9a:	2800      	cmp	r0, #0
    1f9c:	d165      	bne.n	206a <_dtoa_r+0x60a>
    1f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1fa2:	4938      	ldr	r1, [pc, #224]	; (2084 <_dtoa_r+0x624>)
    1fa4:	2000      	movs	r0, #0
    1fa6:	f7fe f8ff 	bl	1a8 <__aeabi_dsub>
    1faa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1fae:	f7fe fd25 	bl	9fc <__aeabi_dcmplt>
    1fb2:	2800      	cmp	r0, #0
    1fb4:	f040 80b6 	bne.w	2124 <_dtoa_r+0x6c4>
    1fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fba:	429f      	cmp	r7, r3
    1fbc:	f43f af7a 	beq.w	1eb4 <_dtoa_r+0x454>
    1fc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1fc4:	4b30      	ldr	r3, [pc, #192]	; (2088 <_dtoa_r+0x628>)
    1fc6:	2200      	movs	r2, #0
    1fc8:	f7fe faa6 	bl	518 <__aeabi_dmul>
    1fcc:	4b2e      	ldr	r3, [pc, #184]	; (2088 <_dtoa_r+0x628>)
    1fce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1fd2:	2200      	movs	r2, #0
    1fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fd8:	f7fe fa9e 	bl	518 <__aeabi_dmul>
    1fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1fe0:	e7c3      	b.n	1f6a <_dtoa_r+0x50a>
    1fe2:	4630      	mov	r0, r6
    1fe4:	4639      	mov	r1, r7
    1fe6:	f7fe fa97 	bl	518 <__aeabi_dmul>
    1fea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1fee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ff0:	9c03      	ldr	r4, [sp, #12]
    1ff2:	9314      	str	r3, [sp, #80]	; 0x50
    1ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1ff8:	f7fe fd28 	bl	a4c <__aeabi_d2iz>
    1ffc:	9015      	str	r0, [sp, #84]	; 0x54
    1ffe:	f7fe fa21 	bl	444 <__aeabi_i2d>
    2002:	4602      	mov	r2, r0
    2004:	460b      	mov	r3, r1
    2006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    200a:	f7fe f8cd 	bl	1a8 <__aeabi_dsub>
    200e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2010:	3330      	adds	r3, #48	; 0x30
    2012:	f804 3b01 	strb.w	r3, [r4], #1
    2016:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2018:	429c      	cmp	r4, r3
    201a:	4606      	mov	r6, r0
    201c:	460f      	mov	r7, r1
    201e:	f04f 0200 	mov.w	r2, #0
    2022:	d124      	bne.n	206e <_dtoa_r+0x60e>
    2024:	4b1b      	ldr	r3, [pc, #108]	; (2094 <_dtoa_r+0x634>)
    2026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    202a:	f7fe f8bf 	bl	1ac <__adddf3>
    202e:	4602      	mov	r2, r0
    2030:	460b      	mov	r3, r1
    2032:	4630      	mov	r0, r6
    2034:	4639      	mov	r1, r7
    2036:	f7fe fcff 	bl	a38 <__aeabi_dcmpgt>
    203a:	2800      	cmp	r0, #0
    203c:	d171      	bne.n	2122 <_dtoa_r+0x6c2>
    203e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2042:	4914      	ldr	r1, [pc, #80]	; (2094 <_dtoa_r+0x634>)
    2044:	2000      	movs	r0, #0
    2046:	f7fe f8af 	bl	1a8 <__aeabi_dsub>
    204a:	4602      	mov	r2, r0
    204c:	460b      	mov	r3, r1
    204e:	4630      	mov	r0, r6
    2050:	4639      	mov	r1, r7
    2052:	f7fe fcd3 	bl	9fc <__aeabi_dcmplt>
    2056:	2800      	cmp	r0, #0
    2058:	f43f af2c 	beq.w	1eb4 <_dtoa_r+0x454>
    205c:	9f14      	ldr	r7, [sp, #80]	; 0x50
    205e:	1e7b      	subs	r3, r7, #1
    2060:	9314      	str	r3, [sp, #80]	; 0x50
    2062:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    2066:	2b30      	cmp	r3, #48	; 0x30
    2068:	d0f8      	beq.n	205c <_dtoa_r+0x5fc>
    206a:	46c2      	mov	sl, r8
    206c:	e049      	b.n	2102 <_dtoa_r+0x6a2>
    206e:	4b06      	ldr	r3, [pc, #24]	; (2088 <_dtoa_r+0x628>)
    2070:	f7fe fa52 	bl	518 <__aeabi_dmul>
    2074:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2078:	e7bc      	b.n	1ff4 <_dtoa_r+0x594>
    207a:	bf00      	nop
    207c:	00031990 	.word	0x00031990
    2080:	00031968 	.word	0x00031968
    2084:	3ff00000 	.word	0x3ff00000
    2088:	40240000 	.word	0x40240000
    208c:	401c0000 	.word	0x401c0000
    2090:	40140000 	.word	0x40140000
    2094:	3fe00000 	.word	0x3fe00000
    2098:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    209c:	9f03      	ldr	r7, [sp, #12]
    209e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20a2:	4640      	mov	r0, r8
    20a4:	4649      	mov	r1, r9
    20a6:	f7fe fb61 	bl	76c <__aeabi_ddiv>
    20aa:	f7fe fccf 	bl	a4c <__aeabi_d2iz>
    20ae:	4604      	mov	r4, r0
    20b0:	f7fe f9c8 	bl	444 <__aeabi_i2d>
    20b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20b8:	f7fe fa2e 	bl	518 <__aeabi_dmul>
    20bc:	f104 0630 	add.w	r6, r4, #48	; 0x30
    20c0:	460b      	mov	r3, r1
    20c2:	4602      	mov	r2, r0
    20c4:	4649      	mov	r1, r9
    20c6:	4640      	mov	r0, r8
    20c8:	f7fe f86e 	bl	1a8 <__aeabi_dsub>
    20cc:	f807 6b01 	strb.w	r6, [r7], #1
    20d0:	9e03      	ldr	r6, [sp, #12]
    20d2:	9b08      	ldr	r3, [sp, #32]
    20d4:	1bbe      	subs	r6, r7, r6
    20d6:	42b3      	cmp	r3, r6
    20d8:	d138      	bne.n	214c <_dtoa_r+0x6ec>
    20da:	4602      	mov	r2, r0
    20dc:	460b      	mov	r3, r1
    20de:	f7fe f865 	bl	1ac <__adddf3>
    20e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20e6:	4680      	mov	r8, r0
    20e8:	4689      	mov	r9, r1
    20ea:	f7fe fca5 	bl	a38 <__aeabi_dcmpgt>
    20ee:	bb58      	cbnz	r0, 2148 <_dtoa_r+0x6e8>
    20f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20f4:	4640      	mov	r0, r8
    20f6:	4649      	mov	r1, r9
    20f8:	f7fe fc76 	bl	9e8 <__aeabi_dcmpeq>
    20fc:	b108      	cbz	r0, 2102 <_dtoa_r+0x6a2>
    20fe:	07e1      	lsls	r1, r4, #31
    2100:	d422      	bmi.n	2148 <_dtoa_r+0x6e8>
    2102:	4628      	mov	r0, r5
    2104:	4659      	mov	r1, fp
    2106:	f016 fecd 	bl	18ea4 <_Bfree>
    210a:	2300      	movs	r3, #0
    210c:	703b      	strb	r3, [r7, #0]
    210e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2110:	f10a 0001 	add.w	r0, sl, #1
    2114:	6018      	str	r0, [r3, #0]
    2116:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2118:	2b00      	cmp	r3, #0
    211a:	f43f ace7 	beq.w	1aec <_dtoa_r+0x8c>
    211e:	601f      	str	r7, [r3, #0]
    2120:	e4e4      	b.n	1aec <_dtoa_r+0x8c>
    2122:	4627      	mov	r7, r4
    2124:	463b      	mov	r3, r7
    2126:	461f      	mov	r7, r3
    2128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    212c:	2a39      	cmp	r2, #57	; 0x39
    212e:	d107      	bne.n	2140 <_dtoa_r+0x6e0>
    2130:	9a03      	ldr	r2, [sp, #12]
    2132:	429a      	cmp	r2, r3
    2134:	d1f7      	bne.n	2126 <_dtoa_r+0x6c6>
    2136:	9903      	ldr	r1, [sp, #12]
    2138:	2230      	movs	r2, #48	; 0x30
    213a:	f108 0801 	add.w	r8, r8, #1
    213e:	700a      	strb	r2, [r1, #0]
    2140:	781a      	ldrb	r2, [r3, #0]
    2142:	3201      	adds	r2, #1
    2144:	701a      	strb	r2, [r3, #0]
    2146:	e790      	b.n	206a <_dtoa_r+0x60a>
    2148:	46d0      	mov	r8, sl
    214a:	e7eb      	b.n	2124 <_dtoa_r+0x6c4>
    214c:	4ba1      	ldr	r3, [pc, #644]	; (23d4 <_dtoa_r+0x974>)
    214e:	2200      	movs	r2, #0
    2150:	f7fe f9e2 	bl	518 <__aeabi_dmul>
    2154:	2200      	movs	r2, #0
    2156:	2300      	movs	r3, #0
    2158:	4680      	mov	r8, r0
    215a:	4689      	mov	r9, r1
    215c:	f7fe fc44 	bl	9e8 <__aeabi_dcmpeq>
    2160:	2800      	cmp	r0, #0
    2162:	d09c      	beq.n	209e <_dtoa_r+0x63e>
    2164:	e7cd      	b.n	2102 <_dtoa_r+0x6a2>
    2166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2168:	2a00      	cmp	r2, #0
    216a:	f000 80cd 	beq.w	2308 <_dtoa_r+0x8a8>
    216e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2170:	2a01      	cmp	r2, #1
    2172:	f300 80af 	bgt.w	22d4 <_dtoa_r+0x874>
    2176:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2178:	2a00      	cmp	r2, #0
    217a:	f000 80a7 	beq.w	22cc <_dtoa_r+0x86c>
    217e:	f203 4333 	addw	r3, r3, #1075	; 0x433
    2182:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2184:	9f06      	ldr	r7, [sp, #24]
    2186:	9a06      	ldr	r2, [sp, #24]
    2188:	441a      	add	r2, r3
    218a:	9206      	str	r2, [sp, #24]
    218c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    218e:	2101      	movs	r1, #1
    2190:	441a      	add	r2, r3
    2192:	4628      	mov	r0, r5
    2194:	9209      	str	r2, [sp, #36]	; 0x24
    2196:	f016 ff28 	bl	18fea <__i2b>
    219a:	4606      	mov	r6, r0
    219c:	2f00      	cmp	r7, #0
    219e:	dd0c      	ble.n	21ba <_dtoa_r+0x75a>
    21a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21a2:	2b00      	cmp	r3, #0
    21a4:	dd09      	ble.n	21ba <_dtoa_r+0x75a>
    21a6:	42bb      	cmp	r3, r7
    21a8:	9a06      	ldr	r2, [sp, #24]
    21aa:	bfa8      	it	ge
    21ac:	463b      	movge	r3, r7
    21ae:	1ad2      	subs	r2, r2, r3
    21b0:	9206      	str	r2, [sp, #24]
    21b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    21b4:	1aff      	subs	r7, r7, r3
    21b6:	1ad3      	subs	r3, r2, r3
    21b8:	9309      	str	r3, [sp, #36]	; 0x24
    21ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21bc:	b1f3      	cbz	r3, 21fc <_dtoa_r+0x79c>
    21be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    21c0:	2b00      	cmp	r3, #0
    21c2:	f000 80a5 	beq.w	2310 <_dtoa_r+0x8b0>
    21c6:	2c00      	cmp	r4, #0
    21c8:	dd10      	ble.n	21ec <_dtoa_r+0x78c>
    21ca:	4631      	mov	r1, r6
    21cc:	4622      	mov	r2, r4
    21ce:	4628      	mov	r0, r5
    21d0:	f011 fc44 	bl	13a5c <__pow5mult>
    21d4:	465a      	mov	r2, fp
    21d6:	4601      	mov	r1, r0
    21d8:	4606      	mov	r6, r0
    21da:	4628      	mov	r0, r5
    21dc:	f016 ff0e 	bl	18ffc <__multiply>
    21e0:	4659      	mov	r1, fp
    21e2:	4680      	mov	r8, r0
    21e4:	4628      	mov	r0, r5
    21e6:	f016 fe5d 	bl	18ea4 <_Bfree>
    21ea:	46c3      	mov	fp, r8
    21ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21ee:	1b1a      	subs	r2, r3, r4
    21f0:	d004      	beq.n	21fc <_dtoa_r+0x79c>
    21f2:	4659      	mov	r1, fp
    21f4:	4628      	mov	r0, r5
    21f6:	f011 fc31 	bl	13a5c <__pow5mult>
    21fa:	4683      	mov	fp, r0
    21fc:	2101      	movs	r1, #1
    21fe:	4628      	mov	r0, r5
    2200:	f016 fef3 	bl	18fea <__i2b>
    2204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2206:	2b00      	cmp	r3, #0
    2208:	4604      	mov	r4, r0
    220a:	f340 8083 	ble.w	2314 <_dtoa_r+0x8b4>
    220e:	461a      	mov	r2, r3
    2210:	4601      	mov	r1, r0
    2212:	4628      	mov	r0, r5
    2214:	f011 fc22 	bl	13a5c <__pow5mult>
    2218:	9b22      	ldr	r3, [sp, #136]	; 0x88
    221a:	2b01      	cmp	r3, #1
    221c:	4604      	mov	r4, r0
    221e:	dd7c      	ble.n	231a <_dtoa_r+0x8ba>
    2220:	f04f 0800 	mov.w	r8, #0
    2224:	6923      	ldr	r3, [r4, #16]
    2226:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    222a:	6918      	ldr	r0, [r3, #16]
    222c:	f016 fe8f 	bl	18f4e <__hi0bits>
    2230:	f1c0 0020 	rsb	r0, r0, #32
    2234:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2236:	4418      	add	r0, r3
    2238:	f010 001f 	ands.w	r0, r0, #31
    223c:	f000 808e 	beq.w	235c <_dtoa_r+0x8fc>
    2240:	f1c0 0320 	rsb	r3, r0, #32
    2244:	2b04      	cmp	r3, #4
    2246:	f340 8087 	ble.w	2358 <_dtoa_r+0x8f8>
    224a:	f1c0 001c 	rsb	r0, r0, #28
    224e:	9b06      	ldr	r3, [sp, #24]
    2250:	4403      	add	r3, r0
    2252:	9306      	str	r3, [sp, #24]
    2254:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2256:	4403      	add	r3, r0
    2258:	4407      	add	r7, r0
    225a:	9309      	str	r3, [sp, #36]	; 0x24
    225c:	9b06      	ldr	r3, [sp, #24]
    225e:	2b00      	cmp	r3, #0
    2260:	dd05      	ble.n	226e <_dtoa_r+0x80e>
    2262:	4659      	mov	r1, fp
    2264:	461a      	mov	r2, r3
    2266:	4628      	mov	r0, r5
    2268:	f016 ff64 	bl	19134 <__lshift>
    226c:	4683      	mov	fp, r0
    226e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2270:	2b00      	cmp	r3, #0
    2272:	dd05      	ble.n	2280 <_dtoa_r+0x820>
    2274:	4621      	mov	r1, r4
    2276:	461a      	mov	r2, r3
    2278:	4628      	mov	r0, r5
    227a:	f016 ff5b 	bl	19134 <__lshift>
    227e:	4604      	mov	r4, r0
    2280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2282:	2b00      	cmp	r3, #0
    2284:	d06c      	beq.n	2360 <_dtoa_r+0x900>
    2286:	4621      	mov	r1, r4
    2288:	4658      	mov	r0, fp
    228a:	f016 ffb2 	bl	191f2 <__mcmp>
    228e:	2800      	cmp	r0, #0
    2290:	da66      	bge.n	2360 <_dtoa_r+0x900>
    2292:	2300      	movs	r3, #0
    2294:	4659      	mov	r1, fp
    2296:	220a      	movs	r2, #10
    2298:	4628      	mov	r0, r5
    229a:	f016 fe1a 	bl	18ed2 <__multadd>
    229e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    22a0:	f10a 3aff 	add.w	sl, sl, #4294967295
    22a4:	4683      	mov	fp, r0
    22a6:	2b00      	cmp	r3, #0
    22a8:	f000 818b 	beq.w	25c2 <_dtoa_r+0xb62>
    22ac:	4631      	mov	r1, r6
    22ae:	2300      	movs	r3, #0
    22b0:	220a      	movs	r2, #10
    22b2:	4628      	mov	r0, r5
    22b4:	f016 fe0d 	bl	18ed2 <__multadd>
    22b8:	f1b9 0f00 	cmp.w	r9, #0
    22bc:	4606      	mov	r6, r0
    22be:	f300 8091 	bgt.w	23e4 <_dtoa_r+0x984>
    22c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    22c4:	2b02      	cmp	r3, #2
    22c6:	f340 808d 	ble.w	23e4 <_dtoa_r+0x984>
    22ca:	e051      	b.n	2370 <_dtoa_r+0x910>
    22cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    22ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    22d2:	e756      	b.n	2182 <_dtoa_r+0x722>
    22d4:	9b08      	ldr	r3, [sp, #32]
    22d6:	1e5c      	subs	r4, r3, #1
    22d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22da:	42a3      	cmp	r3, r4
    22dc:	bfbf      	itttt	lt
    22de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    22e0:	940a      	strlt	r4, [sp, #40]	; 0x28
    22e2:	1ae2      	sublt	r2, r4, r3
    22e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    22e6:	bfb6      	itet	lt
    22e8:	189b      	addlt	r3, r3, r2
    22ea:	1b1c      	subge	r4, r3, r4
    22ec:	930e      	strlt	r3, [sp, #56]	; 0x38
    22ee:	9b08      	ldr	r3, [sp, #32]
    22f0:	bfb8      	it	lt
    22f2:	2400      	movlt	r4, #0
    22f4:	2b00      	cmp	r3, #0
    22f6:	bfb9      	ittee	lt
    22f8:	9b06      	ldrlt	r3, [sp, #24]
    22fa:	9a08      	ldrlt	r2, [sp, #32]
    22fc:	9f06      	ldrge	r7, [sp, #24]
    22fe:	9b08      	ldrge	r3, [sp, #32]
    2300:	bfbc      	itt	lt
    2302:	1a9f      	sublt	r7, r3, r2
    2304:	2300      	movlt	r3, #0
    2306:	e73e      	b.n	2186 <_dtoa_r+0x726>
    2308:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    230a:	9f06      	ldr	r7, [sp, #24]
    230c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    230e:	e745      	b.n	219c <_dtoa_r+0x73c>
    2310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2312:	e76e      	b.n	21f2 <_dtoa_r+0x792>
    2314:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2316:	2b01      	cmp	r3, #1
    2318:	dc19      	bgt.n	234e <_dtoa_r+0x8ee>
    231a:	9b04      	ldr	r3, [sp, #16]
    231c:	b9bb      	cbnz	r3, 234e <_dtoa_r+0x8ee>
    231e:	9b05      	ldr	r3, [sp, #20]
    2320:	f3c3 0313 	ubfx	r3, r3, #0, #20
    2324:	b99b      	cbnz	r3, 234e <_dtoa_r+0x8ee>
    2326:	9b05      	ldr	r3, [sp, #20]
    2328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    232c:	0d1b      	lsrs	r3, r3, #20
    232e:	051b      	lsls	r3, r3, #20
    2330:	b183      	cbz	r3, 2354 <_dtoa_r+0x8f4>
    2332:	9b06      	ldr	r3, [sp, #24]
    2334:	3301      	adds	r3, #1
    2336:	9306      	str	r3, [sp, #24]
    2338:	9b09      	ldr	r3, [sp, #36]	; 0x24
    233a:	3301      	adds	r3, #1
    233c:	9309      	str	r3, [sp, #36]	; 0x24
    233e:	f04f 0801 	mov.w	r8, #1
    2342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2344:	2b00      	cmp	r3, #0
    2346:	f47f af6d 	bne.w	2224 <_dtoa_r+0x7c4>
    234a:	2001      	movs	r0, #1
    234c:	e772      	b.n	2234 <_dtoa_r+0x7d4>
    234e:	f04f 0800 	mov.w	r8, #0
    2352:	e7f6      	b.n	2342 <_dtoa_r+0x8e2>
    2354:	4698      	mov	r8, r3
    2356:	e7f4      	b.n	2342 <_dtoa_r+0x8e2>
    2358:	d080      	beq.n	225c <_dtoa_r+0x7fc>
    235a:	4618      	mov	r0, r3
    235c:	301c      	adds	r0, #28
    235e:	e776      	b.n	224e <_dtoa_r+0x7ee>
    2360:	9b08      	ldr	r3, [sp, #32]
    2362:	2b00      	cmp	r3, #0
    2364:	dc38      	bgt.n	23d8 <_dtoa_r+0x978>
    2366:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2368:	2b02      	cmp	r3, #2
    236a:	dd35      	ble.n	23d8 <_dtoa_r+0x978>
    236c:	f8dd 9020 	ldr.w	r9, [sp, #32]
    2370:	f1b9 0f00 	cmp.w	r9, #0
    2374:	d10d      	bne.n	2392 <_dtoa_r+0x932>
    2376:	4621      	mov	r1, r4
    2378:	464b      	mov	r3, r9
    237a:	2205      	movs	r2, #5
    237c:	4628      	mov	r0, r5
    237e:	f016 fda8 	bl	18ed2 <__multadd>
    2382:	4601      	mov	r1, r0
    2384:	4604      	mov	r4, r0
    2386:	4658      	mov	r0, fp
    2388:	f016 ff33 	bl	191f2 <__mcmp>
    238c:	2800      	cmp	r0, #0
    238e:	f73f adbd 	bgt.w	1f0c <_dtoa_r+0x4ac>
    2392:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2394:	9f03      	ldr	r7, [sp, #12]
    2396:	ea6f 0a03 	mvn.w	sl, r3
    239a:	f04f 0800 	mov.w	r8, #0
    239e:	4621      	mov	r1, r4
    23a0:	4628      	mov	r0, r5
    23a2:	f016 fd7f 	bl	18ea4 <_Bfree>
    23a6:	2e00      	cmp	r6, #0
    23a8:	f43f aeab 	beq.w	2102 <_dtoa_r+0x6a2>
    23ac:	f1b8 0f00 	cmp.w	r8, #0
    23b0:	d005      	beq.n	23be <_dtoa_r+0x95e>
    23b2:	45b0      	cmp	r8, r6
    23b4:	d003      	beq.n	23be <_dtoa_r+0x95e>
    23b6:	4641      	mov	r1, r8
    23b8:	4628      	mov	r0, r5
    23ba:	f016 fd73 	bl	18ea4 <_Bfree>
    23be:	4631      	mov	r1, r6
    23c0:	4628      	mov	r0, r5
    23c2:	f016 fd6f 	bl	18ea4 <_Bfree>
    23c6:	e69c      	b.n	2102 <_dtoa_r+0x6a2>
    23c8:	2400      	movs	r4, #0
    23ca:	4626      	mov	r6, r4
    23cc:	e7e1      	b.n	2392 <_dtoa_r+0x932>
    23ce:	46c2      	mov	sl, r8
    23d0:	4626      	mov	r6, r4
    23d2:	e59b      	b.n	1f0c <_dtoa_r+0x4ac>
    23d4:	40240000 	.word	0x40240000
    23d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23da:	f8dd 9020 	ldr.w	r9, [sp, #32]
    23de:	2b00      	cmp	r3, #0
    23e0:	f000 80f6 	beq.w	25d0 <_dtoa_r+0xb70>
    23e4:	2f00      	cmp	r7, #0
    23e6:	dd05      	ble.n	23f4 <_dtoa_r+0x994>
    23e8:	4631      	mov	r1, r6
    23ea:	463a      	mov	r2, r7
    23ec:	4628      	mov	r0, r5
    23ee:	f016 fea1 	bl	19134 <__lshift>
    23f2:	4606      	mov	r6, r0
    23f4:	f1b8 0f00 	cmp.w	r8, #0
    23f8:	d055      	beq.n	24a6 <_dtoa_r+0xa46>
    23fa:	6871      	ldr	r1, [r6, #4]
    23fc:	4628      	mov	r0, r5
    23fe:	f016 fd1d 	bl	18e3c <_Balloc>
    2402:	6932      	ldr	r2, [r6, #16]
    2404:	3202      	adds	r2, #2
    2406:	4607      	mov	r7, r0
    2408:	0092      	lsls	r2, r2, #2
    240a:	f106 010c 	add.w	r1, r6, #12
    240e:	300c      	adds	r0, #12
    2410:	f016 fa64 	bl	188dc <memcpy>
    2414:	2201      	movs	r2, #1
    2416:	4639      	mov	r1, r7
    2418:	4628      	mov	r0, r5
    241a:	f016 fe8b 	bl	19134 <__lshift>
    241e:	9b03      	ldr	r3, [sp, #12]
    2420:	3301      	adds	r3, #1
    2422:	9308      	str	r3, [sp, #32]
    2424:	9b03      	ldr	r3, [sp, #12]
    2426:	444b      	add	r3, r9
    2428:	930a      	str	r3, [sp, #40]	; 0x28
    242a:	9b04      	ldr	r3, [sp, #16]
    242c:	f003 0301 	and.w	r3, r3, #1
    2430:	46b0      	mov	r8, r6
    2432:	9309      	str	r3, [sp, #36]	; 0x24
    2434:	4606      	mov	r6, r0
    2436:	9b08      	ldr	r3, [sp, #32]
    2438:	4621      	mov	r1, r4
    243a:	3b01      	subs	r3, #1
    243c:	4658      	mov	r0, fp
    243e:	9304      	str	r3, [sp, #16]
    2440:	f016 fc18 	bl	18c74 <quorem>
    2444:	4603      	mov	r3, r0
    2446:	3330      	adds	r3, #48	; 0x30
    2448:	9006      	str	r0, [sp, #24]
    244a:	4641      	mov	r1, r8
    244c:	4658      	mov	r0, fp
    244e:	930b      	str	r3, [sp, #44]	; 0x2c
    2450:	f016 fecf 	bl	191f2 <__mcmp>
    2454:	4632      	mov	r2, r6
    2456:	4681      	mov	r9, r0
    2458:	4621      	mov	r1, r4
    245a:	4628      	mov	r0, r5
    245c:	f016 fee4 	bl	19228 <__mdiff>
    2460:	68c2      	ldr	r2, [r0, #12]
    2462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2464:	4607      	mov	r7, r0
    2466:	bb02      	cbnz	r2, 24aa <_dtoa_r+0xa4a>
    2468:	4601      	mov	r1, r0
    246a:	4658      	mov	r0, fp
    246c:	f016 fec1 	bl	191f2 <__mcmp>
    2470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2472:	4602      	mov	r2, r0
    2474:	4639      	mov	r1, r7
    2476:	4628      	mov	r0, r5
    2478:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    247c:	f016 fd12 	bl	18ea4 <_Bfree>
    2480:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2484:	9f08      	ldr	r7, [sp, #32]
    2486:	ea43 0102 	orr.w	r1, r3, r2
    248a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    248c:	430b      	orrs	r3, r1
    248e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2490:	d10d      	bne.n	24ae <_dtoa_r+0xa4e>
    2492:	2b39      	cmp	r3, #57	; 0x39
    2494:	d029      	beq.n	24ea <_dtoa_r+0xa8a>
    2496:	f1b9 0f00 	cmp.w	r9, #0
    249a:	dd01      	ble.n	24a0 <_dtoa_r+0xa40>
    249c:	9b06      	ldr	r3, [sp, #24]
    249e:	3331      	adds	r3, #49	; 0x31
    24a0:	9a04      	ldr	r2, [sp, #16]
    24a2:	7013      	strb	r3, [r2, #0]
    24a4:	e77b      	b.n	239e <_dtoa_r+0x93e>
    24a6:	4630      	mov	r0, r6
    24a8:	e7b9      	b.n	241e <_dtoa_r+0x9be>
    24aa:	2201      	movs	r2, #1
    24ac:	e7e2      	b.n	2474 <_dtoa_r+0xa14>
    24ae:	f1b9 0f00 	cmp.w	r9, #0
    24b2:	db06      	blt.n	24c2 <_dtoa_r+0xa62>
    24b4:	9922      	ldr	r1, [sp, #136]	; 0x88
    24b6:	ea41 0909 	orr.w	r9, r1, r9
    24ba:	9909      	ldr	r1, [sp, #36]	; 0x24
    24bc:	ea59 0101 	orrs.w	r1, r9, r1
    24c0:	d120      	bne.n	2504 <_dtoa_r+0xaa4>
    24c2:	2a00      	cmp	r2, #0
    24c4:	ddec      	ble.n	24a0 <_dtoa_r+0xa40>
    24c6:	4659      	mov	r1, fp
    24c8:	2201      	movs	r2, #1
    24ca:	4628      	mov	r0, r5
    24cc:	9308      	str	r3, [sp, #32]
    24ce:	f016 fe31 	bl	19134 <__lshift>
    24d2:	4621      	mov	r1, r4
    24d4:	4683      	mov	fp, r0
    24d6:	f016 fe8c 	bl	191f2 <__mcmp>
    24da:	2800      	cmp	r0, #0
    24dc:	9b08      	ldr	r3, [sp, #32]
    24de:	dc02      	bgt.n	24e6 <_dtoa_r+0xa86>
    24e0:	d1de      	bne.n	24a0 <_dtoa_r+0xa40>
    24e2:	07da      	lsls	r2, r3, #31
    24e4:	d5dc      	bpl.n	24a0 <_dtoa_r+0xa40>
    24e6:	2b39      	cmp	r3, #57	; 0x39
    24e8:	d1d8      	bne.n	249c <_dtoa_r+0xa3c>
    24ea:	9a04      	ldr	r2, [sp, #16]
    24ec:	2339      	movs	r3, #57	; 0x39
    24ee:	7013      	strb	r3, [r2, #0]
    24f0:	463b      	mov	r3, r7
    24f2:	461f      	mov	r7, r3
    24f4:	3b01      	subs	r3, #1
    24f6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    24fa:	2a39      	cmp	r2, #57	; 0x39
    24fc:	d050      	beq.n	25a0 <_dtoa_r+0xb40>
    24fe:	3201      	adds	r2, #1
    2500:	701a      	strb	r2, [r3, #0]
    2502:	e74c      	b.n	239e <_dtoa_r+0x93e>
    2504:	2a00      	cmp	r2, #0
    2506:	dd03      	ble.n	2510 <_dtoa_r+0xab0>
    2508:	2b39      	cmp	r3, #57	; 0x39
    250a:	d0ee      	beq.n	24ea <_dtoa_r+0xa8a>
    250c:	3301      	adds	r3, #1
    250e:	e7c7      	b.n	24a0 <_dtoa_r+0xa40>
    2510:	9a08      	ldr	r2, [sp, #32]
    2512:	990a      	ldr	r1, [sp, #40]	; 0x28
    2514:	f802 3c01 	strb.w	r3, [r2, #-1]
    2518:	428a      	cmp	r2, r1
    251a:	d02a      	beq.n	2572 <_dtoa_r+0xb12>
    251c:	4659      	mov	r1, fp
    251e:	2300      	movs	r3, #0
    2520:	220a      	movs	r2, #10
    2522:	4628      	mov	r0, r5
    2524:	f016 fcd5 	bl	18ed2 <__multadd>
    2528:	45b0      	cmp	r8, r6
    252a:	4683      	mov	fp, r0
    252c:	f04f 0300 	mov.w	r3, #0
    2530:	f04f 020a 	mov.w	r2, #10
    2534:	4641      	mov	r1, r8
    2536:	4628      	mov	r0, r5
    2538:	d107      	bne.n	254a <_dtoa_r+0xaea>
    253a:	f016 fcca 	bl	18ed2 <__multadd>
    253e:	4680      	mov	r8, r0
    2540:	4606      	mov	r6, r0
    2542:	9b08      	ldr	r3, [sp, #32]
    2544:	3301      	adds	r3, #1
    2546:	9308      	str	r3, [sp, #32]
    2548:	e775      	b.n	2436 <_dtoa_r+0x9d6>
    254a:	f016 fcc2 	bl	18ed2 <__multadd>
    254e:	4631      	mov	r1, r6
    2550:	4680      	mov	r8, r0
    2552:	2300      	movs	r3, #0
    2554:	220a      	movs	r2, #10
    2556:	4628      	mov	r0, r5
    2558:	f016 fcbb 	bl	18ed2 <__multadd>
    255c:	4606      	mov	r6, r0
    255e:	e7f0      	b.n	2542 <_dtoa_r+0xae2>
    2560:	f1b9 0f00 	cmp.w	r9, #0
    2564:	9a03      	ldr	r2, [sp, #12]
    2566:	bfcc      	ite	gt
    2568:	464f      	movgt	r7, r9
    256a:	2701      	movle	r7, #1
    256c:	4417      	add	r7, r2
    256e:	f04f 0800 	mov.w	r8, #0
    2572:	4659      	mov	r1, fp
    2574:	2201      	movs	r2, #1
    2576:	4628      	mov	r0, r5
    2578:	9308      	str	r3, [sp, #32]
    257a:	f016 fddb 	bl	19134 <__lshift>
    257e:	4621      	mov	r1, r4
    2580:	4683      	mov	fp, r0
    2582:	f016 fe36 	bl	191f2 <__mcmp>
    2586:	2800      	cmp	r0, #0
    2588:	dcb2      	bgt.n	24f0 <_dtoa_r+0xa90>
    258a:	d102      	bne.n	2592 <_dtoa_r+0xb32>
    258c:	9b08      	ldr	r3, [sp, #32]
    258e:	07db      	lsls	r3, r3, #31
    2590:	d4ae      	bmi.n	24f0 <_dtoa_r+0xa90>
    2592:	463b      	mov	r3, r7
    2594:	461f      	mov	r7, r3
    2596:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    259a:	2a30      	cmp	r2, #48	; 0x30
    259c:	d0fa      	beq.n	2594 <_dtoa_r+0xb34>
    259e:	e6fe      	b.n	239e <_dtoa_r+0x93e>
    25a0:	9a03      	ldr	r2, [sp, #12]
    25a2:	429a      	cmp	r2, r3
    25a4:	d1a5      	bne.n	24f2 <_dtoa_r+0xa92>
    25a6:	f10a 0a01 	add.w	sl, sl, #1
    25aa:	2331      	movs	r3, #49	; 0x31
    25ac:	e779      	b.n	24a2 <_dtoa_r+0xa42>
    25ae:	4b13      	ldr	r3, [pc, #76]	; (25fc <_dtoa_r+0xb9c>)
    25b0:	f7ff babb 	b.w	1b2a <_dtoa_r+0xca>
    25b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    25b6:	2b00      	cmp	r3, #0
    25b8:	f47f aa93 	bne.w	1ae2 <_dtoa_r+0x82>
    25bc:	4b10      	ldr	r3, [pc, #64]	; (2600 <_dtoa_r+0xba0>)
    25be:	f7ff bab4 	b.w	1b2a <_dtoa_r+0xca>
    25c2:	f1b9 0f00 	cmp.w	r9, #0
    25c6:	dc03      	bgt.n	25d0 <_dtoa_r+0xb70>
    25c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    25ca:	2b02      	cmp	r3, #2
    25cc:	f73f aed0 	bgt.w	2370 <_dtoa_r+0x910>
    25d0:	9f03      	ldr	r7, [sp, #12]
    25d2:	4621      	mov	r1, r4
    25d4:	4658      	mov	r0, fp
    25d6:	f016 fb4d 	bl	18c74 <quorem>
    25da:	f100 0330 	add.w	r3, r0, #48	; 0x30
    25de:	f807 3b01 	strb.w	r3, [r7], #1
    25e2:	9a03      	ldr	r2, [sp, #12]
    25e4:	1aba      	subs	r2, r7, r2
    25e6:	4591      	cmp	r9, r2
    25e8:	ddba      	ble.n	2560 <_dtoa_r+0xb00>
    25ea:	4659      	mov	r1, fp
    25ec:	2300      	movs	r3, #0
    25ee:	220a      	movs	r2, #10
    25f0:	4628      	mov	r0, r5
    25f2:	f016 fc6e 	bl	18ed2 <__multadd>
    25f6:	4683      	mov	fp, r0
    25f8:	e7eb      	b.n	25d2 <_dtoa_r+0xb72>
    25fa:	bf00      	nop
    25fc:	00035096 	.word	0x00035096
    2600:	000350ba 	.word	0x000350ba

00002604 <_Z18ee_serial_callbackc>:
 * from the UART ISR for each new character received. When the parser sees the
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
    2604:	b538      	push	{r3, r4, r5, lr}
  if (c == EE_CMD_TERMINATOR) {
    2606:	2825      	cmp	r0, #37	; 0x25
    2608:	d00c      	beq.n	2624 <_Z18ee_serial_callbackc+0x20>
    g_cmd_buf[g_cmd_pos] = (char)0;
    th_command_ready(g_cmd_buf);
    g_cmd_pos = 0;
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    260a:	4b0c      	ldr	r3, [pc, #48]	; (263c <_Z18ee_serial_callbackc+0x38>)
    260c:	681a      	ldr	r2, [r3, #0]
    260e:	490c      	ldr	r1, [pc, #48]	; (2640 <_Z18ee_serial_callbackc+0x3c>)
    2610:	5488      	strb	r0, [r1, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    2612:	681b      	ldr	r3, [r3, #0]
    2614:	2b4f      	cmp	r3, #79	; 0x4f
    2616:	d80e      	bhi.n	2636 <_Z18ee_serial_callbackc+0x32>
    2618:	4b08      	ldr	r3, [pc, #32]	; (263c <_Z18ee_serial_callbackc+0x38>)
    261a:	681b      	ldr	r3, [r3, #0]
    261c:	3301      	adds	r3, #1
    261e:	4a07      	ldr	r2, [pc, #28]	; (263c <_Z18ee_serial_callbackc+0x38>)
    2620:	6013      	str	r3, [r2, #0]
  }
}
    2622:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = (char)0;
    2624:	4c05      	ldr	r4, [pc, #20]	; (263c <_Z18ee_serial_callbackc+0x38>)
    2626:	6823      	ldr	r3, [r4, #0]
    2628:	4805      	ldr	r0, [pc, #20]	; (2640 <_Z18ee_serial_callbackc+0x3c>)
    262a:	2500      	movs	r5, #0
    262c:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    262e:	f011 fb56 	bl	13cde <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    2632:	6025      	str	r5, [r4, #0]
    2634:	e7f5      	b.n	2622 <_Z18ee_serial_callbackc+0x1e>
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    2636:	2350      	movs	r3, #80	; 0x50
    2638:	e7f1      	b.n	261e <_Z18ee_serial_callbackc+0x1a>
    263a:	bf00      	nop
    263c:	20000554 	.word	0x20000554
    2640:	20000500 	.word	0x20000500

00002644 <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    2644:	b508      	push	{r3, lr}
  th_serialport_initialize();
    2646:	f011 fb64 	bl	13d12 <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    264a:	f000 fad1 	bl	2bf0 <_Z23th_timestamp_initializev>
  th_final_initialize();
    264e:	f000 fad9 	bl	2c04 <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    2652:	4805      	ldr	r0, [pc, #20]	; (2668 <_Z23ee_benchmark_initializev+0x24>)
    2654:	f011 fb4f 	bl	13cf6 <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    2658:	4b04      	ldr	r3, [pc, #16]	; (266c <_Z23ee_benchmark_initializev+0x28>)
    265a:	2201      	movs	r2, #1
    265c:	701a      	strb	r2, [r3, #0]
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    265e:	4804      	ldr	r0, [pc, #16]	; (2670 <_Z23ee_benchmark_initializev+0x2c>)
    2660:	f011 fb49 	bl	13cf6 <_Z9th_printfPKcz>
}
    2664:	bd08      	pop	{r3, pc}
    2666:	bf00      	nop
    2668:	00031a58 	.word	0x00031a58
    266c:	2000f750 	.word	0x2000f750
    2670:	00031a68 	.word	0x00031a68

00002674 <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    2674:	b570      	push	{r4, r5, r6, lr}
    2676:	4604      	mov	r4, r0
    2678:	460d      	mov	r5, r1
  th_load_tensor(); /* if necessary */
    267a:	f000 fa01 	bl	2a80 <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    267e:	4629      	mov	r1, r5
    2680:	4811      	ldr	r0, [pc, #68]	; (26c8 <_Z8ee_inferjj+0x54>)
    2682:	f011 fb38 	bl	13cf6 <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    2686:	1e6e      	subs	r6, r5, #1
    2688:	b11d      	cbz	r5, 2692 <_Z8ee_inferjj+0x1e>
    th_infer(); /* call the API inference function */
    268a:	f000 f9e7 	bl	2a5c <_Z8th_inferv>
  while (n_warmup-- > 0) {
    268e:	4635      	mov	r5, r6
    2690:	e7f9      	b.n	2686 <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    2692:	480e      	ldr	r0, [pc, #56]	; (26cc <_Z8ee_inferjj+0x58>)
    2694:	f011 fb2f 	bl	13cf6 <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    2698:	4621      	mov	r1, r4
    269a:	480d      	ldr	r0, [pc, #52]	; (26d0 <_Z8ee_inferjj+0x5c>)
    269c:	f011 fb2b 	bl	13cf6 <_Z9th_printfPKcz>
  th_timestamp();
    26a0:	f000 fa72 	bl	2b88 <_Z12th_timestampv>
  th_pre();
    26a4:	f011 fb19 	bl	13cda <_Z6th_prev>
  while (n-- > 0) {
    26a8:	1e65      	subs	r5, r4, #1
    26aa:	b11c      	cbz	r4, 26b4 <_Z8ee_inferjj+0x40>
    th_infer(); /* call the API inference function */
    26ac:	f000 f9d6 	bl	2a5c <_Z8th_inferv>
  while (n-- > 0) {
    26b0:	462c      	mov	r4, r5
    26b2:	e7f9      	b.n	26a8 <_Z8ee_inferjj+0x34>
  }
  th_post();
    26b4:	f011 fb12 	bl	13cdc <_Z7th_postv>
  th_timestamp();
    26b8:	f000 fa66 	bl	2b88 <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    26bc:	4805      	ldr	r0, [pc, #20]	; (26d4 <_Z8ee_inferjj+0x60>)
    26be:	f011 fb1a 	bl	13cf6 <_Z9th_printfPKcz>
  th_results();
    26c2:	f000 fa1f 	bl	2b04 <_Z10th_resultsv>
}
    26c6:	bd70      	pop	{r4, r5, r6, pc}
    26c8:	00031a74 	.word	0x00031a74
    26cc:	00031a88 	.word	0x00031a88
    26d0:	00031a98 	.word	0x00031a98
    26d4:	00031aac 	.word	0x00031aac

000026d8 <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    26d8:	b570      	push	{r4, r5, r6, lr}
    26da:	b082      	sub	sp, #8
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    26dc:	2250      	movs	r2, #80	; 0x50
    26de:	4951      	ldr	r1, [pc, #324]	; (2824 <_Z15ee_buffer_parsePc+0x14c>)
    26e0:	f016 fa6e 	bl	18bc0 <strncmp>
    26e4:	b110      	cbz	r0, 26ec <_Z15ee_buffer_parsePc+0x14>
    return EE_ARG_UNCLAIMED;
    26e6:	2001      	movs	r0, #1
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    26e8:	b002      	add	sp, #8
    26ea:	bd70      	pop	{r4, r5, r6, pc}
  p_next = strtok(NULL, EE_CMD_DELIMITER);
    26ec:	494e      	ldr	r1, [pc, #312]	; (2828 <_Z15ee_buffer_parsePc+0x150>)
    26ee:	f010 fe5f 	bl	133b0 <strtok>
  if (p_next == NULL) {
    26f2:	4605      	mov	r5, r0
    26f4:	b1d8      	cbz	r0, 272e <_Z15ee_buffer_parsePc+0x56>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    26f6:	2250      	movs	r2, #80	; 0x50
    26f8:	494c      	ldr	r1, [pc, #304]	; (282c <_Z15ee_buffer_parsePc+0x154>)
    26fa:	f016 fa61 	bl	18bc0 <strncmp>
    26fe:	bb50      	cbnz	r0, 2756 <_Z15ee_buffer_parsePc+0x7e>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    2700:	4949      	ldr	r1, [pc, #292]	; (2828 <_Z15ee_buffer_parsePc+0x150>)
    2702:	f010 fe55 	bl	133b0 <strtok>
    if (p_next == NULL) {
    2706:	b1b8      	cbz	r0, 2738 <_Z15ee_buffer_parsePc+0x60>
      g_buff_size = (size_t)atoi(p_next);
    2708:	f016 f8d6 	bl	188b8 <atoi>
    270c:	4601      	mov	r1, r0
    270e:	4b48      	ldr	r3, [pc, #288]	; (2830 <_Z15ee_buffer_parsePc+0x158>)
    2710:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    2712:	b1b0      	cbz	r0, 2742 <_Z15ee_buffer_parsePc+0x6a>
        g_buff_pos = 0;
    2714:	4b47      	ldr	r3, [pc, #284]	; (2834 <_Z15ee_buffer_parsePc+0x15c>)
    2716:	2200      	movs	r2, #0
    2718:	601a      	str	r2, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    271a:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
    271e:	d915      	bls.n	274c <_Z15ee_buffer_parsePc+0x74>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    2720:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2724:	4844      	ldr	r0, [pc, #272]	; (2838 <_Z15ee_buffer_parsePc+0x160>)
    2726:	f011 fae6 	bl	13cf6 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    272a:	2000      	movs	r0, #0
    272c:	e7dc      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    272e:	4843      	ldr	r0, [pc, #268]	; (283c <_Z15ee_buffer_parsePc+0x164>)
    2730:	f011 fae1 	bl	13cf6 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2734:	2000      	movs	r0, #0
    2736:	e7d7      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    2738:	4841      	ldr	r0, [pc, #260]	; (2840 <_Z15ee_buffer_parsePc+0x168>)
    273a:	f011 fadc 	bl	13cf6 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    273e:	2000      	movs	r0, #0
    2740:	e7d2      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    2742:	4840      	ldr	r0, [pc, #256]	; (2844 <_Z15ee_buffer_parsePc+0x16c>)
    2744:	f011 fad7 	bl	13cf6 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2748:	2000      	movs	r0, #0
    274a:	e7cd      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    274c:	483e      	ldr	r0, [pc, #248]	; (2848 <_Z15ee_buffer_parsePc+0x170>)
    274e:	f011 fad2 	bl	13cf6 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2752:	2000      	movs	r0, #0
    2754:	e7c8      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    2756:	2250      	movs	r2, #80	; 0x50
    2758:	493c      	ldr	r1, [pc, #240]	; (284c <_Z15ee_buffer_parsePc+0x174>)
    275a:	4628      	mov	r0, r5
    275c:	f016 fa30 	bl	18bc0 <strncmp>
    2760:	bb60      	cbnz	r0, 27bc <_Z15ee_buffer_parsePc+0xe4>
    size_t i = 0;
    2762:	2400      	movs	r4, #0
    2764:	e012      	b.n	278c <_Z15ee_buffer_parsePc+0xb4>
        th_printf("m-buffer-");
    2766:	483a      	ldr	r0, [pc, #232]	; (2850 <_Z15ee_buffer_parsePc+0x178>)
    2768:	f011 fac5 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    276c:	4b39      	ldr	r3, [pc, #228]	; (2854 <_Z15ee_buffer_parsePc+0x17c>)
    276e:	5d19      	ldrb	r1, [r3, r4]
    2770:	4839      	ldr	r0, [pc, #228]	; (2858 <_Z15ee_buffer_parsePc+0x180>)
    2772:	f011 fac0 	bl	13cf6 <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    2776:	3401      	adds	r4, #1
    2778:	f014 0f07 	tst.w	r4, #7
    277c:	d003      	beq.n	2786 <_Z15ee_buffer_parsePc+0xae>
    277e:	4b2c      	ldr	r3, [pc, #176]	; (2830 <_Z15ee_buffer_parsePc+0x158>)
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	429c      	cmp	r4, r3
    2784:	d10c      	bne.n	27a0 <_Z15ee_buffer_parsePc+0xc8>
        th_printf("\r\n");
    2786:	4835      	ldr	r0, [pc, #212]	; (285c <_Z15ee_buffer_parsePc+0x184>)
    2788:	f011 fab5 	bl	13cf6 <_Z9th_printfPKcz>
    for (; i < g_buff_size; ++i) {
    278c:	4b28      	ldr	r3, [pc, #160]	; (2830 <_Z15ee_buffer_parsePc+0x158>)
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	42a3      	cmp	r3, r4
    2792:	d909      	bls.n	27a8 <_Z15ee_buffer_parsePc+0xd0>
    if ((i + max) % max == 0 || i == 0) {
    2794:	f014 0f07 	tst.w	r4, #7
    2798:	d0e5      	beq.n	2766 <_Z15ee_buffer_parsePc+0x8e>
    279a:	2c00      	cmp	r4, #0
    279c:	d1e6      	bne.n	276c <_Z15ee_buffer_parsePc+0x94>
    279e:	e7e2      	b.n	2766 <_Z15ee_buffer_parsePc+0x8e>
        th_printf("-");
    27a0:	482f      	ldr	r0, [pc, #188]	; (2860 <_Z15ee_buffer_parsePc+0x188>)
    27a2:	f011 faa8 	bl	13cf6 <_Z9th_printfPKcz>
    27a6:	e7f1      	b.n	278c <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    27a8:	f014 0f07 	tst.w	r4, #7
    27ac:	d101      	bne.n	27b2 <_Z15ee_buffer_parsePc+0xda>
  return EE_ARG_CLAIMED;
    27ae:	2000      	movs	r0, #0
    27b0:	e79a      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
    th_printf("\r\n");
    27b2:	482a      	ldr	r0, [pc, #168]	; (285c <_Z15ee_buffer_parsePc+0x184>)
    27b4:	f011 fa9f 	bl	13cf6 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    27b8:	2000      	movs	r0, #0
    27ba:	e795      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
    numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    27bc:	2150      	movs	r1, #80	; 0x50
    27be:	4628      	mov	r0, r5
    27c0:	f011 fa91 	bl	13ce6 <_Z10th_strnlenPKcj>
    27c4:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    27c6:	f010 0401 	ands.w	r4, r0, #1
    27ca:	d11f      	bne.n	280c <_Z15ee_buffer_parsePc+0x134>
    test[2] = 0;
    27cc:	2300      	movs	r3, #0
    27ce:	f88d 3006 	strb.w	r3, [sp, #6]
    for (size_t i = 0; i < numbytes;) {
    27d2:	42b4      	cmp	r4, r6
    27d4:	d224      	bcs.n	2820 <_Z15ee_buffer_parsePc+0x148>
      test[0] = p_next[i++];
    27d6:	1c63      	adds	r3, r4, #1
    27d8:	5d2a      	ldrb	r2, [r5, r4]
    27da:	f88d 2004 	strb.w	r2, [sp, #4]
      test[1] = p_next[i++];
    27de:	5ceb      	ldrb	r3, [r5, r3]
    27e0:	3402      	adds	r4, #2
    27e2:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    27e6:	a801      	add	r0, sp, #4
    27e8:	f011 f9ee 	bl	13bc8 <_Z9ee_hexdecPc>
      if (res < 0) {
    27ec:	2800      	cmp	r0, #0
    27ee:	db11      	blt.n	2814 <_Z15ee_buffer_parsePc+0x13c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    27f0:	4a10      	ldr	r2, [pc, #64]	; (2834 <_Z15ee_buffer_parsePc+0x15c>)
    27f2:	6813      	ldr	r3, [r2, #0]
    27f4:	4917      	ldr	r1, [pc, #92]	; (2854 <_Z15ee_buffer_parsePc+0x17c>)
    27f6:	54c8      	strb	r0, [r1, r3]
        g_buff_pos++;
    27f8:	3301      	adds	r3, #1
    27fa:	6013      	str	r3, [r2, #0]
        if (g_buff_pos == g_buff_size) {
    27fc:	4a0c      	ldr	r2, [pc, #48]	; (2830 <_Z15ee_buffer_parsePc+0x158>)
    27fe:	6812      	ldr	r2, [r2, #0]
    2800:	4293      	cmp	r3, r2
    2802:	d1e6      	bne.n	27d2 <_Z15ee_buffer_parsePc+0xfa>
          th_printf("m-load-done\r\n");
    2804:	4817      	ldr	r0, [pc, #92]	; (2864 <_Z15ee_buffer_parsePc+0x18c>)
    2806:	f011 fa76 	bl	13cf6 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    280a:	e007      	b.n	281c <_Z15ee_buffer_parsePc+0x144>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    280c:	4816      	ldr	r0, [pc, #88]	; (2868 <_Z15ee_buffer_parsePc+0x190>)
    280e:	f011 fa72 	bl	13cf6 <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    2812:	e003      	b.n	281c <_Z15ee_buffer_parsePc+0x144>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    2814:	a901      	add	r1, sp, #4
    2816:	4815      	ldr	r0, [pc, #84]	; (286c <_Z15ee_buffer_parsePc+0x194>)
    2818:	f011 fa6d 	bl	13cf6 <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    281c:	2000      	movs	r0, #0
    281e:	e763      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
  return EE_ARG_CLAIMED;
    2820:	2000      	movs	r0, #0
    2822:	e761      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
    2824:	00031abc 	.word	0x00031abc
    2828:	00031ac0 	.word	0x00031ac0
    282c:	00031af0 	.word	0x00031af0
    2830:	200004fc 	.word	0x200004fc
    2834:	200004f8 	.word	0x200004f8
    2838:	00031b54 	.word	0x00031b54
    283c:	00031ac4 	.word	0x00031ac4
    2840:	00031af8 	.word	0x00031af8
    2844:	00031b28 	.word	0x00031b28
    2848:	00031b84 	.word	0x00031b84
    284c:	00031ba0 	.word	0x00031ba0
    2850:	00031ba8 	.word	0x00031ba8
    2854:	20000558 	.word	0x20000558
    2858:	00031bb4 	.word	0x00031bb4
    285c:	00034e84 	.word	0x00034e84
    2860:	00031bb0 	.word	0x00031bb0
    2864:	00031c04 	.word	0x00031c04
    2868:	00031bbc 	.word	0x00031bbc
    286c:	00031be4 	.word	0x00031be4

00002870 <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    2870:	b510      	push	{r4, lr}
    2872:	4604      	mov	r4, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    2874:	2250      	movs	r2, #80	; 0x50
    2876:	493b      	ldr	r1, [pc, #236]	; (2964 <_Z16ee_profile_parsePc+0xf4>)
    2878:	f016 f9a2 	bl	18bc0 <strncmp>
    287c:	b948      	cbnz	r0, 2892 <_Z16ee_profile_parsePc+0x22>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    287e:	493a      	ldr	r1, [pc, #232]	; (2968 <_Z16ee_profile_parsePc+0xf8>)
    2880:	483a      	ldr	r0, [pc, #232]	; (296c <_Z16ee_profile_parsePc+0xfc>)
    2882:	f011 fa38 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    2886:	493a      	ldr	r1, [pc, #232]	; (2970 <_Z16ee_profile_parsePc+0x100>)
    2888:	483a      	ldr	r0, [pc, #232]	; (2974 <_Z16ee_profile_parsePc+0x104>)
    288a:	f011 fa34 	bl	13cf6 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    288e:	2000      	movs	r0, #0
}
    2890:	bd10      	pop	{r4, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    2892:	2250      	movs	r2, #80	; 0x50
    2894:	4938      	ldr	r1, [pc, #224]	; (2978 <_Z16ee_profile_parsePc+0x108>)
    2896:	4620      	mov	r0, r4
    2898:	f016 f992 	bl	18bc0 <strncmp>
    289c:	bb30      	cbnz	r0, 28ec <_Z16ee_profile_parsePc+0x7c>
    th_printf("%s\r\n", EE_FW_VERSION);
    289e:	4932      	ldr	r1, [pc, #200]	; (2968 <_Z16ee_profile_parsePc+0xf8>)
    28a0:	4836      	ldr	r0, [pc, #216]	; (297c <_Z16ee_profile_parsePc+0x10c>)
    28a2:	f011 fa28 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("\r\n");
    28a6:	4836      	ldr	r0, [pc, #216]	; (2980 <_Z16ee_profile_parsePc+0x110>)
    28a8:	f011 fa25 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    28ac:	4835      	ldr	r0, [pc, #212]	; (2984 <_Z16ee_profile_parsePc+0x114>)
    28ae:	f011 fa22 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    28b2:	4835      	ldr	r0, [pc, #212]	; (2988 <_Z16ee_profile_parsePc+0x118>)
    28b4:	f011 fa1f 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    28b8:	4834      	ldr	r0, [pc, #208]	; (298c <_Z16ee_profile_parsePc+0x11c>)
    28ba:	f011 fa1c 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    28be:	4834      	ldr	r0, [pc, #208]	; (2990 <_Z16ee_profile_parsePc+0x120>)
    28c0:	f011 fa19 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    28c4:	4833      	ldr	r0, [pc, #204]	; (2994 <_Z16ee_profile_parsePc+0x124>)
    28c6:	f011 fa16 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    28ca:	4833      	ldr	r0, [pc, #204]	; (2998 <_Z16ee_profile_parsePc+0x128>)
    28cc:	f011 fa13 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    28d0:	4832      	ldr	r0, [pc, #200]	; (299c <_Z16ee_profile_parsePc+0x12c>)
    28d2:	f011 fa10 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    28d6:	4832      	ldr	r0, [pc, #200]	; (29a0 <_Z16ee_profile_parsePc+0x130>)
    28d8:	f011 fa0d 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf(
    28dc:	4831      	ldr	r0, [pc, #196]	; (29a4 <_Z16ee_profile_parsePc+0x134>)
    28de:	f011 fa0a 	bl	13cf6 <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    28e2:	4831      	ldr	r0, [pc, #196]	; (29a8 <_Z16ee_profile_parsePc+0x138>)
    28e4:	f011 fa07 	bl	13cf6 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    28e8:	2000      	movs	r0, #0
    28ea:	e7d1      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    28ec:	4620      	mov	r0, r4
    28ee:	f7ff fef3 	bl	26d8 <_Z15ee_buffer_parsePc>
    28f2:	2800      	cmp	r0, #0
    28f4:	d0cc      	beq.n	2890 <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    28f6:	2250      	movs	r2, #80	; 0x50
    28f8:	492c      	ldr	r1, [pc, #176]	; (29ac <_Z16ee_profile_parsePc+0x13c>)
    28fa:	4620      	mov	r0, r4
    28fc:	f016 f960 	bl	18bc0 <strncmp>
    2900:	bb18      	cbnz	r0, 294a <_Z16ee_profile_parsePc+0xda>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    2902:	492b      	ldr	r1, [pc, #172]	; (29b0 <_Z16ee_profile_parsePc+0x140>)
    2904:	f010 fd54 	bl	133b0 <strtok>
    if (p_next) {
    2908:	b1b0      	cbz	r0, 2938 <_Z16ee_profile_parsePc+0xc8>
      i = atoi(p_next);
    290a:	f015 ffd5 	bl	188b8 <atoi>
      if (i <= 0) {
    290e:	1e04      	subs	r4, r0, #0
    2910:	dd0d      	ble.n	292e <_Z16ee_profile_parsePc+0xbe>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    2912:	4927      	ldr	r1, [pc, #156]	; (29b0 <_Z16ee_profile_parsePc+0x140>)
    2914:	2000      	movs	r0, #0
    2916:	f010 fd4b 	bl	133b0 <strtok>
      if (p_next) {
    291a:	b1a0      	cbz	r0, 2946 <_Z16ee_profile_parsePc+0xd6>
        i = atoi(p_next);
    291c:	f015 ffcc 	bl	188b8 <atoi>
        if (i < 0) {
    2920:	1e01      	subs	r1, r0, #0
    2922:	da0b      	bge.n	293c <_Z16ee_profile_parsePc+0xcc>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    2924:	4823      	ldr	r0, [pc, #140]	; (29b4 <_Z16ee_profile_parsePc+0x144>)
    2926:	f011 f9e6 	bl	13cf6 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    292a:	2000      	movs	r0, #0
    292c:	e7b0      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
        th_printf("e-[Inference iterations must be >0]\r\n");
    292e:	4822      	ldr	r0, [pc, #136]	; (29b8 <_Z16ee_profile_parsePc+0x148>)
    2930:	f011 f9e1 	bl	13cf6 <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    2934:	2000      	movs	r0, #0
    2936:	e7ab      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2938:	210a      	movs	r1, #10
    size_t n = 1;
    293a:	2401      	movs	r4, #1
    ee_infer(n, w);
    293c:	4620      	mov	r0, r4
    293e:	f7ff fe99 	bl	2674 <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    2942:	2000      	movs	r0, #0
    2944:	e7a4      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2946:	210a      	movs	r1, #10
    2948:	e7f8      	b.n	293c <_Z16ee_profile_parsePc+0xcc>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    294a:	2250      	movs	r2, #80	; 0x50
    294c:	491b      	ldr	r1, [pc, #108]	; (29bc <_Z16ee_profile_parsePc+0x14c>)
    294e:	4620      	mov	r0, r4
    2950:	f016 f936 	bl	18bc0 <strncmp>
    2954:	b108      	cbz	r0, 295a <_Z16ee_profile_parsePc+0xea>
    return EE_ARG_UNCLAIMED;
    2956:	2001      	movs	r0, #1
    2958:	e79a      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
    th_results();
    295a:	f000 f8d3 	bl	2b04 <_Z10th_resultsv>
  return EE_ARG_CLAIMED;
    295e:	2000      	movs	r0, #0
    2960:	e796      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
    2962:	bf00      	nop
    2964:	00031c14 	.word	0x00031c14
    2968:	00031c1c 	.word	0x00031c1c
    296c:	00031c40 	.word	0x00031c40
    2970:	00031c54 	.word	0x00031c54
    2974:	00031c5c 	.word	0x00031c5c
    2978:	00031c6c 	.word	0x00031c6c
    297c:	00031c74 	.word	0x00031c74
    2980:	00034e84 	.word	0x00034e84
    2984:	00031c7c 	.word	0x00031c7c
    2988:	00031ca4 	.word	0x00031ca4
    298c:	00031cd4 	.word	0x00031cd4
    2990:	00031cfc 	.word	0x00031cfc
    2994:	00031d30 	.word	0x00031d30
    2998:	00031d68 	.word	0x00031d68
    299c:	00031da0 	.word	0x00031da0
    29a0:	00031dbc 	.word	0x00031dbc
    29a4:	00031dec 	.word	0x00031dec
    29a8:	00031e34 	.word	0x00031e34
    29ac:	00031e64 	.word	0x00031e64
    29b0:	00031ac0 	.word	0x00031ac0
    29b4:	00031e94 	.word	0x00031e94
    29b8:	00031e6c 	.word	0x00031e6c
    29bc:	00031eb8 	.word	0x00031eb8

000029c0 <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    29c0:	4b14      	ldr	r3, [pc, #80]	; (2a14 <_Z33ee_serial_command_parser_callbackPc+0x54>)
    29c2:	781b      	ldrb	r3, [r3, #0]
    29c4:	b903      	cbnz	r3, 29c8 <_Z33ee_serial_command_parser_callbackPc+0x8>
    29c6:	4770      	bx	lr
void ee_serial_command_parser_callback(char *p_command) {
    29c8:	b510      	push	{r4, lr}
  tok = strtok(p_command, EE_CMD_DELIMITER);
    29ca:	4913      	ldr	r1, [pc, #76]	; (2a18 <_Z33ee_serial_command_parser_callbackPc+0x58>)
    29cc:	f010 fcf0 	bl	133b0 <strtok>
    29d0:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    29d2:	2250      	movs	r2, #80	; 0x50
    29d4:	4911      	ldr	r1, [pc, #68]	; (2a1c <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    29d6:	f016 f8f3 	bl	18bc0 <strncmp>
    29da:	b940      	cbnz	r0, 29ee <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    29dc:	4a10      	ldr	r2, [pc, #64]	; (2a20 <_Z33ee_serial_command_parser_callbackPc+0x60>)
    29de:	4911      	ldr	r1, [pc, #68]	; (2a24 <_Z33ee_serial_command_parser_callbackPc+0x64>)
    29e0:	4811      	ldr	r0, [pc, #68]	; (2a28 <_Z33ee_serial_command_parser_callbackPc+0x68>)
    29e2:	f011 f988 	bl	13cf6 <_Z9th_printfPKcz>
  th_printf(EE_MSG_READY);
    29e6:	4811      	ldr	r0, [pc, #68]	; (2a2c <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    29e8:	f011 f985 	bl	13cf6 <_Z9th_printfPKcz>
}
    29ec:	bd10      	pop	{r4, pc}
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    29ee:	2250      	movs	r2, #80	; 0x50
    29f0:	490f      	ldr	r1, [pc, #60]	; (2a30 <_Z33ee_serial_command_parser_callbackPc+0x70>)
    29f2:	4620      	mov	r0, r4
    29f4:	f016 f8e4 	bl	18bc0 <strncmp>
    29f8:	b910      	cbnz	r0, 2a00 <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    29fa:	f000 f8c5 	bl	2b88 <_Z12th_timestampv>
    29fe:	e7f2      	b.n	29e6 <_Z33ee_serial_command_parser_callbackPc+0x26>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    2a00:	4620      	mov	r0, r4
    2a02:	f7ff ff35 	bl	2870 <_Z16ee_profile_parsePc>
    2a06:	2800      	cmp	r0, #0
    2a08:	d0ed      	beq.n	29e6 <_Z33ee_serial_command_parser_callbackPc+0x26>
    th_printf(EE_ERR_CMD, tok);
    2a0a:	4621      	mov	r1, r4
    2a0c:	4809      	ldr	r0, [pc, #36]	; (2a34 <_Z33ee_serial_command_parser_callbackPc+0x74>)
    2a0e:	f011 f972 	bl	13cf6 <_Z9th_printfPKcz>
    2a12:	e7e8      	b.n	29e6 <_Z33ee_serial_command_parser_callbackPc+0x26>
    2a14:	2000f750 	.word	0x2000f750
    2a18:	00031ac0 	.word	0x00031ac0
    2a1c:	00031ec0 	.word	0x00031ec0
    2a20:	00031ec8 	.word	0x00031ec8
    2a24:	00031ed4 	.word	0x00031ed4
    2a28:	00031ed8 	.word	0x00031ed8
    2a2c:	00031a68 	.word	0x00031a68
    2a30:	00031eec 	.word	0x00031eec
    2a34:	00031ef8 	.word	0x00031ef8

00002a38 <_Z13ee_get_bufferPhj>:
 * typically the length of the provided buffer.
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    2a38:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    2a3a:	4b06      	ldr	r3, [pc, #24]	; (2a54 <_Z13ee_get_bufferPhj+0x1c>)
    2a3c:	681c      	ldr	r4, [r3, #0]
    2a3e:	428c      	cmp	r4, r1
    2a40:	d900      	bls.n	2a44 <_Z13ee_get_bufferPhj+0xc>
    2a42:	460c      	mov	r4, r1
  if (buffer != nullptr) {
    2a44:	b118      	cbz	r0, 2a4e <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    2a46:	4622      	mov	r2, r4
    2a48:	4903      	ldr	r1, [pc, #12]	; (2a58 <_Z13ee_get_bufferPhj+0x20>)
    2a4a:	f015 ff47 	bl	188dc <memcpy>
  }
  return len;
}
    2a4e:	4620      	mov	r0, r4
    2a50:	bd10      	pop	{r4, pc}
    2a52:	bf00      	nop
    2a54:	200004f8 	.word	0x200004f8
    2a58:	20000558 	.word	0x20000558

00002a5c <_Z8th_inferv>:
  }
  th_printf("]\r\n");
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() { runner->Invoke(); }
    2a5c:	b510      	push	{r4, lr}
    2a5e:	4b06      	ldr	r3, [pc, #24]	; (2a78 <_Z8th_inferv+0x1c>)
    2a60:	681c      	ldr	r4, [r3, #0]
    interpreter_.AllocateTensors();
  }

  void Invoke() {
    // Run the model on this input and make sure it succeeds.
    TfLiteStatus invoke_status = interpreter_.Invoke();
    2a62:	f104 000c 	add.w	r0, r4, #12
    2a66:	f004 ffe1 	bl	7a2c <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
    2a6a:	b900      	cbnz	r0, 2a6e <_Z8th_inferv+0x12>
    2a6c:	bd10      	pop	{r4, pc}
      TF_LITE_REPORT_ERROR(reporter_, "Invoke failed.");
    2a6e:	4903      	ldr	r1, [pc, #12]	; (2a7c <_Z8th_inferv+0x20>)
    2a70:	68a0      	ldr	r0, [r4, #8]
    2a72:	f013 f924 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2a76:	e7f9      	b.n	2a6c <_Z8th_inferv+0x10>
    2a78:	20001318 	.word	0x20001318
    2a7c:	00031f14 	.word	0x00031f14

00002a80 <_Z14th_load_tensorv>:
void th_load_tensor() {
    2a80:	b500      	push	{lr}
    2a82:	f5ad 5dc0 	sub.w	sp, sp, #6144	; 0x1800
    2a86:	b081      	sub	sp, #4
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input_quantized),
    2a88:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2a8c:	eb0d 0001 	add.w	r0, sp, r1
    2a90:	f7ff ffd2 	bl	2a38 <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(uint8_t) != kIcInputSize) {
    2a94:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
    2a98:	d101      	bne.n	2a9e <_Z14th_load_tensorv+0x1e>
  for(i=0; i<kIcInputSize;i++)
    2a9a:	2300      	movs	r3, #0
    2a9c:	e00f      	b.n	2abe <_Z14th_load_tensorv+0x3e>
    th_printf("Input db has %d elemented, expected %d\n", bytes / sizeof(uint8_t),
    2a9e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2aa2:	4601      	mov	r1, r0
    2aa4:	4815      	ldr	r0, [pc, #84]	; (2afc <_Z14th_load_tensorv+0x7c>)
    2aa6:	f011 f926 	bl	13cf6 <_Z9th_printfPKcz>
}
    2aaa:	f50d 5dc0 	add.w	sp, sp, #6144	; 0x1800
    2aae:	b001      	add	sp, #4
    2ab0:	f85d fb04 	ldr.w	pc, [sp], #4
	    input_asint[i] = (int8_t)(input_quantized[i] - 128);
    2ab4:	3a80      	subs	r2, #128	; 0x80
    2ab6:	f80d 2003 	strb.w	r2, [sp, r3]
  for(i=0; i<kIcInputSize;i++)
    2aba:	3301      	adds	r3, #1
    2abc:	b29b      	uxth	r3, r3
    2abe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    2ac2:	d208      	bcs.n	2ad6 <_Z14th_load_tensorv+0x56>
	  if(input_quantized[i]<=127)
    2ac4:	f50d 6240 	add.w	r2, sp, #3072	; 0xc00
    2ac8:	56d2      	ldrsb	r2, [r2, r3]
    2aca:	2a00      	cmp	r2, #0
    2acc:	dbf2      	blt.n	2ab4 <_Z14th_load_tensorv+0x34>
	    input_asint[i] = ((int8_t)input_quantized[i]) - 128;
    2ace:	3a80      	subs	r2, #128	; 0x80
    2ad0:	f80d 2003 	strb.w	r2, [sp, r3]
    2ad4:	e7f1      	b.n	2aba <_Z14th_load_tensorv+0x3a>
  runner->SetInput(input_asint);
    2ad6:	4b0a      	ldr	r3, [pc, #40]	; (2b00 <_Z14th_load_tensorv+0x80>)
    2ad8:	6818      	ldr	r0, [r3, #0]
    }
  }

  void SetInput(const inputT* custom_input) {
    // Populate input tensor with an image with no person.
    TfLiteTensor* input = interpreter_.input(0);
    2ada:	2100      	movs	r1, #0
    2adc:	300c      	adds	r0, #12
    2ade:	f004 fa23 	bl	6f28 <_ZN6tflite16MicroInterpreter5inputEj>

namespace tflite {

template <typename T>
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2ae2:	4603      	mov	r3, r0
    2ae4:	b100      	cbz	r0, 2ae8 <_Z14th_load_tensorv+0x68>
    2ae6:	6840      	ldr	r0, [r0, #4]
    inputT* input_buffer = tflite::GetTensorData<inputT>(input);
    int input_length = input->bytes / sizeof(inputT);
    2ae8:	6999      	ldr	r1, [r3, #24]
    for (int i = 0; i < input_length; i++) {
    2aea:	2300      	movs	r3, #0
    2aec:	4299      	cmp	r1, r3
    2aee:	dddc      	ble.n	2aaa <_Z14th_load_tensorv+0x2a>
      input_buffer[i] = custom_input[i];
    2af0:	f91d 2003 	ldrsb.w	r2, [sp, r3]
    2af4:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < input_length; i++) {
    2af6:	3301      	adds	r3, #1
    2af8:	e7f8      	b.n	2aec <_Z14th_load_tensorv+0x6c>
    2afa:	bf00      	nop
    2afc:	00031f24 	.word	0x00031f24
    2b00:	20001318 	.word	0x20001318

00002b04 <_Z10th_resultsv>:
void th_results() {
    2b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  th_printf("m-results-[");
    2b06:	481b      	ldr	r0, [pc, #108]	; (2b74 <_Z10th_resultsv+0x70>)
    2b08:	f011 f8f5 	bl	13cf6 <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2b0c:	2400      	movs	r4, #0
    2b0e:	e020      	b.n	2b52 <_Z10th_resultsv+0x4e>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2b10:	571f      	ldrsb	r7, [r3, r4]
    2b12:	4d19      	ldr	r5, [pc, #100]	; (2b78 <_Z10th_resultsv+0x74>)
    2b14:	6828      	ldr	r0, [r5, #0]

  int input_size() { return interpreter_.input(0)->bytes / sizeof(inputT); }

  int output_size() { return interpreter_.output(0)->bytes / sizeof(outputT); }

  float output_scale() { return interpreter_.output(0)->params.scale; }
    2b16:	2100      	movs	r1, #0
    2b18:	300c      	adds	r0, #12
    2b1a:	f004 f9a9 	bl	6e70 <_ZN6tflite16MicroInterpreter6outputEj>
    2b1e:	68c6      	ldr	r6, [r0, #12]
    2b20:	6828      	ldr	r0, [r5, #0]

  int output_zero_point() { return interpreter_.output(0)->params.zero_point; }
    2b22:	2100      	movs	r1, #0
    2b24:	300c      	adds	r0, #12
    2b26:	f004 f9a3 	bl	6e70 <_ZN6tflite16MicroInterpreter6outputEj>
    2b2a:	6900      	ldr	r0, [r0, #16]

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    2b2c:	1a38      	subs	r0, r7, r0
    2b2e:	f7fe f8bf 	bl	cb0 <__aeabi_i2f>
    2b32:	4631      	mov	r1, r6
    2b34:	f7fe f910 	bl	d58 <__aeabi_fmul>
    th_printf("%0.3f", converted);
    2b38:	f7fd fc96 	bl	468 <__aeabi_f2d>
    2b3c:	4602      	mov	r2, r0
    2b3e:	460b      	mov	r3, r1
    2b40:	480e      	ldr	r0, [pc, #56]	; (2b7c <_Z10th_resultsv+0x78>)
    2b42:	f011 f8d8 	bl	13cf6 <_Z9th_printfPKcz>
    if (i < (nresults - 1)) {
    2b46:	2c08      	cmp	r4, #8
    2b48:	d802      	bhi.n	2b50 <_Z10th_resultsv+0x4c>
      th_printf(",");
    2b4a:	480d      	ldr	r0, [pc, #52]	; (2b80 <_Z10th_resultsv+0x7c>)
    2b4c:	f011 f8d3 	bl	13cf6 <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2b50:	3401      	adds	r4, #1
    2b52:	2c09      	cmp	r4, #9
    2b54:	d80a      	bhi.n	2b6c <_Z10th_resultsv+0x68>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2b56:	4b08      	ldr	r3, [pc, #32]	; (2b78 <_Z10th_resultsv+0x74>)
    2b58:	6818      	ldr	r0, [r3, #0]
    return tflite::GetTensorData<outputT>(interpreter_.output(0));
    2b5a:	2100      	movs	r1, #0
    2b5c:	300c      	adds	r0, #12
    2b5e:	f004 f987 	bl	6e70 <_ZN6tflite16MicroInterpreter6outputEj>
    2b62:	4603      	mov	r3, r0
    2b64:	2800      	cmp	r0, #0
    2b66:	d0d3      	beq.n	2b10 <_Z10th_resultsv+0xc>
    2b68:	6843      	ldr	r3, [r0, #4]
    2b6a:	e7d1      	b.n	2b10 <_Z10th_resultsv+0xc>
  th_printf("]\r\n");
    2b6c:	4805      	ldr	r0, [pc, #20]	; (2b84 <_Z10th_resultsv+0x80>)
    2b6e:	f011 f8c2 	bl	13cf6 <_Z9th_printfPKcz>
}
    2b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b74:	00031f4c 	.word	0x00031f4c
    2b78:	20001318 	.word	0x20001318
    2b7c:	00031f58 	.word	0x00031f58
    2b80:	00031f60 	.word	0x00031f60
    2b84:	00031db8 	.word	0x00031db8

00002b88 <_Z12th_timestampv>:

void th_serialport_initialize(void) {

}

void th_timestamp(void) {
    2b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2b8a:	f015 fe64 	bl	18856 <z_impl_k_uptime_ticks>
/* Step 3. Release driver */
       g_timestampPin = 1;

/* USER CODE 1 END */
#else
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2b8e:	014e      	lsls	r6, r1, #5
    2b90:	0143      	lsls	r3, r0, #5
    2b92:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
    2b96:	1a1b      	subs	r3, r3, r0
    2b98:	eb62 0201 	sbc.w	r2, r2, r1
    2b9c:	0256      	lsls	r6, r2, #9
    2b9e:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
    2ba2:	025f      	lsls	r7, r3, #9
    2ba4:	4632      	mov	r2, r6
    2ba6:	183b      	adds	r3, r7, r0
    2ba8:	eb41 0202 	adc.w	r2, r1, r2
    2bac:	0197      	lsls	r7, r2, #6
    2bae:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
    2bb2:	019e      	lsls	r6, r3, #6
    2bb4:	1af3      	subs	r3, r6, r3
    2bb6:	eb67 0202 	sbc.w	r2, r7, r2
    2bba:	181c      	adds	r4, r3, r0
    2bbc:	eb42 0501 	adc.w	r5, r2, r1
    2bc0:	4623      	mov	r3, r4
    2bc2:	4629      	mov	r1, r5
    2bc4:	2c00      	cmp	r4, #0
    2bc6:	f175 0200 	sbcs.w	r2, r5, #0
    2bca:	db06      	blt.n	2bda <_Z12th_timestampv+0x52>
    2bcc:	0bdb      	lsrs	r3, r3, #15
       unsigned long microSeconds = (unsigned long) uptime_usec;
       /* USER CODE 2 BEGIN */
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
    2bce:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
    2bd2:	4806      	ldr	r0, [pc, #24]	; (2bec <_Z12th_timestampv+0x64>)
    2bd4:	f011 f88f 	bl	13cf6 <_Z9th_printfPKcz>
#endif
}
    2bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2bda:	f647 73ff 	movw	r3, #32767	; 0x7fff
    2bde:	18e3      	adds	r3, r4, r3
    2be0:	f04f 0100 	mov.w	r1, #0
    2be4:	eb45 0101 	adc.w	r1, r5, r1
    2be8:	e7f0      	b.n	2bcc <_Z12th_timestampv+0x44>
    2bea:	bf00      	nop
    2bec:	00031f64 	.word	0x00031f64

00002bf0 <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    2bf0:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    2bf2:	4803      	ldr	r0, [pc, #12]	; (2c00 <_Z23th_timestamp_initializev+0x10>)
    2bf4:	f011 f87f 	bl	13cf6 <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
    2bf8:	f7ff ffc6 	bl	2b88 <_Z12th_timestampv>
}
    2bfc:	bd08      	pop	{r3, pc}
    2bfe:	bf00      	nop
    2c00:	00031f74 	.word	0x00031f74

00002c04 <_Z19th_final_initializev>:
void th_final_initialize(void) {
    2c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c06:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroMutableOpResolver<7> resolver;
    2c08:	4bb0      	ldr	r3, [pc, #704]	; (2ecc <_Z19th_final_initializev+0x2c8>)
    2c0a:	681b      	ldr	r3, [r3, #0]
    2c0c:	f013 0f01 	tst.w	r3, #1
    2c10:	d012      	beq.n	2c38 <_Z19th_final_initializev+0x34>
    return AddBuiltin(BuiltinOperator_ABS, tflite::ops::micro::Register_ABS(),
                      ParseAbs);
  }

  TfLiteStatus AddAdd() {
    return AddBuiltin(BuiltinOperator_ADD, tflite::ops::micro::Register_ADD(),
    2c12:	a804      	add	r0, sp, #16
    2c14:	f007 fc78 	bl	a508 <_ZN6tflite3ops5micro12Register_ADDEv>
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
    2c18:	48ad      	ldr	r0, [pc, #692]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2c1a:	6803      	ldr	r3, [r0, #0]
    2c1c:	699b      	ldr	r3, [r3, #24]
    2c1e:	2100      	movs	r1, #0
    2c20:	4798      	blx	r3
    2c22:	b1d8      	cbz	r0, 2c5c <_Z19th_final_initializev+0x58>
      if (error_reporter_ != nullptr) {
    2c24:	4baa      	ldr	r3, [pc, #680]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2c26:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2c2a:	2800      	cmp	r0, #0
    2c2c:	d03a      	beq.n	2ca4 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c2e:	2200      	movs	r2, #0
    2c30:	49a8      	ldr	r1, [pc, #672]	; (2ed4 <_Z19th_final_initializev+0x2d0>)
    2c32:	f013 f844 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
    2c36:	e035      	b.n	2ca4 <_Z19th_final_initializev+0xa0>
      : error_reporter_(error_reporter) {}
    2c38:	48a5      	ldr	r0, [pc, #660]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2c3a:	4ba7      	ldr	r3, [pc, #668]	; (2ed8 <_Z19th_final_initializev+0x2d4>)
    2c3c:	6003      	str	r3, [r0, #0]
    2c3e:	2300      	movs	r3, #0
    2c40:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    2c44:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    2c48:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    2c4c:	4b9f      	ldr	r3, [pc, #636]	; (2ecc <_Z19th_final_initializev+0x2c8>)
    2c4e:	2201      	movs	r2, #1
    2c50:	601a      	str	r2, [r3, #0]
    2c52:	4aa2      	ldr	r2, [pc, #648]	; (2edc <_Z19th_final_initializev+0x2d8>)
    2c54:	49a2      	ldr	r1, [pc, #648]	; (2ee0 <_Z19th_final_initializev+0x2dc>)
    2c56:	f011 fcf1 	bl	1463c <__aeabi_atexit>
    2c5a:	e7da      	b.n	2c12 <_Z19th_final_initializev+0xe>
    }

    if (registrations_len_ >= tOpCount) {
    2c5c:	4b9c      	ldr	r3, [pc, #624]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2c5e:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2c62:	2e06      	cmp	r6, #6
    2c64:	d830      	bhi.n	2cc8 <_Z19th_final_initializev+0xc4>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    2c66:	4f9a      	ldr	r7, [pc, #616]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2c68:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2c6c:	f10c 0404 	add.w	r4, ip, #4
    2c70:	ad04      	add	r5, sp, #16
    2c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2c7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    2c7e:	2200      	movs	r2, #0
    2c80:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2c84:	3601      	adds	r6, #1
    2c86:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4

    builtin_codes_[num_buitin_ops_] = op;
    2c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2c8e:	18f9      	adds	r1, r7, r3
    2c90:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2c94:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2c98:	4992      	ldr	r1, [pc, #584]	; (2ee4 <_Z19th_final_initializev+0x2e0>)
    2c9a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2c9e:	3301      	adds	r3, #1
    2ca0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddFullyConnected();
    2ca4:	a804      	add	r0, sp, #16
    2ca6:	f00b fc0b 	bl	e4c0 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    if (FindOp(op) != nullptr) {
    2caa:	4889      	ldr	r0, [pc, #548]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2cac:	6803      	ldr	r3, [r0, #0]
    2cae:	699b      	ldr	r3, [r3, #24]
    2cb0:	2109      	movs	r1, #9
    2cb2:	4798      	blx	r3
    2cb4:	b190      	cbz	r0, 2cdc <_Z19th_final_initializev+0xd8>
      if (error_reporter_ != nullptr) {
    2cb6:	4b86      	ldr	r3, [pc, #536]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2cb8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2cbc:	b390      	cbz	r0, 2d24 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cbe:	2209      	movs	r2, #9
    2cc0:	4984      	ldr	r1, [pc, #528]	; (2ed4 <_Z19th_final_initializev+0x2d0>)
    2cc2:	f012 fffc 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2cc6:	e02d      	b.n	2d24 <_Z19th_final_initializev+0x120>
      if (error_reporter_) {
    2cc8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2ccc:	2800      	cmp	r0, #0
    2cce:	d0e9      	beq.n	2ca4 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cd0:	2307      	movs	r3, #7
    2cd2:	2200      	movs	r2, #0
    2cd4:	4984      	ldr	r1, [pc, #528]	; (2ee8 <_Z19th_final_initializev+0x2e4>)
    2cd6:	f012 fff2 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2cda:	e7e3      	b.n	2ca4 <_Z19th_final_initializev+0xa0>
    if (registrations_len_ >= tOpCount) {
    2cdc:	4b7c      	ldr	r3, [pc, #496]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2cde:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2ce2:	2e06      	cmp	r6, #6
    2ce4:	d830      	bhi.n	2d48 <_Z19th_final_initializev+0x144>
    registrations_[registrations_len_] = registration;
    2ce6:	4f7a      	ldr	r7, [pc, #488]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2ce8:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2cec:	f10c 0404 	add.w	r4, ip, #4
    2cf0:	ad04      	add	r5, sp, #16
    2cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2cf6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2cfe:	2209      	movs	r2, #9
    2d00:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2d04:	3601      	adds	r6, #1
    2d06:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2d0e:	18f9      	adds	r1, r7, r3
    2d10:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d14:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2d18:	4974      	ldr	r1, [pc, #464]	; (2eec <_Z19th_final_initializev+0x2e8>)
    2d1a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2d1e:	3301      	adds	r3, #1
    2d20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddConv2D();
    2d24:	a804      	add	r0, sp, #16
    2d26:	f009 fe37 	bl	c998 <_ZN6tflite16Register_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2d2a:	4869      	ldr	r0, [pc, #420]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2d2c:	6803      	ldr	r3, [r0, #0]
    2d2e:	699b      	ldr	r3, [r3, #24]
    2d30:	2103      	movs	r1, #3
    2d32:	4798      	blx	r3
    2d34:	b190      	cbz	r0, 2d5c <_Z19th_final_initializev+0x158>
      if (error_reporter_ != nullptr) {
    2d36:	4b66      	ldr	r3, [pc, #408]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2d38:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2d3c:	b390      	cbz	r0, 2da4 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d3e:	2203      	movs	r2, #3
    2d40:	4964      	ldr	r1, [pc, #400]	; (2ed4 <_Z19th_final_initializev+0x2d0>)
    2d42:	f012 ffbc 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d46:	e02d      	b.n	2da4 <_Z19th_final_initializev+0x1a0>
      if (error_reporter_) {
    2d48:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2d4c:	2800      	cmp	r0, #0
    2d4e:	d0e9      	beq.n	2d24 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d50:	2307      	movs	r3, #7
    2d52:	2209      	movs	r2, #9
    2d54:	4964      	ldr	r1, [pc, #400]	; (2ee8 <_Z19th_final_initializev+0x2e4>)
    2d56:	f012 ffb2 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d5a:	e7e3      	b.n	2d24 <_Z19th_final_initializev+0x120>
    if (registrations_len_ >= tOpCount) {
    2d5c:	4b5c      	ldr	r3, [pc, #368]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2d5e:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2d62:	2e06      	cmp	r6, #6
    2d64:	d830      	bhi.n	2dc8 <_Z19th_final_initializev+0x1c4>
    registrations_[registrations_len_] = registration;
    2d66:	4f5a      	ldr	r7, [pc, #360]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2d68:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2d6c:	f10c 0404 	add.w	r4, ip, #4
    2d70:	ad04      	add	r5, sp, #16
    2d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2d7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2d7e:	2203      	movs	r2, #3
    2d80:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2d84:	3601      	adds	r6, #1
    2d86:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2d8e:	18f9      	adds	r1, r7, r3
    2d90:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d94:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2d98:	4955      	ldr	r1, [pc, #340]	; (2ef0 <_Z19th_final_initializev+0x2ec>)
    2d9a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2d9e:	3301      	adds	r3, #1
    2da0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
    2da4:	a804      	add	r0, sp, #16
    2da6:	f00a fcc5 	bl	d734 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2daa:	4849      	ldr	r0, [pc, #292]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2dac:	6803      	ldr	r3, [r0, #0]
    2dae:	699b      	ldr	r3, [r3, #24]
    2db0:	2104      	movs	r1, #4
    2db2:	4798      	blx	r3
    2db4:	b190      	cbz	r0, 2ddc <_Z19th_final_initializev+0x1d8>
      if (error_reporter_ != nullptr) {
    2db6:	4b46      	ldr	r3, [pc, #280]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2db8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2dbc:	b390      	cbz	r0, 2e24 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2dbe:	2204      	movs	r2, #4
    2dc0:	4944      	ldr	r1, [pc, #272]	; (2ed4 <_Z19th_final_initializev+0x2d0>)
    2dc2:	f012 ff7c 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2dc6:	e02d      	b.n	2e24 <_Z19th_final_initializev+0x220>
      if (error_reporter_) {
    2dc8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2dcc:	2800      	cmp	r0, #0
    2dce:	d0e9      	beq.n	2da4 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2dd0:	2307      	movs	r3, #7
    2dd2:	2203      	movs	r2, #3
    2dd4:	4944      	ldr	r1, [pc, #272]	; (2ee8 <_Z19th_final_initializev+0x2e4>)
    2dd6:	f012 ff72 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2dda:	e7e3      	b.n	2da4 <_Z19th_final_initializev+0x1a0>
    if (registrations_len_ >= tOpCount) {
    2ddc:	4b3c      	ldr	r3, [pc, #240]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2dde:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2de2:	2e06      	cmp	r6, #6
    2de4:	d830      	bhi.n	2e48 <_Z19th_final_initializev+0x244>
    registrations_[registrations_len_] = registration;
    2de6:	4f3a      	ldr	r7, [pc, #232]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2de8:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2dec:	f10c 0404 	add.w	r4, ip, #4
    2df0:	ad04      	add	r5, sp, #16
    2df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2df6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2dfe:	2204      	movs	r2, #4
    2e00:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2e04:	3601      	adds	r6, #1
    2e06:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2e0e:	18f9      	adds	r1, r7, r3
    2e10:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2e14:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2e18:	4936      	ldr	r1, [pc, #216]	; (2ef4 <_Z19th_final_initializev+0x2f0>)
    2e1a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2e1e:	3301      	adds	r3, #1
    2e20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    2e24:	a804      	add	r0, sp, #16
    2e26:	f00c fd61 	bl	f8ec <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    if (FindOp(op) != nullptr) {
    2e2a:	4829      	ldr	r0, [pc, #164]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2e2c:	6803      	ldr	r3, [r0, #0]
    2e2e:	699b      	ldr	r3, [r3, #24]
    2e30:	2116      	movs	r1, #22
    2e32:	4798      	blx	r3
    2e34:	b190      	cbz	r0, 2e5c <_Z19th_final_initializev+0x258>
      if (error_reporter_ != nullptr) {
    2e36:	4b26      	ldr	r3, [pc, #152]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2e38:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2e3c:	b390      	cbz	r0, 2ea4 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e3e:	2216      	movs	r2, #22
    2e40:	4924      	ldr	r1, [pc, #144]	; (2ed4 <_Z19th_final_initializev+0x2d0>)
    2e42:	f012 ff3c 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e46:	e02d      	b.n	2ea4 <_Z19th_final_initializev+0x2a0>
      if (error_reporter_) {
    2e48:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2e4c:	2800      	cmp	r0, #0
    2e4e:	d0e9      	beq.n	2e24 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e50:	2307      	movs	r3, #7
    2e52:	2204      	movs	r2, #4
    2e54:	4924      	ldr	r1, [pc, #144]	; (2ee8 <_Z19th_final_initializev+0x2e4>)
    2e56:	f012 ff32 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e5a:	e7e3      	b.n	2e24 <_Z19th_final_initializev+0x220>
    if (registrations_len_ >= tOpCount) {
    2e5c:	4b1c      	ldr	r3, [pc, #112]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2e5e:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2e62:	2e06      	cmp	r6, #6
    2e64:	d84a      	bhi.n	2efc <_Z19th_final_initializev+0x2f8>
    registrations_[registrations_len_] = registration;
    2e66:	4f1a      	ldr	r7, [pc, #104]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2e68:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2e6c:	f10c 0404 	add.w	r4, ip, #4
    2e70:	ad04      	add	r5, sp, #16
    2e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2e7e:	2216      	movs	r2, #22
    2e80:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2e84:	3601      	adds	r6, #1
    2e86:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2e8e:	18f9      	adds	r1, r7, r3
    2e90:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2e94:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2e98:	4917      	ldr	r1, [pc, #92]	; (2ef8 <_Z19th_final_initializev+0x2f4>)
    2e9a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2e9e:	3301      	adds	r3, #1
    2ea0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddSoftmax();
    2ea4:	a804      	add	r0, sp, #16
    2ea6:	f00c fd31 	bl	f90c <_ZN6tflite16Register_SOFTMAXEv>
    if (FindOp(op) != nullptr) {
    2eaa:	4809      	ldr	r0, [pc, #36]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2eac:	6803      	ldr	r3, [r0, #0]
    2eae:	699b      	ldr	r3, [r3, #24]
    2eb0:	2119      	movs	r1, #25
    2eb2:	4798      	blx	r3
    2eb4:	b360      	cbz	r0, 2f10 <_Z19th_final_initializev+0x30c>
      if (error_reporter_ != nullptr) {
    2eb6:	4b06      	ldr	r3, [pc, #24]	; (2ed0 <_Z19th_final_initializev+0x2cc>)
    2eb8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2ebc:	2800      	cmp	r0, #0
    2ebe:	d04b      	beq.n	2f58 <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ec0:	2219      	movs	r2, #25
    2ec2:	4904      	ldr	r1, [pc, #16]	; (2ed4 <_Z19th_final_initializev+0x2d0>)
    2ec4:	f012 fefb 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2ec8:	e046      	b.n	2f58 <_Z19th_final_initializev+0x354>
    2eca:	bf00      	nop
    2ecc:	2000115c 	.word	0x2000115c
    2ed0:	20001204 	.word	0x20001204
    2ed4:	00031f94 	.word	0x00031f94
    2ed8:	00032030 	.word	0x00032030
    2edc:	2000eb80 	.word	0x2000eb80
    2ee0:	00013c59 	.word	0x00013c59
    2ee4:	00009a19 	.word	0x00009a19
    2ee8:	00031fe4 	.word	0x00031fe4
    2eec:	00009f41 	.word	0x00009f41
    2ef0:	00009d45 	.word	0x00009d45
    2ef4:	0000a0f1 	.word	0x0000a0f1
    2ef8:	000098f1 	.word	0x000098f1
      if (error_reporter_) {
    2efc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2f00:	2800      	cmp	r0, #0
    2f02:	d0cf      	beq.n	2ea4 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f04:	2307      	movs	r3, #7
    2f06:	2216      	movs	r2, #22
    2f08:	494f      	ldr	r1, [pc, #316]	; (3048 <_Z19th_final_initializev+0x444>)
    2f0a:	f012 fed8 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f0e:	e7c9      	b.n	2ea4 <_Z19th_final_initializev+0x2a0>
    if (registrations_len_ >= tOpCount) {
    2f10:	4b4e      	ldr	r3, [pc, #312]	; (304c <_Z19th_final_initializev+0x448>)
    2f12:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2f16:	2e06      	cmp	r6, #6
    2f18:	d830      	bhi.n	2f7c <_Z19th_final_initializev+0x378>
    registrations_[registrations_len_] = registration;
    2f1a:	4f4c      	ldr	r7, [pc, #304]	; (304c <_Z19th_final_initializev+0x448>)
    2f1c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2f20:	f10c 0404 	add.w	r4, ip, #4
    2f24:	ad04      	add	r5, sp, #16
    2f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2f32:	2219      	movs	r2, #25
    2f34:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2f38:	3601      	adds	r6, #1
    2f3a:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2f42:	18f9      	adds	r1, r7, r3
    2f44:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2f48:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2f4c:	4940      	ldr	r1, [pc, #256]	; (3050 <_Z19th_final_initializev+0x44c>)
    2f4e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2f52:	3301      	adds	r3, #1
    2f54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
    2f58:	a804      	add	r0, sp, #16
    2f5a:	f00c fb4b 	bl	f5f4 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    if (FindOp(op) != nullptr) {
    2f5e:	483b      	ldr	r0, [pc, #236]	; (304c <_Z19th_final_initializev+0x448>)
    2f60:	6803      	ldr	r3, [r0, #0]
    2f62:	699b      	ldr	r3, [r3, #24]
    2f64:	2101      	movs	r1, #1
    2f66:	4798      	blx	r3
    2f68:	b190      	cbz	r0, 2f90 <_Z19th_final_initializev+0x38c>
      if (error_reporter_ != nullptr) {
    2f6a:	4b38      	ldr	r3, [pc, #224]	; (304c <_Z19th_final_initializev+0x448>)
    2f6c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2f70:	b390      	cbz	r0, 2fd8 <_Z19th_final_initializev+0x3d4>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f72:	2201      	movs	r2, #1
    2f74:	4937      	ldr	r1, [pc, #220]	; (3054 <_Z19th_final_initializev+0x450>)
    2f76:	f012 fea2 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f7a:	e02d      	b.n	2fd8 <_Z19th_final_initializev+0x3d4>
      if (error_reporter_) {
    2f7c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2f80:	2800      	cmp	r0, #0
    2f82:	d0e9      	beq.n	2f58 <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f84:	2307      	movs	r3, #7
    2f86:	2219      	movs	r2, #25
    2f88:	492f      	ldr	r1, [pc, #188]	; (3048 <_Z19th_final_initializev+0x444>)
    2f8a:	f012 fe98 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f8e:	e7e3      	b.n	2f58 <_Z19th_final_initializev+0x354>
    if (registrations_len_ >= tOpCount) {
    2f90:	4b2e      	ldr	r3, [pc, #184]	; (304c <_Z19th_final_initializev+0x448>)
    2f92:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2f96:	2e06      	cmp	r6, #6
    2f98:	d828      	bhi.n	2fec <_Z19th_final_initializev+0x3e8>
    registrations_[registrations_len_] = registration;
    2f9a:	4f2c      	ldr	r7, [pc, #176]	; (304c <_Z19th_final_initializev+0x448>)
    2f9c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2fa0:	f10c 0404 	add.w	r4, ip, #4
    2fa4:	ad04      	add	r5, sp, #16
    2fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2faa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2fb2:	2201      	movs	r2, #1
    2fb4:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2fb8:	4416      	add	r6, r2
    2fba:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2fc2:	18f9      	adds	r1, r7, r3
    2fc4:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2fc8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2fcc:	4922      	ldr	r1, [pc, #136]	; (3058 <_Z19th_final_initializev+0x454>)
    2fce:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2fd2:	3301      	adds	r3, #1
    2fd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      pretrainedResnet_quant_tflite, resolver, tensor_arena, kTensorArenaSize);
    2fd8:	4b20      	ldr	r3, [pc, #128]	; (305c <_Z19th_final_initializev+0x458>)
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	f013 0f01 	tst.w	r3, #1
    2fe0:	d00e      	beq.n	3000 <_Z19th_final_initializev+0x3fc>
  runner = &model_runner;
    2fe2:	4b1f      	ldr	r3, [pc, #124]	; (3060 <_Z19th_final_initializev+0x45c>)
    2fe4:	4a1f      	ldr	r2, [pc, #124]	; (3064 <_Z19th_final_initializev+0x460>)
    2fe6:	601a      	str	r2, [r3, #0]
}
    2fe8:	b00d      	add	sp, #52	; 0x34
    2fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (error_reporter_) {
    2fec:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2ff0:	2800      	cmp	r0, #0
    2ff2:	d0f1      	beq.n	2fd8 <_Z19th_final_initializev+0x3d4>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ff4:	2307      	movs	r3, #7
    2ff6:	2201      	movs	r2, #1
    2ff8:	4913      	ldr	r1, [pc, #76]	; (3048 <_Z19th_final_initializev+0x444>)
    2ffa:	f012 fe60 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2ffe:	e7eb      	b.n	2fd8 <_Z19th_final_initializev+0x3d4>
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<tflite::Model>(buf);
    3000:	4819      	ldr	r0, [pc, #100]	; (3068 <_Z19th_final_initializev+0x464>)
    3002:	f010 fe9e 	bl	13d42 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
    3006:	4601      	mov	r1, r0
                     reporter_) {
    3008:	4c16      	ldr	r4, [pc, #88]	; (3064 <_Z19th_final_initializev+0x460>)
    300a:	6020      	str	r0, [r4, #0]
namespace tflite {

// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
    300c:	4623      	mov	r3, r4
    300e:	4a17      	ldr	r2, [pc, #92]	; (306c <_Z19th_final_initializev+0x468>)
    3010:	f843 2f04 	str.w	r2, [r3, #4]!
    3014:	60a3      	str	r3, [r4, #8]
    3016:	f104 050c 	add.w	r5, r4, #12
    301a:	2200      	movs	r2, #0
    301c:	9202      	str	r2, [sp, #8]
    301e:	9301      	str	r3, [sp, #4]
    3020:	f44f 4358 	mov.w	r3, #55296	; 0xd800
    3024:	9300      	str	r3, [sp, #0]
    3026:	4b12      	ldr	r3, [pc, #72]	; (3070 <_Z19th_final_initializev+0x46c>)
    3028:	4a08      	ldr	r2, [pc, #32]	; (304c <_Z19th_final_initializev+0x448>)
    302a:	4628      	mov	r0, r5
    302c:	f012 fa75 	bl	1551a <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    interpreter_.AllocateTensors();
    3030:	4628      	mov	r0, r5
    3032:	f004 f9e3 	bl	73fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
      pretrainedResnet_quant_tflite, resolver, tensor_arena, kTensorArenaSize);
    3036:	4b09      	ldr	r3, [pc, #36]	; (305c <_Z19th_final_initializev+0x458>)
    3038:	2201      	movs	r2, #1
    303a:	601a      	str	r2, [r3, #0]
    303c:	4a0d      	ldr	r2, [pc, #52]	; (3074 <_Z19th_final_initializev+0x470>)
    303e:	490e      	ldr	r1, [pc, #56]	; (3078 <_Z19th_final_initializev+0x474>)
    3040:	4620      	mov	r0, r4
    3042:	f011 fafb 	bl	1463c <__aeabi_atexit>
    3046:	e7cc      	b.n	2fe2 <_Z19th_final_initializev+0x3de>
    3048:	00031fe4 	.word	0x00031fe4
    304c:	20001204 	.word	0x20001204
    3050:	0000a325 	.word	0x0000a325
    3054:	00031f94 	.word	0x00031f94
    3058:	00009b4d 	.word	0x00009b4d
    305c:	20001158 	.word	0x20001158
    3060:	20001318 	.word	0x20001318
    3064:	20001160 	.word	0x20001160
    3068:	00019790 	.word	0x00019790
    306c:	000323ec 	.word	0x000323ec
    3070:	2000131c 	.word	0x2000131c
    3074:	2000eb80 	.word	0x2000eb80
    3078:	00013c5b 	.word	0x00013c5b

0000307c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    307c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    307e:	680b      	ldr	r3, [r1, #0]
    3080:	3301      	adds	r3, #1
    3082:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3084:	4b01      	ldr	r3, [pc, #4]	; (308c <char_out+0x10>)
    3086:	681b      	ldr	r3, [r3, #0]
    3088:	4798      	blx	r3
}
    308a:	bd08      	pop	{r3, pc}
    308c:	20000000 	.word	0x20000000

00003090 <__printk_hook_install>:
	_char_out = fn;
    3090:	4b01      	ldr	r3, [pc, #4]	; (3098 <__printk_hook_install+0x8>)
    3092:	6018      	str	r0, [r3, #0]
}
    3094:	4770      	bx	lr
    3096:	bf00      	nop
    3098:	20000000 	.word	0x20000000

0000309c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    309c:	b500      	push	{lr}
    309e:	b083      	sub	sp, #12
    30a0:	4602      	mov	r2, r0
    30a2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    30a4:	2100      	movs	r1, #0
    30a6:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    30a8:	a901      	add	r1, sp, #4
    30aa:	4803      	ldr	r0, [pc, #12]	; (30b8 <vprintk+0x1c>)
    30ac:	f000 f94e 	bl	334c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    30b0:	b003      	add	sp, #12
    30b2:	f85d fb04 	ldr.w	pc, [sp], #4
    30b6:	bf00      	nop
    30b8:	0000307d 	.word	0x0000307d

000030bc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    30bc:	b510      	push	{r4, lr}
    30be:	b084      	sub	sp, #16
    30c0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    30c2:	9001      	str	r0, [sp, #4]
    30c4:	9102      	str	r1, [sp, #8]
    30c6:	2100      	movs	r1, #0
    30c8:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    30ca:	a901      	add	r1, sp, #4
    30cc:	4805      	ldr	r0, [pc, #20]	; (30e4 <vsnprintk+0x28>)
    30ce:	f000 f93d 	bl	334c <cbvprintf>

	if (ctx.count < ctx.max) {
    30d2:	9b03      	ldr	r3, [sp, #12]
    30d4:	9a02      	ldr	r2, [sp, #8]
    30d6:	4293      	cmp	r3, r2
    30d8:	da01      	bge.n	30de <vsnprintk+0x22>
		str[ctx.count] = '\0';
    30da:	2200      	movs	r2, #0
    30dc:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    30de:	9803      	ldr	r0, [sp, #12]
    30e0:	b004      	add	sp, #16
    30e2:	bd10      	pop	{r4, pc}
    30e4:	00013d97 	.word	0x00013d97

000030e8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    30e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    30ec:	b083      	sub	sp, #12
    30ee:	4604      	mov	r4, r0
    30f0:	4608      	mov	r0, r1
    30f2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30f4:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    30f6:	f013 0f08 	tst.w	r3, #8
    30fa:	d105      	bne.n	3108 <process_event+0x20>
    30fc:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3100:	2300      	movs	r3, #0
    3102:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3104:	9301      	str	r3, [sp, #4]
}
    3106:	e069      	b.n	31dc <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    3108:	2901      	cmp	r1, #1
    310a:	d009      	beq.n	3120 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    310c:	f043 0320 	orr.w	r3, r3, #32
    3110:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3112:	f385 8811 	msr	BASEPRI, r5
    3116:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    311a:	b003      	add	sp, #12
    311c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3120:	f043 0310 	orr.w	r3, r3, #16
    3124:	83a3      	strh	r3, [r4, #28]
    3126:	e7f4      	b.n	3112 <process_event+0x2a>
			evt = process_recheck(mgr);
    3128:	4620      	mov	r0, r4
    312a:	f010 fe8f 	bl	13e4c <process_recheck>
    312e:	e057      	b.n	31e0 <process_event+0xf8>
			res = mgr->last_res;
    3130:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    3134:	464a      	mov	r2, r9
    3136:	4669      	mov	r1, sp
    3138:	4620      	mov	r0, r4
    313a:	f010 fea0 	bl	13e7e <process_complete>
		onoff_transition_fn transit = NULL;
    313e:	2700      	movs	r7, #0
    3140:	e05a      	b.n	31f8 <process_event+0x110>
			transit = mgr->transitions->start;
    3142:	6923      	ldr	r3, [r4, #16]
    3144:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    3146:	2106      	movs	r1, #6
    3148:	4620      	mov	r0, r4
    314a:	f010 fe58 	bl	13dfe <set_state>
		res = 0;
    314e:	f04f 0900 	mov.w	r9, #0
    3152:	e051      	b.n	31f8 <process_event+0x110>
			transit = mgr->transitions->stop;
    3154:	6923      	ldr	r3, [r4, #16]
    3156:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3158:	2104      	movs	r1, #4
    315a:	4620      	mov	r0, r4
    315c:	f010 fe4f 	bl	13dfe <set_state>
		res = 0;
    3160:	f04f 0900 	mov.w	r9, #0
    3164:	e048      	b.n	31f8 <process_event+0x110>
			transit = mgr->transitions->reset;
    3166:	6923      	ldr	r3, [r4, #16]
    3168:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    316a:	2105      	movs	r1, #5
    316c:	4620      	mov	r0, r4
    316e:	f010 fe46 	bl	13dfe <set_state>
		res = 0;
    3172:	f04f 0900 	mov.w	r9, #0
    3176:	e03f      	b.n	31f8 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    3178:	2200      	movs	r2, #0
    317a:	e046      	b.n	320a <process_event+0x122>
    317c:	2200      	movs	r2, #0
    317e:	e044      	b.n	320a <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3180:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3184:	83a3      	strh	r3, [r4, #28]
    3186:	f385 8811 	msr	BASEPRI, r5
    318a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    318e:	2900      	cmp	r1, #0
    3190:	d144      	bne.n	321c <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3192:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3194:	b12b      	cbz	r3, 31a2 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    3196:	464b      	mov	r3, r9
    3198:	4642      	mov	r2, r8
    319a:	4669      	mov	r1, sp
    319c:	4620      	mov	r0, r4
    319e:	f010 fee4 	bl	13f6a <notify_all>
			if (transit != NULL) {
    31a2:	b117      	cbz	r7, 31aa <process_event+0xc2>
				transit(mgr, transition_complete);
    31a4:	4925      	ldr	r1, [pc, #148]	; (323c <process_event+0x154>)
    31a6:	4620      	mov	r0, r4
    31a8:	47b8      	blx	r7
	__asm__ volatile(
    31aa:	f04f 0320 	mov.w	r3, #32
    31ae:	f3ef 8511 	mrs	r5, BASEPRI
    31b2:	f383 8812 	msr	BASEPRI_MAX, r3
    31b6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    31ba:	8ba3      	ldrh	r3, [r4, #28]
    31bc:	f023 0308 	bic.w	r3, r3, #8
    31c0:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    31c2:	8ba3      	ldrh	r3, [r4, #28]
    31c4:	f013 0f10 	tst.w	r3, #16
    31c8:	d02e      	beq.n	3228 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    31ca:	f023 0310 	bic.w	r3, r3, #16
    31ce:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    31d0:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    31d2:	8ba6      	ldrh	r6, [r4, #28]
    31d4:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    31d8:	2800      	cmp	r0, #0
    31da:	d09a      	beq.n	3112 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    31dc:	2802      	cmp	r0, #2
    31de:	d0a3      	beq.n	3128 <process_event+0x40>
		if (evt == EVT_NOP) {
    31e0:	2800      	cmp	r0, #0
    31e2:	d096      	beq.n	3112 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    31e4:	2801      	cmp	r0, #1
    31e6:	d0a3      	beq.n	3130 <process_event+0x48>
		} else if (evt == EVT_START) {
    31e8:	2803      	cmp	r0, #3
    31ea:	d0aa      	beq.n	3142 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    31ec:	2804      	cmp	r0, #4
    31ee:	d0b1      	beq.n	3154 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    31f0:	2805      	cmp	r0, #5
    31f2:	d0b8      	beq.n	3166 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    31f4:	2700      	movs	r7, #0
		res = 0;
    31f6:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    31f8:	8ba3      	ldrh	r3, [r4, #28]
    31fa:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    31fe:	45b0      	cmp	r8, r6
    3200:	d0ba      	beq.n	3178 <process_event+0x90>
    3202:	68a2      	ldr	r2, [r4, #8]
    3204:	2a00      	cmp	r2, #0
    3206:	d0b9      	beq.n	317c <process_event+0x94>
    3208:	2201      	movs	r2, #1
		if (do_monitors
    320a:	4611      	mov	r1, r2
    320c:	2a00      	cmp	r2, #0
    320e:	d1b7      	bne.n	3180 <process_event+0x98>
    3210:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    3212:	2a00      	cmp	r2, #0
    3214:	d1b4      	bne.n	3180 <process_event+0x98>
		    || (transit != NULL)) {
    3216:	2f00      	cmp	r7, #0
    3218:	d1b2      	bne.n	3180 <process_event+0x98>
    321a:	e7d2      	b.n	31c2 <process_event+0xda>
				notify_monitors(mgr, state, res);
    321c:	464a      	mov	r2, r9
    321e:	4641      	mov	r1, r8
    3220:	4620      	mov	r0, r4
    3222:	f010 fdf4 	bl	13e0e <notify_monitors>
    3226:	e7b4      	b.n	3192 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3228:	f013 0f20 	tst.w	r3, #32
    322c:	d004      	beq.n	3238 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    322e:	f023 0320 	bic.w	r3, r3, #32
    3232:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    3234:	2002      	movs	r0, #2
    3236:	e7cc      	b.n	31d2 <process_event+0xea>
		evt = EVT_NOP;
    3238:	2000      	movs	r0, #0
    323a:	e7ca      	b.n	31d2 <process_event+0xea>
    323c:	00013f99 	.word	0x00013f99

00003240 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3240:	b410      	push	{r4}
    3242:	4604      	mov	r4, r0
	const char *sp = *str;
    3244:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3246:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    3248:	7813      	ldrb	r3, [r2, #0]
    324a:	4907      	ldr	r1, [pc, #28]	; (3268 <extract_decimal+0x28>)
    324c:	5c59      	ldrb	r1, [r3, r1]
    324e:	f011 0f04 	tst.w	r1, #4
    3252:	d006      	beq.n	3262 <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    3254:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3258:	3201      	adds	r2, #1
    325a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    325e:	3830      	subs	r0, #48	; 0x30
    3260:	e7f2      	b.n	3248 <extract_decimal+0x8>
	}
	*str = sp;
    3262:	6022      	str	r2, [r4, #0]
	return val;
}
    3264:	bc10      	pop	{r4}
    3266:	4770      	bx	lr
    3268:	00034f75 	.word	0x00034f75

0000326c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3270:	b083      	sub	sp, #12
    3272:	4604      	mov	r4, r0
    3274:	460d      	mov	r5, r1
    3276:	9201      	str	r2, [sp, #4]
    3278:	469a      	mov	sl, r3
    327a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    327e:	78d3      	ldrb	r3, [r2, #3]
    3280:	4a31      	ldr	r2, [pc, #196]	; (3348 <encode_uint+0xdc>)
    3282:	f813 b002 	ldrb.w	fp, [r3, r2]
    3286:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    328a:	2b6f      	cmp	r3, #111	; 0x6f
    328c:	d00f      	beq.n	32ae <encode_uint+0x42>
    328e:	d906      	bls.n	329e <encode_uint+0x32>
    3290:	2b70      	cmp	r3, #112	; 0x70
    3292:	d00f      	beq.n	32b4 <encode_uint+0x48>
    3294:	2b78      	cmp	r3, #120	; 0x78
    3296:	d110      	bne.n	32ba <encode_uint+0x4e>
		return 16;
    3298:	f04f 0910 	mov.w	r9, #16
    329c:	e023      	b.n	32e6 <encode_uint+0x7a>
	switch (specifier) {
    329e:	2b58      	cmp	r3, #88	; 0x58
    32a0:	d002      	beq.n	32a8 <encode_uint+0x3c>
    32a2:	f04f 090a 	mov.w	r9, #10
    32a6:	e01e      	b.n	32e6 <encode_uint+0x7a>
		return 16;
    32a8:	f04f 0910 	mov.w	r9, #16
    32ac:	e01b      	b.n	32e6 <encode_uint+0x7a>
		return 8;
    32ae:	f04f 0908 	mov.w	r9, #8
    32b2:	e018      	b.n	32e6 <encode_uint+0x7a>
		return 16;
    32b4:	f04f 0910 	mov.w	r9, #16
    32b8:	e015      	b.n	32e6 <encode_uint+0x7a>
	switch (specifier) {
    32ba:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    32be:	e012      	b.n	32e6 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    32c0:	b2d2      	uxtb	r2, r2
    32c2:	3230      	adds	r2, #48	; 0x30
    32c4:	b2d2      	uxtb	r2, r2
    32c6:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    32ca:	4632      	mov	r2, r6
    32cc:	463b      	mov	r3, r7
    32ce:	4620      	mov	r0, r4
    32d0:	4629      	mov	r1, r5
    32d2:	f7fd ff2d 	bl	1130 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    32d6:	42bd      	cmp	r5, r7
    32d8:	bf08      	it	eq
    32da:	42b4      	cmpeq	r4, r6
    32dc:	d318      	bcc.n	3310 <encode_uint+0xa4>
    32de:	45d0      	cmp	r8, sl
    32e0:	d916      	bls.n	3310 <encode_uint+0xa4>
		value /= radix;
    32e2:	4604      	mov	r4, r0
    32e4:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    32e6:	464e      	mov	r6, r9
    32e8:	2700      	movs	r7, #0
    32ea:	464a      	mov	r2, r9
    32ec:	463b      	mov	r3, r7
    32ee:	4620      	mov	r0, r4
    32f0:	4629      	mov	r1, r5
    32f2:	f7fd ff1d 	bl	1130 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    32f6:	2a09      	cmp	r2, #9
    32f8:	d9e2      	bls.n	32c0 <encode_uint+0x54>
    32fa:	f1bb 0f01 	cmp.w	fp, #1
    32fe:	d003      	beq.n	3308 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3300:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3302:	3257      	adds	r2, #87	; 0x57
    3304:	b2d2      	uxtb	r2, r2
    3306:	e7de      	b.n	32c6 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3308:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    330a:	3237      	adds	r2, #55	; 0x37
    330c:	b2d2      	uxtb	r2, r2
    330e:	e7da      	b.n	32c6 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3310:	9b01      	ldr	r3, [sp, #4]
    3312:	781b      	ldrb	r3, [r3, #0]
    3314:	f013 0f20 	tst.w	r3, #32
    3318:	d005      	beq.n	3326 <encode_uint+0xba>
		if (radix == 8) {
    331a:	f1b9 0f08 	cmp.w	r9, #8
    331e:	d006      	beq.n	332e <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    3320:	f1b9 0f10 	cmp.w	r9, #16
    3324:	d009      	beq.n	333a <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    3326:	4640      	mov	r0, r8
    3328:	b003      	add	sp, #12
    332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    332e:	9a01      	ldr	r2, [sp, #4]
    3330:	7893      	ldrb	r3, [r2, #2]
    3332:	f043 0308 	orr.w	r3, r3, #8
    3336:	7093      	strb	r3, [r2, #2]
    3338:	e7f5      	b.n	3326 <encode_uint+0xba>
			conv->altform_0c = true;
    333a:	9a01      	ldr	r2, [sp, #4]
    333c:	7893      	ldrb	r3, [r2, #2]
    333e:	f043 0310 	orr.w	r3, r3, #16
    3342:	7093      	strb	r3, [r2, #2]
    3344:	e7ef      	b.n	3326 <encode_uint+0xba>
    3346:	bf00      	nop
    3348:	00034f75 	.word	0x00034f75

0000334c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3350:	b093      	sub	sp, #76	; 0x4c
    3352:	4606      	mov	r6, r0
    3354:	460d      	mov	r5, r1
    3356:	4692      	mov	sl, r2
    3358:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    335a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    335c:	f89a 0000 	ldrb.w	r0, [sl]
    3360:	2800      	cmp	r0, #0
    3362:	f000 84d6 	beq.w	3d12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27a>
		if (*fp != '%') {
    3366:	2825      	cmp	r0, #37	; 0x25
    3368:	d008      	beq.n	337c <cbvprintf+0x30>
			OUTC(*fp++);
    336a:	f10a 0a01 	add.w	sl, sl, #1
    336e:	4629      	mov	r1, r5
    3370:	47b0      	blx	r6
    3372:	2800      	cmp	r0, #0
    3374:	f2c0 84ce 	blt.w	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3378:	3401      	adds	r4, #1
			continue;
    337a:	e7ef      	b.n	335c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    337c:	2300      	movs	r3, #0
    337e:	9306      	str	r3, [sp, #24]
    3380:	9307      	str	r3, [sp, #28]
    3382:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    3384:	9308      	str	r3, [sp, #32]
    3386:	9309      	str	r3, [sp, #36]	; 0x24
    3388:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    338a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    338e:	f89a 3001 	ldrb.w	r3, [sl, #1]
    3392:	2b25      	cmp	r3, #37	; 0x25
    3394:	d001      	beq.n	339a <cbvprintf+0x4e>
	bool loop = true;
    3396:	2701      	movs	r7, #1
    3398:	e02c      	b.n	33f4 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    339a:	f10a 0802 	add.w	r8, sl, #2
    339e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    33a2:	e1a8      	b.n	36f6 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    33a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33a8:	f043 0304 	orr.w	r3, r3, #4
    33ac:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    33b0:	b1ff      	cbz	r7, 33f2 <cbvprintf+0xa6>
			++sp;
    33b2:	f108 0801 	add.w	r8, r8, #1
    33b6:	e01c      	b.n	33f2 <cbvprintf+0xa6>
			conv->flag_plus = true;
    33b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33bc:	f043 0308 	orr.w	r3, r3, #8
    33c0:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    33c4:	e7f4      	b.n	33b0 <cbvprintf+0x64>
			conv->flag_space = true;
    33c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33ca:	f043 0310 	orr.w	r3, r3, #16
    33ce:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    33d2:	e7ed      	b.n	33b0 <cbvprintf+0x64>
			conv->flag_hash = true;
    33d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33d8:	f043 0320 	orr.w	r3, r3, #32
    33dc:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    33e0:	e7e6      	b.n	33b0 <cbvprintf+0x64>
			conv->flag_zero = true;
    33e2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33ea:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    33ee:	e7df      	b.n	33b0 <cbvprintf+0x64>
		switch (*sp) {
    33f0:	2700      	movs	r7, #0
	} while (loop);
    33f2:	b34f      	cbz	r7, 3448 <cbvprintf+0xfc>
		switch (*sp) {
    33f4:	f898 3000 	ldrb.w	r3, [r8]
    33f8:	3b20      	subs	r3, #32
    33fa:	2b10      	cmp	r3, #16
    33fc:	d8f8      	bhi.n	33f0 <cbvprintf+0xa4>
    33fe:	a201      	add	r2, pc, #4	; (adr r2, 3404 <cbvprintf+0xb8>)
    3400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3404:	000033c7 	.word	0x000033c7
    3408:	000033f1 	.word	0x000033f1
    340c:	000033f1 	.word	0x000033f1
    3410:	000033d5 	.word	0x000033d5
    3414:	000033f1 	.word	0x000033f1
    3418:	000033f1 	.word	0x000033f1
    341c:	000033f1 	.word	0x000033f1
    3420:	000033f1 	.word	0x000033f1
    3424:	000033f1 	.word	0x000033f1
    3428:	000033f1 	.word	0x000033f1
    342c:	000033f1 	.word	0x000033f1
    3430:	000033b9 	.word	0x000033b9
    3434:	000033f1 	.word	0x000033f1
    3438:	000033a5 	.word	0x000033a5
    343c:	000033f1 	.word	0x000033f1
    3440:	000033f1 	.word	0x000033f1
    3444:	000033e3 	.word	0x000033e3
	if (conv->flag_zero && conv->flag_dash) {
    3448:	f89d 3020 	ldrb.w	r3, [sp, #32]
    344c:	f003 0344 	and.w	r3, r3, #68	; 0x44
    3450:	2b44      	cmp	r3, #68	; 0x44
    3452:	d06d      	beq.n	3530 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    3454:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    3458:	f89d 3020 	ldrb.w	r3, [sp, #32]
    345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3460:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    3464:	f898 3000 	ldrb.w	r3, [r8]
    3468:	2b2a      	cmp	r3, #42	; 0x2a
    346a:	d068      	beq.n	353e <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    346c:	a805      	add	r0, sp, #20
    346e:	f7ff fee7 	bl	3240 <extract_decimal>
	if (sp != wp) {
    3472:	9b05      	ldr	r3, [sp, #20]
    3474:	4598      	cmp	r8, r3
    3476:	d012      	beq.n	349e <cbvprintf+0x152>
		conv->width_present = true;
    3478:	f89d 3020 	ldrb.w	r3, [sp, #32]
    347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3480:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    3484:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    3486:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    348a:	2800      	cmp	r0, #0
    348c:	db60      	blt.n	3550 <cbvprintf+0x204>
    348e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    3490:	4313      	orrs	r3, r2
    3492:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3496:	f363 0241 	bfi	r2, r3, #1, #1
    349a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    349e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    34a0:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	2b2e      	cmp	r3, #46	; 0x2e
    34a6:	bf14      	ite	ne
    34a8:	2300      	movne	r3, #0
    34aa:	2301      	moveq	r3, #1
    34ac:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    34b0:	f363 0241 	bfi	r2, r3, #1, #1
    34b4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    34b8:	2b00      	cmp	r3, #0
    34ba:	d04b      	beq.n	3554 <cbvprintf+0x208>
	++sp;
    34bc:	9b05      	ldr	r3, [sp, #20]
    34be:	1c5a      	adds	r2, r3, #1
    34c0:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    34c2:	785b      	ldrb	r3, [r3, #1]
    34c4:	2b2a      	cmp	r3, #42	; 0x2a
    34c6:	d048      	beq.n	355a <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    34c8:	a805      	add	r0, sp, #20
    34ca:	f7ff feb9 	bl	3240 <extract_decimal>
	conv->prec_value = prec;
    34ce:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    34d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    34d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    34d8:	2800      	cmp	r0, #0
    34da:	db47      	blt.n	356c <cbvprintf+0x220>
    34dc:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    34de:	4313      	orrs	r3, r2
    34e0:	f89d 2020 	ldrb.w	r2, [sp, #32]
    34e4:	f363 0241 	bfi	r2, r3, #1, #1
    34e8:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    34ec:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    34f0:	f898 3000 	ldrb.w	r3, [r8]
    34f4:	3b4c      	subs	r3, #76	; 0x4c
    34f6:	2b2e      	cmp	r3, #46	; 0x2e
    34f8:	f200 80dc 	bhi.w	36b4 <cbvprintf+0x368>
    34fc:	e8df f003 	tbb	[pc, r3]
    3500:	dadadaca 	.word	0xdadadaca
    3504:	dadadada 	.word	0xdadadada
    3508:	dadadada 	.word	0xdadadada
    350c:	dadadada 	.word	0xdadadada
    3510:	dadadada 	.word	0xdadadada
    3514:	dadadada 	.word	0xdadadada
    3518:	dadadada 	.word	0xdadadada
    351c:	da6ada38 	.word	0xda6ada38
    3520:	dadada51 	.word	0xdadada51
    3524:	dadadada 	.word	0xdadadada
    3528:	dadadac0 	.word	0xdadadac0
    352c:	dada      	.short	0xdada
    352e:	b6          	.byte	0xb6
    352f:	00          	.byte	0x00
		conv->flag_zero = false;
    3530:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3534:	f36f 1386 	bfc	r3, #6, #1
    3538:	f88d 3020 	strb.w	r3, [sp, #32]
    353c:	e78a      	b.n	3454 <cbvprintf+0x108>
		conv->width_star = true;
    353e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3542:	f043 0301 	orr.w	r3, r3, #1
    3546:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    354a:	4643      	mov	r3, r8
    354c:	3301      	adds	r3, #1
    354e:	e7a7      	b.n	34a0 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    3550:	2201      	movs	r2, #1
    3552:	e79d      	b.n	3490 <cbvprintf+0x144>
		return sp;
    3554:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3558:	e7ca      	b.n	34f0 <cbvprintf+0x1a4>
		conv->prec_star = true;
    355a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    355e:	f043 0304 	orr.w	r3, r3, #4
    3562:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3566:	f102 0801 	add.w	r8, r2, #1
    356a:	e7c1      	b.n	34f0 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    356c:	2201      	movs	r2, #1
    356e:	e7b6      	b.n	34de <cbvprintf+0x192>
		if (*++sp == 'h') {
    3570:	f108 0201 	add.w	r2, r8, #1
    3574:	f898 3001 	ldrb.w	r3, [r8, #1]
    3578:	2b68      	cmp	r3, #104	; 0x68
    357a:	d008      	beq.n	358e <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    357c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3580:	2102      	movs	r1, #2
    3582:	f361 03c6 	bfi	r3, r1, #3, #4
    3586:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    358a:	4690      	mov	r8, r2
    358c:	e02b      	b.n	35e6 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    358e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3592:	2201      	movs	r2, #1
    3594:	f362 03c6 	bfi	r3, r2, #3, #4
    3598:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    359c:	f108 0802 	add.w	r8, r8, #2
    35a0:	e021      	b.n	35e6 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    35a2:	f108 0201 	add.w	r2, r8, #1
    35a6:	f898 3001 	ldrb.w	r3, [r8, #1]
    35aa:	2b6c      	cmp	r3, #108	; 0x6c
    35ac:	d008      	beq.n	35c0 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    35ae:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35b2:	2103      	movs	r1, #3
    35b4:	f361 03c6 	bfi	r3, r1, #3, #4
    35b8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    35bc:	4690      	mov	r8, r2
    35be:	e012      	b.n	35e6 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    35c0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35c4:	2204      	movs	r2, #4
    35c6:	f362 03c6 	bfi	r3, r2, #3, #4
    35ca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    35ce:	f108 0802 	add.w	r8, r8, #2
    35d2:	e008      	b.n	35e6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    35d4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35d8:	2205      	movs	r2, #5
    35da:	f362 03c6 	bfi	r3, r2, #3, #4
    35de:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    35e2:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    35e6:	f818 3b01 	ldrb.w	r3, [r8], #1
    35ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    35ee:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    35f2:	2a37      	cmp	r2, #55	; 0x37
    35f4:	f200 8150 	bhi.w	3898 <cbvprintf+0x54c>
    35f8:	e8df f012 	tbh	[pc, r2, lsl #1]
    35fc:	014e0126 	.word	0x014e0126
    3600:	014e014e 	.word	0x014e014e
    3604:	01260126 	.word	0x01260126
    3608:	014e0126 	.word	0x014e0126
    360c:	014e014e 	.word	0x014e014e
    3610:	014e014e 	.word	0x014e014e
    3614:	014e014e 	.word	0x014e014e
    3618:	014e014e 	.word	0x014e014e
    361c:	014e014e 	.word	0x014e014e
    3620:	014e014e 	.word	0x014e014e
    3624:	014e014e 	.word	0x014e014e
    3628:	0113014e 	.word	0x0113014e
    362c:	014e014e 	.word	0x014e014e
    3630:	014e014e 	.word	0x014e014e
    3634:	014e014e 	.word	0x014e014e
    3638:	014e014e 	.word	0x014e014e
    363c:	014e0126 	.word	0x014e0126
    3640:	00630113 	.word	0x00630113
    3644:	01260126 	.word	0x01260126
    3648:	014e0126 	.word	0x014e0126
    364c:	014e0063 	.word	0x014e0063
    3650:	014e014e 	.word	0x014e014e
    3654:	012f014e 	.word	0x012f014e
    3658:	013f0113 	.word	0x013f0113
    365c:	014e014e 	.word	0x014e014e
    3660:	014e013f 	.word	0x014e013f
    3664:	014e0113 	.word	0x014e0113
    3668:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    366c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3670:	2206      	movs	r2, #6
    3672:	f362 03c6 	bfi	r3, r2, #3, #4
    3676:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    367a:	f108 0801 	add.w	r8, r8, #1
		break;
    367e:	e7b2      	b.n	35e6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    3680:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3684:	2207      	movs	r2, #7
    3686:	f362 03c6 	bfi	r3, r2, #3, #4
    368a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    368e:	f108 0801 	add.w	r8, r8, #1
		break;
    3692:	e7a8      	b.n	35e6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    3694:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3698:	2208      	movs	r2, #8
    369a:	f362 03c6 	bfi	r3, r2, #3, #4
    369e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    36a2:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    36a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    36aa:	f043 0302 	orr.w	r3, r3, #2
    36ae:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    36b2:	e798      	b.n	35e6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    36b4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    36b8:	f36f 03c6 	bfc	r3, #3, #4
    36bc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    36c0:	e791      	b.n	35e6 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    36c2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    36c6:	2101      	movs	r1, #1
    36c8:	f361 0202 	bfi	r2, r1, #0, #3
    36cc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    36d0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    36d4:	f002 0278 	and.w	r2, r2, #120	; 0x78
    36d8:	2a40      	cmp	r2, #64	; 0x40
    36da:	f000 80aa 	beq.w	3832 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    36de:	2b63      	cmp	r3, #99	; 0x63
    36e0:	f000 80ae 	beq.w	3840 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    36e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    36e8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    36ec:	4317      	orrs	r7, r2
    36ee:	f367 0341 	bfi	r3, r7, #1, #1
    36f2:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    36f6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    36fa:	f013 0f01 	tst.w	r3, #1
    36fe:	f000 80da 	beq.w	38b6 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    3702:	9b03      	ldr	r3, [sp, #12]
    3704:	1d1a      	adds	r2, r3, #4
    3706:	9203      	str	r2, [sp, #12]
    3708:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    370a:	2f00      	cmp	r7, #0
    370c:	f2c0 80cb 	blt.w	38a6 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    3710:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3714:	f013 0f04 	tst.w	r3, #4
    3718:	f000 80df 	beq.w	38da <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    371c:	9b03      	ldr	r3, [sp, #12]
    371e:	1d1a      	adds	r2, r3, #4
    3720:	9203      	str	r2, [sp, #12]
    3722:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    3726:	f1bb 0f00 	cmp.w	fp, #0
    372a:	f2c0 80cd 	blt.w	38c8 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    372e:	2300      	movs	r3, #0
    3730:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    3732:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    3734:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3738:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    373c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    3740:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    3744:	2b01      	cmp	r3, #1
    3746:	f000 80d1 	beq.w	38ec <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    374a:	2b02      	cmp	r3, #2
    374c:	f000 8116 	beq.w	397c <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    3750:	2b04      	cmp	r3, #4
    3752:	f000 8167 	beq.w	3a24 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3756:	2b03      	cmp	r3, #3
    3758:	f000 817e 	beq.w	3a58 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    375c:	f89d 9020 	ldrb.w	r9, [sp, #32]
    3760:	f019 0303 	ands.w	r3, r9, #3
    3764:	9302      	str	r3, [sp, #8]
    3766:	f040 817d 	bne.w	3a64 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    376a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    376e:	3b25      	subs	r3, #37	; 0x25
    3770:	2b53      	cmp	r3, #83	; 0x53
    3772:	f200 8233 	bhi.w	3bdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x144>
    3776:	e8df f013 	tbh	[pc, r3, lsl #1]
    377a:	0181      	.short	0x0181
    377c:	02310231 	.word	0x02310231
    3780:	02310231 	.word	0x02310231
    3784:	02310231 	.word	0x02310231
    3788:	02310231 	.word	0x02310231
    378c:	02310231 	.word	0x02310231
    3790:	02310231 	.word	0x02310231
    3794:	02310231 	.word	0x02310231
    3798:	02310231 	.word	0x02310231
    379c:	02310231 	.word	0x02310231
    37a0:	02310231 	.word	0x02310231
    37a4:	02310231 	.word	0x02310231
    37a8:	02310231 	.word	0x02310231
    37ac:	02310231 	.word	0x02310231
    37b0:	02310231 	.word	0x02310231
    37b4:	02310231 	.word	0x02310231
    37b8:	02310231 	.word	0x02310231
    37bc:	02310231 	.word	0x02310231
    37c0:	02310231 	.word	0x02310231
    37c4:	02310231 	.word	0x02310231
    37c8:	02310231 	.word	0x02310231
    37cc:	02310231 	.word	0x02310231
    37d0:	02310231 	.word	0x02310231
    37d4:	02310231 	.word	0x02310231
    37d8:	02310231 	.word	0x02310231
    37dc:	02310231 	.word	0x02310231
    37e0:	023101c7 	.word	0x023101c7
    37e4:	02310231 	.word	0x02310231
    37e8:	02310231 	.word	0x02310231
    37ec:	02310231 	.word	0x02310231
    37f0:	02310231 	.word	0x02310231
    37f4:	01a10231 	.word	0x01a10231
    37f8:	023101ab 	.word	0x023101ab
    37fc:	02310231 	.word	0x02310231
    3800:	01ab0231 	.word	0x01ab0231
    3804:	02310231 	.word	0x02310231
    3808:	02310231 	.word	0x02310231
    380c:	01c70208 	.word	0x01c70208
    3810:	023101ea 	.word	0x023101ea
    3814:	018f0231 	.word	0x018f0231
    3818:	01c70231 	.word	0x01c70231
    381c:	02310231 	.word	0x02310231
    3820:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    3822:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3826:	2102      	movs	r1, #2
    3828:	f361 0202 	bfi	r2, r1, #0, #3
    382c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    3830:	e74e      	b.n	36d0 <cbvprintf+0x384>
			conv->invalid = true;
    3832:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3836:	f041 0101 	orr.w	r1, r1, #1
    383a:	f88d 1020 	strb.w	r1, [sp, #32]
    383e:	e74e      	b.n	36de <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3840:	1e17      	subs	r7, r2, #0
    3842:	bf18      	it	ne
    3844:	2701      	movne	r7, #1
    3846:	e74d      	b.n	36e4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    3848:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    384c:	2204      	movs	r2, #4
    384e:	f362 0302 	bfi	r3, r2, #0, #3
    3852:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    3856:	2701      	movs	r7, #1
			break;
    3858:	e744      	b.n	36e4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    385a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    385e:	2203      	movs	r2, #3
    3860:	f362 0302 	bfi	r3, r2, #0, #3
    3864:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    3868:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    386c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3870:	2b40      	cmp	r3, #64	; 0x40
    3872:	f47f af37 	bne.w	36e4 <cbvprintf+0x398>
			unsupported = true;
    3876:	2701      	movs	r7, #1
    3878:	e734      	b.n	36e4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    387a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    387e:	2203      	movs	r2, #3
    3880:	f362 0302 	bfi	r3, r2, #0, #3
    3884:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    3888:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    388c:	f013 0f78 	tst.w	r3, #120	; 0x78
    3890:	f43f af28 	beq.w	36e4 <cbvprintf+0x398>
			unsupported = true;
    3894:	2701      	movs	r7, #1
    3896:	e725      	b.n	36e4 <cbvprintf+0x398>
		conv->invalid = true;
    3898:	f89d 3020 	ldrb.w	r3, [sp, #32]
    389c:	f043 0301 	orr.w	r3, r3, #1
    38a0:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    38a4:	e71e      	b.n	36e4 <cbvprintf+0x398>
				conv->flag_dash = true;
    38a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    38aa:	f043 0304 	orr.w	r3, r3, #4
    38ae:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    38b2:	427f      	negs	r7, r7
    38b4:	e72c      	b.n	3710 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    38b6:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    38ba:	2b00      	cmp	r3, #0
    38bc:	db02      	blt.n	38c4 <cbvprintf+0x578>
		int width = -1;
    38be:	f04f 37ff 	mov.w	r7, #4294967295
    38c2:	e725      	b.n	3710 <cbvprintf+0x3c4>
			width = conv->width_value;
    38c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    38c6:	e723      	b.n	3710 <cbvprintf+0x3c4>
				conv->prec_present = false;
    38c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    38cc:	f36f 0341 	bfc	r3, #1, #1
    38d0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    38d4:	f04f 3bff 	mov.w	fp, #4294967295
    38d8:	e729      	b.n	372e <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    38da:	f013 0f02 	tst.w	r3, #2
    38de:	d002      	beq.n	38e6 <cbvprintf+0x59a>
			precision = conv->prec_value;
    38e0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    38e4:	e723      	b.n	372e <cbvprintf+0x3e2>
		int precision = -1;
    38e6:	f04f 3bff 	mov.w	fp, #4294967295
    38ea:	e720      	b.n	372e <cbvprintf+0x3e2>
			switch (length_mod) {
    38ec:	1ecb      	subs	r3, r1, #3
    38ee:	2b04      	cmp	r3, #4
    38f0:	d804      	bhi.n	38fc <cbvprintf+0x5b0>
    38f2:	e8df f003 	tbb	[pc, r3]
    38f6:	1d0b      	.short	0x1d0b
    38f8:	3529      	.short	0x3529
    38fa:	35          	.byte	0x35
    38fb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    38fc:	9b03      	ldr	r3, [sp, #12]
    38fe:	1d1a      	adds	r2, r3, #4
    3900:	9203      	str	r2, [sp, #12]
    3902:	681a      	ldr	r2, [r3, #0]
    3904:	17d3      	asrs	r3, r2, #31
    3906:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    390a:	e006      	b.n	391a <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    390c:	9b03      	ldr	r3, [sp, #12]
    390e:	1d1a      	adds	r2, r3, #4
    3910:	9203      	str	r2, [sp, #12]
    3912:	681a      	ldr	r2, [r3, #0]
    3914:	17d3      	asrs	r3, r2, #31
    3916:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    391a:	2901      	cmp	r1, #1
    391c:	d028      	beq.n	3970 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    391e:	2902      	cmp	r1, #2
    3920:	f47f af1c 	bne.w	375c <cbvprintf+0x410>
				value->sint = (short)value->sint;
    3924:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    3928:	17d3      	asrs	r3, r2, #31
    392a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    392e:	e715      	b.n	375c <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    3930:	9b03      	ldr	r3, [sp, #12]
    3932:	3307      	adds	r3, #7
    3934:	f023 0307 	bic.w	r3, r3, #7
    3938:	f103 0208 	add.w	r2, r3, #8
    393c:	9203      	str	r2, [sp, #12]
    393e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3942:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3946:	e7e8      	b.n	391a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    3948:	9b03      	ldr	r3, [sp, #12]
    394a:	3307      	adds	r3, #7
    394c:	f023 0307 	bic.w	r3, r3, #7
    3950:	f103 0208 	add.w	r2, r3, #8
    3954:	9203      	str	r2, [sp, #12]
    3956:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    395a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    395e:	e7dc      	b.n	391a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3960:	9b03      	ldr	r3, [sp, #12]
    3962:	1d1a      	adds	r2, r3, #4
    3964:	9203      	str	r2, [sp, #12]
    3966:	681a      	ldr	r2, [r3, #0]
    3968:	17d3      	asrs	r3, r2, #31
				value->sint =
    396a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    396e:	e7d4      	b.n	391a <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    3970:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3974:	9306      	str	r3, [sp, #24]
    3976:	2300      	movs	r3, #0
    3978:	9307      	str	r3, [sp, #28]
    397a:	e6ef      	b.n	375c <cbvprintf+0x410>
			switch (length_mod) {
    397c:	1ecb      	subs	r3, r1, #3
    397e:	2b04      	cmp	r3, #4
    3980:	d804      	bhi.n	398c <cbvprintf+0x640>
    3982:	e8df f003 	tbb	[pc, r3]
    3986:	1f0b      	.short	0x1f0b
    3988:	4135      	.short	0x4135
    398a:	41          	.byte	0x41
    398b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    398c:	9b03      	ldr	r3, [sp, #12]
    398e:	1d1a      	adds	r2, r3, #4
    3990:	9203      	str	r2, [sp, #12]
    3992:	681b      	ldr	r3, [r3, #0]
    3994:	9306      	str	r3, [sp, #24]
    3996:	2300      	movs	r3, #0
    3998:	9307      	str	r3, [sp, #28]
				break;
    399a:	e01e      	b.n	39da <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    399c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    39a0:	2b63      	cmp	r3, #99	; 0x63
    39a2:	d007      	beq.n	39b4 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    39a4:	9b03      	ldr	r3, [sp, #12]
    39a6:	1d1a      	adds	r2, r3, #4
    39a8:	9203      	str	r2, [sp, #12]
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	9306      	str	r3, [sp, #24]
    39ae:	2300      	movs	r3, #0
    39b0:	9307      	str	r3, [sp, #28]
    39b2:	e012      	b.n	39da <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    39b4:	9b03      	ldr	r3, [sp, #12]
    39b6:	1d1a      	adds	r2, r3, #4
    39b8:	9203      	str	r2, [sp, #12]
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	9306      	str	r3, [sp, #24]
    39be:	2300      	movs	r3, #0
    39c0:	9307      	str	r3, [sp, #28]
    39c2:	e00a      	b.n	39da <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    39c4:	9b03      	ldr	r3, [sp, #12]
    39c6:	3307      	adds	r3, #7
    39c8:	f023 0307 	bic.w	r3, r3, #7
    39cc:	f103 0208 	add.w	r2, r3, #8
    39d0:	9203      	str	r2, [sp, #12]
    39d2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    39d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    39da:	2901      	cmp	r1, #1
    39dc:	d01c      	beq.n	3a18 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    39de:	2902      	cmp	r1, #2
    39e0:	f47f aebc 	bne.w	375c <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    39e4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    39e8:	9306      	str	r3, [sp, #24]
    39ea:	2300      	movs	r3, #0
    39ec:	9307      	str	r3, [sp, #28]
    39ee:	e6b5      	b.n	375c <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    39f0:	9b03      	ldr	r3, [sp, #12]
    39f2:	3307      	adds	r3, #7
    39f4:	f023 0307 	bic.w	r3, r3, #7
    39f8:	f103 0208 	add.w	r2, r3, #8
    39fc:	9203      	str	r2, [sp, #12]
    39fe:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3a02:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3a06:	e7e8      	b.n	39da <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    3a08:	9b03      	ldr	r3, [sp, #12]
    3a0a:	1d1a      	adds	r2, r3, #4
    3a0c:	9203      	str	r2, [sp, #12]
    3a0e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    3a10:	9306      	str	r3, [sp, #24]
    3a12:	2300      	movs	r3, #0
    3a14:	9307      	str	r3, [sp, #28]
				break;
    3a16:	e7e0      	b.n	39da <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    3a18:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3a1c:	9306      	str	r3, [sp, #24]
    3a1e:	2300      	movs	r3, #0
    3a20:	9307      	str	r3, [sp, #28]
    3a22:	e69b      	b.n	375c <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    3a24:	2908      	cmp	r1, #8
    3a26:	d00b      	beq.n	3a40 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    3a28:	9b03      	ldr	r3, [sp, #12]
    3a2a:	3307      	adds	r3, #7
    3a2c:	f023 0307 	bic.w	r3, r3, #7
    3a30:	f103 0208 	add.w	r2, r3, #8
    3a34:	9203      	str	r2, [sp, #12]
    3a36:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3a3e:	e68d      	b.n	375c <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    3a40:	9b03      	ldr	r3, [sp, #12]
    3a42:	3307      	adds	r3, #7
    3a44:	f023 0307 	bic.w	r3, r3, #7
    3a48:	f103 0208 	add.w	r2, r3, #8
    3a4c:	9203      	str	r2, [sp, #12]
    3a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a52:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3a56:	e681      	b.n	375c <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    3a58:	9b03      	ldr	r3, [sp, #12]
    3a5a:	1d1a      	adds	r2, r3, #4
    3a5c:	9203      	str	r2, [sp, #12]
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	9306      	str	r3, [sp, #24]
    3a62:	e67b      	b.n	375c <cbvprintf+0x410>
			OUTS(sp, fp);
    3a64:	4643      	mov	r3, r8
    3a66:	4652      	mov	r2, sl
    3a68:	4629      	mov	r1, r5
    3a6a:	4630      	mov	r0, r6
    3a6c:	f010 fc1a 	bl	142a4 <outs>
    3a70:	2800      	cmp	r0, #0
    3a72:	f2c0 814f 	blt.w	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3a76:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    3a78:	46c2      	mov	sl, r8
			continue;
    3a7a:	e46f      	b.n	335c <cbvprintf+0x10>
		case '%':
			OUTC('%');
    3a7c:	4629      	mov	r1, r5
    3a7e:	2025      	movs	r0, #37	; 0x25
    3a80:	47b0      	blx	r6
    3a82:	2800      	cmp	r0, #0
    3a84:	f2c0 8146 	blt.w	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3a88:	3401      	adds	r4, #1
		char sign = 0;
    3a8a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3a8e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3a92:	f04f 0a00 	mov.w	sl, #0
			break;
    3a96:	e0a7      	b.n	3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>
		case 's': {
			bps = (const char *)value->ptr;
    3a98:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    3a9c:	f1bb 0f00 	cmp.w	fp, #0
    3aa0:	db08      	blt.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
				len = strnlen(bps, precision);
    3aa2:	4659      	mov	r1, fp
    3aa4:	4650      	mov	r0, sl
    3aa6:	f015 f8b0 	bl	18c0a <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    3aaa:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    3aae:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    3ab2:	e099      	b.n	3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>
				len = strlen(bps);
    3ab4:	4650      	mov	r0, sl
    3ab6:	f7fd fd2d 	bl	1514 <strlen>
    3aba:	e7f6      	b.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3abc:	9b06      	ldr	r3, [sp, #24]
    3abe:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    3ac2:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    3ac6:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    3aca:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    3ace:	e08b      	b.n	3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    3ad0:	f019 0f08 	tst.w	r9, #8
    3ad4:	d105      	bne.n	3ae2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a>
				sign = '+';
			} else if (conv->flag_space) {
    3ad6:	f019 0910 	ands.w	r9, r9, #16
    3ada:	d004      	beq.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
				sign = ' ';
    3adc:	f04f 0920 	mov.w	r9, #32
    3ae0:	e001      	b.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
				sign = '+';
    3ae2:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3ae6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    3aea:	2a00      	cmp	r2, #0
    3aec:	f173 0100 	sbcs.w	r1, r3, #0
    3af0:	db02      	blt.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    3af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3af6:	e009      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
				value->uint = (uint_value_type)-sint;
    3af8:	4252      	negs	r2, r2
    3afa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3afe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    3b02:	f04f 092d 	mov.w	r9, #45	; 0x2d
    3b06:	e001      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
		switch (conv->specifier) {
    3b08:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3b0c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3b10:	9300      	str	r3, [sp, #0]
    3b12:	ab0c      	add	r3, sp, #48	; 0x30
    3b14:	aa08      	add	r2, sp, #32
    3b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3b1a:	f7ff fba7 	bl	326c <encode_uint>
    3b1e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    3b20:	f1bb 0f00 	cmp.w	fp, #0
    3b24:	f2c0 8090 	blt.w	3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>
				size_t len = bpe - bps;
    3b28:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3b2c:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    3b30:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3b34:	f36f 1286 	bfc	r2, #6, #1
    3b38:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3b3c:	459b      	cmp	fp, r3
    3b3e:	f240 8086 	bls.w	3c4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b6>
					conv->pad0_value = precision - (int)len;
    3b42:	ebab 0303 	sub.w	r3, fp, r3
    3b46:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    3b48:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b4c:	e04c      	b.n	3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3b4e:	9806      	ldr	r0, [sp, #24]
    3b50:	b930      	cbnz	r0, 3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>
		char sign = 0;
    3b52:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3b56:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 3d1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x284>
			bps = "(nil)";
    3b5a:	f1ab 0a05 	sub.w	sl, fp, #5
    3b5e:	e043      	b.n	3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3b60:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3b64:	9300      	str	r3, [sp, #0]
    3b66:	ab0c      	add	r3, sp, #48	; 0x30
    3b68:	aa08      	add	r2, sp, #32
    3b6a:	2100      	movs	r1, #0
    3b6c:	f7ff fb7e 	bl	326c <encode_uint>
    3b70:	4682      	mov	sl, r0
				conv->altform_0c = true;
    3b72:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3b76:	f043 0310 	orr.w	r3, r3, #16
    3b7a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    3b7e:	2378      	movs	r3, #120	; 0x78
    3b80:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    3b84:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    3b88:	e7ca      	b.n	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3b8a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    3b8c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3b90:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3b94:	2b07      	cmp	r3, #7
    3b96:	d806      	bhi.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
    3b98:	e8df f003 	tbb	[pc, r3]
    3b9c:	100e0c04 	.word	0x100e0c04
    3ba0:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    3ba4:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3ba6:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3baa:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3bae:	f04f 0a00 	mov.w	sl, #0
}
    3bb2:	e019      	b.n	3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>
		*(signed char *)dp = (signed char)count;
    3bb4:	7014      	strb	r4, [r2, #0]
		break;
    3bb6:	e7f6      	b.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
		*(short *)dp = (short)count;
    3bb8:	8014      	strh	r4, [r2, #0]
		break;
    3bba:	e7f4      	b.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
		*(long *)dp = (long)count;
    3bbc:	6014      	str	r4, [r2, #0]
		break;
    3bbe:	e7f2      	b.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
		*(long long *)dp = (long long)count;
    3bc0:	4620      	mov	r0, r4
    3bc2:	17e1      	asrs	r1, r4, #31
    3bc4:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3bc8:	e7ed      	b.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
		*(intmax_t *)dp = (intmax_t)count;
    3bca:	4620      	mov	r0, r4
    3bcc:	17e1      	asrs	r1, r4, #31
    3bce:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3bd2:	e7e8      	b.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
		*(size_t *)dp = (size_t)count;
    3bd4:	6014      	str	r4, [r2, #0]
		break;
    3bd6:	e7e6      	b.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3bd8:	6014      	str	r4, [r2, #0]
		break;
    3bda:	e7e4      	b.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
		switch (conv->specifier) {
    3bdc:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3be0:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3be4:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3be8:	f1ba 0f00 	cmp.w	sl, #0
    3bec:	f000 808e 	beq.w	3d0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x274>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3bf0:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    3bf4:	f1b9 0f00 	cmp.w	r9, #0
    3bf8:	d000      	beq.n	3bfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x164>
			nj_len += 1U;
    3bfa:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    3bfc:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    3c00:	f011 0f10 	tst.w	r1, #16
    3c04:	d026      	beq.n	3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>
			nj_len += 2U;
    3c06:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c0a:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3c0c:	f011 0f40 	tst.w	r1, #64	; 0x40
    3c10:	d001      	beq.n	3c16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17e>
			nj_len += conv->pad0_pre_exp;
    3c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3c14:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3c16:	2f00      	cmp	r7, #0
    3c18:	dd32      	ble.n	3c80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e8>
			width -= (int)nj_len;
    3c1a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3c1c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3c20:	f013 0f04 	tst.w	r3, #4
    3c24:	d12c      	bne.n	3c80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e8>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3c26:	f013 0f40 	tst.w	r3, #64	; 0x40
    3c2a:	d018      	beq.n	3c5e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c6>
					if (sign != 0) {
    3c2c:	f1b9 0f00 	cmp.w	r9, #0
    3c30:	d018      	beq.n	3c64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1cc>
						OUTC(sign);
    3c32:	4629      	mov	r1, r5
    3c34:	4648      	mov	r0, r9
    3c36:	47b0      	blx	r6
    3c38:	2800      	cmp	r0, #0
    3c3a:	db6b      	blt.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3c3c:	3401      	adds	r4, #1
						sign = 0;
    3c3e:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    3c42:	2330      	movs	r3, #48	; 0x30
    3c44:	9302      	str	r3, [sp, #8]
    3c46:	e00f      	b.n	3c68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d0>
		const char *bpe = buf + sizeof(buf);
    3c48:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3c4c:	e7cc      	b.n	3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>
    3c4e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3c52:	e7c9      	b.n	3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>
		} else if (conv->altform_0) {
    3c54:	f011 0f08 	tst.w	r1, #8
    3c58:	d0d6      	beq.n	3c08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x170>
			nj_len += 1U;
    3c5a:	3201      	adds	r2, #1
    3c5c:	e7d4      	b.n	3c08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x170>
				char pad = ' ';
    3c5e:	2320      	movs	r3, #32
    3c60:	9302      	str	r3, [sp, #8]
    3c62:	e001      	b.n	3c68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d0>
					pad = '0';
    3c64:	2330      	movs	r3, #48	; 0x30
    3c66:	9302      	str	r3, [sp, #8]
    3c68:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3c6a:	1e5f      	subs	r7, r3, #1
    3c6c:	2b00      	cmp	r3, #0
    3c6e:	dd07      	ble.n	3c80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e8>
					OUTC(pad);
    3c70:	4629      	mov	r1, r5
    3c72:	9802      	ldr	r0, [sp, #8]
    3c74:	47b0      	blx	r6
    3c76:	2800      	cmp	r0, #0
    3c78:	db4c      	blt.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3c7a:	3401      	adds	r4, #1
				while (width-- > 0) {
    3c7c:	463b      	mov	r3, r7
    3c7e:	e7f4      	b.n	3c6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d2>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3c80:	f1b9 0f00 	cmp.w	r9, #0
    3c84:	d005      	beq.n	3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
			OUTC(sign);
    3c86:	4629      	mov	r1, r5
    3c88:	4648      	mov	r0, r9
    3c8a:	47b0      	blx	r6
    3c8c:	2800      	cmp	r0, #0
    3c8e:	db41      	blt.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3c90:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3c92:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3c96:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3c9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3c9e:	4313      	orrs	r3, r2
    3ca0:	d005      	beq.n	3cae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x216>
				OUTC('0');
    3ca2:	4629      	mov	r1, r5
    3ca4:	2030      	movs	r0, #48	; 0x30
    3ca6:	47b0      	blx	r6
    3ca8:	2800      	cmp	r0, #0
    3caa:	db33      	blt.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3cac:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3cae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3cb2:	f013 0f10 	tst.w	r3, #16
    3cb6:	d006      	beq.n	3cc6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22e>
				OUTC(conv->specifier);
    3cb8:	4629      	mov	r1, r5
    3cba:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    3cbe:	47b0      	blx	r6
    3cc0:	2800      	cmp	r0, #0
    3cc2:	db27      	blt.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3cc4:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    3cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    3cc8:	f103 39ff 	add.w	r9, r3, #4294967295
    3ccc:	2b00      	cmp	r3, #0
    3cce:	dd07      	ble.n	3ce0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x248>
				OUTC('0');
    3cd0:	4629      	mov	r1, r5
    3cd2:	2030      	movs	r0, #48	; 0x30
    3cd4:	47b0      	blx	r6
    3cd6:	2800      	cmp	r0, #0
    3cd8:	db1c      	blt.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3cda:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3cdc:	464b      	mov	r3, r9
    3cde:	e7f3      	b.n	3cc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x230>
			}

			OUTS(bps, bpe);
    3ce0:	465b      	mov	r3, fp
    3ce2:	4652      	mov	r2, sl
    3ce4:	4629      	mov	r1, r5
    3ce6:	4630      	mov	r0, r6
    3ce8:	f010 fadc 	bl	142a4 <outs>
    3cec:	2800      	cmp	r0, #0
    3cee:	db11      	blt.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3cf0:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3cf2:	2f00      	cmp	r7, #0
    3cf4:	dd07      	ble.n	3d06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26e>
			OUTC(' ');
    3cf6:	4629      	mov	r1, r5
    3cf8:	2020      	movs	r0, #32
    3cfa:	47b0      	blx	r6
    3cfc:	2800      	cmp	r0, #0
    3cfe:	db09      	blt.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
    3d00:	3401      	adds	r4, #1
			--width;
    3d02:	3f01      	subs	r7, #1
    3d04:	e7f5      	b.n	3cf2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25a>
		fp = extract_conversion(conv, sp);
    3d06:	46c2      	mov	sl, r8
    3d08:	f7ff bb28 	b.w	335c <cbvprintf+0x10>
    3d0c:	46c2      	mov	sl, r8
    3d0e:	f7ff bb25 	b.w	335c <cbvprintf+0x10>
		}
	}

	return count;
    3d12:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    3d14:	b013      	add	sp, #76	; 0x4c
    3d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d1a:	bf00      	nop
    3d1c:	00032059 	.word	0x00032059

00003d20 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    3d20:	b508      	push	{r3, lr}
    3d22:	4604      	mov	r4, r0
    3d24:	f04f 0220 	mov.w	r2, #32
    3d28:	f3ef 8311 	mrs	r3, BASEPRI
    3d2c:	f382 8812 	msr	BASEPRI_MAX, r2
    3d30:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3d34:	f011 f8e7 	bl	14f06 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3d38:	4620      	mov	r0, r4
    3d3a:	f000 fe0d 	bl	4958 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3d3e:	4803      	ldr	r0, [pc, #12]	; (3d4c <sys_reboot+0x2c>)
    3d40:	f010 f841 	bl	13dc6 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3d44:	f000 fa02 	bl	414c <arch_cpu_idle>
    3d48:	e7fc      	b.n	3d44 <sys_reboot+0x24>
    3d4a:	bf00      	nop
    3d4c:	0003205c 	.word	0x0003205c

00003d50 <tty_init>:
	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
	if (!uart_dev) {
    3d50:	b1c1      	cbz	r1, 3d84 <tty_init+0x34>
{
    3d52:	b508      	push	{r3, lr}
    3d54:	4602      	mov	r2, r0
    3d56:	4608      	mov	r0, r1
		return -ENODEV;
	}

	tty->uart_dev = uart_dev;
    3d58:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    3d5a:	2300      	movs	r3, #0
    3d5c:	6153      	str	r3, [r2, #20]
	tty->rx_ringbuf_sz = 0U;
    3d5e:	6193      	str	r3, [r2, #24]
	tty->tx_ringbuf = NULL;
    3d60:	6353      	str	r3, [r2, #52]	; 0x34
	tty->tx_ringbuf_sz = 0U;
    3d62:	6393      	str	r3, [r2, #56]	; 0x38

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3d64:	87d3      	strh	r3, [r2, #62]	; 0x3e
    3d66:	8793      	strh	r3, [r2, #60]	; 0x3c
    3d68:	83d3      	strh	r3, [r2, #30]
    3d6a:	8393      	strh	r3, [r2, #28]

	tty->rx_timeout = SYS_FOREVER_MS;
    3d6c:	f04f 33ff 	mov.w	r3, #4294967295
    3d70:	6213      	str	r3, [r2, #32]
	tty->tx_timeout = SYS_FOREVER_MS;
    3d72:	6413      	str	r3, [r2, #64]	; 0x40
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3d74:	688b      	ldr	r3, [r1, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3d76:	b143      	cbz	r3, 3d8a <tty_init+0x3a>
    3d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d7a:	b143      	cbz	r3, 3d8e <tty_init+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    3d7c:	4905      	ldr	r1, [pc, #20]	; (3d94 <tty_init+0x44>)
    3d7e:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    3d80:	2000      	movs	r0, #0
}
    3d82:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3d84:	f06f 0012 	mvn.w	r0, #18
}
    3d88:	4770      	bx	lr
	return 0;
    3d8a:	2000      	movs	r0, #0
    3d8c:	e7f9      	b.n	3d82 <tty_init+0x32>
    3d8e:	2000      	movs	r0, #0
    3d90:	e7f7      	b.n	3d82 <tty_init+0x32>
    3d92:	bf00      	nop
    3d94:	000144b9 	.word	0x000144b9

00003d98 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    3d98:	b500      	push	{lr}
    3d9a:	b083      	sub	sp, #12
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    3d9c:	2201      	movs	r2, #1
    3d9e:	f10d 0107 	add.w	r1, sp, #7
    3da2:	4805      	ldr	r0, [pc, #20]	; (3db8 <console_getchar+0x20>)
    3da4:	f010 fbce 	bl	14544 <tty_read>
	if (res < 0) {
    3da8:	2800      	cmp	r0, #0
    3daa:	db01      	blt.n	3db0 <console_getchar+0x18>
		return res;
	}

	return c;
    3dac:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3db0:	b003      	add	sp, #12
    3db2:	f85d fb04 	ldr.w	pc, [sp], #4
    3db6:	bf00      	nop
    3db8:	2000eb2c 	.word	0x2000eb2c

00003dbc <console_init>:

int console_init(void)
{
    3dbc:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3dbe:	4810      	ldr	r0, [pc, #64]	; (3e00 <console_init+0x44>)
    3dc0:	f014 faf9 	bl	183b6 <z_device_ready>
    3dc4:	b1b0      	cbz	r0, 3df4 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    3dc6:	490e      	ldr	r1, [pc, #56]	; (3e00 <console_init+0x44>)
    3dc8:	480e      	ldr	r0, [pc, #56]	; (3e04 <console_init+0x48>)
    3dca:	f7ff ffc1 	bl	3d50 <tty_init>

	if (ret) {
    3dce:	4604      	mov	r4, r0
    3dd0:	b970      	cbnz	r0, 3df0 <console_init+0x34>
		return ret;
	}

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
    3dd2:	4b0b      	ldr	r3, [pc, #44]	; (3e00 <console_init+0x44>)
    3dd4:	689b      	ldr	r3, [r3, #8]
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    3dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3dd8:	b17b      	cbz	r3, 3dfa <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    3dda:	4d0a      	ldr	r5, [pc, #40]	; (3e04 <console_init+0x48>)
    3ddc:	2210      	movs	r2, #16
    3dde:	490a      	ldr	r1, [pc, #40]	; (3e08 <console_init+0x4c>)
    3de0:	4628      	mov	r0, r5
    3de2:	f010 fbf0 	bl	145c6 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    3de6:	2210      	movs	r2, #16
    3de8:	4908      	ldr	r1, [pc, #32]	; (3e0c <console_init+0x50>)
    3dea:	4628      	mov	r0, r5
    3dec:	f010 fbd0 	bl	14590 <tty_set_rx_buf>

	return 0;
}
    3df0:	4620      	mov	r0, r4
    3df2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3df4:	f06f 0412 	mvn.w	r4, #18
    3df8:	e7fa      	b.n	3df0 <console_init+0x34>
			return -ENOTSUP;
    3dfa:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3dfe:	e7f7      	b.n	3df0 <console_init+0x34>
    3e00:	00019540 	.word	0x00019540
    3e04:	2000eb2c 	.word	0x2000eb2c
    3e08:	2000eb70 	.word	0x2000eb70
    3e0c:	2000eb1c 	.word	0x2000eb1c

00003e10 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    3e10:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    3e12:	4c04      	ldr	r4, [pc, #16]	; (3e24 <__do_init_array_aux+0x14>)
    3e14:	4b04      	ldr	r3, [pc, #16]	; (3e28 <__do_init_array_aux+0x18>)
    3e16:	429c      	cmp	r4, r3
    3e18:	d203      	bcs.n	3e22 <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
    3e1a:	f854 3b04 	ldr.w	r3, [r4], #4
    3e1e:	4798      	blx	r3
		func++) {
    3e20:	e7f8      	b.n	3e14 <__do_init_array_aux+0x4>
	}
}
    3e22:	bd10      	pop	{r4, pc}
    3e24:	00019728 	.word	0x00019728
    3e28:	00019728 	.word	0x00019728

00003e2c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    3e2c:	4b06      	ldr	r3, [pc, #24]	; (3e48 <__do_global_ctors_aux+0x1c>)
    3e2e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    3e30:	b14b      	cbz	r3, 3e46 <__do_global_ctors_aux+0x1a>
{
    3e32:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    3e34:	1e5c      	subs	r4, r3, #1
    3e36:	4a04      	ldr	r2, [pc, #16]	; (3e48 <__do_global_ctors_aux+0x1c>)
    3e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e3c:	4798      	blx	r3
    3e3e:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    3e40:	2c00      	cmp	r4, #0
    3e42:	d1f7      	bne.n	3e34 <__do_global_ctors_aux+0x8>
	}
}
    3e44:	bd10      	pop	{r4, pc}
    3e46:	4770      	bx	lr
    3e48:	00019720 	.word	0x00019720

00003e4c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3e4c:	4b1b      	ldr	r3, [pc, #108]	; (3ebc <pm_system_resume+0x70>)
    3e4e:	681b      	ldr	r3, [r3, #0]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d132      	bne.n	3eba <pm_system_resume+0x6e>
{
    3e54:	b530      	push	{r4, r5, lr}
    3e56:	b085      	sub	sp, #20
		post_ops_done = 1;
    3e58:	4b18      	ldr	r3, [pc, #96]	; (3ebc <pm_system_resume+0x70>)
    3e5a:	2201      	movs	r2, #1
    3e5c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3e5e:	4b18      	ldr	r3, [pc, #96]	; (3ec0 <pm_system_resume+0x74>)
    3e60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3e64:	ab04      	add	r3, sp, #16
    3e66:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3e6a:	4b16      	ldr	r3, [pc, #88]	; (3ec4 <pm_system_resume+0x78>)
    3e6c:	b163      	cbz	r3, 3e88 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    3e6e:	f010 fcd1 	bl	14814 <pm_power_state_exit_post_ops>
    3e72:	f04f 0320 	mov.w	r3, #32
    3e76:	f3ef 8511 	mrs	r5, BASEPRI
    3e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e7e:	f3bf 8f6f 	isb	sy
    3e82:	4b11      	ldr	r3, [pc, #68]	; (3ec8 <pm_system_resume+0x7c>)
    3e84:	681c      	ldr	r4, [r3, #0]
    3e86:	e00a      	b.n	3e9e <pm_system_resume+0x52>
	__asm__ volatile(
    3e88:	2300      	movs	r3, #0
    3e8a:	f383 8811 	msr	BASEPRI, r3
    3e8e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3e92:	e7ee      	b.n	3e72 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e94:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3e96:	b10c      	cbz	r4, 3e9c <pm_system_resume+0x50>
	return node->next;
    3e98:	6823      	ldr	r3, [r4, #0]
    3e9a:	b143      	cbz	r3, 3eae <pm_system_resume+0x62>
{
    3e9c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e9e:	b134      	cbz	r4, 3eae <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3ea0:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d0f6      	beq.n	3e94 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3ea6:	4a06      	ldr	r2, [pc, #24]	; (3ec0 <pm_system_resume+0x74>)
    3ea8:	7810      	ldrb	r0, [r2, #0]
    3eaa:	4798      	blx	r3
    3eac:	e7f2      	b.n	3e94 <pm_system_resume+0x48>
	__asm__ volatile(
    3eae:	f385 8811 	msr	BASEPRI, r5
    3eb2:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3eb6:	b005      	add	sp, #20
    3eb8:	bd30      	pop	{r4, r5, pc}
    3eba:	4770      	bx	lr
    3ebc:	20000004 	.word	0x20000004
    3ec0:	2000eb8c 	.word	0x2000eb8c
    3ec4:	00014815 	.word	0x00014815
    3ec8:	2000eb84 	.word	0x2000eb84

00003ecc <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3ecc:	b570      	push	{r4, r5, r6, lr}
    3ece:	b088      	sub	sp, #32
    3ed0:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3ed2:	4c2a      	ldr	r4, [pc, #168]	; (3f7c <pm_system_suspend+0xb0>)
    3ed4:	466d      	mov	r5, sp
    3ed6:	4601      	mov	r1, r0
    3ed8:	4628      	mov	r0, r5
    3eda:	f010 fb90 	bl	145fe <pm_policy_next_state>
    3ede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3ee6:	7820      	ldrb	r0, [r4, #0]
    3ee8:	2800      	cmp	r0, #0
    3eea:	d045      	beq.n	3f78 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3eec:	4b24      	ldr	r3, [pc, #144]	; (3f80 <pm_system_suspend+0xb4>)
    3eee:	2200      	movs	r2, #0
    3ef0:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3ef2:	f1b6 3fff 	cmp.w	r6, #4294967295
    3ef6:	d10c      	bne.n	3f12 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3ef8:	f00d fba8 	bl	1164c <k_sched_lock>
	__asm__ volatile(
    3efc:	f04f 0320 	mov.w	r3, #32
    3f00:	f3ef 8511 	mrs	r5, BASEPRI
    3f04:	f383 8812 	msr	BASEPRI_MAX, r3
    3f08:	f3bf 8f6f 	isb	sy
	return list->head;
    3f0c:	4b1d      	ldr	r3, [pc, #116]	; (3f84 <pm_system_suspend+0xb8>)
    3f0e:	681c      	ldr	r4, [r3, #0]
    3f10:	e016      	b.n	3f40 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3f12:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3f14:	0c59      	lsrs	r1, r3, #17
    3f16:	03d8      	lsls	r0, r3, #15
    3f18:	4c1b      	ldr	r4, [pc, #108]	; (3f88 <pm_system_suspend+0xbc>)
    3f1a:	4a1c      	ldr	r2, [pc, #112]	; (3f8c <pm_system_suspend+0xc0>)
    3f1c:	2300      	movs	r3, #0
    3f1e:	1900      	adds	r0, r0, r4
    3f20:	f04f 0400 	mov.w	r4, #0
    3f24:	eb44 0101 	adc.w	r1, r4, r1
    3f28:	f7fd f902 	bl	1130 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3f2c:	2101      	movs	r1, #1
    3f2e:	1a30      	subs	r0, r6, r0
    3f30:	f014 fc62 	bl	187f8 <z_set_timeout_expiry>
    3f34:	e7e0      	b.n	3ef8 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f36:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3f38:	b10c      	cbz	r4, 3f3e <pm_system_suspend+0x72>
	return node->next;
    3f3a:	6823      	ldr	r3, [r4, #0]
    3f3c:	b143      	cbz	r3, 3f50 <pm_system_suspend+0x84>
{
    3f3e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f40:	b134      	cbz	r4, 3f50 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    3f42:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    3f44:	2b00      	cmp	r3, #0
    3f46:	d0f6      	beq.n	3f36 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    3f48:	4a0c      	ldr	r2, [pc, #48]	; (3f7c <pm_system_suspend+0xb0>)
    3f4a:	7810      	ldrb	r0, [r2, #0]
    3f4c:	4798      	blx	r3
    3f4e:	e7f2      	b.n	3f36 <pm_system_suspend+0x6a>
	__asm__ volatile(
    3f50:	f385 8811 	msr	BASEPRI, r5
    3f54:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    3f58:	4b08      	ldr	r3, [pc, #32]	; (3f7c <pm_system_suspend+0xb0>)
    3f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3f5e:	ab08      	add	r3, sp, #32
    3f60:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3f64:	4b0a      	ldr	r3, [pc, #40]	; (3f90 <pm_system_suspend+0xc4>)
    3f66:	b10b      	cbz	r3, 3f6c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3f68:	f010 fc41 	bl	147ee <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3f6c:	f7ff ff6e 	bl	3e4c <pm_system_resume>
	k_sched_unlock();
    3f70:	f00d fd6a 	bl	11a48 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3f74:	4b01      	ldr	r3, [pc, #4]	; (3f7c <pm_system_suspend+0xb0>)
    3f76:	7818      	ldrb	r0, [r3, #0]
}
    3f78:	b008      	add	sp, #32
    3f7a:	bd70      	pop	{r4, r5, r6, pc}
    3f7c:	2000eb8c 	.word	0x2000eb8c
    3f80:	20000004 	.word	0x20000004
    3f84:	2000eb84 	.word	0x2000eb84
    3f88:	000f423f 	.word	0x000f423f
    3f8c:	000f4240 	.word	0x000f4240
    3f90:	000147ef 	.word	0x000147ef

00003f94 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3f94:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3f96:	4802      	ldr	r0, [pc, #8]	; (3fa0 <nrf_cc3xx_platform_abort_init+0xc>)
    3f98:	f00e f8c2 	bl	12120 <nrf_cc3xx_platform_set_abort>
}
    3f9c:	bd08      	pop	{r3, pc}
    3f9e:	bf00      	nop
    3fa0:	00032088 	.word	0x00032088

00003fa4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3fa4:	b1d0      	cbz	r0, 3fdc <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3fa6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3fa8:	6842      	ldr	r2, [r0, #4]
    3faa:	2a04      	cmp	r2, #4
    3fac:	d005      	beq.n	3fba <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3fae:	b1d2      	cbz	r2, 3fe6 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3fb0:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3fb2:	f00d fa3b 	bl	1142c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3fb6:	2000      	movs	r0, #0
    }
}
    3fb8:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3fba:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3fbc:	2200      	movs	r2, #0
    3fbe:	f3bf 8f5b 	dmb	ish
    3fc2:	e853 1f00 	ldrex	r1, [r3]
    3fc6:	2901      	cmp	r1, #1
    3fc8:	d103      	bne.n	3fd2 <mutex_unlock_platform+0x2e>
    3fca:	e843 2000 	strex	r0, r2, [r3]
    3fce:	2800      	cmp	r0, #0
    3fd0:	d1f7      	bne.n	3fc2 <mutex_unlock_platform+0x1e>
    3fd2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3fd6:	d104      	bne.n	3fe2 <mutex_unlock_platform+0x3e>
    3fd8:	4610      	mov	r0, r2
    3fda:	e7ed      	b.n	3fb8 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3fdc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3fe0:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3fe2:	4802      	ldr	r0, [pc, #8]	; (3fec <mutex_unlock_platform+0x48>)
    3fe4:	e7e8      	b.n	3fb8 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3fe6:	4802      	ldr	r0, [pc, #8]	; (3ff0 <mutex_unlock_platform+0x4c>)
    3fe8:	e7e6      	b.n	3fb8 <mutex_unlock_platform+0x14>
    3fea:	bf00      	nop
    3fec:	ffff8fe9 	.word	0xffff8fe9
    3ff0:	ffff8fea 	.word	0xffff8fea

00003ff4 <mutex_lock_platform>:
    if(mutex == NULL) {
    3ff4:	b320      	cbz	r0, 4040 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3ff6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3ff8:	6842      	ldr	r2, [r0, #4]
    3ffa:	2a04      	cmp	r2, #4
    3ffc:	d002      	beq.n	4004 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3ffe:	b992      	cbnz	r2, 4026 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4000:	4811      	ldr	r0, [pc, #68]	; (4048 <mutex_lock_platform+0x54>)
    4002:	e00f      	b.n	4024 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    4004:	6803      	ldr	r3, [r0, #0]
    4006:	2201      	movs	r2, #1
    4008:	f3bf 8f5b 	dmb	ish
    400c:	e853 1f00 	ldrex	r1, [r3]
    4010:	2900      	cmp	r1, #0
    4012:	d103      	bne.n	401c <mutex_lock_platform+0x28>
    4014:	e843 2000 	strex	r0, r2, [r3]
    4018:	2800      	cmp	r0, #0
    401a:	d1f7      	bne.n	400c <mutex_lock_platform+0x18>
    401c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4020:	d10c      	bne.n	403c <mutex_lock_platform+0x48>
    4022:	2000      	movs	r0, #0
}
    4024:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    4026:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4028:	f04f 32ff 	mov.w	r2, #4294967295
    402c:	f04f 33ff 	mov.w	r3, #4294967295
    4030:	f00d f972 	bl	11318 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4034:	2800      	cmp	r0, #0
    4036:	d0f5      	beq.n	4024 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    4038:	4804      	ldr	r0, [pc, #16]	; (404c <mutex_lock_platform+0x58>)
    403a:	e7f3      	b.n	4024 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    403c:	4803      	ldr	r0, [pc, #12]	; (404c <mutex_lock_platform+0x58>)
    403e:	e7f1      	b.n	4024 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4040:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4044:	4770      	bx	lr
    4046:	bf00      	nop
    4048:	ffff8fea 	.word	0xffff8fea
    404c:	ffff8fe9 	.word	0xffff8fe9

00004050 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4050:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4052:	4604      	mov	r4, r0
    4054:	b190      	cbz	r0, 407c <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4056:	6863      	ldr	r3, [r4, #4]
    4058:	2b04      	cmp	r3, #4
    405a:	d00e      	beq.n	407a <mutex_free_platform+0x2a>
    405c:	2b08      	cmp	r3, #8
    405e:	d00c      	beq.n	407a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4060:	b15b      	cbz	r3, 407a <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    4062:	f013 0f02 	tst.w	r3, #2
    4066:	d10e      	bne.n	4086 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4068:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    406a:	2200      	movs	r2, #0
    406c:	601a      	str	r2, [r3, #0]
    406e:	605a      	str	r2, [r3, #4]
    4070:	609a      	str	r2, [r3, #8]
    4072:	60da      	str	r2, [r3, #12]
    4074:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    4076:	2300      	movs	r3, #0
    4078:	6063      	str	r3, [r4, #4]
}
    407a:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    407c:	4b05      	ldr	r3, [pc, #20]	; (4094 <mutex_free_platform+0x44>)
    407e:	685b      	ldr	r3, [r3, #4]
    4080:	4805      	ldr	r0, [pc, #20]	; (4098 <mutex_free_platform+0x48>)
    4082:	4798      	blx	r3
    4084:	e7e7      	b.n	4056 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    4086:	4621      	mov	r1, r4
    4088:	4804      	ldr	r0, [pc, #16]	; (409c <mutex_free_platform+0x4c>)
    408a:	f014 f9e1 	bl	18450 <k_mem_slab_free>
        mutex->mutex = NULL;
    408e:	2300      	movs	r3, #0
    4090:	6023      	str	r3, [r4, #0]
    4092:	e7f0      	b.n	4076 <mutex_free_platform+0x26>
    4094:	20000098 	.word	0x20000098
    4098:	00032090 	.word	0x00032090
    409c:	2000eb98 	.word	0x2000eb98

000040a0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    40a0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    40a2:	4604      	mov	r4, r0
    40a4:	b178      	cbz	r0, 40c6 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    40a6:	6863      	ldr	r3, [r4, #4]
    40a8:	2b04      	cmp	r3, #4
    40aa:	d00b      	beq.n	40c4 <mutex_init_platform+0x24>
    40ac:	2b08      	cmp	r3, #8
    40ae:	d009      	beq.n	40c4 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    40b0:	b90b      	cbnz	r3, 40b6 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    40b2:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    40b4:	b163      	cbz	r3, 40d0 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    40b6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    40b8:	f014 fa45 	bl	18546 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    40bc:	6863      	ldr	r3, [r4, #4]
    40be:	f043 0301 	orr.w	r3, r3, #1
    40c2:	6063      	str	r3, [r4, #4]
}
    40c4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    40c6:	4b10      	ldr	r3, [pc, #64]	; (4108 <mutex_init_platform+0x68>)
    40c8:	685b      	ldr	r3, [r3, #4]
    40ca:	4810      	ldr	r0, [pc, #64]	; (410c <mutex_init_platform+0x6c>)
    40cc:	4798      	blx	r3
    40ce:	e7ea      	b.n	40a6 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    40d0:	f04f 32ff 	mov.w	r2, #4294967295
    40d4:	f04f 33ff 	mov.w	r3, #4294967295
    40d8:	4621      	mov	r1, r4
    40da:	480d      	ldr	r0, [pc, #52]	; (4110 <mutex_init_platform+0x70>)
    40dc:	f00c fff4 	bl	110c8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    40e0:	b908      	cbnz	r0, 40e6 <mutex_init_platform+0x46>
    40e2:	6823      	ldr	r3, [r4, #0]
    40e4:	b91b      	cbnz	r3, 40ee <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    40e6:	4b08      	ldr	r3, [pc, #32]	; (4108 <mutex_init_platform+0x68>)
    40e8:	685b      	ldr	r3, [r3, #4]
    40ea:	480a      	ldr	r0, [pc, #40]	; (4114 <mutex_init_platform+0x74>)
    40ec:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    40ee:	6823      	ldr	r3, [r4, #0]
    40f0:	2200      	movs	r2, #0
    40f2:	601a      	str	r2, [r3, #0]
    40f4:	605a      	str	r2, [r3, #4]
    40f6:	609a      	str	r2, [r3, #8]
    40f8:	60da      	str	r2, [r3, #12]
    40fa:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    40fc:	6863      	ldr	r3, [r4, #4]
    40fe:	f043 0302 	orr.w	r3, r3, #2
    4102:	6063      	str	r3, [r4, #4]
    4104:	e7d7      	b.n	40b6 <mutex_init_platform+0x16>
    4106:	bf00      	nop
    4108:	20000098 	.word	0x20000098
    410c:	00032090 	.word	0x00032090
    4110:	2000eb98 	.word	0x2000eb98
    4114:	000320b8 	.word	0x000320b8

00004118 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4118:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    411a:	2340      	movs	r3, #64	; 0x40
    411c:	2214      	movs	r2, #20
    411e:	4904      	ldr	r1, [pc, #16]	; (4130 <nrf_cc3xx_platform_mutex_init+0x18>)
    4120:	4804      	ldr	r0, [pc, #16]	; (4134 <nrf_cc3xx_platform_mutex_init+0x1c>)
    4122:	f014 f986 	bl	18432 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    4126:	4904      	ldr	r1, [pc, #16]	; (4138 <nrf_cc3xx_platform_mutex_init+0x20>)
    4128:	4804      	ldr	r0, [pc, #16]	; (413c <nrf_cc3xx_platform_mutex_init+0x24>)
    412a:	f00e f85b 	bl	121e4 <nrf_cc3xx_platform_set_mutexes>
}
    412e:	bd08      	pop	{r3, pc}
    4130:	2000ebb8 	.word	0x2000ebb8
    4134:	2000eb98 	.word	0x2000eb98
    4138:	000320f8 	.word	0x000320f8
    413c:	000320e8 	.word	0x000320e8

00004140 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4140:	4901      	ldr	r1, [pc, #4]	; (4148 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4142:	2210      	movs	r2, #16
	str	r2, [r1]
    4144:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4146:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4148:	e000ed10 	.word	0xe000ed10

0000414c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    414c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    414e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4150:	f380 8811 	msr	BASEPRI, r0
	isb
    4154:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4158:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    415c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    415e:	b662      	cpsie	i
	isb
    4160:	f3bf 8f6f 	isb	sy

	bx	lr
    4164:	4770      	bx	lr
    4166:	bf00      	nop

00004168 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4168:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    416a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    416c:	f381 8811 	msr	BASEPRI, r1

	wfe
    4170:	bf20      	wfe

	msr	BASEPRI, r0
    4172:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4176:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4178:	4770      	bx	lr
    417a:	bf00      	nop

0000417c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    417c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    417e:	2b00      	cmp	r3, #0
    4180:	db08      	blt.n	4194 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4182:	f000 001f 	and.w	r0, r0, #31
    4186:	095b      	lsrs	r3, r3, #5
    4188:	2201      	movs	r2, #1
    418a:	fa02 f000 	lsl.w	r0, r2, r0
    418e:	4a02      	ldr	r2, [pc, #8]	; (4198 <arch_irq_enable+0x1c>)
    4190:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4194:	4770      	bx	lr
    4196:	bf00      	nop
    4198:	e000e100 	.word	0xe000e100

0000419c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    419c:	0942      	lsrs	r2, r0, #5
    419e:	4b05      	ldr	r3, [pc, #20]	; (41b4 <arch_irq_is_enabled+0x18>)
    41a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    41a4:	f000 001f 	and.w	r0, r0, #31
    41a8:	2301      	movs	r3, #1
    41aa:	fa03 f000 	lsl.w	r0, r3, r0
}
    41ae:	4010      	ands	r0, r2
    41b0:	4770      	bx	lr
    41b2:	bf00      	nop
    41b4:	e000e100 	.word	0xe000e100

000041b8 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    41b8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    41ba:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    41bc:	2b00      	cmp	r3, #0
    41be:	db08      	blt.n	41d2 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41c0:	0149      	lsls	r1, r1, #5
    41c2:	b2c9      	uxtb	r1, r1
    41c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    41c8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    41cc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    41d0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41d2:	f000 000f 	and.w	r0, r0, #15
    41d6:	0149      	lsls	r1, r1, #5
    41d8:	b2c9      	uxtb	r1, r1
    41da:	4b01      	ldr	r3, [pc, #4]	; (41e0 <z_arm_irq_priority_set+0x28>)
    41dc:	5419      	strb	r1, [r3, r0]
}
    41de:	4770      	bx	lr
    41e0:	e000ed14 	.word	0xe000ed14

000041e4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    41e4:	bf30      	wfi
    b z_SysNmiOnReset
    41e6:	f7ff bffd 	b.w	41e4 <z_SysNmiOnReset>
    41ea:	bf00      	nop

000041ec <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    41ec:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    41ee:	4b0b      	ldr	r3, [pc, #44]	; (421c <z_arm_prep_c+0x30>)
    41f0:	4a0b      	ldr	r2, [pc, #44]	; (4220 <z_arm_prep_c+0x34>)
    41f2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    41f6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    41f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41fc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4200:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4204:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    420c:	f00c fefc 	bl	11008 <z_bss_zero>
	z_data_copy();
    4210:	f00d fd8a 	bl	11d28 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4214:	f000 fa18 	bl	4648 <z_arm_interrupt_init>
	z_cstart();
    4218:	f00c ff02 	bl	11020 <z_cstart>
    421c:	e000ed00 	.word	0xe000ed00
    4220:	00000000 	.word	0x00000000

00004224 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4224:	4a0a      	ldr	r2, [pc, #40]	; (4250 <arch_swap+0x2c>)
    4226:	6893      	ldr	r3, [r2, #8]
    4228:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    422c:	4909      	ldr	r1, [pc, #36]	; (4254 <arch_swap+0x30>)
    422e:	6809      	ldr	r1, [r1, #0]
    4230:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4234:	4908      	ldr	r1, [pc, #32]	; (4258 <arch_swap+0x34>)
    4236:	684b      	ldr	r3, [r1, #4]
    4238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    423c:	604b      	str	r3, [r1, #4]
    423e:	2300      	movs	r3, #0
    4240:	f383 8811 	msr	BASEPRI, r3
    4244:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4248:	6893      	ldr	r3, [r2, #8]
}
    424a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    424e:	4770      	bx	lr
    4250:	2000f6e4 	.word	0x2000f6e4
    4254:	00034dd4 	.word	0x00034dd4
    4258:	e000ed00 	.word	0xe000ed00

0000425c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    425c:	4913      	ldr	r1, [pc, #76]	; (42ac <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    425e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4260:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4264:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4266:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    426a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    426e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4270:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4274:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4278:	4f0d      	ldr	r7, [pc, #52]	; (42b0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    427a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    427e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4280:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4282:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4284:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4288:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    428a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    428e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4292:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4294:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4296:	f000 fa79 	bl	478c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    429a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    429e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    42a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    42a6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    42aa:	4770      	bx	lr
    ldr r1, =_kernel
    42ac:	2000f6e4 	.word	0x2000f6e4
    ldr v4, =_SCS_ICSR
    42b0:	e000ed04 	.word	0xe000ed04

000042b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    42b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    42b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    42ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    42be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    42c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    42c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    42c8:	2902      	cmp	r1, #2
    beq _oops
    42ca:	d0ff      	beq.n	42cc <_oops>

000042cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    42cc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    42ce:	f010 f9a3 	bl	14618 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    42d2:	bd01      	pop	{r0, pc}

000042d4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    42d4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    42d6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    42da:	490d      	ldr	r1, [pc, #52]	; (4310 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    42dc:	f021 0101 	bic.w	r1, r1, #1
    42e0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    42e4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    42e8:	9b01      	ldr	r3, [sp, #4]
    42ea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    42ee:	9b02      	ldr	r3, [sp, #8]
    42f0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    42f4:	9b03      	ldr	r3, [sp, #12]
    42f6:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    42fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    42fe:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    4302:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4304:	2300      	movs	r3, #0
    4306:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    430a:	bc10      	pop	{r4}
    430c:	4770      	bx	lr
    430e:	bf00      	nop
    4310:	000140a5 	.word	0x000140a5

00004314 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4314:	4b16      	ldr	r3, [pc, #88]	; (4370 <z_check_thread_stack_fail+0x5c>)
    4316:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    4318:	b1da      	cbz	r2, 4352 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    431a:	f110 0f16 	cmn.w	r0, #22
    431e:	d01a      	beq.n	4356 <z_check_thread_stack_fail+0x42>
{
    4320:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4322:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4326:	f1a3 0420 	sub.w	r4, r3, #32
    432a:	4284      	cmp	r4, r0
    432c:	d805      	bhi.n	433a <z_check_thread_stack_fail+0x26>
    432e:	4283      	cmp	r3, r0
    4330:	d908      	bls.n	4344 <z_check_thread_stack_fail+0x30>
    4332:	428b      	cmp	r3, r1
    4334:	d808      	bhi.n	4348 <z_check_thread_stack_fail+0x34>
    4336:	2100      	movs	r1, #0
    4338:	e000      	b.n	433c <z_check_thread_stack_fail+0x28>
    433a:	2100      	movs	r1, #0
    433c:	b931      	cbnz	r1, 434c <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    433e:	2000      	movs	r0, #0
}
    4340:	bc10      	pop	{r4}
    4342:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4344:	2100      	movs	r1, #0
    4346:	e7f9      	b.n	433c <z_check_thread_stack_fail+0x28>
    4348:	2101      	movs	r1, #1
    434a:	e7f7      	b.n	433c <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    434c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4350:	e7f6      	b.n	4340 <z_check_thread_stack_fail+0x2c>
		return 0;
    4352:	2000      	movs	r0, #0
    4354:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4356:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    435a:	428b      	cmp	r3, r1
    435c:	bf94      	ite	ls
    435e:	2100      	movls	r1, #0
    4360:	2101      	movhi	r1, #1
    4362:	b909      	cbnz	r1, 4368 <z_check_thread_stack_fail+0x54>
	return 0;
    4364:	2000      	movs	r0, #0
}
    4366:	4770      	bx	lr
		return thread->stack_info.start;
    4368:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    436c:	4770      	bx	lr
    436e:	bf00      	nop
    4370:	2000f6e4 	.word	0x2000f6e4

00004374 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4374:	b508      	push	{r3, lr}
    4376:	460d      	mov	r5, r1
    4378:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    437a:	4b08      	ldr	r3, [pc, #32]	; (439c <arch_switch_to_main_thread+0x28>)
    437c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    437e:	f000 fa05 	bl	478c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4382:	4620      	mov	r0, r4
    4384:	f385 8809 	msr	PSP, r5
    4388:	2100      	movs	r1, #0
    438a:	b663      	cpsie	if
    438c:	f381 8811 	msr	BASEPRI, r1
    4390:	f3bf 8f6f 	isb	sy
    4394:	2200      	movs	r2, #0
    4396:	2300      	movs	r3, #0
    4398:	f00f fe84 	bl	140a4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    439c:	2000f6e4 	.word	0x2000f6e4

000043a0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    43a0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    43a2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    43a4:	4a0b      	ldr	r2, [pc, #44]	; (43d4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    43a6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    43a8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    43aa:	bf1e      	ittt	ne
	movne	r1, #0
    43ac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    43ae:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    43b0:	f014 f8a1 	blne	184f6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    43b4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    43b6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    43ba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    43be:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    43c2:	4905      	ldr	r1, [pc, #20]	; (43d8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    43c4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    43c6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    43c8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    43ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    43ce:	4903      	ldr	r1, [pc, #12]	; (43dc <_isr_wrapper+0x3c>)
	bx r1
    43d0:	4708      	bx	r1
    43d2:	0000      	.short	0x0000
	ldr r2, =_kernel
    43d4:	2000f6e4 	.word	0x2000f6e4
	ldr r1, =_sw_isr_table
    43d8:	000195a0 	.word	0x000195a0
	ldr r1, =z_arm_int_exit
    43dc:	000043e1 	.word	0x000043e1

000043e0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    43e0:	4b04      	ldr	r3, [pc, #16]	; (43f4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    43e2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    43e4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    43e6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    43e8:	d003      	beq.n	43f2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    43ea:	4903      	ldr	r1, [pc, #12]	; (43f8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    43ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    43f0:	600a      	str	r2, [r1, #0]

000043f2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    43f2:	4770      	bx	lr
	ldr r3, =_kernel
    43f4:	2000f6e4 	.word	0x2000f6e4
	ldr r1, =_SCS_ICSR
    43f8:	e000ed04 	.word	0xe000ed04

000043fc <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    43fc:	b510      	push	{r4, lr}
    43fe:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4400:	4b12      	ldr	r3, [pc, #72]	; (444c <bus_fault+0x50>)
    4402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4408:	f413 7f00 	tst.w	r3, #512	; 0x200
    440c:	d00b      	beq.n	4426 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    440e:	4b0f      	ldr	r3, [pc, #60]	; (444c <bus_fault+0x50>)
    4410:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4414:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4418:	d005      	beq.n	4426 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    441a:	b121      	cbz	r1, 4426 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    441c:	4a0b      	ldr	r2, [pc, #44]	; (444c <bus_fault+0x50>)
    441e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4420:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4424:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4426:	4b09      	ldr	r3, [pc, #36]	; (444c <bus_fault+0x50>)
    4428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    442c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4430:	d101      	bne.n	4436 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4432:	4b06      	ldr	r3, [pc, #24]	; (444c <bus_fault+0x50>)
    4434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4436:	4a05      	ldr	r2, [pc, #20]	; (444c <bus_fault+0x50>)
    4438:	6a93      	ldr	r3, [r2, #40]	; 0x28
    443a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    443e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4440:	2101      	movs	r1, #1
    4442:	f010 f902 	bl	1464a <memory_fault_recoverable>
    4446:	7020      	strb	r0, [r4, #0]

	return reason;
}
    4448:	2000      	movs	r0, #0
    444a:	bd10      	pop	{r4, pc}
    444c:	e000ed00 	.word	0xe000ed00

00004450 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4450:	4b07      	ldr	r3, [pc, #28]	; (4470 <usage_fault+0x20>)
    4452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    445a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    445c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    445e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4460:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4464:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4468:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    446a:	2000      	movs	r0, #0
    446c:	4770      	bx	lr
    446e:	bf00      	nop
    4470:	e000ed00 	.word	0xe000ed00

00004474 <mem_manage_fault>:
{
    4474:	b570      	push	{r4, r5, r6, lr}
    4476:	4605      	mov	r5, r0
    4478:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    447a:	4b20      	ldr	r3, [pc, #128]	; (44fc <mem_manage_fault+0x88>)
    447c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    447e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4482:	f013 0f02 	tst.w	r3, #2
    4486:	d00c      	beq.n	44a2 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    4488:	4b1c      	ldr	r3, [pc, #112]	; (44fc <mem_manage_fault+0x88>)
    448a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    448e:	f013 0f80 	tst.w	r3, #128	; 0x80
    4492:	d025      	beq.n	44e0 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    4494:	b139      	cbz	r1, 44a6 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4496:	4a19      	ldr	r2, [pc, #100]	; (44fc <mem_manage_fault+0x88>)
    4498:	6a93      	ldr	r3, [r2, #40]	; 0x28
    449a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    449e:	6293      	str	r3, [r2, #40]	; 0x28
    44a0:	e001      	b.n	44a6 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    44a2:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    44a6:	4b15      	ldr	r3, [pc, #84]	; (44fc <mem_manage_fault+0x88>)
    44a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    44aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    44ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44ae:	f013 0f10 	tst.w	r3, #16
    44b2:	d104      	bne.n	44be <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    44b4:	4b11      	ldr	r3, [pc, #68]	; (44fc <mem_manage_fault+0x88>)
    44b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    44b8:	f014 0402 	ands.w	r4, r4, #2
    44bc:	d004      	beq.n	44c8 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    44be:	4b0f      	ldr	r3, [pc, #60]	; (44fc <mem_manage_fault+0x88>)
    44c0:	685c      	ldr	r4, [r3, #4]
    44c2:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    44c6:	d10e      	bne.n	44e6 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    44c8:	4a0c      	ldr	r2, [pc, #48]	; (44fc <mem_manage_fault+0x88>)
    44ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44cc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    44d0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    44d2:	2101      	movs	r1, #1
    44d4:	4628      	mov	r0, r5
    44d6:	f010 f8b8 	bl	1464a <memory_fault_recoverable>
    44da:	7030      	strb	r0, [r6, #0]
}
    44dc:	4620      	mov	r0, r4
    44de:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    44e0:	f06f 0015 	mvn.w	r0, #21
    44e4:	e7df      	b.n	44a6 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    44e6:	4629      	mov	r1, r5
    44e8:	f7ff ff14 	bl	4314 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    44ec:	4604      	mov	r4, r0
    44ee:	2800      	cmp	r0, #0
    44f0:	d0ea      	beq.n	44c8 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    44f2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    44f6:	2402      	movs	r4, #2
    44f8:	e7e6      	b.n	44c8 <mem_manage_fault+0x54>
    44fa:	bf00      	nop
    44fc:	e000ed00 	.word	0xe000ed00

00004500 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4500:	b510      	push	{r4, lr}
    4502:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4504:	2300      	movs	r3, #0
    4506:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4508:	4b1b      	ldr	r3, [pc, #108]	; (4578 <hard_fault+0x78>)
    450a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    450c:	f010 0002 	ands.w	r0, r0, #2
    4510:	d12d      	bne.n	456e <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4514:	2b00      	cmp	r3, #0
    4516:	db2b      	blt.n	4570 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4518:	4b17      	ldr	r3, [pc, #92]	; (4578 <hard_fault+0x78>)
    451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    451c:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    4520:	d027      	beq.n	4572 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4522:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4524:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4528:	f64d 7302 	movw	r3, #57090	; 0xdf02
    452c:	429a      	cmp	r2, r3
    452e:	d010      	beq.n	4552 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    4530:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4534:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    4538:	781b      	ldrb	r3, [r3, #0]
    453a:	b963      	cbnz	r3, 4556 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    453c:	4b0f      	ldr	r3, [pc, #60]	; (457c <hard_fault+0x7c>)
    453e:	781b      	ldrb	r3, [r3, #0]
    4540:	b97b      	cbnz	r3, 4562 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    4542:	4b0f      	ldr	r3, [pc, #60]	; (4580 <hard_fault+0x80>)
    4544:	881b      	ldrh	r3, [r3, #0]
    4546:	b29b      	uxth	r3, r3
    4548:	b193      	cbz	r3, 4570 <hard_fault+0x70>
			reason = usage_fault(esf);
    454a:	4620      	mov	r0, r4
    454c:	f7ff ff80 	bl	4450 <usage_fault>
    4550:	e00e      	b.n	4570 <hard_fault+0x70>
			reason = esf->basic.r0;
    4552:	6820      	ldr	r0, [r4, #0]
    4554:	e00c      	b.n	4570 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    4556:	460a      	mov	r2, r1
    4558:	2101      	movs	r1, #1
    455a:	4620      	mov	r0, r4
    455c:	f7ff ff8a 	bl	4474 <mem_manage_fault>
    4560:	e006      	b.n	4570 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    4562:	460a      	mov	r2, r1
    4564:	2101      	movs	r1, #1
    4566:	4620      	mov	r0, r4
    4568:	f7ff ff48 	bl	43fc <bus_fault>
    456c:	e000      	b.n	4570 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    456e:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4570:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4572:	4618      	mov	r0, r3
	return reason;
    4574:	e7fc      	b.n	4570 <hard_fault+0x70>
    4576:	bf00      	nop
    4578:	e000ed00 	.word	0xe000ed00
    457c:	e000ed29 	.word	0xe000ed29
    4580:	e000ed2a 	.word	0xe000ed2a

00004584 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4584:	b5f0      	push	{r4, r5, r6, r7, lr}
    4586:	b08b      	sub	sp, #44	; 0x2c
    4588:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    458a:	4b25      	ldr	r3, [pc, #148]	; (4620 <z_arm_fault+0x9c>)
    458c:	6859      	ldr	r1, [r3, #4]
    458e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    4592:	2300      	movs	r3, #0
    4594:	f383 8811 	msr	BASEPRI, r3
    4598:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    459c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    45a0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    45a4:	d115      	bne.n	45d2 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    45a6:	f002 030c 	and.w	r3, r2, #12
    45aa:	2b08      	cmp	r3, #8
    45ac:	d014      	beq.n	45d8 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    45ae:	f012 0f08 	tst.w	r2, #8
    45b2:	d00b      	beq.n	45cc <z_arm_fault+0x48>
	*nested_exc = false;
    45b4:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    45b6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    45ba:	4620      	mov	r0, r4
    45bc:	f010 f84a 	bl	14654 <fault_handle>
    45c0:	4606      	mov	r6, r0
	if (recoverable) {
    45c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    45c6:	b153      	cbz	r3, 45de <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    45c8:	b00b      	add	sp, #44	; 0x2c
    45ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    45cc:	4604      	mov	r4, r0
			*nested_exc = true;
    45ce:	2701      	movs	r7, #1
    45d0:	e7f1      	b.n	45b6 <z_arm_fault+0x32>
	*nested_exc = false;
    45d2:	2700      	movs	r7, #0
		return NULL;
    45d4:	463c      	mov	r4, r7
    45d6:	e7ee      	b.n	45b6 <z_arm_fault+0x32>
	*nested_exc = false;
    45d8:	2700      	movs	r7, #0
		return NULL;
    45da:	463c      	mov	r4, r7
    45dc:	e7eb      	b.n	45b6 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    45de:	ad01      	add	r5, sp, #4
    45e0:	6820      	ldr	r0, [r4, #0]
    45e2:	6861      	ldr	r1, [r4, #4]
    45e4:	68a2      	ldr	r2, [r4, #8]
    45e6:	68e3      	ldr	r3, [r4, #12]
    45e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    45ea:	6920      	ldr	r0, [r4, #16]
    45ec:	6961      	ldr	r1, [r4, #20]
    45ee:	69a2      	ldr	r2, [r4, #24]
    45f0:	69e3      	ldr	r3, [r4, #28]
    45f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    45f4:	b14f      	cbz	r7, 460a <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    45f6:	9b08      	ldr	r3, [sp, #32]
    45f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    45fc:	b95a      	cbnz	r2, 4616 <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    45fe:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4602:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4606:	9308      	str	r3, [sp, #32]
    4608:	e005      	b.n	4616 <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    460a:	9b08      	ldr	r3, [sp, #32]
    460c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4610:	f023 0301 	bic.w	r3, r3, #1
    4614:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    4616:	a901      	add	r1, sp, #4
    4618:	4630      	mov	r0, r6
    461a:	f00f fff9 	bl	14610 <z_arm_fatal_error>
    461e:	e7d3      	b.n	45c8 <z_arm_fault+0x44>
    4620:	e000ed00 	.word	0xe000ed00

00004624 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4624:	4a02      	ldr	r2, [pc, #8]	; (4630 <z_arm_fault_init+0xc>)
    4626:	6953      	ldr	r3, [r2, #20]
    4628:	f043 0310 	orr.w	r3, r3, #16
    462c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    462e:	4770      	bx	lr
    4630:	e000ed00 	.word	0xe000ed00

00004634 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4634:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4638:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    463c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    463e:	4672      	mov	r2, lr
	bl z_arm_fault
    4640:	f7ff ffa0 	bl	4584 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4644:	bd01      	pop	{r0, pc}
    4646:	bf00      	nop

00004648 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4648:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    464a:	e006      	b.n	465a <z_arm_interrupt_init+0x12>
    464c:	f002 010f 	and.w	r1, r2, #15
    4650:	4b09      	ldr	r3, [pc, #36]	; (4678 <z_arm_interrupt_init+0x30>)
    4652:	440b      	add	r3, r1
    4654:	2120      	movs	r1, #32
    4656:	7619      	strb	r1, [r3, #24]
    4658:	3201      	adds	r2, #1
    465a:	2a2f      	cmp	r2, #47	; 0x2f
    465c:	dc0a      	bgt.n	4674 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    465e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4660:	2b00      	cmp	r3, #0
    4662:	dbf3      	blt.n	464c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4664:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4668:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    466c:	2120      	movs	r1, #32
    466e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4672:	e7f1      	b.n	4658 <z_arm_interrupt_init+0x10>
	}
}
    4674:	4770      	bx	lr
    4676:	bf00      	nop
    4678:	e000ecfc 	.word	0xe000ecfc

0000467c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    467c:	2000      	movs	r0, #0
    msr CONTROL, r0
    467e:	f380 8814 	msr	CONTROL, r0
    isb
    4682:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4686:	f014 ff05 	bl	19494 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    468a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    468c:	490d      	ldr	r1, [pc, #52]	; (46c4 <__start+0x48>)
    str r0, [r1]
    468e:	6008      	str	r0, [r1, #0]
    dsb
    4690:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4694:	480c      	ldr	r0, [pc, #48]	; (46c8 <__start+0x4c>)
    msr msp, r0
    4696:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    469a:	f000 f829 	bl	46f0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    469e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    46a0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    46a4:	4809      	ldr	r0, [pc, #36]	; (46cc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    46a6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    46aa:	1840      	adds	r0, r0, r1
    msr PSP, r0
    46ac:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    46b0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    46b4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    46b6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    46b8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    46bc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    46c0:	f7ff fd94 	bl	41ec <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    46c4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    46c8:	20017920 	.word	0x20017920
    ldr r0, =z_interrupt_stacks
    46cc:	20017aa0 	.word	0x20017aa0

000046d0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    46d0:	4b06      	ldr	r3, [pc, #24]	; (46ec <z_arm_clear_arm_mpu_config+0x1c>)
    46d2:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    46d4:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    46d8:	2300      	movs	r3, #0
    46da:	4283      	cmp	r3, r0
    46dc:	da05      	bge.n	46ea <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    46de:	4a03      	ldr	r2, [pc, #12]	; (46ec <z_arm_clear_arm_mpu_config+0x1c>)
    46e0:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    46e2:	2100      	movs	r1, #0
    46e4:	6111      	str	r1, [r2, #16]
    46e6:	3301      	adds	r3, #1
    46e8:	e7f7      	b.n	46da <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    46ea:	4770      	bx	lr
    46ec:	e000ed90 	.word	0xe000ed90

000046f0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    46f0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    46f2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    46f4:	2400      	movs	r4, #0
    46f6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    46fa:	f7ff ffe9 	bl	46d0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    46fe:	4623      	mov	r3, r4
    4700:	e008      	b.n	4714 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4702:	f103 0120 	add.w	r1, r3, #32
    4706:	4a0e      	ldr	r2, [pc, #56]	; (4740 <z_arm_init_arch_hw_at_boot+0x50>)
    4708:	f04f 30ff 	mov.w	r0, #4294967295
    470c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4710:	3301      	adds	r3, #1
    4712:	b2db      	uxtb	r3, r3
    4714:	2b07      	cmp	r3, #7
    4716:	d9f4      	bls.n	4702 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4718:	2300      	movs	r3, #0
    471a:	e008      	b.n	472e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    471c:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4720:	4a07      	ldr	r2, [pc, #28]	; (4740 <z_arm_init_arch_hw_at_boot+0x50>)
    4722:	f04f 30ff 	mov.w	r0, #4294967295
    4726:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    472a:	3301      	adds	r3, #1
    472c:	b2db      	uxtb	r3, r3
    472e:	2b07      	cmp	r3, #7
    4730:	d9f4      	bls.n	471c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4732:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4738:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    473c:	bd10      	pop	{r4, pc}
    473e:	bf00      	nop
    4740:	e000e100 	.word	0xe000e100

00004744 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4744:	b508      	push	{r3, lr}
	if (_current == thread) {
    4746:	4b08      	ldr	r3, [pc, #32]	; (4768 <z_impl_k_thread_abort+0x24>)
    4748:	689b      	ldr	r3, [r3, #8]
    474a:	4283      	cmp	r3, r0
    474c:	d002      	beq.n	4754 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    474e:	f00d fac3 	bl	11cd8 <z_thread_abort>
}
    4752:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4754:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4758:	2b00      	cmp	r3, #0
    475a:	d0f8      	beq.n	474e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    475c:	4a03      	ldr	r2, [pc, #12]	; (476c <z_impl_k_thread_abort+0x28>)
    475e:	6853      	ldr	r3, [r2, #4]
    4760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4764:	6053      	str	r3, [r2, #4]
    4766:	e7f2      	b.n	474e <z_impl_k_thread_abort+0xa>
    4768:	2000f6e4 	.word	0x2000f6e4
    476c:	e000ed00 	.word	0xe000ed00

00004770 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4770:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4772:	4b03      	ldr	r3, [pc, #12]	; (4780 <z_arm_configure_static_mpu_regions+0x10>)
    4774:	4a03      	ldr	r2, [pc, #12]	; (4784 <z_arm_configure_static_mpu_regions+0x14>)
    4776:	2101      	movs	r1, #1
    4778:	4803      	ldr	r0, [pc, #12]	; (4788 <z_arm_configure_static_mpu_regions+0x18>)
    477a:	f00f fff1 	bl	14760 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    477e:	bd08      	pop	{r3, pc}
    4780:	20040000 	.word	0x20040000
    4784:	20000000 	.word	0x20000000
    4788:	0003210c 	.word	0x0003210c

0000478c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    478c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    478e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4792:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4794:	4804      	ldr	r0, [pc, #16]	; (47a8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4796:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4798:	2320      	movs	r3, #32
    479a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    479c:	4b03      	ldr	r3, [pc, #12]	; (47ac <z_arm_configure_dynamic_mpu_regions+0x20>)
    479e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    47a0:	2101      	movs	r1, #1
    47a2:	f00f ffe1 	bl	14768 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    47a6:	bd08      	pop	{r3, pc}
    47a8:	2000f0b8 	.word	0x2000f0b8
    47ac:	150b0000 	.word	0x150b0000

000047b0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    47b0:	4a06      	ldr	r2, [pc, #24]	; (47cc <region_init+0x1c>)
    47b2:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47b4:	680b      	ldr	r3, [r1, #0]
    47b6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    47ba:	4303      	orrs	r3, r0
    47bc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47c0:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    47c2:	688b      	ldr	r3, [r1, #8]
    47c4:	f043 0301 	orr.w	r3, r3, #1
    47c8:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    47ca:	4770      	bx	lr
    47cc:	e000ed90 	.word	0xe000ed90

000047d0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    47d0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    47d2:	4c03      	ldr	r4, [pc, #12]	; (47e0 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    47d4:	2301      	movs	r3, #1
    47d6:	7822      	ldrb	r2, [r4, #0]
    47d8:	f00f ff9a 	bl	14710 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    47dc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    47de:	bd10      	pop	{r4, pc}
    47e0:	2000f751 	.word	0x2000f751

000047e4 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    47e4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    47e6:	2300      	movs	r3, #0
    47e8:	4a08      	ldr	r2, [pc, #32]	; (480c <mpu_configure_dynamic_mpu_regions+0x28>)
    47ea:	7812      	ldrb	r2, [r2, #0]
    47ec:	f00f ff90 	bl	14710 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    47f0:	f110 0f16 	cmn.w	r0, #22
    47f4:	d008      	beq.n	4808 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    47f6:	4603      	mov	r3, r0
    47f8:	2b07      	cmp	r3, #7
    47fa:	dc05      	bgt.n	4808 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    47fc:	4a04      	ldr	r2, [pc, #16]	; (4810 <mpu_configure_dynamic_mpu_regions+0x2c>)
    47fe:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4800:	2100      	movs	r1, #0
    4802:	6111      	str	r1, [r2, #16]
    4804:	3301      	adds	r3, #1
    4806:	e7f7      	b.n	47f8 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    4808:	bd08      	pop	{r3, pc}
    480a:	bf00      	nop
    480c:	2000f751 	.word	0x2000f751
    4810:	e000ed90 	.word	0xe000ed90

00004814 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4814:	4b03      	ldr	r3, [pc, #12]	; (4824 <arm_core_mpu_enable+0x10>)
    4816:	2205      	movs	r2, #5
    4818:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    481a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    481e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4822:	4770      	bx	lr
    4824:	e000ed90 	.word	0xe000ed90

00004828 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4828:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    482c:	4b01      	ldr	r3, [pc, #4]	; (4834 <arm_core_mpu_disable+0xc>)
    482e:	2200      	movs	r2, #0
    4830:	605a      	str	r2, [r3, #4]
}
    4832:	4770      	bx	lr
    4834:	e000ed90 	.word	0xe000ed90

00004838 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4838:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    483a:	4b0e      	ldr	r3, [pc, #56]	; (4874 <z_arm_mpu_init+0x3c>)
    483c:	681d      	ldr	r5, [r3, #0]
    483e:	2d08      	cmp	r5, #8
    4840:	d815      	bhi.n	486e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4842:	f7ff fff1 	bl	4828 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4846:	2400      	movs	r4, #0
    4848:	42a5      	cmp	r5, r4
    484a:	d90a      	bls.n	4862 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    484c:	4b09      	ldr	r3, [pc, #36]	; (4874 <z_arm_mpu_init+0x3c>)
    484e:	6859      	ldr	r1, [r3, #4]
    4850:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4854:	0093      	lsls	r3, r2, #2
    4856:	4419      	add	r1, r3
    4858:	4620      	mov	r0, r4
    485a:	f7ff ffa9 	bl	47b0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    485e:	3401      	adds	r4, #1
    4860:	e7f2      	b.n	4848 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4862:	4b05      	ldr	r3, [pc, #20]	; (4878 <z_arm_mpu_init+0x40>)
    4864:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4866:	f7ff ffd5 	bl	4814 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    486a:	2000      	movs	r0, #0
}
    486c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    486e:	f04f 30ff 	mov.w	r0, #4294967295
    4872:	e7fb      	b.n	486c <z_arm_mpu_init+0x34>
    4874:	00032130 	.word	0x00032130
    4878:	2000f751 	.word	0x2000f751

0000487c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    487c:	4b01      	ldr	r3, [pc, #4]	; (4884 <__stdout_hook_install+0x8>)
    487e:	6018      	str	r0, [r3, #0]
}
    4880:	4770      	bx	lr
    4882:	bf00      	nop
    4884:	2000002c 	.word	0x2000002c

00004888 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	4606      	mov	r6, r0
    488c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    488e:	2400      	movs	r4, #0
    4890:	e000      	b.n	4894 <z_impl_zephyr_read_stdin+0xc>
    4892:	3401      	adds	r4, #1
    4894:	42ac      	cmp	r4, r5
    4896:	da08      	bge.n	48aa <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    4898:	4b05      	ldr	r3, [pc, #20]	; (48b0 <z_impl_zephyr_read_stdin+0x28>)
    489a:	681b      	ldr	r3, [r3, #0]
    489c:	4798      	blx	r3
    489e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    48a0:	280a      	cmp	r0, #10
    48a2:	d001      	beq.n	48a8 <z_impl_zephyr_read_stdin+0x20>
    48a4:	280d      	cmp	r0, #13
    48a6:	d1f4      	bne.n	4892 <z_impl_zephyr_read_stdin+0xa>
			i++;
    48a8:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    48aa:	4620      	mov	r0, r4
    48ac:	bd70      	pop	{r4, r5, r6, pc}
    48ae:	bf00      	nop
    48b0:	20000028 	.word	0x20000028

000048b4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    48b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b6:	4605      	mov	r5, r0
    48b8:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    48ba:	2400      	movs	r4, #0
    48bc:	e004      	b.n	48c8 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    48be:	4b09      	ldr	r3, [pc, #36]	; (48e4 <z_impl_zephyr_write_stdout+0x30>)
    48c0:	681b      	ldr	r3, [r3, #0]
    48c2:	7830      	ldrb	r0, [r6, #0]
    48c4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    48c6:	3401      	adds	r4, #1
    48c8:	42bc      	cmp	r4, r7
    48ca:	da08      	bge.n	48de <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    48cc:	192e      	adds	r6, r5, r4
    48ce:	5d2b      	ldrb	r3, [r5, r4]
    48d0:	2b0a      	cmp	r3, #10
    48d2:	d1f4      	bne.n	48be <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    48d4:	4b03      	ldr	r3, [pc, #12]	; (48e4 <z_impl_zephyr_write_stdout+0x30>)
    48d6:	681b      	ldr	r3, [r3, #0]
    48d8:	200d      	movs	r0, #13
    48da:	4798      	blx	r3
    48dc:	e7ef      	b.n	48be <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    48de:	4638      	mov	r0, r7
    48e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48e2:	bf00      	nop
    48e4:	2000002c 	.word	0x2000002c

000048e8 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    48e8:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    48ea:	2205      	movs	r2, #5
    48ec:	4902      	ldr	r1, [pc, #8]	; (48f8 <_exit+0x10>)
    48ee:	2001      	movs	r0, #1
    48f0:	f00f ff4b 	bl	1478a <_write>
	while (1) {
    48f4:	e7fe      	b.n	48f4 <_exit+0xc>
    48f6:	bf00      	nop
    48f8:	00032118 	.word	0x00032118

000048fc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    48fc:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    48fe:	4b08      	ldr	r3, [pc, #32]	; (4920 <_sbrk+0x24>)
    4900:	6819      	ldr	r1, [r3, #0]
    4902:	4b08      	ldr	r3, [pc, #32]	; (4924 <_sbrk+0x28>)
    4904:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4906:	440a      	add	r2, r1
    4908:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    490c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    4910:	429a      	cmp	r2, r3
    4912:	d202      	bcs.n	491a <_sbrk+0x1e>
		heap_sz += count;
    4914:	4b02      	ldr	r3, [pc, #8]	; (4920 <_sbrk+0x24>)
    4916:	601a      	str	r2, [r3, #0]
		ret = ptr;
    4918:	4770      	bx	lr
	} else {
		ret = (void *)-1;
    491a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    491e:	4770      	bx	lr
    4920:	2000f0c4 	.word	0x2000f0c4
    4924:	200182c0 	.word	0x200182c0

00004928 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4928:	f04f 0320 	mov.w	r3, #32
    492c:	f3ef 8211 	mrs	r2, BASEPRI
    4930:	f383 8812 	msr	BASEPRI_MAX, r3
    4934:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4938:	2301      	movs	r3, #1
    493a:	4906      	ldr	r1, [pc, #24]	; (4954 <nordicsemi_nrf52_init+0x2c>)
    493c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4940:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4944:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4948:	f382 8811 	msr	BASEPRI, r2
    494c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4950:	2000      	movs	r0, #0
    4952:	4770      	bx	lr
    4954:	4001e000 	.word	0x4001e000

00004958 <sys_arch_reboot>:
    *p_gpregret = val;
    4958:	b2c0      	uxtb	r0, r0
    495a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    495e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    4962:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4966:	4905      	ldr	r1, [pc, #20]	; (497c <sys_arch_reboot+0x24>)
    4968:	68ca      	ldr	r2, [r1, #12]
    496a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    496e:	4b04      	ldr	r3, [pc, #16]	; (4980 <sys_arch_reboot+0x28>)
    4970:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4972:	60cb      	str	r3, [r1, #12]
    4974:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4978:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    497a:	e7fd      	b.n	4978 <sys_arch_reboot+0x20>
    497c:	e000ed00 	.word	0xe000ed00
    4980:	05fa0004 	.word	0x05fa0004

00004984 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4984:	b130      	cbz	r0, 4994 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    4986:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4988:	0180      	lsls	r0, r0, #6
    498a:	4b03      	ldr	r3, [pc, #12]	; (4998 <arch_busy_wait+0x14>)
    498c:	f043 0301 	orr.w	r3, r3, #1
    4990:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    4992:	bd08      	pop	{r3, pc}
    4994:	4770      	bx	lr
    4996:	bf00      	nop
    4998:	00031960 	.word	0x00031960

0000499c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    499c:	4800      	ldr	r0, [pc, #0]	; (49a0 <get_hf_flags+0x4>)
    499e:	4770      	bx	lr
    49a0:	2000f120 	.word	0x2000f120

000049a4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    49a4:	4b01      	ldr	r3, [pc, #4]	; (49ac <get_subsys+0x8>)
    49a6:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    49a8:	1140      	asrs	r0, r0, #5
    49aa:	4770      	bx	lr
    49ac:	2000f0d8 	.word	0x2000f0d8

000049b0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    49b0:	b538      	push	{r3, r4, r5, lr}
    49b2:	4605      	mov	r5, r0
    49b4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    49b6:	f7ff fff5 	bl	49a4 <get_subsys>
    49ba:	4601      	mov	r1, r0
    49bc:	2240      	movs	r2, #64	; 0x40
    49be:	4803      	ldr	r0, [pc, #12]	; (49cc <onoff_stop+0x1c>)
    49c0:	f00f ffa8 	bl	14914 <stop>
    49c4:	4601      	mov	r1, r0
	notify(mgr, res);
    49c6:	4628      	mov	r0, r5
    49c8:	47a0      	blx	r4
}
    49ca:	bd38      	pop	{r3, r4, r5, pc}
    49cc:	00019510 	.word	0x00019510

000049d0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    49d0:	b530      	push	{r4, r5, lr}
    49d2:	b083      	sub	sp, #12
    49d4:	4605      	mov	r5, r0
    49d6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    49d8:	f7ff ffe4 	bl	49a4 <get_subsys>
    49dc:	4601      	mov	r1, r0
    49de:	2340      	movs	r3, #64	; 0x40
    49e0:	9300      	str	r3, [sp, #0]
    49e2:	4623      	mov	r3, r4
    49e4:	4a05      	ldr	r2, [pc, #20]	; (49fc <onoff_start+0x2c>)
    49e6:	4806      	ldr	r0, [pc, #24]	; (4a00 <onoff_start+0x30>)
    49e8:	f00f ffae 	bl	14948 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    49ec:	1e01      	subs	r1, r0, #0
    49ee:	db01      	blt.n	49f4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    49f0:	b003      	add	sp, #12
    49f2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    49f4:	4628      	mov	r0, r5
    49f6:	47a0      	blx	r4
}
    49f8:	e7fa      	b.n	49f0 <onoff_start+0x20>
    49fa:	bf00      	nop
    49fc:	00014991 	.word	0x00014991
    4a00:	00019510 	.word	0x00019510

00004a04 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4a04:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4a06:	b110      	cbz	r0, 4a0e <clock_event_handler+0xa>
    4a08:	2801      	cmp	r0, #1
    4a0a:	d00d      	beq.n	4a28 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    4a0c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4a0e:	2100      	movs	r1, #0
    4a10:	4808      	ldr	r0, [pc, #32]	; (4a34 <clock_event_handler+0x30>)
    4a12:	f00f ff0a 	bl	1482a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4a16:	6883      	ldr	r3, [r0, #8]
    4a18:	f013 0f07 	tst.w	r3, #7
    4a1c:	d1f6      	bne.n	4a0c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4a1e:	2100      	movs	r1, #0
    4a20:	4804      	ldr	r0, [pc, #16]	; (4a34 <clock_event_handler+0x30>)
    4a22:	f00f ff65 	bl	148f0 <clkstarted_handle>
    4a26:	e7f1      	b.n	4a0c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4a28:	2101      	movs	r1, #1
    4a2a:	4802      	ldr	r0, [pc, #8]	; (4a34 <clock_event_handler+0x30>)
    4a2c:	f00f ff60 	bl	148f0 <clkstarted_handle>
}
    4a30:	e7ec      	b.n	4a0c <clock_event_handler+0x8>
    4a32:	bf00      	nop
    4a34:	00019510 	.word	0x00019510

00004a38 <generic_hfclk_start>:
{
    4a38:	b510      	push	{r4, lr}
	__asm__ volatile(
    4a3a:	f04f 0320 	mov.w	r3, #32
    4a3e:	f3ef 8411 	mrs	r4, BASEPRI
    4a42:	f383 8812 	msr	BASEPRI_MAX, r3
    4a46:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4a4a:	4a13      	ldr	r2, [pc, #76]	; (4a98 <generic_hfclk_start+0x60>)
    4a4c:	6813      	ldr	r3, [r2, #0]
    4a4e:	f043 0302 	orr.w	r3, r3, #2
    4a52:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4a54:	f013 0f01 	tst.w	r3, #1
    4a58:	d108      	bne.n	4a6c <generic_hfclk_start+0x34>
	bool already_started = false;
    4a5a:	2300      	movs	r3, #0
	__asm__ volatile(
    4a5c:	f384 8811 	msr	BASEPRI, r4
    4a60:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4a64:	b99b      	cbnz	r3, 4a8e <generic_hfclk_start+0x56>
	hfclk_start();
    4a66:	f00f ff9b 	bl	149a0 <hfclk_start>
}
    4a6a:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a70:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4a74:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4a78:	f012 0f01 	tst.w	r2, #1
    4a7c:	d101      	bne.n	4a82 <generic_hfclk_start+0x4a>
	bool already_started = false;
    4a7e:	2300      	movs	r3, #0
    4a80:	e7ec      	b.n	4a5c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4a82:	f7ff ff8b 	bl	499c <get_hf_flags>
    4a86:	f00f ff20 	bl	148ca <set_on_state>
			already_started = true;
    4a8a:	2301      	movs	r3, #1
    4a8c:	e7e6      	b.n	4a5c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    4a8e:	2100      	movs	r1, #0
    4a90:	4802      	ldr	r0, [pc, #8]	; (4a9c <generic_hfclk_start+0x64>)
    4a92:	f00f ff2d 	bl	148f0 <clkstarted_handle>
		return;
    4a96:	e7e8      	b.n	4a6a <generic_hfclk_start+0x32>
    4a98:	2000f130 	.word	0x2000f130
    4a9c:	00019510 	.word	0x00019510

00004aa0 <generic_hfclk_stop>:
{
    4aa0:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4aa2:	4b0a      	ldr	r3, [pc, #40]	; (4acc <generic_hfclk_stop+0x2c>)
    4aa4:	f3bf 8f5b 	dmb	ish
    4aa8:	e853 2f00 	ldrex	r2, [r3]
    4aac:	f022 0102 	bic.w	r1, r2, #2
    4ab0:	e843 1000 	strex	r0, r1, [r3]
    4ab4:	2800      	cmp	r0, #0
    4ab6:	d1f7      	bne.n	4aa8 <generic_hfclk_stop+0x8>
    4ab8:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4abc:	f012 0f01 	tst.w	r2, #1
    4ac0:	d000      	beq.n	4ac4 <generic_hfclk_stop+0x24>
}
    4ac2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4ac4:	f00f ff76 	bl	149b4 <hfclk_stop>
    4ac8:	e7fb      	b.n	4ac2 <generic_hfclk_stop+0x22>
    4aca:	bf00      	nop
    4acc:	2000f130 	.word	0x2000f130

00004ad0 <api_blocking_start>:
{
    4ad0:	b500      	push	{lr}
    4ad2:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4ad4:	f8cd d000 	str.w	sp, [sp]
    4ad8:	f8cd d004 	str.w	sp, [sp, #4]
    4adc:	2300      	movs	r3, #0
    4ade:	9302      	str	r3, [sp, #8]
    4ae0:	2301      	movs	r3, #1
    4ae2:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4ae4:	466b      	mov	r3, sp
    4ae6:	4a07      	ldr	r2, [pc, #28]	; (4b04 <api_blocking_start+0x34>)
    4ae8:	f00f ff4a 	bl	14980 <api_start>
	if (err < 0) {
    4aec:	2800      	cmp	r0, #0
    4aee:	db05      	blt.n	4afc <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4af0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4af4:	2300      	movs	r3, #0
    4af6:	4668      	mov	r0, sp
    4af8:	f00c fd00 	bl	114fc <z_impl_k_sem_take>
}
    4afc:	b005      	add	sp, #20
    4afe:	f85d fb04 	ldr.w	pc, [sp], #4
    4b02:	bf00      	nop
    4b04:	000149c9 	.word	0x000149c9

00004b08 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4b08:	b570      	push	{r4, r5, r6, lr}
    4b0a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b0c:	2200      	movs	r2, #0
    4b0e:	2101      	movs	r1, #1
    4b10:	4610      	mov	r0, r2
    4b12:	f7ff fb51 	bl	41b8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4b16:	2000      	movs	r0, #0
    4b18:	f7ff fb30 	bl	417c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4b1c:	4811      	ldr	r0, [pc, #68]	; (4b64 <clk_init+0x5c>)
    4b1e:	f001 f969 	bl	5df4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4b22:	4b11      	ldr	r3, [pc, #68]	; (4b68 <clk_init+0x60>)
    4b24:	4298      	cmp	r0, r3
    4b26:	d11a      	bne.n	4b5e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4b28:	f010 fa7c 	bl	15024 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4b2c:	2400      	movs	r4, #0
    4b2e:	e003      	b.n	4b38 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b30:	2301      	movs	r3, #1
    4b32:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4b34:	441c      	add	r4, r3
    4b36:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    4b38:	2c01      	cmp	r4, #1
    4b3a:	d80e      	bhi.n	4b5a <clk_init+0x52>
						get_sub_data(dev, i);
    4b3c:	4621      	mov	r1, r4
    4b3e:	4630      	mov	r0, r6
    4b40:	f00f fe73 	bl	1482a <get_sub_data>
    4b44:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b46:	4621      	mov	r1, r4
    4b48:	4630      	mov	r0, r6
    4b4a:	f00f fe79 	bl	14840 <get_onoff_manager>
    4b4e:	4907      	ldr	r1, [pc, #28]	; (4b6c <clk_init+0x64>)
    4b50:	f00f fa30 	bl	13fb4 <onoff_manager_init>
		if (err < 0) {
    4b54:	2800      	cmp	r0, #0
    4b56:	daeb      	bge.n	4b30 <clk_init+0x28>
    4b58:	e000      	b.n	4b5c <clk_init+0x54>
	}

	return 0;
    4b5a:	2000      	movs	r0, #0
}
    4b5c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4b5e:	f06f 0004 	mvn.w	r0, #4
    4b62:	e7fb      	b.n	4b5c <clk_init+0x54>
    4b64:	00004a05 	.word	0x00004a05
    4b68:	0bad0000 	.word	0x0bad0000
    4b6c:	0003217c 	.word	0x0003217c

00004b70 <lfclk_spinwait>:
{
    4b70:	b570      	push	{r4, r5, r6, lr}
    4b72:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4b74:	2801      	cmp	r0, #1
    4b76:	d107      	bne.n	4b88 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b7c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4b80:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4b84:	2b01      	cmp	r3, #1
    4b86:	d058      	beq.n	4c3a <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4b88:	f013 fca0 	bl	184cc <k_is_in_isr>
    4b8c:	b928      	cbnz	r0, 4b9a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    4b8e:	4b2e      	ldr	r3, [pc, #184]	; (4c48 <lfclk_spinwait+0xd8>)
    4b90:	781b      	ldrb	r3, [r3, #0]
    4b92:	2b00      	cmp	r3, #0
    4b94:	d041      	beq.n	4c1a <lfclk_spinwait+0xaa>
    4b96:	2300      	movs	r3, #0
    4b98:	e000      	b.n	4b9c <lfclk_spinwait+0x2c>
    4b9a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    4b9c:	461c      	mov	r4, r3
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d03d      	beq.n	4c1e <lfclk_spinwait+0xae>
	__asm__ volatile(
    4ba2:	f04f 0320 	mov.w	r3, #32
    4ba6:	f3ef 8611 	mrs	r6, BASEPRI
    4baa:	f383 8812 	msr	BASEPRI_MAX, r3
    4bae:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4bb2:	b924      	cbnz	r4, 4bbe <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    4bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4bb8:	2202      	movs	r2, #2
    4bba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4bc2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4bc6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4bca:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4bce:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4bd2:	d12b      	bne.n	4c2c <lfclk_spinwait+0xbc>
    return false;
    4bd4:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4bd6:	b11a      	cbz	r2, 4be0 <lfclk_spinwait+0x70>
    4bd8:	2b01      	cmp	r3, #1
    4bda:	d029      	beq.n	4c30 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4bdc:	2d01      	cmp	r5, #1
    4bde:	d027      	beq.n	4c30 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4be0:	b1fc      	cbz	r4, 4c22 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4be2:	4630      	mov	r0, r6
    4be4:	f7ff fac0 	bl	4168 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4bec:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4bf0:	2b00      	cmp	r3, #0
    4bf2:	d1e4      	bne.n	4bbe <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4bf4:	4b15      	ldr	r3, [pc, #84]	; (4c4c <lfclk_spinwait+0xdc>)
    4bf6:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d0e0      	beq.n	4bbe <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4bfc:	4b13      	ldr	r3, [pc, #76]	; (4c4c <lfclk_spinwait+0xdc>)
    4bfe:	2200      	movs	r2, #0
    4c00:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4c02:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4c04:	2301      	movs	r3, #1
    4c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4c0a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c0e:	4a10      	ldr	r2, [pc, #64]	; (4c50 <lfclk_spinwait+0xe0>)
    4c10:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c14:	4a0f      	ldr	r2, [pc, #60]	; (4c54 <lfclk_spinwait+0xe4>)
    4c16:	6013      	str	r3, [r2, #0]
}
    4c18:	e7d1      	b.n	4bbe <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4c1a:	2301      	movs	r3, #1
    4c1c:	e7be      	b.n	4b9c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    4c1e:	2600      	movs	r6, #0
    4c20:	e7c7      	b.n	4bb2 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    4c22:	2021      	movs	r0, #33	; 0x21
    4c24:	2100      	movs	r1, #0
    4c26:	f00d f825 	bl	11c74 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4c2a:	e7dd      	b.n	4be8 <lfclk_spinwait+0x78>
                return true;
    4c2c:	2201      	movs	r2, #1
    4c2e:	e7d2      	b.n	4bd6 <lfclk_spinwait+0x66>
	if (isr_mode) {
    4c30:	b124      	cbz	r4, 4c3c <lfclk_spinwait+0xcc>
	__asm__ volatile(
    4c32:	f386 8811 	msr	BASEPRI, r6
    4c36:	f3bf 8f6f 	isb	sy
}
    4c3a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    4c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c40:	2202      	movs	r2, #2
    4c42:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4c46:	e7f8      	b.n	4c3a <lfclk_spinwait+0xca>
    4c48:	2000f753 	.word	0x2000f753
    4c4c:	40000104 	.word	0x40000104
    4c50:	e000e100 	.word	0xe000e100
    4c54:	40000008 	.word	0x40000008

00004c58 <z_nrf_clock_control_lf_on>:
{
    4c58:	b510      	push	{r4, lr}
    4c5a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4c5c:	4b10      	ldr	r3, [pc, #64]	; (4ca0 <z_nrf_clock_control_lf_on+0x48>)
    4c5e:	2101      	movs	r1, #1
    4c60:	f3bf 8f5b 	dmb	ish
    4c64:	e853 2f00 	ldrex	r2, [r3]
    4c68:	e843 1000 	strex	r0, r1, [r3]
    4c6c:	2800      	cmp	r0, #0
    4c6e:	d1f9      	bne.n	4c64 <z_nrf_clock_control_lf_on+0xc>
    4c70:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4c74:	b11a      	cbz	r2, 4c7e <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    4c76:	1e63      	subs	r3, r4, #1
    4c78:	2b01      	cmp	r3, #1
    4c7a:	d90c      	bls.n	4c96 <z_nrf_clock_control_lf_on+0x3e>
}
    4c7c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4c7e:	4809      	ldr	r0, [pc, #36]	; (4ca4 <z_nrf_clock_control_lf_on+0x4c>)
    4c80:	f00f fdde 	bl	14840 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4c84:	4908      	ldr	r1, [pc, #32]	; (4ca8 <z_nrf_clock_control_lf_on+0x50>)
    4c86:	2300      	movs	r3, #0
    4c88:	604b      	str	r3, [r1, #4]
    4c8a:	60cb      	str	r3, [r1, #12]
    4c8c:	2301      	movs	r3, #1
    4c8e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4c90:	f00f f9ac 	bl	13fec <onoff_request>
    4c94:	e7ef      	b.n	4c76 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    4c96:	4620      	mov	r0, r4
    4c98:	f7ff ff6a 	bl	4b70 <lfclk_spinwait>
		break;
    4c9c:	e7ee      	b.n	4c7c <z_nrf_clock_control_lf_on+0x24>
    4c9e:	bf00      	nop
    4ca0:	2000f134 	.word	0x2000f134
    4ca4:	00019510 	.word	0x00019510
    4ca8:	2000f0c8 	.word	0x2000f0c8

00004cac <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4cac:	b538      	push	{r3, r4, r5, lr}
    4cae:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4cb0:	b2c5      	uxtb	r5, r0
    4cb2:	4b0b      	ldr	r3, [pc, #44]	; (4ce0 <console_out+0x34>)
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	4628      	mov	r0, r5
    4cb8:	4798      	blx	r3

	if (handled_by_debug_server) {
    4cba:	2801      	cmp	r0, #1
    4cbc:	d007      	beq.n	4cce <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4cbe:	2c0a      	cmp	r4, #10
    4cc0:	d007      	beq.n	4cd2 <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4cc2:	4b08      	ldr	r3, [pc, #32]	; (4ce4 <console_out+0x38>)
    4cc4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4cc6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4cc8:	685b      	ldr	r3, [r3, #4]
    4cca:	4629      	mov	r1, r5
    4ccc:	4798      	blx	r3

	return c;
}
    4cce:	4620      	mov	r0, r4
    4cd0:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    4cd2:	4b04      	ldr	r3, [pc, #16]	; (4ce4 <console_out+0x38>)
    4cd4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4cd6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4cd8:	685b      	ldr	r3, [r3, #4]
    4cda:	210d      	movs	r1, #13
    4cdc:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4cde:	e7f0      	b.n	4cc2 <console_out+0x16>
    4ce0:	20000030 	.word	0x20000030
    4ce4:	2000f138 	.word	0x2000f138

00004ce8 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4ce8:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    4cea:	4c04      	ldr	r4, [pc, #16]	; (4cfc <uart_console_hook_install+0x14>)
    4cec:	4620      	mov	r0, r4
    4cee:	f7ff fdc5 	bl	487c <__stdout_hook_install>
	__printk_hook_install(console_out);
    4cf2:	4620      	mov	r0, r4
    4cf4:	f7fe f9cc 	bl	3090 <__printk_hook_install>
}
    4cf8:	bd10      	pop	{r4, pc}
    4cfa:	bf00      	nop
    4cfc:	00004cad 	.word	0x00004cad

00004d00 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4d00:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4d02:	4806      	ldr	r0, [pc, #24]	; (4d1c <uart_console_init+0x1c>)
    4d04:	4b06      	ldr	r3, [pc, #24]	; (4d20 <uart_console_init+0x20>)
    4d06:	6018      	str	r0, [r3, #0]
    4d08:	f013 fb55 	bl	183b6 <z_device_ready>
    4d0c:	b118      	cbz	r0, 4d16 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    4d0e:	f7ff ffeb 	bl	4ce8 <uart_console_hook_install>

	return 0;
    4d12:	2000      	movs	r0, #0
}
    4d14:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4d16:	f06f 0012 	mvn.w	r0, #18
    4d1a:	e7fb      	b.n	4d14 <uart_console_init+0x14>
    4d1c:	00019540 	.word	0x00019540
    4d20:	2000f138 	.word	0x2000f138

00004d24 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    4d24:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    4d26:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d28:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4d2a:	4b37      	ldr	r3, [pc, #220]	; (4e08 <gpio_nrfx_config+0xe4>)
    4d2c:	4013      	ands	r3, r2
    4d2e:	4c37      	ldr	r4, [pc, #220]	; (4e0c <gpio_nrfx_config+0xe8>)
    4d30:	42a3      	cmp	r3, r4
    4d32:	d027      	beq.n	4d84 <gpio_nrfx_config+0x60>
    4d34:	d812      	bhi.n	4d5c <gpio_nrfx_config+0x38>
    4d36:	2b06      	cmp	r3, #6
    4d38:	d026      	beq.n	4d88 <gpio_nrfx_config+0x64>
    4d3a:	d904      	bls.n	4d46 <gpio_nrfx_config+0x22>
    4d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4d40:	d109      	bne.n	4d56 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    4d42:	2401      	movs	r4, #1
    4d44:	e016      	b.n	4d74 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4d46:	b30b      	cbz	r3, 4d8c <gpio_nrfx_config+0x68>
    4d48:	2b02      	cmp	r3, #2
    4d4a:	d101      	bne.n	4d50 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    4d4c:	2404      	movs	r4, #4
    4d4e:	e011      	b.n	4d74 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4d50:	f06f 0015 	mvn.w	r0, #21
    4d54:	e046      	b.n	4de4 <gpio_nrfx_config+0xc0>
    4d56:	f06f 0015 	mvn.w	r0, #21
    4d5a:	e043      	b.n	4de4 <gpio_nrfx_config+0xc0>
    4d5c:	4c2c      	ldr	r4, [pc, #176]	; (4e10 <gpio_nrfx_config+0xec>)
    4d5e:	42a3      	cmp	r3, r4
    4d60:	d016      	beq.n	4d90 <gpio_nrfx_config+0x6c>
    4d62:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4d66:	d101      	bne.n	4d6c <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    4d68:	2403      	movs	r4, #3
    4d6a:	e003      	b.n	4d74 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4d70:	d146      	bne.n	4e00 <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
    4d72:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    4d74:	f012 0f10 	tst.w	r2, #16
    4d78:	d10c      	bne.n	4d94 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    4d7a:	f012 0f20 	tst.w	r2, #32
    4d7e:	d033      	beq.n	4de8 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    4d80:	2501      	movs	r5, #1
    4d82:	e008      	b.n	4d96 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    4d84:	2407      	movs	r4, #7
    4d86:	e7f5      	b.n	4d74 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    4d88:	2406      	movs	r4, #6
    4d8a:	e7f3      	b.n	4d74 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4d8c:	2400      	movs	r4, #0
    4d8e:	e7f1      	b.n	4d74 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    4d90:	2405      	movs	r4, #5
    4d92:	e7ef      	b.n	4d74 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    4d94:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    4d96:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4d9a:	f412 7f80 	tst.w	r2, #256	; 0x100
    4d9e:	bf0c      	ite	eq
    4da0:	2601      	moveq	r6, #1
    4da2:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    4da4:	f412 7f00 	tst.w	r2, #512	; 0x200
    4da8:	d006      	beq.n	4db8 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4daa:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4dae:	d01d      	beq.n	4dec <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4db0:	2201      	movs	r2, #1
    4db2:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    4db4:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
    4db8:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    4dba:	7a12      	ldrb	r2, [r2, #8]
    4dbc:	f001 011f 	and.w	r1, r1, #31
    4dc0:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4dc4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4dc6:	2a01      	cmp	r2, #1
    4dc8:	d018      	beq.n	4dfc <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
    4dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4dce:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4dd2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4dd6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4dda:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    4dde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    4de2:	2000      	movs	r0, #0
}
    4de4:	bcf0      	pop	{r4, r5, r6, r7}
    4de6:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    4de8:	2500      	movs	r5, #0
    4dea:	e7d4      	b.n	4d96 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    4dec:	f412 6f80 	tst.w	r2, #1024	; 0x400
    4df0:	d0e2      	beq.n	4db8 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    4df2:	2201      	movs	r2, #1
    4df4:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    4df6:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    4dfa:	e7dd      	b.n	4db8 <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
    4dfc:	4a05      	ldr	r2, [pc, #20]	; (4e14 <gpio_nrfx_config+0xf0>)
    4dfe:	e7e6      	b.n	4dce <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4e00:	f06f 0015 	mvn.w	r0, #21
    4e04:	e7ee      	b.n	4de4 <gpio_nrfx_config+0xc0>
    4e06:	bf00      	nop
    4e08:	00f00006 	.word	0x00f00006
    4e0c:	00100006 	.word	0x00100006
    4e10:	00400002 	.word	0x00400002
    4e14:	50000300 	.word	0x50000300

00004e18 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    4e18:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    4e1a:	6905      	ldr	r5, [r0, #16]
	return port->config;
    4e1c:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    4e1e:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4e20:	696a      	ldr	r2, [r5, #20]
    4e22:	69ab      	ldr	r3, [r5, #24]
    4e24:	4313      	orrs	r3, r2
    4e26:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    4e2a:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4e2c:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    4e2e:	e011      	b.n	4e54 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    4e30:	f04f 0c02 	mov.w	ip, #2
    4e34:	e01d      	b.n	4e72 <cfg_level_pins+0x5a>
    4e36:	4f14      	ldr	r7, [pc, #80]	; (4e88 <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4e38:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4e3c:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    4e40:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4e44:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    4e48:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    4e4c:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    4e50:	3001      	adds	r0, #1
		bit <<= 1;
    4e52:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    4e54:	b1a9      	cbz	r1, 4e82 <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    4e56:	420b      	tst	r3, r1
    4e58:	d0fa      	beq.n	4e50 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4e5a:	7a34      	ldrb	r4, [r6, #8]
    4e5c:	f000 021f 	and.w	r2, r0, #31
    4e60:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4e64:	692c      	ldr	r4, [r5, #16]
    4e66:	40c4      	lsrs	r4, r0
    4e68:	f014 0f01 	tst.w	r4, #1
    4e6c:	d1e0      	bne.n	4e30 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    4e6e:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    4e72:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    4e76:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e78:	2a01      	cmp	r2, #1
    4e7a:	d0dc      	beq.n	4e36 <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    4e7c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    4e80:	e7da      	b.n	4e38 <cfg_level_pins+0x20>
	}
}
    4e82:	bcf0      	pop	{r4, r5, r6, r7}
    4e84:	4770      	bx	lr
    4e86:	bf00      	nop
    4e88:	50000300 	.word	0x50000300

00004e8c <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    4e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e8e:	468c      	mov	ip, r1
	return port->data;
    4e90:	6903      	ldr	r3, [r0, #16]
	return port->config;
    4e92:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    4e94:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4e96:	695a      	ldr	r2, [r3, #20]
    4e98:	6998      	ldr	r0, [r3, #24]
    4e9a:	4302      	orrs	r2, r0
    4e9c:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    4ea0:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    4ea2:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    4ea6:	6918      	ldr	r0, [r3, #16]
    4ea8:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    4eaa:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    4eae:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    4eb0:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4eb2:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    4eb4:	e015      	b.n	4ee2 <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
    4eb6:	f8df e074 	ldr.w	lr, [pc, #116]	; 4f2c <check_level_trigger_pins+0xa0>
    4eba:	e025      	b.n	4f08 <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
    4ebc:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    4ec0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ec2:	2a01      	cmp	r2, #1
    4ec4:	d02e      	beq.n	4f24 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
    4ec6:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4eca:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    4ece:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    4ed2:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4ed6:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    4eda:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    4ede:	3501      	adds	r5, #1
		bit <<= 1;
    4ee0:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    4ee2:	b314      	cbz	r4, 4f2a <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
    4ee4:	4223      	tst	r3, r4
    4ee6:	d0fa      	beq.n	4ede <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4ee8:	7a0e      	ldrb	r6, [r1, #8]
    4eea:	f005 021f 	and.w	r2, r5, #31
    4eee:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    4ef2:	423b      	tst	r3, r7
    4ef4:	d1e2      	bne.n	4ebc <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
    4ef6:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    4efa:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4efe:	f1be 0f01 	cmp.w	lr, #1
    4f02:	d0d8      	beq.n	4eb6 <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
    4f04:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4f08:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    4f0c:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4f10:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    4f14:	2e02      	cmp	r6, #2
    4f16:	d1d1      	bne.n	4ebc <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
    4f18:	f8dc 6000 	ldr.w	r6, [ip]
    4f1c:	431e      	orrs	r6, r3
    4f1e:	f8cc 6000 	str.w	r6, [ip]
    4f22:	e7cb      	b.n	4ebc <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
    4f24:	f8df e004 	ldr.w	lr, [pc, #4]	; 4f2c <check_level_trigger_pins+0xa0>
    4f28:	e7cf      	b.n	4eca <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    4f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f2c:	50000300 	.word	0x50000300

00004f30 <gpiote_pin_cleanup>:
{
    4f30:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    4f32:	4b14      	ldr	r3, [pc, #80]	; (4f84 <gpiote_pin_cleanup+0x54>)
    4f34:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    4f38:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4f3a:	2300      	movs	r3, #0
    4f3c:	e000      	b.n	4f40 <gpiote_pin_cleanup+0x10>
    4f3e:	3301      	adds	r3, #1
    4f40:	2b07      	cmp	r3, #7
    4f42:	d81d      	bhi.n	4f80 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4f44:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    4f48:	490e      	ldr	r1, [pc, #56]	; (4f84 <gpiote_pin_cleanup+0x54>)
    4f4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    4f4e:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    4f52:	4290      	cmp	r0, r2
    4f54:	d1f3      	bne.n	4f3e <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    4f56:	fa24 f203 	lsr.w	r2, r4, r3
    4f5a:	f012 0f01 	tst.w	r2, #1
    4f5e:	d0ee      	beq.n	4f3e <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    4f60:	460a      	mov	r2, r1
    4f62:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    4f66:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    4f6a:	f021 0101 	bic.w	r1, r1, #1
    4f6e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    4f72:	2101      	movs	r1, #1
    4f74:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    4f76:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    4f7a:	b2d8      	uxtb	r0, r3
    4f7c:	f001 f872 	bl	6064 <nrfx_gpiote_channel_free>
}
    4f80:	bd10      	pop	{r4, pc}
    4f82:	bf00      	nop
    4f84:	40006000 	.word	0x40006000

00004f88 <gpiote_channel_alloc>:
{
    4f88:	b570      	push	{r4, r5, r6, lr}
    4f8a:	b082      	sub	sp, #8
    4f8c:	4604      	mov	r4, r0
    4f8e:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    4f90:	f10d 0007 	add.w	r0, sp, #7
    4f94:	f001 f882 	bl	609c <nrfx_gpiote_channel_alloc>
    4f98:	4b1c      	ldr	r3, [pc, #112]	; (500c <gpiote_channel_alloc+0x84>)
    4f9a:	4298      	cmp	r0, r3
    4f9c:	d132      	bne.n	5004 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    4f9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4fa2:	f103 0240 	add.w	r2, r3, #64	; 0x40
    4fa6:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4fa8:	4e19      	ldr	r6, [pc, #100]	; (5010 <gpiote_channel_alloc+0x88>)
    4faa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4fae:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    4fb2:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    4fb6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4fba:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4fbe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    4fc2:	0224      	lsls	r4, r4, #8
    4fc4:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    4fc8:	042d      	lsls	r5, r5, #16
    4fca:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4fce:	432c      	orrs	r4, r5
    4fd0:	430c      	orrs	r4, r1
    4fd2:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    4fd6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    4fda:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fde:	2000      	movs	r0, #0
    4fe0:	6018      	str	r0, [r3, #0]
    4fe2:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    4fe4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4fe8:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    4fec:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    4ff0:	f042 0201 	orr.w	r2, r2, #1
    4ff4:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    4ff8:	2301      	movs	r3, #1
    4ffa:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    4ffc:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    5000:	b002      	add	sp, #8
    5002:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    5004:	f06f 0012 	mvn.w	r0, #18
    5008:	e7fa      	b.n	5000 <gpiote_channel_alloc+0x78>
    500a:	bf00      	nop
    500c:	0bad0000 	.word	0x0bad0000
    5010:	40006000 	.word	0x40006000

00005014 <gpiote_pin_int_cfg>:
{
    5014:	b570      	push	{r4, r5, r6, lr}
    5016:	460d      	mov	r5, r1
	return port->data;
    5018:	6906      	ldr	r6, [r0, #16]
	return port->config;
    501a:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    501c:	7a1b      	ldrb	r3, [r3, #8]
    501e:	f001 041f 	and.w	r4, r1, #31
    5022:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    5026:	4620      	mov	r0, r4
    5028:	f7ff ff82 	bl	4f30 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    502c:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    5030:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5032:	2b01      	cmp	r3, #1
    5034:	d020      	beq.n	5078 <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
    5036:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    503a:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    503e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5042:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5046:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    504a:	68f3      	ldr	r3, [r6, #12]
    504c:	40eb      	lsrs	r3, r5
    504e:	f013 0f01 	tst.w	r3, #1
    5052:	d02f      	beq.n	50b4 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
    5054:	6973      	ldr	r3, [r6, #20]
    5056:	40eb      	lsrs	r3, r5
    5058:	f013 0f01 	tst.w	r3, #1
    505c:	d015      	beq.n	508a <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
    505e:	69b3      	ldr	r3, [r6, #24]
    5060:	40eb      	lsrs	r3, r5
    5062:	f013 0f01 	tst.w	r3, #1
    5066:	d109      	bne.n	507c <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    5068:	6931      	ldr	r1, [r6, #16]
    506a:	fa21 f505 	lsr.w	r5, r1, r5
    506e:	f015 0f01 	tst.w	r5, #1
    5072:	d008      	beq.n	5086 <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    5074:	2101      	movs	r1, #1
    5076:	e002      	b.n	507e <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
    5078:	4a0f      	ldr	r2, [pc, #60]	; (50b8 <gpiote_pin_int_cfg+0xa4>)
    507a:	e7de      	b.n	503a <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    507c:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    507e:	4620      	mov	r0, r4
    5080:	f7ff ff82 	bl	4f88 <gpiote_channel_alloc>
    5084:	e017      	b.n	50b6 <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    5086:	2102      	movs	r1, #2
    5088:	e7f9      	b.n	507e <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    508a:	6931      	ldr	r1, [r6, #16]
    508c:	fa21 f505 	lsr.w	r5, r1, r5
    5090:	f015 0f01 	tst.w	r5, #1
    5094:	d10c      	bne.n	50b0 <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    5096:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5098:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    509c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    50a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    50a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    50a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    50ac:	2000      	movs	r0, #0
}
    50ae:	e002      	b.n	50b6 <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    50b0:	2102      	movs	r1, #2
    50b2:	e7f1      	b.n	5098 <gpiote_pin_int_cfg+0x84>
	int res = 0;
    50b4:	2000      	movs	r0, #0
}
    50b6:	bd70      	pop	{r4, r5, r6, pc}
    50b8:	50000300 	.word	0x50000300

000050bc <gpio_nrfx_pin_interrupt_configure>:
{
    50bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    50be:	6904      	ldr	r4, [r0, #16]
	return port->config;
    50c0:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    50c2:	7a2e      	ldrb	r6, [r5, #8]
    50c4:	f001 051f 	and.w	r5, r1, #31
    50c8:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    50cc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    50d0:	d025      	beq.n	511e <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    50d2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    50d6:	d035      	beq.n	5144 <gpio_nrfx_pin_interrupt_configure+0x88>
    50d8:	68e5      	ldr	r5, [r4, #12]
    50da:	2601      	movs	r6, #1
    50dc:	408e      	lsls	r6, r1
    50de:	4335      	orrs	r5, r6
    50e0:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    50e2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    50e6:	d033      	beq.n	5150 <gpio_nrfx_pin_interrupt_configure+0x94>
    50e8:	6962      	ldr	r2, [r4, #20]
    50ea:	2501      	movs	r5, #1
    50ec:	408d      	lsls	r5, r1
    50ee:	ea22 0205 	bic.w	r2, r2, r5
    50f2:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    50f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    50f8:	d02f      	beq.n	515a <gpio_nrfx_pin_interrupt_configure+0x9e>
    50fa:	69a2      	ldr	r2, [r4, #24]
    50fc:	2501      	movs	r5, #1
    50fe:	408d      	lsls	r5, r1
    5100:	ea22 0205 	bic.w	r2, r2, r5
    5104:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    5106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    510a:	d02b      	beq.n	5164 <gpio_nrfx_pin_interrupt_configure+0xa8>
    510c:	6923      	ldr	r3, [r4, #16]
    510e:	2201      	movs	r2, #1
    5110:	408a      	lsls	r2, r1
    5112:	ea23 0302 	bic.w	r3, r3, r2
    5116:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    5118:	f7ff ff7c 	bl	5014 <gpiote_pin_int_cfg>
}
    511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    511e:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    5122:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5124:	2d01      	cmp	r5, #1
    5126:	d00b      	beq.n	5140 <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
    5128:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    512c:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
    5130:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5134:	f015 0f01 	tst.w	r5, #1
    5138:	d0cb      	beq.n	50d2 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    513a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    513e:	e7ed      	b.n	511c <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    5140:	4f0b      	ldr	r7, [pc, #44]	; (5170 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    5142:	e7f3      	b.n	512c <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    5144:	68e5      	ldr	r5, [r4, #12]
    5146:	2601      	movs	r6, #1
    5148:	408e      	lsls	r6, r1
    514a:	ea25 0506 	bic.w	r5, r5, r6
    514e:	e7c7      	b.n	50e0 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    5150:	6962      	ldr	r2, [r4, #20]
    5152:	2501      	movs	r5, #1
    5154:	408d      	lsls	r5, r1
    5156:	432a      	orrs	r2, r5
    5158:	e7cb      	b.n	50f2 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    515a:	69a2      	ldr	r2, [r4, #24]
    515c:	2501      	movs	r5, #1
    515e:	408d      	lsls	r5, r1
    5160:	432a      	orrs	r2, r5
    5162:	e7cf      	b.n	5104 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    5164:	6923      	ldr	r3, [r4, #16]
    5166:	2201      	movs	r2, #1
    5168:	408a      	lsls	r2, r1
    516a:	4313      	orrs	r3, r2
    516c:	e7d3      	b.n	5116 <gpio_nrfx_pin_interrupt_configure+0x5a>
    516e:	bf00      	nop
    5170:	50000300 	.word	0x50000300

00005174 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5174:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    5176:	4b0b      	ldr	r3, [pc, #44]	; (51a4 <gpio_nrfx_init+0x30>)
    5178:	781b      	ldrb	r3, [r3, #0]
    517a:	b10b      	cbz	r3, 5180 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    517c:	2000      	movs	r0, #0
    517e:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    5180:	4b08      	ldr	r3, [pc, #32]	; (51a4 <gpio_nrfx_init+0x30>)
    5182:	2201      	movs	r2, #1
    5184:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5186:	2200      	movs	r2, #0
    5188:	2105      	movs	r1, #5
    518a:	2006      	movs	r0, #6
    518c:	f7ff f814 	bl	41b8 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    5190:	2006      	movs	r0, #6
    5192:	f7fe fff3 	bl	417c <arch_irq_enable>
    5196:	4b04      	ldr	r3, [pc, #16]	; (51a8 <gpio_nrfx_init+0x34>)
    5198:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    519c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    51a0:	e7ec      	b.n	517c <gpio_nrfx_init+0x8>
    51a2:	bf00      	nop
    51a4:	2000f752 	.word	0x2000f752
    51a8:	40006000 	.word	0x40006000

000051ac <gpiote_event_handler>:
{
    51ac:	b570      	push	{r4, r5, r6, lr}
    51ae:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    51b0:	2300      	movs	r3, #0
    51b2:	9302      	str	r3, [sp, #8]
    51b4:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    51b6:	9300      	str	r3, [sp, #0]
    51b8:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    51ba:	4b46      	ldr	r3, [pc, #280]	; (52d4 <gpiote_event_handler+0x128>)
    51bc:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    51be:	b90c      	cbnz	r4, 51c4 <gpiote_event_handler+0x18>
{
    51c0:	2100      	movs	r1, #0
    51c2:	e011      	b.n	51e8 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    51c4:	4d44      	ldr	r5, [pc, #272]	; (52d8 <gpiote_event_handler+0x12c>)
    51c6:	4669      	mov	r1, sp
    51c8:	4628      	mov	r0, r5
    51ca:	f7ff fe5f 	bl	4e8c <check_level_trigger_pins>
		fired_triggers[0] =
    51ce:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    51d0:	a901      	add	r1, sp, #4
    51d2:	f105 0018 	add.w	r0, r5, #24
    51d6:	f7ff fe59 	bl	4e8c <check_level_trigger_pins>
		fired_triggers[1] =
    51da:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    51dc:	4b3d      	ldr	r3, [pc, #244]	; (52d4 <gpiote_event_handler+0x128>)
    51de:	2200      	movs	r2, #0
    51e0:	601a      	str	r2, [r3, #0]
    51e2:	681b      	ldr	r3, [r3, #0]
}
    51e4:	e7ec      	b.n	51c0 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    51e6:	3101      	adds	r1, #1
    51e8:	2907      	cmp	r1, #7
    51ea:	d82d      	bhi.n	5248 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    51ec:	f101 0340 	add.w	r3, r1, #64	; 0x40
    51f0:	009b      	lsls	r3, r3, #2
    51f2:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    51f4:	2301      	movs	r3, #1
    51f6:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    51f8:	4838      	ldr	r0, [pc, #224]	; (52dc <gpiote_event_handler+0x130>)
    51fa:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    51fe:	4203      	tst	r3, r0
    5200:	d0f1      	beq.n	51e6 <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5202:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    5206:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    520a:	681b      	ldr	r3, [r3, #0]
    520c:	2b00      	cmp	r3, #0
    520e:	d0ea      	beq.n	51e6 <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5210:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    5214:	4831      	ldr	r0, [pc, #196]	; (52dc <gpiote_event_handler+0x130>)
    5216:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    521a:	f3c0 3340 	ubfx	r3, r0, #13, #1
    521e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5222:	2501      	movs	r5, #1
    5224:	fa05 f000 	lsl.w	r0, r5, r0
    5228:	ad04      	add	r5, sp, #16
    522a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    522e:	f853 5c08 	ldr.w	r5, [r3, #-8]
    5232:	4305      	orrs	r5, r0
    5234:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    5238:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    523c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5240:	2200      	movs	r2, #0
    5242:	601a      	str	r2, [r3, #0]
    5244:	681b      	ldr	r3, [r3, #0]
}
    5246:	e7ce      	b.n	51e6 <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    5248:	9e02      	ldr	r6, [sp, #8]
    524a:	b92e      	cbnz	r6, 5258 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    524c:	9e03      	ldr	r6, [sp, #12]
    524e:	b9ee      	cbnz	r6, 528c <gpiote_event_handler+0xe0>
	if (port_event) {
    5250:	2c00      	cmp	r4, #0
    5252:	d135      	bne.n	52c0 <gpiote_event_handler+0x114>
}
    5254:	b004      	add	sp, #16
    5256:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    5258:	4b21      	ldr	r3, [pc, #132]	; (52e0 <gpiote_event_handler+0x134>)
    525a:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    525c:	b119      	cbz	r1, 5266 <gpiote_event_handler+0xba>
    525e:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5260:	b149      	cbz	r1, 5276 <gpiote_event_handler+0xca>
	return node->next;
    5262:	680d      	ldr	r5, [r1, #0]
    5264:	e007      	b.n	5276 <gpiote_event_handler+0xca>
    5266:	460d      	mov	r5, r1
    5268:	e005      	b.n	5276 <gpiote_event_handler+0xca>
    526a:	b16d      	cbz	r5, 5288 <gpiote_event_handler+0xdc>
    526c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    526e:	b105      	cbz	r5, 5272 <gpiote_event_handler+0xc6>
	return node->next;
    5270:	682b      	ldr	r3, [r5, #0]
    5272:	4629      	mov	r1, r5
    5274:	461d      	mov	r5, r3
    5276:	2900      	cmp	r1, #0
    5278:	d0e8      	beq.n	524c <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    527a:	688a      	ldr	r2, [r1, #8]
    527c:	4032      	ands	r2, r6
    527e:	d0f4      	beq.n	526a <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5280:	684b      	ldr	r3, [r1, #4]
    5282:	4815      	ldr	r0, [pc, #84]	; (52d8 <gpiote_event_handler+0x12c>)
    5284:	4798      	blx	r3
    5286:	e7f0      	b.n	526a <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5288:	462b      	mov	r3, r5
    528a:	e7f2      	b.n	5272 <gpiote_event_handler+0xc6>
	return list->head;
    528c:	4b15      	ldr	r3, [pc, #84]	; (52e4 <gpiote_event_handler+0x138>)
    528e:	6859      	ldr	r1, [r3, #4]
    5290:	b119      	cbz	r1, 529a <gpiote_event_handler+0xee>
    5292:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5294:	b149      	cbz	r1, 52aa <gpiote_event_handler+0xfe>
	return node->next;
    5296:	680d      	ldr	r5, [r1, #0]
    5298:	e007      	b.n	52aa <gpiote_event_handler+0xfe>
    529a:	460d      	mov	r5, r1
    529c:	e005      	b.n	52aa <gpiote_event_handler+0xfe>
    529e:	b16d      	cbz	r5, 52bc <gpiote_event_handler+0x110>
    52a0:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    52a2:	b105      	cbz	r5, 52a6 <gpiote_event_handler+0xfa>
	return node->next;
    52a4:	682b      	ldr	r3, [r5, #0]
    52a6:	4629      	mov	r1, r5
    52a8:	461d      	mov	r5, r3
    52aa:	2900      	cmp	r1, #0
    52ac:	d0d0      	beq.n	5250 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    52ae:	688a      	ldr	r2, [r1, #8]
    52b0:	4032      	ands	r2, r6
    52b2:	d0f4      	beq.n	529e <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    52b4:	684b      	ldr	r3, [r1, #4]
    52b6:	480c      	ldr	r0, [pc, #48]	; (52e8 <gpiote_event_handler+0x13c>)
    52b8:	4798      	blx	r3
    52ba:	e7f0      	b.n	529e <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    52bc:	462b      	mov	r3, r5
    52be:	e7f2      	b.n	52a6 <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    52c0:	4c05      	ldr	r4, [pc, #20]	; (52d8 <gpiote_event_handler+0x12c>)
    52c2:	4620      	mov	r0, r4
    52c4:	f7ff fda8 	bl	4e18 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    52c8:	f104 0018 	add.w	r0, r4, #24
    52cc:	f7ff fda4 	bl	4e18 <cfg_level_pins>
}
    52d0:	e7c0      	b.n	5254 <gpiote_event_handler+0xa8>
    52d2:	bf00      	nop
    52d4:	4000617c 	.word	0x4000617c
    52d8:	00019570 	.word	0x00019570
    52dc:	40006000 	.word	0x40006000
    52e0:	2000f13c 	.word	0x2000f13c
    52e4:	2000f158 	.word	0x2000f158
    52e8:	00019588 	.word	0x00019588

000052ec <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    52ec:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    52ee:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    52f0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    52f4:	d06f      	beq.n	53d6 <baudrate_set+0xea>
    52f6:	d83a      	bhi.n	536e <baudrate_set+0x82>
    52f8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    52fc:	d06e      	beq.n	53dc <baudrate_set+0xf0>
    52fe:	d90a      	bls.n	5316 <baudrate_set+0x2a>
    5300:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    5304:	d075      	beq.n	53f2 <baudrate_set+0x106>
    5306:	d924      	bls.n	5352 <baudrate_set+0x66>
    5308:	f647 2312 	movw	r3, #31250	; 0x7a12
    530c:	4299      	cmp	r1, r3
    530e:	d12b      	bne.n	5368 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5310:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5314:	e013      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    5316:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    531a:	d061      	beq.n	53e0 <baudrate_set+0xf4>
    531c:	d907      	bls.n	532e <baudrate_set+0x42>
    531e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    5322:	d063      	beq.n	53ec <baudrate_set+0x100>
    5324:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5328:	d110      	bne.n	534c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    532a:	4b3c      	ldr	r3, [pc, #240]	; (541c <baudrate_set+0x130>)
    532c:	e007      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    532e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    5332:	d058      	beq.n	53e6 <baudrate_set+0xfa>
    5334:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5338:	d105      	bne.n	5346 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    533a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    533e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    5342:	2000      	movs	r0, #0
    5344:	4770      	bx	lr
	switch (baudrate) {
    5346:	f06f 0015 	mvn.w	r0, #21
    534a:	4770      	bx	lr
    534c:	f06f 0015 	mvn.w	r0, #21
    5350:	4770      	bx	lr
    5352:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    5356:	d04e      	beq.n	53f6 <baudrate_set+0x10a>
    5358:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    535c:	d101      	bne.n	5362 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    535e:	4b30      	ldr	r3, [pc, #192]	; (5420 <baudrate_set+0x134>)
    5360:	e7ed      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    5362:	f06f 0015 	mvn.w	r0, #21
    5366:	4770      	bx	lr
    5368:	f06f 0015 	mvn.w	r0, #21
    536c:	4770      	bx	lr
    536e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    5372:	d042      	beq.n	53fa <baudrate_set+0x10e>
    5374:	d909      	bls.n	538a <baudrate_set+0x9e>
    5376:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    537a:	d046      	beq.n	540a <baudrate_set+0x11e>
    537c:	d91f      	bls.n	53be <baudrate_set+0xd2>
    537e:	4b29      	ldr	r3, [pc, #164]	; (5424 <baudrate_set+0x138>)
    5380:	4299      	cmp	r1, r3
    5382:	d148      	bne.n	5416 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5384:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5388:	e7d9      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    538a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    538e:	d037      	beq.n	5400 <baudrate_set+0x114>
    5390:	d905      	bls.n	539e <baudrate_set+0xb2>
    5392:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    5396:	d10f      	bne.n	53b8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5398:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    539c:	e7cf      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    539e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    53a2:	4299      	cmp	r1, r3
    53a4:	d02e      	beq.n	5404 <baudrate_set+0x118>
    53a6:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    53aa:	d102      	bne.n	53b2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    53ac:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    53b0:	e7c5      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    53b2:	f06f 0015 	mvn.w	r0, #21
    53b6:	4770      	bx	lr
    53b8:	f06f 0015 	mvn.w	r0, #21
    53bc:	4770      	bx	lr
    53be:	4b1a      	ldr	r3, [pc, #104]	; (5428 <baudrate_set+0x13c>)
    53c0:	4299      	cmp	r1, r3
    53c2:	d025      	beq.n	5410 <baudrate_set+0x124>
    53c4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    53c8:	d102      	bne.n	53d0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    53ca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    53ce:	e7b6      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    53d0:	f06f 0015 	mvn.w	r0, #21
    53d4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    53d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    53da:	e7b0      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    53dc:	4b13      	ldr	r3, [pc, #76]	; (542c <baudrate_set+0x140>)
    53de:	e7ae      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    53e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    53e4:	e7ab      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    53e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    53ea:	e7a8      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    53ec:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    53f0:	e7a5      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    53f2:	4b0f      	ldr	r3, [pc, #60]	; (5430 <baudrate_set+0x144>)
    53f4:	e7a3      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    53f6:	4b0f      	ldr	r3, [pc, #60]	; (5434 <baudrate_set+0x148>)
    53f8:	e7a1      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    53fa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    53fe:	e79e      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5400:	4b0d      	ldr	r3, [pc, #52]	; (5438 <baudrate_set+0x14c>)
    5402:	e79c      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5404:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5408:	e799      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    540a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    540e:	e796      	b.n	533e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5410:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5414:	e793      	b.n	533e <baudrate_set+0x52>
	switch (baudrate) {
    5416:	f06f 0015 	mvn.w	r0, #21
}
    541a:	4770      	bx	lr
    541c:	0013b000 	.word	0x0013b000
    5420:	004ea000 	.word	0x004ea000
    5424:	000f4240 	.word	0x000f4240
    5428:	0003d090 	.word	0x0003d090
    542c:	00275000 	.word	0x00275000
    5430:	0075c000 	.word	0x0075c000
    5434:	003af000 	.word	0x003af000
    5438:	013a9000 	.word	0x013a9000

0000543c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5440:	4605      	mov	r5, r0
    5442:	460f      	mov	r7, r1
	return dev->data;
    5444:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5448:	f013 f840 	bl	184cc <k_is_in_isr>
    544c:	b920      	cbnz	r0, 5458 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    544e:	4b16      	ldr	r3, [pc, #88]	; (54a8 <uarte_nrfx_poll_out+0x6c>)
    5450:	781b      	ldrb	r3, [r3, #0]
    5452:	b1ab      	cbz	r3, 5480 <uarte_nrfx_poll_out+0x44>
    5454:	2300      	movs	r3, #0
    5456:	e000      	b.n	545a <uarte_nrfx_poll_out+0x1e>
    5458:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    545a:	b19b      	cbz	r3, 5484 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    545c:	f04f 0320 	mov.w	r3, #32
    5460:	f3ef 8411 	mrs	r4, BASEPRI
    5464:	f383 8812 	msr	BASEPRI_MAX, r3
    5468:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    546c:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    546e:	4628      	mov	r0, r5
    5470:	f00f fbe1 	bl	14c36 <is_tx_ready>
    5474:	b950      	cbnz	r0, 548c <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    5476:	f384 8811 	msr	BASEPRI, r4
    547a:	f3bf 8f6f 	isb	sy
}
    547e:	e7ed      	b.n	545c <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5480:	2301      	movs	r3, #1
    5482:	e7ea      	b.n	545a <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    5484:	4628      	mov	r0, r5
    5486:	f00f fcf7 	bl	14e78 <wait_tx_ready>
    548a:	4606      	mov	r6, r0
	}

	data->char_out = c;
    548c:	4641      	mov	r1, r8
    548e:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    5492:	2201      	movs	r2, #1
    5494:	4628      	mov	r0, r5
    5496:	f00f fbe8 	bl	14c6a <tx_start>
	__asm__ volatile(
    549a:	f386 8811 	msr	BASEPRI, r6
    549e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    54a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54a6:	bf00      	nop
    54a8:	2000f753 	.word	0x2000f753

000054ac <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    54ac:	b538      	push	{r3, r4, r5, lr}
    54ae:	4604      	mov	r4, r0
    54b0:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    54b2:	f101 0016 	add.w	r0, r1, #22
    54b6:	f000 fe3f 	bl	6138 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    54ba:	4b0c      	ldr	r3, [pc, #48]	; (54ec <endtx_stoptx_ppi_init+0x40>)
    54bc:	4298      	cmp	r0, r3
    54be:	d111      	bne.n	54e4 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    54c0:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    54c2:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    54c6:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    54c8:	4a09      	ldr	r2, [pc, #36]	; (54f0 <endtx_stoptx_ppi_init+0x44>)
    54ca:	33a2      	adds	r3, #162	; 0xa2
    54cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    54d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    54d4:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    54d6:	7da9      	ldrb	r1, [r5, #22]
    54d8:	2301      	movs	r3, #1
    54da:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    54dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    54e0:	2000      	movs	r0, #0
}
    54e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    54e4:	f06f 0004 	mvn.w	r0, #4
    54e8:	e7fb      	b.n	54e2 <endtx_stoptx_ppi_init+0x36>
    54ea:	bf00      	nop
    54ec:	0bad0000 	.word	0x0bad0000
    54f0:	4001f000 	.word	0x4001f000

000054f4 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    54f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    54f6:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    54f8:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    54fa:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    54fc:	2300      	movs	r3, #0
    54fe:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5502:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    5504:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5506:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    550a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    550c:	2b01      	cmp	r3, #1
    550e:	f000 8097 	beq.w	5640 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
    5512:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5516:	2301      	movs	r3, #1
    5518:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    551a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    551e:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5520:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5524:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5526:	2b01      	cmp	r3, #1
    5528:	f000 808c 	beq.w	5644 <uarte_instance_init+0x150>
        case 0: return NRF_P0;
    552c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5530:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    5534:	2203      	movs	r2, #3
    5536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    553a:	68e3      	ldr	r3, [r4, #12]
    553c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5540:	d00c      	beq.n	555c <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    5542:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
    5544:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5548:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    554a:	2b01      	cmp	r3, #1
    554c:	d07c      	beq.n	5648 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
    554e:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5552:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    5554:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    5558:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    555c:	68a2      	ldr	r2, [r4, #8]
    555e:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    5560:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    5564:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    5568:	6923      	ldr	r3, [r4, #16]
    556a:	f1b3 3fff 	cmp.w	r3, #4294967295
    556e:	d00c      	beq.n	558a <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    5570:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
    5572:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5576:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5578:	2b01      	cmp	r3, #1
    557a:	d067      	beq.n	564c <uarte_instance_init+0x158>
        case 0: return NRF_P0;
    557c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5580:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    5582:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    5586:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    558a:	6963      	ldr	r3, [r4, #20]
    558c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5590:	d017      	beq.n	55c2 <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
    5592:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5596:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5598:	2b01      	cmp	r3, #1
    559a:	d059      	beq.n	5650 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
    559c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    55a0:	2301      	movs	r3, #1
    55a2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    55a4:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    55a8:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    55aa:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    55ae:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55b0:	2b01      	cmp	r3, #1
    55b2:	d04f      	beq.n	5654 <uarte_instance_init+0x160>
        case 0: return NRF_P0;
    55b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    55b8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    55bc:	2203      	movs	r2, #3
    55be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    55c2:	6962      	ldr	r2, [r4, #20]
    55c4:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    55c6:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    55ca:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    55ce:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    55d0:	3104      	adds	r1, #4
    55d2:	f00f fac3 	bl	14b5c <uarte_nrfx_configure>
	if (err) {
    55d6:	4607      	mov	r7, r0
    55d8:	bb80      	cbnz	r0, 563c <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    55da:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    55dc:	f013 0f08 	tst.w	r3, #8
    55e0:	d13a      	bne.n	5658 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    55e2:	2308      	movs	r3, #8
    55e4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    55e8:	68e3      	ldr	r3, [r4, #12]
    55ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    55ee:	d00c      	beq.n	560a <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55f0:	2300      	movs	r3, #0
    55f2:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    55f6:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    55fa:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    55fe:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5602:	2301      	movs	r3, #1
    5604:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5608:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    560a:	6863      	ldr	r3, [r4, #4]
    560c:	f013 0f08 	tst.w	r3, #8
    5610:	d103      	bne.n	561a <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
    5612:	f44f 7380 	mov.w	r3, #256	; 0x100
    5616:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    561a:	6863      	ldr	r3, [r4, #4]
    561c:	f013 0f10 	tst.w	r3, #16
    5620:	d003      	beq.n	562a <uarte_instance_init+0x136>
    5622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5626:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    562a:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    562c:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5630:	2300      	movs	r3, #0
    5632:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5636:	2301      	movs	r3, #1
    5638:	60ab      	str	r3, [r5, #8]
    563a:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    563c:	4638      	mov	r0, r7
    563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    5640:	4a09      	ldr	r2, [pc, #36]	; (5668 <uarte_instance_init+0x174>)
    5642:	e768      	b.n	5516 <uarte_instance_init+0x22>
    5644:	4908      	ldr	r1, [pc, #32]	; (5668 <uarte_instance_init+0x174>)
    5646:	e773      	b.n	5530 <uarte_instance_init+0x3c>
    5648:	4f07      	ldr	r7, [pc, #28]	; (5668 <uarte_instance_init+0x174>)
    564a:	e782      	b.n	5552 <uarte_instance_init+0x5e>
    564c:	4f06      	ldr	r7, [pc, #24]	; (5668 <uarte_instance_init+0x174>)
    564e:	e797      	b.n	5580 <uarte_instance_init+0x8c>
    5650:	4905      	ldr	r1, [pc, #20]	; (5668 <uarte_instance_init+0x174>)
    5652:	e7a5      	b.n	55a0 <uarte_instance_init+0xac>
    5654:	4904      	ldr	r1, [pc, #16]	; (5668 <uarte_instance_init+0x174>)
    5656:	e7af      	b.n	55b8 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
    5658:	4631      	mov	r1, r6
    565a:	4628      	mov	r0, r5
    565c:	f7ff ff26 	bl	54ac <endtx_stoptx_ppi_init>
		if (err < 0) {
    5660:	2800      	cmp	r0, #0
    5662:	dabe      	bge.n	55e2 <uarte_instance_init+0xee>
			return err;
    5664:	4607      	mov	r7, r0
    5666:	e7e9      	b.n	563c <uarte_instance_init+0x148>
    5668:	50000300 	.word	0x50000300

0000566c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    566c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5670:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5674:	4b01      	ldr	r3, [pc, #4]	; (567c <set_comparator+0x10>)
    5676:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    567a:	4770      	bx	lr
    567c:	40011000 	.word	0x40011000

00005680 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5680:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5684:	4b01      	ldr	r3, [pc, #4]	; (568c <get_comparator+0xc>)
    5686:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    568a:	4770      	bx	lr
    568c:	40011000 	.word	0x40011000

00005690 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5694:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5696:	4a02      	ldr	r2, [pc, #8]	; (56a0 <event_enable+0x10>)
    5698:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    569c:	4770      	bx	lr
    569e:	bf00      	nop
    56a0:	40011000 	.word	0x40011000

000056a4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    56a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    56a8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    56aa:	4a02      	ldr	r2, [pc, #8]	; (56b4 <event_disable+0x10>)
    56ac:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    56b0:	4770      	bx	lr
    56b2:	bf00      	nop
    56b4:	40011000 	.word	0x40011000

000056b8 <counter>:
     return p_reg->COUNTER;
    56b8:	4b01      	ldr	r3, [pc, #4]	; (56c0 <counter+0x8>)
    56ba:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    56be:	4770      	bx	lr
    56c0:	40011000 	.word	0x40011000

000056c4 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    56c4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    56c6:	2301      	movs	r3, #1
    56c8:	4083      	lsls	r3, r0
    56ca:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    56cc:	4a10      	ldr	r2, [pc, #64]	; (5710 <compare_int_lock+0x4c>)
    56ce:	f3bf 8f5b 	dmb	ish
    56d2:	e852 1f00 	ldrex	r1, [r2]
    56d6:	ea01 0c04 	and.w	ip, r1, r4
    56da:	e842 ce00 	strex	lr, ip, [r2]
    56de:	f1be 0f00 	cmp.w	lr, #0
    56e2:	d1f6      	bne.n	56d2 <compare_int_lock+0xe>
    56e4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    56e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    56ec:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    56f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    56f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    56f8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    56fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5700:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5704:	420b      	tst	r3, r1
}
    5706:	bf14      	ite	ne
    5708:	2001      	movne	r0, #1
    570a:	2000      	moveq	r0, #0
    570c:	bd10      	pop	{r4, pc}
    570e:	bf00      	nop
    5710:	2000f1b8 	.word	0x2000f1b8

00005714 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5714:	b570      	push	{r4, r5, r6, lr}
    5716:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5718:	f00f fc09 	bl	14f2e <full_int_lock>
    571c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    571e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5722:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    5724:	4a17      	ldr	r2, [pc, #92]	; (5784 <channel_processing_check_and_clear+0x70>)
    5726:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    572a:	4213      	tst	r3, r2
    572c:	d105      	bne.n	573a <channel_processing_check_and_clear+0x26>
	bool result = false;
    572e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    5730:	4628      	mov	r0, r5
    5732:	f00f fc05 	bl	14f40 <full_int_unlock>

	return result;
}
    5736:	4630      	mov	r0, r6
    5738:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    573a:	2301      	movs	r3, #1
    573c:	40a3      	lsls	r3, r4
    573e:	43db      	mvns	r3, r3
    5740:	4a11      	ldr	r2, [pc, #68]	; (5788 <channel_processing_check_and_clear+0x74>)
    5742:	f3bf 8f5b 	dmb	ish
    5746:	e852 1f00 	ldrex	r1, [r2]
    574a:	ea01 0003 	and.w	r0, r1, r3
    574e:	e842 0600 	strex	r6, r0, [r2]
    5752:	2e00      	cmp	r6, #0
    5754:	d1f7      	bne.n	5746 <channel_processing_check_and_clear+0x32>
    5756:	f3bf 8f5b 	dmb	ish
    575a:	b959      	cbnz	r1, 5774 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    575c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    5760:	009b      	lsls	r3, r3, #2
    5762:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5764:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5768:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    576c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    576e:	b113      	cbz	r3, 5776 <channel_processing_check_and_clear+0x62>
    5770:	2301      	movs	r3, #1
    5772:	e000      	b.n	5776 <channel_processing_check_and_clear+0x62>
    5774:	2301      	movs	r3, #1
		if (result) {
    5776:	461e      	mov	r6, r3
    5778:	2b00      	cmp	r3, #0
    577a:	d0d9      	beq.n	5730 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    577c:	4620      	mov	r0, r4
    577e:	f00f fbc7 	bl	14f10 <event_clear>
    5782:	e7d5      	b.n	5730 <channel_processing_check_and_clear+0x1c>
    5784:	40011000 	.word	0x40011000
    5788:	2000f1b4 	.word	0x2000f1b4

0000578c <compare_int_unlock>:
	if (key) {
    578c:	b901      	cbnz	r1, 5790 <compare_int_unlock+0x4>
}
    578e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    5790:	2301      	movs	r3, #1
    5792:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5794:	4a11      	ldr	r2, [pc, #68]	; (57dc <compare_int_unlock+0x50>)
    5796:	f3bf 8f5b 	dmb	ish
    579a:	e852 1f00 	ldrex	r1, [r2]
    579e:	4319      	orrs	r1, r3
    57a0:	e842 1c00 	strex	ip, r1, [r2]
    57a4:	f1bc 0f00 	cmp.w	ip, #0
    57a8:	d1f7      	bne.n	579a <compare_int_unlock+0xe>
    57aa:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    57ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    57b2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    57b4:	4a0a      	ldr	r2, [pc, #40]	; (57e0 <compare_int_unlock+0x54>)
    57b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    57ba:	f3bf 8f5b 	dmb	ish
    57be:	4b09      	ldr	r3, [pc, #36]	; (57e4 <compare_int_unlock+0x58>)
    57c0:	681b      	ldr	r3, [r3, #0]
    57c2:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    57c6:	fa23 f000 	lsr.w	r0, r3, r0
    57ca:	f010 0f01 	tst.w	r0, #1
    57ce:	d0de      	beq.n	578e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57d0:	4b05      	ldr	r3, [pc, #20]	; (57e8 <compare_int_unlock+0x5c>)
    57d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    57d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    57da:	e7d8      	b.n	578e <compare_int_unlock+0x2>
    57dc:	2000f1b8 	.word	0x2000f1b8
    57e0:	40011000 	.word	0x40011000
    57e4:	2000f1b4 	.word	0x2000f1b4
    57e8:	e000e100 	.word	0xe000e100

000057ec <sys_clock_timeout_handler>:
{
    57ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57ee:	4607      	mov	r7, r0
    57f0:	4614      	mov	r4, r2
    57f2:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    57f4:	4610      	mov	r0, r2
    57f6:	4619      	mov	r1, r3
    57f8:	f00f fb96 	bl	14f28 <absolute_time_to_cc>
    57fc:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    57fe:	4b15      	ldr	r3, [pc, #84]	; (5854 <sys_clock_timeout_handler+0x68>)
    5800:	681a      	ldr	r2, [r3, #0]
    5802:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    5804:	601c      	str	r4, [r3, #0]
    5806:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5808:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    580c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5810:	d308      	bcc.n	5824 <sys_clock_timeout_handler+0x38>
	return false;
    5812:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5814:	f00c fb94 	bl	11f40 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5818:	4638      	mov	r0, r7
    581a:	f7ff ff31 	bl	5680 <get_comparator>
    581e:	42a8      	cmp	r0, r5
    5820:	d00c      	beq.n	583c <sys_clock_timeout_handler+0x50>
}
    5822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5824:	4b0c      	ldr	r3, [pc, #48]	; (5858 <sys_clock_timeout_handler+0x6c>)
    5826:	6819      	ldr	r1, [r3, #0]
    5828:	0a0b      	lsrs	r3, r1, #8
    582a:	060a      	lsls	r2, r1, #24
    582c:	1952      	adds	r2, r2, r5
    582e:	f143 0300 	adc.w	r3, r3, #0
    5832:	490a      	ldr	r1, [pc, #40]	; (585c <sys_clock_timeout_handler+0x70>)
    5834:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5838:	2401      	movs	r4, #1
    583a:	e7eb      	b.n	5814 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    583c:	b11c      	cbz	r4, 5846 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    583e:	4638      	mov	r0, r7
    5840:	f7ff ff26 	bl	5690 <event_enable>
}
    5844:	e7ed      	b.n	5822 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    5846:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    584a:	4638      	mov	r0, r7
    584c:	f7ff ff0e 	bl	566c <set_comparator>
    5850:	e7f5      	b.n	583e <sys_clock_timeout_handler+0x52>
    5852:	bf00      	nop
    5854:	20000388 	.word	0x20000388
    5858:	2000f1bc 	.word	0x2000f1bc
    585c:	20000370 	.word	0x20000370

00005860 <z_nrf_rtc_timer_read>:
{
    5860:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5862:	4b0d      	ldr	r3, [pc, #52]	; (5898 <z_nrf_rtc_timer_read+0x38>)
    5864:	681b      	ldr	r3, [r3, #0]
    5866:	0a1d      	lsrs	r5, r3, #8
    5868:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    586a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    586e:	f7ff ff23 	bl	56b8 <counter>
    5872:	4603      	mov	r3, r0
	val += cntr;
    5874:	1820      	adds	r0, r4, r0
    5876:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    587a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    587e:	d20a      	bcs.n	5896 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    5880:	4b06      	ldr	r3, [pc, #24]	; (589c <z_nrf_rtc_timer_read+0x3c>)
    5882:	e9d3 2300 	ldrd	r2, r3, [r3]
    5886:	4299      	cmp	r1, r3
    5888:	bf08      	it	eq
    588a:	4290      	cmpeq	r0, r2
    588c:	d203      	bcs.n	5896 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    588e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5892:	f141 0100 	adc.w	r1, r1, #0
}
    5896:	bd38      	pop	{r3, r4, r5, pc}
    5898:	2000f1bc 	.word	0x2000f1bc
    589c:	20000370 	.word	0x20000370

000058a0 <compare_set_nolocks>:
{
    58a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    58a4:	4606      	mov	r6, r0
    58a6:	4614      	mov	r4, r2
    58a8:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    58aa:	4610      	mov	r0, r2
    58ac:	4619      	mov	r1, r3
    58ae:	f00f fb3b 	bl	14f28 <absolute_time_to_cc>
    58b2:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    58b4:	f7ff ffd4 	bl	5860 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    58b8:	42a9      	cmp	r1, r5
    58ba:	bf08      	it	eq
    58bc:	42a0      	cmpeq	r0, r4
    58be:	d21e      	bcs.n	58fe <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    58c0:	ebb4 0800 	subs.w	r8, r4, r0
    58c4:	eb65 0901 	sbc.w	r9, r5, r1
    58c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    58cc:	2300      	movs	r3, #0
    58ce:	454b      	cmp	r3, r9
    58d0:	bf08      	it	eq
    58d2:	4542      	cmpeq	r2, r8
    58d4:	d32e      	bcc.n	5934 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    58d6:	4b19      	ldr	r3, [pc, #100]	; (593c <compare_set_nolocks+0x9c>)
    58d8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    58dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    58e0:	42ab      	cmp	r3, r5
    58e2:	bf08      	it	eq
    58e4:	42a2      	cmpeq	r2, r4
    58e6:	d018      	beq.n	591a <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    58e8:	4639      	mov	r1, r7
    58ea:	4630      	mov	r0, r6
    58ec:	f00f fb2d 	bl	14f4a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    58f0:	4639      	mov	r1, r7
    58f2:	f00f fb09 	bl	14f08 <counter_sub>
    58f6:	1824      	adds	r4, r4, r0
    58f8:	f145 0500 	adc.w	r5, r5, #0
    58fc:	e00d      	b.n	591a <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    58fe:	2301      	movs	r3, #1
    5900:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5902:	4a0f      	ldr	r2, [pc, #60]	; (5940 <compare_set_nolocks+0xa0>)
    5904:	f3bf 8f5b 	dmb	ish
    5908:	e852 1f00 	ldrex	r1, [r2]
    590c:	4319      	orrs	r1, r3
    590e:	e842 1000 	strex	r0, r1, [r2]
    5912:	2800      	cmp	r0, #0
    5914:	d1f8      	bne.n	5908 <compare_set_nolocks+0x68>
    5916:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    591a:	4b08      	ldr	r3, [pc, #32]	; (593c <compare_set_nolocks+0x9c>)
    591c:	0132      	lsls	r2, r6, #4
    591e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    5922:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    5926:	9908      	ldr	r1, [sp, #32]
    5928:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    592a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    592c:	6073      	str	r3, [r6, #4]
	return ret;
    592e:	2000      	movs	r0, #0
}
    5930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    5934:	f06f 0015 	mvn.w	r0, #21
    5938:	e7fa      	b.n	5930 <compare_set_nolocks+0x90>
    593a:	bf00      	nop
    593c:	20000378 	.word	0x20000378
    5940:	2000f1b4 	.word	0x2000f1b4

00005944 <process_channel>:

static void process_channel(int32_t chan)
{
    5944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5948:	b082      	sub	sp, #8
    594a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    594c:	f7ff fee2 	bl	5714 <channel_processing_check_and_clear>
    5950:	b910      	cbnz	r0, 5958 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    5952:	b002      	add	sp, #8
    5954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    5958:	f7ff ff82 	bl	5860 <z_nrf_rtc_timer_read>
    595c:	4606      	mov	r6, r0
    595e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    5960:	f00f fae5 	bl	14f2e <full_int_lock>
    5964:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    5966:	4b13      	ldr	r3, [pc, #76]	; (59b4 <process_channel+0x70>)
    5968:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    596c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5970:	454f      	cmp	r7, r9
    5972:	bf08      	it	eq
    5974:	4546      	cmpeq	r6, r8
    5976:	d20b      	bcs.n	5990 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5978:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    597a:	4650      	mov	r0, sl
    597c:	f00f fae0 	bl	14f40 <full_int_unlock>
		if (handler) {
    5980:	2e00      	cmp	r6, #0
    5982:	d0e6      	beq.n	5952 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    5984:	9500      	str	r5, [sp, #0]
    5986:	4642      	mov	r2, r8
    5988:	464b      	mov	r3, r9
    598a:	4620      	mov	r0, r4
    598c:	47b0      	blx	r6
}
    598e:	e7e0      	b.n	5952 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5990:	4a08      	ldr	r2, [pc, #32]	; (59b4 <process_channel+0x70>)
    5992:	0123      	lsls	r3, r4, #4
    5994:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5998:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    599a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    599c:	2000      	movs	r0, #0
    599e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    59a0:	f04f 32ff 	mov.w	r2, #4294967295
    59a4:	f04f 33ff 	mov.w	r3, #4294967295
    59a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    59ac:	4620      	mov	r0, r4
    59ae:	f7ff fe79 	bl	56a4 <event_disable>
    59b2:	e7e2      	b.n	597a <process_channel+0x36>
    59b4:	20000378 	.word	0x20000378

000059b8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    59b8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    59ba:	4b0d      	ldr	r3, [pc, #52]	; (59f0 <rtc_nrf_isr+0x38>)
    59bc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    59c0:	f013 0f02 	tst.w	r3, #2
    59c4:	d00a      	beq.n	59dc <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59c6:	4b0b      	ldr	r3, [pc, #44]	; (59f4 <rtc_nrf_isr+0x3c>)
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	b13b      	cbz	r3, 59dc <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    59cc:	4b09      	ldr	r3, [pc, #36]	; (59f4 <rtc_nrf_isr+0x3c>)
    59ce:	2200      	movs	r2, #0
    59d0:	601a      	str	r2, [r3, #0]
    59d2:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    59d4:	4a08      	ldr	r2, [pc, #32]	; (59f8 <rtc_nrf_isr+0x40>)
    59d6:	6813      	ldr	r3, [r2, #0]
    59d8:	3301      	adds	r3, #1
    59da:	6013      	str	r3, [r2, #0]
{
    59dc:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    59de:	2c00      	cmp	r4, #0
    59e0:	dd00      	ble.n	59e4 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    59e2:	bd10      	pop	{r4, pc}
		process_channel(chan);
    59e4:	4620      	mov	r0, r4
    59e6:	f7ff ffad 	bl	5944 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    59ea:	3401      	adds	r4, #1
    59ec:	e7f7      	b.n	59de <rtc_nrf_isr+0x26>
    59ee:	bf00      	nop
    59f0:	40011000 	.word	0x40011000
    59f4:	40011104 	.word	0x40011104
    59f8:	2000f1bc 	.word	0x2000f1bc

000059fc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    59fc:	b530      	push	{r4, r5, lr}
    59fe:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    5a00:	2300      	movs	r3, #0
    5a02:	4a1f      	ldr	r2, [pc, #124]	; (5a80 <sys_clock_driver_init+0x84>)
    5a04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5a08:	2b00      	cmp	r3, #0
    5a0a:	dd27      	ble.n	5a5c <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    5a0c:	4c1c      	ldr	r4, [pc, #112]	; (5a80 <sys_clock_driver_init+0x84>)
    5a0e:	2502      	movs	r5, #2
    5a10:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a14:	4b1b      	ldr	r3, [pc, #108]	; (5a84 <sys_clock_driver_init+0x88>)
    5a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5a1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5a1e:	2200      	movs	r2, #0
    5a20:	2101      	movs	r1, #1
    5a22:	2011      	movs	r0, #17
    5a24:	f7fe fbc8 	bl	41b8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5a28:	2011      	movs	r0, #17
    5a2a:	f7fe fba7 	bl	417c <arch_irq_enable>
    5a2e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5a32:	2301      	movs	r3, #1
    5a34:	4a14      	ldr	r2, [pc, #80]	; (5a88 <sys_clock_driver_init+0x8c>)
    5a36:	6013      	str	r3, [r2, #0]
    5a38:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5a3a:	4a14      	ldr	r2, [pc, #80]	; (5a8c <sys_clock_driver_init+0x90>)
    5a3c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5a3e:	2400      	movs	r4, #0
    5a40:	9401      	str	r4, [sp, #4]
    5a42:	4b13      	ldr	r3, [pc, #76]	; (5a90 <sys_clock_driver_init+0x94>)
    5a44:	9300      	str	r3, [sp, #0]
    5a46:	4a13      	ldr	r2, [pc, #76]	; (5a94 <sys_clock_driver_init+0x98>)
    5a48:	2300      	movs	r3, #0
    5a4a:	4620      	mov	r0, r4
    5a4c:	f00f fab8 	bl	14fc0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5a50:	4628      	mov	r0, r5
    5a52:	f7ff f901 	bl	4c58 <z_nrf_clock_control_lf_on>

	return 0;
}
    5a56:	4620      	mov	r0, r4
    5a58:	b003      	add	sp, #12
    5a5a:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5a5c:	4a0e      	ldr	r2, [pc, #56]	; (5a98 <sys_clock_driver_init+0x9c>)
    5a5e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5a62:	f04f 30ff 	mov.w	r0, #4294967295
    5a66:	f04f 31ff 	mov.w	r1, #4294967295
    5a6a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5a72:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    5a74:	4902      	ldr	r1, [pc, #8]	; (5a80 <sys_clock_driver_init+0x84>)
    5a76:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5a7a:	3301      	adds	r3, #1
    5a7c:	e7c4      	b.n	5a08 <sys_clock_driver_init+0xc>
    5a7e:	bf00      	nop
    5a80:	40011000 	.word	0x40011000
    5a84:	e000e100 	.word	0xe000e100
    5a88:	40011008 	.word	0x40011008
    5a8c:	2000f1b8 	.word	0x2000f1b8
    5a90:	000057ed 	.word	0x000057ed
    5a94:	007fffff 	.word	0x007fffff
    5a98:	20000378 	.word	0x20000378

00005a9c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    5a9c:	b510      	push	{r4, lr}
    5a9e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5aa0:	f1b0 3fff 	cmp.w	r0, #4294967295
    5aa4:	d007      	beq.n	5ab6 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5aa6:	1e44      	subs	r4, r0, #1
    5aa8:	2c00      	cmp	r4, #0
    5aaa:	dd07      	ble.n	5abc <sys_clock_set_timeout+0x20>
    5aac:	4b11      	ldr	r3, [pc, #68]	; (5af4 <sys_clock_set_timeout+0x58>)
    5aae:	429c      	cmp	r4, r3
    5ab0:	dd05      	ble.n	5abe <sys_clock_set_timeout+0x22>
    5ab2:	4c11      	ldr	r4, [pc, #68]	; (5af8 <sys_clock_set_timeout+0x5c>)
    5ab4:	e003      	b.n	5abe <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5ab6:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    5aba:	e7f4      	b.n	5aa6 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5abc:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5abe:	f7ff fecf 	bl	5860 <z_nrf_rtc_timer_read>
    5ac2:	4b0e      	ldr	r3, [pc, #56]	; (5afc <sys_clock_set_timeout+0x60>)
    5ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
    5ac8:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    5aca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5ace:	d300      	bcc.n	5ad2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5ad0:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5ad2:	4404      	add	r4, r0
    5ad4:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5ad6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    5ada:	d300      	bcc.n	5ade <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    5adc:	4c06      	ldr	r4, [pc, #24]	; (5af8 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5ade:	2000      	movs	r0, #0
    5ae0:	9001      	str	r0, [sp, #4]
    5ae2:	4907      	ldr	r1, [pc, #28]	; (5b00 <sys_clock_set_timeout+0x64>)
    5ae4:	9100      	str	r1, [sp, #0]
    5ae6:	1912      	adds	r2, r2, r4
    5ae8:	f143 0300 	adc.w	r3, r3, #0
    5aec:	f00f fa68 	bl	14fc0 <compare_set>
}
    5af0:	b002      	add	sp, #8
    5af2:	bd10      	pop	{r4, pc}
    5af4:	007ffffe 	.word	0x007ffffe
    5af8:	007fffff 	.word	0x007fffff
    5afc:	20000388 	.word	0x20000388
    5b00:	000057ed 	.word	0x000057ed

00005b04 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    5b04:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5b06:	f7ff feab 	bl	5860 <z_nrf_rtc_timer_read>
    5b0a:	4b02      	ldr	r3, [pc, #8]	; (5b14 <sys_clock_elapsed+0x10>)
    5b0c:	681b      	ldr	r3, [r3, #0]
}
    5b0e:	1ac0      	subs	r0, r0, r3
    5b10:	bd08      	pop	{r3, pc}
    5b12:	bf00      	nop
    5b14:	20000388 	.word	0x20000388

00005b18 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b18:	4b03      	ldr	r3, [pc, #12]	; (5b28 <nrf52_errata_36+0x10>)
    5b1a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5b1c:	2b08      	cmp	r3, #8
    5b1e:	d001      	beq.n	5b24 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5b20:	2000      	movs	r0, #0
    5b22:	4770      	bx	lr
                        return true;
    5b24:	2001      	movs	r0, #1
    #endif
}
    5b26:	4770      	bx	lr
    5b28:	10000130 	.word	0x10000130

00005b2c <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b2c:	4b03      	ldr	r3, [pc, #12]	; (5b3c <nrf52_errata_66+0x10>)
    5b2e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5b30:	2b08      	cmp	r3, #8
    5b32:	d001      	beq.n	5b38 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5b34:	2000      	movs	r0, #0
    5b36:	4770      	bx	lr
                        return true;
    5b38:	2001      	movs	r0, #1
    #endif
}
    5b3a:	4770      	bx	lr
    5b3c:	10000130 	.word	0x10000130

00005b40 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b40:	4b08      	ldr	r3, [pc, #32]	; (5b64 <nrf52_errata_98+0x24>)
    5b42:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5b44:	3304      	adds	r3, #4
    5b46:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5b48:	2a08      	cmp	r2, #8
    5b4a:	d001      	beq.n	5b50 <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5b4c:	2000      	movs	r0, #0
    5b4e:	4770      	bx	lr
                switch(var2)
    5b50:	2b00      	cmp	r3, #0
    5b52:	d804      	bhi.n	5b5e <nrf52_errata_98+0x1e>
    5b54:	e8df f003 	tbb	[pc, r3]
    5b58:	01          	.byte	0x01
    5b59:	00          	.byte	0x00
            if (var1 == 0x08)
    5b5a:	2001      	movs	r0, #1
    5b5c:	4770      	bx	lr
                        return false;
    5b5e:	2000      	movs	r0, #0
    #endif
}
    5b60:	4770      	bx	lr
    5b62:	bf00      	nop
    5b64:	10000130 	.word	0x10000130

00005b68 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b68:	4b08      	ldr	r3, [pc, #32]	; (5b8c <nrf52_errata_103+0x24>)
    5b6a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5b6c:	3304      	adds	r3, #4
    5b6e:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5b70:	2a08      	cmp	r2, #8
    5b72:	d001      	beq.n	5b78 <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5b74:	2000      	movs	r0, #0
    5b76:	4770      	bx	lr
                switch(var2)
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d804      	bhi.n	5b86 <nrf52_errata_103+0x1e>
    5b7c:	e8df f003 	tbb	[pc, r3]
    5b80:	01          	.byte	0x01
    5b81:	00          	.byte	0x00
            if (var1 == 0x08)
    5b82:	2001      	movs	r0, #1
    5b84:	4770      	bx	lr
                        return false;
    5b86:	2000      	movs	r0, #0
    #endif
}
    5b88:	4770      	bx	lr
    5b8a:	bf00      	nop
    5b8c:	10000130 	.word	0x10000130

00005b90 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b90:	4b08      	ldr	r3, [pc, #32]	; (5bb4 <nrf52_errata_115+0x24>)
    5b92:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5b94:	3304      	adds	r3, #4
    5b96:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5b98:	2a08      	cmp	r2, #8
    5b9a:	d001      	beq.n	5ba0 <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5b9c:	2000      	movs	r0, #0
    5b9e:	4770      	bx	lr
                switch(var2)
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	d804      	bhi.n	5bae <nrf52_errata_115+0x1e>
    5ba4:	e8df f003 	tbb	[pc, r3]
    5ba8:	01          	.byte	0x01
    5ba9:	00          	.byte	0x00
            if (var1 == 0x08)
    5baa:	2001      	movs	r0, #1
    5bac:	4770      	bx	lr
                        return false;
    5bae:	2000      	movs	r0, #0
    #endif
}
    5bb0:	4770      	bx	lr
    5bb2:	bf00      	nop
    5bb4:	10000130 	.word	0x10000130

00005bb8 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5bb8:	4b08      	ldr	r3, [pc, #32]	; (5bdc <nrf52_errata_120+0x24>)
    5bba:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5bbc:	3304      	adds	r3, #4
    5bbe:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5bc0:	2a08      	cmp	r2, #8
    5bc2:	d001      	beq.n	5bc8 <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5bc4:	2000      	movs	r0, #0
    5bc6:	4770      	bx	lr
                switch(var2)
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d804      	bhi.n	5bd6 <nrf52_errata_120+0x1e>
    5bcc:	e8df f003 	tbb	[pc, r3]
    5bd0:	01          	.byte	0x01
    5bd1:	00          	.byte	0x00
            if (var1 == 0x08)
    5bd2:	2001      	movs	r0, #1
    5bd4:	4770      	bx	lr
                        return false;
    5bd6:	2000      	movs	r0, #0
    #endif
}
    5bd8:	4770      	bx	lr
    5bda:	bf00      	nop
    5bdc:	10000130 	.word	0x10000130

00005be0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5be0:	4b03      	ldr	r3, [pc, #12]	; (5bf0 <nrf52_errata_136+0x10>)
    5be2:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5be4:	2b08      	cmp	r3, #8
    5be6:	d001      	beq.n	5bec <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5be8:	2000      	movs	r0, #0
    5bea:	4770      	bx	lr
                        return true;
    5bec:	2001      	movs	r0, #1
    #endif
}
    5bee:	4770      	bx	lr
    5bf0:	10000130 	.word	0x10000130

00005bf4 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5bf4:	4b06      	ldr	r3, [pc, #24]	; (5c10 <nrf52_errata_249+0x1c>)
    5bf6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5bf8:	4a06      	ldr	r2, [pc, #24]	; (5c14 <nrf52_errata_249+0x20>)
    5bfa:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5bfc:	2b08      	cmp	r3, #8
    5bfe:	d001      	beq.n	5c04 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5c00:	2000      	movs	r0, #0
    5c02:	4770      	bx	lr
                switch(var2)
    5c04:	2a03      	cmp	r2, #3
    5c06:	d801      	bhi.n	5c0c <nrf52_errata_249+0x18>
    5c08:	2000      	movs	r0, #0
    5c0a:	4770      	bx	lr
                        return true;
    5c0c:	2001      	movs	r0, #1
    #endif
}
    5c0e:	4770      	bx	lr
    5c10:	10000130 	.word	0x10000130
    5c14:	10000134 	.word	0x10000134

00005c18 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5c18:	4b02      	ldr	r3, [pc, #8]	; (5c24 <nvmc_wait+0xc>)
    5c1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5c1e:	2b00      	cmp	r3, #0
    5c20:	d0fa      	beq.n	5c18 <nvmc_wait>
}
    5c22:	4770      	bx	lr
    5c24:	4001e000 	.word	0x4001e000

00005c28 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    5c28:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5c2a:	4b03      	ldr	r3, [pc, #12]	; (5c38 <nvmc_config+0x10>)
    5c2c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    5c30:	f7ff fff2 	bl	5c18 <nvmc_wait>
}
    5c34:	bd08      	pop	{r3, pc}
    5c36:	bf00      	nop
    5c38:	4001e000 	.word	0x4001e000

00005c3c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5c3c:	4b01      	ldr	r3, [pc, #4]	; (5c44 <SystemCoreClockUpdate+0x8>)
    5c3e:	4a02      	ldr	r2, [pc, #8]	; (5c48 <SystemCoreClockUpdate+0xc>)
    5c40:	601a      	str	r2, [r3, #0]
}
    5c42:	4770      	bx	lr
    5c44:	2000008c 	.word	0x2000008c
    5c48:	03d09000 	.word	0x03d09000

00005c4c <SystemInit>:

void SystemInit(void)
{
    5c4c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5c4e:	f7ff ff63 	bl	5b18 <nrf52_errata_36>
    5c52:	b140      	cbz	r0, 5c66 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c58:	2200      	movs	r2, #0
    5c5a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5c5e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5c62:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    5c66:	f7ff ff61 	bl	5b2c <nrf52_errata_66>
    5c6a:	2800      	cmp	r0, #0
    5c6c:	d046      	beq.n	5cfc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c72:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5c76:	4b56      	ldr	r3, [pc, #344]	; (5dd0 <SystemInit+0x184>)
    5c78:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5c7c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5c80:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5c84:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5c88:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5c8c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5c90:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5c94:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5c98:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5c9c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5ca0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5ca4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5ca8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5cac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5cb0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5cb4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5cb8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5cbc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5cc0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5cc4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5cc8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5ccc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5cd0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5cd4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5cd8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5cdc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5ce0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5ce4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5ce8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5cec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5cf0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5cf4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5cf8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5cfc:	f7ff ff20 	bl	5b40 <nrf52_errata_98>
    5d00:	b110      	cbz	r0, 5d08 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5d02:	4b34      	ldr	r3, [pc, #208]	; (5dd4 <SystemInit+0x188>)
    5d04:	4a34      	ldr	r2, [pc, #208]	; (5dd8 <SystemInit+0x18c>)
    5d06:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5d08:	f7ff ff2e 	bl	5b68 <nrf52_errata_103>
    5d0c:	b118      	cbz	r0, 5d16 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5d0e:	4b33      	ldr	r3, [pc, #204]	; (5ddc <SystemInit+0x190>)
    5d10:	22fb      	movs	r2, #251	; 0xfb
    5d12:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5d16:	f7ff ff3b 	bl	5b90 <nrf52_errata_115>
    5d1a:	b148      	cbz	r0, 5d30 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5d1c:	4930      	ldr	r1, [pc, #192]	; (5de0 <SystemInit+0x194>)
    5d1e:	680b      	ldr	r3, [r1, #0]
    5d20:	f023 030f 	bic.w	r3, r3, #15
    5d24:	4a2f      	ldr	r2, [pc, #188]	; (5de4 <SystemInit+0x198>)
    5d26:	6812      	ldr	r2, [r2, #0]
    5d28:	f002 020f 	and.w	r2, r2, #15
    5d2c:	4313      	orrs	r3, r2
    5d2e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5d30:	f7ff ff42 	bl	5bb8 <nrf52_errata_120>
    5d34:	b118      	cbz	r0, 5d3e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5d36:	4b2c      	ldr	r3, [pc, #176]	; (5de8 <SystemInit+0x19c>)
    5d38:	f44f 7200 	mov.w	r2, #512	; 0x200
    5d3c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5d3e:	f7ff ff4f 	bl	5be0 <nrf52_errata_136>
    5d42:	b160      	cbz	r0, 5d5e <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5d4c:	f013 0f01 	tst.w	r3, #1
    5d50:	d005      	beq.n	5d5e <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d56:	f06f 0201 	mvn.w	r2, #1
    5d5a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    5d5e:	f7ff ff49 	bl	5bf4 <nrf52_errata_249>
    5d62:	b138      	cbz	r0, 5d74 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5d64:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5d68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d70:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5d74:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5d78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	db08      	blt.n	5d92 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5d80:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5d84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5d88:	2b00      	cmp	r3, #0
    5d8a:	db02      	blt.n	5d92 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    5d8c:	f7ff ff56 	bl	5c3c <SystemCoreClockUpdate>
}
    5d90:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    5d92:	2001      	movs	r0, #1
    5d94:	f7ff ff48 	bl	5c28 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5d98:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    5d9c:	2512      	movs	r5, #18
    5d9e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    5da2:	f7ff ff39 	bl	5c18 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5da6:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    5daa:	f7ff ff35 	bl	5c18 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    5dae:	2000      	movs	r0, #0
    5db0:	f7ff ff3a 	bl	5c28 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    5db4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5db8:	490c      	ldr	r1, [pc, #48]	; (5dec <SystemInit+0x1a0>)
    5dba:	68ca      	ldr	r2, [r1, #12]
    5dbc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5dc0:	4b0b      	ldr	r3, [pc, #44]	; (5df0 <SystemInit+0x1a4>)
    5dc2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5dc4:	60cb      	str	r3, [r1, #12]
    5dc6:	f3bf 8f4f 	dsb	sy
    __NOP();
    5dca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5dcc:	e7fd      	b.n	5dca <SystemInit+0x17e>
    5dce:	bf00      	nop
    5dd0:	4000c000 	.word	0x4000c000
    5dd4:	4000568c 	.word	0x4000568c
    5dd8:	00038148 	.word	0x00038148
    5ddc:	4000f000 	.word	0x4000f000
    5de0:	40000ee4 	.word	0x40000ee4
    5de4:	10000258 	.word	0x10000258
    5de8:	40029640 	.word	0x40029640
    5dec:	e000ed00 	.word	0xe000ed00
    5df0:	05fa0004 	.word	0x05fa0004

00005df4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5df4:	4b06      	ldr	r3, [pc, #24]	; (5e10 <nrfx_clock_init+0x1c>)
    5df6:	791b      	ldrb	r3, [r3, #4]
    5df8:	b93b      	cbnz	r3, 5e0a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5dfa:	4b05      	ldr	r3, [pc, #20]	; (5e10 <nrfx_clock_init+0x1c>)
    5dfc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5dfe:	2201      	movs	r2, #1
    5e00:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    5e02:	2200      	movs	r2, #0
    5e04:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5e06:	4803      	ldr	r0, [pc, #12]	; (5e14 <nrfx_clock_init+0x20>)
    5e08:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5e0a:	4803      	ldr	r0, [pc, #12]	; (5e18 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5e0c:	4770      	bx	lr
    5e0e:	bf00      	nop
    5e10:	2000f1c0 	.word	0x2000f1c0
    5e14:	0bad0000 	.word	0x0bad0000
    5e18:	0bad000c 	.word	0x0bad000c

00005e1c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5e1c:	b110      	cbz	r0, 5e24 <nrfx_clock_start+0x8>
    5e1e:	2801      	cmp	r0, #1
    5e20:	d025      	beq.n	5e6e <nrfx_clock_start+0x52>
    5e22:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5e24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5e28:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5e2c:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5e30:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5e34:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5e38:	d111      	bne.n	5e5e <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e3e:	2200      	movs	r2, #0
    5e40:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e44:	4b0f      	ldr	r3, [pc, #60]	; (5e84 <nrfx_clock_start+0x68>)
    5e46:	2200      	movs	r2, #0
    5e48:	601a      	str	r2, [r3, #0]
    5e4a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e50:	2202      	movs	r2, #2
    5e52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e56:	3308      	adds	r3, #8
    5e58:	2201      	movs	r2, #1
    5e5a:	601a      	str	r2, [r3, #0]
}
    5e5c:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5e5e:	2b01      	cmp	r3, #1
    5e60:	d1eb      	bne.n	5e3a <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e66:	2201      	movs	r2, #1
    5e68:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5e6c:	e7ea      	b.n	5e44 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e6e:	4b06      	ldr	r3, [pc, #24]	; (5e88 <nrfx_clock_start+0x6c>)
    5e70:	2200      	movs	r2, #0
    5e72:	601a      	str	r2, [r3, #0]
    5e74:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e7a:	2201      	movs	r2, #1
    5e7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e80:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    5e82:	4770      	bx	lr
    5e84:	40000104 	.word	0x40000104
    5e88:	40000100 	.word	0x40000100

00005e8c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5e8c:	b530      	push	{r4, r5, lr}
    5e8e:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5e90:	4604      	mov	r4, r0
    5e92:	b118      	cbz	r0, 5e9c <nrfx_clock_stop+0x10>
    5e94:	2801      	cmp	r0, #1
    5e96:	d013      	beq.n	5ec0 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5e98:	b003      	add	sp, #12
    5e9a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    5e9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ea0:	2202      	movs	r2, #2
    5ea2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ea6:	f503 7382 	add.w	r3, r3, #260	; 0x104
    5eaa:	2200      	movs	r2, #0
    5eac:	601a      	str	r2, [r3, #0]
    5eae:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5eb0:	4b39      	ldr	r3, [pc, #228]	; (5f98 <nrfx_clock_stop+0x10c>)
    5eb2:	2201      	movs	r2, #1
    5eb4:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5eb6:	2c01      	cmp	r4, #1
    5eb8:	d00f      	beq.n	5eda <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5eba:	f242 7510 	movw	r5, #10000	; 0x2710
    5ebe:	e052      	b.n	5f66 <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    5ec0:	2301      	movs	r3, #1
    5ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5ec6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5eca:	f502 7280 	add.w	r2, r2, #256	; 0x100
    5ece:	2100      	movs	r1, #0
    5ed0:	6011      	str	r1, [r2, #0]
    5ed2:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ed4:	4a31      	ldr	r2, [pc, #196]	; (5f9c <nrfx_clock_stop+0x110>)
    5ed6:	6013      	str	r3, [r2, #0]
}
    5ed8:	e7ed      	b.n	5eb6 <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5eda:	2301      	movs	r3, #1
    5edc:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5ee0:	f242 7510 	movw	r5, #10000	; 0x2710
    5ee4:	e018      	b.n	5f18 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5eea:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5eee:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5ef2:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5ef6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5efa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5efe:	d120      	bne.n	5f42 <nrfx_clock_stop+0xb6>
    return false;
    5f00:	2300      	movs	r3, #0
    5f02:	2b00      	cmp	r3, #0
    5f04:	d042      	beq.n	5f8c <nrfx_clock_stop+0x100>
    5f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f0a:	2b01      	cmp	r3, #1
    5f0c:	d13e      	bne.n	5f8c <nrfx_clock_stop+0x100>
    5f0e:	2001      	movs	r0, #1
    5f10:	f00f f884 	bl	1501c <nrfx_busy_wait>
    5f14:	3d01      	subs	r5, #1
    5f16:	d039      	beq.n	5f8c <nrfx_clock_stop+0x100>
    switch (domain)
    5f18:	2c00      	cmp	r4, #0
    5f1a:	d0e4      	beq.n	5ee6 <nrfx_clock_stop+0x5a>
    5f1c:	2c01      	cmp	r4, #1
    5f1e:	d001      	beq.n	5f24 <nrfx_clock_stop+0x98>
    5f20:	2300      	movs	r3, #0
    5f22:	e7ee      	b.n	5f02 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5f28:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    5f2c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5f30:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5f34:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    5f38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5f3c:	d103      	bne.n	5f46 <nrfx_clock_stop+0xba>
    return false;
    5f3e:	2300      	movs	r3, #0
    5f40:	e7df      	b.n	5f02 <nrfx_clock_stop+0x76>
                return true;
    5f42:	2301      	movs	r3, #1
    5f44:	e7dd      	b.n	5f02 <nrfx_clock_stop+0x76>
                return true;
    5f46:	2301      	movs	r3, #1
    5f48:	e7db      	b.n	5f02 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f4e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5f52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5f56:	d115      	bne.n	5f84 <nrfx_clock_stop+0xf8>
    return false;
    5f58:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5f5a:	b1bb      	cbz	r3, 5f8c <nrfx_clock_stop+0x100>
    5f5c:	2001      	movs	r0, #1
    5f5e:	f00f f85d 	bl	1501c <nrfx_busy_wait>
    5f62:	3d01      	subs	r5, #1
    5f64:	d012      	beq.n	5f8c <nrfx_clock_stop+0x100>
    switch (domain)
    5f66:	2c00      	cmp	r4, #0
    5f68:	d0ef      	beq.n	5f4a <nrfx_clock_stop+0xbe>
    5f6a:	2c01      	cmp	r4, #1
    5f6c:	d001      	beq.n	5f72 <nrfx_clock_stop+0xe6>
    5f6e:	2300      	movs	r3, #0
    5f70:	e7f3      	b.n	5f5a <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5f7a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5f7e:	d103      	bne.n	5f88 <nrfx_clock_stop+0xfc>
    return false;
    5f80:	2300      	movs	r3, #0
    5f82:	e7ea      	b.n	5f5a <nrfx_clock_stop+0xce>
                return true;
    5f84:	2301      	movs	r3, #1
    5f86:	e7e8      	b.n	5f5a <nrfx_clock_stop+0xce>
                return true;
    5f88:	2301      	movs	r3, #1
    5f8a:	e7e6      	b.n	5f5a <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5f8c:	2c01      	cmp	r4, #1
    5f8e:	d183      	bne.n	5e98 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    5f90:	4b03      	ldr	r3, [pc, #12]	; (5fa0 <nrfx_clock_stop+0x114>)
    5f92:	2200      	movs	r2, #0
    5f94:	715a      	strb	r2, [r3, #5]
    5f96:	e77f      	b.n	5e98 <nrfx_clock_stop+0xc>
    5f98:	4000000c 	.word	0x4000000c
    5f9c:	40000004 	.word	0x40000004
    5fa0:	2000f1c0 	.word	0x2000f1c0

00005fa4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5fa4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5fa6:	4b1b      	ldr	r3, [pc, #108]	; (6014 <nrfx_power_clock_irq_handler+0x70>)
    5fa8:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5faa:	b183      	cbz	r3, 5fce <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fac:	4b19      	ldr	r3, [pc, #100]	; (6014 <nrfx_power_clock_irq_handler+0x70>)
    5fae:	2200      	movs	r2, #0
    5fb0:	601a      	str	r2, [r3, #0]
    5fb2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5fb8:	2201      	movs	r2, #1
    5fba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5fbe:	4b16      	ldr	r3, [pc, #88]	; (6018 <nrfx_power_clock_irq_handler+0x74>)
    5fc0:	795b      	ldrb	r3, [r3, #5]
    5fc2:	b923      	cbnz	r3, 5fce <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    5fc4:	4b14      	ldr	r3, [pc, #80]	; (6018 <nrfx_power_clock_irq_handler+0x74>)
    5fc6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	2000      	movs	r0, #0
    5fcc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5fce:	4b13      	ldr	r3, [pc, #76]	; (601c <nrfx_power_clock_irq_handler+0x78>)
    5fd0:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5fd2:	b19b      	cbz	r3, 5ffc <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fd4:	4b11      	ldr	r3, [pc, #68]	; (601c <nrfx_power_clock_irq_handler+0x78>)
    5fd6:	2200      	movs	r2, #0
    5fd8:	601a      	str	r2, [r3, #0]
    5fda:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5fe0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5fe4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5fe8:	f012 0f03 	tst.w	r2, #3
    5fec:	d107      	bne.n	5ffe <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5fee:	2301      	movs	r3, #1
    5ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5ff4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ff8:	3208      	adds	r2, #8
    5ffa:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5ffc:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6002:	2202      	movs	r2, #2
    6004:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6008:	4b03      	ldr	r3, [pc, #12]	; (6018 <nrfx_power_clock_irq_handler+0x74>)
    600a:	681b      	ldr	r3, [r3, #0]
    600c:	2001      	movs	r0, #1
    600e:	4798      	blx	r3
}
    6010:	e7f4      	b.n	5ffc <nrfx_power_clock_irq_handler+0x58>
    6012:	bf00      	nop
    6014:	40000100 	.word	0x40000100
    6018:	2000f1c0 	.word	0x2000f1c0
    601c:	40000104 	.word	0x40000104

00006020 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    6020:	4b04      	ldr	r3, [pc, #16]	; (6034 <is_allocated_channel+0x14>)
    6022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    6024:	2301      	movs	r3, #1
    6026:	4083      	lsls	r3, r0
    6028:	421a      	tst	r2, r3
}
    602a:	bf14      	ite	ne
    602c:	2001      	movne	r0, #1
    602e:	2000      	moveq	r0, #0
    6030:	4770      	bx	lr
    6032:	bf00      	nop
    6034:	2000f1c8 	.word	0x2000f1c8

00006038 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    6038:	2301      	movs	r3, #1
    603a:	fa03 f000 	lsl.w	r0, r3, r0
    603e:	4a02      	ldr	r2, [pc, #8]	; (6048 <channel_allocated_set+0x10>)
    6040:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    6042:	4303      	orrs	r3, r0
    6044:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    6046:	4770      	bx	lr
    6048:	2000f1c8 	.word	0x2000f1c8

0000604c <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    604c:	2301      	movs	r3, #1
    604e:	fa03 f000 	lsl.w	r0, r3, r0
    6052:	4a03      	ldr	r2, [pc, #12]	; (6060 <channel_allocated_clr+0x14>)
    6054:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    6056:	ea23 0300 	bic.w	r3, r3, r0
    605a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    605c:	4770      	bx	lr
    605e:	bf00      	nop
    6060:	2000f1c8 	.word	0x2000f1c8

00006064 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    6064:	b538      	push	{r3, r4, r5, lr}
    6066:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    6068:	f00e ffe5 	bl	15036 <is_app_channel>
    606c:	b908      	cbnz	r0, 6072 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    606e:	4809      	ldr	r0, [pc, #36]	; (6094 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6070:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6072:	f04f 0320 	mov.w	r3, #32
    6076:	f3ef 8511 	mrs	r5, BASEPRI
    607a:	f383 8812 	msr	BASEPRI_MAX, r3
    607e:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    6082:	4620      	mov	r0, r4
    6084:	f7ff ffe2 	bl	604c <channel_allocated_clr>
	__asm__ volatile(
    6088:	f385 8811 	msr	BASEPRI, r5
    608c:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    6090:	4801      	ldr	r0, [pc, #4]	; (6098 <nrfx_gpiote_channel_free+0x34>)
}
    6092:	e7ed      	b.n	6070 <nrfx_gpiote_channel_free+0xc>
    6094:	0bad0004 	.word	0x0bad0004
    6098:	0bad0000 	.word	0x0bad0000

0000609c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    609c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60a0:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    60a2:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    60a4:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    60a6:	4f17      	ldr	r7, [pc, #92]	; (6104 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    60a8:	e013      	b.n	60d2 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    60aa:	4620      	mov	r0, r4
    60ac:	f7ff ffc4 	bl	6038 <channel_allocated_set>
            *p_channel = ch_idx;
    60b0:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    60b4:	4f14      	ldr	r7, [pc, #80]	; (6108 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    60b6:	f386 8811 	msr	BASEPRI, r6
    60ba:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    60be:	4b12      	ldr	r3, [pc, #72]	; (6108 <nrfx_gpiote_channel_alloc+0x6c>)
    60c0:	429f      	cmp	r7, r3
    60c2:	d01b      	beq.n	60fc <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    60c4:	2301      	movs	r3, #1
    60c6:	fa03 f309 	lsl.w	r3, r3, r9
    60ca:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    60ce:	3401      	adds	r4, #1
    60d0:	b2e4      	uxtb	r4, r4
    60d2:	b19d      	cbz	r5, 60fc <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    60d4:	f04f 0320 	mov.w	r3, #32
    60d8:	f3ef 8611 	mrs	r6, BASEPRI
    60dc:	f383 8812 	msr	BASEPRI_MAX, r3
    60e0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    60e4:	46a1      	mov	r9, r4
    60e6:	fa25 f304 	lsr.w	r3, r5, r4
    60ea:	f013 0f01 	tst.w	r3, #1
    60ee:	d0e2      	beq.n	60b6 <nrfx_gpiote_channel_alloc+0x1a>
    60f0:	4620      	mov	r0, r4
    60f2:	f7ff ff95 	bl	6020 <is_allocated_channel>
    60f6:	2800      	cmp	r0, #0
    60f8:	d1dd      	bne.n	60b6 <nrfx_gpiote_channel_alloc+0x1a>
    60fa:	e7d6      	b.n	60aa <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    60fc:	4638      	mov	r0, r7
    60fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6102:	bf00      	nop
    6104:	0bad0002 	.word	0x0bad0002
    6108:	0bad0000 	.word	0x0bad0000

0000610c <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    610c:	2301      	movs	r3, #1
    610e:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    6110:	4a03      	ldr	r2, [pc, #12]	; (6120 <is_allocated_channel+0x14>)
    6112:	6812      	ldr	r2, [r2, #0]
    6114:	4213      	tst	r3, r2
}
    6116:	bf14      	ite	ne
    6118:	2001      	movne	r0, #1
    611a:	2000      	moveq	r0, #0
    611c:	4770      	bx	lr
    611e:	bf00      	nop
    6120:	2000f228 	.word	0x2000f228

00006124 <channel_allocated_set>:
    6124:	2301      	movs	r3, #1
    6126:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    612a:	4a02      	ldr	r2, [pc, #8]	; (6134 <channel_allocated_set+0x10>)
    612c:	6813      	ldr	r3, [r2, #0]
    612e:	4303      	orrs	r3, r0
    6130:	6013      	str	r3, [r2, #0]
}
    6132:	4770      	bx	lr
    6134:	2000f228 	.word	0x2000f228

00006138 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    613c:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    613e:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    6140:	4e15      	ldr	r6, [pc, #84]	; (6198 <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    6142:	f8df 805c 	ldr.w	r8, [pc, #92]	; 61a0 <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    6146:	e011      	b.n	616c <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    6148:	4620      	mov	r0, r4
    614a:	f7ff ffeb 	bl	6124 <channel_allocated_set>
            *p_channel = channel;
    614e:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    6152:	f8df 8048 	ldr.w	r8, [pc, #72]	; 619c <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    6156:	f387 8811 	msr	BASEPRI, r7
    615a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    615e:	4b0f      	ldr	r3, [pc, #60]	; (619c <nrfx_ppi_channel_alloc+0x64>)
    6160:	4598      	cmp	r8, r3
    6162:	d016      	beq.n	6192 <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    6164:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    6168:	3401      	adds	r4, #1
    616a:	b2e4      	uxtb	r4, r4
    616c:	b18e      	cbz	r6, 6192 <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    616e:	f04f 0320 	mov.w	r3, #32
    6172:	f3ef 8711 	mrs	r7, BASEPRI
    6176:	f383 8812 	msr	BASEPRI_MAX, r3
    617a:	f3bf 8f6f 	isb	sy
    617e:	2501      	movs	r5, #1
    6180:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    6182:	4235      	tst	r5, r6
    6184:	d0e7      	beq.n	6156 <nrfx_ppi_channel_alloc+0x1e>
    6186:	4620      	mov	r0, r4
    6188:	f7ff ffc0 	bl	610c <is_allocated_channel>
    618c:	2800      	cmp	r0, #0
    618e:	d1e2      	bne.n	6156 <nrfx_ppi_channel_alloc+0x1e>
    6190:	e7da      	b.n	6148 <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6192:	4640      	mov	r0, r8
    6194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6198:	000fffff 	.word	0x000fffff
    619c:	0bad0000 	.word	0x0bad0000
    61a0:	0bad0002 	.word	0x0bad0002

000061a4 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    61a4:	4b14      	ldr	r3, [pc, #80]	; (61f8 <_DoInit+0x54>)
    61a6:	2203      	movs	r2, #3
    61a8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    61aa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    61ac:	4913      	ldr	r1, [pc, #76]	; (61fc <_DoInit+0x58>)
    61ae:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    61b0:	4a13      	ldr	r2, [pc, #76]	; (6200 <_DoInit+0x5c>)
    61b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    61b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    61b8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    61ba:	2200      	movs	r2, #0
    61bc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    61be:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    61c0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    61c2:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    61c4:	490f      	ldr	r1, [pc, #60]	; (6204 <_DoInit+0x60>)
    61c6:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    61c8:	2110      	movs	r1, #16
    61ca:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    61cc:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    61ce:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    61d0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    61d2:	4a0d      	ldr	r2, [pc, #52]	; (6208 <_DoInit+0x64>)
    61d4:	6810      	ldr	r0, [r2, #0]
    61d6:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    61da:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    61de:	4a0b      	ldr	r2, [pc, #44]	; (620c <_DoInit+0x68>)
    61e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    61e4:	6018      	str	r0, [r3, #0]
    61e6:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    61e8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    61ec:	2220      	movs	r2, #32
    61ee:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    61f0:	f3bf 8f5f 	dmb	sy
}
    61f4:	4770      	bx	lr
    61f6:	bf00      	nop
    61f8:	2000f22c 	.word	0x2000f22c
    61fc:	00032274 	.word	0x00032274
    6200:	2000f2e4 	.word	0x2000f2e4
    6204:	2000f2d4 	.word	0x2000f2d4
    6208:	00032280 	.word	0x00032280
    620c:	00032284 	.word	0x00032284

00006210 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
    6210:	b570      	push	{r4, r5, r6, lr}
    6212:	b082      	sub	sp, #8
    6214:	4604      	mov	r4, r0
  if (head_ != temp_) {
    6216:	6905      	ldr	r5, [r0, #16]
    6218:	6983      	ldr	r3, [r0, #24]
    621a:	429d      	cmp	r5, r3
    621c:	d006      	beq.n	622c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
    621e:	490f      	ldr	r1, [pc, #60]	; (625c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    6220:	6840      	ldr	r0, [r0, #4]
    6222:	f00f fd4c 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
    6226:	2001      	movs	r0, #1
  }
  head_ = aligned_result + size;
  temp_ = head_;

  return kTfLiteOk;
}
    6228:	b002      	add	sp, #8
    622a:	bd70      	pop	{r4, r5, r6, pc}
    622c:	460e      	mov	r6, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    622e:	4611      	mov	r1, r2
    6230:	6880      	ldr	r0, [r0, #8]
    6232:	f00e ff4d 	bl	150d0 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6236:	6963      	ldr	r3, [r4, #20]
    6238:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    623a:	42b3      	cmp	r3, r6
    623c:	d304      	bcc.n	6248 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x38>
  head_ = aligned_result + size;
    623e:	4430      	add	r0, r6
    6240:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    6242:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    6244:	2000      	movs	r0, #0
    6246:	e7ef      	b.n	6228 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    TF_LITE_REPORT_ERROR(
    6248:	1af2      	subs	r2, r6, r3
    624a:	9200      	str	r2, [sp, #0]
    624c:	4632      	mov	r2, r6
    624e:	4904      	ldr	r1, [pc, #16]	; (6260 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	f00f fd34 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    6256:	2001      	movs	r0, #1
    6258:	e7e6      	b.n	6228 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    625a:	bf00      	nop
    625c:	0003228c 	.word	0x0003228c
    6260:	000322e4 	.word	0x000322e4

00006264 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    6264:	b530      	push	{r4, r5, lr}
    6266:	b083      	sub	sp, #12
    6268:	4605      	mov	r5, r0
    626a:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    626c:	4611      	mov	r1, r2
    626e:	6980      	ldr	r0, [r0, #24]
    6270:	f00e ff2e 	bl	150d0 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6274:	696b      	ldr	r3, [r5, #20]
    6276:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    6278:	42a3      	cmp	r3, r4
    627a:	d303      	bcc.n	6284 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
  }
  temp_ = aligned_result + size;
    627c:	4404      	add	r4, r0
    627e:	61ac      	str	r4, [r5, #24]
  return aligned_result;
}
    6280:	b003      	add	sp, #12
    6282:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    6284:	1ae2      	subs	r2, r4, r3
    6286:	9200      	str	r2, [sp, #0]
    6288:	4622      	mov	r2, r4
    628a:	4903      	ldr	r1, [pc, #12]	; (6298 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    628c:	6868      	ldr	r0, [r5, #4]
    628e:	f00f fd16 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6292:	2000      	movs	r0, #0
    6294:	e7f4      	b.n	6280 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    6296:	bf00      	nop
    6298:	00032328 	.word	0x00032328

0000629c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    629c:	b530      	push	{r4, r5, lr}
    629e:	b083      	sub	sp, #12
    62a0:	4604      	mov	r4, r0
    62a2:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    62a4:	6940      	ldr	r0, [r0, #20]
    62a6:	4611      	mov	r1, r2
    62a8:	1b40      	subs	r0, r0, r5
    62aa:	f00e ff18 	bl	150de <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    62ae:	6923      	ldr	r3, [r4, #16]
    62b0:	4283      	cmp	r3, r0
    62b2:	d802      	bhi.n	62ba <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1e>
  tail_ = aligned_result;
    62b4:	6160      	str	r0, [r4, #20]
}
    62b6:	b003      	add	sp, #12
    62b8:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    62ba:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    62bc:	9300      	str	r3, [sp, #0]
    62be:	1aeb      	subs	r3, r5, r3
    62c0:	462a      	mov	r2, r5
    62c2:	4903      	ldr	r1, [pc, #12]	; (62d0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    62c4:	6860      	ldr	r0, [r4, #4]
    62c6:	f00f fcfa 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    62ca:	2000      	movs	r0, #0
    62cc:	e7f3      	b.n	62b6 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1a>
    62ce:	bf00      	nop
    62d0:	00032374 	.word	0x00032374

000062d4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    62d4:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    62d6:	4d05      	ldr	r5, [pc, #20]	; (62ec <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    62d8:	6005      	str	r5, [r0, #0]
    62da:	6041      	str	r1, [r0, #4]
    62dc:	6082      	str	r2, [r0, #8]
    62de:	60c3      	str	r3, [r0, #12]
    62e0:	6102      	str	r2, [r0, #16]
    62e2:	6143      	str	r3, [r0, #20]
    62e4:	6182      	str	r2, [r0, #24]
    62e6:	bc30      	pop	{r4, r5}
    62e8:	4770      	bx	lr
    62ea:	bf00      	nop
    62ec:	000323c8 	.word	0x000323c8

000062f0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    62f0:	b510      	push	{r4, lr}
    62f2:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    62f4:	b300      	cbz	r0, 6338 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    62f6:	460c      	mov	r4, r1
    62f8:	4613      	mov	r3, r2
    62fa:	4601      	mov	r1, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    62fc:	b1f4      	cbz	r4, 633c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
    62fe:	4622      	mov	r2, r4
    6300:	a801      	add	r0, sp, #4
    6302:	f00e feb3 	bl	1506c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    6306:	2204      	movs	r2, #4
    6308:	211c      	movs	r1, #28
    630a:	eb0d 0002 	add.w	r0, sp, r2
    630e:	f7ff ffc5 	bl	629c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    6312:	4603      	mov	r3, r0
    6314:	b168      	cbz	r0, 6332 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x42>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    6316:	4a0a      	ldr	r2, [pc, #40]	; (6340 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    6318:	6002      	str	r2, [r0, #0]
    631a:	9a02      	ldr	r2, [sp, #8]
    631c:	6042      	str	r2, [r0, #4]
    631e:	9a03      	ldr	r2, [sp, #12]
    6320:	6082      	str	r2, [r0, #8]
    6322:	9a04      	ldr	r2, [sp, #16]
    6324:	60c2      	str	r2, [r0, #12]
    6326:	9a05      	ldr	r2, [sp, #20]
    6328:	6102      	str	r2, [r0, #16]
    632a:	9a06      	ldr	r2, [sp, #24]
    632c:	6142      	str	r2, [r0, #20]
    632e:	9a07      	ldr	r2, [sp, #28]
    6330:	6182      	str	r2, [r0, #24]
}
    6332:	4618      	mov	r0, r3
    6334:	b008      	add	sp, #32
    6336:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6338:	f012 fab7 	bl	188aa <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    633c:	f012 fab5 	bl	188aa <abort>
    6340:	000323c8 	.word	0x000323c8

00006344 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
    6344:	b508      	push	{r3, lr}
    6346:	4602      	mov	r2, r0
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    6348:	4b03      	ldr	r3, [pc, #12]	; (6358 <DebugLog+0x14>)
    634a:	681b      	ldr	r3, [r3, #0]
    634c:	4903      	ldr	r1, [pc, #12]	; (635c <DebugLog+0x18>)
    634e:	68d8      	ldr	r0, [r3, #12]
    6350:	f00c faba 	bl	128c8 <fiprintf>
#endif
}
    6354:	bd08      	pop	{r3, pc}
    6356:	bf00      	nop
    6358:	200000f8 	.word	0x200000f8
    635c:	000323e0 	.word	0x000323e0

00006360 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    6360:	b500      	push	{lr}
    6362:	b0c1      	sub	sp, #260	; 0x104
    6364:	4602      	mov	r2, r0
    6366:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    6368:	f44f 7180 	mov.w	r1, #256	; 0x100
    636c:	4668      	mov	r0, sp
    636e:	f000 f917 	bl	65a0 <MicroVsnprintf>
  DebugLog(log_buffer);
    6372:	4668      	mov	r0, sp
    6374:	f7ff ffe6 	bl	6344 <DebugLog>
  DebugLog("\r\n");
    6378:	4802      	ldr	r0, [pc, #8]	; (6384 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    637a:	f7ff ffe3 	bl	6344 <DebugLog>
#endif
}
    637e:	b041      	add	sp, #260	; 0x104
    6380:	f85d fb04 	ldr.w	pc, [sp], #4
    6384:	00034e84 	.word	0x00034e84

00006388 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:
  return kTfLiteOk;
}

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    6388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    638c:	b083      	sub	sp, #12
    638e:	4680      	mov	r8, r0
    6390:	468b      	mov	fp, r1
    6392:	4692      	mov	sl, r2
    6394:	4699      	mov	r9, r3
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
    6396:	4606      	mov	r6, r0
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    6398:	f00e ff17 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    639c:	eba8 0400 	sub.w	r4, r8, r0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    63a0:	4620      	mov	r0, r4
    63a2:	f00e ff18 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    63a6:	2804      	cmp	r0, #4
    63a8:	d90d      	bls.n	63c6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    63aa:	1d20      	adds	r0, r4, #4
    63ac:	f00e ff13 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    63b0:	eb08 0400 	add.w	r4, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    63b4:	b148      	cbz	r0, 63ca <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x42>
    63b6:	4620      	mov	r0, r4
    63b8:	f00e ff01 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    63bc:	4404      	add	r4, r0
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    63be:	b3ac      	cbz	r4, 642c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa4>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    63c0:	2500      	movs	r5, #0
  int element_count = 1;
    63c2:	2701      	movs	r7, #1
    63c4:	e01e      	b.n	6404 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    63c6:	2000      	movs	r0, #0
    63c8:	e7f2      	b.n	63b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    63ca:	2400      	movs	r4, #0
    63cc:	e7f7      	b.n	63be <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    63ce:	1d20      	adds	r0, r4, #4
    63d0:	f00e ff01 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    63d4:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    63d6:	b300      	cbz	r0, 641a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
    63d8:	4620      	mov	r0, r4
    63da:	f00e fef0 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    63de:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    63e0:	6820      	ldr	r0, [r4, #0]
    63e2:	f00d fca6 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    63e6:	4285      	cmp	r5, r0
    63e8:	d221      	bcs.n	642e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa6>
    63ea:	6820      	ldr	r0, [r4, #0]
    63ec:	f00d fca1 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    63f0:	4285      	cmp	r5, r0
    63f2:	d214      	bcs.n	641e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    63f4:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    63f6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    63fa:	f00e fee5 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    63fe:	fb00 f707 	mul.w	r7, r0, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6402:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6404:	4630      	mov	r0, r6
    6406:	f00e fee0 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    640a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    640c:	4620      	mov	r0, r4
    640e:	f00e fee2 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6412:	2804      	cmp	r0, #4
    6414:	d8db      	bhi.n	63ce <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x46>
    6416:	2000      	movs	r0, #0
    6418:	e7dc      	b.n	63d4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    641a:	2400      	movs	r4, #0
    641c:	e7e0      	b.n	63e0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
    FLATBUFFERS_ASSERT(i < size());
    641e:	4b1a      	ldr	r3, [pc, #104]	; (6488 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x100>)
    6420:	4a1a      	ldr	r2, [pc, #104]	; (648c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x104>)
    6422:	f44f 7183 	mov.w	r1, #262	; 0x106
    6426:	481a      	ldr	r0, [pc, #104]	; (6490 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x108>)
    6428:	f00c fa30 	bl	1288c <__assert_func>
  int element_count = 1;
    642c:	2701      	movs	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    642e:	4640      	mov	r0, r8
    6430:	f00e fecb 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6434:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6438:	4620      	mov	r0, r4
    643a:	f00e fecc 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    643e:	2806      	cmp	r0, #6
    6440:	d910      	bls.n	6464 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xdc>
    6442:	1da0      	adds	r0, r4, #6
    6444:	f00e fec7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6448:	b170      	cbz	r0, 6468 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe0>
    644a:	4440      	add	r0, r8
    644c:	f00e fec9 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    6450:	464a      	mov	r2, r9
    6452:	f10d 0107 	add.w	r1, sp, #7
    6456:	b2c0      	uxtb	r0, r0
    6458:	f003 f9b0 	bl	97bc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    645c:	b130      	cbz	r0, 646c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe4>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    645e:	b003      	add	sp, #12
    6460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6464:	2000      	movs	r0, #0
    6466:	e7ef      	b.n	6448 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6468:	2000      	movs	r0, #0
    646a:	e7f1      	b.n	6450 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc8>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    646c:	4651      	mov	r1, sl
    646e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6472:	f00e fe40 	bl	150f6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    6476:	2800      	cmp	r0, #0
    6478:	d1f1      	bne.n	645e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
  *bytes = element_count * (*type_size);
    647a:	f8da 3000 	ldr.w	r3, [sl]
    647e:	fb07 f703 	mul.w	r7, r7, r3
    6482:	f8cb 7000 	str.w	r7, [fp]
  return kTfLiteOk;
    6486:	e7ea      	b.n	645e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
    6488:	000323f8 	.word	0x000323f8
    648c:	00032404 	.word	0x00032404
    6490:	000324c4 	.word	0x000324c4

00006494 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
    6494:	b5f0      	push	{r4, r5, r6, r7, lr}
    6496:	b089      	sub	sp, #36	; 0x24
    6498:	9001      	str	r0, [sp, #4]
    649a:	460e      	mov	r6, r1
  char* current = buffer;
  char* current_end = buffer + (kFastToBufferSize - 1);
    649c:	f101 052f 	add.w	r5, r1, #47	; 0x2f
  const uint32_t exponent_mask = 0x7f800000;
  const int32_t exponent_shift = 23;
  const int32_t exponent_bias = 127;
  const uint32_t fraction_mask = 0x007fffff;
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
    64a0:	2204      	movs	r2, #4
    64a2:	eb0d 0102 	add.w	r1, sp, r2
    64a6:	a807      	add	r0, sp, #28
    64a8:	f012 fa18 	bl	188dc <memcpy>
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    64ac:	9b07      	ldr	r3, [sp, #28]
    64ae:	f3c3 54c7 	ubfx	r4, r3, #23, #8
    64b2:	3c7f      	subs	r4, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
    64b4:	f3c3 0716 	ubfx	r7, r3, #0, #23
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
    64b8:	2b00      	cmp	r3, #0
    64ba:	db0e      	blt.n	64da <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x46>
    *current = '-';
    current += 1;
  }
  *current = 0;
    64bc:	2300      	movs	r3, #0
    64be:	7033      	strb	r3, [r6, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
    64c0:	2c80      	cmp	r4, #128	; 0x80
    64c2:	d00e      	beq.n	64e2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x4e>
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    64c4:	4b32      	ldr	r3, [pc, #200]	; (6590 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xfc>)
    64c6:	f10d 0c0c 	add.w	ip, sp, #12
    64ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    64cc:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    64d0:	f88c 3000 	strb.w	r3, [ip]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
    64d4:	463a      	mov	r2, r7
  for (int i = 0; i < scale_shifts_size; ++i) {
    64d6:	2300      	movs	r3, #0
    64d8:	e01a      	b.n	6510 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7c>
    *current = '-';
    64da:	232d      	movs	r3, #45	; 0x2d
    64dc:	f806 3b01 	strb.w	r3, [r6], #1
    current += 1;
    64e0:	e7ec      	b.n	64bc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x28>
    if (fraction == 0) {
    64e2:	b937      	cbnz	r7, 64f2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x5e>
      current = StrCatStr(current, (current_end - current), "Inf");
    64e4:	4a2b      	ldr	r2, [pc, #172]	; (6594 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x100>)
    64e6:	1ba9      	subs	r1, r5, r6
    64e8:	4630      	mov	r0, r6
    64ea:	f00e fe91 	bl	15210 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    64ee:	4607      	mov	r7, r0
      return current;
    64f0:	e04a      	b.n	6588 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
      current = StrCatStr(current, (current_end - current), "NaN");
    64f2:	4a29      	ldr	r2, [pc, #164]	; (6598 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>)
    64f4:	1ba9      	subs	r1, r5, r6
    64f6:	4630      	mov	r0, r6
    64f8:	f00e fe8a 	bl	15210 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    64fc:	4607      	mov	r7, r0
      return current;
    64fe:	e043      	b.n	6588 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    scaled_fraction += (fraction >> scale_shifts[i]);
    6500:	a908      	add	r1, sp, #32
    6502:	18c8      	adds	r0, r1, r3
    6504:	f910 0c14 	ldrsb.w	r0, [r0, #-20]
    6508:	fa27 f000 	lsr.w	r0, r7, r0
    650c:	4402      	add	r2, r0
  for (int i = 0; i < scale_shifts_size; ++i) {
    650e:	3301      	adds	r3, #1
    6510:	2b0c      	cmp	r3, #12
    6512:	ddf5      	ble.n	6500 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x6c>
  }
  *current = '1';
    6514:	2331      	movs	r3, #49	; 0x31
    6516:	7033      	strb	r3, [r6, #0]
  current += 1;
  *current = '.';
    6518:	232e      	movs	r3, #46	; 0x2e
    651a:	7073      	strb	r3, [r6, #1]
  current += 1;
    651c:	1cb7      	adds	r7, r6, #2
  *current = 0;
    651e:	2300      	movs	r3, #0
    6520:	70b3      	strb	r3, [r6, #2]
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
    6522:	1be9      	subs	r1, r5, r7
    6524:	2907      	cmp	r1, #7
    6526:	dd2f      	ble.n	6588 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    return current;
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6528:	2301      	movs	r3, #1
    652a:	2b06      	cmp	r3, #6
    652c:	dc03      	bgt.n	6536 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xa2>
    *(current + i) = '0';
    652e:	2030      	movs	r0, #48	; 0x30
    6530:	54f8      	strb	r0, [r7, r3]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6532:	3301      	adds	r3, #1
    6534:	e7f9      	b.n	652a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6536:	230a      	movs	r3, #10
    6538:	4638      	mov	r0, r7
    653a:	f00e feb6 	bl	152aa <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>
  int fraction_digits = current - previous;
    653e:	1bc1      	subs	r1, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
    6540:	2330      	movs	r3, #48	; 0x30
    6542:	7003      	strb	r3, [r0, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
    6544:	f1d1 0607 	rsbs	r6, r1, #7
    6548:	d00c      	beq.n	6564 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
    for (int i = 0; i < fraction_digits; i++) {
    654a:	2300      	movs	r3, #0
    654c:	428b      	cmp	r3, r1
    654e:	da06      	bge.n	655e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xca>
      current--;
      *(current + leading_zeros) = *current;
    6550:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    6554:	5582      	strb	r2, [r0, r6]
      *current = '0';
    6556:	2230      	movs	r2, #48	; 0x30
    6558:	7002      	strb	r2, [r0, #0]
    for (int i = 0; i < fraction_digits; i++) {
    655a:	3301      	adds	r3, #1
    655c:	e7f6      	b.n	654c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb8>
    }
    current += kMaxFractionalDigits;
    655e:	3007      	adds	r0, #7
    6560:	e000      	b.n	6564 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
    current--;
    6562:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    6564:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6568:	2b30      	cmp	r3, #48	; 0x30
    656a:	d102      	bne.n	6572 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xde>
    656c:	1e43      	subs	r3, r0, #1
    656e:	42bb      	cmp	r3, r7
    6570:	d8f7      	bhi.n	6562 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
  }
  *current = 0;
    6572:	2300      	movs	r3, #0
    6574:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    6576:	4a09      	ldr	r2, [pc, #36]	; (659c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>)
    6578:	1a29      	subs	r1, r5, r0
    657a:	f00e fe49 	bl	15210 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    657e:	4622      	mov	r2, r4
    6580:	1a29      	subs	r1, r5, r0
    6582:	f00e fe83 	bl	1528c <_ZN12_GLOBAL__N_111StrCatInt32EPcii>
    6586:	4607      	mov	r7, r0
  return current;
}
    6588:	4638      	mov	r0, r7
    658a:	b009      	add	sp, #36	; 0x24
    658c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    658e:	bf00      	nop
    6590:	00032538 	.word	0x00032538
    6594:	0003252c 	.word	0x0003252c
    6598:	00032530 	.word	0x00032530
    659c:	00032534 	.word	0x00032534

000065a0 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    65a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    65a2:	b083      	sub	sp, #12
    65a4:	4607      	mov	r7, r0
    65a6:	4615      	mov	r5, r2
    65a8:	9301      	str	r3, [sp, #4]
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    65aa:	1e4e      	subs	r6, r1, #1
  int output_index = 0;
    65ac:	2400      	movs	r4, #0
    65ae:	e07c      	b.n	66aa <MicroVsnprintf+0x10a>
    if (*current == '%') {
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    65b0:	1b33      	subs	r3, r6, r4
    65b2:	2b0a      	cmp	r3, #10
    65b4:	dd09      	ble.n	65ca <MicroVsnprintf+0x2a>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    65b6:	9b01      	ldr	r3, [sp, #4]
    65b8:	1d1a      	adds	r2, r3, #4
    65ba:	9201      	str	r2, [sp, #4]
    65bc:	6819      	ldr	r1, [r3, #0]
    65be:	1938      	adds	r0, r7, r4
    65c0:	f00e fe83 	bl	152ca <_ZN12_GLOBAL__N_111FormatInt32EPci>
          output_index +=
    65c4:	4404      	add	r4, r0
          current++;
    65c6:	1caa      	adds	r2, r5, #2
          break;
    65c8:	e06e      	b.n	66a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    65ca:	1c60      	adds	r0, r4, #1
    65cc:	2300      	movs	r3, #0
    65ce:	553b      	strb	r3, [r7, r4]
            return output_index;
    65d0:	e0b1      	b.n	6736 <MicroVsnprintf+0x196>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    65d2:	1b33      	subs	r3, r6, r4
    65d4:	2b0a      	cmp	r3, #10
    65d6:	dd09      	ble.n	65ec <MicroVsnprintf+0x4c>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    65d8:	9b01      	ldr	r3, [sp, #4]
    65da:	1d1a      	adds	r2, r3, #4
    65dc:	9201      	str	r2, [sp, #4]
    65de:	6819      	ldr	r1, [r3, #0]
    65e0:	1938      	adds	r0, r7, r4
    65e2:	f00e fe7a 	bl	152da <_ZN12_GLOBAL__N_112FormatUInt32EPcj>
          output_index +=
    65e6:	4404      	add	r4, r0
          current++;
    65e8:	1caa      	adds	r2, r5, #2
          break;
    65ea:	e05d      	b.n	66a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    65ec:	1c60      	adds	r0, r4, #1
    65ee:	2300      	movs	r3, #0
    65f0:	553b      	strb	r3, [r7, r4]
            return output_index;
    65f2:	e0a0      	b.n	6736 <MicroVsnprintf+0x196>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    65f4:	1b33      	subs	r3, r6, r4
    65f6:	2b09      	cmp	r3, #9
    65f8:	dd0f      	ble.n	661a <MicroVsnprintf+0x7a>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = '0';
    65fa:	1c63      	adds	r3, r4, #1
    65fc:	2230      	movs	r2, #48	; 0x30
    65fe:	553a      	strb	r2, [r7, r4]
          output[output_index++] = 'x';
    6600:	3402      	adds	r4, #2
    6602:	2278      	movs	r2, #120	; 0x78
    6604:	54fa      	strb	r2, [r7, r3]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6606:	9b01      	ldr	r3, [sp, #4]
    6608:	1d1a      	adds	r2, r3, #4
    660a:	9201      	str	r2, [sp, #4]
    660c:	6819      	ldr	r1, [r3, #0]
    660e:	1938      	adds	r0, r7, r4
    6610:	f00e fe6c 	bl	152ec <_ZN12_GLOBAL__N_19FormatHexEPcj>
          output_index +=
    6614:	4404      	add	r4, r0
          current++;
    6616:	1caa      	adds	r2, r5, #2
          break;
    6618:	e046      	b.n	66a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    661a:	1c60      	adds	r0, r4, #1
    661c:	2300      	movs	r3, #0
    661e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6620:	e089      	b.n	6736 <MicroVsnprintf+0x196>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6622:	1b30      	subs	r0, r6, r4
    6624:	f7fa fb44 	bl	cb0 <__aeabi_i2f>
    6628:	4944      	ldr	r1, [pc, #272]	; (673c <MicroVsnprintf+0x19c>)
    662a:	f7fa fd33 	bl	1094 <__aeabi_fcmplt>
    662e:	b988      	cbnz	r0, 6654 <MicroVsnprintf+0xb4>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
    6630:	9b01      	ldr	r3, [sp, #4]
    6632:	3307      	adds	r3, #7
    6634:	f023 0307 	bic.w	r3, r3, #7
    6638:	f103 0208 	add.w	r2, r3, #8
    663c:	9201      	str	r2, [sp, #4]
    663e:	e9d3 0100 	ldrd	r0, r1, [r3]
    6642:	f7fa fa2b 	bl	a9c <__aeabi_d2f>
    6646:	4601      	mov	r1, r0
    6648:	1938      	adds	r0, r7, r4
    664a:	f00e fe58 	bl	152fe <_ZN12_GLOBAL__N_111FormatFloatEPcf>
          output_index +=
    664e:	4404      	add	r4, r0
          current++;
    6650:	1caa      	adds	r2, r5, #2
          break;
    6652:	e029      	b.n	66a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    6654:	1c60      	adds	r0, r4, #1
    6656:	2300      	movs	r3, #0
    6658:	553b      	strb	r3, [r7, r4]
            return output_index;
    665a:	e06c      	b.n	6736 <MicroVsnprintf+0x196>
        case '%':
          output[output_index++] = *current++;
    665c:	1caa      	adds	r2, r5, #2
    665e:	553b      	strb	r3, [r7, r4]
    6660:	3401      	adds	r4, #1
          break;
    6662:	e021      	b.n	66a8 <MicroVsnprintf+0x108>
        case 'c':
          if (usable_length - output_index < 1) {
    6664:	1b33      	subs	r3, r6, r4
    6666:	2b00      	cmp	r3, #0
    6668:	dd07      	ble.n	667a <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
    666a:	9b01      	ldr	r3, [sp, #4]
    666c:	1d1a      	adds	r2, r3, #4
    666e:	9201      	str	r2, [sp, #4]
    6670:	681b      	ldr	r3, [r3, #0]
    6672:	553b      	strb	r3, [r7, r4]
          current++;
    6674:	1caa      	adds	r2, r5, #2
          output[output_index++] = va_arg(args, int32_t);
    6676:	3401      	adds	r4, #1
          break;
    6678:	e016      	b.n	66a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    667a:	1c60      	adds	r0, r4, #1
    667c:	2300      	movs	r3, #0
    667e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6680:	e059      	b.n	6736 <MicroVsnprintf+0x196>
        case 's':
          char* string = va_arg(args, char*);
    6682:	9b01      	ldr	r3, [sp, #4]
    6684:	1d1a      	adds	r2, r3, #4
    6686:	9201      	str	r2, [sp, #4]
    6688:	6819      	ldr	r1, [r3, #0]
          int string_idx = 0;
    668a:	2300      	movs	r3, #0
          while (string_idx + output_index < usable_length &&
    668c:	18e2      	adds	r2, r4, r3
    668e:	42b2      	cmp	r2, r6
    6690:	da05      	bge.n	669e <MicroVsnprintf+0xfe>
                 string[string_idx] != '\0') {
    6692:	5cca      	ldrb	r2, [r1, r3]
          while (string_idx + output_index < usable_length &&
    6694:	b11a      	cbz	r2, 669e <MicroVsnprintf+0xfe>
            output[output_index++] = string[string_idx++];
    6696:	3301      	adds	r3, #1
    6698:	553a      	strb	r2, [r7, r4]
    669a:	3401      	adds	r4, #1
          while (string_idx + output_index < usable_length &&
    669c:	e7f6      	b.n	668c <MicroVsnprintf+0xec>
          }
          current++;
    669e:	1caa      	adds	r2, r5, #2
    66a0:	e002      	b.n	66a8 <MicroVsnprintf+0x108>
      }
    } else {
      output[output_index++] = *current++;
    66a2:	1c6a      	adds	r2, r5, #1
    66a4:	553b      	strb	r3, [r7, r4]
    66a6:	3401      	adds	r4, #1
          output[output_index++] = va_arg(args, int32_t);
    66a8:	4615      	mov	r5, r2
  while (*current != '\0' && output_index < usable_length) {
    66aa:	782b      	ldrb	r3, [r5, #0]
    66ac:	2b00      	cmp	r3, #0
    66ae:	d03f      	beq.n	6730 <MicroVsnprintf+0x190>
    66b0:	42b4      	cmp	r4, r6
    66b2:	da3d      	bge.n	6730 <MicroVsnprintf+0x190>
    if (*current == '%') {
    66b4:	2b25      	cmp	r3, #37	; 0x25
    66b6:	d1f4      	bne.n	66a2 <MicroVsnprintf+0x102>
      current++;
    66b8:	1c6a      	adds	r2, r5, #1
      switch (*current) {
    66ba:	786b      	ldrb	r3, [r5, #1]
    66bc:	2b25      	cmp	r3, #37	; 0x25
    66be:	d0cd      	beq.n	665c <MicroVsnprintf+0xbc>
    66c0:	d3f2      	bcc.n	66a8 <MicroVsnprintf+0x108>
    66c2:	2b78      	cmp	r3, #120	; 0x78
    66c4:	d8f0      	bhi.n	66a8 <MicroVsnprintf+0x108>
    66c6:	2b63      	cmp	r3, #99	; 0x63
    66c8:	d3ee      	bcc.n	66a8 <MicroVsnprintf+0x108>
    66ca:	3b63      	subs	r3, #99	; 0x63
    66cc:	2b15      	cmp	r3, #21
    66ce:	d8eb      	bhi.n	66a8 <MicroVsnprintf+0x108>
    66d0:	a101      	add	r1, pc, #4	; (adr r1, 66d8 <MicroVsnprintf+0x138>)
    66d2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    66d6:	bf00      	nop
    66d8:	00006665 	.word	0x00006665
    66dc:	000065b1 	.word	0x000065b1
    66e0:	000066a9 	.word	0x000066a9
    66e4:	00006623 	.word	0x00006623
    66e8:	000066a9 	.word	0x000066a9
    66ec:	000066a9 	.word	0x000066a9
    66f0:	000066a9 	.word	0x000066a9
    66f4:	000066a9 	.word	0x000066a9
    66f8:	000066a9 	.word	0x000066a9
    66fc:	000066a9 	.word	0x000066a9
    6700:	000066a9 	.word	0x000066a9
    6704:	000066a9 	.word	0x000066a9
    6708:	000066a9 	.word	0x000066a9
    670c:	000066a9 	.word	0x000066a9
    6710:	000066a9 	.word	0x000066a9
    6714:	000066a9 	.word	0x000066a9
    6718:	00006683 	.word	0x00006683
    671c:	000066a9 	.word	0x000066a9
    6720:	000065d3 	.word	0x000065d3
    6724:	000066a9 	.word	0x000066a9
    6728:	000066a9 	.word	0x000066a9
    672c:	000065f5 	.word	0x000065f5
    }
  }
  output[output_index++] = '\0';
    6730:	1c60      	adds	r0, r4, #1
    6732:	2300      	movs	r3, #0
    6734:	553b      	strb	r3, [r7, r4]
  return output_index;
}
    6736:	b003      	add	sp, #12
    6738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    673a:	bf00      	nop
    673c:	41600000 	.word	0x41600000

00006740 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    6740:	b570      	push	{r4, r5, r6, lr}
    6742:	4604      	mov	r4, r0
    6744:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    6746:	f00e fd40 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    674a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    674c:	4630      	mov	r0, r6
    674e:	f00e fd42 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6752:	2808      	cmp	r0, #8
    6754:	d918      	bls.n	6788 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>
    6756:	f106 0008 	add.w	r0, r6, #8
    675a:	f00e fd3c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    675e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6760:	b1a0      	cbz	r0, 678c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
    6762:	4620      	mov	r0, r4
    6764:	f00e fd2b 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6768:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    676a:	6820      	ldr	r0, [r4, #0]
    676c:	f00d fae1 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6770:	4285      	cmp	r5, r0
    6772:	d20d      	bcs.n	6790 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x50>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6774:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6776:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    677a:	4620      	mov	r0, r4
    677c:	f00e fd1f 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
    6780:	4420      	add	r0, r4
    6782:	f00e fdd2 	bl	1532a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
}
    6786:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6788:	2000      	movs	r0, #0
    678a:	e7e8      	b.n	675e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    678c:	2400      	movs	r4, #0
    678e:	e7ec      	b.n	676a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    FLATBUFFERS_ASSERT(i < size());
    6790:	4b03      	ldr	r3, [pc, #12]	; (67a0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>)
    6792:	4a04      	ldr	r2, [pc, #16]	; (67a4 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x64>)
    6794:	f44f 7183 	mov.w	r1, #262	; 0x106
    6798:	4803      	ldr	r0, [pc, #12]	; (67a8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x68>)
    679a:	f00c f877 	bl	1288c <__assert_func>
    679e:	bf00      	nop
    67a0:	000323f8 	.word	0x000323f8
    67a4:	00032548 	.word	0x00032548
    67a8:	000324c4 	.word	0x000324c4

000067ac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    67ac:	6943      	ldr	r3, [r0, #20]
    67ae:	2b20      	cmp	r3, #32
    67b0:	d007      	beq.n	67c2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    67b2:	b2da      	uxtb	r2, r3
  return (v < low) || (high < v);
    67b4:	2a91      	cmp	r2, #145	; 0x91
    67b6:	d806      	bhi.n	67c6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1a>
  const size_t index = static_cast<size_t>(e);
    67b8:	4613      	mov	r3, r2
  return EnumNamesBuiltinOperator()[index];
    67ba:	4a04      	ldr	r2, [pc, #16]	; (67cc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    67bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    67c0:	4770      	bx	lr
    return registration->custom_name;
    67c2:	6980      	ldr	r0, [r0, #24]
    67c4:	4770      	bx	lr
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    67c6:	4802      	ldr	r0, [pc, #8]	; (67d0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>)
  }
}
    67c8:	4770      	bx	lr
    67ca:	bf00      	nop
    67cc:	00032f54 	.word	0x00032f54
    67d0:	00031c00 	.word	0x00031c00

000067d4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    67d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67d8:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    67da:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    67de:	2600      	movs	r6, #0
    67e0:	e024      	b.n	682c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x58>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    67e2:	4621      	mov	r1, r4
    67e4:	68e8      	ldr	r0, [r5, #12]
    67e6:	f00e ffdc 	bl	157a2 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    67ea:	3401      	adds	r4, #1
    67ec:	42bc      	cmp	r4, r7
    67ee:	d21c      	bcs.n	682a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    67f0:	692b      	ldr	r3, [r5, #16]
    67f2:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    67f6:	212c      	movs	r1, #44	; 0x2c
    67f8:	fb01 3104 	mla	r1, r1, r4, r3
      const TfLiteRegistration* registration =
    67fc:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
    6800:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6804:	2b00      	cmp	r3, #0
    6806:	d0ec      	beq.n	67e2 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    6808:	6868      	ldr	r0, [r5, #4]
    680a:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
    680c:	4682      	mov	sl, r0
    680e:	2800      	cmp	r0, #0
    6810:	d0e7      	beq.n	67e2 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    6812:	4648      	mov	r0, r9
    6814:	f7ff ffca 	bl	67ac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6818:	4601      	mov	r1, r0
    681a:	4653      	mov	r3, sl
    681c:	4622      	mov	r2, r4
    681e:	480c      	ldr	r0, [pc, #48]	; (6850 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    6820:	f00e fc48 	bl	150b4 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6824:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    6826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    682a:	3601      	adds	r6, #1
    682c:	69ab      	ldr	r3, [r5, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    682e:	6818      	ldr	r0, [r3, #0]
    6830:	f00d fa7f 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6834:	4286      	cmp	r6, r0
    6836:	d207      	bcs.n	6848 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    current_subgraph_index_ = subgraph_idx;
    6838:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    683a:	4631      	mov	r1, r6
    683c:	68a8      	ldr	r0, [r5, #8]
    683e:	f7ff ff7f 	bl	6740 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    6842:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    6844:	2400      	movs	r4, #0
    6846:	e7d1      	b.n	67ec <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x18>
  current_subgraph_index_ = previous_subgraph_idx;
    6848:	f8c5 8014 	str.w	r8, [r5, #20]
  return kTfLiteOk;
    684c:	2000      	movs	r0, #0
    684e:	e7ea      	b.n	6826 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x52>
    6850:	00032640 	.word	0x00032640

00006854 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    6854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6858:	b083      	sub	sp, #12
    685a:	4606      	mov	r6, r0
    685c:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    685e:	f8d0 b014 	ldr.w	fp, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    6862:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    6864:	6983      	ldr	r3, [r0, #24]
    6866:	6818      	ldr	r0, [r3, #0]
    6868:	f00d fa63 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    686c:	4284      	cmp	r4, r0
    686e:	d207      	bcs.n	6880 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x2c>
    6870:	46a2      	mov	sl, r4
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    6872:	4621      	mov	r1, r4
    6874:	68b0      	ldr	r0, [r6, #8]
    6876:	f7ff ff63 	bl	6740 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    687a:	4681      	mov	r9, r0
  for (size_t i = 0; i < operators_size; ++i) {
    687c:	2700      	movs	r7, #0
    687e:	e01d      	b.n	68bc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    6880:	4602      	mov	r2, r0
    6882:	4621      	mov	r1, r4
    6884:	4827      	ldr	r0, [pc, #156]	; (6924 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd0>)
    6886:	f00e fc15 	bl	150b4 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    688a:	2501      	movs	r5, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    688c:	4628      	mov	r0, r5
    688e:	b003      	add	sp, #12
    6890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK(registration->invoke);
    6894:	f012 f809 	bl	188aa <abort>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    6898:	4640      	mov	r0, r8
    689a:	f7ff ff87 	bl	67ac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    689e:	4601      	mov	r1, r0
    68a0:	462b      	mov	r3, r5
    68a2:	463a      	mov	r2, r7
    68a4:	4820      	ldr	r0, [pc, #128]	; (6928 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd4>)
    68a6:	f00e fc05 	bl	150b4 <_Z11MicroPrintfPKcz>
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
    68aa:	2c00      	cmp	r4, #0
    68ac:	d0ee      	beq.n	688c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
      profiler_->EndEvent(event_handle_);
    68ae:	6823      	ldr	r3, [r4, #0]
    68b0:	68db      	ldr	r3, [r3, #12]
    68b2:	9900      	ldr	r1, [sp, #0]
    68b4:	4620      	mov	r0, r4
    68b6:	4798      	blx	r3
    68b8:	e7e8      	b.n	688c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
  for (size_t i = 0; i < operators_size; ++i) {
    68ba:	3701      	adds	r7, #1
    68bc:	454f      	cmp	r7, r9
    68be:	d22d      	bcs.n	691c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    68c0:	6933      	ldr	r3, [r6, #16]
    68c2:	f853 303a 	ldr.w	r3, [r3, sl, lsl #3]
    68c6:	252c      	movs	r5, #44	; 0x2c
    68c8:	fb05 3507 	mla	r5, r5, r7, r3
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    68cc:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    68d0:	4640      	mov	r0, r8
    68d2:	f7ff ff6b 	bl	67ac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    68d6:	4601      	mov	r1, r0
    68d8:	6873      	ldr	r3, [r6, #4]
    68da:	6b5c      	ldr	r4, [r3, #52]	; 0x34
      : profiler_(profiler) {
    68dc:	2300      	movs	r3, #0
    68de:	9300      	str	r3, [sp, #0]
    if (profiler_ != nullptr) {
    68e0:	b124      	cbz	r4, 68ec <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x98>
      event_handle_ = profiler_->BeginEvent(tag);
    68e2:	6823      	ldr	r3, [r4, #0]
    68e4:	689b      	ldr	r3, [r3, #8]
    68e6:	4620      	mov	r0, r4
    68e8:	4798      	blx	r3
    68ea:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
    68ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
    68f0:	2b00      	cmp	r3, #0
    68f2:	d0cf      	beq.n	6894 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x40>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    68f4:	4629      	mov	r1, r5
    68f6:	6870      	ldr	r0, [r6, #4]
    68f8:	4798      	blx	r3
    68fa:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
    68fc:	68f0      	ldr	r0, [r6, #12]
    68fe:	6803      	ldr	r3, [r0, #0]
    6900:	689b      	ldr	r3, [r3, #8]
    6902:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
    6904:	2d01      	cmp	r5, #1
    6906:	d0c7      	beq.n	6898 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x44>
    } else if (invoke_status != kTfLiteOk) {
    6908:	2d00      	cmp	r5, #0
    690a:	d1ce      	bne.n	68aa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x56>
    if (profiler_ != nullptr) {
    690c:	2c00      	cmp	r4, #0
    690e:	d0d4      	beq.n	68ba <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
      profiler_->EndEvent(event_handle_);
    6910:	6823      	ldr	r3, [r4, #0]
    6912:	68db      	ldr	r3, [r3, #12]
    6914:	9900      	ldr	r1, [sp, #0]
    6916:	4620      	mov	r0, r4
    6918:	4798      	blx	r3
    691a:	e7ce      	b.n	68ba <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
  current_subgraph_index_ = previous_subgraph_idx;
    691c:	f8c6 b014 	str.w	fp, [r6, #20]
  return kTfLiteOk;
    6920:	2500      	movs	r5, #0
    6922:	e7b3      	b.n	688c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
    6924:	00032678 	.word	0x00032678
    6928:	000326ac 	.word	0x000326ac

0000692c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    692c:	b570      	push	{r4, r5, r6, lr}
    692e:	4604      	mov	r4, r0
    6930:	4615      	mov	r5, r2
      current_subgraph_index_(0) {
    6932:	4a11      	ldr	r2, [pc, #68]	; (6978 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x4c>)
    6934:	6002      	str	r2, [r0, #0]
    6936:	6041      	str	r1, [r0, #4]
    6938:	6085      	str	r5, [r0, #8]
    693a:	60c3      	str	r3, [r0, #12]
    693c:	2300      	movs	r3, #0
    693e:	6103      	str	r3, [r0, #16]
    6940:	6143      	str	r3, [r0, #20]
  if (model != nullptr) {
    6942:	b19d      	cbz	r5, 696c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    6944:	4628      	mov	r0, r5
    6946:	f00e fc40 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    694a:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    694c:	4630      	mov	r0, r6
    694e:	f00e fc42 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6952:	2808      	cmp	r0, #8
    6954:	d90c      	bls.n	6970 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    6956:	f106 0008 	add.w	r0, r6, #8
    695a:	f00e fc3c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    695e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6960:	b140      	cbz	r0, 6974 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x48>
    6962:	4628      	mov	r0, r5
    6964:	f00e fc2b 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6968:	4405      	add	r5, r0
    subgraphs_ = model->subgraphs();
    696a:	61a5      	str	r5, [r4, #24]
}
    696c:	4620      	mov	r0, r4
    696e:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6970:	2000      	movs	r0, #0
    6972:	e7f4      	b.n	695e <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x32>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6974:	2500      	movs	r5, #0
    6976:	e7f8      	b.n	696a <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3e>
    6978:	000331a8 	.word	0x000331a8

0000697c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    697c:	b570      	push	{r4, r5, r6, lr}
    697e:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    6980:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6982:	4620      	mov	r0, r4
    6984:	f00e fc21 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6988:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    698a:	4630      	mov	r0, r6
    698c:	f00e fc23 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6990:	2808      	cmp	r0, #8
    6992:	d92c      	bls.n	69ee <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x72>
    6994:	f106 0008 	add.w	r0, r6, #8
    6998:	f00e fc1d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    699c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    699e:	b340      	cbz	r0, 69f2 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x76>
    69a0:	4620      	mov	r0, r4
    69a2:	f00e fc0c 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69a6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    69a8:	6820      	ldr	r0, [r4, #0]
    69aa:	f00d f9c2 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    69ae:	4285      	cmp	r5, r0
    69b0:	d221      	bcs.n	69f6 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x7a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    69b2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    69b4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    69b8:	4620      	mov	r0, r4
    69ba:	f00e fc00 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69be:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    69c0:	4620      	mov	r0, r4
    69c2:	f00e fc02 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    69c6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    69c8:	4628      	mov	r0, r5
    69ca:	f00e fc04 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69ce:	2808      	cmp	r0, #8
    69d0:	d918      	bls.n	6a04 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x88>
    69d2:	f105 0008 	add.w	r0, r5, #8
    69d6:	f00e fbfe 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    69da:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69dc:	b1a0      	cbz	r0, 6a08 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x8c>
    69de:	4620      	mov	r0, r4
    69e0:	f00e fbed 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69e4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    69e6:	6820      	ldr	r0, [r4, #0]
    69e8:	f00d f9a3 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    69ec:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69ee:	2000      	movs	r0, #0
    69f0:	e7d4      	b.n	699c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69f2:	2400      	movs	r4, #0
    69f4:	e7d8      	b.n	69a8 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    69f6:	4b05      	ldr	r3, [pc, #20]	; (6a0c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x90>)
    69f8:	4a05      	ldr	r2, [pc, #20]	; (6a10 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x94>)
    69fa:	f44f 7183 	mov.w	r1, #262	; 0x106
    69fe:	4805      	ldr	r0, [pc, #20]	; (6a14 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x98>)
    6a00:	f00b ff44 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a04:	2000      	movs	r0, #0
    6a06:	e7e8      	b.n	69da <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a08:	2400      	movs	r4, #0
    6a0a:	e7ec      	b.n	69e6 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x6a>
    6a0c:	000323f8 	.word	0x000323f8
    6a10:	00032548 	.word	0x00032548
    6a14:	000324c4 	.word	0x000324c4

00006a18 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    6a18:	b570      	push	{r4, r5, r6, lr}
    6a1a:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    6a1c:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6a1e:	4620      	mov	r0, r4
    6a20:	f00e fbd3 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a24:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a26:	4630      	mov	r0, r6
    6a28:	f00e fbd5 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a2c:	2808      	cmp	r0, #8
    6a2e:	d92b      	bls.n	6a88 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x70>
    6a30:	f106 0008 	add.w	r0, r6, #8
    6a34:	f00e fbcf 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6a38:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a3a:	b338      	cbz	r0, 6a8c <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x74>
    6a3c:	4620      	mov	r0, r4
    6a3e:	f00e fbbe 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a42:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6a44:	6820      	ldr	r0, [r4, #0]
    6a46:	f00d f974 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6a4a:	4285      	cmp	r5, r0
    6a4c:	d220      	bcs.n	6a90 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x78>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6a4e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6a50:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6a54:	4620      	mov	r0, r4
    6a56:	f00e fbb2 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a5a:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6a5c:	4620      	mov	r0, r4
    6a5e:	f00e fbb4 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a62:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a64:	4628      	mov	r0, r5
    6a66:	f00e fbb6 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a6a:	2806      	cmp	r0, #6
    6a6c:	d917      	bls.n	6a9e <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x86>
    6a6e:	1da8      	adds	r0, r5, #6
    6a70:	f00e fbb1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6a74:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a76:	b1a0      	cbz	r0, 6aa2 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x8a>
    6a78:	4620      	mov	r0, r4
    6a7a:	f00e fba0 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a7e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6a80:	6820      	ldr	r0, [r4, #0]
    6a82:	f00d f956 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6a86:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a88:	2000      	movs	r0, #0
    6a8a:	e7d5      	b.n	6a38 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a8c:	2400      	movs	r4, #0
    6a8e:	e7d9      	b.n	6a44 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6a90:	4b05      	ldr	r3, [pc, #20]	; (6aa8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x90>)
    6a92:	4a06      	ldr	r2, [pc, #24]	; (6aac <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x94>)
    6a94:	f44f 7183 	mov.w	r1, #262	; 0x106
    6a98:	4805      	ldr	r0, [pc, #20]	; (6ab0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x98>)
    6a9a:	f00b fef7 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a9e:	2000      	movs	r0, #0
    6aa0:	e7e8      	b.n	6a74 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6aa2:	2400      	movs	r4, #0
    6aa4:	e7ec      	b.n	6a80 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x68>
    6aa6:	bf00      	nop
    6aa8:	000323f8 	.word	0x000323f8
    6aac:	00032548 	.word	0x00032548
    6ab0:	000324c4 	.word	0x000324c4

00006ab4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    6ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ab8:	4606      	mov	r6, r0
    6aba:	460d      	mov	r5, r1
    6abc:	4617      	mov	r7, r2
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    6abe:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6ac0:	4620      	mov	r0, r4
    6ac2:	f00e fb82 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ac6:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6aca:	4640      	mov	r0, r8
    6acc:	f00e fb83 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ad0:	2808      	cmp	r0, #8
    6ad2:	d93d      	bls.n	6b50 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x9c>
    6ad4:	f108 0008 	add.w	r0, r8, #8
    6ad8:	f00e fb7d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6adc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ade:	b3c8      	cbz	r0, 6b54 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa0>
    6ae0:	4620      	mov	r0, r4
    6ae2:	f00e fb6c 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ae6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6ae8:	6820      	ldr	r0, [r4, #0]
    6aea:	f00d f922 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6aee:	4285      	cmp	r5, r0
    6af0:	d232      	bcs.n	6b58 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6af2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6af4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6af8:	4620      	mov	r0, r4
    6afa:	f00e fb60 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6afe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6b00:	4620      	mov	r0, r4
    6b02:	f00e fb62 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6b06:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6b0a:	4640      	mov	r0, r8
    6b0c:	f00e fb63 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b10:	2808      	cmp	r0, #8
    6b12:	d928      	bls.n	6b66 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb2>
    6b14:	f108 0008 	add.w	r0, r8, #8
    6b18:	f00e fb5d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6b1c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b1e:	b320      	cbz	r0, 6b6a <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb6>
    6b20:	4620      	mov	r0, r4
    6b22:	f00e fb4c 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6b26:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6b28:	6820      	ldr	r0, [r4, #0]
    6b2a:	f00d f902 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6b2e:	4287      	cmp	r7, r0
    6b30:	d21d      	bcs.n	6b6e <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6b32:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6b34:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6b38:	f00e fb46 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6b3c:	6931      	ldr	r1, [r6, #16]
    6b3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6b42:	686b      	ldr	r3, [r5, #4]
    6b44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6b48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b50:	2000      	movs	r0, #0
    6b52:	e7c3      	b.n	6adc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b54:	2400      	movs	r4, #0
    6b56:	e7c7      	b.n	6ae8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6b58:	4b08      	ldr	r3, [pc, #32]	; (6b7c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6b5a:	4a09      	ldr	r2, [pc, #36]	; (6b80 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xcc>)
    6b5c:	f44f 7183 	mov.w	r1, #262	; 0x106
    6b60:	4808      	ldr	r0, [pc, #32]	; (6b84 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6b62:	f00b fe93 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b66:	2000      	movs	r0, #0
    6b68:	e7d8      	b.n	6b1c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b6a:	2400      	movs	r4, #0
    6b6c:	e7dc      	b.n	6b28 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6b6e:	4b03      	ldr	r3, [pc, #12]	; (6b7c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6b70:	4a05      	ldr	r2, [pc, #20]	; (6b88 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd4>)
    6b72:	f44f 7183 	mov.w	r1, #262	; 0x106
    6b76:	4803      	ldr	r0, [pc, #12]	; (6b84 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6b78:	f00b fe88 	bl	1288c <__assert_func>
    6b7c:	000323f8 	.word	0x000323f8
    6b80:	00032548 	.word	0x00032548
    6b84:	000324c4 	.word	0x000324c4
    6b88:	00032404 	.word	0x00032404

00006b8c <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
                                               int input_idx) {
    6b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b90:	4606      	mov	r6, r0
    6b92:	460d      	mov	r5, r1
    6b94:	4617      	mov	r7, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    6b96:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6b98:	4620      	mov	r0, r4
    6b9a:	f00e fb16 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6b9e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ba2:	4640      	mov	r0, r8
    6ba4:	f00e fb17 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ba8:	2808      	cmp	r0, #8
    6baa:	d93d      	bls.n	6c28 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x9c>
    6bac:	f108 0008 	add.w	r0, r8, #8
    6bb0:	f00e fb11 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6bb4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bb6:	b3c8      	cbz	r0, 6c2c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa0>
    6bb8:	4620      	mov	r0, r4
    6bba:	f00e fb00 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bbe:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6bc0:	6820      	ldr	r0, [r4, #0]
    6bc2:	f00d f8b6 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6bc6:	4285      	cmp	r5, r0
    6bc8:	d232      	bcs.n	6c30 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6bca:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6bcc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6bd0:	4620      	mov	r0, r4
    6bd2:	f00e faf4 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bd6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6bd8:	4620      	mov	r0, r4
    6bda:	f00e faf6 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6bde:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6be2:	4640      	mov	r0, r8
    6be4:	f00e faf7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6be8:	2806      	cmp	r0, #6
    6bea:	d928      	bls.n	6c3e <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb2>
    6bec:	f108 0006 	add.w	r0, r8, #6
    6bf0:	f00e faf1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6bf4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bf6:	b320      	cbz	r0, 6c42 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb6>
    6bf8:	4620      	mov	r0, r4
    6bfa:	f00e fae0 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bfe:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6c00:	6820      	ldr	r0, [r4, #0]
    6c02:	f00d f896 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6c06:	4287      	cmp	r7, r0
    6c08:	d21d      	bcs.n	6c46 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6c0a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6c0c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6c10:	f00e fada 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6c14:	6931      	ldr	r1, [r6, #16]
    6c16:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6c1a:	686b      	ldr	r3, [r5, #4]
    6c1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6c20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c28:	2000      	movs	r0, #0
    6c2a:	e7c3      	b.n	6bb4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c2c:	2400      	movs	r4, #0
    6c2e:	e7c7      	b.n	6bc0 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6c30:	4b08      	ldr	r3, [pc, #32]	; (6c54 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6c32:	4a09      	ldr	r2, [pc, #36]	; (6c58 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xcc>)
    6c34:	f44f 7183 	mov.w	r1, #262	; 0x106
    6c38:	4808      	ldr	r0, [pc, #32]	; (6c5c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6c3a:	f00b fe27 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c3e:	2000      	movs	r0, #0
    6c40:	e7d8      	b.n	6bf4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c42:	2400      	movs	r4, #0
    6c44:	e7dc      	b.n	6c00 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6c46:	4b03      	ldr	r3, [pc, #12]	; (6c54 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6c48:	4a05      	ldr	r2, [pc, #20]	; (6c60 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd4>)
    6c4a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6c4e:	4803      	ldr	r0, [pc, #12]	; (6c5c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6c50:	f00b fe1c 	bl	1288c <__assert_func>
    6c54:	000323f8 	.word	0x000323f8
    6c58:	00032548 	.word	0x00032548
    6c5c:	000324c4 	.word	0x000324c4
    6c60:	00032404 	.word	0x00032404

00006c64 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    6c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c68:	b083      	sub	sp, #12
    6c6a:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6c6c:	2700      	movs	r7, #0
    6c6e:	e0c8      	b.n	6e02 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19e>
    6c70:	4b71      	ldr	r3, [pc, #452]	; (6e38 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6c72:	4a72      	ldr	r2, [pc, #456]	; (6e3c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d8>)
    6c74:	f44f 7183 	mov.w	r1, #262	; 0x106
    6c78:	4871      	ldr	r0, [pc, #452]	; (6e40 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6c7a:	f00b fe07 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c7e:	2000      	movs	r0, #0
    6c80:	e01d      	b.n	6cbe <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c82:	2400      	movs	r4, #0
    6c84:	e022      	b.n	6ccc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x68>
    FLATBUFFERS_ASSERT(i < size());
    6c86:	4b6c      	ldr	r3, [pc, #432]	; (6e38 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6c88:	4a6e      	ldr	r2, [pc, #440]	; (6e44 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e0>)
    6c8a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6c8e:	486c      	ldr	r0, [pc, #432]	; (6e40 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6c90:	f00b fdfc 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c94:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6c96:	b118      	cbz	r0, 6ca0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
    6c98:	4420      	add	r0, r4
    6c9a:	f00e fb65 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    6c9e:	e000      	b.n	6ca2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3e>
    6ca0:	2000      	movs	r0, #0
      if (tensor->is_variable()) {
    6ca2:	bba0      	cbnz	r0, 6d0e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6ca4:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6ca6:	4630      	mov	r0, r6
    6ca8:	f00e fa8f 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6cac:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6cae:	4620      	mov	r0, r4
    6cb0:	f00e fa91 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cb4:	2804      	cmp	r0, #4
    6cb6:	d9e2      	bls.n	6c7e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1a>
    6cb8:	1d20      	adds	r0, r4, #4
    6cba:	f00e fa8c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6cbe:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cc0:	2800      	cmp	r0, #0
    6cc2:	d0de      	beq.n	6c82 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
    6cc4:	4620      	mov	r0, r4
    6cc6:	f00e fa7a 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6cca:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6ccc:	6820      	ldr	r0, [r4, #0]
    6cce:	f00d f830 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6cd2:	4285      	cmp	r5, r0
    6cd4:	f080 8094 	bcs.w	6e00 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19c>
    6cd8:	6820      	ldr	r0, [r4, #0]
    6cda:	f00d f82a 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6cde:	4285      	cmp	r5, r0
    6ce0:	d2d1      	bcs.n	6c86 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6ce2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6ce4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ce8:	4620      	mov	r0, r4
    6cea:	f00e fa68 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6cee:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6cf0:	4620      	mov	r0, r4
    6cf2:	f00e fa6a 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6cf6:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6cfa:	4648      	mov	r0, r9
    6cfc:	f00e fa6b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d00:	280e      	cmp	r0, #14
    6d02:	d9c7      	bls.n	6c94 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x30>
    6d04:	f109 000e 	add.w	r0, r9, #14
    6d08:	f00e fa65 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6d0c:	e7c3      	b.n	6c96 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x32>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    6d0e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6d12:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    6d16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    6d1a:	6858      	ldr	r0, [r3, #4]
    6d1c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6d20:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    6d24:	a901      	add	r1, sp, #4
    6d26:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6d2a:	f00e fa27 	bl	1517c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    6d2e:	4603      	mov	r3, r0
    6d30:	2800      	cmp	r0, #0
    6d32:	d17d      	bne.n	6e30 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1cc>
    return data_ - ReadScalar<soffset_t>(data_);
    6d34:	4620      	mov	r0, r4
    6d36:	f00e fa48 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d3a:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d3e:	4648      	mov	r0, r9
    6d40:	f00e fa49 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d44:	2806      	cmp	r0, #6
    6d46:	d914      	bls.n	6d72 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    6d48:	f109 0006 	add.w	r0, r9, #6
    6d4c:	f00e fa43 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6d50:	b188      	cbz	r0, 6d76 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
    6d52:	4420      	add	r0, r4
    6d54:	f00e fa45 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        if (tensor->type() == tflite::TensorType_INT8) {
    6d58:	2809      	cmp	r0, #9
    6d5a:	d00e      	beq.n	6d7a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x116>
        int value = 0;
    6d5c:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    6d5e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6d62:	4453      	add	r3, sl
    6d64:	685b      	ldr	r3, [r3, #4]
    6d66:	9a01      	ldr	r2, [sp, #4]
    6d68:	f853 000b 	ldr.w	r0, [r3, fp]
    6d6c:	f011 fdc4 	bl	188f8 <memset>
    6d70:	e798      	b.n	6ca4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d72:	2000      	movs	r0, #0
    6d74:	e7ec      	b.n	6d50 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6d76:	2000      	movs	r0, #0
    6d78:	e7ee      	b.n	6d58 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
    return data_ - ReadScalar<soffset_t>(data_);
    6d7a:	4620      	mov	r0, r4
    6d7c:	f00e fa25 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d80:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d84:	4648      	mov	r0, r9
    6d86:	f00e fa26 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d8a:	280c      	cmp	r0, #12
    6d8c:	d928      	bls.n	6de0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17c>
    6d8e:	f109 000c 	add.w	r0, r9, #12
    6d92:	f00e fa20 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d96:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d98:	b320      	cbz	r0, 6de4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x180>
    6d9a:	4620      	mov	r0, r4
    6d9c:	f00e fa0f 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6da0:	4404      	add	r4, r0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    6da2:	46a1      	mov	r9, r4
    return data_ - ReadScalar<soffset_t>(data_);
    6da4:	4620      	mov	r0, r4
    6da6:	f00e fa10 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6daa:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6dac:	4620      	mov	r0, r4
    6dae:	f00e fa12 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6db2:	280a      	cmp	r0, #10
    6db4:	d918      	bls.n	6de8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x184>
    6db6:	f104 000a 	add.w	r0, r4, #10
    6dba:	f00e fa0c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6dbe:	4481      	add	r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6dc0:	b1a0      	cbz	r0, 6dec <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x188>
    6dc2:	4648      	mov	r0, r9
    6dc4:	f00e f9fb 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6dc8:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6dca:	f8d9 0000 	ldr.w	r0, [r9]
    6dce:	f00c ffb0 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6dd2:	b170      	cbz	r0, 6df2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18e>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6dd4:	e9d9 0101 	ldrd	r0, r1, [r9, #4]
    6dd8:	f00e facb 	bl	15372 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    6ddc:	4601      	mov	r1, r0
    6dde:	e7be      	b.n	6d5e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6de0:	2000      	movs	r0, #0
    6de2:	e7d8      	b.n	6d96 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6de4:	2400      	movs	r4, #0
    6de6:	e7dc      	b.n	6da2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x13e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6de8:	2000      	movs	r0, #0
    6dea:	e7e8      	b.n	6dbe <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6dec:	f04f 0900 	mov.w	r9, #0
    6df0:	e7eb      	b.n	6dca <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x166>
    FLATBUFFERS_ASSERT(i < size());
    6df2:	4b11      	ldr	r3, [pc, #68]	; (6e38 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6df4:	4a14      	ldr	r2, [pc, #80]	; (6e48 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e4>)
    6df6:	f44f 7183 	mov.w	r1, #262	; 0x106
    6dfa:	4811      	ldr	r0, [pc, #68]	; (6e40 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6dfc:	f00b fd46 	bl	1288c <__assert_func>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6e00:	3701      	adds	r7, #1
    6e02:	f8d8 6018 	ldr.w	r6, [r8, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6e06:	6830      	ldr	r0, [r6, #0]
    6e08:	f00c ff93 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6e0c:	4287      	cmp	r7, r0
    6e0e:	d20e      	bcs.n	6e2e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1ca>
    6e10:	6830      	ldr	r0, [r6, #0]
    6e12:	f00c ff8e 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6e16:	4287      	cmp	r7, r0
    6e18:	f4bf af2a 	bcs.w	6c70 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e1c:	3604      	adds	r6, #4
    p += i * sizeof(uoffset_t);
    6e1e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6e22:	4630      	mov	r0, r6
    6e24:	f00e f9cb 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e28:	4406      	add	r6, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6e2a:	2500      	movs	r5, #0
    6e2c:	e73b      	b.n	6ca6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x42>
  return kTfLiteOk;
    6e2e:	2300      	movs	r3, #0
}
    6e30:	4618      	mov	r0, r3
    6e32:	b003      	add	sp, #12
    6e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e38:	000323f8 	.word	0x000323f8
    6e3c:	00032548 	.word	0x00032548
    6e40:	000324c4 	.word	0x000324c4
    6e44:	000326e0 	.word	0x000326e0
    6e48:	000327d4 	.word	0x000327d4

00006e4c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
    6e4c:	6180      	str	r0, [r0, #24]
  context_.ReportError = ReportOpError;
    6e4e:	4b05      	ldr	r3, [pc, #20]	; (6e64 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x18>)
    6e50:	6203      	str	r3, [r0, #32]
  context_.GetTensor = GetTensor;
    6e52:	4b05      	ldr	r3, [pc, #20]	; (6e68 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x1c>)
    6e54:	65c3      	str	r3, [r0, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    6e56:	4b05      	ldr	r3, [pc, #20]	; (6e6c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x20>)
    6e58:	6603      	str	r3, [r0, #96]	; 0x60
  context_.profiler = profiler;
    6e5a:	6401      	str	r1, [r0, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
    6e5c:	2300      	movs	r3, #0
    6e5e:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
}
    6e62:	4770      	bx	lr
    6e64:	000154f9 	.word	0x000154f9
    6e68:	000154a7 	.word	0x000154a7
    6e6c:	000154c5 	.word	0x000154c5

00006e70 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    6e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e72:	4605      	mov	r5, r0
    6e74:	460e      	mov	r6, r1
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
    6e76:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6e78:	4620      	mov	r0, r4
    6e7a:	f00e f9a6 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e7e:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e80:	4638      	mov	r0, r7
    6e82:	f00e f9a8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e86:	2808      	cmp	r0, #8
    6e88:	d92f      	bls.n	6eea <_ZN6tflite16MicroInterpreter6outputEj+0x7a>
    6e8a:	f107 0008 	add.w	r0, r7, #8
    6e8e:	f00e f9a2 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6e92:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e94:	b358      	cbz	r0, 6eee <_ZN6tflite16MicroInterpreter6outputEj+0x7e>
    6e96:	4620      	mov	r0, r4
    6e98:	f00e f991 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e9c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6e9e:	6820      	ldr	r0, [r4, #0]
    6ea0:	f00c ff47 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6ea4:	b328      	cbz	r0, 6ef2 <_ZN6tflite16MicroInterpreter6outputEj+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6ea6:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ea8:	4620      	mov	r0, r4
    6eaa:	f00e f988 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6eae:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6eb0:	4620      	mov	r0, r4
    6eb2:	f00e f98a 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6eb6:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6eb8:	4638      	mov	r0, r7
    6eba:	f00e f98c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ebe:	2808      	cmp	r0, #8
    6ec0:	d91e      	bls.n	6f00 <_ZN6tflite16MicroInterpreter6outputEj+0x90>
    6ec2:	f107 0008 	add.w	r0, r7, #8
    6ec6:	f00e f986 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6eca:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ecc:	b1d0      	cbz	r0, 6f04 <_ZN6tflite16MicroInterpreter6outputEj+0x94>
    6ece:	4620      	mov	r0, r4
    6ed0:	f00e f975 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ed4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6ed6:	6820      	ldr	r0, [r4, #0]
    6ed8:	f00c ff2b 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  const size_t length = outputs_size();
  if (index >= length) {
    6edc:	4286      	cmp	r6, r0
    6ede:	d213      	bcs.n	6f08 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return output_tensors_[index];
    6ee0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6ee4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    6ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6eea:	2000      	movs	r0, #0
    6eec:	e7d1      	b.n	6e92 <_ZN6tflite16MicroInterpreter6outputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6eee:	2400      	movs	r4, #0
    6ef0:	e7d5      	b.n	6e9e <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    6ef2:	4b09      	ldr	r3, [pc, #36]	; (6f18 <_ZN6tflite16MicroInterpreter6outputEj+0xa8>)
    6ef4:	4a09      	ldr	r2, [pc, #36]	; (6f1c <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
    6ef6:	f44f 7183 	mov.w	r1, #262	; 0x106
    6efa:	4809      	ldr	r0, [pc, #36]	; (6f20 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
    6efc:	f00b fcc6 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f00:	2000      	movs	r0, #0
    6f02:	e7e2      	b.n	6eca <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f04:	2400      	movs	r4, #0
    6f06:	e7e6      	b.n	6ed6 <_ZN6tflite16MicroInterpreter6outputEj+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6f08:	4603      	mov	r3, r0
    6f0a:	4632      	mov	r2, r6
    6f0c:	4905      	ldr	r1, [pc, #20]	; (6f24 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
    6f0e:	68a8      	ldr	r0, [r5, #8]
    6f10:	f00e fed5 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6f14:	2000      	movs	r0, #0
    6f16:	e7e7      	b.n	6ee8 <_ZN6tflite16MicroInterpreter6outputEj+0x78>
    6f18:	000323f8 	.word	0x000323f8
    6f1c:	00032548 	.word	0x00032548
    6f20:	000324c4 	.word	0x000324c4
    6f24:	000331d8 	.word	0x000331d8

00006f28 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    6f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f2a:	4605      	mov	r5, r0
    6f2c:	460e      	mov	r6, r1
    return model_->subgraphs()->Get(0)->inputs()->size();
    6f2e:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6f30:	4620      	mov	r0, r4
    6f32:	f00e f94a 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f36:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f38:	4638      	mov	r0, r7
    6f3a:	f00e f94c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f3e:	2808      	cmp	r0, #8
    6f40:	d92e      	bls.n	6fa0 <_ZN6tflite16MicroInterpreter5inputEj+0x78>
    6f42:	f107 0008 	add.w	r0, r7, #8
    6f46:	f00e f946 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6f4a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f4c:	b350      	cbz	r0, 6fa4 <_ZN6tflite16MicroInterpreter5inputEj+0x7c>
    6f4e:	4620      	mov	r0, r4
    6f50:	f00e f935 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f54:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6f56:	6820      	ldr	r0, [r4, #0]
    6f58:	f00c feeb 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6f5c:	b320      	cbz	r0, 6fa8 <_ZN6tflite16MicroInterpreter5inputEj+0x80>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6f5e:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6f60:	4620      	mov	r0, r4
    6f62:	f00e f92c 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f66:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6f68:	4620      	mov	r0, r4
    6f6a:	f00e f92e 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f6e:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f70:	4638      	mov	r0, r7
    6f72:	f00e f930 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f76:	2806      	cmp	r0, #6
    6f78:	d91d      	bls.n	6fb6 <_ZN6tflite16MicroInterpreter5inputEj+0x8e>
    6f7a:	1db8      	adds	r0, r7, #6
    6f7c:	f00e f92b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6f80:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f82:	b1d0      	cbz	r0, 6fba <_ZN6tflite16MicroInterpreter5inputEj+0x92>
    6f84:	4620      	mov	r0, r4
    6f86:	f00e f91a 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f8a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6f8c:	6820      	ldr	r0, [r4, #0]
    6f8e:	f00c fed0 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  if (index >= length) {
    6f92:	4286      	cmp	r6, r0
    6f94:	d213      	bcs.n	6fbe <_ZN6tflite16MicroInterpreter5inputEj+0x96>
  return input_tensors_[index];
    6f96:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    6f9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    6f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fa0:	2000      	movs	r0, #0
    6fa2:	e7d2      	b.n	6f4a <_ZN6tflite16MicroInterpreter5inputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fa4:	2400      	movs	r4, #0
    6fa6:	e7d6      	b.n	6f56 <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    6fa8:	4b09      	ldr	r3, [pc, #36]	; (6fd0 <_ZN6tflite16MicroInterpreter5inputEj+0xa8>)
    6faa:	4a0a      	ldr	r2, [pc, #40]	; (6fd4 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
    6fac:	f44f 7183 	mov.w	r1, #262	; 0x106
    6fb0:	4809      	ldr	r0, [pc, #36]	; (6fd8 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
    6fb2:	f00b fc6b 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fb6:	2000      	movs	r0, #0
    6fb8:	e7e2      	b.n	6f80 <_ZN6tflite16MicroInterpreter5inputEj+0x58>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fba:	2400      	movs	r4, #0
    6fbc:	e7e6      	b.n	6f8c <_ZN6tflite16MicroInterpreter5inputEj+0x64>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6fbe:	4603      	mov	r3, r0
    6fc0:	4632      	mov	r2, r6
    6fc2:	4906      	ldr	r1, [pc, #24]	; (6fdc <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
    6fc4:	68a8      	ldr	r0, [r5, #8]
    6fc6:	f00e fe7a 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6fca:	2000      	movs	r0, #0
    6fcc:	e7e7      	b.n	6f9e <_ZN6tflite16MicroInterpreter5inputEj+0x76>
    6fce:	bf00      	nop
    6fd0:	000323f8 	.word	0x000323f8
    6fd4:	00032548 	.word	0x00032548
    6fd8:	000324c4 	.word	0x000324c4
    6fdc:	00033204 	.word	0x00033204

00006fe0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    6fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fe4:	b08b      	sub	sp, #44	; 0x2c
    6fe6:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    6fe8:	2300      	movs	r3, #0
    6fea:	9305      	str	r3, [sp, #20]
    6fec:	f10b 006c 	add.w	r0, fp, #108	; 0x6c
    6ff0:	f00e fa2f 	bl	15452 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    6ff4:	9b05      	ldr	r3, [sp, #20]
    6ff6:	4298      	cmp	r0, r3
    6ff8:	f340 81f6 	ble.w	73e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x408>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    6ffc:	f8db 5000 	ldr.w	r5, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
    7000:	4628      	mov	r0, r5
    7002:	f00e f8e2 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7006:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7008:	4620      	mov	r0, r4
    700a:	f00e f8e4 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    700e:	2808      	cmp	r0, #8
    7010:	d927      	bls.n	7062 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x82>
    7012:	f104 0008 	add.w	r0, r4, #8
    7016:	f00e f8de 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    701a:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    701c:	b318      	cbz	r0, 7066 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x86>
    701e:	4620      	mov	r0, r4
    7020:	f00e f8cd 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7024:	4404      	add	r4, r0
    7026:	9e05      	ldr	r6, [sp, #20]
    7028:	9600      	str	r6, [sp, #0]
  uoffset_t size() const { return EndianScalar(length_); }
    702a:	6820      	ldr	r0, [r4, #0]
    702c:	f00c fe81 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7030:	4286      	cmp	r6, r0
    7032:	d21a      	bcs.n	706a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7034:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7036:	9b05      	ldr	r3, [sp, #20]
    7038:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    703c:	4620      	mov	r0, r4
    703e:	f00e f8be 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7042:	1823      	adds	r3, r4, r0
    7044:	9302      	str	r3, [sp, #8]
    7046:	d017      	beq.n	7078 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
    return data_ - ReadScalar<soffset_t>(data_);
    7048:	4628      	mov	r0, r5
    704a:	f00e f8be 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    704e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7050:	4620      	mov	r0, r4
    7052:	f00e f8c0 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7056:	2806      	cmp	r0, #6
    7058:	d910      	bls.n	707c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9c>
    705a:	1da0      	adds	r0, r4, #6
    705c:	f00e f8bb 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7060:	e00d      	b.n	707e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9e>
    7062:	2000      	movs	r0, #0
    7064:	e7d9      	b.n	701a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7066:	2400      	movs	r4, #0
    7068:	e7dd      	b.n	7026 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x46>
    FLATBUFFERS_ASSERT(i < size());
    706a:	4b4e      	ldr	r3, [pc, #312]	; (71a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    706c:	4a4e      	ldr	r2, [pc, #312]	; (71a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c8>)
    706e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7072:	484e      	ldr	r0, [pc, #312]	; (71ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    7074:	f00b fc0a 	bl	1288c <__assert_func>
    7078:	f011 fc17 	bl	188aa <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    707c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    707e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7080:	b178      	cbz	r0, 70a2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc2>
    7082:	4628      	mov	r0, r5
    7084:	f00e f89b 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7088:	eb05 0900 	add.w	r9, r5, r0
        allocator_.GetBuiltinDataAllocator();
    708c:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
    7090:	f00e fba6 	bl	157e0 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    7094:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7096:	9802      	ldr	r0, [sp, #8]
    7098:	f00e f947 	bl	1532a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    709c:	9003      	str	r0, [sp, #12]
    for (size_t i = 0; i < operators_size; ++i) {
    709e:	2700      	movs	r7, #0
    70a0:	e0dd      	b.n	725e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
    70a2:	f04f 0900 	mov.w	r9, #0
    70a6:	e7f1      	b.n	708c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70a8:	2000      	movs	r0, #0
    70aa:	e0eb      	b.n	7284 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70ac:	2400      	movs	r4, #0
    70ae:	e0f2      	b.n	7296 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b6>
    FLATBUFFERS_ASSERT(i < size());
    70b0:	4b3c      	ldr	r3, [pc, #240]	; (71a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    70b2:	4a3f      	ldr	r2, [pc, #252]	; (71b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>)
    70b4:	f44f 7183 	mov.w	r1, #262	; 0x106
    70b8:	483c      	ldr	r0, [pc, #240]	; (71ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    70ba:	f00b fbe7 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70be:	2000      	movs	r0, #0
    70c0:	e103      	b.n	72ca <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ea>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    70c2:	2600      	movs	r6, #0
    70c4:	e108      	b.n	72d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    70c6:	4631      	mov	r1, r6
    70c8:	483a      	ldr	r0, [pc, #232]	; (71b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
    70ca:	f00d fff3 	bl	150b4 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    70ce:	2301      	movs	r3, #1
    70d0:	461c      	mov	r4, r3
}
    70d2:	4620      	mov	r0, r4
    70d4:	b00b      	add	sp, #44	; 0x2c
    70d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    70da:	4b32      	ldr	r3, [pc, #200]	; (71a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    70dc:	4a36      	ldr	r2, [pc, #216]	; (71b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
    70de:	f44f 7183 	mov.w	r1, #262	; 0x106
    70e2:	4832      	ldr	r0, [pc, #200]	; (71ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    70e4:	f00b fbd2 	bl	1288c <__assert_func>
    70e8:	4604      	mov	r4, r0
        MicroPrintf("Failed to get registration from op code %s\n ",
    70ea:	4650      	mov	r0, sl
    70ec:	f00e fe05 	bl	15cfa <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    70f0:	2891      	cmp	r0, #145	; 0x91
    70f2:	d806      	bhi.n	7102 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
  return EnumNamesBuiltinOperator()[index];
    70f4:	4b31      	ldr	r3, [pc, #196]	; (71bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    70f6:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    70fa:	4831      	ldr	r0, [pc, #196]	; (71c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e0>)
    70fc:	f00d ffda 	bl	150b4 <_Z11MicroPrintfPKcz>
        return status;
    7100:	e7e7      	b.n	70d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7102:	4930      	ldr	r1, [pc, #192]	; (71c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    7104:	e7f9      	b.n	70fa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    7106:	4631      	mov	r1, r6
    7108:	482f      	ldr	r0, [pc, #188]	; (71c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>)
    710a:	f00d ffd3 	bl	150b4 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    710e:	2301      	movs	r3, #1
    7110:	461c      	mov	r4, r3
    7112:	e7de      	b.n	70d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    return data_ - ReadScalar<soffset_t>(data_);
    7114:	4620      	mov	r0, r4
    7116:	f00e f858 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    711a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    711c:	4630      	mov	r0, r6
    711e:	f00e f85a 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7122:	280e      	cmp	r0, #14
    7124:	d904      	bls.n	7130 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x150>
    7126:	f106 000e 	add.w	r0, r6, #14
    712a:	f00e f854 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    712e:	e000      	b.n	7132 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x152>
    7130:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7132:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7134:	b160      	cbz	r0, 7150 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x170>
    7136:	4630      	mov	r0, r6
    7138:	f00e f841 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    713c:	4430      	add	r0, r6
        if (op->custom_options() != nullptr) {
    713e:	b360      	cbz	r0, 719a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7140:	4603      	mov	r3, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7142:	f853 0b04 	ldr.w	r0, [r3], #4
    7146:	9301      	str	r3, [sp, #4]
    7148:	f00c fdf3 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    714c:	4682      	mov	sl, r0
    714e:	e131      	b.n	73b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7150:	2000      	movs	r0, #0
    7152:	e7f4      	b.n	713e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7154:	2000      	movs	r0, #0
    7156:	e10b      	b.n	7370 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x390>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7158:	2300      	movs	r3, #0
    715a:	9301      	str	r3, [sp, #4]
    715c:	e113      	b.n	7386 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a6>
  return (v < low) || (high < v);
    715e:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    7162:	d809      	bhi.n	7178 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x198>
  const size_t index = static_cast<size_t>(e);
    7164:	b2f2      	uxtb	r2, r6
  return EnumNamesBuiltinOperator()[index];
    7166:	4b15      	ldr	r3, [pc, #84]	; (71bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
          MicroPrintf(
    716c:	4817      	ldr	r0, [pc, #92]	; (71cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>)
    716e:	f00d ffa1 	bl	150b4 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    7172:	2301      	movs	r3, #1
    7174:	461c      	mov	r4, r3
    7176:	e7ac      	b.n	70d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7178:	4912      	ldr	r1, [pc, #72]	; (71c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    717a:	e7f7      	b.n	716c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18c>
    717c:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    7180:	d804      	bhi.n	718c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
  const size_t index = static_cast<size_t>(e);
    7182:	b2f3      	uxtb	r3, r6
  return EnumNamesBuiltinOperator()[index];
    7184:	4a0d      	ldr	r2, [pc, #52]	; (71bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7186:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    718a:	e000      	b.n	718e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ae>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    718c:	490d      	ldr	r1, [pc, #52]	; (71c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
          MicroPrintf("Did not find a parser for %s",
    718e:	4810      	ldr	r0, [pc, #64]	; (71d0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>)
    7190:	f00d ff90 	bl	150b4 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    7194:	2301      	movs	r3, #1
    7196:	461c      	mov	r4, r3
    7198:	e79b      	b.n	70d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
      const char* custom_data = nullptr;
    719a:	9001      	str	r0, [sp, #4]
      size_t custom_data_size = 0;
    719c:	f04f 0a00 	mov.w	sl, #0
    71a0:	e108      	b.n	73b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    71a2:	bf00      	nop
    71a4:	000323f8 	.word	0x000323f8
    71a8:	00032548 	.word	0x00032548
    71ac:	000324c4 	.word	0x000324c4
    71b0:	00033230 	.word	0x00033230
    71b4:	00033328 	.word	0x00033328
    71b8:	00033354 	.word	0x00033354
    71bc:	00032f54 	.word	0x00032f54
    71c0:	00033454 	.word	0x00033454
    71c4:	00031c00 	.word	0x00031c00
    71c8:	00033484 	.word	0x00033484
    71cc:	000334a8 	.word	0x000334a8
    71d0:	000334f0 	.word	0x000334f0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71d4:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    71d6:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71d8:	2800      	cmp	r0, #0
    71da:	f000 80fb 	beq.w	73d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f4>
    71de:	4630      	mov	r0, r6
    71e0:	f00d ffed 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71e4:	1831      	adds	r1, r6, r0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    71e6:	aa08      	add	r2, sp, #32
    71e8:	4640      	mov	r0, r8
    71ea:	f00e fb05 	bl	157f8 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    71ee:	2800      	cmp	r0, #0
    71f0:	f040 80ff 	bne.w	73f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x412>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    71f4:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    71f8:	4620      	mov	r0, r4
    71fa:	f00d ffe6 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    71fe:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7200:	4630      	mov	r0, r6
    7202:	f00d ffe8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7206:	2808      	cmp	r0, #8
    7208:	f240 80e6 	bls.w	73d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f8>
    720c:	f106 0008 	add.w	r0, r6, #8
    7210:	f00d ffe1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7214:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7216:	2800      	cmp	r0, #0
    7218:	f000 80e0 	beq.w	73dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3fc>
    721c:	4620      	mov	r0, r4
    721e:	f00d ffce 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7222:	1821      	adds	r1, r4, r0
    7224:	aa09      	add	r2, sp, #36	; 0x24
    7226:	4640      	mov	r0, r8
    7228:	f00e fae6 	bl	157f8 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    722c:	2800      	cmp	r0, #0
    722e:	f040 80e2 	bne.w	73f6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x416>
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    7232:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    7236:	9a00      	ldr	r2, [sp, #0]
    7238:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
    723c:	1974      	adds	r4, r6, r5
      *node = {};
    723e:	2228      	movs	r2, #40	; 0x28
    7240:	2100      	movs	r1, #0
    7242:	4620      	mov	r0, r4
    7244:	f011 fb58 	bl	188f8 <memset>
      node->inputs = inputs_array;
    7248:	9b08      	ldr	r3, [sp, #32]
    724a:	5173      	str	r3, [r6, r5]
      node->outputs = outputs_array;
    724c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    724e:	6063      	str	r3, [r4, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    7250:	9b07      	ldr	r3, [sp, #28]
    7252:	6163      	str	r3, [r4, #20]
      node->custom_initial_data = custom_data;
    7254:	9b01      	ldr	r3, [sp, #4]
    7256:	61a3      	str	r3, [r4, #24]
      node->custom_initial_data_size = custom_data_size;
    7258:	f8c4 a01c 	str.w	sl, [r4, #28]
    for (size_t i = 0; i < operators_size; ++i) {
    725c:	3701      	adds	r7, #1
    725e:	9b03      	ldr	r3, [sp, #12]
    7260:	429f      	cmp	r7, r3
    7262:	f080 80bd 	bcs.w	73e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x400>
    return data_ - ReadScalar<soffset_t>(data_);
    7266:	9c02      	ldr	r4, [sp, #8]
    7268:	4620      	mov	r0, r4
    726a:	f00d ffae 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    726e:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7270:	4620      	mov	r0, r4
    7272:	f00d ffb0 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7276:	280a      	cmp	r0, #10
    7278:	f67f af16 	bls.w	70a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
    727c:	f104 000a 	add.w	r0, r4, #10
    7280:	f00d ffa9 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7284:	9b02      	ldr	r3, [sp, #8]
    7286:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7288:	2800      	cmp	r0, #0
    728a:	f43f af0f 	beq.w	70ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xcc>
    728e:	4620      	mov	r0, r4
    7290:	f00d ff95 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7294:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7296:	6820      	ldr	r0, [r4, #0]
    7298:	f00c fd4b 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    729c:	4287      	cmp	r7, r0
    729e:	f4bf af07 	bcs.w	70b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    72a2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    72a4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    72a8:	4620      	mov	r0, r4
    72aa:	f00d ff88 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    72ae:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    72b0:	4620      	mov	r0, r4
    72b2:	f00d ff8a 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    72b6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    72b8:	4628      	mov	r0, r5
    72ba:	f00d ff8c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72be:	2804      	cmp	r0, #4
    72c0:	f67f aefd 	bls.w	70be <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xde>
    72c4:	1d28      	adds	r0, r5, #4
    72c6:	f00d ff86 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    72ca:	2800      	cmp	r0, #0
    72cc:	f43f aef9 	beq.w	70c2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe2>
    72d0:	4420      	add	r0, r4
    72d2:	f00d ff74 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    72d6:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    72d8:	f8d9 0000 	ldr.w	r0, [r9]
    72dc:	f00c fd29 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (index >= opcodes->size()) {
    72e0:	42b0      	cmp	r0, r6
    72e2:	f67f aef0 	bls.w	70c6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
    72e6:	f8d9 0000 	ldr.w	r0, [r9]
    72ea:	f00c fd22 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    72ee:	4286      	cmp	r6, r0
    72f0:	f4bf aef3 	bcs.w	70da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xfa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    72f4:	f109 0a04 	add.w	sl, r9, #4
    p += i * sizeof(uoffset_t);
    72f8:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    72fc:	4650      	mov	r0, sl
    72fe:	f00d ff5e 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7302:	4482      	add	sl, r0
    7304:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                          .node_and_registrations[i]
    7308:	9a00      	ldr	r2, [sp, #0]
    730a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    730e:	252c      	movs	r5, #44	; 0x2c
    7310:	fb05 f507 	mul.w	r5, r5, r7
    7314:	442b      	add	r3, r5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    7316:	3328      	adds	r3, #40	; 0x28
    7318:	f8db 2008 	ldr.w	r2, [fp, #8]
    731c:	f8db 1004 	ldr.w	r1, [fp, #4]
    7320:	4650      	mov	r0, sl
    7322:	f003 f87d 	bl	a420 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    7326:	2800      	cmp	r0, #0
    7328:	f47f aede 	bne.w	70e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
    732c:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                     .node_and_registrations[i]
    7330:	9a00      	ldr	r2, [sp, #0]
    7332:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    7336:	442b      	add	r3, r5
                                     .registration;
    7338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
    733a:	2b00      	cmp	r3, #0
    733c:	f43f aee3 	beq.w	7106 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
          static_cast<BuiltinOperator>(registration->builtin_code);
    7340:	695e      	ldr	r6, [r3, #20]
      BuiltinOperator op_type =
    7342:	fa5f fa86 	uxtb.w	sl, r6
      unsigned char* builtin_data = nullptr;
    7346:	2300      	movs	r3, #0
    7348:	9307      	str	r3, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    734a:	f1ba 0f20 	cmp.w	sl, #32
    734e:	f43f aee1 	beq.w	7114 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x134>
    return data_ - ReadScalar<soffset_t>(data_);
    7352:	4620      	mov	r0, r4
    7354:	f00d ff39 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7358:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    735c:	4640      	mov	r0, r8
    735e:	f00d ff3a 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7362:	280e      	cmp	r0, #14
    7364:	f67f aef6 	bls.w	7154 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
    7368:	f108 000e 	add.w	r0, r8, #14
    736c:	f00d ff33 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7370:	eb04 0800 	add.w	r8, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7374:	2800      	cmp	r0, #0
    7376:	f43f aeef 	beq.w	7158 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x178>
    737a:	4640      	mov	r0, r8
    737c:	f00d ff1f 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7380:	eb08 0300 	add.w	r3, r8, r0
    7384:	9301      	str	r3, [sp, #4]
        if (op->custom_options() != nullptr) {
    7386:	9b01      	ldr	r3, [sp, #4]
    7388:	2b00      	cmp	r3, #0
    738a:	f47f aee8 	bne.w	715e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17e>
            op_resolver_.GetOpDataParser(op_type);
    738e:	f8db 0004 	ldr.w	r0, [fp, #4]
    7392:	6803      	ldr	r3, [r0, #0]
    7394:	6a1b      	ldr	r3, [r3, #32]
    7396:	4651      	mov	r1, sl
    7398:	4798      	blx	r3
        if (parser == nullptr) {
    739a:	4680      	mov	r8, r0
    739c:	2800      	cmp	r0, #0
    739e:	f43f aeed 	beq.w	717c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    73a2:	ab07      	add	r3, sp, #28
    73a4:	9a04      	ldr	r2, [sp, #16]
    73a6:	f8db 1008 	ldr.w	r1, [fp, #8]
    73aa:	4620      	mov	r0, r4
    73ac:	47c0      	blx	r8
    73ae:	b9f0      	cbnz	r0, 73ee <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x40e>
      size_t custom_data_size = 0;
    73b0:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    73b4:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    73b8:	4620      	mov	r0, r4
    73ba:	f00d ff06 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    73be:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    73c0:	4630      	mov	r0, r6
    73c2:	f00d ff08 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73c6:	2806      	cmp	r0, #6
    73c8:	f67f af04 	bls.w	71d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f4>
    73cc:	1db0      	adds	r0, r6, #6
    73ce:	f00d ff02 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    73d2:	e700      	b.n	71d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73d4:	2100      	movs	r1, #0
    73d6:	e706      	b.n	71e6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73d8:	2000      	movs	r0, #0
    73da:	e71b      	b.n	7214 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73dc:	2100      	movs	r1, #0
    73de:	e721      	b.n	7224 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x244>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    73e0:	9b05      	ldr	r3, [sp, #20]
    73e2:	3301      	adds	r3, #1
    73e4:	9305      	str	r3, [sp, #20]
    73e6:	e601      	b.n	6fec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    73e8:	2300      	movs	r3, #0
    73ea:	461c      	mov	r4, r3
    73ec:	e671      	b.n	70d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    73ee:	4604      	mov	r4, r0
    73f0:	e66f      	b.n	70d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    73f2:	4604      	mov	r4, r0
    73f4:	e66d      	b.n	70d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    73f6:	4604      	mov	r4, r0
    73f8:	e66b      	b.n	70d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    73fa:	bf00      	nop

000073fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    73fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7400:	b083      	sub	sp, #12
    7402:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    7404:	6801      	ldr	r1, [r0, #0]
    7406:	6e80      	ldr	r0, [r0, #104]	; 0x68
    7408:	f000 fe60 	bl	80cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    740c:	b170      	cbz	r0, 742c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30>
    740e:	4601      	mov	r1, r0
  graph_.SetSubgraphAllocations(allocations);
    7410:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    7414:	4630      	mov	r0, r6
    7416:	f00d ffba 	bl	1538e <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    741a:	4628      	mov	r0, r5
    741c:	f7ff fde0 	bl	6fe0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    7420:	4603      	mov	r3, r0
    7422:	b158      	cbz	r0, 743c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
}
    7424:	4618      	mov	r0, r3
    7426:	b003      	add	sp, #12
    7428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    742c:	49bc      	ldr	r1, [pc, #752]	; (7720 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
    742e:	68a8      	ldr	r0, [r5, #8]
    7430:	f00e fc45 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    7434:	2301      	movs	r3, #1
    7436:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
    return kTfLiteError;
    743a:	e7f3      	b.n	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    743c:	4bb9      	ldr	r3, [pc, #740]	; (7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x328>)
    743e:	646b      	str	r3, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    7440:	2400      	movs	r4, #0
    7442:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
    7444:	652c      	str	r4, [r5, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
    7446:	4bb8      	ldr	r3, [pc, #736]	; (7728 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x32c>)
    7448:	612b      	str	r3, [r5, #16]
  graph_.InitSubgraphs();
    744a:	4630      	mov	r0, r6
    744c:	f00d ffa1 	bl	15392 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    7450:	4bb6      	ldr	r3, [pc, #728]	; (772c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x330>)
    7452:	64eb      	str	r3, [r5, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    7454:	4630      	mov	r0, r6
    7456:	f7ff f9bd 	bl	67d4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.AllocatePersistentBuffer = nullptr;
    745a:	646c      	str	r4, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    745c:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    745e:	4bb4      	ldr	r3, [pc, #720]	; (7730 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x334>)
    7460:	652b      	str	r3, [r5, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    7462:	462b      	mov	r3, r5
    7464:	f853 1b8c 	ldr.w	r1, [r3], #140
    7468:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    746a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    746c:	f000 fb90 	bl	7b90 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    7470:	4603      	mov	r3, r0
    7472:	2800      	cmp	r0, #0
    7474:	d1d6      	bne.n	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7476:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
    7478:	6833      	ldr	r3, [r6, #0]
    747a:	68df      	ldr	r7, [r3, #12]
    747c:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    747e:	4620      	mov	r0, r4
    7480:	f00d fea3 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7484:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7488:	4640      	mov	r0, r8
    748a:	f00d fea4 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    748e:	2808      	cmp	r0, #8
    7490:	d921      	bls.n	74d6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    7492:	f108 0008 	add.w	r0, r8, #8
    7496:	f00d fe9e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    749a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    749c:	b1e8      	cbz	r0, 74da <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    749e:	4620      	mov	r0, r4
    74a0:	f00d fe8d 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74a4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    74a6:	6820      	ldr	r0, [r4, #0]
    74a8:	f00c fc43 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    74ac:	b1b8      	cbz	r0, 74de <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    74ae:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    74b0:	4620      	mov	r0, r4
    74b2:	f00d fe84 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74b6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    74b8:	4620      	mov	r0, r4
    74ba:	f00d fe86 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    74be:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    74c2:	4640      	mov	r0, r8
    74c4:	f00d fe87 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74c8:	2806      	cmp	r0, #6
    74ca:	d90f      	bls.n	74ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>
    74cc:	f108 0006 	add.w	r0, r8, #6
    74d0:	f00d fe81 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    74d4:	e00b      	b.n	74ee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf2>
    74d6:	2000      	movs	r0, #0
    74d8:	e7df      	b.n	749a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74da:	2400      	movs	r4, #0
    74dc:	e7e3      	b.n	74a6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xaa>
    FLATBUFFERS_ASSERT(i < size());
    74de:	4b95      	ldr	r3, [pc, #596]	; (7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    74e0:	4a95      	ldr	r2, [pc, #596]	; (7738 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    74e2:	f44f 7183 	mov.w	r1, #262	; 0x106
    74e6:	4895      	ldr	r0, [pc, #596]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    74e8:	f00b f9d0 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74ec:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    74ee:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74f0:	b178      	cbz	r0, 7512 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
    74f2:	4620      	mov	r0, r4
    74f4:	f00d fe63 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74f8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    74fa:	6820      	ldr	r0, [r4, #0]
    74fc:	f00c fc19 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7500:	0081      	lsls	r1, r0, #2
    7502:	4630      	mov	r0, r6
    7504:	47b8      	blx	r7
    7506:	4604      	mov	r4, r0
  input_tensors_ =
    7508:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    750c:	b118      	cbz	r0, 7516 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
  for (size_t i = 0; i < inputs_size(); ++i) {
    750e:	2600      	movs	r6, #0
    7510:	e09c      	b.n	764c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7512:	2400      	movs	r4, #0
    7514:	e7f1      	b.n	74fa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    TF_LITE_REPORT_ERROR(
    7516:	68ae      	ldr	r6, [r5, #8]
    7518:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    751a:	4628      	mov	r0, r5
    751c:	f00d fe55 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7520:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7522:	4638      	mov	r0, r7
    7524:	f00d fe57 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7528:	2808      	cmp	r0, #8
    752a:	d91f      	bls.n	756c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x170>
    752c:	f107 0008 	add.w	r0, r7, #8
    7530:	f00d fe51 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7534:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7536:	b1d8      	cbz	r0, 7570 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x174>
    7538:	4628      	mov	r0, r5
    753a:	f00d fe40 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    753e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7540:	6828      	ldr	r0, [r5, #0]
    7542:	f00c fbf6 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7546:	b1a8      	cbz	r0, 7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7548:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    754a:	4628      	mov	r0, r5
    754c:	f00d fe37 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7550:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7552:	4628      	mov	r0, r5
    7554:	f00d fe39 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7558:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    755a:	4638      	mov	r0, r7
    755c:	f00d fe3b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7560:	2806      	cmp	r0, #6
    7562:	d90e      	bls.n	7582 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x186>
    7564:	1db8      	adds	r0, r7, #6
    7566:	f00d fe36 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    756a:	e00b      	b.n	7584 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>
    756c:	2000      	movs	r0, #0
    756e:	e7e1      	b.n	7534 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7570:	4625      	mov	r5, r4
    7572:	e7e5      	b.n	7540 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
    FLATBUFFERS_ASSERT(i < size());
    7574:	4b6f      	ldr	r3, [pc, #444]	; (7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7576:	4a70      	ldr	r2, [pc, #448]	; (7738 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7578:	f44f 7183 	mov.w	r1, #262	; 0x106
    757c:	486f      	ldr	r0, [pc, #444]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    757e:	f00b f985 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7582:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7584:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7586:	b118      	cbz	r0, 7590 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>
    7588:	4628      	mov	r0, r5
    758a:	f00d fe18 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    758e:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7590:	6820      	ldr	r0, [r4, #0]
    7592:	f00c fbce 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7596:	0082      	lsls	r2, r0, #2
    7598:	4969      	ldr	r1, [pc, #420]	; (7740 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x344>)
    759a:	4630      	mov	r0, r6
    759c:	f00e fb8f 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    75a0:	2301      	movs	r3, #1
    75a2:	e73f      	b.n	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75a4:	2000      	movs	r0, #0
    75a6:	e05f      	b.n	7668 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75a8:	2400      	movs	r4, #0
    75aa:	e064      	b.n	7676 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27a>
    FLATBUFFERS_ASSERT(i < size());
    75ac:	4b61      	ldr	r3, [pc, #388]	; (7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    75ae:	4a62      	ldr	r2, [pc, #392]	; (7738 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    75b0:	f44f 7183 	mov.w	r1, #262	; 0x106
    75b4:	4861      	ldr	r0, [pc, #388]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    75b6:	f00b f969 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75ba:	2000      	movs	r0, #0
    75bc:	e071      	b.n	76a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75be:	2400      	movs	r4, #0
    75c0:	e076      	b.n	76b0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75c2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    75c4:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75c6:	2800      	cmp	r0, #0
    75c8:	f000 808f 	beq.w	76ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ee>
    75cc:	4620      	mov	r0, r4
    75ce:	f00d fdf6 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75d2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    75d4:	6820      	ldr	r0, [r4, #0]
    75d6:	f00c fbac 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    75da:	2800      	cmp	r0, #0
    75dc:	f000 8087 	beq.w	76ee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    75e0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    75e2:	4620      	mov	r0, r4
    75e4:	f00d fdeb 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75e8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    75ea:	4620      	mov	r0, r4
    75ec:	f00d fded 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75f0:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75f4:	4658      	mov	r0, fp
    75f6:	f00d fdee 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75fa:	2806      	cmp	r0, #6
    75fc:	d97e      	bls.n	76fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    75fe:	f10b 0006 	add.w	r0, fp, #6
    7602:	f00d fde8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7606:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7608:	2800      	cmp	r0, #0
    760a:	d079      	beq.n	7700 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x304>
    760c:	4620      	mov	r0, r4
    760e:	f00d fdd6 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7612:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7614:	6820      	ldr	r0, [r4, #0]
    7616:	f00c fb8c 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    761a:	4286      	cmp	r6, r0
    761c:	d272      	bcs.n	7704 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    761e:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7620:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7624:	f00d fdd0 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7628:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    762a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
    762e:	2200      	movs	r2, #0
    7630:	9200      	str	r2, [sp, #0]
    7632:	4652      	mov	r2, sl
    7634:	4639      	mov	r1, r7
    7636:	4640      	mov	r0, r8
    7638:	47c8      	blx	r9
    763a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (input_tensors_[i] == nullptr) {
    763e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    7642:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7646:	2b00      	cmp	r3, #0
    7648:	d063      	beq.n	7712 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x316>
  for (size_t i = 0; i < inputs_size(); ++i) {
    764a:	3601      	adds	r6, #1
    764c:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    764e:	4620      	mov	r0, r4
    7650:	f00d fdbb 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7654:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7656:	4638      	mov	r0, r7
    7658:	f00d fdbd 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    765c:	2808      	cmp	r0, #8
    765e:	d9a1      	bls.n	75a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    7660:	f107 0008 	add.w	r0, r7, #8
    7664:	f00d fdb7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7668:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    766a:	2800      	cmp	r0, #0
    766c:	d09c      	beq.n	75a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
    766e:	4620      	mov	r0, r4
    7670:	f00d fda5 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7674:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7676:	6820      	ldr	r0, [r4, #0]
    7678:	f00c fb5b 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    767c:	2800      	cmp	r0, #0
    767e:	d095      	beq.n	75ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7680:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7682:	4620      	mov	r0, r4
    7684:	f00d fd9b 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7688:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    768a:	4620      	mov	r0, r4
    768c:	f00d fd9d 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7690:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7692:	4638      	mov	r0, r7
    7694:	f00d fd9f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7698:	2806      	cmp	r0, #6
    769a:	d98e      	bls.n	75ba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
    769c:	1db8      	adds	r0, r7, #6
    769e:	f00d fd9a 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    76a2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76a4:	2800      	cmp	r0, #0
    76a6:	d08a      	beq.n	75be <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    76a8:	4620      	mov	r0, r4
    76aa:	f00d fd88 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    76ae:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    76b0:	6820      	ldr	r0, [r4, #0]
    76b2:	f00c fb3e 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    76b6:	4286      	cmp	r6, r0
    76b8:	d248      	bcs.n	774c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    76ba:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    76be:	f8d8 3000 	ldr.w	r3, [r8]
    76c2:	f8d3 9000 	ldr.w	r9, [r3]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    76c6:	682f      	ldr	r7, [r5, #0]
    76c8:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    76cc:	4638      	mov	r0, r7
    76ce:	f00d fd7c 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76d2:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76d4:	4620      	mov	r0, r4
    76d6:	f00d fd7e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76da:	2808      	cmp	r0, #8
    76dc:	f67f af71 	bls.w	75c2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c6>
    76e0:	f104 0008 	add.w	r0, r4, #8
    76e4:	f00d fd77 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    76e8:	e76c      	b.n	75c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76ea:	2400      	movs	r4, #0
    76ec:	e772      	b.n	75d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    FLATBUFFERS_ASSERT(i < size());
    76ee:	4b11      	ldr	r3, [pc, #68]	; (7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    76f0:	4a11      	ldr	r2, [pc, #68]	; (7738 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    76f2:	f44f 7183 	mov.w	r1, #262	; 0x106
    76f6:	4811      	ldr	r0, [pc, #68]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    76f8:	f00b f8c8 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76fc:	2000      	movs	r0, #0
    76fe:	e782      	b.n	7606 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7700:	2400      	movs	r4, #0
    7702:	e787      	b.n	7614 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
    FLATBUFFERS_ASSERT(i < size());
    7704:	4b0b      	ldr	r3, [pc, #44]	; (7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7706:	4a0f      	ldr	r2, [pc, #60]	; (7744 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x348>)
    7708:	f44f 7183 	mov.w	r1, #262	; 0x106
    770c:	480b      	ldr	r0, [pc, #44]	; (773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    770e:	f00b f8bd 	bl	1288c <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7712:	4632      	mov	r2, r6
    7714:	490c      	ldr	r1, [pc, #48]	; (7748 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>)
    7716:	68a8      	ldr	r0, [r5, #8]
    7718:	f00e fad1 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    771c:	2301      	movs	r3, #1
    771e:	e681      	b.n	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7720:	00033510 	.word	0x00033510
    7724:	0001548d 	.word	0x0001548d
    7728:	000154dd 	.word	0x000154dd
    772c:	000154e7 	.word	0x000154e7
    7730:	0001549b 	.word	0x0001549b
    7734:	000323f8 	.word	0x000323f8
    7738:	00032548 	.word	0x00032548
    773c:	000324c4 	.word	0x000324c4
    7740:	00033534 	.word	0x00033534
    7744:	00032404 	.word	0x00032404
    7748:	00033580 	.word	0x00033580
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    774c:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
    774e:	6833      	ldr	r3, [r6, #0]
    7750:	68df      	ldr	r7, [r3, #12]
    return model_->subgraphs()->Get(0)->outputs()->size();
    7752:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7754:	4620      	mov	r0, r4
    7756:	f00d fd38 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    775a:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    775e:	4640      	mov	r0, r8
    7760:	f00d fd39 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7764:	2808      	cmp	r0, #8
    7766:	d904      	bls.n	7772 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x376>
    7768:	f108 0008 	add.w	r0, r8, #8
    776c:	f00d fd33 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7770:	e000      	b.n	7774 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x378>
    7772:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7774:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7776:	b360      	cbz	r0, 77d2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d6>
    7778:	4620      	mov	r0, r4
    777a:	f00d fd20 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    777e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7780:	6820      	ldr	r0, [r4, #0]
    7782:	f00c fad6 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7786:	b330      	cbz	r0, 77d6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3da>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7788:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    778a:	4620      	mov	r0, r4
    778c:	f00d fd17 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7790:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7792:	4620      	mov	r0, r4
    7794:	f00d fd19 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7798:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    779c:	4640      	mov	r0, r8
    779e:	f00d fd1a 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77a2:	2808      	cmp	r0, #8
    77a4:	d91e      	bls.n	77e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e8>
    77a6:	f108 0008 	add.w	r0, r8, #8
    77aa:	f00d fd14 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    77ae:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77b0:	b1d0      	cbz	r0, 77e8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3ec>
    77b2:	4620      	mov	r0, r4
    77b4:	f00d fd03 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77b8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    77ba:	6820      	ldr	r0, [r4, #0]
    77bc:	f00c fab9 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    77c0:	0081      	lsls	r1, r0, #2
    77c2:	4630      	mov	r0, r6
    77c4:	47b8      	blx	r7
    77c6:	4604      	mov	r4, r0
  output_tensors_ =
    77c8:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    77cc:	b170      	cbz	r0, 77ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f0>
  for (size_t i = 0; i < outputs_size(); ++i) {
    77ce:	2600      	movs	r6, #0
    77d0:	e0c6      	b.n	7960 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x564>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77d2:	2400      	movs	r4, #0
    77d4:	e7d4      	b.n	7780 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x384>
    FLATBUFFERS_ASSERT(i < size());
    77d6:	4b8f      	ldr	r3, [pc, #572]	; (7a14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    77d8:	4a8f      	ldr	r2, [pc, #572]	; (7a18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    77da:	f44f 7183 	mov.w	r1, #262	; 0x106
    77de:	488f      	ldr	r0, [pc, #572]	; (7a1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    77e0:	f00b f854 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77e4:	2000      	movs	r0, #0
    77e6:	e7e2      	b.n	77ae <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3b2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77e8:	2400      	movs	r4, #0
    77ea:	e7e6      	b.n	77ba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3be>
    TF_LITE_REPORT_ERROR(
    77ec:	68ae      	ldr	r6, [r5, #8]
    77ee:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    77f0:	4628      	mov	r0, r5
    77f2:	f00d fcea 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    77f6:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    77f8:	4638      	mov	r0, r7
    77fa:	f00d fcec 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77fe:	2808      	cmp	r0, #8
    7800:	d920      	bls.n	7844 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x448>
    7802:	f107 0008 	add.w	r0, r7, #8
    7806:	f00d fce6 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    780a:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    780c:	b1e0      	cbz	r0, 7848 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x44c>
    780e:	4628      	mov	r0, r5
    7810:	f00d fcd5 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7814:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7816:	6828      	ldr	r0, [r5, #0]
    7818:	f00c fa8b 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    781c:	b1b0      	cbz	r0, 784c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x450>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    781e:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7820:	4628      	mov	r0, r5
    7822:	f00d fccc 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7826:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7828:	4628      	mov	r0, r5
    782a:	f00d fcce 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    782e:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7830:	4638      	mov	r0, r7
    7832:	f00d fcd0 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7836:	2808      	cmp	r0, #8
    7838:	d90f      	bls.n	785a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x45e>
    783a:	f107 0008 	add.w	r0, r7, #8
    783e:	f00d fcca 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7842:	e00b      	b.n	785c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x460>
    7844:	2000      	movs	r0, #0
    7846:	e7e0      	b.n	780a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7848:	4625      	mov	r5, r4
    784a:	e7e4      	b.n	7816 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x41a>
    FLATBUFFERS_ASSERT(i < size());
    784c:	4b71      	ldr	r3, [pc, #452]	; (7a14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    784e:	4a72      	ldr	r2, [pc, #456]	; (7a18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7850:	f44f 7183 	mov.w	r1, #262	; 0x106
    7854:	4871      	ldr	r0, [pc, #452]	; (7a1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7856:	f00b f819 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    785a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    785c:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    785e:	b118      	cbz	r0, 7868 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x46c>
    7860:	4628      	mov	r0, r5
    7862:	f00d fcac 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7866:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7868:	6820      	ldr	r0, [r4, #0]
    786a:	f00c fa62 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    786e:	0082      	lsls	r2, r0, #2
    7870:	496b      	ldr	r1, [pc, #428]	; (7a20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x624>)
    7872:	4630      	mov	r0, r6
    7874:	f00e fa23 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7878:	2301      	movs	r3, #1
    787a:	e5d3      	b.n	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    787c:	2000      	movs	r0, #0
    787e:	e07d      	b.n	797c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x580>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7880:	2400      	movs	r4, #0
    7882:	e083      	b.n	798c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x590>
    FLATBUFFERS_ASSERT(i < size());
    7884:	4b63      	ldr	r3, [pc, #396]	; (7a14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7886:	4a64      	ldr	r2, [pc, #400]	; (7a18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7888:	f44f 7183 	mov.w	r1, #262	; 0x106
    788c:	4863      	ldr	r0, [pc, #396]	; (7a1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    788e:	f00a fffd 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7892:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7894:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7896:	2800      	cmp	r0, #0
    7898:	f000 8092 	beq.w	79c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c4>
    789c:	4620      	mov	r0, r4
    789e:	f00d fc8e 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78a2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78a4:	6820      	ldr	r0, [r4, #0]
    78a6:	f00c fa44 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t i = 0; i < outputs_size(); ++i) {
    78aa:	4286      	cmp	r6, r0
    78ac:	f080 80a7 	bcs.w	79fe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x602>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    78b0:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    78b4:	f8d8 3000 	ldr.w	r3, [r8]
    78b8:	f8d3 9000 	ldr.w	r9, [r3]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    78bc:	682f      	ldr	r7, [r5, #0]
    78be:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    78c2:	4638      	mov	r0, r7
    78c4:	f00d fc81 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    78c8:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    78ca:	4620      	mov	r0, r4
    78cc:	f00d fc83 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78d0:	2808      	cmp	r0, #8
    78d2:	d977      	bls.n	79c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c8>
    78d4:	f104 0008 	add.w	r0, r4, #8
    78d8:	f00d fc7d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    78dc:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78de:	2800      	cmp	r0, #0
    78e0:	d072      	beq.n	79c8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5cc>
    78e2:	4620      	mov	r0, r4
    78e4:	f00d fc6b 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78e8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78ea:	6820      	ldr	r0, [r4, #0]
    78ec:	f00c fa21 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    78f0:	2800      	cmp	r0, #0
    78f2:	d06b      	beq.n	79cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5d0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    78f4:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    78f6:	4620      	mov	r0, r4
    78f8:	f00d fc61 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78fc:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    78fe:	4620      	mov	r0, r4
    7900:	f00d fc63 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7904:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7908:	4658      	mov	r0, fp
    790a:	f00d fc64 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    790e:	2808      	cmp	r0, #8
    7910:	d963      	bls.n	79da <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5de>
    7912:	f10b 0008 	add.w	r0, fp, #8
    7916:	f00d fc5e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    791a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    791c:	2800      	cmp	r0, #0
    791e:	d05e      	beq.n	79de <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e2>
    7920:	4620      	mov	r0, r4
    7922:	f00d fc4c 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7926:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7928:	6820      	ldr	r0, [r4, #0]
    792a:	f00c fa02 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    792e:	4286      	cmp	r6, r0
    7930:	d257      	bcs.n	79e2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7932:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7934:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7938:	f00d fc46 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    793c:	4603      	mov	r3, r0
    793e:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
    7942:	2200      	movs	r2, #0
    7944:	9200      	str	r2, [sp, #0]
    7946:	4652      	mov	r2, sl
    7948:	4639      	mov	r1, r7
    794a:	4640      	mov	r0, r8
    794c:	47c8      	blx	r9
    794e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (output_tensors_[i] == nullptr) {
    7952:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    7956:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    795a:	2b00      	cmp	r3, #0
    795c:	d048      	beq.n	79f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5f4>
  for (size_t i = 0; i < outputs_size(); ++i) {
    795e:	3601      	adds	r6, #1
    7960:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7962:	4620      	mov	r0, r4
    7964:	f00d fc31 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7968:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    796a:	4638      	mov	r0, r7
    796c:	f00d fc33 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7970:	2808      	cmp	r0, #8
    7972:	d983      	bls.n	787c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x480>
    7974:	f107 0008 	add.w	r0, r7, #8
    7978:	f00d fc2d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    797c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    797e:	2800      	cmp	r0, #0
    7980:	f43f af7e 	beq.w	7880 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x484>
    7984:	4620      	mov	r0, r4
    7986:	f00d fc1a 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    798a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    798c:	6820      	ldr	r0, [r4, #0]
    798e:	f00c f9d0 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7992:	2800      	cmp	r0, #0
    7994:	f43f af76 	beq.w	7884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x488>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7998:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    799a:	4620      	mov	r0, r4
    799c:	f00d fc0f 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79a0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    79a2:	4620      	mov	r0, r4
    79a4:	f00d fc11 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79a8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79aa:	4638      	mov	r0, r7
    79ac:	f00d fc13 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79b0:	2808      	cmp	r0, #8
    79b2:	f67f af6e 	bls.w	7892 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x496>
    79b6:	f107 0008 	add.w	r0, r7, #8
    79ba:	f00d fc0c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    79be:	e769      	b.n	7894 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x498>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79c0:	2400      	movs	r4, #0
    79c2:	e76f      	b.n	78a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79c4:	2000      	movs	r0, #0
    79c6:	e789      	b.n	78dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4e0>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79c8:	2400      	movs	r4, #0
    79ca:	e78e      	b.n	78ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4ee>
    FLATBUFFERS_ASSERT(i < size());
    79cc:	4b11      	ldr	r3, [pc, #68]	; (7a14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    79ce:	4a12      	ldr	r2, [pc, #72]	; (7a18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    79d0:	f44f 7183 	mov.w	r1, #262	; 0x106
    79d4:	4811      	ldr	r0, [pc, #68]	; (7a1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    79d6:	f00a ff59 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79da:	2000      	movs	r0, #0
    79dc:	e79d      	b.n	791a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x51e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79de:	2400      	movs	r4, #0
    79e0:	e7a2      	b.n	7928 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x52c>
    FLATBUFFERS_ASSERT(i < size());
    79e2:	4b0c      	ldr	r3, [pc, #48]	; (7a14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    79e4:	4a0f      	ldr	r2, [pc, #60]	; (7a24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x628>)
    79e6:	f44f 7183 	mov.w	r1, #262	; 0x106
    79ea:	480c      	ldr	r0, [pc, #48]	; (7a1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    79ec:	f00a ff4e 	bl	1288c <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    79f0:	4632      	mov	r2, r6
    79f2:	490d      	ldr	r1, [pc, #52]	; (7a28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62c>)
    79f4:	68a8      	ldr	r0, [r5, #8]
    79f6:	f00e f962 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    79fa:	2301      	movs	r3, #1
    79fc:	e512      	b.n	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    79fe:	4628      	mov	r0, r5
    7a00:	f00d fdca 	bl	15598 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
    7a04:	4603      	mov	r3, r0
    7a06:	2800      	cmp	r0, #0
    7a08:	f47f ad0c 	bne.w	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    7a0c:	2201      	movs	r2, #1
    7a0e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
  return kTfLiteOk;
    7a12:	e507      	b.n	7424 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7a14:	000323f8 	.word	0x000323f8
    7a18:	00032548 	.word	0x00032548
    7a1c:	000324c4 	.word	0x000324c4
    7a20:	000335a8 	.word	0x000335a8
    7a24:	00032404 	.word	0x00032404
    7a28:	000335f4 	.word	0x000335f4

00007a2c <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    7a2c:	b510      	push	{r4, lr}
    7a2e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    7a30:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    7a34:	b95b      	cbnz	r3, 7a4e <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
  if (!tensors_allocated_) {
    7a36:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    7a3a:	b913      	cbnz	r3, 7a42 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    7a3c:	f7ff fcde 	bl	73fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    7a40:	b920      	cbnz	r0, 7a4c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
  return graph_.InvokeSubgraph(0);
    7a42:	2100      	movs	r1, #0
    7a44:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    7a48:	f7fe ff04 	bl	6854 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
}
    7a4c:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    7a4e:	4903      	ldr	r1, [pc, #12]	; (7a5c <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
    7a50:	6880      	ldr	r0, [r0, #8]
    7a52:	f00e f934 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7a56:	2001      	movs	r0, #1
    7a58:	e7f8      	b.n	7a4c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    7a5a:	bf00      	nop
    7a5c:	0003361c 	.word	0x0003361c

00007a60 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
  return kTfLiteOk;
}

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
    7a60:	b410      	push	{r4}
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
    7a62:	4c05      	ldr	r4, [pc, #20]	; (7a78 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x18>)
    7a64:	6004      	str	r4, [r0, #0]
    7a66:	6041      	str	r1, [r0, #4]
    7a68:	60c2      	str	r2, [r0, #12]
    7a6a:	2200      	movs	r2, #0
    7a6c:	7402      	strb	r2, [r0, #16]
    7a6e:	6142      	str	r2, [r0, #20]
    7a70:	6182      	str	r2, [r0, #24]
    7a72:	bc10      	pop	{r4}
    7a74:	4770      	bx	lr
    7a76:	bf00      	nop
    7a78:	00033d68 	.word	0x00033d68

00007a7c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    7a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a7e:	4605      	mov	r5, r0
    7a80:	460f      	mov	r7, r1
    7a82:	461e      	mov	r6, r3
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    7a84:	f00d fe85 	bl	15792 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7a88:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    7a8a:	4613      	mov	r3, r2
    7a8c:	e000      	b.n	7a90 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x14>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7a8e:	3201      	adds	r2, #1
    7a90:	696c      	ldr	r4, [r5, #20]
    7a92:	4294      	cmp	r4, r2
    7a94:	d907      	bls.n	7aa6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2a>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    7a96:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    7a9a:	6864      	ldr	r4, [r4, #4]
    7a9c:	f1b4 3fff 	cmp.w	r4, #4294967295
    7aa0:	d1f5      	bne.n	7a8e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
      ++current_node_request_count;
    7aa2:	3301      	adds	r3, #1
    7aa4:	e7f3      	b.n	7a8e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    7aa6:	2b0b      	cmp	r3, #11
    7aa8:	d80d      	bhi.n	7ac6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4a>
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
    7aaa:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
      &requests[scratch_buffer_request_count_];
  *current_request = {};
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
    7aae:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    7ab2:	f04f 32ff 	mov.w	r2, #4294967295
    7ab6:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
    7ab8:	696b      	ldr	r3, [r5, #20]
    7aba:	6033      	str	r3, [r6, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
    7abc:	696b      	ldr	r3, [r5, #20]
    7abe:	3301      	adds	r3, #1
    7ac0:	616b      	str	r3, [r5, #20]
  return kTfLiteOk;
    7ac2:	2000      	movs	r0, #0
}
    7ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
    7ac6:	220c      	movs	r2, #12
    7ac8:	4902      	ldr	r1, [pc, #8]	; (7ad4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>)
    7aca:	68e8      	ldr	r0, [r5, #12]
    7acc:	f00e f8f7 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7ad0:	2001      	movs	r0, #1
    7ad2:	e7f7      	b.n	7ac4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>
    7ad4:	0003364c 	.word	0x0003364c

00007ad8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    7ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7adc:	b122      	cbz	r2, 7ae8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    7ade:	4607      	mov	r7, r0
    7ae0:	460e      	mov	r6, r1
    7ae2:	4690      	mov	r8, r2

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7ae4:	2500      	movs	r5, #0
    7ae6:	e029      	b.n	7b3c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x64>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7ae8:	f010 fedf 	bl	188aa <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7aec:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7aee:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7af0:	b390      	cbz	r0, 7b58 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x80>
    7af2:	4620      	mov	r0, r4
    7af4:	f00d fb63 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7af8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7afa:	6820      	ldr	r0, [r4, #0]
    7afc:	f00c f919 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7b00:	4285      	cmp	r5, r0
    7b02:	d23a      	bcs.n	7b7a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    7b04:	6820      	ldr	r0, [r4, #0]
    7b06:	f00c f914 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7b0a:	4285      	cmp	r5, r0
    7b0c:	d226      	bcs.n	7b5c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b0e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7b10:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7b14:	4620      	mov	r0, r4
    7b16:	f00d fb52 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    TFLITE_DCHECK(subgraph != nullptr);
    7b1a:	1820      	adds	r0, r4, r0
    7b1c:	d025      	beq.n	7b6a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7b1e:	f00d fc04 	bl	1532a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
    7b22:	687b      	ldr	r3, [r7, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
    7b24:	681a      	ldr	r2, [r3, #0]
    7b26:	68d4      	ldr	r4, [r2, #12]
        memory_allocator_->AllocateFromTail(
    7b28:	2204      	movs	r2, #4
    7b2a:	212c      	movs	r1, #44	; 0x2c
    7b2c:	fb01 f100 	mul.w	r1, r1, r0
    7b30:	4618      	mov	r0, r3
    7b32:	47a0      	blx	r4
    if (output == nullptr) {
    7b34:	b1d8      	cbz	r0, 7b6e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
      TF_LITE_REPORT_ERROR(
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    7b36:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7b3a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7b3c:	4630      	mov	r0, r6
    7b3e:	f00d fb44 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b42:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b44:	4620      	mov	r0, r4
    7b46:	f00d fb46 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b4a:	2808      	cmp	r0, #8
    7b4c:	d9ce      	bls.n	7aec <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    7b4e:	f104 0008 	add.w	r0, r4, #8
    7b52:	f00d fb40 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7b56:	e7ca      	b.n	7aee <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b58:	2400      	movs	r4, #0
    7b5a:	e7ce      	b.n	7afa <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x22>
    FLATBUFFERS_ASSERT(i < size());
    7b5c:	4b08      	ldr	r3, [pc, #32]	; (7b80 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
    7b5e:	4a09      	ldr	r2, [pc, #36]	; (7b84 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    7b60:	f44f 7183 	mov.w	r1, #262	; 0x106
    7b64:	4808      	ldr	r0, [pc, #32]	; (7b88 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
    7b66:	f00a fe91 	bl	1288c <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7b6a:	f010 fe9e 	bl	188aa <abort>
      TF_LITE_REPORT_ERROR(
    7b6e:	4907      	ldr	r1, [pc, #28]	; (7b8c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
    7b70:	68f8      	ldr	r0, [r7, #12]
    7b72:	f00e f8a4 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7b76:	2001      	movs	r0, #1
    7b78:	e000      	b.n	7b7c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
  }
  return kTfLiteOk;
    7b7a:	2000      	movs	r0, #0
}
    7b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b80:	000323f8 	.word	0x000323f8
    7b84:	00032548 	.word	0x00032548
    7b88:	000324c4 	.word	0x000324c4
    7b8c:	00033684 	.word	0x00033684

00007b90 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    7b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b94:	b083      	sub	sp, #12
    7b96:	4605      	mov	r5, r0
    7b98:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    7b9a:	7c03      	ldrb	r3, [r0, #16]
    7b9c:	b11b      	cbz	r3, 7ba6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x16>
    7b9e:	460f      	mov	r7, r1
    7ba0:	4691      	mov	r9, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7ba2:	2600      	movs	r6, #0
    7ba4:	e043      	b.n	7c2e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7ba6:	4930      	ldr	r1, [pc, #192]	; (7c68 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xd8>)
    7ba8:	68c0      	ldr	r0, [r0, #12]
    7baa:	f00e f888 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7bae:	2301      	movs	r3, #1
    7bb0:	e055      	b.n	7c5e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7bb2:	f104 0008 	add.w	r0, r4, #8
    7bb6:	f00d fb0e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7bba:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7bbc:	2800      	cmp	r0, #0
    7bbe:	d041      	beq.n	7c44 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    7bc0:	4620      	mov	r0, r4
    7bc2:	f00d fafc 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7bc6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7bc8:	6820      	ldr	r0, [r4, #0]
    7bca:	f00c f8b2 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7bce:	4286      	cmp	r6, r0
    7bd0:	d243      	bcs.n	7c5a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xca>
    7bd2:	6820      	ldr	r0, [r4, #0]
    7bd4:	f00c f8ad 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7bd8:	4286      	cmp	r6, r0
    7bda:	d235      	bcs.n	7c48 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7bdc:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7bde:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7be2:	4620      	mov	r0, r4
    7be4:	f00d faeb 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7be8:	1824      	adds	r4, r4, r0
    7bea:	d034      	beq.n	7c56 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xc6>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    7bec:	682b      	ldr	r3, [r5, #0]
    7bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7bf0:	696a      	ldr	r2, [r5, #20]
    7bf2:	4641      	mov	r1, r8
    7bf4:	4628      	mov	r0, r5
    7bf6:	4798      	blx	r3
    7bf8:	4603      	mov	r3, r0
    7bfa:	bb80      	cbnz	r0, 7c5e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    7bfc:	682b      	ldr	r3, [r5, #0]
    7bfe:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    7c02:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    7c06:	9600      	str	r6, [sp, #0]
    7c08:	f8d8 3000 	ldr.w	r3, [r8]
    7c0c:	f8da 2004 	ldr.w	r2, [sl, #4]
    7c10:	4639      	mov	r1, r7
    7c12:	4628      	mov	r0, r5
    7c14:	47d8      	blx	fp
    7c16:	4603      	mov	r3, r0
    7c18:	bb08      	cbnz	r0, 7c5e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    7c1a:	682b      	ldr	r3, [r5, #0]
    7c1c:	6a1b      	ldr	r3, [r3, #32]
    7c1e:	f8da 2004 	ldr.w	r2, [sl, #4]
    7c22:	4621      	mov	r1, r4
    7c24:	4628      	mov	r0, r5
    7c26:	4798      	blx	r3
    7c28:	4603      	mov	r3, r0
    7c2a:	b9c0      	cbnz	r0, 7c5e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7c2c:	3601      	adds	r6, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7c2e:	4638      	mov	r0, r7
    7c30:	f00d facb 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c34:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c36:	4620      	mov	r0, r4
    7c38:	f00d facd 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c3c:	2808      	cmp	r0, #8
    7c3e:	d8b8      	bhi.n	7bb2 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x22>
    7c40:	2000      	movs	r0, #0
    7c42:	e7ba      	b.n	7bba <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c44:	2400      	movs	r4, #0
    7c46:	e7bf      	b.n	7bc8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x38>
    FLATBUFFERS_ASSERT(i < size());
    7c48:	4b08      	ldr	r3, [pc, #32]	; (7c6c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xdc>)
    7c4a:	4a09      	ldr	r2, [pc, #36]	; (7c70 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe0>)
    7c4c:	f44f 7183 	mov.w	r1, #262	; 0x106
    7c50:	4808      	ldr	r0, [pc, #32]	; (7c74 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe4>)
    7c52:	f00a fe1b 	bl	1288c <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7c56:	f010 fe28 	bl	188aa <abort>
  model_is_allocating_ = false;
    7c5a:	2300      	movs	r3, #0
    7c5c:	742b      	strb	r3, [r5, #16]
}
    7c5e:	4618      	mov	r0, r3
    7c60:	b003      	add	sp, #12
    7c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c66:	bf00      	nop
    7c68:	000336bc 	.word	0x000336bc
    7c6c:	000323f8 	.word	0x000323f8
    7c70:	00032548 	.word	0x00032548
    7c74:	000324c4 	.word	0x000324c4

00007c78 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    7c78:	b570      	push	{r4, r5, r6, lr}
    7c7a:	4606      	mov	r6, r0
    7c7c:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7c7e:	f00d faa4 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c82:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c84:	4620      	mov	r0, r4
    7c86:	f00d faa6 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c8a:	2808      	cmp	r0, #8
    7c8c:	d923      	bls.n	7cd6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5e>
    7c8e:	f104 0008 	add.w	r0, r4, #8
    7c92:	f00d faa0 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7c96:	b300      	cbz	r0, 7cda <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x62>
    7c98:	4430      	add	r0, r6
    7c9a:	f00d fa90 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c9e:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7ca0:	6828      	ldr	r0, [r5, #0]
    7ca2:	f00c f846 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7ca6:	42b0      	cmp	r0, r6
    7ca8:	d919      	bls.n	7cde <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x66>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7caa:	1d2c      	adds	r4, r5, #4
    p += i * sizeof(uoffset_t);
    7cac:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7cb0:	4620      	mov	r0, r4
    7cb2:	f00d fa84 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    7cb6:	1824      	adds	r4, r4, r0
    7cb8:	d025      	beq.n	7d06 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
    7cba:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    7cbc:	4620      	mov	r0, r4
    7cbe:	f00d fa84 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7cc2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7cc4:	4620      	mov	r0, r4
    7cc6:	f00d fa86 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cca:	2804      	cmp	r0, #4
    7ccc:	d90e      	bls.n	7cec <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x74>
    7cce:	1d20      	adds	r0, r4, #4
    7cd0:	f00d fa81 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7cd4:	e00b      	b.n	7cee <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x76>
    7cd6:	2000      	movs	r0, #0
    7cd8:	e7dd      	b.n	7c96 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7cda:	2600      	movs	r6, #0
    7cdc:	e7e0      	b.n	7ca0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x28>
    FLATBUFFERS_ASSERT(i < size());
    7cde:	4b0d      	ldr	r3, [pc, #52]	; (7d14 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x9c>)
    7ce0:	4a0d      	ldr	r2, [pc, #52]	; (7d18 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa0>)
    7ce2:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ce6:	480d      	ldr	r0, [pc, #52]	; (7d1c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa4>)
    7ce8:	f00a fdd0 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cec:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7cee:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cf0:	b158      	cbz	r0, 7d0a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x92>
    7cf2:	4628      	mov	r0, r5
    7cf4:	f00d fa63 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7cf8:	182c      	adds	r4, r5, r0
    if (auto* array = buffer->data()) {
    7cfa:	b124      	cbz	r4, 7d06 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
  uoffset_t size() const { return EndianScalar(length_); }
    7cfc:	6820      	ldr	r0, [r4, #0]
    7cfe:	f00c f818 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (array->size()) {
    7d02:	b120      	cbz	r0, 7d0e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7d04:	3404      	adds	r4, #4
}
    7d06:	4620      	mov	r0, r4
    7d08:	bd70      	pop	{r4, r5, r6, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d0a:	2400      	movs	r4, #0
    7d0c:	e7f5      	b.n	7cfa <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x82>
  void* out_buffer = nullptr;
    7d0e:	2400      	movs	r4, #0
  return out_buffer;
    7d10:	e7f9      	b.n	7d06 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    7d12:	bf00      	nop
    7d14:	000323f8 	.word	0x000323f8
    7d18:	00033708 	.word	0x00033708
    7d1c:	000324c4 	.word	0x000324c4

00007d20 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d24:	b082      	sub	sp, #8
    7d26:	4606      	mov	r6, r0
    7d28:	460f      	mov	r7, r1
    7d2a:	4690      	mov	r8, r2
    7d2c:	461d      	mov	r5, r3
    7d2e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7d32:	4608      	mov	r0, r1
    7d34:	f00d fa49 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7d38:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7d3a:	4620      	mov	r0, r4
    7d3c:	f00d fa4b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d40:	2808      	cmp	r0, #8
    7d42:	d93e      	bls.n	7dc2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    7d44:	f104 0008 	add.w	r0, r4, #8
    7d48:	f00d fa45 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7d4c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d4e:	2800      	cmp	r0, #0
    7d50:	d039      	beq.n	7dc6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    7d52:	4620      	mov	r0, r4
    7d54:	f00d fa33 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d58:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7d5a:	6820      	ldr	r0, [r4, #0]
    7d5c:	f00b ffe9 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7d60:	4581      	cmp	r9, r0
    7d62:	d232      	bcs.n	7dca <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7d64:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7d66:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7d6a:	4620      	mov	r0, r4
    7d6c:	f00d fa27 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7d70:	42c4      	cmn	r4, r0
    7d72:	d031      	beq.n	7dd8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    7d74:	6833      	ldr	r3, [r6, #0]
    7d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7d78:	4630      	mov	r0, r6
    7d7a:	4798      	blx	r3
    7d7c:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
    7d7e:	6833      	ldr	r3, [r6, #0]
    7d80:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(
    7d84:	2300      	movs	r3, #0
    7d86:	9301      	str	r3, [sp, #4]
    7d88:	f8cd 9000 	str.w	r9, [sp]
    7d8c:	462b      	mov	r3, r5
    7d8e:	4602      	mov	r2, r0
    7d90:	4639      	mov	r1, r7
    7d92:	4630      	mov	r0, r6
    7d94:	47d0      	blx	sl
    7d96:	bb08      	cbnz	r0, 7ddc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7d98:	f1b8 0f00 	cmp.w	r8, #0
    7d9c:	d00d      	beq.n	7dba <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7d9e:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
    7da2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7daa:	00ad      	lsls	r5, r5, #2
    7dac:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7dae:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7db0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7db4:	441d      	add	r5, r3
    7db6:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7db8:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7dba:	4620      	mov	r0, r4
    7dbc:	b002      	add	sp, #8
    7dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7dc2:	2000      	movs	r0, #0
    7dc4:	e7c2      	b.n	7d4c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7dc6:	2400      	movs	r4, #0
    7dc8:	e7c7      	b.n	7d5a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7dca:	4b07      	ldr	r3, [pc, #28]	; (7de8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
    7dcc:	4a07      	ldr	r2, [pc, #28]	; (7dec <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    7dce:	f44f 7183 	mov.w	r1, #262	; 0x106
    7dd2:	4807      	ldr	r0, [pc, #28]	; (7df0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7dd4:	f00a fd5a 	bl	1288c <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7dd8:	f010 fd67 	bl	188aa <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7ddc:	4905      	ldr	r1, [pc, #20]	; (7df4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    7dde:	68f0      	ldr	r0, [r6, #12]
    7de0:	f00d ff6d 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7de4:	2400      	movs	r4, #0
    7de6:	e7e8      	b.n	7dba <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7de8:	000323f8 	.word	0x000323f8
    7dec:	00032548 	.word	0x00032548
    7df0:	000324c4 	.word	0x000324c4
    7df4:	000337fc 	.word	0x000337fc

00007df8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dfc:	b082      	sub	sp, #8
    7dfe:	4680      	mov	r8, r0
    7e00:	460e      	mov	r6, r1
    7e02:	4617      	mov	r7, r2
    7e04:	461d      	mov	r5, r3
    7e06:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7e0a:	4608      	mov	r0, r1
    7e0c:	f00d f9dd 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e10:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e12:	4620      	mov	r0, r4
    7e14:	f00d f9df 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e18:	2808      	cmp	r0, #8
    7e1a:	d93e      	bls.n	7e9a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    7e1c:	f104 0008 	add.w	r0, r4, #8
    7e20:	f00d f9d9 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7e24:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e26:	2800      	cmp	r0, #0
    7e28:	d039      	beq.n	7e9e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    7e2a:	4620      	mov	r0, r4
    7e2c:	f00d f9c7 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e30:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7e32:	6820      	ldr	r0, [r4, #0]
    7e34:	f00b ff7d 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7e38:	4581      	cmp	r9, r0
    7e3a:	d232      	bcs.n	7ea2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7e3c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7e3e:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7e42:	4620      	mov	r0, r4
    7e44:	f00d f9bb 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7e48:	42c4      	cmn	r4, r0
    7e4a:	d031      	beq.n	7eb0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    7e4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    7e50:	6803      	ldr	r3, [r0, #0]
    7e52:	691b      	ldr	r3, [r3, #16]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    7e54:	2204      	movs	r2, #4
    7e56:	2140      	movs	r1, #64	; 0x40
    7e58:	4798      	blx	r3
    7e5a:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    7e5c:	f8d8 3000 	ldr.w	r3, [r8]
    7e60:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    7e64:	2301      	movs	r3, #1
    7e66:	9301      	str	r3, [sp, #4]
    7e68:	f8cd 9000 	str.w	r9, [sp]
    7e6c:	462b      	mov	r3, r5
    7e6e:	4602      	mov	r2, r0
    7e70:	4631      	mov	r1, r6
    7e72:	4640      	mov	r0, r8
    7e74:	47d0      	blx	sl
    7e76:	b9e8      	cbnz	r0, 7eb4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7e78:	b15f      	cbz	r7, 7e92 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7e7a:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
    7e7e:	687b      	ldr	r3, [r7, #4]
    7e80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7e84:	00ad      	lsls	r5, r5, #2
    7e86:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7e88:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7e8a:	687b      	ldr	r3, [r7, #4]
    7e8c:	441d      	add	r5, r3
    7e8e:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7e90:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7e92:	4620      	mov	r0, r4
    7e94:	b002      	add	sp, #8
    7e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e9a:	2000      	movs	r0, #0
    7e9c:	e7c2      	b.n	7e24 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e9e:	2400      	movs	r4, #0
    7ea0:	e7c7      	b.n	7e32 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7ea2:	4b08      	ldr	r3, [pc, #32]	; (7ec4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    7ea4:	4a08      	ldr	r2, [pc, #32]	; (7ec8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7ea6:	f44f 7183 	mov.w	r1, #262	; 0x106
    7eaa:	4808      	ldr	r0, [pc, #32]	; (7ecc <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    7eac:	f00a fcee 	bl	1288c <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7eb0:	f010 fcfb 	bl	188aa <abort>
    TF_LITE_REPORT_ERROR(
    7eb4:	4906      	ldr	r1, [pc, #24]	; (7ed0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd8>)
    7eb6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    7eba:	f00d ff00 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7ebe:	2400      	movs	r4, #0
    7ec0:	e7e7      	b.n	7e92 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7ec2:	bf00      	nop
    7ec4:	000323f8 	.word	0x000323f8
    7ec8:	00032548 	.word	0x00032548
    7ecc:	000324c4 	.word	0x000324c4
    7ed0:	00033848 	.word	0x00033848

00007ed4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>:
    const Model* model, const int32_t** offline_planner_offsets) {
    7ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ed8:	4607      	mov	r7, r0
    7eda:	460c      	mov	r4, r1
    7edc:	4690      	mov	r8, r2
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
    7ede:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7ee0:	4608      	mov	r0, r1
    7ee2:	f00d f972 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7ee6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7ee8:	4628      	mov	r0, r5
    7eea:	f00d f974 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7eee:	2810      	cmp	r0, #16
    7ef0:	d904      	bls.n	7efc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x28>
    7ef2:	f105 0010 	add.w	r0, r5, #16
    7ef6:	f00d f96e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7efa:	e000      	b.n	7efe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x2a>
    7efc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7efe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f00:	b140      	cbz	r0, 7f14 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x40>
    7f02:	4620      	mov	r0, r4
    7f04:	f00d f95b 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f08:	4404      	add	r4, r0
  if (model->metadata()) {
    7f0a:	2c00      	cmp	r4, #0
    7f0c:	f000 80cc 	beq.w	80a8 <CONFIG_MAIN_STACK_SIZE+0xa8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    7f10:	2500      	movs	r5, #0
    7f12:	e023      	b.n	7f5c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x88>
    7f14:	2400      	movs	r4, #0
    7f16:	e7f8      	b.n	7f0a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f18:	2000      	movs	r0, #0
    7f1a:	e02c      	b.n	7f76 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xa2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f1c:	2400      	movs	r4, #0
    7f1e:	e031      	b.n	7f84 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xb0>
    FLATBUFFERS_ASSERT(i < size());
    7f20:	4b64      	ldr	r3, [pc, #400]	; (80b4 <CONFIG_MAIN_STACK_SIZE+0xb4>)
    7f22:	4a65      	ldr	r2, [pc, #404]	; (80b8 <CONFIG_MAIN_STACK_SIZE+0xb8>)
    7f24:	f44f 7183 	mov.w	r1, #262	; 0x106
    7f28:	4864      	ldr	r0, [pc, #400]	; (80bc <CONFIG_MAIN_STACK_SIZE+0xbc>)
    7f2a:	f00a fcaf 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f2e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7f30:	eb04 0900 	add.w	r9, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f34:	2800      	cmp	r0, #0
    7f36:	d046      	beq.n	7fc6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf2>
    7f38:	4648      	mov	r0, r9
    7f3a:	f00d f940 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f3e:	4481      	add	r9, r0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7f40:	f109 0904 	add.w	r9, r9, #4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    7f44:	f8df a180 	ldr.w	sl, [pc, #384]	; 80c8 <CONFIG_MAIN_STACK_SIZE+0xc8>
    7f48:	4650      	mov	r0, sl
    7f4a:	f7f9 fae3 	bl	1514 <strlen>
    7f4e:	4602      	mov	r2, r0
    7f50:	4651      	mov	r1, sl
    7f52:	4648      	mov	r0, r9
    7f54:	f010 fe34 	bl	18bc0 <strncmp>
    7f58:	b3c0      	cbz	r0, 7fcc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    7f5a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7f5c:	4630      	mov	r0, r6
    7f5e:	f00d f934 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f62:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f64:	4620      	mov	r0, r4
    7f66:	f00d f936 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f6a:	2810      	cmp	r0, #16
    7f6c:	d9d4      	bls.n	7f18 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x44>
    7f6e:	f104 0010 	add.w	r0, r4, #16
    7f72:	f00d f930 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7f76:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f78:	2800      	cmp	r0, #0
    7f7a:	d0cf      	beq.n	7f1c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x48>
    7f7c:	4620      	mov	r0, r4
    7f7e:	f00d f91e 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f82:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7f84:	6820      	ldr	r0, [r4, #0]
    7f86:	f00b fed4 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7f8a:	4285      	cmp	r5, r0
    7f8c:	f080 808e 	bcs.w	80ac <CONFIG_MAIN_STACK_SIZE+0xac>
    7f90:	6820      	ldr	r0, [r4, #0]
    7f92:	f00b fece 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7f96:	4285      	cmp	r5, r0
    7f98:	d2c2      	bcs.n	7f20 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x4c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7f9a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7f9c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7fa0:	4620      	mov	r0, r4
    7fa2:	f00d f90c 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7fa6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7fa8:	4620      	mov	r0, r4
    7faa:	f00d f90e 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7fae:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7fb2:	4648      	mov	r0, r9
    7fb4:	f00d f90f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fb8:	2804      	cmp	r0, #4
    7fba:	d9b8      	bls.n	7f2e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5a>
    7fbc:	f109 0004 	add.w	r0, r9, #4
    7fc0:	f00d f909 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7fc4:	e7b4      	b.n	7f30 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7fc6:	f04f 0900 	mov.w	r9, #0
    7fca:	e7b9      	b.n	7f40 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x6c>
    return data_ - ReadScalar<soffset_t>(data_);
    7fcc:	4630      	mov	r0, r6
    7fce:	f00d f8fc 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7fd2:	eba6 0900 	sub.w	r9, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7fd6:	4648      	mov	r0, r9
    7fd8:	f00d f8fd 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fdc:	280c      	cmp	r0, #12
    7fde:	d94e      	bls.n	807e <CONFIG_MAIN_STACK_SIZE+0x7e>
    7fe0:	f109 000c 	add.w	r0, r9, #12
    7fe4:	f00d f8f7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7fe8:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7fec:	2800      	cmp	r0, #0
    7fee:	d048      	beq.n	8082 <CONFIG_MAIN_STACK_SIZE+0x82>
    7ff0:	4648      	mov	r0, r9
    7ff2:	f00d f8e4 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ff6:	4481      	add	r9, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7ff8:	4620      	mov	r0, r4
    7ffa:	f00d f8e6 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7ffe:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8002:	4650      	mov	r0, sl
    8004:	f00d f8e7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8008:	2806      	cmp	r0, #6
    800a:	d93d      	bls.n	8088 <CONFIG_MAIN_STACK_SIZE+0x88>
    800c:	f10a 0006 	add.w	r0, sl, #6
    8010:	f00d f8e1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8014:	b3d0      	cbz	r0, 808c <CONFIG_MAIN_STACK_SIZE+0x8c>
    8016:	4420      	add	r0, r4
    8018:	f00d f8d1 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    801c:	4682      	mov	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    801e:	f8d9 0000 	ldr.w	r0, [r9]
    8022:	f00b fe86 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8026:	4550      	cmp	r0, sl
    8028:	d933      	bls.n	8092 <CONFIG_MAIN_STACK_SIZE+0x92>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    802a:	f109 0404 	add.w	r4, r9, #4
    p += i * sizeof(uoffset_t);
    802e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8032:	4620      	mov	r0, r4
    8034:	f00d f8c3 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8038:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    803a:	4620      	mov	r0, r4
    803c:	f00d f8c5 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8040:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8044:	4648      	mov	r0, r9
    8046:	f00d f8c6 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    804a:	2804      	cmp	r0, #4
    804c:	d928      	bls.n	80a0 <CONFIG_MAIN_STACK_SIZE+0xa0>
    804e:	f109 0004 	add.w	r0, r9, #4
    8052:	f00d f8c0 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8056:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8058:	b320      	cbz	r0, 80a4 <CONFIG_MAIN_STACK_SIZE+0xa4>
    805a:	4620      	mov	r0, r4
    805c:	f00d f8af 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8060:	4420      	add	r0, r4
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    8062:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    8064:	3010      	adds	r0, #16
        *offline_planner_offsets =
    8066:	f8c8 0000 	str.w	r0, [r8]
        if (tensor_count_ != nbr_tensors) {
    806a:	687b      	ldr	r3, [r7, #4]
    806c:	4293      	cmp	r3, r2
    806e:	f43f af74 	beq.w	7f5a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x86>
          TF_LITE_REPORT_ERROR(reporter_,
    8072:	4913      	ldr	r1, [pc, #76]	; (80c0 <CONFIG_MAIN_STACK_SIZE+0xc0>)
    8074:	68f8      	ldr	r0, [r7, #12]
    8076:	f00d fe22 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
    807a:	2001      	movs	r0, #1
    807c:	e017      	b.n	80ae <CONFIG_MAIN_STACK_SIZE+0xae>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    807e:	2000      	movs	r0, #0
    8080:	e7b2      	b.n	7fe8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8082:	f04f 0900 	mov.w	r9, #0
    8086:	e7b7      	b.n	7ff8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x124>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8088:	2000      	movs	r0, #0
    808a:	e7c3      	b.n	8014 <CONFIG_MAIN_STACK_SIZE+0x14>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    808c:	f04f 0a00 	mov.w	sl, #0
    8090:	e7c5      	b.n	801e <CONFIG_MAIN_STACK_SIZE+0x1e>
    FLATBUFFERS_ASSERT(i < size());
    8092:	4b08      	ldr	r3, [pc, #32]	; (80b4 <CONFIG_MAIN_STACK_SIZE+0xb4>)
    8094:	4a0b      	ldr	r2, [pc, #44]	; (80c4 <CONFIG_MAIN_STACK_SIZE+0xc4>)
    8096:	f44f 7183 	mov.w	r1, #262	; 0x106
    809a:	4808      	ldr	r0, [pc, #32]	; (80bc <CONFIG_MAIN_STACK_SIZE+0xbc>)
    809c:	f00a fbf6 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80a0:	2000      	movs	r0, #0
    80a2:	e7d8      	b.n	8056 <CONFIG_MAIN_STACK_SIZE+0x56>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80a4:	2000      	movs	r0, #0
    80a6:	e7dc      	b.n	8062 <CONFIG_MAIN_STACK_SIZE+0x62>
  return kTfLiteOk;
    80a8:	2000      	movs	r0, #0
    80aa:	e000      	b.n	80ae <CONFIG_MAIN_STACK_SIZE+0xae>
    80ac:	2000      	movs	r0, #0
}
    80ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80b2:	bf00      	nop
    80b4:	000323f8 	.word	0x000323f8
    80b8:	0003388c 	.word	0x0003388c
    80bc:	000324c4 	.word	0x000324c4
    80c0:	00033984 	.word	0x00033984
    80c4:	00033708 	.word	0x00033708
    80c8:	00033d30 	.word	0x00033d30

000080cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    80cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(model != nullptr);
    80d0:	b349      	cbz	r1, 8126 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5a>
    80d2:	4604      	mov	r4, r0
    80d4:	460d      	mov	r5, r1
  if (model_is_allocating_) {
    80d6:	7c03      	ldrb	r3, [r0, #16]
    80d8:	bb3b      	cbnz	r3, 812a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5e>
  model_is_allocating_ = true;
    80da:	2301      	movs	r3, #1
    80dc:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    80de:	6840      	ldr	r0, [r0, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    80e0:	6803      	ldr	r3, [r0, #0]
    80e2:	68db      	ldr	r3, [r3, #12]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    80e4:	2204      	movs	r2, #4
    80e6:	2108      	movs	r1, #8
    80e8:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    80ea:	4603      	mov	r3, r0
    80ec:	b118      	cbz	r0, 80f6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    80ee:	6862      	ldr	r2, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    80f0:	4926      	ldr	r1, [pc, #152]	; (818c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc0>)
    80f2:	6001      	str	r1, [r0, #0]
    80f4:	6042      	str	r2, [r0, #4]
  builtin_data_allocator_ =
    80f6:	60a3      	str	r3, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    80f8:	4620      	mov	r0, r4
    80fa:	f00d fb40 	bl	1577e <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    80fe:	2800      	cmp	r0, #0
    8100:	d142      	bne.n	8188 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xbc>
      memory_allocator_->AllocateFromTail(
    8102:	6867      	ldr	r7, [r4, #4]
          alignof(SubgraphAllocations)));
    8104:	683b      	ldr	r3, [r7, #0]
    8106:	f8d3 800c 	ldr.w	r8, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    810a:	4628      	mov	r0, r5
    810c:	f00d f85d 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8110:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8112:	4630      	mov	r0, r6
    8114:	f00d f85f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8118:	2808      	cmp	r0, #8
    811a:	d90c      	bls.n	8136 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
    811c:	f106 0008 	add.w	r0, r6, #8
    8120:	f00d f859 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8124:	e008      	b.n	8138 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
  TFLITE_DCHECK(model != nullptr);
    8126:	f010 fbc0 	bl	188aa <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    812a:	4919      	ldr	r1, [pc, #100]	; (8190 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc4>)
    812c:	68c0      	ldr	r0, [r0, #12]
    812e:	f00d fdc6 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    8132:	2600      	movs	r6, #0
    8134:	e01d      	b.n	8172 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    8136:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8138:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    813a:	b1e8      	cbz	r0, 8178 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>
    813c:	4630      	mov	r0, r6
    813e:	f00d f83e 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8142:	4406      	add	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8144:	6830      	ldr	r0, [r6, #0]
    8146:	f00b fdf4 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      memory_allocator_->AllocateFromTail(
    814a:	2204      	movs	r2, #4
    814c:	00c1      	lsls	r1, r0, #3
    814e:	4638      	mov	r0, r7
    8150:	47c0      	blx	r8
  if (output == nullptr) {
    8152:	4606      	mov	r6, r0
    8154:	b190      	cbz	r0, 817c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb0>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    8156:	6823      	ldr	r3, [r4, #0]
    8158:	69db      	ldr	r3, [r3, #28]
    815a:	4602      	mov	r2, r0
    815c:	4629      	mov	r1, r5
    815e:	4620      	mov	r0, r4
    8160:	4798      	blx	r3
    8162:	b978      	cbnz	r0, 8184 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    8164:	6823      	ldr	r3, [r4, #0]
    8166:	699b      	ldr	r3, [r3, #24]
    8168:	4632      	mov	r2, r6
    816a:	4629      	mov	r1, r5
    816c:	4620      	mov	r0, r4
    816e:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    8170:	b940      	cbnz	r0, 8184 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
}
    8172:	4630      	mov	r0, r6
    8174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8178:	2600      	movs	r6, #0
    817a:	e7e3      	b.n	8144 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    MicroPrintf("Failed to allocate memory for model metadata.");
    817c:	4805      	ldr	r0, [pc, #20]	; (8194 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc8>)
    817e:	f00c ff99 	bl	150b4 <_Z11MicroPrintfPKcz>
    return nullptr;
    8182:	e7f6      	b.n	8172 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    8184:	2600      	movs	r6, #0
    8186:	e7f4      	b.n	8172 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    8188:	2600      	movs	r6, #0
    818a:	e7f2      	b.n	8172 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    818c:	00033d50 	.word	0x00033d50
    8190:	000339d0 	.word	0x000339d0
    8194:	00033a28 	.word	0x00033a28

00008198 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    8198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    819c:	b083      	sub	sp, #12
    819e:	4680      	mov	r8, r0
    81a0:	460e      	mov	r6, r1
    81a2:	4617      	mov	r7, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    81a4:	2500      	movs	r5, #0
    81a6:	e013      	b.n	81d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81a8:	2000      	movs	r0, #0
    81aa:	e01d      	b.n	81e8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x50>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81ac:	2400      	movs	r4, #0
    81ae:	e022      	b.n	81f6 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    FLATBUFFERS_ASSERT(i < size());
    81b0:	4b31      	ldr	r3, [pc, #196]	; (8278 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe0>)
    81b2:	4a32      	ldr	r2, [pc, #200]	; (827c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe4>)
    81b4:	f44f 7183 	mov.w	r1, #262	; 0x106
    81b8:	4831      	ldr	r0, [pc, #196]	; (8280 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe8>)
    81ba:	f00a fb67 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81be:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    81c0:	b118      	cbz	r0, 81ca <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
    81c2:	4420      	add	r0, r4
    81c4:	f00d f8d0 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    81c8:	e000      	b.n	81cc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x34>
    81ca:	2000      	movs	r0, #0
    auto* tensor = subgraph->tensors()->Get(i);
    if (tensor->is_variable()) {
    81cc:	bb98      	cbnz	r0, 8236 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9e>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    81ce:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    81d0:	4630      	mov	r0, r6
    81d2:	f00c fffa 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    81d6:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    81d8:	4620      	mov	r0, r4
    81da:	f00c fffc 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81de:	2804      	cmp	r0, #4
    81e0:	d9e2      	bls.n	81a8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
    81e2:	1d20      	adds	r0, r4, #4
    81e4:	f00c fff7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    81e8:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81ea:	2800      	cmp	r0, #0
    81ec:	d0de      	beq.n	81ac <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
    81ee:	4620      	mov	r0, r4
    81f0:	f00c ffe5 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    81f4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    81f6:	6820      	ldr	r0, [r4, #0]
    81f8:	f00b fd9b 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    81fc:	4285      	cmp	r5, r0
    81fe:	d236      	bcs.n	826e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd6>
    8200:	6820      	ldr	r0, [r4, #0]
    8202:	f00b fd96 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8206:	4285      	cmp	r5, r0
    8208:	d2d2      	bcs.n	81b0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    820a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    820c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8210:	4620      	mov	r0, r4
    8212:	f00c ffd4 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8216:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8218:	4620      	mov	r0, r4
    821a:	f00c ffd6 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    821e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8222:	4648      	mov	r0, r9
    8224:	f00c ffd7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8228:	280e      	cmp	r0, #14
    822a:	d9c8      	bls.n	81be <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x26>
    822c:	f109 000e 	add.w	r0, r9, #14
    8230:	f00c ffd1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8234:	e7c4      	b.n	81c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    8236:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    823a:	0084      	lsls	r4, r0, #2
    823c:	a901      	add	r1, sp, #4
    823e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    8242:	f00c ff9b 	bl	1517c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    8246:	4603      	mov	r3, r0
    8248:	b990      	cbnz	r0, 8270 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    824a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    824e:	6803      	ldr	r3, [r0, #0]
    8250:	68db      	ldr	r3, [r3, #12]
    8252:	2210      	movs	r2, #16
    8254:	9901      	ldr	r1, [sp, #4]
    8256:	4798      	blx	r3
      eval_tensors[i].data.data =
    8258:	5138      	str	r0, [r7, r4]

      if (eval_tensors[i].data.data == nullptr) {
    825a:	2800      	cmp	r0, #0
    825c:	d1b7      	bne.n	81ce <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        TF_LITE_REPORT_ERROR(error_reporter_,
    825e:	9a01      	ldr	r2, [sp, #4]
    8260:	4908      	ldr	r1, [pc, #32]	; (8284 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xec>)
    8262:	f8d8 000c 	ldr.w	r0, [r8, #12]
    8266:	f00d fd2a 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    826a:	2301      	movs	r3, #1
    826c:	e000      	b.n	8270 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
      }
    }
  }
  return kTfLiteOk;
    826e:	2300      	movs	r3, #0
}
    8270:	4618      	mov	r0, r3
    8272:	b003      	add	sp, #12
    8274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8278:	000323f8 	.word	0x000323f8
    827c:	000326e0 	.word	0x000326e0
    8280:	000324c4 	.word	0x000324c4
    8284:	00033a58 	.word	0x00033a58

00008288 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    8288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    828c:	b083      	sub	sp, #12
  TFLITE_DCHECK(eval_tensors != nullptr);
    828e:	b12b      	cbz	r3, 829c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x14>
    8290:	4604      	mov	r4, r0
    8292:	4688      	mov	r8, r1
    8294:	4692      	mov	sl, r2
    8296:	4699      	mov	r9, r3
  for (size_t i = 0; i < tensor_count_; ++i) {
    8298:	2600      	movs	r6, #0
    829a:	e04b      	b.n	8334 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xac>
  TFLITE_DCHECK(eval_tensors != nullptr);
    829c:	f010 fb05 	bl	188aa <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    82a0:	4640      	mov	r0, r8
    82a2:	f00c ff92 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    82a6:	eba8 0b00 	sub.w	fp, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    82aa:	4658      	mov	r0, fp
    82ac:	f00c ff93 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82b0:	2804      	cmp	r0, #4
    82b2:	d92e      	bls.n	8312 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8a>
    82b4:	f10b 0004 	add.w	r0, fp, #4
    82b8:	f00c ff8d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    82bc:	eb08 0b00 	add.w	fp, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82c0:	b120      	cbz	r0, 82cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x44>
    82c2:	4658      	mov	r0, fp
    82c4:	f00c ff7b 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82c8:	eb0b 0700 	add.w	r7, fp, r0
  uoffset_t size() const { return EndianScalar(length_); }
    82cc:	6838      	ldr	r0, [r7, #0]
    82ce:	f00b fd30 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    82d2:	4286      	cmp	r6, r0
    82d4:	d21f      	bcs.n	8316 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    82d6:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
    82d8:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    82dc:	4638      	mov	r0, r7
    82de:	f00c ff6e 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82e2:	4407      	add	r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
    82e4:	4638      	mov	r0, r7
    82e6:	f00c ff70 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    82ea:	eba7 0b00 	sub.w	fp, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    82ee:	4658      	mov	r0, fp
    82f0:	f00c ff71 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82f4:	280e      	cmp	r0, #14
    82f6:	d915      	bls.n	8324 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x9c>
    82f8:	f10b 000e 	add.w	r0, fp, #14
    82fc:	f00c ff6b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8300:	b118      	cbz	r0, 830a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x82>
    8302:	4438      	add	r0, r7
    8304:	f00d f830 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8308:	9001      	str	r0, [sp, #4]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    830a:	9b01      	ldr	r3, [sp, #4]
    830c:	b963      	cbnz	r3, 8328 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa0>
    830e:	2301      	movs	r3, #1
    8310:	e02c      	b.n	836c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8312:	2000      	movs	r0, #0
    8314:	e7d2      	b.n	82bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x34>
    FLATBUFFERS_ASSERT(i < size());
    8316:	4bb6      	ldr	r3, [pc, #728]	; (85f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8318:	4ab6      	ldr	r2, [pc, #728]	; (85f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x36c>)
    831a:	f44f 7183 	mov.w	r1, #262	; 0x106
    831e:	48b6      	ldr	r0, [pc, #728]	; (85f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8320:	f00a fab4 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8324:	2000      	movs	r0, #0
    8326:	e7eb      	b.n	8300 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x78>
    8328:	2300      	movs	r3, #0
    832a:	e01f      	b.n	836c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
      current->offline_offset = kOnlinePlannedBuffer;
    832c:	f04f 33ff 	mov.w	r3, #4294967295
    8330:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8332:	3601      	adds	r6, #1
    8334:	6863      	ldr	r3, [r4, #4]
    8336:	42b3      	cmp	r3, r6
    8338:	d920      	bls.n	837c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xf4>
    AllocationInfo* current = &info_[i];
    833a:	6825      	ldr	r5, [r4, #0]
    833c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8340:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    current->output_ptr = &(eval_tensors[i].data.data);
    8344:	009f      	lsls	r7, r3, #2
    8346:	eb09 0083 	add.w	r0, r9, r3, lsl #2
    834a:	6068      	str	r0, [r5, #4]
    TF_LITE_ENSURE_STATUS(
    834c:	4629      	mov	r1, r5
    834e:	f00c ff15 	bl	1517c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    8352:	9001      	str	r0, [sp, #4]
    8354:	2800      	cmp	r0, #0
    8356:	f040 8146 	bne.w	85e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35e>
    current->first_created = -1;
    835a:	f04f 33ff 	mov.w	r3, #4294967295
    835e:	60ab      	str	r3, [r5, #8]
    current->last_used = -1;
    8360:	60eb      	str	r3, [r5, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    8362:	f859 7007 	ldr.w	r7, [r9, r7]
    8366:	2f00      	cmp	r7, #0
    8368:	d09a      	beq.n	82a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x18>
    836a:	2300      	movs	r3, #0
    836c:	752b      	strb	r3, [r5, #20]
    if (offline_offsets) {
    836e:	f1ba 0f00 	cmp.w	sl, #0
    8372:	d0db      	beq.n	832c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa4>
      current->offline_offset = offline_offsets[i];
    8374:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    8378:	612b      	str	r3, [r5, #16]
    837a:	e7da      	b.n	8332 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xaa>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    837c:	4640      	mov	r0, r8
    837e:	f00c ffd4 	bl	1532a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    8382:	4607      	mov	r7, r0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8384:	f04f 0900 	mov.w	r9, #0
    8388:	e01f      	b.n	83ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x142>
    838a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    838c:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8390:	b350      	cbz	r0, 83e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x160>
    8392:	4628      	mov	r0, r5
    8394:	f00c ff13 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8398:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    839a:	6828      	ldr	r0, [r5, #0]
    839c:	f00b fcc9 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    83a0:	4581      	cmp	r9, r0
    83a2:	d22a      	bcs.n	83fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x172>
    83a4:	6828      	ldr	r0, [r5, #0]
    83a6:	f00b fcc4 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    83aa:	4581      	cmp	r9, r0
    83ac:	d21e      	bcs.n	83ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x164>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    83ae:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    83b0:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    83b4:	f00c ff08 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    83b8:	6823      	ldr	r3, [r4, #0]
    83ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    83be:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->first_created = 0;
    83c2:	2300      	movs	r3, #0
    83c4:	6083      	str	r3, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    83c6:	f109 0901 	add.w	r9, r9, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    83ca:	4646      	mov	r6, r8
    return data_ - ReadScalar<soffset_t>(data_);
    83cc:	4640      	mov	r0, r8
    83ce:	f00c fefc 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    83d2:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    83d6:	4628      	mov	r0, r5
    83d8:	f00c fefd 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83dc:	2806      	cmp	r0, #6
    83de:	d9d4      	bls.n	838a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x102>
    83e0:	1da8      	adds	r0, r5, #6
    83e2:	f00c fef8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    83e6:	e7d1      	b.n	838c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x104>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83e8:	2500      	movs	r5, #0
    83ea:	e7d6      	b.n	839a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x112>
    FLATBUFFERS_ASSERT(i < size());
    83ec:	4b80      	ldr	r3, [pc, #512]	; (85f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    83ee:	4a83      	ldr	r2, [pc, #524]	; (85fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    83f0:	f44f 7183 	mov.w	r1, #262	; 0x106
    83f4:	4880      	ldr	r0, [pc, #512]	; (85f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    83f6:	f00a fa49 	bl	1288c <__assert_func>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    83fa:	f04f 0800 	mov.w	r8, #0
    83fe:	e01e      	b.n	843e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1b6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8400:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8402:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8404:	b348      	cbz	r0, 845a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d2>
    8406:	4628      	mov	r0, r5
    8408:	f00c fed9 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    840c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    840e:	6828      	ldr	r0, [r5, #0]
    8410:	f00b fc8f 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8414:	4580      	cmp	r8, r0
    8416:	d229      	bcs.n	846c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e4>
    8418:	6828      	ldr	r0, [r5, #0]
    841a:	f00b fc8a 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    841e:	4580      	cmp	r8, r0
    8420:	d21d      	bcs.n	845e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8422:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8424:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
    8428:	f00c fece 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    842c:	6823      	ldr	r3, [r4, #0]
    842e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8432:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->last_used = operators_size - 1;
    8436:	1e7b      	subs	r3, r7, #1
    8438:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    843a:	f108 0801 	add.w	r8, r8, #1
    return data_ - ReadScalar<soffset_t>(data_);
    843e:	4630      	mov	r0, r6
    8440:	f00c fec3 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8444:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8446:	4628      	mov	r0, r5
    8448:	f00c fec5 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    844c:	2808      	cmp	r0, #8
    844e:	d9d7      	bls.n	8400 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x178>
    8450:	f105 0008 	add.w	r0, r5, #8
    8454:	f00c febf 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8458:	e7d3      	b.n	8402 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x17a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    845a:	2500      	movs	r5, #0
    845c:	e7d7      	b.n	840e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x186>
    FLATBUFFERS_ASSERT(i < size());
    845e:	4b64      	ldr	r3, [pc, #400]	; (85f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8460:	4a66      	ldr	r2, [pc, #408]	; (85fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8462:	f44f 7183 	mov.w	r1, #262	; 0x106
    8466:	4864      	ldr	r0, [pc, #400]	; (85f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8468:	f00a fa10 	bl	1288c <__assert_func>
  for (int i = (operators_size - 1); i >= 0; --i) {
    846c:	3f01      	subs	r7, #1
    846e:	e08d      	b.n	858c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x304>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8470:	2000      	movs	r0, #0
    8472:	e09b      	b.n	85ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x324>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8474:	f04f 0900 	mov.w	r9, #0
    8478:	e0a1      	b.n	85be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x336>
    FLATBUFFERS_ASSERT(i < size());
    847a:	4b5d      	ldr	r3, [pc, #372]	; (85f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    847c:	4a60      	ldr	r2, [pc, #384]	; (8600 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x378>)
    847e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8482:	485d      	ldr	r0, [pc, #372]	; (85f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8484:	f00a fa02 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8488:	2000      	movs	r0, #0
    848a:	e019      	b.n	84c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x238>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    848c:	2500      	movs	r5, #0
    848e:	e01f      	b.n	84d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x248>
    FLATBUFFERS_ASSERT(i < size());
    8490:	4b57      	ldr	r3, [pc, #348]	; (85f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8492:	4a5a      	ldr	r2, [pc, #360]	; (85fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8494:	f44f 7183 	mov.w	r1, #262	; 0x106
    8498:	4857      	ldr	r0, [pc, #348]	; (85f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    849a:	f00a f9f7 	bl	1288c <__assert_func>
        current->last_used = i;
    849e:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    84a0:	f10a 0a01 	add.w	sl, sl, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    84a4:	46c8      	mov	r8, r9
    return data_ - ReadScalar<soffset_t>(data_);
    84a6:	4648      	mov	r0, r9
    84a8:	f00c fe8f 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    84ac:	eba9 0500 	sub.w	r5, r9, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    84b0:	4628      	mov	r0, r5
    84b2:	f00c fe90 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84b6:	2806      	cmp	r0, #6
    84b8:	d9e6      	bls.n	8488 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x200>
    84ba:	1da8      	adds	r0, r5, #6
    84bc:	f00c fe8b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    84c0:	eb09 0500 	add.w	r5, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84c4:	2800      	cmp	r0, #0
    84c6:	d0e1      	beq.n	848c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x204>
    84c8:	4628      	mov	r0, r5
    84ca:	f00c fe78 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    84ce:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    84d0:	6828      	ldr	r0, [r5, #0]
    84d2:	f00b fc2e 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    84d6:	4582      	cmp	sl, r0
    84d8:	d215      	bcs.n	8506 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x27e>
    84da:	6828      	ldr	r0, [r5, #0]
    84dc:	f00b fc29 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    84e0:	4582      	cmp	sl, r0
    84e2:	d2d5      	bcs.n	8490 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x208>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    84e4:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    84e6:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
    84ea:	f00c fe6d 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    84ee:	6823      	ldr	r3, [r4, #0]
    84f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    84f4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    84f8:	68c3      	ldr	r3, [r0, #12]
    84fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    84fe:	d0ce      	beq.n	849e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    8500:	42bb      	cmp	r3, r7
    8502:	dacd      	bge.n	84a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x218>
    8504:	e7cb      	b.n	849e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8506:	f04f 0900 	mov.w	r9, #0
    850a:	e00d      	b.n	8528 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2a0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    850c:	2000      	movs	r0, #0
    850e:	e019      	b.n	8544 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2bc>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8510:	2500      	movs	r5, #0
    8512:	e01f      	b.n	8554 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2cc>
    FLATBUFFERS_ASSERT(i < size());
    8514:	4b36      	ldr	r3, [pc, #216]	; (85f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8516:	4a39      	ldr	r2, [pc, #228]	; (85fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8518:	f44f 7183 	mov.w	r1, #262	; 0x106
    851c:	4836      	ldr	r0, [pc, #216]	; (85f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    851e:	f00a f9b5 	bl	1288c <__assert_func>
        current->first_created = i;
    8522:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8524:	f109 0901 	add.w	r9, r9, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8528:	4640      	mov	r0, r8
    852a:	f00c fe4e 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    852e:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8532:	4628      	mov	r0, r5
    8534:	f00c fe4f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8538:	2808      	cmp	r0, #8
    853a:	d9e7      	bls.n	850c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x284>
    853c:	f105 0008 	add.w	r0, r5, #8
    8540:	f00c fe49 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8544:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8548:	2800      	cmp	r0, #0
    854a:	d0e1      	beq.n	8510 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x288>
    854c:	4628      	mov	r0, r5
    854e:	f00c fe36 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8552:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8554:	6828      	ldr	r0, [r5, #0]
    8556:	f00b fbec 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    855a:	4581      	cmp	r9, r0
    855c:	d215      	bcs.n	858a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x302>
    855e:	6828      	ldr	r0, [r5, #0]
    8560:	f00b fbe7 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8564:	4581      	cmp	r9, r0
    8566:	d2d5      	bcs.n	8514 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8568:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    856a:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    856e:	f00c fe2b 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    8572:	6823      	ldr	r3, [r4, #0]
    8574:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8578:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    857c:	6883      	ldr	r3, [r0, #8]
    857e:	f1b3 3fff 	cmp.w	r3, #4294967295
    8582:	d0ce      	beq.n	8522 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
    8584:	42bb      	cmp	r3, r7
    8586:	ddcd      	ble.n	8524 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29c>
    8588:	e7cb      	b.n	8522 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
  for (int i = (operators_size - 1); i >= 0; --i) {
    858a:	3f01      	subs	r7, #1
    858c:	2f00      	cmp	r7, #0
    858e:	db28      	blt.n	85e2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35a>
    return data_ - ReadScalar<soffset_t>(data_);
    8590:	4630      	mov	r0, r6
    8592:	f00c fe1a 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8596:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8598:	4628      	mov	r0, r5
    859a:	f00c fe1c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    859e:	280a      	cmp	r0, #10
    85a0:	f67f af66 	bls.w	8470 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e8>
    85a4:	f105 000a 	add.w	r0, r5, #10
    85a8:	f00c fe15 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    85ac:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85b0:	2800      	cmp	r0, #0
    85b2:	f43f af5f 	beq.w	8474 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1ec>
    85b6:	4648      	mov	r0, r9
    85b8:	f00c fe01 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    85bc:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    85be:	f8d9 0000 	ldr.w	r0, [r9]
    85c2:	f00b fbb6 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    85c6:	4287      	cmp	r7, r0
    85c8:	f4bf af57 	bcs.w	847a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    85cc:	f109 0904 	add.w	r9, r9, #4
    p += i * sizeof(uoffset_t);
    85d0:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    85d4:	4648      	mov	r0, r9
    85d6:	f00c fdf2 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    85da:	4481      	add	r9, r0
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    85dc:	f04f 0a00 	mov.w	sl, #0
    85e0:	e760      	b.n	84a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x21c>
  return kTfLiteOk;
    85e2:	2300      	movs	r3, #0
    85e4:	9301      	str	r3, [sp, #4]
}
    85e6:	9801      	ldr	r0, [sp, #4]
    85e8:	b003      	add	sp, #12
    85ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85ee:	bf00      	nop
    85f0:	000323f8 	.word	0x000323f8
    85f4:	000326e0 	.word	0x000326e0
    85f8:	000324c4 	.word	0x000324c4
    85fc:	00032404 	.word	0x00032404
    8600:	00033230 	.word	0x00033230

00008604 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8608:	b083      	sub	sp, #12
    860a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    860e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  TFLITE_DCHECK(result != nullptr);
    8610:	b31d      	cbz	r5, 865a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    8612:	4607      	mov	r7, r0
    8614:	4688      	mov	r8, r1
    8616:	4614      	mov	r4, r2
    8618:	469a      	mov	sl, r3
  *result = {};
    861a:	2240      	movs	r2, #64	; 0x40
    861c:	2100      	movs	r1, #0
    861e:	4628      	mov	r0, r5
    8620:	f010 f96a 	bl	188f8 <memset>
    return data_ - ReadScalar<soffset_t>(data_);
    8624:	4620      	mov	r0, r4
    8626:	f00c fdd0 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    862a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    862c:	4630      	mov	r0, r6
    862e:	f00c fdd2 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8632:	2806      	cmp	r0, #6
    8634:	d913      	bls.n	865e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    8636:	1db0      	adds	r0, r6, #6
    8638:	f00c fdcd 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    863c:	b188      	cbz	r0, 8662 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5e>
    863e:	4420      	add	r0, r4
    8640:	f00c fdcf 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8644:	464a      	mov	r2, r9
    8646:	4629      	mov	r1, r5
    8648:	b2c0      	uxtb	r0, r0
    864a:	f001 f8b7 	bl	97bc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    864e:	4606      	mov	r6, r0
    8650:	b148      	cbz	r0, 8666 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x62>
}
    8652:	4630      	mov	r0, r6
    8654:	b003      	add	sp, #12
    8656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(result != nullptr);
    865a:	f010 f926 	bl	188aa <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    865e:	2000      	movs	r0, #0
    8660:	e7ec      	b.n	863c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8662:	2000      	movs	r0, #0
    8664:	e7ee      	b.n	8644 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    8666:	4620      	mov	r0, r4
    8668:	f00c fdaf 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    866c:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8670:	4658      	mov	r0, fp
    8672:	f00c fdb0 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8676:	280e      	cmp	r0, #14
    8678:	d93f      	bls.n	86fa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf6>
    867a:	f10b 000e 	add.w	r0, fp, #14
    867e:	f00c fdaa 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8682:	b118      	cbz	r0, 868c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x88>
    8684:	4420      	add	r0, r4
    8686:	f00c fe6f 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    868a:	4606      	mov	r6, r0
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    868c:	3e00      	subs	r6, #0
    868e:	bf18      	it	ne
    8690:	2601      	movne	r6, #1
  result->is_variable = flatbuffer_tensor.is_variable();
    8692:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8696:	4651      	mov	r1, sl
    8698:	4620      	mov	r0, r4
    869a:	f7ff faed 	bl	7c78 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    869e:	6068      	str	r0, [r5, #4]
  if (result->data.data == nullptr) {
    86a0:	b368      	cbz	r0, 86fe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
    result->allocation_type = kTfLiteMmapRo;
    86a2:	2301      	movs	r3, #1
    86a4:	752b      	strb	r3, [r5, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    86a6:	464b      	mov	r3, r9
    86a8:	aa01      	add	r2, sp, #4
    86aa:	f105 0118 	add.w	r1, r5, #24
    86ae:	4620      	mov	r0, r4
    86b0:	f7fd fe6a 	bl	6388 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    86b4:	4606      	mov	r6, r0
    86b6:	2800      	cmp	r0, #0
    86b8:	d1cb      	bne.n	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    86ba:	4620      	mov	r0, r4
    86bc:	f00c fd85 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86c0:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86c4:	4650      	mov	r0, sl
    86c6:	f00c fd86 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86ca:	2804      	cmp	r0, #4
    86cc:	d91a      	bls.n	8704 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    86ce:	f10a 0004 	add.w	r0, sl, #4
    86d2:	f00c fd80 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    86d6:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86da:	b1a8      	cbz	r0, 8708 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    86dc:	4650      	mov	r0, sl
    86de:	f00c fd6e 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    86e2:	eb0a 0200 	add.w	r2, sl, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    86e6:	b18a      	cbz	r2, 870c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    86e8:	f105 0308 	add.w	r3, r5, #8
    86ec:	4649      	mov	r1, r9
    86ee:	4638      	mov	r0, r7
    86f0:	f00d f878 	bl	157e4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    86f4:	b160      	cbz	r0, 8710 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10c>
    86f6:	4606      	mov	r6, r0
    86f8:	e7ab      	b.n	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86fa:	2000      	movs	r0, #0
    86fc:	e7c1      	b.n	8682 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    result->allocation_type = kTfLiteArenaRw;
    86fe:	2302      	movs	r3, #2
    8700:	752b      	strb	r3, [r5, #20]
    8702:	e7d0      	b.n	86a6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    8704:	2000      	movs	r0, #0
    8706:	e7e6      	b.n	86d6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8708:	2200      	movs	r2, #0
    870a:	e7ec      	b.n	86e6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    870c:	4bb6      	ldr	r3, [pc, #728]	; (89e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e4>)
    870e:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8710:	4620      	mov	r0, r4
    8712:	f00c fd5a 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8716:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    871a:	4650      	mov	r0, sl
    871c:	f00c fd5b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8720:	280c      	cmp	r0, #12
    8722:	d91a      	bls.n	875a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x156>
    8724:	f10a 000c 	add.w	r0, sl, #12
    8728:	f00c fd55 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    872c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    872e:	b1b0      	cbz	r0, 875e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15a>
    8730:	4620      	mov	r0, r4
    8732:	f00c fd44 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8736:	4404      	add	r4, r0
      src_quantization->zero_point() &&
    8738:	2c00      	cmp	r4, #0
    873a:	d08a      	beq.n	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    873c:	46a2      	mov	sl, r4
    return data_ - ReadScalar<soffset_t>(data_);
    873e:	4620      	mov	r0, r4
    8740:	f00c fd43 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8744:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8746:	4620      	mov	r0, r4
    8748:	f00c fd45 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    874c:	2808      	cmp	r0, #8
    874e:	d908      	bls.n	8762 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
    8750:	f104 0008 	add.w	r0, r4, #8
    8754:	f00c fd3f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8758:	e004      	b.n	8764 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x160>
    875a:	2000      	movs	r0, #0
    875c:	e7e6      	b.n	872c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x128>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    875e:	2400      	movs	r4, #0
    8760:	e7ea      	b.n	8738 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8762:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8764:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8768:	2800      	cmp	r0, #0
    876a:	d060      	beq.n	882e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22a>
    876c:	4620      	mov	r0, r4
    876e:	f00c fd26 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8772:	4404      	add	r4, r0
  if (src_quantization && src_quantization->scale() &&
    8774:	2c00      	cmp	r4, #0
    8776:	f43f af6c 	beq.w	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    877a:	6820      	ldr	r0, [r4, #0]
    877c:	f00b fad9 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8780:	2800      	cmp	r0, #0
    8782:	f43f af66 	beq.w	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    8786:	4650      	mov	r0, sl
    8788:	f00c fd1f 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    878c:	ebaa 0b00 	sub.w	fp, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8790:	4658      	mov	r0, fp
    8792:	f00c fd20 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8796:	280a      	cmp	r0, #10
    8798:	d94b      	bls.n	8832 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
    879a:	f10b 000a 	add.w	r0, fp, #10
    879e:	f00c fd1a 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    87a2:	eb0a 0b00 	add.w	fp, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87a6:	2800      	cmp	r0, #0
    87a8:	d045      	beq.n	8836 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
    87aa:	4658      	mov	r0, fp
    87ac:	f00c fd07 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87b0:	4458      	add	r0, fp
      (src_quantization->scale()->size() > 0) &&
    87b2:	2800      	cmp	r0, #0
    87b4:	f43f af4d 	beq.w	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    87b8:	6800      	ldr	r0, [r0, #0]
    87ba:	f00b faba 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      src_quantization->zero_point() &&
    87be:	2800      	cmp	r0, #0
    87c0:	f43f af47 	beq.w	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    87c4:	6820      	ldr	r0, [r4, #0]
    87c6:	f00b fab4 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    87ca:	b3b0      	cbz	r0, 883a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x236>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    87cc:	6860      	ldr	r0, [r4, #4]
    87ce:	f00c fdd1 	bl	15374 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
    result->params.scale = src_quantization->scale()->Get(0);
    87d2:	60e8      	str	r0, [r5, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    87d4:	4650      	mov	r0, sl
    87d6:	f00c fcf8 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    87da:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    87de:	4620      	mov	r0, r4
    87e0:	f00c fcf9 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87e4:	280a      	cmp	r0, #10
    87e6:	d92f      	bls.n	8848 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    87e8:	f104 000a 	add.w	r0, r4, #10
    87ec:	f00c fcf3 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    87f0:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87f4:	b350      	cbz	r0, 884c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    87f6:	4620      	mov	r0, r4
    87f8:	f00c fce1 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87fc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    87fe:	6820      	ldr	r0, [r4, #0]
    8800:	f00b fa97 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8804:	b320      	cbz	r0, 8850 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8806:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    880a:	f00c fdb2 	bl	15372 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    result->params.zero_point =
    880e:	6128      	str	r0, [r5, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8810:	4650      	mov	r0, sl
    8812:	f00c fcda 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8816:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    881a:	4620      	mov	r0, r4
    881c:	f00c fcdb 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8820:	2808      	cmp	r0, #8
    8822:	d91c      	bls.n	885e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25a>
    8824:	f104 0008 	add.w	r0, r4, #8
    8828:	f00c fcd5 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    882c:	e018      	b.n	8860 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    882e:	2400      	movs	r4, #0
    8830:	e7a0      	b.n	8774 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8832:	2000      	movs	r0, #0
    8834:	e7b5      	b.n	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8836:	2000      	movs	r0, #0
    8838:	e7bb      	b.n	87b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ae>
    FLATBUFFERS_ASSERT(i < size());
    883a:	4b6c      	ldr	r3, [pc, #432]	; (89ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    883c:	4a6c      	ldr	r2, [pc, #432]	; (89f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ec>)
    883e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8842:	486c      	ldr	r0, [pc, #432]	; (89f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8844:	f00a f822 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8848:	2000      	movs	r0, #0
    884a:	e7d1      	b.n	87f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    884c:	2400      	movs	r4, #0
    884e:	e7d6      	b.n	87fe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fa>
    FLATBUFFERS_ASSERT(i < size());
    8850:	4b66      	ldr	r3, [pc, #408]	; (89ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8852:	4a69      	ldr	r2, [pc, #420]	; (89f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8854:	f44f 7183 	mov.w	r1, #262	; 0x106
    8858:	4866      	ldr	r0, [pc, #408]	; (89f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    885a:	f00a f817 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    885e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8860:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8864:	b390      	cbz	r0, 88cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>
    8866:	4620      	mov	r0, r4
    8868:	f00c fca9 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    886c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    886e:	6820      	ldr	r0, [r4, #0]
    8870:	f00b fa5f 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8874:	4604      	mov	r4, r0
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    8876:	f1b8 0f00 	cmp.w	r8, #0
    887a:	d029      	beq.n	88d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>
                                          alignof(TfLiteAffineQuantization)))
    887c:	683b      	ldr	r3, [r7, #0]
    887e:	691b      	ldr	r3, [r3, #16]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    8880:	2204      	movs	r2, #4
    8882:	210c      	movs	r1, #12
    8884:	4638      	mov	r0, r7
    8886:	4798      	blx	r3
    8888:	4683      	mov	fp, r0
    if (quantization == nullptr) {
    888a:	f1bb 0f00 	cmp.w	fp, #0
    888e:	d027      	beq.n	88e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8890:	f1b8 0f00 	cmp.w	r8, #0
    8894:	d02a      	beq.n	88ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
                  alignof(TfLiteIntArray)))
    8896:	683b      	ldr	r3, [r7, #0]
    8898:	691e      	ldr	r6, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    889a:	4620      	mov	r0, r4
    889c:	f00d f934 	bl	15b08 <TfLiteIntArrayGetSizeInBytes>
    88a0:	4601      	mov	r1, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    88a2:	2204      	movs	r2, #4
    88a4:	4638      	mov	r0, r7
    88a6:	47b0      	blx	r6
    quantization->zero_point =
    88a8:	f8cb 0004 	str.w	r0, [fp, #4]
    if (quantization->zero_point == nullptr) {
    88ac:	b340      	cbz	r0, 8900 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2fc>
    return data_ - ReadScalar<soffset_t>(data_);
    88ae:	4650      	mov	r0, sl
    88b0:	f00c fc8b 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    88b4:	ebaa 0600 	sub.w	r6, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    88b8:	4630      	mov	r0, r6
    88ba:	f00c fc8c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88be:	2808      	cmp	r0, #8
    88c0:	d924      	bls.n	890c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    88c2:	f106 0008 	add.w	r0, r6, #8
    88c6:	f00c fc86 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    88ca:	e020      	b.n	890e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x30a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88cc:	2400      	movs	r4, #0
    88ce:	e7ce      	b.n	886e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
                      alignof(TfLiteAffineQuantization)));
    88d0:	683b      	ldr	r3, [r7, #0]
    88d2:	68db      	ldr	r3, [r3, #12]
                  allocator->AllocateFromTail(
    88d4:	2204      	movs	r2, #4
    88d6:	210c      	movs	r1, #12
    88d8:	4638      	mov	r0, r7
    88da:	4798      	blx	r3
    88dc:	4683      	mov	fp, r0
    88de:	e7d4      	b.n	888a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      TF_LITE_REPORT_ERROR(error_reporter,
    88e0:	4946      	ldr	r1, [pc, #280]	; (89fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f8>)
    88e2:	4648      	mov	r0, r9
    88e4:	f00d f9eb 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    88e8:	2601      	movs	r6, #1
    88ea:	e6b2      	b.n	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
                  alignof(TfLiteIntArray)));
    88ec:	683b      	ldr	r3, [r7, #0]
    88ee:	68de      	ldr	r6, [r3, #12]
                  TfLiteIntArrayGetSizeInBytes(channels),
    88f0:	4620      	mov	r0, r4
    88f2:	f00d f909 	bl	15b08 <TfLiteIntArrayGetSizeInBytes>
    88f6:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    88f8:	2204      	movs	r2, #4
    88fa:	4638      	mov	r0, r7
    88fc:	47b0      	blx	r6
    88fe:	e7d3      	b.n	88a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a4>
      TF_LITE_REPORT_ERROR(error_reporter,
    8900:	493f      	ldr	r1, [pc, #252]	; (8a00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3fc>)
    8902:	4648      	mov	r0, r9
    8904:	f00d f9db 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8908:	2601      	movs	r6, #1
    890a:	e6a2      	b.n	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    890c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    890e:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8912:	b1b0      	cbz	r0, 8942 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x33e>
    8914:	4630      	mov	r0, r6
    8916:	f00c fc52 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    891a:	1832      	adds	r2, r6, r0
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    891c:	465b      	mov	r3, fp
    891e:	4649      	mov	r1, r9
    8920:	4638      	mov	r0, r7
    8922:	f00c ff71 	bl	15808 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8926:	4606      	mov	r6, r0
    8928:	2800      	cmp	r0, #0
    892a:	f47f ae92 	bne.w	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    quantization->zero_point->size = channels;
    892e:	f8db 3004 	ldr.w	r3, [fp, #4]
    8932:	601c      	str	r4, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
    8934:	f8db 3004 	ldr.w	r3, [fp, #4]
    8938:	f103 0904 	add.w	r9, r3, #4
    for (int i = 0; i < channels; i++) {
    893c:	f04f 0800 	mov.w	r8, #0
    8940:	e019      	b.n	8976 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x372>
    8942:	2200      	movs	r2, #0
    8944:	e7ea      	b.n	891c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x318>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8946:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8948:	eb0a 0700 	add.w	r7, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    894c:	b320      	cbz	r0, 8998 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x394>
    894e:	4638      	mov	r0, r7
    8950:	f00c fc35 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8954:	4407      	add	r7, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8956:	6838      	ldr	r0, [r7, #0]
    8958:	f00b f9eb 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    895c:	4580      	cmp	r8, r0
    895e:	d21d      	bcs.n	899c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x398>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8960:	3704      	adds	r7, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8962:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    8966:	e9d7 0100 	ldrd	r0, r1, [r7]
    896a:	f00c fd02 	bl	15372 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    896e:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
    for (int i = 0; i < channels; i++) {
    8972:	f108 0801 	add.w	r8, r8, #1
    8976:	45a0      	cmp	r8, r4
    8978:	da17      	bge.n	89aa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a6>
    return data_ - ReadScalar<soffset_t>(data_);
    897a:	4650      	mov	r0, sl
    897c:	f00c fc25 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8980:	ebaa 0700 	sub.w	r7, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8984:	4638      	mov	r0, r7
    8986:	f00c fc26 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    898a:	280a      	cmp	r0, #10
    898c:	d9db      	bls.n	8946 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x342>
    898e:	f107 000a 	add.w	r0, r7, #10
    8992:	f00c fc20 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8996:	e7d7      	b.n	8948 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x344>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8998:	2700      	movs	r7, #0
    899a:	e7dc      	b.n	8956 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x352>
    FLATBUFFERS_ASSERT(i < size());
    899c:	4b13      	ldr	r3, [pc, #76]	; (89ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    899e:	4a16      	ldr	r2, [pc, #88]	; (89f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    89a0:	f44f 7183 	mov.w	r1, #262	; 0x106
    89a4:	4813      	ldr	r0, [pc, #76]	; (89f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    89a6:	f009 ff71 	bl	1288c <__assert_func>
    return data_ - ReadScalar<soffset_t>(data_);
    89aa:	4650      	mov	r0, sl
    89ac:	f00c fc0d 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    89b0:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    89b4:	4620      	mov	r0, r4
    89b6:	f00c fc0e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89ba:	2810      	cmp	r0, #16
    89bc:	d90f      	bls.n	89de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3da>
    89be:	f104 0010 	add.w	r0, r4, #16
    89c2:	f00c fc08 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    89c6:	b160      	cbz	r0, 89e2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3de>
    89c8:	4450      	add	r0, sl
    89ca:	f00c fbfe 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    89ce:	f8cb 0008 	str.w	r0, [fp, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    89d2:	2301      	movs	r3, #1
    89d4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    89d8:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    89dc:	e639      	b.n	8652 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89de:	2000      	movs	r0, #0
    89e0:	e7f1      	b.n	89c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    89e2:	2000      	movs	r0, #0
    89e4:	e7f3      	b.n	89ce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ca>
    89e6:	bf00      	nop
    89e8:	00033d2c 	.word	0x00033d2c
    89ec:	000323f8 	.word	0x000323f8
    89f0:	00033a88 	.word	0x00033a88
    89f4:	000324c4 	.word	0x000324c4
    89f8:	000327d4 	.word	0x000327d4
    89fc:	00033b4c 	.word	0x00033b4c
    8a00:	00033b7c 	.word	0x00033b7c

00008a04 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
    8a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a08:	b082      	sub	sp, #8
    8a0a:	4607      	mov	r7, r0
    8a0c:	460e      	mov	r6, r1
    8a0e:	4690      	mov	r8, r2
    8a10:	469a      	mov	sl, r3
    8a12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    8a14:	f8d0 9004 	ldr.w	r9, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8a18:	4608      	mov	r0, r1
    8a1a:	f00c fbd6 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a1e:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a20:	4628      	mov	r0, r5
    8a22:	f00c fbd8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a26:	2808      	cmp	r0, #8
    8a28:	d941      	bls.n	8aae <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xaa>
    8a2a:	f105 0008 	add.w	r0, r5, #8
    8a2e:	f00c fbd2 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8a32:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a34:	b3e8      	cbz	r0, 8ab2 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xae>
    8a36:	4628      	mov	r0, r5
    8a38:	f00c fbc1 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a3c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8a3e:	6828      	ldr	r0, [r5, #0]
    8a40:	f00b f977 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8a44:	4284      	cmp	r4, r0
    8a46:	d236      	bcs.n	8ab6 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8a48:	3504      	adds	r5, #4
    p += i * sizeof(uoffset_t);
    8a4a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8a4e:	4620      	mov	r0, r4
    8a50:	f00c fbb5 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a54:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8a56:	4620      	mov	r0, r4
    8a58:	f00c fbb7 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a5c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a5e:	4628      	mov	r0, r5
    8a60:	f00c fbb9 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a64:	2804      	cmp	r0, #4
    8a66:	d92d      	bls.n	8ac4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
    8a68:	1d28      	adds	r0, r5, #4
    8a6a:	f00c fbb4 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8a6e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a70:	b350      	cbz	r0, 8ac8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc4>
    8a72:	4620      	mov	r0, r4
    8a74:	f00c fba3 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a78:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8a7a:	6820      	ldr	r0, [r4, #0]
    8a7c:	f00b f959 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8a80:	4582      	cmp	sl, r0
    8a82:	d223      	bcs.n	8acc <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8a84:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8a86:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8a8a:	4620      	mov	r0, r4
    8a8c:	f00c fb97 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a90:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8a92:	4630      	mov	r0, r6
    8a94:	f00c fb99 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a98:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a9a:	4628      	mov	r0, r5
    8a9c:	f00c fb9b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8aa0:	280c      	cmp	r0, #12
    8aa2:	d91a      	bls.n	8ada <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd6>
    8aa4:	f105 000c 	add.w	r0, r5, #12
    8aa8:	f00c fb95 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8aac:	e016      	b.n	8adc <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd8>
    8aae:	2000      	movs	r0, #0
    8ab0:	e7bf      	b.n	8a32 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x2e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ab2:	2500      	movs	r5, #0
    8ab4:	e7c3      	b.n	8a3e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8ab6:	4b14      	ldr	r3, [pc, #80]	; (8b08 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8ab8:	4a14      	ldr	r2, [pc, #80]	; (8b0c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x108>)
    8aba:	f44f 7183 	mov.w	r1, #262	; 0x106
    8abe:	4814      	ldr	r0, [pc, #80]	; (8b10 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8ac0:	f009 fee4 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ac4:	2000      	movs	r0, #0
    8ac6:	e7d2      	b.n	8a6e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ac8:	2400      	movs	r4, #0
    8aca:	e7d6      	b.n	8a7a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x76>
    FLATBUFFERS_ASSERT(i < size());
    8acc:	4b0e      	ldr	r3, [pc, #56]	; (8b08 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8ace:	4a11      	ldr	r2, [pc, #68]	; (8b14 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x110>)
    8ad0:	f44f 7183 	mov.w	r1, #262	; 0x106
    8ad4:	480e      	ldr	r0, [pc, #56]	; (8b10 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8ad6:	f009 fed9 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ada:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8adc:	4406      	add	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ade:	b180      	cbz	r0, 8b02 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xfe>
    8ae0:	4630      	mov	r0, r6
    8ae2:	f00c fb6c 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8ae6:	1833      	adds	r3, r6, r0
    8ae8:	f8cd 8004 	str.w	r8, [sp, #4]
    8aec:	68fa      	ldr	r2, [r7, #12]
    8aee:	9200      	str	r2, [sp, #0]
    8af0:	4622      	mov	r2, r4
    8af2:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    8af6:	4648      	mov	r0, r9
    8af8:	f7ff fd84 	bl	8604 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
      model->buffers(), error_reporter_, tensor);
}
    8afc:	b002      	add	sp, #8
    8afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b02:	2300      	movs	r3, #0
    8b04:	e7f0      	b.n	8ae8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xe4>
    8b06:	bf00      	nop
    8b08:	000323f8 	.word	0x000323f8
    8b0c:	00032548 	.word	0x00032548
    8b10:	000324c4 	.word	0x000324c4
    8b14:	000326e0 	.word	0x000326e0

00008b18 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    8b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8b1c:	4680      	mov	r8, r0
    8b1e:	460c      	mov	r4, r1
    8b20:	4691      	mov	r9, r2
    8b22:	461f      	mov	r7, r3
    8b24:	9d08      	ldr	r5, [sp, #32]
  *result = {};
    8b26:	2300      	movs	r3, #0
    8b28:	602b      	str	r3, [r5, #0]
    8b2a:	606b      	str	r3, [r5, #4]
    8b2c:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8b2e:	4608      	mov	r0, r1
    8b30:	f00c fb4b 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b34:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b36:	4630      	mov	r0, r6
    8b38:	f00c fb4d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b3c:	2806      	cmp	r0, #6
    8b3e:	d911      	bls.n	8b64 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    8b40:	1db0      	adds	r0, r6, #6
    8b42:	f00c fb48 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8b46:	b178      	cbz	r0, 8b68 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x50>
    8b48:	4420      	add	r0, r4
    8b4a:	f00c fb4a 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8b4e:	463a      	mov	r2, r7
    8b50:	f105 0108 	add.w	r1, r5, #8
    8b54:	b2c0      	uxtb	r0, r0
    8b56:	f000 fe31 	bl	97bc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    8b5a:	4606      	mov	r6, r0
    8b5c:	b130      	cbz	r0, 8b6c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
}
    8b5e:	4630      	mov	r0, r6
    8b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b64:	2000      	movs	r0, #0
    8b66:	e7ee      	b.n	8b46 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8b68:	2000      	movs	r0, #0
    8b6a:	e7f0      	b.n	8b4e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x36>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8b6c:	4649      	mov	r1, r9
    8b6e:	4620      	mov	r0, r4
    8b70:	f7ff f882 	bl	7c78 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    8b74:	6028      	str	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    8b76:	4620      	mov	r0, r4
    8b78:	f00c fb27 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b7c:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b80:	4648      	mov	r0, r9
    8b82:	f00c fb28 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b86:	2804      	cmp	r0, #4
    8b88:	d911      	bls.n	8bae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x96>
    8b8a:	f109 0004 	add.w	r0, r9, #4
    8b8e:	f00c fb22 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8b92:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b94:	b168      	cbz	r0, 8bb2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9a>
    8b96:	4620      	mov	r0, r4
    8b98:	f00c fb11 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b9c:	1822      	adds	r2, r4, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8b9e:	b152      	cbz	r2, 8bb6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9e>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8ba0:	1d2b      	adds	r3, r5, #4
    8ba2:	4639      	mov	r1, r7
    8ba4:	4640      	mov	r0, r8
    8ba6:	f00c fe1d 	bl	157e4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8baa:	4606      	mov	r6, r0
    8bac:	e7d7      	b.n	8b5e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bae:	2000      	movs	r0, #0
    8bb0:	e7ef      	b.n	8b92 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bb2:	2200      	movs	r2, #0
    8bb4:	e7f3      	b.n	8b9e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x86>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8bb6:	4b01      	ldr	r3, [pc, #4]	; (8bbc <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0xa4>)
    8bb8:	606b      	str	r3, [r5, #4]
    8bba:	e7d0      	b.n	8b5e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    8bbc:	00033d2c 	.word	0x00033d2c

00008bc0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    8bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bc4:	b087      	sub	sp, #28
    8bc6:	9104      	str	r1, [sp, #16]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8bc8:	9205      	str	r2, [sp, #20]
    8bca:	b192      	cbz	r2, 8bf2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x32>
    8bcc:	4683      	mov	fp, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8bce:	2300      	movs	r3, #0
    8bd0:	9303      	str	r3, [sp, #12]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    8bd2:	9c04      	ldr	r4, [sp, #16]
    8bd4:	46a0      	mov	r8, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8bd6:	4620      	mov	r0, r4
    8bd8:	f00c faf7 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8bdc:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8bde:	4620      	mov	r0, r4
    8be0:	f00c faf9 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8be4:	2808      	cmp	r0, #8
    8be6:	d906      	bls.n	8bf6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x36>
    8be8:	f104 0008 	add.w	r0, r4, #8
    8bec:	f00c faf3 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8bf0:	e002      	b.n	8bf8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8bf2:	f00f fe5a 	bl	188aa <abort>
    8bf6:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8bf8:	9b04      	ldr	r3, [sp, #16]
    8bfa:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bfc:	2800      	cmp	r0, #0
    8bfe:	d03d      	beq.n	8c7c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>
    8c00:	4620      	mov	r0, r4
    8c02:	f00c fadc 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c06:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8c08:	6820      	ldr	r0, [r4, #0]
    8c0a:	f00b f892 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8c0e:	9d03      	ldr	r5, [sp, #12]
    8c10:	4285      	cmp	r5, r0
    8c12:	f080 80b3 	bcs.w	8d7c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1bc>
    8c16:	6820      	ldr	r0, [r4, #0]
    8c18:	f00b f88b 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8c1c:	4285      	cmp	r5, r0
    8c1e:	d22f      	bcs.n	8c80 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8c20:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8c22:	9b03      	ldr	r3, [sp, #12]
    8c24:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8c28:	4620      	mov	r0, r4
    8c2a:	f00c fac8 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    8c2e:	1824      	adds	r4, r4, r0
    8c30:	d02d      	beq.n	8c8e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xce>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    8c32:	4627      	mov	r7, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8c34:	4620      	mov	r0, r4
    8c36:	f00c fac8 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8c3a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8c3c:	4628      	mov	r0, r5
    8c3e:	f00c faca 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c42:	2804      	cmp	r0, #4
    8c44:	d925      	bls.n	8c92 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
    8c46:	1d28      	adds	r0, r5, #4
    8c48:	f00c fac5 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8c4c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c4e:	b310      	cbz	r0, 8c96 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd6>
    8c50:	4620      	mov	r0, r4
    8c52:	f00c fab4 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c56:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8c58:	6820      	ldr	r0, [r4, #0]
    8c5a:	f00b f86a 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8c5e:	4682      	mov	sl, r0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8c60:	f8db 0004 	ldr.w	r0, [fp, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    8c64:	6803      	ldr	r3, [r0, #0]
    8c66:	68db      	ldr	r3, [r3, #12]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8c68:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8c6c:	0089      	lsls	r1, r1, #2
    8c6e:	460c      	mov	r4, r1
    8c70:	2204      	movs	r2, #4
    8c72:	4798      	blx	r3
    if (tensors == nullptr) {
    8c74:	9002      	str	r0, [sp, #8]
    8c76:	b180      	cbz	r0, 8c9a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    for (size_t i = 0; i < alloc_count; ++i) {
    8c78:	2500      	movs	r5, #0
    8c7a:	e038      	b.n	8cee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c7c:	2400      	movs	r4, #0
    8c7e:	e7c3      	b.n	8c08 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
    FLATBUFFERS_ASSERT(i < size());
    8c80:	4b3f      	ldr	r3, [pc, #252]	; (8d80 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8c82:	4a40      	ldr	r2, [pc, #256]	; (8d84 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c4>)
    8c84:	f44f 7183 	mov.w	r1, #262	; 0x106
    8c88:	483f      	ldr	r0, [pc, #252]	; (8d88 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8c8a:	f009 fdff 	bl	1288c <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    8c8e:	f00f fe0c 	bl	188aa <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c92:	2000      	movs	r0, #0
    8c94:	e7da      	b.n	8c4c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c96:	2400      	movs	r4, #0
    8c98:	e7de      	b.n	8c58 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x98>
      TF_LITE_REPORT_ERROR(
    8c9a:	4622      	mov	r2, r4
    8c9c:	493b      	ldr	r1, [pc, #236]	; (8d8c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1cc>)
    8c9e:	f8db 000c 	ldr.w	r0, [fp, #12]
    8ca2:	f00d f80c 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8ca6:	2001      	movs	r0, #1
    8ca8:	e05c      	b.n	8d64 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8caa:	2000      	movs	r0, #0
    8cac:	e02f      	b.n	8d0e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8cae:	2400      	movs	r4, #0
    8cb0:	e034      	b.n	8d1c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15c>
    FLATBUFFERS_ASSERT(i < size());
    8cb2:	4b33      	ldr	r3, [pc, #204]	; (8d80 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8cb4:	4a36      	ldr	r2, [pc, #216]	; (8d90 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d0>)
    8cb6:	f44f 7183 	mov.w	r1, #262	; 0x106
    8cba:	4833      	ldr	r0, [pc, #204]	; (8d88 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8cbc:	f009 fde6 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cc0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8cc2:	eb08 0600 	add.w	r6, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8cc6:	2800      	cmp	r0, #0
    8cc8:	d043      	beq.n	8d52 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x192>
    8cca:	4630      	mov	r0, r6
    8ccc:	f00c fa77 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8cd0:	1832      	adds	r2, r6, r0
          error_reporter_, &tensors[i]);
    8cd2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8cd6:	9902      	ldr	r1, [sp, #8]
    8cd8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8cdc:	9300      	str	r3, [sp, #0]
    8cde:	f8db 300c 	ldr.w	r3, [fp, #12]
    8ce2:	4621      	mov	r1, r4
    8ce4:	4648      	mov	r0, r9
    8ce6:	f7ff ff17 	bl	8b18 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    8cea:	bba0      	cbnz	r0, 8d56 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x196>
    for (size_t i = 0; i < alloc_count; ++i) {
    8cec:	3501      	adds	r5, #1
    8cee:	4555      	cmp	r5, sl
    8cf0:	d23b      	bcs.n	8d6a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1aa>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8cf2:	f8db 9004 	ldr.w	r9, [fp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8cf6:	4638      	mov	r0, r7
    8cf8:	f00c fa67 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8cfc:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8cfe:	4620      	mov	r0, r4
    8d00:	f00c fa69 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d04:	2804      	cmp	r0, #4
    8d06:	d9d0      	bls.n	8caa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xea>
    8d08:	1d20      	adds	r0, r4, #4
    8d0a:	f00c fa64 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8d0e:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d10:	2800      	cmp	r0, #0
    8d12:	d0cc      	beq.n	8cae <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xee>
    8d14:	4620      	mov	r0, r4
    8d16:	f00c fa52 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d1a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8d1c:	6820      	ldr	r0, [r4, #0]
    8d1e:	f00b f808 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8d22:	4285      	cmp	r5, r0
    8d24:	d2c5      	bcs.n	8cb2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8d26:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8d28:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8d2c:	4620      	mov	r0, r4
    8d2e:	f00c fa46 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d32:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8d34:	4640      	mov	r0, r8
    8d36:	f00c fa48 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d3a:	eba8 0600 	sub.w	r6, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d3e:	4630      	mov	r0, r6
    8d40:	f00c fa49 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d44:	280c      	cmp	r0, #12
    8d46:	d9bb      	bls.n	8cc0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x100>
    8d48:	f106 000c 	add.w	r0, r6, #12
    8d4c:	f00c fa43 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8d50:	e7b7      	b.n	8cc2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d52:	2200      	movs	r2, #0
    8d54:	e7bd      	b.n	8cd2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    8d56:	462a      	mov	r2, r5
    8d58:	490e      	ldr	r1, [pc, #56]	; (8d94 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d4>)
    8d5a:	f8db 000c 	ldr.w	r0, [fp, #12]
    8d5e:	f00c ffae 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    8d62:	2001      	movs	r0, #1
}
    8d64:	b007      	add	sp, #28
    8d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    subgraph_allocations[subgraph_idx].tensors = tensors;
    8d6a:	9b05      	ldr	r3, [sp, #20]
    8d6c:	9a03      	ldr	r2, [sp, #12]
    8d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8d72:	9902      	ldr	r1, [sp, #8]
    8d74:	6059      	str	r1, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8d76:	1c53      	adds	r3, r2, #1
    8d78:	9303      	str	r3, [sp, #12]
    8d7a:	e72a      	b.n	8bd2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
    8d7c:	2000      	movs	r0, #0
    8d7e:	e7f1      	b.n	8d64 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    8d80:	000323f8 	.word	0x000323f8
    8d84:	00032548 	.word	0x00032548
    8d88:	000324c4 	.word	0x000324c4
    8d8c:	00033bac 	.word	0x00033bac
    8d90:	000326e0 	.word	0x000326e0
    8d94:	00033bf4 	.word	0x00033bf4

00008d98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    8d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d9c:	b093      	sub	sp, #76	; 0x4c
    8d9e:	4606      	mov	r6, r0
    8da0:	460f      	mov	r7, r1
    8da2:	4690      	mov	r8, r2
    8da4:	4699      	mov	r9, r3
    8da6:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8daa:	4608      	mov	r0, r1
    8dac:	f00c fa0d 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8db0:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8db2:	4620      	mov	r0, r4
    8db4:	f00c fa0f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8db8:	2808      	cmp	r0, #8
    8dba:	d948      	bls.n	8e4e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb6>
    8dbc:	f104 0008 	add.w	r0, r4, #8
    8dc0:	f00c fa09 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8dc4:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dc6:	2800      	cmp	r0, #0
    8dc8:	d043      	beq.n	8e52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xba>
    8dca:	4620      	mov	r0, r4
    8dcc:	f00c f9f7 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8dd0:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8dd2:	6820      	ldr	r0, [r4, #0]
    8dd4:	f00a ffad 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8dd8:	4582      	cmp	sl, r0
    8dda:	d23c      	bcs.n	8e56 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xbe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8ddc:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8dde:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8de2:	4620      	mov	r0, r4
    8de4:	f00c f9eb 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8de8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8dea:	4620      	mov	r0, r4
    8dec:	f00c f9ed 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8df0:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8df2:	4628      	mov	r0, r5
    8df4:	f00c f9ef 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8df8:	2804      	cmp	r0, #4
    8dfa:	d933      	bls.n	8e64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xcc>
    8dfc:	1d28      	adds	r0, r5, #4
    8dfe:	f00c f9ea 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8e02:	1825      	adds	r5, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e04:	b380      	cbz	r0, 8e68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd0>
    8e06:	4628      	mov	r0, r5
    8e08:	f00c f9d9 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8e0c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8e0e:	6828      	ldr	r0, [r5, #0]
    8e10:	f00a ff8f 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    8e14:	6973      	ldr	r3, [r6, #20]
    8e16:	18c5      	adds	r5, r0, r3
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    8e18:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
    8e1c:	ea4f 0aca 	mov.w	sl, sl, lsl #3

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    8e20:	6870      	ldr	r0, [r6, #4]
    8e22:	6803      	ldr	r3, [r0, #0]
    8e24:	691b      	ldr	r3, [r3, #16]
    8e26:	2204      	movs	r2, #4
    8e28:	4651      	mov	r1, sl
    8e2a:	4798      	blx	r3
  if (allocation_info == nullptr) {
    8e2c:	4683      	mov	fp, r0
    8e2e:	b1e8      	cbz	r0, 8e6c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd4>
    return data_ - ReadScalar<soffset_t>(data_);
    8e30:	4620      	mov	r0, r4
    8e32:	f00c f9ca 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e36:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e3a:	4650      	mov	r0, sl
    8e3c:	f00c f9cb 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e40:	2804      	cmp	r0, #4
    8e42:	d91a      	bls.n	8e7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe2>
    8e44:	f10a 0004 	add.w	r0, sl, #4
    8e48:	f00c f9c5 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8e4c:	e016      	b.n	8e7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe4>
    8e4e:	2000      	movs	r0, #0
    8e50:	e7b8      	b.n	8dc4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e52:	2400      	movs	r4, #0
    8e54:	e7bd      	b.n	8dd2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8e56:	4b55      	ldr	r3, [pc, #340]	; (8fac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x214>)
    8e58:	4a55      	ldr	r2, [pc, #340]	; (8fb0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x218>)
    8e5a:	f44f 7183 	mov.w	r1, #262	; 0x106
    8e5e:	4855      	ldr	r0, [pc, #340]	; (8fb4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21c>)
    8e60:	f009 fd14 	bl	1288c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e64:	2000      	movs	r0, #0
    8e66:	e7cc      	b.n	8e02 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e68:	2500      	movs	r5, #0
    8e6a:	e7d0      	b.n	8e0e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x76>
    TF_LITE_REPORT_ERROR(
    8e6c:	4652      	mov	r2, sl
    8e6e:	4952      	ldr	r1, [pc, #328]	; (8fb8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x220>)
    8e70:	68f0      	ldr	r0, [r6, #12]
    8e72:	f00c ff24 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
    8e76:	2701      	movs	r7, #1
    8e78:	e01b      	b.n	8eb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e7a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8e7c:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e80:	b1d8      	cbz	r0, 8eba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x122>
    8e82:	4650      	mov	r0, sl
    8e84:	f00c f99b 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8e88:	4482      	add	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8e8a:	f8da 0000 	ldr.w	r0, [sl]
    8e8e:	f00a ff50 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
                                scratch_buffer_request_count_, error_reporter_);
    8e92:	6972      	ldr	r2, [r6, #20]
    8e94:	68f3      	ldr	r3, [r6, #12]
        reporter_(reporter) {}
    8e96:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    8e9a:	900f      	str	r0, [sp, #60]	; 0x3c
    8e9c:	9210      	str	r2, [sp, #64]	; 0x40
    8e9e:	9311      	str	r3, [sp, #68]	; 0x44

  const int32_t* offline_planner_offsets = nullptr;
    8ea0:	2300      	movs	r3, #0
    8ea2:	930d      	str	r3, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(
    8ea4:	aa0d      	add	r2, sp, #52	; 0x34
    8ea6:	4639      	mov	r1, r7
    8ea8:	a80e      	add	r0, sp, #56	; 0x38
    8eaa:	f7ff f813 	bl	7ed4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>
    8eae:	4607      	mov	r7, r0
    8eb0:	b130      	cbz	r0, 8ec0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    8eb2:	4638      	mov	r0, r7
    8eb4:	b013      	add	sp, #76	; 0x4c
    8eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8eba:	f04f 0a00 	mov.w	sl, #0
    8ebe:	e7e4      	b.n	8e8a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
  TF_LITE_ENSURE_STATUS(
    8ec0:	4643      	mov	r3, r8
    8ec2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ec4:	4621      	mov	r1, r4
    8ec6:	a80e      	add	r0, sp, #56	; 0x38
    8ec8:	f7ff f9de 	bl	8288 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>
    8ecc:	4607      	mov	r7, r0
    8ece:	2800      	cmp	r0, #0
    8ed0:	d1ef      	bne.n	8eb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      GetScratchBufferRequests();
    8ed2:	4630      	mov	r0, r6
    8ed4:	f00c fc5d 	bl	15792 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
    8ed8:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
    8eda:	464a      	mov	r2, r9
    8edc:	a80e      	add	r0, sp, #56	; 0x38
    8ede:	f00c fb67 	bl	155b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
    8ee2:	4607      	mov	r7, r0
    8ee4:	2800      	cmp	r0, #0
    8ee6:	d1e4      	bne.n	8eb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    8ee8:	2110      	movs	r1, #16
    8eea:	6870      	ldr	r0, [r6, #4]
    8eec:	f00c f8c7 	bl	1507e <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    8ef0:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    8ef2:	6870      	ldr	r0, [r6, #4]
    8ef4:	6803      	ldr	r3, [r0, #0]
    8ef6:	691b      	ldr	r3, [r3, #16]
    8ef8:	2210      	movs	r2, #16
    8efa:	4621      	mov	r1, r4
    8efc:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8efe:	4601      	mov	r1, r0
    8f00:	2800      	cmp	r0, #0
    8f02:	d036      	beq.n	8f72 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1da>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8f04:	4622      	mov	r2, r4
    8f06:	a802      	add	r0, sp, #8
    8f08:	f000 f882 	bl	9010 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    8f0c:	462b      	mov	r3, r5
    8f0e:	465a      	mov	r2, fp
    8f10:	a902      	add	r1, sp, #8
    8f12:	68f0      	ldr	r0, [r6, #12]
    8f14:	f00c fbd3 	bl	156be <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
    8f18:	4607      	mov	r7, r0
    8f1a:	2800      	cmp	r0, #0
    8f1c:	d141      	bne.n	8fa2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  memory_allocator_->ResetTempAllocations();
    8f1e:	6870      	ldr	r0, [r6, #4]
    8f20:	6803      	ldr	r3, [r0, #0]
    8f22:	695b      	ldr	r3, [r3, #20]
    8f24:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    8f26:	2110      	movs	r1, #16
    8f28:	6870      	ldr	r0, [r6, #4]
    8f2a:	f00c f8a8 	bl	1507e <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    8f2e:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    8f30:	a802      	add	r0, sp, #8
    8f32:	f00c fdc6 	bl	15ac2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    8f36:	42a0      	cmp	r0, r4
    8f38:	d828      	bhi.n	8f8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    8f3a:	68f4      	ldr	r4, [r6, #12]
    8f3c:	6870      	ldr	r0, [r6, #4]
    8f3e:	f00c f89c 	bl	1507a <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    8f42:	4602      	mov	r2, r0
    8f44:	9500      	str	r5, [sp, #0]
    8f46:	465b      	mov	r3, fp
    8f48:	a902      	add	r1, sp, #8
    8f4a:	4620      	mov	r0, r4
    8f4c:	f00c fb54 	bl	155f8 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
    8f50:	4607      	mov	r7, r0
    8f52:	bb30      	cbnz	r0, 8fa2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  head_usage = planner.GetMaximumMemorySize();
    8f54:	a802      	add	r0, sp, #8
    8f56:	f00c fdb4 	bl	15ac2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    8f5a:	69b3      	ldr	r3, [r6, #24]
    8f5c:	4283      	cmp	r3, r0
    8f5e:	d200      	bcs.n	8f62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ca>
    max_head_buffer_usage_ = head_usage;
    8f60:	61b0      	str	r0, [r6, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    8f62:	6870      	ldr	r0, [r6, #4]
    8f64:	6803      	ldr	r3, [r0, #0]
    8f66:	689b      	ldr	r3, [r3, #8]
    8f68:	2210      	movs	r2, #16
    8f6a:	69b1      	ldr	r1, [r6, #24]
    8f6c:	4798      	blx	r3
    8f6e:	4607      	mov	r7, r0
    8f70:	e017      	b.n	8fa2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8f72:	68f0      	ldr	r0, [r6, #12]
    8f74:	4b11      	ldr	r3, [pc, #68]	; (8fbc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x224>)
    8f76:	9301      	str	r3, [sp, #4]
    8f78:	f240 33d2 	movw	r3, #978	; 0x3d2
    8f7c:	9300      	str	r3, [sp, #0]
    8f7e:	4b10      	ldr	r3, [pc, #64]	; (8fc0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>)
    8f80:	4a10      	ldr	r2, [pc, #64]	; (8fc4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x22c>)
    8f82:	4601      	mov	r1, r0
    8f84:	f00c feaa 	bl	15cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    8f88:	2701      	movs	r7, #1
    8f8a:	e792      	b.n	8eb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    TF_LITE_REPORT_ERROR(
    8f8c:	68f5      	ldr	r5, [r6, #12]
    8f8e:	a802      	add	r0, sp, #8
    8f90:	f00c fd97 	bl	15ac2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    8f94:	4602      	mov	r2, r0
    8f96:	4623      	mov	r3, r4
    8f98:	490b      	ldr	r1, [pc, #44]	; (8fc8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>)
    8f9a:	4628      	mov	r0, r5
    8f9c:	f00c fe8f 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8fa0:	2701      	movs	r7, #1
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8fa2:	a802      	add	r0, sp, #8
    8fa4:	f00c fc3a 	bl	1581c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    8fa8:	e783      	b.n	8eb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    8faa:	bf00      	nop
    8fac:	000323f8 	.word	0x000323f8
    8fb0:	00032548 	.word	0x00032548
    8fb4:	000324c4 	.word	0x000324c4
    8fb8:	00033c14 	.word	0x00033c14
    8fbc:	00033cc0 	.word	0x00033cc0
    8fc0:	00033c58 	.word	0x00033c58
    8fc4:	00033ca8 	.word	0x00033ca8
    8fc8:	00033cdc 	.word	0x00033cdc

00008fcc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    8fcc:	b538      	push	{r3, r4, r5, lr}
    8fce:	4604      	mov	r4, r0
    8fd0:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    8fd2:	68a5      	ldr	r5, [r4, #8]
    8fd4:	6861      	ldr	r1, [r4, #4]
    8fd6:	428d      	cmp	r5, r1
    8fd8:	da12      	bge.n	9000 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
                         max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
    8fda:	68e1      	ldr	r1, [r4, #12]
    8fdc:	0128      	lsls	r0, r5, #4
    8fde:	eb01 1505 	add.w	r5, r1, r5, lsl #4
  current->size = size;
    8fe2:	500a      	str	r2, [r1, r0]
  current->first_time_used = first_time_used;
    8fe4:	60ab      	str	r3, [r5, #8]
  current->last_time_used = last_time_used;
    8fe6:	9b04      	ldr	r3, [sp, #16]
    8fe8:	60eb      	str	r3, [r5, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    8fea:	f04f 33ff 	mov.w	r3, #4294967295
    8fee:	606b      	str	r3, [r5, #4]
  ++buffer_count_;
    8ff0:	68a3      	ldr	r3, [r4, #8]
    8ff2:	3301      	adds	r3, #1
    8ff4:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
    8ff6:	2301      	movs	r3, #1
    8ff8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    8ffc:	2000      	movs	r0, #0
}
    8ffe:	bd38      	pop	{r3, r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    9000:	460a      	mov	r2, r1
    9002:	4902      	ldr	r1, [pc, #8]	; (900c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    9004:	f00c fe5b 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9008:	2001      	movs	r0, #1
    900a:	e7f8      	b.n	8ffe <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x32>
    900c:	00033d9c 	.word	0x00033d9c

00009010 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    9010:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    9012:	4c0f      	ldr	r4, [pc, #60]	; (9050 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
    9014:	6004      	str	r4, [r0, #0]
    9016:	2400      	movs	r4, #0
    9018:	6084      	str	r4, [r0, #8]
    901a:	2401      	movs	r4, #1
    901c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    9020:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    9024:	fba4 4202 	umull	r4, r2, r4, r2
    9028:	0952      	lsrs	r2, r2, #5
    902a:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    902c:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    902e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    9032:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    9034:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    9038:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    903a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    903e:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    9040:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9044:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    9048:	6241      	str	r1, [r0, #36]	; 0x24
}
    904a:	bc10      	pop	{r4}
    904c:	4770      	bx	lr
    904e:	bf00      	nop
    9050:	00033df0 	.word	0x00033df0

00009054 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    9054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9056:	4605      	mov	r5, r0
    9058:	460f      	mov	r7, r1
    905a:	4614      	mov	r4, r2
    905c:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    905e:	f00c fc55 	bl	1590c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    9062:	2c00      	cmp	r4, #0
    9064:	db08      	blt.n	9078 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    9066:	68ab      	ldr	r3, [r5, #8]
    9068:	42a3      	cmp	r3, r4
    906a:	dd05      	ble.n	9078 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    906c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    906e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    9072:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    9074:	2000      	movs	r0, #0
}
    9076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    9078:	68ab      	ldr	r3, [r5, #8]
    907a:	4622      	mov	r2, r4
    907c:	4902      	ldr	r1, [pc, #8]	; (9088 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    907e:	4638      	mov	r0, r7
    9080:	f00c fe1d 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9084:	2001      	movs	r0, #1
    9086:	e7f6      	b.n	9076 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    9088:	00033dbc 	.word	0x00033dbc

0000908c <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    908c:	2810      	cmp	r0, #16
    908e:	d82a      	bhi.n	90e6 <TfLiteTypeGetName+0x5a>
    9090:	e8df f000 	tbb	[pc, r0]
    9094:	110d2b09 	.word	0x110d2b09
    9098:	0b191f15 	.word	0x0b191f15
    909c:	2321131b 	.word	0x2321131b
    90a0:	2725171d 	.word	0x2725171d
    90a4:	0f          	.byte	0x0f
    90a5:	00          	.byte	0x00
    case kTfLiteFloat64:
      return "FLOAT64";
    case kTfLiteResource:
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
    90a6:	4812      	ldr	r0, [pc, #72]	; (90f0 <TfLiteTypeGetName+0x64>)
    90a8:	4770      	bx	lr
      return "INT16";
    90aa:	4812      	ldr	r0, [pc, #72]	; (90f4 <TfLiteTypeGetName+0x68>)
    90ac:	4770      	bx	lr
      return "INT32";
    90ae:	4812      	ldr	r0, [pc, #72]	; (90f8 <TfLiteTypeGetName+0x6c>)
    90b0:	4770      	bx	lr
      return "UINT32";
    90b2:	4812      	ldr	r0, [pc, #72]	; (90fc <TfLiteTypeGetName+0x70>)
    90b4:	4770      	bx	lr
      return "UINT8";
    90b6:	4812      	ldr	r0, [pc, #72]	; (9100 <TfLiteTypeGetName+0x74>)
    90b8:	4770      	bx	lr
      return "INT8";
    90ba:	4812      	ldr	r0, [pc, #72]	; (9104 <TfLiteTypeGetName+0x78>)
    90bc:	4770      	bx	lr
      return "INT64";
    90be:	4812      	ldr	r0, [pc, #72]	; (9108 <TfLiteTypeGetName+0x7c>)
    90c0:	4770      	bx	lr
      return "UINT64";
    90c2:	4812      	ldr	r0, [pc, #72]	; (910c <TfLiteTypeGetName+0x80>)
    90c4:	4770      	bx	lr
      return "BOOL";
    90c6:	4812      	ldr	r0, [pc, #72]	; (9110 <TfLiteTypeGetName+0x84>)
    90c8:	4770      	bx	lr
      return "COMPLEX64";
    90ca:	4812      	ldr	r0, [pc, #72]	; (9114 <TfLiteTypeGetName+0x88>)
    90cc:	4770      	bx	lr
      return "COMPLEX128";
    90ce:	4812      	ldr	r0, [pc, #72]	; (9118 <TfLiteTypeGetName+0x8c>)
    90d0:	4770      	bx	lr
      return "STRING";
    90d2:	4812      	ldr	r0, [pc, #72]	; (911c <TfLiteTypeGetName+0x90>)
    90d4:	4770      	bx	lr
      return "FLOAT16";
    90d6:	4812      	ldr	r0, [pc, #72]	; (9120 <TfLiteTypeGetName+0x94>)
    90d8:	4770      	bx	lr
      return "FLOAT64";
    90da:	4812      	ldr	r0, [pc, #72]	; (9124 <TfLiteTypeGetName+0x98>)
    90dc:	4770      	bx	lr
      return "RESOURCE";
    90de:	4812      	ldr	r0, [pc, #72]	; (9128 <TfLiteTypeGetName+0x9c>)
    90e0:	4770      	bx	lr
      return "VARIANT";
    90e2:	4812      	ldr	r0, [pc, #72]	; (912c <TfLiteTypeGetName+0xa0>)
    90e4:	4770      	bx	lr
  }
  return "Unknown type";
    90e6:	4812      	ldr	r0, [pc, #72]	; (9130 <TfLiteTypeGetName+0xa4>)
    90e8:	4770      	bx	lr
      return "FLOAT32";
    90ea:	4812      	ldr	r0, [pc, #72]	; (9134 <TfLiteTypeGetName+0xa8>)
}
    90ec:	4770      	bx	lr
    90ee:	bf00      	nop
    90f0:	00033ea4 	.word	0x00033ea4
    90f4:	00033e20 	.word	0x00033e20
    90f8:	00033e28 	.word	0x00033e28
    90fc:	00033e30 	.word	0x00033e30
    9100:	00033e38 	.word	0x00033e38
    9104:	00033e40 	.word	0x00033e40
    9108:	00033e48 	.word	0x00033e48
    910c:	00033e50 	.word	0x00033e50
    9110:	00033e58 	.word	0x00033e58
    9114:	00033e60 	.word	0x00033e60
    9118:	00033e6c 	.word	0x00033e6c
    911c:	00033e78 	.word	0x00033e78
    9120:	00033e80 	.word	0x00033e80
    9124:	00033e88 	.word	0x00033e88
    9128:	00033e90 	.word	0x00033e90
    912c:	00033e9c 	.word	0x00033e9c
    9130:	00033e08 	.word	0x00033e08
    9134:	00033e18 	.word	0x00033e18

00009138 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    9138:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    913c:	4606      	mov	r6, r0
    913e:	460f      	mov	r7, r1
    9140:	4615      	mov	r5, r2
    9142:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    9144:	2200      	movs	r2, #0
    9146:	2300      	movs	r3, #0
    9148:	f7f7 fc4e 	bl	9e8 <__aeabi_dcmpeq>
    914c:	b120      	cbz	r0, 9158 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    914e:	2300      	movs	r3, #0
    9150:	602b      	str	r3, [r5, #0]
    *shift = 0;
    9152:	6023      	str	r3, [r4, #0]
}
    9154:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  const double q = std::frexp(double_multiplier, shift);
    9158:	4622      	mov	r2, r4
    915a:	4630      	mov	r0, r6
    915c:	4639      	mov	r1, r7
    915e:	f009 f979 	bl	12454 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    9162:	2200      	movs	r2, #0
    9164:	4b1a      	ldr	r3, [pc, #104]	; (91d0 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x98>)
    9166:	f7f7 f9d7 	bl	518 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    916a:	f009 f9ab 	bl	124c4 <round>
    916e:	f7f7 fff7 	bl	1160 <__aeabi_d2lz>
    9172:	4606      	mov	r6, r0
    9174:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    9176:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    917a:	2300      	movs	r3, #0
    917c:	4282      	cmp	r2, r0
    917e:	418b      	sbcs	r3, r1
    9180:	db12      	blt.n	91a8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>
  if (q_fixed == (1ll << 31)) {
    9182:	2900      	cmp	r1, #0
    9184:	bf08      	it	eq
    9186:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    918a:	d00f      	beq.n	91ac <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x74>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    918c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    9190:	f177 0300 	sbcs.w	r3, r7, #0
    9194:	da19      	bge.n	91ca <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x92>
  if (*shift < -31) {
    9196:	6823      	ldr	r3, [r4, #0]
    9198:	f113 0f1f 	cmn.w	r3, #31
    919c:	da02      	bge.n	91a4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x6c>
    *shift = 0;
    919e:	2300      	movs	r3, #0
    91a0:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    91a2:	2600      	movs	r6, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    91a4:	602e      	str	r6, [r5, #0]
    91a6:	e7d5      	b.n	9154 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    91a8:	f00f fb7f 	bl	188aa <abort>
    q_fixed /= 2;
    91ac:	0fc9      	lsrs	r1, r1, #31
    91ae:	eb16 0b01 	adds.w	fp, r6, r1
    91b2:	f147 0c00 	adc.w	ip, r7, #0
    91b6:	ea4f 025b 	mov.w	r2, fp, lsr #1
    91ba:	ea42 76cc 	orr.w	r6, r2, ip, lsl #31
    91be:	ea4f 076c 	mov.w	r7, ip, asr #1
    ++*shift;
    91c2:	6823      	ldr	r3, [r4, #0]
    91c4:	3301      	adds	r3, #1
    91c6:	6023      	str	r3, [r4, #0]
    91c8:	e7e0      	b.n	918c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x54>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    91ca:	f00f fb6e 	bl	188aa <abort>
    91ce:	bf00      	nop
    91d0:	41e00000 	.word	0x41e00000

000091d4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    91d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91d6:	4606      	mov	r6, r0
    91d8:	460f      	mov	r7, r1
    91da:	4615      	mov	r5, r2
    91dc:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    91de:	2200      	movs	r2, #0
    91e0:	4b08      	ldr	r3, [pc, #32]	; (9204 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x30>)
    91e2:	f7f7 fc29 	bl	a38 <__aeabi_dcmpgt>
    91e6:	b148      	cbz	r0, 91fc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x28>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    91e8:	4623      	mov	r3, r4
    91ea:	462a      	mov	r2, r5
    91ec:	4630      	mov	r0, r6
    91ee:	4639      	mov	r1, r7
    91f0:	f7ff ffa2 	bl	9138 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    91f4:	6823      	ldr	r3, [r4, #0]
    91f6:	2b00      	cmp	r3, #0
    91f8:	db02      	blt.n	9200 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>
}
    91fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    91fc:	f00f fb55 	bl	188aa <abort>
  TFLITE_CHECK_GE(*left_shift, 0);
    9200:	f00f fb53 	bl	188aa <abort>
    9204:	3ff00000 	.word	0x3ff00000

00009208 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>:
                                         int* left_shift) {
    9208:	b5f0      	push	{r4, r5, r6, r7, lr}
    920a:	b083      	sub	sp, #12
    920c:	4604      	mov	r4, r0
    920e:	460d      	mov	r5, r1
    9210:	4616      	mov	r6, r2
    9212:	461f      	mov	r7, r3
  TFLITE_CHECK_LT(double_multiplier, 1.);
    9214:	2200      	movs	r2, #0
    9216:	4b0e      	ldr	r3, [pc, #56]	; (9250 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x48>)
    9218:	f7f7 fbf0 	bl	9fc <__aeabi_dcmplt>
    921c:	b190      	cbz	r0, 9244 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x3c>
  TFLITE_CHECK_GT(double_multiplier, 0.);
    921e:	2200      	movs	r2, #0
    9220:	2300      	movs	r3, #0
    9222:	4620      	mov	r0, r4
    9224:	4629      	mov	r1, r5
    9226:	f7f7 fc07 	bl	a38 <__aeabi_dcmpgt>
    922a:	b168      	cbz	r0, 9248 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x40>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
    922c:	ab01      	add	r3, sp, #4
    922e:	4632      	mov	r2, r6
    9230:	4620      	mov	r0, r4
    9232:	4629      	mov	r1, r5
    9234:	f7ff ff80 	bl	9138 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_LE(shift, 0);
    9238:	9b01      	ldr	r3, [sp, #4]
    923a:	2b00      	cmp	r3, #0
    923c:	dc06      	bgt.n	924c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x44>
  *left_shift = shift;
    923e:	603b      	str	r3, [r7, #0]
}
    9240:	b003      	add	sp, #12
    9242:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TFLITE_CHECK_LT(double_multiplier, 1.);
    9244:	f00f fb31 	bl	188aa <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
    9248:	f00f fb2f 	bl	188aa <abort>
  TFLITE_CHECK_LE(shift, 0);
    924c:	f00f fb2d 	bl	188aa <abort>
    9250:	3ff00000 	.word	0x3ff00000

00009254 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>:
  return kTfLiteOk;
}

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
    9254:	b5f0      	push	{r4, r5, r6, r7, lr}
    9256:	b087      	sub	sp, #28
    9258:	4605      	mov	r5, r0
    925a:	460c      	mov	r4, r1
    925c:	9203      	str	r2, [sp, #12]
    925e:	9302      	str	r3, [sp, #8]
    9260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const auto scale = output->params.scale;
    9262:	68de      	ldr	r6, [r3, #12]
  const auto zero_point = output->params.zero_point;
    9264:	691f      	ldr	r7, [r3, #16]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
    9266:	2901      	cmp	r1, #1
    9268:	d00e      	beq.n	9288 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x34>
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
    926a:	2903      	cmp	r1, #3
    926c:	d042      	beq.n	92f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xa0>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else if (activation == kTfLiteActReluN1To1) {
    926e:	2902      	cmp	r1, #2
    9270:	f000 80a7 	beq.w	93c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16e>
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else {
    *act_min = qmin;
    9274:	9b03      	ldr	r3, [sp, #12]
    9276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9278:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    927a:	9b02      	ldr	r3, [sp, #8]
    927c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    927e:	6013      	str	r3, [r2, #0]
  }
  return kTfLiteOk;
    9280:	2400      	movs	r4, #0
}
    9282:	4620      	mov	r0, r4
    9284:	b007      	add	sp, #28
    9286:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const float tmp = TfLiteRound(f / scale);
    9288:	4631      	mov	r1, r6
    928a:	2000      	movs	r0, #0
    928c:	f7f7 fe18 	bl	ec0 <__aeabi_fdiv>
    9290:	f7f7 f8ea 	bl	468 <__aeabi_f2d>
    9294:	f009 f916 	bl	124c4 <round>
    9298:	f7f7 fc00 	bl	a9c <__aeabi_d2f>
    929c:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    929e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    92a2:	f7f7 ff0b 	bl	10bc <__aeabi_fcmpge>
    92a6:	b160      	cbz	r0, 92c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
    92a8:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    92ac:	4630      	mov	r0, r6
    92ae:	f7f7 fefb 	bl	10a8 <__aeabi_fcmple>
    92b2:	b130      	cbz	r0, 92c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
  q = zero_point + static_cast<int32_t>(tmp);
    92b4:	4630      	mov	r0, r6
    92b6:	f7f7 ff15 	bl	10e4 <__aeabi_f2iz>
    92ba:	4407      	add	r7, r0
    92bc:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    92be:	2400      	movs	r4, #0
    92c0:	e008      	b.n	92d4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x80>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    92c2:	696e      	ldr	r6, [r5, #20]
    92c4:	4b73      	ldr	r3, [pc, #460]	; (9494 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    92c6:	9300      	str	r3, [sp, #0]
    92c8:	f240 1359 	movw	r3, #345	; 0x159
    92cc:	4a72      	ldr	r2, [pc, #456]	; (9498 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    92ce:	4973      	ldr	r1, [pc, #460]	; (949c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    92d0:	4628      	mov	r0, r5
    92d2:	47b0      	blx	r6
    TF_LITE_ENSURE_OK(context,
    92d4:	2c00      	cmp	r4, #0
    92d6:	d1d4      	bne.n	9282 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    92d8:	9a05      	ldr	r2, [sp, #20]
    92da:	9b03      	ldr	r3, [sp, #12]
    92dc:	429a      	cmp	r2, r3
    92de:	dc07      	bgt.n	92f0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x9c>
	return __b;
      return __a;
    92e0:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    92e2:	681b      	ldr	r3, [r3, #0]
    92e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    92e6:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    92e8:	9b02      	ldr	r3, [sp, #8]
    92ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    92ec:	6013      	str	r3, [r2, #0]
    92ee:	e7c8      	b.n	9282 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    92f0:	ab05      	add	r3, sp, #20
    92f2:	e7f6      	b.n	92e2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x8e>
  const float tmp = TfLiteRound(f / scale);
    92f4:	4631      	mov	r1, r6
    92f6:	2000      	movs	r0, #0
    92f8:	f7f7 fde2 	bl	ec0 <__aeabi_fdiv>
    92fc:	f7f7 f8b4 	bl	468 <__aeabi_f2d>
    9300:	f009 f8e0 	bl	124c4 <round>
    9304:	f7f7 fbca 	bl	a9c <__aeabi_d2f>
    9308:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    930a:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    930e:	f7f7 fed5 	bl	10bc <__aeabi_fcmpge>
    9312:	b160      	cbz	r0, 932e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
    9314:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    9318:	4620      	mov	r0, r4
    931a:	f7f7 fec5 	bl	10a8 <__aeabi_fcmple>
    931e:	b130      	cbz	r0, 932e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
  q = zero_point + static_cast<int32_t>(tmp);
    9320:	4620      	mov	r0, r4
    9322:	f7f7 fedf 	bl	10e4 <__aeabi_f2iz>
    9326:	4438      	add	r0, r7
    9328:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    932a:	2400      	movs	r4, #0
    932c:	e009      	b.n	9342 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xee>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    932e:	696c      	ldr	r4, [r5, #20]
    9330:	4b58      	ldr	r3, [pc, #352]	; (9494 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9332:	9300      	str	r3, [sp, #0]
    9334:	f240 1359 	movw	r3, #345	; 0x159
    9338:	4a57      	ldr	r2, [pc, #348]	; (9498 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    933a:	4958      	ldr	r1, [pc, #352]	; (949c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    933c:	4628      	mov	r0, r5
    933e:	47a0      	blx	r4
    9340:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9342:	2c00      	cmp	r4, #0
    9344:	d19d      	bne.n	9282 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    9346:	9a03      	ldr	r2, [sp, #12]
    9348:	9b05      	ldr	r3, [sp, #20]
    934a:	429a      	cmp	r2, r3
    934c:	db1f      	blt.n	938e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13a>
      return __a;
    934e:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9350:	681b      	ldr	r3, [r3, #0]
    9352:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9354:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    9356:	4631      	mov	r1, r6
    9358:	4851      	ldr	r0, [pc, #324]	; (94a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x24c>)
    935a:	f7f7 fdb1 	bl	ec0 <__aeabi_fdiv>
    935e:	f7f7 f883 	bl	468 <__aeabi_f2d>
    9362:	f009 f8af 	bl	124c4 <round>
    9366:	f7f7 fb99 	bl	a9c <__aeabi_d2f>
    936a:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    936c:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9370:	f7f7 fea4 	bl	10bc <__aeabi_fcmpge>
    9374:	b168      	cbz	r0, 9392 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
    9376:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    937a:	4630      	mov	r0, r6
    937c:	f7f7 fe94 	bl	10a8 <__aeabi_fcmple>
    9380:	b138      	cbz	r0, 9392 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
  q = zero_point + static_cast<int32_t>(tmp);
    9382:	4630      	mov	r0, r6
    9384:	f7f7 feae 	bl	10e4 <__aeabi_f2iz>
    9388:	4407      	add	r7, r0
    938a:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    938c:	e00b      	b.n	93a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x152>
	return __b;
    938e:	ab05      	add	r3, sp, #20
    9390:	e7de      	b.n	9350 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xfc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9392:	696c      	ldr	r4, [r5, #20]
    9394:	4b3f      	ldr	r3, [pc, #252]	; (9494 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9396:	9300      	str	r3, [sp, #0]
    9398:	f240 1359 	movw	r3, #345	; 0x159
    939c:	4a3e      	ldr	r2, [pc, #248]	; (9498 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    939e:	493f      	ldr	r1, [pc, #252]	; (949c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    93a0:	4628      	mov	r0, r5
    93a2:	47a0      	blx	r4
    93a4:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    93a6:	2c00      	cmp	r4, #0
    93a8:	f47f af6b 	bne.w	9282 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    93ac:	9a05      	ldr	r2, [sp, #20]
    93ae:	9b02      	ldr	r3, [sp, #8]
    93b0:	429a      	cmp	r2, r3
    93b2:	db04      	blt.n	93be <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16a>
      return __a;
    93b4:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    93b6:	681b      	ldr	r3, [r3, #0]
    93b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    93ba:	6013      	str	r3, [r2, #0]
    93bc:	e761      	b.n	9282 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    93be:	ab05      	add	r3, sp, #20
    93c0:	e7f9      	b.n	93b6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x162>
  const float tmp = TfLiteRound(f / scale);
    93c2:	4631      	mov	r1, r6
    93c4:	4837      	ldr	r0, [pc, #220]	; (94a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x250>)
    93c6:	f7f7 fd7b 	bl	ec0 <__aeabi_fdiv>
    93ca:	f7f7 f84d 	bl	468 <__aeabi_f2d>
    93ce:	f009 f879 	bl	124c4 <round>
    93d2:	f7f7 fb63 	bl	a9c <__aeabi_d2f>
    93d6:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    93d8:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    93dc:	f7f7 fe6e 	bl	10bc <__aeabi_fcmpge>
    93e0:	b160      	cbz	r0, 93fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
    93e2:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    93e6:	4620      	mov	r0, r4
    93e8:	f7f7 fe5e 	bl	10a8 <__aeabi_fcmple>
    93ec:	b130      	cbz	r0, 93fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
  q = zero_point + static_cast<int32_t>(tmp);
    93ee:	4620      	mov	r0, r4
    93f0:	f7f7 fe78 	bl	10e4 <__aeabi_f2iz>
    93f4:	4438      	add	r0, r7
    93f6:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    93f8:	2400      	movs	r4, #0
    93fa:	e009      	b.n	9410 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1bc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    93fc:	696c      	ldr	r4, [r5, #20]
    93fe:	4b25      	ldr	r3, [pc, #148]	; (9494 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9400:	9300      	str	r3, [sp, #0]
    9402:	f240 1359 	movw	r3, #345	; 0x159
    9406:	4a24      	ldr	r2, [pc, #144]	; (9498 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9408:	4924      	ldr	r1, [pc, #144]	; (949c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    940a:	4628      	mov	r0, r5
    940c:	47a0      	blx	r4
    940e:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9410:	2c00      	cmp	r4, #0
    9412:	f47f af36 	bne.w	9282 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    9416:	9a03      	ldr	r2, [sp, #12]
    9418:	9b05      	ldr	r3, [sp, #20]
    941a:	429a      	cmp	r2, r3
    941c:	db20      	blt.n	9460 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x20c>
      return __a;
    941e:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9420:	681b      	ldr	r3, [r3, #0]
    9422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9424:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    9426:	4631      	mov	r1, r6
    9428:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    942c:	f7f7 fd48 	bl	ec0 <__aeabi_fdiv>
    9430:	f7f7 f81a 	bl	468 <__aeabi_f2d>
    9434:	f009 f846 	bl	124c4 <round>
    9438:	f7f7 fb30 	bl	a9c <__aeabi_d2f>
    943c:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    943e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9442:	f7f7 fe3b 	bl	10bc <__aeabi_fcmpge>
    9446:	b168      	cbz	r0, 9464 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
    9448:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    944c:	4630      	mov	r0, r6
    944e:	f7f7 fe2b 	bl	10a8 <__aeabi_fcmple>
    9452:	b138      	cbz	r0, 9464 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
  q = zero_point + static_cast<int32_t>(tmp);
    9454:	4630      	mov	r0, r6
    9456:	f7f7 fe45 	bl	10e4 <__aeabi_f2iz>
    945a:	4407      	add	r7, r0
    945c:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    945e:	e00b      	b.n	9478 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x224>
	return __b;
    9460:	ab05      	add	r3, sp, #20
    9462:	e7dd      	b.n	9420 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1cc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9464:	696c      	ldr	r4, [r5, #20]
    9466:	4b0b      	ldr	r3, [pc, #44]	; (9494 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9468:	9300      	str	r3, [sp, #0]
    946a:	f240 1359 	movw	r3, #345	; 0x159
    946e:	4a0a      	ldr	r2, [pc, #40]	; (9498 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9470:	490a      	ldr	r1, [pc, #40]	; (949c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9472:	4628      	mov	r0, r5
    9474:	47a0      	blx	r4
    9476:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9478:	2c00      	cmp	r4, #0
    947a:	f47f af02 	bne.w	9282 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    947e:	9a05      	ldr	r2, [sp, #20]
    9480:	9b02      	ldr	r3, [sp, #8]
    9482:	429a      	cmp	r2, r3
    9484:	db04      	blt.n	9490 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x23c>
      return __a;
    9486:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    9488:	681b      	ldr	r3, [r3, #0]
    948a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    948c:	6013      	str	r3, [r2, #0]
    948e:	e6f8      	b.n	9282 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    9490:	ab05      	add	r3, sp, #20
    9492:	e7f9      	b.n	9488 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x234>
    9494:	00033ef8 	.word	0x00033ef8
    9498:	00033eac 	.word	0x00033eac
    949c:	00033ca8 	.word	0x00033ca8
    94a0:	40c00000 	.word	0x40c00000
    94a4:	bf800000 	.word	0xbf800000

000094a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    94a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94ac:	b082      	sub	sp, #8
    94ae:	4680      	mov	r8, r0
    94b0:	4608      	mov	r0, r1
    94b2:	461d      	mov	r5, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    94b4:	68d1      	ldr	r1, [r2, #12]
    94b6:	68c0      	ldr	r0, [r0, #12]
    94b8:	f7f7 fc4e 	bl	d58 <__aeabi_fmul>
    94bc:	4604      	mov	r4, r0
  const double input_product_scale =
    94be:	f7f6 ffd3 	bl	468 <__aeabi_f2d>
    94c2:	4606      	mov	r6, r0
    94c4:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    94c6:	2100      	movs	r1, #0
    94c8:	4620      	mov	r0, r4
    94ca:	f7f7 fdf7 	bl	10bc <__aeabi_fcmpge>
    94ce:	b178      	cbz	r0, 94f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    94d0:	68e8      	ldr	r0, [r5, #12]
    94d2:	f7f6 ffc9 	bl	468 <__aeabi_f2d>
    94d6:	4602      	mov	r2, r0
    94d8:	460b      	mov	r3, r1
    94da:	4630      	mov	r0, r6
    94dc:	4639      	mov	r1, r7
    94de:	f7f7 f945 	bl	76c <__aeabi_ddiv>
    94e2:	9b08      	ldr	r3, [sp, #32]
    94e4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    94e8:	2000      	movs	r0, #0
}
    94ea:	b002      	add	sp, #8
    94ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    94f0:	f8d8 4014 	ldr.w	r4, [r8, #20]
    94f4:	4b04      	ldr	r3, [pc, #16]	; (9508 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    94f6:	9300      	str	r3, [sp, #0]
    94f8:	f240 134b 	movw	r3, #331	; 0x14b
    94fc:	4a03      	ldr	r2, [pc, #12]	; (950c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    94fe:	4904      	ldr	r1, [pc, #16]	; (9510 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    9500:	4640      	mov	r0, r8
    9502:	47a0      	blx	r4
    9504:	2001      	movs	r0, #1
    9506:	e7f0      	b.n	94ea <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    9508:	00033f20 	.word	0x00033f20
    950c:	00033eac 	.word	0x00033eac
    9510:	00033ca8 	.word	0x00033ca8

00009514 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    9514:	b570      	push	{r4, r5, r6, lr}
    9516:	b084      	sub	sp, #16
    9518:	4614      	mov	r4, r2
    951a:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    951c:	7813      	ldrb	r3, [r2, #0]
    951e:	2b03      	cmp	r3, #3
    9520:	d00d      	beq.n	953e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    9522:	2b09      	cmp	r3, #9
    9524:	d00e      	beq.n	9544 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    9526:	2b07      	cmp	r3, #7
    9528:	d017      	beq.n	955a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    952a:	6944      	ldr	r4, [r0, #20]
    952c:	4b0d      	ldr	r3, [pc, #52]	; (9564 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>)
    952e:	9300      	str	r3, [sp, #0]
    9530:	f240 1391 	movw	r3, #401	; 0x191
    9534:	4a0c      	ldr	r2, [pc, #48]	; (9568 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x54>)
    9536:	490d      	ldr	r1, [pc, #52]	; (956c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>)
    9538:	47a0      	blx	r4
    953a:	2001      	movs	r0, #1
    953c:	e00b      	b.n	9556 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x42>
    qmax = std::numeric_limits<uint8_t>::max();
    953e:	23ff      	movs	r3, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    9540:	2200      	movs	r2, #0
    9542:	e002      	b.n	954a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    qmax = std::numeric_limits<int8_t>::max();
    9544:	237f      	movs	r3, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    9546:	f06f 027f 	mvn.w	r2, #127	; 0x7f
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
    954a:	9e08      	ldr	r6, [sp, #32]
    954c:	9602      	str	r6, [sp, #8]
    954e:	9501      	str	r5, [sp, #4]
    9550:	9400      	str	r4, [sp, #0]
    9552:	f7ff fe7f 	bl	9254 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>
                                               output, act_min, act_max);
}
    9556:	b004      	add	sp, #16
    9558:	bd70      	pop	{r4, r5, r6, pc}
    qmax = std::numeric_limits<int16_t>::max();
    955a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    955e:	4a04      	ldr	r2, [pc, #16]	; (9570 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>)
    9560:	e7f3      	b.n	954a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    9562:	bf00      	nop
    9564:	00033f60 	.word	0x00033f60
    9568:	00033eac 	.word	0x00033eac
    956c:	00033ca8 	.word	0x00033ca8
    9570:	ffff8000 	.word	0xffff8000

00009574 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
    9574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9578:	b08d      	sub	sp, #52	; 0x34
    957a:	4604      	mov	r4, r0
    957c:	9304      	str	r3, [sp, #16]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    957e:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
    9582:	2e01      	cmp	r6, #1
    9584:	d010      	beq.n	95a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    9586:	6947      	ldr	r7, [r0, #20]
    9588:	2501      	movs	r5, #1
    958a:	9503      	str	r5, [sp, #12]
    958c:	9602      	str	r6, [sp, #8]
    958e:	4b7d      	ldr	r3, [pc, #500]	; (9784 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    9590:	9301      	str	r3, [sp, #4]
    9592:	4b7d      	ldr	r3, [pc, #500]	; (9788 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
    9594:	9300      	str	r3, [sp, #0]
    9596:	23da      	movs	r3, #218	; 0xda
    9598:	4a7c      	ldr	r2, [pc, #496]	; (978c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    959a:	497d      	ldr	r1, [pc, #500]	; (9790 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    959c:	47b8      	blx	r7
    959e:	462e      	mov	r6, r5
}
    95a0:	4630      	mov	r0, r6
    95a2:	b00d      	add	sp, #52	; 0x34
    95a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95a8:	460d      	mov	r5, r1
    95aa:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    95ac:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
    95b0:	f1b8 0f01 	cmp.w	r8, #1
    95b4:	d00d      	beq.n	95d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5e>
    95b6:	6945      	ldr	r5, [r0, #20]
    95b8:	2301      	movs	r3, #1
    95ba:	9303      	str	r3, [sp, #12]
    95bc:	f8cd 8008 	str.w	r8, [sp, #8]
    95c0:	4b70      	ldr	r3, [pc, #448]	; (9784 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    95c2:	9301      	str	r3, [sp, #4]
    95c4:	4b73      	ldr	r3, [pc, #460]	; (9794 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
    95c6:	9300      	str	r3, [sp, #0]
    95c8:	23dc      	movs	r3, #220	; 0xdc
    95ca:	4a70      	ldr	r2, [pc, #448]	; (978c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    95cc:	4970      	ldr	r1, [pc, #448]	; (9790 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    95ce:	47a8      	blx	r5
    95d0:	e7e6      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const auto* affine_quantization =
    95d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    95d4:	b1b3      	cbz	r3, 9604 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x90>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    95d6:	f8d3 b000 	ldr.w	fp, [r3]
    95da:	f1bb 0f00 	cmp.w	fp, #0
    95de:	d01a      	beq.n	9616 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa2>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    95e0:	f8db 7000 	ldr.w	r7, [fp]
  if (is_per_channel) {
    95e4:	2f01      	cmp	r7, #1
    95e6:	dd5a      	ble.n	969e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    TF_LITE_ENSURE(context,
    95e8:	780a      	ldrb	r2, [r1, #0]
    95ea:	2a09      	cmp	r2, #9
    95ec:	d01c      	beq.n	9628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    95ee:	2a07      	cmp	r2, #7
    95f0:	d01a      	beq.n	9628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    95f2:	6945      	ldr	r5, [r0, #20]
    95f4:	4b68      	ldr	r3, [pc, #416]	; (9798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    95f6:	9300      	str	r3, [sp, #0]
    95f8:	23ec      	movs	r3, #236	; 0xec
    95fa:	4a64      	ldr	r2, [pc, #400]	; (978c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    95fc:	4967      	ldr	r1, [pc, #412]	; (979c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    95fe:	47a8      	blx	r5
    9600:	4646      	mov	r6, r8
    9602:	e7cd      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization);
    9604:	6945      	ldr	r5, [r0, #20]
    9606:	4b66      	ldr	r3, [pc, #408]	; (97a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    9608:	9300      	str	r3, [sp, #0]
    960a:	23e7      	movs	r3, #231	; 0xe7
    960c:	4a5f      	ldr	r2, [pc, #380]	; (978c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    960e:	4963      	ldr	r1, [pc, #396]	; (979c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9610:	47a8      	blx	r5
    9612:	4646      	mov	r6, r8
    9614:	e7c4      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    9616:	6945      	ldr	r5, [r0, #20]
    9618:	4b62      	ldr	r3, [pc, #392]	; (97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    961a:	9300      	str	r3, [sp, #0]
    961c:	23e8      	movs	r3, #232	; 0xe8
    961e:	4a5b      	ldr	r2, [pc, #364]	; (978c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9620:	495e      	ldr	r1, [pc, #376]	; (979c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9622:	47a8      	blx	r5
    9624:	4646      	mov	r6, r8
    9626:	e7bb      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    9628:	f89a 2000 	ldrb.w	r2, [sl]
    962c:	2a09      	cmp	r2, #9
    962e:	d00e      	beq.n	964e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xda>
    9630:	6965      	ldr	r5, [r4, #20]
    9632:	2309      	movs	r3, #9
    9634:	9303      	str	r3, [sp, #12]
    9636:	9202      	str	r2, [sp, #8]
    9638:	4b5b      	ldr	r3, [pc, #364]	; (97a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x234>)
    963a:	9301      	str	r3, [sp, #4]
    963c:	4b5b      	ldr	r3, [pc, #364]	; (97ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x238>)
    963e:	9300      	str	r3, [sp, #0]
    9640:	23ee      	movs	r3, #238	; 0xee
    9642:	4a52      	ldr	r2, [pc, #328]	; (978c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9644:	4952      	ldr	r1, [pc, #328]	; (9790 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    9646:	4620      	mov	r0, r4
    9648:	47a8      	blx	r5
    964a:	4646      	mov	r6, r8
    964c:	e7a8      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    964e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9650:	4297      	cmp	r7, r2
    9652:	d00d      	beq.n	9670 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xfc>
    9654:	6965      	ldr	r5, [r4, #20]
    9656:	9203      	str	r2, [sp, #12]
    9658:	9702      	str	r7, [sp, #8]
    965a:	4b55      	ldr	r3, [pc, #340]	; (97b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    965c:	9301      	str	r3, [sp, #4]
    965e:	4b55      	ldr	r3, [pc, #340]	; (97b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x240>)
    9660:	9300      	str	r3, [sp, #0]
    9662:	23ef      	movs	r3, #239	; 0xef
    9664:	4a49      	ldr	r2, [pc, #292]	; (978c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9666:	494a      	ldr	r1, [pc, #296]	; (9790 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    9668:	4620      	mov	r0, r4
    966a:	47a8      	blx	r5
    966c:	4646      	mov	r6, r8
    966e:	e797      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(
    9670:	f8da 2008 	ldr.w	r2, [sl, #8]
    9674:	689b      	ldr	r3, [r3, #8]
    9676:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    967a:	6853      	ldr	r3, [r2, #4]
    967c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    967e:	4293      	cmp	r3, r2
    9680:	d00d      	beq.n	969e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    9682:	6965      	ldr	r5, [r4, #20]
    9684:	9303      	str	r3, [sp, #12]
    9686:	9202      	str	r2, [sp, #8]
    9688:	4b4b      	ldr	r3, [pc, #300]	; (97b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x244>)
    968a:	9301      	str	r3, [sp, #4]
    968c:	4b48      	ldr	r3, [pc, #288]	; (97b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    968e:	9300      	str	r3, [sp, #0]
    9690:	23f0      	movs	r3, #240	; 0xf0
    9692:	4a3e      	ldr	r2, [pc, #248]	; (978c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9694:	493e      	ldr	r1, [pc, #248]	; (9790 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    9696:	4620      	mov	r0, r4
    9698:	47a8      	blx	r5
    969a:	4646      	mov	r6, r8
    969c:	e780      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const float input_scale = input->params.scale;
    969e:	f8d5 900c 	ldr.w	r9, [r5, #12]
  const float output_scale = output->params.scale;
    96a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    96a4:	f8d3 800c 	ldr.w	r8, [r3, #12]
  const float* filter_scales = affine_quantization->scale->data;
    96a8:	f10b 0304 	add.w	r3, fp, #4
  for (int i = 0; i < num_channels; ++i) {
    96ac:	2600      	movs	r6, #0
    96ae:	9405      	str	r4, [sp, #20]
    96b0:	9506      	str	r5, [sp, #24]
    96b2:	f8cd a01c 	str.w	sl, [sp, #28]
    96b6:	469a      	mov	sl, r3
    96b8:	e024      	b.n	9704 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x190>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    96ba:	f8db 0004 	ldr.w	r0, [fp, #4]
    const double filter_scale = static_cast<double>(scale);
    96be:	f7f6 fed3 	bl	468 <__aeabi_f2d>
    96c2:	4604      	mov	r4, r0
    96c4:	460d      	mov	r5, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    96c6:	4648      	mov	r0, r9
    96c8:	f7f6 fece 	bl	468 <__aeabi_f2d>
    96cc:	4622      	mov	r2, r4
    96ce:	462b      	mov	r3, r5
    96d0:	f7f6 ff22 	bl	518 <__aeabi_dmul>
    96d4:	4604      	mov	r4, r0
    96d6:	460d      	mov	r5, r1
                                          static_cast<double>(output_scale);
    96d8:	4640      	mov	r0, r8
    96da:	f7f6 fec5 	bl	468 <__aeabi_f2d>
    96de:	4602      	mov	r2, r0
    96e0:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    96e2:	4620      	mov	r0, r4
    96e4:	4629      	mov	r1, r5
    96e6:	f7f7 f841 	bl	76c <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    96ea:	ab0a      	add	r3, sp, #40	; 0x28
    96ec:	aa09      	add	r2, sp, #36	; 0x24
    96ee:	f7ff fd23 	bl	9138 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    96f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    96f6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
    96fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    96fe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    9702:	3601      	adds	r6, #1
    9704:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9706:	429e      	cmp	r6, r3
    9708:	da04      	bge.n	9714 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1a0>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    970a:	2f01      	cmp	r7, #1
    970c:	ddd5      	ble.n	96ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x146>
    970e:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
    9712:	e7d4      	b.n	96be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x14a>
    9714:	9c05      	ldr	r4, [sp, #20]
    9716:	9d06      	ldr	r5, [sp, #24]
    9718:	f8dd a01c 	ldr.w	sl, [sp, #28]
  if (input->type == kTfLiteUInt8) {
    971c:	782b      	ldrb	r3, [r5, #0]
    971e:	2b03      	cmp	r3, #3
    9720:	d008      	beq.n	9734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1c0>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    9722:	782b      	ldrb	r3, [r5, #0]
    9724:	2b09      	cmp	r3, #9
    9726:	d022      	beq.n	976e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    9728:	2b03      	cmp	r3, #3
    972a:	d020      	beq.n	976e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    972c:	2b07      	cmp	r3, #7
    972e:	d01e      	beq.n	976e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
  return kTfLiteOk;
    9730:	2600      	movs	r6, #0
    9732:	e735      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    double real_multiplier = 0.0;
    9734:	2200      	movs	r2, #0
    9736:	2300      	movs	r3, #0
    9738:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    973c:	ab0a      	add	r3, sp, #40	; 0x28
    973e:	9301      	str	r3, [sp, #4]
    9740:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9742:	9300      	str	r3, [sp, #0]
    9744:	9b04      	ldr	r3, [sp, #16]
    9746:	4652      	mov	r2, sl
    9748:	4629      	mov	r1, r5
    974a:	4620      	mov	r0, r4
    974c:	f7f7 ff18 	bl	1580 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    9750:	4606      	mov	r6, r0
    9752:	2800      	cmp	r0, #0
    9754:	f47f af24 	bne.w	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    9758:	ab09      	add	r3, sp, #36	; 0x24
    975a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    975c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9760:	f7ff fcea 	bl	9138 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    9764:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9766:	425b      	negs	r3, r3
    9768:	9a19      	ldr	r2, [sp, #100]	; 0x64
    976a:	6013      	str	r3, [r2, #0]
    976c:	e7d9      	b.n	9722 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ae>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    976e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9770:	9300      	str	r3, [sp, #0]
    9772:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9774:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9776:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9778:	7809      	ldrb	r1, [r1, #0]
    977a:	4620      	mov	r0, r4
    977c:	f7ff feca 	bl	9514 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    9780:	4606      	mov	r6, r0
    9782:	e70d      	b.n	95a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    9784:	00033f84 	.word	0x00033f84
    9788:	00033fa0 	.word	0x00033fa0
    978c:	00033eac 	.word	0x00033eac
    9790:	00033f68 	.word	0x00033f68
    9794:	00033fbc 	.word	0x00033fbc
    9798:	00034008 	.word	0x00034008
    979c:	00033ca8 	.word	0x00033ca8
    97a0:	00033fd8 	.word	0x00033fd8
    97a4:	00033fec 	.word	0x00033fec
    97a8:	00034044 	.word	0x00034044
    97ac:	00034050 	.word	0x00034050
    97b0:	00034060 	.word	0x00034060
    97b4:	00034070 	.word	0x00034070
    97b8:	00034094 	.word	0x00034094

000097bc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    97bc:	b508      	push	{r3, lr}
    97be:	4613      	mov	r3, r2
  switch (tensor_type) {
    97c0:	280f      	cmp	r0, #15
    97c2:	d848      	bhi.n	9856 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x9a>
    97c4:	e8df f000 	tbb	[pc, r0]
    97c8:	1f17080c 	.word	0x1f17080c
    97cc:	13332f27 	.word	0x13332f27
    97d0:	3b0f2337 	.word	0x3b0f2337
    97d4:	1b433f2b 	.word	0x1b433f2b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    97d8:	230a      	movs	r3, #10
    97da:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    97dc:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    97de:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
    97e0:	2301      	movs	r3, #1
    97e2:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    97e4:	e7fb      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
    97e6:	230b      	movs	r3, #11
    97e8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    97ea:	2000      	movs	r0, #0
    97ec:	e7f7      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
    97ee:	2307      	movs	r3, #7
    97f0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    97f2:	2000      	movs	r0, #0
    97f4:	e7f3      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
    97f6:	2302      	movs	r3, #2
    97f8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    97fa:	2000      	movs	r0, #0
    97fc:	e7ef      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
    97fe:	2310      	movs	r3, #16
    9800:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9802:	2000      	movs	r0, #0
    9804:	e7eb      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
    9806:	2303      	movs	r3, #3
    9808:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    980a:	2000      	movs	r0, #0
    980c:	e7e7      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
    980e:	2309      	movs	r3, #9
    9810:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9812:	2000      	movs	r0, #0
    9814:	e7e3      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
    9816:	2304      	movs	r3, #4
    9818:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    981a:	2000      	movs	r0, #0
    981c:	e7df      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
    981e:	230d      	movs	r3, #13
    9820:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9822:	2000      	movs	r0, #0
    9824:	e7db      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
    9826:	2305      	movs	r3, #5
    9828:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    982a:	2000      	movs	r0, #0
    982c:	e7d7      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
    982e:	2306      	movs	r3, #6
    9830:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9832:	2000      	movs	r0, #0
    9834:	e7d3      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
    9836:	2308      	movs	r3, #8
    9838:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    983a:	2000      	movs	r0, #0
    983c:	e7cf      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
    983e:	230c      	movs	r3, #12
    9840:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9842:	2000      	movs	r0, #0
    9844:	e7cb      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
    9846:	230e      	movs	r3, #14
    9848:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    984a:	2000      	movs	r0, #0
    984c:	e7c7      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
    984e:	230f      	movs	r3, #15
    9850:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9852:	2000      	movs	r0, #0
    9854:	e7c3      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
    9856:	2200      	movs	r2, #0
    9858:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    985a:	4602      	mov	r2, r0
    985c:	4902      	ldr	r1, [pc, #8]	; (9868 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xac>)
    985e:	4618      	mov	r0, r3
    9860:	f00c fa2d 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9864:	2001      	movs	r0, #1
    9866:	e7ba      	b.n	97de <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
    9868:	000340d4 	.word	0x000340d4

0000986c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>:
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
    986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9870:	461c      	mov	r4, r3
  if (!flat_vector) {
    9872:	b1d1      	cbz	r1, 98aa <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x3e>
    9874:	4680      	mov	r8, r0
    9876:	4617      	mov	r7, r2
    9878:	460d      	mov	r5, r1
  uoffset_t size() const { return EndianScalar(length_); }
    987a:	6808      	ldr	r0, [r1, #0]
    987c:	f00a fa59 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    9880:	4606      	mov	r6, r0
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
    9882:	ebb0 0f98 	cmp.w	r0, r8, lsr #2
    9886:	d817      	bhi.n	98b8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x4c>
      for (size_t i = 0; i < num_dimensions; ++i) {
    9888:	2400      	movs	r4, #0
    988a:	42b4      	cmp	r4, r6
    988c:	d222      	bcs.n	98d4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x68>
    988e:	6828      	ldr	r0, [r5, #0]
    9890:	f00a fa4f 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    9894:	4284      	cmp	r4, r0
    9896:	d216      	bcs.n	98c6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x5a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9898:	1d2b      	adds	r3, r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    989a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    989e:	f00b fc93 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
        buffer[i] = flat_vector->Get(i);
    98a2:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
    98a6:	3401      	adds	r4, #1
    98a8:	e7ef      	b.n	988a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x1e>
    TF_LITE_REPORT_ERROR(error_reporter,
    98aa:	9a06      	ldr	r2, [sp, #24]
    98ac:	490b      	ldr	r1, [pc, #44]	; (98dc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x70>)
    98ae:	4618      	mov	r0, r3
    98b0:	f00c fa05 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    98b4:	2001      	movs	r0, #1
    98b6:	e00e      	b.n	98d6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
      TF_LITE_REPORT_ERROR(
    98b8:	9a06      	ldr	r2, [sp, #24]
    98ba:	4909      	ldr	r1, [pc, #36]	; (98e0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x74>)
    98bc:	4620      	mov	r0, r4
    98be:	f00c f9fe 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    98c2:	2001      	movs	r0, #1
    98c4:	e007      	b.n	98d6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
    FLATBUFFERS_ASSERT(i < size());
    98c6:	4b07      	ldr	r3, [pc, #28]	; (98e4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x78>)
    98c8:	4a07      	ldr	r2, [pc, #28]	; (98e8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x7c>)
    98ca:	f44f 7183 	mov.w	r1, #262	; 0x106
    98ce:	4807      	ldr	r0, [pc, #28]	; (98ec <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x80>)
    98d0:	f008 ffdc 	bl	1288c <__assert_func>
  return kTfLiteOk;
    98d4:	2000      	movs	r0, #0
}
    98d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98da:	bf00      	nop
    98dc:	000340f8 	.word	0x000340f8
    98e0:	00034128 	.word	0x00034128
    98e4:	000323f8 	.word	0x000323f8
    98e8:	00032404 	.word	0x00032404
    98ec:	000324c4 	.word	0x000324c4

000098f0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    98f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98f4:	b084      	sub	sp, #16
    98f6:	4604      	mov	r4, r0
    98f8:	4688      	mov	r8, r1
    98fa:	4615      	mov	r5, r2
    98fc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    98fe:	f00c f9d0 	bl	15ca2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9902:	682b      	ldr	r3, [r5, #0]
    9904:	681b      	ldr	r3, [r3, #0]
    9906:	2204      	movs	r2, #4
    9908:	2124      	movs	r1, #36	; 0x24
    990a:	4628      	mov	r0, r5
    990c:	4798      	blx	r3
    return new (allocated_memory) T();
    990e:	4606      	mov	r6, r0
    9910:	b118      	cbz	r0, 991a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9912:	2224      	movs	r2, #36	; 0x24
    9914:	2100      	movs	r1, #0
    9916:	f00e ffef 	bl	188f8 <memset>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    991a:	9502      	str	r5, [sp, #8]
    991c:	9603      	str	r6, [sp, #12]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    991e:	b336      	cbz	r6, 996e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9920:	4620      	mov	r0, r4
    9922:	f00b fc52 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9926:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9928:	4628      	mov	r0, r5
    992a:	f00b fc54 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    992e:	280a      	cmp	r0, #10
    9930:	d92a      	bls.n	9988 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9932:	f105 000a 	add.w	r0, r5, #10
    9936:	f00b fc4e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    993a:	b338      	cbz	r0, 998c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    993c:	4420      	add	r0, r4
    993e:	f00b fd13 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    9942:	2811      	cmp	r0, #17
    9944:	d128      	bne.n	9998 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9946:	4620      	mov	r0, r4
    9948:	f00b fc3f 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    994c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    994e:	4628      	mov	r0, r5
    9950:	f00b fc41 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9954:	280c      	cmp	r0, #12
    9956:	d91b      	bls.n	9990 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9958:	f105 000c 	add.w	r0, r5, #12
    995c:	f00b fc3b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9960:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9962:	b1b8      	cbz	r0, 9994 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9964:	4620      	mov	r0, r4
    9966:	f00b fc2a 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    996a:	4404      	add	r4, r0
    996c:	e015      	b.n	999a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    996e:	4b26      	ldr	r3, [pc, #152]	; (9a08 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
    9970:	9301      	str	r3, [sp, #4]
    9972:	f240 63c3 	movw	r3, #1731	; 0x6c3
    9976:	9300      	str	r3, [sp, #0]
    9978:	4b24      	ldr	r3, [pc, #144]	; (9a0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    997a:	4a25      	ldr	r2, [pc, #148]	; (9a10 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
    997c:	4641      	mov	r1, r8
    997e:	4640      	mov	r0, r8
    9980:	f00c f9ac 	bl	15cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9984:	2501      	movs	r5, #1
    9986:	e030      	b.n	99ea <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9988:	2000      	movs	r0, #0
    998a:	e7d6      	b.n	993a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    998c:	2000      	movs	r0, #0
    998e:	e7d8      	b.n	9942 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9990:	2000      	movs	r0, #0
    9992:	e7e5      	b.n	9960 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9994:	2400      	movs	r4, #0
    9996:	e000      	b.n	999a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9998:	2400      	movs	r4, #0

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
    999a:	b314      	cbz	r4, 99e2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
    999c:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    999e:	4620      	mov	r0, r4
    99a0:	f00b fc13 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    99a4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    99a6:	4620      	mov	r0, r4
    99a8:	f00b fc15 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    99ac:	2804      	cmp	r0, #4
    99ae:	d926      	bls.n	99fe <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    99b0:	1d20      	adds	r0, r4, #4
    99b2:	f00b fc10 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    99b6:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    99b8:	b318      	cbz	r0, 9a02 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    99ba:	4628      	mov	r0, r5
    99bc:	f00b fbff 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    99c0:	182c      	adds	r4, r5, r0
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
    99c2:	b174      	cbz	r4, 99e2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
      TF_LITE_ENSURE_STATUS(
    99c4:	4b13      	ldr	r3, [pc, #76]	; (9a14 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    99c6:	9300      	str	r3, [sp, #0]
    99c8:	4643      	mov	r3, r8
    99ca:	4632      	mov	r2, r6
    99cc:	4621      	mov	r1, r4
    99ce:	2020      	movs	r0, #32
    99d0:	f7ff ff4c 	bl	986c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>
    99d4:	4605      	mov	r5, r0
    99d6:	b940      	cbnz	r0, 99ea <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
  uoffset_t size() const { return EndianScalar(length_); }
    99d8:	6820      	ldr	r0, [r4, #0]
    99da:	f00a f9aa 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    99de:	9b03      	ldr	r3, [sp, #12]
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
    99e0:	6218      	str	r0, [r3, #32]
    99e2:	9b03      	ldr	r3, [sp, #12]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
    99e4:	2500      	movs	r5, #0
    99e6:	9503      	str	r5, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    99e8:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    99ea:	9903      	ldr	r1, [sp, #12]
    99ec:	b119      	cbz	r1, 99f6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    void operator()(void* data) { allocator_->Deallocate(data); }
    99ee:	9802      	ldr	r0, [sp, #8]
    99f0:	6803      	ldr	r3, [r0, #0]
    99f2:	685b      	ldr	r3, [r3, #4]
    99f4:	4798      	blx	r3
  return kTfLiteOk;
}
    99f6:	4628      	mov	r0, r5
    99f8:	b004      	add	sp, #16
    99fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    99fe:	2000      	movs	r0, #0
    9a00:	e7d9      	b.n	99b6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9a02:	2400      	movs	r4, #0
    9a04:	e7dd      	b.n	99c2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    9a06:	bf00      	nop
    9a08:	000341c4 	.word	0x000341c4
    9a0c:	0003416c 	.word	0x0003416c
    9a10:	00033ca8 	.word	0x00033ca8
    9a14:	000341d8 	.word	0x000341d8

00009a18 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
    9a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a1c:	b084      	sub	sp, #16
    9a1e:	4604      	mov	r4, r0
    9a20:	4688      	mov	r8, r1
    9a22:	4616      	mov	r6, r2
    9a24:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9a26:	f00c f93c 	bl	15ca2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9a2a:	6833      	ldr	r3, [r6, #0]
    9a2c:	681b      	ldr	r3, [r3, #0]
    9a2e:	2201      	movs	r2, #1
    9a30:	2102      	movs	r1, #2
    9a32:	4630      	mov	r0, r6
    9a34:	4798      	blx	r3
    return new (allocated_memory) T();
    9a36:	4605      	mov	r5, r0
    9a38:	b110      	cbz	r0, 9a40 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28>
    9a3a:	2300      	movs	r3, #0
    9a3c:	7003      	strb	r3, [r0, #0]
    9a3e:	7043      	strb	r3, [r0, #1]
    9a40:	9602      	str	r6, [sp, #8]
    9a42:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9a44:	b335      	cbz	r5, 9a94 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    return data_ - ReadScalar<soffset_t>(data_);
    9a46:	4620      	mov	r0, r4
    9a48:	f00b fbbf 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9a4c:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9a4e:	4630      	mov	r0, r6
    9a50:	f00b fbc1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a54:	280a      	cmp	r0, #10
    9a56:	d92a      	bls.n	9aae <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    9a58:	f106 000a 	add.w	r0, r6, #10
    9a5c:	f00b fbbb 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9a60:	b338      	cbz	r0, 9ab2 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9a>
    9a62:	4420      	add	r0, r4
    9a64:	f00b fc80 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
    9a68:	280b      	cmp	r0, #11
    9a6a:	d128      	bne.n	9abe <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    return data_ - ReadScalar<soffset_t>(data_);
    9a6c:	4620      	mov	r0, r4
    9a6e:	f00b fbac 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9a72:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9a74:	4630      	mov	r0, r6
    9a76:	f00b fbae 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a7a:	280c      	cmp	r0, #12
    9a7c:	d91b      	bls.n	9ab6 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    9a7e:	f106 000c 	add.w	r0, r6, #12
    9a82:	f00b fba8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9a86:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9a88:	b1b8      	cbz	r0, 9aba <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    9a8a:	4620      	mov	r0, r4
    9a8c:	f00b fb97 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9a90:	4404      	add	r4, r0
    9a92:	e015      	b.n	9ac0 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    9a94:	4b2a      	ldr	r3, [pc, #168]	; (9b40 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    9a96:	9301      	str	r3, [sp, #4]
    9a98:	f240 33a5 	movw	r3, #933	; 0x3a5
    9a9c:	9300      	str	r3, [sp, #0]
    9a9e:	4b29      	ldr	r3, [pc, #164]	; (9b44 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    9aa0:	4a29      	ldr	r2, [pc, #164]	; (9b48 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    9aa2:	4641      	mov	r1, r8
    9aa4:	4640      	mov	r0, r8
    9aa6:	f00c f919 	bl	15cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9aaa:	2401      	movs	r4, #1
    9aac:	e035      	b.n	9b1a <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9aae:	2000      	movs	r0, #0
    9ab0:	e7d6      	b.n	9a60 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ab2:	2000      	movs	r0, #0
    9ab4:	e7d8      	b.n	9a68 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ab6:	2000      	movs	r0, #0
    9ab8:	e7e5      	b.n	9a86 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9aba:	2400      	movs	r4, #0
    9abc:	e000      	b.n	9ac0 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    9abe:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9ac0:	b344      	cbz	r4, 9b14 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    9ac2:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9ac4:	4620      	mov	r0, r4
    9ac6:	f00b fb80 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9aca:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9acc:	4620      	mov	r0, r4
    9ace:	f00b fb82 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ad2:	2804      	cmp	r0, #4
    9ad4:	d92b      	bls.n	9b2e <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    9ad6:	1d20      	adds	r0, r4, #4
    9ad8:	f00b fb7d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9adc:	b348      	cbz	r0, 9b32 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>
    9ade:	4430      	add	r0, r6
    9ae0:	f00b fb7f 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9ae4:	b2c0      	uxtb	r0, r0
    9ae6:	f00c f8c9 	bl	15c7c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9aea:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    9aec:	4630      	mov	r0, r6
    9aee:	f00b fb6c 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9af2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9af4:	4620      	mov	r0, r4
    9af6:	f00b fb6e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9afa:	2806      	cmp	r0, #6
    9afc:	d91b      	bls.n	9b36 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11e>
    9afe:	1da0      	adds	r0, r4, #6
    9b00:	f00b fb69 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b04:	b1c8      	cbz	r0, 9b3a <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    9b06:	4430      	add	r0, r6
    9b08:	f00b fc2e 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return GetField<uint8_t>(VT_POT_SCALE_INT16, 1) != 0;
    9b0c:	3800      	subs	r0, #0
    9b0e:	bf18      	it	ne
    9b10:	2001      	movne	r0, #1
    params->pot_scale_int16 = schema_params->pot_scale_int16();
    9b12:	7068      	strb	r0, [r5, #1]
	_M_t._M_ptr() = pointer();
    9b14:	2400      	movs	r4, #0
    9b16:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9b18:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    9b1a:	9903      	ldr	r1, [sp, #12]
    9b1c:	b119      	cbz	r1, 9b26 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9b1e:	9802      	ldr	r0, [sp, #8]
    9b20:	6803      	ldr	r3, [r0, #0]
    9b22:	685b      	ldr	r3, [r3, #4]
    9b24:	4798      	blx	r3
}
    9b26:	4620      	mov	r0, r4
    9b28:	b004      	add	sp, #16
    9b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b2e:	2000      	movs	r0, #0
    9b30:	e7d4      	b.n	9adc <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b32:	2000      	movs	r0, #0
    9b34:	e7d6      	b.n	9ae4 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b36:	2000      	movs	r0, #0
    9b38:	e7e4      	b.n	9b04 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b3a:	2001      	movs	r0, #1
    9b3c:	e7e6      	b.n	9b0c <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    9b3e:	bf00      	nop
    9b40:	000341c4 	.word	0x000341c4
    9b44:	0003416c 	.word	0x0003416c
    9b48:	00033ca8 	.word	0x00033ca8

00009b4c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    9b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b50:	b084      	sub	sp, #16
    9b52:	4604      	mov	r4, r0
    9b54:	4688      	mov	r8, r1
    9b56:	4615      	mov	r5, r2
    9b58:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9b5a:	f00c f8a2 	bl	15ca2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9b5e:	682b      	ldr	r3, [r5, #0]
    9b60:	681b      	ldr	r3, [r3, #0]
    9b62:	2204      	movs	r2, #4
    9b64:	2128      	movs	r1, #40	; 0x28
    9b66:	4628      	mov	r0, r5
    9b68:	4798      	blx	r3
    return new (allocated_memory) T();
    9b6a:	4607      	mov	r7, r0
    9b6c:	b118      	cbz	r0, 9b76 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9b6e:	2228      	movs	r2, #40	; 0x28
    9b70:	2100      	movs	r1, #0
    9b72:	f00e fec1 	bl	188f8 <memset>
    9b76:	9502      	str	r5, [sp, #8]
    9b78:	9703      	str	r7, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9b7a:	b337      	cbz	r7, 9bca <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9b7c:	4620      	mov	r0, r4
    9b7e:	f00b fb24 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9b82:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9b84:	4628      	mov	r0, r5
    9b86:	f00b fb26 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b8a:	280a      	cmp	r0, #10
    9b8c:	d92a      	bls.n	9be4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9b8e:	f105 000a 	add.w	r0, r5, #10
    9b92:	f00b fb20 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b96:	b338      	cbz	r0, 9be8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9b98:	4420      	add	r0, r4
    9b9a:	f00b fbe5 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    9b9e:	2805      	cmp	r0, #5
    9ba0:	d128      	bne.n	9bf4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9ba2:	4620      	mov	r0, r4
    9ba4:	f00b fb11 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ba8:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9baa:	4628      	mov	r0, r5
    9bac:	f00b fb13 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9bb0:	280c      	cmp	r0, #12
    9bb2:	d91b      	bls.n	9bec <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9bb4:	f105 000c 	add.w	r0, r5, #12
    9bb8:	f00b fb0d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9bbc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9bbe:	b1b8      	cbz	r0, 9bf0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9bc0:	4620      	mov	r0, r4
    9bc2:	f00b fafc 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9bc6:	4404      	add	r4, r0
    9bc8:	e015      	b.n	9bf6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9bca:	4b5b      	ldr	r3, [pc, #364]	; (9d38 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>)
    9bcc:	9301      	str	r3, [sp, #4]
    9bce:	f240 6361 	movw	r3, #1633	; 0x661
    9bd2:	9300      	str	r3, [sp, #0]
    9bd4:	4b59      	ldr	r3, [pc, #356]	; (9d3c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9bd6:	4a5a      	ldr	r2, [pc, #360]	; (9d40 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9bd8:	4641      	mov	r1, r8
    9bda:	4640      	mov	r0, r8
    9bdc:	f00c f87e 	bl	15cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9be0:	2401      	movs	r4, #1
    9be2:	e086      	b.n	9cf2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9be4:	2000      	movs	r0, #0
    9be6:	e7d6      	b.n	9b96 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9be8:	2000      	movs	r0, #0
    9bea:	e7d8      	b.n	9b9e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9bec:	2000      	movs	r0, #0
    9bee:	e7e5      	b.n	9bbc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9bf0:	2400      	movs	r4, #0
    9bf2:	e000      	b.n	9bf6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9bf4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9bf6:	2c00      	cmp	r4, #0
    9bf8:	d077      	beq.n	9cea <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19e>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9bfa:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9bfc:	4620      	mov	r0, r4
    9bfe:	f00b fae4 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c02:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c04:	4620      	mov	r0, r4
    9c06:	f00b fae6 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c0a:	2804      	cmp	r0, #4
    9c0c:	d97b      	bls.n	9d06 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ba>
    9c0e:	1d20      	adds	r0, r4, #4
    9c10:	f00b fae1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c14:	2800      	cmp	r0, #0
    9c16:	d078      	beq.n	9d0a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1be>
    9c18:	4428      	add	r0, r5
    9c1a:	f00b fae2 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9c1e:	b2c0      	uxtb	r0, r0
    9c20:	f00c f836 	bl	15c90 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9c24:	7038      	strb	r0, [r7, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9c26:	9f03      	ldr	r7, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9c28:	4628      	mov	r0, r5
    9c2a:	f00b face 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c2e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c30:	4620      	mov	r0, r4
    9c32:	f00b fad0 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c36:	2806      	cmp	r0, #6
    9c38:	d969      	bls.n	9d0e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c2>
    9c3a:	1da0      	adds	r0, r4, #6
    9c3c:	f00b facb 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c40:	2800      	cmp	r0, #0
    9c42:	d066      	beq.n	9d12 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c6>
    9c44:	4428      	add	r0, r5
    9c46:	f00b fac0 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9c4a:	6078      	str	r0, [r7, #4]
    9c4c:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9c4e:	4628      	mov	r0, r5
    9c50:	f00b fabb 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c54:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c56:	4638      	mov	r0, r7
    9c58:	f00b fabd 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c5c:	2808      	cmp	r0, #8
    9c5e:	d95a      	bls.n	9d16 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ca>
    9c60:	f107 0008 	add.w	r0, r7, #8
    9c64:	f00b fab7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c68:	2800      	cmp	r0, #0
    9c6a:	d056      	beq.n	9d1a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ce>
    9c6c:	4428      	add	r0, r5
    9c6e:	f00b faac 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9c72:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9c74:	4628      	mov	r0, r5
    9c76:	f00b faa8 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c7a:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c7c:	4638      	mov	r0, r7
    9c7e:	f00b faaa 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c82:	280a      	cmp	r0, #10
    9c84:	d94b      	bls.n	9d1e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    9c86:	f107 000a 	add.w	r0, r7, #10
    9c8a:	f00b faa4 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c8e:	2800      	cmp	r0, #0
    9c90:	d047      	beq.n	9d22 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d6>
    9c92:	4428      	add	r0, r5
    9c94:	f00b fa99 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_width = schema_params->filter_width();
    9c98:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9c9a:	4628      	mov	r0, r5
    9c9c:	f00b fa95 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ca0:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9ca2:	4638      	mov	r0, r7
    9ca4:	f00b fa97 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ca8:	280c      	cmp	r0, #12
    9caa:	d93c      	bls.n	9d26 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    9cac:	f107 000c 	add.w	r0, r7, #12
    9cb0:	f00b fa91 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cb4:	2800      	cmp	r0, #0
    9cb6:	d038      	beq.n	9d2a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1de>
    9cb8:	4428      	add	r0, r5
    9cba:	f00b fa86 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_height = schema_params->filter_height();
    9cbe:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9cc0:	4628      	mov	r0, r5
    9cc2:	f00b fa82 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9cc6:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9cc8:	4638      	mov	r0, r7
    9cca:	f00b fa84 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cce:	280e      	cmp	r0, #14
    9cd0:	d92d      	bls.n	9d2e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e2>
    9cd2:	f107 000e 	add.w	r0, r7, #14
    9cd6:	f00b fa7e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cda:	b350      	cbz	r0, 9d32 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    9cdc:	4428      	add	r0, r5
    9cde:	f00b fa80 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9ce2:	b2c0      	uxtb	r0, r0
    9ce4:	f00b ffca 	bl	15c7c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9ce8:	7520      	strb	r0, [r4, #20]
    9cea:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9cec:	2400      	movs	r4, #0
    9cee:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9cf0:	6033      	str	r3, [r6, #0]
	if (__ptr != nullptr)
    9cf2:	9903      	ldr	r1, [sp, #12]
    9cf4:	b119      	cbz	r1, 9cfe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b2>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9cf6:	9802      	ldr	r0, [sp, #8]
    9cf8:	6803      	ldr	r3, [r0, #0]
    9cfa:	685b      	ldr	r3, [r3, #4]
    9cfc:	4798      	blx	r3
}
    9cfe:	4620      	mov	r0, r4
    9d00:	b004      	add	sp, #16
    9d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d06:	2000      	movs	r0, #0
    9d08:	e784      	b.n	9c14 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d0a:	2000      	movs	r0, #0
    9d0c:	e787      	b.n	9c1e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d0e:	2000      	movs	r0, #0
    9d10:	e796      	b.n	9c40 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d12:	2000      	movs	r0, #0
    9d14:	e799      	b.n	9c4a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d16:	2000      	movs	r0, #0
    9d18:	e7a6      	b.n	9c68 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d1a:	2000      	movs	r0, #0
    9d1c:	e7a9      	b.n	9c72 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x126>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d1e:	2000      	movs	r0, #0
    9d20:	e7b5      	b.n	9c8e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x142>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d22:	2000      	movs	r0, #0
    9d24:	e7b8      	b.n	9c98 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d26:	2000      	movs	r0, #0
    9d28:	e7c4      	b.n	9cb4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d2a:	2000      	movs	r0, #0
    9d2c:	e7c7      	b.n	9cbe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x172>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d2e:	2000      	movs	r0, #0
    9d30:	e7d3      	b.n	9cda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d32:	2000      	movs	r0, #0
    9d34:	e7d5      	b.n	9ce2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x196>
    9d36:	bf00      	nop
    9d38:	000341c4 	.word	0x000341c4
    9d3c:	0003416c 	.word	0x0003416c
    9d40:	00033ca8 	.word	0x00033ca8

00009d44 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
    9d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d48:	b084      	sub	sp, #16
    9d4a:	4604      	mov	r4, r0
    9d4c:	4688      	mov	r8, r1
    9d4e:	4615      	mov	r5, r2
    9d50:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9d52:	f00b ffa6 	bl	15ca2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9d56:	682b      	ldr	r3, [r5, #0]
    9d58:	681b      	ldr	r3, [r3, #0]
    9d5a:	2204      	movs	r2, #4
    9d5c:	2118      	movs	r1, #24
    9d5e:	4628      	mov	r0, r5
    9d60:	4798      	blx	r3
    return new (allocated_memory) T();
    9d62:	4606      	mov	r6, r0
    9d64:	b130      	cbz	r0, 9d74 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x30>
    9d66:	2300      	movs	r3, #0
    9d68:	6003      	str	r3, [r0, #0]
    9d6a:	6043      	str	r3, [r0, #4]
    9d6c:	6083      	str	r3, [r0, #8]
    9d6e:	60c3      	str	r3, [r0, #12]
    9d70:	6103      	str	r3, [r0, #16]
    9d72:	6143      	str	r3, [r0, #20]
    9d74:	9502      	str	r5, [sp, #8]
    9d76:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9d78:	b336      	cbz	r6, 9dc8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return data_ - ReadScalar<soffset_t>(data_);
    9d7a:	4620      	mov	r0, r4
    9d7c:	f00b fa25 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d80:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d82:	4628      	mov	r0, r5
    9d84:	f00b fa27 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d88:	280a      	cmp	r0, #10
    9d8a:	d92a      	bls.n	9de2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    9d8c:	f105 000a 	add.w	r0, r5, #10
    9d90:	f00b fa21 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d94:	b338      	cbz	r0, 9de6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    9d96:	4420      	add	r0, r4
    9d98:	f00b fae6 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
    9d9c:	2801      	cmp	r0, #1
    9d9e:	d128      	bne.n	9df2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
    return data_ - ReadScalar<soffset_t>(data_);
    9da0:	4620      	mov	r0, r4
    9da2:	f00b fa12 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9da6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9da8:	4628      	mov	r0, r5
    9daa:	f00b fa14 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dae:	280c      	cmp	r0, #12
    9db0:	d91b      	bls.n	9dea <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9db2:	f105 000c 	add.w	r0, r5, #12
    9db6:	f00b fa0e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9dba:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9dbc:	b1b8      	cbz	r0, 9dee <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9dbe:	4620      	mov	r0, r4
    9dc0:	f00b f9fd 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9dc4:	4404      	add	r4, r0
    9dc6:	e015      	b.n	9df4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    9dc8:	4b5a      	ldr	r3, [pc, #360]	; (9f34 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9dca:	9301      	str	r3, [sp, #4]
    9dcc:	f240 434d 	movw	r3, #1101	; 0x44d
    9dd0:	9300      	str	r3, [sp, #0]
    9dd2:	4b59      	ldr	r3, [pc, #356]	; (9f38 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9dd4:	4a59      	ldr	r2, [pc, #356]	; (9f3c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f8>)
    9dd6:	4641      	mov	r1, r8
    9dd8:	4640      	mov	r0, r8
    9dda:	f00b ff7f 	bl	15cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9dde:	2401      	movs	r4, #1
    9de0:	e086      	b.n	9ef0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9de2:	2000      	movs	r0, #0
    9de4:	e7d6      	b.n	9d94 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9de6:	2000      	movs	r0, #0
    9de8:	e7d8      	b.n	9d9c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dea:	2000      	movs	r0, #0
    9dec:	e7e5      	b.n	9dba <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9dee:	2400      	movs	r4, #0
    9df0:	e000      	b.n	9df4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    9df2:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9df4:	2c00      	cmp	r4, #0
    9df6:	d077      	beq.n	9ee8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9df8:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9dfa:	4620      	mov	r0, r4
    9dfc:	f00b f9e5 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e00:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e02:	4620      	mov	r0, r4
    9e04:	f00b f9e7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e08:	2804      	cmp	r0, #4
    9e0a:	d97b      	bls.n	9f04 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c0>
    9e0c:	1d20      	adds	r0, r4, #4
    9e0e:	f00b f9e2 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e12:	2800      	cmp	r0, #0
    9e14:	d078      	beq.n	9f08 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c4>
    9e16:	4428      	add	r0, r5
    9e18:	f00b f9e3 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9e1c:	b2c0      	uxtb	r0, r0
    9e1e:	f00b ff37 	bl	15c90 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9e22:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9e24:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9e26:	4628      	mov	r0, r5
    9e28:	f00b f9cf 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e2c:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e2e:	4620      	mov	r0, r4
    9e30:	f00b f9d1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e34:	2806      	cmp	r0, #6
    9e36:	d969      	bls.n	9f0c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    9e38:	1da0      	adds	r0, r4, #6
    9e3a:	f00b f9cc 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e3e:	2800      	cmp	r0, #0
    9e40:	d066      	beq.n	9f10 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1cc>
    9e42:	4428      	add	r0, r5
    9e44:	f00b f9c1 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9e48:	6070      	str	r0, [r6, #4]
    9e4a:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9e4c:	4628      	mov	r0, r5
    9e4e:	f00b f9bc 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e52:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e54:	4630      	mov	r0, r6
    9e56:	f00b f9be 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e5a:	2808      	cmp	r0, #8
    9e5c:	d95a      	bls.n	9f14 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    9e5e:	f106 0008 	add.w	r0, r6, #8
    9e62:	f00b f9b8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e66:	2800      	cmp	r0, #0
    9e68:	d056      	beq.n	9f18 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d4>
    9e6a:	4428      	add	r0, r5
    9e6c:	f00b f9ad 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9e70:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9e72:	4628      	mov	r0, r5
    9e74:	f00b f9a9 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e78:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e7a:	4630      	mov	r0, r6
    9e7c:	f00b f9ab 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e80:	280a      	cmp	r0, #10
    9e82:	d94b      	bls.n	9f1c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d8>
    9e84:	f106 000a 	add.w	r0, r6, #10
    9e88:	f00b f9a5 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e8c:	2800      	cmp	r0, #0
    9e8e:	d047      	beq.n	9f20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1dc>
    9e90:	4428      	add	r0, r5
    9e92:	f00b f9a6 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9e96:	b2c0      	uxtb	r0, r0
    9e98:	f00b fef0 	bl	15c7c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9e9c:	7320      	strb	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9e9e:	4628      	mov	r0, r5
    9ea0:	f00b f993 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ea4:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9ea6:	4630      	mov	r0, r6
    9ea8:	f00b f995 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9eac:	280c      	cmp	r0, #12
    9eae:	d939      	bls.n	9f24 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e0>
    9eb0:	f106 000c 	add.w	r0, r6, #12
    9eb4:	f00b f98f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9eb8:	2800      	cmp	r0, #0
    9eba:	d035      	beq.n	9f28 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
    9ebc:	4428      	add	r0, r5
    9ebe:	f00b f984 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    9ec2:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9ec4:	4628      	mov	r0, r5
    9ec6:	f00b f980 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9eca:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9ecc:	4630      	mov	r0, r6
    9ece:	f00b f982 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ed2:	280e      	cmp	r0, #14
    9ed4:	d92a      	bls.n	9f2c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e8>
    9ed6:	f106 000e 	add.w	r0, r6, #14
    9eda:	f00b f97c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ede:	b338      	cbz	r0, 9f30 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>
    9ee0:	4428      	add	r0, r5
    9ee2:	f00b f972 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    9ee6:	6160      	str	r0, [r4, #20]
    9ee8:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9eea:	2400      	movs	r4, #0
    9eec:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9eee:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    9ef0:	9903      	ldr	r1, [sp, #12]
    9ef2:	b119      	cbz	r1, 9efc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b8>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9ef4:	9802      	ldr	r0, [sp, #8]
    9ef6:	6803      	ldr	r3, [r0, #0]
    9ef8:	685b      	ldr	r3, [r3, #4]
    9efa:	4798      	blx	r3
}
    9efc:	4620      	mov	r0, r4
    9efe:	b004      	add	sp, #16
    9f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f04:	2000      	movs	r0, #0
    9f06:	e784      	b.n	9e12 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f08:	2000      	movs	r0, #0
    9f0a:	e787      	b.n	9e1c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f0c:	2000      	movs	r0, #0
    9f0e:	e796      	b.n	9e3e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f10:	2000      	movs	r0, #0
    9f12:	e799      	b.n	9e48 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f14:	2000      	movs	r0, #0
    9f16:	e7a6      	b.n	9e66 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f18:	2000      	movs	r0, #0
    9f1a:	e7a9      	b.n	9e70 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f1c:	2000      	movs	r0, #0
    9f1e:	e7b5      	b.n	9e8c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x148>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f20:	2000      	movs	r0, #0
    9f22:	e7b8      	b.n	9e96 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x152>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f24:	2000      	movs	r0, #0
    9f26:	e7c7      	b.n	9eb8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x174>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f28:	2001      	movs	r0, #1
    9f2a:	e7ca      	b.n	9ec2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f2c:	2000      	movs	r0, #0
    9f2e:	e7d6      	b.n	9ede <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f30:	2001      	movs	r0, #1
    9f32:	e7d8      	b.n	9ee6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    9f34:	000341c4 	.word	0x000341c4
    9f38:	0003416c 	.word	0x0003416c
    9f3c:	00033ca8 	.word	0x00033ca8

00009f40 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
    9f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f44:	b084      	sub	sp, #16
    9f46:	4604      	mov	r4, r0
    9f48:	4688      	mov	r8, r1
    9f4a:	4616      	mov	r6, r2
    9f4c:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9f4e:	f00b fea8 	bl	15ca2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9f52:	6833      	ldr	r3, [r6, #0]
    9f54:	681b      	ldr	r3, [r3, #0]
    9f56:	2201      	movs	r2, #1
    9f58:	2104      	movs	r1, #4
    9f5a:	4630      	mov	r0, r6
    9f5c:	4798      	blx	r3
    return new (allocated_memory) T();
    9f5e:	4605      	mov	r5, r0
    9f60:	b108      	cbz	r0, 9f66 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    9f62:	2300      	movs	r3, #0
    9f64:	6003      	str	r3, [r0, #0]
    9f66:	9602      	str	r6, [sp, #8]
    9f68:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9f6a:	b305      	cbz	r5, 9fae <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return data_ - ReadScalar<soffset_t>(data_);
    9f6c:	4620      	mov	r0, r4
    9f6e:	f00b f92c 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f72:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f74:	4630      	mov	r0, r6
    9f76:	f00b f92e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f7a:	280a      	cmp	r0, #10
    9f7c:	d924      	bls.n	9fc8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    9f7e:	f106 000a 	add.w	r0, r6, #10
    9f82:	f00b f928 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f86:	b308      	cbz	r0, 9fcc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    9f88:	4420      	add	r0, r4
    9f8a:	f00b f9ed 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    9f8e:	2808      	cmp	r0, #8
    9f90:	d128      	bne.n	9fe4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    9f92:	4620      	mov	r0, r4
    9f94:	f00b f919 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f98:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f9a:	4630      	mov	r0, r6
    9f9c:	f00b f91b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fa0:	280c      	cmp	r0, #12
    9fa2:	d915      	bls.n	9fd0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    9fa4:	f106 000c 	add.w	r0, r6, #12
    9fa8:	f00b f915 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9fac:	e011      	b.n	9fd2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    9fae:	4b4c      	ldr	r3, [pc, #304]	; (a0e0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a0>)
    9fb0:	9301      	str	r3, [sp, #4]
    9fb2:	f240 531d 	movw	r3, #1309	; 0x51d
    9fb6:	9300      	str	r3, [sp, #0]
    9fb8:	4b4a      	ldr	r3, [pc, #296]	; (a0e4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>)
    9fba:	4a4b      	ldr	r2, [pc, #300]	; (a0e8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a8>)
    9fbc:	4641      	mov	r1, r8
    9fbe:	4640      	mov	r0, r8
    9fc0:	f00b fe8c 	bl	15cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9fc4:	2401      	movs	r4, #1
    9fc6:	e07d      	b.n	a0c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
    9fc8:	2000      	movs	r0, #0
    9fca:	e7dc      	b.n	9f86 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fcc:	2000      	movs	r0, #0
    9fce:	e7de      	b.n	9f8e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fd0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    9fd2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9fd4:	b120      	cbz	r0, 9fe0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9fd6:	4620      	mov	r0, r4
    9fd8:	f00b f8f1 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9fdc:	4404      	add	r4, r0
    9fde:	e002      	b.n	9fe6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9fe0:	2400      	movs	r4, #0
    9fe2:	e000      	b.n	9fe6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9fe4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9fe6:	2c00      	cmp	r4, #0
    9fe8:	d069      	beq.n	a0be <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    9fea:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9fec:	4620      	mov	r0, r4
    9fee:	f00b f8ec 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ff2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9ff4:	4620      	mov	r0, r4
    9ff6:	f00b f8ee 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ffa:	2804      	cmp	r0, #4
    9ffc:	d903      	bls.n	a006 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    9ffe:	1d20      	adds	r0, r4, #4
    a000:	f00b f8e9 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a004:	e000      	b.n	a008 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    a006:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a008:	b118      	cbz	r0, a012 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    a00a:	4430      	add	r0, r6
    a00c:	f00b f8e9 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a010:	e000      	b.n	a014 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    a012:	2000      	movs	r0, #0
        ConvertActivation(schema_params->fused_activation_function());
    a014:	b2c0      	uxtb	r0, r0
    a016:	f00b fe31 	bl	15c7c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a01a:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    a01c:	4630      	mov	r0, r6
    a01e:	f00b f8d4 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a022:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a024:	4620      	mov	r0, r4
    a026:	f00b f8d6 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a02a:	2808      	cmp	r0, #8
    a02c:	d904      	bls.n	a038 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    a02e:	f104 0008 	add.w	r0, r4, #8
    a032:	f00b f8d0 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a036:	e000      	b.n	a03a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    a038:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a03a:	b118      	cbz	r0, a044 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    a03c:	4430      	add	r0, r6
    a03e:	f00b f993 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a042:	e000      	b.n	a046 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    a044:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    a046:	3800      	subs	r0, #0
    a048:	bf18      	it	ne
    a04a:	2001      	movne	r0, #1
    params->keep_num_dims = schema_params->keep_num_dims();
    a04c:	70a8      	strb	r0, [r5, #2]
    return data_ - ReadScalar<soffset_t>(data_);
    a04e:	4630      	mov	r0, r6
    a050:	f00b f8bb 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a054:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a056:	4620      	mov	r0, r4
    a058:	f00b f8bd 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a05c:	280a      	cmp	r0, #10
    a05e:	d904      	bls.n	a06a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    a060:	f104 000a 	add.w	r0, r4, #10
    a064:	f00b f8b7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a068:	e000      	b.n	a06c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    a06a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a06c:	b118      	cbz	r0, a076 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
    a06e:	4430      	add	r0, r6
    a070:	f00b f97a 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a074:	e000      	b.n	a078 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    a076:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    a078:	3800      	subs	r0, #0
    a07a:	bf18      	it	ne
    a07c:	2001      	movne	r0, #1
    params->asymmetric_quantize_inputs =
    a07e:	70e8      	strb	r0, [r5, #3]
    return data_ - ReadScalar<soffset_t>(data_);
    a080:	4630      	mov	r0, r6
    a082:	f00b f8a2 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a086:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a088:	4620      	mov	r0, r4
    a08a:	f00b f8a4 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a08e:	2806      	cmp	r0, #6
    a090:	d903      	bls.n	a09a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    a092:	1da0      	adds	r0, r4, #6
    a094:	f00b f89f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a098:	e000      	b.n	a09c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15c>
    a09a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a09c:	b118      	cbz	r0, a0a6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x166>
    a09e:	4430      	add	r0, r6
    a0a0:	f00b f89f 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a0a4:	e000      	b.n	a0a8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    a0a6:	2000      	movs	r0, #0
    switch (schema_params->weights_format()) {
    a0a8:	b138      	cbz	r0, a0ba <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17a>
    a0aa:	2801      	cmp	r0, #1
    a0ac:	d014      	beq.n	a0d8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198>
        TF_LITE_REPORT_ERROR(error_reporter,
    a0ae:	490f      	ldr	r1, [pc, #60]	; (a0ec <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>)
    a0b0:	4640      	mov	r0, r8
    a0b2:	f00b fe04 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    a0b6:	2401      	movs	r4, #1
    a0b8:	e004      	b.n	a0c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    a0ba:	2300      	movs	r3, #0
    a0bc:	706b      	strb	r3, [r5, #1]
	_M_t._M_ptr() = pointer();
    a0be:	2400      	movs	r4, #0
    a0c0:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a0c2:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    a0c4:	9903      	ldr	r1, [sp, #12]
    a0c6:	b119      	cbz	r1, a0d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x190>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a0c8:	9802      	ldr	r0, [sp, #8]
    a0ca:	6803      	ldr	r3, [r0, #0]
    a0cc:	685b      	ldr	r3, [r3, #4]
    a0ce:	4798      	blx	r3
}
    a0d0:	4620      	mov	r0, r4
    a0d2:	b004      	add	sp, #16
    a0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->weights_format =
    a0d8:	2301      	movs	r3, #1
    a0da:	706b      	strb	r3, [r5, #1]
        break;
    a0dc:	e7ef      	b.n	a0be <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    a0de:	bf00      	nop
    a0e0:	000341c4 	.word	0x000341c4
    a0e4:	0003416c 	.word	0x0003416c
    a0e8:	00033ca8 	.word	0x00033ca8
    a0ec:	000341e0 	.word	0x000341e0

0000a0f0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
    a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0f4:	b084      	sub	sp, #16
    a0f6:	4604      	mov	r4, r0
    a0f8:	4688      	mov	r8, r1
    a0fa:	4615      	mov	r5, r2
    a0fc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a0fe:	f00b fdd0 	bl	15ca2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a102:	682b      	ldr	r3, [r5, #0]
    a104:	681b      	ldr	r3, [r3, #0]
    a106:	2204      	movs	r2, #4
    a108:	211c      	movs	r1, #28
    a10a:	4628      	mov	r0, r5
    a10c:	4798      	blx	r3
    return new (allocated_memory) T();
    a10e:	4606      	mov	r6, r0
    a110:	b138      	cbz	r0, a122 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x32>
    a112:	2300      	movs	r3, #0
    a114:	6003      	str	r3, [r0, #0]
    a116:	6043      	str	r3, [r0, #4]
    a118:	6083      	str	r3, [r0, #8]
    a11a:	60c3      	str	r3, [r0, #12]
    a11c:	6103      	str	r3, [r0, #16]
    a11e:	6143      	str	r3, [r0, #20]
    a120:	6183      	str	r3, [r0, #24]
    a122:	9502      	str	r5, [sp, #8]
    a124:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a126:	b336      	cbz	r6, a176 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x86>
    return data_ - ReadScalar<soffset_t>(data_);
    a128:	4620      	mov	r0, r4
    a12a:	f00b f84e 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a12e:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a130:	4628      	mov	r0, r5
    a132:	f00b f850 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a136:	280a      	cmp	r0, #10
    a138:	d92a      	bls.n	a190 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a13a:	f105 000a 	add.w	r0, r5, #10
    a13e:	f00b f84a 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a142:	b338      	cbz	r0, a194 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    a144:	4420      	add	r0, r4
    a146:	f00b f90f 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
    a14a:	2802      	cmp	r0, #2
    a14c:	d128      	bne.n	a1a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return data_ - ReadScalar<soffset_t>(data_);
    a14e:	4620      	mov	r0, r4
    a150:	f00b f83b 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a154:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a156:	4628      	mov	r0, r5
    a158:	f00b f83d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a15c:	280c      	cmp	r0, #12
    a15e:	d91b      	bls.n	a198 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    a160:	f105 000c 	add.w	r0, r5, #12
    a164:	f00b f837 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a168:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a16a:	b1b8      	cbz	r0, a19c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    a16c:	4620      	mov	r0, r4
    a16e:	f00b f826 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a172:	4404      	add	r4, r0
    a174:	e015      	b.n	a1a2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a176:	4b68      	ldr	r3, [pc, #416]	; (a318 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x228>)
    a178:	9301      	str	r3, [sp, #4]
    a17a:	f240 43a2 	movw	r3, #1186	; 0x4a2
    a17e:	9300      	str	r3, [sp, #0]
    a180:	4b66      	ldr	r3, [pc, #408]	; (a31c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22c>)
    a182:	4a67      	ldr	r2, [pc, #412]	; (a320 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x230>)
    a184:	4641      	mov	r1, r8
    a186:	4640      	mov	r0, r8
    a188:	f00b fda8 	bl	15cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a18c:	2401      	movs	r4, #1
    a18e:	e09c      	b.n	a2ca <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a190:	2000      	movs	r0, #0
    a192:	e7d6      	b.n	a142 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a194:	2000      	movs	r0, #0
    a196:	e7d8      	b.n	a14a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a198:	2000      	movs	r0, #0
    a19a:	e7e5      	b.n	a168 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a19c:	2400      	movs	r4, #0
    a19e:	e000      	b.n	a1a2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a1a0:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a1a2:	2c00      	cmp	r4, #0
    a1a4:	f000 808d 	beq.w	a2c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    a1a8:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a1aa:	4620      	mov	r0, r4
    a1ac:	f00b f80d 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1b0:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1b2:	4620      	mov	r0, r4
    a1b4:	f00b f80f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1b8:	2804      	cmp	r0, #4
    a1ba:	f240 8090 	bls.w	a2de <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ee>
    a1be:	1d20      	adds	r0, r4, #4
    a1c0:	f00b f809 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1c4:	2800      	cmp	r0, #0
    a1c6:	f000 808c 	beq.w	a2e2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
    a1ca:	4428      	add	r0, r5
    a1cc:	f00b f809 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    a1d0:	b2c0      	uxtb	r0, r0
    a1d2:	f00b fd5d 	bl	15c90 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    a1d6:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    a1d8:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a1da:	4628      	mov	r0, r5
    a1dc:	f00a fff5 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1e0:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1e2:	4620      	mov	r0, r4
    a1e4:	f00a fff7 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1e8:	2806      	cmp	r0, #6
    a1ea:	d97c      	bls.n	a2e6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f6>
    a1ec:	1da0      	adds	r0, r4, #6
    a1ee:	f00a fff2 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1f2:	2800      	cmp	r0, #0
    a1f4:	d079      	beq.n	a2ea <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fa>
    a1f6:	4428      	add	r0, r5
    a1f8:	f00a ffe7 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    a1fc:	6070      	str	r0, [r6, #4]
    a1fe:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a200:	4628      	mov	r0, r5
    a202:	f00a ffe2 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a206:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a208:	4630      	mov	r0, r6
    a20a:	f00a ffe4 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a20e:	2808      	cmp	r0, #8
    a210:	d96d      	bls.n	a2ee <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fe>
    a212:	f106 0008 	add.w	r0, r6, #8
    a216:	f00a ffde 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a21a:	2800      	cmp	r0, #0
    a21c:	d069      	beq.n	a2f2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x202>
    a21e:	4428      	add	r0, r5
    a220:	f00a ffd3 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    a224:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    a226:	4628      	mov	r0, r5
    a228:	f00a ffcf 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a22c:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a22e:	4630      	mov	r0, r6
    a230:	f00a ffd1 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a234:	280a      	cmp	r0, #10
    a236:	d95e      	bls.n	a2f6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x206>
    a238:	f106 000a 	add.w	r0, r6, #10
    a23c:	f00a ffcb 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a240:	2800      	cmp	r0, #0
    a242:	d05a      	beq.n	a2fa <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20a>
    a244:	4428      	add	r0, r5
    a246:	f00a ffc0 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->depth_multiplier = schema_params->depth_multiplier();
    a24a:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a24c:	4628      	mov	r0, r5
    a24e:	f00a ffbc 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a252:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a254:	4630      	mov	r0, r6
    a256:	f00a ffbe 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a25a:	280c      	cmp	r0, #12
    a25c:	d94f      	bls.n	a2fe <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20e>
    a25e:	f106 000c 	add.w	r0, r6, #12
    a262:	f00a ffb8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a266:	2800      	cmp	r0, #0
    a268:	d04b      	beq.n	a302 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x212>
    a26a:	4428      	add	r0, r5
    a26c:	f00a ffb9 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    a270:	b2c0      	uxtb	r0, r0
    a272:	f00b fd03 	bl	15c7c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a276:	7420      	strb	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    a278:	4628      	mov	r0, r5
    a27a:	f00a ffa6 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a27e:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a280:	4630      	mov	r0, r6
    a282:	f00a ffa8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a286:	280e      	cmp	r0, #14
    a288:	d93d      	bls.n	a306 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x216>
    a28a:	f106 000e 	add.w	r0, r6, #14
    a28e:	f00a ffa2 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a292:	2800      	cmp	r0, #0
    a294:	d039      	beq.n	a30a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21a>
    a296:	4428      	add	r0, r5
    a298:	f00a ff97 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    a29c:	6160      	str	r0, [r4, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    a29e:	4628      	mov	r0, r5
    a2a0:	f00a ff93 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a2a4:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a2a6:	4630      	mov	r0, r6
    a2a8:	f00a ff95 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2ac:	2810      	cmp	r0, #16
    a2ae:	d92e      	bls.n	a30e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21e>
    a2b0:	f106 0010 	add.w	r0, r6, #16
    a2b4:	f00a ff8f 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2b8:	b358      	cbz	r0, a312 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x222>
    a2ba:	4428      	add	r0, r5
    a2bc:	f00a ff85 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    a2c0:	61a0      	str	r0, [r4, #24]
    a2c2:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    a2c4:	2400      	movs	r4, #0
    a2c6:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a2c8:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    a2ca:	9903      	ldr	r1, [sp, #12]
    a2cc:	b119      	cbz	r1, a2d6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a2ce:	9802      	ldr	r0, [sp, #8]
    a2d0:	6803      	ldr	r3, [r0, #0]
    a2d2:	685b      	ldr	r3, [r3, #4]
    a2d4:	4798      	blx	r3
}
    a2d6:	4620      	mov	r0, r4
    a2d8:	b004      	add	sp, #16
    a2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2de:	2000      	movs	r0, #0
    a2e0:	e770      	b.n	a1c4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2e2:	2000      	movs	r0, #0
    a2e4:	e774      	b.n	a1d0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2e6:	2000      	movs	r0, #0
    a2e8:	e783      	b.n	a1f2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2ea:	2000      	movs	r0, #0
    a2ec:	e786      	b.n	a1fc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2ee:	2000      	movs	r0, #0
    a2f0:	e793      	b.n	a21a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2f2:	2000      	movs	r0, #0
    a2f4:	e796      	b.n	a224 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2f6:	2000      	movs	r0, #0
    a2f8:	e7a2      	b.n	a240 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2fa:	2000      	movs	r0, #0
    a2fc:	e7a5      	b.n	a24a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2fe:	2000      	movs	r0, #0
    a300:	e7b1      	b.n	a266 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x176>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a302:	2000      	movs	r0, #0
    a304:	e7b4      	b.n	a270 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x180>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a306:	2000      	movs	r0, #0
    a308:	e7c3      	b.n	a292 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a30a:	2001      	movs	r0, #1
    a30c:	e7c6      	b.n	a29c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a30e:	2000      	movs	r0, #0
    a310:	e7d2      	b.n	a2b8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a312:	2001      	movs	r0, #1
    a314:	e7d4      	b.n	a2c0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    a316:	bf00      	nop
    a318:	000341c4 	.word	0x000341c4
    a31c:	0003416c 	.word	0x0003416c
    a320:	00033ca8 	.word	0x00033ca8

0000a324 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    a324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a328:	b084      	sub	sp, #16
    a32a:	4604      	mov	r4, r0
    a32c:	4688      	mov	r8, r1
    a32e:	4615      	mov	r5, r2
    a330:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a332:	f00b fcb6 	bl	15ca2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a336:	682b      	ldr	r3, [r5, #0]
    a338:	681b      	ldr	r3, [r3, #0]
    a33a:	2204      	movs	r2, #4
    a33c:	4611      	mov	r1, r2
    a33e:	4628      	mov	r0, r5
    a340:	4798      	blx	r3
    return new (allocated_memory) T();
    a342:	4606      	mov	r6, r0
    a344:	b108      	cbz	r0, a34a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a346:	2300      	movs	r3, #0
    a348:	6003      	str	r3, [r0, #0]
    a34a:	9502      	str	r5, [sp, #8]
    a34c:	9603      	str	r6, [sp, #12]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a34e:	b336      	cbz	r6, a39e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return data_ - ReadScalar<soffset_t>(data_);
    a350:	4620      	mov	r0, r4
    a352:	f00a ff3a 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a356:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a358:	4628      	mov	r0, r5
    a35a:	f00a ff3c 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a35e:	280a      	cmp	r0, #10
    a360:	d92a      	bls.n	a3b8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    a362:	f105 000a 	add.w	r0, r5, #10
    a366:	f00a ff36 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a36a:	b338      	cbz	r0, a3bc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    a36c:	4420      	add	r0, r4
    a36e:	f00a fffb 	bl	15368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    a372:	2809      	cmp	r0, #9
    a374:	d128      	bne.n	a3c8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a376:	4620      	mov	r0, r4
    a378:	f00a ff27 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a37c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a37e:	4628      	mov	r0, r5
    a380:	f00a ff29 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a384:	280c      	cmp	r0, #12
    a386:	d91b      	bls.n	a3c0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    a388:	f105 000c 	add.w	r0, r5, #12
    a38c:	f00a ff23 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a390:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a392:	b1b8      	cbz	r0, a3c4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a394:	4620      	mov	r0, r4
    a396:	f00a ff12 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a39a:	4404      	add	r4, r0
    a39c:	e015      	b.n	a3ca <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a39e:	4b1d      	ldr	r3, [pc, #116]	; (a414 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
    a3a0:	9301      	str	r3, [sp, #4]
    a3a2:	f240 734c 	movw	r3, #1868	; 0x74c
    a3a6:	9300      	str	r3, [sp, #0]
    a3a8:	4b1b      	ldr	r3, [pc, #108]	; (a418 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
    a3aa:	4a1c      	ldr	r2, [pc, #112]	; (a41c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
    a3ac:	4641      	mov	r1, r8
    a3ae:	4640      	mov	r0, r8
    a3b0:	f00b fc94 	bl	15cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a3b4:	2401      	movs	r4, #1
    a3b6:	e01e      	b.n	a3f6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3b8:	2000      	movs	r0, #0
    a3ba:	e7d6      	b.n	a36a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3bc:	2000      	movs	r0, #0
    a3be:	e7d8      	b.n	a372 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3c0:	2000      	movs	r0, #0
    a3c2:	e7e5      	b.n	a390 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a3c4:	2400      	movs	r4, #0
    a3c6:	e000      	b.n	a3ca <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a3c8:	2400      	movs	r4, #0

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    a3ca:	b18c      	cbz	r4, a3f0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return GetField<float>(VT_BETA, 0.0f);
    a3cc:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a3ce:	4620      	mov	r0, r4
    a3d0:	f00a fefb 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a3d4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a3d6:	4620      	mov	r0, r4
    a3d8:	f00a fefd 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3dc:	2804      	cmp	r0, #4
    a3de:	d914      	bls.n	a40a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
    a3e0:	1d20      	adds	r0, r4, #4
    a3e2:	f00a fef8 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3e6:	b190      	cbz	r0, a40e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xea>
    a3e8:	4428      	add	r0, r5
    a3ea:	f00a ffc4 	bl	15376 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
    params->beta = schema_params->beta();
    a3ee:	6030      	str	r0, [r6, #0]
	_M_t._M_ptr() = pointer();
    a3f0:	2400      	movs	r4, #0
    a3f2:	9403      	str	r4, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    a3f4:	603e      	str	r6, [r7, #0]
	if (__ptr != nullptr)
    a3f6:	9903      	ldr	r1, [sp, #12]
    a3f8:	b119      	cbz	r1, a402 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xde>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a3fa:	9802      	ldr	r0, [sp, #8]
    a3fc:	6803      	ldr	r3, [r0, #0]
    a3fe:	685b      	ldr	r3, [r3, #4]
    a400:	4798      	blx	r3
  return kTfLiteOk;
}
    a402:	4620      	mov	r0, r4
    a404:	b004      	add	sp, #16
    a406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a40a:	2000      	movs	r0, #0
    a40c:	e7eb      	b.n	a3e6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a40e:	2000      	movs	r0, #0
    a410:	e7ed      	b.n	a3ee <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    a412:	bf00      	nop
    a414:	000341c4 	.word	0x000341c4
    a418:	0003416c 	.word	0x0003416c
    a41c:	00033ca8 	.word	0x00033ca8

0000a420 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    a420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a424:	4604      	mov	r4, r0
    a426:	4688      	mov	r8, r1
    a428:	4691      	mov	r9, r2
    a42a:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    a42c:	2300      	movs	r3, #0
    a42e:	6033      	str	r3, [r6, #0]
  auto builtin_code = GetBuiltinCode(opcode);
    a430:	f00b fc63 	bl	15cfa <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    a434:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    a436:	4620      	mov	r0, r4
    a438:	f00a fec7 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a43c:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a43e:	4638      	mov	r0, r7
    a440:	f00a fec9 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a444:	2808      	cmp	r0, #8
    a446:	d904      	bls.n	a452 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    a448:	f107 0008 	add.w	r0, r7, #8
    a44c:	f00a fec3 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a450:	e000      	b.n	a454 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x34>
    a452:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a454:	b120      	cbz	r0, a460 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
    a456:	4420      	add	r0, r4
    a458:	f00a feb7 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a45c:	4607      	mov	r7, r0
    a45e:	e000      	b.n	a462 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    a460:	2701      	movs	r7, #1
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    a462:	2d91      	cmp	r5, #145	; 0x91
    a464:	d80d      	bhi.n	a482 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    a466:	2d20      	cmp	r5, #32
    a468:	d01c      	beq.n	a4a4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
    *registration = op_resolver.FindOp(builtin_code, version);
    a46a:	f8d8 3000 	ldr.w	r3, [r8]
    a46e:	681b      	ldr	r3, [r3, #0]
    a470:	463a      	mov	r2, r7
    a472:	4629      	mov	r1, r5
    a474:	4640      	mov	r0, r8
    a476:	4798      	blx	r3
    a478:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a47a:	b148      	cbz	r0, a490 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x70>
  TfLiteStatus status = kTfLiteOk;
    a47c:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    a47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(
    a482:	462a      	mov	r2, r5
    a484:	491c      	ldr	r1, [pc, #112]	; (a4f8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd8>)
    a486:	4648      	mov	r0, r9
    a488:	f00b fc19 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a48c:	2001      	movs	r0, #1
    a48e:	e7f6      	b.n	a47e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      TF_LITE_REPORT_ERROR(
    a490:	463b      	mov	r3, r7
    a492:	4a1a      	ldr	r2, [pc, #104]	; (a4fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>)
    a494:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    a498:	4919      	ldr	r1, [pc, #100]	; (a500 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
    a49a:	4648      	mov	r0, r9
    a49c:	f00b fc0f 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    a4a0:	2001      	movs	r0, #1
    a4a2:	e7ec      	b.n	a47e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return data_ - ReadScalar<soffset_t>(data_);
    a4a4:	4620      	mov	r0, r4
    a4a6:	f00a fe90 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a4aa:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a4ac:	4628      	mov	r0, r5
    a4ae:	f00a fe92 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4b2:	2806      	cmp	r0, #6
    a4b4:	d914      	bls.n	a4e0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>
    a4b6:	1da8      	adds	r0, r5, #6
    a4b8:	f00a fe8d 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a4bc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a4be:	b188      	cbz	r0, a4e4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>
    a4c0:	4620      	mov	r0, r4
    a4c2:	f00a fe7c 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a4c6:	1821      	adds	r1, r4, r0
  } else if (!opcode->custom_code()) {
    a4c8:	b171      	cbz	r1, a4e8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>
    *registration = op_resolver.FindOp(name, version);
    a4ca:	f8d8 3000 	ldr.w	r3, [r8]
    a4ce:	685b      	ldr	r3, [r3, #4]
    a4d0:	463a      	mov	r2, r7
    a4d2:	3104      	adds	r1, #4
    a4d4:	4640      	mov	r0, r8
    a4d6:	4798      	blx	r3
    a4d8:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a4da:	b158      	cbz	r0, a4f4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  TfLiteStatus status = kTfLiteOk;
    a4dc:	2000      	movs	r0, #0
    a4de:	e7ce      	b.n	a47e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4e0:	2000      	movs	r0, #0
    a4e2:	e7eb      	b.n	a4bc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a4e4:	2100      	movs	r1, #0
    a4e6:	e7ef      	b.n	a4c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
    TF_LITE_REPORT_ERROR(
    a4e8:	4906      	ldr	r1, [pc, #24]	; (a504 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
    a4ea:	4648      	mov	r0, r9
    a4ec:	f00b fbe7 	bl	15cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a4f0:	2001      	movs	r0, #1
    a4f2:	e7c4      	b.n	a47e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      status = kTfLiteError;
    a4f4:	2001      	movs	r0, #1
    a4f6:	e7c2      	b.n	a47e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    a4f8:	0003420c 	.word	0x0003420c
    a4fc:	00032f54 	.word	0x00032f54
    a500:	00034260 	.word	0x00034260
    a504:	00034304 	.word	0x00034304

0000a508 <_ZN6tflite3ops5micro12Register_ADDEv>:
  return kTfLiteOk;
}

}  // namespace add

TfLiteRegistration Register_ADD() {
    a508:	b470      	push	{r4, r5, r6}
    a50a:	4606      	mov	r6, r0
          /*prepare=*/add::Prepare,
          /*invoke=*/add::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    a50c:	4604      	mov	r4, r0
    a50e:	4d05      	ldr	r5, [pc, #20]	; (a524 <_ZN6tflite3ops5micro12Register_ADDEv+0x1c>)
    a510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a514:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    a51c:	4630      	mov	r0, r6
    a51e:	bc70      	pop	{r4, r5, r6}
    a520:	4770      	bx	lr
    a522:	bf00      	nop
    a524:	00031854 	.word	0x00031854

0000a528 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    a528:	2801      	cmp	r0, #1
    a52a:	d009      	beq.n	a540 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x18>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    a52c:	2803      	cmp	r0, #3
    a52e:	d00c      	beq.n	a54a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x22>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    a530:	2802      	cmp	r0, #2
    a532:	d00f      	beq.n	a554 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    a534:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    a538:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a53a:	4b09      	ldr	r3, [pc, #36]	; (a560 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a53c:	6013      	str	r3, [r2, #0]
  }
}
    a53e:	4770      	bx	lr
    *activation_min = 0;
    a540:	2300      	movs	r3, #0
    a542:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a544:	4b06      	ldr	r3, [pc, #24]	; (a560 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a546:	6013      	str	r3, [r2, #0]
    a548:	4770      	bx	lr
    *activation_min = 0;
    a54a:	2300      	movs	r3, #0
    a54c:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    a54e:	4b05      	ldr	r3, [pc, #20]	; (a564 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x3c>)
    a550:	6013      	str	r3, [r2, #0]
    a552:	4770      	bx	lr
    *activation_min = -1;
    a554:	4b04      	ldr	r3, [pc, #16]	; (a568 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x40>)
    a556:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    a558:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    a55c:	6013      	str	r3, [r2, #0]
    a55e:	4770      	bx	lr
    a560:	7f7fffff 	.word	0x7f7fffff
    a564:	40c00000 	.word	0x40c00000
    a568:	bf800000 	.word	0xbf800000

0000a56c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a56c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a56e:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->user_data != nullptr);
    a570:	690b      	ldr	r3, [r1, #16]
    a572:	b303      	cbz	r3, a5b6 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    a574:	4605      	mov	r5, r0
    a576:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a578:	694b      	ldr	r3, [r1, #20]
    a57a:	b1f3      	cbz	r3, a5ba <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    a57c:	2200      	movs	r2, #0
    a57e:	f00b fb32 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input1 != nullptr);
    a582:	4606      	mov	r6, r0
    a584:	b1d8      	cbz	r0, a5be <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
    a586:	2201      	movs	r2, #1
    a588:	4621      	mov	r1, r4
    a58a:	4628      	mov	r0, r5
    a58c:	f00b fb2b 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input2 != nullptr);
    a590:	4607      	mov	r7, r0
    a592:	b1f0      	cbz	r0, a5d2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    a594:	2200      	movs	r2, #0
    a596:	4621      	mov	r1, r4
    a598:	4628      	mov	r0, r5
    a59a:	f00b fb43 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    a59e:	b310      	cbz	r0, a5e6 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
  OpData* data = static_cast<OpData*>(node->user_data);
    a5a0:	6922      	ldr	r2, [r4, #16]
  TF_LITE_ENSURE_STATUS(
    a5a2:	9201      	str	r2, [sp, #4]
    a5a4:	9000      	str	r0, [sp, #0]
    a5a6:	463b      	mov	r3, r7
    a5a8:	4632      	mov	r2, r6
    a5aa:	6961      	ldr	r1, [r4, #20]
    a5ac:	4628      	mov	r0, r5
    a5ae:	f00b fc1d 	bl	15dec <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
}
    a5b2:	b003      	add	sp, #12
    a5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    a5b6:	f00e f978 	bl	188aa <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a5ba:	f00e f976 	bl	188aa <abort>
  TF_LITE_ENSURE(context, input1 != nullptr);
    a5be:	696c      	ldr	r4, [r5, #20]
    a5c0:	4b0e      	ldr	r3, [pc, #56]	; (a5fc <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    a5c2:	9300      	str	r3, [sp, #0]
    a5c4:	23d5      	movs	r3, #213	; 0xd5
    a5c6:	4a0e      	ldr	r2, [pc, #56]	; (a600 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a5c8:	490e      	ldr	r1, [pc, #56]	; (a604 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a5ca:	4628      	mov	r0, r5
    a5cc:	47a0      	blx	r4
    a5ce:	2001      	movs	r0, #1
    a5d0:	e7ef      	b.n	a5b2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
  TF_LITE_ENSURE(context, input2 != nullptr);
    a5d2:	696c      	ldr	r4, [r5, #20]
    a5d4:	4b0c      	ldr	r3, [pc, #48]	; (a608 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    a5d6:	9300      	str	r3, [sp, #0]
    a5d8:	23d7      	movs	r3, #215	; 0xd7
    a5da:	4a09      	ldr	r2, [pc, #36]	; (a600 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a5dc:	4909      	ldr	r1, [pc, #36]	; (a604 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a5de:	4628      	mov	r0, r5
    a5e0:	47a0      	blx	r4
    a5e2:	2001      	movs	r0, #1
    a5e4:	e7e5      	b.n	a5b2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
  TF_LITE_ENSURE(context, output != nullptr);
    a5e6:	696c      	ldr	r4, [r5, #20]
    a5e8:	4b08      	ldr	r3, [pc, #32]	; (a60c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
    a5ea:	9300      	str	r3, [sp, #0]
    a5ec:	23d9      	movs	r3, #217	; 0xd9
    a5ee:	4a04      	ldr	r2, [pc, #16]	; (a600 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a5f0:	4904      	ldr	r1, [pc, #16]	; (a604 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a5f2:	4628      	mov	r0, r5
    a5f4:	47a0      	blx	r4
    a5f6:	2001      	movs	r0, #1
    a5f8:	e7db      	b.n	a5b2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
    a5fa:	bf00      	nop
    a5fc:	00034388 	.word	0x00034388
    a600:	0003433c 	.word	0x0003433c
    a604:	00033ca8 	.word	0x00033ca8
    a608:	0003439c 	.word	0x0003439c
    a60c:	000343b0 	.word	0x000343b0

0000a610 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>:
// This function is used for 8-bit as well as for 16-bit, but the accumulator
// is 32-bit for both cases. The overflow does not happen due to the
// choice of the shift (20 or 15, accordingly - see add.cc for more comments).
template <typename T>
inline typename std::enable_if<is_small_integer<T>::value, void>::type
BroadcastAdd4DSlow(const ArithmeticParams& params,
    a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a614:	b0ab      	sub	sp, #172	; 0xac
    a616:	9206      	str	r2, [sp, #24]
    a618:	461d      	mov	r5, r3
    a61a:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
      : size_(0) {
    a61c:	2300      	movs	r3, #0
    a61e:	9308      	str	r3, [sp, #32]
  inline int32_t DimensionsCount() const { return size_; }
    a620:	680b      	ldr	r3, [r1, #0]
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a622:	2b04      	cmp	r3, #4
    a624:	dc0e      	bgt.n	a644 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34>
    a626:	4607      	mov	r7, r0
    a628:	460e      	mov	r6, r1
    if (size_ > kMaxSmallSize) {
    a62a:	9b08      	ldr	r3, [sp, #32]
    a62c:	2b05      	cmp	r3, #5
    a62e:	dd03      	ble.n	a638 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28>
      delete[] dims_pointer_;
    a630:	9809      	ldr	r0, [sp, #36]	; 0x24
    a632:	b108      	cbz	r0, a638 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28>
    a634:	f00e f924 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
    a638:	2304      	movs	r3, #4
    a63a:	9308      	str	r3, [sp, #32]
  inline int32_t DimensionsCount() const { return size_; }
    a63c:	6830      	ldr	r0, [r6, #0]
    Resize(new_shape_size);
    const int size_increase = new_shape_size - shape.DimensionsCount();
    a63e:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    a640:	2300      	movs	r3, #0
    a642:	e00c      	b.n	a65e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x4e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a644:	f00e f931 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    a648:	f00e f92f 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a64c:	f00e f92d 	bl	188aa <abort>
      dims_[i] = val;
    a650:	2101      	movs	r1, #1
    a652:	aa2a      	add	r2, sp, #168	; 0xa8
    a654:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a658:	f842 1c84 	str.w	r1, [r2, #-132]
    for (int i = 0; i < size_increase; ++i) {
    a65c:	3301      	adds	r3, #1
    a65e:	4298      	cmp	r0, r3
    a660:	dd0b      	ble.n	a67a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6a>
    TFLITE_DCHECK_GE(i, 0);
    a662:	2b00      	cmp	r3, #0
    a664:	dbf0      	blt.n	a648 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x38>
    TFLITE_DCHECK_LT(i, size_);
    a666:	9a08      	ldr	r2, [sp, #32]
    a668:	4293      	cmp	r3, r2
    a66a:	daef      	bge.n	a64c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3c>
    if (size_ > kMaxSmallSize) {
    a66c:	2a05      	cmp	r2, #5
    a66e:	ddef      	ble.n	a650 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x40>
      dims_pointer_[i] = val;
    a670:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a672:	2101      	movs	r1, #1
    a674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a678:	e7f0      	b.n	a65c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x4c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a67a:	9b08      	ldr	r3, [sp, #32]
    a67c:	2b05      	cmp	r3, #5
    a67e:	dd01      	ble.n	a684 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x74>
    a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a682:	e000      	b.n	a686 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76>
    a684:	ab09      	add	r3, sp, #36	; 0x24
      SetDim(i, pad_value);
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a68a:	6832      	ldr	r2, [r6, #0]
    a68c:	2a05      	cmp	r2, #5
    a68e:	dd15      	ble.n	a6bc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xac>
    a690:	6871      	ldr	r1, [r6, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a692:	0092      	lsls	r2, r2, #2
    a694:	f00e f922 	bl	188dc <memcpy>
      : size_(0) {
    a698:	2300      	movs	r3, #0
    a69a:	930e      	str	r3, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
    a69c:	682b      	ldr	r3, [r5, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a69e:	2b04      	cmp	r3, #4
    a6a0:	dc0e      	bgt.n	a6c0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb0>
    if (size_ > kMaxSmallSize) {
    a6a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6a4:	2b05      	cmp	r3, #5
    a6a6:	dd03      	ble.n	a6b0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xa0>
      delete[] dims_pointer_;
    a6a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a6aa:	b108      	cbz	r0, a6b0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xa0>
    a6ac:	f00e f8e8 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
    a6b0:	2304      	movs	r3, #4
    a6b2:	930e      	str	r3, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
    a6b4:	6828      	ldr	r0, [r5, #0]
    const int size_increase = new_shape_size - shape.DimensionsCount();
    a6b6:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    a6b8:	2300      	movs	r3, #0
    a6ba:	e00e      	b.n	a6da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xca>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a6bc:	1d31      	adds	r1, r6, #4
    a6be:	e7e8      	b.n	a692 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x82>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a6c0:	f00e f8f3 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    a6c4:	f00e f8f1 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a6c8:	f00e f8ef 	bl	188aa <abort>
      dims_[i] = val;
    a6cc:	2101      	movs	r1, #1
    a6ce:	aa2a      	add	r2, sp, #168	; 0xa8
    a6d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a6d4:	f842 1c6c 	str.w	r1, [r2, #-108]
    for (int i = 0; i < size_increase; ++i) {
    a6d8:	3301      	adds	r3, #1
    a6da:	4298      	cmp	r0, r3
    a6dc:	dd0b      	ble.n	a6f6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xe6>
    TFLITE_DCHECK_GE(i, 0);
    a6de:	2b00      	cmp	r3, #0
    a6e0:	dbf0      	blt.n	a6c4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    a6e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a6e4:	4293      	cmp	r3, r2
    a6e6:	daef      	bge.n	a6c8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb8>
    if (size_ > kMaxSmallSize) {
    a6e8:	2a05      	cmp	r2, #5
    a6ea:	ddef      	ble.n	a6cc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xbc>
      dims_pointer_[i] = val;
    a6ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a6ee:	2101      	movs	r1, #1
    a6f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a6f4:	e7f0      	b.n	a6d8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xc8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6f8:	2b05      	cmp	r3, #5
    a6fa:	dd0c      	ble.n	a716 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x106>
    a6fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a6fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a702:	682a      	ldr	r2, [r5, #0]
    a704:	2a05      	cmp	r2, #5
    a706:	dd08      	ble.n	a71a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x10a>
    a708:	6869      	ldr	r1, [r5, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a70a:	0092      	lsls	r2, r2, #2
    a70c:	f00e f8e6 	bl	188dc <memcpy>
// Copies dims to desc, calculating strides.
template <int N>
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
                           NdArrayDesc<N>* desc_out) {
  int desc_stride = 1;
  for (int i = N - 1; i >= 0; --i) {
    a710:	2303      	movs	r3, #3
  int desc_stride = 1;
    a712:	2101      	movs	r1, #1
                sizeof(int32_t) * shape.DimensionsCount());
  }
    a714:	e019      	b.n	a74a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a716:	ab0f      	add	r3, sp, #60	; 0x3c
    a718:	e7f1      	b.n	a6fe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xee>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a71a:	1d29      	adds	r1, r5, #4
    a71c:	e7f5      	b.n	a70a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xfa>
    TFLITE_DCHECK_GE(i, 0);
    a71e:	f00e f8c4 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a722:	f00e f8c2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a726:	aa2a      	add	r2, sp, #168	; 0xa8
    a728:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a72c:	f852 2c84 	ldr.w	r2, [r2, #-132]
    a730:	e016      	b.n	a760 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x150>
    TFLITE_DCHECK_GE(i, 0);
    a732:	f00e f8ba 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a736:	f00e f8b8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a73a:	aa2a      	add	r2, sp, #168	; 0xa8
    a73c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a740:	f852 2c84 	ldr.w	r2, [r2, #-132]
    desc_out->extents[i] = input_shape.Dims(i);
    desc_out->strides[i] = desc_stride;
    desc_stride *= input_shape.Dims(i);
    a744:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
    a748:	3b01      	subs	r3, #1
    a74a:	2b00      	cmp	r3, #0
    a74c:	db1e      	blt.n	a78c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x17c>
    TFLITE_DCHECK_GE(i, 0);
    a74e:	dbe6      	blt.n	a71e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    a750:	9a08      	ldr	r2, [sp, #32]
    a752:	4293      	cmp	r3, r2
    a754:	dae5      	bge.n	a722 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a756:	2a05      	cmp	r2, #5
    a758:	dde5      	ble.n	a726 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x116>
    a75a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a75c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    a760:	a82a      	add	r0, sp, #168	; 0xa8
    a762:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    a766:	f840 2c20 	str.w	r2, [r0, #-32]
    desc_out->strides[i] = desc_stride;
    a76a:	1d1a      	adds	r2, r3, #4
    a76c:	a82a      	add	r0, sp, #168	; 0xa8
    a76e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    a772:	f842 1c20 	str.w	r1, [r2, #-32]
    TFLITE_DCHECK_GE(i, 0);
    a776:	2b00      	cmp	r3, #0
    a778:	dbdb      	blt.n	a732 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x122>
    TFLITE_DCHECK_LT(i, size_);
    a77a:	9a08      	ldr	r2, [sp, #32]
    a77c:	4293      	cmp	r3, r2
    a77e:	dada      	bge.n	a736 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x126>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a780:	2a05      	cmp	r2, #5
    a782:	ddda      	ble.n	a73a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x12a>
    a784:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a786:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a78a:	e7db      	b.n	a744 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x134>
  for (int i = N - 1; i >= 0; --i) {
    a78c:	2303      	movs	r3, #3
  int desc_stride = 1;
    a78e:	2101      	movs	r1, #1
    a790:	e015      	b.n	a7be <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1ae>
    TFLITE_DCHECK_GE(i, 0);
    a792:	f00e f88a 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a796:	f00e f888 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a79a:	aa2a      	add	r2, sp, #168	; 0xa8
    a79c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a7a0:	f852 2c6c 	ldr.w	r2, [r2, #-108]
    a7a4:	e016      	b.n	a7d4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1c4>
    TFLITE_DCHECK_GE(i, 0);
    a7a6:	f00e f880 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a7aa:	f00e f87e 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7ae:	aa2a      	add	r2, sp, #168	; 0xa8
    a7b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a7b4:	f852 2c6c 	ldr.w	r2, [r2, #-108]
    desc_stride *= input_shape.Dims(i);
    a7b8:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
    a7bc:	3b01      	subs	r3, #1
    a7be:	2b00      	cmp	r3, #0
    a7c0:	db1e      	blt.n	a800 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f0>
    TFLITE_DCHECK_GE(i, 0);
    a7c2:	dbe6      	blt.n	a792 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x182>
    TFLITE_DCHECK_LT(i, size_);
    a7c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a7c6:	4293      	cmp	r3, r2
    a7c8:	dae5      	bge.n	a796 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x186>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7ca:	2a05      	cmp	r2, #5
    a7cc:	dde5      	ble.n	a79a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x18a>
    a7ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a7d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    a7d4:	a82a      	add	r0, sp, #168	; 0xa8
    a7d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    a7da:	f840 2c40 	str.w	r2, [r0, #-64]
    desc_out->strides[i] = desc_stride;
    a7de:	1d1a      	adds	r2, r3, #4
    a7e0:	a82a      	add	r0, sp, #168	; 0xa8
    a7e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    a7e6:	f842 1c40 	str.w	r1, [r2, #-64]
    TFLITE_DCHECK_GE(i, 0);
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	dbdb      	blt.n	a7a6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x196>
    TFLITE_DCHECK_LT(i, size_);
    a7ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a7f0:	4293      	cmp	r3, r2
    a7f2:	dada      	bge.n	a7aa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x19a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7f4:	2a05      	cmp	r2, #5
    a7f6:	ddda      	ble.n	a7ae <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x19e>
    a7f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a7fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a7fe:	e7db      	b.n	a7b8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1a8>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
    a800:	2300      	movs	r3, #0
    a802:	e020      	b.n	a846 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x236>
    TFLITE_DCHECK_GE(i, 0);
    a804:	f00e f851 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a808:	f00e f84f 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a80c:	aa2a      	add	r2, sp, #168	; 0xa8
    a80e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a812:	f852 2c84 	ldr.w	r2, [r2, #-132]
    a816:	e022      	b.n	a85e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x24e>
    TFLITE_DCHECK_GE(i, 0);
    a818:	f00e f847 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a81c:	f00e f845 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a820:	a92a      	add	r1, sp, #168	; 0xa8
    a822:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    a826:	f851 1c6c 	ldr.w	r1, [r1, #-108]
    a82a:	e022      	b.n	a872 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x262>
    const int extent0 = extended_input0_shape.Dims(i);
    const int extent1 = extended_input1_shape.Dims(i);
    if (extent0 != extent1) {
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
    a82c:	1d1a      	adds	r2, r3, #4
    a82e:	a82a      	add	r0, sp, #168	; 0xa8
    a830:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    a834:	2000      	movs	r0, #0
    a836:	f842 0c20 	str.w	r0, [r2, #-32]
        desc0_out->extents[i] = extent1;
    a83a:	aa2a      	add	r2, sp, #168	; 0xa8
    a83c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a840:	f842 1c20 	str.w	r1, [r2, #-32]
  for (int i = 0; i < N; ++i) {
    a844:	3301      	adds	r3, #1
    a846:	2b03      	cmp	r3, #3
    a848:	dc28      	bgt.n	a89c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28c>
    TFLITE_DCHECK_GE(i, 0);
    a84a:	2b00      	cmp	r3, #0
    a84c:	dbda      	blt.n	a804 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f4>
    TFLITE_DCHECK_LT(i, size_);
    a84e:	9a08      	ldr	r2, [sp, #32]
    a850:	4293      	cmp	r3, r2
    a852:	dad9      	bge.n	a808 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a854:	2a05      	cmp	r2, #5
    a856:	ddd9      	ble.n	a80c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1fc>
    a858:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a85a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    a85e:	2b00      	cmp	r3, #0
    a860:	dbda      	blt.n	a818 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x208>
    TFLITE_DCHECK_LT(i, size_);
    a862:	990e      	ldr	r1, [sp, #56]	; 0x38
    a864:	428b      	cmp	r3, r1
    a866:	dad9      	bge.n	a81c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x20c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a868:	2905      	cmp	r1, #5
    a86a:	ddd9      	ble.n	a820 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x210>
    a86c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a86e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
    a872:	4291      	cmp	r1, r2
    a874:	d0e6      	beq.n	a844 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x234>
      if (extent0 == 1) {
    a876:	2a01      	cmp	r2, #1
    a878:	d0d8      	beq.n	a82c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x21c>
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
    a87a:	2901      	cmp	r1, #1
    a87c:	d10c      	bne.n	a898 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x288>
        desc1_out->strides[i] = 0;
    a87e:	1d19      	adds	r1, r3, #4
    a880:	a82a      	add	r0, sp, #168	; 0xa8
    a882:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    a886:	2000      	movs	r0, #0
    a888:	f841 0c40 	str.w	r0, [r1, #-64]
        desc1_out->extents[i] = extent0;
    a88c:	a92a      	add	r1, sp, #168	; 0xa8
    a88e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    a892:	f841 2c40 	str.w	r2, [r1, #-64]
    a896:	e7d5      	b.n	a844 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x234>
        TFLITE_DCHECK_EQ(extent1, 1);
    a898:	f00e f807 	bl	188aa <abort>
    if (size_ > kMaxSmallSize) {
    a89c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a89e:	2b05      	cmp	r3, #5
    a8a0:	dd03      	ble.n	a8aa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x29a>
      delete[] dims_pointer_;
    a8a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a8a4:	b108      	cbz	r0, a8aa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x29a>
    a8a6:	f00d ffeb 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    a8aa:	9b08      	ldr	r3, [sp, #32]
    a8ac:	2b05      	cmp	r3, #5
    a8ae:	dd03      	ble.n	a8b8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2a8>
      delete[] dims_pointer_;
    a8b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    a8b2:	b108      	cbz	r0, a8b8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2a8>
    a8b4:	f00d ffe4 	bl	18880 <_ZdaPv>
      : size_(0) {
    a8b8:	2300      	movs	r3, #0
    a8ba:	9314      	str	r3, [sp, #80]	; 0x50
  inline int32_t DimensionsCount() const { return size_; }
    a8bc:	6823      	ldr	r3, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a8be:	2b04      	cmp	r3, #4
    a8c0:	dc0c      	bgt.n	a8dc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2cc>
    if (size_ > kMaxSmallSize) {
    a8c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a8c4:	2b05      	cmp	r3, #5
    a8c6:	dd03      	ble.n	a8d0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2c0>
      delete[] dims_pointer_;
    a8c8:	9815      	ldr	r0, [sp, #84]	; 0x54
    a8ca:	b108      	cbz	r0, a8d0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2c0>
    a8cc:	f00d ffd8 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
    a8d0:	2304      	movs	r3, #4
    a8d2:	9314      	str	r3, [sp, #80]	; 0x50
  inline int32_t DimensionsCount() const { return size_; }
    a8d4:	6820      	ldr	r0, [r4, #0]
    const int size_increase = new_shape_size - shape.DimensionsCount();
    a8d6:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    a8d8:	2300      	movs	r3, #0
    a8da:	e00c      	b.n	a8f6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2e6>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a8dc:	f00d ffe5 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    a8e0:	f00d ffe3 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    a8e4:	f00d ffe1 	bl	188aa <abort>
      dims_[i] = val;
    a8e8:	2101      	movs	r1, #1
    a8ea:	aa2a      	add	r2, sp, #168	; 0xa8
    a8ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a8f0:	f842 1c54 	str.w	r1, [r2, #-84]
    for (int i = 0; i < size_increase; ++i) {
    a8f4:	3301      	adds	r3, #1
    a8f6:	4298      	cmp	r0, r3
    a8f8:	dd0b      	ble.n	a912 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x302>
    TFLITE_DCHECK_GE(i, 0);
    a8fa:	2b00      	cmp	r3, #0
    a8fc:	dbf0      	blt.n	a8e0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d0>
    TFLITE_DCHECK_LT(i, size_);
    a8fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a900:	4293      	cmp	r3, r2
    a902:	daef      	bge.n	a8e4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d4>
    if (size_ > kMaxSmallSize) {
    a904:	2a05      	cmp	r2, #5
    a906:	ddef      	ble.n	a8e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d8>
      dims_pointer_[i] = val;
    a908:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a90a:	2101      	movs	r1, #1
    a90c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a910:	e7f0      	b.n	a8f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a912:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a914:	2b05      	cmp	r3, #5
    a916:	dd1a      	ble.n	a94e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x33e>
    a918:	9b15      	ldr	r3, [sp, #84]	; 0x54
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a91a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a91e:	6822      	ldr	r2, [r4, #0]
    a920:	2a05      	cmp	r2, #5
    a922:	dd16      	ble.n	a952 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x342>
    a924:	6861      	ldr	r1, [r4, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a926:	0092      	lsls	r2, r2, #2
    a928:	f00d ffd8 	bl	188dc <memcpy>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    a92c:	2300      	movs	r3, #0
    a92e:	9302      	str	r3, [sp, #8]
    a930:	46ba      	mov	sl, r7
    TFLITE_DCHECK_LT(i, size_);
    a932:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a934:	2b00      	cmp	r3, #0
    a936:	dd0e      	ble.n	a956 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x346>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a938:	2b05      	cmp	r3, #5
    a93a:	dd0e      	ble.n	a95a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34a>
    a93c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a93e:	681b      	ldr	r3, [r3, #0]
    a940:	9a02      	ldr	r2, [sp, #8]
    a942:	429a      	cmp	r2, r3
    a944:	f280 82be 	bge.w	aec4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8b4>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    a948:	2300      	movs	r3, #0
    a94a:	9307      	str	r3, [sp, #28]
    a94c:	e2a4      	b.n	ae98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x888>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a94e:	ab15      	add	r3, sp, #84	; 0x54
    a950:	e7e3      	b.n	a91a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x30a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a952:	1d21      	adds	r1, r4, #4
    a954:	e7e7      	b.n	a926 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x316>
    TFLITE_DCHECK_LT(i, size_);
    a956:	f00d ffa8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a95a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a95c:	e7f0      	b.n	a940 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x330>
    TFLITE_DCHECK_LT(i, size_);
    a95e:	f00d ffa4 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a962:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a964:	e2a1      	b.n	aeaa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x89a>
    TFLITE_DCHECK_LT(i, size_);
    a966:	f00d ffa0 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a96a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a96c:	e28b      	b.n	ae86 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x876>
    TFLITE_DCHECK_LT(i, size_);
    a96e:	f00d ff9c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a972:	9b18      	ldr	r3, [sp, #96]	; 0x60
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    a974:	4599      	cmp	r9, r3
    a976:	f280 827b 	bge.w	ae70 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x860>
          const int32_t input1_val =
              params.input1_offset +
    a97a:	f8db 2004 	ldr.w	r2, [fp, #4]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    a97e:	9902      	ldr	r1, [sp, #8]
    a980:	2900      	cmp	r1, #0
    a982:	f2c0 81ef 	blt.w	ad64 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x754>
    a986:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a988:	4299      	cmp	r1, r3
    a98a:	f280 81eb 	bge.w	ad64 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x754>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    a98e:	f1ba 0f00 	cmp.w	sl, #0
    a992:	f2c0 81e9 	blt.w	ad68 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x758>
    a996:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a998:	459a      	cmp	sl, r3
    a99a:	f280 81e5 	bge.w	ad68 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x758>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    a99e:	f1b8 0f00 	cmp.w	r8, #0
    a9a2:	f2c0 81e3 	blt.w	ad6c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x75c>
    a9a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a9a8:	4598      	cmp	r8, r3
    a9aa:	f280 81df 	bge.w	ad6c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x75c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    a9ae:	f1b9 0f00 	cmp.w	r9, #0
    a9b2:	f2c0 81dd 	blt.w	ad70 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x760>
    a9b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a9b8:	4599      	cmp	r9, r3
    a9ba:	f280 81d9 	bge.w	ad70 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x760>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    a9be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    a9c0:	fb03 f10a 	mul.w	r1, r3, sl
    a9c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a9c6:	9d02      	ldr	r5, [sp, #8]
    a9c8:	fb03 1305 	mla	r3, r3, r5, r1
    a9cc:	9928      	ldr	r1, [sp, #160]	; 0xa0
    a9ce:	fb01 f008 	mul.w	r0, r1, r8
    a9d2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    a9d4:	fb01 0109 	mla	r1, r1, r9, r0
         i3 * desc.strides[3];
    a9d8:	440b      	add	r3, r1
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
    a9da:	9906      	ldr	r1, [sp, #24]
    a9dc:	f931 7013 	ldrsh.w	r7, [r1, r3, lsl #1]
          const int32_t input1_val =
    a9e0:	443a      	add	r2, r7
          const int32_t input2_val =
              params.input2_offset +
    a9e2:	f8db 4008 	ldr.w	r4, [fp, #8]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    a9e6:	2d00      	cmp	r5, #0
    a9e8:	f2c0 81c4 	blt.w	ad74 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x764>
    a9ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a9ee:	429d      	cmp	r5, r3
    a9f0:	f280 81c0 	bge.w	ad74 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x764>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    a9f4:	f1ba 0f00 	cmp.w	sl, #0
    a9f8:	f2c0 81be 	blt.w	ad78 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x768>
    a9fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a9fe:	459a      	cmp	sl, r3
    aa00:	f280 81ba 	bge.w	ad78 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x768>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    aa04:	f1b8 0f00 	cmp.w	r8, #0
    aa08:	f2c0 81b8 	blt.w	ad7c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76c>
    aa0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    aa0e:	4598      	cmp	r8, r3
    aa10:	f280 81b4 	bge.w	ad7c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    aa14:	f1b9 0f00 	cmp.w	r9, #0
    aa18:	f2c0 81b2 	blt.w	ad80 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x770>
    aa1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    aa1e:	4599      	cmp	r9, r3
    aa20:	f280 81ae 	bge.w	ad80 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x770>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    aa24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    aa26:	fb03 f30a 	mul.w	r3, r3, sl
    aa2a:	991e      	ldr	r1, [sp, #120]	; 0x78
    aa2c:	9802      	ldr	r0, [sp, #8]
    aa2e:	fb01 3300 	mla	r3, r1, r0, r3
    aa32:	9920      	ldr	r1, [sp, #128]	; 0x80
    aa34:	fb01 f008 	mul.w	r0, r1, r8
    aa38:	9921      	ldr	r1, [sp, #132]	; 0x84
    aa3a:	fb01 0109 	mla	r1, r1, r9, r0
         i3 * desc.strides[3];
    aa3e:	440b      	add	r3, r1
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
    aa40:	9934      	ldr	r1, [sp, #208]	; 0xd0
    aa42:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
          const int32_t input2_val =
    aa46:	441c      	add	r4, r3
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
    aa48:	f8db 3018 	ldr.w	r3, [fp, #24]
          const int32_t shifted_input1_val =
    aa4c:	fa02 f703 	lsl.w	r7, r2, r3
          const int32_t shifted_input2_val =
    aa50:	409c      	lsls	r4, r3
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
    aa52:	f8db c01c 	ldr.w	ip, [fp, #28]
                  params.input1_shift);
    aa56:	f8db 5020 	ldr.w	r5, [fp, #32]
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    aa5a:	45bc      	cmp	ip, r7
    aa5c:	f000 8192 	beq.w	ad84 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x774>
    aa60:	2600      	movs	r6, #0
  std::int64_t a_64(a);
    aa62:	17fb      	asrs	r3, r7, #31
  std::int64_t b_64(b);
    aa64:	4660      	mov	r0, ip
    aa66:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    aa68:	fb07 f101 	mul.w	r1, r7, r1
    aa6c:	fb0c 1103 	mla	r1, ip, r3, r1
    aa70:	fba7 230c 	umull	r2, r3, r7, ip
    aa74:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    aa76:	2a00      	cmp	r2, #0
    aa78:	f173 0100 	sbcs.w	r1, r3, #0
    aa7c:	f2c0 8189 	blt.w	ad92 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x782>
    aa80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    aa84:	1852      	adds	r2, r2, r1
    aa86:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    aa8a:	4611      	mov	r1, r2
    aa8c:	4618      	mov	r0, r3
    aa8e:	2a00      	cmp	r2, #0
    aa90:	f173 0700 	sbcs.w	r7, r3, #0
    aa94:	f2c0 817f 	blt.w	ad96 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x786>
    aa98:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    aa9a:	ea41 0740 	orr.w	r7, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    aa9e:	2e00      	cmp	r6, #0
    aaa0:	f040 8181 	bne.w	ada6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x796>
  return RoundingDivideByPOT(
    aaa4:	426d      	negs	r5, r5

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    aaa6:	2d00      	cmp	r5, #0
    aaa8:	f2c0 8180 	blt.w	adac <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x79c>
  assert(exponent <= 31);
    aaac:	2d1f      	cmp	r5, #31
    aaae:	f300 8184 	bgt.w	adba <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7aa>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    aab2:	2601      	movs	r6, #1
    aab4:	fa06 f005 	lsl.w	r0, r6, r5
    aab8:	3801      	subs	r0, #1
    aaba:	f00b f970 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    aabe:	9000      	str	r0, [sp, #0]
  const IntegerType zero = Dup<IntegerType>(0);
    aac0:	2000      	movs	r0, #0
    aac2:	f00b f96c 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    aac6:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    aac8:	4630      	mov	r0, r6
    aaca:	f00b f968 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    aace:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    aad0:	9900      	ldr	r1, [sp, #0]
    aad2:	4638      	mov	r0, r7
    aad4:	f00b f964 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aad8:	9005      	str	r0, [sp, #20]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    aada:	4631      	mov	r1, r6
    aadc:	9800      	ldr	r0, [sp, #0]
    aade:	f00b f961 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    aae2:	4606      	mov	r6, r0
    aae4:	9904      	ldr	r1, [sp, #16]
    aae6:	4638      	mov	r0, r7
    aae8:	f00b f968 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    aaec:	9903      	ldr	r1, [sp, #12]
    aaee:	f00b f957 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aaf2:	4601      	mov	r1, r0
    aaf4:	4630      	mov	r0, r6
    aaf6:	f00b f957 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    aafa:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
    aafc:	4629      	mov	r1, r5
    aafe:	4638      	mov	r0, r7
    ab00:	f00b f950 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ab04:	4605      	mov	r5, r0
    ab06:	4631      	mov	r1, r6
    ab08:	9805      	ldr	r0, [sp, #20]
    ab0a:	f00b f95f 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ab0e:	9903      	ldr	r1, [sp, #12]
    ab10:	f00b f946 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ab14:	4601      	mov	r1, r0
    ab16:	4628      	mov	r0, r5
    ab18:	f00b f946 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ab1c:	9000      	str	r0, [sp, #0]
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
    ab1e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
                  params.input2_shift);
    ab22:	f8db 5028 	ldr.w	r5, [fp, #40]	; 0x28
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ab26:	42a2      	cmp	r2, r4
    ab28:	f000 814e 	beq.w	adc8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7b8>
    ab2c:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    ab30:	17e1      	asrs	r1, r4, #31
  std::int64_t b_64(b);
    ab32:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    ab34:	fb04 f307 	mul.w	r3, r4, r7
    ab38:	fb02 3101 	mla	r1, r2, r1, r3
    ab3c:	fba4 2302 	umull	r2, r3, r4, r2
    ab40:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ab42:	2a00      	cmp	r2, #0
    ab44:	f173 0100 	sbcs.w	r1, r3, #0
    ab48:	f2c0 8147 	blt.w	adda <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7ca>
    ab4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ab50:	1852      	adds	r2, r2, r1
    ab52:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ab56:	4611      	mov	r1, r2
    ab58:	4618      	mov	r0, r3
    ab5a:	2a00      	cmp	r2, #0
    ab5c:	f173 0400 	sbcs.w	r4, r3, #0
    ab60:	f2c0 813d 	blt.w	adde <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7ce>
    ab64:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ab66:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ab6a:	f1bc 0f00 	cmp.w	ip, #0
    ab6e:	f040 813e 	bne.w	adee <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7de>
    ab72:	426d      	negs	r5, r5
  assert(exponent >= 0);
    ab74:	2d00      	cmp	r5, #0
    ab76:	f2c0 813d 	blt.w	adf4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7e4>
  assert(exponent <= 31);
    ab7a:	2d1f      	cmp	r5, #31
    ab7c:	f300 8141 	bgt.w	ae02 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7f2>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ab80:	2701      	movs	r7, #1
    ab82:	fa07 f005 	lsl.w	r0, r7, r5
    ab86:	3801      	subs	r0, #1
    ab88:	f00b f909 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab8c:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ab8e:	2000      	movs	r0, #0
    ab90:	f00b f905 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab94:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    ab96:	4638      	mov	r0, r7
    ab98:	f00b f901 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ab9c:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    ab9e:	4631      	mov	r1, r6
    aba0:	4620      	mov	r0, r4
    aba2:	f00b f8fd 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aba6:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    aba8:	4639      	mov	r1, r7
    abaa:	4630      	mov	r0, r6
    abac:	f00b f8fa 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    abb0:	4606      	mov	r6, r0
    abb2:	9903      	ldr	r1, [sp, #12]
    abb4:	4620      	mov	r0, r4
    abb6:	f00b f901 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    abba:	9f04      	ldr	r7, [sp, #16]
    abbc:	4639      	mov	r1, r7
    abbe:	f00b f8ef 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    abc2:	4601      	mov	r1, r0
    abc4:	4630      	mov	r0, r6
    abc6:	f00b f8ef 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    abca:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
    abcc:	4629      	mov	r1, r5
    abce:	4620      	mov	r0, r4
    abd0:	f00b f8e8 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    abd4:	4604      	mov	r4, r0
    abd6:	4631      	mov	r1, r6
    abd8:	9805      	ldr	r0, [sp, #20]
    abda:	f00b f8f7 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    abde:	4639      	mov	r1, r7
    abe0:	f00b f8de 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    abe4:	4601      	mov	r1, r0
    abe6:	4620      	mov	r0, r4
    abe8:	f00b f8de 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    abec:	9b00      	ldr	r3, [sp, #0]
    abee:	4403      	add	r3, r0
    abf0:	461a      	mov	r2, r3
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
    abf2:	f8db 3010 	ldr.w	r3, [fp, #16]
    abf6:	f8db 5014 	ldr.w	r5, [fp, #20]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    abfa:	4293      	cmp	r3, r2
    abfc:	f000 8108 	beq.w	ae10 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x800>
    ac00:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    ac04:	4610      	mov	r0, r2
    ac06:	17d1      	asrs	r1, r2, #31
    ac08:	e9cd 0100 	strd	r0, r1, [sp]
  std::int64_t b_64(b);
    ac0c:	17df      	asrs	r7, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    ac0e:	fb02 f007 	mul.w	r0, r2, r7
    ac12:	9901      	ldr	r1, [sp, #4]
    ac14:	fb03 0101 	mla	r1, r3, r1, r0
    ac18:	fba2 2303 	umull	r2, r3, r2, r3
    ac1c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ac1e:	2a00      	cmp	r2, #0
    ac20:	f173 0100 	sbcs.w	r1, r3, #0
    ac24:	f2c0 80fd 	blt.w	ae22 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x812>
    ac28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ac2c:	1852      	adds	r2, r2, r1
    ac2e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ac32:	4611      	mov	r1, r2
    ac34:	4618      	mov	r0, r3
    ac36:	2a00      	cmp	r2, #0
    ac38:	f173 0400 	sbcs.w	r4, r3, #0
    ac3c:	f2c0 80f3 	blt.w	ae26 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x816>
    ac40:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ac42:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ac46:	f1bc 0f00 	cmp.w	ip, #0
    ac4a:	f040 80f4 	bne.w	ae36 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x826>
    ac4e:	426d      	negs	r5, r5
  assert(exponent >= 0);
    ac50:	2d00      	cmp	r5, #0
    ac52:	f2c0 80f3 	blt.w	ae3c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x82c>
  assert(exponent <= 31);
    ac56:	2d1f      	cmp	r5, #31
    ac58:	f300 80f7 	bgt.w	ae4a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x83a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ac5c:	2601      	movs	r6, #1
    ac5e:	fa06 f005 	lsl.w	r0, r6, r5
    ac62:	3801      	subs	r0, #1
    ac64:	f00b f89b 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ac68:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ac6a:	2000      	movs	r0, #0
    ac6c:	f00b f897 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ac70:	9000      	str	r0, [sp, #0]
  const IntegerType one = Dup<IntegerType>(1);
    ac72:	4630      	mov	r0, r6
    ac74:	f00b f893 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ac78:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    ac7a:	4639      	mov	r1, r7
    ac7c:	4620      	mov	r0, r4
    ac7e:	f00b f88f 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ac82:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ac84:	4631      	mov	r1, r6
    ac86:	4638      	mov	r0, r7
    ac88:	f00b f88c 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ac8c:	4607      	mov	r7, r0
    ac8e:	9900      	ldr	r1, [sp, #0]
    ac90:	4620      	mov	r0, r4
    ac92:	f00b f893 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ac96:	9e03      	ldr	r6, [sp, #12]
    ac98:	4631      	mov	r1, r6
    ac9a:	f00b f881 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ac9e:	4601      	mov	r1, r0
    aca0:	4638      	mov	r0, r7
    aca2:	f00b f881 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    aca6:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    aca8:	4629      	mov	r1, r5
    acaa:	4620      	mov	r0, r4
    acac:	f00b f87a 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    acb0:	4604      	mov	r4, r0
    acb2:	4639      	mov	r1, r7
    acb4:	9804      	ldr	r0, [sp, #16]
    acb6:	f00b f889 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    acba:	4631      	mov	r1, r6
    acbc:	f00b f870 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    acc0:	4601      	mov	r1, r0
    acc2:	4620      	mov	r0, r4
    acc4:	f00b f870 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
              params.output_offset;
    acc8:	f8db 300c 	ldr.w	r3, [fp, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
    accc:	4403      	add	r3, r0
          const int32_t raw_output =
    acce:	930e      	str	r3, [sp, #56]	; 0x38
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
    acd0:	f10b 0030 	add.w	r0, fp, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
    acd4:	f10b 022c 	add.w	r2, fp, #44	; 0x2c
      if (__a < __b)
    acd8:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
    acdc:	428b      	cmp	r3, r1
    acde:	f300 80bb 	bgt.w	ae58 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x848>
      if (__b < __a)
    ace2:	6813      	ldr	r3, [r2, #0]
    ace4:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
    ace8:	4299      	cmp	r1, r3
    acea:	dc00      	bgt.n	acee <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6de>
      return __a;
    acec:	4602      	mov	r2, r0
          const int32_t clamped_output =
    acee:	6810      	ldr	r0, [r2, #0]
  inline int32_t DimensionsCount() const { return size_; }
    acf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    acf2:	2b04      	cmp	r3, #4
    acf4:	f040 80b2 	bne.w	ae5c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x84c>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    acf8:	9a02      	ldr	r2, [sp, #8]
    acfa:	2a00      	cmp	r2, #0
    acfc:	f2c0 80b0 	blt.w	ae60 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x850>
    ad00:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ad02:	429a      	cmp	r2, r3
    ad04:	f280 80ac 	bge.w	ae60 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x850>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ad08:	f1ba 0f00 	cmp.w	sl, #0
    ad0c:	f2c0 80aa 	blt.w	ae64 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x854>
    ad10:	9916      	ldr	r1, [sp, #88]	; 0x58
    ad12:	458a      	cmp	sl, r1
    ad14:	f280 80a6 	bge.w	ae64 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x854>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ad18:	f1b8 0f00 	cmp.w	r8, #0
    ad1c:	f2c0 80a4 	blt.w	ae68 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x858>
    ad20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    ad22:	4590      	cmp	r8, r2
    ad24:	f280 80a0 	bge.w	ae68 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x858>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ad28:	f1b9 0f00 	cmp.w	r9, #0
    ad2c:	f2c0 809e 	blt.w	ae6c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x85c>
    ad30:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ad32:	4599      	cmp	r9, r3
    ad34:	f280 809a 	bge.w	ae6c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x85c>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ad38:	9c02      	ldr	r4, [sp, #8]
    ad3a:	fb01 a104 	mla	r1, r1, r4, sl
    ad3e:	fb01 8202 	mla	r2, r1, r2, r8
    ad42:	fb02 9303 	mla	r3, r2, r3, r9
          output_data[Offset(extended_output_shape, b, y, x, c)] =
    ad46:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    ad48:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    ad4c:	f109 0901 	add.w	r9, r9, #1
    TFLITE_DCHECK_LT(i, size_);
    ad50:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ad52:	2b03      	cmp	r3, #3
    ad54:	f77f ae0b 	ble.w	a96e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x35e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad58:	2b05      	cmp	r3, #5
    ad5a:	f77f ae0a 	ble.w	a972 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x362>
    ad5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ad60:	68db      	ldr	r3, [r3, #12]
    ad62:	e607      	b.n	a974 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x364>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    ad64:	f00d fda1 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    ad68:	f00d fd9f 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    ad6c:	f00d fd9d 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    ad70:	f00d fd9b 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    ad74:	f00d fd99 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    ad78:	f00d fd97 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    ad7c:	f00d fd95 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    ad80:	f00d fd93 	bl	188aa <abort>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ad84:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
    ad88:	d001      	beq.n	ad8e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x77e>
    ad8a:	2600      	movs	r6, #0
    ad8c:	e669      	b.n	aa62 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x452>
    ad8e:	2601      	movs	r6, #1
    ad90:	e667      	b.n	aa62 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x452>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ad92:	4951      	ldr	r1, [pc, #324]	; (aed8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    ad94:	e676      	b.n	aa84 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x474>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ad96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ad9a:	1851      	adds	r1, r2, r1
    ad9c:	f04f 0000 	mov.w	r0, #0
    ada0:	eb43 0000 	adc.w	r0, r3, r0
    ada4:	e678      	b.n	aa98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x488>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ada6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    adaa:	e67b      	b.n	aaa4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x494>
  assert(exponent >= 0);
    adac:	4b4b      	ldr	r3, [pc, #300]	; (aedc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    adae:	4a4c      	ldr	r2, [pc, #304]	; (aee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    adb0:	f44f 71b3 	mov.w	r1, #358	; 0x166
    adb4:	484b      	ldr	r0, [pc, #300]	; (aee4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    adb6:	f007 fd69 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    adba:	4b4b      	ldr	r3, [pc, #300]	; (aee8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    adbc:	4a48      	ldr	r2, [pc, #288]	; (aee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    adbe:	f240 1167 	movw	r1, #359	; 0x167
    adc2:	4848      	ldr	r0, [pc, #288]	; (aee4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    adc4:	f007 fd62 	bl	1288c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    adc8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    adcc:	d002      	beq.n	add4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7c4>
    adce:	f04f 0c00 	mov.w	ip, #0
    add2:	e6ad      	b.n	ab30 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x520>
    add4:	f04f 0c01 	mov.w	ip, #1
    add8:	e6aa      	b.n	ab30 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x520>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    adda:	493f      	ldr	r1, [pc, #252]	; (aed8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    addc:	e6b8      	b.n	ab50 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x540>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    adde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ade2:	1851      	adds	r1, r2, r1
    ade4:	f04f 0000 	mov.w	r0, #0
    ade8:	eb43 0000 	adc.w	r0, r3, r0
    adec:	e6ba      	b.n	ab64 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x554>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    adee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    adf2:	e6be      	b.n	ab72 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x562>
  assert(exponent >= 0);
    adf4:	4b39      	ldr	r3, [pc, #228]	; (aedc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    adf6:	4a3a      	ldr	r2, [pc, #232]	; (aee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    adf8:	f44f 71b3 	mov.w	r1, #358	; 0x166
    adfc:	4839      	ldr	r0, [pc, #228]	; (aee4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    adfe:	f007 fd45 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    ae02:	4b39      	ldr	r3, [pc, #228]	; (aee8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    ae04:	4a36      	ldr	r2, [pc, #216]	; (aee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    ae06:	f240 1167 	movw	r1, #359	; 0x167
    ae0a:	4836      	ldr	r0, [pc, #216]	; (aee4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    ae0c:	f007 fd3e 	bl	1288c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ae10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ae14:	d002      	beq.n	ae1c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x80c>
    ae16:	f04f 0c00 	mov.w	ip, #0
    ae1a:	e6f3      	b.n	ac04 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x5f4>
    ae1c:	f04f 0c01 	mov.w	ip, #1
    ae20:	e6f0      	b.n	ac04 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x5f4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ae22:	492d      	ldr	r1, [pc, #180]	; (aed8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    ae24:	e702      	b.n	ac2c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x61c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ae26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ae2a:	1851      	adds	r1, r2, r1
    ae2c:	f04f 0000 	mov.w	r0, #0
    ae30:	eb43 0000 	adc.w	r0, r3, r0
    ae34:	e704      	b.n	ac40 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x630>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ae36:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ae3a:	e708      	b.n	ac4e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x63e>
  assert(exponent >= 0);
    ae3c:	4b27      	ldr	r3, [pc, #156]	; (aedc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    ae3e:	4a28      	ldr	r2, [pc, #160]	; (aee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    ae40:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ae44:	4827      	ldr	r0, [pc, #156]	; (aee4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    ae46:	f007 fd21 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    ae4a:	4b27      	ldr	r3, [pc, #156]	; (aee8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    ae4c:	4a24      	ldr	r2, [pc, #144]	; (aee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    ae4e:	f240 1167 	movw	r1, #359	; 0x167
    ae52:	4824      	ldr	r0, [pc, #144]	; (aee4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    ae54:	f007 fd1a 	bl	1288c <__assert_func>
	return __b;
    ae58:	aa0e      	add	r2, sp, #56	; 0x38
    ae5a:	e742      	b.n	ace2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6d2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ae5c:	f00d fd25 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ae60:	f00d fd23 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ae64:	f00d fd21 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ae68:	f00d fd1f 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ae6c:	f00d fd1d 	bl	188aa <abort>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    ae70:	f108 0801 	add.w	r8, r8, #1
    TFLITE_DCHECK_LT(i, size_);
    ae74:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ae76:	2b02      	cmp	r3, #2
    ae78:	f77f ad75 	ble.w	a966 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x356>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ae7c:	2b05      	cmp	r3, #5
    ae7e:	f77f ad74 	ble.w	a96a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x35a>
    ae82:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ae84:	689b      	ldr	r3, [r3, #8]
    ae86:	4598      	cmp	r8, r3
    ae88:	da02      	bge.n	ae90 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x880>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    ae8a:	f04f 0900 	mov.w	r9, #0
    ae8e:	e75f      	b.n	ad50 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x740>
    ae90:	46da      	mov	sl, fp
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    ae92:	9b07      	ldr	r3, [sp, #28]
    ae94:	3301      	adds	r3, #1
    ae96:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    ae98:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ae9a:	2b01      	cmp	r3, #1
    ae9c:	f77f ad5f 	ble.w	a95e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aea0:	2b05      	cmp	r3, #5
    aea2:	f77f ad5e 	ble.w	a962 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x352>
    aea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    aea8:	685b      	ldr	r3, [r3, #4]
    aeaa:	9a07      	ldr	r2, [sp, #28]
    aeac:	429a      	cmp	r2, r3
    aeae:	da05      	bge.n	aebc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8ac>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    aeb0:	f04f 0900 	mov.w	r9, #0
    aeb4:	46c8      	mov	r8, r9
    aeb6:	46d3      	mov	fp, sl
    aeb8:	4692      	mov	sl, r2
    aeba:	e7db      	b.n	ae74 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x864>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    aebc:	9b02      	ldr	r3, [sp, #8]
    aebe:	3301      	adds	r3, #1
    aec0:	9302      	str	r3, [sp, #8]
    aec2:	e536      	b.n	a932 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x322>
    if (size_ > kMaxSmallSize) {
    aec4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aec6:	2b05      	cmp	r3, #5
    aec8:	dd03      	ble.n	aed2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c2>
      delete[] dims_pointer_;
    aeca:	9815      	ldr	r0, [sp, #84]	; 0x54
    aecc:	b108      	cbz	r0, aed2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c2>
    aece:	f00d fcd7 	bl	18880 <_ZdaPv>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
    aed2:	b02b      	add	sp, #172	; 0xac
    aed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aed8:	c0000001 	.word	0xc0000001
    aedc:	000343c4 	.word	0x000343c4
    aee0:	000343d4 	.word	0x000343d4
    aee4:	0003442c 	.word	0x0003442c
    aee8:	00034488 	.word	0x00034488

0000aeec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>:
      }
    }
  }
}

inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
    aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aef0:	b085      	sub	sp, #20
    aef2:	4614      	mov	r4, r2
  const int32_t input1_val = params.input1_offset + x;
    aef4:	6852      	ldr	r2, [r2, #4]
    aef6:	4402      	add	r2, r0
  const int32_t input2_val = params.input2_offset + y;
    aef8:	68a6      	ldr	r6, [r4, #8]
    aefa:	440e      	add	r6, r1
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
    aefc:	69a1      	ldr	r1, [r4, #24]
    aefe:	408a      	lsls	r2, r1
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
    af00:	408e      	lsls	r6, r1
  const int32_t scaled_input1_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
    af02:	69e3      	ldr	r3, [r4, #28]
    af04:	6a27      	ldr	r7, [r4, #32]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    af06:	4293      	cmp	r3, r2
    af08:	f000 8143 	beq.w	b192 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2a6>
    af0c:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    af10:	ea4f 7be2 	mov.w	fp, r2, asr #31
  std::int64_t b_64(b);
    af14:	ea4f 79e3 	mov.w	r9, r3, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    af18:	fb02 f009 	mul.w	r0, r2, r9
    af1c:	fb03 010b 	mla	r1, r3, fp, r0
    af20:	fba2 2303 	umull	r2, r3, r2, r3
    af24:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    af26:	2a00      	cmp	r2, #0
    af28:	f173 0100 	sbcs.w	r1, r3, #0
    af2c:	f2c0 813a 	blt.w	b1a4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2b8>
    af30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    af34:	1852      	adds	r2, r2, r1
    af36:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    af3a:	4611      	mov	r1, r2
    af3c:	461d      	mov	r5, r3
    af3e:	2a00      	cmp	r2, #0
    af40:	f173 0000 	sbcs.w	r0, r3, #0
    af44:	f2c0 8130 	blt.w	b1a8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2bc>
    af48:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    af4a:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    af4e:	f1bc 0f00 	cmp.w	ip, #0
    af52:	f040 8131 	bne.w	b1b8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2cc>
  return RoundingDivideByPOT(
    af56:	427f      	negs	r7, r7
  assert(exponent >= 0);
    af58:	2f00      	cmp	r7, #0
    af5a:	f2c0 8130 	blt.w	b1be <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2d2>
  assert(exponent <= 31);
    af5e:	2f1f      	cmp	r7, #31
    af60:	f300 8134 	bgt.w	b1cc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2e0>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    af64:	f04f 0b01 	mov.w	fp, #1
    af68:	fa0b f007 	lsl.w	r0, fp, r7
    af6c:	3801      	subs	r0, #1
    af6e:	f00a ff16 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af72:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
    af74:	2000      	movs	r0, #0
    af76:	f00a ff12 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af7a:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    af7c:	4658      	mov	r0, fp
    af7e:	f00a ff0e 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af82:	4680      	mov	r8, r0
  const IntegerType remainder = BitAnd(x, mask);
    af84:	4649      	mov	r1, r9
    af86:	4628      	mov	r0, r5
    af88:	f00a ff0a 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    af8c:	9001      	str	r0, [sp, #4]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    af8e:	4659      	mov	r1, fp
    af90:	4648      	mov	r0, r9
    af92:	f00a ff07 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    af96:	4681      	mov	r9, r0
    af98:	4651      	mov	r1, sl
    af9a:	4628      	mov	r0, r5
    af9c:	f00a ff0e 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    afa0:	4641      	mov	r1, r8
    afa2:	f00a fefd 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afa6:	4601      	mov	r1, r0
    afa8:	4648      	mov	r0, r9
    afaa:	f00a fefd 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    afae:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    afb0:	4639      	mov	r1, r7
    afb2:	4628      	mov	r0, r5
    afb4:	f00a fef6 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    afb8:	4605      	mov	r5, r0
    afba:	4649      	mov	r1, r9
    afbc:	9801      	ldr	r0, [sp, #4]
    afbe:	f00a ff05 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    afc2:	4641      	mov	r1, r8
    afc4:	f00a feec 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afc8:	4601      	mov	r1, r0
    afca:	4628      	mov	r0, r5
    afcc:	f00a feec 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    afd0:	9001      	str	r0, [sp, #4]
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
    afd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    afd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    afd6:	42b2      	cmp	r2, r6
    afd8:	f000 80ff 	beq.w	b1da <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2ee>
    afdc:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    afde:	ea4f 79e6 	mov.w	r9, r6, asr #31
  std::int64_t b_64(b);
    afe2:	ea4f 7be2 	mov.w	fp, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    afe6:	fb06 f10b 	mul.w	r1, r6, fp
    afea:	fb02 1109 	mla	r1, r2, r9, r1
    afee:	fba6 2302 	umull	r2, r3, r6, r2
    aff2:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    aff4:	2a00      	cmp	r2, #0
    aff6:	f173 0100 	sbcs.w	r1, r3, #0
    affa:	f2c0 80f5 	blt.w	b1e8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2fc>
    affe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b002:	1852      	adds	r2, r2, r1
    b004:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b008:	4611      	mov	r1, r2
    b00a:	461d      	mov	r5, r3
    b00c:	2a00      	cmp	r2, #0
    b00e:	f173 0600 	sbcs.w	r6, r3, #0
    b012:	f2c0 80eb 	blt.w	b1ec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x300>
    b016:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    b018:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b01c:	2f00      	cmp	r7, #0
    b01e:	f040 80ed 	bne.w	b1fc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x310>
    b022:	4246      	negs	r6, r0
  assert(exponent >= 0);
    b024:	2e00      	cmp	r6, #0
    b026:	f2c0 80ec 	blt.w	b202 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x316>
  assert(exponent <= 31);
    b02a:	2e1f      	cmp	r6, #31
    b02c:	f300 80f0 	bgt.w	b210 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x324>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b030:	f04f 0b01 	mov.w	fp, #1
    b034:	fa0b f006 	lsl.w	r0, fp, r6
    b038:	3801      	subs	r0, #1
    b03a:	f00a feb0 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b03e:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    b040:	2000      	movs	r0, #0
    b042:	f00a feac 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b046:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    b048:	4658      	mov	r0, fp
    b04a:	f00a fea8 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b04e:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    b050:	4641      	mov	r1, r8
    b052:	4628      	mov	r0, r5
    b054:	f00a fea4 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b058:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b05a:	4659      	mov	r1, fp
    b05c:	4640      	mov	r0, r8
    b05e:	f00a fea1 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b062:	4680      	mov	r8, r0
    b064:	4651      	mov	r1, sl
    b066:	4628      	mov	r0, r5
    b068:	f00a fea8 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b06c:	4639      	mov	r1, r7
    b06e:	f00a fe97 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b072:	4601      	mov	r1, r0
    b074:	4640      	mov	r0, r8
    b076:	f00a fe97 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b07a:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    b07c:	4631      	mov	r1, r6
    b07e:	4628      	mov	r0, r5
    b080:	f00a fe90 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b084:	4605      	mov	r5, r0
    b086:	4641      	mov	r1, r8
    b088:	4648      	mov	r0, r9
    b08a:	f00a fe9f 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b08e:	4639      	mov	r1, r7
    b090:	f00a fe86 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b094:	4601      	mov	r1, r0
    b096:	4628      	mov	r0, r5
    b098:	f00a fe86 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    b09c:	9b01      	ldr	r3, [sp, #4]
    b09e:	4403      	add	r3, r0
    b0a0:	461a      	mov	r2, r3
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          raw_sum, params.output_multiplier, params.output_shift) +
    b0a2:	6923      	ldr	r3, [r4, #16]
    b0a4:	6961      	ldr	r1, [r4, #20]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b0a6:	4293      	cmp	r3, r2
    b0a8:	f000 80b9 	beq.w	b21e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x332>
    b0ac:	2000      	movs	r0, #0
  std::int64_t a_64(a);
    b0ae:	17d7      	asrs	r7, r2, #31
  std::int64_t b_64(b);
    b0b0:	ea4f 79e3 	mov.w	r9, r3, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    b0b4:	fb02 f509 	mul.w	r5, r2, r9
    b0b8:	fb03 5507 	mla	r5, r3, r7, r5
    b0bc:	fba2 2303 	umull	r2, r3, r2, r3
    b0c0:	442b      	add	r3, r5
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b0c2:	2a00      	cmp	r2, #0
    b0c4:	f173 0500 	sbcs.w	r5, r3, #0
    b0c8:	f2c0 80b0 	blt.w	b22c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x340>
    b0cc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b0d0:	1952      	adds	r2, r2, r5
    b0d2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
    b0d6:	4615      	mov	r5, r2
    b0d8:	461e      	mov	r6, r3
    b0da:	2a00      	cmp	r2, #0
    b0dc:	f173 0700 	sbcs.w	r7, r3, #0
    b0e0:	f2c0 80a6 	blt.w	b230 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x344>
    b0e4:	0fed      	lsrs	r5, r5, #31
  std::int32_t ab_x2_high32 =
    b0e6:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b0ea:	2800      	cmp	r0, #0
    b0ec:	f040 80a8 	bne.w	b240 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x354>
    b0f0:	424e      	negs	r6, r1
  assert(exponent >= 0);
    b0f2:	2e00      	cmp	r6, #0
    b0f4:	f2c0 80a7 	blt.w	b246 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x35a>
  assert(exponent <= 31);
    b0f8:	2e1f      	cmp	r6, #31
    b0fa:	f300 80ab 	bgt.w	b254 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x368>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b0fe:	f04f 0b01 	mov.w	fp, #1
    b102:	fa0b f006 	lsl.w	r0, fp, r6
    b106:	3801      	subs	r0, #1
    b108:	f00a fe49 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b10c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    b10e:	2000      	movs	r0, #0
    b110:	f00a fe45 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b114:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    b116:	4658      	mov	r0, fp
    b118:	f00a fe41 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b11c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    b11e:	4641      	mov	r1, r8
    b120:	4628      	mov	r0, r5
    b122:	f00a fe3d 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b126:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b128:	4659      	mov	r1, fp
    b12a:	4640      	mov	r0, r8
    b12c:	f00a fe3a 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b130:	4680      	mov	r8, r0
    b132:	4651      	mov	r1, sl
    b134:	4628      	mov	r0, r5
    b136:	f00a fe41 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b13a:	4639      	mov	r1, r7
    b13c:	f00a fe30 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b140:	4601      	mov	r1, r0
    b142:	4640      	mov	r0, r8
    b144:	f00a fe30 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b148:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    b14a:	4631      	mov	r1, r6
    b14c:	4628      	mov	r0, r5
    b14e:	f00a fe29 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b152:	4605      	mov	r5, r0
    b154:	4641      	mov	r1, r8
    b156:	4648      	mov	r0, r9
    b158:	f00a fe38 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b15c:	4639      	mov	r1, r7
    b15e:	f00a fe1f 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b162:	4601      	mov	r1, r0
    b164:	4628      	mov	r0, r5
    b166:	f00a fe1f 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
      params.output_offset;
    b16a:	68e3      	ldr	r3, [r4, #12]
          raw_sum, params.output_multiplier, params.output_shift) +
    b16c:	4418      	add	r0, r3
      params.output_offset;
    b16e:	9003      	str	r0, [sp, #12]
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
    b170:	f104 0530 	add.w	r5, r4, #48	; 0x30
               std::max(params.quantized_activation_min, raw_output));
    b174:	f104 032c 	add.w	r3, r4, #44	; 0x2c
      if (__a < __b)
    b178:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    b17a:	4290      	cmp	r0, r2
    b17c:	dc71      	bgt.n	b262 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x376>
      if (__b < __a)
    b17e:	681a      	ldr	r2, [r3, #0]
    b180:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b182:	4291      	cmp	r1, r2
    b184:	dc00      	bgt.n	b188 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x29c>
      return __a;
    b186:	462b      	mov	r3, r5
  return static_cast<int8_t>(clamped_output);
}
    b188:	f993 0000 	ldrsb.w	r0, [r3]
    b18c:	b005      	add	sp, #20
    b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b192:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b196:	d002      	beq.n	b19e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2b2>
    b198:	f04f 0c00 	mov.w	ip, #0
    b19c:	e6b8      	b.n	af10 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x24>
    b19e:	f04f 0c01 	mov.w	ip, #1
    b1a2:	e6b5      	b.n	af10 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x24>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b1a4:	4930      	ldr	r1, [pc, #192]	; (b268 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b1a6:	e6c5      	b.n	af34 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x48>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b1a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b1ac:	1851      	adds	r1, r2, r1
    b1ae:	f04f 0500 	mov.w	r5, #0
    b1b2:	eb43 0505 	adc.w	r5, r3, r5
    b1b6:	e6c7      	b.n	af48 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x5c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b1b8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b1bc:	e6cb      	b.n	af56 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x6a>
  assert(exponent >= 0);
    b1be:	4b2b      	ldr	r3, [pc, #172]	; (b26c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b1c0:	4a2b      	ldr	r2, [pc, #172]	; (b270 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b1c2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b1c6:	482b      	ldr	r0, [pc, #172]	; (b274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b1c8:	f007 fb60 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    b1cc:	4b2a      	ldr	r3, [pc, #168]	; (b278 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b1ce:	4a28      	ldr	r2, [pc, #160]	; (b270 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b1d0:	f240 1167 	movw	r1, #359	; 0x167
    b1d4:	4827      	ldr	r0, [pc, #156]	; (b274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b1d6:	f007 fb59 	bl	1288c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b1da:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    b1de:	d001      	beq.n	b1e4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2f8>
    b1e0:	2700      	movs	r7, #0
    b1e2:	e6fc      	b.n	afde <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xf2>
    b1e4:	2701      	movs	r7, #1
    b1e6:	e6fa      	b.n	afde <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xf2>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b1e8:	491f      	ldr	r1, [pc, #124]	; (b268 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b1ea:	e70a      	b.n	b002 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x116>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b1ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b1f0:	1851      	adds	r1, r2, r1
    b1f2:	f04f 0500 	mov.w	r5, #0
    b1f6:	eb43 0505 	adc.w	r5, r3, r5
    b1fa:	e70c      	b.n	b016 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x12a>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b1fc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b200:	e70f      	b.n	b022 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x136>
  assert(exponent >= 0);
    b202:	4b1a      	ldr	r3, [pc, #104]	; (b26c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b204:	4a1a      	ldr	r2, [pc, #104]	; (b270 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b206:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b20a:	481a      	ldr	r0, [pc, #104]	; (b274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b20c:	f007 fb3e 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    b210:	4b19      	ldr	r3, [pc, #100]	; (b278 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b212:	4a17      	ldr	r2, [pc, #92]	; (b270 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b214:	f240 1167 	movw	r1, #359	; 0x167
    b218:	4816      	ldr	r0, [pc, #88]	; (b274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b21a:	f007 fb37 	bl	1288c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b21e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b222:	d001      	beq.n	b228 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x33c>
    b224:	2000      	movs	r0, #0
    b226:	e742      	b.n	b0ae <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1c2>
    b228:	2001      	movs	r0, #1
    b22a:	e740      	b.n	b0ae <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1c2>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b22c:	4d0e      	ldr	r5, [pc, #56]	; (b268 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b22e:	e74f      	b.n	b0d0 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b230:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b234:	1955      	adds	r5, r2, r5
    b236:	f04f 0600 	mov.w	r6, #0
    b23a:	eb43 0606 	adc.w	r6, r3, r6
    b23e:	e751      	b.n	b0e4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1f8>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b240:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b244:	e754      	b.n	b0f0 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x204>
  assert(exponent >= 0);
    b246:	4b09      	ldr	r3, [pc, #36]	; (b26c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b248:	4a09      	ldr	r2, [pc, #36]	; (b270 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b24a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b24e:	4809      	ldr	r0, [pc, #36]	; (b274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b250:	f007 fb1c 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    b254:	4b08      	ldr	r3, [pc, #32]	; (b278 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b256:	4a06      	ldr	r2, [pc, #24]	; (b270 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b258:	f240 1167 	movw	r1, #359	; 0x167
    b25c:	4805      	ldr	r0, [pc, #20]	; (b274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b25e:	f007 fb15 	bl	1288c <__assert_func>
	return __b;
    b262:	ab03      	add	r3, sp, #12
    b264:	e78b      	b.n	b17e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x292>
    b266:	bf00      	nop
    b268:	c0000001 	.word	0xc0000001
    b26c:	000343c4 	.word	0x000343c4
    b270:	000343d4 	.word	0x000343d4
    b274:	0003442c 	.word	0x0003442c
    b278:	00034488 	.word	0x00034488

0000b27c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:
                              TfLiteEvalTensor* output) {
    b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b280:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
    b284:	4680      	mov	r8, r0
    b286:	9fa2      	ldr	r7, [sp, #648]	; 0x288
    b288:	9ea3      	ldr	r6, [sp, #652]	; 0x28c
    b28a:	9da4      	ldr	r5, [sp, #656]	; 0x290
  op_params.left_shift = data->left_shift;
    b28c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b28e:	922e      	str	r2, [sp, #184]	; 0xb8
  op_params.input1_offset = data->input1_offset;
    b290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b292:	9229      	str	r2, [sp, #164]	; 0xa4
  op_params.input1_multiplier = data->input1_multiplier;
    b294:	695a      	ldr	r2, [r3, #20]
    b296:	922f      	str	r2, [sp, #188]	; 0xbc
  op_params.input1_shift = data->input1_shift;
    b298:	685a      	ldr	r2, [r3, #4]
    b29a:	9230      	str	r2, [sp, #192]	; 0xc0
  op_params.input2_offset = data->input2_offset;
    b29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b29e:	922a      	str	r2, [sp, #168]	; 0xa8
  op_params.input2_multiplier = data->input2_multiplier;
    b2a0:	699a      	ldr	r2, [r3, #24]
    b2a2:	9231      	str	r2, [sp, #196]	; 0xc4
  op_params.input2_shift = data->input2_shift;
    b2a4:	689a      	ldr	r2, [r3, #8]
    b2a6:	9232      	str	r2, [sp, #200]	; 0xc8
  op_params.output_offset = data->output_offset;
    b2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    b2aa:	922b      	str	r2, [sp, #172]	; 0xac
  op_params.output_multiplier = data->output_multiplier;
    b2ac:	69da      	ldr	r2, [r3, #28]
    b2ae:	922c      	str	r2, [sp, #176]	; 0xb0
  op_params.output_shift = data->output_shift;
    b2b0:	6a1a      	ldr	r2, [r3, #32]
    b2b2:	922d      	str	r2, [sp, #180]	; 0xb4
  SetActivationParams(data->output_activation_min, data->output_activation_max,
    b2b4:	68da      	ldr	r2, [r3, #12]
    b2b6:	691b      	ldr	r3, [r3, #16]
  params->float_activation_max = max;
}

template <typename P>
inline void SetActivationParams(int32_t min, int32_t max, P* params) {
  params->quantized_activation_min = min;
    b2b8:	9233      	str	r2, [sp, #204]	; 0xcc
  params->quantized_activation_max = max;
    b2ba:	9334      	str	r3, [sp, #208]	; 0xd0
      tflite::micro::GetTensorShape(input1),
    b2bc:	4639      	mov	r1, r7
    b2be:	a842      	add	r0, sp, #264	; 0x108
    b2c0:	f00b ff18 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
    b2c4:	4631      	mov	r1, r6
    b2c6:	a848      	add	r0, sp, #288	; 0x120
    b2c8:	f00b ff14 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
    b2cc:	9a42      	ldr	r2, [sp, #264]	; 0x108
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());
    b2ce:	9297      	str	r2, [sp, #604]	; 0x25c
    b2d0:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b2d2:	9396      	str	r3, [sp, #600]	; 0x258
      if (__a < __b)
    b2d4:	429a      	cmp	r2, r3
    b2d6:	db11      	blt.n	b2fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x80>
      return __a;
    b2d8:	ab97      	add	r3, sp, #604	; 0x25c
    b2da:	681c      	ldr	r4, [r3, #0]

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    b2dc:	2304      	movs	r3, #4
    b2de:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    size_ = dimensions_count;
    b2e2:	9412      	str	r4, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    b2e4:	2c05      	cmp	r4, #5
    b2e6:	dd07      	ble.n	b2f8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c>
      dims_pointer_ = new int32_t[dimensions_count];
    b2e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b2ec:	429c      	cmp	r4, r3
    b2ee:	d207      	bcs.n	b300 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x84>
    b2f0:	00a0      	lsls	r0, r4, #2
    b2f2:	f00d fad8 	bl	188a6 <_Znaj>
    b2f6:	9013      	str	r0, [sp, #76]	; 0x4c
    for (int i = 0; i < shape_size; ++i) {
    b2f8:	2300      	movs	r3, #0
  }
    b2fa:	e00e      	b.n	b31a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9e>
	return __b;
    b2fc:	ab96      	add	r3, sp, #600	; 0x258
    b2fe:	e7ec      	b.n	b2da <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e>
      dims_pointer_ = new int32_t[dimensions_count];
    b300:	f04f 30ff 	mov.w	r0, #4294967295
    b304:	e7f5      	b.n	b2f2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x76>
    TFLITE_DCHECK_GE(i, 0);
    b306:	f00d fad0 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b30a:	f00d face 	bl	188aa <abort>
      dims_[i] = val;
    b30e:	aa12      	add	r2, sp, #72	; 0x48
    b310:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b314:	2101      	movs	r1, #1
    b316:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < shape_size; ++i) {
    b318:	3301      	adds	r3, #1
    b31a:	429c      	cmp	r4, r3
    b31c:	dd0b      	ble.n	b336 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xba>
    TFLITE_DCHECK_GE(i, 0);
    b31e:	2b00      	cmp	r3, #0
    b320:	dbf1      	blt.n	b306 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x8a>
    TFLITE_DCHECK_LT(i, size_);
    b322:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b324:	4293      	cmp	r3, r2
    b326:	daf0      	bge.n	b30a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x8e>
    if (size_ > kMaxSmallSize) {
    b328:	2a05      	cmp	r2, #5
    b32a:	ddf0      	ble.n	b30e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x92>
      dims_pointer_[i] = val;
    b32c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b32e:	2101      	movs	r1, #1
    b330:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b334:	e7f0      	b.n	b318 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c>
      : size_(0) {
    b336:	2300      	movs	r3, #0
    b338:	9318      	str	r3, [sp, #96]	; 0x60
  inline int32_t DimensionsCount() const { return size_; }
    b33a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b33c:	429c      	cmp	r4, r3
    b33e:	db15      	blt.n	b36c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf0>
    if (size_ > kMaxSmallSize) {
    b340:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b342:	2b05      	cmp	r3, #5
    b344:	dd03      	ble.n	b34e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2>
      delete[] dims_pointer_;
    b346:	9819      	ldr	r0, [sp, #100]	; 0x64
    b348:	b108      	cbz	r0, b34e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2>
    b34a:	f00d fa99 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
    b34e:	9418      	str	r4, [sp, #96]	; 0x60
    if (dimensions_count > kMaxSmallSize) {
    b350:	2c05      	cmp	r4, #5
    b352:	dd07      	ble.n	b364 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe8>
      dims_pointer_ = new int32_t[dimensions_count];
    b354:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b358:	429c      	cmp	r4, r3
    b35a:	d209      	bcs.n	b370 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf4>
    b35c:	00a0      	lsls	r0, r4, #2
    b35e:	f00d faa2 	bl	188a6 <_Znaj>
    b362:	9019      	str	r0, [sp, #100]	; 0x64
  inline int32_t DimensionsCount() const { return size_; }
    b364:	9842      	ldr	r0, [sp, #264]	; 0x108
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b366:	1a20      	subs	r0, r4, r0
    for (int i = 0; i < size_increase; ++i) {
    b368:	2300      	movs	r3, #0
    b36a:	e00e      	b.n	b38a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b36c:	f00d fa9d 	bl	188aa <abort>
      dims_pointer_ = new int32_t[dimensions_count];
    b370:	f04f 30ff 	mov.w	r0, #4294967295
    b374:	e7f3      	b.n	b35e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe2>
    TFLITE_DCHECK_GE(i, 0);
    b376:	f00d fa98 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b37a:	f00d fa96 	bl	188aa <abort>
      dims_[i] = val;
    b37e:	aa18      	add	r2, sp, #96	; 0x60
    b380:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b384:	2101      	movs	r1, #1
    b386:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    b388:	3301      	adds	r3, #1
    b38a:	4298      	cmp	r0, r3
    b38c:	dd0b      	ble.n	b3a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x12a>
    TFLITE_DCHECK_GE(i, 0);
    b38e:	2b00      	cmp	r3, #0
    b390:	dbf1      	blt.n	b376 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    b392:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b394:	4293      	cmp	r3, r2
    b396:	daf0      	bge.n	b37a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xfe>
    if (size_ > kMaxSmallSize) {
    b398:	2a05      	cmp	r2, #5
    b39a:	ddf0      	ble.n	b37e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x102>
      dims_pointer_[i] = val;
    b39c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    b39e:	2101      	movs	r1, #1
    b3a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b3a4:	e7f0      	b.n	b388 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b3a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b3a8:	2b05      	cmp	r3, #5
    b3aa:	dd1e      	ble.n	b3ea <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x16e>
    b3ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b3ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b3b2:	9a42      	ldr	r2, [sp, #264]	; 0x108
    b3b4:	2a05      	cmp	r2, #5
    b3b6:	dd1a      	ble.n	b3ee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x172>
    b3b8:	9943      	ldr	r1, [sp, #268]	; 0x10c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b3ba:	0092      	lsls	r2, r2, #2
    b3bc:	f00d fa8e 	bl	188dc <memcpy>
      : size_(0) {
    b3c0:	2300      	movs	r3, #0
    b3c2:	9320      	str	r3, [sp, #128]	; 0x80
  inline int32_t DimensionsCount() const { return size_; }
    b3c4:	9b48      	ldr	r3, [sp, #288]	; 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b3c6:	429c      	cmp	r4, r3
    b3c8:	db13      	blt.n	b3f2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x176>
    if (size_ > kMaxSmallSize) {
    b3ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b3cc:	2b05      	cmp	r3, #5
    b3ce:	dd03      	ble.n	b3d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
      delete[] dims_pointer_;
    b3d0:	9821      	ldr	r0, [sp, #132]	; 0x84
    b3d2:	b108      	cbz	r0, b3d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
    b3d4:	f00d fa54 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
    b3d8:	9420      	str	r4, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    b3da:	2c05      	cmp	r4, #5
    b3dc:	dd10      	ble.n	b400 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x184>
      dims_pointer_ = new int32_t[dimensions_count];
    b3de:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b3e2:	429c      	cmp	r4, r3
    b3e4:	d207      	bcs.n	b3f6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x17a>
    b3e6:	00a0      	lsls	r0, r4, #2
    b3e8:	e007      	b.n	b3fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b3ea:	ab19      	add	r3, sp, #100	; 0x64
    b3ec:	e7df      	b.n	b3ae <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x132>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b3ee:	a943      	add	r1, sp, #268	; 0x10c
    b3f0:	e7e3      	b.n	b3ba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x13e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b3f2:	f00d fa5a 	bl	188aa <abort>
      dims_pointer_ = new int32_t[dimensions_count];
    b3f6:	f04f 30ff 	mov.w	r0, #4294967295
    b3fa:	f00d fa54 	bl	188a6 <_Znaj>
    b3fe:	9021      	str	r0, [sp, #132]	; 0x84
  inline int32_t DimensionsCount() const { return size_; }
    b400:	9848      	ldr	r0, [sp, #288]	; 0x120
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b402:	1a20      	subs	r0, r4, r0
    for (int i = 0; i < size_increase; ++i) {
    b404:	2300      	movs	r3, #0
    b406:	e009      	b.n	b41c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1a0>
    TFLITE_DCHECK_GE(i, 0);
    b408:	f00d fa4f 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b40c:	f00d fa4d 	bl	188aa <abort>
      dims_[i] = val;
    b410:	aa20      	add	r2, sp, #128	; 0x80
    b412:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b416:	2101      	movs	r1, #1
    b418:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    b41a:	3301      	adds	r3, #1
    b41c:	4298      	cmp	r0, r3
    b41e:	dd0b      	ble.n	b438 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1bc>
    TFLITE_DCHECK_GE(i, 0);
    b420:	2b00      	cmp	r3, #0
    b422:	dbf1      	blt.n	b408 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x18c>
    TFLITE_DCHECK_LT(i, size_);
    b424:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b426:	4293      	cmp	r3, r2
    b428:	daf0      	bge.n	b40c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x190>
    if (size_ > kMaxSmallSize) {
    b42a:	2a05      	cmp	r2, #5
    b42c:	ddf0      	ble.n	b410 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x194>
      dims_pointer_[i] = val;
    b42e:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b430:	2101      	movs	r1, #1
    b432:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b436:	e7f0      	b.n	b41a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b438:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b43a:	2b05      	cmp	r3, #5
    b43c:	dd01      	ble.n	b442 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c6>
    b43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b440:	e000      	b.n	b444 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c8>
    b442:	ab21      	add	r3, sp, #132	; 0x84
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b448:	9a48      	ldr	r2, [sp, #288]	; 0x120
    b44a:	2a05      	cmp	r2, #5
    b44c:	dd01      	ble.n	b452 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d6>
    b44e:	9949      	ldr	r1, [sp, #292]	; 0x124
    b450:	e000      	b.n	b454 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d8>
    b452:	a949      	add	r1, sp, #292	; 0x124
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b454:	0092      	lsls	r2, r2, #2
    b456:	f00d fa41 	bl	188dc <memcpy>
    return this->size_ == comp.size_ &&
    b45a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b45c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b45e:	429a      	cmp	r2, r3
    b460:	d02d      	beq.n	b4be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
    b462:	2300      	movs	r3, #0

  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    b464:	2b00      	cmp	r3, #0
    b466:	d13c      	bne.n	b4e2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x266>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    return false;
  }

  for (int i = dims_count - 1; i >= 0; --i) {
    b468:	1e63      	subs	r3, r4, #1
    b46a:	461a      	mov	r2, r3
    b46c:	2a00      	cmp	r2, #0
    b46e:	f2c0 80ad 	blt.w	b5cc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    TFLITE_DCHECK_GE(i, 0);
    b472:	f2c0 8094 	blt.w	b59e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x322>
    TFLITE_DCHECK_LT(i, size_);
    b476:	9918      	ldr	r1, [sp, #96]	; 0x60
    b478:	428a      	cmp	r2, r1
    b47a:	f280 8092 	bge.w	b5a2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x326>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b47e:	2905      	cmp	r1, #5
    b480:	f340 8091 	ble.w	b5a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x32a>
    b484:	9919      	ldr	r1, [sp, #100]	; 0x64
    b486:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b48a:	2a00      	cmp	r2, #0
    b48c:	f2c0 8090 	blt.w	b5b0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x334>
    TFLITE_DCHECK_LT(i, size_);
    b490:	9920      	ldr	r1, [sp, #128]	; 0x80
    b492:	428a      	cmp	r2, r1
    b494:	f280 808e 	bge.w	b5b4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x338>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b498:	2905      	cmp	r1, #5
    b49a:	f340 808d 	ble.w	b5b8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x33c>
    b49e:	9921      	ldr	r1, [sp, #132]	; 0x84
    b4a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
    b4a4:	4281      	cmp	r1, r0
    b4a6:	f000 808c 	beq.w	b5c2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x346>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
    b4aa:	2801      	cmp	r0, #1
    b4ac:	f000 808b 	beq.w	b5c6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x34a>
      params->broadcast_category =
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
    } else if (extended_shape1.Dims(i) == 1) {
    b4b0:	2901      	cmp	r1, #1
    b4b2:	f040 809e 	bne.w	b5f2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x376>
      params->broadcast_category =
    b4b6:	2203      	movs	r2, #3
    b4b8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
          BroadcastableOpCategory::kSecondInputBroadcastsFast;
      break;
    b4bc:	e086      	b.n	b5cc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b4be:	2a05      	cmp	r2, #5
    b4c0:	dd01      	ble.n	b4c6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x24a>
    b4c2:	9819      	ldr	r0, [sp, #100]	; 0x64
    b4c4:	e000      	b.n	b4c8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x24c>
    b4c6:	a819      	add	r0, sp, #100	; 0x64
    b4c8:	2b05      	cmp	r3, #5
    b4ca:	dd01      	ble.n	b4d0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x254>
    b4cc:	9921      	ldr	r1, [sp, #132]	; 0x84
    b4ce:	e000      	b.n	b4d2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x256>
    b4d0:	a921      	add	r1, sp, #132	; 0x84
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
    b4d2:	0092      	lsls	r2, r2, #2
    b4d4:	f00d f9f4 	bl	188c0 <memcmp>
    return this->size_ == comp.size_ &&
    b4d8:	b908      	cbnz	r0, b4de <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x262>
    b4da:	2301      	movs	r3, #1
    b4dc:	e7c2      	b.n	b464 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1e8>
    b4de:	2300      	movs	r3, #0
    b4e0:	e7c0      	b.n	b464 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1e8>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    b4e2:	2301      	movs	r3, #1
    b4e4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    return false;
    b4e8:	2300      	movs	r3, #0
    b4ea:	9305      	str	r3, [sp, #20]
    if (size_ > kMaxSmallSize) {
    b4ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b4ee:	2b05      	cmp	r3, #5
    b4f0:	dd03      	ble.n	b4fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x27e>
      delete[] dims_pointer_;
    b4f2:	9821      	ldr	r0, [sp, #132]	; 0x84
    b4f4:	b108      	cbz	r0, b4fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x27e>
    b4f6:	f00d f9c3 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b4fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b4fc:	2b05      	cmp	r3, #5
    b4fe:	dd03      	ble.n	b508 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
      delete[] dims_pointer_;
    b500:	9819      	ldr	r0, [sp, #100]	; 0x64
    b502:	b108      	cbz	r0, b508 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
    b504:	f00d f9bc 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b508:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b50a:	2b05      	cmp	r3, #5
    b50c:	dd03      	ble.n	b516 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29a>
      delete[] dims_pointer_;
    b50e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b510:	b108      	cbz	r0, b516 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29a>
    b512:	f00d f9b5 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b516:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b518:	2b05      	cmp	r3, #5
    b51a:	dd03      	ble.n	b524 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2a8>
      delete[] dims_pointer_;
    b51c:	9849      	ldr	r0, [sp, #292]	; 0x124
    b51e:	b108      	cbz	r0, b524 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2a8>
    b520:	f00d f9ae 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b524:	9b42      	ldr	r3, [sp, #264]	; 0x108
    b526:	2b05      	cmp	r3, #5
    b528:	dd03      	ble.n	b532 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2b6>
      delete[] dims_pointer_;
    b52a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    b52c:	b108      	cbz	r0, b532 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2b6>
    b52e:	f00d f9a7 	bl	18880 <_ZdaPv>
  switch (output->type) {
    b532:	7a28      	ldrb	r0, [r5, #8]
    b534:	2807      	cmp	r0, #7
    b536:	f000 843d 	beq.w	bdb4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb38>
    b53a:	2809      	cmp	r0, #9
    b53c:	f040 86e6 	bne.w	c30c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1090>
      if (need_broadcast) {
    b540:	9b05      	ldr	r3, [sp, #20]
    b542:	2b00      	cmp	r3, #0
    b544:	f000 838a 	beq.w	bc5c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9e0>
            op_params, tflite::micro::GetTensorShape(input1),
    b548:	4639      	mov	r1, r7
    b54a:	a84e      	add	r0, sp, #312	; 0x138
    b54c:	f00b fdd2 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b550:	4638      	mov	r0, r7
    b552:	f00a fc1a 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b556:	4680      	mov	r8, r0
            tflite::micro::GetTensorShape(input2),
    b558:	4631      	mov	r1, r6
    b55a:	a854      	add	r0, sp, #336	; 0x150
    b55c:	f00b fdca 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b560:	4630      	mov	r0, r6
    b562:	f00a fc12 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b566:	4681      	mov	r9, r0
            tflite::micro::GetTensorShape(output),
    b568:	4629      	mov	r1, r5
    b56a:	a85a      	add	r0, sp, #360	; 0x168
    b56c:	f00b fdc2 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b570:	4628      	mov	r0, r5
    b572:	f00a fc10 	bl	15d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    b576:	4682      	mov	sl, r0
      : size_(0) {
    b578:	2300      	movs	r3, #0
    b57a:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
    b57c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b57e:	2b04      	cmp	r3, #4
    b580:	f300 812a 	bgt.w	b7d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x55c>
    if (size_ > kMaxSmallSize) {
    b584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b586:	2b05      	cmp	r3, #5
    b588:	dd03      	ble.n	b592 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x316>
      delete[] dims_pointer_;
    b58a:	980d      	ldr	r0, [sp, #52]	; 0x34
    b58c:	b108      	cbz	r0, b592 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x316>
    b58e:	f00d f977 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
    b592:	2304      	movs	r3, #4
    b594:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
    b596:	984e      	ldr	r0, [sp, #312]	; 0x138
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b598:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    b59a:	2300      	movs	r3, #0
    b59c:	e127      	b.n	b7ee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x572>
    TFLITE_DCHECK_GE(i, 0);
    b59e:	f00d f984 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b5a2:	f00d f982 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b5a6:	a918      	add	r1, sp, #96	; 0x60
    b5a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b5ac:	6848      	ldr	r0, [r1, #4]
    b5ae:	e76c      	b.n	b48a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x20e>
    TFLITE_DCHECK_GE(i, 0);
    b5b0:	f00d f97b 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b5b4:	f00d f979 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b5b8:	a920      	add	r1, sp, #128	; 0x80
    b5ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b5be:	6849      	ldr	r1, [r1, #4]
    b5c0:	e770      	b.n	b4a4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x228>
  for (int i = dims_count - 1; i >= 0; --i) {
    b5c2:	3a01      	subs	r2, #1
    b5c4:	e752      	b.n	b46c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1f0>
      params->broadcast_category =
    b5c6:	2202      	movs	r2, #2
    b5c8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
      return true;
    }
  }

  if (params->broadcast_category !=
    b5cc:	f89d 10a0 	ldrb.w	r1, [sp, #160]	; 0xa0
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
    b5d0:	1e8a      	subs	r2, r1, #2
    b5d2:	b2d2      	uxtb	r2, r2
  if (params->broadcast_category !=
    b5d4:	2a01      	cmp	r2, #1
    b5d6:	d812      	bhi.n	b5fe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x382>

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
    b5d8:	2903      	cmp	r1, #3
    b5da:	d012      	beq.n	b602 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x386>
    b5dc:	aa18      	add	r2, sp, #96	; 0x60
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
    b5de:	2903      	cmp	r1, #3
    b5e0:	d011      	beq.n	b606 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x38a>
    b5e2:	a920      	add	r1, sp, #128	; 0x80
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
  params->broadcast_shape[0] = 1;
    b5e4:	2001      	movs	r0, #1
    b5e6:	903c      	str	r0, [sp, #240]	; 0xf0
  params->broadcast_shape[1] = 1;
    b5e8:	903d      	str	r0, [sp, #244]	; 0xf4
  params->broadcast_shape[2] = 1;
    b5ea:	903e      	str	r0, [sp, #248]	; 0xf8
  params->broadcast_shape[3] = 1;
    b5ec:	903f      	str	r0, [sp, #252]	; 0xfc
  params->broadcast_shape[4] = 1;
    b5ee:	9040      	str	r0, [sp, #256]	; 0x100
    b5f0:	e021      	b.n	b636 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ba>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    b5f2:	2304      	movs	r3, #4
    b5f4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
      return true;
    b5f8:	2301      	movs	r3, #1
    b5fa:	9305      	str	r3, [sp, #20]
    b5fc:	e776      	b.n	b4ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    TFLITE_DCHECK(false);
    b5fe:	f00d f954 	bl	188aa <abort>
  const RuntimeShape* shape_a =
    b602:	aa20      	add	r2, sp, #128	; 0x80
    b604:	e7eb      	b.n	b5de <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x362>
  const RuntimeShape* shape_b =
    b606:	a918      	add	r1, sp, #96	; 0x60
    b608:	e7ec      	b.n	b5e4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x368>
    TFLITE_DCHECK_GE(i, 0);
    b60a:	f00d f94e 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b60e:	f00d f94c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b612:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b616:	6844      	ldr	r4, [r0, #4]
    b618:	e018      	b.n	b64c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3d0>
    TFLITE_DCHECK_GE(i, 0);
    b61a:	f00d f946 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b61e:	f00d f944 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b622:	6848      	ldr	r0, [r1, #4]
    b624:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b628:	42a0      	cmp	r0, r4
    b62a:	d12e      	bne.n	b68a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x40e>
    params->broadcast_shape[4] *= shape_b->Dims(i);
    b62c:	9c40      	ldr	r4, [sp, #256]	; 0x100
    b62e:	fb00 f004 	mul.w	r0, r0, r4
    b632:	9040      	str	r0, [sp, #256]	; 0x100
    --i;
    b634:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b636:	2b00      	cmp	r3, #0
    b638:	db27      	blt.n	b68a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x40e>
    TFLITE_DCHECK_GE(i, 0);
    b63a:	dbe6      	blt.n	b60a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x38e>
    TFLITE_DCHECK_LT(i, size_);
    b63c:	6810      	ldr	r0, [r2, #0]
    b63e:	4283      	cmp	r3, r0
    b640:	dae5      	bge.n	b60e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x392>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b642:	2805      	cmp	r0, #5
    b644:	dde5      	ble.n	b612 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x396>
    b646:	6850      	ldr	r0, [r2, #4]
    b648:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b64c:	2b00      	cmp	r3, #0
    b64e:	dbe4      	blt.n	b61a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x39e>
    TFLITE_DCHECK_LT(i, size_);
    b650:	6808      	ldr	r0, [r1, #0]
    b652:	4283      	cmp	r3, r0
    b654:	dae3      	bge.n	b61e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b656:	2805      	cmp	r0, #5
    b658:	dce3      	bgt.n	b622 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3a6>
    b65a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    b65e:	6840      	ldr	r0, [r0, #4]
    b660:	e7e2      	b.n	b628 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ac>
    TFLITE_DCHECK_GE(i, 0);
    b662:	f00d f922 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b666:	f00d f920 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b66a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b66e:	6840      	ldr	r0, [r0, #4]
    b670:	e016      	b.n	b6a0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x424>
    TFLITE_DCHECK_GE(i, 0);
    b672:	f00d f91a 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b676:	f00d f918 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b67a:	6848      	ldr	r0, [r1, #4]
    b67c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
    params->broadcast_shape[3] *= shape_b->Dims(i);
    b680:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
    b682:	fb00 f004 	mul.w	r0, r0, r4
    b686:	903f      	str	r0, [sp, #252]	; 0xfc
    --i;
    b688:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == 1) {
    b68a:	2b00      	cmp	r3, #0
    b68c:	db2b      	blt.n	b6e6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x46a>
    TFLITE_DCHECK_GE(i, 0);
    b68e:	dbe8      	blt.n	b662 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3e6>
    TFLITE_DCHECK_LT(i, size_);
    b690:	6810      	ldr	r0, [r2, #0]
    b692:	4283      	cmp	r3, r0
    b694:	dae7      	bge.n	b666 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b696:	2805      	cmp	r0, #5
    b698:	dde7      	ble.n	b66a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ee>
    b69a:	6850      	ldr	r0, [r2, #4]
    b69c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    b6a0:	2801      	cmp	r0, #1
    b6a2:	d120      	bne.n	b6e6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x46a>
    TFLITE_DCHECK_GE(i, 0);
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	dbe4      	blt.n	b672 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3f6>
    TFLITE_DCHECK_LT(i, size_);
    b6a8:	6808      	ldr	r0, [r1, #0]
    b6aa:	4283      	cmp	r3, r0
    b6ac:	dae3      	bge.n	b676 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b6ae:	2805      	cmp	r0, #5
    b6b0:	dce3      	bgt.n	b67a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3fe>
    b6b2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    b6b6:	6840      	ldr	r0, [r0, #4]
    b6b8:	e7e2      	b.n	b680 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x404>
    TFLITE_DCHECK_GE(i, 0);
    b6ba:	f00d f8f6 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b6be:	f00d f8f4 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b6c2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b6c6:	6840      	ldr	r0, [r0, #4]
    b6c8:	e018      	b.n	b6fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x480>
    TFLITE_DCHECK_GE(i, 0);
    b6ca:	f00d f8ee 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b6ce:	f00d f8ec 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b6d2:	684c      	ldr	r4, [r1, #4]
    b6d4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b6d8:	4284      	cmp	r4, r0
    b6da:	d12e      	bne.n	b73a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4be>
    params->broadcast_shape[2] *= shape_a->Dims(i);
    b6dc:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
    b6de:	fb00 f004 	mul.w	r0, r0, r4
    b6e2:	903e      	str	r0, [sp, #248]	; 0xf8
    --i;
    b6e4:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	db27      	blt.n	b73a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4be>
    TFLITE_DCHECK_GE(i, 0);
    b6ea:	dbe6      	blt.n	b6ba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x43e>
    TFLITE_DCHECK_LT(i, size_);
    b6ec:	6810      	ldr	r0, [r2, #0]
    b6ee:	4283      	cmp	r3, r0
    b6f0:	dae5      	bge.n	b6be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x442>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b6f2:	2805      	cmp	r0, #5
    b6f4:	dde5      	ble.n	b6c2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x446>
    b6f6:	6850      	ldr	r0, [r2, #4]
    b6f8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b6fc:	2b00      	cmp	r3, #0
    b6fe:	dbe4      	blt.n	b6ca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x44e>
    TFLITE_DCHECK_LT(i, size_);
    b700:	680c      	ldr	r4, [r1, #0]
    b702:	42a3      	cmp	r3, r4
    b704:	dae3      	bge.n	b6ce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x452>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b706:	2c05      	cmp	r4, #5
    b708:	dce3      	bgt.n	b6d2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x456>
    b70a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
    b70e:	6864      	ldr	r4, [r4, #4]
    b710:	e7e2      	b.n	b6d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x45c>
    TFLITE_DCHECK_GE(i, 0);
    b712:	f00d f8ca 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b716:	f00d f8c8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b71a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    b71e:	6840      	ldr	r0, [r0, #4]
    b720:	e016      	b.n	b750 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4d4>
    TFLITE_DCHECK_GE(i, 0);
    b722:	f00d f8c2 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b726:	f00d f8c0 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b72a:	6850      	ldr	r0, [r2, #4]
    b72c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
    params->broadcast_shape[1] *= shape_a->Dims(i);
    b730:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
    b732:	fb00 f004 	mul.w	r0, r0, r4
    b736:	903d      	str	r0, [sp, #244]	; 0xf4
    --i;
    b738:	3b01      	subs	r3, #1
  while (i >= 0 && shape_b->Dims(i) == 1) {
    b73a:	2b00      	cmp	r3, #0
    b73c:	db2b      	blt.n	b796 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x51a>
    TFLITE_DCHECK_GE(i, 0);
    b73e:	dbe8      	blt.n	b712 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x496>
    TFLITE_DCHECK_LT(i, size_);
    b740:	6808      	ldr	r0, [r1, #0]
    b742:	4283      	cmp	r3, r0
    b744:	dae7      	bge.n	b716 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b746:	2805      	cmp	r0, #5
    b748:	dde7      	ble.n	b71a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49e>
    b74a:	6848      	ldr	r0, [r1, #4]
    b74c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    b750:	2801      	cmp	r0, #1
    b752:	d120      	bne.n	b796 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x51a>
    TFLITE_DCHECK_GE(i, 0);
    b754:	2b00      	cmp	r3, #0
    b756:	dbe4      	blt.n	b722 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a6>
    TFLITE_DCHECK_LT(i, size_);
    b758:	6810      	ldr	r0, [r2, #0]
    b75a:	4283      	cmp	r3, r0
    b75c:	dae3      	bge.n	b726 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b75e:	2805      	cmp	r0, #5
    b760:	dce3      	bgt.n	b72a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ae>
    b762:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b766:	6840      	ldr	r0, [r0, #4]
    b768:	e7e2      	b.n	b730 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
    TFLITE_DCHECK_GE(i, 0);
    b76a:	f00d f89e 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b76e:	f00d f89c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b772:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b776:	6844      	ldr	r4, [r0, #4]
    b778:	e018      	b.n	b7ac <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x530>
    TFLITE_DCHECK_GE(i, 0);
    b77a:	f00d f896 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b77e:	f00d f894 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b782:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    b786:	6840      	ldr	r0, [r0, #4]
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b788:	42a0      	cmp	r0, r4
    b78a:	d11a      	bne.n	b7c2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x546>
    params->broadcast_shape[0] *= shape_b->Dims(i);
    b78c:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
    b78e:	fb00 f004 	mul.w	r0, r0, r4
    b792:	903c      	str	r0, [sp, #240]	; 0xf0
    --i;
    b794:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b796:	2b00      	cmp	r3, #0
    b798:	db13      	blt.n	b7c2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x546>
    TFLITE_DCHECK_GE(i, 0);
    b79a:	dbe6      	blt.n	b76a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ee>
    TFLITE_DCHECK_LT(i, size_);
    b79c:	6810      	ldr	r0, [r2, #0]
    b79e:	4283      	cmp	r3, r0
    b7a0:	dae5      	bge.n	b76e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b7a2:	2805      	cmp	r0, #5
    b7a4:	dde5      	ble.n	b772 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f6>
    b7a6:	6850      	ldr	r0, [r2, #4]
    b7a8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b7ac:	2b00      	cmp	r3, #0
    b7ae:	dbe4      	blt.n	b77a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4fe>
    TFLITE_DCHECK_LT(i, size_);
    b7b0:	6808      	ldr	r0, [r1, #0]
    b7b2:	4283      	cmp	r3, r0
    b7b4:	dae3      	bge.n	b77e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x502>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b7b6:	2805      	cmp	r0, #5
    b7b8:	dde3      	ble.n	b782 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x506>
    b7ba:	6848      	ldr	r0, [r1, #4]
    b7bc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    b7c0:	e7e2      	b.n	b788 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x50c>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	db05      	blt.n	b7d2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x556>
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    b7c6:	2304      	movs	r3, #4
    b7c8:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  }
  return true;
    b7cc:	2301      	movs	r3, #1
    b7ce:	9305      	str	r3, [sp, #20]
    b7d0:	e68c      	b.n	b4ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    b7d2:	2301      	movs	r3, #1
    b7d4:	9305      	str	r3, [sp, #20]
    b7d6:	e689      	b.n	b4ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b7d8:	f00d f867 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    b7dc:	f00d f865 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b7e0:	f00d f863 	bl	188aa <abort>
      dims_pointer_[i] = val;
    b7e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b7e6:	2101      	movs	r1, #1
    b7e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_increase; ++i) {
    b7ec:	3301      	adds	r3, #1
    b7ee:	4298      	cmp	r0, r3
    b7f0:	dd0c      	ble.n	b80c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x590>
    TFLITE_DCHECK_GE(i, 0);
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	dbf2      	blt.n	b7dc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x560>
    TFLITE_DCHECK_LT(i, size_);
    b7f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b7f8:	4293      	cmp	r3, r2
    b7fa:	daf1      	bge.n	b7e0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x564>
    if (size_ > kMaxSmallSize) {
    b7fc:	2a05      	cmp	r2, #5
    b7fe:	dcf1      	bgt.n	b7e4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x568>
      dims_[i] = val;
    b800:	aa0c      	add	r2, sp, #48	; 0x30
    b802:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b806:	2101      	movs	r1, #1
    b808:	6051      	str	r1, [r2, #4]
    b80a:	e7ef      	b.n	b7ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x570>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b80c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b80e:	2b05      	cmp	r3, #5
    b810:	dd01      	ble.n	b816 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x59a>
    b812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b814:	e000      	b.n	b818 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x59c>
    b816:	ab0d      	add	r3, sp, #52	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b818:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b81c:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    b81e:	2a05      	cmp	r2, #5
    b820:	dd01      	ble.n	b826 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5aa>
    b822:	994f      	ldr	r1, [sp, #316]	; 0x13c
    b824:	e000      	b.n	b828 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ac>
    b826:	a94f      	add	r1, sp, #316	; 0x13c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b828:	0092      	lsls	r2, r2, #2
    b82a:	f00d f857 	bl	188dc <memcpy>
      : size_(0) {
    b82e:	2300      	movs	r3, #0
    b830:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    b832:	9b54      	ldr	r3, [sp, #336]	; 0x150
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b834:	2b04      	cmp	r3, #4
    b836:	dc0c      	bgt.n	b852 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5d6>
    if (size_ > kMaxSmallSize) {
    b838:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b83a:	2b05      	cmp	r3, #5
    b83c:	dd03      	ble.n	b846 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ca>
      delete[] dims_pointer_;
    b83e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b840:	b108      	cbz	r0, b846 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ca>
    b842:	f00d f81d 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
    b846:	2304      	movs	r3, #4
    b848:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    b84a:	9854      	ldr	r0, [sp, #336]	; 0x150
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b84c:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    b84e:	2300      	movs	r3, #0
    b850:	e00b      	b.n	b86a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ee>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b852:	f00d f82a 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    b856:	f00d f828 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b85a:	f00d f826 	bl	188aa <abort>
      dims_[i] = val;
    b85e:	aa12      	add	r2, sp, #72	; 0x48
    b860:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b864:	2101      	movs	r1, #1
    b866:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    b868:	3301      	adds	r3, #1
    b86a:	4298      	cmp	r0, r3
    b86c:	dd0b      	ble.n	b886 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x60a>
    TFLITE_DCHECK_GE(i, 0);
    b86e:	2b00      	cmp	r3, #0
    b870:	dbf1      	blt.n	b856 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5da>
    TFLITE_DCHECK_LT(i, size_);
    b872:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b874:	4293      	cmp	r3, r2
    b876:	daf0      	bge.n	b85a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5de>
    if (size_ > kMaxSmallSize) {
    b878:	2a05      	cmp	r2, #5
    b87a:	ddf0      	ble.n	b85e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e2>
      dims_pointer_[i] = val;
    b87c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b87e:	2101      	movs	r1, #1
    b880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b884:	e7f0      	b.n	b868 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b886:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b888:	2b05      	cmp	r3, #5
    b88a:	dd0c      	ble.n	b8a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62a>
    b88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b88e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b892:	9a54      	ldr	r2, [sp, #336]	; 0x150
    b894:	2a05      	cmp	r2, #5
    b896:	dd08      	ble.n	b8aa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62e>
    b898:	9955      	ldr	r1, [sp, #340]	; 0x154
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b89a:	0092      	lsls	r2, r2, #2
    b89c:	f00d f81e 	bl	188dc <memcpy>
  for (int i = N - 1; i >= 0; --i) {
    b8a0:	2303      	movs	r3, #3
  int desc_stride = 1;
    b8a2:	2201      	movs	r2, #1
  }
    b8a4:	e017      	b.n	b8d6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x65a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b8a6:	ab13      	add	r3, sp, #76	; 0x4c
    b8a8:	e7f1      	b.n	b88e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x612>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b8aa:	a955      	add	r1, sp, #340	; 0x154
    b8ac:	e7f5      	b.n	b89a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x61e>
    TFLITE_DCHECK_GE(i, 0);
    b8ae:	f00c fffc 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b8b2:	f00c fffa 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8b6:	a90c      	add	r1, sp, #48	; 0x30
    b8b8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    b8bc:	6848      	ldr	r0, [r1, #4]
    b8be:	e015      	b.n	b8ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x670>
    TFLITE_DCHECK_GE(i, 0);
    b8c0:	f00c fff3 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b8c4:	f00c fff1 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8c8:	a90c      	add	r1, sp, #48	; 0x30
    b8ca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    b8ce:	6849      	ldr	r1, [r1, #4]
    desc_stride *= input_shape.Dims(i);
    b8d0:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = N - 1; i >= 0; --i) {
    b8d4:	3b01      	subs	r3, #1
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	db19      	blt.n	b90e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x692>
    TFLITE_DCHECK_GE(i, 0);
    b8da:	dbe8      	blt.n	b8ae <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x632>
    TFLITE_DCHECK_LT(i, size_);
    b8dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    b8de:	428b      	cmp	r3, r1
    b8e0:	dae7      	bge.n	b8b2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x636>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8e2:	2905      	cmp	r1, #5
    b8e4:	dde7      	ble.n	b8b6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x63a>
    b8e6:	990d      	ldr	r1, [sp, #52]	; 0x34
    b8e8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    b8ec:	a918      	add	r1, sp, #96	; 0x60
    b8ee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
    b8f2:	1d18      	adds	r0, r3, #4
    b8f4:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b8f8:	2b00      	cmp	r3, #0
    b8fa:	dbe1      	blt.n	b8c0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x644>
    TFLITE_DCHECK_LT(i, size_);
    b8fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    b8fe:	428b      	cmp	r3, r1
    b900:	dae0      	bge.n	b8c4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b902:	2905      	cmp	r1, #5
    b904:	dde0      	ble.n	b8c8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64c>
    b906:	990d      	ldr	r1, [sp, #52]	; 0x34
    b908:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    b90c:	e7e0      	b.n	b8d0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x654>
  for (int i = N - 1; i >= 0; --i) {
    b90e:	2303      	movs	r3, #3
  int desc_stride = 1;
    b910:	2201      	movs	r2, #1
    b912:	e013      	b.n	b93c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6c0>
    TFLITE_DCHECK_GE(i, 0);
    b914:	f00c ffc9 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b918:	f00c ffc7 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b91c:	a912      	add	r1, sp, #72	; 0x48
    b91e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    b922:	6848      	ldr	r0, [r1, #4]
    b924:	e015      	b.n	b952 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6d6>
    TFLITE_DCHECK_GE(i, 0);
    b926:	f00c ffc0 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b92a:	f00c ffbe 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b92e:	a912      	add	r1, sp, #72	; 0x48
    b930:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    b934:	6849      	ldr	r1, [r1, #4]
    desc_stride *= input_shape.Dims(i);
    b936:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = N - 1; i >= 0; --i) {
    b93a:	3b01      	subs	r3, #1
    b93c:	2b00      	cmp	r3, #0
    b93e:	db19      	blt.n	b974 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6f8>
    TFLITE_DCHECK_GE(i, 0);
    b940:	dbe8      	blt.n	b914 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x698>
    TFLITE_DCHECK_LT(i, size_);
    b942:	9912      	ldr	r1, [sp, #72]	; 0x48
    b944:	428b      	cmp	r3, r1
    b946:	dae7      	bge.n	b918 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x69c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b948:	2905      	cmp	r1, #5
    b94a:	dde7      	ble.n	b91c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6a0>
    b94c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b94e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    b952:	a920      	add	r1, sp, #128	; 0x80
    b954:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
    b958:	1d18      	adds	r0, r3, #4
    b95a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b95e:	2b00      	cmp	r3, #0
    b960:	dbe1      	blt.n	b926 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6aa>
    TFLITE_DCHECK_LT(i, size_);
    b962:	9912      	ldr	r1, [sp, #72]	; 0x48
    b964:	428b      	cmp	r3, r1
    b966:	dae0      	bge.n	b92a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b968:	2905      	cmp	r1, #5
    b96a:	dde0      	ble.n	b92e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6b2>
    b96c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b96e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    b972:	e7e0      	b.n	b936 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6ba>
  for (int i = 0; i < N; ++i) {
    b974:	2300      	movs	r3, #0
    b976:	e019      	b.n	b9ac <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x730>
    TFLITE_DCHECK_GE(i, 0);
    b978:	f00c ff97 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b97c:	f00c ff95 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b980:	aa0c      	add	r2, sp, #48	; 0x30
    b982:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b986:	6852      	ldr	r2, [r2, #4]
    b988:	e01c      	b.n	b9c4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x748>
    TFLITE_DCHECK_GE(i, 0);
    b98a:	f00c ff8e 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    b98e:	f00c ff8c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b992:	a912      	add	r1, sp, #72	; 0x48
    b994:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    b998:	6849      	ldr	r1, [r1, #4]
    b99a:	e01d      	b.n	b9d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x75c>
        desc0_out->strides[i] = 0;
    b99c:	a818      	add	r0, sp, #96	; 0x60
    b99e:	1d1a      	adds	r2, r3, #4
    b9a0:	2400      	movs	r4, #0
    b9a2:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        desc0_out->extents[i] = extent1;
    b9a6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  for (int i = 0; i < N; ++i) {
    b9aa:	3301      	adds	r3, #1
    b9ac:	2b03      	cmp	r3, #3
    b9ae:	dc23      	bgt.n	b9f8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x77c>
    TFLITE_DCHECK_GE(i, 0);
    b9b0:	2b00      	cmp	r3, #0
    b9b2:	dbe1      	blt.n	b978 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6fc>
    TFLITE_DCHECK_LT(i, size_);
    b9b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b9b6:	4293      	cmp	r3, r2
    b9b8:	dae0      	bge.n	b97c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x700>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9ba:	2a05      	cmp	r2, #5
    b9bc:	dde0      	ble.n	b980 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x704>
    b9be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b9c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b9c4:	2b00      	cmp	r3, #0
    b9c6:	dbe0      	blt.n	b98a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x70e>
    TFLITE_DCHECK_LT(i, size_);
    b9c8:	9912      	ldr	r1, [sp, #72]	; 0x48
    b9ca:	428b      	cmp	r3, r1
    b9cc:	dadf      	bge.n	b98e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x712>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9ce:	2905      	cmp	r1, #5
    b9d0:	dddf      	ble.n	b992 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x716>
    b9d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b9d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
    b9d8:	4291      	cmp	r1, r2
    b9da:	d0e6      	beq.n	b9aa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x72e>
      if (extent0 == 1) {
    b9dc:	2a01      	cmp	r2, #1
    b9de:	d0dd      	beq.n	b99c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x720>
        TFLITE_DCHECK_EQ(extent1, 1);
    b9e0:	2901      	cmp	r1, #1
    b9e2:	d107      	bne.n	b9f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x778>
        desc1_out->strides[i] = 0;
    b9e4:	a820      	add	r0, sp, #128	; 0x80
    b9e6:	1d19      	adds	r1, r3, #4
    b9e8:	2400      	movs	r4, #0
    b9ea:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
        desc1_out->extents[i] = extent0;
    b9ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    b9f2:	e7da      	b.n	b9aa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x72e>
        TFLITE_DCHECK_EQ(extent1, 1);
    b9f4:	f00c ff59 	bl	188aa <abort>
    if (size_ > kMaxSmallSize) {
    b9f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b9fa:	2b05      	cmp	r3, #5
    b9fc:	dd03      	ble.n	ba06 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78a>
      delete[] dims_pointer_;
    b9fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ba00:	b108      	cbz	r0, ba06 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78a>
    ba02:	f00c ff3d 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    ba06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ba08:	2b05      	cmp	r3, #5
    ba0a:	dd03      	ble.n	ba14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x798>
      delete[] dims_pointer_;
    ba0c:	980d      	ldr	r0, [sp, #52]	; 0x34
    ba0e:	b108      	cbz	r0, ba14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x798>
    ba10:	f00c ff36 	bl	18880 <_ZdaPv>
      : size_(0) {
    ba14:	2300      	movs	r3, #0
    ba16:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    ba18:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    ba1a:	2b04      	cmp	r3, #4
    ba1c:	dc0c      	bgt.n	ba38 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7bc>
    if (size_ > kMaxSmallSize) {
    ba1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ba20:	2b05      	cmp	r3, #5
    ba22:	dd03      	ble.n	ba2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7b0>
      delete[] dims_pointer_;
    ba24:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ba26:	b108      	cbz	r0, ba2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7b0>
    ba28:	f00c ff2a 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
    ba2c:	2304      	movs	r3, #4
    ba2e:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    ba30:	985a      	ldr	r0, [sp, #360]	; 0x168
    const int size_increase = new_shape_size - shape.DimensionsCount();
    ba32:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    ba34:	2300      	movs	r3, #0
    ba36:	e00a      	b.n	ba4e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7d2>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    ba38:	f00c ff37 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    ba3c:	f00c ff35 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba40:	f00c ff33 	bl	188aa <abort>
      dims_pointer_[i] = val;
    ba44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ba46:	2101      	movs	r1, #1
    ba48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_increase; ++i) {
    ba4c:	3301      	adds	r3, #1
    ba4e:	4298      	cmp	r0, r3
    ba50:	dd0c      	ble.n	ba6c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7f0>
    TFLITE_DCHECK_GE(i, 0);
    ba52:	2b00      	cmp	r3, #0
    ba54:	dbf2      	blt.n	ba3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c0>
    TFLITE_DCHECK_LT(i, size_);
    ba56:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ba58:	4293      	cmp	r3, r2
    ba5a:	daf1      	bge.n	ba40 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c4>
    if (size_ > kMaxSmallSize) {
    ba5c:	2a05      	cmp	r2, #5
    ba5e:	dcf1      	bgt.n	ba44 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c8>
      dims_[i] = val;
    ba60:	aa12      	add	r2, sp, #72	; 0x48
    ba62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ba66:	2101      	movs	r1, #1
    ba68:	6051      	str	r1, [r2, #4]
    ba6a:	e7ef      	b.n	ba4c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7d0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ba6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ba6e:	2b05      	cmp	r3, #5
    ba70:	dd16      	ble.n	baa0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x824>
    ba72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    ba74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ba78:	9a5a      	ldr	r2, [sp, #360]	; 0x168
    ba7a:	2a05      	cmp	r2, #5
    ba7c:	dd12      	ble.n	baa4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x828>
    ba7e:	995b      	ldr	r1, [sp, #364]	; 0x16c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    ba80:	0092      	lsls	r2, r2, #2
    ba82:	f00c ff2b 	bl	188dc <memcpy>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    ba86:	2700      	movs	r7, #0
    TFLITE_DCHECK_LT(i, size_);
    ba88:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	dd0c      	ble.n	baa8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x82c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba8e:	2b05      	cmp	r3, #5
    ba90:	dd0c      	ble.n	baac <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x830>
    ba92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ba94:	681b      	ldr	r3, [r3, #0]
    ba96:	429f      	cmp	r7, r3
    ba98:	f280 80c2 	bge.w	bc20 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9a4>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    ba9c:	2600      	movs	r6, #0
    ba9e:	e0b0      	b.n	bc02 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x986>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    baa0:	ab13      	add	r3, sp, #76	; 0x4c
    baa2:	e7e7      	b.n	ba74 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7f8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    baa4:	a95b      	add	r1, sp, #364	; 0x16c
    baa6:	e7eb      	b.n	ba80 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x804>
    TFLITE_DCHECK_LT(i, size_);
    baa8:	f00c feff 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    baac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    baae:	e7f2      	b.n	ba96 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x81a>
    TFLITE_DCHECK_LT(i, size_);
    bab0:	f00c fefb 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bab6:	e0ad      	b.n	bc14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x998>
    TFLITE_DCHECK_LT(i, size_);
    bab8:	f00c fef7 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    babc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    babe:	e09b      	b.n	bbf8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x97c>
    TFLITE_DCHECK_LT(i, size_);
    bac0:	f00c fef3 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bac4:	9b16      	ldr	r3, [sp, #88]	; 0x58
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    bac6:	429c      	cmp	r4, r3
    bac8:	f280 808c 	bge.w	bbe4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x968>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bacc:	2f00      	cmp	r7, #0
    bace:	db6f      	blt.n	bbb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x934>
    bad0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bad2:	429f      	cmp	r7, r3
    bad4:	da6c      	bge.n	bbb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x934>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bad6:	2e00      	cmp	r6, #0
    bad8:	db6c      	blt.n	bbb4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x938>
    bada:	9b19      	ldr	r3, [sp, #100]	; 0x64
    badc:	429e      	cmp	r6, r3
    bade:	da69      	bge.n	bbb4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x938>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bae0:	2d00      	cmp	r5, #0
    bae2:	db69      	blt.n	bbb8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x93c>
    bae4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bae6:	429d      	cmp	r5, r3
    bae8:	da66      	bge.n	bbb8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x93c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    baea:	2c00      	cmp	r4, #0
    baec:	db66      	blt.n	bbbc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x940>
    baee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    baf0:	429c      	cmp	r4, r3
    baf2:	da63      	bge.n	bbbc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x940>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    baf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    baf6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    baf8:	fb02 f206 	mul.w	r2, r2, r6
    bafc:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
    bb00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    bb02:	991e      	ldr	r1, [sp, #120]	; 0x78
    bb04:	fb01 f105 	mul.w	r1, r1, r5
    bb08:	fb02 1204 	mla	r2, r2, r4, r1
         i3 * desc.strides[3];
    bb0c:	4413      	add	r3, r2
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
    bb0e:	f918 0003 	ldrsb.w	r0, [r8, r3]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bb12:	2f00      	cmp	r7, #0
    bb14:	db54      	blt.n	bbc0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x944>
    bb16:	9b20      	ldr	r3, [sp, #128]	; 0x80
    bb18:	429f      	cmp	r7, r3
    bb1a:	da51      	bge.n	bbc0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x944>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bb1c:	2e00      	cmp	r6, #0
    bb1e:	db51      	blt.n	bbc4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x948>
    bb20:	9b21      	ldr	r3, [sp, #132]	; 0x84
    bb22:	429e      	cmp	r6, r3
    bb24:	da4e      	bge.n	bbc4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x948>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bb26:	2d00      	cmp	r5, #0
    bb28:	db4e      	blt.n	bbc8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x94c>
    bb2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    bb2c:	429d      	cmp	r5, r3
    bb2e:	da4b      	bge.n	bbc8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x94c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    bb30:	2c00      	cmp	r4, #0
    bb32:	db4b      	blt.n	bbcc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x950>
    bb34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    bb36:	429c      	cmp	r4, r3
    bb38:	da48      	bge.n	bbcc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x950>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    bb3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    bb3c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    bb3e:	fb02 f206 	mul.w	r2, r2, r6
    bb42:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
    bb46:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    bb48:	9926      	ldr	r1, [sp, #152]	; 0x98
    bb4a:	fb01 f105 	mul.w	r1, r1, r5
    bb4e:	fb02 1204 	mla	r2, r2, r4, r1
         i3 * desc.strides[3];
    bb52:	4413      	add	r3, r2
    bb54:	f919 1003 	ldrsb.w	r1, [r9, r3]
  inline int32_t DimensionsCount() const { return size_; }
    bb58:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bb5a:	2b04      	cmp	r3, #4
    bb5c:	d138      	bne.n	bbd0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x954>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bb5e:	2f00      	cmp	r7, #0
    bb60:	db38      	blt.n	bbd4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x958>
    bb62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bb64:	429f      	cmp	r7, r3
    bb66:	da35      	bge.n	bbd4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x958>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bb68:	2e00      	cmp	r6, #0
    bb6a:	db35      	blt.n	bbd8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x95c>
    bb6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    bb6e:	4296      	cmp	r6, r2
    bb70:	da32      	bge.n	bbd8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x95c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bb72:	2d00      	cmp	r5, #0
    bb74:	db32      	blt.n	bbdc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x960>
    bb76:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bb78:	429d      	cmp	r5, r3
    bb7a:	da2f      	bge.n	bbdc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x960>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bb7c:	2c00      	cmp	r4, #0
    bb7e:	db2f      	blt.n	bbe0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x964>
    bb80:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    bb84:	455c      	cmp	r4, fp
    bb86:	da2b      	bge.n	bbe0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x964>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    bb88:	fb02 6207 	mla	r2, r2, r7, r6
    bb8c:	fb02 5303 	mla	r3, r2, r3, r5
    bb90:	fb03 4b0b 	mla	fp, r3, fp, r4
    bb94:	aa28      	add	r2, sp, #160	; 0xa0
    bb96:	f7ff f9a9 	bl	aeec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
    bb9a:	f80a 000b 	strb.w	r0, [sl, fp]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    bb9e:	3401      	adds	r4, #1
    TFLITE_DCHECK_LT(i, size_);
    bba0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bba2:	2b03      	cmp	r3, #3
    bba4:	dd8c      	ble.n	bac0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x844>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bba6:	2b05      	cmp	r3, #5
    bba8:	dd8c      	ble.n	bac4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x848>
    bbaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bbac:	68db      	ldr	r3, [r3, #12]
    bbae:	e78a      	b.n	bac6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x84a>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bbb0:	f00c fe7b 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bbb4:	f00c fe79 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bbb8:	f00c fe77 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    bbbc:	f00c fe75 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bbc0:	f00c fe73 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bbc4:	f00c fe71 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bbc8:	f00c fe6f 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    bbcc:	f00c fe6d 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bbd0:	f00c fe6b 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bbd4:	f00c fe69 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bbd8:	f00c fe67 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bbdc:	f00c fe65 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bbe0:	f00c fe63 	bl	188aa <abort>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    bbe4:	3501      	adds	r5, #1
    TFLITE_DCHECK_LT(i, size_);
    bbe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bbe8:	2b02      	cmp	r3, #2
    bbea:	f77f af65 	ble.w	bab8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x83c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbee:	2b05      	cmp	r3, #5
    bbf0:	f77f af64 	ble.w	babc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x840>
    bbf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bbf6:	689b      	ldr	r3, [r3, #8]
    bbf8:	429d      	cmp	r5, r3
    bbfa:	da01      	bge.n	bc00 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x984>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    bbfc:	2400      	movs	r4, #0
    bbfe:	e7cf      	b.n	bba0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x924>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    bc00:	3601      	adds	r6, #1
    TFLITE_DCHECK_LT(i, size_);
    bc02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bc04:	2b01      	cmp	r3, #1
    bc06:	f77f af53 	ble.w	bab0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x834>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc0a:	2b05      	cmp	r3, #5
    bc0c:	f77f af52 	ble.w	bab4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x838>
    bc10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bc12:	685b      	ldr	r3, [r3, #4]
    bc14:	429e      	cmp	r6, r3
    bc16:	da01      	bge.n	bc1c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9a0>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    bc18:	2500      	movs	r5, #0
    bc1a:	e7e4      	b.n	bbe6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x96a>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    bc1c:	3701      	adds	r7, #1
    bc1e:	e733      	b.n	ba88 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x80c>
    if (size_ > kMaxSmallSize) {
    bc20:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bc22:	2b05      	cmp	r3, #5
    bc24:	dd03      	ble.n	bc2e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9b2>
      delete[] dims_pointer_;
    bc26:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bc28:	b108      	cbz	r0, bc2e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9b2>
    bc2a:	f00c fe29 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bc2e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    bc30:	2b05      	cmp	r3, #5
    bc32:	dd03      	ble.n	bc3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c0>
      delete[] dims_pointer_;
    bc34:	985b      	ldr	r0, [sp, #364]	; 0x16c
    bc36:	b108      	cbz	r0, bc3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c0>
    bc38:	f00c fe22 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bc3c:	9b54      	ldr	r3, [sp, #336]	; 0x150
    bc3e:	2b05      	cmp	r3, #5
    bc40:	dd03      	ble.n	bc4a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9ce>
      delete[] dims_pointer_;
    bc42:	9855      	ldr	r0, [sp, #340]	; 0x154
    bc44:	b108      	cbz	r0, bc4a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9ce>
    bc46:	f00c fe1b 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bc4a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    bc4c:	2b05      	cmp	r3, #5
    bc4e:	dd03      	ble.n	bc58 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9dc>
      delete[] dims_pointer_;
    bc50:	984f      	ldr	r0, [sp, #316]	; 0x13c
    bc52:	b108      	cbz	r0, bc58 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9dc>
    bc54:	f00c fe14 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    bc58:	2000      	movs	r0, #0
    bc5a:	e361      	b.n	c320 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
            op_params, tflite::micro::GetTensorShape(input1),
    bc5c:	4639      	mov	r1, r7
    bc5e:	a860      	add	r0, sp, #384	; 0x180
    bc60:	f00b fa48 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bc64:	4638      	mov	r0, r7
    bc66:	f00a f890 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    bc6a:	4607      	mov	r7, r0
            tflite::micro::GetTensorShape(input2),
    bc6c:	4631      	mov	r1, r6
    bc6e:	a866      	add	r0, sp, #408	; 0x198
    bc70:	f00b fa40 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bc74:	4630      	mov	r0, r6
    bc76:	f00a f888 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    bc7a:	4606      	mov	r6, r0
            tflite::micro::GetTensorShape(output),
    bc7c:	4629      	mov	r1, r5
    bc7e:	a86c      	add	r0, sp, #432	; 0x1b0
    bc80:	f00b fa38 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bc84:	4628      	mov	r0, r5
    bc86:	f00a f886 	bl	15d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    bc8a:	4680      	mov	r8, r0
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    bc8c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    bc8e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    bc90:	429a      	cmp	r2, r3
    bc92:	dc12      	bgt.n	bcba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa3e>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    bc94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    bc96:	4252      	negs	r2, r2
    bc98:	f112 0f80 	cmn.w	r2, #128	; 0x80
    bc9c:	db0f      	blt.n	bcbe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa42>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    bc9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bca0:	425b      	negs	r3, r3
    bca2:	f113 0f80 	cmn.w	r3, #128	; 0x80
    bca6:	db0c      	blt.n	bcc2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa46>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    bca8:	2a7f      	cmp	r2, #127	; 0x7f
    bcaa:	dc0c      	bgt.n	bcc6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4a>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    bcac:	2b7f      	cmp	r3, #127	; 0x7f
    bcae:	dc0c      	bgt.n	bcca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bcb0:	9960      	ldr	r1, [sp, #384]	; 0x180
    bcb2:	2905      	cmp	r1, #5
    bcb4:	dd0b      	ble.n	bcce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa52>
    bcb6:	9861      	ldr	r0, [sp, #388]	; 0x184
    bcb8:	e00a      	b.n	bcd0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa54>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    bcba:	f00c fdf6 	bl	188aa <abort>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    bcbe:	f00c fdf4 	bl	188aa <abort>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    bcc2:	f00c fdf2 	bl	188aa <abort>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    bcc6:	f00c fdf0 	bl	188aa <abort>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    bcca:	f00c fdee 	bl	188aa <abort>
    bcce:	a861      	add	r0, sp, #388	; 0x184
    for (int i = 0; i < size_; i++) {
    bcd0:	2300      	movs	r3, #0
    int buffer_size = 1;
    bcd2:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    bcd4:	4299      	cmp	r1, r3
    bcd6:	dd05      	ble.n	bce4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa68>
      buffer_size *= dims_data[i];
    bcd8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    bcdc:	fb02 f505 	mul.w	r5, r2, r5
    for (int i = 0; i < size_; i++) {
    bce0:	3301      	adds	r3, #1
    bce2:	e7f7      	b.n	bcd4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa58>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bce4:	9866      	ldr	r0, [sp, #408]	; 0x198
    bce6:	2805      	cmp	r0, #5
    bce8:	dd01      	ble.n	bcee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa72>
    bcea:	9c67      	ldr	r4, [sp, #412]	; 0x19c
    bcec:	e000      	b.n	bcf0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa74>
    bcee:	ac67      	add	r4, sp, #412	; 0x19c
    for (int i = 0; i < size_; i++) {
    bcf0:	2300      	movs	r3, #0
    int buffer_size = 1;
    bcf2:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
    bcf4:	4298      	cmp	r0, r3
    bcf6:	dd05      	ble.n	bd04 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa88>
      buffer_size *= dims_data[i];
    bcf8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    bcfc:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
    bd00:	3301      	adds	r3, #1
    bd02:	e7f7      	b.n	bcf4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa78>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bd04:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
    bd06:	2c05      	cmp	r4, #5
    bd08:	dd0b      	ble.n	bd22 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaa6>
    bd0a:	986d      	ldr	r0, [sp, #436]	; 0x1b4
    for (int i = 0; i < size_; i++) {
    bd0c:	2300      	movs	r3, #0
    int buffer_size = 1;
    bd0e:	2101      	movs	r1, #1
    bd10:	4694      	mov	ip, r2
    for (int i = 0; i < size_; i++) {
    bd12:	429c      	cmp	r4, r3
    bd14:	dd07      	ble.n	bd26 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaaa>
      buffer_size *= dims_data[i];
    bd16:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    bd1a:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    bd1e:	3301      	adds	r3, #1
    bd20:	e7f7      	b.n	bd12 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa96>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bd22:	a86d      	add	r0, sp, #436	; 0x1b4
    bd24:	e7f2      	b.n	bd0c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa90>
  TFLITE_CHECK_EQ(size_1, size_2);
    bd26:	4565      	cmp	r5, ip
    bd28:	d115      	bne.n	bd56 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xada>
  TFLITE_CHECK_EQ(size_2, size_3);
    bd2a:	458c      	cmp	ip, r1
    bd2c:	d115      	bne.n	bd5a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xade>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    bd2e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    bd30:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    bd32:	429a      	cmp	r2, r3
    bd34:	dc13      	bgt.n	bd5e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xae2>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    bd36:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    bd38:	4252      	negs	r2, r2
    bd3a:	f112 0f80 	cmn.w	r2, #128	; 0x80
    bd3e:	db10      	blt.n	bd62 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xae6>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    bd40:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bd42:	425b      	negs	r3, r3
    bd44:	f113 0f80 	cmn.w	r3, #128	; 0x80
    bd48:	db0d      	blt.n	bd66 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaea>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    bd4a:	2a7f      	cmp	r2, #127	; 0x7f
    bd4c:	dc0d      	bgt.n	bd6a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaee>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    bd4e:	2b7f      	cmp	r3, #127	; 0x7f
    bd50:	dc0d      	bgt.n	bd6e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaf2>
  for (int i = 0; i < size; ++i) {
    bd52:	2400      	movs	r4, #0
    bd54:	e015      	b.n	bd82 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb06>
  TFLITE_CHECK_EQ(size_1, size_2);
    bd56:	f00c fda8 	bl	188aa <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
    bd5a:	f00c fda6 	bl	188aa <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    bd5e:	f00c fda4 	bl	188aa <abort>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    bd62:	f00c fda2 	bl	188aa <abort>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    bd66:	f00c fda0 	bl	188aa <abort>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    bd6a:	f00c fd9e 	bl	188aa <abort>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    bd6e:	f00c fd9c 	bl	188aa <abort>
    output_data[i] = binary_func(input1_data[i], input2_data[i], params);
    bd72:	aa28      	add	r2, sp, #160	; 0xa0
    bd74:	5731      	ldrsb	r1, [r6, r4]
    bd76:	5738      	ldrsb	r0, [r7, r4]
    bd78:	f7ff f8b8 	bl	aeec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
    bd7c:	f808 0004 	strb.w	r0, [r8, r4]
  for (int i = 0; i < size; ++i) {
    bd80:	3401      	adds	r4, #1
    bd82:	42ac      	cmp	r4, r5
    bd84:	dbf5      	blt.n	bd72 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaf6>
    if (size_ > kMaxSmallSize) {
    bd86:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    bd88:	2b05      	cmp	r3, #5
    bd8a:	dd03      	ble.n	bd94 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb18>
      delete[] dims_pointer_;
    bd8c:	986d      	ldr	r0, [sp, #436]	; 0x1b4
    bd8e:	b108      	cbz	r0, bd94 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb18>
    bd90:	f00c fd76 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bd94:	9b66      	ldr	r3, [sp, #408]	; 0x198
    bd96:	2b05      	cmp	r3, #5
    bd98:	dd03      	ble.n	bda2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb26>
      delete[] dims_pointer_;
    bd9a:	9867      	ldr	r0, [sp, #412]	; 0x19c
    bd9c:	b108      	cbz	r0, bda2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb26>
    bd9e:	f00c fd6f 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bda2:	9b60      	ldr	r3, [sp, #384]	; 0x180
    bda4:	2b05      	cmp	r3, #5
    bda6:	dd03      	ble.n	bdb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb34>
      delete[] dims_pointer_;
    bda8:	9861      	ldr	r0, [sp, #388]	; 0x184
    bdaa:	b108      	cbz	r0, bdb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb34>
    bdac:	f00c fd68 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    bdb0:	2000      	movs	r0, #0
    bdb2:	e2b5      	b.n	c320 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
      if (need_broadcast) {
    bdb4:	9b05      	ldr	r3, [sp, #20]
    bdb6:	2b00      	cmp	r3, #0
    bdb8:	d037      	beq.n	be2a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbae>
            op_params, tflite::micro::GetTensorShape(input1),
    bdba:	4639      	mov	r1, r7
    bdbc:	a872      	add	r0, sp, #456	; 0x1c8
    bdbe:	f00b f999 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    bdc2:	4638      	mov	r0, r7
    bdc4:	f00a fbe0 	bl	16588 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    bdc8:	4604      	mov	r4, r0
            tflite::micro::GetTensorShape(input2),
    bdca:	4631      	mov	r1, r6
    bdcc:	a878      	add	r0, sp, #480	; 0x1e0
    bdce:	f00b f991 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    bdd2:	4630      	mov	r0, r6
    bdd4:	f00a fbd8 	bl	16588 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    bdd8:	4606      	mov	r6, r0
            tflite::micro::GetTensorShape(output),
    bdda:	af7e      	add	r7, sp, #504	; 0x1f8
    bddc:	4629      	mov	r1, r5
    bdde:	4638      	mov	r0, r7
    bde0:	f00b f988 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    bde4:	4628      	mov	r0, r5
    bde6:	f00a fbd5 	bl	16594 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    bdea:	9002      	str	r0, [sp, #8]
    bdec:	9701      	str	r7, [sp, #4]
    bdee:	9600      	str	r6, [sp, #0]
    bdf0:	ab78      	add	r3, sp, #480	; 0x1e0
    bdf2:	4622      	mov	r2, r4
    bdf4:	a972      	add	r1, sp, #456	; 0x1c8
    bdf6:	a828      	add	r0, sp, #160	; 0xa0
    bdf8:	f7fe fc0a 	bl	a610 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>
    if (size_ > kMaxSmallSize) {
    bdfc:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
    bdfe:	2b05      	cmp	r3, #5
    be00:	dd03      	ble.n	be0a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8e>
      delete[] dims_pointer_;
    be02:	987f      	ldr	r0, [sp, #508]	; 0x1fc
    be04:	b108      	cbz	r0, be0a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8e>
    be06:	f00c fd3b 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    be0a:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
    be0c:	2b05      	cmp	r3, #5
    be0e:	dd03      	ble.n	be18 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb9c>
      delete[] dims_pointer_;
    be10:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    be12:	b108      	cbz	r0, be18 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb9c>
    be14:	f00c fd34 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    be18:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
    be1a:	2b05      	cmp	r3, #5
    be1c:	dd03      	ble.n	be26 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbaa>
      delete[] dims_pointer_;
    be1e:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    be20:	b108      	cbz	r0, be26 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbaa>
    be22:	f00c fd2d 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    be26:	2000      	movs	r0, #0
    be28:	e27a      	b.n	c320 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    be2a:	4639      	mov	r1, r7
    be2c:	a884      	add	r0, sp, #528	; 0x210
    be2e:	f00b f961 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    be32:	4638      	mov	r0, r7
    be34:	f00a fba8 	bl	16588 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    be38:	9009      	str	r0, [sp, #36]	; 0x24
                           tflite::micro::GetTensorShape(input2),
    be3a:	4631      	mov	r1, r6
    be3c:	a88a      	add	r0, sp, #552	; 0x228
    be3e:	f00b f959 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    be42:	4630      	mov	r0, r6
    be44:	f00a fba0 	bl	16588 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    be48:	900a      	str	r0, [sp, #40]	; 0x28
                           tflite::micro::GetTensorShape(output),
    be4a:	4629      	mov	r1, r5
    be4c:	a890      	add	r0, sp, #576	; 0x240
    be4e:	f00b f951 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    be52:	4628      	mov	r0, r5
    be54:	f00a fb9e 	bl	16594 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    be58:	900b      	str	r0, [sp, #44]	; 0x2c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    be5a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    be5c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    be5e:	429a      	cmp	r2, r3
    be60:	dc04      	bgt.n	be6c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    be62:	9984      	ldr	r1, [sp, #528]	; 0x210
    be64:	2905      	cmp	r1, #5
    be66:	dd03      	ble.n	be70 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf4>
    be68:	9885      	ldr	r0, [sp, #532]	; 0x214
    be6a:	e002      	b.n	be72 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf6>
    be6c:	f00c fd1d 	bl	188aa <abort>
    be70:	a885      	add	r0, sp, #532	; 0x214
    for (int i = 0; i < size_; i++) {
    be72:	2300      	movs	r3, #0
    int buffer_size = 1;
    be74:	2201      	movs	r2, #1
    be76:	e004      	b.n	be82 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc06>
      buffer_size *= dims_data[i];
    be78:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    be7c:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
    be80:	3301      	adds	r3, #1
    be82:	4299      	cmp	r1, r3
    be84:	dcf8      	bgt.n	be78 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbfc>
    be86:	9208      	str	r2, [sp, #32]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    be88:	988a      	ldr	r0, [sp, #552]	; 0x228
    be8a:	2805      	cmp	r0, #5
    be8c:	dd01      	ble.n	be92 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc16>
    be8e:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
    be90:	e000      	b.n	be94 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc18>
    be92:	ac8b      	add	r4, sp, #556	; 0x22c
    for (int i = 0; i < size_; i++) {
    be94:	2300      	movs	r3, #0
    int buffer_size = 1;
    be96:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    be98:	4298      	cmp	r0, r3
    be9a:	dd05      	ble.n	bea8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc2c>
      buffer_size *= dims_data[i];
    be9c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    bea0:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    bea4:	3301      	adds	r3, #1
    bea6:	e7f7      	b.n	be98 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc1c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bea8:	9c90      	ldr	r4, [sp, #576]	; 0x240
    beaa:	2c05      	cmp	r4, #5
    beac:	dd01      	ble.n	beb2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc36>
    beae:	9d91      	ldr	r5, [sp, #580]	; 0x244
    beb0:	e000      	b.n	beb4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc38>
    beb2:	ad91      	add	r5, sp, #580	; 0x244
    for (int i = 0; i < size_; i++) {
    beb4:	2300      	movs	r3, #0
    int buffer_size = 1;
    beb6:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
    beb8:	429c      	cmp	r4, r3
    beba:	dd05      	ble.n	bec8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc4c>
      buffer_size *= dims_data[i];
    bebc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    bec0:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    bec4:	3301      	adds	r3, #1
    bec6:	e7f7      	b.n	beb8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc3c>
  TFLITE_CHECK_EQ(size_1, size_2);
    bec8:	9b08      	ldr	r3, [sp, #32]
    beca:	428b      	cmp	r3, r1
    becc:	d124      	bne.n	bf18 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc9c>
  TFLITE_CHECK_EQ(size_2, size_3);
    bece:	4291      	cmp	r1, r2
    bed0:	d124      	bne.n	bf1c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca0>
  TFLITE_DCHECK_GT(params.input1_offset, -max_value);
    bed2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    bed4:	4b42      	ldr	r3, [pc, #264]	; (bfe0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    bed6:	429a      	cmp	r2, r3
    bed8:	db22      	blt.n	bf20 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca4>
  TFLITE_DCHECK_GT(params.input2_offset, -max_value);
    beda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bedc:	4940      	ldr	r1, [pc, #256]	; (bfe0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    bede:	428b      	cmp	r3, r1
    bee0:	db20      	blt.n	bf24 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca8>
  TFLITE_DCHECK_LT(params.input1_offset, max_value);
    bee2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    bee6:	428a      	cmp	r2, r1
    bee8:	dc1e      	bgt.n	bf28 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcac>
  TFLITE_DCHECK_LT(params.input2_offset, max_value);
    beea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    beee:	4293      	cmp	r3, r2
    bef0:	dc1c      	bgt.n	bf2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb0>
  TFLITE_DCHECK_GT(params.input1_offset, -std::numeric_limits<T>::max());
    bef2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    bef4:	4b3a      	ldr	r3, [pc, #232]	; (bfe0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    bef6:	429a      	cmp	r2, r3
    bef8:	db1a      	blt.n	bf30 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb4>
  TFLITE_DCHECK_GT(params.input2_offset, -std::numeric_limits<T>::max());
    befa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    befc:	4938      	ldr	r1, [pc, #224]	; (bfe0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    befe:	428b      	cmp	r3, r1
    bf00:	db18      	blt.n	bf34 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb8>
  TFLITE_DCHECK_LT(params.input1_offset, std::numeric_limits<T>::max());
    bf02:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    bf06:	428a      	cmp	r2, r1
    bf08:	dc16      	bgt.n	bf38 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcbc>
  TFLITE_DCHECK_LT(params.input2_offset, std::numeric_limits<T>::max());
    bf0a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    bf0e:	4293      	cmp	r3, r2
    bf10:	dc14      	bgt.n	bf3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcc0>
  for (int i = 0; i < size; ++i) {
    bf12:	f04f 0b00 	mov.w	fp, #0
    bf16:	e0c5      	b.n	c0a4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe28>
  TFLITE_CHECK_EQ(size_1, size_2);
    bf18:	f00c fcc7 	bl	188aa <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
    bf1c:	f00c fcc5 	bl	188aa <abort>
  TFLITE_DCHECK_GT(params.input1_offset, -max_value);
    bf20:	f00c fcc3 	bl	188aa <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -max_value);
    bf24:	f00c fcc1 	bl	188aa <abort>
  TFLITE_DCHECK_LT(params.input1_offset, max_value);
    bf28:	f00c fcbf 	bl	188aa <abort>
  TFLITE_DCHECK_LT(params.input2_offset, max_value);
    bf2c:	f00c fcbd 	bl	188aa <abort>
  TFLITE_DCHECK_GT(params.input1_offset, -std::numeric_limits<T>::max());
    bf30:	f00c fcbb 	bl	188aa <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -std::numeric_limits<T>::max());
    bf34:	f00c fcb9 	bl	188aa <abort>
  TFLITE_DCHECK_LT(params.input1_offset, std::numeric_limits<T>::max());
    bf38:	f00c fcb7 	bl	188aa <abort>
  TFLITE_DCHECK_LT(params.input2_offset, std::numeric_limits<T>::max());
    bf3c:	f00c fcb5 	bl	188aa <abort>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    bf40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bf44:	d001      	beq.n	bf4a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcce>
    bf46:	9905      	ldr	r1, [sp, #20]
    bf48:	e0c6      	b.n	c0d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe5c>
    bf4a:	2101      	movs	r1, #1
    bf4c:	e0c4      	b.n	c0d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe5c>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    bf4e:	4c25      	ldr	r4, [pc, #148]	; (bfe4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    bf50:	e0d3      	b.n	c0fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe7e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    bf52:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    bf56:	1996      	adds	r6, r2, r6
    bf58:	f04f 0400 	mov.w	r4, #0
    bf5c:	eb43 0704 	adc.w	r7, r3, r4
    bf60:	e0d5      	b.n	c10e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe92>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bf62:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    bf66:	e0d8      	b.n	c11a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe9e>
  assert(exponent >= 0);
    bf68:	4b1f      	ldr	r3, [pc, #124]	; (bfe8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6c>)
    bf6a:	4a20      	ldr	r2, [pc, #128]	; (bfec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    bf6c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    bf70:	481f      	ldr	r0, [pc, #124]	; (bff0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    bf72:	f006 fc8b 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    bf76:	4b1f      	ldr	r3, [pc, #124]	; (bff4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd78>)
    bf78:	4a1c      	ldr	r2, [pc, #112]	; (bfec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    bf7a:	f240 1167 	movw	r1, #359	; 0x167
    bf7e:	481c      	ldr	r0, [pc, #112]	; (bff0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    bf80:	f006 fc84 	bl	1288c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    bf84:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    bf88:	d002      	beq.n	bf90 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd14>
    bf8a:	f8dd c014 	ldr.w	ip, [sp, #20]
    bf8e:	e10a      	b.n	c1a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2a>
    bf90:	f04f 0c01 	mov.w	ip, #1
    bf94:	e107      	b.n	c1a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2a>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    bf96:	4913      	ldr	r1, [pc, #76]	; (bfe4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    bf98:	e115      	b.n	c1c6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    bf9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bf9e:	1851      	adds	r1, r2, r1
    bfa0:	f04f 0400 	mov.w	r4, #0
    bfa4:	eb43 0004 	adc.w	r0, r3, r4
    bfa8:	e117      	b.n	c1da <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf5e>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bfaa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    bfae:	e11b      	b.n	c1e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf6c>
  assert(exponent >= 0);
    bfb0:	4b0d      	ldr	r3, [pc, #52]	; (bfe8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6c>)
    bfb2:	4a0e      	ldr	r2, [pc, #56]	; (bfec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    bfb4:	f44f 71b3 	mov.w	r1, #358	; 0x166
    bfb8:	480d      	ldr	r0, [pc, #52]	; (bff0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    bfba:	f006 fc67 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    bfbe:	4b0d      	ldr	r3, [pc, #52]	; (bff4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd78>)
    bfc0:	4a0a      	ldr	r2, [pc, #40]	; (bfec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    bfc2:	f240 1167 	movw	r1, #359	; 0x167
    bfc6:	480a      	ldr	r0, [pc, #40]	; (bff0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    bfc8:	f006 fc60 	bl	1288c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    bfcc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    bfd0:	d001      	beq.n	bfd6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd5a>
    bfd2:	9b05      	ldr	r3, [sp, #20]
    bfd4:	e14d      	b.n	c272 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xff6>
    bfd6:	2301      	movs	r3, #1
    bfd8:	e14b      	b.n	c272 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xff6>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    bfda:	4c02      	ldr	r4, [pc, #8]	; (bfe4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    bfdc:	e15a      	b.n	c294 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1018>
    bfde:	bf00      	nop
    bfe0:	ffff8002 	.word	0xffff8002
    bfe4:	c0000001 	.word	0xc0000001
    bfe8:	000343c4 	.word	0x000343c4
    bfec:	000343d4 	.word	0x000343d4
    bff0:	0003442c 	.word	0x0003442c
    bff4:	00034488 	.word	0x00034488
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    bff8:	0fec      	lsrs	r4, r5, #31
  std::int32_t ab_x2_high32 =
    bffa:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bffe:	2b00      	cmp	r3, #0
    c000:	f040 815a 	bne.w	c2b8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x103c>
  return RoundingDivideByPOT(
    c004:	4255      	negs	r5, r2
  assert(exponent >= 0);
    c006:	2d00      	cmp	r5, #0
    c008:	f2c0 8159 	blt.w	c2be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1042>
  assert(exponent <= 31);
    c00c:	2d1f      	cmp	r5, #31
    c00e:	f300 815d 	bgt.w	c2cc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1050>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c012:	f04f 0a01 	mov.w	sl, #1
    c016:	fa0a f005 	lsl.w	r0, sl, r5
    c01a:	3801      	subs	r0, #1
    c01c:	f009 febf 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c020:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c022:	2000      	movs	r0, #0
    c024:	f009 febb 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c028:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    c02a:	4650      	mov	r0, sl
    c02c:	f009 feb7 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c030:	4606      	mov	r6, r0
  const IntegerType remainder = BitAnd(x, mask);
    c032:	4639      	mov	r1, r7
    c034:	4620      	mov	r0, r4
    c036:	f009 feb3 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c03a:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c03c:	4651      	mov	r1, sl
    c03e:	4638      	mov	r0, r7
    c040:	f009 feb0 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c044:	4607      	mov	r7, r0
    c046:	4649      	mov	r1, r9
    c048:	4620      	mov	r0, r4
    c04a:	f009 feb7 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c04e:	4631      	mov	r1, r6
    c050:	f009 fea6 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c054:	4601      	mov	r1, r0
    c056:	4638      	mov	r0, r7
    c058:	f009 fea6 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c05c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    c05e:	4629      	mov	r1, r5
    c060:	4620      	mov	r0, r4
    c062:	f009 fe9f 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c066:	4604      	mov	r4, r0
    c068:	4639      	mov	r1, r7
    c06a:	4640      	mov	r0, r8
    c06c:	f009 feae 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c070:	4631      	mov	r1, r6
    c072:	f009 fe95 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c076:	4601      	mov	r1, r0
    c078:	4620      	mov	r0, r4
    c07a:	f009 fe95 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
        params.output_offset;
    c07e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
            raw_sum, params.output_multiplier, params.output_shift) +
    c080:	4418      	add	r0, r3
    const int32_t raw_output =
    c082:	9020      	str	r0, [sp, #128]	; 0x80
      if (__a < __b)
    c084:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    c086:	4298      	cmp	r0, r3
    c088:	f300 8127 	bgt.w	c2da <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x105e>
      return __a;
    c08c:	ab33      	add	r3, sp, #204	; 0xcc
      if (__b < __a)
    c08e:	6819      	ldr	r1, [r3, #0]
    c090:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    c092:	4291      	cmp	r1, r2
    c094:	db00      	blt.n	c098 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe1c>
      return __a;
    c096:	ab34      	add	r3, sp, #208	; 0xd0
    const int32_t clamped_output =
    c098:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<T>(clamped_output);
    c09a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c09c:	9906      	ldr	r1, [sp, #24]
    c09e:	5253      	strh	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    c0a0:	f10b 0b01 	add.w	fp, fp, #1
    c0a4:	9b08      	ldr	r3, [sp, #32]
    c0a6:	455b      	cmp	r3, fp
    c0a8:	f340 8119 	ble.w	c2de <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1062>
    const int32_t input1_val = params.input1_offset + input1_data[i];
    c0ac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c0ae:	ea4f 034b 	mov.w	r3, fp, lsl #1
    c0b2:	9306      	str	r3, [sp, #24]
    c0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0b6:	f933 301b 	ldrsh.w	r3, [r3, fp, lsl #1]
    c0ba:	441a      	add	r2, r3
    const int32_t input2_val = params.input2_offset + input2_data[i];
    c0bc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    c0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c0c0:	f933 301b 	ldrsh.w	r3, [r3, fp, lsl #1]
    c0c4:	441d      	add	r5, r3
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
    c0c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c0c8:	409a      	lsls	r2, r3
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
    c0ca:	409d      	lsls	r5, r3
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
    c0cc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    c0ce:	9830      	ldr	r0, [sp, #192]	; 0xc0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c0d0:	429a      	cmp	r2, r3
    c0d2:	f43f af35 	beq.w	bf40 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcc4>
    c0d6:	9905      	ldr	r1, [sp, #20]
  std::int64_t a_64(a);
    c0d8:	ea4f 79e2 	mov.w	r9, r2, asr #31
  std::int64_t b_64(b);
    c0dc:	17df      	asrs	r7, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    c0de:	fb02 f407 	mul.w	r4, r2, r7
    c0e2:	fb03 4409 	mla	r4, r3, r9, r4
    c0e6:	fba2 2303 	umull	r2, r3, r2, r3
    c0ea:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c0ec:	2a00      	cmp	r2, #0
    c0ee:	f173 0400 	sbcs.w	r4, r3, #0
    c0f2:	f6ff af2c 	blt.w	bf4e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcd2>
    c0f6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c0fa:	1912      	adds	r2, r2, r4
    c0fc:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    c100:	4616      	mov	r6, r2
    c102:	461f      	mov	r7, r3
    c104:	2a00      	cmp	r2, #0
    c106:	f173 0400 	sbcs.w	r4, r3, #0
    c10a:	f6ff af22 	blt.w	bf52 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcd6>
    c10e:	0ff4      	lsrs	r4, r6, #31
  std::int32_t ab_x2_high32 =
    c110:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c114:	2900      	cmp	r1, #0
    c116:	f47f af24 	bne.w	bf62 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xce6>
    c11a:	4246      	negs	r6, r0
  assert(exponent >= 0);
    c11c:	2e00      	cmp	r6, #0
    c11e:	f6ff af23 	blt.w	bf68 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcec>
  assert(exponent <= 31);
    c122:	2e1f      	cmp	r6, #31
    c124:	f73f af27 	bgt.w	bf76 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcfa>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c128:	f04f 0a01 	mov.w	sl, #1
    c12c:	fa0a f006 	lsl.w	r0, sl, r6
    c130:	3801      	subs	r0, #1
    c132:	f009 fe34 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c136:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c138:	2000      	movs	r0, #0
    c13a:	f009 fe30 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c13e:	9007      	str	r0, [sp, #28]
  const IntegerType one = Dup<IntegerType>(1);
    c140:	4650      	mov	r0, sl
    c142:	f009 fe2c 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c146:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    c148:	4641      	mov	r1, r8
    c14a:	4620      	mov	r0, r4
    c14c:	f009 fe28 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c150:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c152:	4651      	mov	r1, sl
    c154:	4640      	mov	r0, r8
    c156:	f009 fe25 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c15a:	4680      	mov	r8, r0
    c15c:	9907      	ldr	r1, [sp, #28]
    c15e:	4620      	mov	r0, r4
    c160:	f009 fe2c 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c164:	4639      	mov	r1, r7
    c166:	f009 fe1b 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c16a:	4601      	mov	r1, r0
    c16c:	4640      	mov	r0, r8
    c16e:	f009 fe1b 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c172:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    c174:	4631      	mov	r1, r6
    c176:	4620      	mov	r0, r4
    c178:	f009 fe14 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c17c:	4604      	mov	r4, r0
    c17e:	4641      	mov	r1, r8
    c180:	4648      	mov	r0, r9
    c182:	f009 fe23 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c186:	4639      	mov	r1, r7
    c188:	f009 fe0a 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c18c:	4601      	mov	r1, r0
    c18e:	4620      	mov	r0, r4
    c190:	f009 fe0a 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c194:	4680      	mov	r8, r0
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
    c196:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    c198:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c19c:	4295      	cmp	r5, r2
    c19e:	f43f aef1 	beq.w	bf84 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd08>
    c1a2:	f8dd c014 	ldr.w	ip, [sp, #20]
  std::int64_t a_64(a);
    c1a6:	17e9      	asrs	r1, r5, #31
  std::int64_t b_64(b);
    c1a8:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    c1aa:	fb05 f307 	mul.w	r3, r5, r7
    c1ae:	fb02 3101 	mla	r1, r2, r1, r3
    c1b2:	fba5 2302 	umull	r2, r3, r5, r2
    c1b6:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c1b8:	2a00      	cmp	r2, #0
    c1ba:	f173 0100 	sbcs.w	r1, r3, #0
    c1be:	f6ff aeea 	blt.w	bf96 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd1a>
    c1c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c1c6:	1852      	adds	r2, r2, r1
    c1c8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    c1cc:	4611      	mov	r1, r2
    c1ce:	4618      	mov	r0, r3
    c1d0:	2a00      	cmp	r2, #0
    c1d2:	f173 0400 	sbcs.w	r4, r3, #0
    c1d6:	f6ff aee0 	blt.w	bf9a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd1e>
    c1da:	0fcc      	lsrs	r4, r1, #31
  std::int32_t ab_x2_high32 =
    c1dc:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c1e0:	f1bc 0f00 	cmp.w	ip, #0
    c1e4:	f47f aee1 	bne.w	bfaa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2e>
    c1e8:	f1ce 0500 	rsb	r5, lr, #0
  assert(exponent >= 0);
    c1ec:	2d00      	cmp	r5, #0
    c1ee:	f6ff aedf 	blt.w	bfb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd34>
  assert(exponent <= 31);
    c1f2:	2d1f      	cmp	r5, #31
    c1f4:	f73f aee3 	bgt.w	bfbe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd42>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c1f8:	f04f 0a01 	mov.w	sl, #1
    c1fc:	fa0a f005 	lsl.w	r0, sl, r5
    c200:	3801      	subs	r0, #1
    c202:	f009 fdcc 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c206:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c208:	2000      	movs	r0, #0
    c20a:	f009 fdc8 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c20e:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    c210:	4650      	mov	r0, sl
    c212:	f009 fdc4 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c216:	4606      	mov	r6, r0
  const IntegerType remainder = BitAnd(x, mask);
    c218:	4639      	mov	r1, r7
    c21a:	4620      	mov	r0, r4
    c21c:	f009 fdc0 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c220:	9007      	str	r0, [sp, #28]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c222:	4651      	mov	r1, sl
    c224:	4638      	mov	r0, r7
    c226:	f009 fdbd 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c22a:	4607      	mov	r7, r0
    c22c:	4649      	mov	r1, r9
    c22e:	4620      	mov	r0, r4
    c230:	f009 fdc4 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c234:	4631      	mov	r1, r6
    c236:	f009 fdb3 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c23a:	4601      	mov	r1, r0
    c23c:	4638      	mov	r0, r7
    c23e:	f009 fdb3 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c242:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    c244:	4629      	mov	r1, r5
    c246:	4620      	mov	r0, r4
    c248:	f009 fdac 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c24c:	4604      	mov	r4, r0
    c24e:	4639      	mov	r1, r7
    c250:	9807      	ldr	r0, [sp, #28]
    c252:	f009 fdbb 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c256:	4631      	mov	r1, r6
    c258:	f009 fda2 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c25c:	4601      	mov	r1, r0
    c25e:	4620      	mov	r0, r4
    c260:	f009 fda2 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    c264:	4440      	add	r0, r8
            raw_sum, params.output_multiplier, params.output_shift) +
    c266:	992c      	ldr	r1, [sp, #176]	; 0xb0
    c268:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c26a:	4288      	cmp	r0, r1
    c26c:	f43f aeae 	beq.w	bfcc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd50>
    c270:	9b05      	ldr	r3, [sp, #20]
  std::int64_t a_64(a);
    c272:	ea4f 79e0 	mov.w	r9, r0, asr #31
  std::int64_t b_64(b);
    c276:	17cf      	asrs	r7, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    c278:	fb00 f407 	mul.w	r4, r0, r7
    c27c:	fb01 4409 	mla	r4, r1, r9, r4
    c280:	fba0 0101 	umull	r0, r1, r0, r1
    c284:	4421      	add	r1, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c286:	2800      	cmp	r0, #0
    c288:	f171 0400 	sbcs.w	r4, r1, #0
    c28c:	f6ff aea5 	blt.w	bfda <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd5e>
    c290:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c294:	1900      	adds	r0, r0, r4
    c296:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
    c29a:	4605      	mov	r5, r0
    c29c:	460e      	mov	r6, r1
    c29e:	2800      	cmp	r0, #0
    c2a0:	f171 0400 	sbcs.w	r4, r1, #0
    c2a4:	f6bf aea8 	bge.w	bff8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd7c>
    c2a8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    c2ac:	1945      	adds	r5, r0, r5
    c2ae:	f04f 0400 	mov.w	r4, #0
    c2b2:	eb41 0604 	adc.w	r6, r1, r4
    c2b6:	e69f      	b.n	bff8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd7c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c2b8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c2bc:	e6a2      	b.n	c004 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd88>
  assert(exponent >= 0);
    c2be:	4b1a      	ldr	r3, [pc, #104]	; (c328 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10ac>)
    c2c0:	4a1a      	ldr	r2, [pc, #104]	; (c32c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b0>)
    c2c2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    c2c6:	481a      	ldr	r0, [pc, #104]	; (c330 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b4>)
    c2c8:	f006 fae0 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    c2cc:	4b19      	ldr	r3, [pc, #100]	; (c334 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b8>)
    c2ce:	4a17      	ldr	r2, [pc, #92]	; (c32c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b0>)
    c2d0:	f240 1167 	movw	r1, #359	; 0x167
    c2d4:	4816      	ldr	r0, [pc, #88]	; (c330 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b4>)
    c2d6:	f006 fad9 	bl	1288c <__assert_func>
	return __b;
    c2da:	ab20      	add	r3, sp, #128	; 0x80
    c2dc:	e6d7      	b.n	c08e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe12>
    if (size_ > kMaxSmallSize) {
    c2de:	9b90      	ldr	r3, [sp, #576]	; 0x240
    c2e0:	2b05      	cmp	r3, #5
    c2e2:	dd03      	ble.n	c2ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1070>
      delete[] dims_pointer_;
    c2e4:	9891      	ldr	r0, [sp, #580]	; 0x244
    c2e6:	b108      	cbz	r0, c2ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1070>
    c2e8:	f00c faca 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c2ec:	9b8a      	ldr	r3, [sp, #552]	; 0x228
    c2ee:	2b05      	cmp	r3, #5
    c2f0:	dd03      	ble.n	c2fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x107e>
      delete[] dims_pointer_;
    c2f2:	988b      	ldr	r0, [sp, #556]	; 0x22c
    c2f4:	b108      	cbz	r0, c2fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x107e>
    c2f6:	f00c fac3 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c2fa:	9b84      	ldr	r3, [sp, #528]	; 0x210
    c2fc:	2b05      	cmp	r3, #5
    c2fe:	dd03      	ble.n	c308 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x108c>
      delete[] dims_pointer_;
    c300:	9885      	ldr	r0, [sp, #532]	; 0x214
    c302:	b108      	cbz	r0, c308 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x108c>
    c304:	f00c fabc 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    c308:	2000      	movs	r0, #0
    c30a:	e009      	b.n	c320 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c30c:	f8d8 6014 	ldr.w	r6, [r8, #20]
    c310:	f7fc febc 	bl	908c <TfLiteTypeGetName>
    c314:	4602      	mov	r2, r0
    c316:	7a2b      	ldrb	r3, [r5, #8]
    c318:	4907      	ldr	r1, [pc, #28]	; (c338 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10bc>)
    c31a:	4640      	mov	r0, r8
    c31c:	47b0      	blx	r6
      return kTfLiteError;
    c31e:	2001      	movs	r0, #1
}
    c320:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    c324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c328:	000343c4 	.word	0x000343c4
    c32c:	000343d4 	.word	0x000343d4
    c330:	0003442c 	.word	0x0003442c
    c334:	00034488 	.word	0x00034488
    c338:	00034498 	.word	0x00034498

0000c33c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c340:	b084      	sub	sp, #16
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
    c342:	f8d1 9014 	ldr.w	r9, [r1, #20]
  TFLITE_DCHECK(node->user_data != nullptr);
    c346:	f8d1 8010 	ldr.w	r8, [r1, #16]
    c34a:	f1b8 0f00 	cmp.w	r8, #0
    c34e:	d02c      	beq.n	c3aa <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
    c350:	4604      	mov	r4, r0
    c352:	460d      	mov	r5, r1
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    c354:	b358      	cbz	r0, c3ae <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    c356:	b361      	cbz	r1, c3b2 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c358:	6d43      	ldr	r3, [r0, #84]	; 0x54
    c35a:	680a      	ldr	r2, [r1, #0]
    c35c:	6851      	ldr	r1, [r2, #4]
    c35e:	4798      	blx	r3
    c360:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
    c362:	b344      	cbz	r4, c3b6 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK(node != nullptr);
    c364:	b34d      	cbz	r5, c3ba <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c366:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c368:	682a      	ldr	r2, [r5, #0]
    c36a:	6891      	ldr	r1, [r2, #8]
    c36c:	4620      	mov	r0, r4
    c36e:	4798      	blx	r3
    c370:	4682      	mov	sl, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    c372:	b324      	cbz	r4, c3be <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x82>
  TFLITE_DCHECK(node != nullptr);
    c374:	b32d      	cbz	r5, c3c2 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x86>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    c376:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c378:	686a      	ldr	r2, [r5, #4]
    c37a:	6851      	ldr	r1, [r2, #4]
    c37c:	4620      	mov	r0, r4
    c37e:	4798      	blx	r3
    c380:	4606      	mov	r6, r0
  if (output->type == kTfLiteFloat32) {
    c382:	7a00      	ldrb	r0, [r0, #8]
    c384:	2801      	cmp	r0, #1
    c386:	d01e      	beq.n	c3c6 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  } else if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
    c388:	2809      	cmp	r0, #9
    c38a:	d001      	beq.n	c390 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x54>
    c38c:	2807      	cmp	r0, #7
    c38e:	d126      	bne.n	c3de <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
    c390:	9602      	str	r6, [sp, #8]
    c392:	f8cd a004 	str.w	sl, [sp, #4]
    c396:	9700      	str	r7, [sp, #0]
    c398:	4643      	mov	r3, r8
    c39a:	464a      	mov	r2, r9
    c39c:	4629      	mov	r1, r5
    c39e:	4620      	mov	r0, r4
    c3a0:	f7fe ff6c 	bl	b27c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
}
    c3a4:	b004      	add	sp, #16
    c3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    c3aa:	f00c fa7e 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    c3ae:	f00c fa7c 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    c3b2:	f00c fa7a 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    c3b6:	f00c fa78 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    c3ba:	f00c fa76 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    c3be:	f00c fa74 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    c3c2:	f00c fa72 	bl	188aa <abort>
    EvalAdd(context, node, params, data, input1, input2, output);
    c3c6:	9602      	str	r6, [sp, #8]
    c3c8:	f8cd a004 	str.w	sl, [sp, #4]
    c3cc:	9700      	str	r7, [sp, #0]
    c3ce:	4643      	mov	r3, r8
    c3d0:	464a      	mov	r2, r9
    c3d2:	4629      	mov	r1, r5
    c3d4:	4620      	mov	r0, r4
    c3d6:	f009 fda2 	bl	15f1e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
  return kTfLiteOk;
    c3da:	2000      	movs	r0, #0
    c3dc:	e7e2      	b.n	c3a4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c3de:	6965      	ldr	r5, [r4, #20]
    c3e0:	f7fc fe54 	bl	908c <TfLiteTypeGetName>
    c3e4:	4602      	mov	r2, r0
    c3e6:	7a33      	ldrb	r3, [r6, #8]
    c3e8:	4902      	ldr	r1, [pc, #8]	; (c3f4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
    c3ea:	4620      	mov	r0, r4
    c3ec:	47a8      	blx	r5
    return kTfLiteError;
    c3ee:	2001      	movs	r0, #1
    c3f0:	e7d8      	b.n	c3a4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    c3f2:	bf00      	nop
    c3f4:	00034498 	.word	0x00034498

0000c3f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
    c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3fc:	b0a5      	sub	sp, #148	; 0x94
    c3fe:	9118      	str	r1, [sp, #96]	; 0x60
    c400:	9219      	str	r2, [sp, #100]	; 0x64
    c402:	461d      	mov	r5, r3
    c404:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
    c408:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    c40a:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  const int stride_width = params.stride_width;
    c40e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    c412:	920e      	str	r2, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
    c414:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    c418:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
    c41a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    c41e:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
    c420:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    c424:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
    c426:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    c42a:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
    c42c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    c430:	9213      	str	r2, [sp, #76]	; 0x4c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    c432:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c434:	921d      	str	r2, [sp, #116]	; 0x74
  const int32_t output_activation_max = params.quantized_activation_max;
    c436:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    c438:	911c      	str	r1, [sp, #112]	; 0x70

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c43a:	428a      	cmp	r2, r1
    c43c:	f300 8086 	bgt.w	c54c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x154>
  inline int32_t DimensionsCount() const { return size_; }
    c440:	682a      	ldr	r2, [r5, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    c442:	2a04      	cmp	r2, #4
    c444:	f040 8084 	bne.w	c550 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    c448:	f8de 2000 	ldr.w	r2, [lr]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    c44c:	2a04      	cmp	r2, #4
    c44e:	f040 8081 	bne.w	c554 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x15c>
    c452:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    c456:	2a04      	cmp	r2, #4
    c458:	d17e      	bne.n	c558 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x160>
    TFLITE_DCHECK_LT(i, size_);
    c45a:	682a      	ldr	r2, [r5, #0]
    c45c:	2a00      	cmp	r2, #0
    c45e:	dd7d      	ble.n	c55c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x164>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c460:	2a05      	cmp	r2, #5
    c462:	dd7d      	ble.n	c560 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x168>
    c464:	686a      	ldr	r2, [r5, #4]
    c466:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    c468:	f8d9 2000 	ldr.w	r2, [r9]
    c46c:	2a00      	cmp	r2, #0
    c46e:	dd79      	ble.n	c564 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c470:	2a05      	cmp	r2, #5
    c472:	dd79      	ble.n	c568 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x170>
    c474:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c478:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c47a:	428a      	cmp	r2, r1
    c47c:	d177      	bne.n	c56e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c47e:	9123      	str	r1, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    c480:	f8d9 2000 	ldr.w	r2, [r9]
    c484:	2a00      	cmp	r2, #0
    c486:	dd74      	ble.n	c572 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c488:	2a05      	cmp	r2, #5
    c48a:	dd74      	ble.n	c576 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17e>
    c48c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c490:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c492:	9222      	str	r2, [sp, #136]	; 0x88
      if (__b < __a)
    c494:	4291      	cmp	r1, r2
    c496:	dc71      	bgt.n	c57c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x184>
      return __a;
    c498:	aa23      	add	r2, sp, #140	; 0x8c
    c49a:	6812      	ldr	r2, [r2, #0]
    c49c:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    c49e:	682a      	ldr	r2, [r5, #0]
    c4a0:	2a03      	cmp	r2, #3
    c4a2:	dd6d      	ble.n	c580 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c4a4:	2a05      	cmp	r2, #5
    c4a6:	dd6d      	ble.n	c584 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x18c>
    c4a8:	686a      	ldr	r2, [r5, #4]
    c4aa:	68d1      	ldr	r1, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    c4ac:	f8de 2000 	ldr.w	r2, [lr]
    c4b0:	2a03      	cmp	r2, #3
    c4b2:	dd69      	ble.n	c588 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x190>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c4b4:	2a05      	cmp	r2, #5
    c4b6:	dd69      	ble.n	c58c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x194>
    c4b8:	f8de 2004 	ldr.w	r2, [lr, #4]
    c4bc:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c4be:	428a      	cmp	r2, r1
    c4c0:	d167      	bne.n	c592 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c4c2:	9121      	str	r1, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    c4c4:	f8de 2000 	ldr.w	r2, [lr]
    c4c8:	2a03      	cmp	r2, #3
    c4ca:	dd64      	ble.n	c596 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c4cc:	2a05      	cmp	r2, #5
    c4ce:	dd64      	ble.n	c59a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a2>
    c4d0:	f8de 2004 	ldr.w	r2, [lr, #4]
    c4d4:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c4d6:	9220      	str	r2, [sp, #128]	; 0x80
      if (__b < __a)
    c4d8:	4291      	cmp	r1, r2
    c4da:	dc61      	bgt.n	c5a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a8>
      return __a;
    c4dc:	aa21      	add	r2, sp, #132	; 0x84
    c4de:	6812      	ldr	r2, [r2, #0]
    c4e0:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    c4e2:	f8de 2000 	ldr.w	r2, [lr]
    c4e6:	2a00      	cmp	r2, #0
    c4e8:	dd5c      	ble.n	c5a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c4ea:	2a05      	cmp	r2, #5
    c4ec:	dd5c      	ble.n	c5a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
    c4ee:	f8de 2004 	ldr.w	r2, [lr, #4]
    c4f2:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    c4f4:	f8d9 2000 	ldr.w	r2, [r9]
    c4f8:	2a03      	cmp	r2, #3
    c4fa:	dd58      	ble.n	c5ae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c4fc:	2a05      	cmp	r2, #5
    c4fe:	dd58      	ble.n	c5b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ba>
    c500:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c504:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c506:	428a      	cmp	r2, r1
    c508:	d156      	bne.n	c5b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c50a:	911f      	str	r1, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
    c50c:	f8d9 2000 	ldr.w	r2, [r9]
    c510:	2a03      	cmp	r2, #3
    c512:	dd53      	ble.n	c5bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c514:	2a05      	cmp	r2, #5
    c516:	dd53      	ble.n	c5c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c8>
    c518:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c51c:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c51e:	921e      	str	r2, [sp, #120]	; 0x78
      if (__b < __a)
    c520:	4291      	cmp	r1, r2
    c522:	dc50      	bgt.n	c5c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ce>
      return __a;
    c524:	aa1f      	add	r2, sp, #124	; 0x7c
    c526:	6812      	ldr	r2, [r2, #0]
    c528:	9205      	str	r2, [sp, #20]
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    c52a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    c52c:	2a00      	cmp	r2, #0
    c52e:	d051      	beq.n	c5d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c530:	6818      	ldr	r0, [r3, #0]
    c532:	2805      	cmp	r0, #5
    c534:	dd49      	ble.n	c5ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d2>
    c536:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    c538:	2100      	movs	r1, #0
    int buffer_size = 1;
    c53a:	2401      	movs	r4, #1
    for (int i = 0; i < size_; i++) {
    c53c:	4281      	cmp	r1, r0
    c53e:	da46      	bge.n	c5ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d6>
      buffer_size *= dims_data[i];
    c540:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    c544:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
    c548:	3101      	adds	r1, #1
    c54a:	e7f7      	b.n	c53c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x144>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c54c:	f00c f9ad 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    c550:	f00c f9ab 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    c554:	f00c f9a9 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    c558:	f00c f9a7 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    c55c:	f00c f9a5 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c560:	6869      	ldr	r1, [r5, #4]
    c562:	e781      	b.n	c468 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x70>
    TFLITE_DCHECK_LT(i, size_);
    c564:	f00c f9a1 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c568:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c56c:	e785      	b.n	c47a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x82>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c56e:	f00c f99c 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    c572:	f00c f99a 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c576:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c57a:	e78a      	b.n	c492 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x9a>
	return __b;
    c57c:	aa22      	add	r2, sp, #136	; 0x88
    c57e:	e78c      	b.n	c49a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xa2>
    TFLITE_DCHECK_LT(i, size_);
    c580:	f00c f993 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c584:	6929      	ldr	r1, [r5, #16]
    c586:	e791      	b.n	c4ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    c588:	f00c f98f 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c58c:	f8de 2010 	ldr.w	r2, [lr, #16]
    c590:	e795      	b.n	c4be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c592:	f00c f98a 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    c596:	f00c f988 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c59a:	f8de 2010 	ldr.w	r2, [lr, #16]
    c59e:	e79a      	b.n	c4d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xde>
    c5a0:	aa20      	add	r2, sp, #128	; 0x80
    c5a2:	e79c      	b.n	c4de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xe6>
    TFLITE_DCHECK_LT(i, size_);
    c5a4:	f00c f981 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5a8:	f8de 1004 	ldr.w	r1, [lr, #4]
    c5ac:	e7a2      	b.n	c4f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xfc>
    TFLITE_DCHECK_LT(i, size_);
    c5ae:	f00c f97c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5b2:	f8d9 2010 	ldr.w	r2, [r9, #16]
    c5b6:	e7a6      	b.n	c506 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x10e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c5b8:	f00c f977 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    c5bc:	f00c f975 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
    c5c4:	e7ab      	b.n	c51e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x126>
    c5c6:	aa1e      	add	r2, sp, #120	; 0x78
    c5c8:	e7ad      	b.n	c526 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x12e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c5ca:	3304      	adds	r3, #4
    c5cc:	e7b4      	b.n	c538 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x140>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    c5ce:	9b05      	ldr	r3, [sp, #20]
    c5d0:	429c      	cmp	r4, r3
    c5d2:	d160      	bne.n	c696 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x29e>
    TFLITE_DCHECK_LT(i, size_);
    c5d4:	682b      	ldr	r3, [r5, #0]
    c5d6:	2b01      	cmp	r3, #1
    c5d8:	dd5f      	ble.n	c69a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5da:	2b05      	cmp	r3, #5
    c5dc:	dd5f      	ble.n	c69e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a6>
    c5de:	686b      	ldr	r3, [r5, #4]
    c5e0:	685b      	ldr	r3, [r3, #4]
    c5e2:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    c5e4:	682b      	ldr	r3, [r5, #0]
    c5e6:	2b02      	cmp	r3, #2
    c5e8:	dd5c      	ble.n	c6a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5ea:	2b05      	cmp	r3, #5
    c5ec:	dd5c      	ble.n	c6a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b0>
    c5ee:	686b      	ldr	r3, [r5, #4]
    c5f0:	689b      	ldr	r3, [r3, #8]
    c5f2:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    c5f4:	f8de 3000 	ldr.w	r3, [lr]
    c5f8:	2b01      	cmp	r3, #1
    c5fa:	dd58      	ble.n	c6ae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5fc:	2b05      	cmp	r3, #5
    c5fe:	dd58      	ble.n	c6b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ba>
    c600:	f8de 3004 	ldr.w	r3, [lr, #4]
    c604:	685b      	ldr	r3, [r3, #4]
    c606:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    c608:	f8de 3000 	ldr.w	r3, [lr]
    c60c:	2b02      	cmp	r3, #2
    c60e:	dd54      	ble.n	c6ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c610:	2b05      	cmp	r3, #5
    c612:	dd54      	ble.n	c6be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c6>
    c614:	f8de 3004 	ldr.w	r3, [lr, #4]
    c618:	689b      	ldr	r3, [r3, #8]
    c61a:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    c61c:	f8d9 3000 	ldr.w	r3, [r9]
    c620:	2b01      	cmp	r3, #1
    c622:	dd50      	ble.n	c6c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c624:	2b05      	cmp	r3, #5
    c626:	dd50      	ble.n	c6ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2d2>
    c628:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c62c:	685b      	ldr	r3, [r3, #4]
    c62e:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    c630:	f8d9 3000 	ldr.w	r3, [r9]
    c634:	2b02      	cmp	r3, #2
    c636:	dd4c      	ble.n	c6d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c638:	2b05      	cmp	r3, #5
    c63a:	dd4c      	ble.n	c6d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2de>
    c63c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c640:	689b      	ldr	r3, [r3, #8]
    c642:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    c644:	2300      	movs	r3, #0
    c646:	9300      	str	r3, [sp, #0]
    c648:	46f0      	mov	r8, lr
    c64a:	464c      	mov	r4, r9
    c64c:	46a9      	mov	r9, r5
    c64e:	9b00      	ldr	r3, [sp, #0]
    c650:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c652:	4293      	cmp	r3, r2
    c654:	f280 8190 	bge.w	c978 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x580>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    c658:	2300      	movs	r3, #0
    c65a:	9301      	str	r3, [sp, #4]
    c65c:	46ce      	mov	lr, r9
    c65e:	46c1      	mov	r9, r8
    c660:	9b01      	ldr	r3, [sp, #4]
    c662:	9907      	ldr	r1, [sp, #28]
    c664:	428b      	cmp	r3, r1
    c666:	f280 8181 	bge.w	c96c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x574>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    c66a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c66c:	fb02 f303 	mul.w	r3, r2, r3
    c670:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c672:	1a9b      	subs	r3, r3, r2
    c674:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    c676:	2300      	movs	r3, #0
    c678:	9304      	str	r3, [sp, #16]
    c67a:	46f0      	mov	r8, lr
    c67c:	9b04      	ldr	r3, [sp, #16]
    c67e:	9906      	ldr	r1, [sp, #24]
    c680:	428b      	cmp	r3, r1
    c682:	f280 816e 	bge.w	c962 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x56a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    c686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c688:	fb02 f303 	mul.w	r3, r2, r3
    c68c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c68e:	1a9b      	subs	r3, r3, r2
    c690:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    c692:	2100      	movs	r1, #0
    c694:	e135      	b.n	c902 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x50a>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    c696:	f00c f908 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    c69a:	f00c f906 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c69e:	68ab      	ldr	r3, [r5, #8]
    c6a0:	930b      	str	r3, [sp, #44]	; 0x2c
    c6a2:	e79f      	b.n	c5e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    c6a4:	f00c f901 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c6a8:	68eb      	ldr	r3, [r5, #12]
    c6aa:	930a      	str	r3, [sp, #40]	; 0x28
    c6ac:	e7a2      	b.n	c5f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fc>
    TFLITE_DCHECK_LT(i, size_);
    c6ae:	f00c f8fc 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c6b2:	f8de 3008 	ldr.w	r3, [lr, #8]
    c6b6:	9309      	str	r3, [sp, #36]	; 0x24
    c6b8:	e7a6      	b.n	c608 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x210>
    TFLITE_DCHECK_LT(i, size_);
    c6ba:	f00c f8f6 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c6be:	f8de 300c 	ldr.w	r3, [lr, #12]
    c6c2:	9308      	str	r3, [sp, #32]
    c6c4:	e7aa      	b.n	c61c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x224>
    TFLITE_DCHECK_LT(i, size_);
    c6c6:	f00c f8f0 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c6ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c6ce:	9307      	str	r3, [sp, #28]
    c6d0:	e7ae      	b.n	c630 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x238>
    TFLITE_DCHECK_LT(i, size_);
    c6d2:	f00c f8ea 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c6d6:	f8d9 300c 	ldr.w	r3, [r9, #12]
    c6da:	9306      	str	r3, [sp, #24]
    c6dc:	e7b2      	b.n	c644 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x24c>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c6de:	f00c f8e4 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c6e2:	f00c f8e2 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c6e6:	f00c f8e0 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c6ea:	f00c f8de 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    c6ee:	f00c f8dc 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c6f2:	f00c f8da 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c6f6:	f00c f8d8 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c6fa:	f00c f8d6 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c6fe:	f00c f8d4 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    c702:	f00c f8d2 	bl	188aa <abort>
    c706:	9c33      	ldr	r4, [sp, #204]	; 0xcc
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    c708:	3501      	adds	r5, #1
    c70a:	9b08      	ldr	r3, [sp, #32]
    c70c:	429d      	cmp	r5, r3
    c70e:	da68      	bge.n	c7e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ea>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    c710:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c712:	9a15      	ldr	r2, [sp, #84]	; 0x54
    c714:	fb03 2205 	mla	r2, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    c718:	2a00      	cmp	r2, #0
    c71a:	dbf5      	blt.n	c708 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    c71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c71e:	429a      	cmp	r2, r3
    c720:	daf2      	bge.n	c708 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    c722:	2f00      	cmp	r7, #0
    c724:	dbf0      	blt.n	c708 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    c726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c728:	429f      	cmp	r7, r3
    c72a:	daed      	bge.n	c708 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    c72c:	2300      	movs	r3, #0
    c72e:	9433      	str	r4, [sp, #204]	; 0xcc

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    c730:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c732:	42a3      	cmp	r3, r4
    c734:	dae7      	bge.n	c706 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c736:	f8d8 4000 	ldr.w	r4, [r8]
    c73a:	2c04      	cmp	r4, #4
    c73c:	d1cf      	bne.n	c6de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c73e:	2800      	cmp	r0, #0
    c740:	dbcf      	blt.n	c6e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
    c742:	f8d8 4004 	ldr.w	r4, [r8, #4]
    c746:	42a0      	cmp	r0, r4
    c748:	dacb      	bge.n	c6e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c74a:	2f00      	cmp	r7, #0
    c74c:	dbcb      	blt.n	c6e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
    c74e:	f8d8 a008 	ldr.w	sl, [r8, #8]
    c752:	4557      	cmp	r7, sl
    c754:	dac7      	bge.n	c6e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c756:	2a00      	cmp	r2, #0
    c758:	dbc7      	blt.n	c6ea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
    c75a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
    c75e:	4572      	cmp	r2, lr
    c760:	dac3      	bge.n	c6ea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    c762:	2b00      	cmp	r3, #0
    c764:	dbc3      	blt.n	c6ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
    c766:	f8d8 c010 	ldr.w	ip, [r8, #16]
    c76a:	4563      	cmp	r3, ip
    c76c:	dabf      	bge.n	c6ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    c76e:	fb0a 7a00 	mla	sl, sl, r0, r7
    c772:	fb0a 2a0e 	mla	sl, sl, lr, r2
    c776:	fb0a 3c0c 	mla	ip, sl, ip, r3
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    c77a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    c77c:	f934 e01c 	ldrsh.w	lr, [r4, ip, lsl #1]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c780:	f8d9 4000 	ldr.w	r4, [r9]
    c784:	2c04      	cmp	r4, #4
    c786:	d1b4      	bne.n	c6f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fa>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c788:	2900      	cmp	r1, #0
    c78a:	dbb4      	blt.n	c6f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
    c78c:	f8d9 4004 	ldr.w	r4, [r9, #4]
    c790:	42a1      	cmp	r1, r4
    c792:	dab0      	bge.n	c6f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c794:	2e00      	cmp	r6, #0
    c796:	dbb0      	blt.n	c6fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
    c798:	f8d9 c008 	ldr.w	ip, [r9, #8]
    c79c:	4566      	cmp	r6, ip
    c79e:	daac      	bge.n	c6fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c7a0:	2d00      	cmp	r5, #0
    c7a2:	dbac      	blt.n	c6fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
    c7a4:	f8d9 b00c 	ldr.w	fp, [r9, #12]
    c7a8:	455d      	cmp	r5, fp
    c7aa:	daa8      	bge.n	c6fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	dba8      	blt.n	c702 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
    c7b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
    c7b4:	4553      	cmp	r3, sl
    c7b6:	daa4      	bge.n	c702 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    c7b8:	fb0c 6c01 	mla	ip, ip, r1, r6
    c7bc:	fb0c 5c0b 	mla	ip, ip, fp, r5
    c7c0:	fb0c 3c0a 	mla	ip, ip, sl, r3
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    c7c4:	9c30      	ldr	r4, [sp, #192]	; 0xc0
    c7c6:	f914 c00c 	ldrsb.w	ip, [r4, ip]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
    c7ca:	fb0c fe0e 	mul.w	lr, ip, lr
    c7ce:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    c7d2:	eb1a 0a0e 	adds.w	sl, sl, lr
    c7d6:	eb4b 7bee 	adc.w	fp, fp, lr, asr #31
    c7da:	e9cd ab02 	strd	sl, fp, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    c7de:	3301      	adds	r3, #1
    c7e0:	e7a6      	b.n	c730 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x338>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    c7e2:	3601      	adds	r6, #1
    c7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7e6:	429e      	cmp	r6, r3
    c7e8:	da06      	bge.n	c7f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x400>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    c7ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c7ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c7ee:	fb03 2706 	mla	r7, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    c7f2:	2500      	movs	r5, #0
    c7f4:	9800      	ldr	r0, [sp, #0]
    c7f6:	e788      	b.n	c70a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x312>
    c7f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
              }
            }
          }
          if (bias_data) {
    c7fc:	9832      	ldr	r0, [sp, #200]	; 0xc8
    c7fe:	b130      	cbz	r0, c80e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x416>
            acc += bias_data[out_channel];
    c800:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    c804:	6828      	ldr	r0, [r5, #0]
    c806:	686d      	ldr	r5, [r5, #4]
    c808:	1812      	adds	r2, r2, r0
    c80a:	eb45 0303 	adc.w	r3, r5, r3
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
    c80e:	9818      	ldr	r0, [sp, #96]	; 0x60
    c810:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    c814:	9d19      	ldr	r5, [sp, #100]	; 0x64
    c816:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
  assert(quantized_multiplier >= 0);
    c81a:	2800      	cmp	r0, #0
    c81c:	db7a      	blt.n	c914 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x51c>
  assert(shift >= -31 && shift < 8);
    c81e:	f105 061f 	add.w	r6, r5, #31
    c822:	2e26      	cmp	r6, #38	; 0x26
    c824:	d87c      	bhi.n	c920 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x528>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    c826:	1c16      	adds	r6, r2, #0
    c828:	960c      	str	r6, [sp, #48]	; 0x30
    c82a:	f543 4600 	adc.w	r6, r3, #32768	; 0x8000
    c82e:	960d      	str	r6, [sp, #52]	; 0x34
    c830:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    c834:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    c838:	bf08      	it	eq
    c83a:	2e00      	cmpeq	r6, #0
    c83c:	d276      	bcs.n	c92c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x534>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    c83e:	4e50      	ldr	r6, [pc, #320]	; (c980 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x588>)
    c840:	42b0      	cmp	r0, r6
    c842:	dc79      	bgt.n	c938 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x540>
    c844:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    c848:	1400      	asrs	r0, r0, #16
  int total_shift = 15 - shift;
    c84a:	f1c5 0c0f 	rsb	ip, r5, #15
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    c84e:	17c7      	asrs	r7, r0, #31
    c850:	fb02 f607 	mul.w	r6, r2, r7
    c854:	fb00 6603 	mla	r6, r0, r3, r6
    c858:	fba2 2300 	umull	r2, r3, r2, r0
    c85c:	4433      	add	r3, r6
    c85e:	f1c5 070e 	rsb	r7, r5, #14
    c862:	2001      	movs	r0, #1
    c864:	f1a7 0a20 	sub.w	sl, r7, #32
    c868:	f1c7 0e20 	rsb	lr, r7, #32
    c86c:	fa00 f60a 	lsl.w	r6, r0, sl
    c870:	fa20 fe0e 	lsr.w	lr, r0, lr
    c874:	ea46 060e 	orr.w	r6, r6, lr
    c878:	40b8      	lsls	r0, r7
    c87a:	1810      	adds	r0, r2, r0
    c87c:	eb43 0606 	adc.w	r6, r3, r6
  int32_t result = x >> total_shift;
    c880:	3511      	adds	r5, #17
    c882:	f1bc 0320 	subs.w	r3, ip, #32
    c886:	fa20 f00c 	lsr.w	r0, r0, ip
    c88a:	fa06 f505 	lsl.w	r5, r6, r5
    c88e:	ea40 0005 	orr.w	r0, r0, r5
    c892:	d402      	bmi.n	c89a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4a2>
    c894:	fa46 f303 	asr.w	r3, r6, r3
    c898:	4318      	orrs	r0, r3
              acc, output_multiplier[out_channel], output_shift[out_channel]);
    c89a:	901b      	str	r0, [sp, #108]	; 0x6c
      if (__a < __b)
    c89c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c89e:	4283      	cmp	r3, r0
    c8a0:	dc4d      	bgt.n	c93e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x546>
      return __a;
    c8a2:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::max(scaled_acc, output_activation_min);
    c8a4:	681a      	ldr	r2, [r3, #0]
    c8a6:	921b      	str	r2, [sp, #108]	; 0x6c
      if (__b < __a)
    c8a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c8aa:	429a      	cmp	r2, r3
    c8ac:	dc49      	bgt.n	c942 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54a>
      return __a;
    c8ae:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::min(scaled_acc, output_activation_max);
    c8b0:	681a      	ldr	r2, [r3, #0]
    c8b2:	921b      	str	r2, [sp, #108]	; 0x6c
  inline int32_t DimensionsCount() const { return size_; }
    c8b4:	6823      	ldr	r3, [r4, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c8b6:	2b04      	cmp	r3, #4
    c8b8:	d145      	bne.n	c946 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c8ba:	9800      	ldr	r0, [sp, #0]
    c8bc:	2800      	cmp	r0, #0
    c8be:	db44      	blt.n	c94a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
    c8c0:	6863      	ldr	r3, [r4, #4]
    c8c2:	4298      	cmp	r0, r3
    c8c4:	da41      	bge.n	c94a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c8c6:	9b01      	ldr	r3, [sp, #4]
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	db40      	blt.n	c94e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
    c8cc:	68a5      	ldr	r5, [r4, #8]
    c8ce:	42ab      	cmp	r3, r5
    c8d0:	da3d      	bge.n	c94e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c8d2:	9b04      	ldr	r3, [sp, #16]
    c8d4:	2b00      	cmp	r3, #0
    c8d6:	db3c      	blt.n	c952 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
    c8d8:	68e0      	ldr	r0, [r4, #12]
    c8da:	4283      	cmp	r3, r0
    c8dc:	da39      	bge.n	c952 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    c8de:	2900      	cmp	r1, #0
    c8e0:	db39      	blt.n	c956 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
    c8e2:	6923      	ldr	r3, [r4, #16]
    c8e4:	4299      	cmp	r1, r3
    c8e6:	da36      	bge.n	c956 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    c8e8:	9e00      	ldr	r6, [sp, #0]
    c8ea:	9f01      	ldr	r7, [sp, #4]
    c8ec:	fb05 7506 	mla	r5, r5, r6, r7
    c8f0:	9e04      	ldr	r6, [sp, #16]
    c8f2:	fb05 6000 	mla	r0, r5, r0, r6
    c8f6:	fb00 1303 	mla	r3, r0, r3, r1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    c8fa:	9834      	ldr	r0, [sp, #208]	; 0xd0
    c8fc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    c900:	3101      	adds	r1, #1
    c902:	9b05      	ldr	r3, [sp, #20]
    c904:	4299      	cmp	r1, r3
    c906:	da28      	bge.n	c95a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x562>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    c908:	2600      	movs	r6, #0
          std::int64_t acc = 0;
    c90a:	2200      	movs	r2, #0
    c90c:	2300      	movs	r3, #0
    c90e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c912:	e767      	b.n	c7e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ec>
  assert(quantized_multiplier >= 0);
    c914:	4b1b      	ldr	r3, [pc, #108]	; (c984 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58c>)
    c916:	4a1c      	ldr	r2, [pc, #112]	; (c988 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    c918:	21b3      	movs	r1, #179	; 0xb3
    c91a:	481c      	ldr	r0, [pc, #112]	; (c98c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    c91c:	f005 ffb6 	bl	1288c <__assert_func>
  assert(shift >= -31 && shift < 8);
    c920:	4b1b      	ldr	r3, [pc, #108]	; (c990 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x598>)
    c922:	4a19      	ldr	r2, [pc, #100]	; (c988 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    c924:	21b4      	movs	r1, #180	; 0xb4
    c926:	4819      	ldr	r0, [pc, #100]	; (c98c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    c928:	f005 ffb0 	bl	1288c <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    c92c:	4b19      	ldr	r3, [pc, #100]	; (c994 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x59c>)
    c92e:	4a16      	ldr	r2, [pc, #88]	; (c988 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    c930:	21b5      	movs	r1, #181	; 0xb5
    c932:	4816      	ldr	r0, [pc, #88]	; (c98c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    c934:	f005 ffaa 	bl	1288c <__assert_func>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    c938:	f647 70ff 	movw	r0, #32767	; 0x7fff
    c93c:	e785      	b.n	c84a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x452>
	return __b;
    c93e:	ab1d      	add	r3, sp, #116	; 0x74
    c940:	e7b0      	b.n	c8a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4ac>
	return __b;
    c942:	ab1c      	add	r3, sp, #112	; 0x70
    c944:	e7b4      	b.n	c8b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4b8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c946:	f00b ffb0 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c94a:	f00b ffae 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c94e:	f00b ffac 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c952:	f00b ffaa 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    c956:	f00b ffa8 	bl	188aa <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    c95a:	9b04      	ldr	r3, [sp, #16]
    c95c:	3301      	adds	r3, #1
    c95e:	9304      	str	r3, [sp, #16]
    c960:	e68c      	b.n	c67c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x284>
    c962:	46c6      	mov	lr, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    c964:	9b01      	ldr	r3, [sp, #4]
    c966:	3301      	adds	r3, #1
    c968:	9301      	str	r3, [sp, #4]
    c96a:	e679      	b.n	c660 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x268>
    c96c:	46c8      	mov	r8, r9
    c96e:	46f1      	mov	r9, lr
  for (int batch = 0; batch < batches; ++batch) {
    c970:	9b00      	ldr	r3, [sp, #0]
    c972:	3301      	adds	r3, #1
    c974:	9300      	str	r3, [sp, #0]
    c976:	e66a      	b.n	c64e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x256>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
    c978:	b025      	add	sp, #148	; 0x94
    c97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c97e:	bf00      	nop
    c980:	7ffeffff 	.word	0x7ffeffff
    c984:	000344b4 	.word	0x000344b4
    c988:	000344d0 	.word	0x000344d0
    c98c:	00034518 	.word	0x00034518
    c990:	00034568 	.word	0x00034568
    c994:	00034584 	.word	0x00034584

0000c998 <_ZN6tflite16Register_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    c998:	b470      	push	{r4, r5, r6}
    c99a:	4606      	mov	r6, r0
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    c99c:	4604      	mov	r4, r0
    c99e:	4d05      	ldr	r5, [pc, #20]	; (c9b4 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
    c9a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c9a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c9a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c9a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    c9ac:	4630      	mov	r0, r6
    c9ae:	bc70      	pop	{r4, r5, r6}
    c9b0:	4770      	bx	lr
    c9b2:	bf00      	nop
    c9b4:	00031874 	.word	0x00031874

0000c9b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    int8_t* output_data) {
    c9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9bc:	b0a7      	sub	sp, #156	; 0x9c
    c9be:	911a      	str	r1, [sp, #104]	; 0x68
    c9c0:	921b      	str	r2, [sp, #108]	; 0x6c
    c9c2:	469a      	mov	sl, r3
    c9c4:	9f31      	ldr	r7, [sp, #196]	; 0xc4
    c9c6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    c9c8:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    c9cc:	6942      	ldr	r2, [r0, #20]
    c9ce:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_width = params.stride_width;
    c9d0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    c9d4:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    c9d6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    c9da:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    c9dc:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    c9e0:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    c9e2:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    c9e6:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    c9e8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    c9ec:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
    c9ee:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    c9f2:	9212      	str	r2, [sp, #72]	; 0x48
  const int32_t output_offset = params.output_offset;
    c9f4:	69c2      	ldr	r2, [r0, #28]
    c9f6:	9213      	str	r2, [sp, #76]	; 0x4c
  const int32_t output_activation_min = params.quantized_activation_min;
    c9f8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c9fa:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    c9fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    c9fe:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ca00:	4291      	cmp	r1, r2
    ca02:	f300 8082 	bgt.w	cb0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
  inline int32_t DimensionsCount() const { return size_; }
    ca06:	f8da 2000 	ldr.w	r2, [sl]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ca0a:	2a04      	cmp	r2, #4
    ca0c:	d17f      	bne.n	cb0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x156>
    ca0e:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ca10:	2a04      	cmp	r2, #4
    ca12:	d17e      	bne.n	cb12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15a>
    ca14:	f8d8 2000 	ldr.w	r2, [r8]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ca18:	2a04      	cmp	r2, #4
    ca1a:	d17c      	bne.n	cb16 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15e>
    TFLITE_DCHECK_LT(i, size_);
    ca1c:	f8da 2000 	ldr.w	r2, [sl]
    ca20:	2a00      	cmp	r2, #0
    ca22:	dd7a      	ble.n	cb1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca24:	2a05      	cmp	r2, #5
    ca26:	dd7a      	ble.n	cb1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
    ca28:	f8da 2004 	ldr.w	r2, [sl, #4]
    ca2c:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    ca2e:	f8d8 1000 	ldr.w	r1, [r8]
    ca32:	2900      	cmp	r1, #0
    ca34:	dd76      	ble.n	cb24 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca36:	2905      	cmp	r1, #5
    ca38:	dd76      	ble.n	cb28 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x170>
    ca3a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ca3e:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ca40:	4291      	cmp	r1, r2
    ca42:	d174      	bne.n	cb2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ca44:	9225      	str	r2, [sp, #148]	; 0x94
    TFLITE_DCHECK_LT(i, size_);
    ca46:	f8d8 1000 	ldr.w	r1, [r8]
    ca4a:	2900      	cmp	r1, #0
    ca4c:	dd71      	ble.n	cb32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca4e:	2905      	cmp	r1, #5
    ca50:	dd71      	ble.n	cb36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17e>
    ca52:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ca56:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ca58:	9124      	str	r1, [sp, #144]	; 0x90
      if (__b < __a)
    ca5a:	428a      	cmp	r2, r1
    ca5c:	dc6e      	bgt.n	cb3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      return __a;
    ca5e:	aa25      	add	r2, sp, #148	; 0x94
    ca60:	6812      	ldr	r2, [r2, #0]
    ca62:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    ca64:	f8da 2000 	ldr.w	r2, [sl]
    ca68:	2a03      	cmp	r2, #3
    ca6a:	dd69      	ble.n	cb40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca6c:	2a05      	cmp	r2, #5
    ca6e:	dd69      	ble.n	cb44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
    ca70:	f8da 2004 	ldr.w	r2, [sl, #4]
    ca74:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    ca76:	6839      	ldr	r1, [r7, #0]
    ca78:	2903      	cmp	r1, #3
    ca7a:	dd66      	ble.n	cb4a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca7c:	2905      	cmp	r1, #5
    ca7e:	dd66      	ble.n	cb4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x196>
    ca80:	6879      	ldr	r1, [r7, #4]
    ca82:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ca84:	4291      	cmp	r1, r2
    ca86:	d164      	bne.n	cb52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ca88:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    ca8a:	6839      	ldr	r1, [r7, #0]
    ca8c:	2903      	cmp	r1, #3
    ca8e:	dd62      	ble.n	cb56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca90:	2905      	cmp	r1, #5
    ca92:	dd62      	ble.n	cb5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    ca94:	6879      	ldr	r1, [r7, #4]
    ca96:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ca98:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    ca9a:	428a      	cmp	r2, r1
    ca9c:	dc5f      	bgt.n	cb5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
      return __a;
    ca9e:	aa23      	add	r2, sp, #140	; 0x8c
    caa0:	6812      	ldr	r2, [r2, #0]
    caa2:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    caa4:	683a      	ldr	r2, [r7, #0]
    caa6:	2a00      	cmp	r2, #0
    caa8:	dd5b      	ble.n	cb62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    caaa:	2a05      	cmp	r2, #5
    caac:	dd5b      	ble.n	cb66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
    caae:	687a      	ldr	r2, [r7, #4]
    cab0:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    cab2:	f8d8 1000 	ldr.w	r1, [r8]
    cab6:	2903      	cmp	r1, #3
    cab8:	dd57      	ble.n	cb6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    caba:	2905      	cmp	r1, #5
    cabc:	dd57      	ble.n	cb6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
    cabe:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cac2:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cac4:	4291      	cmp	r1, r2
    cac6:	d155      	bne.n	cb74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cac8:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    caca:	f8d8 1000 	ldr.w	r1, [r8]
    cace:	2903      	cmp	r1, #3
    cad0:	dd52      	ble.n	cb78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cad2:	2905      	cmp	r1, #5
    cad4:	dd52      	ble.n	cb7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    cad6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cada:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cadc:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    cade:	428a      	cmp	r2, r1
    cae0:	dc4f      	bgt.n	cb82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ca>
      return __a;
    cae2:	aa21      	add	r2, sp, #132	; 0x84
    cae4:	6812      	ldr	r2, [r2, #0]
    cae6:	9203      	str	r2, [sp, #12]
  if (bias_data) {
    cae8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    caea:	2a00      	cmp	r2, #0
    caec:	d050      	beq.n	cb90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    caee:	681c      	ldr	r4, [r3, #0]
    caf0:	2c05      	cmp	r4, #5
    caf2:	dd48      	ble.n	cb86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
    caf4:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    caf6:	2200      	movs	r2, #0
    int buffer_size = 1;
    caf8:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    cafa:	42a2      	cmp	r2, r4
    cafc:	da45      	bge.n	cb8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d2>
      buffer_size *= dims_data[i];
    cafe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    cb02:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
    cb06:	3201      	adds	r2, #1
    cb08:	e7f7      	b.n	cafa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    cb0a:	f00b fece 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cb0e:	f00b fecc 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    cb12:	f00b feca 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    cb16:	f00b fec8 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    cb1a:	f00b fec6 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb1e:	f8da 2004 	ldr.w	r2, [sl, #4]
    cb22:	e784      	b.n	ca2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x76>
    TFLITE_DCHECK_LT(i, size_);
    cb24:	f00b fec1 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb28:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cb2c:	e788      	b.n	ca40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x88>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cb2e:	f00b febc 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    cb32:	f00b feba 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb36:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cb3a:	e78d      	b.n	ca58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
	return __b;
    cb3c:	aa24      	add	r2, sp, #144	; 0x90
    cb3e:	e78f      	b.n	ca60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    cb40:	f00b feb3 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb44:	f8da 2010 	ldr.w	r2, [sl, #16]
    cb48:	e795      	b.n	ca76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xbe>
    TFLITE_DCHECK_LT(i, size_);
    cb4a:	f00b feae 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb4e:	6939      	ldr	r1, [r7, #16]
    cb50:	e798      	b.n	ca84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xcc>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cb52:	f00b feaa 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    cb56:	f00b fea8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb5a:	6939      	ldr	r1, [r7, #16]
    cb5c:	e79c      	b.n	ca98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe0>
    cb5e:	aa22      	add	r2, sp, #136	; 0x88
    cb60:	e79e      	b.n	caa0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe8>
    TFLITE_DCHECK_LT(i, size_);
    cb62:	f00b fea2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb66:	687a      	ldr	r2, [r7, #4]
    cb68:	e7a3      	b.n	cab2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    cb6a:	f00b fe9e 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb6e:	f8d8 1010 	ldr.w	r1, [r8, #16]
    cb72:	e7a7      	b.n	cac4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cb74:	f00b fe99 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    cb78:	f00b fe97 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb7c:	f8d8 1010 	ldr.w	r1, [r8, #16]
    cb80:	e7ac      	b.n	cadc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
    cb82:	aa20      	add	r2, sp, #128	; 0x80
    cb84:	e7ae      	b.n	cae4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    cb86:	3304      	adds	r3, #4
    cb88:	e7b5      	b.n	caf6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    cb8a:	9b03      	ldr	r3, [sp, #12]
    cb8c:	4299      	cmp	r1, r3
    cb8e:	d167      	bne.n	cc60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a8>
    TFLITE_DCHECK_LT(i, size_);
    cb90:	f8da 3000 	ldr.w	r3, [sl]
    cb94:	2b01      	cmp	r3, #1
    cb96:	dd65      	ble.n	cc64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb98:	2b05      	cmp	r3, #5
    cb9a:	dd65      	ble.n	cc68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b0>
    cb9c:	f8da 3004 	ldr.w	r3, [sl, #4]
    cba0:	685b      	ldr	r3, [r3, #4]
    cba2:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    cba4:	f8da 3000 	ldr.w	r3, [sl]
    cba8:	2b02      	cmp	r3, #2
    cbaa:	dd61      	ble.n	cc70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cbac:	2b05      	cmp	r3, #5
    cbae:	dd61      	ble.n	cc74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2bc>
    cbb0:	f8da 3004 	ldr.w	r3, [sl, #4]
    cbb4:	689b      	ldr	r3, [r3, #8]
    cbb6:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    cbb8:	683b      	ldr	r3, [r7, #0]
    cbba:	2b01      	cmp	r3, #1
    cbbc:	dd5e      	ble.n	cc7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cbbe:	2b05      	cmp	r3, #5
    cbc0:	dd5e      	ble.n	cc80 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>
    cbc2:	687b      	ldr	r3, [r7, #4]
    cbc4:	685b      	ldr	r3, [r3, #4]
    cbc6:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    cbc8:	683b      	ldr	r3, [r7, #0]
    cbca:	2b02      	cmp	r3, #2
    cbcc:	dd5b      	ble.n	cc86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cbce:	2b05      	cmp	r3, #5
    cbd0:	dd5b      	ble.n	cc8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    cbd2:	687b      	ldr	r3, [r7, #4]
    cbd4:	689b      	ldr	r3, [r3, #8]
    cbd6:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
    cbd8:	f8d8 3000 	ldr.w	r3, [r8]
    cbdc:	2b01      	cmp	r3, #1
    cbde:	dd57      	ble.n	cc90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cbe0:	2b05      	cmp	r3, #5
    cbe2:	dd57      	ble.n	cc94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2dc>
    cbe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    cbe8:	685b      	ldr	r3, [r3, #4]
    cbea:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    cbec:	f8d8 3000 	ldr.w	r3, [r8]
    cbf0:	2b02      	cmp	r3, #2
    cbf2:	dd53      	ble.n	cc9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cbf4:	2b05      	cmp	r3, #5
    cbf6:	dd53      	ble.n	cca0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e8>
    cbf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    cbfc:	689b      	ldr	r3, [r3, #8]
    cbfe:	9304      	str	r3, [sp, #16]
  for (int batch = 0; batch < batches; ++batch) {
    cc00:	f04f 0b00 	mov.w	fp, #0
    cc04:	46d1      	mov	r9, sl
    cc06:	46ba      	mov	sl, r7
    cc08:	4647      	mov	r7, r8
    cc0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cc0c:	459b      	cmp	fp, r3
    cc0e:	f280 81cd 	bge.w	cfac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    cc12:	2300      	movs	r3, #0
    cc14:	9301      	str	r3, [sp, #4]
    cc16:	46c8      	mov	r8, r9
    cc18:	46d1      	mov	r9, sl
    cc1a:	46da      	mov	sl, fp
    cc1c:	46bb      	mov	fp, r7
    cc1e:	9b01      	ldr	r3, [sp, #4]
    cc20:	9905      	ldr	r1, [sp, #20]
    cc22:	428b      	cmp	r3, r1
    cc24:	f280 81bb 	bge.w	cf9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e6>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    cc28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cc2a:	fb02 f303 	mul.w	r3, r2, r3
    cc2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cc30:	1a9b      	subs	r3, r3, r2
    cc32:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cc34:	2300      	movs	r3, #0
    cc36:	9302      	str	r3, [sp, #8]
    cc38:	f8cd b0d4 	str.w	fp, [sp, #212]	; 0xd4
    cc3c:	46c3      	mov	fp, r8
    cc3e:	46c8      	mov	r8, r9
    cc40:	46d1      	mov	r9, sl
    cc42:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    cc46:	9b02      	ldr	r3, [sp, #8]
    cc48:	9904      	ldr	r1, [sp, #16]
    cc4a:	428b      	cmp	r3, r1
    cc4c:	f280 819c 	bge.w	cf88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5d0>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    cc50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cc52:	fb02 f303 	mul.w	r3, r2, r3
    cc56:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cc58:	1a9b      	subs	r3, r3, r2
    cc5a:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    cc5c:	2400      	movs	r4, #0
    cc5e:	e157      	b.n	cf10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    cc60:	f00b fe23 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    cc64:	f00b fe21 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cc68:	f8da 3008 	ldr.w	r3, [sl, #8]
    cc6c:	9309      	str	r3, [sp, #36]	; 0x24
    cc6e:	e799      	b.n	cba4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    cc70:	f00b fe1b 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cc74:	f8da 300c 	ldr.w	r3, [sl, #12]
    cc78:	9308      	str	r3, [sp, #32]
    cc7a:	e79d      	b.n	cbb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
    TFLITE_DCHECK_LT(i, size_);
    cc7c:	f00b fe15 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cc80:	68bb      	ldr	r3, [r7, #8]
    cc82:	9307      	str	r3, [sp, #28]
    cc84:	e7a0      	b.n	cbc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    TFLITE_DCHECK_LT(i, size_);
    cc86:	f00b fe10 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cc8a:	68fb      	ldr	r3, [r7, #12]
    cc8c:	9306      	str	r3, [sp, #24]
    cc8e:	e7a3      	b.n	cbd8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
    TFLITE_DCHECK_LT(i, size_);
    cc90:	f00b fe0b 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cc94:	f8d8 3008 	ldr.w	r3, [r8, #8]
    cc98:	9305      	str	r3, [sp, #20]
    cc9a:	e7a7      	b.n	cbec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    TFLITE_DCHECK_LT(i, size_);
    cc9c:	f00b fe05 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cca0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    cca4:	9304      	str	r3, [sp, #16]
    cca6:	e7ab      	b.n	cc00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cca8:	f00b fdff 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ccac:	f00b fdfd 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ccb0:	f00b fdfb 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ccb4:	f00b fdf9 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ccb8:	f00b fdf7 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ccbc:	f00b fdf5 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ccc0:	f00b fdf3 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ccc4:	f00b fdf1 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ccc8:	f00b fdef 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cccc:	f00b fded 	bl	188aa <abort>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    ccd0:	3201      	adds	r2, #1
    ccd2:	9b06      	ldr	r3, [sp, #24]
    ccd4:	429a      	cmp	r2, r3
    ccd6:	da63      	bge.n	cda0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3e8>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    ccd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ccda:	9815      	ldr	r0, [sp, #84]	; 0x54
    ccdc:	fb03 0002 	mla	r0, r3, r2, r0
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    cce0:	2800      	cmp	r0, #0
    cce2:	dbf5      	blt.n	ccd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    cce4:	9b08      	ldr	r3, [sp, #32]
    cce6:	4298      	cmp	r0, r3
    cce8:	daf2      	bge.n	ccd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ccea:	2900      	cmp	r1, #0
    ccec:	dbf0      	blt.n	ccd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ccee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccf0:	4299      	cmp	r1, r3
    ccf2:	daed      	bge.n	ccd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ccf4:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    ccf6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    ccf8:	42ab      	cmp	r3, r5
    ccfa:	dae9      	bge.n	ccd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
  inline int32_t DimensionsCount() const { return size_; }
    ccfc:	f8db 5000 	ldr.w	r5, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cd00:	2d04      	cmp	r5, #4
    cd02:	d1d1      	bne.n	cca8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cd04:	f1b9 0f00 	cmp.w	r9, #0
    cd08:	dbd0      	blt.n	ccac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
    cd0a:	f8db 5004 	ldr.w	r5, [fp, #4]
    cd0e:	45a9      	cmp	r9, r5
    cd10:	dacc      	bge.n	ccac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cd12:	2900      	cmp	r1, #0
    cd14:	dbcc      	blt.n	ccb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
    cd16:	f8db c008 	ldr.w	ip, [fp, #8]
    cd1a:	4561      	cmp	r1, ip
    cd1c:	dac8      	bge.n	ccb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cd1e:	2800      	cmp	r0, #0
    cd20:	dbc8      	blt.n	ccb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
    cd22:	f8db 700c 	ldr.w	r7, [fp, #12]
    cd26:	42b8      	cmp	r0, r7
    cd28:	dac4      	bge.n	ccb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cd2a:	2b00      	cmp	r3, #0
    cd2c:	dbc4      	blt.n	ccb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
    cd2e:	f8db 5010 	ldr.w	r5, [fp, #16]
    cd32:	42ab      	cmp	r3, r5
    cd34:	dac0      	bge.n	ccb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    cd36:	fb0c 1c09 	mla	ip, ip, r9, r1
    cd3a:	fb0c 0707 	mla	r7, ip, r7, r0
    cd3e:	fb07 3505 	mla	r5, r7, r5, r3
                                                      in_x, in_channel)];
    cd42:	9f30      	ldr	r7, [sp, #192]	; 0xc0
    cd44:	577f      	ldrsb	r7, [r7, r5]
  inline int32_t DimensionsCount() const { return size_; }
    cd46:	f8d8 5000 	ldr.w	r5, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cd4a:	2d04      	cmp	r5, #4
    cd4c:	d1b6      	bne.n	ccbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x304>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cd4e:	2c00      	cmp	r4, #0
    cd50:	dbb6      	blt.n	ccc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
    cd52:	f8d8 5004 	ldr.w	r5, [r8, #4]
    cd56:	42ac      	cmp	r4, r5
    cd58:	dab2      	bge.n	ccc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cd5a:	2e00      	cmp	r6, #0
    cd5c:	dbb2      	blt.n	ccc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
    cd5e:	f8d8 e008 	ldr.w	lr, [r8, #8]
    cd62:	4576      	cmp	r6, lr
    cd64:	daae      	bge.n	ccc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cd66:	2a00      	cmp	r2, #0
    cd68:	dbae      	blt.n	ccc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
    cd6a:	f8d8 c00c 	ldr.w	ip, [r8, #12]
    cd6e:	4562      	cmp	r2, ip
    cd70:	daaa      	bge.n	ccc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cd72:	2b00      	cmp	r3, #0
    cd74:	dbaa      	blt.n	cccc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
    cd76:	f8d8 5010 	ldr.w	r5, [r8, #16]
    cd7a:	42ab      	cmp	r3, r5
    cd7c:	daa6      	bge.n	cccc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    cd7e:	fb0e 6e04 	mla	lr, lr, r4, r6
    cd82:	fb0e 2c0c 	mla	ip, lr, ip, r2
    cd86:	fb0c 3c05 	mla	ip, ip, r5, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    cd8a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    cd8c:	f915 c00c 	ldrsb.w	ip, [r5, ip]
                acc += filter_val * (input_val + input_offset);
    cd90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    cd92:	442f      	add	r7, r5
    cd94:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    cd96:	fb0c 5507 	mla	r5, ip, r7, r5
    cd9a:	951d      	str	r5, [sp, #116]	; 0x74
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    cd9c:	3301      	adds	r3, #1
    cd9e:	e7aa      	b.n	ccf6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    cda0:	3601      	adds	r6, #1
    cda2:	9b07      	ldr	r3, [sp, #28]
    cda4:	429e      	cmp	r6, r3
    cda6:	da05      	bge.n	cdb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fc>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    cda8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cdac:	fb03 2106 	mla	r1, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    cdb0:	2200      	movs	r2, #0
    cdb2:	e78e      	b.n	ccd2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x31a>
          if (bias_data) {
    cdb4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    cdb6:	b123      	cbz	r3, cdc2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x40a>
            acc += bias_data[out_channel];
    cdb8:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cdbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    cdbe:	4413      	add	r3, r2
    cdc0:	931d      	str	r3, [sp, #116]	; 0x74
          acc = MultiplyByQuantizedMultiplier(
    cdc2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    cdc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cdc6:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
    cdca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    cdcc:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    cdd0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    cdd4:	2e00      	cmp	r6, #0
    cdd6:	f340 80a1 	ble.w	cf1c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x564>
    cdda:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    cddc:	409d      	lsls	r5, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cdde:	45ac      	cmp	ip, r5
    cde0:	f000 809e 	beq.w	cf20 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x568>
    cde4:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    cde6:	17eb      	asrs	r3, r5, #31
  std::int64_t b_64(b);
    cde8:	4660      	mov	r0, ip
    cdea:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    cdec:	fb05 f101 	mul.w	r1, r5, r1
    cdf0:	fb0c 1103 	mla	r1, ip, r3, r1
    cdf4:	fba5 230c 	umull	r2, r3, r5, ip
    cdf8:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cdfa:	2a00      	cmp	r2, #0
    cdfc:	f173 0100 	sbcs.w	r1, r3, #0
    ce00:	f2c0 8095 	blt.w	cf2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x576>
    ce04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ce08:	1852      	adds	r2, r2, r1
    ce0a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ce0e:	4611      	mov	r1, r2
    ce10:	461d      	mov	r5, r3
    ce12:	2a00      	cmp	r2, #0
    ce14:	f173 0000 	sbcs.w	r0, r3, #0
    ce18:	f2c0 808b 	blt.w	cf32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57a>
    ce1c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ce1e:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ce22:	2f00      	cmp	r7, #0
    ce24:	f040 808d 	bne.w	cf42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x58a>
  assert(exponent >= 0);
    ce28:	2e00      	cmp	r6, #0
    ce2a:	f2c0 808d 	blt.w	cf48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x590>
  assert(exponent <= 31);
    ce2e:	2e1f      	cmp	r6, #31
    ce30:	f300 8091 	bgt.w	cf56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x59e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ce34:	2701      	movs	r7, #1
    ce36:	fa07 f006 	lsl.w	r0, r7, r6
    ce3a:	3801      	subs	r0, #1
    ce3c:	f008 ffaf 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce40:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType zero = Dup<IntegerType>(0);
    ce42:	2000      	movs	r0, #0
    ce44:	f008 ffab 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce48:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    ce4a:	4638      	mov	r0, r7
    ce4c:	f008 ffa7 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce50:	900b      	str	r0, [sp, #44]	; 0x2c
  const IntegerType remainder = BitAnd(x, mask);
    ce52:	990a      	ldr	r1, [sp, #40]	; 0x28
    ce54:	4628      	mov	r0, r5
    ce56:	f008 ffa3 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce5a:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ce5c:	4639      	mov	r1, r7
    ce5e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ce60:	f008 ffa0 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ce64:	4607      	mov	r7, r0
    ce66:	9918      	ldr	r1, [sp, #96]	; 0x60
    ce68:	4628      	mov	r0, r5
    ce6a:	f008 ffa7 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ce6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ce70:	f008 ff96 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce74:	4601      	mov	r1, r0
    ce76:	4638      	mov	r0, r7
    ce78:	f008 ff96 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ce7c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    ce7e:	4631      	mov	r1, r6
    ce80:	4628      	mov	r0, r5
    ce82:	f008 ff8f 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ce86:	4605      	mov	r5, r0
    ce88:	4639      	mov	r1, r7
    ce8a:	9819      	ldr	r0, [sp, #100]	; 0x64
    ce8c:	f008 ff9e 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ce90:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ce92:	f008 ff85 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce96:	4601      	mov	r1, r0
    ce98:	4628      	mov	r0, r5
    ce9a:	f008 ff85 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
          acc += output_offset;
    ce9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cea0:	4418      	add	r0, r3
    cea2:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    cea4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    cea6:	4290      	cmp	r0, r2
    cea8:	db5c      	blt.n	cf64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
      return __a;
    ceaa:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::max(acc, output_activation_min);
    ceac:	681b      	ldr	r3, [r3, #0]
    ceae:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    ceb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    ceb2:	4293      	cmp	r3, r2
    ceb4:	dc58      	bgt.n	cf68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
      return __a;
    ceb6:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::min(acc, output_activation_max);
    ceb8:	6818      	ldr	r0, [r3, #0]
    ceba:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    cebc:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cec0:	2b04      	cmp	r3, #4
    cec2:	d153      	bne.n	cf6c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cec4:	f1b9 0f00 	cmp.w	r9, #0
    cec8:	db52      	blt.n	cf70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    ceca:	f8da 3004 	ldr.w	r3, [sl, #4]
    cece:	4599      	cmp	r9, r3
    ced0:	da4e      	bge.n	cf70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ced2:	9b01      	ldr	r3, [sp, #4]
    ced4:	2b00      	cmp	r3, #0
    ced6:	db4d      	blt.n	cf74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
    ced8:	f8da 1008 	ldr.w	r1, [sl, #8]
    cedc:	428b      	cmp	r3, r1
    cede:	da49      	bge.n	cf74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cee0:	9b02      	ldr	r3, [sp, #8]
    cee2:	2b00      	cmp	r3, #0
    cee4:	db48      	blt.n	cf78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
    cee6:	f8da 200c 	ldr.w	r2, [sl, #12]
    ceea:	4293      	cmp	r3, r2
    ceec:	da44      	bge.n	cf78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ceee:	2c00      	cmp	r4, #0
    cef0:	db44      	blt.n	cf7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
    cef2:	f8da 3010 	ldr.w	r3, [sl, #16]
    cef6:	429c      	cmp	r4, r3
    cef8:	da40      	bge.n	cf7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    cefa:	9d01      	ldr	r5, [sp, #4]
    cefc:	fb01 5109 	mla	r1, r1, r9, r5
    cf00:	9d02      	ldr	r5, [sp, #8]
    cf02:	fb01 5202 	mla	r2, r1, r2, r5
    cf06:	fb02 4303 	mla	r3, r2, r3, r4
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    cf0a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    cf0c:	54d0      	strb	r0, [r2, r3]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    cf0e:	3401      	adds	r4, #1
    cf10:	9b03      	ldr	r3, [sp, #12]
    cf12:	429c      	cmp	r4, r3
    cf14:	da34      	bge.n	cf80 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c8>
          int32_t acc = 0;
    cf16:	2600      	movs	r6, #0
    cf18:	961d      	str	r6, [sp, #116]	; 0x74
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    cf1a:	e742      	b.n	cda2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3ea>
  int right_shift = shift > 0 ? 0 : -shift;
    cf1c:	4276      	negs	r6, r6
    cf1e:	e75d      	b.n	cddc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x424>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cf20:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    cf24:	d001      	beq.n	cf2a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x572>
    cf26:	2700      	movs	r7, #0
    cf28:	e75d      	b.n	cde6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
    cf2a:	2701      	movs	r7, #1
    cf2c:	e75b      	b.n	cde6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cf2e:	4921      	ldr	r1, [pc, #132]	; (cfb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5fc>)
    cf30:	e76a      	b.n	ce08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x450>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cf32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cf36:	1851      	adds	r1, r2, r1
    cf38:	f04f 0500 	mov.w	r5, #0
    cf3c:	eb43 0505 	adc.w	r5, r3, r5
    cf40:	e76c      	b.n	ce1c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x464>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cf42:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    cf46:	e76f      	b.n	ce28 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x470>
  assert(exponent >= 0);
    cf48:	4b1b      	ldr	r3, [pc, #108]	; (cfb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    cf4a:	4a1c      	ldr	r2, [pc, #112]	; (cfbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    cf4c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    cf50:	481b      	ldr	r0, [pc, #108]	; (cfc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    cf52:	f005 fc9b 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    cf56:	4b1b      	ldr	r3, [pc, #108]	; (cfc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    cf58:	4a18      	ldr	r2, [pc, #96]	; (cfbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    cf5a:	f240 1167 	movw	r1, #359	; 0x167
    cf5e:	4818      	ldr	r0, [pc, #96]	; (cfc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    cf60:	f005 fc94 	bl	1288c <__assert_func>
	return __b;
    cf64:	ab1f      	add	r3, sp, #124	; 0x7c
    cf66:	e7a1      	b.n	ceac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4f4>
	return __b;
    cf68:	ab1e      	add	r3, sp, #120	; 0x78
    cf6a:	e7a5      	b.n	ceb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x500>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cf6c:	f00b fc9d 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cf70:	f00b fc9b 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cf74:	f00b fc99 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cf78:	f00b fc97 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cf7c:	f00b fc95 	bl	188aa <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cf80:	9b02      	ldr	r3, [sp, #8]
    cf82:	3301      	adds	r3, #1
    cf84:	9302      	str	r3, [sp, #8]
    cf86:	e65e      	b.n	cc46 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
    cf88:	f8cd a0d4 	str.w	sl, [sp, #212]	; 0xd4
    cf8c:	46ca      	mov	sl, r9
    cf8e:	46c1      	mov	r9, r8
    cf90:	46d8      	mov	r8, fp
    cf92:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
    for (int out_y = 0; out_y < output_height; ++out_y) {
    cf96:	9b01      	ldr	r3, [sp, #4]
    cf98:	3301      	adds	r3, #1
    cf9a:	9301      	str	r3, [sp, #4]
    cf9c:	e63f      	b.n	cc1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x266>
    cf9e:	465f      	mov	r7, fp
    cfa0:	46d3      	mov	fp, sl
    cfa2:	46ca      	mov	sl, r9
    cfa4:	46c1      	mov	r9, r8
  for (int batch = 0; batch < batches; ++batch) {
    cfa6:	f10b 0b01 	add.w	fp, fp, #1
    cfaa:	e62e      	b.n	cc0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x252>
}
    cfac:	b027      	add	sp, #156	; 0x9c
    cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfb2:	bf00      	nop
    cfb4:	c0000001 	.word	0xc0000001
    cfb8:	000343c4 	.word	0x000343c4
    cfbc:	000343d4 	.word	0x000343d4
    cfc0:	0003442c 	.word	0x0003442c
    cfc4:	00034488 	.word	0x00034488

0000cfc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfcc:	b0e7      	sub	sp, #412	; 0x19c
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    cfce:	4bae      	ldr	r3, [pc, #696]	; (d288 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    cfd0:	681a      	ldr	r2, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    cfd2:	2800      	cmp	r0, #0
    cfd4:	d052      	beq.n	d07c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    cfd6:	4688      	mov	r8, r1
    cfd8:	4681      	mov	r9, r0
  TFLITE_DCHECK(node != nullptr);
    cfda:	2900      	cmp	r1, #0
    cfdc:	d050      	beq.n	d080 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    cfde:	6d44      	ldr	r4, [r0, #84]	; 0x54
    cfe0:	680b      	ldr	r3, [r1, #0]
    cfe2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    cfe6:	6859      	ldr	r1, [r3, #4]
    cfe8:	47a0      	blx	r4
    cfea:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    cfec:	4ba7      	ldr	r3, [pc, #668]	; (d28c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    cfee:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    cff0:	f1b9 0f00 	cmp.w	r9, #0
    cff4:	d046      	beq.n	d084 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
  TFLITE_DCHECK(node != nullptr);
    cff6:	f1b8 0f00 	cmp.w	r8, #0
    cffa:	d045      	beq.n	d088 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    cffc:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d000:	f8d8 3000 	ldr.w	r3, [r8]
    d004:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d008:	6859      	ldr	r1, [r3, #4]
    d00a:	4648      	mov	r0, r9
    d00c:	4790      	blx	r2
    d00e:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    d010:	f8d8 3000 	ldr.w	r3, [r8]
    d014:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    d016:	2b03      	cmp	r3, #3
    d018:	d038      	beq.n	d08c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    d01a:	2600      	movs	r6, #0
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
    d01c:	4b9c      	ldr	r3, [pc, #624]	; (d290 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    d01e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d020:	f1b9 0f00 	cmp.w	r9, #0
    d024:	d049      	beq.n	d0ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf2>
  TFLITE_DCHECK(node != nullptr);
    d026:	f1b8 0f00 	cmp.w	r8, #0
    d02a:	d048      	beq.n	d0be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d02c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d030:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d034:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d038:	6859      	ldr	r1, [r3, #4]
    d03a:	4648      	mov	r0, r9
    d03c:	4790      	blx	r2
    d03e:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d040:	f8d8 1014 	ldr.w	r1, [r8, #20]
    d044:	2900      	cmp	r1, #0
    d046:	d03c      	beq.n	d0c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
  TFLITE_DCHECK(node->user_data != nullptr);
    d048:	f8d8 b010 	ldr.w	fp, [r8, #16]
    d04c:	f1bb 0f00 	cmp.w	fp, #0
    d050:	d039      	beq.n	d0c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    d052:	7a38      	ldrb	r0, [r7, #8]
    d054:	7a23      	ldrb	r3, [r4, #8]
    d056:	4298      	cmp	r0, r3
    d058:	d037      	beq.n	d0ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    d05a:	f8d9 4014 	ldr.w	r4, [r9, #20]
    d05e:	9303      	str	r3, [sp, #12]
    d060:	9002      	str	r0, [sp, #8]
    d062:	4b8c      	ldr	r3, [pc, #560]	; (d294 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    d064:	9301      	str	r3, [sp, #4]
    d066:	4b8c      	ldr	r3, [pc, #560]	; (d298 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    d068:	9300      	str	r3, [sp, #0]
    d06a:	2337      	movs	r3, #55	; 0x37
    d06c:	4a8b      	ldr	r2, [pc, #556]	; (d29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    d06e:	498c      	ldr	r1, [pc, #560]	; (d2a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    d070:	4648      	mov	r0, r9
    d072:	47a0      	blx	r4
    d074:	2001      	movs	r0, #1
}
    d076:	b067      	add	sp, #412	; 0x19c
    d078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(context != nullptr);
    d07c:	f00b fc15 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    d080:	f00b fc13 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    d084:	f00b fc11 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    d088:	f00b fc0f 	bl	188aa <abort>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    d08c:	4b85      	ldr	r3, [pc, #532]	; (d2a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    d08e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d090:	f1b9 0f00 	cmp.w	r9, #0
    d094:	d00d      	beq.n	d0b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
  TFLITE_DCHECK(node != nullptr);
    d096:	f1b8 0f00 	cmp.w	r8, #0
    d09a:	d00c      	beq.n	d0b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d09c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d0a0:	f8d8 3000 	ldr.w	r3, [r8]
    d0a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d0a8:	6859      	ldr	r1, [r3, #4]
    d0aa:	4648      	mov	r0, r9
    d0ac:	4790      	blx	r2
    d0ae:	4606      	mov	r6, r0
    d0b0:	e7b4      	b.n	d01c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  TFLITE_DCHECK(context != nullptr);
    d0b2:	f00b fbfa 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    d0b6:	f00b fbf8 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    d0ba:	f00b fbf6 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    d0be:	f00b fbf4 	bl	188aa <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d0c2:	f00b fbf2 	bl	188aa <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d0c6:	f00b fbf0 	bl	188aa <abort>
  TF_LITE_ENSURE_MSG(
    d0ca:	7a2b      	ldrb	r3, [r5, #8]
    d0cc:	4298      	cmp	r0, r3
    d0ce:	d00a      	beq.n	d0e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    d0d0:	2807      	cmp	r0, #7
    d0d2:	d101      	bne.n	d0d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
    d0d4:	2b09      	cmp	r3, #9
    d0d6:	d006      	beq.n	d0e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    d0d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
    d0dc:	4972      	ldr	r1, [pc, #456]	; (d2a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    d0de:	4648      	mov	r0, r9
    d0e0:	4798      	blx	r3
    d0e2:	2001      	movs	r0, #1
    d0e4:	e7c7      	b.n	d076 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  switch (input->type) {  // Already know in/out types are same.
    d0e6:	2807      	cmp	r0, #7
    d0e8:	d073      	beq.n	d1d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    d0ea:	2809      	cmp	r0, #9
    d0ec:	f000 80e0 	beq.w	d2b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    d0f0:	2801      	cmp	r0, #1
    d0f2:	d00a      	beq.n	d10a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    d0f4:	f8d9 4014 	ldr.w	r4, [r9, #20]
    d0f8:	f7fb ffc8 	bl	908c <TfLiteTypeGetName>
    d0fc:	4602      	mov	r2, r0
    d0fe:	7a3b      	ldrb	r3, [r7, #8]
    d100:	496a      	ldr	r1, [pc, #424]	; (d2ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    d102:	4648      	mov	r0, r9
    d104:	47a0      	blx	r4
      return kTfLiteError;
    d106:	2001      	movs	r0, #1
    d108:	e7b5      	b.n	d076 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    d10a:	465a      	mov	r2, fp
    d10c:	a80a      	add	r0, sp, #40	; 0x28
    d10e:	f009 fcd4 	bl	16aba <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d112:	4639      	mov	r1, r7
    d114:	a818      	add	r0, sp, #96	; 0x60
    d116:	f009 ffed 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d11a:	4638      	mov	r0, r7
    d11c:	f008 fe2b 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d120:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(filter),
    d122:	4629      	mov	r1, r5
    d124:	a81e      	add	r0, sp, #120	; 0x78
    d126:	f009 ffe5 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d12a:	4628      	mov	r0, r5
    d12c:	f008 fe23 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d130:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d132:	f10d 0890 	add.w	r8, sp, #144	; 0x90
    d136:	4631      	mov	r1, r6
    d138:	4640      	mov	r0, r8
    d13a:	f009 ffdb 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d13e:	4630      	mov	r0, r6
    d140:	f008 fe19 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d144:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d146:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
    d14a:	4621      	mov	r1, r4
    d14c:	4648      	mov	r0, r9
    d14e:	f009 ffd1 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d152:	4620      	mov	r0, r4
    d154:	f008 fe15 	bl	15d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    d158:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(nullptr), nullptr);
    d15a:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
    d15e:	2100      	movs	r1, #0
    d160:	4650      	mov	r0, sl
    d162:	f009 ffc7 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d166:	2300      	movs	r3, #0
    d168:	9306      	str	r3, [sp, #24]
    d16a:	f8cd a014 	str.w	sl, [sp, #20]
    d16e:	9404      	str	r4, [sp, #16]
    d170:	f8cd 900c 	str.w	r9, [sp, #12]
    d174:	9602      	str	r6, [sp, #8]
    d176:	f8cd 8004 	str.w	r8, [sp, #4]
    d17a:	9500      	str	r5, [sp, #0]
    d17c:	ab1e      	add	r3, sp, #120	; 0x78
    d17e:	463a      	mov	r2, r7
    d180:	a918      	add	r1, sp, #96	; 0x60
    d182:	a80a      	add	r0, sp, #40	; 0x28
    d184:	f009 fa1e 	bl	165c4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
    if (size_ > kMaxSmallSize) {
    d188:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    d18a:	2b05      	cmp	r3, #5
    d18c:	dd03      	ble.n	d196 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
      delete[] dims_pointer_;
    d18e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    d190:	b108      	cbz	r0, d196 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    d192:	f00b fb75 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d196:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    d198:	2b05      	cmp	r3, #5
    d19a:	dd03      	ble.n	d1a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
      delete[] dims_pointer_;
    d19c:	982b      	ldr	r0, [sp, #172]	; 0xac
    d19e:	b108      	cbz	r0, d1a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    d1a0:	f00b fb6e 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d1a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d1a6:	2b05      	cmp	r3, #5
    d1a8:	dd03      	ble.n	d1b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      delete[] dims_pointer_;
    d1aa:	9825      	ldr	r0, [sp, #148]	; 0x94
    d1ac:	b108      	cbz	r0, d1b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    d1ae:	f00b fb67 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d1b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    d1b4:	2b05      	cmp	r3, #5
    d1b6:	dd03      	ble.n	d1c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      delete[] dims_pointer_;
    d1b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d1ba:	b108      	cbz	r0, d1c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    d1bc:	f00b fb60 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d1c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d1c2:	2b05      	cmp	r3, #5
    d1c4:	dd03      	ble.n	d1ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
      delete[] dims_pointer_;
    d1c6:	9819      	ldr	r0, [sp, #100]	; 0x64
    d1c8:	b108      	cbz	r0, d1ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
    d1ca:	f00b fb59 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    d1ce:	2000      	movs	r0, #0
      break;
    d1d0:	e751      	b.n	d076 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    d1d2:	465a      	mov	r2, fp
    d1d4:	a80a      	add	r0, sp, #40	; 0x28
    d1d6:	f009 fc49 	bl	16a6c <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d1da:	f8db a024 	ldr.w	sl, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    d1de:	f8db b028 	ldr.w	fp, [fp, #40]	; 0x28
    d1e2:	4639      	mov	r1, r7
    d1e4:	a836      	add	r0, sp, #216	; 0xd8
    d1e6:	f009 ff85 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d1ea:	4638      	mov	r0, r7
    d1ec:	f009 f9cc 	bl	16588 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    d1f0:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    d1f2:	af3c      	add	r7, sp, #240	; 0xf0
    d1f4:	4629      	mov	r1, r5
    d1f6:	4638      	mov	r0, r7
    d1f8:	f009 ff7c 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d1fc:	4628      	mov	r0, r5
    d1fe:	f008 fdc4 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d202:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d204:	f50d 7884 	add.w	r8, sp, #264	; 0x108
    d208:	4631      	mov	r1, r6
    d20a:	4640      	mov	r0, r8
    d20c:	f009 ff72 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d210:	4630      	mov	r0, r6
    d212:	f009 f9c9 	bl	165a8 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
    d216:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d218:	f50d 7990 	add.w	r9, sp, #288	; 0x120
    d21c:	4621      	mov	r1, r4
    d21e:	4648      	mov	r0, r9
    d220:	f009 ff68 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d224:	4620      	mov	r0, r4
    d226:	f009 f9b5 	bl	16594 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    d22a:	9006      	str	r0, [sp, #24]
    d22c:	f8cd 9014 	str.w	r9, [sp, #20]
    d230:	9604      	str	r6, [sp, #16]
    d232:	f8cd 800c 	str.w	r8, [sp, #12]
    d236:	9502      	str	r5, [sp, #8]
    d238:	9701      	str	r7, [sp, #4]
    d23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d23c:	9300      	str	r3, [sp, #0]
    d23e:	ab36      	add	r3, sp, #216	; 0xd8
    d240:	465a      	mov	r2, fp
    d242:	4651      	mov	r1, sl
    d244:	a80a      	add	r0, sp, #40	; 0x28
    d246:	f7ff f8d7 	bl	c3f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
    if (size_ > kMaxSmallSize) {
    d24a:	9b48      	ldr	r3, [sp, #288]	; 0x120
    d24c:	2b05      	cmp	r3, #5
    d24e:	dd03      	ble.n	d258 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
      delete[] dims_pointer_;
    d250:	9849      	ldr	r0, [sp, #292]	; 0x124
    d252:	b108      	cbz	r0, d258 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
    d254:	f00b fb14 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d258:	9b42      	ldr	r3, [sp, #264]	; 0x108
    d25a:	2b05      	cmp	r3, #5
    d25c:	dd03      	ble.n	d266 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      delete[] dims_pointer_;
    d25e:	9843      	ldr	r0, [sp, #268]	; 0x10c
    d260:	b108      	cbz	r0, d266 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
    d262:	f00b fb0d 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d266:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    d268:	2b05      	cmp	r3, #5
    d26a:	dd03      	ble.n	d274 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      delete[] dims_pointer_;
    d26c:	983d      	ldr	r0, [sp, #244]	; 0xf4
    d26e:	b108      	cbz	r0, d274 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    d270:	f00b fb06 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d274:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    d276:	2b05      	cmp	r3, #5
    d278:	dd03      	ble.n	d282 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
      delete[] dims_pointer_;
    d27a:	9837      	ldr	r0, [sp, #220]	; 0xdc
    d27c:	b108      	cbz	r0, d282 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
    d27e:	f00b faff 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    d282:	2000      	movs	r0, #0
      break;
    d284:	e6f7      	b.n	d076 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
    d286:	bf00      	nop
    d288:	00034814 	.word	0x00034814
    d28c:	0003481c 	.word	0x0003481c
    d290:	00034818 	.word	0x00034818
    d294:	00034620 	.word	0x00034620
    d298:	00034630 	.word	0x00034630
    d29c:	000345d4 	.word	0x000345d4
    d2a0:	00033f68 	.word	0x00033f68
    d2a4:	00034810 	.word	0x00034810
    d2a8:	0003463c 	.word	0x0003463c
    d2ac:	00034498 	.word	0x00034498
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    d2b0:	465a      	mov	r2, fp
    d2b2:	a80a      	add	r0, sp, #40	; 0x28
    d2b4:	f009 fbda 	bl	16a6c <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d2b8:	f8db 8024 	ldr.w	r8, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    d2bc:	f8db 9028 	ldr.w	r9, [fp, #40]	; 0x28
    d2c0:	4639      	mov	r1, r7
    d2c2:	a84e      	add	r0, sp, #312	; 0x138
    d2c4:	f009 ff16 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d2c8:	4638      	mov	r0, r7
    d2ca:	f008 fd5e 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d2ce:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    d2d0:	af54      	add	r7, sp, #336	; 0x150
    d2d2:	4629      	mov	r1, r5
    d2d4:	4638      	mov	r0, r7
    d2d6:	f009 ff0d 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d2da:	4628      	mov	r0, r5
    d2dc:	f008 fd55 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d2e0:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d2e2:	f50d 7ab4 	add.w	sl, sp, #360	; 0x168
    d2e6:	4631      	mov	r1, r6
    d2e8:	4650      	mov	r0, sl
    d2ea:	f009 ff03 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d2ee:	4630      	mov	r0, r6
    d2f0:	f009 f954 	bl	1659c <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    d2f4:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d2f6:	f50d 7bc0 	add.w	fp, sp, #384	; 0x180
    d2fa:	4621      	mov	r1, r4
    d2fc:	4658      	mov	r0, fp
    d2fe:	f009 fef9 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d302:	4620      	mov	r0, r4
    d304:	f008 fd47 	bl	15d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    d308:	9006      	str	r0, [sp, #24]
    d30a:	f8cd b014 	str.w	fp, [sp, #20]
    d30e:	9604      	str	r6, [sp, #16]
    d310:	f8cd a00c 	str.w	sl, [sp, #12]
    d314:	9502      	str	r5, [sp, #8]
    d316:	9701      	str	r7, [sp, #4]
    d318:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d31a:	9300      	str	r3, [sp, #0]
    d31c:	ab4e      	add	r3, sp, #312	; 0x138
    d31e:	464a      	mov	r2, r9
    d320:	4641      	mov	r1, r8
    d322:	a80a      	add	r0, sp, #40	; 0x28
    d324:	f7ff fb48 	bl	c9b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    d328:	9b60      	ldr	r3, [sp, #384]	; 0x180
    d32a:	2b05      	cmp	r3, #5
    d32c:	dd03      	ble.n	d336 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
      delete[] dims_pointer_;
    d32e:	9861      	ldr	r0, [sp, #388]	; 0x184
    d330:	b108      	cbz	r0, d336 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    d332:	f00b faa5 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d336:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    d338:	2b05      	cmp	r3, #5
    d33a:	dd03      	ble.n	d344 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
      delete[] dims_pointer_;
    d33c:	985b      	ldr	r0, [sp, #364]	; 0x16c
    d33e:	b108      	cbz	r0, d344 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    d340:	f00b fa9e 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d344:	9b54      	ldr	r3, [sp, #336]	; 0x150
    d346:	2b05      	cmp	r3, #5
    d348:	dd03      	ble.n	d352 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
      delete[] dims_pointer_;
    d34a:	9855      	ldr	r0, [sp, #340]	; 0x154
    d34c:	b108      	cbz	r0, d352 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    d34e:	f00b fa97 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d352:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    d354:	2b05      	cmp	r3, #5
    d356:	dd03      	ble.n	d360 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
      delete[] dims_pointer_;
    d358:	984f      	ldr	r0, [sp, #316]	; 0x13c
    d35a:	b108      	cbz	r0, d360 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
    d35c:	f00b fa90 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    d360:	2000      	movs	r0, #0
      break;
    d362:	e688      	b.n	d076 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>

0000d364 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    d364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d368:	b08f      	sub	sp, #60	; 0x3c
    d36a:	4604      	mov	r4, r0
    d36c:	460d      	mov	r5, r1
    d36e:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    d370:	6809      	ldr	r1, [r1, #0]
    d372:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    d374:	2903      	cmp	r1, #3
    d376:	d00a      	beq.n	d38e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    d378:	2902      	cmp	r1, #2
    d37a:	d008      	beq.n	d38e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    d37c:	6945      	ldr	r5, [r0, #20]
    d37e:	4b77      	ldr	r3, [pc, #476]	; (d55c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
    d380:	9300      	str	r3, [sp, #0]
    d382:	2356      	movs	r3, #86	; 0x56
    d384:	4a76      	ldr	r2, [pc, #472]	; (d560 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d386:	4977      	ldr	r1, [pc, #476]	; (d564 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d388:	47a8      	blx	r5
    d38a:	2001      	movs	r0, #1
    d38c:	e011      	b.n	d3b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    d38e:	686a      	ldr	r2, [r5, #4]
    d390:	6812      	ldr	r2, [r2, #0]
    d392:	2a01      	cmp	r2, #1
    d394:	d010      	beq.n	d3b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    d396:	6966      	ldr	r6, [r4, #20]
    d398:	2501      	movs	r5, #1
    d39a:	9503      	str	r5, [sp, #12]
    d39c:	9202      	str	r2, [sp, #8]
    d39e:	4b72      	ldr	r3, [pc, #456]	; (d568 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    d3a0:	9301      	str	r3, [sp, #4]
    d3a2:	4b72      	ldr	r3, [pc, #456]	; (d56c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    d3a4:	9300      	str	r3, [sp, #0]
    d3a6:	2357      	movs	r3, #87	; 0x57
    d3a8:	4a6d      	ldr	r2, [pc, #436]	; (d560 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d3aa:	4971      	ldr	r1, [pc, #452]	; (d570 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    d3ac:	4620      	mov	r0, r4
    d3ae:	47b0      	blx	r6
    d3b0:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    d3b2:	b00f      	add	sp, #60	; 0x3c
    d3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    d3b8:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    d3bc:	68b1      	ldr	r1, [r6, #8]
    d3be:	6872      	ldr	r2, [r6, #4]
    d3c0:	f8d6 8014 	ldr.w	r8, [r6, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    d3c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d3c6:	3801      	subs	r0, #1
    d3c8:	6937      	ldr	r7, [r6, #16]
    d3ca:	fb00 f007 	mul.w	r0, r0, r7
    d3ce:	f100 0901 	add.w	r9, r0, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
    d3d2:	b1b2      	cbz	r2, d402 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>

  switch (padding) {
    d3d4:	f1be 0f01 	cmp.w	lr, #1
    d3d8:	d005      	beq.n	d3e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    d3da:	f1be 0f02 	cmp.w	lr, #2
    d3de:	d009      	beq.n	d3f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    d3e0:	f04f 0c00 	mov.w	ip, #0
    d3e4:	e00e      	b.n	d404 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    d3e6:	eb02 0c03 	add.w	ip, r2, r3
    d3ea:	f10c 3cff 	add.w	ip, ip, #4294967295
    d3ee:	fb9c fcf2 	sdiv	ip, ip, r2
    d3f2:	e007      	b.n	d404 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    d3f4:	eb02 0c03 	add.w	ip, r2, r3
    d3f8:	ebac 0c09 	sub.w	ip, ip, r9
    d3fc:	fb9c fcf2 	sdiv	ip, ip, r2
    d400:	e000      	b.n	d404 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    d402:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    d404:	9f18      	ldr	r7, [sp, #96]	; 0x60
    d406:	3f01      	subs	r7, #1
    d408:	fb07 f708 	mul.w	r7, r7, r8
    d40c:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    d40e:	b1c1      	cbz	r1, d442 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    d410:	f1be 0f01 	cmp.w	lr, #1
    d414:	d005      	beq.n	d422 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    d416:	f1be 0f02 	cmp.w	lr, #2
    d41a:	d00a      	beq.n	d432 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    d41c:	f04f 0e00 	mov.w	lr, #0
    d420:	e010      	b.n	d444 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    d422:	9816      	ldr	r0, [sp, #88]	; 0x58
    d424:	eb01 0e00 	add.w	lr, r1, r0
    d428:	f10e 3eff 	add.w	lr, lr, #4294967295
    d42c:	fb9e fef1 	sdiv	lr, lr, r1
    d430:	e008      	b.n	d444 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    d432:	9816      	ldr	r0, [sp, #88]	; 0x58
    d434:	eb01 0e00 	add.w	lr, r1, r0
    d438:	ebae 0e07 	sub.w	lr, lr, r7
    d43c:	fb9e fef1 	sdiv	lr, lr, r1
    d440:	e000      	b.n	d444 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    d442:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    d444:	f10e 3eff 	add.w	lr, lr, #4294967295
    d448:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    d44c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    d44e:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    d450:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    d454:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    d458:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    d45c:	1049      	asrs	r1, r1, #1
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
  padding_values.height =
    d45e:	910b      	str	r1, [sp, #44]	; 0x2c
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
    d460:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    d462:	f10c 3cff 	add.w	ip, ip, #4294967295
    d466:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    d46a:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    d46c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    d470:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    d474:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    d478:	1052      	asrs	r2, r2, #1
  padding_values.width =
    d47a:	920a      	str	r2, [sp, #40]	; 0x28
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
    d47c:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    d47e:	ab0e      	add	r3, sp, #56	; 0x38
    d480:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    d484:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    d486:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    d48a:	2200      	movs	r2, #0
    d48c:	4629      	mov	r1, r5
    d48e:	4620      	mov	r0, r4
    d490:	f008 fba9 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d494:	4607      	mov	r7, r0
    d496:	b308      	cbz	r0, d4dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x178>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    d498:	2201      	movs	r2, #1
    d49a:	4629      	mov	r1, r5
    d49c:	4620      	mov	r0, r4
    d49e:	f008 fba2 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    d4a2:	4680      	mov	r8, r0
    d4a4:	b320      	cbz	r0, d4f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18c>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    d4a6:	2202      	movs	r2, #2
    d4a8:	4629      	mov	r1, r5
    d4aa:	4620      	mov	r0, r4
    d4ac:	f008 fbd9 	bl	15c62 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    d4b0:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    d4b2:	2200      	movs	r2, #0
    d4b4:	4629      	mov	r1, r5
    d4b6:	4620      	mov	r0, r4
    d4b8:	f008 fbb4 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d4bc:	4605      	mov	r5, r0
    d4be:	b308      	cbz	r0, d504 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>
  if (data_type != kTfLiteFloat32) {
    d4c0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    d4c4:	2b01      	cmp	r3, #1
    d4c6:	d127      	bne.n	d518 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b4>
  data->input_zero_point = input->params.zero_point;
    d4c8:	693b      	ldr	r3, [r7, #16]
    d4ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d4cc:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    d4ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
    d4d2:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    d4d4:	692b      	ldr	r3, [r5, #16]
    d4d6:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    d4d8:	2000      	movs	r0, #0
    d4da:	e76a      	b.n	d3b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    d4dc:	6965      	ldr	r5, [r4, #20]
    d4de:	4b25      	ldr	r3, [pc, #148]	; (d574 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    d4e0:	9300      	str	r3, [sp, #0]
    d4e2:	2361      	movs	r3, #97	; 0x61
    d4e4:	4a1e      	ldr	r2, [pc, #120]	; (d560 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d4e6:	491f      	ldr	r1, [pc, #124]	; (d564 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d4e8:	4620      	mov	r0, r4
    d4ea:	47a8      	blx	r5
    d4ec:	2001      	movs	r0, #1
    d4ee:	e760      	b.n	d3b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    d4f0:	6965      	ldr	r5, [r4, #20]
    d4f2:	4b21      	ldr	r3, [pc, #132]	; (d578 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    d4f4:	9300      	str	r3, [sp, #0]
    d4f6:	2363      	movs	r3, #99	; 0x63
    d4f8:	4a19      	ldr	r2, [pc, #100]	; (d560 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d4fa:	491a      	ldr	r1, [pc, #104]	; (d564 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d4fc:	4620      	mov	r0, r4
    d4fe:	47a8      	blx	r5
    d500:	2001      	movs	r0, #1
    d502:	e756      	b.n	d3b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    d504:	6965      	ldr	r5, [r4, #20]
    d506:	4b1d      	ldr	r3, [pc, #116]	; (d57c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    d508:	9300      	str	r3, [sp, #0]
    d50a:	2367      	movs	r3, #103	; 0x67
    d50c:	4a14      	ldr	r2, [pc, #80]	; (d560 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d50e:	4915      	ldr	r1, [pc, #84]	; (d564 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d510:	4620      	mov	r0, r4
    d512:	47a8      	blx	r5
    d514:	2001      	movs	r0, #1
    d516:	e74c      	b.n	d3b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    d518:	f8d8 3008 	ldr.w	r3, [r8, #8]
    d51c:	685b      	ldr	r3, [r3, #4]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    d51e:	360c      	adds	r6, #12
    d520:	9308      	str	r3, [sp, #32]
    d522:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d526:	9307      	str	r3, [sp, #28]
    d528:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d52c:	9306      	str	r3, [sp, #24]
    d52e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d530:	3330      	adds	r3, #48	; 0x30
    d532:	9305      	str	r3, [sp, #20]
    d534:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d536:	332c      	adds	r3, #44	; 0x2c
    d538:	9304      	str	r3, [sp, #16]
    d53a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d53c:	3320      	adds	r3, #32
    d53e:	9303      	str	r3, [sp, #12]
    d540:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d542:	331c      	adds	r3, #28
    d544:	9302      	str	r3, [sp, #8]
    d546:	9601      	str	r6, [sp, #4]
    d548:	9000      	str	r0, [sp, #0]
    d54a:	464b      	mov	r3, r9
    d54c:	4642      	mov	r2, r8
    d54e:	4639      	mov	r1, r7
    d550:	4620      	mov	r0, r4
    d552:	f7fc f80f 	bl	9574 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    d556:	2800      	cmp	r0, #0
    d558:	d0b6      	beq.n	d4c8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x164>
    d55a:	e72a      	b.n	d3b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    d55c:	0003470c 	.word	0x0003470c
    d560:	000346b8 	.word	0x000346b8
    d564:	00033ca8 	.word	0x00033ca8
    d568:	00034d64 	.word	0x00034d64
    d56c:	00034730 	.word	0x00034730
    d570:	00033f68 	.word	0x00033f68
    d574:	00034744 	.word	0x00034744
    d578:	00034758 	.word	0x00034758
    d57c:	000343b0 	.word	0x000343b0

0000d580 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d584:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    d586:	690e      	ldr	r6, [r1, #16]
    d588:	2e00      	cmp	r6, #0
    d58a:	d052      	beq.n	d632 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    d58c:	4604      	mov	r4, r0
    d58e:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d590:	694f      	ldr	r7, [r1, #20]
    d592:	2f00      	cmp	r7, #0
    d594:	d04f      	beq.n	d636 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb6>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    d596:	2200      	movs	r2, #0
    d598:	f008 fb44 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d59c:	4680      	mov	r8, r0
    d59e:	2800      	cmp	r0, #0
    d5a0:	d04b      	beq.n	d63a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xba>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    d5a2:	2200      	movs	r2, #0
    d5a4:	4629      	mov	r1, r5
    d5a6:	4620      	mov	r0, r4
    d5a8:	f008 fb1d 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d5ac:	4681      	mov	r9, r0
    d5ae:	2800      	cmp	r0, #0
    d5b0:	d051      	beq.n	d656 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    d5b2:	2201      	movs	r2, #1
    d5b4:	4629      	mov	r1, r5
    d5b6:	4620      	mov	r0, r4
    d5b8:	f008 fb15 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    d5bc:	4682      	mov	sl, r0
    d5be:	2800      	cmp	r0, #0
    d5c0:	d054      	beq.n	d66c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xec>

  const int input_width = input->dims->data[2];
    d5c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
    d5c6:	68da      	ldr	r2, [r3, #12]
    d5c8:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    d5ca:	689b      	ldr	r3, [r3, #8]
    d5cc:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    d5ce:	6883      	ldr	r3, [r0, #8]
    d5d0:	68da      	ldr	r2, [r3, #12]
    d5d2:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    d5d4:	689a      	ldr	r2, [r3, #8]
    d5d6:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    d5d8:	f8d8 2008 	ldr.w	r2, [r8, #8]
    d5dc:	68d1      	ldr	r1, [r2, #12]
    d5de:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    d5e0:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    d5e4:	685a      	ldr	r2, [r3, #4]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    d5e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d5e8:	ea4f 0882 	mov.w	r8, r2, lsl #2
    d5ec:	4641      	mov	r1, r8
    d5ee:	4620      	mov	r0, r4
    d5f0:	4798      	blx	r3
  data->per_channel_output_multiplier =
    d5f2:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    d5f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d5f6:	4641      	mov	r1, r8
    d5f8:	4620      	mov	r0, r4
    d5fa:	4798      	blx	r3
  data->per_channel_output_shift =
    d5fc:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    d5fe:	f899 3000 	ldrb.w	r3, [r9]
    d602:	2b09      	cmp	r3, #9
    d604:	d03d      	beq.n	d682 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
    d606:	2b07      	cmp	r3, #7
    d608:	d03b      	beq.n	d682 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    d60a:	9606      	str	r6, [sp, #24]
    d60c:	9305      	str	r3, [sp, #20]
    d60e:	f8cd b010 	str.w	fp, [sp, #16]
    d612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d614:	9303      	str	r3, [sp, #12]
    d616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d618:	9302      	str	r3, [sp, #8]
    d61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d61c:	9301      	str	r3, [sp, #4]
    d61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d620:	9300      	str	r3, [sp, #0]
    d622:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d624:	463a      	mov	r2, r7
    d626:	4629      	mov	r1, r5
    d628:	4620      	mov	r0, r4
    d62a:	f7ff fe9b 	bl	d364 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    d62e:	4680      	mov	r8, r0
    d630:	e00d      	b.n	d64e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node->user_data != nullptr);
    d632:	f00b f93a 	bl	188aa <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d636:	f00b f938 	bl	188aa <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    d63a:	6965      	ldr	r5, [r4, #20]
    d63c:	4b32      	ldr	r3, [pc, #200]	; (d708 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    d63e:	9300      	str	r3, [sp, #0]
    d640:	2386      	movs	r3, #134	; 0x86
    d642:	4a32      	ldr	r2, [pc, #200]	; (d70c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d644:	4932      	ldr	r1, [pc, #200]	; (d710 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d646:	4620      	mov	r0, r4
    d648:	47a8      	blx	r5
    d64a:	f04f 0801 	mov.w	r8, #1
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    d64e:	4640      	mov	r0, r8
    d650:	b00f      	add	sp, #60	; 0x3c
    d652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    d656:	6965      	ldr	r5, [r4, #20]
    d658:	4b2e      	ldr	r3, [pc, #184]	; (d714 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    d65a:	9300      	str	r3, [sp, #0]
    d65c:	2388      	movs	r3, #136	; 0x88
    d65e:	4a2b      	ldr	r2, [pc, #172]	; (d70c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d660:	492b      	ldr	r1, [pc, #172]	; (d710 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d662:	4620      	mov	r0, r4
    d664:	47a8      	blx	r5
    d666:	f04f 0801 	mov.w	r8, #1
    d66a:	e7f0      	b.n	d64e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE(context, filter != nullptr);
    d66c:	6965      	ldr	r5, [r4, #20]
    d66e:	4b2a      	ldr	r3, [pc, #168]	; (d718 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    d670:	9300      	str	r3, [sp, #0]
    d672:	238a      	movs	r3, #138	; 0x8a
    d674:	4a25      	ldr	r2, [pc, #148]	; (d70c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d676:	4926      	ldr	r1, [pc, #152]	; (d710 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d678:	4620      	mov	r0, r4
    d67a:	47a8      	blx	r5
    d67c:	f04f 0801 	mov.w	r8, #1
    d680:	e7e5      	b.n	d64e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    d682:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    d686:	f1b8 0f01 	cmp.w	r8, #1
    d68a:	d00f      	beq.n	d6ac <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    d68c:	6966      	ldr	r6, [r4, #20]
    d68e:	2501      	movs	r5, #1
    d690:	9503      	str	r5, [sp, #12]
    d692:	f8cd 8008 	str.w	r8, [sp, #8]
    d696:	4b21      	ldr	r3, [pc, #132]	; (d71c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    d698:	9301      	str	r3, [sp, #4]
    d69a:	4b21      	ldr	r3, [pc, #132]	; (d720 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    d69c:	9300      	str	r3, [sp, #0]
    d69e:	239e      	movs	r3, #158	; 0x9e
    d6a0:	4a1a      	ldr	r2, [pc, #104]	; (d70c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d6a2:	4920      	ldr	r1, [pc, #128]	; (d724 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    d6a4:	4620      	mov	r0, r4
    d6a6:	47b0      	blx	r6
    d6a8:	46a8      	mov	r8, r5
    d6aa:	e7d0      	b.n	d64e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    const auto* affine_quantization =
    d6ac:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    d6b0:	b1a2      	cbz	r2, d6dc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    d6b2:	6811      	ldr	r1, [r2, #0]
    d6b4:	b1a1      	cbz	r1, d6e0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    d6b6:	6850      	ldr	r0, [r2, #4]
    d6b8:	b1a0      	cbz	r0, d6e4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>
    TF_LITE_ENSURE(context,
    d6ba:	680a      	ldr	r2, [r1, #0]
    d6bc:	2a01      	cmp	r2, #1
    d6be:	d013      	beq.n	d6e8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    d6c0:	f8da 1008 	ldr.w	r1, [sl, #8]
    d6c4:	6849      	ldr	r1, [r1, #4]
    d6c6:	428a      	cmp	r2, r1
    d6c8:	d00e      	beq.n	d6e8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    d6ca:	6965      	ldr	r5, [r4, #20]
    d6cc:	4b16      	ldr	r3, [pc, #88]	; (d728 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    d6ce:	9300      	str	r3, [sp, #0]
    d6d0:	23a7      	movs	r3, #167	; 0xa7
    d6d2:	4a0e      	ldr	r2, [pc, #56]	; (d70c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d6d4:	490e      	ldr	r1, [pc, #56]	; (d710 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d6d6:	4620      	mov	r0, r4
    d6d8:	47a8      	blx	r5
    d6da:	e7b8      	b.n	d64e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK(affine_quantization != nullptr);
    d6dc:	f00b f8e5 	bl	188aa <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    d6e0:	f00b f8e3 	bl	188aa <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    d6e4:	f00b f8e1 	bl	188aa <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    d6e8:	6801      	ldr	r1, [r0, #0]
    d6ea:	428a      	cmp	r2, r1
    d6ec:	d08d      	beq.n	d60a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    d6ee:	6965      	ldr	r5, [r4, #20]
    d6f0:	9103      	str	r1, [sp, #12]
    d6f2:	9202      	str	r2, [sp, #8]
    d6f4:	4b0d      	ldr	r3, [pc, #52]	; (d72c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    d6f6:	9301      	str	r3, [sp, #4]
    d6f8:	4b0d      	ldr	r3, [pc, #52]	; (d730 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    d6fa:	9300      	str	r3, [sp, #0]
    d6fc:	23ab      	movs	r3, #171	; 0xab
    d6fe:	4a03      	ldr	r2, [pc, #12]	; (d70c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d700:	4908      	ldr	r1, [pc, #32]	; (d724 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    d702:	4620      	mov	r0, r4
    d704:	47a8      	blx	r5
    d706:	e7a2      	b.n	d64e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    d708:	000343b0 	.word	0x000343b0
    d70c:	000346b8 	.word	0x000346b8
    d710:	00033ca8 	.word	0x00033ca8
    d714:	00034744 	.word	0x00034744
    d718:	00034758 	.word	0x00034758
    d71c:	00033f84 	.word	0x00033f84
    d720:	00033fbc 	.word	0x00033fbc
    d724:	00033f68 	.word	0x00033f68
    d728:	0003476c 	.word	0x0003476c
    d72c:	000347e8 	.word	0x000347e8
    d730:	00034070 	.word	0x00034070

0000d734 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    d734:	b470      	push	{r4, r5, r6}
    d736:	4606      	mov	r6, r0
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    d738:	4604      	mov	r4, r0
    d73a:	4d05      	ldr	r5, [pc, #20]	; (d750 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
    d73c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d73e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d740:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    d748:	4630      	mov	r0, r6
    d74a:	bc70      	pop	{r4, r5, r6}
    d74c:	4770      	bx	lr
    d74e:	bf00      	nop
    d750:	00031894 	.word	0x00031894

0000d754 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d758:	b0a5      	sub	sp, #148	; 0x94
    d75a:	911a      	str	r1, [sp, #104]	; 0x68
    d75c:	921b      	str	r2, [sp, #108]	; 0x6c
    d75e:	461f      	mov	r7, r3
    d760:	f8dd 80bc 	ldr.w	r8, [sp, #188]	; 0xbc
    d764:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    d766:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
    d76a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    d76e:	920f      	str	r2, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    d770:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    d774:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    d776:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    d77a:	9211      	str	r2, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    d77c:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    d780:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    d782:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    d786:	9213      	str	r2, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    d788:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    d78c:	9214      	str	r2, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
    d78e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    d792:	9206      	str	r2, [sp, #24]
  const int32_t input_offset = params.input_offset;
    d794:	6942      	ldr	r2, [r0, #20]
    d796:	9215      	str	r2, [sp, #84]	; 0x54
  const int32_t output_offset = params.output_offset;
    d798:	69c2      	ldr	r2, [r0, #28]
    d79a:	9216      	str	r2, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    d79c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d79e:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    d7a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    d7a2:	921e      	str	r2, [sp, #120]	; 0x78
  inline int32_t DimensionsCount() const { return size_; }
    d7a4:	6838      	ldr	r0, [r7, #0]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    d7a6:	2804      	cmp	r0, #4
    d7a8:	f040 80b6 	bne.w	d918 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    d7ac:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    d7b0:	2804      	cmp	r0, #4
    d7b2:	f040 80b3 	bne.w	d91c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c8>
    d7b6:	f8d9 0000 	ldr.w	r0, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    d7ba:	2804      	cmp	r0, #4
    d7bc:	f040 80b0 	bne.w	d920 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1cc>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    d7c0:	4291      	cmp	r1, r2
    d7c2:	f300 80af 	bgt.w	d924 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
    TFLITE_DCHECK_LT(i, size_);
    d7c6:	683a      	ldr	r2, [r7, #0]
    d7c8:	2a00      	cmp	r2, #0
    d7ca:	f340 80ad 	ble.w	d928 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d7ce:	2a05      	cmp	r2, #5
    d7d0:	f340 80ac 	ble.w	d92c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    d7d4:	687a      	ldr	r2, [r7, #4]
    d7d6:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    d7d8:	f8d9 1000 	ldr.w	r1, [r9]
    d7dc:	2900      	cmp	r1, #0
    d7de:	f340 80a7 	ble.w	d930 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d7e2:	2905      	cmp	r1, #5
    d7e4:	f340 80a6 	ble.w	d934 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    d7e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    d7ec:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    d7ee:	4291      	cmp	r1, r2
    d7f0:	f040 80a3 	bne.w	d93a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    d7f4:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    d7f6:	f8d9 1000 	ldr.w	r1, [r9]
    d7fa:	2900      	cmp	r1, #0
    d7fc:	f340 809f 	ble.w	d93e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d800:	2905      	cmp	r1, #5
    d802:	f340 809e 	ble.w	d942 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ee>
    d806:	f8d9 1004 	ldr.w	r1, [r9, #4]
    d80a:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    d80c:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    d80e:	428a      	cmp	r2, r1
    d810:	f300 809a 	bgt.w	d948 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
      return __a;
    d814:	aa23      	add	r2, sp, #140	; 0x8c
    d816:	6812      	ldr	r2, [r2, #0]
    d818:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    d81a:	f8d8 2000 	ldr.w	r2, [r8]
    d81e:	2a03      	cmp	r2, #3
    d820:	f340 8094 	ble.w	d94c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d824:	2a05      	cmp	r2, #5
    d826:	f340 8093 	ble.w	d950 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fc>
    d82a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d82e:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    d830:	f8d9 1000 	ldr.w	r1, [r9]
    d834:	2903      	cmp	r1, #3
    d836:	f340 808e 	ble.w	d956 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d83a:	2905      	cmp	r1, #5
    d83c:	f340 808d 	ble.w	d95a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
    d840:	f8d9 1004 	ldr.w	r1, [r9, #4]
    d844:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    d846:	4291      	cmp	r1, r2
    d848:	f040 808a 	bne.w	d960 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    d84c:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    d84e:	f8d9 1000 	ldr.w	r1, [r9]
    d852:	2903      	cmp	r1, #3
    d854:	f340 8086 	ble.w	d964 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d858:	2905      	cmp	r1, #5
    d85a:	f340 8085 	ble.w	d968 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x214>
    d85e:	f8d9 1004 	ldr.w	r1, [r9, #4]
    d862:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    d864:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    d866:	428a      	cmp	r2, r1
    d868:	f300 8081 	bgt.w	d96e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
      return __a;
    d86c:	aa21      	add	r2, sp, #132	; 0x84
    d86e:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    d870:	683a      	ldr	r2, [r7, #0]
    d872:	2a01      	cmp	r2, #1
    d874:	dd7d      	ble.n	d972 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d876:	2a05      	cmp	r2, #5
    d878:	dd7d      	ble.n	d976 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
    d87a:	687a      	ldr	r2, [r7, #4]
    d87c:	6852      	ldr	r2, [r2, #4]
    d87e:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    d880:	683a      	ldr	r2, [r7, #0]
    d882:	2a02      	cmp	r2, #2
    d884:	dd7a      	ble.n	d97c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d886:	2a05      	cmp	r2, #5
    d888:	dd7a      	ble.n	d980 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
    d88a:	687a      	ldr	r2, [r7, #4]
    d88c:	6892      	ldr	r2, [r2, #8]
    d88e:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    d890:	683a      	ldr	r2, [r7, #0]
    d892:	2a03      	cmp	r2, #3
    d894:	dd77      	ble.n	d986 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x232>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d896:	2a05      	cmp	r2, #5
    d898:	dd77      	ble.n	d98a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x236>
    d89a:	687a      	ldr	r2, [r7, #4]
    d89c:	68d2      	ldr	r2, [r2, #12]
    d89e:	9205      	str	r2, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    d8a0:	f8d8 2000 	ldr.w	r2, [r8]
    d8a4:	2a01      	cmp	r2, #1
    d8a6:	dd73      	ble.n	d990 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d8a8:	2a05      	cmp	r2, #5
    d8aa:	dd73      	ble.n	d994 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x240>
    d8ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d8b0:	6852      	ldr	r2, [r2, #4]
    d8b2:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    d8b4:	f8d8 2000 	ldr.w	r2, [r8]
    d8b8:	2a02      	cmp	r2, #2
    d8ba:	dd6f      	ble.n	d99c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d8bc:	2a05      	cmp	r2, #5
    d8be:	dd6f      	ble.n	d9a0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24c>
    d8c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d8c4:	6892      	ldr	r2, [r2, #8]
    d8c6:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    d8c8:	f8d9 2000 	ldr.w	r2, [r9]
    d8cc:	2a01      	cmp	r2, #1
    d8ce:	dd6b      	ble.n	d9a8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x254>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d8d0:	2a05      	cmp	r2, #5
    d8d2:	dd6b      	ble.n	d9ac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x258>
    d8d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d8d8:	6852      	ldr	r2, [r2, #4]
    d8da:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    d8dc:	f8d9 2000 	ldr.w	r2, [r9]
    d8e0:	2a02      	cmp	r2, #2
    d8e2:	dd67      	ble.n	d9b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x260>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d8e4:	2a05      	cmp	r2, #5
    d8e6:	dd67      	ble.n	d9b8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x264>
    d8e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d8ec:	6892      	ldr	r2, [r2, #8]
    d8ee:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    d8f0:	9a05      	ldr	r2, [sp, #20]
    d8f2:	9806      	ldr	r0, [sp, #24]
    d8f4:	fb02 f200 	mul.w	r2, r2, r0
    d8f8:	428a      	cmp	r2, r1
    d8fa:	d161      	bne.n	d9c0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    d8fc:	681c      	ldr	r4, [r3, #0]
    d8fe:	2c05      	cmp	r4, #5
    d900:	dd60      	ble.n	d9c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x270>
    d902:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    d904:	2200      	movs	r2, #0
    int buffer_size = 1;
    d906:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    d908:	42a2      	cmp	r2, r4
    d90a:	da5d      	bge.n	d9c8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x274>
      buffer_size *= dims_data[i];
    d90c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    d910:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
    d914:	3201      	adds	r2, #1
    d916:	e7f7      	b.n	d908 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    d918:	f00a ffc7 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    d91c:	f00a ffc5 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    d920:	f00a ffc3 	bl	188aa <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    d924:	f00a ffc1 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    d928:	f00a ffbf 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d92c:	687a      	ldr	r2, [r7, #4]
    d92e:	e753      	b.n	d7d8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
    TFLITE_DCHECK_LT(i, size_);
    d930:	f00a ffbb 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d934:	f8d9 1004 	ldr.w	r1, [r9, #4]
    d938:	e759      	b.n	d7ee <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    d93a:	f00a ffb6 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    d93e:	f00a ffb4 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d942:	f8d9 1004 	ldr.w	r1, [r9, #4]
    d946:	e761      	b.n	d80c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb8>
	return __b;
    d948:	aa22      	add	r2, sp, #136	; 0x88
    d94a:	e764      	b.n	d816 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xc2>
    TFLITE_DCHECK_LT(i, size_);
    d94c:	f00a ffad 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d950:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d954:	e76c      	b.n	d830 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xdc>
    TFLITE_DCHECK_LT(i, size_);
    d956:	f00a ffa8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d95a:	f8d9 1010 	ldr.w	r1, [r9, #16]
    d95e:	e772      	b.n	d846 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    d960:	f00a ffa3 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    d964:	f00a ffa1 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d968:	f8d9 1010 	ldr.w	r1, [r9, #16]
    d96c:	e77a      	b.n	d864 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x110>
    d96e:	aa20      	add	r2, sp, #128	; 0x80
    d970:	e77d      	b.n	d86e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11a>
    TFLITE_DCHECK_LT(i, size_);
    d972:	f00a ff9a 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d976:	68ba      	ldr	r2, [r7, #8]
    d978:	920c      	str	r2, [sp, #48]	; 0x30
    d97a:	e781      	b.n	d880 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    TFLITE_DCHECK_LT(i, size_);
    d97c:	f00a ff95 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d980:	68fa      	ldr	r2, [r7, #12]
    d982:	920b      	str	r2, [sp, #44]	; 0x2c
    d984:	e784      	b.n	d890 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
    TFLITE_DCHECK_LT(i, size_);
    d986:	f00a ff90 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d98a:	693a      	ldr	r2, [r7, #16]
    d98c:	9205      	str	r2, [sp, #20]
    d98e:	e787      	b.n	d8a0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14c>
    TFLITE_DCHECK_LT(i, size_);
    d990:	f00a ff8b 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d994:	f8d8 2008 	ldr.w	r2, [r8, #8]
    d998:	920a      	str	r2, [sp, #40]	; 0x28
    d99a:	e78b      	b.n	d8b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    TFLITE_DCHECK_LT(i, size_);
    d99c:	f00a ff85 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d9a0:	f8d8 200c 	ldr.w	r2, [r8, #12]
    d9a4:	9209      	str	r2, [sp, #36]	; 0x24
    d9a6:	e78f      	b.n	d8c8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
    TFLITE_DCHECK_LT(i, size_);
    d9a8:	f00a ff7f 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d9ac:	f8d9 2008 	ldr.w	r2, [r9, #8]
    d9b0:	9208      	str	r2, [sp, #32]
    d9b2:	e793      	b.n	d8dc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    TFLITE_DCHECK_LT(i, size_);
    d9b4:	f00a ff79 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d9b8:	f8d9 200c 	ldr.w	r2, [r9, #12]
    d9bc:	9207      	str	r2, [sp, #28]
    d9be:	e797      	b.n	d8f0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19c>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    d9c0:	f00a ff73 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    d9c4:	3304      	adds	r3, #4
    d9c6:	e79d      	b.n	d904 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    d9c8:	428d      	cmp	r5, r1
    d9ca:	d128      	bne.n	da1e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ca>

  for (int batch = 0; batch < batches; ++batch) {
    d9cc:	f04f 0a00 	mov.w	sl, #0
    d9d0:	46c3      	mov	fp, r8
    d9d2:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
    d9d6:	46d1      	mov	r9, sl
    d9d8:	46ba      	mov	sl, r7
    d9da:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    d9dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d9de:	4599      	cmp	r9, r3
    d9e0:	f280 81b4 	bge.w	dd4c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    d9e4:	2300      	movs	r3, #0
    d9e6:	9301      	str	r3, [sp, #4]
    d9e8:	f8cd 900c 	str.w	r9, [sp, #12]
    d9ec:	46d0      	mov	r8, sl
    d9ee:	46d9      	mov	r9, fp
    d9f0:	46ba      	mov	sl, r7
    d9f2:	9b01      	ldr	r3, [sp, #4]
    d9f4:	9a08      	ldr	r2, [sp, #32]
    d9f6:	4293      	cmp	r3, r2
    d9f8:	f280 81a0 	bge.w	dd3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    d9fc:	2300      	movs	r3, #0
    d9fe:	9302      	str	r3, [sp, #8]
    da00:	464f      	mov	r7, r9
    da02:	46c1      	mov	r9, r8
    da04:	46d0      	mov	r8, sl
    da06:	9b02      	ldr	r3, [sp, #8]
    da08:	9a07      	ldr	r2, [sp, #28]
    da0a:	4293      	cmp	r3, r2
    da0c:	f280 818f 	bge.w	dd2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5da>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    da10:	f04f 0b00 	mov.w	fp, #0
    da14:	46da      	mov	sl, fp
    da16:	46cb      	mov	fp, r9
    da18:	46c1      	mov	r9, r8
    da1a:	46b8      	mov	r8, r7
    da1c:	e17a      	b.n	dd14 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    da1e:	f00a ff44 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    da22:	f00a ff42 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    da26:	f00a ff40 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    da2a:	f00a ff3e 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    da2e:	f00a ff3c 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    da32:	f00a ff3a 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    da36:	f00a ff38 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    da3a:	f00a ff36 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    da3e:	f00a ff34 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    da42:	f00a ff32 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    da46:	f00a ff30 	bl	188aa <abort>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    da4a:	3201      	adds	r2, #1
    da4c:	9909      	ldr	r1, [sp, #36]	; 0x24
    da4e:	428a      	cmp	r2, r1
    da50:	da5e      	bge.n	db10 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3bc>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
    da52:	9911      	ldr	r1, [sp, #68]	; 0x44
    da54:	980d      	ldr	r0, [sp, #52]	; 0x34
    da56:	fb01 0602 	mla	r6, r1, r2, r0
                const int in_y =
    da5a:	9912      	ldr	r1, [sp, #72]	; 0x48
    da5c:	fb01 4703 	mla	r7, r1, r3, r4
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    da60:	2e00      	cmp	r6, #0
    da62:	dbf2      	blt.n	da4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    da64:	990b      	ldr	r1, [sp, #44]	; 0x2c
    da66:	428e      	cmp	r6, r1
    da68:	daef      	bge.n	da4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    da6a:	2f00      	cmp	r7, #0
    da6c:	dbed      	blt.n	da4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    da6e:	990c      	ldr	r1, [sp, #48]	; 0x30
    da70:	428f      	cmp	r7, r1
    da72:	daea      	bge.n	da4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
  inline int32_t DimensionsCount() const { return size_; }
    da74:	f8db 0000 	ldr.w	r0, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    da78:	2804      	cmp	r0, #4
    da7a:	d1d2      	bne.n	da22 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    da7c:	9903      	ldr	r1, [sp, #12]
    da7e:	2900      	cmp	r1, #0
    da80:	dbd1      	blt.n	da26 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    da82:	f8db 0004 	ldr.w	r0, [fp, #4]
    da86:	4281      	cmp	r1, r0
    da88:	dacd      	bge.n	da26 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    da8a:	2f00      	cmp	r7, #0
    da8c:	dbcd      	blt.n	da2a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
    da8e:	f8db e008 	ldr.w	lr, [fp, #8]
    da92:	4577      	cmp	r7, lr
    da94:	dac9      	bge.n	da2a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    da96:	2e00      	cmp	r6, #0
    da98:	dbc9      	blt.n	da2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
    da9a:	f8db c00c 	ldr.w	ip, [fp, #12]
    da9e:	4566      	cmp	r6, ip
    daa0:	dac5      	bge.n	da2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    daa2:	f1ba 0f00 	cmp.w	sl, #0
    daa6:	dbc4      	blt.n	da32 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
    daa8:	f8db 0010 	ldr.w	r0, [fp, #16]
    daac:	4582      	cmp	sl, r0
    daae:	dac0      	bge.n	da32 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    dab0:	9903      	ldr	r1, [sp, #12]
    dab2:	fb0e 7701 	mla	r7, lr, r1, r7
    dab6:	fb07 660c 	mla	r6, r7, ip, r6
    daba:	fb06 a000 	mla	r0, r6, r0, sl
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
                      input_shape, batch, in_y, in_x, in_channel)];
    dabe:	992e      	ldr	r1, [sp, #184]	; 0xb8
    dac0:	560e      	ldrsb	r6, [r1, r0]
  inline int32_t DimensionsCount() const { return size_; }
    dac2:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dac6:	2804      	cmp	r0, #4
    dac8:	d1b5      	bne.n	da36 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e2>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    daca:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dace:	2800      	cmp	r0, #0
    dad0:	ddb3      	ble.n	da3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e6>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dad2:	2b00      	cmp	r3, #0
    dad4:	dbb3      	blt.n	da3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
    dad6:	f8d8 0008 	ldr.w	r0, [r8, #8]
    dada:	4283      	cmp	r3, r0
    dadc:	daaf      	bge.n	da3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dade:	2a00      	cmp	r2, #0
    dae0:	dbaf      	blt.n	da42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
    dae2:	f8d8 700c 	ldr.w	r7, [r8, #12]
    dae6:	42ba      	cmp	r2, r7
    dae8:	daab      	bge.n	da42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    daea:	2d00      	cmp	r5, #0
    daec:	dbab      	blt.n	da46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
    daee:	f8d8 0010 	ldr.w	r0, [r8, #16]
    daf2:	4285      	cmp	r5, r0
    daf4:	daa7      	bge.n	da46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    daf6:	fb07 2703 	mla	r7, r7, r3, r2
    dafa:	fb07 5000 	mla	r0, r7, r0, r5
                  int32_t filter_val = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    dafe:	9930      	ldr	r1, [sp, #192]	; 0xc0
    db00:	560f      	ldrsb	r7, [r1, r0]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
    db02:	9915      	ldr	r1, [sp, #84]	; 0x54
    db04:	440e      	add	r6, r1
    db06:	981d      	ldr	r0, [sp, #116]	; 0x74
    db08:	fb07 0006 	mla	r0, r7, r6, r0
    db0c:	901d      	str	r0, [sp, #116]	; 0x74
    db0e:	e79c      	b.n	da4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    db10:	990d      	ldr	r1, [sp, #52]	; 0x34
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    db12:	3301      	adds	r3, #1
    db14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    db16:	4293      	cmp	r3, r2
    db18:	da02      	bge.n	db20 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3cc>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    db1a:	2200      	movs	r2, #0
    db1c:	910d      	str	r1, [sp, #52]	; 0x34
    db1e:	e795      	b.n	da4c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
                }
              }
            }
            if (bias_data) {
    db20:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    db22:	b123      	cbz	r3, db2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3da>
              acc += bias_data[output_channel];
    db24:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    db28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    db2a:	4413      	add	r3, r2
    db2c:	931d      	str	r3, [sp, #116]	; 0x74
            }
            acc = MultiplyByQuantizedMultiplier(
    db2e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    db30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    db32:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    db36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    db38:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    db3c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    db40:	2e00      	cmp	r6, #0
    db42:	f340 80b3 	ble.w	dcac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    db46:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    db48:	409c      	lsls	r4, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    db4a:	45a4      	cmp	ip, r4
    db4c:	f000 80b0 	beq.w	dcb0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x55c>
    db50:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    db52:	17e3      	asrs	r3, r4, #31
  std::int64_t b_64(b);
    db54:	4660      	mov	r0, ip
    db56:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    db58:	fb04 f101 	mul.w	r1, r4, r1
    db5c:	fb0c 1103 	mla	r1, ip, r3, r1
    db60:	fba4 230c 	umull	r2, r3, r4, ip
    db64:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    db66:	2a00      	cmp	r2, #0
    db68:	f173 0100 	sbcs.w	r1, r3, #0
    db6c:	f2c0 80a7 	blt.w	dcbe <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56a>
    db70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    db74:	1852      	adds	r2, r2, r1
    db76:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    db7a:	4611      	mov	r1, r2
    db7c:	461c      	mov	r4, r3
    db7e:	2a00      	cmp	r2, #0
    db80:	f173 0000 	sbcs.w	r0, r3, #0
    db84:	f2c0 809d 	blt.w	dcc2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56e>
    db88:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    db8a:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    db8e:	2f00      	cmp	r7, #0
    db90:	f040 809f 	bne.w	dcd2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57e>
  assert(exponent >= 0);
    db94:	2e00      	cmp	r6, #0
    db96:	f2c0 809f 	blt.w	dcd8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x584>
  assert(exponent <= 31);
    db9a:	2e1f      	cmp	r6, #31
    db9c:	f300 80a3 	bgt.w	dce6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x592>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    dba0:	2701      	movs	r7, #1
    dba2:	fa07 f006 	lsl.w	r0, r7, r6
    dba6:	3801      	subs	r0, #1
    dba8:	f008 f8f9 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    dbac:	900d      	str	r0, [sp, #52]	; 0x34
  const IntegerType zero = Dup<IntegerType>(0);
    dbae:	2000      	movs	r0, #0
    dbb0:	f008 f8f5 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    dbb4:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    dbb6:	4638      	mov	r0, r7
    dbb8:	f008 f8f1 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    dbbc:	900e      	str	r0, [sp, #56]	; 0x38
  const IntegerType remainder = BitAnd(x, mask);
    dbbe:	990d      	ldr	r1, [sp, #52]	; 0x34
    dbc0:	4620      	mov	r0, r4
    dbc2:	f008 f8ed 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dbc6:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    dbc8:	4639      	mov	r1, r7
    dbca:	980d      	ldr	r0, [sp, #52]	; 0x34
    dbcc:	f008 f8ea 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dbd0:	4607      	mov	r7, r0
    dbd2:	9918      	ldr	r1, [sp, #96]	; 0x60
    dbd4:	4620      	mov	r0, r4
    dbd6:	f008 f8f1 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    dbda:	990e      	ldr	r1, [sp, #56]	; 0x38
    dbdc:	f008 f8e0 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dbe0:	4601      	mov	r1, r0
    dbe2:	4638      	mov	r0, r7
    dbe4:	f008 f8e0 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    dbe8:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    dbea:	4631      	mov	r1, r6
    dbec:	4620      	mov	r0, r4
    dbee:	f008 f8d9 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dbf2:	4604      	mov	r4, r0
    dbf4:	4639      	mov	r1, r7
    dbf6:	9819      	ldr	r0, [sp, #100]	; 0x64
    dbf8:	f008 f8e8 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    dbfc:	990e      	ldr	r1, [sp, #56]	; 0x38
    dbfe:	f008 f8cf 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dc02:	4601      	mov	r1, r0
    dc04:	4620      	mov	r0, r4
    dc06:	f008 f8cf 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    dc0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dc0c:	4418      	add	r0, r3
    dc0e:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    dc10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    dc12:	4290      	cmp	r0, r2
    dc14:	db6e      	blt.n	dcf4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a0>
      return __a;
    dc16:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::max(acc, output_activation_min);
    dc18:	681b      	ldr	r3, [r3, #0]
    dc1a:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    dc1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    dc1e:	4293      	cmp	r3, r2
    dc20:	dc6a      	bgt.n	dcf8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a4>
      return __a;
    dc22:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::min(acc, output_activation_max);
    dc24:	6818      	ldr	r0, [r3, #0]
    dc26:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    dc28:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dc2c:	2b04      	cmp	r3, #4
    dc2e:	d165      	bne.n	dcfc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    dc30:	9a03      	ldr	r2, [sp, #12]
    dc32:	2a00      	cmp	r2, #0
    dc34:	db64      	blt.n	dd00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
    dc36:	f8d9 3004 	ldr.w	r3, [r9, #4]
    dc3a:	429a      	cmp	r2, r3
    dc3c:	da60      	bge.n	dd00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dc3e:	9b01      	ldr	r3, [sp, #4]
    dc40:	2b00      	cmp	r3, #0
    dc42:	db5f      	blt.n	dd04 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
    dc44:	f8d9 1008 	ldr.w	r1, [r9, #8]
    dc48:	428b      	cmp	r3, r1
    dc4a:	da5b      	bge.n	dd04 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dc4c:	9b02      	ldr	r3, [sp, #8]
    dc4e:	2b00      	cmp	r3, #0
    dc50:	db5a      	blt.n	dd08 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
    dc52:	f8d9 200c 	ldr.w	r2, [r9, #12]
    dc56:	4293      	cmp	r3, r2
    dc58:	da56      	bge.n	dd08 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    dc5a:	2d00      	cmp	r5, #0
    dc5c:	db56      	blt.n	dd0c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    dc5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    dc62:	429d      	cmp	r5, r3
    dc64:	da52      	bge.n	dd0c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    dc66:	9c03      	ldr	r4, [sp, #12]
    dc68:	9e01      	ldr	r6, [sp, #4]
    dc6a:	fb01 6104 	mla	r1, r1, r4, r6
    dc6e:	9c02      	ldr	r4, [sp, #8]
    dc70:	fb01 4202 	mla	r2, r1, r2, r4
    dc74:	fb02 5303 	mla	r3, r2, r3, r5
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
    dc78:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    dc7a:	54d0      	strb	r0, [r2, r3]
          for (int m = 0; m < depth_multiplier; ++m) {
    dc7c:	9b04      	ldr	r3, [sp, #16]
    dc7e:	3301      	adds	r3, #1
    dc80:	9304      	str	r3, [sp, #16]
    dc82:	9904      	ldr	r1, [sp, #16]
    dc84:	9b06      	ldr	r3, [sp, #24]
    dc86:	4299      	cmp	r1, r3
    dc88:	da42      	bge.n	dd10 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
            const int output_channel = m + in_channel * depth_multiplier;
    dc8a:	fb03 150a 	mla	r5, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
    dc8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc90:	9a02      	ldr	r2, [sp, #8]
    dc92:	fb03 f102 	mul.w	r1, r3, r2
    dc96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dc98:	1ac9      	subs	r1, r1, r3
            const int in_y_origin = (out_y * stride_height) - pad_height;
    dc9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc9c:	9a01      	ldr	r2, [sp, #4]
    dc9e:	fb03 f402 	mul.w	r4, r3, r2
    dca2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    dca4:	1ae4      	subs	r4, r4, r3
            int32_t acc = 0;
    dca6:	2300      	movs	r3, #0
    dca8:	931d      	str	r3, [sp, #116]	; 0x74
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    dcaa:	e733      	b.n	db14 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3c0>
  int right_shift = shift > 0 ? 0 : -shift;
    dcac:	4276      	negs	r6, r6
    dcae:	e74b      	b.n	db48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3f4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dcb0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    dcb4:	d001      	beq.n	dcba <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x566>
    dcb6:	2700      	movs	r7, #0
    dcb8:	e74b      	b.n	db52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
    dcba:	2701      	movs	r7, #1
    dcbc:	e749      	b.n	db52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dcbe:	4925      	ldr	r1, [pc, #148]	; (dd54 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    dcc0:	e758      	b.n	db74 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x420>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dcc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dcc6:	1851      	adds	r1, r2, r1
    dcc8:	f04f 0400 	mov.w	r4, #0
    dccc:	eb43 0404 	adc.w	r4, r3, r4
    dcd0:	e75a      	b.n	db88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x434>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dcd2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    dcd6:	e75d      	b.n	db94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x440>
  assert(exponent >= 0);
    dcd8:	4b1f      	ldr	r3, [pc, #124]	; (dd58 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    dcda:	4a20      	ldr	r2, [pc, #128]	; (dd5c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    dcdc:	f44f 71b3 	mov.w	r1, #358	; 0x166
    dce0:	481f      	ldr	r0, [pc, #124]	; (dd60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    dce2:	f004 fdd3 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    dce6:	4b1f      	ldr	r3, [pc, #124]	; (dd64 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x610>)
    dce8:	4a1c      	ldr	r2, [pc, #112]	; (dd5c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    dcea:	f240 1167 	movw	r1, #359	; 0x167
    dcee:	481c      	ldr	r0, [pc, #112]	; (dd60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    dcf0:	f004 fdcc 	bl	1288c <__assert_func>
	return __b;
    dcf4:	ab1f      	add	r3, sp, #124	; 0x7c
    dcf6:	e78f      	b.n	dc18 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c4>
	return __b;
    dcf8:	ab1e      	add	r3, sp, #120	; 0x78
    dcfa:	e793      	b.n	dc24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dcfc:	f00a fdd5 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    dd00:	f00a fdd3 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dd04:	f00a fdd1 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dd08:	f00a fdcf 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    dd0c:	f00a fdcd 	bl	188aa <abort>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    dd10:	f10a 0a01 	add.w	sl, sl, #1
    dd14:	9b05      	ldr	r3, [sp, #20]
    dd16:	459a      	cmp	sl, r3
    dd18:	da02      	bge.n	dd20 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5cc>
          for (int m = 0; m < depth_multiplier; ++m) {
    dd1a:	2300      	movs	r3, #0
    dd1c:	9304      	str	r3, [sp, #16]
    dd1e:	e7b0      	b.n	dc82 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52e>
    dd20:	4647      	mov	r7, r8
    dd22:	46c8      	mov	r8, r9
    dd24:	46d9      	mov	r9, fp
      for (int out_x = 0; out_x < output_width; ++out_x) {
    dd26:	9b02      	ldr	r3, [sp, #8]
    dd28:	3301      	adds	r3, #1
    dd2a:	9302      	str	r3, [sp, #8]
    dd2c:	e66b      	b.n	da06 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b2>
    dd2e:	46c2      	mov	sl, r8
    dd30:	46c8      	mov	r8, r9
    dd32:	46b9      	mov	r9, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
    dd34:	9b01      	ldr	r3, [sp, #4]
    dd36:	3301      	adds	r3, #1
    dd38:	9301      	str	r3, [sp, #4]
    dd3a:	e65a      	b.n	d9f2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
    dd3c:	46cb      	mov	fp, r9
    dd3e:	f8dd 900c 	ldr.w	r9, [sp, #12]
    dd42:	4657      	mov	r7, sl
    dd44:	46c2      	mov	sl, r8
  for (int batch = 0; batch < batches; ++batch) {
    dd46:	f109 0901 	add.w	r9, r9, #1
    dd4a:	e647      	b.n	d9dc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
          }
        }
      }
    }
  }
}
    dd4c:	b025      	add	sp, #148	; 0x94
    dd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd52:	bf00      	nop
    dd54:	c0000001 	.word	0xc0000001
    dd58:	000343c4 	.word	0x000343c4
    dd5c:	000343d4 	.word	0x000343d4
    dd60:	0003442c 	.word	0x0003442c
    dd64:	00034488 	.word	0x00034488

0000dd68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd6c:	b0cb      	sub	sp, #300	; 0x12c
  TFLITE_DCHECK(node->user_data != nullptr);
    dd6e:	f8d1 9010 	ldr.w	r9, [r1, #16]
    dd72:	f1b9 0f00 	cmp.w	r9, #0
    dd76:	d041      	beq.n	ddfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
    dd78:	4605      	mov	r5, r0
    dd7a:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    dd7c:	f8d1 a014 	ldr.w	sl, [r1, #20]
    dd80:	f1ba 0f00 	cmp.w	sl, #0
    dd84:	d03c      	beq.n	de00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
    dd86:	4b86      	ldr	r3, [pc, #536]	; (dfa0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>)
    dd88:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    dd8a:	2800      	cmp	r0, #0
    dd8c:	d03a      	beq.n	de04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  TFLITE_DCHECK(node != nullptr);
    dd8e:	2e00      	cmp	r6, #0
    dd90:	d03a      	beq.n	de08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    dd92:	6d42      	ldr	r2, [r0, #84]	; 0x54
    dd94:	6873      	ldr	r3, [r6, #4]
    dd96:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    dd9a:	6859      	ldr	r1, [r3, #4]
    dd9c:	4790      	blx	r2
    dd9e:	4604      	mov	r4, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
    dda0:	4b80      	ldr	r3, [pc, #512]	; (dfa4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    dda2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    dda4:	2d00      	cmp	r5, #0
    dda6:	d031      	beq.n	de0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
  TFLITE_DCHECK(node != nullptr);
    dda8:	2e00      	cmp	r6, #0
    ddaa:	d031      	beq.n	de10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    ddac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    ddae:	6833      	ldr	r3, [r6, #0]
    ddb0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ddb4:	6859      	ldr	r1, [r3, #4]
    ddb6:	4628      	mov	r0, r5
    ddb8:	4790      	blx	r2
    ddba:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
    ddbc:	4b7a      	ldr	r3, [pc, #488]	; (dfa8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
    ddbe:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    ddc0:	b345      	cbz	r5, de14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>
  TFLITE_DCHECK(node != nullptr);
    ddc2:	b34e      	cbz	r6, de18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    ddc4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    ddc6:	6833      	ldr	r3, [r6, #0]
    ddc8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ddcc:	6859      	ldr	r1, [r3, #4]
    ddce:	4628      	mov	r0, r5
    ddd0:	4790      	blx	r2
    ddd2:	4680      	mov	r8, r0
    ddd4:	6833      	ldr	r3, [r6, #0]
    ddd6:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    ddd8:	2b03      	cmp	r3, #3
    ddda:	d01f      	beq.n	de1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    dddc:	2600      	movs	r6, #0
  switch (input->type) {  // Already know in/out types are same.
    ddde:	7a38      	ldrb	r0, [r7, #8]
    dde0:	2801      	cmp	r0, #1
    dde2:	d02c      	beq.n	de3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    dde4:	2809      	cmp	r0, #9
    dde6:	d07f      	beq.n	dee8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    dde8:	696c      	ldr	r4, [r5, #20]
    ddea:	f7fb f94f 	bl	908c <TfLiteTypeGetName>
    ddee:	4602      	mov	r2, r0
    ddf0:	7a3b      	ldrb	r3, [r7, #8]
    ddf2:	496e      	ldr	r1, [pc, #440]	; (dfac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
    ddf4:	4628      	mov	r0, r5
    ddf6:	47a0      	blx	r4
      return kTfLiteError;
    ddf8:	2001      	movs	r0, #1
    ddfa:	e072      	b.n	dee2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
  TFLITE_DCHECK(node->user_data != nullptr);
    ddfc:	f00a fd55 	bl	188aa <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    de00:	f00a fd53 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    de04:	f00a fd51 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    de08:	f00a fd4f 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    de0c:	f00a fd4d 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    de10:	f00a fd4b 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    de14:	f00a fd49 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    de18:	f00a fd47 	bl	188aa <abort>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    de1c:	4b64      	ldr	r3, [pc, #400]	; (dfb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
    de1e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    de20:	b14d      	cbz	r5, de36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node != nullptr);
    de22:	b156      	cbz	r6, de3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    de24:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    de26:	6833      	ldr	r3, [r6, #0]
    de28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    de2c:	6859      	ldr	r1, [r3, #4]
    de2e:	4628      	mov	r0, r5
    de30:	4790      	blx	r2
    de32:	4606      	mov	r6, r0
    de34:	e7d3      	b.n	ddde <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
  TFLITE_DCHECK(context != nullptr);
    de36:	f00a fd38 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    de3a:	f00a fd36 	bl	188aa <abort>
          DepthwiseConvParamsFloat(params, data),
    de3e:	464a      	mov	r2, r9
    de40:	4651      	mov	r1, sl
    de42:	a80a      	add	r0, sp, #40	; 0x28
    de44:	f009 f8dc 	bl	17000 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    de48:	4639      	mov	r1, r7
    de4a:	a81a      	add	r0, sp, #104	; 0x68
    de4c:	f009 f952 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    de50:	4638      	mov	r0, r7
    de52:	f007 ff90 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    de56:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(filter),
    de58:	4641      	mov	r1, r8
    de5a:	a820      	add	r0, sp, #128	; 0x80
    de5c:	f009 f94a 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    de60:	4640      	mov	r0, r8
    de62:	f007 ff88 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    de66:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(bias),
    de68:	f10d 0898 	add.w	r8, sp, #152	; 0x98
    de6c:	4631      	mov	r1, r6
    de6e:	4640      	mov	r0, r8
    de70:	f009 f940 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    de74:	4630      	mov	r0, r6
    de76:	f007 ff7e 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    de7a:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    de7c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    de80:	4621      	mov	r1, r4
    de82:	4648      	mov	r0, r9
    de84:	f009 f936 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    de88:	4620      	mov	r0, r4
    de8a:	f007 ff7a 	bl	15d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    de8e:	9004      	str	r0, [sp, #16]
    de90:	f8cd 900c 	str.w	r9, [sp, #12]
    de94:	9602      	str	r6, [sp, #8]
    de96:	f8cd 8004 	str.w	r8, [sp, #4]
    de9a:	9700      	str	r7, [sp, #0]
    de9c:	ab20      	add	r3, sp, #128	; 0x80
    de9e:	462a      	mov	r2, r5
    dea0:	a91a      	add	r1, sp, #104	; 0x68
    dea2:	a80a      	add	r0, sp, #40	; 0x28
    dea4:	f008 fe2e 	bl	16b04 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
    if (size_ > kMaxSmallSize) {
    dea8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    deaa:	2b05      	cmp	r3, #5
    deac:	dd03      	ble.n	deb6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
      delete[] dims_pointer_;
    deae:	982d      	ldr	r0, [sp, #180]	; 0xb4
    deb0:	b108      	cbz	r0, deb6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    deb2:	f00a fce5 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    deb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    deb8:	2b05      	cmp	r3, #5
    deba:	dd03      	ble.n	dec4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
      delete[] dims_pointer_;
    debc:	9827      	ldr	r0, [sp, #156]	; 0x9c
    debe:	b108      	cbz	r0, dec4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    dec0:	f00a fcde 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    dec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    dec6:	2b05      	cmp	r3, #5
    dec8:	dd03      	ble.n	ded2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      delete[] dims_pointer_;
    deca:	9821      	ldr	r0, [sp, #132]	; 0x84
    decc:	b108      	cbz	r0, ded2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    dece:	f00a fcd7 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    ded2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ded4:	2b05      	cmp	r3, #5
    ded6:	dd03      	ble.n	dee0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
      delete[] dims_pointer_;
    ded8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    deda:	b108      	cbz	r0, dee0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    dedc:	f00a fcd0 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    dee0:	2000      	movs	r0, #0
}
    dee2:	b04b      	add	sp, #300	; 0x12c
    dee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DepthwiseConvParamsQuantized(params, data),
    dee8:	464a      	mov	r2, r9
    deea:	4651      	mov	r1, sl
    deec:	a80a      	add	r0, sp, #40	; 0x28
    deee:	f009 f85e 	bl	16fae <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_multiplier, data.per_channel_output_shift,
    def2:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
    def6:	f8d9 b028 	ldr.w	fp, [r9, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
    defa:	4639      	mov	r1, r7
    defc:	a832      	add	r0, sp, #200	; 0xc8
    defe:	f009 f8f9 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    df02:	4638      	mov	r0, r7
    df04:	f007 ff41 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    df08:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    df0a:	af38      	add	r7, sp, #224	; 0xe0
    df0c:	4641      	mov	r1, r8
    df0e:	4638      	mov	r0, r7
    df10:	f009 f8f0 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    df14:	4640      	mov	r0, r8
    df16:	f007 ff38 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    df1a:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    df1c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
    df20:	4631      	mov	r1, r6
    df22:	4640      	mov	r0, r8
    df24:	f009 f8e6 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    df28:	4630      	mov	r0, r6
    df2a:	f008 fb37 	bl	1659c <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    df2e:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    df30:	f50d 7988 	add.w	r9, sp, #272	; 0x110
    df34:	4621      	mov	r1, r4
    df36:	4648      	mov	r0, r9
    df38:	f009 f8dc 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    df3c:	4620      	mov	r0, r4
    df3e:	f007 ff2a 	bl	15d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    df42:	9006      	str	r0, [sp, #24]
    df44:	f8cd 9014 	str.w	r9, [sp, #20]
    df48:	9604      	str	r6, [sp, #16]
    df4a:	f8cd 800c 	str.w	r8, [sp, #12]
    df4e:	9502      	str	r5, [sp, #8]
    df50:	9701      	str	r7, [sp, #4]
    df52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df54:	9300      	str	r3, [sp, #0]
    df56:	ab32      	add	r3, sp, #200	; 0xc8
    df58:	465a      	mov	r2, fp
    df5a:	4651      	mov	r1, sl
    df5c:	a80a      	add	r0, sp, #40	; 0x28
    df5e:	f7ff fbf9 	bl	d754 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    df62:	9b44      	ldr	r3, [sp, #272]	; 0x110
    df64:	2b05      	cmp	r3, #5
    df66:	dd03      	ble.n	df70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
      delete[] dims_pointer_;
    df68:	9845      	ldr	r0, [sp, #276]	; 0x114
    df6a:	b108      	cbz	r0, df70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
    df6c:	f00a fc88 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    df70:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    df72:	2b05      	cmp	r3, #5
    df74:	dd03      	ble.n	df7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
      delete[] dims_pointer_;
    df76:	983f      	ldr	r0, [sp, #252]	; 0xfc
    df78:	b108      	cbz	r0, df7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    df7a:	f00a fc81 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    df7e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    df80:	2b05      	cmp	r3, #5
    df82:	dd03      	ble.n	df8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
      delete[] dims_pointer_;
    df84:	9839      	ldr	r0, [sp, #228]	; 0xe4
    df86:	b108      	cbz	r0, df8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
    df88:	f00a fc7a 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    df8c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    df8e:	2b05      	cmp	r3, #5
    df90:	dd03      	ble.n	df9a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
      delete[] dims_pointer_;
    df92:	9833      	ldr	r0, [sp, #204]	; 0xcc
    df94:	b108      	cbz	r0, df9a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
    df96:	f00a fc73 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    df9a:	2000      	movs	r0, #0
      break;
    df9c:	e7a1      	b.n	dee2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
    df9e:	bf00      	nop
    dfa0:	00034908 	.word	0x00034908
    dfa4:	00034904 	.word	0x00034904
    dfa8:	0003490c 	.word	0x0003490c
    dfac:	00034498 	.word	0x00034498
    dfb0:	00034900 	.word	0x00034900

0000dfb4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
    dfb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dfb8:	b08f      	sub	sp, #60	; 0x3c
    dfba:	4604      	mov	r4, r0
    dfbc:	460d      	mov	r5, r1
    dfbe:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    dfc0:	6809      	ldr	r1, [r1, #0]
    dfc2:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    dfc4:	2903      	cmp	r1, #3
    dfc6:	d00a      	beq.n	dfde <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    dfc8:	2902      	cmp	r1, #2
    dfca:	d008      	beq.n	dfde <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    dfcc:	6945      	ldr	r5, [r0, #20]
    dfce:	4b79      	ldr	r3, [pc, #484]	; (e1b4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    dfd0:	9300      	str	r3, [sp, #0]
    dfd2:	2357      	movs	r3, #87	; 0x57
    dfd4:	4a78      	ldr	r2, [pc, #480]	; (e1b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    dfd6:	4979      	ldr	r1, [pc, #484]	; (e1bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    dfd8:	47a8      	blx	r5
    dfda:	2001      	movs	r0, #1
    dfdc:	e011      	b.n	e002 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    dfde:	686a      	ldr	r2, [r5, #4]
    dfe0:	6812      	ldr	r2, [r2, #0]
    dfe2:	2a01      	cmp	r2, #1
    dfe4:	d010      	beq.n	e008 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    dfe6:	6966      	ldr	r6, [r4, #20]
    dfe8:	2501      	movs	r5, #1
    dfea:	9503      	str	r5, [sp, #12]
    dfec:	9202      	str	r2, [sp, #8]
    dfee:	4b74      	ldr	r3, [pc, #464]	; (e1c0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    dff0:	9301      	str	r3, [sp, #4]
    dff2:	4b74      	ldr	r3, [pc, #464]	; (e1c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    dff4:	9300      	str	r3, [sp, #0]
    dff6:	2358      	movs	r3, #88	; 0x58
    dff8:	4a6f      	ldr	r2, [pc, #444]	; (e1b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    dffa:	4973      	ldr	r1, [pc, #460]	; (e1c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    dffc:	4620      	mov	r0, r4
    dffe:	47b0      	blx	r6
    e000:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    e002:	b00f      	add	sp, #60	; 0x3c
    e004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    e008:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    e00c:	68b1      	ldr	r1, [r6, #8]
    e00e:	6872      	ldr	r2, [r6, #4]
    e010:	f8d6 8018 	ldr.w	r8, [r6, #24]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    e014:	9817      	ldr	r0, [sp, #92]	; 0x5c
    e016:	3801      	subs	r0, #1
    e018:	6977      	ldr	r7, [r6, #20]
    e01a:	fb00 f007 	mul.w	r0, r0, r7
    e01e:	f100 0901 	add.w	r9, r0, #1
  if (stride == 0) return 0;
    e022:	b1b2      	cbz	r2, e052 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
    e024:	f1be 0f01 	cmp.w	lr, #1
    e028:	d005      	beq.n	e036 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    e02a:	f1be 0f02 	cmp.w	lr, #2
    e02e:	d009      	beq.n	e044 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    e030:	f04f 0c00 	mov.w	ip, #0
    e034:	e00e      	b.n	e054 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - 1) / stride;
    e036:	eb02 0c03 	add.w	ip, r2, r3
    e03a:	f10c 3cff 	add.w	ip, ip, #4294967295
    e03e:	fb9c fcf2 	sdiv	ip, ip, r2
    e042:	e007      	b.n	e054 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - effective_filter_size) / stride;
    e044:	eb02 0c03 	add.w	ip, r2, r3
    e048:	ebac 0c09 	sub.w	ip, ip, r9
    e04c:	fb9c fcf2 	sdiv	ip, ip, r2
    e050:	e000      	b.n	e054 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    e052:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    e054:	9f18      	ldr	r7, [sp, #96]	; 0x60
    e056:	3f01      	subs	r7, #1
    e058:	fb07 f708 	mul.w	r7, r7, r8
    e05c:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    e05e:	b1c1      	cbz	r1, e092 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    e060:	f1be 0f01 	cmp.w	lr, #1
    e064:	d005      	beq.n	e072 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    e066:	f1be 0f02 	cmp.w	lr, #2
    e06a:	d00a      	beq.n	e082 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    e06c:	f04f 0e00 	mov.w	lr, #0
    e070:	e010      	b.n	e094 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    e072:	9816      	ldr	r0, [sp, #88]	; 0x58
    e074:	eb01 0e00 	add.w	lr, r1, r0
    e078:	f10e 3eff 	add.w	lr, lr, #4294967295
    e07c:	fb9e fef1 	sdiv	lr, lr, r1
    e080:	e008      	b.n	e094 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    e082:	9816      	ldr	r0, [sp, #88]	; 0x58
    e084:	eb01 0e00 	add.w	lr, r1, r0
    e088:	ebae 0e07 	sub.w	lr, lr, r7
    e08c:	fb9e fef1 	sdiv	lr, lr, r1
    e090:	e000      	b.n	e094 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    e092:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    e094:	f10e 3eff 	add.w	lr, lr, #4294967295
    e098:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    e09c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    e09e:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    e0a0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    e0a4:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    e0a8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    e0ac:	1049      	asrs	r1, r1, #1
  padding_values.height =
    e0ae:	910b      	str	r1, [sp, #44]	; 0x2c
  padding_values.height_offset = offset;
    e0b0:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    e0b2:	f10c 3cff 	add.w	ip, ip, #4294967295
    e0b6:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    e0ba:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    e0bc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    e0c0:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    e0c4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    e0c8:	1052      	asrs	r2, r2, #1
  padding_values.width =
    e0ca:	920a      	str	r2, [sp, #40]	; 0x28
  padding_values.width_offset = offset;
    e0cc:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    e0ce:	ab0e      	add	r3, sp, #56	; 0x38
    e0d0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    e0d4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    e0d6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    e0da:	4b3c      	ldr	r3, [pc, #240]	; (e1cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    e0dc:	681a      	ldr	r2, [r3, #0]
    e0de:	4629      	mov	r1, r5
    e0e0:	4620      	mov	r0, r4
    e0e2:	f007 fd80 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e0e6:	4607      	mov	r7, r0
    e0e8:	b320      	cbz	r0, e134 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x180>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    e0ea:	4b39      	ldr	r3, [pc, #228]	; (e1d0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
    e0ec:	681a      	ldr	r2, [r3, #0]
    e0ee:	4629      	mov	r1, r5
    e0f0:	4620      	mov	r0, r4
    e0f2:	f007 fd78 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e0f6:	4680      	mov	r8, r0
    e0f8:	b330      	cbz	r0, e148 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    e0fa:	4b36      	ldr	r3, [pc, #216]	; (e1d4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
    e0fc:	681a      	ldr	r2, [r3, #0]
    e0fe:	4629      	mov	r1, r5
    e100:	4620      	mov	r0, r4
    e102:	f007 fdae 	bl	15c62 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    e106:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    e108:	4b33      	ldr	r3, [pc, #204]	; (e1d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x224>)
    e10a:	681a      	ldr	r2, [r3, #0]
    e10c:	4629      	mov	r1, r5
    e10e:	4620      	mov	r0, r4
    e110:	f007 fd88 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e114:	4605      	mov	r5, r0
    e116:	b308      	cbz	r0, e15c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>
  if (data_type != kTfLiteFloat32) {
    e118:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    e11c:	2b01      	cmp	r3, #1
    e11e:	d127      	bne.n	e170 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>
  data->input_zero_point = input->params.zero_point;
    e120:	693b      	ldr	r3, [r7, #16]
    e122:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e124:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    e126:	f8d8 3010 	ldr.w	r3, [r8, #16]
    e12a:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    e12c:	692b      	ldr	r3, [r5, #16]
    e12e:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    e130:	2000      	movs	r0, #0
    e132:	e766      	b.n	e002 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    e134:	6965      	ldr	r5, [r4, #20]
    e136:	4b29      	ldr	r3, [pc, #164]	; (e1dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>)
    e138:	9300      	str	r3, [sp, #0]
    e13a:	2362      	movs	r3, #98	; 0x62
    e13c:	4a1e      	ldr	r2, [pc, #120]	; (e1b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e13e:	491f      	ldr	r1, [pc, #124]	; (e1bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e140:	4620      	mov	r0, r4
    e142:	47a8      	blx	r5
    e144:	2001      	movs	r0, #1
    e146:	e75c      	b.n	e002 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    e148:	6965      	ldr	r5, [r4, #20]
    e14a:	4b25      	ldr	r3, [pc, #148]	; (e1e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
    e14c:	9300      	str	r3, [sp, #0]
    e14e:	2364      	movs	r3, #100	; 0x64
    e150:	4a19      	ldr	r2, [pc, #100]	; (e1b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e152:	491a      	ldr	r1, [pc, #104]	; (e1bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e154:	4620      	mov	r0, r4
    e156:	47a8      	blx	r5
    e158:	2001      	movs	r0, #1
    e15a:	e752      	b.n	e002 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    e15c:	6965      	ldr	r5, [r4, #20]
    e15e:	4b21      	ldr	r3, [pc, #132]	; (e1e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
    e160:	9300      	str	r3, [sp, #0]
    e162:	2368      	movs	r3, #104	; 0x68
    e164:	4a14      	ldr	r2, [pc, #80]	; (e1b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e166:	4915      	ldr	r1, [pc, #84]	; (e1bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e168:	4620      	mov	r0, r4
    e16a:	47a8      	blx	r5
    e16c:	2001      	movs	r0, #1
    e16e:	e748      	b.n	e002 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    e170:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e174:	691b      	ldr	r3, [r3, #16]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    e176:	3610      	adds	r6, #16
    e178:	9308      	str	r3, [sp, #32]
    e17a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e17e:	9307      	str	r3, [sp, #28]
    e180:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e184:	9306      	str	r3, [sp, #24]
    e186:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e188:	3330      	adds	r3, #48	; 0x30
    e18a:	9305      	str	r3, [sp, #20]
    e18c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e18e:	332c      	adds	r3, #44	; 0x2c
    e190:	9304      	str	r3, [sp, #16]
    e192:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e194:	3320      	adds	r3, #32
    e196:	9303      	str	r3, [sp, #12]
    e198:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e19a:	331c      	adds	r3, #28
    e19c:	9302      	str	r3, [sp, #8]
    e19e:	9601      	str	r6, [sp, #4]
    e1a0:	9000      	str	r0, [sp, #0]
    e1a2:	464b      	mov	r3, r9
    e1a4:	4642      	mov	r2, r8
    e1a6:	4639      	mov	r1, r7
    e1a8:	4620      	mov	r0, r4
    e1aa:	f7fb f9e3 	bl	9574 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    e1ae:	2800      	cmp	r0, #0
    e1b0:	d0b6      	beq.n	e120 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
    e1b2:	e726      	b.n	e002 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    e1b4:	0003470c 	.word	0x0003470c
    e1b8:	00034820 	.word	0x00034820
    e1bc:	00033ca8 	.word	0x00033ca8
    e1c0:	00034d64 	.word	0x00034d64
    e1c4:	00034730 	.word	0x00034730
    e1c8:	00033f68 	.word	0x00033f68
    e1cc:	00034814 	.word	0x00034814
    e1d0:	0003481c 	.word	0x0003481c
    e1d4:	00034810 	.word	0x00034810
    e1d8:	00034818 	.word	0x00034818
    e1dc:	00034744 	.word	0x00034744
    e1e0:	00034758 	.word	0x00034758
    e1e4:	000343b0 	.word	0x000343b0

0000e1e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1ec:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    e1ee:	690e      	ldr	r6, [r1, #16]
    e1f0:	2e00      	cmp	r6, #0
    e1f2:	d051      	beq.n	e298 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    e1f4:	4604      	mov	r4, r0
    e1f6:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e1f8:	694f      	ldr	r7, [r1, #20]
    e1fa:	2f00      	cmp	r7, #0
    e1fc:	d04e      	beq.n	e29c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb4>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
    e1fe:	2200      	movs	r2, #0
    e200:	f007 fd10 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e204:	4680      	mov	r8, r0
    e206:	2800      	cmp	r0, #0
    e208:	d04a      	beq.n	e2a0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
    e20a:	2200      	movs	r2, #0
    e20c:	4629      	mov	r1, r5
    e20e:	4620      	mov	r0, r4
    e210:	f007 fce9 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e214:	4681      	mov	r9, r0
    e216:	2800      	cmp	r0, #0
    e218:	d050      	beq.n	e2bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xd4>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
    e21a:	2201      	movs	r2, #1
    e21c:	4629      	mov	r1, r5
    e21e:	4620      	mov	r0, r4
    e220:	f007 fce1 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e224:	4682      	mov	sl, r0
    e226:	2800      	cmp	r0, #0
    e228:	d053      	beq.n	e2d2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xea>

  const int input_width = input->dims->data[2];
    e22a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    e22e:	68da      	ldr	r2, [r3, #12]
    e230:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    e232:	689b      	ldr	r3, [r3, #8]
    e234:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    e236:	6883      	ldr	r3, [r0, #8]
    e238:	68da      	ldr	r2, [r3, #12]
    e23a:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    e23c:	689a      	ldr	r2, [r3, #8]
    e23e:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    e240:	f8d8 2008 	ldr.w	r2, [r8, #8]
    e244:	68d1      	ldr	r1, [r2, #12]
    e246:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    e248:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    e24c:	691a      	ldr	r2, [r3, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    e24e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e250:	ea4f 0882 	mov.w	r8, r2, lsl #2
    e254:	4641      	mov	r1, r8
    e256:	4620      	mov	r0, r4
    e258:	4798      	blx	r3
  data->per_channel_output_multiplier =
    e25a:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    e25c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e25e:	4641      	mov	r1, r8
    e260:	4620      	mov	r0, r4
    e262:	4798      	blx	r3
  data->per_channel_output_shift =
    e264:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    e266:	f899 3000 	ldrb.w	r3, [r9]
    e26a:	2b09      	cmp	r3, #9
    e26c:	d16a      	bne.n	e344 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    e26e:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    e272:	f1b8 0f01 	cmp.w	r8, #1
    e276:	d037      	beq.n	e2e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x100>
    e278:	6966      	ldr	r6, [r4, #20]
    e27a:	2501      	movs	r5, #1
    e27c:	9503      	str	r5, [sp, #12]
    e27e:	f8cd 8008 	str.w	r8, [sp, #8]
    e282:	4b3a      	ldr	r3, [pc, #232]	; (e36c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    e284:	9301      	str	r3, [sp, #4]
    e286:	4b3a      	ldr	r3, [pc, #232]	; (e370 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    e288:	9300      	str	r3, [sp, #0]
    e28a:	23a1      	movs	r3, #161	; 0xa1
    e28c:	4a39      	ldr	r2, [pc, #228]	; (e374 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e28e:	493a      	ldr	r1, [pc, #232]	; (e378 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    e290:	4620      	mov	r0, r4
    e292:	47b0      	blx	r6
    e294:	46a8      	mov	r8, r5
    e296:	e00d      	b.n	e2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TFLITE_DCHECK(node->user_data != nullptr);
    e298:	f00a fb07 	bl	188aa <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e29c:	f00a fb05 	bl	188aa <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    e2a0:	6965      	ldr	r5, [r4, #20]
    e2a2:	4b36      	ldr	r3, [pc, #216]	; (e37c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    e2a4:	9300      	str	r3, [sp, #0]
    e2a6:	2387      	movs	r3, #135	; 0x87
    e2a8:	4a32      	ldr	r2, [pc, #200]	; (e374 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e2aa:	4935      	ldr	r1, [pc, #212]	; (e380 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e2ac:	4620      	mov	r0, r4
    e2ae:	47a8      	blx	r5
    e2b0:	f04f 0801 	mov.w	r8, #1
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    e2b4:	4640      	mov	r0, r8
    e2b6:	b00f      	add	sp, #60	; 0x3c
    e2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    e2bc:	6965      	ldr	r5, [r4, #20]
    e2be:	4b31      	ldr	r3, [pc, #196]	; (e384 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    e2c0:	9300      	str	r3, [sp, #0]
    e2c2:	238a      	movs	r3, #138	; 0x8a
    e2c4:	4a2b      	ldr	r2, [pc, #172]	; (e374 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e2c6:	492e      	ldr	r1, [pc, #184]	; (e380 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e2c8:	4620      	mov	r0, r4
    e2ca:	47a8      	blx	r5
    e2cc:	f04f 0801 	mov.w	r8, #1
    e2d0:	e7f0      	b.n	e2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE(context, filter != nullptr);
    e2d2:	6965      	ldr	r5, [r4, #20]
    e2d4:	4b2c      	ldr	r3, [pc, #176]	; (e388 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    e2d6:	9300      	str	r3, [sp, #0]
    e2d8:	238d      	movs	r3, #141	; 0x8d
    e2da:	4a26      	ldr	r2, [pc, #152]	; (e374 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e2dc:	4928      	ldr	r1, [pc, #160]	; (e380 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e2de:	4620      	mov	r0, r4
    e2e0:	47a8      	blx	r5
    e2e2:	f04f 0801 	mov.w	r8, #1
    e2e6:	e7e5      	b.n	e2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    const auto* affine_quantization =
    e2e8:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    e2ec:	b1a2      	cbz	r2, e318 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x130>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    e2ee:	6811      	ldr	r1, [r2, #0]
    e2f0:	b1a1      	cbz	r1, e31c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    e2f2:	6850      	ldr	r0, [r2, #4]
    e2f4:	b1a0      	cbz	r0, e320 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    TF_LITE_ENSURE(
    e2f6:	680a      	ldr	r2, [r1, #0]
    e2f8:	2a01      	cmp	r2, #1
    e2fa:	d013      	beq.n	e324 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    e2fc:	f8da 1008 	ldr.w	r1, [sl, #8]
    e300:	6909      	ldr	r1, [r1, #16]
    e302:	428a      	cmp	r2, r1
    e304:	d00e      	beq.n	e324 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    e306:	6965      	ldr	r5, [r4, #20]
    e308:	4b20      	ldr	r3, [pc, #128]	; (e38c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    e30a:	9300      	str	r3, [sp, #0]
    e30c:	23aa      	movs	r3, #170	; 0xaa
    e30e:	4a19      	ldr	r2, [pc, #100]	; (e374 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e310:	491b      	ldr	r1, [pc, #108]	; (e380 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e312:	4620      	mov	r0, r4
    e314:	47a8      	blx	r5
    e316:	e7cd      	b.n	e2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    TFLITE_DCHECK(affine_quantization != nullptr);
    e318:	f00a fac7 	bl	188aa <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    e31c:	f00a fac5 	bl	188aa <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    e320:	f00a fac3 	bl	188aa <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    e324:	6801      	ldr	r1, [r0, #0]
    e326:	428a      	cmp	r2, r1
    e328:	d00c      	beq.n	e344 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    e32a:	6965      	ldr	r5, [r4, #20]
    e32c:	9103      	str	r1, [sp, #12]
    e32e:	9202      	str	r2, [sp, #8]
    e330:	4b17      	ldr	r3, [pc, #92]	; (e390 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    e332:	9301      	str	r3, [sp, #4]
    e334:	4b17      	ldr	r3, [pc, #92]	; (e394 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    e336:	9300      	str	r3, [sp, #0]
    e338:	23af      	movs	r3, #175	; 0xaf
    e33a:	4a0e      	ldr	r2, [pc, #56]	; (e374 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e33c:	490e      	ldr	r1, [pc, #56]	; (e378 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    e33e:	4620      	mov	r0, r4
    e340:	47a8      	blx	r5
    e342:	e7b7      	b.n	e2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
    e344:	9606      	str	r6, [sp, #24]
    e346:	9305      	str	r3, [sp, #20]
    e348:	f8cd b010 	str.w	fp, [sp, #16]
    e34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e34e:	9303      	str	r3, [sp, #12]
    e350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e352:	9302      	str	r3, [sp, #8]
    e354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e356:	9301      	str	r3, [sp, #4]
    e358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e35a:	9300      	str	r3, [sp, #0]
    e35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e35e:	463a      	mov	r2, r7
    e360:	4629      	mov	r1, r5
    e362:	4620      	mov	r0, r4
    e364:	f7ff fe26 	bl	dfb4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    e368:	4680      	mov	r8, r0
    e36a:	e7a3      	b.n	e2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    e36c:	00033f84 	.word	0x00033f84
    e370:	00033fbc 	.word	0x00033fbc
    e374:	00034820 	.word	0x00034820
    e378:	00033f68 	.word	0x00033f68
    e37c:	000343b0 	.word	0x000343b0
    e380:	00033ca8 	.word	0x00033ca8
    e384:	00034744 	.word	0x00034744
    e388:	00034758 	.word	0x00034758
    e38c:	0003487c 	.word	0x0003487c
    e390:	000347e8 	.word	0x000347e8
    e394:	00034070 	.word	0x00034070

0000e398 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    e398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e39c:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    e39e:	690d      	ldr	r5, [r1, #16]
    e3a0:	b37d      	cbz	r5, e402 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    e3a2:	4607      	mov	r7, r0
    e3a4:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e3a6:	694e      	ldr	r6, [r1, #20]
    e3a8:	b36e      	cbz	r6, e406 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    e3aa:	4b38      	ldr	r3, [pc, #224]	; (e48c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    e3ac:	681a      	ldr	r2, [r3, #0]
    e3ae:	f007 fc1a 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e3b2:	4681      	mov	r9, r0
    e3b4:	b348      	cbz	r0, e40a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x72>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
    e3b6:	4b36      	ldr	r3, [pc, #216]	; (e490 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    e3b8:	681a      	ldr	r2, [r3, #0]
    e3ba:	4621      	mov	r1, r4
    e3bc:	4638      	mov	r0, r7
    e3be:	f007 fc12 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e3c2:	4682      	mov	sl, r0
    e3c4:	b368      	cbz	r0, e422 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    e3c6:	4b33      	ldr	r3, [pc, #204]	; (e494 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    e3c8:	681a      	ldr	r2, [r3, #0]
    e3ca:	4621      	mov	r1, r4
    e3cc:	4638      	mov	r0, r7
    e3ce:	f007 fc48 	bl	15c62 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    e3d2:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    e3d4:	4b30      	ldr	r3, [pc, #192]	; (e498 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    e3d6:	681a      	ldr	r2, [r3, #0]
    e3d8:	4621      	mov	r1, r4
    e3da:	4638      	mov	r0, r7
    e3dc:	f007 fc22 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e3e0:	4604      	mov	r4, r0
    e3e2:	b340      	cbz	r0, e436 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    e3e4:	f899 0000 	ldrb.w	r0, [r9]
    e3e8:	7823      	ldrb	r3, [r4, #0]
    e3ea:	4298      	cmp	r0, r3
    e3ec:	d12d      	bne.n	e44a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    e3ee:	f89a 3000 	ldrb.w	r3, [sl]
    e3f2:	4298      	cmp	r0, r3
    e3f4:	d03d      	beq.n	e472 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    e3f6:	697b      	ldr	r3, [r7, #20]
    e3f8:	4928      	ldr	r1, [pc, #160]	; (e49c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    e3fa:	4638      	mov	r0, r7
    e3fc:	4798      	blx	r3
    e3fe:	2001      	movs	r0, #1
    e400:	e00c      	b.n	e41c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TFLITE_DCHECK(node->user_data != nullptr);
    e402:	f00a fa52 	bl	188aa <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e406:	f00a fa50 	bl	188aa <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    e40a:	697c      	ldr	r4, [r7, #20]
    e40c:	4b24      	ldr	r3, [pc, #144]	; (e4a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    e40e:	9300      	str	r3, [sp, #0]
    e410:	232f      	movs	r3, #47	; 0x2f
    e412:	4a24      	ldr	r2, [pc, #144]	; (e4a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e414:	4924      	ldr	r1, [pc, #144]	; (e4a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e416:	4638      	mov	r0, r7
    e418:	47a0      	blx	r4
    e41a:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    e41c:	b004      	add	sp, #16
    e41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, filter != nullptr);
    e422:	697c      	ldr	r4, [r7, #20]
    e424:	4b21      	ldr	r3, [pc, #132]	; (e4ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    e426:	9300      	str	r3, [sp, #0]
    e428:	2332      	movs	r3, #50	; 0x32
    e42a:	4a1e      	ldr	r2, [pc, #120]	; (e4a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e42c:	491e      	ldr	r1, [pc, #120]	; (e4a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e42e:	4638      	mov	r0, r7
    e430:	47a0      	blx	r4
    e432:	2001      	movs	r0, #1
    e434:	e7f2      	b.n	e41c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output != nullptr);
    e436:	697c      	ldr	r4, [r7, #20]
    e438:	4b1d      	ldr	r3, [pc, #116]	; (e4b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    e43a:	9300      	str	r3, [sp, #0]
    e43c:	2336      	movs	r3, #54	; 0x36
    e43e:	4a19      	ldr	r2, [pc, #100]	; (e4a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e440:	4919      	ldr	r1, [pc, #100]	; (e4a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e442:	4638      	mov	r0, r7
    e444:	47a0      	blx	r4
    e446:	2001      	movs	r0, #1
    e448:	e7e8      	b.n	e41c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    e44a:	697e      	ldr	r6, [r7, #20]
    e44c:	f7fa fe1e 	bl	908c <TfLiteTypeGetName>
    e450:	4605      	mov	r5, r0
    e452:	7820      	ldrb	r0, [r4, #0]
    e454:	f7fa fe1a 	bl	908c <TfLiteTypeGetName>
    e458:	9003      	str	r0, [sp, #12]
    e45a:	9502      	str	r5, [sp, #8]
    e45c:	4b15      	ldr	r3, [pc, #84]	; (e4b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
    e45e:	9301      	str	r3, [sp, #4]
    e460:	4b15      	ldr	r3, [pc, #84]	; (e4b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    e462:	9300      	str	r3, [sp, #0]
    e464:	2338      	movs	r3, #56	; 0x38
    e466:	4a0f      	ldr	r2, [pc, #60]	; (e4a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e468:	4914      	ldr	r1, [pc, #80]	; (e4bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    e46a:	4638      	mov	r0, r7
    e46c:	47b0      	blx	r6
    e46e:	2001      	movs	r0, #1
    e470:	e7d4      	b.n	e41c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    e472:	7831      	ldrb	r1, [r6, #0]
    e474:	9503      	str	r5, [sp, #12]
    e476:	9402      	str	r4, [sp, #8]
    e478:	f8cd 8004 	str.w	r8, [sp, #4]
    e47c:	f8cd a000 	str.w	sl, [sp]
    e480:	464b      	mov	r3, r9
    e482:	4602      	mov	r2, r0
    e484:	4638      	mov	r0, r7
    e486:	f008 fdf3 	bl	17070 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    e48a:	e7c7      	b.n	e41c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    e48c:	00034a10 	.word	0x00034a10
    e490:	00034a18 	.word	0x00034a18
    e494:	00034a0c 	.word	0x00034a0c
    e498:	00034a14 	.word	0x00034a14
    e49c:	00034984 	.word	0x00034984
    e4a0:	00034744 	.word	0x00034744
    e4a4:	00034910 	.word	0x00034910
    e4a8:	00033ca8 	.word	0x00033ca8
    e4ac:	00034758 	.word	0x00034758
    e4b0:	000343b0 	.word	0x000343b0
    e4b4:	00034620 	.word	0x00034620
    e4b8:	00034630 	.word	0x00034630
    e4bc:	00034968 	.word	0x00034968

0000e4c0 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    e4c0:	b470      	push	{r4, r5, r6}
    e4c2:	4606      	mov	r6, r0
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    e4c4:	4604      	mov	r4, r0
    e4c6:	4d05      	ldr	r5, [pc, #20]	; (e4dc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
    e4c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e4ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e4cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    e4d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    e4d4:	4630      	mov	r0, r6
    e4d6:	bc70      	pop	{r4, r5, r6}
    e4d8:	4770      	bx	lr
    e4da:	bf00      	nop
    e4dc:	000318b4 	.word	0x000318b4

0000e4e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e4:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e4e6:	f8d1 a014 	ldr.w	sl, [r1, #20]
    e4ea:	f1ba 0f00 	cmp.w	sl, #0
    e4ee:	d04c      	beq.n	e58a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    e4f0:	4604      	mov	r4, r0
    e4f2:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    e4f4:	4ba5      	ldr	r3, [pc, #660]	; (e78c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    e4f6:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e4f8:	2800      	cmp	r0, #0
    e4fa:	d048      	beq.n	e58e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node != nullptr);
    e4fc:	2e00      	cmp	r6, #0
    e4fe:	d048      	beq.n	e592 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e500:	6d42      	ldr	r2, [r0, #84]	; 0x54
    e502:	6833      	ldr	r3, [r6, #0]
    e504:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e508:	6859      	ldr	r1, [r3, #4]
    e50a:	4790      	blx	r2
    e50c:	4680      	mov	r8, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    e50e:	4ba0      	ldr	r3, [pc, #640]	; (e790 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    e510:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e512:	2c00      	cmp	r4, #0
    e514:	d03f      	beq.n	e596 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  TFLITE_DCHECK(node != nullptr);
    e516:	2e00      	cmp	r6, #0
    e518:	d03f      	beq.n	e59a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e51a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e51c:	6833      	ldr	r3, [r6, #0]
    e51e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e522:	6859      	ldr	r1, [r3, #4]
    e524:	4620      	mov	r0, r4
    e526:	4790      	blx	r2
    e528:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    e52a:	4b9a      	ldr	r3, [pc, #616]	; (e794 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    e52c:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e52e:	2c00      	cmp	r4, #0
    e530:	d035      	beq.n	e59e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node != nullptr);
    e532:	2e00      	cmp	r6, #0
    e534:	d035      	beq.n	e5a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e536:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e538:	6833      	ldr	r3, [r6, #0]
    e53a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e53e:	6859      	ldr	r1, [r3, #4]
    e540:	4620      	mov	r0, r4
    e542:	4790      	blx	r2
    e544:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    e546:	4b94      	ldr	r3, [pc, #592]	; (e798 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    e548:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e54a:	b364      	cbz	r4, e5a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node != nullptr);
    e54c:	b36e      	cbz	r6, e5aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e54e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e550:	6873      	ldr	r3, [r6, #4]
    e552:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e556:	6859      	ldr	r1, [r3, #4]
    e558:	4620      	mov	r0, r4
    e55a:	4790      	blx	r2
    e55c:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    e55e:	6931      	ldr	r1, [r6, #16]
    e560:	b329      	cbz	r1, e5ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  switch (input->type) {
    e562:	f898 0008 	ldrb.w	r0, [r8, #8]
    e566:	2801      	cmp	r0, #1
    e568:	d023      	beq.n	e5b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    e56a:	2809      	cmp	r0, #9
    e56c:	f000 8136 	beq.w	e7dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e570:	6965      	ldr	r5, [r4, #20]
    e572:	f7fa fd8b 	bl	908c <TfLiteTypeGetName>
    e576:	4602      	mov	r2, r0
    e578:	f898 3008 	ldrb.w	r3, [r8, #8]
    e57c:	4987      	ldr	r1, [pc, #540]	; (e79c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    e57e:	4620      	mov	r0, r4
    e580:	47a8      	blx	r5
      return kTfLiteError;
    e582:	2001      	movs	r0, #1
}
    e584:	b04f      	add	sp, #316	; 0x13c
    e586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e58a:	f00a f98e 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    e58e:	f00a f98c 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    e592:	f00a f98a 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    e596:	f00a f988 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    e59a:	f00a f986 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    e59e:	f00a f984 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    e5a2:	f00a f982 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    e5a6:	f00a f980 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    e5aa:	f00a f97e 	bl	188aa <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    e5ae:	f00a f97c 	bl	188aa <abort>
          FullyConnectedParamsFloat(params->activation),
    e5b2:	f89a 1000 	ldrb.w	r1, [sl]
    e5b6:	a812      	add	r0, sp, #72	; 0x48
    e5b8:	f008 fd91 	bl	170de <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    e5bc:	4641      	mov	r1, r8
    e5be:	a81c      	add	r0, sp, #112	; 0x70
    e5c0:	f008 fd98 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e5c4:	4640      	mov	r0, r8
    e5c6:	f007 fbd6 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e5ca:	9001      	str	r0, [sp, #4]
          tflite::micro::GetTensorShape(filter),
    e5cc:	4649      	mov	r1, r9
    e5ce:	a822      	add	r0, sp, #136	; 0x88
    e5d0:	f008 fd90 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e5d4:	4648      	mov	r0, r9
    e5d6:	f007 fbce 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e5da:	9002      	str	r0, [sp, #8]
          tflite::micro::GetTensorShape(bias),
    e5dc:	4639      	mov	r1, r7
    e5de:	a828      	add	r0, sp, #160	; 0xa0
    e5e0:	f008 fd88 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e5e4:	4638      	mov	r0, r7
    e5e6:	f007 fbc6 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e5ea:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    e5ec:	4629      	mov	r1, r5
    e5ee:	a82e      	add	r0, sp, #184	; 0xb8
    e5f0:	f008 fd80 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e5f4:	4628      	mov	r0, r5
    e5f6:	f007 fbc4 	bl	15d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    e5fa:	9003      	str	r0, [sp, #12]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  const float output_activation_min = params.float_activation_min;
    e5fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e5fe:	9304      	str	r3, [sp, #16]
  const float output_activation_max = params.float_activation_max;
    e600:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  inline int32_t DimensionsCount() const { return size_; }
    e604:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    e606:	9922      	ldr	r1, [sp, #136]	; 0x88
    e608:	461c      	mov	r4, r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e60a:	1e5a      	subs	r2, r3, #1
    e60c:	d405      	bmi.n	e61a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    e60e:	429a      	cmp	r2, r3
    e610:	da03      	bge.n	e61a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e612:	2b05      	cmp	r3, #5
    e614:	dd03      	ble.n	e61e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
    e616:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    e618:	e002      	b.n	e620 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e61a:	f00a f946 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e61e:	ad2f      	add	r5, sp, #188	; 0xbc
  for (int i = 0; i < dims_count; ++i) {
    e620:	2300      	movs	r3, #0
  int flat_size = 1;
    e622:	f04f 0801 	mov.w	r8, #1
    e626:	e004      	b.n	e632 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e628:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    e62c:	fb00 f808 	mul.w	r8, r0, r8
  for (int i = 0; i < dims_count; ++i) {
    e630:	3301      	adds	r3, #1
    e632:	429c      	cmp	r4, r3
    e634:	dd03      	ble.n	e63e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e636:	429a      	cmp	r2, r3
    e638:	d1f6      	bne.n	e628 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
    e63a:	2001      	movs	r0, #1
    e63c:	e7f6      	b.n	e62c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TFLITE_DCHECK_GE(i, 0);
    e63e:	1e8b      	subs	r3, r1, #2
    e640:	d433      	bmi.n	e6aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TFLITE_DCHECK_LT(i, size_);
    e642:	9822      	ldr	r0, [sp, #136]	; 0x88
    e644:	4283      	cmp	r3, r0
    e646:	da32      	bge.n	e6ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e648:	2805      	cmp	r0, #5
    e64a:	dd32      	ble.n	e6b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    e64c:	9823      	ldr	r0, [sp, #140]	; 0x8c
    e64e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e652:	2a00      	cmp	r2, #0
    e654:	db33      	blt.n	e6be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    e656:	982e      	ldr	r0, [sp, #184]	; 0xb8
    e658:	4282      	cmp	r2, r0
    e65a:	da32      	bge.n	e6c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e65c:	2805      	cmp	r0, #5
    e65e:	dd32      	ble.n	e6c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    e660:	982f      	ldr	r0, [sp, #188]	; 0xbc
    e662:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e666:	4298      	cmp	r0, r3
    e668:	d133      	bne.n	e6d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e66a:	934d      	str	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_GE(i, 0);
    e66c:	2a00      	cmp	r2, #0
    e66e:	db32      	blt.n	e6d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
    e670:	982e      	ldr	r0, [sp, #184]	; 0xb8
    e672:	4282      	cmp	r2, r0
    e674:	da31      	bge.n	e6da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e676:	2805      	cmp	r0, #5
    e678:	dd31      	ble.n	e6de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    e67a:	982f      	ldr	r0, [sp, #188]	; 0xbc
    e67c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e680:	924c      	str	r2, [sp, #304]	; 0x130
      if (__b < __a)
    e682:	4293      	cmp	r3, r2
    e684:	dc31      	bgt.n	e6ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
      return __a;
    e686:	ab4d      	add	r3, sp, #308	; 0x134
    e688:	f8d3 b000 	ldr.w	fp, [r3]
    TFLITE_DCHECK_GE(i, 0);
    e68c:	3901      	subs	r1, #1
    e68e:	d42e      	bmi.n	e6ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    TFLITE_DCHECK_LT(i, size_);
    e690:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e692:	4299      	cmp	r1, r3
    e694:	da2d      	bge.n	e6f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e696:	2b05      	cmp	r3, #5
    e698:	dd2d      	ble.n	e6f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    e69a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e69c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    e6a0:	2700      	movs	r7, #0
    e6a2:	f8cd 8014 	str.w	r8, [sp, #20]
    e6a6:	46b0      	mov	r8, r6
    e6a8:	e06a      	b.n	e780 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    TFLITE_DCHECK_GE(i, 0);
    e6aa:	f00a f8fe 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    e6ae:	f00a f8fc 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e6b2:	a84e      	add	r0, sp, #312	; 0x138
    e6b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    e6b8:	f853 3cac 	ldr.w	r3, [r3, #-172]
    e6bc:	e7c9      	b.n	e652 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_GE(i, 0);
    e6be:	f00a f8f4 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    e6c2:	f00a f8f2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e6c6:	a84e      	add	r0, sp, #312	; 0x138
    e6c8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    e6cc:	f850 0c7c 	ldr.w	r0, [r0, #-124]
    e6d0:	e7c9      	b.n	e666 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x186>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e6d2:	f00a f8ea 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    e6d6:	f00a f8e8 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    e6da:	f00a f8e6 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e6de:	a84e      	add	r0, sp, #312	; 0x138
    e6e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    e6e4:	f852 2c7c 	ldr.w	r2, [r2, #-124]
    e6e8:	e7ca      	b.n	e680 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
	return __b;
    e6ea:	ab4c      	add	r3, sp, #304	; 0x130
    e6ec:	e7cc      	b.n	e688 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    TFLITE_DCHECK_GE(i, 0);
    e6ee:	f00a f8dc 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    e6f2:	f00a f8da 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e6f6:	ab4e      	add	r3, sp, #312	; 0x138
    e6f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e6fc:	f851 9cac 	ldr.w	r9, [r1, #-172]
    e700:	e7ce      	b.n	e6a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    e702:	fb09 6307 	mla	r3, r9, r7, r6
                 weights_data[out_c * accum_depth + d];
    e706:	fb09 6204 	mla	r2, r9, r4, r6
        total += input_data[b * accum_depth + d] *
    e70a:	9902      	ldr	r1, [sp, #8]
    e70c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    e710:	9a01      	ldr	r2, [sp, #4]
    e712:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    e716:	f7f2 fb1f 	bl	d58 <__aeabi_fmul>
    e71a:	4601      	mov	r1, r0
    e71c:	4628      	mov	r0, r5
    e71e:	f7f2 fa13 	bl	b48 <__addsf3>
    e722:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    e724:	3601      	adds	r6, #1
    e726:	454e      	cmp	r6, r9
    e728:	dbeb      	blt.n	e702 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
      }
      float bias_value = 0.0f;
      if (bias_data) {
    e72a:	f1b8 0f00 	cmp.w	r8, #0
    e72e:	d020      	beq.n	e772 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
        bias_value = bias_data[out_c];
    e730:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    e734:	4628      	mov	r0, r5
    e736:	f7f2 fa07 	bl	b48 <__addsf3>
    e73a:	4601      	mov	r1, r0
    e73c:	fb0b 4607 	mla	r6, fp, r7, r4
    e740:	9011      	str	r0, [sp, #68]	; 0x44
    e742:	9b04      	ldr	r3, [sp, #16]
    e744:	9310      	str	r3, [sp, #64]	; 0x40
    e746:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      if (__a < __b)
    e74a:	4618      	mov	r0, r3
    e74c:	f7f2 fcc0 	bl	10d0 <__aeabi_fcmpgt>
    e750:	b988      	cbnz	r0, e776 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
      return __a;
    e752:	ad11      	add	r5, sp, #68	; 0x44
      if (__b < __a)
    e754:	6829      	ldr	r1, [r5, #0]
    e756:	4650      	mov	r0, sl
    e758:	f7f2 fc9c 	bl	1094 <__aeabi_fcmplt>
    e75c:	b968      	cbnz	r0, e77a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29a>
  return min(max(x, output_activation_min), output_activation_max);
    e75e:	682b      	ldr	r3, [r5, #0]
    e760:	9a03      	ldr	r2, [sp, #12]
    e762:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    e766:	3401      	adds	r4, #1
    e768:	455c      	cmp	r4, fp
    e76a:	da08      	bge.n	e77e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      for (int d = 0; d < accum_depth; ++d) {
    e76c:	2600      	movs	r6, #0
      float total = 0.f;
    e76e:	2500      	movs	r5, #0
    e770:	e7d9      	b.n	e726 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
      float bias_value = 0.0f;
    e772:	2100      	movs	r1, #0
    e774:	e7de      	b.n	e734 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
	return __b;
    e776:	ad10      	add	r5, sp, #64	; 0x40
    e778:	e7ec      	b.n	e754 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
	return __b;
    e77a:	ad0f      	add	r5, sp, #60	; 0x3c
    e77c:	e7ef      	b.n	e75e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    e77e:	3701      	adds	r7, #1
    e780:	9b05      	ldr	r3, [sp, #20]
    e782:	429f      	cmp	r7, r3
    e784:	da0c      	bge.n	e7a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    e786:	2400      	movs	r4, #0
    e788:	e7ee      	b.n	e768 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>
    e78a:	bf00      	nop
    e78c:	00034a10 	.word	0x00034a10
    e790:	00034a18 	.word	0x00034a18
    e794:	00034a0c 	.word	0x00034a0c
    e798:	00034a14 	.word	0x00034a14
    e79c:	00034498 	.word	0x00034498
    if (size_ > kMaxSmallSize) {
    e7a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    e7a2:	2b05      	cmp	r3, #5
    e7a4:	dd03      	ble.n	e7ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      delete[] dims_pointer_;
    e7a6:	982f      	ldr	r0, [sp, #188]	; 0xbc
    e7a8:	b108      	cbz	r0, e7ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    e7aa:	f00a f869 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e7ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e7b0:	2b05      	cmp	r3, #5
    e7b2:	dd03      	ble.n	e7bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
      delete[] dims_pointer_;
    e7b4:	9829      	ldr	r0, [sp, #164]	; 0xa4
    e7b6:	b108      	cbz	r0, e7bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    e7b8:	f00a f862 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e7bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e7be:	2b05      	cmp	r3, #5
    e7c0:	dd03      	ble.n	e7ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
      delete[] dims_pointer_;
    e7c2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    e7c4:	b108      	cbz	r0, e7ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    e7c6:	f00a f85b 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e7ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e7cc:	2b05      	cmp	r3, #5
    e7ce:	dd03      	ble.n	e7d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
      delete[] dims_pointer_;
    e7d0:	981d      	ldr	r0, [sp, #116]	; 0x74
    e7d2:	b108      	cbz	r0, e7d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    e7d4:	f00a f854 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    e7d8:	2000      	movs	r0, #0
      break;
    e7da:	e6d3      	b.n	e584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
          FullyConnectedParamsQuantized(data),
    e7dc:	a812      	add	r0, sp, #72	; 0x48
    e7de:	f008 fc36 	bl	1704e <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    e7e2:	4641      	mov	r1, r8
    e7e4:	a834      	add	r0, sp, #208	; 0xd0
    e7e6:	f008 fc85 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    e7ea:	4640      	mov	r0, r8
    e7ec:	f007 facd 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e7f0:	9005      	str	r0, [sp, #20]
          tflite::micro::GetTensorShape(filter),
    e7f2:	4649      	mov	r1, r9
    e7f4:	a83a      	add	r0, sp, #232	; 0xe8
    e7f6:	f008 fc7d 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    e7fa:	4648      	mov	r0, r9
    e7fc:	f007 fac5 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e800:	9006      	str	r0, [sp, #24]
          tflite::micro::GetTensorShape(bias),
    e802:	4639      	mov	r1, r7
    e804:	a840      	add	r0, sp, #256	; 0x100
    e806:	f008 fc75 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    e80a:	4638      	mov	r0, r7
    e80c:	f007 fec6 	bl	1659c <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    e810:	9007      	str	r0, [sp, #28]
          tflite::micro::GetTensorShape(output),
    e812:	4629      	mov	r1, r5
    e814:	a846      	add	r0, sp, #280	; 0x118
    e816:	f008 fc6d 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    e81a:	4628      	mov	r0, r5
    e81c:	f007 fabb 	bl	15d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    e820:	9008      	str	r0, [sp, #32]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    e822:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e824:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t filter_offset = params.weights_offset;
    e826:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e828:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_offset = params.output_offset;
    e82a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e82c:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32_t output_multiplier = params.output_multiplier;
    e82e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
  const int output_shift = params.output_shift;
    e832:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    e836:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e838:	910f      	str	r1, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
    e83a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e83c:	9210      	str	r2, [sp, #64]	; 0x40
  inline int32_t DimensionsCount() const { return size_; }
    e83e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    e840:	2b01      	cmp	r3, #1
    e842:	dd33      	ble.n	e8ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    e844:	9846      	ldr	r0, [sp, #280]	; 0x118
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    e846:	2802      	cmp	r0, #2
    e848:	d132      	bne.n	e8b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    e84a:	4291      	cmp	r1, r2
    e84c:	dc32      	bgt.n	e8b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    TFLITE_DCHECK_LT(i, size_);
    e84e:	9a46      	ldr	r2, [sp, #280]	; 0x118
    e850:	2a00      	cmp	r2, #0
    e852:	dd31      	ble.n	e8b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e854:	2a05      	cmp	r2, #5
    e856:	dd31      	ble.n	e8bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    e858:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    e85a:	6812      	ldr	r2, [r2, #0]
    e85c:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    e85e:	9a46      	ldr	r2, [sp, #280]	; 0x118
    e860:	2a01      	cmp	r2, #1
    e862:	dd2e      	ble.n	e8c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e864:	2a05      	cmp	r2, #5
    e866:	dd2e      	ble.n	e8c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    e868:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    e86a:	6852      	ldr	r2, [r2, #4]
    e86c:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_GE(i, 0);
    e86e:	1e9a      	subs	r2, r3, #2
    e870:	d42c      	bmi.n	e8cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    TFLITE_DCHECK_LT(i, size_);
    e872:	993a      	ldr	r1, [sp, #232]	; 0xe8
    e874:	428a      	cmp	r2, r1
    e876:	da2b      	bge.n	e8d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e878:	2905      	cmp	r1, #5
    e87a:	dd2b      	ble.n	e8d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    e87c:	993b      	ldr	r1, [sp, #236]	; 0xec
    e87e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    e882:	9901      	ldr	r1, [sp, #4]
    e884:	428a      	cmp	r2, r1
    e886:	db2b      	blt.n	e8e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x400>
    TFLITE_DCHECK_GE(i, 0);
    e888:	3b01      	subs	r3, #1
    e88a:	d42b      	bmi.n	e8e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
    TFLITE_DCHECK_LT(i, size_);
    e88c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    e88e:	4293      	cmp	r3, r2
    e890:	da2a      	bge.n	e8e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x408>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e892:	2a05      	cmp	r2, #5
    e894:	dd2a      	ble.n	e8ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
    e896:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    e898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e89c:	930d      	str	r3, [sp, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    e89e:	f04f 0a00 	mov.w	sl, #0
    e8a2:	4653      	mov	r3, sl
    e8a4:	46ca      	mov	sl, r9
    e8a6:	46d9      	mov	r9, fp
    e8a8:	469b      	mov	fp, r3
    e8aa:	e0ee      	b.n	ea8a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    e8ac:	f009 fffd 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    e8b0:	f009 fffb 	bl	188aa <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    e8b4:	f009 fff9 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    e8b8:	f009 fff7 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e8bc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    e8be:	920c      	str	r2, [sp, #48]	; 0x30
    e8c0:	e7cd      	b.n	e85e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    e8c2:	f009 fff2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e8c6:	9a48      	ldr	r2, [sp, #288]	; 0x120
    e8c8:	9201      	str	r2, [sp, #4]
    e8ca:	e7d0      	b.n	e86e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
    TFLITE_DCHECK_GE(i, 0);
    e8cc:	f009 ffed 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    e8d0:	f009 ffeb 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e8d4:	a94e      	add	r1, sp, #312	; 0x138
    e8d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    e8da:	f852 2c4c 	ldr.w	r2, [r2, #-76]
    e8de:	e7d0      	b.n	e882 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    e8e0:	f009 ffe3 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    e8e4:	f009 ffe1 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    e8e8:	f009 ffdf 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e8ec:	aa4e      	add	r2, sp, #312	; 0x138
    e8ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e8f2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    e8f6:	930d      	str	r3, [sp, #52]	; 0x34
    e8f8:	e7d1      	b.n	e89e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
      }
      if (bias_data) {
    e8fa:	9b07      	ldr	r3, [sp, #28]
    e8fc:	b123      	cbz	r3, e908 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x428>
        acc += bias_data[out_c];
    e8fe:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    e902:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e904:	4413      	add	r3, r2
    e906:	9311      	str	r3, [sp, #68]	; 0x44
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
    e908:	9a11      	ldr	r2, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    e90a:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    e90e:	f1b9 0f00 	cmp.w	r9, #0
    e912:	f340 808f 	ble.w	ea34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x554>
    e916:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    e918:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e91a:	4592      	cmp	sl, r2
    e91c:	f000 808d 	beq.w	ea3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55a>
    e920:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    e922:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    e924:	4653      	mov	r3, sl
    e926:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    e928:	fb02 f304 	mul.w	r3, r2, r4
    e92c:	fb0a 3101 	mla	r1, sl, r1, r3
    e930:	fba2 230a 	umull	r2, r3, r2, sl
    e934:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e936:	2a00      	cmp	r2, #0
    e938:	f173 0100 	sbcs.w	r1, r3, #0
    e93c:	f2c0 8084 	blt.w	ea48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
    e940:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e944:	1852      	adds	r2, r2, r1
    e946:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    e94a:	4611      	mov	r1, r2
    e94c:	461c      	mov	r4, r3
    e94e:	2a00      	cmp	r2, #0
    e950:	f173 0000 	sbcs.w	r0, r3, #0
    e954:	db7a      	blt.n	ea4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56c>
    e956:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    e958:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e95c:	2f00      	cmp	r7, #0
    e95e:	d17d      	bne.n	ea5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57c>
  assert(exponent >= 0);
    e960:	2e00      	cmp	r6, #0
    e962:	db7e      	blt.n	ea62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x582>
  assert(exponent <= 31);
    e964:	2e1f      	cmp	r6, #31
    e966:	f300 8083 	bgt.w	ea70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x590>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    e96a:	2701      	movs	r7, #1
    e96c:	fa07 f006 	lsl.w	r0, r7, r6
    e970:	3801      	subs	r0, #1
    e972:	f007 fa14 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e976:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    e978:	2000      	movs	r0, #0
    e97a:	f007 fa10 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e97e:	9002      	str	r0, [sp, #8]
  const IntegerType one = Dup<IntegerType>(1);
    e980:	4638      	mov	r0, r7
    e982:	f007 fa0c 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e986:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    e988:	4641      	mov	r1, r8
    e98a:	4620      	mov	r0, r4
    e98c:	f007 fa08 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e990:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    e992:	4639      	mov	r1, r7
    e994:	4640      	mov	r0, r8
    e996:	f007 fa05 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e99a:	4680      	mov	r8, r0
    e99c:	9902      	ldr	r1, [sp, #8]
    e99e:	4620      	mov	r0, r4
    e9a0:	f007 fa0c 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    e9a4:	9f03      	ldr	r7, [sp, #12]
    e9a6:	4639      	mov	r1, r7
    e9a8:	f007 f9fa 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e9ac:	4601      	mov	r1, r0
    e9ae:	4640      	mov	r0, r8
    e9b0:	f007 f9fa 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    e9b4:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    e9b6:	4631      	mov	r1, r6
    e9b8:	4620      	mov	r0, r4
    e9ba:	f007 f9f3 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e9be:	4604      	mov	r4, r0
    e9c0:	4641      	mov	r1, r8
    e9c2:	9804      	ldr	r0, [sp, #16]
    e9c4:	f007 fa02 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    e9c8:	4639      	mov	r1, r7
    e9ca:	f007 f9e9 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e9ce:	4601      	mov	r1, r0
    e9d0:	4620      	mov	r0, r4
    e9d2:	f007 f9e9 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
      acc += output_offset;
    e9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9d8:	4418      	add	r0, r3
    e9da:	9011      	str	r0, [sp, #68]	; 0x44
      if (__a < __b)
    e9dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e9de:	4298      	cmp	r0, r3
    e9e0:	db4d      	blt.n	ea7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59e>
      return __a;
    e9e2:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::max(acc, output_activation_min);
    e9e4:	681b      	ldr	r3, [r3, #0]
    e9e6:	9311      	str	r3, [sp, #68]	; 0x44
      if (__b < __a)
    e9e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e9ea:	4293      	cmp	r3, r2
    e9ec:	dc49      	bgt.n	ea82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
      return __a;
    e9ee:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::min(acc, output_activation_max);
    e9f0:	681a      	ldr	r2, [r3, #0]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    e9f2:	9b01      	ldr	r3, [sp, #4]
    e9f4:	fb03 530b 	mla	r3, r3, fp, r5
    e9f8:	9908      	ldr	r1, [sp, #32]
    e9fa:	54ca      	strb	r2, [r1, r3]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    e9fc:	3501      	adds	r5, #1
    e9fe:	9b01      	ldr	r3, [sp, #4]
    ea00:	429d      	cmp	r5, r3
    ea02:	da40      	bge.n	ea86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
      int32_t acc = 0;
    ea04:	2300      	movs	r3, #0
    ea06:	9311      	str	r3, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    ea08:	980d      	ldr	r0, [sp, #52]	; 0x34
    ea0a:	4283      	cmp	r3, r0
    ea0c:	f6bf af75 	bge.w	e8fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41a>
        int32_t input_val = input_data[b * accum_depth + d];
    ea10:	fb00 320b 	mla	r2, r0, fp, r3
    ea14:	9905      	ldr	r1, [sp, #20]
    ea16:	5689      	ldrsb	r1, [r1, r2]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    ea18:	fb00 3205 	mla	r2, r0, r5, r3
    ea1c:	9c06      	ldr	r4, [sp, #24]
    ea1e:	56a2      	ldrsb	r2, [r4, r2]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    ea20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ea22:	4422      	add	r2, r4
    ea24:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ea26:	4421      	add	r1, r4
    ea28:	9c11      	ldr	r4, [sp, #68]	; 0x44
    ea2a:	fb01 4202 	mla	r2, r1, r2, r4
    ea2e:	9211      	str	r2, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    ea30:	3301      	adds	r3, #1
    ea32:	e7ea      	b.n	ea0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
  int right_shift = shift > 0 ? 0 : -shift;
    ea34:	f1c9 0600 	rsb	r6, r9, #0
    ea38:	e76e      	b.n	e918 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ea3a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ea3e:	d001      	beq.n	ea44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x564>
    ea40:	2700      	movs	r7, #0
    ea42:	e76e      	b.n	e922 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
    ea44:	2701      	movs	r7, #1
    ea46:	e76c      	b.n	e922 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ea48:	4921      	ldr	r1, [pc, #132]	; (ead0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>)
    ea4a:	e77b      	b.n	e944 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x464>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ea4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ea50:	1851      	adds	r1, r2, r1
    ea52:	f04f 0400 	mov.w	r4, #0
    ea56:	eb43 0404 	adc.w	r4, r3, r4
    ea5a:	e77c      	b.n	e956 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ea5c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ea60:	e77e      	b.n	e960 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
  assert(exponent >= 0);
    ea62:	4b1c      	ldr	r3, [pc, #112]	; (ead4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f4>)
    ea64:	4a1c      	ldr	r2, [pc, #112]	; (ead8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    ea66:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ea6a:	481c      	ldr	r0, [pc, #112]	; (eadc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    ea6c:	f003 ff0e 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    ea70:	4b1b      	ldr	r3, [pc, #108]	; (eae0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    ea72:	4a19      	ldr	r2, [pc, #100]	; (ead8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    ea74:	f240 1167 	movw	r1, #359	; 0x167
    ea78:	4818      	ldr	r0, [pc, #96]	; (eadc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    ea7a:	f003 ff07 	bl	1288c <__assert_func>
	return __b;
    ea7e:	ab0f      	add	r3, sp, #60	; 0x3c
    ea80:	e7b0      	b.n	e9e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x504>
	return __b;
    ea82:	ab10      	add	r3, sp, #64	; 0x40
    ea84:	e7b4      	b.n	e9f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x510>
  for (int b = 0; b < batches; ++b) {
    ea86:	f10b 0b01 	add.w	fp, fp, #1
    ea8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea8c:	459b      	cmp	fp, r3
    ea8e:	da01      	bge.n	ea94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ea90:	2500      	movs	r5, #0
    ea92:	e7b4      	b.n	e9fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (size_ > kMaxSmallSize) {
    ea94:	9b46      	ldr	r3, [sp, #280]	; 0x118
    ea96:	2b05      	cmp	r3, #5
    ea98:	dd03      	ble.n	eaa2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
      delete[] dims_pointer_;
    ea9a:	9847      	ldr	r0, [sp, #284]	; 0x11c
    ea9c:	b108      	cbz	r0, eaa2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    ea9e:	f009 feef 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eaa2:	9b40      	ldr	r3, [sp, #256]	; 0x100
    eaa4:	2b05      	cmp	r3, #5
    eaa6:	dd03      	ble.n	eab0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
      delete[] dims_pointer_;
    eaa8:	9841      	ldr	r0, [sp, #260]	; 0x104
    eaaa:	b108      	cbz	r0, eab0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    eaac:	f009 fee8 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eab0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    eab2:	2b05      	cmp	r3, #5
    eab4:	dd03      	ble.n	eabe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      delete[] dims_pointer_;
    eab6:	983b      	ldr	r0, [sp, #236]	; 0xec
    eab8:	b108      	cbz	r0, eabe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
    eaba:	f009 fee1 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eabe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    eac0:	2b05      	cmp	r3, #5
    eac2:	dd03      	ble.n	eacc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
      delete[] dims_pointer_;
    eac4:	9835      	ldr	r0, [sp, #212]	; 0xd4
    eac6:	b108      	cbz	r0, eacc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    eac8:	f009 feda 	bl	18880 <_ZdaPv>
  return kTfLiteOk;
    eacc:	2000      	movs	r0, #0
      break;
    eace:	e559      	b.n	e584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    ead0:	c0000001 	.word	0xc0000001
    ead4:	000343c4 	.word	0x000343c4
    ead8:	000343d4 	.word	0x000343d4
    eadc:	0003442c 	.word	0x0003442c
    eae0:	00034488 	.word	0x00034488

0000eae4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    eae4:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    eae6:	4288      	cmp	r0, r1
    eae8:	d01e      	beq.n	eb28 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    eaea:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    eaec:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    eaee:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    eaf0:	fb01 f407 	mul.w	r4, r1, r7
    eaf4:	fb00 4403 	mla	r4, r0, r3, r4
    eaf8:	fba1 2300 	umull	r2, r3, r1, r0
    eafc:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    eafe:	2a00      	cmp	r2, #0
    eb00:	f173 0100 	sbcs.w	r1, r3, #0
    eb04:	db17      	blt.n	eb36 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    eb06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    eb0a:	1852      	adds	r2, r2, r1
    eb0c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    eb10:	4611      	mov	r1, r2
    eb12:	4618      	mov	r0, r3
    eb14:	2a00      	cmp	r2, #0
    eb16:	f173 0400 	sbcs.w	r4, r3, #0
    eb1a:	db0e      	blt.n	eb3a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    eb1c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    eb1e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    eb22:	b995      	cbnz	r5, eb4a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    eb24:	bcf0      	pop	{r4, r5, r6, r7}
    eb26:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    eb28:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    eb2c:	d001      	beq.n	eb32 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    eb2e:	2500      	movs	r5, #0
    eb30:	e7dc      	b.n	eaec <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    eb32:	2501      	movs	r5, #1
    eb34:	e7da      	b.n	eaec <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    eb36:	4906      	ldr	r1, [pc, #24]	; (eb50 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    eb38:	e7e7      	b.n	eb0a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    eb3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    eb3e:	1851      	adds	r1, r2, r1
    eb40:	f04f 0000 	mov.w	r0, #0
    eb44:	eb43 0000 	adc.w	r0, r3, r0
    eb48:	e7e8      	b.n	eb1c <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    eb4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eb4e:	e7e9      	b.n	eb24 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    eb50:	c0000001 	.word	0xc0000001

0000eb54 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    eb54:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    eb56:	4288      	cmp	r0, r1
    eb58:	d01e      	beq.n	eb98 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    eb5a:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    eb5c:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    eb5e:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    eb60:	fb01 f407 	mul.w	r4, r1, r7
    eb64:	fb00 4403 	mla	r4, r0, r3, r4
    eb68:	fba1 2300 	umull	r2, r3, r1, r0
    eb6c:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    eb6e:	2a00      	cmp	r2, #0
    eb70:	f173 0100 	sbcs.w	r1, r3, #0
    eb74:	db17      	blt.n	eba6 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    eb76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    eb7a:	1852      	adds	r2, r2, r1
    eb7c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    eb80:	4611      	mov	r1, r2
    eb82:	4618      	mov	r0, r3
    eb84:	2a00      	cmp	r2, #0
    eb86:	f173 0400 	sbcs.w	r4, r3, #0
    eb8a:	db0e      	blt.n	ebaa <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    eb8c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    eb8e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    eb92:	b995      	cbnz	r5, ebba <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    eb94:	bcf0      	pop	{r4, r5, r6, r7}
    eb96:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    eb98:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    eb9c:	d001      	beq.n	eba2 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    eb9e:	2500      	movs	r5, #0
    eba0:	e7dc      	b.n	eb5c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    eba2:	2501      	movs	r5, #1
    eba4:	e7da      	b.n	eb5c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    eba6:	4906      	ldr	r1, [pc, #24]	; (ebc0 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    eba8:	e7e7      	b.n	eb7a <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ebaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ebae:	1851      	adds	r1, r2, r1
    ebb0:	f04f 0000 	mov.w	r0, #0
    ebb4:	eb43 0000 	adc.w	r0, r3, r0
    ebb8:	e7e8      	b.n	eb8c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ebba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ebbe:	e7e9      	b.n	eb94 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    ebc0:	c0000001 	.word	0xc0000001

0000ebc4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    ebc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebc8:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    ebca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ebce:	f007 f8e6 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ebd2:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    ebd4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ebd8:	f007 f8e1 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ebdc:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    ebde:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
    ebe2:	f007 f8dc 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ebe6:	4601      	mov	r1, r0
    ebe8:	4620      	mov	r0, r4
    ebea:	f007 f8ef 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ebee:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    ebf0:	480b      	ldr	r0, [pc, #44]	; (ec20 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_+0x5c>)
    ebf2:	f007 f8d4 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ebf6:	4601      	mov	r1, r0
    ebf8:	4620      	mov	r0, r4
    ebfa:	f007 f8df 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ebfe:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    ec00:	2102      	movs	r1, #2
    ec02:	4620      	mov	r0, r4
    ec04:	f008 fadf 	bl	171c6 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    ec08:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    ec0a:	4641      	mov	r1, r8
    ec0c:	4638      	mov	r0, r7
    ec0e:	f008 fafb 	bl	17208 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    ec12:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    ec14:	4631      	mov	r1, r6
    ec16:	4628      	mov	r0, r5
    ec18:	f008 faf6 	bl	17208 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    ec1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec20:	e0000001 	.word	0xe0000001

0000ec24 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    ec24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec28:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    ec2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ec2e:	f007 f8b6 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec32:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    ec34:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ec38:	f007 f8b1 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec3c:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    ec3e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    ec42:	f007 f8ac 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec46:	4601      	mov	r1, r0
    ec48:	4620      	mov	r0, r4
    ec4a:	f007 f8bf 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ec4e:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    ec50:	480b      	ldr	r0, [pc, #44]	; (ec80 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_+0x5c>)
    ec52:	f007 f8a4 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec56:	4601      	mov	r1, r0
    ec58:	4620      	mov	r0, r4
    ec5a:	f007 f8af 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ec5e:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    ec60:	2101      	movs	r1, #1
    ec62:	4620      	mov	r0, r4
    ec64:	f008 faaf 	bl	171c6 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    ec68:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    ec6a:	4641      	mov	r1, r8
    ec6c:	4638      	mov	r0, r7
    ec6e:	f008 facb 	bl	17208 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    ec72:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    ec74:	4631      	mov	r1, r6
    ec76:	4628      	mov	r0, r5
    ec78:	f008 fac6 	bl	17208 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    ec7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec80:	c0000001 	.word	0xc0000001

0000ec84 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    ec84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec88:	4604      	mov	r4, r0
    retval.raw() = Dup<RawType>(x);
    ec8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ec8e:	f007 f886 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec92:	4601      	mov	r1, r0
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
    ec94:	4620      	mov	r0, r4
    ec96:	f008 fac8 	bl	1722a <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ec9a:	4607      	mov	r7, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ec9c:	2000      	movs	r0, #0
    ec9e:	f007 f87e 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eca2:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    eca4:	2000      	movs	r0, #0
    eca6:	f007 f87a 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ecaa:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
    ecac:	2001      	movs	r0, #1
    ecae:	f007 f876 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ecb2:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    ecb4:	4629      	mov	r1, r5
    ecb6:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    ecba:	f007 f871 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ecbe:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ecc0:	2101      	movs	r1, #1
    ecc2:	4628      	mov	r0, r5
    ecc4:	f007 f86e 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ecc8:	4605      	mov	r5, r0
    ecca:	4641      	mov	r1, r8
    eccc:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    ecd0:	f007 f874 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ecd4:	4621      	mov	r1, r4
    ecd6:	f007 f863 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ecda:	4601      	mov	r1, r0
    ecdc:	4628      	mov	r0, r5
    ecde:	f007 f863 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ece2:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    ece4:	2100      	movs	r1, #0
    ece6:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    ecea:	f007 f85b 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ecee:	4605      	mov	r5, r0
    ecf0:	4641      	mov	r1, r8
    ecf2:	4630      	mov	r0, r6
    ecf4:	f007 f86a 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ecf8:	4621      	mov	r1, r4
    ecfa:	f007 f851 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ecfe:	4601      	mov	r1, r0
    ed00:	4628      	mov	r0, r5
    ed02:	f007 f851 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    ed06:	f007 f84a 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ed0a:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ed0c:	2000      	movs	r0, #0
    ed0e:	f007 f846 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ed12:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ed14:	2000      	movs	r0, #0
    ed16:	f007 f842 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ed1a:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    ed1c:	2001      	movs	r0, #1
    ed1e:	f007 f83e 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ed22:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    ed24:	f8df a0a8 	ldr.w	sl, [pc, #168]	; edd0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x14c>
    ed28:	4629      	mov	r1, r5
    ed2a:	4650      	mov	r0, sl
    ed2c:	f007 f838 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ed30:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ed32:	2101      	movs	r1, #1
    ed34:	4628      	mov	r0, r5
    ed36:	f007 f835 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ed3a:	4605      	mov	r5, r0
    ed3c:	4649      	mov	r1, r9
    ed3e:	4650      	mov	r0, sl
    ed40:	f007 f83c 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ed44:	4621      	mov	r1, r4
    ed46:	f007 f82b 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ed4a:	4601      	mov	r1, r0
    ed4c:	4628      	mov	r0, r5
    ed4e:	f007 f82b 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ed52:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    ed54:	2100      	movs	r1, #0
    ed56:	4650      	mov	r0, sl
    ed58:	f007 f824 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ed5c:	4605      	mov	r5, r0
    ed5e:	4649      	mov	r1, r9
    ed60:	4640      	mov	r0, r8
    ed62:	f007 f833 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ed66:	4621      	mov	r1, r4
    ed68:	f007 f81a 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ed6c:	4601      	mov	r1, r0
    ed6e:	4628      	mov	r0, r5
    ed70:	f007 f81a 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    ed74:	f007 f813 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ed78:	4601      	mov	r1, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    ed7a:	4638      	mov	r0, r7
    ed7c:	f7ff feb2 	bl	eae4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ed80:	4601      	mov	r1, r0
    ed82:	4630      	mov	r0, r6
    ed84:	f008 fa6c 	bl	17260 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ed88:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    ed8a:	2600      	movs	r6, #0
    ed8c:	e017      	b.n	edbe <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x13a>
    F2 half_denominator_times_x = half_denominator * x;
    ed8e:	4621      	mov	r1, r4
    ed90:	4638      	mov	r0, r7
    ed92:	f7ff fea7 	bl	eae4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ed96:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    ed98:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    ed9c:	f006 ffff 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    eda0:	4629      	mov	r1, r5
    eda2:	f008 fa62 	bl	1726a <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    eda6:	4601      	mov	r1, r0
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
    eda8:	4620      	mov	r0, r4
    edaa:	f7ff fed3 	bl	eb54 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    edae:	f008 fa67 	bl	17280 <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    edb2:	4601      	mov	r1, r0
    edb4:	4620      	mov	r0, r4
    edb6:	f008 fa53 	bl	17260 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    edba:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    edbc:	3601      	adds	r6, #1
    edbe:	2e02      	cmp	r6, #2
    edc0:	dde5      	ble.n	ed8e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
    edc2:	4620      	mov	r0, r4
    edc4:	f008 fa50 	bl	17268 <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
    edc8:	f008 fa5e 	bl	17288 <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
}
    edcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    edd0:	c3c3c3c4 	.word	0xc3c3c3c4

0000edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    edd4:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    edd6:	4288      	cmp	r0, r1
    edd8:	d01e      	beq.n	ee18 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    edda:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    eddc:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    edde:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    ede0:	fb01 f407 	mul.w	r4, r1, r7
    ede4:	fb00 4403 	mla	r4, r0, r3, r4
    ede8:	fba1 2300 	umull	r2, r3, r1, r0
    edec:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    edee:	2a00      	cmp	r2, #0
    edf0:	f173 0100 	sbcs.w	r1, r3, #0
    edf4:	db17      	blt.n	ee26 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    edf6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    edfa:	1852      	adds	r2, r2, r1
    edfc:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ee00:	4611      	mov	r1, r2
    ee02:	4618      	mov	r0, r3
    ee04:	2a00      	cmp	r2, #0
    ee06:	f173 0400 	sbcs.w	r4, r3, #0
    ee0a:	db0e      	blt.n	ee2a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    ee0c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ee0e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ee12:	b995      	cbnz	r5, ee3a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    ee14:	bcf0      	pop	{r4, r5, r6, r7}
    ee16:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ee18:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    ee1c:	d001      	beq.n	ee22 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    ee1e:	2500      	movs	r5, #0
    ee20:	e7dc      	b.n	eddc <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    ee22:	2501      	movs	r5, #1
    ee24:	e7da      	b.n	eddc <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ee26:	4906      	ldr	r1, [pc, #24]	; (ee40 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    ee28:	e7e7      	b.n	edfa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ee2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ee2e:	1851      	adds	r1, r2, r1
    ee30:	f04f 0000 	mov.w	r0, #0
    ee34:	eb43 0000 	adc.w	r0, r3, r0
    ee38:	e7e8      	b.n	ee0c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ee3a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ee3e:	e7e9      	b.n	ee14 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    ee40:	c0000001 	.word	0xc0000001

0000ee44 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    ee44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee48:	4680      	mov	r8, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ee4a:	2000      	movs	r0, #0
    ee4c:	f006 ffa7 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ee50:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ee52:	2000      	movs	r0, #0
    ee54:	f006 ffa3 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ee58:	4607      	mov	r7, r0
  const IntegerType one = Dup<IntegerType>(1);
    ee5a:	2001      	movs	r0, #1
    ee5c:	f006 ff9f 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ee60:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    ee62:	f8df 9124 	ldr.w	r9, [pc, #292]	; ef88 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x144>
    ee66:	4629      	mov	r1, r5
    ee68:	4648      	mov	r0, r9
    ee6a:	f006 ff99 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ee6e:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ee70:	2101      	movs	r1, #1
    ee72:	4628      	mov	r0, r5
    ee74:	f006 ff96 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ee78:	4605      	mov	r5, r0
    ee7a:	4639      	mov	r1, r7
    ee7c:	4648      	mov	r0, r9
    ee7e:	f006 ff9d 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ee82:	4621      	mov	r1, r4
    ee84:	f006 ff8c 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ee88:	4601      	mov	r1, r0
    ee8a:	4628      	mov	r0, r5
    ee8c:	f006 ff8c 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ee90:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    ee92:	2100      	movs	r1, #0
    ee94:	4648      	mov	r0, r9
    ee96:	f006 ff85 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ee9a:	4605      	mov	r5, r0
    ee9c:	4639      	mov	r1, r7
    ee9e:	4630      	mov	r0, r6
    eea0:	f006 ff94 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    eea4:	4621      	mov	r1, r4
    eea6:	f006 ff7b 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    eeaa:	4601      	mov	r1, r0
    eeac:	4628      	mov	r0, r5
    eeae:	f006 ff7b 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    eeb2:	f006 ff74 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eeb6:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    eeb8:	2000      	movs	r0, #0
    eeba:	f006 ff70 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eebe:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    eec0:	2000      	movs	r0, #0
    eec2:	f006 ff6c 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eec6:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    eec8:	2001      	movs	r0, #1
    eeca:	f006 ff68 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eece:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    eed0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; ef8c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x148>
    eed4:	4629      	mov	r1, r5
    eed6:	4650      	mov	r0, sl
    eed8:	f006 ff62 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    eedc:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    eede:	2101      	movs	r1, #1
    eee0:	4628      	mov	r0, r5
    eee2:	f006 ff5f 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    eee6:	4605      	mov	r5, r0
    eee8:	4649      	mov	r1, r9
    eeea:	4650      	mov	r0, sl
    eeec:	f006 ff66 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    eef0:	4621      	mov	r1, r4
    eef2:	f006 ff55 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    eef6:	4601      	mov	r1, r0
    eef8:	4628      	mov	r0, r5
    eefa:	f006 ff55 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    eefe:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    ef00:	2100      	movs	r1, #0
    ef02:	4650      	mov	r0, sl
    ef04:	f006 ff4e 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ef08:	4605      	mov	r5, r0
    ef0a:	4649      	mov	r1, r9
    ef0c:	4638      	mov	r0, r7
    ef0e:	f006 ff5d 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ef12:	4621      	mov	r1, r4
    ef14:	f006 ff44 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ef18:	4601      	mov	r1, r0
    ef1a:	4628      	mov	r0, r5
    ef1c:	f006 ff44 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    ef20:	f006 ff3d 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef24:	4607      	mov	r7, r0
    ef26:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ef2a:	f006 ff38 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef2e:	4601      	mov	r1, r0
  F x = a + F::template ConstantPOT<-3>();
    ef30:	4640      	mov	r0, r8
    ef32:	f008 f9b1 	bl	17298 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ef36:	4604      	mov	r4, r0
  F x2 = x * x;
    ef38:	4601      	mov	r1, r0
    ef3a:	f7ff ff4b 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ef3e:	4605      	mov	r5, r0
  F x3 = x2 * x;
    ef40:	4621      	mov	r1, r4
    ef42:	f7ff ff47 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ef46:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    ef48:	4629      	mov	r1, r5
    ef4a:	4628      	mov	r0, r5
    ef4c:	f7ff ff42 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
    ef50:	f008 f9e1 	bl	17316 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
      SaturatingRoundingMultiplyByPOT<-1>(
    ef54:	4641      	mov	r1, r8
    ef56:	f008 f99f 	bl	17298 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ef5a:	4639      	mov	r1, r7
    ef5c:	f7ff ff3a 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ef60:	4629      	mov	r1, r5
    ef62:	f008 f999 	bl	17298 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ef66:	f008 f99b 	bl	172a0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
    ef6a:	4601      	mov	r1, r0
  return AddSaturatingIf16Bit(
    ef6c:	4620      	mov	r0, r4
    ef6e:	f008 f993 	bl	17298 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ef72:	4601      	mov	r1, r0
    ef74:	4630      	mov	r0, r6
    ef76:	f7ff ff2d 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ef7a:	4601      	mov	r1, r0
    ef7c:	4630      	mov	r0, r6
    ef7e:	f008 f9d2 	bl	17326 <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
}
    ef82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ef86:	bf00      	nop
    ef88:	70f5a894 	.word	0x70f5a894
    ef8c:	2aaaaaab 	.word	0x2aaaaaab

0000ef90 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef94:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    ef96:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ef9a:	f006 ff00 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef9e:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    efa0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    efa4:	f006 fefb 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efa8:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    efaa:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
    efae:	f006 fef6 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efb2:	4601      	mov	r1, r0
    efb4:	4620      	mov	r0, r4
    efb6:	f006 ff09 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    efba:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    efbc:	480b      	ldr	r0, [pc, #44]	; (efec <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_+0x5c>)
    efbe:	f006 feee 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efc2:	4601      	mov	r1, r0
    efc4:	4620      	mov	r0, r4
    efc6:	f006 fef9 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    efca:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    efcc:	2105      	movs	r1, #5
    efce:	4620      	mov	r0, r4
    efd0:	f008 f8f9 	bl	171c6 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    efd4:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    efd6:	4641      	mov	r1, r8
    efd8:	4638      	mov	r0, r7
    efda:	f008 f915 	bl	17208 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    efde:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    efe0:	4631      	mov	r1, r6
    efe2:	4628      	mov	r0, r5
    efe4:	f008 f910 	bl	17208 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efec:	fc000001 	.word	0xfc000001

0000eff0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    eff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eff4:	4606      	mov	r6, r0
    retval.raw() = Dup<RawType>(x);
    eff6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    effa:	f006 fed0 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    effe:	4604      	mov	r4, r0
    f000:	2001      	movs	r0, #1
    f002:	f006 fecc 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f006:	4601      	mov	r1, r0
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
    f008:	4620      	mov	r0, r4
    f00a:	f008 f994 	bl	17336 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f00e:	4601      	mov	r1, r0
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
    f010:	4630      	mov	r0, r6
    f012:	f008 f994 	bl	1733e <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f016:	4621      	mov	r1, r4
    f018:	f008 f98d 	bl	17336 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f01c:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    f01e:	f008 f9d2 	bl	173c6 <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    f022:	f7ff ff0f 	bl	ee44 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    f026:	4604      	mov	r4, r0
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
    f028:	4631      	mov	r1, r6
    f02a:	4628      	mov	r0, r5
    f02c:	f008 f983 	bl	17336 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f030:	4605      	mov	r5, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f032:	2000      	movs	r0, #0
    f034:	f006 feb3 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f038:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f03a:	2000      	movs	r0, #0
    f03c:	f006 feaf 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f040:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f042:	2001      	movs	r0, #1
    f044:	f006 feab 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f048:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f04a:	f8df b428 	ldr.w	fp, [pc, #1064]	; f474 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x484>
    f04e:	4641      	mov	r1, r8
    f050:	4658      	mov	r0, fp
    f052:	f006 fea5 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f056:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f058:	2101      	movs	r1, #1
    f05a:	4640      	mov	r0, r8
    f05c:	f006 fea2 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f060:	4680      	mov	r8, r0
    f062:	4651      	mov	r1, sl
    f064:	4658      	mov	r0, fp
    f066:	f006 fea9 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f06a:	4639      	mov	r1, r7
    f06c:	f006 fe98 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f070:	4601      	mov	r1, r0
    f072:	4640      	mov	r0, r8
    f074:	f006 fe98 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f078:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f07a:	2100      	movs	r1, #0
    f07c:	4658      	mov	r0, fp
    f07e:	f006 fe91 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f082:	4680      	mov	r8, r0
    f084:	4651      	mov	r1, sl
    f086:	4648      	mov	r0, r9
    f088:	f006 fea0 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f08c:	4639      	mov	r1, r7
    f08e:	f006 fe87 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f092:	4601      	mov	r1, r0
    f094:	4640      	mov	r0, r8
    f096:	f006 fe87 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f09a:	f006 fe80 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f09e:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    f0a0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    f0a4:	f006 fe7b 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f0a8:	4601      	mov	r1, r0
    f0aa:	4628      	mov	r0, r5
    f0ac:	f006 fe78 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f0b0:	f006 fe7e 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f0b4:	4607      	mov	r7, r0
    f0b6:	4641      	mov	r1, r8
    f0b8:	4620      	mov	r0, r4
    f0ba:	f7ff fe8b 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f0be:	4601      	mov	r1, r0
    f0c0:	4622      	mov	r2, r4
    f0c2:	4638      	mov	r0, r7
    f0c4:	f008 f8e4 	bl	17290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f0c8:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f0ca:	2000      	movs	r0, #0
    f0cc:	f006 fe67 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f0d0:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f0d2:	2000      	movs	r0, #0
    f0d4:	f006 fe63 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f0d8:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f0da:	2001      	movs	r0, #1
    f0dc:	f006 fe5f 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f0e0:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f0e2:	f8df b394 	ldr.w	fp, [pc, #916]	; f478 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x488>
    f0e6:	4641      	mov	r1, r8
    f0e8:	4658      	mov	r0, fp
    f0ea:	f006 fe59 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f0ee:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f0f0:	2101      	movs	r1, #1
    f0f2:	4640      	mov	r0, r8
    f0f4:	f006 fe56 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f0f8:	4680      	mov	r8, r0
    f0fa:	4651      	mov	r1, sl
    f0fc:	4658      	mov	r0, fp
    f0fe:	f006 fe5d 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f102:	4639      	mov	r1, r7
    f104:	f006 fe4c 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f108:	4601      	mov	r1, r0
    f10a:	4640      	mov	r0, r8
    f10c:	f006 fe4c 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f110:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f112:	2100      	movs	r1, #0
    f114:	4658      	mov	r0, fp
    f116:	f006 fe45 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f11a:	4680      	mov	r8, r0
    f11c:	4651      	mov	r1, sl
    f11e:	4648      	mov	r0, r9
    f120:	f006 fe54 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f124:	4639      	mov	r1, r7
    f126:	f006 fe3b 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f12a:	4601      	mov	r1, r0
    f12c:	4640      	mov	r0, r8
    f12e:	f006 fe3b 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f132:	f006 fe34 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f136:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    f138:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    f13c:	f006 fe2f 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f140:	4601      	mov	r1, r0
    f142:	4628      	mov	r0, r5
    f144:	f006 fe2c 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f148:	f006 fe32 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f14c:	4607      	mov	r7, r0
    f14e:	4641      	mov	r1, r8
    f150:	4620      	mov	r0, r4
    f152:	f7ff fe3f 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f156:	4601      	mov	r1, r0
    f158:	4622      	mov	r2, r4
    f15a:	4638      	mov	r0, r7
    f15c:	f008 f898 	bl	17290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f160:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f162:	2000      	movs	r0, #0
    f164:	f006 fe1b 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f168:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f16a:	2000      	movs	r0, #0
    f16c:	f006 fe17 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f170:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f172:	2001      	movs	r0, #1
    f174:	f006 fe13 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f178:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f17a:	f8df b300 	ldr.w	fp, [pc, #768]	; f47c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x48c>
    f17e:	4641      	mov	r1, r8
    f180:	4658      	mov	r0, fp
    f182:	f006 fe0d 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f186:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f188:	2101      	movs	r1, #1
    f18a:	4640      	mov	r0, r8
    f18c:	f006 fe0a 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f190:	4680      	mov	r8, r0
    f192:	4651      	mov	r1, sl
    f194:	4658      	mov	r0, fp
    f196:	f006 fe11 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f19a:	4639      	mov	r1, r7
    f19c:	f006 fe00 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f1a0:	4601      	mov	r1, r0
    f1a2:	4640      	mov	r0, r8
    f1a4:	f006 fe00 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f1a8:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f1aa:	2100      	movs	r1, #0
    f1ac:	4658      	mov	r0, fp
    f1ae:	f006 fdf9 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f1b2:	4680      	mov	r8, r0
    f1b4:	4651      	mov	r1, sl
    f1b6:	4648      	mov	r0, r9
    f1b8:	f006 fe08 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f1bc:	4639      	mov	r1, r7
    f1be:	f006 fdef 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f1c2:	4601      	mov	r1, r0
    f1c4:	4640      	mov	r0, r8
    f1c6:	f006 fdef 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f1ca:	f006 fde8 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1ce:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    f1d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    f1d4:	f006 fde3 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1d8:	4601      	mov	r1, r0
    f1da:	4628      	mov	r0, r5
    f1dc:	f006 fde0 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f1e0:	f006 fde6 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f1e4:	4607      	mov	r7, r0
    f1e6:	4641      	mov	r1, r8
    f1e8:	4620      	mov	r0, r4
    f1ea:	f7ff fdf3 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f1ee:	4601      	mov	r1, r0
    f1f0:	4622      	mov	r2, r4
    f1f2:	4638      	mov	r0, r7
    f1f4:	f008 f84c 	bl	17290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f1f8:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f1fa:	2000      	movs	r0, #0
    f1fc:	f006 fdcf 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f200:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f202:	2000      	movs	r0, #0
    f204:	f006 fdcb 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f208:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f20a:	2001      	movs	r0, #1
    f20c:	f006 fdc7 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f210:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f212:	f8df b26c 	ldr.w	fp, [pc, #620]	; f480 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x490>
    f216:	4641      	mov	r1, r8
    f218:	4658      	mov	r0, fp
    f21a:	f006 fdc1 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f21e:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f220:	2101      	movs	r1, #1
    f222:	4640      	mov	r0, r8
    f224:	f006 fdbe 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f228:	4680      	mov	r8, r0
    f22a:	4651      	mov	r1, sl
    f22c:	4658      	mov	r0, fp
    f22e:	f006 fdc5 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f232:	4639      	mov	r1, r7
    f234:	f006 fdb4 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f238:	4601      	mov	r1, r0
    f23a:	4640      	mov	r0, r8
    f23c:	f006 fdb4 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f240:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f242:	2100      	movs	r1, #0
    f244:	4658      	mov	r0, fp
    f246:	f006 fdad 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f24a:	4680      	mov	r8, r0
    f24c:	4651      	mov	r1, sl
    f24e:	4648      	mov	r0, r9
    f250:	f006 fdbc 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f254:	4639      	mov	r1, r7
    f256:	f006 fda3 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f25a:	4601      	mov	r1, r0
    f25c:	4640      	mov	r0, r8
    f25e:	f006 fda3 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f262:	f006 fd9c 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f266:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    f268:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    f26c:	f006 fd97 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f270:	4601      	mov	r1, r0
    f272:	4628      	mov	r0, r5
    f274:	f006 fd94 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f278:	f006 fd9a 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f27c:	4607      	mov	r7, r0
    f27e:	4641      	mov	r1, r8
    f280:	4620      	mov	r0, r4
    f282:	f7ff fda7 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f286:	4601      	mov	r1, r0
    f288:	4622      	mov	r2, r4
    f28a:	4638      	mov	r0, r7
    f28c:	f008 f800 	bl	17290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f290:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f292:	2000      	movs	r0, #0
    f294:	f006 fd83 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f298:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f29a:	2000      	movs	r0, #0
    f29c:	f006 fd7f 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2a0:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f2a2:	2001      	movs	r0, #1
    f2a4:	f006 fd7b 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2a8:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f2aa:	f8df b1d8 	ldr.w	fp, [pc, #472]	; f484 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x494>
    f2ae:	4641      	mov	r1, r8
    f2b0:	4658      	mov	r0, fp
    f2b2:	f006 fd75 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f2b6:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f2b8:	2101      	movs	r1, #1
    f2ba:	4640      	mov	r0, r8
    f2bc:	f006 fd72 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f2c0:	4680      	mov	r8, r0
    f2c2:	4651      	mov	r1, sl
    f2c4:	4658      	mov	r0, fp
    f2c6:	f006 fd79 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f2ca:	4639      	mov	r1, r7
    f2cc:	f006 fd68 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f2d0:	4601      	mov	r1, r0
    f2d2:	4640      	mov	r0, r8
    f2d4:	f006 fd68 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f2d8:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f2da:	2100      	movs	r1, #0
    f2dc:	4658      	mov	r0, fp
    f2de:	f006 fd61 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f2e2:	4680      	mov	r8, r0
    f2e4:	4651      	mov	r1, sl
    f2e6:	4648      	mov	r0, r9
    f2e8:	f006 fd70 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f2ec:	4639      	mov	r1, r7
    f2ee:	f006 fd57 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f2f2:	4601      	mov	r1, r0
    f2f4:	4640      	mov	r0, r8
    f2f6:	f006 fd57 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f2fa:	f006 fd50 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2fe:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    f300:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f304:	f006 fd4b 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f308:	4601      	mov	r1, r0
    f30a:	4628      	mov	r0, r5
    f30c:	f006 fd48 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f310:	f006 fd4e 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f314:	4607      	mov	r7, r0
    f316:	4641      	mov	r1, r8
    f318:	4620      	mov	r0, r4
    f31a:	f7ff fd5b 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f31e:	4601      	mov	r1, r0
    f320:	4622      	mov	r2, r4
    f322:	4638      	mov	r0, r7
    f324:	f007 ffb4 	bl	17290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f328:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f32a:	2000      	movs	r0, #0
    f32c:	f006 fd37 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f330:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f332:	2000      	movs	r0, #0
    f334:	f006 fd33 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f338:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f33a:	2001      	movs	r0, #1
    f33c:	f006 fd2f 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f340:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f342:	f8df b144 	ldr.w	fp, [pc, #324]	; f488 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x498>
    f346:	4641      	mov	r1, r8
    f348:	4658      	mov	r0, fp
    f34a:	f006 fd29 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f34e:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f350:	2101      	movs	r1, #1
    f352:	4640      	mov	r0, r8
    f354:	f006 fd26 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f358:	4680      	mov	r8, r0
    f35a:	4651      	mov	r1, sl
    f35c:	4658      	mov	r0, fp
    f35e:	f006 fd2d 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f362:	4639      	mov	r1, r7
    f364:	f006 fd1c 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f368:	4601      	mov	r1, r0
    f36a:	4640      	mov	r0, r8
    f36c:	f006 fd1c 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f370:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f372:	2100      	movs	r1, #0
    f374:	4658      	mov	r0, fp
    f376:	f006 fd15 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f37a:	4680      	mov	r8, r0
    f37c:	4651      	mov	r1, sl
    f37e:	4648      	mov	r0, r9
    f380:	f006 fd24 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f384:	4639      	mov	r1, r7
    f386:	f006 fd0b 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f38a:	4601      	mov	r1, r0
    f38c:	4640      	mov	r0, r8
    f38e:	f006 fd0b 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f392:	f006 fd04 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f396:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    f398:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    f39c:	f006 fcff 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3a0:	4601      	mov	r1, r0
    f3a2:	4628      	mov	r0, r5
    f3a4:	f006 fcfc 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f3a8:	f006 fd02 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f3ac:	4607      	mov	r7, r0
    f3ae:	4641      	mov	r1, r8
    f3b0:	4620      	mov	r0, r4
    f3b2:	f7ff fd0f 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f3b6:	4601      	mov	r1, r0
    f3b8:	4622      	mov	r2, r4
    f3ba:	4638      	mov	r0, r7
    f3bc:	f007 ff68 	bl	17290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f3c0:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f3c2:	2000      	movs	r0, #0
    f3c4:	f006 fceb 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3c8:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f3ca:	2000      	movs	r0, #0
    f3cc:	f006 fce7 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3d0:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f3d2:	2001      	movs	r0, #1
    f3d4:	f006 fce3 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3d8:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f3da:	4641      	mov	r1, r8
    f3dc:	20f2      	movs	r0, #242	; 0xf2
    f3de:	f006 fcdf 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f3e2:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f3e4:	2101      	movs	r1, #1
    f3e6:	4640      	mov	r0, r8
    f3e8:	f006 fcdc 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f3ec:	4680      	mov	r8, r0
    f3ee:	4651      	mov	r1, sl
    f3f0:	20f2      	movs	r0, #242	; 0xf2
    f3f2:	f006 fce3 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f3f6:	4639      	mov	r1, r7
    f3f8:	f006 fcd2 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f3fc:	4601      	mov	r1, r0
    f3fe:	4640      	mov	r0, r8
    f400:	f006 fcd2 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f404:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f406:	2100      	movs	r1, #0
    f408:	20f2      	movs	r0, #242	; 0xf2
    f40a:	f006 fccb 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f40e:	4680      	mov	r8, r0
    f410:	4651      	mov	r1, sl
    f412:	4648      	mov	r0, r9
    f414:	f006 fcda 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f418:	4639      	mov	r1, r7
    f41a:	f006 fcc1 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f41e:	4601      	mov	r1, r0
    f420:	4640      	mov	r0, r8
    f422:	f006 fcc1 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f426:	f006 fcba 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f42a:	4607      	mov	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    f42c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f430:	f006 fcb5 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f434:	4601      	mov	r1, r0
    f436:	4628      	mov	r0, r5
    f438:	f006 fcb2 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f43c:	f006 fcb8 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f440:	4605      	mov	r5, r0
    f442:	4639      	mov	r1, r7
    f444:	4620      	mov	r0, r4
    f446:	f7ff fcc5 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f44a:	4601      	mov	r1, r0
    f44c:	4622      	mov	r2, r4
    f44e:	4628      	mov	r0, r5
    f450:	f007 ff1e 	bl	17290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f454:	4604      	mov	r4, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    f456:	4630      	mov	r0, r6
    f458:	f007 ffb1 	bl	173be <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>
    f45c:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    f45e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f462:	f006 fc9c 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f466:	4601      	mov	r1, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    f468:	4622      	mov	r2, r4
    f46a:	4628      	mov	r0, r5
    f46c:	f007 ff10 	bl	17290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
}
    f470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f474:	63afbe7b 	.word	0x63afbe7b
    f478:	4da2cbf2 	.word	0x4da2cbf2
    f47c:	2f16ac6c 	.word	0x2f16ac6c
    f480:	1152aaa4 	.word	0x1152aaa4
    f484:	02582ab7 	.word	0x02582ab7
    f488:	000afe11 	.word	0x000afe11

0000f48c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    f48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f490:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f492:	694f      	ldr	r7, [r1, #20]
    f494:	b35f      	cbz	r7, f4ee <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
    f496:	4604      	mov	r4, r0
    f498:	460d      	mov	r5, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    f49a:	f8d1 8010 	ldr.w	r8, [r1, #16]
    f49e:	f1b8 0f00 	cmp.w	r8, #0
    f4a2:	d026      	beq.n	f4f2 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
  const OpDataPooling* data =
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    f4a4:	4b23      	ldr	r3, [pc, #140]	; (f534 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    f4a6:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f4a8:	b328      	cbz	r0, f4f6 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    f4aa:	b335      	cbz	r5, f4fa <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    f4ac:	6d42      	ldr	r2, [r0, #84]	; 0x54
    f4ae:	682b      	ldr	r3, [r5, #0]
    f4b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f4b4:	6859      	ldr	r1, [r3, #4]
    f4b6:	4790      	blx	r2
    f4b8:	4606      	mov	r6, r0
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    f4ba:	4b1f      	ldr	r3, [pc, #124]	; (f538 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    f4bc:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f4be:	b1f4      	cbz	r4, f4fe <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    f4c0:	b1fd      	cbz	r5, f502 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    f4c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    f4c4:	686b      	ldr	r3, [r5, #4]
    f4c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f4ca:	6859      	ldr	r1, [r3, #4]
    f4cc:	4620      	mov	r0, r4
    f4ce:	4790      	blx	r2

  switch (input->type) {
    f4d0:	7a33      	ldrb	r3, [r6, #8]
    f4d2:	2b01      	cmp	r3, #1
    f4d4:	d017      	beq.n	f506 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    f4d6:	2b09      	cmp	r3, #9
    f4d8:	d021      	beq.n	f51e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
      break;
    case kTfLiteInt8:
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    f4da:	6965      	ldr	r5, [r4, #20]
    f4dc:	4618      	mov	r0, r3
    f4de:	f7f9 fdd5 	bl	908c <TfLiteTypeGetName>
    f4e2:	4602      	mov	r2, r0
    f4e4:	4915      	ldr	r1, [pc, #84]	; (f53c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    f4e6:	4620      	mov	r0, r4
    f4e8:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    f4ea:	2001      	movs	r0, #1
    f4ec:	e014      	b.n	f518 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f4ee:	f009 f9dc 	bl	188aa <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f4f2:	f009 f9da 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    f4f6:	f009 f9d8 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    f4fa:	f009 f9d6 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    f4fe:	f009 f9d4 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    f502:	f009 f9d2 	bl	188aa <abort>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
    f506:	9001      	str	r0, [sp, #4]
    f508:	9600      	str	r6, [sp, #0]
    f50a:	4643      	mov	r3, r8
    f50c:	463a      	mov	r2, r7
    f50e:	4629      	mov	r1, r5
    f510:	4620      	mov	r0, r4
    f512:	f008 f987 	bl	17824 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  }
  return kTfLiteOk;
    f516:	2000      	movs	r0, #0
}
    f518:	b002      	add	sp, #8
    f51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
    f51e:	9001      	str	r0, [sp, #4]
    f520:	9600      	str	r6, [sp, #0]
    f522:	4643      	mov	r3, r8
    f524:	463a      	mov	r2, r7
    f526:	4629      	mov	r1, r5
    f528:	4620      	mov	r0, r4
    f52a:	f008 fd18 	bl	17f5e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
    f52e:	2000      	movs	r0, #0
      break;
    f530:	e7f2      	b.n	f518 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    f532:	bf00      	nop
    f534:	00034ac4 	.word	0x00034ac4
    f538:	00034ac8 	.word	0x00034ac8
    f53c:	00034a1c 	.word	0x00034a1c

0000f540 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    f540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f544:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f546:	694f      	ldr	r7, [r1, #20]
    f548:	b35f      	cbz	r7, f5a2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x62>
    f54a:	4604      	mov	r4, r0
    f54c:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    f54e:	f8d1 8010 	ldr.w	r8, [r1, #16]
    f552:	f1b8 0f00 	cmp.w	r8, #0
    f556:	d026      	beq.n	f5a6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    f558:	4b23      	ldr	r3, [pc, #140]	; (f5e8 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    f55a:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f55c:	b328      	cbz	r0, f5aa <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    f55e:	b335      	cbz	r5, f5ae <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    f560:	6d42      	ldr	r2, [r0, #84]	; 0x54
    f562:	682b      	ldr	r3, [r5, #0]
    f564:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f568:	6859      	ldr	r1, [r3, #4]
    f56a:	4790      	blx	r2
    f56c:	4606      	mov	r6, r0
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    f56e:	4b1f      	ldr	r3, [pc, #124]	; (f5ec <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    f570:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f572:	b1f4      	cbz	r4, f5b2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    f574:	b1fd      	cbz	r5, f5b6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    f576:	6d62      	ldr	r2, [r4, #84]	; 0x54
    f578:	686b      	ldr	r3, [r5, #4]
    f57a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f57e:	6859      	ldr	r1, [r3, #4]
    f580:	4620      	mov	r0, r4
    f582:	4790      	blx	r2
  switch (input->type) {
    f584:	7a33      	ldrb	r3, [r6, #8]
    f586:	2b01      	cmp	r3, #1
    f588:	d017      	beq.n	f5ba <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    f58a:	2b09      	cmp	r3, #9
    f58c:	d021      	beq.n	f5d2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x92>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    f58e:	6965      	ldr	r5, [r4, #20]
    f590:	4618      	mov	r0, r3
    f592:	f7f9 fd7b 	bl	908c <TfLiteTypeGetName>
    f596:	4602      	mov	r2, r0
    f598:	4915      	ldr	r1, [pc, #84]	; (f5f0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    f59a:	4620      	mov	r0, r4
    f59c:	47a8      	blx	r5
      return kTfLiteError;
    f59e:	2001      	movs	r0, #1
    f5a0:	e014      	b.n	f5cc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f5a2:	f009 f982 	bl	188aa <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f5a6:	f009 f980 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    f5aa:	f009 f97e 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    f5ae:	f009 f97c 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
    f5b2:	f009 f97a 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
    f5b6:	f009 f978 	bl	188aa <abort>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
    f5ba:	9001      	str	r0, [sp, #4]
    f5bc:	9600      	str	r6, [sp, #0]
    f5be:	4643      	mov	r3, r8
    f5c0:	463a      	mov	r2, r7
    f5c2:	4629      	mov	r1, r5
    f5c4:	4620      	mov	r0, r4
    f5c6:	f007 ff5c 	bl	17482 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
    f5ca:	2000      	movs	r0, #0
}
    f5cc:	b002      	add	sp, #8
    f5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
    f5d2:	9001      	str	r0, [sp, #4]
    f5d4:	9600      	str	r6, [sp, #0]
    f5d6:	4643      	mov	r3, r8
    f5d8:	463a      	mov	r2, r7
    f5da:	4629      	mov	r1, r5
    f5dc:	4620      	mov	r0, r4
    f5de:	f008 faef 	bl	17bc0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
  return kTfLiteOk;
    f5e2:	2000      	movs	r0, #0
      break;
    f5e4:	e7f2      	b.n	f5cc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    f5e6:	bf00      	nop
    f5e8:	00034ac4 	.word	0x00034ac4
    f5ec:	00034ac8 	.word	0x00034ac8
    f5f0:	00034a40 	.word	0x00034a40

0000f5f4 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
}

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
    f5f4:	b470      	push	{r4, r5, r6}
    f5f6:	4606      	mov	r6, r0
          /*prepare=*/PoolingPrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    f5f8:	4604      	mov	r4, r0
    f5fa:	4d05      	ldr	r5, [pc, #20]	; (f610 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x1c>)
    f5fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f5fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f600:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    f608:	4630      	mov	r0, r6
    f60a:	bc70      	pop	{r4, r5, r6}
    f60c:	4770      	bx	lr
    f60e:	bf00      	nop
    f610:	000318d4 	.word	0x000318d4

0000f614 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:
      params->filter_width, params->padding, &out_height, &out_width);

  return kTfLiteOk;
}

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    f614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f618:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f61a:	694f      	ldr	r7, [r1, #20]
    f61c:	b34f      	cbz	r7, f672 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    f61e:	4605      	mov	r5, r0
    f620:	460c      	mov	r4, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    f622:	690e      	ldr	r6, [r1, #16]
    f624:	b33e      	cbz	r6, f676 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x62>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
    f626:	2200      	movs	r2, #0
    f628:	f006 fadd 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    f62c:	4680      	mov	r8, r0
    f62e:	b320      	cbz	r0, f67a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
    f630:	2200      	movs	r2, #0
    f632:	4621      	mov	r1, r4
    f634:	4628      	mov	r0, r5
    f636:	f006 faf5 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    f63a:	4681      	mov	r9, r0
    f63c:	b350      	cbz	r0, f694 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x80>

  TF_LITE_ENSURE_STATUS(
    f63e:	9600      	str	r6, [sp, #0]
    f640:	4603      	mov	r3, r0
    f642:	4642      	mov	r2, r8
    f644:	4639      	mov	r1, r7
    f646:	4628      	mov	r0, r5
    f648:	f007 fec9 	bl	173de <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
    f64c:	4604      	mov	r4, r0
    f64e:	b9e8      	cbnz	r0, f68c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
    f650:	f898 3000 	ldrb.w	r3, [r8]
    f654:	2b01      	cmp	r3, #1
    f656:	d027      	beq.n	f6a8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x94>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
    f658:	2b09      	cmp	r3, #9
    f65a:	d117      	bne.n	f68c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRangeQuantized(context, params->activation, output,
    f65c:	7d39      	ldrb	r1, [r7, #20]
    f65e:	f106 0314 	add.w	r3, r6, #20
    f662:	9300      	str	r3, [sp, #0]
    f664:	f106 0310 	add.w	r3, r6, #16
    f668:	464a      	mov	r2, r9
    f66a:	4628      	mov	r0, r5
    f66c:	f7f9 ff52 	bl	9514 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    f670:	e00c      	b.n	f68c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f672:	f009 f91a 	bl	188aa <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f676:	f009 f918 	bl	188aa <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    f67a:	696c      	ldr	r4, [r5, #20]
    f67c:	4b0e      	ldr	r3, [pc, #56]	; (f6b8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
    f67e:	9300      	str	r3, [sp, #0]
    f680:	233a      	movs	r3, #58	; 0x3a
    f682:	4a0e      	ldr	r2, [pc, #56]	; (f6bc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    f684:	490e      	ldr	r1, [pc, #56]	; (f6c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    f686:	4628      	mov	r0, r5
    f688:	47a0      	blx	r4
    f68a:	2401      	movs	r4, #1
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
    f68c:	4620      	mov	r0, r4
    f68e:	b003      	add	sp, #12
    f690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    f694:	696c      	ldr	r4, [r5, #20]
    f696:	4b0b      	ldr	r3, [pc, #44]	; (f6c4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
    f698:	9300      	str	r3, [sp, #0]
    f69a:	233c      	movs	r3, #60	; 0x3c
    f69c:	4a07      	ldr	r2, [pc, #28]	; (f6bc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    f69e:	4908      	ldr	r1, [pc, #32]	; (f6c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    f6a0:	4628      	mov	r0, r5
    f6a2:	47a0      	blx	r4
    f6a4:	2401      	movs	r4, #1
    f6a6:	e7f1      	b.n	f68c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
    f6a8:	f106 021c 	add.w	r2, r6, #28
    f6ac:	f106 0118 	add.w	r1, r6, #24
    f6b0:	7d38      	ldrb	r0, [r7, #20]
    f6b2:	f7fa ff39 	bl	a528 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
    f6b6:	e7e9      	b.n	f68c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    f6b8:	00034744 	.word	0x00034744
    f6bc:	00034a6c 	.word	0x00034a6c
    f6c0:	00033ca8 	.word	0x00033ca8
    f6c4:	000343b0 	.word	0x000343b0

0000f6c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    f6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6cc:	b084      	sub	sp, #16
    f6ce:	4604      	mov	r4, r0
    f6d0:	460f      	mov	r7, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    f6d2:	2200      	movs	r2, #0
    f6d4:	f006 fa87 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    f6d8:	b308      	cbz	r0, f71e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
    f6da:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    f6dc:	2200      	movs	r2, #0
    f6de:	4639      	mov	r1, r7
    f6e0:	4620      	mov	r0, r4
    f6e2:	f006 fa9f 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    f6e6:	4606      	mov	r6, r0
    f6e8:	b328      	cbz	r0, f736 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6e>
  return NumElements(t->dims);
    f6ea:	f8d5 8008 	ldr.w	r8, [r5, #8]
  for (int i = 0; i < dims->size; ++i) {
    f6ee:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    f6f2:	2201      	movs	r2, #1
    f6f4:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    f6f6:	f8d8 1000 	ldr.w	r1, [r8]
    f6fa:	4561      	cmp	r1, ip
    f6fc:	dd25      	ble.n	f74a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
    count *= dims->data[i];
    f6fe:	eb08 018c 	add.w	r1, r8, ip, lsl #2
    f702:	f8d1 e004 	ldr.w	lr, [r1, #4]
    f706:	4670      	mov	r0, lr
    f708:	17c1      	asrs	r1, r0, #31
    f70a:	fb02 f101 	mul.w	r1, r2, r1
    f70e:	fb0e 1103 	mla	r1, lr, r3, r1
    f712:	fba2 230e 	umull	r2, r3, r2, lr
    f716:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    f718:	f10c 0c01 	add.w	ip, ip, #1
    f71c:	e7eb      	b.n	f6f6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input != nullptr);
    f71e:	6965      	ldr	r5, [r4, #20]
    f720:	4b3e      	ldr	r3, [pc, #248]	; (f81c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    f722:	9300      	str	r3, [sp, #0]
    f724:	2323      	movs	r3, #35	; 0x23
    f726:	4a3e      	ldr	r2, [pc, #248]	; (f820 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    f728:	493e      	ldr	r1, [pc, #248]	; (f824 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    f72a:	4620      	mov	r0, r4
    f72c:	47a8      	blx	r5
    f72e:	2001      	movs	r0, #1
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  return kTfLiteOk;
}
    f730:	b004      	add	sp, #16
    f732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    f736:	6965      	ldr	r5, [r4, #20]
    f738:	4b3b      	ldr	r3, [pc, #236]	; (f828 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
    f73a:	9300      	str	r3, [sp, #0]
    f73c:	2325      	movs	r3, #37	; 0x25
    f73e:	4a38      	ldr	r2, [pc, #224]	; (f820 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    f740:	4938      	ldr	r1, [pc, #224]	; (f824 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    f742:	4620      	mov	r0, r4
    f744:	47a8      	blx	r5
    f746:	2001      	movs	r0, #1
    f748:	e7f2      	b.n	f730 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TfLiteIntArray* output_shape = output->dims;
    f74a:	68b0      	ldr	r0, [r6, #8]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    f74c:	683b      	ldr	r3, [r7, #0]
    f74e:	681b      	ldr	r3, [r3, #0]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    f750:	2b01      	cmp	r3, #1
    f752:	d004      	beq.n	f75e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
  for (int i = 0; i < output_shape->size; ++i) {
    f754:	2300      	movs	r3, #0
  int stretch_dim = -1;
    f756:	f04f 3cff 	mov.w	ip, #4294967295
  int num_output_elements = 1;
    f75a:	2701      	movs	r7, #1
    f75c:	e01b      	b.n	f796 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xce>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    f75e:	6803      	ldr	r3, [r0, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    f760:	2b01      	cmp	r3, #1
    f762:	d1f7      	bne.n	f754 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    f764:	6843      	ldr	r3, [r0, #4]
    f766:	2b00      	cmp	r3, #0
    f768:	d1f4      	bne.n	f754 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
    output_shape->size = 0;
    f76a:	6003      	str	r3, [r0, #0]
    f76c:	e7f2      	b.n	f754 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    f76e:	6965      	ldr	r5, [r4, #20]
    f770:	f04f 33ff 	mov.w	r3, #4294967295
    f774:	9303      	str	r3, [sp, #12]
    f776:	f8cd c008 	str.w	ip, [sp, #8]
    f77a:	4b2c      	ldr	r3, [pc, #176]	; (f82c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x164>)
    f77c:	9301      	str	r3, [sp, #4]
    f77e:	4b2c      	ldr	r3, [pc, #176]	; (f830 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
    f780:	9300      	str	r3, [sp, #0]
    f782:	233a      	movs	r3, #58	; 0x3a
    f784:	4a26      	ldr	r2, [pc, #152]	; (f820 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    f786:	492b      	ldr	r1, [pc, #172]	; (f834 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    f788:	4620      	mov	r0, r4
    f78a:	47a8      	blx	r5
    f78c:	2001      	movs	r0, #1
    f78e:	e7cf      	b.n	f730 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      num_output_elements *= value;
    f790:	fb01 f707 	mul.w	r7, r1, r7
  for (int i = 0; i < output_shape->size; ++i) {
    f794:	3301      	adds	r3, #1
    f796:	6801      	ldr	r1, [r0, #0]
    f798:	4299      	cmp	r1, r3
    f79a:	dd0a      	ble.n	f7b2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xea>
    int value = output_shape->data[i];
    f79c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
    f7a0:	6849      	ldr	r1, [r1, #4]
    if (value == -1) {
    f7a2:	f1b1 3fff 	cmp.w	r1, #4294967295
    f7a6:	d1f3      	bne.n	f790 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    f7a8:	f1bc 3fff 	cmp.w	ip, #4294967295
    f7ac:	d1df      	bne.n	f76e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
      stretch_dim = i;
    f7ae:	469c      	mov	ip, r3
    f7b0:	e7f0      	b.n	f794 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
  if (stretch_dim != -1) {
    f7b2:	f1bc 3fff 	cmp.w	ip, #4294967295
    f7b6:	d006      	beq.n	f7c6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    f7b8:	fb92 f3f7 	sdiv	r3, r2, r7
    f7bc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    f7c0:	6043      	str	r3, [r0, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    f7c2:	fb03 f707 	mul.w	r7, r3, r7
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    f7c6:	7828      	ldrb	r0, [r5, #0]
    f7c8:	7833      	ldrb	r3, [r6, #0]
    f7ca:	4298      	cmp	r0, r3
    f7cc:	d10f      	bne.n	f7ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x126>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    f7ce:	4297      	cmp	r7, r2
    f7d0:	d021      	beq.n	f816 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14e>
    f7d2:	6965      	ldr	r5, [r4, #20]
    f7d4:	9703      	str	r7, [sp, #12]
    f7d6:	9202      	str	r2, [sp, #8]
    f7d8:	4b17      	ldr	r3, [pc, #92]	; (f838 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
    f7da:	9301      	str	r3, [sp, #4]
    f7dc:	4b17      	ldr	r3, [pc, #92]	; (f83c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
    f7de:	9300      	str	r3, [sp, #0]
    f7e0:	2346      	movs	r3, #70	; 0x46
    f7e2:	4a0f      	ldr	r2, [pc, #60]	; (f820 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    f7e4:	4913      	ldr	r1, [pc, #76]	; (f834 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    f7e6:	4620      	mov	r0, r4
    f7e8:	47a8      	blx	r5
    f7ea:	2001      	movs	r0, #1
    f7ec:	e7a0      	b.n	f730 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    f7ee:	6967      	ldr	r7, [r4, #20]
    f7f0:	f7f9 fc4c 	bl	908c <TfLiteTypeGetName>
    f7f4:	4605      	mov	r5, r0
    f7f6:	7830      	ldrb	r0, [r6, #0]
    f7f8:	f7f9 fc48 	bl	908c <TfLiteTypeGetName>
    f7fc:	9003      	str	r0, [sp, #12]
    f7fe:	9502      	str	r5, [sp, #8]
    f800:	4b0f      	ldr	r3, [pc, #60]	; (f840 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
    f802:	9301      	str	r3, [sp, #4]
    f804:	4b0f      	ldr	r3, [pc, #60]	; (f844 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
    f806:	9300      	str	r3, [sp, #0]
    f808:	2345      	movs	r3, #69	; 0x45
    f80a:	4a05      	ldr	r2, [pc, #20]	; (f820 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    f80c:	490e      	ldr	r1, [pc, #56]	; (f848 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
    f80e:	4620      	mov	r0, r4
    f810:	47b8      	blx	r7
    f812:	2001      	movs	r0, #1
    f814:	e78c      	b.n	f730 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  return kTfLiteOk;
    f816:	2000      	movs	r0, #0
    f818:	e78a      	b.n	f730 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    f81a:	bf00      	nop
    f81c:	00034744 	.word	0x00034744
    f820:	00034acc 	.word	0x00034acc
    f824:	00033ca8 	.word	0x00033ca8
    f828:	000343b0 	.word	0x000343b0
    f82c:	00034b1c 	.word	0x00034b1c
    f830:	00034b20 	.word	0x00034b20
    f834:	00033f68 	.word	0x00033f68
    f838:	00034b2c 	.word	0x00034b2c
    f83c:	00034b40 	.word	0x00034b40
    f840:	00034620 	.word	0x00034620
    f844:	00034630 	.word	0x00034630
    f848:	00034968 	.word	0x00034968

0000f84c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    f84c:	b570      	push	{r4, r5, r6, lr}
    f84e:	b084      	sub	sp, #16
    f850:	4605      	mov	r5, r0
    f852:	460c      	mov	r4, r1
    f854:	680b      	ldr	r3, [r1, #0]
    f856:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    f858:	2b01      	cmp	r3, #1
    f85a:	d00a      	beq.n	f872 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    f85c:	2b02      	cmp	r3, #2
    f85e:	d008      	beq.n	f872 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    f860:	6944      	ldr	r4, [r0, #20]
    f862:	4b1a      	ldr	r3, [pc, #104]	; (f8cc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    f864:	9300      	str	r3, [sp, #0]
    f866:	234b      	movs	r3, #75	; 0x4b
    f868:	4a19      	ldr	r2, [pc, #100]	; (f8d0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    f86a:	491a      	ldr	r1, [pc, #104]	; (f8d4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    f86c:	47a0      	blx	r4
    f86e:	2001      	movs	r0, #1
    f870:	e011      	b.n	f896 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    f872:	6863      	ldr	r3, [r4, #4]
    f874:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    f876:	2b01      	cmp	r3, #1
    f878:	d00f      	beq.n	f89a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
    f87a:	696e      	ldr	r6, [r5, #20]
    f87c:	2401      	movs	r4, #1
    f87e:	9403      	str	r4, [sp, #12]
    f880:	9302      	str	r3, [sp, #8]
    f882:	4b15      	ldr	r3, [pc, #84]	; (f8d8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    f884:	9301      	str	r3, [sp, #4]
    f886:	4b15      	ldr	r3, [pc, #84]	; (f8dc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    f888:	9300      	str	r3, [sp, #0]
    f88a:	234c      	movs	r3, #76	; 0x4c
    f88c:	4a10      	ldr	r2, [pc, #64]	; (f8d0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    f88e:	4914      	ldr	r1, [pc, #80]	; (f8e0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    f890:	4628      	mov	r0, r5
    f892:	47b0      	blx	r6
    f894:	4620      	mov	r0, r4
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    f896:	b004      	add	sp, #16
    f898:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    f89a:	4621      	mov	r1, r4
    f89c:	4628      	mov	r0, r5
    f89e:	f7ff ff13 	bl	f6c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    f8a2:	2800      	cmp	r0, #0
    f8a4:	d0f7      	beq.n	f896 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    f8a6:	696e      	ldr	r6, [r5, #20]
    f8a8:	4621      	mov	r1, r4
    f8aa:	4628      	mov	r0, r5
    f8ac:	f7ff ff0c 	bl	f6c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    f8b0:	2300      	movs	r3, #0
    f8b2:	9303      	str	r3, [sp, #12]
    f8b4:	9002      	str	r0, [sp, #8]
    f8b6:	4b0b      	ldr	r3, [pc, #44]	; (f8e4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    f8b8:	9301      	str	r3, [sp, #4]
    f8ba:	4b0b      	ldr	r3, [pc, #44]	; (f8e8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    f8bc:	9300      	str	r3, [sp, #0]
    f8be:	234d      	movs	r3, #77	; 0x4d
    f8c0:	4a03      	ldr	r2, [pc, #12]	; (f8d0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    f8c2:	4907      	ldr	r1, [pc, #28]	; (f8e0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    f8c4:	4628      	mov	r0, r5
    f8c6:	47b0      	blx	r6
    f8c8:	2001      	movs	r0, #1
    f8ca:	e7e4      	b.n	f896 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    f8cc:	00034b54 	.word	0x00034b54
    f8d0:	00034acc 	.word	0x00034acc
    f8d4:	00033ca8 	.word	0x00033ca8
    f8d8:	00034d64 	.word	0x00034d64
    f8dc:	00034b84 	.word	0x00034b84
    f8e0:	00033f68 	.word	0x00033f68
    f8e4:	00034b98 	.word	0x00034b98
    f8e8:	00034ba4 	.word	0x00034ba4

0000f8ec <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    f8ec:	b470      	push	{r4, r5, r6}
    f8ee:	4606      	mov	r6, r0
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    f8f0:	4604      	mov	r4, r0
    f8f2:	4d05      	ldr	r5, [pc, #20]	; (f908 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
    f8f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f8f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f8f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f8fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    f900:	4630      	mov	r0, r6
    f902:	bc70      	pop	{r4, r5, r6}
    f904:	4770      	bx	lr
    f906:	bf00      	nop
    f908:	00031914 	.word	0x00031914

0000f90c <_ZN6tflite16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    f90c:	b470      	push	{r4, r5, r6}
    f90e:	4606      	mov	r6, r0
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    f910:	4604      	mov	r4, r0
    f912:	4d05      	ldr	r5, [pc, #20]	; (f928 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
    f914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f918:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f91c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    f920:	4630      	mov	r0, r6
    f922:	bc70      	pop	{r4, r5, r6}
    f924:	4770      	bx	lr
    f926:	bf00      	nop
    f928:	00031934 	.word	0x00031934

0000f92c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
}

// Quantized softmax with int8_t/uint8_t input and int8_t/uint8_t/int16_t
// output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
    f92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f930:	b091      	sub	sp, #68	; 0x44
    f932:	4691      	mov	r9, r2
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32_t input_beta_multiplier = params.input_multiplier;
    f934:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    f938:	68c2      	ldr	r2, [r0, #12]
    f93a:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    f93c:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    f93e:	680d      	ldr	r5, [r1, #0]
      gemmlowp::FixedPoint<int32_t, kScaledDiffIntegerBits>;
  using FixedPointAccum =
      gemmlowp::FixedPoint<int32_t, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32_t, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    f940:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
    f942:	2200      	movs	r2, #0
    f944:	e011      	b.n	f96a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    f946:	f008 ffb0 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    f94a:	f008 ffae 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    f94e:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    f952:	6866      	ldr	r6, [r4, #4]
    f954:	e017      	b.n	f986 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    f956:	f008 ffa8 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    f95a:	f008 ffa6 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    f95e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    f962:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    f964:	42b4      	cmp	r4, r6
    f966:	d119      	bne.n	f99c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    f968:	3201      	adds	r2, #1
    f96a:	4295      	cmp	r5, r2
    f96c:	dd18      	ble.n	f9a0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    f96e:	4290      	cmp	r0, r2
    f970:	d0fa      	beq.n	f968 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    f972:	2a00      	cmp	r2, #0
    f974:	dbe7      	blt.n	f946 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    f976:	680c      	ldr	r4, [r1, #0]
    f978:	42a2      	cmp	r2, r4
    f97a:	dae6      	bge.n	f94a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    f97c:	2c05      	cmp	r4, #5
    f97e:	dde6      	ble.n	f94e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    f980:	684c      	ldr	r4, [r1, #4]
    f982:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    f986:	2a00      	cmp	r2, #0
    f988:	dbe5      	blt.n	f956 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    f98a:	681c      	ldr	r4, [r3, #0]
    f98c:	42a2      	cmp	r2, r4
    f98e:	dae4      	bge.n	f95a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    f990:	2c05      	cmp	r4, #5
    f992:	dde4      	ble.n	f95e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    f994:	685c      	ldr	r4, [r3, #4]
    f996:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    f99a:	e7e3      	b.n	f964 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    f99c:	f008 ff85 	bl	188aa <abort>
  inline int32_t DimensionsCount() const { return size_; }
    f9a0:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    f9a2:	2800      	cmp	r0, #0
    f9a4:	db08      	blt.n	f9b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    f9a6:	42a8      	cmp	r0, r5
    f9a8:	da06      	bge.n	f9b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    f9aa:	2d05      	cmp	r5, #5
    f9ac:	dd06      	ble.n	f9bc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    f9ae:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    f9b0:	2200      	movs	r2, #0
  int flat_size = 1;
    f9b2:	2401      	movs	r4, #1
    f9b4:	46ac      	mov	ip, r5
    f9b6:	e007      	b.n	f9c8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    f9b8:	f008 ff77 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    f9bc:	1d0e      	adds	r6, r1, #4
    f9be:	e7f7      	b.n	f9b0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    f9c0:	2501      	movs	r5, #1
    f9c2:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    f9c6:	3201      	adds	r2, #1
    f9c8:	4594      	cmp	ip, r2
    f9ca:	dd04      	ble.n	f9d6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    f9cc:	4290      	cmp	r0, r2
    f9ce:	d0f7      	beq.n	f9c0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    f9d0:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    f9d4:	e7f5      	b.n	f9c2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    f9d6:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    f9d8:	2800      	cmp	r0, #0
    f9da:	db2e      	blt.n	fa3a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    f9dc:	680a      	ldr	r2, [r1, #0]
    f9de:	4290      	cmp	r0, r2
    f9e0:	da2d      	bge.n	fa3e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    f9e2:	2a05      	cmp	r2, #5
    f9e4:	dd2d      	ble.n	fa42 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    f9e6:	684a      	ldr	r2, [r1, #4]
    f9e8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    f9ec:	2800      	cmp	r0, #0
    f9ee:	db2c      	blt.n	fa4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    f9f0:	6819      	ldr	r1, [r3, #0]
    f9f2:	4288      	cmp	r0, r1
    f9f4:	da2b      	bge.n	fa4e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    f9f6:	2905      	cmp	r1, #5
    f9f8:	dd2b      	ble.n	fa52 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    f9fa:	6859      	ldr	r1, [r3, #4]
    f9fc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    fa00:	4291      	cmp	r1, r2
    fa02:	d12a      	bne.n	fa5a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    fa04:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    fa06:	2800      	cmp	r0, #0
    fa08:	db29      	blt.n	fa5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    fa0a:	6819      	ldr	r1, [r3, #0]
    fa0c:	4288      	cmp	r0, r1
    fa0e:	da28      	bge.n	fa62 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fa10:	2905      	cmp	r1, #5
    fa12:	dd28      	ble.n	fa66 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    fa14:	685b      	ldr	r3, [r3, #4]
    fa16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    fa1a:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    fa1c:	429a      	cmp	r2, r3
    fa1e:	dc26      	bgt.n	fa6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    fa20:	ab0f      	add	r3, sp, #60	; 0x3c
    fa22:	f8d3 b000 	ldr.w	fp, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    fa26:	f04f 0a00 	mov.w	sl, #0
    fa2a:	4642      	mov	r2, r8
    fa2c:	46d0      	mov	r8, sl
    fa2e:	9702      	str	r7, [sp, #8]
    fa30:	464b      	mov	r3, r9
    fa32:	46d9      	mov	r9, fp
    fa34:	469b      	mov	fp, r3
    fa36:	4692      	mov	sl, r2
    fa38:	e15d      	b.n	fcf6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ca>
    TFLITE_DCHECK_GE(i, 0);
    fa3a:	f008 ff36 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    fa3e:	f008 ff34 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fa42:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    fa46:	684a      	ldr	r2, [r1, #4]
    fa48:	e7d0      	b.n	f9ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    fa4a:	f008 ff2e 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    fa4e:	f008 ff2c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fa52:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    fa56:	6849      	ldr	r1, [r1, #4]
    fa58:	e7d2      	b.n	fa00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    fa5a:	f008 ff26 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    fa5e:	f008 ff24 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    fa62:	f008 ff22 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fa66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    fa6a:	685b      	ldr	r3, [r3, #4]
    fa6c:	e7d5      	b.n	fa1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    fa6e:	ab0e      	add	r3, sp, #56	; 0x38
    fa70:	e7d7      	b.n	fa22 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fa72:	f991 2000 	ldrsb.w	r2, [r1]
    fa76:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    fa7a:	3301      	adds	r3, #1
    fa7c:	454b      	cmp	r3, r9
    fa7e:	da0c      	bge.n	fa9a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fa80:	fb09 3208 	mla	r2, r9, r8, r3
    fa84:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    fa88:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    fa8c:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    fa90:	4282      	cmp	r2, r0
    fa92:	dcee      	bgt.n	fa72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    fa94:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    fa98:	e7eb      	b.n	fa72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    fa9a:	2000      	movs	r0, #0
    fa9c:	f006 f97f 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    faa0:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    faa2:	2400      	movs	r4, #0
    faa4:	9f06      	ldr	r7, [sp, #24]
    faa6:	9e02      	ldr	r6, [sp, #8]
    faa8:	e01a      	b.n	fae0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    faaa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    faae:	d002      	beq.n	fab6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    fab0:	f04f 0c00 	mov.w	ip, #0
    fab4:	e024      	b.n	fb00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    fab6:	f04f 0c01 	mov.w	ip, #1
    faba:	e021      	b.n	fb00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fabc:	4993      	ldr	r1, [pc, #588]	; (fd0c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    fabe:	e02f      	b.n	fb20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fac0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    fac2:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fac6:	f1bc 0f00 	cmp.w	ip, #0
    faca:	d13a      	bne.n	fb42 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        const int32_t input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    facc:	f7ff fa90 	bl	eff0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    fad0:	f007 fc71 	bl	173b6 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    fad4:	4601      	mov	r1, r0
    fad6:	4628      	mov	r0, r5
    fad8:	f007 fc29 	bl	1732e <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    fadc:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    fade:	3401      	adds	r4, #1
    fae0:	454c      	cmp	r4, r9
    fae2:	da31      	bge.n	fb48 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fae4:	fb09 4308 	mla	r3, r9, r8, r4
    fae8:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    faec:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    faf0:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    faf2:	4296      	cmp	r6, r2
    faf4:	dcf3      	bgt.n	fade <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    faf6:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    faf8:	4592      	cmp	sl, r2
    fafa:	d0d6      	beq.n	faaa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    fafc:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    fb00:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    fb02:	fb0a f301 	mul.w	r3, sl, r1
    fb06:	4650      	mov	r0, sl
    fb08:	17c1      	asrs	r1, r0, #31
    fb0a:	fb02 3101 	mla	r1, r2, r1, r3
    fb0e:	fbaa 2302 	umull	r2, r3, sl, r2
    fb12:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fb14:	2a00      	cmp	r2, #0
    fb16:	f173 0100 	sbcs.w	r1, r3, #0
    fb1a:	dbcf      	blt.n	fabc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    fb1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fb20:	1852      	adds	r2, r2, r1
    fb22:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    fb26:	4611      	mov	r1, r2
    fb28:	4618      	mov	r0, r3
    fb2a:	2a00      	cmp	r2, #0
    fb2c:	f173 0e00 	sbcs.w	lr, r3, #0
    fb30:	dac6      	bge.n	fac0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    fb32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fb36:	1851      	adds	r1, r2, r1
    fb38:	f04f 0000 	mov.w	r0, #0
    fb3c:	eb43 0000 	adc.w	r0, r3, r0
    fb40:	e7be      	b.n	fac0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fb42:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fb46:	e7c1      	b.n	facc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    fb48:	4628      	mov	r0, r5
    fb4a:	f007 fafd 	bl	17148 <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    fb4e:	f1c0 030c 	rsb	r3, r0, #12
    fb52:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    fb54:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    fb58:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    fb5c:	f7ff f892 	bl	ec84 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    fb60:	9008      	str	r0, [sp, #32]
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
    fb62:	2600      	movs	r6, #0
    fb64:	f8cd 8000 	str.w	r8, [sp]
    fb68:	4657      	mov	r7, sl
    fb6a:	46ca      	mov	sl, r9
    fb6c:	f8cd b004 	str.w	fp, [sp, #4]
    fb70:	e02b      	b.n	fbca <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fb72:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fb76:	d001      	beq.n	fb7c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    fb78:	2500      	movs	r5, #0
    fb7a:	e039      	b.n	fbf0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
    fb7c:	2501      	movs	r5, #1
    fb7e:	e037      	b.n	fbf0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fb80:	4962      	ldr	r1, [pc, #392]	; (fd0c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    fb82:	e045      	b.n	fc10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fb84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fb88:	1851      	adds	r1, r2, r1
    fb8a:	f04f 0000 	mov.w	r0, #0
    fb8e:	eb43 0000 	adc.w	r0, r3, r0
    fb92:	e046      	b.n	fc22 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f6>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fb94:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fb98:	e048      	b.n	fc2c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x300>
  assert(exponent >= 0);
    fb9a:	4b5d      	ldr	r3, [pc, #372]	; (fd10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    fb9c:	4a5d      	ldr	r2, [pc, #372]	; (fd14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    fb9e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    fba2:	485d      	ldr	r0, [pc, #372]	; (fd18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    fba4:	f002 fe72 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    fba8:	4b5c      	ldr	r3, [pc, #368]	; (fd1c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
    fbaa:	4a5a      	ldr	r2, [pc, #360]	; (fd14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    fbac:	f240 1167 	movw	r1, #359	; 0x167
    fbb0:	4859      	ldr	r0, [pc, #356]	; (fd18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    fbb2:	f002 fe6b 	bl	1288c <__assert_func>
	return __b;
    fbb6:	ab0c      	add	r3, sp, #48	; 0x30
    fbb8:	e089      	b.n	fcce <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a2>
	return __b;
    fbba:	ab0d      	add	r3, sp, #52	; 0x34
    fbbc:	e08e      	b.n	fcdc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    fbbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    fbc2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fbc4:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    for (int c = 0; c < depth; ++c) {
    fbc8:	3601      	adds	r6, #1
    fbca:	4556      	cmp	r6, sl
    fbcc:	f280 808b 	bge.w	fce6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ba>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fbd0:	9b00      	ldr	r3, [sp, #0]
    fbd2:	fb0a 6403 	mla	r4, sl, r3, r6
    fbd6:	9b01      	ldr	r3, [sp, #4]
    fbd8:	571a      	ldrsb	r2, [r3, r4]
    fbda:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    fbde:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    fbe0:	9b02      	ldr	r3, [sp, #8]
    fbe2:	4293      	cmp	r3, r2
    fbe4:	dceb      	bgt.n	fbbe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    fbe6:	9b06      	ldr	r3, [sp, #24]
    fbe8:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fbea:	4297      	cmp	r7, r2
    fbec:	d0c1      	beq.n	fb72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    fbee:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    fbf0:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    fbf2:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    fbf6:	fb02 f309 	mul.w	r3, r2, r9
    fbfa:	fb07 3101 	mla	r1, r7, r1, r3
    fbfe:	fba2 2307 	umull	r2, r3, r2, r7
    fc02:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fc04:	2a00      	cmp	r2, #0
    fc06:	f173 0100 	sbcs.w	r1, r3, #0
    fc0a:	dbb9      	blt.n	fb80 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    fc0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fc10:	1852      	adds	r2, r2, r1
    fc12:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    fc16:	4611      	mov	r1, r2
    fc18:	4618      	mov	r0, r3
    fc1a:	2a00      	cmp	r2, #0
    fc1c:	f173 0c00 	sbcs.w	ip, r3, #0
    fc20:	dbb0      	blt.n	fb84 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    fc22:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    fc24:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fc28:	2d00      	cmp	r5, #0
    fc2a:	d1b3      	bne.n	fb94 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    fc2c:	f7ff f9e0 	bl	eff0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    fc30:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    fc32:	9808      	ldr	r0, [sp, #32]
    fc34:	f7ff f8ce 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    fc38:	4605      	mov	r5, r0
  assert(exponent >= 0);
    fc3a:	9b07      	ldr	r3, [sp, #28]
    fc3c:	f113 090f 	adds.w	r9, r3, #15
    fc40:	d4ab      	bmi.n	fb9a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    fc42:	f1b9 0f1f 	cmp.w	r9, #31
    fc46:	dcaf      	bgt.n	fba8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    fc48:	f04f 0b01 	mov.w	fp, #1
    fc4c:	fa0b f009 	lsl.w	r0, fp, r9
    fc50:	3801      	subs	r0, #1
    fc52:	f006 f8a4 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    fc56:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    fc58:	2000      	movs	r0, #0
    fc5a:	f006 f8a0 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    fc5e:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    fc60:	4658      	mov	r0, fp
    fc62:	f006 f89c 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    fc66:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    fc68:	4641      	mov	r1, r8
    fc6a:	4628      	mov	r0, r5
    fc6c:	f006 f898 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    fc70:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    fc72:	4659      	mov	r1, fp
    fc74:	4640      	mov	r0, r8
    fc76:	f006 f895 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    fc7a:	4680      	mov	r8, r0
    fc7c:	9903      	ldr	r1, [sp, #12]
    fc7e:	4628      	mov	r0, r5
    fc80:	f006 f89c 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    fc84:	f8dd b010 	ldr.w	fp, [sp, #16]
    fc88:	4659      	mov	r1, fp
    fc8a:	f006 f889 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    fc8e:	4601      	mov	r1, r0
    fc90:	4640      	mov	r0, r8
    fc92:	f006 f889 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    fc96:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    fc98:	4649      	mov	r1, r9
    fc9a:	4628      	mov	r0, r5
    fc9c:	f006 f882 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    fca0:	4605      	mov	r5, r0
    fca2:	4641      	mov	r1, r8
    fca4:	9805      	ldr	r0, [sp, #20]
    fca6:	f006 f891 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    fcaa:	4659      	mov	r1, fp
    fcac:	f006 f878 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    fcb0:	4601      	mov	r1, r0
    fcb2:	4628      	mov	r0, r5
    fcb4:	f006 f878 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    fcb8:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
        const int32_t shifted_output =
    fcbc:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    fcbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
    fcc2:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    fcc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    fcc8:	f6bf af75 	bge.w	fbb6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    fccc:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    fcce:	4a14      	ldr	r2, [pc, #80]	; (fd20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f4>)
    fcd0:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    fcd2:	681a      	ldr	r2, [r3, #0]
    fcd4:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    fcd8:	f6ff af6f 	blt.w	fbba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    fcdc:	681b      	ldr	r3, [r3, #0]
    fcde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fce0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    fce4:	e770      	b.n	fbc8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29c>
    fce6:	f8dd 8000 	ldr.w	r8, [sp]
    fcea:	46d1      	mov	r9, sl
    fcec:	46ba      	mov	sl, r7
    fcee:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    fcf2:	f108 0801 	add.w	r8, r8, #1
    fcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fcf8:	4598      	cmp	r8, r3
    fcfa:	da04      	bge.n	fd06 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    fcfc:	2380      	movs	r3, #128	; 0x80
    fcfe:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    fd02:	2300      	movs	r3, #0
    fd04:	e6ba      	b.n	fa7c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
      }
    }
  }
}
    fd06:	b011      	add	sp, #68	; 0x44
    fd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd0c:	c0000001 	.word	0xc0000001
    fd10:	000343c4 	.word	0x000343c4
    fd14:	000343d4 	.word	0x000343d4
    fd18:	0003442c 	.word	0x0003442c
    fd1c:	00034488 	.word	0x00034488
    fd20:	ffff8000 	.word	0xffff8000

0000fd24 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd28:	b091      	sub	sp, #68	; 0x44
    fd2a:	4691      	mov	r9, r2
  const int32_t input_beta_multiplier = params.input_multiplier;
    fd2c:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    fd30:	68c2      	ldr	r2, [r0, #12]
    fd32:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    fd34:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    fd36:	680d      	ldr	r5, [r1, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    fd38:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
    fd3a:	2200      	movs	r2, #0
    fd3c:	e011      	b.n	fd62 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    fd3e:	f008 fdb4 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    fd42:	f008 fdb2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd46:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    fd4a:	6866      	ldr	r6, [r4, #4]
    fd4c:	e017      	b.n	fd7e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    fd4e:	f008 fdac 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    fd52:	f008 fdaa 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd56:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    fd5a:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    fd5c:	42b4      	cmp	r4, r6
    fd5e:	d119      	bne.n	fd94 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    fd60:	3201      	adds	r2, #1
    fd62:	4295      	cmp	r5, r2
    fd64:	dd18      	ble.n	fd98 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    fd66:	4290      	cmp	r0, r2
    fd68:	d0fa      	beq.n	fd60 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    fd6a:	2a00      	cmp	r2, #0
    fd6c:	dbe7      	blt.n	fd3e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    fd6e:	680c      	ldr	r4, [r1, #0]
    fd70:	42a2      	cmp	r2, r4
    fd72:	dae6      	bge.n	fd42 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd74:	2c05      	cmp	r4, #5
    fd76:	dde6      	ble.n	fd46 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    fd78:	684c      	ldr	r4, [r1, #4]
    fd7a:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    fd7e:	2a00      	cmp	r2, #0
    fd80:	dbe5      	blt.n	fd4e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    fd82:	681c      	ldr	r4, [r3, #0]
    fd84:	42a2      	cmp	r2, r4
    fd86:	dae4      	bge.n	fd52 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd88:	2c05      	cmp	r4, #5
    fd8a:	dde4      	ble.n	fd56 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    fd8c:	685c      	ldr	r4, [r3, #4]
    fd8e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    fd92:	e7e3      	b.n	fd5c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    fd94:	f008 fd89 	bl	188aa <abort>
  inline int32_t DimensionsCount() const { return size_; }
    fd98:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    fd9a:	2800      	cmp	r0, #0
    fd9c:	db08      	blt.n	fdb0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    fd9e:	42a8      	cmp	r0, r5
    fda0:	da06      	bge.n	fdb0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fda2:	2d05      	cmp	r5, #5
    fda4:	dd06      	ble.n	fdb4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    fda6:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    fda8:	2200      	movs	r2, #0
  int flat_size = 1;
    fdaa:	2401      	movs	r4, #1
    fdac:	46ac      	mov	ip, r5
    fdae:	e007      	b.n	fdc0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    fdb0:	f008 fd7b 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fdb4:	1d0e      	adds	r6, r1, #4
    fdb6:	e7f7      	b.n	fda8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    fdb8:	2501      	movs	r5, #1
    fdba:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    fdbe:	3201      	adds	r2, #1
    fdc0:	4594      	cmp	ip, r2
    fdc2:	dd04      	ble.n	fdce <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    fdc4:	4290      	cmp	r0, r2
    fdc6:	d0f7      	beq.n	fdb8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    fdc8:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    fdcc:	e7f5      	b.n	fdba <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    fdce:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    fdd0:	2800      	cmp	r0, #0
    fdd2:	db2e      	blt.n	fe32 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    fdd4:	680a      	ldr	r2, [r1, #0]
    fdd6:	4290      	cmp	r0, r2
    fdd8:	da2d      	bge.n	fe36 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fdda:	2a05      	cmp	r2, #5
    fddc:	dd2d      	ble.n	fe3a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    fdde:	684a      	ldr	r2, [r1, #4]
    fde0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    fde4:	2800      	cmp	r0, #0
    fde6:	db2c      	blt.n	fe42 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    fde8:	6819      	ldr	r1, [r3, #0]
    fdea:	4288      	cmp	r0, r1
    fdec:	da2b      	bge.n	fe46 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fdee:	2905      	cmp	r1, #5
    fdf0:	dd2b      	ble.n	fe4a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    fdf2:	6859      	ldr	r1, [r3, #4]
    fdf4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    fdf8:	4291      	cmp	r1, r2
    fdfa:	d12a      	bne.n	fe52 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    fdfc:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    fdfe:	2800      	cmp	r0, #0
    fe00:	db29      	blt.n	fe56 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    fe02:	6819      	ldr	r1, [r3, #0]
    fe04:	4288      	cmp	r0, r1
    fe06:	da28      	bge.n	fe5a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fe08:	2905      	cmp	r1, #5
    fe0a:	dd28      	ble.n	fe5e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    fe0c:	685b      	ldr	r3, [r3, #4]
    fe0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    fe12:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    fe14:	429a      	cmp	r2, r3
    fe16:	dc26      	bgt.n	fe66 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    fe18:	ab0f      	add	r3, sp, #60	; 0x3c
    fe1a:	f8d3 b000 	ldr.w	fp, [r3]
  for (int i = 0; i < outer_size; ++i) {
    fe1e:	f04f 0a00 	mov.w	sl, #0
    fe22:	4642      	mov	r2, r8
    fe24:	46d0      	mov	r8, sl
    fe26:	9702      	str	r7, [sp, #8]
    fe28:	464b      	mov	r3, r9
    fe2a:	46d9      	mov	r9, fp
    fe2c:	469b      	mov	fp, r3
    fe2e:	4692      	mov	sl, r2
    fe30:	e158      	b.n	100e4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c0>
    TFLITE_DCHECK_GE(i, 0);
    fe32:	f008 fd3a 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    fe36:	f008 fd38 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fe3a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    fe3e:	684a      	ldr	r2, [r1, #4]
    fe40:	e7d0      	b.n	fde4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    fe42:	f008 fd32 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    fe46:	f008 fd30 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fe4a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    fe4e:	6849      	ldr	r1, [r1, #4]
    fe50:	e7d2      	b.n	fdf8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    fe52:	f008 fd2a 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
    fe56:	f008 fd28 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
    fe5a:	f008 fd26 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fe5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    fe62:	685b      	ldr	r3, [r3, #4]
    fe64:	e7d5      	b.n	fe12 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    fe66:	ab0e      	add	r3, sp, #56	; 0x38
    fe68:	e7d7      	b.n	fe1a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fe6a:	f991 2000 	ldrsb.w	r2, [r1]
    fe6e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    fe72:	3301      	adds	r3, #1
    fe74:	454b      	cmp	r3, r9
    fe76:	da0c      	bge.n	fe92 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fe78:	fb09 3208 	mla	r2, r9, r8, r3
    fe7c:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    fe80:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    fe84:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    fe88:	4282      	cmp	r2, r0
    fe8a:	dcee      	bgt.n	fe6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    fe8c:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    fe90:	e7eb      	b.n	fe6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    fe92:	2000      	movs	r0, #0
    fe94:	f005 ff83 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    fe98:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    fe9a:	2400      	movs	r4, #0
    fe9c:	9f06      	ldr	r7, [sp, #24]
    fe9e:	9e02      	ldr	r6, [sp, #8]
    fea0:	e01a      	b.n	fed8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fea2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fea6:	d002      	beq.n	feae <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    fea8:	f04f 0c00 	mov.w	ip, #0
    feac:	e024      	b.n	fef8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    feae:	f04f 0c01 	mov.w	ip, #1
    feb2:	e021      	b.n	fef8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    feb4:	4991      	ldr	r1, [pc, #580]	; (100fc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
    feb6:	e02f      	b.n	ff18 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    feb8:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    feba:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    febe:	f1bc 0f00 	cmp.w	ip, #0
    fec2:	d13a      	bne.n	ff3a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    fec4:	f7ff f894 	bl	eff0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    fec8:	f007 fa75 	bl	173b6 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    fecc:	4601      	mov	r1, r0
    fece:	4628      	mov	r0, r5
    fed0:	f007 fa2d 	bl	1732e <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    fed4:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    fed6:	3401      	adds	r4, #1
    fed8:	454c      	cmp	r4, r9
    feda:	da31      	bge.n	ff40 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fedc:	fb09 4308 	mla	r3, r9, r8, r4
    fee0:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    fee4:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    fee8:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    feea:	4296      	cmp	r6, r2
    feec:	dcf3      	bgt.n	fed6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    feee:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fef0:	4592      	cmp	sl, r2
    fef2:	d0d6      	beq.n	fea2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    fef4:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    fef8:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    fefa:	fb0a f301 	mul.w	r3, sl, r1
    fefe:	4650      	mov	r0, sl
    ff00:	17c1      	asrs	r1, r0, #31
    ff02:	fb02 3101 	mla	r1, r2, r1, r3
    ff06:	fbaa 2302 	umull	r2, r3, sl, r2
    ff0a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ff0c:	2a00      	cmp	r2, #0
    ff0e:	f173 0100 	sbcs.w	r1, r3, #0
    ff12:	dbcf      	blt.n	feb4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    ff14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ff18:	1852      	adds	r2, r2, r1
    ff1a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ff1e:	4611      	mov	r1, r2
    ff20:	4618      	mov	r0, r3
    ff22:	2a00      	cmp	r2, #0
    ff24:	f173 0e00 	sbcs.w	lr, r3, #0
    ff28:	dac6      	bge.n	feb8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    ff2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ff2e:	1851      	adds	r1, r2, r1
    ff30:	f04f 0000 	mov.w	r0, #0
    ff34:	eb43 0000 	adc.w	r0, r3, r0
    ff38:	e7be      	b.n	feb8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ff3a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ff3e:	e7c1      	b.n	fec4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    ff40:	4628      	mov	r0, r5
    ff42:	f007 f901 	bl	17148 <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    ff46:	f1c0 030c 	rsb	r3, r0, #12
    ff4a:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    ff4c:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    ff50:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    ff54:	f7fe fe96 	bl	ec84 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    ff58:	9008      	str	r0, [sp, #32]
    for (int c = 0; c < depth; ++c) {
    ff5a:	2600      	movs	r6, #0
    ff5c:	f8cd 8000 	str.w	r8, [sp]
    ff60:	4657      	mov	r7, sl
    ff62:	46ca      	mov	sl, r9
    ff64:	f8cd b004 	str.w	fp, [sp, #4]
    ff68:	e029      	b.n	ffbe <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ff6a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ff6e:	d001      	beq.n	ff74 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    ff70:	2500      	movs	r5, #0
    ff72:	e037      	b.n	ffe4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
    ff74:	2501      	movs	r5, #1
    ff76:	e035      	b.n	ffe4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ff78:	4960      	ldr	r1, [pc, #384]	; (100fc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
    ff7a:	e043      	b.n	10004 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ff7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ff80:	1851      	adds	r1, r2, r1
    ff82:	f04f 0000 	mov.w	r0, #0
    ff86:	eb43 0000 	adc.w	r0, r3, r0
    ff8a:	e044      	b.n	10016 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ff8c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ff90:	e046      	b.n	10020 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2fc>
  assert(exponent >= 0);
    ff92:	4b5b      	ldr	r3, [pc, #364]	; (10100 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
    ff94:	4a5b      	ldr	r2, [pc, #364]	; (10104 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    ff96:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ff9a:	485b      	ldr	r0, [pc, #364]	; (10108 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    ff9c:	f002 fc76 	bl	1288c <__assert_func>
  assert(exponent <= 31);
    ffa0:	4b5a      	ldr	r3, [pc, #360]	; (1010c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    ffa2:	4a58      	ldr	r2, [pc, #352]	; (10104 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    ffa4:	f240 1167 	movw	r1, #359	; 0x167
    ffa8:	4857      	ldr	r0, [pc, #348]	; (10108 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    ffaa:	f002 fc6f 	bl	1288c <__assert_func>
	return __b;
    ffae:	ab0c      	add	r3, sp, #48	; 0x30
    ffb0:	e084      	b.n	100bc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>
	return __b;
    ffb2:	ab0d      	add	r3, sp, #52	; 0x34
    ffb4:	e08a      	b.n	100cc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a8>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    ffb6:	2380      	movs	r3, #128	; 0x80
    ffb8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ffba:	5513      	strb	r3, [r2, r4]
    for (int c = 0; c < depth; ++c) {
    ffbc:	3601      	adds	r6, #1
    ffbe:	4556      	cmp	r6, sl
    ffc0:	f280 8088 	bge.w	100d4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    ffc4:	9b00      	ldr	r3, [sp, #0]
    ffc6:	fb0a 6403 	mla	r4, sl, r3, r6
    ffca:	9b01      	ldr	r3, [sp, #4]
    ffcc:	571a      	ldrsb	r2, [r3, r4]
    ffce:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    ffd2:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    ffd4:	9b02      	ldr	r3, [sp, #8]
    ffd6:	4293      	cmp	r3, r2
    ffd8:	dced      	bgt.n	ffb6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    ffda:	9b06      	ldr	r3, [sp, #24]
    ffdc:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ffde:	4297      	cmp	r7, r2
    ffe0:	d0c3      	beq.n	ff6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    ffe2:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    ffe4:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    ffe6:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    ffea:	fb02 f309 	mul.w	r3, r2, r9
    ffee:	fb07 3101 	mla	r1, r7, r1, r3
    fff2:	fba2 2307 	umull	r2, r3, r2, r7
    fff6:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fff8:	2a00      	cmp	r2, #0
    fffa:	f173 0100 	sbcs.w	r1, r3, #0
    fffe:	dbbb      	blt.n	ff78 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
   10000:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   10004:	1852      	adds	r2, r2, r1
   10006:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1000a:	4611      	mov	r1, r2
   1000c:	4618      	mov	r0, r3
   1000e:	2a00      	cmp	r2, #0
   10010:	f173 0c00 	sbcs.w	ip, r3, #0
   10014:	dbb2      	blt.n	ff7c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
   10016:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
   10018:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1001c:	2d00      	cmp	r5, #0
   1001e:	d1b5      	bne.n	ff8c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   10020:	f7fe ffe6 	bl	eff0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   10024:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   10026:	9808      	ldr	r0, [sp, #32]
   10028:	f7fe fed4 	bl	edd4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
   1002c:	4605      	mov	r5, r0
  assert(exponent >= 0);
   1002e:	9b07      	ldr	r3, [sp, #28]
   10030:	f113 0917 	adds.w	r9, r3, #23
   10034:	d4ad      	bmi.n	ff92 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
   10036:	f1b9 0f1f 	cmp.w	r9, #31
   1003a:	dcb1      	bgt.n	ffa0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1003c:	f04f 0b01 	mov.w	fp, #1
   10040:	fa0b f009 	lsl.w	r0, fp, r9
   10044:	3801      	subs	r0, #1
   10046:	f005 feaa 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1004a:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
   1004c:	2000      	movs	r0, #0
   1004e:	f005 fea6 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   10052:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
   10054:	4658      	mov	r0, fp
   10056:	f005 fea2 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1005a:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
   1005c:	4641      	mov	r1, r8
   1005e:	4628      	mov	r0, r5
   10060:	f005 fe9e 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   10064:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   10066:	4659      	mov	r1, fp
   10068:	4640      	mov	r0, r8
   1006a:	f005 fe9b 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1006e:	4680      	mov	r8, r0
   10070:	9903      	ldr	r1, [sp, #12]
   10072:	4628      	mov	r0, r5
   10074:	f005 fea2 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   10078:	f8dd b010 	ldr.w	fp, [sp, #16]
   1007c:	4659      	mov	r1, fp
   1007e:	f005 fe8f 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   10082:	4601      	mov	r1, r0
   10084:	4640      	mov	r0, r8
   10086:	f005 fe8f 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   1008a:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
   1008c:	4649      	mov	r1, r9
   1008e:	4628      	mov	r0, r5
   10090:	f005 fe88 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   10094:	4605      	mov	r5, r0
   10096:	4641      	mov	r1, r8
   10098:	9805      	ldr	r0, [sp, #20]
   1009a:	f005 fe97 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   1009e:	4659      	mov	r1, fp
   100a0:	f005 fe7e 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   100a4:	4601      	mov	r1, r0
   100a6:	4628      	mov	r0, r5
   100a8:	f005 fe7e 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
   100ac:	3880      	subs	r0, #128	; 0x80
        const int32_t shifted_output =
   100ae:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   100b0:	237f      	movs	r3, #127	; 0x7f
   100b2:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
   100b4:	4298      	cmp	r0, r3
   100b6:	f73f af7a 	bgt.w	ffae <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
   100ba:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
   100bc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   100c0:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
   100c2:	681a      	ldr	r2, [r3, #0]
   100c4:	f112 0f80 	cmn.w	r2, #128	; 0x80
   100c8:	f6ff af73 	blt.w	ffb2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   100cc:	681b      	ldr	r3, [r3, #0]
   100ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   100d0:	5513      	strb	r3, [r2, r4]
   100d2:	e773      	b.n	ffbc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x298>
   100d4:	f8dd 8000 	ldr.w	r8, [sp]
   100d8:	46d1      	mov	r9, sl
   100da:	46ba      	mov	sl, r7
   100dc:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   100e0:	f108 0801 	add.w	r8, r8, #1
   100e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   100e6:	4598      	cmp	r8, r3
   100e8:	da04      	bge.n	100f4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d0>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   100ea:	2380      	movs	r3, #128	; 0x80
   100ec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
   100f0:	2300      	movs	r3, #0
   100f2:	e6bf      	b.n	fe74 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
}
   100f4:	b011      	add	sp, #68	; 0x44
   100f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100fa:	bf00      	nop
   100fc:	c0000001 	.word	0xc0000001
   10100:	000343c4 	.word	0x000343c4
   10104:	000343d4 	.word	0x000343d4
   10108:	0003442c 	.word	0x0003442c
   1010c:	00034488 	.word	0x00034488

00010110 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
   10110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10114:	b0bf      	sub	sp, #252	; 0xfc
   10116:	4604      	mov	r4, r0
   10118:	460d      	mov	r5, r1
   1011a:	4693      	mov	fp, r2
  if (input->type == kTfLiteInt8) {
   1011c:	7a03      	ldrb	r3, [r0, #8]
   1011e:	2b09      	cmp	r3, #9
   10120:	d152      	bne.n	101c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xb8>
    if (output->type == kTfLiteInt16) {
   10122:	7a0b      	ldrb	r3, [r1, #8]
   10124:	2b07      	cmp	r3, #7
   10126:	d027      	beq.n	10178 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x68>
          op_data, tflite::micro::GetTensorShape(input),
   10128:	4601      	mov	r1, r0
   1012a:	a81e      	add	r0, sp, #120	; 0x78
   1012c:	f006 ffe2 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10130:	4620      	mov	r0, r4
   10132:	f005 fe2a 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   10136:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
   10138:	4629      	mov	r1, r5
   1013a:	a824      	add	r0, sp, #144	; 0x90
   1013c:	f006 ffda 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10140:	4628      	mov	r0, r5
   10142:	f005 fe28 	bl	15d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   10146:	9000      	str	r0, [sp, #0]
   10148:	ab24      	add	r3, sp, #144	; 0x90
   1014a:	4622      	mov	r2, r4
   1014c:	a91e      	add	r1, sp, #120	; 0x78
   1014e:	4658      	mov	r0, fp
   10150:	f7ff fde8 	bl	fd24 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
   10154:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10156:	2b05      	cmp	r3, #5
   10158:	dd03      	ble.n	10162 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
      delete[] dims_pointer_;
   1015a:	9825      	ldr	r0, [sp, #148]	; 0x94
   1015c:	b108      	cbz	r0, 10162 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
   1015e:	f008 fb8f 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   10162:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10164:	2b05      	cmp	r3, #5
   10166:	f340 828b 	ble.w	10680 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   1016a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1016c:	2800      	cmp	r0, #0
   1016e:	f000 8287 	beq.w	10680 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   10172:	f008 fb85 	bl	18880 <_ZdaPv>
   10176:	e283      	b.n	10680 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
          op_data, tflite::micro::GetTensorShape(input),
   10178:	4601      	mov	r1, r0
   1017a:	a812      	add	r0, sp, #72	; 0x48
   1017c:	f006 ffba 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10180:	4620      	mov	r0, r4
   10182:	f005 fe02 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   10186:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
   10188:	4629      	mov	r1, r5
   1018a:	a818      	add	r0, sp, #96	; 0x60
   1018c:	f006 ffb2 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10190:	4628      	mov	r0, r5
   10192:	f006 f9ff 	bl	16594 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
   10196:	9000      	str	r0, [sp, #0]
   10198:	ab18      	add	r3, sp, #96	; 0x60
   1019a:	4622      	mov	r2, r4
   1019c:	a912      	add	r1, sp, #72	; 0x48
   1019e:	4658      	mov	r0, fp
   101a0:	f7ff fbc4 	bl	f92c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
   101a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   101a6:	2b05      	cmp	r3, #5
   101a8:	dd03      	ble.n	101b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
      delete[] dims_pointer_;
   101aa:	9819      	ldr	r0, [sp, #100]	; 0x64
   101ac:	b108      	cbz	r0, 101b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
   101ae:	f008 fb67 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   101b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   101b4:	2b05      	cmp	r3, #5
   101b6:	f340 8263 	ble.w	10680 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   101ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
   101bc:	2800      	cmp	r0, #0
   101be:	f000 825f 	beq.w	10680 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   101c2:	f008 fb5d 	bl	18880 <_ZdaPv>
   101c6:	e25b      	b.n	10680 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
        op_data, tflite::micro::GetTensorShape(input),
   101c8:	4601      	mov	r1, r0
   101ca:	a82a      	add	r0, sp, #168	; 0xa8
   101cc:	f006 ff92 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
   101d0:	4620      	mov	r0, r4
   101d2:	f006 f9d9 	bl	16588 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
   101d6:	9005      	str	r0, [sp, #20]
        tflite::micro::GetTensorShape(output),
   101d8:	4629      	mov	r1, r5
   101da:	a830      	add	r0, sp, #192	; 0xc0
   101dc:	f006 ff8a 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
   101e0:	4628      	mov	r0, r5
   101e2:	f006 f9d7 	bl	16594 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
   101e6:	9006      	str	r0, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   101e8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   101ea:	1e62      	subs	r2, r4, #1
  for (int i = 0; i < dims_count; ++i) {
   101ec:	2300      	movs	r3, #0
   101ee:	e015      	b.n	1021c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10c>
    TFLITE_DCHECK_GE(i, 0);
   101f0:	f008 fb5b 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   101f4:	f008 fb59 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   101f8:	a93e      	add	r1, sp, #248	; 0xf8
   101fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   101fe:	f851 1c4c 	ldr.w	r1, [r1, #-76]
   10202:	e019      	b.n	10238 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x128>
    TFLITE_DCHECK_GE(i, 0);
   10204:	f008 fb51 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   10208:	f008 fb4f 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1020c:	a83e      	add	r0, sp, #248	; 0xf8
   1020e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   10212:	f850 0c34 	ldr.w	r0, [r0, #-52]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10216:	4288      	cmp	r0, r1
   10218:	d119      	bne.n	1024e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x13e>
  for (int i = 0; i < dims_count; ++i) {
   1021a:	3301      	adds	r3, #1
   1021c:	429c      	cmp	r4, r3
   1021e:	dd18      	ble.n	10252 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x142>
    if (i != skip_dim) {
   10220:	429a      	cmp	r2, r3
   10222:	d0fa      	beq.n	1021a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
    TFLITE_DCHECK_GE(i, 0);
   10224:	2b00      	cmp	r3, #0
   10226:	dbe3      	blt.n	101f0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe0>
    TFLITE_DCHECK_LT(i, size_);
   10228:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1022a:	428b      	cmp	r3, r1
   1022c:	dae2      	bge.n	101f4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1022e:	2905      	cmp	r1, #5
   10230:	dde2      	ble.n	101f8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe8>
   10232:	992b      	ldr	r1, [sp, #172]	; 0xac
   10234:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10238:	2b00      	cmp	r3, #0
   1023a:	dbe3      	blt.n	10204 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   1023c:	9830      	ldr	r0, [sp, #192]	; 0xc0
   1023e:	4283      	cmp	r3, r0
   10240:	dae2      	bge.n	10208 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10242:	2805      	cmp	r0, #5
   10244:	dde2      	ble.n	1020c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xfc>
   10246:	9831      	ldr	r0, [sp, #196]	; 0xc4
   10248:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1024c:	e7e3      	b.n	10216 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x106>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1024e:	f008 fb2c 	bl	188aa <abort>
  inline int32_t DimensionsCount() const { return size_; }
   10252:	982a      	ldr	r0, [sp, #168]	; 0xa8
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10254:	2a00      	cmp	r2, #0
   10256:	db05      	blt.n	10264 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
   10258:	4282      	cmp	r2, r0
   1025a:	da03      	bge.n	10264 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1025c:	2805      	cmp	r0, #5
   1025e:	dd03      	ble.n	10268 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x158>
   10260:	9c2b      	ldr	r4, [sp, #172]	; 0xac
   10262:	e002      	b.n	1026a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10264:	f008 fb21 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   10268:	ac2b      	add	r4, sp, #172	; 0xac
  for (int i = 0; i < dims_count; ++i) {
   1026a:	2300      	movs	r3, #0
  int flat_size = 1;
   1026c:	2501      	movs	r5, #1
   1026e:	e004      	b.n	1027a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x16a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   10270:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   10274:	fb01 f505 	mul.w	r5, r1, r5
  for (int i = 0; i < dims_count; ++i) {
   10278:	3301      	adds	r3, #1
   1027a:	4298      	cmp	r0, r3
   1027c:	dd03      	ble.n	10286 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x176>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   1027e:	429a      	cmp	r2, r3
   10280:	d1f6      	bne.n	10270 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x160>
   10282:	2101      	movs	r1, #1
   10284:	e7f6      	b.n	10274 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x164>
   10286:	950d      	str	r5, [sp, #52]	; 0x34
    TFLITE_DCHECK_GE(i, 0);
   10288:	2a00      	cmp	r2, #0
   1028a:	db2a      	blt.n	102e2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d2>
    TFLITE_DCHECK_LT(i, size_);
   1028c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1028e:	429a      	cmp	r2, r3
   10290:	da29      	bge.n	102e6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10292:	2b05      	cmp	r3, #5
   10294:	dd29      	ble.n	102ea <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1da>
   10296:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   1029c:	2a00      	cmp	r2, #0
   1029e:	db2a      	blt.n	102f6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1e6>
    TFLITE_DCHECK_LT(i, size_);
   102a0:	9930      	ldr	r1, [sp, #192]	; 0xc0
   102a2:	428a      	cmp	r2, r1
   102a4:	da29      	bge.n	102fa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   102a6:	2905      	cmp	r1, #5
   102a8:	dd29      	ble.n	102fe <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ee>
   102aa:	9931      	ldr	r1, [sp, #196]	; 0xc4
   102ac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   102b0:	4299      	cmp	r1, r3
   102b2:	d12a      	bne.n	1030a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fa>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   102b4:	933b      	str	r3, [sp, #236]	; 0xec
    TFLITE_DCHECK_GE(i, 0);
   102b6:	2a00      	cmp	r2, #0
   102b8:	db29      	blt.n	1030e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fe>
    TFLITE_DCHECK_LT(i, size_);
   102ba:	9930      	ldr	r1, [sp, #192]	; 0xc0
   102bc:	428a      	cmp	r2, r1
   102be:	da28      	bge.n	10312 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   102c0:	2905      	cmp	r1, #5
   102c2:	dd28      	ble.n	10316 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x206>
   102c4:	9931      	ldr	r1, [sp, #196]	; 0xc4
   102c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   102ca:	923a      	str	r2, [sp, #232]	; 0xe8
      if (__b < __a)
   102cc:	4293      	cmp	r3, r2
   102ce:	dc28      	bgt.n	10322 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x212>
      return __a;
   102d0:	ab3b      	add	r3, sp, #236	; 0xec
   102d2:	f8d3 a000 	ldr.w	sl, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
   102d6:	f04f 0800 	mov.w	r8, #0
   102da:	46c1      	mov	r9, r8
   102dc:	46d8      	mov	r8, fp
   102de:	46d3      	mov	fp, sl
   102e0:	e1b6      	b.n	10650 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x540>
    TFLITE_DCHECK_GE(i, 0);
   102e2:	f008 fae2 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   102e6:	f008 fae0 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   102ea:	ab3e      	add	r3, sp, #248	; 0xf8
   102ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   102f0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
   102f4:	e7d2      	b.n	1029c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x18c>
    TFLITE_DCHECK_GE(i, 0);
   102f6:	f008 fad8 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   102fa:	f008 fad6 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   102fe:	a93e      	add	r1, sp, #248	; 0xf8
   10300:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   10304:	f851 1c34 	ldr.w	r1, [r1, #-52]
   10308:	e7d2      	b.n	102b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1a0>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1030a:	f008 face 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
   1030e:	f008 facc 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   10312:	f008 faca 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10316:	a93e      	add	r1, sp, #248	; 0xf8
   10318:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1031c:	f852 2c34 	ldr.w	r2, [r2, #-52]
   10320:	e7d3      	b.n	102ca <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ba>
	return __b;
   10322:	ab3a      	add	r3, sp, #232	; 0xe8
   10324:	e7d5      	b.n	102d2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1c2>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   10326:	f9b2 2000 	ldrsh.w	r2, [r2]
   1032a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
   1032e:	3301      	adds	r3, #1
   10330:	455b      	cmp	r3, fp
   10332:	da0c      	bge.n	1034e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x23e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   10334:	fb0b 3109 	mla	r1, fp, r9, r3
   10338:	eb00 0241 	add.w	r2, r0, r1, lsl #1
      if (__a < __b)
   1033c:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
   10340:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
   10344:	428c      	cmp	r4, r1
   10346:	dbee      	blt.n	10326 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
      return __a;
   10348:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
   1034c:	e7eb      	b.n	10326 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
   1034e:	fb0b f309 	mul.w	r3, fp, r9
   10352:	9307      	str	r3, [sp, #28]
   10354:	9a06      	ldr	r2, [sp, #24]
   10356:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1035a:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   1035c:	2600      	movs	r6, #0
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
   1035e:	46b2      	mov	sl, r6
   10360:	f8cd 9010 	str.w	r9, [sp, #16]
   10364:	e07c      	b.n	10460 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x350>
  int right_shift = shift > 0 ? 0 : -shift;
   10366:	426d      	negs	r5, r5
   10368:	e091      	b.n	1048e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x37e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1036a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1036e:	d001      	beq.n	10374 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x264>
   10370:	2700      	movs	r7, #0
   10372:	e091      	b.n	10498 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
   10374:	2701      	movs	r7, #1
   10376:	e08f      	b.n	10498 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   10378:	49c3      	ldr	r1, [pc, #780]	; (10688 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x578>)
   1037a:	e0a1      	b.n	104c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3b0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1037c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
   1037e:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   10382:	2f00      	cmp	r7, #0
   10384:	f040 80ae 	bne.w	104e4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3d4>
  assert(exponent >= 0);
   10388:	2d00      	cmp	r5, #0
   1038a:	f2c0 80ae 	blt.w	104ea <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3da>
  assert(exponent <= 31);
   1038e:	2d1f      	cmp	r5, #31
   10390:	f300 80b2 	bgt.w	104f8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3e8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   10394:	2701      	movs	r7, #1
   10396:	fa07 f005 	lsl.w	r0, r7, r5
   1039a:	3801      	subs	r0, #1
   1039c:	f005 fcff 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   103a0:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
   103a2:	2000      	movs	r0, #0
   103a4:	f005 fcfb 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   103a8:	9008      	str	r0, [sp, #32]
  const IntegerType one = Dup<IntegerType>(1);
   103aa:	4638      	mov	r0, r7
   103ac:	f005 fcf7 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   103b0:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType remainder = BitAnd(x, mask);
   103b2:	4649      	mov	r1, r9
   103b4:	4620      	mov	r0, r4
   103b6:	f005 fcf3 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   103ba:	900b      	str	r0, [sp, #44]	; 0x2c
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   103bc:	4639      	mov	r1, r7
   103be:	4648      	mov	r0, r9
   103c0:	f005 fcf0 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   103c4:	4681      	mov	r9, r0
   103c6:	9908      	ldr	r1, [sp, #32]
   103c8:	4620      	mov	r0, r4
   103ca:	f005 fcf7 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   103ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   103d0:	4639      	mov	r1, r7
   103d2:	f005 fce5 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   103d6:	4601      	mov	r1, r0
   103d8:	4648      	mov	r0, r9
   103da:	f005 fce5 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   103de:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
   103e0:	4629      	mov	r1, r5
   103e2:	4620      	mov	r0, r4
   103e4:	f005 fcde 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   103e8:	4604      	mov	r4, r0
   103ea:	4649      	mov	r1, r9
   103ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   103ee:	f005 fced 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   103f2:	4639      	mov	r1, r7
   103f4:	f005 fcd4 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   103f8:	4601      	mov	r1, r0
   103fa:	4620      	mov	r0, r4
   103fc:	f005 fcd4 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
  int32_t sym_scaled_diff = scaled_diff + 32767;
   10400:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
   10404:	307f      	adds	r0, #127	; 0x7f
   10406:	9011      	str	r0, [sp, #68]	; 0x44
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
   10408:	4ba0      	ldr	r3, [pc, #640]	; (1068c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
   1040a:	933d      	str	r3, [sp, #244]	; 0xf4
      if (__a < __b)
   1040c:	4298      	cmp	r0, r3
   1040e:	db7a      	blt.n	10506 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3f6>
      return __a;
   10410:	ab11      	add	r3, sp, #68	; 0x44
               static_cast<int32_t>(32767));
   10412:	f647 72ff 	movw	r2, #32767	; 0x7fff
   10416:	923c      	str	r2, [sp, #240]	; 0xf0
      if (__b < __a)
   10418:	681a      	ldr	r2, [r3, #0]
   1041a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1041e:	da74      	bge.n	1050a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fa>
   10420:	f9b3 3000 	ldrsh.w	r3, [r3]
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
   10424:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   10428:	11da      	asrs	r2, r3, #7
   1042a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1042e:	b292      	uxth	r2, r2
  assert(index < 512 && "LUT index out of range.");
   10430:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10434:	d26b      	bcs.n	1050e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fe>
  int16_t offset = value & 0x7f;
   10436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  int16_t base = lut[index];
   1043a:	f930 1012 	ldrsh.w	r1, [r0, r2, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
   1043e:	3201      	adds	r2, #1
   10440:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   10444:	1a52      	subs	r2, r2, r1
   10446:	b212      	sxth	r2, r2
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   10448:	fb03 f302 	mul.w	r3, r3, r2
   1044c:	3340      	adds	r3, #64	; 0x40
  return base + delta;
   1044e:	f343 13cf 	sbfx	r3, r3, #7, #16
   10452:	440b      	add	r3, r1
   10454:	b21b      	sxth	r3, r3
      exp_results_Q015[c] =
   10456:	9a03      	ldr	r2, [sp, #12]
   10458:	990c      	ldr	r1, [sp, #48]	; 0x30
   1045a:	5253      	strh	r3, [r2, r1]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
   1045c:	449a      	add	sl, r3
    for (int c = 0; c < depth; ++c) {
   1045e:	3601      	adds	r6, #1
   10460:	455e      	cmp	r6, fp
   10462:	da5b      	bge.n	1051c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x40c>
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
   10464:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
      exp_results_Q015[c] =
   10468:	0072      	lsls	r2, r6, #1
   1046a:	920c      	str	r2, [sp, #48]	; 0x30
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
   1046c:	9a04      	ldr	r2, [sp, #16]
   1046e:	fb0b 6202 	mla	r2, fp, r2, r6
   10472:	9905      	ldr	r1, [sp, #20]
   10474:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
   10478:	1ad2      	subs	r2, r2, r3
      input_diff, params.input_multiplier, params.input_left_shift);
   1047a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1047e:	f8d8 500c 	ldr.w	r5, [r8, #12]
  int left_shift = shift > 0 ? shift : 0;
   10482:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   10486:	2d00      	cmp	r5, #0
   10488:	f77f af6d 	ble.w	10366 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x256>
   1048c:	2500      	movs	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1048e:	408a      	lsls	r2, r1
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   10490:	4293      	cmp	r3, r2
   10492:	f43f af6a 	beq.w	1036a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x25a>
   10496:	2700      	movs	r7, #0
  std::int64_t a_64(a);
   10498:	4610      	mov	r0, r2
   1049a:	17d1      	asrs	r1, r2, #31
   1049c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  std::int64_t b_64(b);
   104a0:	17d9      	asrs	r1, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
   104a2:	fb02 f001 	mul.w	r0, r2, r1
   104a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   104a8:	fb03 0101 	mla	r1, r3, r1, r0
   104ac:	fba2 2303 	umull	r2, r3, r2, r3
   104b0:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   104b2:	2a00      	cmp	r2, #0
   104b4:	f173 0100 	sbcs.w	r1, r3, #0
   104b8:	f6ff af5e 	blt.w	10378 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x268>
   104bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   104c0:	1852      	adds	r2, r2, r1
   104c2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   104c6:	4611      	mov	r1, r2
   104c8:	461c      	mov	r4, r3
   104ca:	2a00      	cmp	r2, #0
   104cc:	f173 0000 	sbcs.w	r0, r3, #0
   104d0:	f6bf af54 	bge.w	1037c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
   104d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   104d8:	1851      	adds	r1, r2, r1
   104da:	f04f 0400 	mov.w	r4, #0
   104de:	eb43 0404 	adc.w	r4, r3, r4
   104e2:	e74b      	b.n	1037c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   104e4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   104e8:	e74e      	b.n	10388 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x278>
  assert(exponent >= 0);
   104ea:	4b69      	ldr	r3, [pc, #420]	; (10690 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x580>)
   104ec:	4a69      	ldr	r2, [pc, #420]	; (10694 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
   104ee:	f44f 71b3 	mov.w	r1, #358	; 0x166
   104f2:	4869      	ldr	r0, [pc, #420]	; (10698 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
   104f4:	f002 f9ca 	bl	1288c <__assert_func>
  assert(exponent <= 31);
   104f8:	4b68      	ldr	r3, [pc, #416]	; (1069c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x58c>)
   104fa:	4a66      	ldr	r2, [pc, #408]	; (10694 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
   104fc:	f240 1167 	movw	r1, #359	; 0x167
   10500:	4865      	ldr	r0, [pc, #404]	; (10698 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
   10502:	f002 f9c3 	bl	1288c <__assert_func>
	return __b;
   10506:	ab3d      	add	r3, sp, #244	; 0xf4
   10508:	e783      	b.n	10412 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x302>
	return __b;
   1050a:	ab3c      	add	r3, sp, #240	; 0xf0
   1050c:	e788      	b.n	10420 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x310>
  assert(index < 512 && "LUT index out of range.");
   1050e:	4b64      	ldr	r3, [pc, #400]	; (106a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
   10510:	4a64      	ldr	r2, [pc, #400]	; (106a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
   10512:	f44f 71ac 	mov.w	r1, #344	; 0x158
   10516:	4864      	ldr	r0, [pc, #400]	; (106a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
   10518:	f002 f9b8 	bl	1288c <__assert_func>
   1051c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
   10520:	4650      	mov	r0, sl
   10522:	f006 fe11 	bl	17148 <_ZN6tflite17CountLeadingZerosIjEEiT_>
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
   10526:	4652      	mov	r2, sl
   10528:	17d3      	asrs	r3, r2, #31
   1052a:	b2c1      	uxtb	r1, r0
   1052c:	1e4d      	subs	r5, r1, #1
   1052e:	f1a1 0421 	sub.w	r4, r1, #33	; 0x21
   10532:	f1c1 0121 	rsb	r1, r1, #33	; 0x21
   10536:	fa03 f205 	lsl.w	r2, r3, r5
   1053a:	fa0a f404 	lsl.w	r4, sl, r4
   1053e:	4322      	orrs	r2, r4
   10540:	fa2a f101 	lsr.w	r1, sl, r1
   10544:	430a      	orrs	r2, r1
   10546:	fa0a f305 	lsl.w	r3, sl, r5
   1054a:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
   1054e:	f142 0200 	adc.w	r2, r2, #0
         (1 << 13)) >>
   10552:	0b9b      	lsrs	r3, r3, #14
   10554:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
   10558:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
   1055c:	9310      	str	r3, [sp, #64]	; 0x40
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
   1055e:	4a4b      	ldr	r2, [pc, #300]	; (1068c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
   10560:	9239      	str	r2, [sp, #228]	; 0xe4
      if (__a < __b)
   10562:	4293      	cmp	r3, r2
   10564:	db25      	blt.n	105b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a2>
      return __a;
   10566:	ab10      	add	r3, sp, #64	; 0x40
                 static_cast<int32_t>(32767)));
   10568:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1056c:	9238      	str	r2, [sp, #224]	; 0xe0
      if (__b < __a)
   1056e:	681a      	ldr	r2, [r3, #0]
   10570:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   10574:	da1f      	bge.n	105b6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a6>
   10576:	f9b3 2000 	ldrsh.w	r2, [r3]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
   1057a:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   1057e:	11d3      	asrs	r3, r2, #7
   10580:	f503 7380 	add.w	r3, r3, #256	; 0x100
   10584:	b29b      	uxth	r3, r3
  assert(index < 512 && "LUT index out of range.");
   10586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1058a:	d216      	bcs.n	105ba <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4aa>
  int16_t offset = value & 0x7f;
   1058c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  int16_t base = lut[index];
   10590:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
   10594:	3301      	adds	r3, #1
   10596:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
   1059a:	1b1b      	subs	r3, r3, r4
   1059c:	b21b      	sxth	r3, r3
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   1059e:	fb02 f303 	mul.w	r3, r2, r3
   105a2:	3340      	adds	r3, #64	; 0x40
  return base + delta;
   105a4:	f343 13cf 	sbfx	r3, r3, #7, #16
   105a8:	18e2      	adds	r2, r4, r3
   105aa:	b212      	sxth	r2, r2

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
   105ac:	2100      	movs	r1, #0
   105ae:	465f      	mov	r7, fp
   105b0:	e01e      	b.n	105f0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4e0>
	return __b;
   105b2:	ab39      	add	r3, sp, #228	; 0xe4
   105b4:	e7d8      	b.n	10568 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x458>
	return __b;
   105b6:	ab38      	add	r3, sp, #224	; 0xe0
   105b8:	e7dd      	b.n	10576 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x466>
  assert(index < 512 && "LUT index out of range.");
   105ba:	4b39      	ldr	r3, [pc, #228]	; (106a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
   105bc:	4a39      	ldr	r2, [pc, #228]	; (106a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
   105be:	f44f 71ac 	mov.w	r1, #344	; 0x158
   105c2:	4839      	ldr	r0, [pc, #228]	; (106a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
   105c4:	f002 f962 	bl	1288c <__assert_func>
      uint8_t right_shift = 31 - headroom_plus_one;
      int64_t round = 1 << (right_shift - 1);
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   105c8:	9311      	str	r3, [sp, #68]	; 0x44
                            static_cast<int64_t>(reciprocal_scale_Q015) +
                        round) >>
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
   105ca:	2400      	movs	r4, #0
   105cc:	9437      	str	r4, [sp, #220]	; 0xdc
      if (__a < __b)
   105ce:	42a3      	cmp	r3, r4
   105d0:	db37      	blt.n	10642 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x532>
      return __a;
   105d2:	ab11      	add	r3, sp, #68	; 0x44
                   static_cast<int32_t>(32767)));
   105d4:	f647 74ff 	movw	r4, #32767	; 0x7fff
   105d8:	9436      	str	r4, [sp, #216]	; 0xd8
      if (__b < __a)
   105da:	681c      	ldr	r4, [r3, #0]
   105dc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   105e0:	da31      	bge.n	10646 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x536>
          std::min(std::max(result, static_cast<int32_t>(0)),
   105e2:	681c      	ldr	r4, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
   105e4:	9b07      	ldr	r3, [sp, #28]
   105e6:	440b      	add	r3, r1
   105e8:	9d06      	ldr	r5, [sp, #24]
   105ea:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
   105ee:	3101      	adds	r1, #1
   105f0:	42b9      	cmp	r1, r7
   105f2:	da2a      	bge.n	1064a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x53a>
      uint8_t right_shift = 31 - headroom_plus_one;
   105f4:	f1c0 031f 	rsb	r3, r0, #31
   105f8:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
   105fa:	1e5c      	subs	r4, r3, #1
   105fc:	2601      	movs	r6, #1
   105fe:	40a6      	lsls	r6, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   10600:	9c03      	ldr	r4, [sp, #12]
   10602:	f934 4011 	ldrsh.w	r4, [r4, r1, lsl #1]
   10606:	17e5      	asrs	r5, r4, #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   10608:	fa0f fa82 	sxth.w	sl, r2
   1060c:	ea4f 7bea 	mov.w	fp, sl, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   10610:	fb04 fc0b 	mul.w	ip, r4, fp
   10614:	fb02 cc05 	mla	ip, r2, r5, ip
   10618:	fba4 450a 	umull	r4, r5, r4, sl
   1061c:	4465      	add	r5, ip
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   1061e:	19a4      	adds	r4, r4, r6
   10620:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
                        round) >>
   10624:	f1c3 0c20 	rsb	ip, r3, #32
   10628:	f1b3 0620 	subs.w	r6, r3, #32
   1062c:	fa24 f303 	lsr.w	r3, r4, r3
   10630:	fa05 fc0c 	lsl.w	ip, r5, ip
   10634:	ea43 030c 	orr.w	r3, r3, ip
   10638:	d4c6      	bmi.n	105c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
   1063a:	fa45 f606 	asr.w	r6, r5, r6
   1063e:	4333      	orrs	r3, r6
   10640:	e7c2      	b.n	105c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
	return __b;
   10642:	ab37      	add	r3, sp, #220	; 0xdc
   10644:	e7c6      	b.n	105d4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4c4>
	return __b;
   10646:	ab36      	add	r3, sp, #216	; 0xd8
   10648:	e7cb      	b.n	105e2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4d2>
   1064a:	46bb      	mov	fp, r7
  for (int i = 0; i < outer_size; ++i) {
   1064c:	f109 0901 	add.w	r9, r9, #1
   10650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10652:	4599      	cmp	r9, r3
   10654:	da06      	bge.n	10664 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x554>
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
   10656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1065a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
   1065e:	2300      	movs	r3, #0
   10660:	9805      	ldr	r0, [sp, #20]
   10662:	e665      	b.n	10330 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x220>
    if (size_ > kMaxSmallSize) {
   10664:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   10666:	2b05      	cmp	r3, #5
   10668:	dd03      	ble.n	10672 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
      delete[] dims_pointer_;
   1066a:	9831      	ldr	r0, [sp, #196]	; 0xc4
   1066c:	b108      	cbz	r0, 10672 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
   1066e:	f008 f907 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   10672:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10674:	2b05      	cmp	r3, #5
   10676:	dd03      	ble.n	10680 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   10678:	982b      	ldr	r0, [sp, #172]	; 0xac
   1067a:	b108      	cbz	r0, 10680 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   1067c:	f008 f900 	bl	18880 <_ZdaPv>
}
   10680:	b03f      	add	sp, #252	; 0xfc
   10682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10686:	bf00      	nop
   10688:	c0000001 	.word	0xc0000001
   1068c:	ffff8000 	.word	0xffff8000
   10690:	000343c4 	.word	0x000343c4
   10694:	000343d4 	.word	0x000343d4
   10698:	0003442c 	.word	0x0003442c
   1069c:	00034488 	.word	0x00034488
   106a0:	00034bc4 	.word	0x00034bc4
   106a4:	00034bf0 	.word	0x00034bf0
   106a8:	00034518 	.word	0x00034518

000106ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   106ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106b0:	b0a1      	sub	sp, #132	; 0x84
  TFLITE_DCHECK(context != nullptr);
   106b2:	2800      	cmp	r0, #0
   106b4:	d030      	beq.n	10718 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6c>
   106b6:	460c      	mov	r4, r1
   106b8:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   106ba:	2900      	cmp	r1, #0
   106bc:	d02e      	beq.n	1071c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   106be:	6d43      	ldr	r3, [r0, #84]	; 0x54
   106c0:	680a      	ldr	r2, [r1, #0]
   106c2:	6851      	ldr	r1, [r2, #4]
   106c4:	4798      	blx	r3
   106c6:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
   106c8:	b356      	cbz	r6, 10720 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
   106ca:	b35c      	cbz	r4, 10724 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   106cc:	6d73      	ldr	r3, [r6, #84]	; 0x54
   106ce:	6862      	ldr	r2, [r4, #4]
   106d0:	6851      	ldr	r1, [r2, #4]
   106d2:	4630      	mov	r0, r6
   106d4:	4798      	blx	r3
   106d6:	4681      	mov	r9, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   106d8:	6924      	ldr	r4, [r4, #16]
   106da:	b32c      	cbz	r4, 10728 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
   106dc:	ad04      	add	r5, sp, #16
   106de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   106e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   106e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   106e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   106e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   106e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   106ea:	e894 0003 	ldmia.w	r4, {r0, r1}
   106ee:	e885 0003 	stmia.w	r5, {r0, r1}
  switch (input->type) {
   106f2:	7a38      	ldrb	r0, [r7, #8]
   106f4:	2807      	cmp	r0, #7
   106f6:	f000 811a 	beq.w	1092e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
   106fa:	2809      	cmp	r0, #9
   106fc:	f000 8117 	beq.w	1092e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
   10700:	2801      	cmp	r0, #1
   10702:	d013      	beq.n	1072c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   10704:	6974      	ldr	r4, [r6, #20]
   10706:	f7f8 fcc1 	bl	908c <TfLiteTypeGetName>
   1070a:	4602      	mov	r2, r0
   1070c:	7a3b      	ldrb	r3, [r7, #8]
   1070e:	498c      	ldr	r1, [pc, #560]	; (10940 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>)
   10710:	4630      	mov	r0, r6
   10712:	47a0      	blx	r4
      return kTfLiteError;
   10714:	2001      	movs	r0, #1
   10716:	e110      	b.n	1093a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
  TFLITE_DCHECK(context != nullptr);
   10718:	f008 f8c7 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
   1071c:	f008 f8c5 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
   10720:	f008 f8c3 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
   10724:	f008 f8c1 	bl	188aa <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
   10728:	f008 f8bf 	bl	188aa <abort>
          op_data, tflite::micro::GetTensorShape(input),
   1072c:	4639      	mov	r1, r7
   1072e:	a812      	add	r0, sp, #72	; 0x48
   10730:	f006 fce0 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10734:	4638      	mov	r0, r7
   10736:	f005 fb1e 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   1073a:	4680      	mov	r8, r0
          tflite::micro::GetTensorShape(output),
   1073c:	4649      	mov	r1, r9
   1073e:	a818      	add	r0, sp, #96	; 0x60
   10740:	f006 fcd8 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10744:	4648      	mov	r0, r9
   10746:	f005 fb1c 	bl	15d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   1074a:	4681      	mov	r9, r0
  inline int32_t DimensionsCount() const { return size_; }
   1074c:	9812      	ldr	r0, [sp, #72]	; 0x48
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1074e:	1e44      	subs	r4, r0, #1
  for (int i = 0; i < dims_count; ++i) {
   10750:	2300      	movs	r3, #0
   10752:	e013      	b.n	1077c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    TFLITE_DCHECK_GE(i, 0);
   10754:	f008 f8a9 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   10758:	f008 f8a7 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1075c:	aa20      	add	r2, sp, #128	; 0x80
   1075e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   10762:	f852 2c34 	ldr.w	r2, [r2, #-52]
   10766:	e017      	b.n	10798 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
    TFLITE_DCHECK_GE(i, 0);
   10768:	f008 f89f 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   1076c:	f008 f89d 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10770:	9919      	ldr	r1, [sp, #100]	; 0x64
   10772:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10776:	4291      	cmp	r1, r2
   10778:	d11b      	bne.n	107b2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
  for (int i = 0; i < dims_count; ++i) {
   1077a:	3301      	adds	r3, #1
   1077c:	4298      	cmp	r0, r3
   1077e:	dd1a      	ble.n	107b6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    if (i != skip_dim) {
   10780:	429c      	cmp	r4, r3
   10782:	d0fa      	beq.n	1077a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK_GE(i, 0);
   10784:	2b00      	cmp	r3, #0
   10786:	dbe5      	blt.n	10754 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    TFLITE_DCHECK_LT(i, size_);
   10788:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1078a:	4293      	cmp	r3, r2
   1078c:	dae4      	bge.n	10758 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1078e:	2a05      	cmp	r2, #5
   10790:	dde4      	ble.n	1075c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
   10792:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10798:	2b00      	cmp	r3, #0
   1079a:	dbe5      	blt.n	10768 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    TFLITE_DCHECK_LT(i, size_);
   1079c:	9918      	ldr	r1, [sp, #96]	; 0x60
   1079e:	428b      	cmp	r3, r1
   107a0:	dae4      	bge.n	1076c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   107a2:	2905      	cmp	r1, #5
   107a4:	dce4      	bgt.n	10770 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
   107a6:	a920      	add	r1, sp, #128	; 0x80
   107a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   107ac:	f851 1c1c 	ldr.w	r1, [r1, #-28]
   107b0:	e7e1      	b.n	10776 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   107b2:	f008 f87a 	bl	188aa <abort>
  inline int32_t DimensionsCount() const { return size_; }
   107b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   107b8:	2c00      	cmp	r4, #0
   107ba:	db08      	blt.n	107ce <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
   107bc:	429c      	cmp	r4, r3
   107be:	da06      	bge.n	107ce <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   107c0:	2b05      	cmp	r3, #5
   107c2:	dd06      	ble.n	107d2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x126>
   107c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  for (int i = 0; i < dims_count; ++i) {
   107c6:	2200      	movs	r2, #0
  int flat_size = 1;
   107c8:	f04f 0a01 	mov.w	sl, #1
   107cc:	e007      	b.n	107de <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   107ce:	f008 f86c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   107d2:	a813      	add	r0, sp, #76	; 0x4c
   107d4:	e7f7      	b.n	107c6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   107d6:	2101      	movs	r1, #1
   107d8:	fb01 fa0a 	mul.w	sl, r1, sl
  for (int i = 0; i < dims_count; ++i) {
   107dc:	3201      	adds	r2, #1
   107de:	4293      	cmp	r3, r2
   107e0:	dd04      	ble.n	107ec <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   107e2:	4294      	cmp	r4, r2
   107e4:	d0f7      	beq.n	107d6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
   107e6:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   107ea:	e7f5      	b.n	107d8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TFLITE_DCHECK_GE(i, 0);
   107ec:	2c00      	cmp	r4, #0
   107ee:	db25      	blt.n	1083c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x190>
    TFLITE_DCHECK_LT(i, size_);
   107f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   107f2:	429c      	cmp	r4, r3
   107f4:	da24      	bge.n	10840 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   107f6:	2b05      	cmp	r3, #5
   107f8:	dd24      	ble.n	10844 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x198>
   107fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   107fc:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10800:	2c00      	cmp	r4, #0
   10802:	db25      	blt.n	10850 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    TFLITE_DCHECK_LT(i, size_);
   10804:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10806:	429c      	cmp	r4, r3
   10808:	da24      	bge.n	10854 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1080a:	2b05      	cmp	r3, #5
   1080c:	dd24      	ble.n	10858 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
   1080e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10810:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10814:	4293      	cmp	r3, r2
   10816:	d125      	bne.n	10864 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   10818:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_GE(i, 0);
   1081a:	2c00      	cmp	r4, #0
   1081c:	db24      	blt.n	10868 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1bc>
    TFLITE_DCHECK_LT(i, size_);
   1081e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10820:	429c      	cmp	r4, r3
   10822:	da23      	bge.n	1086c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10824:	2b05      	cmp	r3, #5
   10826:	dd23      	ble.n	10870 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c4>
   10828:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1082a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1082e:	931e      	str	r3, [sp, #120]	; 0x78
      if (__b < __a)
   10830:	429a      	cmp	r2, r3
   10832:	dc23      	bgt.n	1087c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      return __a;
   10834:	ab1f      	add	r3, sp, #124	; 0x7c
   10836:	681d      	ldr	r5, [r3, #0]
  for (int i = 0; i < outer_size; ++i) {
   10838:	2400      	movs	r4, #0
   1083a:	e061      	b.n	10900 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>
    TFLITE_DCHECK_GE(i, 0);
   1083c:	f008 f835 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   10840:	f008 f833 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10844:	ab20      	add	r3, sp, #128	; 0x80
   10846:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1084a:	f853 2c34 	ldr.w	r2, [r3, #-52]
   1084e:	e7d7      	b.n	10800 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x154>
    TFLITE_DCHECK_GE(i, 0);
   10850:	f008 f82b 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   10854:	f008 f829 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10858:	ab20      	add	r3, sp, #128	; 0x80
   1085a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1085e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   10862:	e7d7      	b.n	10814 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x168>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10864:	f008 f821 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
   10868:	f008 f81f 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   1086c:	f008 f81d 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10870:	ab20      	add	r3, sp, #128	; 0x80
   10872:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10876:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   1087a:	e7d8      	b.n	1082e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
	return __b;
   1087c:	ab1e      	add	r3, sp, #120	; 0x78
   1087e:	e7da      	b.n	10836 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      max = std::max(max, input_data[i * depth + c]);
   10880:	683b      	ldr	r3, [r7, #0]
   10882:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   10884:	3601      	adds	r6, #1
   10886:	42ae      	cmp	r6, r5
   10888:	da0c      	bge.n	108a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      max = std::max(max, input_data[i * depth + c]);
   1088a:	fb05 6304 	mla	r3, r5, r4, r6
   1088e:	eb08 0783 	add.w	r7, r8, r3, lsl #2
      if (__a < __b)
   10892:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
   10896:	9803      	ldr	r0, [sp, #12]
   10898:	f7f0 fbfc 	bl	1094 <__aeabi_fcmplt>
   1089c:	2800      	cmp	r0, #0
   1089e:	d1ef      	bne.n	10880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
      return __a;
   108a0:	af03      	add	r7, sp, #12
   108a2:	e7ed      	b.n	10880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
    for (int c = 0; c < depth; ++c) {
   108a4:	2700      	movs	r7, #0
    float sum = 0.f;
   108a6:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
   108a8:	42af      	cmp	r7, r5
   108aa:	da1a      	bge.n	108e2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x236>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
   108ac:	fb05 7b04 	mla	fp, r5, r4, r7
   108b0:	9903      	ldr	r1, [sp, #12]
   108b2:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
   108b6:	f7f0 f945 	bl	b44 <__aeabi_fsub>
   108ba:	9001      	str	r0, [sp, #4]
                                   static_cast<float>(params.beta));
   108bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   108c0:	f7f0 f8ec 	bl	a9c <__aeabi_d2f>
   108c4:	4601      	mov	r1, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
   108c6:	9801      	ldr	r0, [sp, #4]
   108c8:	f7f0 fa46 	bl	d58 <__aeabi_fmul>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
   108cc:	f001 fe44 	bl	12558 <expf>
   108d0:	4601      	mov	r1, r0
      output_data[i * depth + c] = exp_c;
   108d2:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
      sum += exp_c;
   108d6:	4630      	mov	r0, r6
   108d8:	f7f0 f936 	bl	b48 <__addsf3>
   108dc:	4606      	mov	r6, r0
    for (int c = 0; c < depth; ++c) {
   108de:	3701      	adds	r7, #1
   108e0:	e7e2      	b.n	108a8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>
    for (int c = 0; c < depth; ++c) {
   108e2:	2700      	movs	r7, #0
   108e4:	42af      	cmp	r7, r5
   108e6:	da0a      	bge.n	108fe <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x252>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
   108e8:	fb05 7b04 	mla	fp, r5, r4, r7
   108ec:	4631      	mov	r1, r6
   108ee:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
   108f2:	f7f0 fae5 	bl	ec0 <__aeabi_fdiv>
   108f6:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
    for (int c = 0; c < depth; ++c) {
   108fa:	3701      	adds	r7, #1
   108fc:	e7f2      	b.n	108e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  for (int i = 0; i < outer_size; ++i) {
   108fe:	3401      	adds	r4, #1
   10900:	4554      	cmp	r4, sl
   10902:	da04      	bge.n	1090e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
    float max = std::numeric_limits<float>::lowest();
   10904:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   10908:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   1090a:	2600      	movs	r6, #0
   1090c:	e7bb      	b.n	10886 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1da>
    if (size_ > kMaxSmallSize) {
   1090e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10910:	2b05      	cmp	r3, #5
   10912:	dd03      	ble.n	1091c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
      delete[] dims_pointer_;
   10914:	9819      	ldr	r0, [sp, #100]	; 0x64
   10916:	b108      	cbz	r0, 1091c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
   10918:	f007 ffb2 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1091c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1091e:	2b05      	cmp	r3, #5
   10920:	dd03      	ble.n	1092a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
      delete[] dims_pointer_;
   10922:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10924:	b108      	cbz	r0, 1092a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
   10926:	f007 ffab 	bl	18880 <_ZdaPv>
      return kTfLiteOk;
   1092a:	2000      	movs	r0, #0
   1092c:	e005      	b.n	1093a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
      SoftmaxQuantized(input, output, op_data);
   1092e:	aa04      	add	r2, sp, #16
   10930:	4649      	mov	r1, r9
   10932:	4638      	mov	r0, r7
   10934:	f7ff fbec 	bl	10110 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
   10938:	2000      	movs	r0, #0
}
   1093a:	b021      	add	sp, #132	; 0x84
   1093c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10940:	00034498 	.word	0x00034498

00010944 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   10944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10948:	b097      	sub	sp, #92	; 0x5c
   1094a:	4604      	mov	r4, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1094c:	680b      	ldr	r3, [r1, #0]
   1094e:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   10950:	2b01      	cmp	r3, #1
   10952:	d00f      	beq.n	10974 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
   10954:	6946      	ldr	r6, [r0, #20]
   10956:	2501      	movs	r5, #1
   10958:	9503      	str	r5, [sp, #12]
   1095a:	9302      	str	r3, [sp, #8]
   1095c:	4ba9      	ldr	r3, [pc, #676]	; (10c04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   1095e:	9301      	str	r3, [sp, #4]
   10960:	4ba9      	ldr	r3, [pc, #676]	; (10c08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   10962:	9300      	str	r3, [sp, #0]
   10964:	235d      	movs	r3, #93	; 0x5d
   10966:	4aa9      	ldr	r2, [pc, #676]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10968:	49a9      	ldr	r1, [pc, #676]	; (10c10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   1096a:	47b0      	blx	r6
   1096c:	4628      	mov	r0, r5
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
   1096e:	b017      	add	sp, #92	; 0x5c
   10970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10974:	460d      	mov	r5, r1
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   10976:	684b      	ldr	r3, [r1, #4]
   10978:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1097a:	2b01      	cmp	r3, #1
   1097c:	d00d      	beq.n	1099a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x56>
   1097e:	6946      	ldr	r6, [r0, #20]
   10980:	2501      	movs	r5, #1
   10982:	9503      	str	r5, [sp, #12]
   10984:	9302      	str	r3, [sp, #8]
   10986:	4b9f      	ldr	r3, [pc, #636]	; (10c04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   10988:	9301      	str	r3, [sp, #4]
   1098a:	4ba2      	ldr	r3, [pc, #648]	; (10c14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   1098c:	9300      	str	r3, [sp, #0]
   1098e:	235e      	movs	r3, #94	; 0x5e
   10990:	4a9e      	ldr	r2, [pc, #632]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10992:	499f      	ldr	r1, [pc, #636]	; (10c10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10994:	47b0      	blx	r6
   10996:	4628      	mov	r0, r5
   10998:	e7e9      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  const TfLiteTensor* input = GetInput(context, node, 0);
   1099a:	2200      	movs	r2, #0
   1099c:	f005 f923 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   109a0:	4606      	mov	r6, r0
   109a2:	b340      	cbz	r0, 109f6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   109a4:	6883      	ldr	r3, [r0, #8]
   109a6:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   109a8:	2b00      	cmp	r3, #0
   109aa:	dd2e      	ble.n	10a0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TfLiteTensor* output = GetOutput(context, node, 0);
   109ac:	2200      	movs	r2, #0
   109ae:	4629      	mov	r1, r5
   109b0:	4620      	mov	r0, r4
   109b2:	f005 f937 	bl	15c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   109b6:	9005      	str	r0, [sp, #20]
   109b8:	2800      	cmp	r0, #0
   109ba:	d030      	beq.n	10a1e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   109bc:	f8d5 9010 	ldr.w	r9, [r5, #16]
   109c0:	f1b9 0f00 	cmp.w	r9, #0
   109c4:	d035      	beq.n	10a32 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xee>
  if (input->type == kTfLiteInt16) {
   109c6:	7833      	ldrb	r3, [r6, #0]
   109c8:	2b07      	cmp	r3, #7
   109ca:	d03c      	beq.n	10a46 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
  if (output->type == kTfLiteInt16) {
   109cc:	9b05      	ldr	r3, [sp, #20]
   109ce:	781b      	ldrb	r3, [r3, #0]
   109d0:	2b07      	cmp	r3, #7
   109d2:	d05d      	beq.n	10a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
   109d4:	7832      	ldrb	r2, [r6, #0]
   109d6:	4293      	cmp	r3, r2
   109d8:	d069      	beq.n	10aae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   109da:	6965      	ldr	r5, [r4, #20]
   109dc:	9303      	str	r3, [sp, #12]
   109de:	9202      	str	r2, [sp, #8]
   109e0:	4b8d      	ldr	r3, [pc, #564]	; (10c18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
   109e2:	9301      	str	r3, [sp, #4]
   109e4:	4b8d      	ldr	r3, [pc, #564]	; (10c1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
   109e6:	9300      	str	r3, [sp, #0]
   109e8:	2378      	movs	r3, #120	; 0x78
   109ea:	4a88      	ldr	r2, [pc, #544]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   109ec:	4988      	ldr	r1, [pc, #544]	; (10c10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   109ee:	4620      	mov	r0, r4
   109f0:	47a8      	blx	r5
   109f2:	2001      	movs	r0, #1
   109f4:	e7bb      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, input != nullptr);
   109f6:	6965      	ldr	r5, [r4, #20]
   109f8:	4b89      	ldr	r3, [pc, #548]	; (10c20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
   109fa:	9300      	str	r3, [sp, #0]
   109fc:	2360      	movs	r3, #96	; 0x60
   109fe:	4a83      	ldr	r2, [pc, #524]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10a00:	4988      	ldr	r1, [pc, #544]	; (10c24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10a02:	4620      	mov	r0, r4
   10a04:	47a8      	blx	r5
   10a06:	2001      	movs	r0, #1
   10a08:	e7b1      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   10a0a:	6965      	ldr	r5, [r4, #20]
   10a0c:	4b86      	ldr	r3, [pc, #536]	; (10c28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   10a0e:	9300      	str	r3, [sp, #0]
   10a10:	2361      	movs	r3, #97	; 0x61
   10a12:	4a7e      	ldr	r2, [pc, #504]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10a14:	4983      	ldr	r1, [pc, #524]	; (10c24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10a16:	4620      	mov	r0, r4
   10a18:	47a8      	blx	r5
   10a1a:	2001      	movs	r0, #1
   10a1c:	e7a7      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, output != nullptr);
   10a1e:	6965      	ldr	r5, [r4, #20]
   10a20:	4b82      	ldr	r3, [pc, #520]	; (10c2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   10a22:	9300      	str	r3, [sp, #0]
   10a24:	2363      	movs	r3, #99	; 0x63
   10a26:	4a79      	ldr	r2, [pc, #484]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10a28:	497e      	ldr	r1, [pc, #504]	; (10c24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10a2a:	4620      	mov	r0, r4
   10a2c:	47a8      	blx	r5
   10a2e:	2001      	movs	r0, #1
   10a30:	e79d      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   10a32:	6965      	ldr	r5, [r4, #20]
   10a34:	4b7e      	ldr	r3, [pc, #504]	; (10c30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   10a36:	9300      	str	r3, [sp, #0]
   10a38:	2365      	movs	r3, #101	; 0x65
   10a3a:	4a74      	ldr	r2, [pc, #464]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10a3c:	4979      	ldr	r1, [pc, #484]	; (10c24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10a3e:	4620      	mov	r0, r4
   10a40:	47a8      	blx	r5
   10a42:	2001      	movs	r0, #1
   10a44:	e793      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
   10a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10a48:	f240 4102 	movw	r1, #1026	; 0x402
   10a4c:	4620      	mov	r0, r4
   10a4e:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
   10a50:	b150      	cbz	r0, 10a68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x124>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
   10a52:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
   10a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10a58:	f240 4102 	movw	r1, #1026	; 0x402
   10a5c:	4620      	mov	r0, r4
   10a5e:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   10a60:	b160      	cbz	r0, 10a7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    op_data->one_over_one_plus_x_lut =
   10a62:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   10a66:	e7b1      	b.n	109cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
   10a68:	6965      	ldr	r5, [r4, #20]
   10a6a:	4b72      	ldr	r3, [pc, #456]	; (10c34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   10a6c:	9300      	str	r3, [sp, #0]
   10a6e:	236b      	movs	r3, #107	; 0x6b
   10a70:	4a66      	ldr	r2, [pc, #408]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10a72:	496c      	ldr	r1, [pc, #432]	; (10c24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10a74:	4620      	mov	r0, r4
   10a76:	47a8      	blx	r5
   10a78:	2001      	movs	r0, #1
   10a7a:	e778      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   10a7c:	6965      	ldr	r5, [r4, #20]
   10a7e:	4b6e      	ldr	r3, [pc, #440]	; (10c38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   10a80:	9300      	str	r3, [sp, #0]
   10a82:	236f      	movs	r3, #111	; 0x6f
   10a84:	4a61      	ldr	r2, [pc, #388]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10a86:	4967      	ldr	r1, [pc, #412]	; (10c24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10a88:	4620      	mov	r0, r4
   10a8a:	47a8      	blx	r5
   10a8c:	2001      	movs	r0, #1
   10a8e:	e76e      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context,
   10a90:	7833      	ldrb	r3, [r6, #0]
   10a92:	2b09      	cmp	r3, #9
   10a94:	d00b      	beq.n	10aae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   10a96:	2b07      	cmp	r3, #7
   10a98:	d009      	beq.n	10aae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   10a9a:	6965      	ldr	r5, [r4, #20]
   10a9c:	4b67      	ldr	r3, [pc, #412]	; (10c3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
   10a9e:	9300      	str	r3, [sp, #0]
   10aa0:	2375      	movs	r3, #117	; 0x75
   10aa2:	4a5a      	ldr	r2, [pc, #360]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10aa4:	495f      	ldr	r1, [pc, #380]	; (10c24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10aa6:	4620      	mov	r0, r4
   10aa8:	47a8      	blx	r5
   10aaa:	2001      	movs	r0, #1
   10aac:	e75f      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  if (input->type == kTfLiteInt16) {
   10aae:	7833      	ldrb	r3, [r6, #0]
   10ab0:	2b07      	cmp	r3, #7
   10ab2:	f040 81b7 	bne.w	10e24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4e0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   10ab6:	9b05      	ldr	r3, [sp, #20]
   10ab8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   10abc:	f1bb 0f00 	cmp.w	fp, #0
   10ac0:	d00f      	beq.n	10ae2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
   10ac2:	6965      	ldr	r5, [r4, #20]
   10ac4:	2300      	movs	r3, #0
   10ac6:	9303      	str	r3, [sp, #12]
   10ac8:	f8cd b008 	str.w	fp, [sp, #8]
   10acc:	4b5c      	ldr	r3, [pc, #368]	; (10c40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   10ace:	9301      	str	r3, [sp, #4]
   10ad0:	4b5c      	ldr	r3, [pc, #368]	; (10c44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   10ad2:	9300      	str	r3, [sp, #0]
   10ad4:	237d      	movs	r3, #125	; 0x7d
   10ad6:	4a4d      	ldr	r2, [pc, #308]	; (10c0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10ad8:	494d      	ldr	r1, [pc, #308]	; (10c10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10ada:	4620      	mov	r0, r4
   10adc:	47a8      	blx	r5
   10ade:	2001      	movs	r0, #1
   10ae0:	e745      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   10ae2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   10ae6:	9306      	str	r3, [sp, #24]
  for (int i = 0; i < num - 1; i++) {
   10ae8:	465f      	mov	r7, fp
   10aea:	f8cd 901c 	str.w	r9, [sp, #28]
   10aee:	f8cd b020 	str.w	fp, [sp, #32]
   10af2:	469b      	mov	fp, r3
   10af4:	9609      	str	r6, [sp, #36]	; 0x24
   10af6:	e007      	b.n	10b08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
	return __b;
   10af8:	ae14      	add	r6, sp, #80	; 0x50
   10afa:	e079      	b.n	10bf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10afc:	6830      	ldr	r0, [r6, #0]
   10afe:	f7f0 faf1 	bl	10e4 <__aeabi_f2iz>
   10b02:	f82b 0017 	strh.w	r0, [fp, r7, lsl #1]
  for (int i = 0; i < num - 1; i++) {
   10b06:	4657      	mov	r7, sl
   10b08:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   10b0c:	f280 80a4 	bge.w	10c58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x314>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   10b10:	4638      	mov	r0, r7
   10b12:	f7f0 f8cd 	bl	cb0 <__aeabi_i2f>
   10b16:	494c      	ldr	r1, [pc, #304]	; (10c48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   10b18:	f7f0 f91e 	bl	d58 <__aeabi_fmul>
   10b1c:	494b      	ldr	r1, [pc, #300]	; (10c4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   10b1e:	f7f0 f811 	bl	b44 <__aeabi_fsub>
   10b22:	4606      	mov	r6, r0
   10b24:	f007 fc3b 	bl	1839e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10b28:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10b2c:	f7f0 f914 	bl	d58 <__aeabi_fmul>
   10b30:	f7ef fc9a 	bl	468 <__aeabi_f2d>
   10b34:	f001 fcc6 	bl	124c4 <round>
   10b38:	f7ef ffb0 	bl	a9c <__aeabi_d2f>
   10b3c:	4680      	mov	r8, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   10b3e:	f107 0a01 	add.w	sl, r7, #1
   10b42:	4650      	mov	r0, sl
   10b44:	f7f0 f8b4 	bl	cb0 <__aeabi_i2f>
   10b48:	493f      	ldr	r1, [pc, #252]	; (10c48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   10b4a:	f7f0 f905 	bl	d58 <__aeabi_fmul>
   10b4e:	493f      	ldr	r1, [pc, #252]	; (10c4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   10b50:	f7ef fff8 	bl	b44 <__aeabi_fsub>
   10b54:	f007 fc23 	bl	1839e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10b58:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10b5c:	f7f0 f8fc 	bl	d58 <__aeabi_fmul>
   10b60:	4681      	mov	r9, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
   10b62:	4630      	mov	r0, r6
   10b64:	f007 fc1b 	bl	1839e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10b68:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10b6c:	f7f0 f8f4 	bl	d58 <__aeabi_fmul>
   10b70:	f7ef fc7a 	bl	468 <__aeabi_f2d>
   10b74:	f001 fca6 	bl	124c4 <round>
   10b78:	f7ef ff90 	bl	a9c <__aeabi_d2f>
   10b7c:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   10b7e:	4648      	mov	r0, r9
   10b80:	f7ef ffe2 	bl	b48 <__addsf3>
   10b84:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10b88:	f7f0 f8e6 	bl	d58 <__aeabi_fmul>
   10b8c:	f7ef fc6c 	bl	468 <__aeabi_f2d>
   10b90:	f001 fc98 	bl	124c4 <round>
   10b94:	f7ef ff82 	bl	a9c <__aeabi_d2f>
   10b98:	4681      	mov	r9, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   10b9a:	492d      	ldr	r1, [pc, #180]	; (10c50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
   10b9c:	4630      	mov	r0, r6
   10b9e:	f7ef ffd3 	bl	b48 <__addsf3>
   10ba2:	f007 fbfc 	bl	1839e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10ba6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10baa:	f7f0 f8d5 	bl	d58 <__aeabi_fmul>
   10bae:	f7ef fc5b 	bl	468 <__aeabi_f2d>
   10bb2:	f001 fc87 	bl	124c4 <round>
   10bb6:	f7ef ff71 	bl	a9c <__aeabi_d2f>
   10bba:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
   10bbc:	4648      	mov	r0, r9
   10bbe:	f7ef ffc1 	bl	b44 <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
   10bc2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10bc6:	f7f0 f8c7 	bl	d58 <__aeabi_fmul>
   10bca:	f7ef fc4d 	bl	468 <__aeabi_f2d>
   10bce:	f001 fc79 	bl	124c4 <round>
   10bd2:	f7ef ff63 	bl	a9c <__aeabi_d2f>
   10bd6:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10bd8:	4640      	mov	r0, r8
   10bda:	f7ef ffb3 	bl	b44 <__aeabi_fsub>
   10bde:	9015      	str	r0, [sp, #84]	; 0x54
   10be0:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   10be4:	9114      	str	r1, [sp, #80]	; 0x50
      if (__a < __b)
   10be6:	f7f0 fa55 	bl	1094 <__aeabi_fcmplt>
   10bea:	2800      	cmp	r0, #0
   10bec:	d184      	bne.n	10af8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
      return __a;
   10bee:	ae15      	add	r6, sp, #84	; 0x54
                               32767.0f);
   10bf0:	4918      	ldr	r1, [pc, #96]	; (10c54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>)
   10bf2:	9113      	str	r1, [sp, #76]	; 0x4c
      if (__b < __a)
   10bf4:	6830      	ldr	r0, [r6, #0]
   10bf6:	f7f0 fa6b 	bl	10d0 <__aeabi_fcmpgt>
   10bfa:	2800      	cmp	r0, #0
   10bfc:	f43f af7e 	beq.w	10afc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
	return __b;
   10c00:	ae13      	add	r6, sp, #76	; 0x4c
   10c02:	e77b      	b.n	10afc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
   10c04:	00034d64 	.word	0x00034d64
   10c08:	00034d3c 	.word	0x00034d3c
   10c0c:	00034c34 	.word	0x00034c34
   10c10:	00033f68 	.word	0x00033f68
   10c14:	00034b84 	.word	0x00034b84
   10c18:	00034620 	.word	0x00034620
   10c1c:	00034630 	.word	0x00034630
   10c20:	00034744 	.word	0x00034744
   10c24:	00033ca8 	.word	0x00033ca8
   10c28:	00034d4c 	.word	0x00034d4c
   10c2c:	000343b0 	.word	0x000343b0
   10c30:	00034d68 	.word	0x00034d68
   10c34:	00034d84 	.word	0x00034d84
   10c38:	00034d9c 	.word	0x00034d9c
   10c3c:	00034008 	.word	0x00034008
   10c40:	000344cc 	.word	0x000344cc
   10c44:	00034c8c 	.word	0x00034c8c
   10c48:	3ca00000 	.word	0x3ca00000
   10c4c:	41200000 	.word	0x41200000
   10c50:	3c200000 	.word	0x3c200000
   10c54:	46fffe00 	.word	0x46fffe00
   10c58:	f8dd 901c 	ldr.w	r9, [sp, #28]
   10c5c:	f8dd b020 	ldr.w	fp, [sp, #32]
   10c60:	9e09      	ldr	r6, [sp, #36]	; 0x24
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
   10c62:	2000      	movs	r0, #0
   10c64:	f007 fb9b 	bl	1839e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10c68:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10c6c:	f7f0 f874 	bl	d58 <__aeabi_fmul>
   10c70:	f7ef fbfa 	bl	468 <__aeabi_f2d>
   10c74:	f001 fc26 	bl	124c4 <round>
   10c78:	f7ef ff10 	bl	a9c <__aeabi_d2f>
   10c7c:	9012      	str	r0, [sp, #72]	; 0x48
   10c7e:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   10c82:	9111      	str	r1, [sp, #68]	; 0x44
      if (__a < __b)
   10c84:	f7f0 fa06 	bl	1094 <__aeabi_fcmplt>
   10c88:	b9a0      	cbnz	r0, 10cb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x370>
      return __a;
   10c8a:	af12      	add	r7, sp, #72	; 0x48
   10c8c:	496c      	ldr	r1, [pc, #432]	; (10e40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   10c8e:	9110      	str	r1, [sp, #64]	; 0x40
      if (__b < __a)
   10c90:	6838      	ldr	r0, [r7, #0]
   10c92:	f7f0 fa1d 	bl	10d0 <__aeabi_fcmpgt>
   10c96:	b978      	cbnz	r0, 10cb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x374>
  table[num - 1] = std::min<float>(
   10c98:	6838      	ldr	r0, [r7, #0]
   10c9a:	f7f0 fa23 	bl	10e4 <__aeabi_f2iz>
   10c9e:	9b06      	ldr	r3, [sp, #24]
   10ca0:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   10ca4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
   10ca8:	9306      	str	r3, [sp, #24]
   10caa:	f8cd 901c 	str.w	r9, [sp, #28]
   10cae:	469a      	mov	sl, r3
   10cb0:	9608      	str	r6, [sp, #32]
   10cb2:	e00b      	b.n	10ccc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
	return __b;
   10cb4:	af11      	add	r7, sp, #68	; 0x44
   10cb6:	e7e9      	b.n	10c8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x348>
	return __b;
   10cb8:	af10      	add	r7, sp, #64	; 0x40
   10cba:	e7ed      	b.n	10c98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x354>
	return __b;
   10cbc:	ae0e      	add	r6, sp, #56	; 0x38
   10cbe:	e07b      	b.n	10db8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x474>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10cc0:	6830      	ldr	r0, [r6, #0]
   10cc2:	f7f0 fa0f 	bl	10e4 <__aeabi_f2iz>
   10cc6:	f82a 001b 	strh.w	r0, [sl, fp, lsl #1]
  for (int i = 0; i < num - 1; i++) {
   10cca:	46cb      	mov	fp, r9
   10ccc:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   10cd0:	da7c      	bge.n	10dcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x488>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   10cd2:	4658      	mov	r0, fp
   10cd4:	f7ef ffec 	bl	cb0 <__aeabi_i2f>
   10cd8:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
   10cdc:	f7f0 f83c 	bl	d58 <__aeabi_fmul>
   10ce0:	2100      	movs	r1, #0
   10ce2:	f7ef ff31 	bl	b48 <__addsf3>
   10ce6:	4606      	mov	r6, r0
   10ce8:	f007 fb4e 	bl	18388 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   10cec:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10cf0:	f7f0 f832 	bl	d58 <__aeabi_fmul>
   10cf4:	f7ef fbb8 	bl	468 <__aeabi_f2d>
   10cf8:	f001 fbe4 	bl	124c4 <round>
   10cfc:	f7ef fece 	bl	a9c <__aeabi_d2f>
   10d00:	4607      	mov	r7, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   10d02:	f10b 0901 	add.w	r9, fp, #1
   10d06:	4648      	mov	r0, r9
   10d08:	f7ef ffd2 	bl	cb0 <__aeabi_i2f>
   10d0c:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
   10d10:	f7f0 f822 	bl	d58 <__aeabi_fmul>
   10d14:	2100      	movs	r1, #0
   10d16:	f7ef ff17 	bl	b48 <__addsf3>
   10d1a:	f007 fb35 	bl	18388 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   10d1e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10d22:	f7f0 f819 	bl	d58 <__aeabi_fmul>
   10d26:	4680      	mov	r8, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
   10d28:	4630      	mov	r0, r6
   10d2a:	f007 fb2d 	bl	18388 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   10d2e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10d32:	f7f0 f811 	bl	d58 <__aeabi_fmul>
   10d36:	f7ef fb97 	bl	468 <__aeabi_f2d>
   10d3a:	f001 fbc3 	bl	124c4 <round>
   10d3e:	f7ef fead 	bl	a9c <__aeabi_d2f>
   10d42:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   10d44:	4640      	mov	r0, r8
   10d46:	f7ef feff 	bl	b48 <__addsf3>
   10d4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10d4e:	f7f0 f803 	bl	d58 <__aeabi_fmul>
   10d52:	f7ef fb89 	bl	468 <__aeabi_f2d>
   10d56:	f001 fbb5 	bl	124c4 <round>
   10d5a:	f7ef fe9f 	bl	a9c <__aeabi_d2f>
   10d5e:	4680      	mov	r8, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   10d60:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
   10d64:	4630      	mov	r0, r6
   10d66:	f7ef feef 	bl	b48 <__addsf3>
   10d6a:	f007 fb0d 	bl	18388 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   10d6e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10d72:	f7ef fff1 	bl	d58 <__aeabi_fmul>
   10d76:	f7ef fb77 	bl	468 <__aeabi_f2d>
   10d7a:	f001 fba3 	bl	124c4 <round>
   10d7e:	f7ef fe8d 	bl	a9c <__aeabi_d2f>
   10d82:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
   10d84:	4640      	mov	r0, r8
   10d86:	f7ef fedd 	bl	b44 <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
   10d8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10d8e:	f7ef ffe3 	bl	d58 <__aeabi_fmul>
   10d92:	f7ef fb69 	bl	468 <__aeabi_f2d>
   10d96:	f001 fb95 	bl	124c4 <round>
   10d9a:	f7ef fe7f 	bl	a9c <__aeabi_d2f>
   10d9e:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10da0:	4638      	mov	r0, r7
   10da2:	f7ef fecf 	bl	b44 <__aeabi_fsub>
   10da6:	900f      	str	r0, [sp, #60]	; 0x3c
   10da8:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   10dac:	910e      	str	r1, [sp, #56]	; 0x38
      if (__a < __b)
   10dae:	f7f0 f971 	bl	1094 <__aeabi_fcmplt>
   10db2:	2800      	cmp	r0, #0
   10db4:	d182      	bne.n	10cbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x378>
      return __a;
   10db6:	ae0f      	add	r6, sp, #60	; 0x3c
                               32767.0f);
   10db8:	4921      	ldr	r1, [pc, #132]	; (10e40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   10dba:	910d      	str	r1, [sp, #52]	; 0x34
      if (__b < __a)
   10dbc:	6830      	ldr	r0, [r6, #0]
   10dbe:	f7f0 f987 	bl	10d0 <__aeabi_fcmpgt>
   10dc2:	2800      	cmp	r0, #0
   10dc4:	f43f af7c 	beq.w	10cc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
	return __b;
   10dc8:	ae0d      	add	r6, sp, #52	; 0x34
   10dca:	e779      	b.n	10cc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
   10dcc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   10dd0:	9e08      	ldr	r6, [sp, #32]
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
   10dd2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   10dd6:	f007 fad7 	bl	18388 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   10dda:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10dde:	f7ef ffbb 	bl	d58 <__aeabi_fmul>
   10de2:	f7ef fb41 	bl	468 <__aeabi_f2d>
   10de6:	f001 fb6d 	bl	124c4 <round>
   10dea:	f7ef fe57 	bl	a9c <__aeabi_d2f>
   10dee:	900c      	str	r0, [sp, #48]	; 0x30
   10df0:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   10df4:	910b      	str	r1, [sp, #44]	; 0x2c
      if (__a < __b)
   10df6:	f7f0 f94d 	bl	1094 <__aeabi_fcmplt>
   10dfa:	b9e0      	cbnz	r0, 10e36 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f2>
      return __a;
   10dfc:	af0c      	add	r7, sp, #48	; 0x30
   10dfe:	4910      	ldr	r1, [pc, #64]	; (10e40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   10e00:	910a      	str	r1, [sp, #40]	; 0x28
      if (__b < __a)
   10e02:	6838      	ldr	r0, [r7, #0]
   10e04:	f7f0 f964 	bl	10d0 <__aeabi_fcmpgt>
   10e08:	b9b8      	cbnz	r0, 10e3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f6>
  table[num - 1] = std::min<float>(
   10e0a:	6838      	ldr	r0, [r7, #0]
   10e0c:	f7f0 f96a 	bl	10e4 <__aeabi_f2iz>
   10e10:	9b06      	ldr	r3, [sp, #24]
   10e12:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    op_data->zero_point = output->params.zero_point;
   10e16:	9a05      	ldr	r2, [sp, #20]
   10e18:	6913      	ldr	r3, [r2, #16]
   10e1a:	f8c9 301c 	str.w	r3, [r9, #28]
    op_data->scale = output->params.scale;
   10e1e:	68d3      	ldr	r3, [r2, #12]
   10e20:	f8c9 3020 	str.w	r3, [r9, #32]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
   10e24:	f8cd 9000 	str.w	r9, [sp]
   10e28:	696b      	ldr	r3, [r5, #20]
   10e2a:	9a05      	ldr	r2, [sp, #20]
   10e2c:	4631      	mov	r1, r6
   10e2e:	4620      	mov	r0, r4
   10e30:	f7f0 fbfe 	bl	1630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
   10e34:	e59b      	b.n	1096e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
	return __b;
   10e36:	af0b      	add	r7, sp, #44	; 0x2c
   10e38:	e7e1      	b.n	10dfe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
	return __b;
   10e3a:	af0a      	add	r7, sp, #40	; 0x28
   10e3c:	e7e5      	b.n	10e0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c6>
   10e3e:	bf00      	nop
   10e40:	46fffe00 	.word	0x46fffe00

00010e44 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   10e44:	4b03      	ldr	r3, [pc, #12]	; (10e54 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   10e46:	4a04      	ldr	r2, [pc, #16]	; (10e58 <z_device_state_init+0x14>)
   10e48:	4293      	cmp	r3, r2
   10e4a:	d201      	bcs.n	10e50 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   10e4c:	3318      	adds	r3, #24
   10e4e:	e7fa      	b.n	10e46 <z_device_state_init+0x2>
	}
}
   10e50:	4770      	bx	lr
   10e52:	bf00      	nop
   10e54:	00019510 	.word	0x00019510
   10e58:	000195a0 	.word	0x000195a0

00010e5c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   10e5c:	b570      	push	{r4, r5, r6, lr}
   10e5e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10e60:	4b11      	ldr	r3, [pc, #68]	; (10ea8 <z_sys_init_run_level+0x4c>)
   10e62:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   10e66:	e009      	b.n	10e7c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   10e68:	4240      	negs	r0, r0
   10e6a:	e017      	b.n	10e9c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   10e6c:	68eb      	ldr	r3, [r5, #12]
   10e6e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   10e70:	68ea      	ldr	r2, [r5, #12]
   10e72:	7853      	ldrb	r3, [r2, #1]
   10e74:	f043 0301 	orr.w	r3, r3, #1
   10e78:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10e7a:	3408      	adds	r4, #8
   10e7c:	1c73      	adds	r3, r6, #1
   10e7e:	4a0a      	ldr	r2, [pc, #40]	; (10ea8 <z_sys_init_run_level+0x4c>)
   10e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e84:	42a3      	cmp	r3, r4
   10e86:	d90d      	bls.n	10ea4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   10e88:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   10e8a:	6823      	ldr	r3, [r4, #0]
   10e8c:	4628      	mov	r0, r5
   10e8e:	4798      	blx	r3
		if (dev != NULL) {
   10e90:	2d00      	cmp	r5, #0
   10e92:	d0f2      	beq.n	10e7a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   10e94:	2800      	cmp	r0, #0
   10e96:	d0eb      	beq.n	10e70 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   10e98:	2800      	cmp	r0, #0
   10e9a:	dbe5      	blt.n	10e68 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   10e9c:	28ff      	cmp	r0, #255	; 0xff
   10e9e:	dde5      	ble.n	10e6c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   10ea0:	20ff      	movs	r0, #255	; 0xff
   10ea2:	e7e3      	b.n	10e6c <z_sys_init_run_level+0x10>
		}
	}
}
   10ea4:	bd70      	pop	{r4, r5, r6, pc}
   10ea6:	bf00      	nop
   10ea8:	00034dc0 	.word	0x00034dc0

00010eac <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   10eac:	4b01      	ldr	r3, [pc, #4]	; (10eb4 <z_impl_z_errno+0x8>)
   10eae:	6898      	ldr	r0, [r3, #8]
}
   10eb0:	3094      	adds	r0, #148	; 0x94
   10eb2:	4770      	bx	lr
   10eb4:	2000f6e4 	.word	0x2000f6e4

00010eb8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   10eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10eba:	b089      	sub	sp, #36	; 0x24
   10ebc:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   10ebe:	4b15      	ldr	r3, [pc, #84]	; (10f14 <init_idle_thread+0x5c>)
   10ec0:	25b0      	movs	r5, #176	; 0xb0
   10ec2:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   10ec6:	4b14      	ldr	r3, [pc, #80]	; (10f18 <init_idle_thread+0x60>)
   10ec8:	f44f 76b0 	mov.w	r6, #352	; 0x160
   10ecc:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   10ed0:	af06      	add	r7, sp, #24
   10ed2:	4603      	mov	r3, r0
   10ed4:	4a11      	ldr	r2, [pc, #68]	; (10f1c <init_idle_thread+0x64>)
   10ed6:	2108      	movs	r1, #8
   10ed8:	4638      	mov	r0, r7
   10eda:	f002 ff82 	bl	13de2 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10ede:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   10ee2:	480f      	ldr	r0, [pc, #60]	; (10f20 <init_idle_thread+0x68>)
   10ee4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   10ee8:	9705      	str	r7, [sp, #20]
   10eea:	2301      	movs	r3, #1
   10eec:	9304      	str	r3, [sp, #16]
   10eee:	230f      	movs	r3, #15
   10ef0:	9303      	str	r3, [sp, #12]
   10ef2:	2300      	movs	r3, #0
   10ef4:	9302      	str	r3, [sp, #8]
   10ef6:	9301      	str	r3, [sp, #4]
   10ef8:	9400      	str	r4, [sp, #0]
   10efa:	4b0a      	ldr	r3, [pc, #40]	; (10f24 <init_idle_thread+0x6c>)
   10efc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   10f00:	4631      	mov	r1, r6
   10f02:	4628      	mov	r0, r5
   10f04:	f000 f948 	bl	11198 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10f08:	7b6b      	ldrb	r3, [r5, #13]
   10f0a:	f023 0304 	bic.w	r3, r3, #4
   10f0e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   10f10:	b009      	add	sp, #36	; 0x24
   10f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f14:	20000390 	.word	0x20000390
   10f18:	20017940 	.word	0x20017940
   10f1c:	00034dd8 	.word	0x00034dd8
   10f20:	2000f6e4 	.word	0x2000f6e4
   10f24:	00018503 	.word	0x00018503

00010f28 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   10f28:	b570      	push	{r4, r5, r6, lr}
   10f2a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   10f2c:	f000 fe00 	bl	11b30 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   10f30:	4d1b      	ldr	r5, [pc, #108]	; (10fa0 <prepare_multithreading+0x78>)
   10f32:	4b1c      	ldr	r3, [pc, #112]	; (10fa4 <prepare_multithreading+0x7c>)
   10f34:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10f36:	4b1c      	ldr	r3, [pc, #112]	; (10fa8 <prepare_multithreading+0x80>)
   10f38:	9305      	str	r3, [sp, #20]
   10f3a:	2301      	movs	r3, #1
   10f3c:	9304      	str	r3, [sp, #16]
   10f3e:	2400      	movs	r4, #0
   10f40:	9403      	str	r4, [sp, #12]
   10f42:	9402      	str	r4, [sp, #8]
   10f44:	9401      	str	r4, [sp, #4]
   10f46:	9400      	str	r4, [sp, #0]
   10f48:	4b18      	ldr	r3, [pc, #96]	; (10fac <prepare_multithreading+0x84>)
   10f4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10f4e:	4918      	ldr	r1, [pc, #96]	; (10fb0 <prepare_multithreading+0x88>)
   10f50:	4628      	mov	r0, r5
   10f52:	f000 f921 	bl	11198 <z_setup_new_thread>
   10f56:	4606      	mov	r6, r0
   10f58:	7b6b      	ldrb	r3, [r5, #13]
   10f5a:	f023 0304 	bic.w	r3, r3, #4
   10f5e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   10f60:	4628      	mov	r0, r5
   10f62:	f007 fb38 	bl	185d6 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   10f66:	2c00      	cmp	r4, #0
   10f68:	dd02      	ble.n	10f70 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   10f6a:	4630      	mov	r0, r6
   10f6c:	b006      	add	sp, #24
   10f6e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   10f70:	4620      	mov	r0, r4
   10f72:	f7ff ffa1 	bl	10eb8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   10f76:	4b0f      	ldr	r3, [pc, #60]	; (10fb4 <prepare_multithreading+0x8c>)
   10f78:	22b0      	movs	r2, #176	; 0xb0
   10f7a:	fb02 3204 	mla	r2, r2, r4, r3
   10f7e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   10f82:	4b08      	ldr	r3, [pc, #32]	; (10fa4 <prepare_multithreading+0x7c>)
   10f84:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10f88:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   10f8a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   10f8c:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   10f90:	4a09      	ldr	r2, [pc, #36]	; (10fb8 <prepare_multithreading+0x90>)
   10f92:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   10f96:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   10f9a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   10f9c:	3401      	adds	r4, #1
   10f9e:	e7e2      	b.n	10f66 <prepare_multithreading+0x3e>
   10fa0:	20000440 	.word	0x20000440
   10fa4:	2000f6e4 	.word	0x2000f6e4
   10fa8:	00034de4 	.word	0x00034de4
   10fac:	00010fbd 	.word	0x00010fbd
   10fb0:	2000f920 	.word	0x2000f920
   10fb4:	20000390 	.word	0x20000390
   10fb8:	20017aa0 	.word	0x20017aa0

00010fbc <bg_thread_main>:
{
   10fbc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   10fbe:	4b0b      	ldr	r3, [pc, #44]	; (10fec <bg_thread_main+0x30>)
   10fc0:	2201      	movs	r2, #1
   10fc2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10fc4:	2002      	movs	r0, #2
   10fc6:	f7ff ff49 	bl	10e5c <z_sys_init_run_level>
	boot_banner();
   10fca:	f001 f83b 	bl	12044 <boot_banner>
	z_cpp_init_static();
   10fce:	f003 fb0e 	bl	145ee <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   10fd2:	2003      	movs	r0, #3
   10fd4:	f7ff ff42 	bl	10e5c <z_sys_init_run_level>
	z_init_static_threads();
   10fd8:	f000 f942 	bl	11260 <z_init_static_threads>
	main();
   10fdc:	f002 fe9a 	bl	13d14 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   10fe0:	4a03      	ldr	r2, [pc, #12]	; (10ff0 <bg_thread_main+0x34>)
   10fe2:	7b13      	ldrb	r3, [r2, #12]
   10fe4:	f023 0301 	bic.w	r3, r3, #1
   10fe8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10fea:	bd08      	pop	{r3, pc}
   10fec:	2000f753 	.word	0x2000f753
   10ff0:	20000440 	.word	0x20000440

00010ff4 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   10ff4:	b508      	push	{r3, lr}
   10ff6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10ff8:	4a01      	ldr	r2, [pc, #4]	; (11000 <switch_to_main_thread+0xc>)
   10ffa:	4802      	ldr	r0, [pc, #8]	; (11004 <switch_to_main_thread+0x10>)
   10ffc:	f7f3 f9ba 	bl	4374 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   11000:	00010fbd 	.word	0x00010fbd
   11004:	20000440 	.word	0x20000440

00011008 <z_bss_zero>:
{
   11008:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1100a:	4803      	ldr	r0, [pc, #12]	; (11018 <z_bss_zero+0x10>)
   1100c:	4a03      	ldr	r2, [pc, #12]	; (1101c <z_bss_zero+0x14>)
   1100e:	1a12      	subs	r2, r2, r0
   11010:	2100      	movs	r1, #0
   11012:	f007 fc71 	bl	188f8 <memset>
}
   11016:	bd08      	pop	{r3, pc}
   11018:	20000370 	.word	0x20000370
   1101c:	2000f914 	.word	0x2000f914

00011020 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   11020:	b500      	push	{lr}
   11022:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   11024:	4b1c      	ldr	r3, [pc, #112]	; (11098 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   11026:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1102a:	4c1c      	ldr	r4, [pc, #112]	; (1109c <z_cstart+0x7c>)
   1102c:	6963      	ldr	r3, [r4, #20]
   1102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   11032:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11034:	23e0      	movs	r3, #224	; 0xe0
   11036:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1103a:	2500      	movs	r5, #0
   1103c:	77e5      	strb	r5, [r4, #31]
   1103e:	7625      	strb	r5, [r4, #24]
   11040:	7665      	strb	r5, [r4, #25]
   11042:	76a5      	strb	r5, [r4, #26]
   11044:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   11048:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1104a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1104e:	6263      	str	r3, [r4, #36]	; 0x24
   11050:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   11054:	f7f3 fae6 	bl	4624 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   11058:	f7f3 f872 	bl	4140 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1105c:	f04f 33ff 	mov.w	r3, #4294967295
   11060:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   11062:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   11064:	f7f3 fbe8 	bl	4838 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   11068:	f7f3 fb82 	bl	4770 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1106c:	2401      	movs	r4, #1
   1106e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   11072:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   11076:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
   11078:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1107a:	4b09      	ldr	r3, [pc, #36]	; (110a0 <z_cstart+0x80>)
   1107c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   11080:	f7ff fee0 	bl	10e44 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   11084:	4628      	mov	r0, r5
   11086:	f7ff fee9 	bl	10e5c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1108a:	4620      	mov	r0, r4
   1108c:	f7ff fee6 	bl	10e5c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   11090:	f7ff ff4a 	bl	10f28 <prepare_multithreading>
   11094:	f7ff ffae 	bl	10ff4 <switch_to_main_thread>
   11098:	200182c0 	.word	0x200182c0
   1109c:	e000ed00 	.word	0xe000ed00
   110a0:	2000f6e4 	.word	0x2000f6e4

000110a4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   110a4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   110a6:	4c06      	ldr	r4, [pc, #24]	; (110c0 <init_mem_slab_module+0x1c>)
	int rc = 0;
   110a8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   110aa:	4b06      	ldr	r3, [pc, #24]	; (110c4 <init_mem_slab_module+0x20>)
   110ac:	429c      	cmp	r4, r3
   110ae:	d206      	bcs.n	110be <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   110b0:	4620      	mov	r0, r4
   110b2:	f007 f9a7 	bl	18404 <create_free_list>
		if (rc < 0) {
   110b6:	2800      	cmp	r0, #0
   110b8:	db01      	blt.n	110be <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   110ba:	3420      	adds	r4, #32
   110bc:	e7f5      	b.n	110aa <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   110be:	bd10      	pop	{r4, pc}
   110c0:	200002e4 	.word	0x200002e4
   110c4:	200002e4 	.word	0x200002e4

000110c8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   110c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   110ca:	b083      	sub	sp, #12
   110cc:	460c      	mov	r4, r1
   110ce:	461f      	mov	r7, r3
   110d0:	f04f 0320 	mov.w	r3, #32
   110d4:	f3ef 8111 	mrs	r1, BASEPRI
   110d8:	f383 8812 	msr	BASEPRI_MAX, r3
   110dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   110e0:	6983      	ldr	r3, [r0, #24]
   110e2:	b16b      	cbz	r3, 11100 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   110e4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   110e6:	6983      	ldr	r3, [r0, #24]
   110e8:	681b      	ldr	r3, [r3, #0]
   110ea:	6183      	str	r3, [r0, #24]
		slab->num_used++;
   110ec:	69c3      	ldr	r3, [r0, #28]
   110ee:	3301      	adds	r3, #1
   110f0:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   110f2:	2000      	movs	r0, #0
	__asm__ volatile(
   110f4:	f381 8811 	msr	BASEPRI, r1
   110f8:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   110fc:	b003      	add	sp, #12
   110fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11100:	4616      	mov	r6, r2
   11102:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   11106:	ea56 0307 	orrs.w	r3, r6, r7
   1110a:	d104      	bne.n	11116 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1110c:	2300      	movs	r3, #0
   1110e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   11110:	f06f 000b 	mvn.w	r0, #11
   11114:	e7ee      	b.n	110f4 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   11116:	e9cd 6700 	strd	r6, r7, [sp]
   1111a:	4602      	mov	r2, r0
   1111c:	4628      	mov	r0, r5
   1111e:	f000 fbdd 	bl	118dc <z_pend_curr>
		if (result == 0) {
   11122:	2800      	cmp	r0, #0
   11124:	d1ea      	bne.n	110fc <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   11126:	4b02      	ldr	r3, [pc, #8]	; (11130 <k_mem_slab_alloc+0x68>)
   11128:	689b      	ldr	r3, [r3, #8]
   1112a:	695b      	ldr	r3, [r3, #20]
   1112c:	6023      	str	r3, [r4, #0]
		return result;
   1112e:	e7e5      	b.n	110fc <k_mem_slab_alloc+0x34>
   11130:	2000f6e4 	.word	0x2000f6e4

00011134 <z_thread_monitor_exit>:
	__asm__ volatile(
   11134:	f04f 0320 	mov.w	r3, #32
   11138:	f3ef 8111 	mrs	r1, BASEPRI
   1113c:	f383 8812 	msr	BASEPRI_MAX, r3
   11140:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   11144:	4b0a      	ldr	r3, [pc, #40]	; (11170 <z_thread_monitor_exit+0x3c>)
   11146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11148:	4283      	cmp	r3, r0
   1114a:	d104      	bne.n	11156 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1114c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1114e:	4b08      	ldr	r3, [pc, #32]	; (11170 <z_thread_monitor_exit+0x3c>)
   11150:	629a      	str	r2, [r3, #40]	; 0x28
   11152:	e007      	b.n	11164 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   11154:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   11156:	b113      	cbz	r3, 1115e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   11158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
   1115a:	4282      	cmp	r2, r0
   1115c:	d1fa      	bne.n	11154 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1115e:	b10b      	cbz	r3, 11164 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   11160:	6f02      	ldr	r2, [r0, #112]	; 0x70
   11162:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
   11164:	f381 8811 	msr	BASEPRI, r1
   11168:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1116c:	4770      	bx	lr
   1116e:	bf00      	nop
   11170:	2000f6e4 	.word	0x2000f6e4

00011174 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   11174:	b538      	push	{r3, r4, r5, lr}
   11176:	4614      	mov	r4, r2
   11178:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1117a:	ea54 0305 	orrs.w	r3, r4, r5
   1117e:	d102      	bne.n	11186 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   11180:	f007 f9aa 	bl	184d8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   11184:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11186:	462b      	mov	r3, r5
   11188:	4902      	ldr	r1, [pc, #8]	; (11194 <schedule_new_thread+0x20>)
   1118a:	3018      	adds	r0, #24
   1118c:	f000 fe2e 	bl	11dec <z_add_timeout>
   11190:	e7f8      	b.n	11184 <schedule_new_thread+0x10>
   11192:	bf00      	nop
   11194:	0001860f 	.word	0x0001860f

00011198 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   11198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1119c:	b085      	sub	sp, #20
   1119e:	4604      	mov	r4, r0
   111a0:	460f      	mov	r7, r1
   111a2:	4615      	mov	r5, r2
   111a4:	461e      	mov	r6, r3
   111a6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   111aa:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   111ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   111b2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   111b6:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   111ba:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   111bc:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   111be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111c0:	2204      	movs	r2, #4
   111c2:	9911      	ldr	r1, [sp, #68]	; 0x44
   111c4:	f007 f98c 	bl	184e0 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   111c8:	462a      	mov	r2, r5
   111ca:	4639      	mov	r1, r7
   111cc:	4620      	mov	r0, r4
   111ce:	f007 f96b 	bl	184a8 <setup_thread_stack>
   111d2:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   111d4:	f8cd 8008 	str.w	r8, [sp, #8]
   111d8:	f8cd 9004 	str.w	r9, [sp, #4]
   111dc:	f8cd a000 	str.w	sl, [sp]
   111e0:	4633      	mov	r3, r6
   111e2:	4602      	mov	r2, r0
   111e4:	4639      	mov	r1, r7
   111e6:	4620      	mov	r0, r4
   111e8:	f7f3 f874 	bl	42d4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   111ec:	2300      	movs	r3, #0
   111ee:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   111f0:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
   111f2:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   111f6:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   111fa:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
   111fe:	f04f 0320 	mov.w	r3, #32
   11202:	f3ef 8211 	mrs	r2, BASEPRI
   11206:	f383 8812 	msr	BASEPRI_MAX, r3
   1120a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1120e:	4b13      	ldr	r3, [pc, #76]	; (1125c <z_setup_new_thread+0xc4>)
   11210:	6a99      	ldr	r1, [r3, #40]	; 0x28
   11212:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
   11214:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   11216:	f382 8811 	msr	BASEPRI, r2
   1121a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1121e:	f1bb 0f00 	cmp.w	fp, #0
   11222:	d013      	beq.n	1124c <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   11224:	221f      	movs	r2, #31
   11226:	4659      	mov	r1, fp
   11228:	f104 0074 	add.w	r0, r4, #116	; 0x74
   1122c:	f007 fcda 	bl	18be4 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   11230:	2300      	movs	r3, #0
   11232:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   11236:	4b09      	ldr	r3, [pc, #36]	; (1125c <z_setup_new_thread+0xc4>)
   11238:	689b      	ldr	r3, [r3, #8]
   1123a:	b15b      	cbz	r3, 11254 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1123c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   11240:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   11244:	4628      	mov	r0, r5
   11246:	b005      	add	sp, #20
   11248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1124c:	2300      	movs	r3, #0
   1124e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   11252:	e7f0      	b.n	11236 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   11254:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
   11258:	e7f4      	b.n	11244 <z_setup_new_thread+0xac>
   1125a:	bf00      	nop
   1125c:	2000f6e4 	.word	0x2000f6e4

00011260 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   11260:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   11264:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   11266:	4c23      	ldr	r4, [pc, #140]	; (112f4 <z_init_static_threads+0x94>)
   11268:	4b23      	ldr	r3, [pc, #140]	; (112f8 <z_init_static_threads+0x98>)
   1126a:	429c      	cmp	r4, r3
   1126c:	d215      	bcs.n	1129a <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1126e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11270:	9305      	str	r3, [sp, #20]
   11272:	6a23      	ldr	r3, [r4, #32]
   11274:	9304      	str	r3, [sp, #16]
   11276:	69e3      	ldr	r3, [r4, #28]
   11278:	9303      	str	r3, [sp, #12]
   1127a:	69a3      	ldr	r3, [r4, #24]
   1127c:	9302      	str	r3, [sp, #8]
   1127e:	6963      	ldr	r3, [r4, #20]
   11280:	9301      	str	r3, [sp, #4]
   11282:	6923      	ldr	r3, [r4, #16]
   11284:	9300      	str	r3, [sp, #0]
   11286:	68e3      	ldr	r3, [r4, #12]
   11288:	68a2      	ldr	r2, [r4, #8]
   1128a:	6861      	ldr	r1, [r4, #4]
   1128c:	6820      	ldr	r0, [r4, #0]
   1128e:	f7ff ff83 	bl	11198 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   11292:	6823      	ldr	r3, [r4, #0]
   11294:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   11296:	3430      	adds	r4, #48	; 0x30
   11298:	e7e6      	b.n	11268 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1129a:	f000 f9d7 	bl	1164c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1129e:	4c15      	ldr	r4, [pc, #84]	; (112f4 <z_init_static_threads+0x94>)
   112a0:	e01b      	b.n	112da <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   112a2:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   112a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   112a8:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   112ac:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   112b0:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   112b4:	03d8      	lsls	r0, r3, #15
   112b6:	f240 35e7 	movw	r5, #999	; 0x3e7
   112ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   112be:	2300      	movs	r3, #0
   112c0:	1940      	adds	r0, r0, r5
   112c2:	f04f 0500 	mov.w	r5, #0
   112c6:	eb45 0101 	adc.w	r1, r5, r1
   112ca:	f7ef ff31 	bl	1130 <__aeabi_uldivmod>
   112ce:	4602      	mov	r2, r0
   112d0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   112d2:	4630      	mov	r0, r6
   112d4:	f7ff ff4e 	bl	11174 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   112d8:	3430      	adds	r4, #48	; 0x30
   112da:	4b07      	ldr	r3, [pc, #28]	; (112f8 <z_init_static_threads+0x98>)
   112dc:	429c      	cmp	r4, r3
   112de:	d204      	bcs.n	112ea <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   112e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   112e2:	f1b3 3fff 	cmp.w	r3, #4294967295
   112e6:	d0f7      	beq.n	112d8 <z_init_static_threads+0x78>
   112e8:	e7db      	b.n	112a2 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   112ea:	f000 fbad 	bl	11a48 <k_sched_unlock>
}
   112ee:	b006      	add	sp, #24
   112f0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   112f4:	200002e4 	.word	0x200002e4
   112f8:	200002e4 	.word	0x200002e4

000112fc <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   112fc:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   112fe:	f007 fa65 	bl	187cc <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   11302:	4b04      	ldr	r3, [pc, #16]	; (11314 <pm_save_idle+0x18>)
   11304:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   11306:	f7f2 fde1 	bl	3ecc <pm_system_suspend>
   1130a:	b100      	cbz	r0, 1130e <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   1130c:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   1130e:	f7f2 ff1d 	bl	414c <arch_cpu_idle>
   11312:	e7fb      	b.n	1130c <pm_save_idle+0x10>
   11314:	2000f6e4 	.word	0x2000f6e4

00011318 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   11318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1131c:	b083      	sub	sp, #12
   1131e:	4604      	mov	r4, r0
   11320:	461d      	mov	r5, r3
	__asm__ volatile(
   11322:	f04f 0320 	mov.w	r3, #32
   11326:	f3ef 8711 	mrs	r7, BASEPRI
   1132a:	f383 8812 	msr	BASEPRI_MAX, r3
   1132e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   11332:	68c1      	ldr	r1, [r0, #12]
   11334:	b999      	cbnz	r1, 1135e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   11336:	2900      	cmp	r1, #0
   11338:	d14f      	bne.n	113da <z_impl_k_mutex_lock+0xc2>
   1133a:	4b3a      	ldr	r3, [pc, #232]	; (11424 <z_impl_k_mutex_lock+0x10c>)
   1133c:	689b      	ldr	r3, [r3, #8]
   1133e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   11342:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   11344:	3101      	adds	r1, #1
   11346:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   11348:	4b36      	ldr	r3, [pc, #216]	; (11424 <z_impl_k_mutex_lock+0x10c>)
   1134a:	689b      	ldr	r3, [r3, #8]
   1134c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1134e:	f387 8811 	msr	BASEPRI, r7
   11352:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   11356:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   11358:	b003      	add	sp, #12
   1135a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1135e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   11360:	6882      	ldr	r2, [r0, #8]
   11362:	4b30      	ldr	r3, [pc, #192]	; (11424 <z_impl_k_mutex_lock+0x10c>)
   11364:	689b      	ldr	r3, [r3, #8]
   11366:	429a      	cmp	r2, r3
   11368:	d0e5      	beq.n	11336 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1136a:	ea55 0106 	orrs.w	r1, r5, r6
   1136e:	bf0c      	ite	eq
   11370:	f04f 0801 	moveq.w	r8, #1
   11374:	f04f 0800 	movne.w	r8, #0
   11378:	d031      	beq.n	113de <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1137a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1137e:	4649      	mov	r1, r9
   11380:	f993 000e 	ldrsb.w	r0, [r3, #14]
   11384:	f007 f8c9 	bl	1851a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   11388:	4581      	cmp	r9, r0
   1138a:	dc2f      	bgt.n	113ec <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1138c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   11390:	9600      	str	r6, [sp, #0]
   11392:	9501      	str	r5, [sp, #4]
   11394:	4622      	mov	r2, r4
   11396:	4639      	mov	r1, r7
   11398:	4823      	ldr	r0, [pc, #140]	; (11428 <z_impl_k_mutex_lock+0x110>)
   1139a:	f000 fa9f 	bl	118dc <z_pend_curr>
	if (got_mutex == 0) {
   1139e:	2800      	cmp	r0, #0
   113a0:	d0da      	beq.n	11358 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   113a2:	f04f 0320 	mov.w	r3, #32
   113a6:	f3ef 8511 	mrs	r5, BASEPRI
   113aa:	f383 8812 	msr	BASEPRI_MAX, r3
   113ae:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   113b2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   113b4:	429c      	cmp	r4, r3
   113b6:	d01f      	beq.n	113f8 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   113b8:	b1f3      	cbz	r3, 113f8 <z_impl_k_mutex_lock+0xe0>
   113ba:	6921      	ldr	r1, [r4, #16]
   113bc:	f993 000e 	ldrsb.w	r0, [r3, #14]
   113c0:	f007 f8ab 	bl	1851a <new_prio_for_inheritance>
   113c4:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   113c6:	4620      	mov	r0, r4
   113c8:	f007 f8b2 	bl	18530 <adjust_owner_prio>
   113cc:	b9b0      	cbnz	r0, 113fc <z_impl_k_mutex_lock+0xe4>
   113ce:	f1b9 0f00 	cmp.w	r9, #0
   113d2:	d015      	beq.n	11400 <z_impl_k_mutex_lock+0xe8>
   113d4:	f04f 0801 	mov.w	r8, #1
   113d8:	e012      	b.n	11400 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   113da:	6923      	ldr	r3, [r4, #16]
   113dc:	e7b1      	b.n	11342 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   113de:	f387 8811 	msr	BASEPRI, r7
   113e2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   113e6:	f06f 000f 	mvn.w	r0, #15
   113ea:	e7b5      	b.n	11358 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   113ec:	4601      	mov	r1, r0
   113ee:	4620      	mov	r0, r4
   113f0:	f007 f89e 	bl	18530 <adjust_owner_prio>
   113f4:	4681      	mov	r9, r0
   113f6:	e7cb      	b.n	11390 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   113f8:	6921      	ldr	r1, [r4, #16]
   113fa:	e7e4      	b.n	113c6 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   113fc:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   11400:	f1b8 0f00 	cmp.w	r8, #0
   11404:	d106      	bne.n	11414 <z_impl_k_mutex_lock+0xfc>
   11406:	f385 8811 	msr	BASEPRI, r5
   1140a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1140e:	f06f 000a 	mvn.w	r0, #10
   11412:	e7a1      	b.n	11358 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   11414:	4629      	mov	r1, r5
   11416:	4804      	ldr	r0, [pc, #16]	; (11428 <z_impl_k_mutex_lock+0x110>)
   11418:	f000 f8fc 	bl	11614 <z_reschedule>
	return -EAGAIN;
   1141c:	f06f 000a 	mvn.w	r0, #10
   11420:	e79a      	b.n	11358 <z_impl_k_mutex_lock+0x40>
   11422:	bf00      	nop
   11424:	2000f6e4 	.word	0x2000f6e4
   11428:	2000f710 	.word	0x2000f710

0001142c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1142c:	6882      	ldr	r2, [r0, #8]
   1142e:	2a00      	cmp	r2, #0
   11430:	d035      	beq.n	1149e <z_impl_k_mutex_unlock+0x72>
{
   11432:	b538      	push	{r3, r4, r5, lr}
   11434:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   11436:	4b1d      	ldr	r3, [pc, #116]	; (114ac <z_impl_k_mutex_unlock+0x80>)
   11438:	689b      	ldr	r3, [r3, #8]
   1143a:	429a      	cmp	r2, r3
   1143c:	d132      	bne.n	114a4 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1143e:	7bda      	ldrb	r2, [r3, #15]
   11440:	3a01      	subs	r2, #1
   11442:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   11444:	68c3      	ldr	r3, [r0, #12]
   11446:	2b01      	cmp	r3, #1
   11448:	d905      	bls.n	11456 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1144a:	3b01      	subs	r3, #1
   1144c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1144e:	f000 fafb 	bl	11a48 <k_sched_unlock>

	return 0;
   11452:	2000      	movs	r0, #0
}
   11454:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11456:	f04f 0320 	mov.w	r3, #32
   1145a:	f3ef 8511 	mrs	r5, BASEPRI
   1145e:	f383 8812 	msr	BASEPRI_MAX, r3
   11462:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   11466:	6901      	ldr	r1, [r0, #16]
   11468:	f007 f862 	bl	18530 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1146c:	4620      	mov	r0, r4
   1146e:	f007 f94d 	bl	1870c <z_unpend_first_thread>
	mutex->owner = new_owner;
   11472:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   11474:	b160      	cbz	r0, 11490 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   11476:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1147a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1147c:	2300      	movs	r3, #0
   1147e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
   11482:	f007 f8a8 	bl	185d6 <z_ready_thread>
		z_reschedule(&lock, key);
   11486:	4629      	mov	r1, r5
   11488:	4809      	ldr	r0, [pc, #36]	; (114b0 <z_impl_k_mutex_unlock+0x84>)
   1148a:	f000 f8c3 	bl	11614 <z_reschedule>
   1148e:	e7de      	b.n	1144e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   11490:	2300      	movs	r3, #0
   11492:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   11494:	f385 8811 	msr	BASEPRI, r5
   11498:	f3bf 8f6f 	isb	sy
   1149c:	e7d7      	b.n	1144e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1149e:	f06f 0015 	mvn.w	r0, #21
}
   114a2:	4770      	bx	lr
		return -EPERM;
   114a4:	f04f 30ff 	mov.w	r0, #4294967295
   114a8:	e7d4      	b.n	11454 <z_impl_k_mutex_unlock+0x28>
   114aa:	bf00      	nop
   114ac:	2000f6e4 	.word	0x2000f6e4
   114b0:	2000f710 	.word	0x2000f710

000114b4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   114b4:	b538      	push	{r3, r4, r5, lr}
   114b6:	4604      	mov	r4, r0
	__asm__ volatile(
   114b8:	f04f 0320 	mov.w	r3, #32
   114bc:	f3ef 8511 	mrs	r5, BASEPRI
   114c0:	f383 8812 	msr	BASEPRI_MAX, r3
   114c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   114c8:	f007 f920 	bl	1870c <z_unpend_first_thread>

	if (thread != NULL) {
   114cc:	b148      	cbz	r0, 114e2 <z_impl_k_sem_give+0x2e>
   114ce:	2200      	movs	r2, #0
   114d0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   114d4:	f007 f87f 	bl	185d6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   114d8:	4629      	mov	r1, r5
   114da:	4807      	ldr	r0, [pc, #28]	; (114f8 <z_impl_k_sem_give+0x44>)
   114dc:	f000 f89a 	bl	11614 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   114e0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   114e2:	68a3      	ldr	r3, [r4, #8]
   114e4:	68e2      	ldr	r2, [r4, #12]
   114e6:	4293      	cmp	r3, r2
   114e8:	d003      	beq.n	114f2 <z_impl_k_sem_give+0x3e>
   114ea:	2201      	movs	r2, #1
   114ec:	4413      	add	r3, r2
   114ee:	60a3      	str	r3, [r4, #8]
}
   114f0:	e7f2      	b.n	114d8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   114f2:	2200      	movs	r2, #0
   114f4:	e7fa      	b.n	114ec <z_impl_k_sem_give+0x38>
   114f6:	bf00      	nop
   114f8:	2000f714 	.word	0x2000f714

000114fc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   114fc:	b530      	push	{r4, r5, lr}
   114fe:	b083      	sub	sp, #12
   11500:	461d      	mov	r5, r3
   11502:	f04f 0320 	mov.w	r3, #32
   11506:	f3ef 8111 	mrs	r1, BASEPRI
   1150a:	f383 8812 	msr	BASEPRI_MAX, r3
   1150e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   11512:	6883      	ldr	r3, [r0, #8]
   11514:	b143      	cbz	r3, 11528 <z_impl_k_sem_take+0x2c>
		sem->count--;
   11516:	3b01      	subs	r3, #1
   11518:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1151a:	f381 8811 	msr	BASEPRI, r1
   1151e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   11522:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   11524:	b003      	add	sp, #12
   11526:	bd30      	pop	{r4, r5, pc}
   11528:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1152a:	ea54 0305 	orrs.w	r3, r4, r5
   1152e:	d006      	beq.n	1153e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   11530:	e9cd 4500 	strd	r4, r5, [sp]
   11534:	4602      	mov	r2, r0
   11536:	4805      	ldr	r0, [pc, #20]	; (1154c <z_impl_k_sem_take+0x50>)
   11538:	f000 f9d0 	bl	118dc <z_pend_curr>
	return ret;
   1153c:	e7f2      	b.n	11524 <z_impl_k_sem_take+0x28>
   1153e:	f381 8811 	msr	BASEPRI, r1
   11542:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   11546:	f06f 000f 	mvn.w	r0, #15
   1154a:	e7eb      	b.n	11524 <z_impl_k_sem_take+0x28>
   1154c:	2000f714 	.word	0x2000f714

00011550 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   11550:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11552:	f1b3 3fff 	cmp.w	r3, #4294967295
   11556:	bf08      	it	eq
   11558:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1155c:	d100      	bne.n	11560 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1155e:	bd38      	pop	{r3, r4, r5, pc}
   11560:	4902      	ldr	r1, [pc, #8]	; (1156c <add_thread_timeout+0x1c>)
   11562:	3018      	adds	r0, #24
   11564:	f000 fc42 	bl	11dec <z_add_timeout>
   11568:	e7f9      	b.n	1155e <add_thread_timeout+0xe>
   1156a:	bf00      	nop
   1156c:	0001860f 	.word	0x0001860f

00011570 <z_reset_time_slice>:
{
   11570:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   11572:	4b08      	ldr	r3, [pc, #32]	; (11594 <z_reset_time_slice+0x24>)
   11574:	681b      	ldr	r3, [r3, #0]
   11576:	b903      	cbnz	r3, 1157a <z_reset_time_slice+0xa>
}
   11578:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1157a:	f7f4 fac3 	bl	5b04 <sys_clock_elapsed>
   1157e:	4603      	mov	r3, r0
   11580:	4a04      	ldr	r2, [pc, #16]	; (11594 <z_reset_time_slice+0x24>)
   11582:	6810      	ldr	r0, [r2, #0]
   11584:	4403      	add	r3, r0
   11586:	4a04      	ldr	r2, [pc, #16]	; (11598 <z_reset_time_slice+0x28>)
   11588:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1158a:	2100      	movs	r1, #0
   1158c:	f007 f934 	bl	187f8 <z_set_timeout_expiry>
}
   11590:	e7f2      	b.n	11578 <z_reset_time_slice+0x8>
   11592:	bf00      	nop
   11594:	2000f724 	.word	0x2000f724
   11598:	2000f6e4 	.word	0x2000f6e4

0001159c <k_sched_time_slice_set>:
{
   1159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115a0:	4606      	mov	r6, r0
   115a2:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   115a4:	2300      	movs	r3, #0
	__asm__ volatile(
   115a6:	f04f 0220 	mov.w	r2, #32
   115aa:	f3ef 8711 	mrs	r7, BASEPRI
   115ae:	f382 8812 	msr	BASEPRI_MAX, r2
   115b2:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   115b6:	e009      	b.n	115cc <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   115b8:	4b13      	ldr	r3, [pc, #76]	; (11608 <k_sched_time_slice_set+0x6c>)
   115ba:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   115be:	f7ff ffd7 	bl	11570 <z_reset_time_slice>
	__asm__ volatile(
   115c2:	f387 8811 	msr	BASEPRI, r7
   115c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   115ca:	2301      	movs	r3, #1
   115cc:	b9cb      	cbnz	r3, 11602 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   115ce:	2300      	movs	r3, #0
   115d0:	4a0e      	ldr	r2, [pc, #56]	; (1160c <k_sched_time_slice_set+0x70>)
   115d2:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   115d4:	0c75      	lsrs	r5, r6, #17
   115d6:	03f4      	lsls	r4, r6, #15
   115d8:	f240 30e7 	movw	r0, #999	; 0x3e7
   115dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   115e0:	2300      	movs	r3, #0
   115e2:	1820      	adds	r0, r4, r0
   115e4:	f04f 0100 	mov.w	r1, #0
   115e8:	eb45 0101 	adc.w	r1, r5, r1
   115ec:	f7ef fda0 	bl	1130 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   115f0:	4b07      	ldr	r3, [pc, #28]	; (11610 <k_sched_time_slice_set+0x74>)
   115f2:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   115f4:	2e00      	cmp	r6, #0
   115f6:	dddf      	ble.n	115b8 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   115f8:	2802      	cmp	r0, #2
   115fa:	bfb8      	it	lt
   115fc:	2002      	movlt	r0, #2
   115fe:	6018      	str	r0, [r3, #0]
   11600:	e7da      	b.n	115b8 <k_sched_time_slice_set+0x1c>
}
   11602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11606:	bf00      	nop
   11608:	2000f720 	.word	0x2000f720
   1160c:	2000f6e4 	.word	0x2000f6e4
   11610:	2000f724 	.word	0x2000f724

00011614 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   11614:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   11616:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11618:	b921      	cbnz	r1, 11624 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1161a:	f3ef 8305 	mrs	r3, IPSR
   1161e:	b913      	cbnz	r3, 11626 <z_reschedule+0x12>
   11620:	2101      	movs	r1, #1
   11622:	e000      	b.n	11626 <z_reschedule+0x12>
   11624:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   11626:	f011 0f01 	tst.w	r1, #1
   1162a:	d007      	beq.n	1163c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1162c:	4b06      	ldr	r3, [pc, #24]	; (11648 <z_reschedule+0x34>)
   1162e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   11630:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   11632:	429a      	cmp	r2, r3
   11634:	d002      	beq.n	1163c <z_reschedule+0x28>
	ret = arch_swap(key);
   11636:	f7f2 fdf5 	bl	4224 <arch_swap>
		z_swap(lock, key);
   1163a:	e003      	b.n	11644 <z_reschedule+0x30>
   1163c:	f380 8811 	msr	BASEPRI, r0
   11640:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   11644:	bd08      	pop	{r3, pc}
   11646:	bf00      	nop
   11648:	2000f6e4 	.word	0x2000f6e4

0001164c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1164c:	2300      	movs	r3, #0
	__asm__ volatile(
   1164e:	f04f 0220 	mov.w	r2, #32
   11652:	f3ef 8111 	mrs	r1, BASEPRI
   11656:	f382 8812 	msr	BASEPRI_MAX, r2
   1165a:	f3bf 8f6f 	isb	sy
   1165e:	b953      	cbnz	r3, 11676 <k_sched_lock+0x2a>
   11660:	4b05      	ldr	r3, [pc, #20]	; (11678 <k_sched_lock+0x2c>)
   11662:	689a      	ldr	r2, [r3, #8]
   11664:	7bd3      	ldrb	r3, [r2, #15]
   11666:	3b01      	subs	r3, #1
   11668:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1166a:	f381 8811 	msr	BASEPRI, r1
   1166e:	f3bf 8f6f 	isb	sy
   11672:	2301      	movs	r3, #1
   11674:	e7f3      	b.n	1165e <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   11676:	4770      	bx	lr
   11678:	2000f6e4 	.word	0x2000f6e4

0001167c <update_cache>:
{
   1167c:	b538      	push	{r3, r4, r5, lr}
   1167e:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   11680:	480f      	ldr	r0, [pc, #60]	; (116c0 <update_cache+0x44>)
   11682:	f006 ffa1 	bl	185c8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   11686:	4605      	mov	r5, r0
   11688:	b170      	cbz	r0, 116a8 <update_cache+0x2c>
	if (preempt_ok != 0) {
   1168a:	b984      	cbnz	r4, 116ae <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1168c:	4b0d      	ldr	r3, [pc, #52]	; (116c4 <update_cache+0x48>)
   1168e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   11690:	7b5a      	ldrb	r2, [r3, #13]
   11692:	f012 0f1f 	tst.w	r2, #31
   11696:	d10a      	bne.n	116ae <update_cache+0x32>
	return node->next != NULL;
   11698:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1169a:	b942      	cbnz	r2, 116ae <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1169c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1169e:	2a7f      	cmp	r2, #127	; 0x7f
   116a0:	d905      	bls.n	116ae <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   116a2:	4a08      	ldr	r2, [pc, #32]	; (116c4 <update_cache+0x48>)
   116a4:	61d3      	str	r3, [r2, #28]
   116a6:	e00a      	b.n	116be <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   116a8:	4b06      	ldr	r3, [pc, #24]	; (116c4 <update_cache+0x48>)
   116aa:	68dd      	ldr	r5, [r3, #12]
   116ac:	e7ed      	b.n	1168a <update_cache+0xe>
		if (thread != _current) {
   116ae:	4b05      	ldr	r3, [pc, #20]	; (116c4 <update_cache+0x48>)
   116b0:	689b      	ldr	r3, [r3, #8]
   116b2:	42ab      	cmp	r3, r5
   116b4:	d001      	beq.n	116ba <update_cache+0x3e>
			z_reset_time_slice();
   116b6:	f7ff ff5b 	bl	11570 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   116ba:	4b02      	ldr	r3, [pc, #8]	; (116c4 <update_cache+0x48>)
   116bc:	61dd      	str	r5, [r3, #28]
}
   116be:	bd38      	pop	{r3, r4, r5, pc}
   116c0:	2000f704 	.word	0x2000f704
   116c4:	2000f6e4 	.word	0x2000f6e4

000116c8 <move_thread_to_end_of_prio_q>:
{
   116c8:	b538      	push	{r3, r4, r5, lr}
   116ca:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   116cc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   116ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
   116d2:	2b00      	cmp	r3, #0
   116d4:	db28      	blt.n	11728 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   116d6:	7b6b      	ldrb	r3, [r5, #13]
   116d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   116dc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   116de:	4b1a      	ldr	r3, [pc, #104]	; (11748 <move_thread_to_end_of_prio_q+0x80>)
   116e0:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116e4:	429c      	cmp	r4, r3
   116e6:	d02d      	beq.n	11744 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   116e8:	b16c      	cbz	r4, 11706 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   116ea:	4621      	mov	r1, r4
   116ec:	4628      	mov	r0, r5
   116ee:	f006 ff44 	bl	1857a <z_sched_prio_cmp>
   116f2:	2800      	cmp	r0, #0
   116f4:	dc20      	bgt.n	11738 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   116f6:	b134      	cbz	r4, 11706 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   116f8:	4b13      	ldr	r3, [pc, #76]	; (11748 <move_thread_to_end_of_prio_q+0x80>)
   116fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   116fc:	429c      	cmp	r4, r3
   116fe:	d002      	beq.n	11706 <move_thread_to_end_of_prio_q+0x3e>
   11700:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11702:	2c00      	cmp	r4, #0
   11704:	d1f0      	bne.n	116e8 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   11706:	4b10      	ldr	r3, [pc, #64]	; (11748 <move_thread_to_end_of_prio_q+0x80>)
   11708:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1170a:	f103 0120 	add.w	r1, r3, #32
   1170e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11710:	606a      	str	r2, [r5, #4]

	tail->next = node;
   11712:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11714:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   11716:	4b0c      	ldr	r3, [pc, #48]	; (11748 <move_thread_to_end_of_prio_q+0x80>)
   11718:	6898      	ldr	r0, [r3, #8]
   1171a:	42a8      	cmp	r0, r5
   1171c:	bf14      	ite	ne
   1171e:	2000      	movne	r0, #0
   11720:	2001      	moveq	r0, #1
   11722:	f7ff ffab 	bl	1167c <update_cache>
}
   11726:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11728:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1172c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1172e:	4601      	mov	r1, r0
   11730:	4806      	ldr	r0, [pc, #24]	; (1174c <move_thread_to_end_of_prio_q+0x84>)
   11732:	f006 ff41 	bl	185b8 <z_priq_dumb_remove>
}
   11736:	e7ce      	b.n	116d6 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   11738:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1173a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1173c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1173e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11740:	6065      	str	r5, [r4, #4]
}
   11742:	e7e8      	b.n	11716 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11744:	2400      	movs	r4, #0
   11746:	e7cf      	b.n	116e8 <move_thread_to_end_of_prio_q+0x20>
   11748:	2000f6e4 	.word	0x2000f6e4
   1174c:	2000f704 	.word	0x2000f704

00011750 <z_time_slice>:
{
   11750:	b510      	push	{r4, lr}
	__asm__ volatile(
   11752:	f04f 0320 	mov.w	r3, #32
   11756:	f3ef 8411 	mrs	r4, BASEPRI
   1175a:	f383 8812 	msr	BASEPRI_MAX, r3
   1175e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   11762:	4b1c      	ldr	r3, [pc, #112]	; (117d4 <z_time_slice+0x84>)
   11764:	689b      	ldr	r3, [r3, #8]
   11766:	4a1c      	ldr	r2, [pc, #112]	; (117d8 <z_time_slice+0x88>)
   11768:	6812      	ldr	r2, [r2, #0]
   1176a:	4293      	cmp	r3, r2
   1176c:	d01d      	beq.n	117aa <z_time_slice+0x5a>
	pending_current = NULL;
   1176e:	4a1a      	ldr	r2, [pc, #104]	; (117d8 <z_time_slice+0x88>)
   11770:	2100      	movs	r1, #0
   11772:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   11774:	4a19      	ldr	r2, [pc, #100]	; (117dc <z_time_slice+0x8c>)
   11776:	6812      	ldr	r2, [r2, #0]
   11778:	b322      	cbz	r2, 117c4 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1177a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1177c:	2a7f      	cmp	r2, #127	; 0x7f
   1177e:	d821      	bhi.n	117c4 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   11780:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   11782:	f012 0f1f 	tst.w	r2, #31
   11786:	d11d      	bne.n	117c4 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   11788:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1178c:	4a14      	ldr	r2, [pc, #80]	; (117e0 <z_time_slice+0x90>)
   1178e:	6812      	ldr	r2, [r2, #0]
   11790:	4291      	cmp	r1, r2
   11792:	db17      	blt.n	117c4 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   11794:	4a13      	ldr	r2, [pc, #76]	; (117e4 <z_time_slice+0x94>)
   11796:	4293      	cmp	r3, r2
   11798:	d014      	beq.n	117c4 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1179a:	4a0e      	ldr	r2, [pc, #56]	; (117d4 <z_time_slice+0x84>)
   1179c:	6912      	ldr	r2, [r2, #16]
   1179e:	4282      	cmp	r2, r0
   117a0:	dd0a      	ble.n	117b8 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   117a2:	1a10      	subs	r0, r2, r0
   117a4:	4b0b      	ldr	r3, [pc, #44]	; (117d4 <z_time_slice+0x84>)
   117a6:	6118      	str	r0, [r3, #16]
   117a8:	e00f      	b.n	117ca <z_time_slice+0x7a>
		z_reset_time_slice();
   117aa:	f7ff fee1 	bl	11570 <z_reset_time_slice>
	__asm__ volatile(
   117ae:	f384 8811 	msr	BASEPRI, r4
   117b2:	f3bf 8f6f 	isb	sy
		return;
   117b6:	e00c      	b.n	117d2 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   117b8:	4618      	mov	r0, r3
   117ba:	f7ff ff85 	bl	116c8 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   117be:	f7ff fed7 	bl	11570 <z_reset_time_slice>
   117c2:	e002      	b.n	117ca <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   117c4:	4b03      	ldr	r3, [pc, #12]	; (117d4 <z_time_slice+0x84>)
   117c6:	2200      	movs	r2, #0
   117c8:	611a      	str	r2, [r3, #16]
   117ca:	f384 8811 	msr	BASEPRI, r4
   117ce:	f3bf 8f6f 	isb	sy
}
   117d2:	bd10      	pop	{r4, pc}
   117d4:	2000f6e4 	.word	0x2000f6e4
   117d8:	2000f718 	.word	0x2000f718
   117dc:	2000f724 	.word	0x2000f724
   117e0:	2000f720 	.word	0x2000f720
   117e4:	20000390 	.word	0x20000390

000117e8 <ready_thread>:
{
   117e8:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   117ea:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   117ec:	f990 200d 	ldrsb.w	r2, [r0, #13]
   117f0:	2a00      	cmp	r2, #0
   117f2:	db2d      	blt.n	11850 <ready_thread+0x68>
   117f4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   117f6:	f013 0f1f 	tst.w	r3, #31
   117fa:	d105      	bne.n	11808 <ready_thread+0x20>
	return node->next != NULL;
   117fc:	6982      	ldr	r2, [r0, #24]
   117fe:	b10a      	cbz	r2, 11804 <ready_thread+0x1c>
   11800:	2200      	movs	r2, #0
   11802:	e002      	b.n	1180a <ready_thread+0x22>
   11804:	2201      	movs	r2, #1
   11806:	e000      	b.n	1180a <ready_thread+0x22>
   11808:	2200      	movs	r2, #0
   1180a:	b30a      	cbz	r2, 11850 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1180c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11810:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   11812:	4b14      	ldr	r3, [pc, #80]	; (11864 <ready_thread+0x7c>)
   11814:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11818:	429d      	cmp	r5, r3
   1181a:	d020      	beq.n	1185e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1181c:	b16d      	cbz	r5, 1183a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1181e:	4629      	mov	r1, r5
   11820:	4620      	mov	r0, r4
   11822:	f006 feaa 	bl	1857a <z_sched_prio_cmp>
   11826:	2800      	cmp	r0, #0
   11828:	dc13      	bgt.n	11852 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1182a:	b135      	cbz	r5, 1183a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1182c:	4b0d      	ldr	r3, [pc, #52]	; (11864 <ready_thread+0x7c>)
   1182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11830:	429d      	cmp	r5, r3
   11832:	d002      	beq.n	1183a <ready_thread+0x52>
   11834:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11836:	2d00      	cmp	r5, #0
   11838:	d1f0      	bne.n	1181c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1183a:	4b0a      	ldr	r3, [pc, #40]	; (11864 <ready_thread+0x7c>)
   1183c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1183e:	f103 0120 	add.w	r1, r3, #32
   11842:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   11844:	6062      	str	r2, [r4, #4]
	tail->next = node;
   11846:	6014      	str	r4, [r2, #0]
	list->tail = node;
   11848:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   1184a:	2000      	movs	r0, #0
   1184c:	f7ff ff16 	bl	1167c <update_cache>
}
   11850:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   11852:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   11854:	6063      	str	r3, [r4, #4]
	node->next = successor;
   11856:	6025      	str	r5, [r4, #0]
	prev->next = node;
   11858:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1185a:	606c      	str	r4, [r5, #4]
}
   1185c:	e7f5      	b.n	1184a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1185e:	2500      	movs	r5, #0
   11860:	e7dc      	b.n	1181c <ready_thread+0x34>
   11862:	bf00      	nop
   11864:	2000f6e4 	.word	0x2000f6e4

00011868 <z_sched_start>:
{
   11868:	b510      	push	{r4, lr}
	__asm__ volatile(
   1186a:	f04f 0320 	mov.w	r3, #32
   1186e:	f3ef 8411 	mrs	r4, BASEPRI
   11872:	f383 8812 	msr	BASEPRI_MAX, r3
   11876:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1187a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1187c:	f013 0f04 	tst.w	r3, #4
   11880:	d104      	bne.n	1188c <z_sched_start+0x24>
	__asm__ volatile(
   11882:	f384 8811 	msr	BASEPRI, r4
   11886:	f3bf 8f6f 	isb	sy
}
   1188a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1188c:	f023 0304 	bic.w	r3, r3, #4
   11890:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   11892:	f7ff ffa9 	bl	117e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11896:	4621      	mov	r1, r4
   11898:	4801      	ldr	r0, [pc, #4]	; (118a0 <z_sched_start+0x38>)
   1189a:	f7ff febb 	bl	11614 <z_reschedule>
   1189e:	e7f4      	b.n	1188a <z_sched_start+0x22>
   118a0:	2000f71c 	.word	0x2000f71c

000118a4 <unready_thread>:
{
   118a4:	b510      	push	{r4, lr}
   118a6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   118a8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   118aa:	f990 300d 	ldrsb.w	r3, [r0, #13]
   118ae:	2b00      	cmp	r3, #0
   118b0:	db08      	blt.n	118c4 <unready_thread+0x20>
	update_cache(thread == _current);
   118b2:	4b08      	ldr	r3, [pc, #32]	; (118d4 <unready_thread+0x30>)
   118b4:	6898      	ldr	r0, [r3, #8]
   118b6:	42a0      	cmp	r0, r4
   118b8:	bf14      	ite	ne
   118ba:	2000      	movne	r0, #0
   118bc:	2001      	moveq	r0, #1
   118be:	f7ff fedd 	bl	1167c <update_cache>
}
   118c2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   118c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   118c8:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   118ca:	4601      	mov	r1, r0
   118cc:	4802      	ldr	r0, [pc, #8]	; (118d8 <unready_thread+0x34>)
   118ce:	f006 fe73 	bl	185b8 <z_priq_dumb_remove>
}
   118d2:	e7ee      	b.n	118b2 <unready_thread+0xe>
   118d4:	2000f6e4 	.word	0x2000f6e4
   118d8:	2000f704 	.word	0x2000f704

000118dc <z_pend_curr>:
{
   118dc:	b510      	push	{r4, lr}
   118de:	460c      	mov	r4, r1
   118e0:	4611      	mov	r1, r2
	pending_current = _current;
   118e2:	4b06      	ldr	r3, [pc, #24]	; (118fc <z_pend_curr+0x20>)
   118e4:	6898      	ldr	r0, [r3, #8]
   118e6:	4b06      	ldr	r3, [pc, #24]	; (11900 <z_pend_curr+0x24>)
   118e8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   118ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   118ee:	f006 feec 	bl	186ca <pend>
   118f2:	4620      	mov	r0, r4
   118f4:	f7f2 fc96 	bl	4224 <arch_swap>
}
   118f8:	bd10      	pop	{r4, pc}
   118fa:	bf00      	nop
   118fc:	2000f6e4 	.word	0x2000f6e4
   11900:	2000f718 	.word	0x2000f718

00011904 <z_set_prio>:
{
   11904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11908:	4604      	mov	r4, r0
   1190a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1190c:	2300      	movs	r3, #0
	__asm__ volatile(
   1190e:	f04f 0220 	mov.w	r2, #32
   11912:	f3ef 8611 	mrs	r6, BASEPRI
   11916:	f382 8812 	msr	BASEPRI_MAX, r2
   1191a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1191e:	4698      	mov	r8, r3
   11920:	e008      	b.n	11934 <z_set_prio+0x30>
		if (need_sched) {
   11922:	f012 0801 	ands.w	r8, r2, #1
   11926:	d111      	bne.n	1194c <z_set_prio+0x48>
			thread->base.prio = prio;
   11928:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1192a:	f386 8811 	msr	BASEPRI, r6
   1192e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11932:	2301      	movs	r3, #1
   11934:	461a      	mov	r2, r3
   11936:	2b00      	cmp	r3, #0
   11938:	d13d      	bne.n	119b6 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1193a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1193c:	f013 0f1f 	tst.w	r3, #31
   11940:	d1ef      	bne.n	11922 <z_set_prio+0x1e>
	return node->next != NULL;
   11942:	69a1      	ldr	r1, [r4, #24]
   11944:	2900      	cmp	r1, #0
   11946:	d1ec      	bne.n	11922 <z_set_prio+0x1e>
   11948:	2201      	movs	r2, #1
   1194a:	e7ea      	b.n	11922 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1194c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11950:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   11952:	f8df 906c 	ldr.w	r9, [pc, #108]	; 119c0 <z_set_prio+0xbc>
   11956:	4621      	mov	r1, r4
   11958:	4648      	mov	r0, r9
   1195a:	f006 fe2d 	bl	185b8 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1195e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   11960:	7b63      	ldrb	r3, [r4, #13]
   11962:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11966:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   11968:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1196c:	454d      	cmp	r5, r9
   1196e:	d020      	beq.n	119b2 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11970:	b16d      	cbz	r5, 1198e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11972:	4629      	mov	r1, r5
   11974:	4620      	mov	r0, r4
   11976:	f006 fe00 	bl	1857a <z_sched_prio_cmp>
   1197a:	2800      	cmp	r0, #0
   1197c:	dc13      	bgt.n	119a6 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1197e:	b135      	cbz	r5, 1198e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   11980:	4b0e      	ldr	r3, [pc, #56]	; (119bc <z_set_prio+0xb8>)
   11982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11984:	429d      	cmp	r5, r3
   11986:	d002      	beq.n	1198e <z_set_prio+0x8a>
   11988:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1198a:	2d00      	cmp	r5, #0
   1198c:	d1f0      	bne.n	11970 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1198e:	4b0b      	ldr	r3, [pc, #44]	; (119bc <z_set_prio+0xb8>)
   11990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11992:	f103 0120 	add.w	r1, r3, #32
   11996:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   11998:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1199a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1199c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1199e:	2001      	movs	r0, #1
   119a0:	f7ff fe6c 	bl	1167c <update_cache>
   119a4:	e7c1      	b.n	1192a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   119a6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   119a8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   119aa:	6025      	str	r5, [r4, #0]
	prev->next = node;
   119ac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   119ae:	606c      	str	r4, [r5, #4]
}
   119b0:	e7f5      	b.n	1199e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   119b2:	2500      	movs	r5, #0
   119b4:	e7dc      	b.n	11970 <z_set_prio+0x6c>
}
   119b6:	4640      	mov	r0, r8
   119b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   119bc:	2000f6e4 	.word	0x2000f6e4
   119c0:	2000f704 	.word	0x2000f704

000119c4 <z_impl_k_thread_suspend>:
{
   119c4:	b538      	push	{r3, r4, r5, lr}
   119c6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   119c8:	3018      	adds	r0, #24
   119ca:	f006 fee1 	bl	18790 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   119ce:	2300      	movs	r3, #0
	__asm__ volatile(
   119d0:	f04f 0220 	mov.w	r2, #32
   119d4:	f3ef 8511 	mrs	r5, BASEPRI
   119d8:	f382 8812 	msr	BASEPRI_MAX, r2
   119dc:	f3bf 8f6f 	isb	sy
   119e0:	e010      	b.n	11a04 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   119e2:	7b63      	ldrb	r3, [r4, #13]
   119e4:	f043 0310 	orr.w	r3, r3, #16
   119e8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   119ea:	4b15      	ldr	r3, [pc, #84]	; (11a40 <z_impl_k_thread_suspend+0x7c>)
   119ec:	6898      	ldr	r0, [r3, #8]
   119ee:	42a0      	cmp	r0, r4
   119f0:	bf14      	ite	ne
   119f2:	2000      	movne	r0, #0
   119f4:	2001      	moveq	r0, #1
   119f6:	f7ff fe41 	bl	1167c <update_cache>
	__asm__ volatile(
   119fa:	f385 8811 	msr	BASEPRI, r5
   119fe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11a02:	2301      	movs	r3, #1
   11a04:	b963      	cbnz	r3, 11a20 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   11a06:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   11a08:	f994 300d 	ldrsb.w	r3, [r4, #13]
   11a0c:	2b00      	cmp	r3, #0
   11a0e:	dae8      	bge.n	119e2 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11a10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11a14:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   11a16:	4621      	mov	r1, r4
   11a18:	480a      	ldr	r0, [pc, #40]	; (11a44 <z_impl_k_thread_suspend+0x80>)
   11a1a:	f006 fdcd 	bl	185b8 <z_priq_dumb_remove>
}
   11a1e:	e7e0      	b.n	119e2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   11a20:	4b07      	ldr	r3, [pc, #28]	; (11a40 <z_impl_k_thread_suspend+0x7c>)
   11a22:	689b      	ldr	r3, [r3, #8]
   11a24:	42a3      	cmp	r3, r4
   11a26:	d000      	beq.n	11a2a <z_impl_k_thread_suspend+0x66>
}
   11a28:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11a2a:	f04f 0320 	mov.w	r3, #32
   11a2e:	f3ef 8011 	mrs	r0, BASEPRI
   11a32:	f383 8812 	msr	BASEPRI_MAX, r3
   11a36:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   11a3a:	f006 fda8 	bl	1858e <z_reschedule_irqlock>
   11a3e:	e7f3      	b.n	11a28 <z_impl_k_thread_suspend+0x64>
   11a40:	2000f6e4 	.word	0x2000f6e4
   11a44:	2000f704 	.word	0x2000f704

00011a48 <k_sched_unlock>:

void k_sched_unlock(void)
{
   11a48:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   11a4a:	2300      	movs	r3, #0
   11a4c:	f04f 0220 	mov.w	r2, #32
   11a50:	f3ef 8411 	mrs	r4, BASEPRI
   11a54:	f382 8812 	msr	BASEPRI_MAX, r2
   11a58:	f3bf 8f6f 	isb	sy
   11a5c:	b96b      	cbnz	r3, 11a7a <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   11a5e:	4b0c      	ldr	r3, [pc, #48]	; (11a90 <k_sched_unlock+0x48>)
   11a60:	689a      	ldr	r2, [r3, #8]
   11a62:	7bd3      	ldrb	r3, [r2, #15]
   11a64:	3301      	adds	r3, #1
   11a66:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11a68:	2000      	movs	r0, #0
   11a6a:	f7ff fe07 	bl	1167c <update_cache>
	__asm__ volatile(
   11a6e:	f384 8811 	msr	BASEPRI, r4
   11a72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11a76:	2301      	movs	r3, #1
   11a78:	e7f0      	b.n	11a5c <k_sched_unlock+0x14>
	__asm__ volatile(
   11a7a:	f04f 0320 	mov.w	r3, #32
   11a7e:	f3ef 8011 	mrs	r0, BASEPRI
   11a82:	f383 8812 	msr	BASEPRI_MAX, r3
   11a86:	f3bf 8f6f 	isb	sy
   11a8a:	f006 fd80 	bl	1858e <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   11a8e:	bd10      	pop	{r4, pc}
   11a90:	2000f6e4 	.word	0x2000f6e4

00011a94 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   11a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   11a96:	7b43      	ldrb	r3, [r0, #13]
   11a98:	f013 0f08 	tst.w	r3, #8
   11a9c:	d145      	bne.n	11b2a <end_thread+0x96>
   11a9e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   11aa0:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11aa4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11aa8:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   11aaa:	f013 0f80 	tst.w	r3, #128	; 0x80
   11aae:	d114      	bne.n	11ada <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   11ab0:	68ab      	ldr	r3, [r5, #8]
   11ab2:	b15b      	cbz	r3, 11acc <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   11ab4:	4628      	mov	r0, r5
   11ab6:	f006 fd5e 	bl	18576 <pended_on_thread>
   11aba:	4629      	mov	r1, r5
   11abc:	f006 fd7c 	bl	185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11ac0:	7b6b      	ldrb	r3, [r5, #13]
   11ac2:	f023 0302 	bic.w	r3, r3, #2
   11ac6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   11ac8:	2300      	movs	r3, #0
   11aca:	60ab      	str	r3, [r5, #8]
   11acc:	f105 0018 	add.w	r0, r5, #24
   11ad0:	f006 fe5e 	bl	18790 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   11ad4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11ad8:	e01c      	b.n	11b14 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11ade:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   11ae0:	4601      	mov	r1, r0
   11ae2:	4812      	ldr	r0, [pc, #72]	; (11b2c <end_thread+0x98>)
   11ae4:	f006 fd68 	bl	185b8 <z_priq_dumb_remove>
}
   11ae8:	e7e2      	b.n	11ab0 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   11aea:	4620      	mov	r0, r4
   11aec:	f006 fd43 	bl	18576 <pended_on_thread>
   11af0:	4621      	mov	r1, r4
   11af2:	f006 fd61 	bl	185b8 <z_priq_dumb_remove>
   11af6:	7b63      	ldrb	r3, [r4, #13]
   11af8:	f023 0302 	bic.w	r3, r3, #2
   11afc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   11afe:	2600      	movs	r6, #0
   11b00:	60a6      	str	r6, [r4, #8]
   11b02:	f104 0018 	add.w	r0, r4, #24
   11b06:	f006 fe43 	bl	18790 <z_abort_timeout>
   11b0a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
   11b0e:	4620      	mov	r0, r4
   11b10:	f7ff fe6a 	bl	117e8 <ready_thread>
	return list->head == list;
   11b14:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b16:	42bc      	cmp	r4, r7
   11b18:	d001      	beq.n	11b1e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11b1a:	2c00      	cmp	r4, #0
   11b1c:	d1e5      	bne.n	11aea <end_thread+0x56>
		update_cache(1);
   11b1e:	2001      	movs	r0, #1
   11b20:	f7ff fdac 	bl	1167c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   11b24:	4628      	mov	r0, r5
   11b26:	f7ff fb05 	bl	11134 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   11b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b2c:	2000f704 	.word	0x2000f704

00011b30 <z_sched_init>:
{
   11b30:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   11b32:	4b05      	ldr	r3, [pc, #20]	; (11b48 <z_sched_init+0x18>)
   11b34:	f103 0220 	add.w	r2, r3, #32
   11b38:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   11b3a:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   11b3c:	2100      	movs	r1, #0
   11b3e:	4608      	mov	r0, r1
   11b40:	f7ff fd2c 	bl	1159c <k_sched_time_slice_set>
}
   11b44:	bd08      	pop	{r3, pc}
   11b46:	bf00      	nop
   11b48:	2000f6e4 	.word	0x2000f6e4

00011b4c <z_impl_k_yield>:
{
   11b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b4e:	f04f 0320 	mov.w	r3, #32
   11b52:	f3ef 8611 	mrs	r6, BASEPRI
   11b56:	f383 8812 	msr	BASEPRI_MAX, r3
   11b5a:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   11b5e:	4c1c      	ldr	r4, [pc, #112]	; (11bd0 <z_impl_k_yield+0x84>)
   11b60:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11b62:	7b4b      	ldrb	r3, [r1, #13]
   11b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11b68:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   11b6a:	f104 0720 	add.w	r7, r4, #32
   11b6e:	4638      	mov	r0, r7
   11b70:	f006 fd22 	bl	185b8 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   11b74:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11b76:	7b6b      	ldrb	r3, [r5, #13]
   11b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11b7c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11b7e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b80:	42bc      	cmp	r4, r7
   11b82:	d023      	beq.n	11bcc <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11b84:	b16c      	cbz	r4, 11ba2 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11b86:	4621      	mov	r1, r4
   11b88:	4628      	mov	r0, r5
   11b8a:	f006 fcf6 	bl	1857a <z_sched_prio_cmp>
   11b8e:	2800      	cmp	r0, #0
   11b90:	dc16      	bgt.n	11bc0 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11b92:	b134      	cbz	r4, 11ba2 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   11b94:	4b0e      	ldr	r3, [pc, #56]	; (11bd0 <z_impl_k_yield+0x84>)
   11b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11b98:	429c      	cmp	r4, r3
   11b9a:	d002      	beq.n	11ba2 <z_impl_k_yield+0x56>
   11b9c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11b9e:	2c00      	cmp	r4, #0
   11ba0:	d1f0      	bne.n	11b84 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   11ba2:	4b0b      	ldr	r3, [pc, #44]	; (11bd0 <z_impl_k_yield+0x84>)
   11ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11ba6:	f103 0120 	add.w	r1, r3, #32
   11baa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11bac:	606a      	str	r2, [r5, #4]
	tail->next = node;
   11bae:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11bb0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   11bb2:	2001      	movs	r0, #1
   11bb4:	f7ff fd62 	bl	1167c <update_cache>
   11bb8:	4630      	mov	r0, r6
   11bba:	f7f2 fb33 	bl	4224 <arch_swap>
}
   11bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   11bc0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   11bc2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11bc4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11bc6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11bc8:	6065      	str	r5, [r4, #4]
}
   11bca:	e7f2      	b.n	11bb2 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11bcc:	2400      	movs	r4, #0
   11bce:	e7d9      	b.n	11b84 <z_impl_k_yield+0x38>
   11bd0:	2000f6e4 	.word	0x2000f6e4

00011bd4 <z_tick_sleep>:
{
   11bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bd8:	4604      	mov	r4, r0
   11bda:	460d      	mov	r5, r1
	if (ticks == 0) {
   11bdc:	ea54 0105 	orrs.w	r1, r4, r5
   11be0:	d037      	beq.n	11c52 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   11be2:	f06f 0101 	mvn.w	r1, #1
   11be6:	1a0a      	subs	r2, r1, r0
   11be8:	f04f 31ff 	mov.w	r1, #4294967295
   11bec:	eb61 0305 	sbc.w	r3, r1, r5
   11bf0:	2a01      	cmp	r2, #1
   11bf2:	f173 0300 	sbcs.w	r3, r3, #0
   11bf6:	db30      	blt.n	11c5a <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   11bf8:	f06f 0601 	mvn.w	r6, #1
   11bfc:	1a36      	subs	r6, r6, r0
   11bfe:	f04f 0320 	mov.w	r3, #32
   11c02:	f3ef 8811 	mrs	r8, BASEPRI
   11c06:	f383 8812 	msr	BASEPRI_MAX, r3
   11c0a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   11c0e:	4f16      	ldr	r7, [pc, #88]	; (11c68 <z_tick_sleep+0x94>)
   11c10:	68b8      	ldr	r0, [r7, #8]
   11c12:	4b16      	ldr	r3, [pc, #88]	; (11c6c <z_tick_sleep+0x98>)
   11c14:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   11c16:	f7ff fe45 	bl	118a4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   11c1a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11c1c:	4622      	mov	r2, r4
   11c1e:	462b      	mov	r3, r5
   11c20:	4913      	ldr	r1, [pc, #76]	; (11c70 <z_tick_sleep+0x9c>)
   11c22:	3018      	adds	r0, #24
   11c24:	f000 f8e2 	bl	11dec <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   11c28:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11c2a:	7b53      	ldrb	r3, [r2, #13]
   11c2c:	f043 0310 	orr.w	r3, r3, #16
   11c30:	7353      	strb	r3, [r2, #13]
   11c32:	4640      	mov	r0, r8
   11c34:	f7f2 faf6 	bl	4224 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   11c38:	2500      	movs	r5, #0
   11c3a:	f006 fe08 	bl	1884e <sys_clock_tick_get_32>
   11c3e:	1a34      	subs	r4, r6, r0
   11c40:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   11c44:	2c01      	cmp	r4, #1
   11c46:	f175 0300 	sbcs.w	r3, r5, #0
   11c4a:	da0a      	bge.n	11c62 <z_tick_sleep+0x8e>
	return 0;
   11c4c:	2000      	movs	r0, #0
}
   11c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   11c52:	f7ff ff7b 	bl	11b4c <z_impl_k_yield>
		return 0;
   11c56:	2000      	movs	r0, #0
   11c58:	e7f9      	b.n	11c4e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   11c5a:	f006 fdf8 	bl	1884e <sys_clock_tick_get_32>
   11c5e:	1906      	adds	r6, r0, r4
   11c60:	e7cd      	b.n	11bfe <z_tick_sleep+0x2a>
		return ticks;
   11c62:	4620      	mov	r0, r4
   11c64:	e7f3      	b.n	11c4e <z_tick_sleep+0x7a>
   11c66:	bf00      	nop
   11c68:	2000f6e4 	.word	0x2000f6e4
   11c6c:	2000f718 	.word	0x2000f718
   11c70:	0001860f 	.word	0x0001860f

00011c74 <z_impl_k_sleep>:
{
   11c74:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11c76:	f1b1 3fff 	cmp.w	r1, #4294967295
   11c7a:	bf08      	it	eq
   11c7c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   11c80:	d01a      	beq.n	11cb8 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   11c82:	f7ff ffa7 	bl	11bd4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   11c86:	4604      	mov	r4, r0
   11c88:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   11c8a:	0169      	lsls	r1, r5, #5
   11c8c:	0143      	lsls	r3, r0, #5
   11c8e:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   11c92:	1a18      	subs	r0, r3, r0
   11c94:	eb62 0305 	sbc.w	r3, r2, r5
   11c98:	009a      	lsls	r2, r3, #2
   11c9a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   11c9e:	0081      	lsls	r1, r0, #2
   11ca0:	4613      	mov	r3, r2
   11ca2:	1908      	adds	r0, r1, r4
   11ca4:	eb45 0303 	adc.w	r3, r5, r3
   11ca8:	00da      	lsls	r2, r3, #3
   11caa:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   11cae:	00c1      	lsls	r1, r0, #3
   11cb0:	0bc8      	lsrs	r0, r1, #15
   11cb2:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   11cb6:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   11cb8:	4b03      	ldr	r3, [pc, #12]	; (11cc8 <z_impl_k_sleep+0x54>)
   11cba:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   11cbc:	f7ff fe82 	bl	119c4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   11cc0:	f04f 30ff 	mov.w	r0, #4294967295
   11cc4:	e7f7      	b.n	11cb6 <z_impl_k_sleep+0x42>
   11cc6:	bf00      	nop
   11cc8:	2000f6e4 	.word	0x2000f6e4

00011ccc <z_impl_z_current_get>:
}
   11ccc:	4b01      	ldr	r3, [pc, #4]	; (11cd4 <z_impl_z_current_get+0x8>)
   11cce:	6898      	ldr	r0, [r3, #8]
   11cd0:	4770      	bx	lr
   11cd2:	bf00      	nop
   11cd4:	2000f6e4 	.word	0x2000f6e4

00011cd8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   11cd8:	b538      	push	{r3, r4, r5, lr}
   11cda:	f04f 0320 	mov.w	r3, #32
   11cde:	f3ef 8511 	mrs	r5, BASEPRI
   11ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   11ce6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11cea:	7b43      	ldrb	r3, [r0, #13]
   11cec:	f013 0f08 	tst.w	r3, #8
   11cf0:	d004      	beq.n	11cfc <z_thread_abort+0x24>
	__asm__ volatile(
   11cf2:	f385 8811 	msr	BASEPRI, r5
   11cf6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11cfa:	bd38      	pop	{r3, r4, r5, pc}
   11cfc:	4604      	mov	r4, r0
	end_thread(thread);
   11cfe:	f7ff fec9 	bl	11a94 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   11d02:	4b08      	ldr	r3, [pc, #32]	; (11d24 <z_thread_abort+0x4c>)
   11d04:	689b      	ldr	r3, [r3, #8]
   11d06:	42a3      	cmp	r3, r4
   11d08:	d004      	beq.n	11d14 <z_thread_abort+0x3c>
   11d0a:	f385 8811 	msr	BASEPRI, r5
   11d0e:	f3bf 8f6f 	isb	sy
   11d12:	e7f2      	b.n	11cfa <z_thread_abort+0x22>
   11d14:	f3ef 8305 	mrs	r3, IPSR
   11d18:	2b00      	cmp	r3, #0
   11d1a:	d1f6      	bne.n	11d0a <z_thread_abort+0x32>
   11d1c:	4628      	mov	r0, r5
   11d1e:	f7f2 fa81 	bl	4224 <arch_swap>
	return ret;
   11d22:	e7f2      	b.n	11d0a <z_thread_abort+0x32>
   11d24:	2000f6e4 	.word	0x2000f6e4

00011d28 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   11d28:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   11d2a:	4806      	ldr	r0, [pc, #24]	; (11d44 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11d2c:	4a06      	ldr	r2, [pc, #24]	; (11d48 <z_data_copy+0x20>)
   11d2e:	1a12      	subs	r2, r2, r0
   11d30:	4906      	ldr	r1, [pc, #24]	; (11d4c <z_data_copy+0x24>)
   11d32:	f006 fdd3 	bl	188dc <memcpy>
   11d36:	4a06      	ldr	r2, [pc, #24]	; (11d50 <z_data_copy+0x28>)
   11d38:	4906      	ldr	r1, [pc, #24]	; (11d54 <z_data_copy+0x2c>)
   11d3a:	4807      	ldr	r0, [pc, #28]	; (11d58 <z_data_copy+0x30>)
   11d3c:	f006 fdce 	bl	188dc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11d40:	bd08      	pop	{r3, pc}
   11d42:	bf00      	nop
   11d44:	20000000 	.word	0x20000000
   11d48:	20000370 	.word	0x20000370
   11d4c:	000350d4 	.word	0x000350d4
   11d50:	00000000 	.word	0x00000000
   11d54:	000350d4 	.word	0x000350d4
   11d58:	20000000 	.word	0x20000000

00011d5c <first>:
	return list->head == list;
   11d5c:	4b03      	ldr	r3, [pc, #12]	; (11d6c <first+0x10>)
   11d5e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11d60:	4298      	cmp	r0, r3
   11d62:	d000      	beq.n	11d66 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   11d64:	4770      	bx	lr
   11d66:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   11d68:	e7fc      	b.n	11d64 <first+0x8>
   11d6a:	bf00      	nop
   11d6c:	20000090 	.word	0x20000090

00011d70 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11d70:	b130      	cbz	r0, 11d80 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   11d72:	4a04      	ldr	r2, [pc, #16]	; (11d84 <next+0x14>)
   11d74:	6852      	ldr	r2, [r2, #4]
   11d76:	4290      	cmp	r0, r2
   11d78:	d001      	beq.n	11d7e <next+0xe>
   11d7a:	6800      	ldr	r0, [r0, #0]
   11d7c:	4770      	bx	lr
   11d7e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   11d80:	4770      	bx	lr
   11d82:	bf00      	nop
   11d84:	20000090 	.word	0x20000090

00011d88 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   11d88:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11d8a:	4b04      	ldr	r3, [pc, #16]	; (11d9c <elapsed+0x14>)
   11d8c:	681b      	ldr	r3, [r3, #0]
   11d8e:	b10b      	cbz	r3, 11d94 <elapsed+0xc>
   11d90:	2000      	movs	r0, #0
}
   11d92:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11d94:	f7f3 feb6 	bl	5b04 <sys_clock_elapsed>
   11d98:	e7fb      	b.n	11d92 <elapsed+0xa>
   11d9a:	bf00      	nop
   11d9c:	2000f728 	.word	0x2000f728

00011da0 <next_timeout>:

static int32_t next_timeout(void)
{
   11da0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   11da2:	f7ff ffdb 	bl	11d5c <first>
   11da6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   11da8:	f7ff ffee 	bl	11d88 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   11dac:	b18c      	cbz	r4, 11dd2 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11dae:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   11db2:	1a12      	subs	r2, r2, r0
   11db4:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   11db8:	2a01      	cmp	r2, #1
   11dba:	f173 0100 	sbcs.w	r1, r3, #0
   11dbe:	db11      	blt.n	11de4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11dc0:	4610      	mov	r0, r2
   11dc2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11dc6:	f173 0300 	sbcs.w	r3, r3, #0
   11dca:	db04      	blt.n	11dd6 <next_timeout+0x36>
   11dcc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11dd0:	e001      	b.n	11dd6 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   11dd2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   11dd6:	4b04      	ldr	r3, [pc, #16]	; (11de8 <next_timeout+0x48>)
   11dd8:	691b      	ldr	r3, [r3, #16]
   11dda:	b113      	cbz	r3, 11de2 <next_timeout+0x42>
   11ddc:	4283      	cmp	r3, r0
   11dde:	da00      	bge.n	11de2 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   11de0:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   11de2:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   11de4:	2000      	movs	r0, #0
   11de6:	e7f6      	b.n	11dd6 <next_timeout+0x36>
   11de8:	2000f6e4 	.word	0x2000f6e4

00011dec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   11dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11df0:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11df2:	f1b3 3fff 	cmp.w	r3, #4294967295
   11df6:	bf08      	it	eq
   11df8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11dfc:	f000 8096 	beq.w	11f2c <z_add_timeout+0x140>
   11e00:	4682      	mov	sl, r0
   11e02:	4614      	mov	r4, r2
   11e04:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   11e06:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   11e08:	2300      	movs	r3, #0
	__asm__ volatile(
   11e0a:	f04f 0220 	mov.w	r2, #32
   11e0e:	f3ef 8b11 	mrs	fp, BASEPRI
   11e12:	f382 8812 	msr	BASEPRI_MAX, r2
   11e16:	f3bf 8f6f 	isb	sy
   11e1a:	e02e      	b.n	11e7a <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   11e1c:	2201      	movs	r2, #1
   11e1e:	2300      	movs	r3, #0
   11e20:	e04b      	b.n	11eba <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   11e22:	f7ff ffb1 	bl	11d88 <elapsed>
   11e26:	1822      	adds	r2, r4, r0
   11e28:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   11e2c:	3201      	adds	r2, #1
   11e2e:	f143 0300 	adc.w	r3, r3, #0
   11e32:	f8ca 2010 	str.w	r2, [sl, #16]
   11e36:	f8ca 3014 	str.w	r3, [sl, #20]
   11e3a:	e042      	b.n	11ec2 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   11e3c:	9b00      	ldr	r3, [sp, #0]
   11e3e:	1ac2      	subs	r2, r0, r3
   11e40:	9b01      	ldr	r3, [sp, #4]
   11e42:	eb61 0303 	sbc.w	r3, r1, r3
   11e46:	f8cc 2010 	str.w	r2, [ip, #16]
   11e4a:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   11e4e:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   11e52:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   11e56:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   11e5a:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   11e5e:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   11e62:	f1bc 0f00 	cmp.w	ip, #0
   11e66:	d049      	beq.n	11efc <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11e68:	f7ff ff78 	bl	11d5c <first>
   11e6c:	4582      	cmp	sl, r0
   11e6e:	d050      	beq.n	11f12 <z_add_timeout+0x126>
	__asm__ volatile(
   11e70:	f38b 8811 	msr	BASEPRI, fp
   11e74:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   11e78:	2301      	movs	r3, #1
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	d156      	bne.n	11f2c <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11e7e:	f06f 0301 	mvn.w	r3, #1
   11e82:	ebb3 0804 	subs.w	r8, r3, r4
   11e86:	f04f 30ff 	mov.w	r0, #4294967295
   11e8a:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11e8e:	f1b8 0f00 	cmp.w	r8, #0
   11e92:	f179 0300 	sbcs.w	r3, r9, #0
   11e96:	dbc4      	blt.n	11e22 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   11e98:	4a26      	ldr	r2, [pc, #152]	; (11f34 <z_add_timeout+0x148>)
   11e9a:	6813      	ldr	r3, [r2, #0]
   11e9c:	6852      	ldr	r2, [r2, #4]
   11e9e:	18e3      	adds	r3, r4, r3
   11ea0:	eb45 0202 	adc.w	r2, r5, r2
   11ea4:	f06f 0101 	mvn.w	r1, #1
   11ea8:	1ace      	subs	r6, r1, r3
   11eaa:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   11eae:	4632      	mov	r2, r6
   11eb0:	463b      	mov	r3, r7
   11eb2:	2e01      	cmp	r6, #1
   11eb4:	f177 0100 	sbcs.w	r1, r7, #0
   11eb8:	dbb0      	blt.n	11e1c <z_add_timeout+0x30>
   11eba:	f8ca 2010 	str.w	r2, [sl, #16]
   11ebe:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   11ec2:	f7ff ff4b 	bl	11d5c <first>
   11ec6:	4684      	mov	ip, r0
   11ec8:	f1bc 0f00 	cmp.w	ip, #0
   11ecc:	d0c9      	beq.n	11e62 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   11ece:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   11ed2:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   11ed6:	e9cd 2300 	strd	r2, r3, [sp]
   11eda:	4282      	cmp	r2, r0
   11edc:	418b      	sbcs	r3, r1
   11ede:	dbad      	blt.n	11e3c <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   11ee0:	9b00      	ldr	r3, [sp, #0]
   11ee2:	1a1a      	subs	r2, r3, r0
   11ee4:	9b01      	ldr	r3, [sp, #4]
   11ee6:	eb63 0301 	sbc.w	r3, r3, r1
   11eea:	f8ca 2010 	str.w	r2, [sl, #16]
   11eee:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   11ef2:	4660      	mov	r0, ip
   11ef4:	f7ff ff3c 	bl	11d70 <next>
   11ef8:	4684      	mov	ip, r0
   11efa:	e7e5      	b.n	11ec8 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   11efc:	4b0e      	ldr	r3, [pc, #56]	; (11f38 <z_add_timeout+0x14c>)
   11efe:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   11f00:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   11f04:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   11f08:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   11f0c:	f8c3 a004 	str.w	sl, [r3, #4]
}
   11f10:	e7aa      	b.n	11e68 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   11f12:	f7ff ff45 	bl	11da0 <next_timeout>

			if (next_time == 0 ||
   11f16:	4603      	mov	r3, r0
   11f18:	b118      	cbz	r0, 11f22 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   11f1a:	4a08      	ldr	r2, [pc, #32]	; (11f3c <z_add_timeout+0x150>)
   11f1c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   11f1e:	4282      	cmp	r2, r0
   11f20:	d0a6      	beq.n	11e70 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   11f22:	2100      	movs	r1, #0
   11f24:	4618      	mov	r0, r3
   11f26:	f7f3 fdb9 	bl	5a9c <sys_clock_set_timeout>
   11f2a:	e7a1      	b.n	11e70 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   11f2c:	b003      	add	sp, #12
   11f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f32:	bf00      	nop
   11f34:	200004f0 	.word	0x200004f0
   11f38:	20000090 	.word	0x20000090
   11f3c:	2000f6e4 	.word	0x2000f6e4

00011f40 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   11f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f42:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   11f44:	f7ff fc04 	bl	11750 <z_time_slice>
	__asm__ volatile(
   11f48:	f04f 0320 	mov.w	r3, #32
   11f4c:	f3ef 8511 	mrs	r5, BASEPRI
   11f50:	f383 8812 	msr	BASEPRI_MAX, r3
   11f54:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   11f58:	4b28      	ldr	r3, [pc, #160]	; (11ffc <sys_clock_announce+0xbc>)
   11f5a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   11f5c:	f7ff fefe 	bl	11d5c <first>
   11f60:	4604      	mov	r4, r0
   11f62:	b350      	cbz	r0, 11fba <sys_clock_announce+0x7a>
   11f64:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   11f68:	4b24      	ldr	r3, [pc, #144]	; (11ffc <sys_clock_announce+0xbc>)
   11f6a:	681b      	ldr	r3, [r3, #0]
   11f6c:	17d9      	asrs	r1, r3, #31
   11f6e:	42b3      	cmp	r3, r6
   11f70:	eb71 0207 	sbcs.w	r2, r1, r7
   11f74:	db21      	blt.n	11fba <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   11f76:	4a22      	ldr	r2, [pc, #136]	; (12000 <sys_clock_announce+0xc0>)
   11f78:	e9d2 0100 	ldrd	r0, r1, [r2]
   11f7c:	1980      	adds	r0, r0, r6
   11f7e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   11f82:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   11f86:	1b9b      	subs	r3, r3, r6
   11f88:	4a1c      	ldr	r2, [pc, #112]	; (11ffc <sys_clock_announce+0xbc>)
   11f8a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   11f8c:	2200      	movs	r2, #0
   11f8e:	2300      	movs	r3, #0
   11f90:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   11f94:	4620      	mov	r0, r4
   11f96:	f006 fbe4 	bl	18762 <remove_timeout>
	__asm__ volatile(
   11f9a:	f385 8811 	msr	BASEPRI, r5
   11f9e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   11fa2:	68a3      	ldr	r3, [r4, #8]
   11fa4:	4620      	mov	r0, r4
   11fa6:	4798      	blx	r3
	__asm__ volatile(
   11fa8:	f04f 0320 	mov.w	r3, #32
   11fac:	f3ef 8511 	mrs	r5, BASEPRI
   11fb0:	f383 8812 	msr	BASEPRI_MAX, r3
   11fb4:	f3bf 8f6f 	isb	sy
   11fb8:	e7d0      	b.n	11f5c <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   11fba:	b144      	cbz	r4, 11fce <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   11fbc:	4b0f      	ldr	r3, [pc, #60]	; (11ffc <sys_clock_announce+0xbc>)
   11fbe:	6819      	ldr	r1, [r3, #0]
   11fc0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   11fc4:	1a52      	subs	r2, r2, r1
   11fc6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   11fca:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   11fce:	480c      	ldr	r0, [pc, #48]	; (12000 <sys_clock_announce+0xc0>)
   11fd0:	490a      	ldr	r1, [pc, #40]	; (11ffc <sys_clock_announce+0xbc>)
   11fd2:	680c      	ldr	r4, [r1, #0]
   11fd4:	e9d0 2300 	ldrd	r2, r3, [r0]
   11fd8:	1912      	adds	r2, r2, r4
   11fda:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   11fde:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   11fe2:	2400      	movs	r4, #0
   11fe4:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   11fe6:	f7ff fedb 	bl	11da0 <next_timeout>
   11fea:	4621      	mov	r1, r4
   11fec:	f7f3 fd56 	bl	5a9c <sys_clock_set_timeout>
	__asm__ volatile(
   11ff0:	f385 8811 	msr	BASEPRI, r5
   11ff4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ffa:	bf00      	nop
   11ffc:	2000f728 	.word	0x2000f728
   12000:	200004f0 	.word	0x200004f0

00012004 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   12004:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   12006:	2100      	movs	r1, #0
	__asm__ volatile(
   12008:	f04f 0320 	mov.w	r3, #32
   1200c:	f3ef 8411 	mrs	r4, BASEPRI
   12010:	f383 8812 	msr	BASEPRI_MAX, r3
   12014:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   12018:	2200      	movs	r2, #0
   1201a:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1201c:	b969      	cbnz	r1, 1203a <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1201e:	f7f3 fd71 	bl	5b04 <sys_clock_elapsed>
   12022:	4b07      	ldr	r3, [pc, #28]	; (12040 <sys_clock_tick_get+0x3c>)
   12024:	e9d3 2300 	ldrd	r2, r3, [r3]
   12028:	1812      	adds	r2, r2, r0
   1202a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1202e:	f384 8811 	msr	BASEPRI, r4
   12032:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   12036:	2101      	movs	r1, #1
   12038:	e7f0      	b.n	1201c <sys_clock_tick_get+0x18>
	}
	return t;
}
   1203a:	4610      	mov	r0, r2
   1203c:	4619      	mov	r1, r3
   1203e:	bd10      	pop	{r4, pc}
   12040:	200004f0 	.word	0x200004f0

00012044 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   12044:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   12046:	4a03      	ldr	r2, [pc, #12]	; (12054 <boot_banner+0x10>)
   12048:	4903      	ldr	r1, [pc, #12]	; (12058 <boot_banner+0x14>)
   1204a:	4804      	ldr	r0, [pc, #16]	; (1205c <boot_banner+0x18>)
   1204c:	f001 febb 	bl	13dc6 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   12050:	bd08      	pop	{r3, pc}
   12052:	bf00      	nop
   12054:	00031c00 	.word	0x00031c00
   12058:	00034dec 	.word	0x00034dec
   1205c:	00034df8 	.word	0x00034df8

00012060 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   12060:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12062:	4c06      	ldr	r4, [pc, #24]	; (1207c <statics_init+0x1c>)
   12064:	4b06      	ldr	r3, [pc, #24]	; (12080 <statics_init+0x20>)
   12066:	429c      	cmp	r4, r3
   12068:	d206      	bcs.n	12078 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1206a:	68a2      	ldr	r2, [r4, #8]
   1206c:	6861      	ldr	r1, [r4, #4]
   1206e:	4620      	mov	r0, r4
   12070:	f006 fbfb 	bl	1886a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12074:	3418      	adds	r4, #24
   12076:	e7f5      	b.n	12064 <statics_init+0x4>
		}
	}
	return 0;
}
   12078:	2000      	movs	r0, #0
   1207a:	bd10      	pop	{r4, pc}
   1207c:	200002e4 	.word	0x200002e4
   12080:	200002e4 	.word	0x200002e4

00012084 <nrf_cc3xx_platform_init_no_rng>:
   12084:	b510      	push	{r4, lr}
   12086:	4c0a      	ldr	r4, [pc, #40]	; (120b0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   12088:	6823      	ldr	r3, [r4, #0]
   1208a:	b11b      	cbz	r3, 12094 <nrf_cc3xx_platform_init_no_rng+0x10>
   1208c:	2301      	movs	r3, #1
   1208e:	6023      	str	r3, [r4, #0]
   12090:	2000      	movs	r0, #0
   12092:	bd10      	pop	{r4, pc}
   12094:	f000 f8d6 	bl	12244 <CC_LibInitNoRng>
   12098:	2800      	cmp	r0, #0
   1209a:	d0f7      	beq.n	1208c <nrf_cc3xx_platform_init_no_rng+0x8>
   1209c:	3801      	subs	r0, #1
   1209e:	2806      	cmp	r0, #6
   120a0:	d803      	bhi.n	120aa <nrf_cc3xx_platform_init_no_rng+0x26>
   120a2:	4b04      	ldr	r3, [pc, #16]	; (120b4 <nrf_cc3xx_platform_init_no_rng+0x30>)
   120a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   120a8:	bd10      	pop	{r4, pc}
   120aa:	4803      	ldr	r0, [pc, #12]	; (120b8 <nrf_cc3xx_platform_init_no_rng+0x34>)
   120ac:	bd10      	pop	{r4, pc}
   120ae:	bf00      	nop
   120b0:	2000f72c 	.word	0x2000f72c
   120b4:	00034e20 	.word	0x00034e20
   120b8:	ffff8ffe 	.word	0xffff8ffe

000120bc <nrf_cc3xx_platform_abort>:
   120bc:	f3bf 8f4f 	dsb	sy
   120c0:	4905      	ldr	r1, [pc, #20]	; (120d8 <nrf_cc3xx_platform_abort+0x1c>)
   120c2:	4b06      	ldr	r3, [pc, #24]	; (120dc <nrf_cc3xx_platform_abort+0x20>)
   120c4:	68ca      	ldr	r2, [r1, #12]
   120c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   120ca:	4313      	orrs	r3, r2
   120cc:	60cb      	str	r3, [r1, #12]
   120ce:	f3bf 8f4f 	dsb	sy
   120d2:	bf00      	nop
   120d4:	e7fd      	b.n	120d2 <nrf_cc3xx_platform_abort+0x16>
   120d6:	bf00      	nop
   120d8:	e000ed00 	.word	0xe000ed00
   120dc:	05fa0004 	.word	0x05fa0004

000120e0 <CC_PalAbort>:
   120e0:	b4f0      	push	{r4, r5, r6, r7}
   120e2:	4f09      	ldr	r7, [pc, #36]	; (12108 <CC_PalAbort+0x28>)
   120e4:	4e09      	ldr	r6, [pc, #36]	; (1210c <CC_PalAbort+0x2c>)
   120e6:	4c0a      	ldr	r4, [pc, #40]	; (12110 <CC_PalAbort+0x30>)
   120e8:	4a0a      	ldr	r2, [pc, #40]	; (12114 <CC_PalAbort+0x34>)
   120ea:	4d0b      	ldr	r5, [pc, #44]	; (12118 <CC_PalAbort+0x38>)
   120ec:	490b      	ldr	r1, [pc, #44]	; (1211c <CC_PalAbort+0x3c>)
   120ee:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   120f2:	603b      	str	r3, [r7, #0]
   120f4:	6852      	ldr	r2, [r2, #4]
   120f6:	6033      	str	r3, [r6, #0]
   120f8:	6023      	str	r3, [r4, #0]
   120fa:	2400      	movs	r4, #0
   120fc:	602b      	str	r3, [r5, #0]
   120fe:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   12102:	bcf0      	pop	{r4, r5, r6, r7}
   12104:	4710      	bx	r2
   12106:	bf00      	nop
   12108:	5002b400 	.word	0x5002b400
   1210c:	5002b404 	.word	0x5002b404
   12110:	5002b408 	.word	0x5002b408
   12114:	20000098 	.word	0x20000098
   12118:	5002b40c 	.word	0x5002b40c
   1211c:	5002a000 	.word	0x5002a000

00012120 <nrf_cc3xx_platform_set_abort>:
   12120:	e9d0 1200 	ldrd	r1, r2, [r0]
   12124:	4b01      	ldr	r3, [pc, #4]	; (1212c <nrf_cc3xx_platform_set_abort+0xc>)
   12126:	e9c3 1200 	strd	r1, r2, [r3]
   1212a:	4770      	bx	lr
   1212c:	20000098 	.word	0x20000098

00012130 <mutex_free>:
   12130:	b510      	push	{r4, lr}
   12132:	4604      	mov	r4, r0
   12134:	b130      	cbz	r0, 12144 <mutex_free+0x14>
   12136:	6863      	ldr	r3, [r4, #4]
   12138:	06db      	lsls	r3, r3, #27
   1213a:	d502      	bpl.n	12142 <mutex_free+0x12>
   1213c:	2300      	movs	r3, #0
   1213e:	6023      	str	r3, [r4, #0]
   12140:	6063      	str	r3, [r4, #4]
   12142:	bd10      	pop	{r4, pc}
   12144:	4b02      	ldr	r3, [pc, #8]	; (12150 <mutex_free+0x20>)
   12146:	4803      	ldr	r0, [pc, #12]	; (12154 <mutex_free+0x24>)
   12148:	685b      	ldr	r3, [r3, #4]
   1214a:	4798      	blx	r3
   1214c:	e7f3      	b.n	12136 <mutex_free+0x6>
   1214e:	bf00      	nop
   12150:	20000098 	.word	0x20000098
   12154:	00034e3c 	.word	0x00034e3c

00012158 <mutex_unlock>:
   12158:	b168      	cbz	r0, 12176 <mutex_unlock+0x1e>
   1215a:	6843      	ldr	r3, [r0, #4]
   1215c:	b13b      	cbz	r3, 1216e <mutex_unlock+0x16>
   1215e:	06db      	lsls	r3, r3, #27
   12160:	d507      	bpl.n	12172 <mutex_unlock+0x1a>
   12162:	f3bf 8f5f 	dmb	sy
   12166:	2300      	movs	r3, #0
   12168:	6003      	str	r3, [r0, #0]
   1216a:	4618      	mov	r0, r3
   1216c:	4770      	bx	lr
   1216e:	4803      	ldr	r0, [pc, #12]	; (1217c <mutex_unlock+0x24>)
   12170:	4770      	bx	lr
   12172:	4803      	ldr	r0, [pc, #12]	; (12180 <mutex_unlock+0x28>)
   12174:	4770      	bx	lr
   12176:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1217a:	4770      	bx	lr
   1217c:	ffff8fea 	.word	0xffff8fea
   12180:	ffff8fe9 	.word	0xffff8fe9

00012184 <mutex_init>:
   12184:	b510      	push	{r4, lr}
   12186:	4604      	mov	r4, r0
   12188:	b120      	cbz	r0, 12194 <mutex_init+0x10>
   1218a:	2200      	movs	r2, #0
   1218c:	2311      	movs	r3, #17
   1218e:	6022      	str	r2, [r4, #0]
   12190:	6063      	str	r3, [r4, #4]
   12192:	bd10      	pop	{r4, pc}
   12194:	4801      	ldr	r0, [pc, #4]	; (1219c <mutex_init+0x18>)
   12196:	f7ff ffa3 	bl	120e0 <CC_PalAbort>
   1219a:	e7f6      	b.n	1218a <mutex_init+0x6>
   1219c:	00034e64 	.word	0x00034e64

000121a0 <mutex_lock>:
   121a0:	b1c0      	cbz	r0, 121d4 <mutex_lock+0x34>
   121a2:	6843      	ldr	r3, [r0, #4]
   121a4:	b1a3      	cbz	r3, 121d0 <mutex_lock+0x30>
   121a6:	06db      	lsls	r3, r3, #27
   121a8:	d510      	bpl.n	121cc <mutex_lock+0x2c>
   121aa:	2201      	movs	r2, #1
   121ac:	f3bf 8f5b 	dmb	ish
   121b0:	e850 3f00 	ldrex	r3, [r0]
   121b4:	e840 2100 	strex	r1, r2, [r0]
   121b8:	2900      	cmp	r1, #0
   121ba:	d1f9      	bne.n	121b0 <mutex_lock+0x10>
   121bc:	f3bf 8f5b 	dmb	ish
   121c0:	2b01      	cmp	r3, #1
   121c2:	d0f3      	beq.n	121ac <mutex_lock+0xc>
   121c4:	f3bf 8f5f 	dmb	sy
   121c8:	2000      	movs	r0, #0
   121ca:	4770      	bx	lr
   121cc:	4803      	ldr	r0, [pc, #12]	; (121dc <mutex_lock+0x3c>)
   121ce:	4770      	bx	lr
   121d0:	4803      	ldr	r0, [pc, #12]	; (121e0 <mutex_lock+0x40>)
   121d2:	4770      	bx	lr
   121d4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   121d8:	4770      	bx	lr
   121da:	bf00      	nop
   121dc:	ffff8fe9 	.word	0xffff8fe9
   121e0:	ffff8fea 	.word	0xffff8fea

000121e4 <nrf_cc3xx_platform_set_mutexes>:
   121e4:	b570      	push	{r4, r5, r6, lr}
   121e6:	e9d0 2300 	ldrd	r2, r3, [r0]
   121ea:	4c13      	ldr	r4, [pc, #76]	; (12238 <nrf_cc3xx_platform_set_mutexes+0x54>)
   121ec:	4d13      	ldr	r5, [pc, #76]	; (1223c <nrf_cc3xx_platform_set_mutexes+0x58>)
   121ee:	e9c4 2300 	strd	r2, r3, [r4]
   121f2:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   121f6:	e9c4 6302 	strd	r6, r3, [r4, #8]
   121fa:	4b11      	ldr	r3, [pc, #68]	; (12240 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   121fc:	6808      	ldr	r0, [r1, #0]
   121fe:	6018      	str	r0, [r3, #0]
   12200:	6848      	ldr	r0, [r1, #4]
   12202:	6058      	str	r0, [r3, #4]
   12204:	6888      	ldr	r0, [r1, #8]
   12206:	6098      	str	r0, [r3, #8]
   12208:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1220c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   12210:	60de      	str	r6, [r3, #12]
   12212:	6118      	str	r0, [r3, #16]
   12214:	06cb      	lsls	r3, r1, #27
   12216:	d50d      	bpl.n	12234 <nrf_cc3xx_platform_set_mutexes+0x50>
   12218:	2300      	movs	r3, #0
   1221a:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1221e:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   12222:	f505 7088 	add.w	r0, r5, #272	; 0x110
   12226:	4790      	blx	r2
   12228:	6823      	ldr	r3, [r4, #0]
   1222a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1222e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12232:	4718      	bx	r3
   12234:	bd70      	pop	{r4, r5, r6, pc}
   12236:	bf00      	nop
   12238:	200000a8 	.word	0x200000a8
   1223c:	2000f754 	.word	0x2000f754
   12240:	200000b8 	.word	0x200000b8

00012244 <CC_LibInitNoRng>:
   12244:	b510      	push	{r4, lr}
   12246:	f000 f833 	bl	122b0 <CC_HalInit>
   1224a:	b120      	cbz	r0, 12256 <CC_LibInitNoRng+0x12>
   1224c:	2403      	movs	r4, #3
   1224e:	f000 f867 	bl	12320 <CC_PalTerminate>
   12252:	4620      	mov	r0, r4
   12254:	bd10      	pop	{r4, pc}
   12256:	f000 f835 	bl	122c4 <CC_PalInit>
   1225a:	b990      	cbnz	r0, 12282 <CC_LibInitNoRng+0x3e>
   1225c:	f000 f8b0 	bl	123c0 <CC_PalPowerSaveModeSelect>
   12260:	b990      	cbnz	r0, 12288 <CC_LibInitNoRng+0x44>
   12262:	4b0f      	ldr	r3, [pc, #60]	; (122a0 <CC_LibInitNoRng+0x5c>)
   12264:	681b      	ldr	r3, [r3, #0]
   12266:	0e1b      	lsrs	r3, r3, #24
   12268:	2bf0      	cmp	r3, #240	; 0xf0
   1226a:	d108      	bne.n	1227e <CC_LibInitNoRng+0x3a>
   1226c:	4a0d      	ldr	r2, [pc, #52]	; (122a4 <CC_LibInitNoRng+0x60>)
   1226e:	4b0e      	ldr	r3, [pc, #56]	; (122a8 <CC_LibInitNoRng+0x64>)
   12270:	6812      	ldr	r2, [r2, #0]
   12272:	429a      	cmp	r2, r3
   12274:	d00a      	beq.n	1228c <CC_LibInitNoRng+0x48>
   12276:	2407      	movs	r4, #7
   12278:	f000 f81c 	bl	122b4 <CC_HalTerminate>
   1227c:	e7e7      	b.n	1224e <CC_LibInitNoRng+0xa>
   1227e:	2406      	movs	r4, #6
   12280:	e7fa      	b.n	12278 <CC_LibInitNoRng+0x34>
   12282:	2404      	movs	r4, #4
   12284:	4620      	mov	r0, r4
   12286:	bd10      	pop	{r4, pc}
   12288:	2400      	movs	r4, #0
   1228a:	e7f5      	b.n	12278 <CC_LibInitNoRng+0x34>
   1228c:	2001      	movs	r0, #1
   1228e:	f000 f897 	bl	123c0 <CC_PalPowerSaveModeSelect>
   12292:	4604      	mov	r4, r0
   12294:	2800      	cmp	r0, #0
   12296:	d1f7      	bne.n	12288 <CC_LibInitNoRng+0x44>
   12298:	4b04      	ldr	r3, [pc, #16]	; (122ac <CC_LibInitNoRng+0x68>)
   1229a:	6018      	str	r0, [r3, #0]
   1229c:	e7d9      	b.n	12252 <CC_LibInitNoRng+0xe>
   1229e:	bf00      	nop
   122a0:	5002b928 	.word	0x5002b928
   122a4:	5002ba24 	.word	0x5002ba24
   122a8:	20e00000 	.word	0x20e00000
   122ac:	5002ba0c 	.word	0x5002ba0c

000122b0 <CC_HalInit>:
   122b0:	2000      	movs	r0, #0
   122b2:	4770      	bx	lr

000122b4 <CC_HalTerminate>:
   122b4:	2000      	movs	r0, #0
   122b6:	4770      	bx	lr

000122b8 <CC_HalMaskInterrupt>:
   122b8:	4b01      	ldr	r3, [pc, #4]	; (122c0 <CC_HalMaskInterrupt+0x8>)
   122ba:	6018      	str	r0, [r3, #0]
   122bc:	4770      	bx	lr
   122be:	bf00      	nop
   122c0:	5002ba04 	.word	0x5002ba04

000122c4 <CC_PalInit>:
   122c4:	b510      	push	{r4, lr}
   122c6:	4811      	ldr	r0, [pc, #68]	; (1230c <CC_PalInit+0x48>)
   122c8:	f000 f848 	bl	1235c <CC_PalMutexCreate>
   122cc:	b100      	cbz	r0, 122d0 <CC_PalInit+0xc>
   122ce:	bd10      	pop	{r4, pc}
   122d0:	480f      	ldr	r0, [pc, #60]	; (12310 <CC_PalInit+0x4c>)
   122d2:	f000 f843 	bl	1235c <CC_PalMutexCreate>
   122d6:	2800      	cmp	r0, #0
   122d8:	d1f9      	bne.n	122ce <CC_PalInit+0xa>
   122da:	4c0e      	ldr	r4, [pc, #56]	; (12314 <CC_PalInit+0x50>)
   122dc:	4620      	mov	r0, r4
   122de:	f000 f83d 	bl	1235c <CC_PalMutexCreate>
   122e2:	2800      	cmp	r0, #0
   122e4:	d1f3      	bne.n	122ce <CC_PalInit+0xa>
   122e6:	4b0c      	ldr	r3, [pc, #48]	; (12318 <CC_PalInit+0x54>)
   122e8:	480c      	ldr	r0, [pc, #48]	; (1231c <CC_PalInit+0x58>)
   122ea:	601c      	str	r4, [r3, #0]
   122ec:	f000 f836 	bl	1235c <CC_PalMutexCreate>
   122f0:	4601      	mov	r1, r0
   122f2:	2800      	cmp	r0, #0
   122f4:	d1eb      	bne.n	122ce <CC_PalInit+0xa>
   122f6:	f000 f82d 	bl	12354 <CC_PalDmaInit>
   122fa:	4604      	mov	r4, r0
   122fc:	b108      	cbz	r0, 12302 <CC_PalInit+0x3e>
   122fe:	4620      	mov	r0, r4
   12300:	bd10      	pop	{r4, pc}
   12302:	f000 f83f 	bl	12384 <CC_PalPowerSaveModeInit>
   12306:	4620      	mov	r0, r4
   12308:	e7fa      	b.n	12300 <CC_PalInit+0x3c>
   1230a:	bf00      	nop
   1230c:	200000f0 	.word	0x200000f0
   12310:	200000e4 	.word	0x200000e4
   12314:	200000ec 	.word	0x200000ec
   12318:	200000f4 	.word	0x200000f4
   1231c:	200000e8 	.word	0x200000e8

00012320 <CC_PalTerminate>:
   12320:	b508      	push	{r3, lr}
   12322:	4808      	ldr	r0, [pc, #32]	; (12344 <CC_PalTerminate+0x24>)
   12324:	f000 f824 	bl	12370 <CC_PalMutexDestroy>
   12328:	4807      	ldr	r0, [pc, #28]	; (12348 <CC_PalTerminate+0x28>)
   1232a:	f000 f821 	bl	12370 <CC_PalMutexDestroy>
   1232e:	4807      	ldr	r0, [pc, #28]	; (1234c <CC_PalTerminate+0x2c>)
   12330:	f000 f81e 	bl	12370 <CC_PalMutexDestroy>
   12334:	4806      	ldr	r0, [pc, #24]	; (12350 <CC_PalTerminate+0x30>)
   12336:	f000 f81b 	bl	12370 <CC_PalMutexDestroy>
   1233a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1233e:	f000 b80b 	b.w	12358 <CC_PalDmaTerminate>
   12342:	bf00      	nop
   12344:	200000f0 	.word	0x200000f0
   12348:	200000e4 	.word	0x200000e4
   1234c:	200000ec 	.word	0x200000ec
   12350:	200000e8 	.word	0x200000e8

00012354 <CC_PalDmaInit>:
   12354:	2000      	movs	r0, #0
   12356:	4770      	bx	lr

00012358 <CC_PalDmaTerminate>:
   12358:	4770      	bx	lr
   1235a:	bf00      	nop

0001235c <CC_PalMutexCreate>:
   1235c:	b508      	push	{r3, lr}
   1235e:	4b03      	ldr	r3, [pc, #12]	; (1236c <CC_PalMutexCreate+0x10>)
   12360:	6802      	ldr	r2, [r0, #0]
   12362:	681b      	ldr	r3, [r3, #0]
   12364:	6810      	ldr	r0, [r2, #0]
   12366:	4798      	blx	r3
   12368:	2000      	movs	r0, #0
   1236a:	bd08      	pop	{r3, pc}
   1236c:	200000a8 	.word	0x200000a8

00012370 <CC_PalMutexDestroy>:
   12370:	b508      	push	{r3, lr}
   12372:	4b03      	ldr	r3, [pc, #12]	; (12380 <CC_PalMutexDestroy+0x10>)
   12374:	6802      	ldr	r2, [r0, #0]
   12376:	685b      	ldr	r3, [r3, #4]
   12378:	6810      	ldr	r0, [r2, #0]
   1237a:	4798      	blx	r3
   1237c:	2000      	movs	r0, #0
   1237e:	bd08      	pop	{r3, pc}
   12380:	200000a8 	.word	0x200000a8

00012384 <CC_PalPowerSaveModeInit>:
   12384:	b570      	push	{r4, r5, r6, lr}
   12386:	4c09      	ldr	r4, [pc, #36]	; (123ac <CC_PalPowerSaveModeInit+0x28>)
   12388:	4d09      	ldr	r5, [pc, #36]	; (123b0 <CC_PalPowerSaveModeInit+0x2c>)
   1238a:	6920      	ldr	r0, [r4, #16]
   1238c:	68ab      	ldr	r3, [r5, #8]
   1238e:	4798      	blx	r3
   12390:	b118      	cbz	r0, 1239a <CC_PalPowerSaveModeInit+0x16>
   12392:	4b08      	ldr	r3, [pc, #32]	; (123b4 <CC_PalPowerSaveModeInit+0x30>)
   12394:	4808      	ldr	r0, [pc, #32]	; (123b8 <CC_PalPowerSaveModeInit+0x34>)
   12396:	685b      	ldr	r3, [r3, #4]
   12398:	4798      	blx	r3
   1239a:	4a08      	ldr	r2, [pc, #32]	; (123bc <CC_PalPowerSaveModeInit+0x38>)
   1239c:	68eb      	ldr	r3, [r5, #12]
   1239e:	6920      	ldr	r0, [r4, #16]
   123a0:	2100      	movs	r1, #0
   123a2:	6011      	str	r1, [r2, #0]
   123a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   123a8:	4718      	bx	r3
   123aa:	bf00      	nop
   123ac:	200000b8 	.word	0x200000b8
   123b0:	200000a8 	.word	0x200000a8
   123b4:	20000098 	.word	0x20000098
   123b8:	00034e88 	.word	0x00034e88
   123bc:	2000f740 	.word	0x2000f740

000123c0 <CC_PalPowerSaveModeSelect>:
   123c0:	b570      	push	{r4, r5, r6, lr}
   123c2:	4d1a      	ldr	r5, [pc, #104]	; (1242c <CC_PalPowerSaveModeSelect+0x6c>)
   123c4:	4e1a      	ldr	r6, [pc, #104]	; (12430 <CC_PalPowerSaveModeSelect+0x70>)
   123c6:	4604      	mov	r4, r0
   123c8:	68b2      	ldr	r2, [r6, #8]
   123ca:	6928      	ldr	r0, [r5, #16]
   123cc:	4790      	blx	r2
   123ce:	b9f0      	cbnz	r0, 1240e <CC_PalPowerSaveModeSelect+0x4e>
   123d0:	b15c      	cbz	r4, 123ea <CC_PalPowerSaveModeSelect+0x2a>
   123d2:	4c18      	ldr	r4, [pc, #96]	; (12434 <CC_PalPowerSaveModeSelect+0x74>)
   123d4:	6823      	ldr	r3, [r4, #0]
   123d6:	b1ab      	cbz	r3, 12404 <CC_PalPowerSaveModeSelect+0x44>
   123d8:	2b01      	cmp	r3, #1
   123da:	d01a      	beq.n	12412 <CC_PalPowerSaveModeSelect+0x52>
   123dc:	3b01      	subs	r3, #1
   123de:	6023      	str	r3, [r4, #0]
   123e0:	6928      	ldr	r0, [r5, #16]
   123e2:	68f3      	ldr	r3, [r6, #12]
   123e4:	4798      	blx	r3
   123e6:	2000      	movs	r0, #0
   123e8:	bd70      	pop	{r4, r5, r6, pc}
   123ea:	4c12      	ldr	r4, [pc, #72]	; (12434 <CC_PalPowerSaveModeSelect+0x74>)
   123ec:	6821      	ldr	r1, [r4, #0]
   123ee:	b939      	cbnz	r1, 12400 <CC_PalPowerSaveModeSelect+0x40>
   123f0:	4b11      	ldr	r3, [pc, #68]	; (12438 <CC_PalPowerSaveModeSelect+0x78>)
   123f2:	4a12      	ldr	r2, [pc, #72]	; (1243c <CC_PalPowerSaveModeSelect+0x7c>)
   123f4:	2001      	movs	r0, #1
   123f6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   123fa:	6813      	ldr	r3, [r2, #0]
   123fc:	2b00      	cmp	r3, #0
   123fe:	d1fc      	bne.n	123fa <CC_PalPowerSaveModeSelect+0x3a>
   12400:	3101      	adds	r1, #1
   12402:	6021      	str	r1, [r4, #0]
   12404:	68f3      	ldr	r3, [r6, #12]
   12406:	6928      	ldr	r0, [r5, #16]
   12408:	4798      	blx	r3
   1240a:	2000      	movs	r0, #0
   1240c:	bd70      	pop	{r4, r5, r6, pc}
   1240e:	480c      	ldr	r0, [pc, #48]	; (12440 <CC_PalPowerSaveModeSelect+0x80>)
   12410:	bd70      	pop	{r4, r5, r6, pc}
   12412:	4a0a      	ldr	r2, [pc, #40]	; (1243c <CC_PalPowerSaveModeSelect+0x7c>)
   12414:	6813      	ldr	r3, [r2, #0]
   12416:	2b00      	cmp	r3, #0
   12418:	d1fc      	bne.n	12414 <CC_PalPowerSaveModeSelect+0x54>
   1241a:	4a07      	ldr	r2, [pc, #28]	; (12438 <CC_PalPowerSaveModeSelect+0x78>)
   1241c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   12420:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12424:	f7ff ff48 	bl	122b8 <CC_HalMaskInterrupt>
   12428:	6823      	ldr	r3, [r4, #0]
   1242a:	e7d7      	b.n	123dc <CC_PalPowerSaveModeSelect+0x1c>
   1242c:	200000b8 	.word	0x200000b8
   12430:	200000a8 	.word	0x200000a8
   12434:	2000f740 	.word	0x2000f740
   12438:	5002a000 	.word	0x5002a000
   1243c:	5002b910 	.word	0x5002b910
   12440:	ffff8fe9 	.word	0xffff8fe9

00012444 <_ZSt15get_new_handlerv>:
   12444:	4b02      	ldr	r3, [pc, #8]	; (12450 <_ZSt15get_new_handlerv+0xc>)
   12446:	6818      	ldr	r0, [r3, #0]
   12448:	f3bf 8f5b 	dmb	ish
   1244c:	4770      	bx	lr
   1244e:	bf00      	nop
   12450:	2000f744 	.word	0x2000f744

00012454 <frexp>:
   12454:	f8df c064 	ldr.w	ip, [pc, #100]	; 124bc <frexp+0x68>
   12458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1245a:	4617      	mov	r7, r2
   1245c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   12460:	2200      	movs	r2, #0
   12462:	4563      	cmp	r3, ip
   12464:	4604      	mov	r4, r0
   12466:	460d      	mov	r5, r1
   12468:	603a      	str	r2, [r7, #0]
   1246a:	dc22      	bgt.n	124b2 <frexp+0x5e>
   1246c:	4684      	mov	ip, r0
   1246e:	ea53 0c0c 	orrs.w	ip, r3, ip
   12472:	d01e      	beq.n	124b2 <frexp+0x5e>
   12474:	f8df c048 	ldr.w	ip, [pc, #72]	; 124c0 <frexp+0x6c>
   12478:	ea01 0c0c 	and.w	ip, r1, ip
   1247c:	460e      	mov	r6, r1
   1247e:	f1bc 0f00 	cmp.w	ip, #0
   12482:	d109      	bne.n	12498 <frexp+0x44>
   12484:	4b0c      	ldr	r3, [pc, #48]	; (124b8 <frexp+0x64>)
   12486:	2200      	movs	r2, #0
   12488:	f7ee f846 	bl	518 <__aeabi_dmul>
   1248c:	f06f 0235 	mvn.w	r2, #53	; 0x35
   12490:	4604      	mov	r4, r0
   12492:	460e      	mov	r6, r1
   12494:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   12498:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   1249c:	151b      	asrs	r3, r3, #20
   1249e:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   124a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   124a6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   124aa:	4413      	add	r3, r2
   124ac:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   124b0:	603b      	str	r3, [r7, #0]
   124b2:	4620      	mov	r0, r4
   124b4:	4629      	mov	r1, r5
   124b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   124b8:	43500000 	.word	0x43500000
   124bc:	7fefffff 	.word	0x7fefffff
   124c0:	7ff00000 	.word	0x7ff00000

000124c4 <round>:
   124c4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   124c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
   124cc:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
   124d0:	2c13      	cmp	r4, #19
   124d2:	460b      	mov	r3, r1
   124d4:	460d      	mov	r5, r1
   124d6:	4602      	mov	r2, r0
   124d8:	dc0f      	bgt.n	124fa <round+0x36>
   124da:	2c00      	cmp	r4, #0
   124dc:	db2a      	blt.n	12534 <round+0x70>
   124de:	491d      	ldr	r1, [pc, #116]	; (12554 <round+0x90>)
   124e0:	4121      	asrs	r1, r4
   124e2:	ea03 0001 	and.w	r0, r3, r1
   124e6:	4310      	orrs	r0, r2
   124e8:	d02f      	beq.n	1254a <round+0x86>
   124ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   124ee:	4123      	asrs	r3, r4
   124f0:	441d      	add	r5, r3
   124f2:	ea25 0501 	bic.w	r5, r5, r1
   124f6:	2300      	movs	r3, #0
   124f8:	e025      	b.n	12546 <round+0x82>
   124fa:	2c33      	cmp	r4, #51	; 0x33
   124fc:	dd07      	ble.n	1250e <round+0x4a>
   124fe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   12502:	d122      	bne.n	1254a <round+0x86>
   12504:	f7ed fe52 	bl	1ac <__adddf3>
   12508:	4602      	mov	r2, r0
   1250a:	460b      	mov	r3, r1
   1250c:	e01d      	b.n	1254a <round+0x86>
   1250e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   12512:	f04f 31ff 	mov.w	r1, #4294967295
   12516:	fa21 f707 	lsr.w	r7, r1, r7
   1251a:	4238      	tst	r0, r7
   1251c:	d015      	beq.n	1254a <round+0x86>
   1251e:	2201      	movs	r2, #1
   12520:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
   12524:	fa02 f303 	lsl.w	r3, r2, r3
   12528:	18c3      	adds	r3, r0, r3
   1252a:	bf28      	it	cs
   1252c:	18ad      	addcs	r5, r5, r2
   1252e:	ea23 0307 	bic.w	r3, r3, r7
   12532:	e008      	b.n	12546 <round+0x82>
   12534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12538:	3401      	adds	r4, #1
   1253a:	bf04      	itt	eq
   1253c:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
   12540:	f445 1540 	orreq.w	r5, r5, #3145728	; 0x300000
   12544:	2300      	movs	r3, #0
   12546:	461a      	mov	r2, r3
   12548:	462b      	mov	r3, r5
   1254a:	4610      	mov	r0, r2
   1254c:	4619      	mov	r1, r3
   1254e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   12552:	bf00      	nop
   12554:	000fffff 	.word	0x000fffff

00012558 <expf>:
   12558:	b5f0      	push	{r4, r5, r6, r7, lr}
   1255a:	4e33      	ldr	r6, [pc, #204]	; (12628 <expf+0xd0>)
   1255c:	b08b      	sub	sp, #44	; 0x2c
   1255e:	4605      	mov	r5, r0
   12560:	f000 f86e 	bl	12640 <__ieee754_expf>
   12564:	f996 3000 	ldrsb.w	r3, [r6]
   12568:	3301      	adds	r3, #1
   1256a:	4604      	mov	r4, r0
   1256c:	d00f      	beq.n	1258e <expf+0x36>
   1256e:	4628      	mov	r0, r5
   12570:	f000 f984 	bl	1287c <finitef>
   12574:	b158      	cbz	r0, 1258e <expf+0x36>
   12576:	492d      	ldr	r1, [pc, #180]	; (1262c <expf+0xd4>)
   12578:	4628      	mov	r0, r5
   1257a:	f7ee fda9 	bl	10d0 <__aeabi_fcmpgt>
   1257e:	4607      	mov	r7, r0
   12580:	2800      	cmp	r0, #0
   12582:	d135      	bne.n	125f0 <expf+0x98>
   12584:	492a      	ldr	r1, [pc, #168]	; (12630 <expf+0xd8>)
   12586:	4628      	mov	r0, r5
   12588:	f7ee fd84 	bl	1094 <__aeabi_fcmplt>
   1258c:	b910      	cbnz	r0, 12594 <expf+0x3c>
   1258e:	4620      	mov	r0, r4
   12590:	b00b      	add	sp, #44	; 0x2c
   12592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12594:	4b27      	ldr	r3, [pc, #156]	; (12634 <expf+0xdc>)
   12596:	9708      	str	r7, [sp, #32]
   12598:	4628      	mov	r0, r5
   1259a:	2204      	movs	r2, #4
   1259c:	e9cd 2300 	strd	r2, r3, [sp]
   125a0:	f7ed ff62 	bl	468 <__aeabi_f2d>
   125a4:	f996 3000 	ldrsb.w	r3, [r6]
   125a8:	2400      	movs	r4, #0
   125aa:	2500      	movs	r5, #0
   125ac:	2b02      	cmp	r3, #2
   125ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
   125b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   125b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   125ba:	d014      	beq.n	125e6 <expf+0x8e>
   125bc:	4668      	mov	r0, sp
   125be:	f000 f95b 	bl	12878 <matherr>
   125c2:	b180      	cbz	r0, 125e6 <expf+0x8e>
   125c4:	9b08      	ldr	r3, [sp, #32]
   125c6:	2b00      	cmp	r3, #0
   125c8:	d129      	bne.n	1261e <expf+0xc6>
   125ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   125ce:	f7ee fa65 	bl	a9c <__aeabi_d2f>
   125d2:	4604      	mov	r4, r0
   125d4:	4620      	mov	r0, r4
   125d6:	b00b      	add	sp, #44	; 0x2c
   125d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125da:	4917      	ldr	r1, [pc, #92]	; (12638 <expf+0xe0>)
   125dc:	2000      	movs	r0, #0
   125de:	2b02      	cmp	r3, #2
   125e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   125e4:	d1ea      	bne.n	125bc <expf+0x64>
   125e6:	f002 f8fe 	bl	147e6 <__errno>
   125ea:	2322      	movs	r3, #34	; 0x22
   125ec:	6003      	str	r3, [r0, #0]
   125ee:	e7e9      	b.n	125c4 <expf+0x6c>
   125f0:	2303      	movs	r3, #3
   125f2:	4a10      	ldr	r2, [pc, #64]	; (12634 <expf+0xdc>)
   125f4:	9300      	str	r3, [sp, #0]
   125f6:	4628      	mov	r0, r5
   125f8:	2300      	movs	r3, #0
   125fa:	9308      	str	r3, [sp, #32]
   125fc:	9201      	str	r2, [sp, #4]
   125fe:	f7ed ff33 	bl	468 <__aeabi_f2d>
   12602:	f996 3000 	ldrsb.w	r3, [r6]
   12606:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1260a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1260e:	2b00      	cmp	r3, #0
   12610:	d1e3      	bne.n	125da <expf+0x82>
   12612:	4b0a      	ldr	r3, [pc, #40]	; (1263c <expf+0xe4>)
   12614:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   12618:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1261c:	e7ce      	b.n	125bc <expf+0x64>
   1261e:	f002 f8e2 	bl	147e6 <__errno>
   12622:	9b08      	ldr	r3, [sp, #32]
   12624:	6003      	str	r3, [r0, #0]
   12626:	e7d0      	b.n	125ca <expf+0x72>
   12628:	200002c8 	.word	0x200002c8
   1262c:	42b17180 	.word	0x42b17180
   12630:	c2cff1b5 	.word	0xc2cff1b5
   12634:	00034ea8 	.word	0x00034ea8
   12638:	7ff00000 	.word	0x7ff00000
   1263c:	47efffff 	.word	0x47efffff

00012640 <__ieee754_expf>:
   12640:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   12644:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   12648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1264c:	4604      	mov	r4, r0
   1264e:	d86a      	bhi.n	12726 <__ieee754_expf+0xe6>
   12650:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   12654:	f000 80c2 	beq.w	127dc <__ieee754_expf+0x19c>
   12658:	4977      	ldr	r1, [pc, #476]	; (12838 <__ieee754_expf+0x1f8>)
   1265a:	4288      	cmp	r0, r1
   1265c:	dc68      	bgt.n	12730 <__ieee754_expf+0xf0>
   1265e:	2800      	cmp	r0, #0
   12660:	f2c0 80b5 	blt.w	127ce <__ieee754_expf+0x18e>
   12664:	4b75      	ldr	r3, [pc, #468]	; (1283c <__ieee754_expf+0x1fc>)
   12666:	429a      	cmp	r2, r3
   12668:	d968      	bls.n	1273c <__ieee754_expf+0xfc>
   1266a:	4b75      	ldr	r3, [pc, #468]	; (12840 <__ieee754_expf+0x200>)
   1266c:	429a      	cmp	r2, r3
   1266e:	f200 80c0 	bhi.w	127f2 <__ieee754_expf+0x1b2>
   12672:	4b74      	ldr	r3, [pc, #464]	; (12844 <__ieee754_expf+0x204>)
   12674:	4620      	mov	r0, r4
   12676:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   1267a:	f7ee fa63 	bl	b44 <__aeabi_fsub>
   1267e:	4b72      	ldr	r3, [pc, #456]	; (12848 <__ieee754_expf+0x208>)
   12680:	f1c5 0701 	rsb	r7, r5, #1
   12684:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
   12688:	4680      	mov	r8, r0
   1268a:	1b7f      	subs	r7, r7, r5
   1268c:	4649      	mov	r1, r9
   1268e:	4640      	mov	r0, r8
   12690:	f7ee fa58 	bl	b44 <__aeabi_fsub>
   12694:	4601      	mov	r1, r0
   12696:	4605      	mov	r5, r0
   12698:	f7ee fb5e 	bl	d58 <__aeabi_fmul>
   1269c:	496b      	ldr	r1, [pc, #428]	; (1284c <__ieee754_expf+0x20c>)
   1269e:	4606      	mov	r6, r0
   126a0:	f7ee fb5a 	bl	d58 <__aeabi_fmul>
   126a4:	496a      	ldr	r1, [pc, #424]	; (12850 <__ieee754_expf+0x210>)
   126a6:	f7ee fa4d 	bl	b44 <__aeabi_fsub>
   126aa:	4631      	mov	r1, r6
   126ac:	f7ee fb54 	bl	d58 <__aeabi_fmul>
   126b0:	4968      	ldr	r1, [pc, #416]	; (12854 <__ieee754_expf+0x214>)
   126b2:	f7ee fa49 	bl	b48 <__addsf3>
   126b6:	4631      	mov	r1, r6
   126b8:	f7ee fb4e 	bl	d58 <__aeabi_fmul>
   126bc:	4966      	ldr	r1, [pc, #408]	; (12858 <__ieee754_expf+0x218>)
   126be:	f7ee fa41 	bl	b44 <__aeabi_fsub>
   126c2:	4631      	mov	r1, r6
   126c4:	f7ee fb48 	bl	d58 <__aeabi_fmul>
   126c8:	4964      	ldr	r1, [pc, #400]	; (1285c <__ieee754_expf+0x21c>)
   126ca:	f7ee fa3d 	bl	b48 <__addsf3>
   126ce:	4631      	mov	r1, r6
   126d0:	f7ee fb42 	bl	d58 <__aeabi_fmul>
   126d4:	4601      	mov	r1, r0
   126d6:	4628      	mov	r0, r5
   126d8:	f7ee fa34 	bl	b44 <__aeabi_fsub>
   126dc:	462c      	mov	r4, r5
   126de:	4606      	mov	r6, r0
   126e0:	4682      	mov	sl, r0
   126e2:	2f00      	cmp	r7, #0
   126e4:	d05c      	beq.n	127a0 <__ieee754_expf+0x160>
   126e6:	4631      	mov	r1, r6
   126e8:	4628      	mov	r0, r5
   126ea:	f7ee fb35 	bl	d58 <__aeabi_fmul>
   126ee:	4631      	mov	r1, r6
   126f0:	4604      	mov	r4, r0
   126f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   126f6:	f7ee fa25 	bl	b44 <__aeabi_fsub>
   126fa:	4601      	mov	r1, r0
   126fc:	4620      	mov	r0, r4
   126fe:	f7ee fbdf 	bl	ec0 <__aeabi_fdiv>
   12702:	4601      	mov	r1, r0
   12704:	4648      	mov	r0, r9
   12706:	f7ee fa1d 	bl	b44 <__aeabi_fsub>
   1270a:	4641      	mov	r1, r8
   1270c:	f7ee fa1a 	bl	b44 <__aeabi_fsub>
   12710:	4601      	mov	r1, r0
   12712:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   12716:	f7ee fa15 	bl	b44 <__aeabi_fsub>
   1271a:	f117 0f7d 	cmn.w	r7, #125	; 0x7d
   1271e:	db60      	blt.n	127e2 <__ieee754_expf+0x1a2>
   12720:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
   12724:	e002      	b.n	1272c <__ieee754_expf+0xec>
   12726:	4601      	mov	r1, r0
   12728:	f7ee fa0e 	bl	b48 <__addsf3>
   1272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12730:	494b      	ldr	r1, [pc, #300]	; (12860 <__ieee754_expf+0x220>)
   12732:	4608      	mov	r0, r1
   12734:	f7ee fb10 	bl	d58 <__aeabi_fmul>
   12738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1273c:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   12740:	d209      	bcs.n	12756 <__ieee754_expf+0x116>
   12742:	4947      	ldr	r1, [pc, #284]	; (12860 <__ieee754_expf+0x220>)
   12744:	4620      	mov	r0, r4
   12746:	f7ee f9ff 	bl	b48 <__addsf3>
   1274a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1274e:	f7ee fcbf 	bl	10d0 <__aeabi_fcmpgt>
   12752:	2800      	cmp	r0, #0
   12754:	d16a      	bne.n	1282c <__ieee754_expf+0x1ec>
   12756:	4621      	mov	r1, r4
   12758:	4620      	mov	r0, r4
   1275a:	f7ee fafd 	bl	d58 <__aeabi_fmul>
   1275e:	493b      	ldr	r1, [pc, #236]	; (1284c <__ieee754_expf+0x20c>)
   12760:	4605      	mov	r5, r0
   12762:	f7ee faf9 	bl	d58 <__aeabi_fmul>
   12766:	493a      	ldr	r1, [pc, #232]	; (12850 <__ieee754_expf+0x210>)
   12768:	f7ee f9ec 	bl	b44 <__aeabi_fsub>
   1276c:	4629      	mov	r1, r5
   1276e:	f7ee faf3 	bl	d58 <__aeabi_fmul>
   12772:	4938      	ldr	r1, [pc, #224]	; (12854 <__ieee754_expf+0x214>)
   12774:	f7ee f9e8 	bl	b48 <__addsf3>
   12778:	4629      	mov	r1, r5
   1277a:	f7ee faed 	bl	d58 <__aeabi_fmul>
   1277e:	4936      	ldr	r1, [pc, #216]	; (12858 <__ieee754_expf+0x218>)
   12780:	f7ee f9e0 	bl	b44 <__aeabi_fsub>
   12784:	4629      	mov	r1, r5
   12786:	f7ee fae7 	bl	d58 <__aeabi_fmul>
   1278a:	4934      	ldr	r1, [pc, #208]	; (1285c <__ieee754_expf+0x21c>)
   1278c:	f7ee f9dc 	bl	b48 <__addsf3>
   12790:	4629      	mov	r1, r5
   12792:	f7ee fae1 	bl	d58 <__aeabi_fmul>
   12796:	4601      	mov	r1, r0
   12798:	4620      	mov	r0, r4
   1279a:	f7ee f9d3 	bl	b44 <__aeabi_fsub>
   1279e:	4682      	mov	sl, r0
   127a0:	4651      	mov	r1, sl
   127a2:	4620      	mov	r0, r4
   127a4:	f7ee fad8 	bl	d58 <__aeabi_fmul>
   127a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   127ac:	4605      	mov	r5, r0
   127ae:	4650      	mov	r0, sl
   127b0:	f7ee f9c8 	bl	b44 <__aeabi_fsub>
   127b4:	4601      	mov	r1, r0
   127b6:	4628      	mov	r0, r5
   127b8:	f7ee fb82 	bl	ec0 <__aeabi_fdiv>
   127bc:	4621      	mov	r1, r4
   127be:	f7ee f9c1 	bl	b44 <__aeabi_fsub>
   127c2:	4601      	mov	r1, r0
   127c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   127c8:	f7ee f9bc 	bl	b44 <__aeabi_fsub>
   127cc:	e7ae      	b.n	1272c <__ieee754_expf+0xec>
   127ce:	4b25      	ldr	r3, [pc, #148]	; (12864 <__ieee754_expf+0x224>)
   127d0:	429a      	cmp	r2, r3
   127d2:	f67f af47 	bls.w	12664 <__ieee754_expf+0x24>
   127d6:	2000      	movs	r0, #0
   127d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   127dc:	2d00      	cmp	r5, #0
   127de:	d1fa      	bne.n	127d6 <__ieee754_expf+0x196>
   127e0:	e7a4      	b.n	1272c <__ieee754_expf+0xec>
   127e2:	3764      	adds	r7, #100	; 0x64
   127e4:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
   127e8:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   127ec:	f7ee fab4 	bl	d58 <__aeabi_fmul>
   127f0:	e79c      	b.n	1272c <__ieee754_expf+0xec>
   127f2:	491d      	ldr	r1, [pc, #116]	; (12868 <__ieee754_expf+0x228>)
   127f4:	4620      	mov	r0, r4
   127f6:	f7ee faaf 	bl	d58 <__aeabi_fmul>
   127fa:	4b1c      	ldr	r3, [pc, #112]	; (1286c <__ieee754_expf+0x22c>)
   127fc:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   12800:	f7ee f9a2 	bl	b48 <__addsf3>
   12804:	f7ee fc6e 	bl	10e4 <__aeabi_f2iz>
   12808:	4607      	mov	r7, r0
   1280a:	f7ee fa51 	bl	cb0 <__aeabi_i2f>
   1280e:	4918      	ldr	r1, [pc, #96]	; (12870 <__ieee754_expf+0x230>)
   12810:	4605      	mov	r5, r0
   12812:	f7ee faa1 	bl	d58 <__aeabi_fmul>
   12816:	4601      	mov	r1, r0
   12818:	4620      	mov	r0, r4
   1281a:	f7ee f993 	bl	b44 <__aeabi_fsub>
   1281e:	4915      	ldr	r1, [pc, #84]	; (12874 <__ieee754_expf+0x234>)
   12820:	4680      	mov	r8, r0
   12822:	4628      	mov	r0, r5
   12824:	f7ee fa98 	bl	d58 <__aeabi_fmul>
   12828:	4681      	mov	r9, r0
   1282a:	e72f      	b.n	1268c <__ieee754_expf+0x4c>
   1282c:	4620      	mov	r0, r4
   1282e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12832:	f7ee f989 	bl	b48 <__addsf3>
   12836:	e779      	b.n	1272c <__ieee754_expf+0xec>
   12838:	42b17217 	.word	0x42b17217
   1283c:	3eb17218 	.word	0x3eb17218
   12840:	3f851591 	.word	0x3f851591
   12844:	00034eb8 	.word	0x00034eb8
   12848:	00034ec0 	.word	0x00034ec0
   1284c:	3331bb4c 	.word	0x3331bb4c
   12850:	35ddea0e 	.word	0x35ddea0e
   12854:	388ab355 	.word	0x388ab355
   12858:	3b360b61 	.word	0x3b360b61
   1285c:	3e2aaaab 	.word	0x3e2aaaab
   12860:	7149f2ca 	.word	0x7149f2ca
   12864:	42cff1b5 	.word	0x42cff1b5
   12868:	3fb8aa3b 	.word	0x3fb8aa3b
   1286c:	00034eb0 	.word	0x00034eb0
   12870:	3f317180 	.word	0x3f317180
   12874:	3717f7d1 	.word	0x3717f7d1

00012878 <matherr>:
   12878:	2000      	movs	r0, #0
   1287a:	4770      	bx	lr

0001287c <finitef>:
   1287c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   12880:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   12884:	bfac      	ite	ge
   12886:	2000      	movge	r0, #0
   12888:	2001      	movlt	r0, #1
   1288a:	4770      	bx	lr

0001288c <__assert_func>:
   1288c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1288e:	4614      	mov	r4, r2
   12890:	461a      	mov	r2, r3
   12892:	4b09      	ldr	r3, [pc, #36]	; (128b8 <__assert_func+0x2c>)
   12894:	681b      	ldr	r3, [r3, #0]
   12896:	4605      	mov	r5, r0
   12898:	68d8      	ldr	r0, [r3, #12]
   1289a:	b14c      	cbz	r4, 128b0 <__assert_func+0x24>
   1289c:	4b07      	ldr	r3, [pc, #28]	; (128bc <__assert_func+0x30>)
   1289e:	9100      	str	r1, [sp, #0]
   128a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
   128a4:	4906      	ldr	r1, [pc, #24]	; (128c0 <__assert_func+0x34>)
   128a6:	462b      	mov	r3, r5
   128a8:	f000 f80e 	bl	128c8 <fiprintf>
   128ac:	f005 fffd 	bl	188aa <abort>
   128b0:	4b04      	ldr	r3, [pc, #16]	; (128c4 <__assert_func+0x38>)
   128b2:	461c      	mov	r4, r3
   128b4:	e7f3      	b.n	1289e <__assert_func+0x12>
   128b6:	bf00      	nop
   128b8:	200000f8 	.word	0x200000f8
   128bc:	00034f38 	.word	0x00034f38
   128c0:	00034f45 	.word	0x00034f45
   128c4:	00034f73 	.word	0x00034f73

000128c8 <fiprintf>:
   128c8:	b40e      	push	{r1, r2, r3}
   128ca:	b503      	push	{r0, r1, lr}
   128cc:	4601      	mov	r1, r0
   128ce:	ab03      	add	r3, sp, #12
   128d0:	4805      	ldr	r0, [pc, #20]	; (128e8 <fiprintf+0x20>)
   128d2:	f853 2b04 	ldr.w	r2, [r3], #4
   128d6:	6800      	ldr	r0, [r0, #0]
   128d8:	9301      	str	r3, [sp, #4]
   128da:	f000 f8bf 	bl	12a5c <_vfiprintf_r>
   128de:	b002      	add	sp, #8
   128e0:	f85d eb04 	ldr.w	lr, [sp], #4
   128e4:	b003      	add	sp, #12
   128e6:	4770      	bx	lr
   128e8:	200000f8 	.word	0x200000f8

000128ec <malloc>:
   128ec:	4b02      	ldr	r3, [pc, #8]	; (128f8 <malloc+0xc>)
   128ee:	4601      	mov	r1, r0
   128f0:	6818      	ldr	r0, [r3, #0]
   128f2:	f000 b859 	b.w	129a8 <_malloc_r>
   128f6:	bf00      	nop
   128f8:	200000f8 	.word	0x200000f8

000128fc <free>:
   128fc:	4b02      	ldr	r3, [pc, #8]	; (12908 <free+0xc>)
   128fe:	4601      	mov	r1, r0
   12900:	6818      	ldr	r0, [r3, #0]
   12902:	f000 b803 	b.w	1290c <_free_r>
   12906:	bf00      	nop
   12908:	200000f8 	.word	0x200000f8

0001290c <_free_r>:
   1290c:	b538      	push	{r3, r4, r5, lr}
   1290e:	4605      	mov	r5, r0
   12910:	2900      	cmp	r1, #0
   12912:	d045      	beq.n	129a0 <_free_r+0x94>
   12914:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12918:	1f0c      	subs	r4, r1, #4
   1291a:	2b00      	cmp	r3, #0
   1291c:	bfb8      	it	lt
   1291e:	18e4      	addlt	r4, r4, r3
   12920:	f001 f890 	bl	13a44 <__malloc_lock>
   12924:	4a1f      	ldr	r2, [pc, #124]	; (129a4 <_free_r+0x98>)
   12926:	6813      	ldr	r3, [r2, #0]
   12928:	4610      	mov	r0, r2
   1292a:	b933      	cbnz	r3, 1293a <_free_r+0x2e>
   1292c:	6063      	str	r3, [r4, #4]
   1292e:	6014      	str	r4, [r2, #0]
   12930:	4628      	mov	r0, r5
   12932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12936:	f001 b88b 	b.w	13a50 <__malloc_unlock>
   1293a:	42a3      	cmp	r3, r4
   1293c:	d90b      	bls.n	12956 <_free_r+0x4a>
   1293e:	6821      	ldr	r1, [r4, #0]
   12940:	1862      	adds	r2, r4, r1
   12942:	4293      	cmp	r3, r2
   12944:	bf04      	itt	eq
   12946:	681a      	ldreq	r2, [r3, #0]
   12948:	685b      	ldreq	r3, [r3, #4]
   1294a:	6063      	str	r3, [r4, #4]
   1294c:	bf04      	itt	eq
   1294e:	1852      	addeq	r2, r2, r1
   12950:	6022      	streq	r2, [r4, #0]
   12952:	6004      	str	r4, [r0, #0]
   12954:	e7ec      	b.n	12930 <_free_r+0x24>
   12956:	461a      	mov	r2, r3
   12958:	685b      	ldr	r3, [r3, #4]
   1295a:	b10b      	cbz	r3, 12960 <_free_r+0x54>
   1295c:	42a3      	cmp	r3, r4
   1295e:	d9fa      	bls.n	12956 <_free_r+0x4a>
   12960:	6811      	ldr	r1, [r2, #0]
   12962:	1850      	adds	r0, r2, r1
   12964:	42a0      	cmp	r0, r4
   12966:	d10b      	bne.n	12980 <_free_r+0x74>
   12968:	6820      	ldr	r0, [r4, #0]
   1296a:	4401      	add	r1, r0
   1296c:	1850      	adds	r0, r2, r1
   1296e:	4283      	cmp	r3, r0
   12970:	6011      	str	r1, [r2, #0]
   12972:	d1dd      	bne.n	12930 <_free_r+0x24>
   12974:	6818      	ldr	r0, [r3, #0]
   12976:	685b      	ldr	r3, [r3, #4]
   12978:	6053      	str	r3, [r2, #4]
   1297a:	4401      	add	r1, r0
   1297c:	6011      	str	r1, [r2, #0]
   1297e:	e7d7      	b.n	12930 <_free_r+0x24>
   12980:	d902      	bls.n	12988 <_free_r+0x7c>
   12982:	230c      	movs	r3, #12
   12984:	602b      	str	r3, [r5, #0]
   12986:	e7d3      	b.n	12930 <_free_r+0x24>
   12988:	6820      	ldr	r0, [r4, #0]
   1298a:	1821      	adds	r1, r4, r0
   1298c:	428b      	cmp	r3, r1
   1298e:	bf04      	itt	eq
   12990:	6819      	ldreq	r1, [r3, #0]
   12992:	685b      	ldreq	r3, [r3, #4]
   12994:	6063      	str	r3, [r4, #4]
   12996:	bf04      	itt	eq
   12998:	1809      	addeq	r1, r1, r0
   1299a:	6021      	streq	r1, [r4, #0]
   1299c:	6054      	str	r4, [r2, #4]
   1299e:	e7c7      	b.n	12930 <_free_r+0x24>
   129a0:	bd38      	pop	{r3, r4, r5, pc}
   129a2:	bf00      	nop
   129a4:	2000f748 	.word	0x2000f748

000129a8 <_malloc_r>:
   129a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129aa:	1ccd      	adds	r5, r1, #3
   129ac:	f025 0503 	bic.w	r5, r5, #3
   129b0:	3508      	adds	r5, #8
   129b2:	2d0c      	cmp	r5, #12
   129b4:	bf38      	it	cc
   129b6:	250c      	movcc	r5, #12
   129b8:	2d00      	cmp	r5, #0
   129ba:	4606      	mov	r6, r0
   129bc:	db01      	blt.n	129c2 <_malloc_r+0x1a>
   129be:	42a9      	cmp	r1, r5
   129c0:	d903      	bls.n	129ca <_malloc_r+0x22>
   129c2:	230c      	movs	r3, #12
   129c4:	6033      	str	r3, [r6, #0]
   129c6:	2000      	movs	r0, #0
   129c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   129ca:	f001 f83b 	bl	13a44 <__malloc_lock>
   129ce:	4921      	ldr	r1, [pc, #132]	; (12a54 <_malloc_r+0xac>)
   129d0:	680a      	ldr	r2, [r1, #0]
   129d2:	4614      	mov	r4, r2
   129d4:	b99c      	cbnz	r4, 129fe <_malloc_r+0x56>
   129d6:	4f20      	ldr	r7, [pc, #128]	; (12a58 <_malloc_r+0xb0>)
   129d8:	683b      	ldr	r3, [r7, #0]
   129da:	b923      	cbnz	r3, 129e6 <_malloc_r+0x3e>
   129dc:	4621      	mov	r1, r4
   129de:	4630      	mov	r0, r6
   129e0:	f000 fcbc 	bl	1335c <_sbrk_r>
   129e4:	6038      	str	r0, [r7, #0]
   129e6:	4629      	mov	r1, r5
   129e8:	4630      	mov	r0, r6
   129ea:	f000 fcb7 	bl	1335c <_sbrk_r>
   129ee:	1c43      	adds	r3, r0, #1
   129f0:	d123      	bne.n	12a3a <_malloc_r+0x92>
   129f2:	230c      	movs	r3, #12
   129f4:	6033      	str	r3, [r6, #0]
   129f6:	4630      	mov	r0, r6
   129f8:	f001 f82a 	bl	13a50 <__malloc_unlock>
   129fc:	e7e3      	b.n	129c6 <_malloc_r+0x1e>
   129fe:	6823      	ldr	r3, [r4, #0]
   12a00:	1b5b      	subs	r3, r3, r5
   12a02:	d417      	bmi.n	12a34 <_malloc_r+0x8c>
   12a04:	2b0b      	cmp	r3, #11
   12a06:	d903      	bls.n	12a10 <_malloc_r+0x68>
   12a08:	6023      	str	r3, [r4, #0]
   12a0a:	441c      	add	r4, r3
   12a0c:	6025      	str	r5, [r4, #0]
   12a0e:	e004      	b.n	12a1a <_malloc_r+0x72>
   12a10:	6863      	ldr	r3, [r4, #4]
   12a12:	42a2      	cmp	r2, r4
   12a14:	bf0c      	ite	eq
   12a16:	600b      	streq	r3, [r1, #0]
   12a18:	6053      	strne	r3, [r2, #4]
   12a1a:	4630      	mov	r0, r6
   12a1c:	f001 f818 	bl	13a50 <__malloc_unlock>
   12a20:	f104 000b 	add.w	r0, r4, #11
   12a24:	1d23      	adds	r3, r4, #4
   12a26:	f020 0007 	bic.w	r0, r0, #7
   12a2a:	1ac2      	subs	r2, r0, r3
   12a2c:	d0cc      	beq.n	129c8 <_malloc_r+0x20>
   12a2e:	1a1b      	subs	r3, r3, r0
   12a30:	50a3      	str	r3, [r4, r2]
   12a32:	e7c9      	b.n	129c8 <_malloc_r+0x20>
   12a34:	4622      	mov	r2, r4
   12a36:	6864      	ldr	r4, [r4, #4]
   12a38:	e7cc      	b.n	129d4 <_malloc_r+0x2c>
   12a3a:	1cc4      	adds	r4, r0, #3
   12a3c:	f024 0403 	bic.w	r4, r4, #3
   12a40:	42a0      	cmp	r0, r4
   12a42:	d0e3      	beq.n	12a0c <_malloc_r+0x64>
   12a44:	1a21      	subs	r1, r4, r0
   12a46:	4630      	mov	r0, r6
   12a48:	f000 fc88 	bl	1335c <_sbrk_r>
   12a4c:	3001      	adds	r0, #1
   12a4e:	d1dd      	bne.n	12a0c <_malloc_r+0x64>
   12a50:	e7cf      	b.n	129f2 <_malloc_r+0x4a>
   12a52:	bf00      	nop
   12a54:	2000f748 	.word	0x2000f748
   12a58:	2000f74c 	.word	0x2000f74c

00012a5c <_vfiprintf_r>:
   12a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a60:	460d      	mov	r5, r1
   12a62:	b09d      	sub	sp, #116	; 0x74
   12a64:	4614      	mov	r4, r2
   12a66:	4698      	mov	r8, r3
   12a68:	4606      	mov	r6, r0
   12a6a:	b118      	cbz	r0, 12a74 <_vfiprintf_r+0x18>
   12a6c:	6983      	ldr	r3, [r0, #24]
   12a6e:	b90b      	cbnz	r3, 12a74 <_vfiprintf_r+0x18>
   12a70:	f000 ff26 	bl	138c0 <__sinit>
   12a74:	4b89      	ldr	r3, [pc, #548]	; (12c9c <_vfiprintf_r+0x240>)
   12a76:	429d      	cmp	r5, r3
   12a78:	d11b      	bne.n	12ab2 <_vfiprintf_r+0x56>
   12a7a:	6875      	ldr	r5, [r6, #4]
   12a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12a7e:	07d9      	lsls	r1, r3, #31
   12a80:	d405      	bmi.n	12a8e <_vfiprintf_r+0x32>
   12a82:	89ab      	ldrh	r3, [r5, #12]
   12a84:	059a      	lsls	r2, r3, #22
   12a86:	d402      	bmi.n	12a8e <_vfiprintf_r+0x32>
   12a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12a8a:	f001 fea0 	bl	147ce <__retarget_lock_acquire_recursive>
   12a8e:	89ab      	ldrh	r3, [r5, #12]
   12a90:	071b      	lsls	r3, r3, #28
   12a92:	d501      	bpl.n	12a98 <_vfiprintf_r+0x3c>
   12a94:	692b      	ldr	r3, [r5, #16]
   12a96:	b9eb      	cbnz	r3, 12ad4 <_vfiprintf_r+0x78>
   12a98:	4629      	mov	r1, r5
   12a9a:	4630      	mov	r0, r6
   12a9c:	f000 fd9e 	bl	135dc <__swsetup_r>
   12aa0:	b1c0      	cbz	r0, 12ad4 <_vfiprintf_r+0x78>
   12aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12aa4:	07dc      	lsls	r4, r3, #31
   12aa6:	d50e      	bpl.n	12ac6 <_vfiprintf_r+0x6a>
   12aa8:	f04f 30ff 	mov.w	r0, #4294967295
   12aac:	b01d      	add	sp, #116	; 0x74
   12aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ab2:	4b7b      	ldr	r3, [pc, #492]	; (12ca0 <_vfiprintf_r+0x244>)
   12ab4:	429d      	cmp	r5, r3
   12ab6:	d101      	bne.n	12abc <_vfiprintf_r+0x60>
   12ab8:	68b5      	ldr	r5, [r6, #8]
   12aba:	e7df      	b.n	12a7c <_vfiprintf_r+0x20>
   12abc:	4b79      	ldr	r3, [pc, #484]	; (12ca4 <_vfiprintf_r+0x248>)
   12abe:	429d      	cmp	r5, r3
   12ac0:	bf08      	it	eq
   12ac2:	68f5      	ldreq	r5, [r6, #12]
   12ac4:	e7da      	b.n	12a7c <_vfiprintf_r+0x20>
   12ac6:	89ab      	ldrh	r3, [r5, #12]
   12ac8:	0598      	lsls	r0, r3, #22
   12aca:	d4ed      	bmi.n	12aa8 <_vfiprintf_r+0x4c>
   12acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12ace:	f001 fe86 	bl	147de <__retarget_lock_release_recursive>
   12ad2:	e7e9      	b.n	12aa8 <_vfiprintf_r+0x4c>
   12ad4:	2300      	movs	r3, #0
   12ad6:	9309      	str	r3, [sp, #36]	; 0x24
   12ad8:	2320      	movs	r3, #32
   12ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   12ade:	f8cd 800c 	str.w	r8, [sp, #12]
   12ae2:	2330      	movs	r3, #48	; 0x30
   12ae4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 12ca8 <_vfiprintf_r+0x24c>
   12ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   12aec:	f04f 0901 	mov.w	r9, #1
   12af0:	4623      	mov	r3, r4
   12af2:	469a      	mov	sl, r3
   12af4:	f813 2b01 	ldrb.w	r2, [r3], #1
   12af8:	b10a      	cbz	r2, 12afe <_vfiprintf_r+0xa2>
   12afa:	2a25      	cmp	r2, #37	; 0x25
   12afc:	d1f9      	bne.n	12af2 <_vfiprintf_r+0x96>
   12afe:	ebba 0b04 	subs.w	fp, sl, r4
   12b02:	d00b      	beq.n	12b1c <_vfiprintf_r+0xc0>
   12b04:	465b      	mov	r3, fp
   12b06:	4622      	mov	r2, r4
   12b08:	4629      	mov	r1, r5
   12b0a:	4630      	mov	r0, r6
   12b0c:	f005 ff11 	bl	18932 <__sfputs_r>
   12b10:	3001      	adds	r0, #1
   12b12:	f000 80aa 	beq.w	12c6a <_vfiprintf_r+0x20e>
   12b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12b18:	445a      	add	r2, fp
   12b1a:	9209      	str	r2, [sp, #36]	; 0x24
   12b1c:	f89a 3000 	ldrb.w	r3, [sl]
   12b20:	2b00      	cmp	r3, #0
   12b22:	f000 80a2 	beq.w	12c6a <_vfiprintf_r+0x20e>
   12b26:	2300      	movs	r3, #0
   12b28:	f04f 32ff 	mov.w	r2, #4294967295
   12b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   12b30:	f10a 0a01 	add.w	sl, sl, #1
   12b34:	9304      	str	r3, [sp, #16]
   12b36:	9307      	str	r3, [sp, #28]
   12b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   12b3c:	931a      	str	r3, [sp, #104]	; 0x68
   12b3e:	4654      	mov	r4, sl
   12b40:	2205      	movs	r2, #5
   12b42:	f814 1b01 	ldrb.w	r1, [r4], #1
   12b46:	4858      	ldr	r0, [pc, #352]	; (12ca8 <_vfiprintf_r+0x24c>)
   12b48:	f7ed fada 	bl	100 <memchr>
   12b4c:	9a04      	ldr	r2, [sp, #16]
   12b4e:	b9d8      	cbnz	r0, 12b88 <_vfiprintf_r+0x12c>
   12b50:	06d1      	lsls	r1, r2, #27
   12b52:	bf44      	itt	mi
   12b54:	2320      	movmi	r3, #32
   12b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   12b5a:	0713      	lsls	r3, r2, #28
   12b5c:	bf44      	itt	mi
   12b5e:	232b      	movmi	r3, #43	; 0x2b
   12b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   12b64:	f89a 3000 	ldrb.w	r3, [sl]
   12b68:	2b2a      	cmp	r3, #42	; 0x2a
   12b6a:	d015      	beq.n	12b98 <_vfiprintf_r+0x13c>
   12b6c:	9a07      	ldr	r2, [sp, #28]
   12b6e:	4654      	mov	r4, sl
   12b70:	2000      	movs	r0, #0
   12b72:	f04f 0c0a 	mov.w	ip, #10
   12b76:	4621      	mov	r1, r4
   12b78:	f811 3b01 	ldrb.w	r3, [r1], #1
   12b7c:	3b30      	subs	r3, #48	; 0x30
   12b7e:	2b09      	cmp	r3, #9
   12b80:	d94e      	bls.n	12c20 <_vfiprintf_r+0x1c4>
   12b82:	b1b0      	cbz	r0, 12bb2 <_vfiprintf_r+0x156>
   12b84:	9207      	str	r2, [sp, #28]
   12b86:	e014      	b.n	12bb2 <_vfiprintf_r+0x156>
   12b88:	eba0 0308 	sub.w	r3, r0, r8
   12b8c:	fa09 f303 	lsl.w	r3, r9, r3
   12b90:	4313      	orrs	r3, r2
   12b92:	9304      	str	r3, [sp, #16]
   12b94:	46a2      	mov	sl, r4
   12b96:	e7d2      	b.n	12b3e <_vfiprintf_r+0xe2>
   12b98:	9b03      	ldr	r3, [sp, #12]
   12b9a:	1d19      	adds	r1, r3, #4
   12b9c:	681b      	ldr	r3, [r3, #0]
   12b9e:	9103      	str	r1, [sp, #12]
   12ba0:	2b00      	cmp	r3, #0
   12ba2:	bfbb      	ittet	lt
   12ba4:	425b      	neglt	r3, r3
   12ba6:	f042 0202 	orrlt.w	r2, r2, #2
   12baa:	9307      	strge	r3, [sp, #28]
   12bac:	9307      	strlt	r3, [sp, #28]
   12bae:	bfb8      	it	lt
   12bb0:	9204      	strlt	r2, [sp, #16]
   12bb2:	7823      	ldrb	r3, [r4, #0]
   12bb4:	2b2e      	cmp	r3, #46	; 0x2e
   12bb6:	d10c      	bne.n	12bd2 <_vfiprintf_r+0x176>
   12bb8:	7863      	ldrb	r3, [r4, #1]
   12bba:	2b2a      	cmp	r3, #42	; 0x2a
   12bbc:	d135      	bne.n	12c2a <_vfiprintf_r+0x1ce>
   12bbe:	9b03      	ldr	r3, [sp, #12]
   12bc0:	1d1a      	adds	r2, r3, #4
   12bc2:	681b      	ldr	r3, [r3, #0]
   12bc4:	9203      	str	r2, [sp, #12]
   12bc6:	2b00      	cmp	r3, #0
   12bc8:	bfb8      	it	lt
   12bca:	f04f 33ff 	movlt.w	r3, #4294967295
   12bce:	3402      	adds	r4, #2
   12bd0:	9305      	str	r3, [sp, #20]
   12bd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 12cb8 <_vfiprintf_r+0x25c>
   12bd6:	7821      	ldrb	r1, [r4, #0]
   12bd8:	2203      	movs	r2, #3
   12bda:	4650      	mov	r0, sl
   12bdc:	f7ed fa90 	bl	100 <memchr>
   12be0:	b140      	cbz	r0, 12bf4 <_vfiprintf_r+0x198>
   12be2:	2340      	movs	r3, #64	; 0x40
   12be4:	eba0 000a 	sub.w	r0, r0, sl
   12be8:	fa03 f000 	lsl.w	r0, r3, r0
   12bec:	9b04      	ldr	r3, [sp, #16]
   12bee:	4303      	orrs	r3, r0
   12bf0:	3401      	adds	r4, #1
   12bf2:	9304      	str	r3, [sp, #16]
   12bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
   12bf8:	482c      	ldr	r0, [pc, #176]	; (12cac <_vfiprintf_r+0x250>)
   12bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   12bfe:	2206      	movs	r2, #6
   12c00:	f7ed fa7e 	bl	100 <memchr>
   12c04:	2800      	cmp	r0, #0
   12c06:	d03f      	beq.n	12c88 <_vfiprintf_r+0x22c>
   12c08:	4b29      	ldr	r3, [pc, #164]	; (12cb0 <_vfiprintf_r+0x254>)
   12c0a:	bb1b      	cbnz	r3, 12c54 <_vfiprintf_r+0x1f8>
   12c0c:	9b03      	ldr	r3, [sp, #12]
   12c0e:	3307      	adds	r3, #7
   12c10:	f023 0307 	bic.w	r3, r3, #7
   12c14:	3308      	adds	r3, #8
   12c16:	9303      	str	r3, [sp, #12]
   12c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12c1a:	443b      	add	r3, r7
   12c1c:	9309      	str	r3, [sp, #36]	; 0x24
   12c1e:	e767      	b.n	12af0 <_vfiprintf_r+0x94>
   12c20:	fb0c 3202 	mla	r2, ip, r2, r3
   12c24:	460c      	mov	r4, r1
   12c26:	2001      	movs	r0, #1
   12c28:	e7a5      	b.n	12b76 <_vfiprintf_r+0x11a>
   12c2a:	2300      	movs	r3, #0
   12c2c:	3401      	adds	r4, #1
   12c2e:	9305      	str	r3, [sp, #20]
   12c30:	4619      	mov	r1, r3
   12c32:	f04f 0c0a 	mov.w	ip, #10
   12c36:	4620      	mov	r0, r4
   12c38:	f810 2b01 	ldrb.w	r2, [r0], #1
   12c3c:	3a30      	subs	r2, #48	; 0x30
   12c3e:	2a09      	cmp	r2, #9
   12c40:	d903      	bls.n	12c4a <_vfiprintf_r+0x1ee>
   12c42:	2b00      	cmp	r3, #0
   12c44:	d0c5      	beq.n	12bd2 <_vfiprintf_r+0x176>
   12c46:	9105      	str	r1, [sp, #20]
   12c48:	e7c3      	b.n	12bd2 <_vfiprintf_r+0x176>
   12c4a:	fb0c 2101 	mla	r1, ip, r1, r2
   12c4e:	4604      	mov	r4, r0
   12c50:	2301      	movs	r3, #1
   12c52:	e7f0      	b.n	12c36 <_vfiprintf_r+0x1da>
   12c54:	ab03      	add	r3, sp, #12
   12c56:	9300      	str	r3, [sp, #0]
   12c58:	462a      	mov	r2, r5
   12c5a:	4b16      	ldr	r3, [pc, #88]	; (12cb4 <_vfiprintf_r+0x258>)
   12c5c:	a904      	add	r1, sp, #16
   12c5e:	4630      	mov	r0, r6
   12c60:	f000 f82c 	bl	12cbc <_printf_float>
   12c64:	4607      	mov	r7, r0
   12c66:	1c78      	adds	r0, r7, #1
   12c68:	d1d6      	bne.n	12c18 <_vfiprintf_r+0x1bc>
   12c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12c6c:	07d9      	lsls	r1, r3, #31
   12c6e:	d405      	bmi.n	12c7c <_vfiprintf_r+0x220>
   12c70:	89ab      	ldrh	r3, [r5, #12]
   12c72:	059a      	lsls	r2, r3, #22
   12c74:	d402      	bmi.n	12c7c <_vfiprintf_r+0x220>
   12c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12c78:	f001 fdb1 	bl	147de <__retarget_lock_release_recursive>
   12c7c:	89ab      	ldrh	r3, [r5, #12]
   12c7e:	065b      	lsls	r3, r3, #25
   12c80:	f53f af12 	bmi.w	12aa8 <_vfiprintf_r+0x4c>
   12c84:	9809      	ldr	r0, [sp, #36]	; 0x24
   12c86:	e711      	b.n	12aac <_vfiprintf_r+0x50>
   12c88:	ab03      	add	r3, sp, #12
   12c8a:	9300      	str	r3, [sp, #0]
   12c8c:	462a      	mov	r2, r5
   12c8e:	4b09      	ldr	r3, [pc, #36]	; (12cb4 <_vfiprintf_r+0x258>)
   12c90:	a904      	add	r1, sp, #16
   12c92:	4630      	mov	r0, r6
   12c94:	f000 fa3c 	bl	13110 <_printf_i>
   12c98:	e7e4      	b.n	12c64 <_vfiprintf_r+0x208>
   12c9a:	bf00      	nop
   12c9c:	00034eec 	.word	0x00034eec
   12ca0:	00034f0c 	.word	0x00034f0c
   12ca4:	00034ecc 	.word	0x00034ecc
   12ca8:	00035075 	.word	0x00035075
   12cac:	0003507f 	.word	0x0003507f
   12cb0:	00012cbd 	.word	0x00012cbd
   12cb4:	00018933 	.word	0x00018933
   12cb8:	0003507b 	.word	0x0003507b

00012cbc <_printf_float>:
   12cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cc0:	b091      	sub	sp, #68	; 0x44
   12cc2:	460c      	mov	r4, r1
   12cc4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   12cc8:	4616      	mov	r6, r2
   12cca:	461f      	mov	r7, r3
   12ccc:	4605      	mov	r5, r0
   12cce:	f000 fe75 	bl	139bc <_localeconv_r>
   12cd2:	6803      	ldr	r3, [r0, #0]
   12cd4:	9309      	str	r3, [sp, #36]	; 0x24
   12cd6:	4618      	mov	r0, r3
   12cd8:	f7ee fc1c 	bl	1514 <strlen>
   12cdc:	2300      	movs	r3, #0
   12cde:	930e      	str	r3, [sp, #56]	; 0x38
   12ce0:	f8d8 3000 	ldr.w	r3, [r8]
   12ce4:	900a      	str	r0, [sp, #40]	; 0x28
   12ce6:	3307      	adds	r3, #7
   12ce8:	f023 0307 	bic.w	r3, r3, #7
   12cec:	f103 0208 	add.w	r2, r3, #8
   12cf0:	f894 9018 	ldrb.w	r9, [r4, #24]
   12cf4:	f8d4 b000 	ldr.w	fp, [r4]
   12cf8:	f8c8 2000 	str.w	r2, [r8]
   12cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   12d00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   12d04:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   12d08:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   12d0c:	930b      	str	r3, [sp, #44]	; 0x2c
   12d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12d10:	4b9c      	ldr	r3, [pc, #624]	; (12f84 <_printf_float+0x2c8>)
   12d12:	f04f 32ff 	mov.w	r2, #4294967295
   12d16:	4640      	mov	r0, r8
   12d18:	f7ee fbdc 	bl	14d4 <__aeabi_dcmpun>
   12d1c:	bb70      	cbnz	r0, 12d7c <_printf_float+0xc0>
   12d1e:	4b99      	ldr	r3, [pc, #612]	; (12f84 <_printf_float+0x2c8>)
   12d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12d22:	f04f 32ff 	mov.w	r2, #4294967295
   12d26:	4640      	mov	r0, r8
   12d28:	f7ed fe72 	bl	a10 <__aeabi_dcmple>
   12d2c:	bb30      	cbnz	r0, 12d7c <_printf_float+0xc0>
   12d2e:	2200      	movs	r2, #0
   12d30:	2300      	movs	r3, #0
   12d32:	4640      	mov	r0, r8
   12d34:	4651      	mov	r1, sl
   12d36:	f7ed fe61 	bl	9fc <__aeabi_dcmplt>
   12d3a:	b110      	cbz	r0, 12d42 <_printf_float+0x86>
   12d3c:	232d      	movs	r3, #45	; 0x2d
   12d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   12d42:	4b91      	ldr	r3, [pc, #580]	; (12f88 <_printf_float+0x2cc>)
   12d44:	4891      	ldr	r0, [pc, #580]	; (12f8c <_printf_float+0x2d0>)
   12d46:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   12d4a:	bf94      	ite	ls
   12d4c:	4698      	movls	r8, r3
   12d4e:	4680      	movhi	r8, r0
   12d50:	2303      	movs	r3, #3
   12d52:	6123      	str	r3, [r4, #16]
   12d54:	f02b 0304 	bic.w	r3, fp, #4
   12d58:	6023      	str	r3, [r4, #0]
   12d5a:	f04f 0a00 	mov.w	sl, #0
   12d5e:	9700      	str	r7, [sp, #0]
   12d60:	4633      	mov	r3, r6
   12d62:	aa0f      	add	r2, sp, #60	; 0x3c
   12d64:	4621      	mov	r1, r4
   12d66:	4628      	mov	r0, r5
   12d68:	f005 fe93 	bl	18a92 <_printf_common>
   12d6c:	3001      	adds	r0, #1
   12d6e:	f040 808f 	bne.w	12e90 <_printf_float+0x1d4>
   12d72:	f04f 30ff 	mov.w	r0, #4294967295
   12d76:	b011      	add	sp, #68	; 0x44
   12d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d7c:	4642      	mov	r2, r8
   12d7e:	4653      	mov	r3, sl
   12d80:	4640      	mov	r0, r8
   12d82:	4651      	mov	r1, sl
   12d84:	f7ee fba6 	bl	14d4 <__aeabi_dcmpun>
   12d88:	b140      	cbz	r0, 12d9c <_printf_float+0xe0>
   12d8a:	f1ba 0f00 	cmp.w	sl, #0
   12d8e:	bfbc      	itt	lt
   12d90:	232d      	movlt	r3, #45	; 0x2d
   12d92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   12d96:	487e      	ldr	r0, [pc, #504]	; (12f90 <_printf_float+0x2d4>)
   12d98:	4b7e      	ldr	r3, [pc, #504]	; (12f94 <_printf_float+0x2d8>)
   12d9a:	e7d4      	b.n	12d46 <_printf_float+0x8a>
   12d9c:	6863      	ldr	r3, [r4, #4]
   12d9e:	1c5a      	adds	r2, r3, #1
   12da0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   12da4:	d142      	bne.n	12e2c <_printf_float+0x170>
   12da6:	2306      	movs	r3, #6
   12da8:	6063      	str	r3, [r4, #4]
   12daa:	2200      	movs	r2, #0
   12dac:	9206      	str	r2, [sp, #24]
   12dae:	aa0e      	add	r2, sp, #56	; 0x38
   12db0:	e9cd 9204 	strd	r9, r2, [sp, #16]
   12db4:	aa0d      	add	r2, sp, #52	; 0x34
   12db6:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   12dba:	9203      	str	r2, [sp, #12]
   12dbc:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   12dc0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   12dc4:	6023      	str	r3, [r4, #0]
   12dc6:	6863      	ldr	r3, [r4, #4]
   12dc8:	9300      	str	r3, [sp, #0]
   12dca:	4642      	mov	r2, r8
   12dcc:	4653      	mov	r3, sl
   12dce:	4628      	mov	r0, r5
   12dd0:	910b      	str	r1, [sp, #44]	; 0x2c
   12dd2:	f005 fdc0 	bl	18956 <__cvt>
   12dd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12dd8:	2947      	cmp	r1, #71	; 0x47
   12dda:	4680      	mov	r8, r0
   12ddc:	990d      	ldr	r1, [sp, #52]	; 0x34
   12dde:	d108      	bne.n	12df2 <_printf_float+0x136>
   12de0:	1cc8      	adds	r0, r1, #3
   12de2:	db02      	blt.n	12dea <_printf_float+0x12e>
   12de4:	6863      	ldr	r3, [r4, #4]
   12de6:	4299      	cmp	r1, r3
   12de8:	dd40      	ble.n	12e6c <_printf_float+0x1b0>
   12dea:	f1a9 0902 	sub.w	r9, r9, #2
   12dee:	fa5f f989 	uxtb.w	r9, r9
   12df2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   12df6:	d81f      	bhi.n	12e38 <_printf_float+0x17c>
   12df8:	3901      	subs	r1, #1
   12dfa:	464a      	mov	r2, r9
   12dfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   12e00:	910d      	str	r1, [sp, #52]	; 0x34
   12e02:	f005 fe08 	bl	18a16 <__exponent>
   12e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12e08:	1813      	adds	r3, r2, r0
   12e0a:	2a01      	cmp	r2, #1
   12e0c:	4682      	mov	sl, r0
   12e0e:	6123      	str	r3, [r4, #16]
   12e10:	dc02      	bgt.n	12e18 <_printf_float+0x15c>
   12e12:	6822      	ldr	r2, [r4, #0]
   12e14:	07d2      	lsls	r2, r2, #31
   12e16:	d501      	bpl.n	12e1c <_printf_float+0x160>
   12e18:	3301      	adds	r3, #1
   12e1a:	6123      	str	r3, [r4, #16]
   12e1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   12e20:	2b00      	cmp	r3, #0
   12e22:	d09c      	beq.n	12d5e <_printf_float+0xa2>
   12e24:	232d      	movs	r3, #45	; 0x2d
   12e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   12e2a:	e798      	b.n	12d5e <_printf_float+0xa2>
   12e2c:	2947      	cmp	r1, #71	; 0x47
   12e2e:	d1bc      	bne.n	12daa <_printf_float+0xee>
   12e30:	2b00      	cmp	r3, #0
   12e32:	d1ba      	bne.n	12daa <_printf_float+0xee>
   12e34:	2301      	movs	r3, #1
   12e36:	e7b7      	b.n	12da8 <_printf_float+0xec>
   12e38:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   12e3c:	d118      	bne.n	12e70 <_printf_float+0x1b4>
   12e3e:	2900      	cmp	r1, #0
   12e40:	6863      	ldr	r3, [r4, #4]
   12e42:	dd0b      	ble.n	12e5c <_printf_float+0x1a0>
   12e44:	6121      	str	r1, [r4, #16]
   12e46:	b913      	cbnz	r3, 12e4e <_printf_float+0x192>
   12e48:	6822      	ldr	r2, [r4, #0]
   12e4a:	07d0      	lsls	r0, r2, #31
   12e4c:	d502      	bpl.n	12e54 <_printf_float+0x198>
   12e4e:	3301      	adds	r3, #1
   12e50:	440b      	add	r3, r1
   12e52:	6123      	str	r3, [r4, #16]
   12e54:	65a1      	str	r1, [r4, #88]	; 0x58
   12e56:	f04f 0a00 	mov.w	sl, #0
   12e5a:	e7df      	b.n	12e1c <_printf_float+0x160>
   12e5c:	b913      	cbnz	r3, 12e64 <_printf_float+0x1a8>
   12e5e:	6822      	ldr	r2, [r4, #0]
   12e60:	07d2      	lsls	r2, r2, #31
   12e62:	d501      	bpl.n	12e68 <_printf_float+0x1ac>
   12e64:	3302      	adds	r3, #2
   12e66:	e7f4      	b.n	12e52 <_printf_float+0x196>
   12e68:	2301      	movs	r3, #1
   12e6a:	e7f2      	b.n	12e52 <_printf_float+0x196>
   12e6c:	f04f 0967 	mov.w	r9, #103	; 0x67
   12e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12e72:	4299      	cmp	r1, r3
   12e74:	db05      	blt.n	12e82 <_printf_float+0x1c6>
   12e76:	6823      	ldr	r3, [r4, #0]
   12e78:	6121      	str	r1, [r4, #16]
   12e7a:	07d8      	lsls	r0, r3, #31
   12e7c:	d5ea      	bpl.n	12e54 <_printf_float+0x198>
   12e7e:	1c4b      	adds	r3, r1, #1
   12e80:	e7e7      	b.n	12e52 <_printf_float+0x196>
   12e82:	2900      	cmp	r1, #0
   12e84:	bfd4      	ite	le
   12e86:	f1c1 0202 	rsble	r2, r1, #2
   12e8a:	2201      	movgt	r2, #1
   12e8c:	4413      	add	r3, r2
   12e8e:	e7e0      	b.n	12e52 <_printf_float+0x196>
   12e90:	6823      	ldr	r3, [r4, #0]
   12e92:	055a      	lsls	r2, r3, #21
   12e94:	d407      	bmi.n	12ea6 <_printf_float+0x1ea>
   12e96:	6923      	ldr	r3, [r4, #16]
   12e98:	4642      	mov	r2, r8
   12e9a:	4631      	mov	r1, r6
   12e9c:	4628      	mov	r0, r5
   12e9e:	47b8      	blx	r7
   12ea0:	3001      	adds	r0, #1
   12ea2:	d12b      	bne.n	12efc <_printf_float+0x240>
   12ea4:	e765      	b.n	12d72 <_printf_float+0xb6>
   12ea6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   12eaa:	f240 80dc 	bls.w	13066 <_printf_float+0x3aa>
   12eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   12eb2:	2200      	movs	r2, #0
   12eb4:	2300      	movs	r3, #0
   12eb6:	f7ed fd97 	bl	9e8 <__aeabi_dcmpeq>
   12eba:	2800      	cmp	r0, #0
   12ebc:	d033      	beq.n	12f26 <_printf_float+0x26a>
   12ebe:	4a36      	ldr	r2, [pc, #216]	; (12f98 <_printf_float+0x2dc>)
   12ec0:	2301      	movs	r3, #1
   12ec2:	4631      	mov	r1, r6
   12ec4:	4628      	mov	r0, r5
   12ec6:	47b8      	blx	r7
   12ec8:	3001      	adds	r0, #1
   12eca:	f43f af52 	beq.w	12d72 <_printf_float+0xb6>
   12ece:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   12ed2:	429a      	cmp	r2, r3
   12ed4:	db02      	blt.n	12edc <_printf_float+0x220>
   12ed6:	6823      	ldr	r3, [r4, #0]
   12ed8:	07d8      	lsls	r0, r3, #31
   12eda:	d50f      	bpl.n	12efc <_printf_float+0x240>
   12edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   12ee0:	4631      	mov	r1, r6
   12ee2:	4628      	mov	r0, r5
   12ee4:	47b8      	blx	r7
   12ee6:	3001      	adds	r0, #1
   12ee8:	f43f af43 	beq.w	12d72 <_printf_float+0xb6>
   12eec:	f04f 0800 	mov.w	r8, #0
   12ef0:	f104 091a 	add.w	r9, r4, #26
   12ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12ef6:	3b01      	subs	r3, #1
   12ef8:	4543      	cmp	r3, r8
   12efa:	dc09      	bgt.n	12f10 <_printf_float+0x254>
   12efc:	6823      	ldr	r3, [r4, #0]
   12efe:	079b      	lsls	r3, r3, #30
   12f00:	f100 8101 	bmi.w	13106 <_printf_float+0x44a>
   12f04:	68e0      	ldr	r0, [r4, #12]
   12f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12f08:	4298      	cmp	r0, r3
   12f0a:	bfb8      	it	lt
   12f0c:	4618      	movlt	r0, r3
   12f0e:	e732      	b.n	12d76 <_printf_float+0xba>
   12f10:	2301      	movs	r3, #1
   12f12:	464a      	mov	r2, r9
   12f14:	4631      	mov	r1, r6
   12f16:	4628      	mov	r0, r5
   12f18:	47b8      	blx	r7
   12f1a:	3001      	adds	r0, #1
   12f1c:	f43f af29 	beq.w	12d72 <_printf_float+0xb6>
   12f20:	f108 0801 	add.w	r8, r8, #1
   12f24:	e7e6      	b.n	12ef4 <_printf_float+0x238>
   12f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12f28:	2b00      	cmp	r3, #0
   12f2a:	dc37      	bgt.n	12f9c <_printf_float+0x2e0>
   12f2c:	4a1a      	ldr	r2, [pc, #104]	; (12f98 <_printf_float+0x2dc>)
   12f2e:	2301      	movs	r3, #1
   12f30:	4631      	mov	r1, r6
   12f32:	4628      	mov	r0, r5
   12f34:	47b8      	blx	r7
   12f36:	3001      	adds	r0, #1
   12f38:	f43f af1b 	beq.w	12d72 <_printf_float+0xb6>
   12f3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   12f40:	4313      	orrs	r3, r2
   12f42:	d102      	bne.n	12f4a <_printf_float+0x28e>
   12f44:	6823      	ldr	r3, [r4, #0]
   12f46:	07d9      	lsls	r1, r3, #31
   12f48:	d5d8      	bpl.n	12efc <_printf_float+0x240>
   12f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   12f4e:	4631      	mov	r1, r6
   12f50:	4628      	mov	r0, r5
   12f52:	47b8      	blx	r7
   12f54:	3001      	adds	r0, #1
   12f56:	f43f af0c 	beq.w	12d72 <_printf_float+0xb6>
   12f5a:	f04f 0900 	mov.w	r9, #0
   12f5e:	f104 0a1a 	add.w	sl, r4, #26
   12f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12f64:	425b      	negs	r3, r3
   12f66:	454b      	cmp	r3, r9
   12f68:	dc01      	bgt.n	12f6e <_printf_float+0x2b2>
   12f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12f6c:	e794      	b.n	12e98 <_printf_float+0x1dc>
   12f6e:	2301      	movs	r3, #1
   12f70:	4652      	mov	r2, sl
   12f72:	4631      	mov	r1, r6
   12f74:	4628      	mov	r0, r5
   12f76:	47b8      	blx	r7
   12f78:	3001      	adds	r0, #1
   12f7a:	f43f aefa 	beq.w	12d72 <_printf_float+0xb6>
   12f7e:	f109 0901 	add.w	r9, r9, #1
   12f82:	e7ee      	b.n	12f62 <_printf_float+0x2a6>
   12f84:	7fefffff 	.word	0x7fefffff
   12f88:	00035086 	.word	0x00035086
   12f8c:	0003508a 	.word	0x0003508a
   12f90:	00035092 	.word	0x00035092
   12f94:	0003508e 	.word	0x0003508e
   12f98:	00035096 	.word	0x00035096
   12f9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12f9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   12fa0:	429a      	cmp	r2, r3
   12fa2:	bfa8      	it	ge
   12fa4:	461a      	movge	r2, r3
   12fa6:	2a00      	cmp	r2, #0
   12fa8:	4691      	mov	r9, r2
   12faa:	dc37      	bgt.n	1301c <_printf_float+0x360>
   12fac:	f04f 0b00 	mov.w	fp, #0
   12fb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   12fb4:	f104 021a 	add.w	r2, r4, #26
   12fb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   12fbc:	ebaa 0309 	sub.w	r3, sl, r9
   12fc0:	455b      	cmp	r3, fp
   12fc2:	dc33      	bgt.n	1302c <_printf_float+0x370>
   12fc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   12fc8:	429a      	cmp	r2, r3
   12fca:	db3b      	blt.n	13044 <_printf_float+0x388>
   12fcc:	6823      	ldr	r3, [r4, #0]
   12fce:	07da      	lsls	r2, r3, #31
   12fd0:	d438      	bmi.n	13044 <_printf_float+0x388>
   12fd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12fd4:	990d      	ldr	r1, [sp, #52]	; 0x34
   12fd6:	eba2 030a 	sub.w	r3, r2, sl
   12fda:	eba2 0901 	sub.w	r9, r2, r1
   12fde:	4599      	cmp	r9, r3
   12fe0:	bfa8      	it	ge
   12fe2:	4699      	movge	r9, r3
   12fe4:	f1b9 0f00 	cmp.w	r9, #0
   12fe8:	dc34      	bgt.n	13054 <_printf_float+0x398>
   12fea:	f04f 0800 	mov.w	r8, #0
   12fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   12ff2:	f104 0a1a 	add.w	sl, r4, #26
   12ff6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   12ffa:	1a9b      	subs	r3, r3, r2
   12ffc:	eba3 0309 	sub.w	r3, r3, r9
   13000:	4543      	cmp	r3, r8
   13002:	f77f af7b 	ble.w	12efc <_printf_float+0x240>
   13006:	2301      	movs	r3, #1
   13008:	4652      	mov	r2, sl
   1300a:	4631      	mov	r1, r6
   1300c:	4628      	mov	r0, r5
   1300e:	47b8      	blx	r7
   13010:	3001      	adds	r0, #1
   13012:	f43f aeae 	beq.w	12d72 <_printf_float+0xb6>
   13016:	f108 0801 	add.w	r8, r8, #1
   1301a:	e7ec      	b.n	12ff6 <_printf_float+0x33a>
   1301c:	4613      	mov	r3, r2
   1301e:	4631      	mov	r1, r6
   13020:	4642      	mov	r2, r8
   13022:	4628      	mov	r0, r5
   13024:	47b8      	blx	r7
   13026:	3001      	adds	r0, #1
   13028:	d1c0      	bne.n	12fac <_printf_float+0x2f0>
   1302a:	e6a2      	b.n	12d72 <_printf_float+0xb6>
   1302c:	2301      	movs	r3, #1
   1302e:	4631      	mov	r1, r6
   13030:	4628      	mov	r0, r5
   13032:	920b      	str	r2, [sp, #44]	; 0x2c
   13034:	47b8      	blx	r7
   13036:	3001      	adds	r0, #1
   13038:	f43f ae9b 	beq.w	12d72 <_printf_float+0xb6>
   1303c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1303e:	f10b 0b01 	add.w	fp, fp, #1
   13042:	e7b9      	b.n	12fb8 <_printf_float+0x2fc>
   13044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   13048:	4631      	mov	r1, r6
   1304a:	4628      	mov	r0, r5
   1304c:	47b8      	blx	r7
   1304e:	3001      	adds	r0, #1
   13050:	d1bf      	bne.n	12fd2 <_printf_float+0x316>
   13052:	e68e      	b.n	12d72 <_printf_float+0xb6>
   13054:	464b      	mov	r3, r9
   13056:	eb08 020a 	add.w	r2, r8, sl
   1305a:	4631      	mov	r1, r6
   1305c:	4628      	mov	r0, r5
   1305e:	47b8      	blx	r7
   13060:	3001      	adds	r0, #1
   13062:	d1c2      	bne.n	12fea <_printf_float+0x32e>
   13064:	e685      	b.n	12d72 <_printf_float+0xb6>
   13066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13068:	2a01      	cmp	r2, #1
   1306a:	dc01      	bgt.n	13070 <_printf_float+0x3b4>
   1306c:	07db      	lsls	r3, r3, #31
   1306e:	d537      	bpl.n	130e0 <_printf_float+0x424>
   13070:	2301      	movs	r3, #1
   13072:	4642      	mov	r2, r8
   13074:	4631      	mov	r1, r6
   13076:	4628      	mov	r0, r5
   13078:	47b8      	blx	r7
   1307a:	3001      	adds	r0, #1
   1307c:	f43f ae79 	beq.w	12d72 <_printf_float+0xb6>
   13080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   13084:	4631      	mov	r1, r6
   13086:	4628      	mov	r0, r5
   13088:	47b8      	blx	r7
   1308a:	3001      	adds	r0, #1
   1308c:	f43f ae71 	beq.w	12d72 <_printf_float+0xb6>
   13090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   13094:	2200      	movs	r2, #0
   13096:	2300      	movs	r3, #0
   13098:	f7ed fca6 	bl	9e8 <__aeabi_dcmpeq>
   1309c:	b9d8      	cbnz	r0, 130d6 <_printf_float+0x41a>
   1309e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   130a0:	f108 0201 	add.w	r2, r8, #1
   130a4:	3b01      	subs	r3, #1
   130a6:	4631      	mov	r1, r6
   130a8:	4628      	mov	r0, r5
   130aa:	47b8      	blx	r7
   130ac:	3001      	adds	r0, #1
   130ae:	d10e      	bne.n	130ce <_printf_float+0x412>
   130b0:	e65f      	b.n	12d72 <_printf_float+0xb6>
   130b2:	2301      	movs	r3, #1
   130b4:	464a      	mov	r2, r9
   130b6:	4631      	mov	r1, r6
   130b8:	4628      	mov	r0, r5
   130ba:	47b8      	blx	r7
   130bc:	3001      	adds	r0, #1
   130be:	f43f ae58 	beq.w	12d72 <_printf_float+0xb6>
   130c2:	f108 0801 	add.w	r8, r8, #1
   130c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   130c8:	3b01      	subs	r3, #1
   130ca:	4543      	cmp	r3, r8
   130cc:	dcf1      	bgt.n	130b2 <_printf_float+0x3f6>
   130ce:	4653      	mov	r3, sl
   130d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   130d4:	e6e1      	b.n	12e9a <_printf_float+0x1de>
   130d6:	f04f 0800 	mov.w	r8, #0
   130da:	f104 091a 	add.w	r9, r4, #26
   130de:	e7f2      	b.n	130c6 <_printf_float+0x40a>
   130e0:	2301      	movs	r3, #1
   130e2:	4642      	mov	r2, r8
   130e4:	e7df      	b.n	130a6 <_printf_float+0x3ea>
   130e6:	2301      	movs	r3, #1
   130e8:	464a      	mov	r2, r9
   130ea:	4631      	mov	r1, r6
   130ec:	4628      	mov	r0, r5
   130ee:	47b8      	blx	r7
   130f0:	3001      	adds	r0, #1
   130f2:	f43f ae3e 	beq.w	12d72 <_printf_float+0xb6>
   130f6:	f108 0801 	add.w	r8, r8, #1
   130fa:	68e3      	ldr	r3, [r4, #12]
   130fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   130fe:	1a5b      	subs	r3, r3, r1
   13100:	4543      	cmp	r3, r8
   13102:	dcf0      	bgt.n	130e6 <_printf_float+0x42a>
   13104:	e6fe      	b.n	12f04 <_printf_float+0x248>
   13106:	f04f 0800 	mov.w	r8, #0
   1310a:	f104 0919 	add.w	r9, r4, #25
   1310e:	e7f4      	b.n	130fa <_printf_float+0x43e>

00013110 <_printf_i>:
   13110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13114:	460c      	mov	r4, r1
   13116:	4691      	mov	r9, r2
   13118:	7e27      	ldrb	r7, [r4, #24]
   1311a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1311c:	2f78      	cmp	r7, #120	; 0x78
   1311e:	4680      	mov	r8, r0
   13120:	469a      	mov	sl, r3
   13122:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13126:	d807      	bhi.n	13138 <_printf_i+0x28>
   13128:	2f62      	cmp	r7, #98	; 0x62
   1312a:	d80a      	bhi.n	13142 <_printf_i+0x32>
   1312c:	2f00      	cmp	r7, #0
   1312e:	f000 80d8 	beq.w	132e2 <_printf_i+0x1d2>
   13132:	2f58      	cmp	r7, #88	; 0x58
   13134:	f000 80a3 	beq.w	1327e <_printf_i+0x16e>
   13138:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1313c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   13140:	e03a      	b.n	131b8 <_printf_i+0xa8>
   13142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   13146:	2b15      	cmp	r3, #21
   13148:	d8f6      	bhi.n	13138 <_printf_i+0x28>
   1314a:	a001      	add	r0, pc, #4	; (adr r0, 13150 <_printf_i+0x40>)
   1314c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   13150:	000131a9 	.word	0x000131a9
   13154:	000131bd 	.word	0x000131bd
   13158:	00013139 	.word	0x00013139
   1315c:	00013139 	.word	0x00013139
   13160:	00013139 	.word	0x00013139
   13164:	00013139 	.word	0x00013139
   13168:	000131bd 	.word	0x000131bd
   1316c:	00013139 	.word	0x00013139
   13170:	00013139 	.word	0x00013139
   13174:	00013139 	.word	0x00013139
   13178:	00013139 	.word	0x00013139
   1317c:	000132c9 	.word	0x000132c9
   13180:	000131ed 	.word	0x000131ed
   13184:	000132ab 	.word	0x000132ab
   13188:	00013139 	.word	0x00013139
   1318c:	00013139 	.word	0x00013139
   13190:	000132eb 	.word	0x000132eb
   13194:	00013139 	.word	0x00013139
   13198:	000131ed 	.word	0x000131ed
   1319c:	00013139 	.word	0x00013139
   131a0:	00013139 	.word	0x00013139
   131a4:	000132b3 	.word	0x000132b3
   131a8:	680b      	ldr	r3, [r1, #0]
   131aa:	1d1a      	adds	r2, r3, #4
   131ac:	681b      	ldr	r3, [r3, #0]
   131ae:	600a      	str	r2, [r1, #0]
   131b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   131b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   131b8:	2301      	movs	r3, #1
   131ba:	e0a3      	b.n	13304 <_printf_i+0x1f4>
   131bc:	6825      	ldr	r5, [r4, #0]
   131be:	6808      	ldr	r0, [r1, #0]
   131c0:	062e      	lsls	r6, r5, #24
   131c2:	f100 0304 	add.w	r3, r0, #4
   131c6:	d50a      	bpl.n	131de <_printf_i+0xce>
   131c8:	6805      	ldr	r5, [r0, #0]
   131ca:	600b      	str	r3, [r1, #0]
   131cc:	2d00      	cmp	r5, #0
   131ce:	da03      	bge.n	131d8 <_printf_i+0xc8>
   131d0:	232d      	movs	r3, #45	; 0x2d
   131d2:	426d      	negs	r5, r5
   131d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   131d8:	485e      	ldr	r0, [pc, #376]	; (13354 <_printf_i+0x244>)
   131da:	230a      	movs	r3, #10
   131dc:	e019      	b.n	13212 <_printf_i+0x102>
   131de:	f015 0f40 	tst.w	r5, #64	; 0x40
   131e2:	6805      	ldr	r5, [r0, #0]
   131e4:	600b      	str	r3, [r1, #0]
   131e6:	bf18      	it	ne
   131e8:	b22d      	sxthne	r5, r5
   131ea:	e7ef      	b.n	131cc <_printf_i+0xbc>
   131ec:	680b      	ldr	r3, [r1, #0]
   131ee:	6825      	ldr	r5, [r4, #0]
   131f0:	1d18      	adds	r0, r3, #4
   131f2:	6008      	str	r0, [r1, #0]
   131f4:	0628      	lsls	r0, r5, #24
   131f6:	d501      	bpl.n	131fc <_printf_i+0xec>
   131f8:	681d      	ldr	r5, [r3, #0]
   131fa:	e002      	b.n	13202 <_printf_i+0xf2>
   131fc:	0669      	lsls	r1, r5, #25
   131fe:	d5fb      	bpl.n	131f8 <_printf_i+0xe8>
   13200:	881d      	ldrh	r5, [r3, #0]
   13202:	4854      	ldr	r0, [pc, #336]	; (13354 <_printf_i+0x244>)
   13204:	2f6f      	cmp	r7, #111	; 0x6f
   13206:	bf0c      	ite	eq
   13208:	2308      	moveq	r3, #8
   1320a:	230a      	movne	r3, #10
   1320c:	2100      	movs	r1, #0
   1320e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   13212:	6866      	ldr	r6, [r4, #4]
   13214:	60a6      	str	r6, [r4, #8]
   13216:	2e00      	cmp	r6, #0
   13218:	bfa2      	ittt	ge
   1321a:	6821      	ldrge	r1, [r4, #0]
   1321c:	f021 0104 	bicge.w	r1, r1, #4
   13220:	6021      	strge	r1, [r4, #0]
   13222:	b90d      	cbnz	r5, 13228 <_printf_i+0x118>
   13224:	2e00      	cmp	r6, #0
   13226:	d04d      	beq.n	132c4 <_printf_i+0x1b4>
   13228:	4616      	mov	r6, r2
   1322a:	fbb5 f1f3 	udiv	r1, r5, r3
   1322e:	fb03 5711 	mls	r7, r3, r1, r5
   13232:	5dc7      	ldrb	r7, [r0, r7]
   13234:	f806 7d01 	strb.w	r7, [r6, #-1]!
   13238:	462f      	mov	r7, r5
   1323a:	42bb      	cmp	r3, r7
   1323c:	460d      	mov	r5, r1
   1323e:	d9f4      	bls.n	1322a <_printf_i+0x11a>
   13240:	2b08      	cmp	r3, #8
   13242:	d10b      	bne.n	1325c <_printf_i+0x14c>
   13244:	6823      	ldr	r3, [r4, #0]
   13246:	07df      	lsls	r7, r3, #31
   13248:	d508      	bpl.n	1325c <_printf_i+0x14c>
   1324a:	6923      	ldr	r3, [r4, #16]
   1324c:	6861      	ldr	r1, [r4, #4]
   1324e:	4299      	cmp	r1, r3
   13250:	bfde      	ittt	le
   13252:	2330      	movle	r3, #48	; 0x30
   13254:	f806 3c01 	strble.w	r3, [r6, #-1]
   13258:	f106 36ff 	addle.w	r6, r6, #4294967295
   1325c:	1b92      	subs	r2, r2, r6
   1325e:	6122      	str	r2, [r4, #16]
   13260:	f8cd a000 	str.w	sl, [sp]
   13264:	464b      	mov	r3, r9
   13266:	aa03      	add	r2, sp, #12
   13268:	4621      	mov	r1, r4
   1326a:	4640      	mov	r0, r8
   1326c:	f005 fc11 	bl	18a92 <_printf_common>
   13270:	3001      	adds	r0, #1
   13272:	d14c      	bne.n	1330e <_printf_i+0x1fe>
   13274:	f04f 30ff 	mov.w	r0, #4294967295
   13278:	b004      	add	sp, #16
   1327a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1327e:	4835      	ldr	r0, [pc, #212]	; (13354 <_printf_i+0x244>)
   13280:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   13284:	6823      	ldr	r3, [r4, #0]
   13286:	680e      	ldr	r6, [r1, #0]
   13288:	061f      	lsls	r7, r3, #24
   1328a:	f856 5b04 	ldr.w	r5, [r6], #4
   1328e:	600e      	str	r6, [r1, #0]
   13290:	d514      	bpl.n	132bc <_printf_i+0x1ac>
   13292:	07d9      	lsls	r1, r3, #31
   13294:	bf44      	itt	mi
   13296:	f043 0320 	orrmi.w	r3, r3, #32
   1329a:	6023      	strmi	r3, [r4, #0]
   1329c:	b91d      	cbnz	r5, 132a6 <_printf_i+0x196>
   1329e:	6823      	ldr	r3, [r4, #0]
   132a0:	f023 0320 	bic.w	r3, r3, #32
   132a4:	6023      	str	r3, [r4, #0]
   132a6:	2310      	movs	r3, #16
   132a8:	e7b0      	b.n	1320c <_printf_i+0xfc>
   132aa:	6823      	ldr	r3, [r4, #0]
   132ac:	f043 0320 	orr.w	r3, r3, #32
   132b0:	6023      	str	r3, [r4, #0]
   132b2:	2378      	movs	r3, #120	; 0x78
   132b4:	4828      	ldr	r0, [pc, #160]	; (13358 <_printf_i+0x248>)
   132b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   132ba:	e7e3      	b.n	13284 <_printf_i+0x174>
   132bc:	065e      	lsls	r6, r3, #25
   132be:	bf48      	it	mi
   132c0:	b2ad      	uxthmi	r5, r5
   132c2:	e7e6      	b.n	13292 <_printf_i+0x182>
   132c4:	4616      	mov	r6, r2
   132c6:	e7bb      	b.n	13240 <_printf_i+0x130>
   132c8:	680b      	ldr	r3, [r1, #0]
   132ca:	6826      	ldr	r6, [r4, #0]
   132cc:	6960      	ldr	r0, [r4, #20]
   132ce:	1d1d      	adds	r5, r3, #4
   132d0:	600d      	str	r5, [r1, #0]
   132d2:	0635      	lsls	r5, r6, #24
   132d4:	681b      	ldr	r3, [r3, #0]
   132d6:	d501      	bpl.n	132dc <_printf_i+0x1cc>
   132d8:	6018      	str	r0, [r3, #0]
   132da:	e002      	b.n	132e2 <_printf_i+0x1d2>
   132dc:	0671      	lsls	r1, r6, #25
   132de:	d5fb      	bpl.n	132d8 <_printf_i+0x1c8>
   132e0:	8018      	strh	r0, [r3, #0]
   132e2:	2300      	movs	r3, #0
   132e4:	6123      	str	r3, [r4, #16]
   132e6:	4616      	mov	r6, r2
   132e8:	e7ba      	b.n	13260 <_printf_i+0x150>
   132ea:	680b      	ldr	r3, [r1, #0]
   132ec:	1d1a      	adds	r2, r3, #4
   132ee:	600a      	str	r2, [r1, #0]
   132f0:	681e      	ldr	r6, [r3, #0]
   132f2:	6862      	ldr	r2, [r4, #4]
   132f4:	2100      	movs	r1, #0
   132f6:	4630      	mov	r0, r6
   132f8:	f7ec ff02 	bl	100 <memchr>
   132fc:	b108      	cbz	r0, 13302 <_printf_i+0x1f2>
   132fe:	1b80      	subs	r0, r0, r6
   13300:	6060      	str	r0, [r4, #4]
   13302:	6863      	ldr	r3, [r4, #4]
   13304:	6123      	str	r3, [r4, #16]
   13306:	2300      	movs	r3, #0
   13308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1330c:	e7a8      	b.n	13260 <_printf_i+0x150>
   1330e:	6923      	ldr	r3, [r4, #16]
   13310:	4632      	mov	r2, r6
   13312:	4649      	mov	r1, r9
   13314:	4640      	mov	r0, r8
   13316:	47d0      	blx	sl
   13318:	3001      	adds	r0, #1
   1331a:	d0ab      	beq.n	13274 <_printf_i+0x164>
   1331c:	6823      	ldr	r3, [r4, #0]
   1331e:	079b      	lsls	r3, r3, #30
   13320:	d413      	bmi.n	1334a <_printf_i+0x23a>
   13322:	68e0      	ldr	r0, [r4, #12]
   13324:	9b03      	ldr	r3, [sp, #12]
   13326:	4298      	cmp	r0, r3
   13328:	bfb8      	it	lt
   1332a:	4618      	movlt	r0, r3
   1332c:	e7a4      	b.n	13278 <_printf_i+0x168>
   1332e:	2301      	movs	r3, #1
   13330:	4632      	mov	r2, r6
   13332:	4649      	mov	r1, r9
   13334:	4640      	mov	r0, r8
   13336:	47d0      	blx	sl
   13338:	3001      	adds	r0, #1
   1333a:	d09b      	beq.n	13274 <_printf_i+0x164>
   1333c:	3501      	adds	r5, #1
   1333e:	68e3      	ldr	r3, [r4, #12]
   13340:	9903      	ldr	r1, [sp, #12]
   13342:	1a5b      	subs	r3, r3, r1
   13344:	42ab      	cmp	r3, r5
   13346:	dcf2      	bgt.n	1332e <_printf_i+0x21e>
   13348:	e7eb      	b.n	13322 <_printf_i+0x212>
   1334a:	2500      	movs	r5, #0
   1334c:	f104 0619 	add.w	r6, r4, #25
   13350:	e7f5      	b.n	1333e <_printf_i+0x22e>
   13352:	bf00      	nop
   13354:	00035098 	.word	0x00035098
   13358:	000350a9 	.word	0x000350a9

0001335c <_sbrk_r>:
   1335c:	b538      	push	{r3, r4, r5, lr}
   1335e:	4d06      	ldr	r5, [pc, #24]	; (13378 <_sbrk_r+0x1c>)
   13360:	2300      	movs	r3, #0
   13362:	4604      	mov	r4, r0
   13364:	4608      	mov	r0, r1
   13366:	602b      	str	r3, [r5, #0]
   13368:	f7f1 fac8 	bl	48fc <_sbrk>
   1336c:	1c43      	adds	r3, r0, #1
   1336e:	d102      	bne.n	13376 <_sbrk_r+0x1a>
   13370:	682b      	ldr	r3, [r5, #0]
   13372:	b103      	cbz	r3, 13376 <_sbrk_r+0x1a>
   13374:	6023      	str	r3, [r4, #0]
   13376:	bd38      	pop	{r3, r4, r5, pc}
   13378:	2000f910 	.word	0x2000f910

0001337c <raise>:
   1337c:	4b02      	ldr	r3, [pc, #8]	; (13388 <raise+0xc>)
   1337e:	4601      	mov	r1, r0
   13380:	6818      	ldr	r0, [r3, #0]
   13382:	f005 bbf3 	b.w	18b6c <_raise_r>
   13386:	bf00      	nop
   13388:	200000f8 	.word	0x200000f8

0001338c <_kill_r>:
   1338c:	b538      	push	{r3, r4, r5, lr}
   1338e:	4d07      	ldr	r5, [pc, #28]	; (133ac <_kill_r+0x20>)
   13390:	2300      	movs	r3, #0
   13392:	4604      	mov	r4, r0
   13394:	4608      	mov	r0, r1
   13396:	4611      	mov	r1, r2
   13398:	602b      	str	r3, [r5, #0]
   1339a:	f001 fa06 	bl	147aa <_kill>
   1339e:	1c43      	adds	r3, r0, #1
   133a0:	d102      	bne.n	133a8 <_kill_r+0x1c>
   133a2:	682b      	ldr	r3, [r5, #0]
   133a4:	b103      	cbz	r3, 133a8 <_kill_r+0x1c>
   133a6:	6023      	str	r3, [r4, #0]
   133a8:	bd38      	pop	{r3, r4, r5, pc}
   133aa:	bf00      	nop
   133ac:	2000f910 	.word	0x2000f910

000133b0 <strtok>:
   133b0:	4b13      	ldr	r3, [pc, #76]	; (13400 <strtok+0x50>)
   133b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133b6:	681f      	ldr	r7, [r3, #0]
   133b8:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   133ba:	4605      	mov	r5, r0
   133bc:	460e      	mov	r6, r1
   133be:	b9b4      	cbnz	r4, 133ee <strtok+0x3e>
   133c0:	2050      	movs	r0, #80	; 0x50
   133c2:	f7ff fa93 	bl	128ec <malloc>
   133c6:	65b8      	str	r0, [r7, #88]	; 0x58
   133c8:	e9c0 4400 	strd	r4, r4, [r0]
   133cc:	e9c0 4402 	strd	r4, r4, [r0, #8]
   133d0:	e9c0 4404 	strd	r4, r4, [r0, #16]
   133d4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   133d8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   133dc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   133e0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   133e4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   133e8:	6184      	str	r4, [r0, #24]
   133ea:	7704      	strb	r4, [r0, #28]
   133ec:	6244      	str	r4, [r0, #36]	; 0x24
   133ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
   133f0:	4631      	mov	r1, r6
   133f2:	4628      	mov	r0, r5
   133f4:	2301      	movs	r3, #1
   133f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   133fa:	f005 bc13 	b.w	18c24 <__strtok_r>
   133fe:	bf00      	nop
   13400:	200000f8 	.word	0x200000f8

00013404 <_strtol_l.isra.0>:
   13404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13408:	4e3a      	ldr	r6, [pc, #232]	; (134f4 <_strtol_l.isra.0+0xf0>)
   1340a:	4686      	mov	lr, r0
   1340c:	468c      	mov	ip, r1
   1340e:	4660      	mov	r0, ip
   13410:	f81c 4b01 	ldrb.w	r4, [ip], #1
   13414:	5da5      	ldrb	r5, [r4, r6]
   13416:	f015 0508 	ands.w	r5, r5, #8
   1341a:	d1f8      	bne.n	1340e <_strtol_l.isra.0+0xa>
   1341c:	2c2d      	cmp	r4, #45	; 0x2d
   1341e:	d133      	bne.n	13488 <_strtol_l.isra.0+0x84>
   13420:	f89c 4000 	ldrb.w	r4, [ip]
   13424:	f04f 0801 	mov.w	r8, #1
   13428:	f100 0c02 	add.w	ip, r0, #2
   1342c:	2b00      	cmp	r3, #0
   1342e:	d05c      	beq.n	134ea <_strtol_l.isra.0+0xe6>
   13430:	2b10      	cmp	r3, #16
   13432:	d10c      	bne.n	1344e <_strtol_l.isra.0+0x4a>
   13434:	2c30      	cmp	r4, #48	; 0x30
   13436:	d10a      	bne.n	1344e <_strtol_l.isra.0+0x4a>
   13438:	f89c 0000 	ldrb.w	r0, [ip]
   1343c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   13440:	2858      	cmp	r0, #88	; 0x58
   13442:	d14d      	bne.n	134e0 <_strtol_l.isra.0+0xdc>
   13444:	f89c 4001 	ldrb.w	r4, [ip, #1]
   13448:	2310      	movs	r3, #16
   1344a:	f10c 0c02 	add.w	ip, ip, #2
   1344e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   13452:	3f01      	subs	r7, #1
   13454:	2600      	movs	r6, #0
   13456:	fbb7 f9f3 	udiv	r9, r7, r3
   1345a:	4630      	mov	r0, r6
   1345c:	fb03 7a19 	mls	sl, r3, r9, r7
   13460:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   13464:	2d09      	cmp	r5, #9
   13466:	d818      	bhi.n	1349a <_strtol_l.isra.0+0x96>
   13468:	462c      	mov	r4, r5
   1346a:	42a3      	cmp	r3, r4
   1346c:	dd24      	ble.n	134b8 <_strtol_l.isra.0+0xb4>
   1346e:	1c75      	adds	r5, r6, #1
   13470:	d007      	beq.n	13482 <_strtol_l.isra.0+0x7e>
   13472:	4581      	cmp	r9, r0
   13474:	d31d      	bcc.n	134b2 <_strtol_l.isra.0+0xae>
   13476:	d101      	bne.n	1347c <_strtol_l.isra.0+0x78>
   13478:	45a2      	cmp	sl, r4
   1347a:	db1a      	blt.n	134b2 <_strtol_l.isra.0+0xae>
   1347c:	fb00 4003 	mla	r0, r0, r3, r4
   13480:	2601      	movs	r6, #1
   13482:	f81c 4b01 	ldrb.w	r4, [ip], #1
   13486:	e7eb      	b.n	13460 <_strtol_l.isra.0+0x5c>
   13488:	2c2b      	cmp	r4, #43	; 0x2b
   1348a:	bf08      	it	eq
   1348c:	f89c 4000 	ldrbeq.w	r4, [ip]
   13490:	46a8      	mov	r8, r5
   13492:	bf08      	it	eq
   13494:	f100 0c02 	addeq.w	ip, r0, #2
   13498:	e7c8      	b.n	1342c <_strtol_l.isra.0+0x28>
   1349a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   1349e:	2d19      	cmp	r5, #25
   134a0:	d801      	bhi.n	134a6 <_strtol_l.isra.0+0xa2>
   134a2:	3c37      	subs	r4, #55	; 0x37
   134a4:	e7e1      	b.n	1346a <_strtol_l.isra.0+0x66>
   134a6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   134aa:	2d19      	cmp	r5, #25
   134ac:	d804      	bhi.n	134b8 <_strtol_l.isra.0+0xb4>
   134ae:	3c57      	subs	r4, #87	; 0x57
   134b0:	e7db      	b.n	1346a <_strtol_l.isra.0+0x66>
   134b2:	f04f 36ff 	mov.w	r6, #4294967295
   134b6:	e7e4      	b.n	13482 <_strtol_l.isra.0+0x7e>
   134b8:	1c73      	adds	r3, r6, #1
   134ba:	d106      	bne.n	134ca <_strtol_l.isra.0+0xc6>
   134bc:	2322      	movs	r3, #34	; 0x22
   134be:	f8ce 3000 	str.w	r3, [lr]
   134c2:	4638      	mov	r0, r7
   134c4:	b942      	cbnz	r2, 134d8 <_strtol_l.isra.0+0xd4>
   134c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   134ca:	f1b8 0f00 	cmp.w	r8, #0
   134ce:	d000      	beq.n	134d2 <_strtol_l.isra.0+0xce>
   134d0:	4240      	negs	r0, r0
   134d2:	2a00      	cmp	r2, #0
   134d4:	d0f7      	beq.n	134c6 <_strtol_l.isra.0+0xc2>
   134d6:	b10e      	cbz	r6, 134dc <_strtol_l.isra.0+0xd8>
   134d8:	f10c 31ff 	add.w	r1, ip, #4294967295
   134dc:	6011      	str	r1, [r2, #0]
   134de:	e7f2      	b.n	134c6 <_strtol_l.isra.0+0xc2>
   134e0:	2430      	movs	r4, #48	; 0x30
   134e2:	2b00      	cmp	r3, #0
   134e4:	d1b3      	bne.n	1344e <_strtol_l.isra.0+0x4a>
   134e6:	2308      	movs	r3, #8
   134e8:	e7b1      	b.n	1344e <_strtol_l.isra.0+0x4a>
   134ea:	2c30      	cmp	r4, #48	; 0x30
   134ec:	d0a4      	beq.n	13438 <_strtol_l.isra.0+0x34>
   134ee:	230a      	movs	r3, #10
   134f0:	e7ad      	b.n	1344e <_strtol_l.isra.0+0x4a>
   134f2:	bf00      	nop
   134f4:	00034f75 	.word	0x00034f75

000134f8 <strtol>:
   134f8:	4613      	mov	r3, r2
   134fa:	460a      	mov	r2, r1
   134fc:	4601      	mov	r1, r0
   134fe:	4802      	ldr	r0, [pc, #8]	; (13508 <strtol+0x10>)
   13500:	6800      	ldr	r0, [r0, #0]
   13502:	f7ff bf7f 	b.w	13404 <_strtol_l.isra.0>
   13506:	bf00      	nop
   13508:	200000f8 	.word	0x200000f8

0001350c <viprintf>:
   1350c:	4b09      	ldr	r3, [pc, #36]	; (13534 <viprintf+0x28>)
   1350e:	b570      	push	{r4, r5, r6, lr}
   13510:	681c      	ldr	r4, [r3, #0]
   13512:	4605      	mov	r5, r0
   13514:	460e      	mov	r6, r1
   13516:	b124      	cbz	r4, 13522 <viprintf+0x16>
   13518:	69a3      	ldr	r3, [r4, #24]
   1351a:	b913      	cbnz	r3, 13522 <viprintf+0x16>
   1351c:	4620      	mov	r0, r4
   1351e:	f000 f9cf 	bl	138c0 <__sinit>
   13522:	68a1      	ldr	r1, [r4, #8]
   13524:	4633      	mov	r3, r6
   13526:	462a      	mov	r2, r5
   13528:	4620      	mov	r0, r4
   1352a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1352e:	f7ff ba95 	b.w	12a5c <_vfiprintf_r>
   13532:	bf00      	nop
   13534:	200000f8 	.word	0x200000f8

00013538 <__swbuf_r>:
   13538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1353a:	460e      	mov	r6, r1
   1353c:	4614      	mov	r4, r2
   1353e:	4605      	mov	r5, r0
   13540:	b118      	cbz	r0, 1354a <__swbuf_r+0x12>
   13542:	6983      	ldr	r3, [r0, #24]
   13544:	b90b      	cbnz	r3, 1354a <__swbuf_r+0x12>
   13546:	f000 f9bb 	bl	138c0 <__sinit>
   1354a:	4b21      	ldr	r3, [pc, #132]	; (135d0 <__swbuf_r+0x98>)
   1354c:	429c      	cmp	r4, r3
   1354e:	d12b      	bne.n	135a8 <__swbuf_r+0x70>
   13550:	686c      	ldr	r4, [r5, #4]
   13552:	69a3      	ldr	r3, [r4, #24]
   13554:	60a3      	str	r3, [r4, #8]
   13556:	89a3      	ldrh	r3, [r4, #12]
   13558:	071a      	lsls	r2, r3, #28
   1355a:	d52f      	bpl.n	135bc <__swbuf_r+0x84>
   1355c:	6923      	ldr	r3, [r4, #16]
   1355e:	b36b      	cbz	r3, 135bc <__swbuf_r+0x84>
   13560:	6923      	ldr	r3, [r4, #16]
   13562:	6820      	ldr	r0, [r4, #0]
   13564:	1ac0      	subs	r0, r0, r3
   13566:	6963      	ldr	r3, [r4, #20]
   13568:	b2f6      	uxtb	r6, r6
   1356a:	4283      	cmp	r3, r0
   1356c:	4637      	mov	r7, r6
   1356e:	dc04      	bgt.n	1357a <__swbuf_r+0x42>
   13570:	4621      	mov	r1, r4
   13572:	4628      	mov	r0, r5
   13574:	f000 f926 	bl	137c4 <_fflush_r>
   13578:	bb30      	cbnz	r0, 135c8 <__swbuf_r+0x90>
   1357a:	68a3      	ldr	r3, [r4, #8]
   1357c:	3b01      	subs	r3, #1
   1357e:	60a3      	str	r3, [r4, #8]
   13580:	6823      	ldr	r3, [r4, #0]
   13582:	1c5a      	adds	r2, r3, #1
   13584:	6022      	str	r2, [r4, #0]
   13586:	701e      	strb	r6, [r3, #0]
   13588:	6963      	ldr	r3, [r4, #20]
   1358a:	3001      	adds	r0, #1
   1358c:	4283      	cmp	r3, r0
   1358e:	d004      	beq.n	1359a <__swbuf_r+0x62>
   13590:	89a3      	ldrh	r3, [r4, #12]
   13592:	07db      	lsls	r3, r3, #31
   13594:	d506      	bpl.n	135a4 <__swbuf_r+0x6c>
   13596:	2e0a      	cmp	r6, #10
   13598:	d104      	bne.n	135a4 <__swbuf_r+0x6c>
   1359a:	4621      	mov	r1, r4
   1359c:	4628      	mov	r0, r5
   1359e:	f000 f911 	bl	137c4 <_fflush_r>
   135a2:	b988      	cbnz	r0, 135c8 <__swbuf_r+0x90>
   135a4:	4638      	mov	r0, r7
   135a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   135a8:	4b0a      	ldr	r3, [pc, #40]	; (135d4 <__swbuf_r+0x9c>)
   135aa:	429c      	cmp	r4, r3
   135ac:	d101      	bne.n	135b2 <__swbuf_r+0x7a>
   135ae:	68ac      	ldr	r4, [r5, #8]
   135b0:	e7cf      	b.n	13552 <__swbuf_r+0x1a>
   135b2:	4b09      	ldr	r3, [pc, #36]	; (135d8 <__swbuf_r+0xa0>)
   135b4:	429c      	cmp	r4, r3
   135b6:	bf08      	it	eq
   135b8:	68ec      	ldreq	r4, [r5, #12]
   135ba:	e7ca      	b.n	13552 <__swbuf_r+0x1a>
   135bc:	4621      	mov	r1, r4
   135be:	4628      	mov	r0, r5
   135c0:	f000 f80c 	bl	135dc <__swsetup_r>
   135c4:	2800      	cmp	r0, #0
   135c6:	d0cb      	beq.n	13560 <__swbuf_r+0x28>
   135c8:	f04f 37ff 	mov.w	r7, #4294967295
   135cc:	e7ea      	b.n	135a4 <__swbuf_r+0x6c>
   135ce:	bf00      	nop
   135d0:	00034eec 	.word	0x00034eec
   135d4:	00034f0c 	.word	0x00034f0c
   135d8:	00034ecc 	.word	0x00034ecc

000135dc <__swsetup_r>:
   135dc:	4b32      	ldr	r3, [pc, #200]	; (136a8 <__swsetup_r+0xcc>)
   135de:	b570      	push	{r4, r5, r6, lr}
   135e0:	681d      	ldr	r5, [r3, #0]
   135e2:	4606      	mov	r6, r0
   135e4:	460c      	mov	r4, r1
   135e6:	b125      	cbz	r5, 135f2 <__swsetup_r+0x16>
   135e8:	69ab      	ldr	r3, [r5, #24]
   135ea:	b913      	cbnz	r3, 135f2 <__swsetup_r+0x16>
   135ec:	4628      	mov	r0, r5
   135ee:	f000 f967 	bl	138c0 <__sinit>
   135f2:	4b2e      	ldr	r3, [pc, #184]	; (136ac <__swsetup_r+0xd0>)
   135f4:	429c      	cmp	r4, r3
   135f6:	d10f      	bne.n	13618 <__swsetup_r+0x3c>
   135f8:	686c      	ldr	r4, [r5, #4]
   135fa:	89a3      	ldrh	r3, [r4, #12]
   135fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13600:	0719      	lsls	r1, r3, #28
   13602:	d42c      	bmi.n	1365e <__swsetup_r+0x82>
   13604:	06dd      	lsls	r5, r3, #27
   13606:	d411      	bmi.n	1362c <__swsetup_r+0x50>
   13608:	2309      	movs	r3, #9
   1360a:	6033      	str	r3, [r6, #0]
   1360c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   13610:	81a3      	strh	r3, [r4, #12]
   13612:	f04f 30ff 	mov.w	r0, #4294967295
   13616:	e03e      	b.n	13696 <__swsetup_r+0xba>
   13618:	4b25      	ldr	r3, [pc, #148]	; (136b0 <__swsetup_r+0xd4>)
   1361a:	429c      	cmp	r4, r3
   1361c:	d101      	bne.n	13622 <__swsetup_r+0x46>
   1361e:	68ac      	ldr	r4, [r5, #8]
   13620:	e7eb      	b.n	135fa <__swsetup_r+0x1e>
   13622:	4b24      	ldr	r3, [pc, #144]	; (136b4 <__swsetup_r+0xd8>)
   13624:	429c      	cmp	r4, r3
   13626:	bf08      	it	eq
   13628:	68ec      	ldreq	r4, [r5, #12]
   1362a:	e7e6      	b.n	135fa <__swsetup_r+0x1e>
   1362c:	0758      	lsls	r0, r3, #29
   1362e:	d512      	bpl.n	13656 <__swsetup_r+0x7a>
   13630:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13632:	b141      	cbz	r1, 13646 <__swsetup_r+0x6a>
   13634:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13638:	4299      	cmp	r1, r3
   1363a:	d002      	beq.n	13642 <__swsetup_r+0x66>
   1363c:	4630      	mov	r0, r6
   1363e:	f7ff f965 	bl	1290c <_free_r>
   13642:	2300      	movs	r3, #0
   13644:	6363      	str	r3, [r4, #52]	; 0x34
   13646:	89a3      	ldrh	r3, [r4, #12]
   13648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1364c:	81a3      	strh	r3, [r4, #12]
   1364e:	2300      	movs	r3, #0
   13650:	6063      	str	r3, [r4, #4]
   13652:	6923      	ldr	r3, [r4, #16]
   13654:	6023      	str	r3, [r4, #0]
   13656:	89a3      	ldrh	r3, [r4, #12]
   13658:	f043 0308 	orr.w	r3, r3, #8
   1365c:	81a3      	strh	r3, [r4, #12]
   1365e:	6923      	ldr	r3, [r4, #16]
   13660:	b94b      	cbnz	r3, 13676 <__swsetup_r+0x9a>
   13662:	89a3      	ldrh	r3, [r4, #12]
   13664:	f403 7320 	and.w	r3, r3, #640	; 0x280
   13668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1366c:	d003      	beq.n	13676 <__swsetup_r+0x9a>
   1366e:	4621      	mov	r1, r4
   13670:	4630      	mov	r0, r6
   13672:	f000 f9a7 	bl	139c4 <__smakebuf_r>
   13676:	89a0      	ldrh	r0, [r4, #12]
   13678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1367c:	f010 0301 	ands.w	r3, r0, #1
   13680:	d00a      	beq.n	13698 <__swsetup_r+0xbc>
   13682:	2300      	movs	r3, #0
   13684:	60a3      	str	r3, [r4, #8]
   13686:	6963      	ldr	r3, [r4, #20]
   13688:	425b      	negs	r3, r3
   1368a:	61a3      	str	r3, [r4, #24]
   1368c:	6923      	ldr	r3, [r4, #16]
   1368e:	b943      	cbnz	r3, 136a2 <__swsetup_r+0xc6>
   13690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   13694:	d1ba      	bne.n	1360c <__swsetup_r+0x30>
   13696:	bd70      	pop	{r4, r5, r6, pc}
   13698:	0781      	lsls	r1, r0, #30
   1369a:	bf58      	it	pl
   1369c:	6963      	ldrpl	r3, [r4, #20]
   1369e:	60a3      	str	r3, [r4, #8]
   136a0:	e7f4      	b.n	1368c <__swsetup_r+0xb0>
   136a2:	2000      	movs	r0, #0
   136a4:	e7f7      	b.n	13696 <__swsetup_r+0xba>
   136a6:	bf00      	nop
   136a8:	200000f8 	.word	0x200000f8
   136ac:	00034eec 	.word	0x00034eec
   136b0:	00034f0c 	.word	0x00034f0c
   136b4:	00034ecc 	.word	0x00034ecc

000136b8 <__sflush_r>:
   136b8:	898a      	ldrh	r2, [r1, #12]
   136ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136be:	4605      	mov	r5, r0
   136c0:	0710      	lsls	r0, r2, #28
   136c2:	460c      	mov	r4, r1
   136c4:	d458      	bmi.n	13778 <__sflush_r+0xc0>
   136c6:	684b      	ldr	r3, [r1, #4]
   136c8:	2b00      	cmp	r3, #0
   136ca:	dc05      	bgt.n	136d8 <__sflush_r+0x20>
   136cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   136ce:	2b00      	cmp	r3, #0
   136d0:	dc02      	bgt.n	136d8 <__sflush_r+0x20>
   136d2:	2000      	movs	r0, #0
   136d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   136da:	2e00      	cmp	r6, #0
   136dc:	d0f9      	beq.n	136d2 <__sflush_r+0x1a>
   136de:	2300      	movs	r3, #0
   136e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   136e4:	682f      	ldr	r7, [r5, #0]
   136e6:	602b      	str	r3, [r5, #0]
   136e8:	d032      	beq.n	13750 <__sflush_r+0x98>
   136ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
   136ec:	89a3      	ldrh	r3, [r4, #12]
   136ee:	075a      	lsls	r2, r3, #29
   136f0:	d505      	bpl.n	136fe <__sflush_r+0x46>
   136f2:	6863      	ldr	r3, [r4, #4]
   136f4:	1ac0      	subs	r0, r0, r3
   136f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   136f8:	b10b      	cbz	r3, 136fe <__sflush_r+0x46>
   136fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   136fc:	1ac0      	subs	r0, r0, r3
   136fe:	2300      	movs	r3, #0
   13700:	4602      	mov	r2, r0
   13702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13704:	6a21      	ldr	r1, [r4, #32]
   13706:	4628      	mov	r0, r5
   13708:	47b0      	blx	r6
   1370a:	1c43      	adds	r3, r0, #1
   1370c:	89a3      	ldrh	r3, [r4, #12]
   1370e:	d106      	bne.n	1371e <__sflush_r+0x66>
   13710:	6829      	ldr	r1, [r5, #0]
   13712:	291d      	cmp	r1, #29
   13714:	d82c      	bhi.n	13770 <__sflush_r+0xb8>
   13716:	4a2a      	ldr	r2, [pc, #168]	; (137c0 <__sflush_r+0x108>)
   13718:	40ca      	lsrs	r2, r1
   1371a:	07d6      	lsls	r6, r2, #31
   1371c:	d528      	bpl.n	13770 <__sflush_r+0xb8>
   1371e:	2200      	movs	r2, #0
   13720:	6062      	str	r2, [r4, #4]
   13722:	04d9      	lsls	r1, r3, #19
   13724:	6922      	ldr	r2, [r4, #16]
   13726:	6022      	str	r2, [r4, #0]
   13728:	d504      	bpl.n	13734 <__sflush_r+0x7c>
   1372a:	1c42      	adds	r2, r0, #1
   1372c:	d101      	bne.n	13732 <__sflush_r+0x7a>
   1372e:	682b      	ldr	r3, [r5, #0]
   13730:	b903      	cbnz	r3, 13734 <__sflush_r+0x7c>
   13732:	6560      	str	r0, [r4, #84]	; 0x54
   13734:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13736:	602f      	str	r7, [r5, #0]
   13738:	2900      	cmp	r1, #0
   1373a:	d0ca      	beq.n	136d2 <__sflush_r+0x1a>
   1373c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13740:	4299      	cmp	r1, r3
   13742:	d002      	beq.n	1374a <__sflush_r+0x92>
   13744:	4628      	mov	r0, r5
   13746:	f7ff f8e1 	bl	1290c <_free_r>
   1374a:	2000      	movs	r0, #0
   1374c:	6360      	str	r0, [r4, #52]	; 0x34
   1374e:	e7c1      	b.n	136d4 <__sflush_r+0x1c>
   13750:	6a21      	ldr	r1, [r4, #32]
   13752:	2301      	movs	r3, #1
   13754:	4628      	mov	r0, r5
   13756:	47b0      	blx	r6
   13758:	1c41      	adds	r1, r0, #1
   1375a:	d1c7      	bne.n	136ec <__sflush_r+0x34>
   1375c:	682b      	ldr	r3, [r5, #0]
   1375e:	2b00      	cmp	r3, #0
   13760:	d0c4      	beq.n	136ec <__sflush_r+0x34>
   13762:	2b1d      	cmp	r3, #29
   13764:	d001      	beq.n	1376a <__sflush_r+0xb2>
   13766:	2b16      	cmp	r3, #22
   13768:	d101      	bne.n	1376e <__sflush_r+0xb6>
   1376a:	602f      	str	r7, [r5, #0]
   1376c:	e7b1      	b.n	136d2 <__sflush_r+0x1a>
   1376e:	89a3      	ldrh	r3, [r4, #12]
   13770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13774:	81a3      	strh	r3, [r4, #12]
   13776:	e7ad      	b.n	136d4 <__sflush_r+0x1c>
   13778:	690f      	ldr	r7, [r1, #16]
   1377a:	2f00      	cmp	r7, #0
   1377c:	d0a9      	beq.n	136d2 <__sflush_r+0x1a>
   1377e:	0793      	lsls	r3, r2, #30
   13780:	680e      	ldr	r6, [r1, #0]
   13782:	bf08      	it	eq
   13784:	694b      	ldreq	r3, [r1, #20]
   13786:	600f      	str	r7, [r1, #0]
   13788:	bf18      	it	ne
   1378a:	2300      	movne	r3, #0
   1378c:	eba6 0807 	sub.w	r8, r6, r7
   13790:	608b      	str	r3, [r1, #8]
   13792:	f1b8 0f00 	cmp.w	r8, #0
   13796:	dd9c      	ble.n	136d2 <__sflush_r+0x1a>
   13798:	6a21      	ldr	r1, [r4, #32]
   1379a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1379c:	4643      	mov	r3, r8
   1379e:	463a      	mov	r2, r7
   137a0:	4628      	mov	r0, r5
   137a2:	47b0      	blx	r6
   137a4:	2800      	cmp	r0, #0
   137a6:	dc06      	bgt.n	137b6 <__sflush_r+0xfe>
   137a8:	89a3      	ldrh	r3, [r4, #12]
   137aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   137ae:	81a3      	strh	r3, [r4, #12]
   137b0:	f04f 30ff 	mov.w	r0, #4294967295
   137b4:	e78e      	b.n	136d4 <__sflush_r+0x1c>
   137b6:	4407      	add	r7, r0
   137b8:	eba8 0800 	sub.w	r8, r8, r0
   137bc:	e7e9      	b.n	13792 <__sflush_r+0xda>
   137be:	bf00      	nop
   137c0:	20400001 	.word	0x20400001

000137c4 <_fflush_r>:
   137c4:	b538      	push	{r3, r4, r5, lr}
   137c6:	690b      	ldr	r3, [r1, #16]
   137c8:	4605      	mov	r5, r0
   137ca:	460c      	mov	r4, r1
   137cc:	b913      	cbnz	r3, 137d4 <_fflush_r+0x10>
   137ce:	2500      	movs	r5, #0
   137d0:	4628      	mov	r0, r5
   137d2:	bd38      	pop	{r3, r4, r5, pc}
   137d4:	b118      	cbz	r0, 137de <_fflush_r+0x1a>
   137d6:	6983      	ldr	r3, [r0, #24]
   137d8:	b90b      	cbnz	r3, 137de <_fflush_r+0x1a>
   137da:	f000 f871 	bl	138c0 <__sinit>
   137de:	4b14      	ldr	r3, [pc, #80]	; (13830 <_fflush_r+0x6c>)
   137e0:	429c      	cmp	r4, r3
   137e2:	d11b      	bne.n	1381c <_fflush_r+0x58>
   137e4:	686c      	ldr	r4, [r5, #4]
   137e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   137ea:	2b00      	cmp	r3, #0
   137ec:	d0ef      	beq.n	137ce <_fflush_r+0xa>
   137ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   137f0:	07d0      	lsls	r0, r2, #31
   137f2:	d404      	bmi.n	137fe <_fflush_r+0x3a>
   137f4:	0599      	lsls	r1, r3, #22
   137f6:	d402      	bmi.n	137fe <_fflush_r+0x3a>
   137f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   137fa:	f000 ffe8 	bl	147ce <__retarget_lock_acquire_recursive>
   137fe:	4628      	mov	r0, r5
   13800:	4621      	mov	r1, r4
   13802:	f7ff ff59 	bl	136b8 <__sflush_r>
   13806:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13808:	07da      	lsls	r2, r3, #31
   1380a:	4605      	mov	r5, r0
   1380c:	d4e0      	bmi.n	137d0 <_fflush_r+0xc>
   1380e:	89a3      	ldrh	r3, [r4, #12]
   13810:	059b      	lsls	r3, r3, #22
   13812:	d4dd      	bmi.n	137d0 <_fflush_r+0xc>
   13814:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13816:	f000 ffe2 	bl	147de <__retarget_lock_release_recursive>
   1381a:	e7d9      	b.n	137d0 <_fflush_r+0xc>
   1381c:	4b05      	ldr	r3, [pc, #20]	; (13834 <_fflush_r+0x70>)
   1381e:	429c      	cmp	r4, r3
   13820:	d101      	bne.n	13826 <_fflush_r+0x62>
   13822:	68ac      	ldr	r4, [r5, #8]
   13824:	e7df      	b.n	137e6 <_fflush_r+0x22>
   13826:	4b04      	ldr	r3, [pc, #16]	; (13838 <_fflush_r+0x74>)
   13828:	429c      	cmp	r4, r3
   1382a:	bf08      	it	eq
   1382c:	68ec      	ldreq	r4, [r5, #12]
   1382e:	e7da      	b.n	137e6 <_fflush_r+0x22>
   13830:	00034eec 	.word	0x00034eec
   13834:	00034f0c 	.word	0x00034f0c
   13838:	00034ecc 	.word	0x00034ecc

0001383c <std>:
   1383c:	2300      	movs	r3, #0
   1383e:	b510      	push	{r4, lr}
   13840:	4604      	mov	r4, r0
   13842:	e9c0 3300 	strd	r3, r3, [r0]
   13846:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1384a:	6083      	str	r3, [r0, #8]
   1384c:	8181      	strh	r1, [r0, #12]
   1384e:	6643      	str	r3, [r0, #100]	; 0x64
   13850:	81c2      	strh	r2, [r0, #14]
   13852:	6183      	str	r3, [r0, #24]
   13854:	4619      	mov	r1, r3
   13856:	2208      	movs	r2, #8
   13858:	305c      	adds	r0, #92	; 0x5c
   1385a:	f005 f84d 	bl	188f8 <memset>
   1385e:	4b05      	ldr	r3, [pc, #20]	; (13874 <std+0x38>)
   13860:	6263      	str	r3, [r4, #36]	; 0x24
   13862:	4b05      	ldr	r3, [pc, #20]	; (13878 <std+0x3c>)
   13864:	62a3      	str	r3, [r4, #40]	; 0x28
   13866:	4b05      	ldr	r3, [pc, #20]	; (1387c <std+0x40>)
   13868:	62e3      	str	r3, [r4, #44]	; 0x2c
   1386a:	4b05      	ldr	r3, [pc, #20]	; (13880 <std+0x44>)
   1386c:	6224      	str	r4, [r4, #32]
   1386e:	6323      	str	r3, [r4, #48]	; 0x30
   13870:	bd10      	pop	{r4, pc}
   13872:	bf00      	nop
   13874:	000193cf 	.word	0x000193cf
   13878:	000193f1 	.word	0x000193f1
   1387c:	00019429 	.word	0x00019429
   13880:	0001944d 	.word	0x0001944d

00013884 <_cleanup_r>:
   13884:	4901      	ldr	r1, [pc, #4]	; (1388c <_cleanup_r+0x8>)
   13886:	f005 ba96 	b.w	18db6 <_fwalk_reent>
   1388a:	bf00      	nop
   1388c:	000137c5 	.word	0x000137c5

00013890 <__sfp_lock_acquire>:
   13890:	4801      	ldr	r0, [pc, #4]	; (13898 <__sfp_lock_acquire+0x8>)
   13892:	f000 bf9c 	b.w	147ce <__retarget_lock_acquire_recursive>
   13896:	bf00      	nop
   13898:	200002f8 	.word	0x200002f8

0001389c <__sfp_lock_release>:
   1389c:	4801      	ldr	r0, [pc, #4]	; (138a4 <__sfp_lock_release+0x8>)
   1389e:	f000 bf9e 	b.w	147de <__retarget_lock_release_recursive>
   138a2:	bf00      	nop
   138a4:	200002f8 	.word	0x200002f8

000138a8 <__sinit_lock_acquire>:
   138a8:	4801      	ldr	r0, [pc, #4]	; (138b0 <__sinit_lock_acquire+0x8>)
   138aa:	f000 bf90 	b.w	147ce <__retarget_lock_acquire_recursive>
   138ae:	bf00      	nop
   138b0:	2000030c 	.word	0x2000030c

000138b4 <__sinit_lock_release>:
   138b4:	4801      	ldr	r0, [pc, #4]	; (138bc <__sinit_lock_release+0x8>)
   138b6:	f000 bf92 	b.w	147de <__retarget_lock_release_recursive>
   138ba:	bf00      	nop
   138bc:	2000030c 	.word	0x2000030c

000138c0 <__sinit>:
   138c0:	b510      	push	{r4, lr}
   138c2:	4604      	mov	r4, r0
   138c4:	f7ff fff0 	bl	138a8 <__sinit_lock_acquire>
   138c8:	69a3      	ldr	r3, [r4, #24]
   138ca:	b11b      	cbz	r3, 138d4 <__sinit+0x14>
   138cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   138d0:	f7ff bff0 	b.w	138b4 <__sinit_lock_release>
   138d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   138d8:	6523      	str	r3, [r4, #80]	; 0x50
   138da:	4b13      	ldr	r3, [pc, #76]	; (13928 <__sinit+0x68>)
   138dc:	4a13      	ldr	r2, [pc, #76]	; (1392c <__sinit+0x6c>)
   138de:	681b      	ldr	r3, [r3, #0]
   138e0:	62a2      	str	r2, [r4, #40]	; 0x28
   138e2:	42a3      	cmp	r3, r4
   138e4:	bf04      	itt	eq
   138e6:	2301      	moveq	r3, #1
   138e8:	61a3      	streq	r3, [r4, #24]
   138ea:	4620      	mov	r0, r4
   138ec:	f000 f820 	bl	13930 <__sfp>
   138f0:	6060      	str	r0, [r4, #4]
   138f2:	4620      	mov	r0, r4
   138f4:	f000 f81c 	bl	13930 <__sfp>
   138f8:	60a0      	str	r0, [r4, #8]
   138fa:	4620      	mov	r0, r4
   138fc:	f000 f818 	bl	13930 <__sfp>
   13900:	2200      	movs	r2, #0
   13902:	60e0      	str	r0, [r4, #12]
   13904:	2104      	movs	r1, #4
   13906:	6860      	ldr	r0, [r4, #4]
   13908:	f7ff ff98 	bl	1383c <std>
   1390c:	68a0      	ldr	r0, [r4, #8]
   1390e:	2201      	movs	r2, #1
   13910:	2109      	movs	r1, #9
   13912:	f7ff ff93 	bl	1383c <std>
   13916:	68e0      	ldr	r0, [r4, #12]
   13918:	2202      	movs	r2, #2
   1391a:	2112      	movs	r1, #18
   1391c:	f7ff ff8e 	bl	1383c <std>
   13920:	2301      	movs	r3, #1
   13922:	61a3      	str	r3, [r4, #24]
   13924:	e7d2      	b.n	138cc <__sinit+0xc>
   13926:	bf00      	nop
   13928:	00034ec8 	.word	0x00034ec8
   1392c:	00013885 	.word	0x00013885

00013930 <__sfp>:
   13930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13932:	4607      	mov	r7, r0
   13934:	f7ff ffac 	bl	13890 <__sfp_lock_acquire>
   13938:	4b1e      	ldr	r3, [pc, #120]	; (139b4 <__sfp+0x84>)
   1393a:	681e      	ldr	r6, [r3, #0]
   1393c:	69b3      	ldr	r3, [r6, #24]
   1393e:	b913      	cbnz	r3, 13946 <__sfp+0x16>
   13940:	4630      	mov	r0, r6
   13942:	f7ff ffbd 	bl	138c0 <__sinit>
   13946:	3648      	adds	r6, #72	; 0x48
   13948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1394c:	3b01      	subs	r3, #1
   1394e:	d503      	bpl.n	13958 <__sfp+0x28>
   13950:	6833      	ldr	r3, [r6, #0]
   13952:	b30b      	cbz	r3, 13998 <__sfp+0x68>
   13954:	6836      	ldr	r6, [r6, #0]
   13956:	e7f7      	b.n	13948 <__sfp+0x18>
   13958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1395c:	b9d5      	cbnz	r5, 13994 <__sfp+0x64>
   1395e:	4b16      	ldr	r3, [pc, #88]	; (139b8 <__sfp+0x88>)
   13960:	60e3      	str	r3, [r4, #12]
   13962:	f104 0058 	add.w	r0, r4, #88	; 0x58
   13966:	6665      	str	r5, [r4, #100]	; 0x64
   13968:	f000 ff28 	bl	147bc <__retarget_lock_init_recursive>
   1396c:	f7ff ff96 	bl	1389c <__sfp_lock_release>
   13970:	e9c4 5501 	strd	r5, r5, [r4, #4]
   13974:	e9c4 5504 	strd	r5, r5, [r4, #16]
   13978:	6025      	str	r5, [r4, #0]
   1397a:	61a5      	str	r5, [r4, #24]
   1397c:	2208      	movs	r2, #8
   1397e:	4629      	mov	r1, r5
   13980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   13984:	f004 ffb8 	bl	188f8 <memset>
   13988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   1398c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   13990:	4620      	mov	r0, r4
   13992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13994:	3468      	adds	r4, #104	; 0x68
   13996:	e7d9      	b.n	1394c <__sfp+0x1c>
   13998:	2104      	movs	r1, #4
   1399a:	4638      	mov	r0, r7
   1399c:	f005 f9f5 	bl	18d8a <__sfmoreglue>
   139a0:	4604      	mov	r4, r0
   139a2:	6030      	str	r0, [r6, #0]
   139a4:	2800      	cmp	r0, #0
   139a6:	d1d5      	bne.n	13954 <__sfp+0x24>
   139a8:	f7ff ff78 	bl	1389c <__sfp_lock_release>
   139ac:	230c      	movs	r3, #12
   139ae:	603b      	str	r3, [r7, #0]
   139b0:	e7ee      	b.n	13990 <__sfp+0x60>
   139b2:	bf00      	nop
   139b4:	00034ec8 	.word	0x00034ec8
   139b8:	ffff0001 	.word	0xffff0001

000139bc <_localeconv_r>:
   139bc:	4800      	ldr	r0, [pc, #0]	; (139c0 <_localeconv_r+0x4>)
   139be:	4770      	bx	lr
   139c0:	2000024c 	.word	0x2000024c

000139c4 <__smakebuf_r>:
   139c4:	898b      	ldrh	r3, [r1, #12]
   139c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   139c8:	079d      	lsls	r5, r3, #30
   139ca:	4606      	mov	r6, r0
   139cc:	460c      	mov	r4, r1
   139ce:	d507      	bpl.n	139e0 <__smakebuf_r+0x1c>
   139d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   139d4:	6023      	str	r3, [r4, #0]
   139d6:	6123      	str	r3, [r4, #16]
   139d8:	2301      	movs	r3, #1
   139da:	6163      	str	r3, [r4, #20]
   139dc:	b002      	add	sp, #8
   139de:	bd70      	pop	{r4, r5, r6, pc}
   139e0:	ab01      	add	r3, sp, #4
   139e2:	466a      	mov	r2, sp
   139e4:	f005 fa06 	bl	18df4 <__swhatbuf_r>
   139e8:	9900      	ldr	r1, [sp, #0]
   139ea:	4605      	mov	r5, r0
   139ec:	4630      	mov	r0, r6
   139ee:	f7fe ffdb 	bl	129a8 <_malloc_r>
   139f2:	b948      	cbnz	r0, 13a08 <__smakebuf_r+0x44>
   139f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   139f8:	059a      	lsls	r2, r3, #22
   139fa:	d4ef      	bmi.n	139dc <__smakebuf_r+0x18>
   139fc:	f023 0303 	bic.w	r3, r3, #3
   13a00:	f043 0302 	orr.w	r3, r3, #2
   13a04:	81a3      	strh	r3, [r4, #12]
   13a06:	e7e3      	b.n	139d0 <__smakebuf_r+0xc>
   13a08:	4b0d      	ldr	r3, [pc, #52]	; (13a40 <__smakebuf_r+0x7c>)
   13a0a:	62b3      	str	r3, [r6, #40]	; 0x28
   13a0c:	89a3      	ldrh	r3, [r4, #12]
   13a0e:	6020      	str	r0, [r4, #0]
   13a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13a14:	81a3      	strh	r3, [r4, #12]
   13a16:	9b00      	ldr	r3, [sp, #0]
   13a18:	6163      	str	r3, [r4, #20]
   13a1a:	9b01      	ldr	r3, [sp, #4]
   13a1c:	6120      	str	r0, [r4, #16]
   13a1e:	b15b      	cbz	r3, 13a38 <__smakebuf_r+0x74>
   13a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13a24:	4630      	mov	r0, r6
   13a26:	f000 f89b 	bl	13b60 <_isatty_r>
   13a2a:	b128      	cbz	r0, 13a38 <__smakebuf_r+0x74>
   13a2c:	89a3      	ldrh	r3, [r4, #12]
   13a2e:	f023 0303 	bic.w	r3, r3, #3
   13a32:	f043 0301 	orr.w	r3, r3, #1
   13a36:	81a3      	strh	r3, [r4, #12]
   13a38:	89a0      	ldrh	r0, [r4, #12]
   13a3a:	4305      	orrs	r5, r0
   13a3c:	81a5      	strh	r5, [r4, #12]
   13a3e:	e7cd      	b.n	139dc <__smakebuf_r+0x18>
   13a40:	00013885 	.word	0x00013885

00013a44 <__malloc_lock>:
   13a44:	4801      	ldr	r0, [pc, #4]	; (13a4c <__malloc_lock+0x8>)
   13a46:	f000 bec2 	b.w	147ce <__retarget_lock_acquire_recursive>
   13a4a:	bf00      	nop
   13a4c:	200002e4 	.word	0x200002e4

00013a50 <__malloc_unlock>:
   13a50:	4801      	ldr	r0, [pc, #4]	; (13a58 <__malloc_unlock+0x8>)
   13a52:	f000 bec4 	b.w	147de <__retarget_lock_release_recursive>
   13a56:	bf00      	nop
   13a58:	200002e4 	.word	0x200002e4

00013a5c <__pow5mult>:
   13a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13a60:	4615      	mov	r5, r2
   13a62:	f012 0203 	ands.w	r2, r2, #3
   13a66:	4606      	mov	r6, r0
   13a68:	460f      	mov	r7, r1
   13a6a:	d007      	beq.n	13a7c <__pow5mult+0x20>
   13a6c:	4c21      	ldr	r4, [pc, #132]	; (13af4 <__pow5mult+0x98>)
   13a6e:	3a01      	subs	r2, #1
   13a70:	2300      	movs	r3, #0
   13a72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   13a76:	f005 fa2c 	bl	18ed2 <__multadd>
   13a7a:	4607      	mov	r7, r0
   13a7c:	10ad      	asrs	r5, r5, #2
   13a7e:	d035      	beq.n	13aec <__pow5mult+0x90>
   13a80:	6a74      	ldr	r4, [r6, #36]	; 0x24
   13a82:	b93c      	cbnz	r4, 13a94 <__pow5mult+0x38>
   13a84:	2010      	movs	r0, #16
   13a86:	f7fe ff31 	bl	128ec <malloc>
   13a8a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   13a8e:	6270      	str	r0, [r6, #36]	; 0x24
   13a90:	6004      	str	r4, [r0, #0]
   13a92:	60c4      	str	r4, [r0, #12]
   13a94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   13a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
   13a9c:	b94c      	cbnz	r4, 13ab2 <__pow5mult+0x56>
   13a9e:	f240 2171 	movw	r1, #625	; 0x271
   13aa2:	4630      	mov	r0, r6
   13aa4:	f005 faa1 	bl	18fea <__i2b>
   13aa8:	2300      	movs	r3, #0
   13aaa:	f8c8 0008 	str.w	r0, [r8, #8]
   13aae:	4604      	mov	r4, r0
   13ab0:	6003      	str	r3, [r0, #0]
   13ab2:	f04f 0900 	mov.w	r9, #0
   13ab6:	07eb      	lsls	r3, r5, #31
   13ab8:	d50a      	bpl.n	13ad0 <__pow5mult+0x74>
   13aba:	4639      	mov	r1, r7
   13abc:	4622      	mov	r2, r4
   13abe:	4630      	mov	r0, r6
   13ac0:	f005 fa9c 	bl	18ffc <__multiply>
   13ac4:	4639      	mov	r1, r7
   13ac6:	4680      	mov	r8, r0
   13ac8:	4630      	mov	r0, r6
   13aca:	f005 f9eb 	bl	18ea4 <_Bfree>
   13ace:	4647      	mov	r7, r8
   13ad0:	106d      	asrs	r5, r5, #1
   13ad2:	d00b      	beq.n	13aec <__pow5mult+0x90>
   13ad4:	6820      	ldr	r0, [r4, #0]
   13ad6:	b938      	cbnz	r0, 13ae8 <__pow5mult+0x8c>
   13ad8:	4622      	mov	r2, r4
   13ada:	4621      	mov	r1, r4
   13adc:	4630      	mov	r0, r6
   13ade:	f005 fa8d 	bl	18ffc <__multiply>
   13ae2:	6020      	str	r0, [r4, #0]
   13ae4:	f8c0 9000 	str.w	r9, [r0]
   13ae8:	4604      	mov	r4, r0
   13aea:	e7e4      	b.n	13ab6 <__pow5mult+0x5a>
   13aec:	4638      	mov	r0, r7
   13aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13af2:	bf00      	nop
   13af4:	00034f2c 	.word	0x00034f2c

00013af8 <_write_r>:
   13af8:	b538      	push	{r3, r4, r5, lr}
   13afa:	4d07      	ldr	r5, [pc, #28]	; (13b18 <_write_r+0x20>)
   13afc:	4604      	mov	r4, r0
   13afe:	4608      	mov	r0, r1
   13b00:	4611      	mov	r1, r2
   13b02:	2200      	movs	r2, #0
   13b04:	602a      	str	r2, [r5, #0]
   13b06:	461a      	mov	r2, r3
   13b08:	f000 fe3f 	bl	1478a <_write>
   13b0c:	1c43      	adds	r3, r0, #1
   13b0e:	d102      	bne.n	13b16 <_write_r+0x1e>
   13b10:	682b      	ldr	r3, [r5, #0]
   13b12:	b103      	cbz	r3, 13b16 <_write_r+0x1e>
   13b14:	6023      	str	r3, [r4, #0]
   13b16:	bd38      	pop	{r3, r4, r5, pc}
   13b18:	2000f910 	.word	0x2000f910

00013b1c <_close_r>:
   13b1c:	b538      	push	{r3, r4, r5, lr}
   13b1e:	4d06      	ldr	r5, [pc, #24]	; (13b38 <_close_r+0x1c>)
   13b20:	2300      	movs	r3, #0
   13b22:	4604      	mov	r4, r0
   13b24:	4608      	mov	r0, r1
   13b26:	602b      	str	r3, [r5, #0]
   13b28:	f000 fe35 	bl	14796 <_close>
   13b2c:	1c43      	adds	r3, r0, #1
   13b2e:	d102      	bne.n	13b36 <_close_r+0x1a>
   13b30:	682b      	ldr	r3, [r5, #0]
   13b32:	b103      	cbz	r3, 13b36 <_close_r+0x1a>
   13b34:	6023      	str	r3, [r4, #0]
   13b36:	bd38      	pop	{r3, r4, r5, pc}
   13b38:	2000f910 	.word	0x2000f910

00013b3c <_fstat_r>:
   13b3c:	b538      	push	{r3, r4, r5, lr}
   13b3e:	4d07      	ldr	r5, [pc, #28]	; (13b5c <_fstat_r+0x20>)
   13b40:	2300      	movs	r3, #0
   13b42:	4604      	mov	r4, r0
   13b44:	4608      	mov	r0, r1
   13b46:	4611      	mov	r1, r2
   13b48:	602b      	str	r3, [r5, #0]
   13b4a:	f000 fe32 	bl	147b2 <_fstat>
   13b4e:	1c43      	adds	r3, r0, #1
   13b50:	d102      	bne.n	13b58 <_fstat_r+0x1c>
   13b52:	682b      	ldr	r3, [r5, #0]
   13b54:	b103      	cbz	r3, 13b58 <_fstat_r+0x1c>
   13b56:	6023      	str	r3, [r4, #0]
   13b58:	bd38      	pop	{r3, r4, r5, pc}
   13b5a:	bf00      	nop
   13b5c:	2000f910 	.word	0x2000f910

00013b60 <_isatty_r>:
   13b60:	b538      	push	{r3, r4, r5, lr}
   13b62:	4d06      	ldr	r5, [pc, #24]	; (13b7c <_isatty_r+0x1c>)
   13b64:	2300      	movs	r3, #0
   13b66:	4604      	mov	r4, r0
   13b68:	4608      	mov	r0, r1
   13b6a:	602b      	str	r3, [r5, #0]
   13b6c:	f000 fe18 	bl	147a0 <_isatty>
   13b70:	1c43      	adds	r3, r0, #1
   13b72:	d102      	bne.n	13b7a <_isatty_r+0x1a>
   13b74:	682b      	ldr	r3, [r5, #0]
   13b76:	b103      	cbz	r3, 13b7a <_isatty_r+0x1a>
   13b78:	6023      	str	r3, [r4, #0]
   13b7a:	bd38      	pop	{r3, r4, r5, pc}
   13b7c:	2000f910 	.word	0x2000f910

00013b80 <_lseek_r>:
   13b80:	b538      	push	{r3, r4, r5, lr}
   13b82:	4d07      	ldr	r5, [pc, #28]	; (13ba0 <_lseek_r+0x20>)
   13b84:	4604      	mov	r4, r0
   13b86:	4608      	mov	r0, r1
   13b88:	4611      	mov	r1, r2
   13b8a:	2200      	movs	r2, #0
   13b8c:	602a      	str	r2, [r5, #0]
   13b8e:	461a      	mov	r2, r3
   13b90:	f000 fe04 	bl	1479c <_lseek>
   13b94:	1c43      	adds	r3, r0, #1
   13b96:	d102      	bne.n	13b9e <_lseek_r+0x1e>
   13b98:	682b      	ldr	r3, [r5, #0]
   13b9a:	b103      	cbz	r3, 13b9e <_lseek_r+0x1e>
   13b9c:	6023      	str	r3, [r4, #0]
   13b9e:	bd38      	pop	{r3, r4, r5, pc}
   13ba0:	2000f910 	.word	0x2000f910

00013ba4 <_read_r>:
   13ba4:	b538      	push	{r3, r4, r5, lr}
   13ba6:	4d07      	ldr	r5, [pc, #28]	; (13bc4 <_read_r+0x20>)
   13ba8:	4604      	mov	r4, r0
   13baa:	4608      	mov	r0, r1
   13bac:	4611      	mov	r1, r2
   13bae:	2200      	movs	r2, #0
   13bb0:	602a      	str	r2, [r5, #0]
   13bb2:	461a      	mov	r2, r3
   13bb4:	f000 fde3 	bl	1477e <_read>
   13bb8:	1c43      	adds	r3, r0, #1
   13bba:	d102      	bne.n	13bc2 <_read_r+0x1e>
   13bbc:	682b      	ldr	r3, [r5, #0]
   13bbe:	b103      	cbz	r3, 13bc2 <_read_r+0x1e>
   13bc0:	6023      	str	r3, [r4, #0]
   13bc2:	bd38      	pop	{r3, r4, r5, pc}
   13bc4:	2000f910 	.word	0x2000f910

00013bc8 <_Z9ee_hexdecPc>:
long ee_hexdec(char *hex) {
   13bc8:	4601      	mov	r1, r0
  long ret = 0;
   13bca:	2000      	movs	r0, #0
   13bcc:	e007      	b.n	13bde <_Z9ee_hexdecPc+0x16>
    } else if (c >= 'a' && c <= 'f') {
   13bce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   13bd2:	b2d2      	uxtb	r2, r2
   13bd4:	2a05      	cmp	r2, #5
   13bd6:	d80e      	bhi.n	13bf6 <_Z9ee_hexdecPc+0x2e>
      dec = c - 'a' + 10;
   13bd8:	3b57      	subs	r3, #87	; 0x57
    ret = (ret << 4) + dec;
   13bda:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
   13bde:	780b      	ldrb	r3, [r1, #0]
   13be0:	b193      	cbz	r3, 13c08 <_Z9ee_hexdecPc+0x40>
   13be2:	2800      	cmp	r0, #0
   13be4:	db10      	blt.n	13c08 <_Z9ee_hexdecPc+0x40>
    c = *hex++;
   13be6:	3101      	adds	r1, #1
    if (c >= '0' && c <= '9') {
   13be8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13bec:	b2d2      	uxtb	r2, r2
   13bee:	2a09      	cmp	r2, #9
   13bf0:	d8ed      	bhi.n	13bce <_Z9ee_hexdecPc+0x6>
      dec = c - '0';
   13bf2:	3b30      	subs	r3, #48	; 0x30
   13bf4:	e7f1      	b.n	13bda <_Z9ee_hexdecPc+0x12>
    } else if (c >= 'A' && c <= 'F') {
   13bf6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   13bfa:	b2d2      	uxtb	r2, r2
   13bfc:	2a05      	cmp	r2, #5
   13bfe:	d801      	bhi.n	13c04 <_Z9ee_hexdecPc+0x3c>
      dec = c - 'A' + 10;
   13c00:	3b37      	subs	r3, #55	; 0x37
   13c02:	e7ea      	b.n	13bda <_Z9ee_hexdecPc+0x12>
      return -1;
   13c04:	f04f 30ff 	mov.w	r0, #4294967295
}
   13c08:	4770      	bx	lr

00013c0a <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
   13c0a:	2200      	movs	r2, #0
   13c0c:	6002      	str	r2, [r0, #0]
   13c0e:	6042      	str	r2, [r0, #4]
   13c10:	6082      	str	r2, [r0, #8]
  }
   13c12:	4770      	bx	lr

00013c14 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
   13c14:	2001      	movs	r0, #1
   13c16:	4770      	bx	lr

00013c18 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
   13c18:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
   13c1a:	6803      	ldr	r3, [r0, #0]
   13c1c:	699b      	ldr	r3, [r3, #24]
   13c1e:	4798      	blx	r3
  }
   13c20:	bd08      	pop	{r3, pc}

00013c22 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
   13c22:	b508      	push	{r3, lr}
    return FindOp(op);
   13c24:	6803      	ldr	r3, [r0, #0]
   13c26:	69db      	ldr	r3, [r3, #28]
   13c28:	4798      	blx	r3
  }
   13c2a:	bd08      	pop	{r3, pc}

00013c2c <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   13c2c:	2920      	cmp	r1, #32
   13c2e:	d00e      	beq.n	13c4e <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x22>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   13c30:	b410      	push	{r4}
   13c32:	4604      	mov	r4, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13c34:	2300      	movs	r3, #0
   13c36:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   13c3a:	429a      	cmp	r2, r3
   13c3c:	d909      	bls.n	13c52 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x26>
      const TfLiteRegistration& registration = registrations_[i];
   13c3e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
   13c42:	1d10      	adds	r0, r2, #4
      if (registration.builtin_code == op) {
   13c44:	6992      	ldr	r2, [r2, #24]
   13c46:	428a      	cmp	r2, r1
   13c48:	d004      	beq.n	13c54 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13c4a:	3301      	adds	r3, #1
   13c4c:	e7f3      	b.n	13c36 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0xa>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   13c4e:	2000      	movs	r0, #0
  }
   13c50:	4770      	bx	lr
    return nullptr;
   13c52:	2000      	movs	r0, #0
  }
   13c54:	bc10      	pop	{r4}
   13c56:	4770      	bx	lr

00013c58 <_ZN6tflite22MicroMutableOpResolverILj7EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
   13c58:	4770      	bx	lr

00013c5a <_ZN6tflite16MicroModelRunnerIaaLi7EED1Ev>:
class MicroModelRunner {
   13c5a:	b510      	push	{r4, lr}
   13c5c:	4604      	mov	r4, r0
   13c5e:	300c      	adds	r0, #12
   13c60:	f001 fc8d 	bl	1557e <_ZN6tflite16MicroInterpreterD1Ev>
   13c64:	4620      	mov	r0, r4
   13c66:	bd10      	pop	{r4, pc}

00013c68 <_ZN6tflite22MicroMutableOpResolverILj7EED0Ev>:
   13c68:	b510      	push	{r4, lr}
   13c6a:	4604      	mov	r4, r0
   13c6c:	f004 fe06 	bl	1887c <_ZdlPv>
   13c70:	4620      	mov	r0, r4
   13c72:	bd10      	pop	{r4, pc}

00013c74 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   13c74:	b510      	push	{r4, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   13c76:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   13c7a:	2c07      	cmp	r4, #7
   13c7c:	d801      	bhi.n	13c82 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0xe>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   13c7e:	2300      	movs	r3, #0
   13c80:	e002      	b.n	13c88 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   13c82:	f004 fe12 	bl	188aa <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   13c86:	3301      	adds	r3, #1
   13c88:	429c      	cmp	r4, r3
   13c8a:	d908      	bls.n	13c9e <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   13c8c:	18c2      	adds	r2, r0, r3
   13c8e:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
   13c92:	428a      	cmp	r2, r1
   13c94:	d1f7      	bne.n	13c86 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x12>
   13c96:	333c      	adds	r3, #60	; 0x3c
   13c98:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   13c9c:	e000      	b.n	13ca0 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    return nullptr;
   13c9e:	2000      	movs	r0, #0
  }
   13ca0:	bd10      	pop	{r4, pc}

00013ca2 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   13ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ca4:	4605      	mov	r5, r0
   13ca6:	460f      	mov	r7, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13ca8:	2400      	movs	r4, #0
   13caa:	e000      	b.n	13cae <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xc>
   13cac:	3401      	adds	r4, #1
   13cae:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   13cb2:	42a3      	cmp	r3, r4
   13cb4:	d90e      	bls.n	13cd4 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0x32>
      const TfLiteRegistration& registration = registrations_[i];
   13cb6:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   13cba:	1d1e      	adds	r6, r3, #4
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   13cbc:	699b      	ldr	r3, [r3, #24]
   13cbe:	2b20      	cmp	r3, #32
   13cc0:	d1f4      	bne.n	13cac <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
   13cc2:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   13cc6:	4639      	mov	r1, r7
   13cc8:	69d8      	ldr	r0, [r3, #28]
   13cca:	f7ed fc19 	bl	1500 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   13cce:	2800      	cmp	r0, #0
   13cd0:	d1ec      	bne.n	13cac <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xa>
   13cd2:	e000      	b.n	13cd6 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0x34>
    return nullptr;
   13cd4:	2600      	movs	r6, #0
  }
   13cd6:	4630      	mov	r0, r6
   13cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013cda <_Z6th_prev>:
void th_pre() {}
   13cda:	4770      	bx	lr

00013cdc <_Z7th_postv>:
void th_post() {}
   13cdc:	4770      	bx	lr

00013cde <_Z16th_command_readyPVc>:
void th_command_ready(char volatile *p_command) {
   13cde:	b508      	push	{r3, lr}
  ee_serial_command_parser_callback((char *)p_command);
   13ce0:	f7ee fe6e 	bl	29c0 <_Z33ee_serial_command_parser_callbackPc>
}
   13ce4:	bd08      	pop	{r3, pc}

00013ce6 <_Z10th_strnlenPKcj>:
size_t th_strnlen(const char *str, size_t maxlen) {
   13ce6:	b508      	push	{r3, lr}
  return strnlen(str, maxlen);
   13ce8:	f004 ff8f 	bl	18c0a <strnlen>
}
   13cec:	bd08      	pop	{r3, pc}

00013cee <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
   13cee:	b508      	push	{r3, lr}
   13cf0:	f7ff fc0c 	bl	1350c <viprintf>
   13cf4:	bd08      	pop	{r3, pc}

00013cf6 <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
   13cf6:	b40f      	push	{r0, r1, r2, r3}
   13cf8:	b500      	push	{lr}
   13cfa:	b083      	sub	sp, #12
   13cfc:	a904      	add	r1, sp, #16
   13cfe:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
   13d02:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
   13d04:	f7ff fff3 	bl	13cee <_Z10th_vprintfPKcSt9__va_list>
}
   13d08:	b003      	add	sp, #12
   13d0a:	f85d eb04 	ldr.w	lr, [sp], #4
   13d0e:	b004      	add	sp, #16
   13d10:	4770      	bx	lr

00013d12 <_Z24th_serialport_initializev>:
}
   13d12:	4770      	bx	lr

00013d14 <main>:
SHELL_CMD_ARG_REGISTER(start, 0, "test", cmd_start, 1, 10);

#endif /* CONFIG_SHELL */


int main(int argc, char *argv[]) {
   13d14:	b508      	push	{r3, lr}
console_init();
   13d16:	f7f0 f851 	bl	3dbc <console_init>

ee_benchmark_initialize();
   13d1a:	f7ee fc93 	bl	2644 <_Z23ee_benchmark_initializev>
    c = (int) cmd_buf[i];
    ee_serial_callback(c);
  }
  }
#else
  console_init();
   13d1e:	f7f0 f84d 	bl	3dbc <console_init>

  while (1) {
    int c;

    c = console_getchar();
   13d22:	f7f0 f839 	bl	3d98 <console_getchar>
    if (c < 0) {
   13d26:	2800      	cmp	r0, #0
   13d28:	dbfb      	blt.n	13d22 <main+0xe>
      continue;
    }
    // printk("c: %d", c);
    ee_serial_callback(c);
   13d2a:	b2c0      	uxtb	r0, r0
   13d2c:	f7ee fc6a 	bl	2604 <_Z18ee_serial_callbackc>
   13d30:	e7f7      	b.n	13d22 <main+0xe>

00013d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>:
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
  #else
    return EndianSwap(t);
  #endif
}
   13d32:	4770      	bx	lr

00013d34 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
   13d34:	b510      	push	{r4, lr}
   13d36:	4604      	mov	r4, r0
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   13d38:	6800      	ldr	r0, [r0, #0]
   13d3a:	f7ff fffa 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   13d3e:	4420      	add	r0, r4
   13d40:	bd10      	pop	{r4, pc}

00013d42 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
   13d42:	b508      	push	{r3, lr}
  return GetMutableRoot<T>(const_cast<void *>(buf));
   13d44:	f7ff fff6 	bl	13d34 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
}
   13d48:	bd08      	pop	{r3, pc}

00013d4a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   13d4a:	4602      	mov	r2, r0
   13d4c:	b158      	cbz	r0, 13d66 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   13d4e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   13d50:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   13d54:	2b01      	cmp	r3, #1
   13d56:	d003      	beq.n	13d60 <sys_notify_validate+0x16>
   13d58:	2b03      	cmp	r3, #3
   13d5a:	d107      	bne.n	13d6c <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   13d5c:	6803      	ldr	r3, [r0, #0]
   13d5e:	b143      	cbz	r3, 13d72 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   13d60:	2000      	movs	r0, #0
   13d62:	6090      	str	r0, [r2, #8]
   13d64:	4770      	bx	lr
		return -EINVAL;
   13d66:	f06f 0015 	mvn.w	r0, #21
   13d6a:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   13d6c:	f06f 0015 	mvn.w	r0, #21
   13d70:	4770      	bx	lr
			rv = -EINVAL;
   13d72:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   13d76:	4770      	bx	lr

00013d78 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   13d78:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   13d7a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   13d7c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   13d80:	6081      	str	r1, [r0, #8]
	switch (method) {
   13d82:	2a03      	cmp	r2, #3
   13d84:	d103      	bne.n	13d8e <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   13d86:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   13d88:	2200      	movs	r2, #0
   13d8a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   13d8c:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   13d8e:	2000      	movs	r0, #0
   13d90:	e7fa      	b.n	13d88 <sys_notify_finalize+0x10>

00013d92 <arch_printk_char_out>:
}
   13d92:	2000      	movs	r0, #0
   13d94:	4770      	bx	lr

00013d96 <str_out>:
{
   13d96:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   13d98:	680c      	ldr	r4, [r1, #0]
   13d9a:	b154      	cbz	r4, 13db2 <str_out+0x1c>
   13d9c:	688a      	ldr	r2, [r1, #8]
   13d9e:	684b      	ldr	r3, [r1, #4]
   13da0:	429a      	cmp	r2, r3
   13da2:	da06      	bge.n	13db2 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   13da4:	3b01      	subs	r3, #1
   13da6:	429a      	cmp	r2, r3
   13da8:	d008      	beq.n	13dbc <str_out+0x26>
		ctx->str[ctx->count++] = c;
   13daa:	1c53      	adds	r3, r2, #1
   13dac:	608b      	str	r3, [r1, #8]
   13dae:	54a0      	strb	r0, [r4, r2]
   13db0:	e002      	b.n	13db8 <str_out+0x22>
		ctx->count++;
   13db2:	688b      	ldr	r3, [r1, #8]
   13db4:	3301      	adds	r3, #1
   13db6:	608b      	str	r3, [r1, #8]
}
   13db8:	bc10      	pop	{r4}
   13dba:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   13dbc:	1c53      	adds	r3, r2, #1
   13dbe:	608b      	str	r3, [r1, #8]
   13dc0:	2300      	movs	r3, #0
   13dc2:	54a3      	strb	r3, [r4, r2]
   13dc4:	e7f8      	b.n	13db8 <str_out+0x22>

00013dc6 <printk>:
{
   13dc6:	b40f      	push	{r0, r1, r2, r3}
   13dc8:	b500      	push	{lr}
   13dca:	b083      	sub	sp, #12
   13dcc:	a904      	add	r1, sp, #16
   13dce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   13dd2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   13dd4:	f7ef f962 	bl	309c <vprintk>
}
   13dd8:	b003      	add	sp, #12
   13dda:	f85d eb04 	ldr.w	lr, [sp], #4
   13dde:	b004      	add	sp, #16
   13de0:	4770      	bx	lr

00013de2 <snprintk>:
{
   13de2:	b40c      	push	{r2, r3}
   13de4:	b500      	push	{lr}
   13de6:	b083      	sub	sp, #12
   13de8:	ab04      	add	r3, sp, #16
   13dea:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   13dee:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   13df0:	f7ef f964 	bl	30bc <vsnprintk>
}
   13df4:	b003      	add	sp, #12
   13df6:	f85d eb04 	ldr.w	lr, [sp], #4
   13dfa:	b002      	add	sp, #8
   13dfc:	4770      	bx	lr

00013dfe <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   13dfe:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13e02:	8b81      	ldrh	r1, [r0, #28]
   13e04:	f021 0107 	bic.w	r1, r1, #7
   13e08:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   13e0a:	8381      	strh	r1, [r0, #28]
}
   13e0c:	4770      	bx	lr

00013e0e <notify_monitors>:
{
   13e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e12:	4606      	mov	r6, r0
   13e14:	460f      	mov	r7, r1
   13e16:	4690      	mov	r8, r2
	return list->head;
   13e18:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13e1a:	b119      	cbz	r1, 13e24 <notify_monitors+0x16>
   13e1c:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   13e1e:	b131      	cbz	r1, 13e2e <notify_monitors+0x20>
	return node->next;
   13e20:	680c      	ldr	r4, [r1, #0]
   13e22:	e004      	b.n	13e2e <notify_monitors+0x20>
   13e24:	460c      	mov	r4, r1
   13e26:	e002      	b.n	13e2e <notify_monitors+0x20>
   13e28:	4623      	mov	r3, r4
   13e2a:	4621      	mov	r1, r4
   13e2c:	461c      	mov	r4, r3
   13e2e:	b159      	cbz	r1, 13e48 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   13e30:	684d      	ldr	r5, [r1, #4]
   13e32:	4643      	mov	r3, r8
   13e34:	463a      	mov	r2, r7
   13e36:	4630      	mov	r0, r6
   13e38:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13e3a:	2c00      	cmp	r4, #0
   13e3c:	d0f4      	beq.n	13e28 <notify_monitors+0x1a>
   13e3e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   13e40:	2c00      	cmp	r4, #0
   13e42:	d0f2      	beq.n	13e2a <notify_monitors+0x1c>
	return node->next;
   13e44:	6823      	ldr	r3, [r4, #0]
   13e46:	e7f0      	b.n	13e2a <notify_monitors+0x1c>
}
   13e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013e4c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13e4c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   13e4e:	f013 0307 	ands.w	r3, r3, #7
   13e52:	d103      	bne.n	13e5c <process_recheck+0x10>
	return list->head;
   13e54:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   13e56:	b10a      	cbz	r2, 13e5c <process_recheck+0x10>
		evt = EVT_START;
   13e58:	2003      	movs	r0, #3
   13e5a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   13e5c:	2b02      	cmp	r3, #2
   13e5e:	d003      	beq.n	13e68 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   13e60:	2b01      	cmp	r3, #1
   13e62:	d006      	beq.n	13e72 <process_recheck+0x26>
	int evt = EVT_NOP;
   13e64:	2000      	movs	r0, #0
   13e66:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   13e68:	8bc2      	ldrh	r2, [r0, #30]
   13e6a:	2a00      	cmp	r2, #0
   13e6c:	d1f8      	bne.n	13e60 <process_recheck+0x14>
		evt = EVT_STOP;
   13e6e:	2004      	movs	r0, #4
   13e70:	4770      	bx	lr
   13e72:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   13e74:	b10b      	cbz	r3, 13e7a <process_recheck+0x2e>
		evt = EVT_RESET;
   13e76:	2005      	movs	r0, #5
}
   13e78:	4770      	bx	lr
	int evt = EVT_NOP;
   13e7a:	2000      	movs	r0, #0
   13e7c:	4770      	bx	lr

00013e7e <process_complete>:
{
   13e7e:	b538      	push	{r3, r4, r5, lr}
   13e80:	4604      	mov	r4, r0
   13e82:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13e84:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
   13e86:	2a00      	cmp	r2, #0
   13e88:	db07      	blt.n	13e9a <process_complete+0x1c>
   13e8a:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   13e8e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   13e90:	2a01      	cmp	r2, #1
   13e92:	d90e      	bls.n	13eb2 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   13e94:	2b04      	cmp	r3, #4
   13e96:	d032      	beq.n	13efe <process_complete+0x80>
}
   13e98:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   13e9a:	e9d0 0100 	ldrd	r0, r1, [r0]
   13e9e:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   13ea2:	2300      	movs	r3, #0
   13ea4:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   13ea6:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   13ea8:	2101      	movs	r1, #1
   13eaa:	4620      	mov	r0, r4
   13eac:	f7ff ffa7 	bl	13dfe <set_state>
   13eb0:	e7f2      	b.n	13e98 <process_complete+0x1a>
		*clients = mgr->clients;
   13eb2:	e9d0 0100 	ldrd	r0, r1, [r0]
   13eb6:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   13eba:	2200      	movs	r2, #0
   13ebc:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   13ebe:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   13ec0:	2b06      	cmp	r3, #6
   13ec2:	d117      	bne.n	13ef4 <process_complete+0x76>
	return list->head;
   13ec4:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   13ec6:	b13b      	cbz	r3, 13ed8 <process_complete+0x5a>
				mgr->refs += 1U;
   13ec8:	8be2      	ldrh	r2, [r4, #30]
   13eca:	3201      	adds	r2, #1
   13ecc:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
   13ece:	2b00      	cmp	r3, #0
   13ed0:	d0f9      	beq.n	13ec6 <process_complete+0x48>
	return node->next;
   13ed2:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   13ed4:	2b00      	cmp	r3, #0
   13ed6:	d1f6      	bne.n	13ec6 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   13ed8:	2102      	movs	r1, #2
   13eda:	4620      	mov	r0, r4
   13edc:	f7ff ff8f 	bl	13dfe <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   13ee0:	4620      	mov	r0, r4
   13ee2:	f7ff ffb3 	bl	13e4c <process_recheck>
   13ee6:	2800      	cmp	r0, #0
   13ee8:	d0d6      	beq.n	13e98 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13eea:	8ba3      	ldrh	r3, [r4, #28]
   13eec:	f043 0320 	orr.w	r3, r3, #32
   13ef0:	83a3      	strh	r3, [r4, #28]
   13ef2:	e7d1      	b.n	13e98 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   13ef4:	2100      	movs	r1, #0
   13ef6:	4620      	mov	r0, r4
   13ef8:	f7ff ff81 	bl	13dfe <set_state>
   13efc:	e7f0      	b.n	13ee0 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   13efe:	2100      	movs	r1, #0
   13f00:	f7ff ff7d 	bl	13dfe <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   13f04:	4620      	mov	r0, r4
   13f06:	f7ff ffa1 	bl	13e4c <process_recheck>
   13f0a:	2800      	cmp	r0, #0
   13f0c:	d0c4      	beq.n	13e98 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13f0e:	8ba3      	ldrh	r3, [r4, #28]
   13f10:	f043 0320 	orr.w	r3, r3, #32
   13f14:	83a3      	strh	r3, [r4, #28]
}
   13f16:	e7bf      	b.n	13e98 <process_complete+0x1a>

00013f18 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   13f18:	b158      	cbz	r0, 13f32 <validate_args+0x1a>
{
   13f1a:	b510      	push	{r4, lr}
   13f1c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   13f1e:	b159      	cbz	r1, 13f38 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   13f20:	1d08      	adds	r0, r1, #4
   13f22:	f7ff ff12 	bl	13d4a <sys_notify_validate>
	if ((rv == 0)
   13f26:	b918      	cbnz	r0, 13f30 <validate_args+0x18>
	    && ((cli->notify.flags
   13f28:	68a3      	ldr	r3, [r4, #8]
   13f2a:	f033 0303 	bics.w	r3, r3, #3
   13f2e:	d106      	bne.n	13f3e <validate_args+0x26>
}
   13f30:	bd10      	pop	{r4, pc}
		return -EINVAL;
   13f32:	f06f 0015 	mvn.w	r0, #21
}
   13f36:	4770      	bx	lr
		return -EINVAL;
   13f38:	f06f 0015 	mvn.w	r0, #21
   13f3c:	e7f8      	b.n	13f30 <validate_args+0x18>
		rv = -EINVAL;
   13f3e:	f06f 0015 	mvn.w	r0, #21
   13f42:	e7f5      	b.n	13f30 <validate_args+0x18>

00013f44 <notify_one>:
{
   13f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f48:	4607      	mov	r7, r0
   13f4a:	460c      	mov	r4, r1
   13f4c:	4616      	mov	r6, r2
   13f4e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   13f50:	4619      	mov	r1, r3
   13f52:	1d20      	adds	r0, r4, #4
   13f54:	f7ff ff10 	bl	13d78 <sys_notify_finalize>
	if (cb) {
   13f58:	b128      	cbz	r0, 13f66 <notify_one+0x22>
   13f5a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   13f5c:	462b      	mov	r3, r5
   13f5e:	4632      	mov	r2, r6
   13f60:	4621      	mov	r1, r4
   13f62:	4638      	mov	r0, r7
   13f64:	47c0      	blx	r8
}
   13f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013f6a <notify_all>:
{
   13f6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13f6e:	4681      	mov	r9, r0
   13f70:	460c      	mov	r4, r1
   13f72:	4690      	mov	r8, r2
   13f74:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   13f76:	e005      	b.n	13f84 <notify_all+0x1a>
	list->tail = node;
   13f78:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   13f7a:	463b      	mov	r3, r7
   13f7c:	4642      	mov	r2, r8
   13f7e:	4648      	mov	r0, r9
   13f80:	f7ff ffe0 	bl	13f44 <notify_one>
	return list->head;
   13f84:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   13f86:	b129      	cbz	r1, 13f94 <notify_all+0x2a>
	return node->next;
   13f88:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   13f8a:	6025      	str	r5, [r4, #0]
	return list->tail;
   13f8c:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13f8e:	428e      	cmp	r6, r1
   13f90:	d1f3      	bne.n	13f7a <notify_all+0x10>
   13f92:	e7f1      	b.n	13f78 <notify_all+0xe>
}
   13f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013f98 <transition_complete>:
{
   13f98:	b510      	push	{r4, lr}
	__asm__ volatile(
   13f9a:	f04f 0420 	mov.w	r4, #32
   13f9e:	f3ef 8211 	mrs	r2, BASEPRI
   13fa2:	f384 8812 	msr	BASEPRI_MAX, r4
   13fa6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   13faa:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
   13fac:	2101      	movs	r1, #1
   13fae:	f7ef f89b 	bl	30e8 <process_event>
}
   13fb2:	bd10      	pop	{r4, pc}

00013fb4 <onoff_manager_init>:
	if ((mgr == NULL)
   13fb4:	b170      	cbz	r0, 13fd4 <onoff_manager_init+0x20>
{
   13fb6:	b538      	push	{r3, r4, r5, lr}
   13fb8:	460c      	mov	r4, r1
   13fba:	4605      	mov	r5, r0
	    || (transitions == NULL)
   13fbc:	b169      	cbz	r1, 13fda <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   13fbe:	680b      	ldr	r3, [r1, #0]
   13fc0:	b173      	cbz	r3, 13fe0 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   13fc2:	684b      	ldr	r3, [r1, #4]
   13fc4:	b17b      	cbz	r3, 13fe6 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   13fc6:	2220      	movs	r2, #32
   13fc8:	2100      	movs	r1, #0
   13fca:	f004 fc95 	bl	188f8 <memset>
   13fce:	612c      	str	r4, [r5, #16]
	return 0;
   13fd0:	2000      	movs	r0, #0
}
   13fd2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   13fd4:	f06f 0015 	mvn.w	r0, #21
}
   13fd8:	4770      	bx	lr
		return -EINVAL;
   13fda:	f06f 0015 	mvn.w	r0, #21
   13fde:	e7f8      	b.n	13fd2 <onoff_manager_init+0x1e>
   13fe0:	f06f 0015 	mvn.w	r0, #21
   13fe4:	e7f5      	b.n	13fd2 <onoff_manager_init+0x1e>
   13fe6:	f06f 0015 	mvn.w	r0, #21
   13fea:	e7f2      	b.n	13fd2 <onoff_manager_init+0x1e>

00013fec <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   13fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13fee:	4604      	mov	r4, r0
   13ff0:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   13ff2:	f7ff ff91 	bl	13f18 <validate_args>

	if (rv < 0) {
   13ff6:	1e06      	subs	r6, r0, #0
   13ff8:	db37      	blt.n	1406a <onoff_request+0x7e>
   13ffa:	f04f 0320 	mov.w	r3, #32
   13ffe:	f3ef 8211 	mrs	r2, BASEPRI
   14002:	f383 8812 	msr	BASEPRI_MAX, r3
   14006:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1400a:	8ba5      	ldrh	r5, [r4, #28]
   1400c:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   14010:	8be3      	ldrh	r3, [r4, #30]
   14012:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14016:	428b      	cmp	r3, r1
   14018:	d02f      	beq.n	1407a <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1401a:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1401c:	2d02      	cmp	r5, #2
   1401e:	d00c      	beq.n	1403a <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   14020:	b18d      	cbz	r5, 14046 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   14022:	2d04      	cmp	r5, #4
   14024:	d00f      	beq.n	14046 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   14026:	2d06      	cmp	r5, #6
   14028:	d00d      	beq.n	14046 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1402a:	2d05      	cmp	r5, #5
   1402c:	d01f      	beq.n	1406e <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1402e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   14032:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   14034:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   14036:	4608      	mov	r0, r1
   14038:	e00a      	b.n	14050 <onoff_request+0x64>
		mgr->refs += 1U;
   1403a:	3301      	adds	r3, #1
   1403c:	83e3      	strh	r3, [r4, #30]
		notify = true;
   1403e:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   14040:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   14042:	4618      	mov	r0, r3
   14044:	e004      	b.n	14050 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   14046:	fab5 f385 	clz	r3, r5
   1404a:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1404c:	2100      	movs	r1, #0
		add_client = true;
   1404e:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   14050:	b128      	cbz	r0, 1405e <onoff_request+0x72>
	parent->next = child;
   14052:	2000      	movs	r0, #0
   14054:	6038      	str	r0, [r7, #0]
	return list->tail;
   14056:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   14058:	b1a8      	cbz	r0, 14086 <onoff_request+0x9a>
	parent->next = child;
   1405a:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1405c:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1405e:	b9ab      	cbnz	r3, 1408c <onoff_request+0xa0>
	__asm__ volatile(
   14060:	f382 8811 	msr	BASEPRI, r2
   14064:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   14068:	b9a9      	cbnz	r1, 14096 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1406a:	4630      	mov	r0, r6
   1406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1406e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   14072:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   14074:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   14076:	4608      	mov	r0, r1
   14078:	e7ea      	b.n	14050 <onoff_request+0x64>
		rv = -EAGAIN;
   1407a:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1407e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   14080:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   14082:	4608      	mov	r0, r1
   14084:	e7e4      	b.n	14050 <onoff_request+0x64>
   14086:	6067      	str	r7, [r4, #4]
	list->head = node;
   14088:	6027      	str	r7, [r4, #0]
}
   1408a:	e7e8      	b.n	1405e <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1408c:	2102      	movs	r1, #2
   1408e:	4620      	mov	r0, r4
   14090:	f7ef f82a 	bl	30e8 <process_event>
   14094:	e7e9      	b.n	1406a <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   14096:	2300      	movs	r3, #0
   14098:	462a      	mov	r2, r5
   1409a:	4639      	mov	r1, r7
   1409c:	4620      	mov	r0, r4
   1409e:	f7ff ff51 	bl	13f44 <notify_one>
   140a2:	e7e2      	b.n	1406a <onoff_request+0x7e>

000140a4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   140a4:	b508      	push	{r3, lr}
   140a6:	4604      	mov	r4, r0
   140a8:	4608      	mov	r0, r1
   140aa:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   140ac:	461a      	mov	r2, r3
   140ae:	47a0      	blx	r4
	return z_impl_z_current_get();
   140b0:	f7fd fe0c 	bl	11ccc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   140b4:	f7f0 fb46 	bl	4744 <z_impl_k_thread_abort>

000140b8 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   140b8:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   140ba:	1d13      	adds	r3, r2, #4
   140bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   140c0:	b9d3      	cbnz	r3, 140f8 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   140c2:	2301      	movs	r3, #1
   140c4:	fa03 f402 	lsl.w	r4, r3, r2
   140c8:	68c3      	ldr	r3, [r0, #12]
   140ca:	4323      	orrs	r3, r4
   140cc:	60c3      	str	r3, [r0, #12]
		b->next = c;
   140ce:	3204      	adds	r2, #4
   140d0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   140d4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   140d8:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
   140da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   140de:	d307      	bcc.n	140f0 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   140e0:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   140e2:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   140e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   140e8:	d304      	bcc.n	140f4 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   140ea:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   140ec:	bc70      	pop	{r4, r5, r6}
   140ee:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   140f0:	8099      	strh	r1, [r3, #4]
   140f2:	e7f6      	b.n	140e2 <free_list_add_bidx+0x2a>
   140f4:	80d9      	strh	r1, [r3, #6]
   140f6:	e7f9      	b.n	140ec <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   140f8:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   140fc:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   140fe:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   14102:	d318      	bcc.n	14136 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   14104:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   14106:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1410a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1410e:	d314      	bcc.n	1413a <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   14110:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   14112:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   14114:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   14118:	d311      	bcc.n	1413e <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1411a:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   1411c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   14120:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   14122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14126:	d30c      	bcc.n	14142 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   14128:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1412a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1412c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14130:	d309      	bcc.n	14146 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   14132:	60a1      	str	r1, [r4, #8]
   14134:	e7da      	b.n	140ec <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   14136:	88a2      	ldrh	r2, [r4, #4]
   14138:	e7e5      	b.n	14106 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   1413a:	80aa      	strh	r2, [r5, #4]
   1413c:	e7e9      	b.n	14112 <free_list_add_bidx+0x5a>
   1413e:	80eb      	strh	r3, [r5, #6]
   14140:	e7ec      	b.n	1411c <free_list_add_bidx+0x64>
   14142:	80d1      	strh	r1, [r2, #6]
   14144:	e7f1      	b.n	1412a <free_list_add_bidx+0x72>
   14146:	80a1      	strh	r1, [r4, #4]
   14148:	e7d0      	b.n	140ec <free_list_add_bidx+0x34>

0001414a <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1414a:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   1414c:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
   1414e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14152:	d307      	bcc.n	14164 <free_list_add+0x1a>
	void *cmem = &buf[c];
   14154:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   14158:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1415a:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   1415c:	2a01      	cmp	r2, #1
   1415e:	d002      	beq.n	14166 <free_list_add+0x1c>
   14160:	2200      	movs	r2, #0
   14162:	e000      	b.n	14166 <free_list_add+0x1c>
   14164:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   14166:	b9a2      	cbnz	r2, 14192 <free_list_add+0x48>
	void *cmem = &buf[c];
   14168:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1416c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14170:	d310      	bcc.n	14194 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   14172:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   14174:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   14176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1417a:	d30d      	bcc.n	14198 <free_list_add+0x4e>
   1417c:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1417e:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   14180:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   14184:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   14186:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
   1418a:	f1c2 021f 	rsb	r2, r2, #31
   1418e:	f7ff ff93 	bl	140b8 <free_list_add_bidx>
	}
}
   14192:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   14194:	8852      	ldrh	r2, [r2, #2]
   14196:	e7ed      	b.n	14174 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   14198:	2304      	movs	r3, #4
   1419a:	e7f0      	b.n	1417e <free_list_add+0x34>

0001419c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1419e:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   141a0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   141a4:	d32a      	bcc.n	141fc <sys_heap_init+0x60>
   141a6:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   141a8:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   141aa:	1dc8      	adds	r0, r1, #7
   141ac:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   141b0:	440d      	add	r5, r1
   141b2:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   141b6:	1a2d      	subs	r5, r5, r0
   141b8:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   141ba:	4606      	mov	r6, r0
	heap->heap = h;
   141bc:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   141be:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   141c0:	2300      	movs	r3, #0
   141c2:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   141c4:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   141c8:	d31a      	bcc.n	14200 <sys_heap_init+0x64>
   141ca:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   141cc:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   141ce:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   141d2:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   141d4:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   141d8:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   141dc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   141e0:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   141e2:	f103 0e07 	add.w	lr, r3, #7
   141e6:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   141ea:	2300      	movs	r3, #0
   141ec:	4563      	cmp	r3, ip
   141ee:	da09      	bge.n	14204 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   141f0:	1d1a      	adds	r2, r3, #4
   141f2:	2400      	movs	r4, #0
   141f4:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   141f8:	3301      	adds	r3, #1
   141fa:	e7f7      	b.n	141ec <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   141fc:	2504      	movs	r5, #4
   141fe:	e7d3      	b.n	141a8 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   14200:	2304      	movs	r3, #4
   14202:	e7e3      	b.n	141cc <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14204:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   14206:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1420a:	d333      	bcc.n	14274 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   1420c:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   1420e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   14212:	d331      	bcc.n	14278 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   14214:	2300      	movs	r3, #0
   14216:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   14218:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1421c:	d32f      	bcc.n	1427e <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1421e:	6843      	ldr	r3, [r0, #4]
   14220:	f043 0301 	orr.w	r3, r3, #1
   14224:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   14226:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14228:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   1422a:	f02e 0307 	bic.w	r3, lr, #7
   1422e:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   14230:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   14234:	d328      	bcc.n	14288 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   14236:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   14238:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1423a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1423e:	d325      	bcc.n	1428c <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   14240:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   14242:	f025 0307 	bic.w	r3, r5, #7
   14246:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   14248:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1424a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1424e:	d31f      	bcc.n	14290 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   14250:	2400      	movs	r4, #0
   14252:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   14254:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   14256:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1425a:	d31c      	bcc.n	14296 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   1425c:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   1425e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   14260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14264:	d319      	bcc.n	1429a <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   14266:	686b      	ldr	r3, [r5, #4]
   14268:	f043 0301 	orr.w	r3, r3, #1
   1426c:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1426e:	f7ff ff6c 	bl	1414a <free_list_add>
}
   14272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   14274:	8043      	strh	r3, [r0, #2]
   14276:	e7ca      	b.n	1420e <sys_heap_init+0x72>
   14278:	2300      	movs	r3, #0
   1427a:	8003      	strh	r3, [r0, #0]
   1427c:	e7cc      	b.n	14218 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1427e:	8843      	ldrh	r3, [r0, #2]
   14280:	f043 0301 	orr.w	r3, r3, #1
   14284:	8043      	strh	r3, [r0, #2]
   14286:	e7ce      	b.n	14226 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   14288:	8066      	strh	r6, [r4, #2]
   1428a:	e7d5      	b.n	14238 <sys_heap_init+0x9c>
   1428c:	52c1      	strh	r1, [r0, r3]
   1428e:	e7d8      	b.n	14242 <sys_heap_init+0xa6>
   14290:	2400      	movs	r4, #0
   14292:	806c      	strh	r4, [r5, #2]
   14294:	e7de      	b.n	14254 <sys_heap_init+0xb8>
   14296:	52c2      	strh	r2, [r0, r3]
   14298:	e7e1      	b.n	1425e <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1429a:	886b      	ldrh	r3, [r5, #2]
   1429c:	f043 0301 	orr.w	r3, r3, #1
   142a0:	806b      	strh	r3, [r5, #2]
   142a2:	e7e4      	b.n	1426e <sys_heap_init+0xd2>

000142a4 <outs>:
{
   142a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142a8:	4607      	mov	r7, r0
   142aa:	460e      	mov	r6, r1
   142ac:	4614      	mov	r4, r2
   142ae:	4698      	mov	r8, r3
	size_t count = 0;
   142b0:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   142b2:	e006      	b.n	142c2 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   142b4:	4631      	mov	r1, r6
   142b6:	f814 0b01 	ldrb.w	r0, [r4], #1
   142ba:	47b8      	blx	r7
		if (rc < 0) {
   142bc:	2800      	cmp	r0, #0
   142be:	db09      	blt.n	142d4 <outs+0x30>
		++count;
   142c0:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   142c2:	4544      	cmp	r4, r8
   142c4:	d3f6      	bcc.n	142b4 <outs+0x10>
   142c6:	f1b8 0f00 	cmp.w	r8, #0
   142ca:	d102      	bne.n	142d2 <outs+0x2e>
   142cc:	7823      	ldrb	r3, [r4, #0]
   142ce:	2b00      	cmp	r3, #0
   142d0:	d1f0      	bne.n	142b4 <outs+0x10>
	return (int)count;
   142d2:	4628      	mov	r0, r5
}
   142d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000142d8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   142d8:	4770      	bx	lr

000142da <tty_putchar>:
{
   142da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   142de:	4604      	mov	r4, r0
   142e0:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   142e2:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
   142e6:	f004 f8f1 	bl	184cc <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   142ea:	b330      	cbz	r0, 1433a <tty_putchar+0x60>
   142ec:	2200      	movs	r2, #0
   142ee:	4613      	mov	r3, r2
	return z_impl_k_sem_take(sem, timeout);
   142f0:	4630      	mov	r0, r6
   142f2:	f7fd f903 	bl	114fc <z_impl_k_sem_take>
	if (res < 0) {
   142f6:	2800      	cmp	r0, #0
   142f8:	db1d      	blt.n	14336 <tty_putchar+0x5c>
	__asm__ volatile(
   142fa:	f04f 0320 	mov.w	r3, #32
   142fe:	f3ef 8111 	mrs	r1, BASEPRI
   14302:	f383 8812 	msr	BASEPRI_MAX, r3
   14306:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   1430a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   1430c:	1c53      	adds	r3, r2, #1
	if (tx_next >= tty->tx_ringbuf_sz) {
   1430e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   14310:	4298      	cmp	r0, r3
   14312:	d800      	bhi.n	14316 <tty_putchar+0x3c>
		tx_next = 0;
   14314:	2300      	movs	r3, #0
	if (tx_next == tty->tx_get) {
   14316:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   14318:	4298      	cmp	r0, r3
   1431a:	d02e      	beq.n	1437a <tty_putchar+0xa0>
	tty->tx_ringbuf[tty->tx_put] = c;
   1431c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1431e:	5485      	strb	r5, [r0, r2]
	tty->tx_put = tx_next;
   14320:	87e3      	strh	r3, [r4, #62]	; 0x3e
	__asm__ volatile(
   14322:	f381 8811 	msr	BASEPRI, r1
   14326:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   1432a:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   1432c:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
   1432e:	69db      	ldr	r3, [r3, #28]
   14330:	b353      	cbz	r3, 14388 <tty_putchar+0xae>
		api->irq_tx_enable(dev);
   14332:	4798      	blx	r3
	return 0;
   14334:	2000      	movs	r0, #0
}
   14336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1433a:	6c23      	ldr	r3, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
   1433c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14340:	d017      	beq.n	14372 <tty_putchar+0x98>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   14342:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14346:	ea4f 79e3 	mov.w	r9, r3, asr #31
   1434a:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1434e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   14352:	03d8      	lsls	r0, r3, #15
   14354:	f240 37e7 	movw	r7, #999	; 0x3e7
   14358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1435c:	2300      	movs	r3, #0
   1435e:	19c0      	adds	r0, r0, r7
   14360:	f04f 0700 	mov.w	r7, #0
   14364:	eb47 0101 	adc.w	r1, r7, r1
   14368:	f7ec fee2 	bl	1130 <__aeabi_uldivmod>
	res = k_sem_take(&tty->tx_sem,
   1436c:	4602      	mov	r2, r0
   1436e:	460b      	mov	r3, r1
   14370:	e7be      	b.n	142f0 <tty_putchar+0x16>
   14372:	f04f 32ff 	mov.w	r2, #4294967295
   14376:	4613      	mov	r3, r2
   14378:	e7ba      	b.n	142f0 <tty_putchar+0x16>
   1437a:	f381 8811 	msr	BASEPRI, r1
   1437e:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   14382:	f06f 001b 	mvn.w	r0, #27
   14386:	e7d6      	b.n	14336 <tty_putchar+0x5c>
	return 0;
   14388:	2000      	movs	r0, #0
   1438a:	e7d4      	b.n	14336 <tty_putchar+0x5c>

0001438c <tty_getchar>:
{
   1438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1438e:	4604      	mov	r4, r0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   14390:	1d05      	adds	r5, r0, #4
   14392:	6a03      	ldr	r3, [r0, #32]
   14394:	f1b3 3fff 	cmp.w	r3, #4294967295
   14398:	d031      	beq.n	143fe <tty_getchar+0x72>
   1439a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1439e:	17df      	asrs	r7, r3, #31
   143a0:	03f9      	lsls	r1, r7, #15
   143a2:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   143a6:	03d8      	lsls	r0, r3, #15
   143a8:	f240 36e7 	movw	r6, #999	; 0x3e7
   143ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   143b0:	2300      	movs	r3, #0
   143b2:	1980      	adds	r0, r0, r6
   143b4:	f04f 0600 	mov.w	r6, #0
   143b8:	eb46 0101 	adc.w	r1, r6, r1
   143bc:	f7ec feb8 	bl	1130 <__aeabi_uldivmod>
   143c0:	4602      	mov	r2, r0
   143c2:	460b      	mov	r3, r1
   143c4:	4628      	mov	r0, r5
   143c6:	f7fd f899 	bl	114fc <z_impl_k_sem_take>
	if (res < 0) {
   143ca:	2800      	cmp	r0, #0
   143cc:	db16      	blt.n	143fc <tty_getchar+0x70>
	__asm__ volatile(
   143ce:	f04f 0320 	mov.w	r3, #32
   143d2:	f3ef 8111 	mrs	r1, BASEPRI
   143d6:	f383 8812 	msr	BASEPRI_MAX, r3
   143da:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   143de:	6960      	ldr	r0, [r4, #20]
   143e0:	8ba2      	ldrh	r2, [r4, #28]
   143e2:	1c53      	adds	r3, r2, #1
   143e4:	b29b      	uxth	r3, r3
   143e6:	83a3      	strh	r3, [r4, #28]
   143e8:	5c80      	ldrb	r0, [r0, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   143ea:	69a2      	ldr	r2, [r4, #24]
   143ec:	4293      	cmp	r3, r2
   143ee:	d301      	bcc.n	143f4 <tty_getchar+0x68>
		tty->rx_get = 0U;
   143f0:	2300      	movs	r3, #0
   143f2:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
   143f4:	f381 8811 	msr	BASEPRI, r1
   143f8:	f3bf 8f6f 	isb	sy
}
   143fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   143fe:	f04f 32ff 	mov.w	r2, #4294967295
   14402:	4613      	mov	r3, r2
   14404:	e7de      	b.n	143c4 <tty_getchar+0x38>

00014406 <tty_read_unbuf>:
{
   14406:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1440a:	b083      	sub	sp, #12
   1440c:	4681      	mov	r9, r0
   1440e:	460e      	mov	r6, r1
   14410:	4615      	mov	r5, r2
	uint32_t timeout = tty->rx_timeout;
   14412:	6a07      	ldr	r7, [r0, #32]
	size_t out_size = 0;
   14414:	f04f 0800 	mov.w	r8, #0
	while (size) {
   14418:	e01a      	b.n	14450 <tty_read_unbuf+0x4a>
		return -ENOSYS;
   1441a:	f06f 0457 	mvn.w	r4, #87	; 0x57
			if (out_size == 0) {
   1441e:	f1b8 0f00 	cmp.w	r8, #0
   14422:	d003      	beq.n	1442c <tty_read_unbuf+0x26>
	return out_size;
   14424:	4640      	mov	r0, r8
}
   14426:	b003      	add	sp, #12
   14428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				errno = res;
   1442c:	f000 f9db 	bl	147e6 <__errno>
   14430:	6004      	str	r4, [r0, #0]
				return -1;
   14432:	f04f 30ff 	mov.w	r0, #4294967295
   14436:	e7f6      	b.n	14426 <tty_read_unbuf+0x20>
		if (size == 0 ||
   14438:	2d00      	cmp	r5, #0
   1443a:	d0f3      	beq.n	14424 <tty_read_unbuf+0x1e>
   1443c:	f1b7 3fff 	cmp.w	r7, #4294967295
   14440:	d003      	beq.n	1444a <tty_read_unbuf+0x44>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
   14442:	1e7b      	subs	r3, r7, #1
   14444:	2f00      	cmp	r7, #0
   14446:	d0ed      	beq.n	14424 <tty_read_unbuf+0x1e>
   14448:	461f      	mov	r7, r3
		if (res == -1) {
   1444a:	f1b4 3fff 	cmp.w	r4, #4294967295
   1444e:	d018      	beq.n	14482 <tty_read_unbuf+0x7c>
	while (size) {
   14450:	2d00      	cmp	r5, #0
   14452:	d0e7      	beq.n	14424 <tty_read_unbuf+0x1e>
		res = uart_poll_in(tty->uart_dev, &c);
   14454:	f8d9 0000 	ldr.w	r0, [r9]
	const struct uart_driver_api *api =
   14458:	6883      	ldr	r3, [r0, #8]
	if (api->poll_in == NULL) {
   1445a:	681b      	ldr	r3, [r3, #0]
   1445c:	2b00      	cmp	r3, #0
   1445e:	d0dc      	beq.n	1441a <tty_read_unbuf+0x14>
	return api->poll_in(dev, p_char);
   14460:	f10d 0107 	add.w	r1, sp, #7
   14464:	4798      	blx	r3
   14466:	4604      	mov	r4, r0
		if (res <= -2) {
   14468:	f1b0 3fff 	cmp.w	r0, #4294967295
   1446c:	dbd7      	blt.n	1441e <tty_read_unbuf+0x18>
		if (res == 0) {
   1446e:	2800      	cmp	r0, #0
   14470:	d1e2      	bne.n	14438 <tty_read_unbuf+0x32>
			*p++ = c;
   14472:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14476:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
   1447a:	f108 0801 	add.w	r8, r8, #1
			size--;
   1447e:	3d01      	subs	r5, #1
   14480:	e7da      	b.n	14438 <tty_read_unbuf+0x32>
	return z_impl_k_sleep(timeout);
   14482:	2021      	movs	r0, #33	; 0x21
   14484:	2100      	movs	r1, #0
   14486:	f7fd fbf5 	bl	11c74 <z_impl_k_sleep>
   1448a:	e7e1      	b.n	14450 <tty_read_unbuf+0x4a>

0001448c <tty_irq_input_hook>:
{
   1448c:	b510      	push	{r4, lr}
	int rx_next = tty->rx_put + 1;
   1448e:	8bc2      	ldrh	r2, [r0, #30]
   14490:	1c53      	adds	r3, r2, #1
	if (rx_next >= tty->rx_ringbuf_sz) {
   14492:	6984      	ldr	r4, [r0, #24]
   14494:	429c      	cmp	r4, r3
   14496:	d800      	bhi.n	1449a <tty_irq_input_hook+0xe>
		rx_next = 0;
   14498:	2300      	movs	r3, #0
	if (rx_next == tty->rx_get) {
   1449a:	8b84      	ldrh	r4, [r0, #28]
   1449c:	429c      	cmp	r4, r3
   1449e:	d007      	beq.n	144b0 <tty_irq_input_hook+0x24>
	tty->rx_ringbuf[tty->rx_put] = c;
   144a0:	6944      	ldr	r4, [r0, #20]
   144a2:	54a1      	strb	r1, [r4, r2]
	tty->rx_put = rx_next;
   144a4:	83c3      	strh	r3, [r0, #30]
	k_sem_give(&tty->rx_sem);
   144a6:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   144a8:	f7fd f804 	bl	114b4 <z_impl_k_sem_give>
}
   144ac:	2001      	movs	r0, #1
   144ae:	bd10      	pop	{r4, pc}
		tty_putchar(tty, '~');
   144b0:	217e      	movs	r1, #126	; 0x7e
   144b2:	f7ff ff12 	bl	142da <tty_putchar>
		return 1;
   144b6:	e7f9      	b.n	144ac <tty_irq_input_hook+0x20>

000144b8 <tty_uart_isr>:
{
   144b8:	b530      	push	{r4, r5, lr}
   144ba:	b083      	sub	sp, #12
   144bc:	4604      	mov	r4, r0
   144be:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
   144c0:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
   144c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   144c4:	b103      	cbz	r3, 144c8 <tty_uart_isr+0x10>
	return api->irq_update(dev);
   144c6:	4798      	blx	r3
	const struct uart_driver_api *api =
   144c8:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
   144ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   144cc:	b143      	cbz	r3, 144e0 <tty_uart_isr+0x28>
	return api->irq_rx_ready(dev);
   144ce:	4620      	mov	r0, r4
   144d0:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   144d2:	b180      	cbz	r0, 144f6 <tty_uart_isr+0x3e>
   144d4:	e004      	b.n	144e0 <tty_uart_isr+0x28>
			tty_irq_input_hook(tty, c);
   144d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   144da:	4628      	mov	r0, r5
   144dc:	f7ff ffd6 	bl	1448c <tty_irq_input_hook>
	const struct uart_driver_api *api =
   144e0:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
   144e2:	699b      	ldr	r3, [r3, #24]
   144e4:	2b00      	cmp	r3, #0
   144e6:	d0f6      	beq.n	144d6 <tty_uart_isr+0x1e>
	return api->fifo_read(dev, rx_data, size);
   144e8:	2201      	movs	r2, #1
   144ea:	f10d 0107 	add.w	r1, sp, #7
   144ee:	4620      	mov	r0, r4
   144f0:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   144f2:	2800      	cmp	r0, #0
   144f4:	d1ef      	bne.n	144d6 <tty_uart_isr+0x1e>
	const struct uart_driver_api *api =
   144f6:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
   144f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   144fa:	b113      	cbz	r3, 14502 <tty_uart_isr+0x4a>
	return api->irq_tx_ready(dev);
   144fc:	4620      	mov	r0, r4
   144fe:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   14500:	b1b8      	cbz	r0, 14532 <tty_uart_isr+0x7a>
		if (tty->tx_get == tty->tx_put) {
   14502:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
   14504:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   14506:	4299      	cmp	r1, r3
   14508:	d015      	beq.n	14536 <tty_uart_isr+0x7e>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   1450a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1450c:	1c4a      	adds	r2, r1, #1
   1450e:	87aa      	strh	r2, [r5, #60]	; 0x3c
   14510:	4419      	add	r1, r3
	const struct uart_driver_api *api =
   14512:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
   14514:	695b      	ldr	r3, [r3, #20]
   14516:	b113      	cbz	r3, 1451e <tty_uart_isr+0x66>
	return api->fifo_fill(dev, tx_data, size);
   14518:	2201      	movs	r2, #1
   1451a:	4620      	mov	r0, r4
   1451c:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   1451e:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   14520:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14522:	429a      	cmp	r2, r3
   14524:	d301      	bcc.n	1452a <tty_uart_isr+0x72>
				tty->tx_get = 0U;
   14526:	2300      	movs	r3, #0
   14528:	87ab      	strh	r3, [r5, #60]	; 0x3c
			k_sem_give(&tty->tx_sem);
   1452a:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1452e:	f7fc ffc1 	bl	114b4 <z_impl_k_sem_give>
}
   14532:	b003      	add	sp, #12
   14534:	bd30      	pop	{r4, r5, pc}
	const struct uart_driver_api *api =
   14536:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
   14538:	6a1b      	ldr	r3, [r3, #32]
   1453a:	2b00      	cmp	r3, #0
   1453c:	d0f9      	beq.n	14532 <tty_uart_isr+0x7a>
		api->irq_tx_disable(dev);
   1453e:	4620      	mov	r0, r4
   14540:	4798      	blx	r3
   14542:	e7f6      	b.n	14532 <tty_uart_isr+0x7a>

00014544 <tty_read>:
{
   14544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14548:	4607      	mov	r7, r0
   1454a:	460d      	mov	r5, r1
	if (tty->rx_ringbuf_sz == 0U) {
   1454c:	6983      	ldr	r3, [r0, #24]
   1454e:	b17b      	cbz	r3, 14570 <tty_read+0x2c>
	size_t out_size = 0;
   14550:	2600      	movs	r6, #0
	while (size--) {
   14552:	f102 38ff 	add.w	r8, r2, #4294967295
   14556:	b1ba      	cbz	r2, 14588 <tty_read+0x44>
		res = tty_getchar(tty);
   14558:	4638      	mov	r0, r7
   1455a:	f7ff ff17 	bl	1438c <tty_getchar>
		if (res < 0) {
   1455e:	1e04      	subs	r4, r0, #0
   14560:	db0a      	blt.n	14578 <tty_read+0x34>
		*p++ = (uint8_t)res;
   14562:	4629      	mov	r1, r5
   14564:	f801 4b01 	strb.w	r4, [r1], #1
		out_size++;
   14568:	3601      	adds	r6, #1
		*p++ = (uint8_t)res;
   1456a:	460d      	mov	r5, r1
	while (size--) {
   1456c:	4642      	mov	r2, r8
   1456e:	e7f0      	b.n	14552 <tty_read+0xe>
		return tty_read_unbuf(tty, buf, size);
   14570:	f7ff ff49 	bl	14406 <tty_read_unbuf>
   14574:	4604      	mov	r4, r0
   14576:	e008      	b.n	1458a <tty_read+0x46>
			if (out_size == 0) {
   14578:	b10e      	cbz	r6, 1457e <tty_read+0x3a>
			return out_size;
   1457a:	4634      	mov	r4, r6
   1457c:	e005      	b.n	1458a <tty_read+0x46>
				errno = -res;
   1457e:	f000 f932 	bl	147e6 <__errno>
   14582:	4263      	negs	r3, r4
   14584:	6003      	str	r3, [r0, #0]
				return res;
   14586:	e000      	b.n	1458a <tty_read+0x46>
	return out_size;
   14588:	4634      	mov	r4, r6
}
   1458a:	4620      	mov	r0, r4
   1458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014590 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   14590:	b570      	push	{r4, r5, r6, lr}
   14592:	4604      	mov	r4, r0
   14594:	460e      	mov	r6, r1
   14596:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
   14598:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   1459a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
   1459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1459e:	b103      	cbz	r3, 145a2 <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   145a0:	4798      	blx	r3

	tty->rx_ringbuf = buf;
   145a2:	6166      	str	r6, [r4, #20]
	tty->rx_ringbuf_sz = size;
   145a4:	61a5      	str	r5, [r4, #24]

	if (size > 0) {
   145a6:	b90d      	cbnz	r5, 145ac <tty_set_rx_buf+0x1c>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
	}

	return 0;
}
   145a8:	2000      	movs	r0, #0
   145aa:	bd70      	pop	{r4, r5, r6, pc}
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
   145ac:	1d20      	adds	r0, r4, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   145ae:	f04f 32ff 	mov.w	r2, #4294967295
   145b2:	2100      	movs	r1, #0
   145b4:	f003 ffce 	bl	18554 <z_impl_k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
   145b8:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   145ba:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   145bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   145be:	2b00      	cmp	r3, #0
   145c0:	d0f2      	beq.n	145a8 <tty_set_rx_buf+0x18>
		api->irq_rx_enable(dev);
   145c2:	4798      	blx	r3
   145c4:	e7f0      	b.n	145a8 <tty_set_rx_buf+0x18>

000145c6 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   145c6:	b570      	push	{r4, r5, r6, lr}
   145c8:	4604      	mov	r4, r0
   145ca:	460e      	mov	r6, r1
   145cc:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   145ce:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   145d0:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
   145d2:	6a1b      	ldr	r3, [r3, #32]
   145d4:	b103      	cbz	r3, 145d8 <tty_set_tx_buf+0x12>
		api->irq_tx_disable(dev);
   145d6:	4798      	blx	r3

	tty->tx_ringbuf = buf;
   145d8:	6366      	str	r6, [r4, #52]	; 0x34
	tty->tx_ringbuf_sz = size;
   145da:	63a5      	str	r5, [r4, #56]	; 0x38

	k_sem_init(&tty->tx_sem, size - 1, K_SEM_MAX_LIMIT);
   145dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   145e0:	1e69      	subs	r1, r5, #1
   145e2:	f04f 32ff 	mov.w	r2, #4294967295
   145e6:	f003 ffb5 	bl	18554 <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   145ea:	2000      	movs	r0, #0
   145ec:	bd70      	pop	{r4, r5, r6, pc}

000145ee <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   145ee:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   145f0:	f7ef fc1c 	bl	3e2c <__do_global_ctors_aux>
	__do_init_array_aux();
   145f4:	f7ef fc0c 	bl	3e10 <__do_init_array_aux>
}
   145f8:	bd08      	pop	{r3, pc}

000145fa <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   145fa:	2000      	movs	r0, #0
   145fc:	4770      	bx	lr

000145fe <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   145fe:	2200      	movs	r2, #0
   14600:	6002      	str	r2, [r0, #0]
   14602:	6042      	str	r2, [r0, #4]
   14604:	6082      	str	r2, [r0, #8]
}
   14606:	4770      	bx	lr

00014608 <abort_function>:
{
   14608:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1460a:	2000      	movs	r0, #0
   1460c:	f7ef fb88 	bl	3d20 <sys_reboot>

00014610 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14610:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14612:	f003 fedd 	bl	183d0 <z_fatal_error>
}
   14616:	bd08      	pop	{r3, pc}

00014618 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14618:	b508      	push	{r3, lr}
   1461a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1461c:	6800      	ldr	r0, [r0, #0]
   1461e:	f7ff fff7 	bl	14610 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   14622:	bd08      	pop	{r3, pc}

00014624 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   14624:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14626:	2100      	movs	r1, #0
   14628:	2001      	movs	r0, #1
   1462a:	f7ff fff1 	bl	14610 <z_arm_fatal_error>
}
   1462e:	bd08      	pop	{r3, pc}

00014630 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   14630:	b508      	push	{r3, lr}
	handler();
   14632:	f7ef fdd7 	bl	41e4 <z_SysNmiOnReset>
	z_arm_int_exit();
   14636:	f7ef fed3 	bl	43e0 <z_arm_exc_exit>
}
   1463a:	bd08      	pop	{r3, pc}

0001463c <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   1463c:	b508      	push	{r3, lr}
   1463e:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   14640:	4601      	mov	r1, r0
   14642:	4618      	mov	r0, r3
   14644:	f7ff ffd9 	bl	145fa <__cxa_atexit>
}
   14648:	bd08      	pop	{r3, pc}

0001464a <memory_fault_recoverable>:
}
   1464a:	2000      	movs	r0, #0
   1464c:	4770      	bx	lr

0001464e <debug_monitor>:
	*recoverable = false;
   1464e:	2300      	movs	r3, #0
   14650:	700b      	strb	r3, [r1, #0]
}
   14652:	4770      	bx	lr

00014654 <fault_handle>:
{
   14654:	b508      	push	{r3, lr}
	*recoverable = false;
   14656:	2300      	movs	r3, #0
   14658:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   1465a:	1ecb      	subs	r3, r1, #3
   1465c:	2b09      	cmp	r3, #9
   1465e:	d81a      	bhi.n	14696 <fault_handle+0x42>
   14660:	e8df f003 	tbb	[pc, r3]
   14664:	110d0905 	.word	0x110d0905
   14668:	19191919 	.word	0x19191919
   1466c:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   1466e:	4611      	mov	r1, r2
   14670:	f7ef ff46 	bl	4500 <hard_fault>
		break;
   14674:	e010      	b.n	14698 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   14676:	2100      	movs	r1, #0
   14678:	f7ef fefc 	bl	4474 <mem_manage_fault>
		break;
   1467c:	e00c      	b.n	14698 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   1467e:	2100      	movs	r1, #0
   14680:	f7ef febc 	bl	43fc <bus_fault>
		break;
   14684:	e008      	b.n	14698 <fault_handle+0x44>
		reason = usage_fault(esf);
   14686:	f7ef fee3 	bl	4450 <usage_fault>
		break;
   1468a:	e005      	b.n	14698 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   1468c:	4611      	mov	r1, r2
   1468e:	f7ff ffde 	bl	1464e <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14692:	2000      	movs	r0, #0
		break;
   14694:	e000      	b.n	14698 <fault_handle+0x44>
	*recoverable = false;
   14696:	2000      	movs	r0, #0
}
   14698:	bd08      	pop	{r3, pc}

0001469a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   1469a:	6843      	ldr	r3, [r0, #4]
   1469c:	1e5a      	subs	r2, r3, #1
		&&
   1469e:	4213      	tst	r3, r2
   146a0:	d106      	bne.n	146b0 <mpu_partition_is_valid+0x16>
		&&
   146a2:	2b1f      	cmp	r3, #31
   146a4:	d906      	bls.n	146b4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   146a6:	6803      	ldr	r3, [r0, #0]
		&&
   146a8:	421a      	tst	r2, r3
   146aa:	d005      	beq.n	146b8 <mpu_partition_is_valid+0x1e>
   146ac:	2000      	movs	r0, #0
   146ae:	4770      	bx	lr
   146b0:	2000      	movs	r0, #0
   146b2:	4770      	bx	lr
   146b4:	2000      	movs	r0, #0
   146b6:	4770      	bx	lr
   146b8:	2001      	movs	r0, #1
}
   146ba:	4770      	bx	lr

000146bc <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   146bc:	2807      	cmp	r0, #7
   146be:	d805      	bhi.n	146cc <region_allocate_and_init+0x10>
{
   146c0:	b510      	push	{r4, lr}
   146c2:	4604      	mov	r4, r0
	region_init(index, region_conf);
   146c4:	f7f0 f874 	bl	47b0 <region_init>
	return index;
   146c8:	4620      	mov	r0, r4
}
   146ca:	bd10      	pop	{r4, pc}
		return -EINVAL;
   146cc:	f06f 0015 	mvn.w	r0, #21
}
   146d0:	4770      	bx	lr

000146d2 <mpu_configure_region>:
{
   146d2:	b500      	push	{lr}
   146d4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   146d6:	680b      	ldr	r3, [r1, #0]
   146d8:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   146da:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   146dc:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   146de:	2b20      	cmp	r3, #32
   146e0:	d912      	bls.n	14708 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   146e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   146e6:	d811      	bhi.n	1470c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   146e8:	3b01      	subs	r3, #1
   146ea:	fab3 f383 	clz	r3, r3
   146ee:	f1c3 031f 	rsb	r3, r3, #31
   146f2:	005b      	lsls	r3, r3, #1
   146f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   146f8:	4313      	orrs	r3, r2
   146fa:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   146fc:	a901      	add	r1, sp, #4
   146fe:	f7ff ffdd 	bl	146bc <region_allocate_and_init>
}
   14702:	b005      	add	sp, #20
   14704:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   14708:	2308      	movs	r3, #8
   1470a:	e7f5      	b.n	146f8 <mpu_configure_region+0x26>
		return REGION_4G;
   1470c:	233e      	movs	r3, #62	; 0x3e
   1470e:	e7f3      	b.n	146f8 <mpu_configure_region+0x26>

00014710 <mpu_configure_regions>:
{
   14710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14714:	4680      	mov	r8, r0
   14716:	460f      	mov	r7, r1
   14718:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   1471a:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   1471c:	2500      	movs	r5, #0
   1471e:	e009      	b.n	14734 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14720:	4621      	mov	r1, r4
   14722:	b2f0      	uxtb	r0, r6
   14724:	f7ff ffd5 	bl	146d2 <mpu_configure_region>
   14728:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   1472a:	f110 0f16 	cmn.w	r0, #22
   1472e:	d014      	beq.n	1475a <mpu_configure_regions+0x4a>
		reg_index++;
   14730:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   14732:	3501      	adds	r5, #1
   14734:	42bd      	cmp	r5, r7
   14736:	da10      	bge.n	1475a <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   14738:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   1473c:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   14740:	6862      	ldr	r2, [r4, #4]
   14742:	2a00      	cmp	r2, #0
   14744:	d0f5      	beq.n	14732 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   14746:	f1b9 0f00 	cmp.w	r9, #0
   1474a:	d0e9      	beq.n	14720 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   1474c:	4620      	mov	r0, r4
   1474e:	f7ff ffa4 	bl	1469a <mpu_partition_is_valid>
		if (do_sanity_check &&
   14752:	2800      	cmp	r0, #0
   14754:	d1e4      	bne.n	14720 <mpu_configure_regions+0x10>
			return -EINVAL;
   14756:	f06f 0615 	mvn.w	r6, #21
}
   1475a:	4630      	mov	r0, r6
   1475c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014760 <arm_core_mpu_configure_static_mpu_regions>:
{
   14760:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14762:	f7f0 f835 	bl	47d0 <mpu_configure_static_mpu_regions>
}
   14766:	bd08      	pop	{r3, pc}

00014768 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   14768:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   1476a:	f7f0 f83b 	bl	47e4 <mpu_configure_dynamic_mpu_regions>
}
   1476e:	bd08      	pop	{r3, pc}

00014770 <malloc_prepare>:
}
   14770:	2000      	movs	r0, #0
   14772:	4770      	bx	lr

00014774 <_stdout_hook_default>:
}
   14774:	f04f 30ff 	mov.w	r0, #4294967295
   14778:	4770      	bx	lr

0001477a <_stdin_hook_default>:
}
   1477a:	2000      	movs	r0, #0
   1477c:	4770      	bx	lr

0001477e <_read>:
{
   1477e:	b508      	push	{r3, lr}
   14780:	4608      	mov	r0, r1
   14782:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   14784:	f7f0 f880 	bl	4888 <z_impl_zephyr_read_stdin>
}
   14788:	bd08      	pop	{r3, pc}

0001478a <_write>:
{
   1478a:	b508      	push	{r3, lr}
   1478c:	4608      	mov	r0, r1
   1478e:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   14790:	f7f0 f890 	bl	48b4 <z_impl_zephyr_write_stdout>
}
   14794:	bd08      	pop	{r3, pc}

00014796 <_close>:
}
   14796:	f04f 30ff 	mov.w	r0, #4294967295
   1479a:	4770      	bx	lr

0001479c <_lseek>:
}
   1479c:	2000      	movs	r0, #0
   1479e:	4770      	bx	lr

000147a0 <_isatty>:
}
   147a0:	2802      	cmp	r0, #2
   147a2:	bfcc      	ite	gt
   147a4:	2000      	movgt	r0, #0
   147a6:	2001      	movle	r0, #1
   147a8:	4770      	bx	lr

000147aa <_kill>:
}
   147aa:	2000      	movs	r0, #0
   147ac:	4770      	bx	lr

000147ae <_getpid>:
}
   147ae:	2000      	movs	r0, #0
   147b0:	4770      	bx	lr

000147b2 <_fstat>:
	st->st_mode = S_IFCHR;
   147b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   147b6:	604b      	str	r3, [r1, #4]
}
   147b8:	2000      	movs	r0, #0
   147ba:	4770      	bx	lr

000147bc <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   147bc:	b510      	push	{r4, lr}
   147be:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   147c0:	2014      	movs	r0, #20
   147c2:	f7fe f893 	bl	128ec <malloc>
   147c6:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   147c8:	f003 febd 	bl	18546 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   147cc:	bd10      	pop	{r4, pc}

000147ce <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   147ce:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   147d0:	f04f 32ff 	mov.w	r2, #4294967295
   147d4:	f04f 33ff 	mov.w	r3, #4294967295
   147d8:	f7fc fd9e 	bl	11318 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   147dc:	bd08      	pop	{r3, pc}

000147de <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   147de:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   147e0:	f7fc fe24 	bl	1142c <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   147e4:	bd08      	pop	{r3, pc}

000147e6 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   147e6:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   147e8:	f7fc fb60 	bl	10eac <z_impl_z_errno>
	return z_errno();
}
   147ec:	bd08      	pop	{r3, pc}

000147ee <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   147ee:	b084      	sub	sp, #16
   147f0:	ab04      	add	r3, sp, #16
   147f2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   147f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   147fa:	2b06      	cmp	r3, #6
   147fc:	d001      	beq.n	14802 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   147fe:	b004      	add	sp, #16
   14800:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   14802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14806:	2201      	movs	r2, #1
   14808:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1480c:	f3bf 8f4f 	dsb	sy
        __WFE();
   14810:	bf20      	wfe
    while (true)
   14812:	e7fd      	b.n	14810 <pm_power_state_set+0x22>

00014814 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   14814:	b084      	sub	sp, #16
   14816:	ab04      	add	r3, sp, #16
   14818:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1481c:	2300      	movs	r3, #0
   1481e:	f383 8811 	msr	BASEPRI, r3
   14822:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   14826:	b004      	add	sp, #16
   14828:	4770      	bx	lr

0001482a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1482a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1482c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   14830:	0089      	lsls	r1, r1, #2
   14832:	3140      	adds	r1, #64	; 0x40
}
   14834:	4408      	add	r0, r1
   14836:	4770      	bx	lr

00014838 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   14838:	6840      	ldr	r0, [r0, #4]
}
   1483a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1483e:	4770      	bx	lr

00014840 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   14840:	6900      	ldr	r0, [r0, #16]
}
   14842:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   14846:	4770      	bx	lr

00014848 <get_status>:
{
   14848:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1484a:	b2c9      	uxtb	r1, r1
   1484c:	f7ff ffed 	bl	1482a <get_sub_data>
   14850:	6880      	ldr	r0, [r0, #8]
}
   14852:	f000 0007 	and.w	r0, r0, #7
   14856:	bd08      	pop	{r3, pc}

00014858 <set_off_state>:
	__asm__ volatile(
   14858:	f04f 0320 	mov.w	r3, #32
   1485c:	f3ef 8211 	mrs	r2, BASEPRI
   14860:	f383 8812 	msr	BASEPRI_MAX, r3
   14864:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14868:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1486a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1486e:	d001      	beq.n	14874 <set_off_state+0x1c>
   14870:	428b      	cmp	r3, r1
   14872:	d107      	bne.n	14884 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   14874:	2301      	movs	r3, #1
   14876:	6003      	str	r3, [r0, #0]
	int err = 0;
   14878:	2000      	movs	r0, #0
	__asm__ volatile(
   1487a:	f382 8811 	msr	BASEPRI, r2
   1487e:	f3bf 8f6f 	isb	sy
}
   14882:	4770      	bx	lr
		err = -EPERM;
   14884:	f04f 30ff 	mov.w	r0, #4294967295
   14888:	e7f7      	b.n	1487a <set_off_state+0x22>

0001488a <set_starting_state>:
{
   1488a:	b410      	push	{r4}
	__asm__ volatile(
   1488c:	f04f 0320 	mov.w	r3, #32
   14890:	f3ef 8211 	mrs	r2, BASEPRI
   14894:	f383 8812 	msr	BASEPRI_MAX, r3
   14898:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1489c:	6803      	ldr	r3, [r0, #0]
   1489e:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   148a2:	f003 0307 	and.w	r3, r3, #7
   148a6:	2b01      	cmp	r3, #1
   148a8:	d009      	beq.n	148be <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   148aa:	428c      	cmp	r4, r1
   148ac:	d00a      	beq.n	148c4 <set_starting_state+0x3a>
		err = -EPERM;
   148ae:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   148b2:	f382 8811 	msr	BASEPRI, r2
   148b6:	f3bf 8f6f 	isb	sy
}
   148ba:	bc10      	pop	{r4}
   148bc:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   148be:	6001      	str	r1, [r0, #0]
	int err = 0;
   148c0:	2000      	movs	r0, #0
   148c2:	e7f6      	b.n	148b2 <set_starting_state+0x28>
		err = -EALREADY;
   148c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   148c8:	e7f3      	b.n	148b2 <set_starting_state+0x28>

000148ca <set_on_state>:
	__asm__ volatile(
   148ca:	f04f 0320 	mov.w	r3, #32
   148ce:	f3ef 8211 	mrs	r2, BASEPRI
   148d2:	f383 8812 	msr	BASEPRI_MAX, r3
   148d6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   148da:	6803      	ldr	r3, [r0, #0]
   148dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   148e0:	f043 0302 	orr.w	r3, r3, #2
   148e4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   148e6:	f382 8811 	msr	BASEPRI, r2
   148ea:	f3bf 8f6f 	isb	sy
}
   148ee:	4770      	bx	lr

000148f0 <clkstarted_handle>:
{
   148f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   148f2:	4606      	mov	r6, r0
   148f4:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   148f6:	f7ff ff98 	bl	1482a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   148fa:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   148fc:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   148fe:	2300      	movs	r3, #0
   14900:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   14904:	f7ff ffe1 	bl	148ca <set_on_state>
	if (callback) {
   14908:	b11d      	cbz	r5, 14912 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1490a:	463a      	mov	r2, r7
   1490c:	4621      	mov	r1, r4
   1490e:	4630      	mov	r0, r6
   14910:	47a8      	blx	r5
}
   14912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014914 <stop>:
{
   14914:	b570      	push	{r4, r5, r6, lr}
   14916:	4606      	mov	r6, r0
   14918:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1491a:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1491c:	4621      	mov	r1, r4
   1491e:	f7ff ff84 	bl	1482a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   14922:	4629      	mov	r1, r5
   14924:	3008      	adds	r0, #8
   14926:	f7ff ff97 	bl	14858 <set_off_state>
	if (err < 0) {
   1492a:	2800      	cmp	r0, #0
   1492c:	db06      	blt.n	1493c <stop+0x28>
	get_sub_config(dev, type)->stop();
   1492e:	4621      	mov	r1, r4
   14930:	4630      	mov	r0, r6
   14932:	f7ff ff81 	bl	14838 <get_sub_config>
   14936:	6843      	ldr	r3, [r0, #4]
   14938:	4798      	blx	r3
	return 0;
   1493a:	2000      	movs	r0, #0
}
   1493c:	bd70      	pop	{r4, r5, r6, pc}

0001493e <api_stop>:
{
   1493e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   14940:	2280      	movs	r2, #128	; 0x80
   14942:	f7ff ffe7 	bl	14914 <stop>
}
   14946:	bd08      	pop	{r3, pc}

00014948 <async_start>:
{
   14948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1494c:	4606      	mov	r6, r0
   1494e:	4690      	mov	r8, r2
   14950:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   14952:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14954:	4629      	mov	r1, r5
   14956:	f7ff ff68 	bl	1482a <get_sub_data>
   1495a:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1495c:	9906      	ldr	r1, [sp, #24]
   1495e:	3008      	adds	r0, #8
   14960:	f7ff ff93 	bl	1488a <set_starting_state>
	if (err < 0) {
   14964:	2800      	cmp	r0, #0
   14966:	db09      	blt.n	1497c <async_start+0x34>
	subdata->cb = cb;
   14968:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1496c:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1496e:	4629      	mov	r1, r5
   14970:	4630      	mov	r0, r6
   14972:	f7ff ff61 	bl	14838 <get_sub_config>
   14976:	6803      	ldr	r3, [r0, #0]
   14978:	4798      	blx	r3
	return 0;
   1497a:	2000      	movs	r0, #0
}
   1497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014980 <api_start>:
{
   14980:	b510      	push	{r4, lr}
   14982:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   14984:	2480      	movs	r4, #128	; 0x80
   14986:	9400      	str	r4, [sp, #0]
   14988:	f7ff ffde 	bl	14948 <async_start>
}
   1498c:	b002      	add	sp, #8
   1498e:	bd10      	pop	{r4, pc}

00014990 <onoff_started_callback>:
{
   14990:	b510      	push	{r4, lr}
   14992:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   14994:	b2c9      	uxtb	r1, r1
   14996:	f7ff ff53 	bl	14840 <get_onoff_manager>
	notify(mgr, 0);
   1499a:	2100      	movs	r1, #0
   1499c:	47a0      	blx	r4
}
   1499e:	bd10      	pop	{r4, pc}

000149a0 <hfclk_start>:
{
   149a0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   149a2:	2001      	movs	r0, #1
   149a4:	f7f1 fa3a 	bl	5e1c <nrfx_clock_start>
}
   149a8:	bd08      	pop	{r3, pc}

000149aa <lfclk_start>:
{
   149aa:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   149ac:	2000      	movs	r0, #0
   149ae:	f7f1 fa35 	bl	5e1c <nrfx_clock_start>
}
   149b2:	bd08      	pop	{r3, pc}

000149b4 <hfclk_stop>:
{
   149b4:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   149b6:	2001      	movs	r0, #1
   149b8:	f7f1 fa68 	bl	5e8c <nrfx_clock_stop>
}
   149bc:	bd08      	pop	{r3, pc}

000149be <lfclk_stop>:
{
   149be:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   149c0:	2000      	movs	r0, #0
   149c2:	f7f1 fa63 	bl	5e8c <nrfx_clock_stop>
}
   149c6:	bd08      	pop	{r3, pc}

000149c8 <blocking_start_callback>:
{
   149c8:	b508      	push	{r3, lr}
   149ca:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   149cc:	f7fc fd72 	bl	114b4 <z_impl_k_sem_give>
}
   149d0:	bd08      	pop	{r3, pc}

000149d2 <debug_hook_out_nop>:
}
   149d2:	2000      	movs	r0, #0
   149d4:	4770      	bx	lr

000149d6 <gpio_nrfx_port_get_raw>:
	return port->config;
   149d6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   149d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   149da:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   149de:	600b      	str	r3, [r1, #0]
}
   149e0:	2000      	movs	r0, #0
   149e2:	4770      	bx	lr

000149e4 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   149e4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   149e6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   149e8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   149ec:	4042      	eors	r2, r0
   149ee:	400a      	ands	r2, r1
   149f0:	4042      	eors	r2, r0
    p_reg->OUT = value;
   149f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   149f6:	2000      	movs	r0, #0
   149f8:	4770      	bx	lr

000149fa <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   149fa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   149fc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   149fe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   14a02:	2000      	movs	r0, #0
   14a04:	4770      	bx	lr

00014a06 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   14a06:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14a08:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   14a0a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   14a0e:	2000      	movs	r0, #0
   14a10:	4770      	bx	lr

00014a12 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   14a12:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14a14:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   14a16:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   14a1a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   14a1c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   14a20:	2000      	movs	r0, #0
   14a22:	4770      	bx	lr

00014a24 <gpio_nrfx_manage_callback>:
{
   14a24:	b470      	push	{r4, r5, r6}
	return port->data;
   14a26:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14a28:	1d05      	adds	r5, r0, #4
	return list->head;
   14a2a:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   14a2c:	b1db      	cbz	r3, 14a66 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   14a2e:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14a30:	2400      	movs	r4, #0
   14a32:	e00a      	b.n	14a4a <gpio_nrfx_manage_callback+0x26>
	return node->next;
   14a34:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   14a36:	6043      	str	r3, [r0, #4]
	return list->tail;
   14a38:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14a3a:	42a1      	cmp	r1, r4
   14a3c:	d10f      	bne.n	14a5e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   14a3e:	606b      	str	r3, [r5, #4]
}
   14a40:	e00d      	b.n	14a5e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   14a42:	606c      	str	r4, [r5, #4]
}
   14a44:	e00b      	b.n	14a5e <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14a46:	461c      	mov	r4, r3
   14a48:	681b      	ldr	r3, [r3, #0]
   14a4a:	b15b      	cbz	r3, 14a64 <gpio_nrfx_manage_callback+0x40>
   14a4c:	429e      	cmp	r6, r3
   14a4e:	d1fa      	bne.n	14a46 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   14a50:	2c00      	cmp	r4, #0
   14a52:	d0ef      	beq.n	14a34 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   14a54:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   14a56:	6023      	str	r3, [r4, #0]
	return list->tail;
   14a58:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14a5a:	4299      	cmp	r1, r3
   14a5c:	d0f1      	beq.n	14a42 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   14a5e:	2300      	movs	r3, #0
   14a60:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14a62:	e000      	b.n	14a66 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   14a64:	b152      	cbz	r2, 14a7c <gpio_nrfx_manage_callback+0x58>
	if (set) {
   14a66:	b162      	cbz	r2, 14a82 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   14a68:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   14a6a:	600b      	str	r3, [r1, #0]
	list->head = node;
   14a6c:	6041      	str	r1, [r0, #4]
	return list->tail;
   14a6e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14a70:	b10b      	cbz	r3, 14a76 <gpio_nrfx_manage_callback+0x52>
	return 0;
   14a72:	2000      	movs	r0, #0
   14a74:	e006      	b.n	14a84 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   14a76:	6069      	str	r1, [r5, #4]
   14a78:	2000      	movs	r0, #0
}
   14a7a:	e003      	b.n	14a84 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   14a7c:	f06f 0015 	mvn.w	r0, #21
   14a80:	e000      	b.n	14a84 <gpio_nrfx_manage_callback+0x60>
	return 0;
   14a82:	2000      	movs	r0, #0
}
   14a84:	bc70      	pop	{r4, r5, r6}
   14a86:	4770      	bx	lr

00014a88 <endtx_isr>:
	return dev->config;
   14a88:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14a8a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   14a8c:	f04f 0120 	mov.w	r1, #32
   14a90:	f3ef 8211 	mrs	r2, BASEPRI
   14a94:	f381 8812 	msr	BASEPRI_MAX, r1
   14a98:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a9c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   14aa0:	b131      	cbz	r1, 14ab0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14aa2:	2100      	movs	r1, #0
   14aa4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   14aa8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14aac:	2101      	movs	r1, #1
   14aae:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   14ab0:	f382 8811 	msr	BASEPRI, r2
   14ab4:	f3bf 8f6f 	isb	sy
}
   14ab8:	4770      	bx	lr

00014aba <uarte_nrfx_isr_int>:
{
   14aba:	b538      	push	{r3, r4, r5, lr}
   14abc:	4604      	mov	r4, r0
	return dev->config;
   14abe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14ac0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   14ac2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   14ac6:	f413 7f80 	tst.w	r3, #256	; 0x100
   14aca:	d003      	beq.n	14ad4 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14acc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   14ad0:	2b00      	cmp	r3, #0
   14ad2:	d139      	bne.n	14b48 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   14ad4:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14ad6:	685b      	ldr	r3, [r3, #4]
   14ad8:	f013 0f10 	tst.w	r3, #16
   14adc:	d01a      	beq.n	14b14 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   14ade:	f04f 0320 	mov.w	r3, #32
   14ae2:	f3ef 8211 	mrs	r2, BASEPRI
   14ae6:	f383 8812 	msr	BASEPRI_MAX, r3
   14aea:	f3bf 8f6f 	isb	sy
   14aee:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   14af2:	b113      	cbz	r3, 14afa <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14af4:	2300      	movs	r3, #0
   14af6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   14afa:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   14afc:	68db      	ldr	r3, [r3, #12]
   14afe:	b10b      	cbz	r3, 14b04 <uarte_nrfx_isr_int+0x4a>
   14b00:	691b      	ldr	r3, [r3, #16]
   14b02:	b91b      	cbnz	r3, 14b0c <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   14b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   14b08:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   14b0c:	f382 8811 	msr	BASEPRI, r2
   14b10:	f3bf 8f6f 	isb	sy
	return dev->data;
   14b14:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   14b16:	68da      	ldr	r2, [r3, #12]
   14b18:	b1aa      	cbz	r2, 14b46 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14b1a:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   14b1e:	b121      	cbz	r1, 14b2a <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   14b20:	2100      	movs	r1, #0
   14b22:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   14b24:	68da      	ldr	r2, [r3, #12]
   14b26:	7b92      	ldrb	r2, [r2, #14]
   14b28:	b98a      	cbnz	r2, 14b4e <uarte_nrfx_isr_int+0x94>
   14b2a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   14b2e:	b122      	cbz	r2, 14b3a <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14b30:	2200      	movs	r2, #0
   14b32:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   14b36:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   14b3a:	68da      	ldr	r2, [r3, #12]
   14b3c:	6813      	ldr	r3, [r2, #0]
   14b3e:	b113      	cbz	r3, 14b46 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   14b40:	6851      	ldr	r1, [r2, #4]
   14b42:	4620      	mov	r0, r4
   14b44:	4798      	blx	r3
}
   14b46:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   14b48:	f7ff ff9e 	bl	14a88 <endtx_isr>
   14b4c:	e7c2      	b.n	14ad4 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   14b4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   14b52:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   14b56:	68db      	ldr	r3, [r3, #12]
   14b58:	7399      	strb	r1, [r3, #14]
			return;
   14b5a:	e7f4      	b.n	14b46 <uarte_nrfx_isr_int+0x8c>

00014b5c <uarte_nrfx_configure>:
{
   14b5c:	b570      	push	{r4, r5, r6, lr}
   14b5e:	b082      	sub	sp, #8
   14b60:	4605      	mov	r5, r0
   14b62:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   14b64:	794b      	ldrb	r3, [r1, #5]
   14b66:	2b01      	cmp	r3, #1
   14b68:	d006      	beq.n	14b78 <uarte_nrfx_configure+0x1c>
   14b6a:	2b03      	cmp	r3, #3
   14b6c:	d011      	beq.n	14b92 <uarte_nrfx_configure+0x36>
   14b6e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   14b72:	4618      	mov	r0, r3
   14b74:	b002      	add	sp, #8
   14b76:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   14b78:	2300      	movs	r3, #0
   14b7a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14b7e:	79a3      	ldrb	r3, [r4, #6]
   14b80:	2b03      	cmp	r3, #3
   14b82:	d140      	bne.n	14c06 <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   14b84:	79e3      	ldrb	r3, [r4, #7]
   14b86:	b143      	cbz	r3, 14b9a <uarte_nrfx_configure+0x3e>
   14b88:	2b01      	cmp	r3, #1
   14b8a:	d010      	beq.n	14bae <uarte_nrfx_configure+0x52>
   14b8c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14b90:	e7ef      	b.n	14b72 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14b92:	2310      	movs	r3, #16
   14b94:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   14b98:	e7f1      	b.n	14b7e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   14b9a:	2300      	movs	r3, #0
   14b9c:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   14ba0:	7923      	ldrb	r3, [r4, #4]
   14ba2:	b183      	cbz	r3, 14bc6 <uarte_nrfx_configure+0x6a>
   14ba4:	2b02      	cmp	r3, #2
   14ba6:	d02a      	beq.n	14bfe <uarte_nrfx_configure+0xa2>
   14ba8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14bac:	e7e1      	b.n	14b72 <uarte_nrfx_configure+0x16>
	return dev->config;
   14bae:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   14bb0:	685b      	ldr	r3, [r3, #4]
   14bb2:	f003 0201 	and.w	r2, r3, #1
   14bb6:	f003 0302 	and.w	r3, r3, #2
   14bba:	4313      	orrs	r3, r2
   14bbc:	d026      	beq.n	14c0c <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   14bbe:	2301      	movs	r3, #1
   14bc0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   14bc4:	e7ec      	b.n	14ba0 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   14bc6:	2300      	movs	r3, #0
   14bc8:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14bcc:	6821      	ldr	r1, [r4, #0]
   14bce:	4628      	mov	r0, r5
   14bd0:	f7f0 fb8c 	bl	52ec <baudrate_set>
   14bd4:	4603      	mov	r3, r0
   14bd6:	b9e0      	cbnz	r0, 14c12 <uarte_nrfx_configure+0xb6>
	return dev->config;
   14bd8:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   14bda:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14bdc:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   14be0:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   14be4:	f89d 2004 	ldrb.w	r2, [sp, #4]
   14be8:	4331      	orrs	r1, r6
   14bea:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14bec:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   14bf0:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   14bf2:	3204      	adds	r2, #4
   14bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
   14bf8:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   14bfc:	e7b9      	b.n	14b72 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14bfe:	230e      	movs	r3, #14
   14c00:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   14c04:	e7e2      	b.n	14bcc <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   14c06:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14c0a:	e7b2      	b.n	14b72 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   14c0c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14c10:	e7af      	b.n	14b72 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   14c12:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14c16:	e7ac      	b.n	14b72 <uarte_nrfx_configure+0x16>

00014c18 <uarte_nrfx_config_get>:
{
   14c18:	460b      	mov	r3, r1
	return dev->data;
   14c1a:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   14c1c:	6891      	ldr	r1, [r2, #8]
   14c1e:	6850      	ldr	r0, [r2, #4]
   14c20:	e883 0003 	stmia.w	r3, {r0, r1}
}
   14c24:	2000      	movs	r0, #0
   14c26:	4770      	bx	lr

00014c28 <uarte_nrfx_err_check>:
	return dev->config;
   14c28:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14c2a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14c2c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14c30:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   14c34:	4770      	bx	lr

00014c36 <is_tx_ready>:
	return dev->config;
   14c36:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14c38:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   14c3a:	685b      	ldr	r3, [r3, #4]
   14c3c:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c40:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   14c44:	b929      	cbnz	r1, 14c52 <is_tx_ready+0x1c>
   14c46:	b933      	cbnz	r3, 14c56 <is_tx_ready+0x20>
   14c48:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   14c4c:	b92b      	cbnz	r3, 14c5a <is_tx_ready+0x24>
   14c4e:	2000      	movs	r0, #0
   14c50:	4770      	bx	lr
   14c52:	2001      	movs	r0, #1
   14c54:	4770      	bx	lr
   14c56:	2000      	movs	r0, #0
   14c58:	4770      	bx	lr
   14c5a:	2001      	movs	r0, #1
}
   14c5c:	4770      	bx	lr

00014c5e <uarte_enable>:
	return dev->config;
   14c5e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14c60:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14c62:	2208      	movs	r2, #8
   14c64:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   14c68:	4770      	bx	lr

00014c6a <tx_start>:
{
   14c6a:	b510      	push	{r4, lr}
	return dev->config;
   14c6c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14c6e:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14c70:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14c74:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c78:	2300      	movs	r3, #0
   14c7a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14c7e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   14c82:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   14c86:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   14c8a:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14c8c:	685b      	ldr	r3, [r3, #4]
   14c8e:	f013 0f10 	tst.w	r3, #16
   14c92:	d102      	bne.n	14c9a <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c94:	2301      	movs	r3, #1
   14c96:	60a3      	str	r3, [r4, #8]
}
   14c98:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   14c9a:	2101      	movs	r1, #1
   14c9c:	f7ff ffdf 	bl	14c5e <uarte_enable>
    p_reg->INTENSET = mask;
   14ca0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   14ca4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   14ca8:	e7f4      	b.n	14c94 <tx_start+0x2a>

00014caa <uarte_nrfx_poll_in>:
{
   14caa:	b410      	push	{r4}
	return dev->data;
   14cac:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   14cae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14cb0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cb2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14cb6:	b152      	cbz	r2, 14cce <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   14cb8:	7d62      	ldrb	r2, [r4, #21]
   14cba:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14cbc:	2000      	movs	r0, #0
   14cbe:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   14cc2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cc6:	2201      	movs	r2, #1
   14cc8:	601a      	str	r2, [r3, #0]
}
   14cca:	bc10      	pop	{r4}
   14ccc:	4770      	bx	lr
		return -1;
   14cce:	f04f 30ff 	mov.w	r0, #4294967295
   14cd2:	e7fa      	b.n	14cca <uarte_nrfx_poll_in+0x20>

00014cd4 <uarte_nrfx_fifo_fill>:
{
   14cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14cd8:	4680      	mov	r8, r0
	return dev->data;
   14cda:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   14cdc:	68fb      	ldr	r3, [r7, #12]
   14cde:	899e      	ldrh	r6, [r3, #12]
   14ce0:	4296      	cmp	r6, r2
   14ce2:	bfa8      	it	ge
   14ce4:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   14ce6:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14ce8:	2201      	movs	r2, #1
   14cea:	f3bf 8f5b 	dmb	ish
   14cee:	e853 0f00 	ldrex	r0, [r3]
   14cf2:	2800      	cmp	r0, #0
   14cf4:	d103      	bne.n	14cfe <uarte_nrfx_fifo_fill+0x2a>
   14cf6:	e843 2400 	strex	r4, r2, [r3]
   14cfa:	2c00      	cmp	r4, #0
   14cfc:	d1f7      	bne.n	14cee <uarte_nrfx_fifo_fill+0x1a>
   14cfe:	f3bf 8f5b 	dmb	ish
   14d02:	d101      	bne.n	14d08 <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   14d04:	2300      	movs	r3, #0
   14d06:	e006      	b.n	14d16 <uarte_nrfx_fifo_fill+0x42>
		return 0;
   14d08:	2600      	movs	r6, #0
   14d0a:	e019      	b.n	14d40 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   14d0c:	68fc      	ldr	r4, [r7, #12]
   14d0e:	68a4      	ldr	r4, [r4, #8]
   14d10:	5ccd      	ldrb	r5, [r1, r3]
   14d12:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   14d14:	3301      	adds	r3, #1
   14d16:	42b3      	cmp	r3, r6
   14d18:	dbf8      	blt.n	14d0c <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   14d1a:	f04f 0320 	mov.w	r3, #32
   14d1e:	f3ef 8411 	mrs	r4, BASEPRI
   14d22:	f383 8812 	msr	BASEPRI_MAX, r3
   14d26:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   14d2a:	4640      	mov	r0, r8
   14d2c:	f7ff ff83 	bl	14c36 <is_tx_ready>
   14d30:	b948      	cbnz	r0, 14d46 <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   14d32:	68fb      	ldr	r3, [r7, #12]
   14d34:	2600      	movs	r6, #0
   14d36:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   14d38:	f384 8811 	msr	BASEPRI, r4
   14d3c:	f3bf 8f6f 	isb	sy
}
   14d40:	4630      	mov	r0, r6
   14d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   14d46:	68fb      	ldr	r3, [r7, #12]
   14d48:	4632      	mov	r2, r6
   14d4a:	6899      	ldr	r1, [r3, #8]
   14d4c:	4640      	mov	r0, r8
   14d4e:	f7ff ff8c 	bl	14c6a <tx_start>
   14d52:	e7f1      	b.n	14d38 <uarte_nrfx_fifo_fill+0x64>

00014d54 <uarte_nrfx_fifo_read>:
	return dev->config;
   14d54:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14d56:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   14d58:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14d5a:	2a00      	cmp	r2, #0
   14d5c:	dd0c      	ble.n	14d78 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14d5e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14d62:	b15a      	cbz	r2, 14d7c <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d64:	2200      	movs	r2, #0
   14d66:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   14d6a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   14d6e:	7d42      	ldrb	r2, [r0, #21]
   14d70:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d72:	2001      	movs	r0, #1
   14d74:	6018      	str	r0, [r3, #0]
}
   14d76:	4770      	bx	lr
	int num_rx = 0;
   14d78:	2000      	movs	r0, #0
   14d7a:	4770      	bx	lr
   14d7c:	2000      	movs	r0, #0
}
   14d7e:	4770      	bx	lr

00014d80 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   14d80:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14d82:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   14d84:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   14d86:	f04f 0020 	mov.w	r0, #32
   14d8a:	f3ef 8311 	mrs	r3, BASEPRI
   14d8e:	f380 8812 	msr	BASEPRI_MAX, r0
   14d92:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   14d96:	68c9      	ldr	r1, [r1, #12]
   14d98:	2000      	movs	r0, #0
   14d9a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   14d9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14da0:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   14da4:	f383 8811 	msr	BASEPRI, r3
   14da8:	f3bf 8f6f 	isb	sy
}
   14dac:	4770      	bx	lr

00014dae <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   14dae:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   14db0:	68db      	ldr	r3, [r3, #12]
   14db2:	2201      	movs	r2, #1
   14db4:	739a      	strb	r2, [r3, #14]
}
   14db6:	4770      	bx	lr

00014db8 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   14db8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14dba:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   14dbc:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   14dbe:	68db      	ldr	r3, [r3, #12]
   14dc0:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14dc2:	b94a      	cbnz	r2, 14dd8 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14dc4:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   14dc8:	b15a      	cbz	r2, 14de2 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   14dca:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14dce:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   14dd2:	d008      	beq.n	14de6 <uarte_nrfx_irq_tx_ready_complete+0x2e>
   14dd4:	2001      	movs	r0, #1
   14dd6:	e000      	b.n	14dda <uarte_nrfx_irq_tx_ready_complete+0x22>
   14dd8:	2000      	movs	r0, #0
	if (ready) {
   14dda:	b108      	cbz	r0, 14de0 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   14ddc:	2200      	movs	r2, #0
   14dde:	611a      	str	r2, [r3, #16]
}
   14de0:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14de2:	2000      	movs	r0, #0
   14de4:	e7f9      	b.n	14dda <uarte_nrfx_irq_tx_ready_complete+0x22>
   14de6:	2000      	movs	r0, #0
   14de8:	e7f7      	b.n	14dda <uarte_nrfx_irq_tx_ready_complete+0x22>

00014dea <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   14dea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14dec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14dee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   14df2:	3800      	subs	r0, #0
   14df4:	bf18      	it	ne
   14df6:	2001      	movne	r0, #1
   14df8:	4770      	bx	lr

00014dfa <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   14dfa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14dfc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14dfe:	2210      	movs	r2, #16
   14e00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14e04:	4770      	bx	lr

00014e06 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   14e06:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e08:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   14e0a:	2210      	movs	r2, #16
   14e0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   14e10:	4770      	bx	lr

00014e12 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   14e12:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e14:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14e16:	f44f 7200 	mov.w	r2, #512	; 0x200
   14e1a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14e1e:	4770      	bx	lr

00014e20 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   14e20:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e22:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   14e24:	f44f 7200 	mov.w	r2, #512	; 0x200
   14e28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   14e2c:	4770      	bx	lr

00014e2e <uarte_nrfx_irq_is_pending>:
{
   14e2e:	b538      	push	{r3, r4, r5, lr}
   14e30:	4604      	mov	r4, r0
	return dev->config;
   14e32:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e34:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   14e36:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   14e3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   14e3e:	d106      	bne.n	14e4e <uarte_nrfx_irq_is_pending+0x20>
   14e40:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   14e44:	f013 0f10 	tst.w	r3, #16
   14e48:	d107      	bne.n	14e5a <uarte_nrfx_irq_is_pending+0x2c>
   14e4a:	2000      	movs	r0, #0
}
   14e4c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   14e4e:	f7ff ffb3 	bl	14db8 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   14e52:	2800      	cmp	r0, #0
   14e54:	d0f4      	beq.n	14e40 <uarte_nrfx_irq_is_pending+0x12>
		||
   14e56:	2001      	movs	r0, #1
   14e58:	e7f8      	b.n	14e4c <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   14e5a:	4620      	mov	r0, r4
   14e5c:	f7ff ffc5 	bl	14dea <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   14e60:	2800      	cmp	r0, #0
   14e62:	d0f3      	beq.n	14e4c <uarte_nrfx_irq_is_pending+0x1e>
		||
   14e64:	2001      	movs	r0, #1
   14e66:	e7f1      	b.n	14e4c <uarte_nrfx_irq_is_pending+0x1e>

00014e68 <uarte_nrfx_irq_update>:
}
   14e68:	2001      	movs	r0, #1
   14e6a:	4770      	bx	lr

00014e6c <uarte_nrfx_irq_callback_set>:
	return dev->data;
   14e6c:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   14e6e:	68d8      	ldr	r0, [r3, #12]
   14e70:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   14e72:	68db      	ldr	r3, [r3, #12]
   14e74:	605a      	str	r2, [r3, #4]
}
   14e76:	4770      	bx	lr

00014e78 <wait_tx_ready>:
{
   14e78:	b570      	push	{r4, r5, r6, lr}
   14e7a:	4606      	mov	r6, r0
   14e7c:	e014      	b.n	14ea8 <wait_tx_ready+0x30>
		if (res) {
   14e7e:	b17d      	cbz	r5, 14ea0 <wait_tx_ready+0x28>
	__asm__ volatile(
   14e80:	f04f 0320 	mov.w	r3, #32
   14e84:	f3ef 8411 	mrs	r4, BASEPRI
   14e88:	f383 8812 	msr	BASEPRI_MAX, r3
   14e8c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   14e90:	4630      	mov	r0, r6
   14e92:	f7ff fed0 	bl	14c36 <is_tx_ready>
   14e96:	b9a0      	cbnz	r0, 14ec2 <wait_tx_ready+0x4a>
	__asm__ volatile(
   14e98:	f384 8811 	msr	BASEPRI, r4
   14e9c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   14ea0:	2021      	movs	r0, #33	; 0x21
   14ea2:	2100      	movs	r1, #0
   14ea4:	f7fc fee6 	bl	11c74 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   14ea8:	2464      	movs	r4, #100	; 0x64
   14eaa:	4630      	mov	r0, r6
   14eac:	f7ff fec3 	bl	14c36 <is_tx_ready>
   14eb0:	4605      	mov	r5, r0
   14eb2:	2800      	cmp	r0, #0
   14eb4:	d1e3      	bne.n	14e7e <wait_tx_ready+0x6>
   14eb6:	2001      	movs	r0, #1
   14eb8:	f000 f8b0 	bl	1501c <nrfx_busy_wait>
   14ebc:	3c01      	subs	r4, #1
   14ebe:	d1f4      	bne.n	14eaa <wait_tx_ready+0x32>
   14ec0:	e7dd      	b.n	14e7e <wait_tx_ready+0x6>
}
   14ec2:	4620      	mov	r0, r4
   14ec4:	bd70      	pop	{r4, r5, r6, pc}

00014ec6 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   14ec6:	b510      	push	{r4, lr}
   14ec8:	4604      	mov	r4, r0
   14eca:	2200      	movs	r2, #0
   14ecc:	2101      	movs	r1, #1
   14ece:	2002      	movs	r0, #2
   14ed0:	f7ef f972 	bl	41b8 <z_arm_irq_priority_set>
   14ed4:	2002      	movs	r0, #2
   14ed6:	f7ef f951 	bl	417c <arch_irq_enable>
   14eda:	2101      	movs	r1, #1
   14edc:	4620      	mov	r0, r4
   14ede:	f7f0 fb09 	bl	54f4 <uarte_instance_init>
   14ee2:	bd10      	pop	{r4, pc}

00014ee4 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   14ee4:	b510      	push	{r4, lr}
   14ee6:	4604      	mov	r4, r0
   14ee8:	2200      	movs	r2, #0
   14eea:	2101      	movs	r1, #1
   14eec:	2028      	movs	r0, #40	; 0x28
   14eee:	f7ef f963 	bl	41b8 <z_arm_irq_priority_set>
   14ef2:	2028      	movs	r0, #40	; 0x28
   14ef4:	f7ef f942 	bl	417c <arch_irq_enable>
   14ef8:	2101      	movs	r1, #1
   14efa:	4620      	mov	r0, r4
   14efc:	f7f0 fafa 	bl	54f4 <uarte_instance_init>
   14f00:	bd10      	pop	{r4, pc}

00014f02 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   14f02:	4770      	bx	lr

00014f04 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   14f04:	4770      	bx	lr

00014f06 <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   14f06:	4770      	bx	lr

00014f08 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   14f08:	1a40      	subs	r0, r0, r1
}
   14f0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14f0e:	4770      	bx	lr

00014f10 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14f10:	f100 0350 	add.w	r3, r0, #80	; 0x50
   14f14:	009b      	lsls	r3, r3, #2
   14f16:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14f1c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   14f20:	2200      	movs	r2, #0
   14f22:	601a      	str	r2, [r3, #0]
   14f24:	681b      	ldr	r3, [r3, #0]
}
   14f26:	4770      	bx	lr

00014f28 <absolute_time_to_cc>:
}
   14f28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14f2c:	4770      	bx	lr

00014f2e <full_int_lock>:
	__asm__ volatile(
   14f2e:	f04f 0320 	mov.w	r3, #32
   14f32:	f3ef 8011 	mrs	r0, BASEPRI
   14f36:	f383 8812 	msr	BASEPRI_MAX, r3
   14f3a:	f3bf 8f6f 	isb	sy
}
   14f3e:	4770      	bx	lr

00014f40 <full_int_unlock>:
	__asm__ volatile(
   14f40:	f380 8811 	msr	BASEPRI, r0
   14f44:	f3bf 8f6f 	isb	sy
}
   14f48:	4770      	bx	lr

00014f4a <set_absolute_alarm>:
{
   14f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f4c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   14f4e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   14f52:	f7f0 fb95 	bl	5680 <get_comparator>
   14f56:	4607      	mov	r7, r0
   14f58:	e019      	b.n	14f8e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   14f5a:	2013      	movs	r0, #19
   14f5c:	f003 fc7f 	bl	1885e <z_impl_k_busy_wait>
}
   14f60:	e022      	b.n	14fa8 <set_absolute_alarm+0x5e>
		event_clear(chan);
   14f62:	4630      	mov	r0, r6
   14f64:	f7ff ffd4 	bl	14f10 <event_clear>
		event_enable(chan);
   14f68:	4630      	mov	r0, r6
   14f6a:	f7f0 fb91 	bl	5690 <event_enable>
		set_comparator(chan, cc_val);
   14f6e:	4629      	mov	r1, r5
   14f70:	4630      	mov	r0, r6
   14f72:	f7f0 fb7b 	bl	566c <set_comparator>
		now2 = counter();
   14f76:	f7f0 fb9f 	bl	56b8 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   14f7a:	4284      	cmp	r4, r0
   14f7c:	d01e      	beq.n	14fbc <set_absolute_alarm+0x72>
   14f7e:	1c81      	adds	r1, r0, #2
   14f80:	4628      	mov	r0, r5
   14f82:	f7ff ffc1 	bl	14f08 <counter_sub>
	} while ((now2 != now) &&
   14f86:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14f8a:	d917      	bls.n	14fbc <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   14f8c:	462f      	mov	r7, r5
		now = counter();
   14f8e:	f7f0 fb93 	bl	56b8 <counter>
   14f92:	4604      	mov	r4, r0
		set_comparator(chan, now);
   14f94:	4601      	mov	r1, r0
   14f96:	4630      	mov	r0, r6
   14f98:	f7f0 fb68 	bl	566c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   14f9c:	4621      	mov	r1, r4
   14f9e:	4638      	mov	r0, r7
   14fa0:	f7ff ffb2 	bl	14f08 <counter_sub>
   14fa4:	2801      	cmp	r0, #1
   14fa6:	d0d8      	beq.n	14f5a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   14fa8:	1ca7      	adds	r7, r4, #2
   14faa:	4639      	mov	r1, r7
   14fac:	4628      	mov	r0, r5
   14fae:	f7ff ffab 	bl	14f08 <counter_sub>
   14fb2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14fb6:	d9d4      	bls.n	14f62 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   14fb8:	463d      	mov	r5, r7
   14fba:	e7d2      	b.n	14f62 <set_absolute_alarm+0x18>
}
   14fbc:	4628      	mov	r0, r5
   14fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014fc0 <compare_set>:
{
   14fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fc2:	b083      	sub	sp, #12
   14fc4:	4604      	mov	r4, r0
   14fc6:	4617      	mov	r7, r2
   14fc8:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   14fca:	f7f0 fb7b 	bl	56c4 <compare_int_lock>
   14fce:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   14fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14fd2:	9301      	str	r3, [sp, #4]
   14fd4:	9b08      	ldr	r3, [sp, #32]
   14fd6:	9300      	str	r3, [sp, #0]
   14fd8:	463a      	mov	r2, r7
   14fda:	462b      	mov	r3, r5
   14fdc:	4620      	mov	r0, r4
   14fde:	f7f0 fc5f 	bl	58a0 <compare_set_nolocks>
   14fe2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   14fe4:	4631      	mov	r1, r6
   14fe6:	4620      	mov	r0, r4
   14fe8:	f7f0 fbd0 	bl	578c <compare_int_unlock>
}
   14fec:	4628      	mov	r0, r5
   14fee:	b003      	add	sp, #12
   14ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014ff2 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   14ff2:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   14ff4:	2000      	movs	r0, #0
   14ff6:	f7ef fcaf 	bl	4958 <sys_arch_reboot>

00014ffa <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   14ffa:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   14ffc:	f7fd f842 	bl	12084 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   15000:	bd08      	pop	{r3, pc}

00015002 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   15002:	b510      	push	{r4, lr}
   15004:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   15006:	f7ee ffc5 	bl	3f94 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1500a:	f7ef f885 	bl	4118 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   1500e:	4620      	mov	r0, r4
   15010:	f7ff fff3 	bl	14ffa <hw_cc3xx_init_internal>
	return res;
}
   15014:	bd10      	pop	{r4, pc}

00015016 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   15016:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   15018:	4780      	blx	r0
}
   1501a:	bd08      	pop	{r3, pc}

0001501c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1501c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1501e:	f003 fc1e 	bl	1885e <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   15022:	bd08      	pop	{r3, pc}

00015024 <nrfx_clock_enable>:
{
   15024:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15026:	2000      	movs	r0, #0
   15028:	f7ef f8b8 	bl	419c <arch_irq_is_enabled>
   1502c:	b100      	cbz	r0, 15030 <nrfx_clock_enable+0xc>
}
   1502e:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15030:	f7ef f8a4 	bl	417c <arch_irq_enable>
   15034:	e7fb      	b.n	1502e <nrfx_clock_enable+0xa>

00015036 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   15036:	2301      	movs	r3, #1
   15038:	4083      	lsls	r3, r0
   1503a:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   1503e:	bf14      	ite	ne
   15040:	2001      	movne	r0, #1
   15042:	2000      	moveq	r0, #0
   15044:	4770      	bx	lr

00015046 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   15046:	b508      	push	{r3, lr}
  _DoInit();
   15048:	f7f1 f8ac 	bl	61a4 <_DoInit>
}
   1504c:	bd08      	pop	{r3, pc}

0001504e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1504e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   15050:	f7ff fff9 	bl	15046 <SEGGER_RTT_Init>

	return 0;
}
   15054:	2000      	movs	r0, #0
   15056:	bd08      	pop	{r3, pc}

00015058 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   15058:	4770      	bx	lr

0001505a <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
   1505a:	6903      	ldr	r3, [r0, #16]
   1505c:	6183      	str	r3, [r0, #24]
   1505e:	4770      	bx	lr

00015060 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   15060:	b510      	push	{r4, lr}
   15062:	4604      	mov	r4, r0
   15064:	f003 fc0a 	bl	1887c <_ZdlPv>
   15068:	4620      	mov	r0, r4
   1506a:	bd10      	pop	{r4, pc}

0001506c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   1506c:	b510      	push	{r4, lr}
   1506e:	4604      	mov	r4, r0
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   15070:	4413      	add	r3, r2
   15072:	f7f1 f92f 	bl	62d4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
   15076:	4620      	mov	r0, r4
   15078:	bd10      	pop	{r4, pc}

0001507a <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
   1507a:	6880      	ldr	r0, [r0, #8]
   1507c:	4770      	bx	lr

0001507e <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
   1507e:	b570      	push	{r4, r5, r6, lr}
   15080:	4604      	mov	r4, r0
   15082:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
   15084:	6980      	ldr	r0, [r0, #24]
   15086:	f000 f823 	bl	150d0 <_ZN6tflite14AlignPointerUpEPhj>
   1508a:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
   1508c:	4631      	mov	r1, r6
   1508e:	6960      	ldr	r0, [r4, #20]
   15090:	f000 f825 	bl	150de <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
   15094:	1b40      	subs	r0, r0, r5
   15096:	bd70      	pop	{r4, r5, r6, pc}

00015098 <_ZN6tflite18MicroErrorReporterD1Ev>:
 public:
  ~MicroErrorReporter() override {}
   15098:	4770      	bx	lr

0001509a <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
   1509a:	b508      	push	{r3, lr}
   1509c:	4608      	mov	r0, r1
  Log(format, args);
   1509e:	4611      	mov	r1, r2
   150a0:	f7f1 f95e 	bl	6360 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
   150a4:	2000      	movs	r0, #0
   150a6:	bd08      	pop	{r3, pc}

000150a8 <_ZN6tflite18MicroErrorReporterD0Ev>:
   150a8:	b510      	push	{r4, lr}
   150aa:	4604      	mov	r4, r0
   150ac:	f003 fbe6 	bl	1887c <_ZdlPv>
   150b0:	4620      	mov	r0, r4
   150b2:	bd10      	pop	{r4, pc}

000150b4 <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
   150b4:	b40f      	push	{r0, r1, r2, r3}
   150b6:	b500      	push	{lr}
   150b8:	b083      	sub	sp, #12
   150ba:	a904      	add	r1, sp, #16
   150bc:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
   150c0:	9101      	str	r1, [sp, #4]
  Log(format, args);
   150c2:	f7f1 f94d 	bl	6360 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
   150c6:	b003      	add	sp, #12
   150c8:	f85d eb04 	ldr.w	lr, [sp], #4
   150cc:	b004      	add	sp, #16
   150ce:	4770      	bx	lr

000150d0 <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   150d0:	4408      	add	r0, r1
   150d2:	3801      	subs	r0, #1
   150d4:	fbb0 f0f1 	udiv	r0, r0, r1
}
   150d8:	fb01 f000 	mul.w	r0, r1, r0
   150dc:	4770      	bx	lr

000150de <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   150de:	fbb0 f0f1 	udiv	r0, r0, r1
}
   150e2:	fb01 f000 	mul.w	r0, r1, r0
   150e6:	4770      	bx	lr

000150e8 <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   150e8:	4408      	add	r0, r1
   150ea:	3801      	subs	r0, #1
   150ec:	fbb0 f0f1 	udiv	r0, r0, r1
}
   150f0:	fb01 f000 	mul.w	r0, r1, r0
   150f4:	4770      	bx	lr

000150f6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  switch (type) {
   150f6:	3801      	subs	r0, #1
   150f8:	280f      	cmp	r0, #15
   150fa:	d83d      	bhi.n	15178 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x82>
   150fc:	e8df f000 	tbb	[pc, r0]
   15100:	2820180c 	.word	0x2820180c
   15104:	3414303c 	.word	0x3414303c
   15108:	38100824 	.word	0x38100824
   1510c:	1c3c3c2c 	.word	0x1c3c3c2c
      *size = sizeof(int16_t);
   15110:	2302      	movs	r3, #2
   15112:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15114:	2000      	movs	r0, #0
      break;
   15116:	4770      	bx	lr
      *size = sizeof(float);
   15118:	2304      	movs	r3, #4
   1511a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1511c:	2000      	movs	r0, #0
      break;
   1511e:	4770      	bx	lr
      *size = sizeof(double);
   15120:	2308      	movs	r3, #8
   15122:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15124:	2000      	movs	r0, #0
      break;
   15126:	4770      	bx	lr
      *size = sizeof(int16_t);
   15128:	2302      	movs	r3, #2
   1512a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1512c:	2000      	movs	r0, #0
      break;
   1512e:	4770      	bx	lr
      *size = sizeof(int32_t);
   15130:	2304      	movs	r3, #4
   15132:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15134:	2000      	movs	r0, #0
      break;
   15136:	4770      	bx	lr
      *size = sizeof(uint32_t);
   15138:	2304      	movs	r3, #4
   1513a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1513c:	2000      	movs	r0, #0
      break;
   1513e:	4770      	bx	lr
      *size = sizeof(uint8_t);
   15140:	2301      	movs	r3, #1
   15142:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15144:	2000      	movs	r0, #0
      break;
   15146:	4770      	bx	lr
      *size = sizeof(int8_t);
   15148:	2301      	movs	r3, #1
   1514a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1514c:	2000      	movs	r0, #0
      break;
   1514e:	4770      	bx	lr
      *size = sizeof(int64_t);
   15150:	2308      	movs	r3, #8
   15152:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15154:	2000      	movs	r0, #0
      break;
   15156:	4770      	bx	lr
      *size = sizeof(uint64_t);
   15158:	2308      	movs	r3, #8
   1515a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1515c:	2000      	movs	r0, #0
      break;
   1515e:	4770      	bx	lr
      *size = sizeof(bool);
   15160:	2301      	movs	r3, #1
   15162:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15164:	2000      	movs	r0, #0
      break;
   15166:	4770      	bx	lr
      *size = sizeof(float) * 2;
   15168:	2308      	movs	r3, #8
   1516a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1516c:	2000      	movs	r0, #0
      break;
   1516e:	4770      	bx	lr
      *size = sizeof(double) * 2;
   15170:	2310      	movs	r3, #16
   15172:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15174:	2000      	movs	r0, #0
      break;
   15176:	4770      	bx	lr
  return kTfLiteOk;
   15178:	2001      	movs	r0, #1
}
   1517a:	4770      	bx	lr

0001517c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
   1517c:	b530      	push	{r4, r5, lr}
   1517e:	b083      	sub	sp, #12
  TFLITE_DCHECK(out_bytes != nullptr);
   15180:	b129      	cbz	r1, 1518e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x12>
   15182:	460d      	mov	r5, r1

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
   15184:	6842      	ldr	r2, [r0, #4]
   15186:	b1c2      	cbz	r2, 151ba <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   15188:	2300      	movs	r3, #0
  int element_count = 1;
   1518a:	2401      	movs	r4, #1
   1518c:	e007      	b.n	1519e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  TFLITE_DCHECK(out_bytes != nullptr);
   1518e:	f003 fb8c 	bl	188aa <abort>
      element_count *= eval_tensor->dims->data[n];
   15192:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   15196:	6849      	ldr	r1, [r1, #4]
   15198:	fb01 f404 	mul.w	r4, r1, r4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   1519c:	3301      	adds	r3, #1
   1519e:	6811      	ldr	r1, [r2, #0]
   151a0:	4299      	cmp	r1, r3
   151a2:	dcf6      	bgt.n	15192 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
   151a4:	a901      	add	r1, sp, #4
   151a6:	7a00      	ldrb	r0, [r0, #8]
   151a8:	f7ff ffa5 	bl	150f6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   151ac:	b918      	cbnz	r0, 151b6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
   151ae:	9b01      	ldr	r3, [sp, #4]
   151b0:	fb03 f404 	mul.w	r4, r3, r4
   151b4:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
   151b6:	b003      	add	sp, #12
   151b8:	bd30      	pop	{r4, r5, pc}
  int element_count = 1;
   151ba:	2401      	movs	r4, #1
   151bc:	e7f2      	b.n	151a4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>

000151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
   151be:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   151c0:	6800      	ldr	r0, [r0, #0]
   151c2:	f7fe fdb6 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   151c6:	bd08      	pop	{r3, pc}

000151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
}
   151c8:	4770      	bx	lr

000151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>:
T ReadScalar(const void *p) {
   151ca:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   151cc:	6800      	ldr	r0, [r0, #0]
   151ce:	f7ff fffb 	bl	151c8 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
}
   151d2:	bd08      	pop	{r3, pc}

000151d4 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
}
   151d4:	4770      	bx	lr

000151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
   151d6:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   151d8:	8800      	ldrh	r0, [r0, #0]
   151da:	f7ff fffb 	bl	151d4 <_ZN11flatbuffers12EndianScalarItEET_S1_>
}
   151de:	bd08      	pop	{r3, pc}

000151e0 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
}
   151e0:	4770      	bx	lr

000151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
   151e2:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   151e4:	f990 0000 	ldrsb.w	r0, [r0]
   151e8:	f7ff fffa 	bl	151e0 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
}
   151ec:	bd08      	pop	{r3, pc}

000151ee <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
}
   151ee:	4770      	bx	lr

000151f0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:
  char* p2 = end - 1;
   151f0:	3901      	subs	r1, #1
  char* p1 = start;
   151f2:	4603      	mov	r3, r0
  while (p1 < p2) {
   151f4:	4288      	cmp	r0, r1
   151f6:	d20a      	bcs.n	1520e <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x1e>
char* ReverseStringInPlace(char* start, char* end) {
   151f8:	b410      	push	{r4}
    char tmp = *p1;
   151fa:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
   151fc:	780c      	ldrb	r4, [r1, #0]
   151fe:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
   15202:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
   15206:	428b      	cmp	r3, r1
   15208:	d3f7      	bcc.n	151fa <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0xa>
}
   1520a:	bc10      	pop	{r4}
   1520c:	4770      	bx	lr
   1520e:	4770      	bx	lr

00015210 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   15210:	b410      	push	{r4}
   15212:	4604      	mov	r4, r0
  while (*current != 0) {
   15214:	7803      	ldrb	r3, [r0, #0]
   15216:	b10b      	cbz	r3, 1521c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
   15218:	3001      	adds	r0, #1
  while (*current != 0) {
   1521a:	e7fb      	b.n	15214 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x4>
  char* current_end = main + (main_max_length - 1);
   1521c:	3901      	subs	r1, #1
   1521e:	4421      	add	r1, r4
  while ((*to_append != 0) && (current < current_end)) {
   15220:	7813      	ldrb	r3, [r2, #0]
   15222:	b12b      	cbz	r3, 15230 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
   15224:	4288      	cmp	r0, r1
   15226:	d203      	bcs.n	15230 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    *current = *to_append;
   15228:	f800 3b01 	strb.w	r3, [r0], #1
    ++to_append;
   1522c:	3201      	adds	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   1522e:	e7f7      	b.n	15220 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  *current = 0;
   15230:	2300      	movs	r3, #0
   15232:	7003      	strb	r3, [r0, #0]
}
   15234:	bc10      	pop	{r4}
   15236:	4770      	bx	lr

00015238 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   15238:	b538      	push	{r3, r4, r5, lr}
   1523a:	4605      	mov	r5, r0
   1523c:	4608      	mov	r0, r1
   1523e:	460c      	mov	r4, r1
   15240:	e008      	b.n	15254 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1c>
      character = '0' + digit;
   15242:	3330      	adds	r3, #48	; 0x30
   15244:	b2db      	uxtb	r3, r3
    *buffer++ = character;
   15246:	f804 3b01 	strb.w	r3, [r4], #1
    i /= base;
   1524a:	fbb5 f3f2 	udiv	r3, r5, r2
  } while (i > 0);
   1524e:	42aa      	cmp	r2, r5
   15250:	d809      	bhi.n	15266 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    i /= base;
   15252:	461d      	mov	r5, r3
    int32_t digit = i % base;
   15254:	fbb5 f3f2 	udiv	r3, r5, r2
   15258:	fb02 5313 	mls	r3, r2, r3, r5
    if (digit < 10) {
   1525c:	2b09      	cmp	r3, #9
   1525e:	ddf0      	ble.n	15242 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xa>
      character = 'a' + (digit - 10);
   15260:	3357      	adds	r3, #87	; 0x57
   15262:	b2db      	uxtb	r3, r3
   15264:	e7ef      	b.n	15246 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xe>
  *buffer = 0;
   15266:	2300      	movs	r3, #0
   15268:	7023      	strb	r3, [r4, #0]
  ReverseStringInPlace(start, buffer);
   1526a:	4621      	mov	r1, r4
   1526c:	f7ff ffc0 	bl	151f0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
}
   15270:	4620      	mov	r0, r4
   15272:	bd38      	pop	{r3, r4, r5, pc}

00015274 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>:
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
   15274:	b508      	push	{r3, lr}
  if (i < 0) {
   15276:	2800      	cmp	r0, #0
   15278:	db03      	blt.n	15282 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0xe>
  return FastUInt32ToBufferLeft(u, buffer, 10);
   1527a:	220a      	movs	r2, #10
   1527c:	f7ff ffdc 	bl	15238 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   15280:	bd08      	pop	{r3, pc}
    *buffer++ = '-';
   15282:	222d      	movs	r2, #45	; 0x2d
   15284:	f801 2b01 	strb.w	r2, [r1], #1
    u = -u;
   15288:	4240      	negs	r0, r0
   1528a:	e7f6      	b.n	1527a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0x6>

0001528c <_ZN12_GLOBAL__N_111StrCatInt32EPcii>:
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
   1528c:	b530      	push	{r4, r5, lr}
   1528e:	b08d      	sub	sp, #52	; 0x34
   15290:	4604      	mov	r4, r0
   15292:	460d      	mov	r5, r1
  FastInt32ToBufferLeft(number, number_string);
   15294:	4669      	mov	r1, sp
   15296:	4610      	mov	r0, r2
   15298:	f7ff ffec 	bl	15274 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
  return StrCatStr(main, main_max_length, number_string);
   1529c:	466a      	mov	r2, sp
   1529e:	4629      	mov	r1, r5
   152a0:	4620      	mov	r0, r4
   152a2:	f7ff ffb5 	bl	15210 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   152a6:	b00d      	add	sp, #52	; 0x34
   152a8:	bd30      	pop	{r4, r5, pc}

000152aa <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>:
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
   152aa:	b530      	push	{r4, r5, lr}
   152ac:	b08d      	sub	sp, #52	; 0x34
   152ae:	4604      	mov	r4, r0
   152b0:	460d      	mov	r5, r1
   152b2:	4610      	mov	r0, r2
  FastUInt32ToBufferLeft(number, number_string, base);
   152b4:	461a      	mov	r2, r3
   152b6:	4669      	mov	r1, sp
   152b8:	f7ff ffbe 	bl	15238 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   152bc:	466a      	mov	r2, sp
   152be:	4629      	mov	r1, r5
   152c0:	4620      	mov	r0, r4
   152c2:	f7ff ffa5 	bl	15210 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   152c6:	b00d      	add	sp, #52	; 0x34
   152c8:	bd30      	pop	{r4, r5, pc}

000152ca <_ZN12_GLOBAL__N_111FormatInt32EPci>:
int FormatInt32(char* output, int32_t i) {
   152ca:	b510      	push	{r4, lr}
   152cc:	4604      	mov	r4, r0
   152ce:	4608      	mov	r0, r1
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
   152d0:	4621      	mov	r1, r4
   152d2:	f7ff ffcf 	bl	15274 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
}
   152d6:	1b00      	subs	r0, r0, r4
   152d8:	bd10      	pop	{r4, pc}

000152da <_ZN12_GLOBAL__N_112FormatUInt32EPcj>:
int FormatUInt32(char* output, uint32_t i) {
   152da:	b510      	push	{r4, lr}
   152dc:	4604      	mov	r4, r0
   152de:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   152e0:	220a      	movs	r2, #10
   152e2:	4621      	mov	r1, r4
   152e4:	f7ff ffa8 	bl	15238 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   152e8:	1b00      	subs	r0, r0, r4
   152ea:	bd10      	pop	{r4, pc}

000152ec <_ZN12_GLOBAL__N_19FormatHexEPcj>:
int FormatHex(char* output, uint32_t i) {
   152ec:	b510      	push	{r4, lr}
   152ee:	4604      	mov	r4, r0
   152f0:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   152f2:	2210      	movs	r2, #16
   152f4:	4621      	mov	r1, r4
   152f6:	f7ff ff9f 	bl	15238 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   152fa:	1b00      	subs	r0, r0, r4
   152fc:	bd10      	pop	{r4, pc}

000152fe <_ZN12_GLOBAL__N_111FormatFloatEPcf>:
int FormatFloat(char* output, float i) {
   152fe:	b510      	push	{r4, lr}
   15300:	4604      	mov	r4, r0
   15302:	4608      	mov	r0, r1
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   15304:	4621      	mov	r1, r4
   15306:	f7f1 f8c5 	bl	6494 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
}
   1530a:	1b00      	subs	r0, r0, r4
   1530c:	bd10      	pop	{r4, pc}

0001530e <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   1530e:	4602      	mov	r2, r0
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   15310:	2300      	movs	r3, #0
  int result = 1;
   15312:	2001      	movs	r0, #1
  for (int i = 0; i < dims.size; ++i) {
   15314:	6811      	ldr	r1, [r2, #0]
   15316:	4299      	cmp	r1, r3
   15318:	dd06      	ble.n	15328 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
   1531a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1531e:	6849      	ldr	r1, [r1, #4]
   15320:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
   15324:	3301      	adds	r3, #1
   15326:	e7f5      	b.n	15314 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x6>
  }
  return result;
}
   15328:	4770      	bx	lr

0001532a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
   1532a:	b538      	push	{r3, r4, r5, lr}
   1532c:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   1532e:	f7ff ff4c 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15332:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15334:	4628      	mov	r0, r5
   15336:	f7ff ff4e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1533a:	280a      	cmp	r0, #10
   1533c:	d90e      	bls.n	1535c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
   1533e:	f105 000a 	add.w	r0, r5, #10
   15342:	f7ff ff48 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   15346:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15348:	b150      	cbz	r0, 15360 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x36>
   1534a:	4620      	mov	r0, r4
   1534c:	f7ff ff37 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   15350:	4420      	add	r0, r4
  if (subgraph->operators() != nullptr) {
   15352:	b138      	cbz	r0, 15364 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x3a>
  uoffset_t size() const { return EndianScalar(length_); }
   15354:	6800      	ldr	r0, [r0, #0]
   15356:	f7fe fcec 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   1535a:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1535c:	2000      	movs	r0, #0
   1535e:	e7f2      	b.n	15346 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15360:	2000      	movs	r0, #0
   15362:	e7f6      	b.n	15352 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    return 0;
   15364:	2000      	movs	r0, #0
   15366:	e7f8      	b.n	1535a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>

00015368 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
   15368:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   1536a:	7800      	ldrb	r0, [r0, #0]
   1536c:	f7ff ff3f 	bl	151ee <_ZN11flatbuffers12EndianScalarIhEET_S1_>
}
   15370:	bd08      	pop	{r3, pc}

00015372 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
}
   15372:	4770      	bx	lr

00015374 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
   15374:	4770      	bx	lr

00015376 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
   15376:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   15378:	6800      	ldr	r0, [r0, #0]
   1537a:	f7ff fffb 	bl	15374 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
}
   1537e:	bd08      	pop	{r3, pc}

00015380 <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
   15380:	4770      	bx	lr

00015382 <_ZN6tflite10MicroGraphD0Ev>:
   15382:	b510      	push	{r4, lr}
   15384:	4604      	mov	r4, r0
   15386:	f003 fa79 	bl	1887c <_ZdlPv>
   1538a:	4620      	mov	r0, r4
   1538c:	bd10      	pop	{r4, pc}

0001538e <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
   1538e:	6101      	str	r1, [r0, #16]
}
   15390:	4770      	bx	lr

00015392 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
   15392:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15396:	4606      	mov	r6, r0
  int previous_subgraph_idx = current_subgraph_index_;
   15398:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   1539c:	2700      	movs	r7, #0
   1539e:	e017      	b.n	153d0 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3e>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
   153a0:	6961      	ldr	r1, [r4, #20]
        init_data_size = 0;
   153a2:	2200      	movs	r2, #0
      if (registration->init) {
   153a4:	681b      	ldr	r3, [r3, #0]
   153a6:	b113      	cbz	r3, 153ae <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1c>
            registration->init(context_, init_data, init_data_size);
   153a8:	6870      	ldr	r0, [r6, #4]
   153aa:	4798      	blx	r3
        node->user_data =
   153ac:	6120      	str	r0, [r4, #16]
    for (size_t i = 0; i < operators_size; ++i) {
   153ae:	3501      	adds	r5, #1
   153b0:	4545      	cmp	r5, r8
   153b2:	d20c      	bcs.n	153ce <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   153b4:	6933      	ldr	r3, [r6, #16]
   153b6:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
   153ba:	242c      	movs	r4, #44	; 0x2c
   153bc:	fb04 3405 	mla	r4, r4, r5, r3
      const TfLiteRegistration* registration =
   153c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   153c2:	695a      	ldr	r2, [r3, #20]
   153c4:	2a20      	cmp	r2, #32
   153c6:	d1eb      	bne.n	153a0 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
   153c8:	69a1      	ldr	r1, [r4, #24]
        init_data_size = node->custom_initial_data_size;
   153ca:	69e2      	ldr	r2, [r4, #28]
   153cc:	e7ea      	b.n	153a4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   153ce:	3701      	adds	r7, #1
   153d0:	69b3      	ldr	r3, [r6, #24]
  uoffset_t size() const { return EndianScalar(length_); }
   153d2:	6818      	ldr	r0, [r3, #0]
   153d4:	f7fe fcad 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   153d8:	4287      	cmp	r7, r0
   153da:	d207      	bcs.n	153ec <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
   153dc:	6177      	str	r7, [r6, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   153de:	4639      	mov	r1, r7
   153e0:	68b0      	ldr	r0, [r6, #8]
   153e2:	f7f1 f9ad 	bl	6740 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   153e6:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
   153e8:	2500      	movs	r5, #0
   153ea:	e7e1      	b.n	153b0 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1e>
  current_subgraph_index_ = previous_subgraph_idx;
   153ec:	f8c6 9014 	str.w	r9, [r6, #20]
}
   153f0:	2000      	movs	r0, #0
   153f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000153f6 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
   153f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153fa:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
   153fc:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   15400:	2600      	movs	r6, #0
   15402:	e013      	b.n	1542c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x36>
    for (size_t i = 0; i < operators_size; ++i) {
   15404:	3401      	adds	r4, #1
   15406:	42bc      	cmp	r4, r7
   15408:	d20f      	bcs.n	1542a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x34>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   1540a:	692b      	ldr	r3, [r5, #16]
   1540c:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
   15410:	232c      	movs	r3, #44	; 0x2c
   15412:	fb03 2304 	mla	r3, r3, r4, r2
      const TfLiteRegistration* registration =
   15416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
   15418:	2a00      	cmp	r2, #0
   1541a:	d0f3      	beq.n	15404 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
   1541c:	6852      	ldr	r2, [r2, #4]
   1541e:	2a00      	cmp	r2, #0
   15420:	d0f0      	beq.n	15404 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
        registration->free(context_, node->user_data);
   15422:	6919      	ldr	r1, [r3, #16]
   15424:	6868      	ldr	r0, [r5, #4]
   15426:	4790      	blx	r2
   15428:	e7ec      	b.n	15404 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   1542a:	3601      	adds	r6, #1
   1542c:	69ab      	ldr	r3, [r5, #24]
   1542e:	6818      	ldr	r0, [r3, #0]
   15430:	f7fe fc7f 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   15434:	4286      	cmp	r6, r0
   15436:	d207      	bcs.n	15448 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x52>
    current_subgraph_index_ = subgraph_idx;
   15438:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   1543a:	4631      	mov	r1, r6
   1543c:	68a8      	ldr	r0, [r5, #8]
   1543e:	f7f1 f97f 	bl	6740 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   15442:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
   15444:	2400      	movs	r4, #0
   15446:	e7de      	b.n	15406 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
   15448:	f8c5 8014 	str.w	r8, [r5, #20]
}
   1544c:	2000      	movs	r0, #0
   1544e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015452 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
   15452:	b538      	push	{r3, r4, r5, lr}
   15454:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
   15456:	4620      	mov	r0, r4
   15458:	f7ff feb7 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   1545c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   1545e:	4628      	mov	r0, r5
   15460:	f7ff feb9 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15464:	2808      	cmp	r0, #8
   15466:	d90d      	bls.n	15484 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x32>
   15468:	f105 0008 	add.w	r0, r5, #8
   1546c:	f7ff feb3 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   15470:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15472:	b148      	cbz	r0, 15488 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x36>
   15474:	4620      	mov	r0, r4
   15476:	f7ff fea2 	bl	151be <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   1547a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
   1547c:	6820      	ldr	r0, [r4, #0]
   1547e:	f7fe fc58 	bl	13d32 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   15482:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15484:	2000      	movs	r0, #0
   15486:	e7f3      	b.n	15470 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15488:	2400      	movs	r4, #0
   1548a:	e7f7      	b.n	1547c <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x2a>

0001548c <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
   1548c:	b508      	push	{r3, lr}
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
   1548e:	68c3      	ldr	r3, [r0, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
   15490:	6e98      	ldr	r0, [r3, #104]	; 0x68
   15492:	6803      	ldr	r3, [r0, #0]
   15494:	68db      	ldr	r3, [r3, #12]
   15496:	4798      	blx	r3
}
   15498:	bd08      	pop	{r3, pc}

0001549a <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:
  return interpreter->allocator_.RequestScratchBufferInArena(
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
   1549a:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
   1549c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  return handle->data;
}
   154a0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   154a4:	4770      	bx	lr

000154a6 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
   154a6:	b570      	push	{r4, r5, r6, lr}
   154a8:	b082      	sub	sp, #8
   154aa:	460b      	mov	r3, r1
  MicroInterpreter* interpreter =
   154ac:	68c4      	ldr	r4, [r0, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   154ae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
   154b0:	6802      	ldr	r2, [r0, #0]
   154b2:	6855      	ldr	r5, [r2, #4]
   154b4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   154b6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   154ba:	6821      	ldr	r1, [r4, #0]
   154bc:	9600      	str	r6, [sp, #0]
   154be:	47a8      	blx	r5
}
   154c0:	b002      	add	sp, #8
   154c2:	bd70      	pop	{r4, r5, r6, pc}

000154c4 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
   154c4:	68c2      	ldr	r2, [r0, #12]
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   154c6:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   154c8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
   154cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
              .tensors[tensor_idx];
   154d0:	6858      	ldr	r0, [r3, #4]
   154d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   154d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   154da:	4770      	bx	lr

000154dc <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
   154dc:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
   154de:	336c      	adds	r3, #108	; 0x6c
   154e0:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
}
   154e2:	2000      	movs	r0, #0
   154e4:	4770      	bx	lr

000154e6 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                           int* buffer_idx) {
   154e6:	b508      	push	{r3, lr}
   154e8:	4613      	mov	r3, r2
  MicroInterpreter* interpreter =
   154ea:	68c0      	ldr	r0, [r0, #12]
  return interpreter->allocator_.RequestScratchBufferInArena(
   154ec:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
   154f0:	6e80      	ldr	r0, [r0, #104]	; 0x68
   154f2:	f7f2 fac3 	bl	7a7c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
}
   154f6:	bd08      	pop	{r3, pc}

000154f8 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
   154f8:	b40e      	push	{r1, r2, r3}
   154fa:	b500      	push	{lr}
   154fc:	b082      	sub	sp, #8
   154fe:	aa03      	add	r2, sp, #12
   15500:	f852 1b04 	ldr.w	r1, [r2], #4
  MicroInterpreter* interpreter =
   15504:	68c3      	ldr	r3, [r0, #12]
  va_start(args, format);
   15506:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
   15508:	6898      	ldr	r0, [r3, #8]
   1550a:	6803      	ldr	r3, [r0, #0]
   1550c:	689b      	ldr	r3, [r3, #8]
   1550e:	4798      	blx	r3
}
   15510:	b002      	add	sp, #8
   15512:	f85d eb04 	ldr.w	lr, [sp], #4
   15516:	b003      	add	sp, #12
   15518:	4770      	bx	lr

0001551a <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   1551a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1551e:	4604      	mov	r4, r0
   15520:	460d      	mov	r5, r1
   15522:	461e      	mov	r6, r3
   15524:	f8dd 801c 	ldr.w	r8, [sp, #28]
      output_tensors_(nullptr) {
   15528:	6001      	str	r1, [r0, #0]
   1552a:	6042      	str	r2, [r0, #4]
   1552c:	f8c0 8008 	str.w	r8, [r0, #8]
   15530:	f100 070c 	add.w	r7, r0, #12
   15534:	225c      	movs	r2, #92	; 0x5c
   15536:	2100      	movs	r1, #0
   15538:	4638      	mov	r0, r7
   1553a:	f003 f9dd 	bl	188f8 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   1553e:	4642      	mov	r2, r8
   15540:	9906      	ldr	r1, [sp, #24]
   15542:	4630      	mov	r0, r6
   15544:	f000 f90a 	bl	1575c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
   15548:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
   1554a:	66a0      	str	r0, [r4, #104]	; 0x68
   1554c:	462a      	mov	r2, r5
   1554e:	4639      	mov	r1, r7
   15550:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   15554:	f7f1 f9ea 	bl	692c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
   15558:	2300      	movs	r3, #0
   1555a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
   1555e:	2201      	movs	r2, #1
   15560:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
   15564:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   15568:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   1556c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  Init(profiler);
   15570:	9908      	ldr	r1, [sp, #32]
   15572:	4620      	mov	r0, r4
   15574:	f7f1 fc6a 	bl	6e4c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
   15578:	4620      	mov	r0, r4
   1557a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001557e <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   1557e:	b510      	push	{r4, lr}
   15580:	4604      	mov	r4, r0
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   15582:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  if (graph_.GetAllocations() != nullptr) {
   15584:	b113      	cbz	r3, 1558c <_ZN6tflite16MicroInterpreterD1Ev+0xe>
    graph_.FreeSubgraphs();
   15586:	306c      	adds	r0, #108	; 0x6c
   15588:	f7ff ff35 	bl	153f6 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
   1558c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   15590:	f7ff fef6 	bl	15380 <_ZN6tflite10MicroGraphD1Ev>
}
   15594:	4620      	mov	r0, r4
   15596:	bd10      	pop	{r4, pc}

00015598 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
   15598:	b508      	push	{r3, lr}
  return graph_.ResetVariableTensors();
   1559a:	306c      	adds	r0, #108	; 0x6c
   1559c:	f7f1 fb62 	bl	6c64 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
   155a0:	bd08      	pop	{r3, pc}

000155a2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  void* Allocate(size_t size, size_t alignment_hint) override {
   155a2:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   155a4:	6840      	ldr	r0, [r0, #4]
   155a6:	6803      	ldr	r3, [r0, #0]
   155a8:	68db      	ldr	r3, [r3, #12]
   155aa:	4798      	blx	r3
  }
   155ac:	bd08      	pop	{r3, pc}

000155ae <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   155ae:	4770      	bx	lr

000155b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
   155b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   155b2:	6844      	ldr	r4, [r0, #4]
   155b4:	6843      	ldr	r3, [r0, #4]
   155b6:	6885      	ldr	r5, [r0, #8]
   155b8:	441d      	add	r5, r3
   155ba:	42a5      	cmp	r5, r4
   155bc:	d91a      	bls.n	155f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x44>
        &(scratch_buffer_requests[i - tensor_count_]);
   155be:	1ae3      	subs	r3, r4, r3
    internal::ScratchBufferRequest* current_request =
   155c0:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
    ScratchBufferHandle* current_handle =
   155c4:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    AllocationInfo* current = &info_[i];
   155c8:	6806      	ldr	r6, [r0, #0]
   155ca:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   155ce:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
   155d2:	f8c5 e004 	str.w	lr, [r5, #4]
    current->bytes = current_request->bytes;
   155d6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   155da:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    current->first_created = current_request->node_idx;
   155de:	f8dc 3004 	ldr.w	r3, [ip, #4]
   155e2:	60ab      	str	r3, [r5, #8]
    current->last_used = current_request->node_idx;
   155e4:	60eb      	str	r3, [r5, #12]
    current->offline_offset = kOnlinePlannedBuffer;
   155e6:	f04f 33ff 	mov.w	r3, #4294967295
   155ea:	612b      	str	r3, [r5, #16]
    current->needs_allocating = true;
   155ec:	2301      	movs	r3, #1
   155ee:	752b      	strb	r3, [r5, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   155f0:	441c      	add	r4, r3
   155f2:	e7df      	b.n	155b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x4>
}
   155f4:	2000      	movs	r0, #0
   155f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000155f8 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   155f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155fc:	b085      	sub	sp, #20
   155fe:	9001      	str	r0, [sp, #4]
   15600:	4688      	mov	r8, r1
   15602:	4693      	mov	fp, r2
   15604:	461f      	mov	r7, r3
   15606:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  for (size_t i = 0; i < allocation_info_size; ++i) {
   1560a:	2400      	movs	r4, #0
  int planner_index = 0;
   1560c:	4626      	mov	r6, r4
   1560e:	e000      	b.n	15612 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x1a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   15610:	3401      	adds	r4, #1
   15612:	454c      	cmp	r4, r9
   15614:	d21a      	bcs.n	1564c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x54>
    const AllocationInfo* current = &allocation_info[i];
   15616:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1561a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    if (current->needs_allocating) {
   1561e:	7d2b      	ldrb	r3, [r5, #20]
   15620:	2b00      	cmp	r3, #0
   15622:	d0f5      	beq.n	15610 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
      int offset = -1;
   15624:	f04f 33ff 	mov.w	r3, #4294967295
   15628:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
   1562a:	f8d8 3000 	ldr.w	r3, [r8]
   1562e:	f8d3 a014 	ldr.w	sl, [r3, #20]
   15632:	ab03      	add	r3, sp, #12
   15634:	4632      	mov	r2, r6
   15636:	9901      	ldr	r1, [sp, #4]
   15638:	4640      	mov	r0, r8
   1563a:	47d0      	blx	sl
   1563c:	4603      	mov	r3, r0
   1563e:	b930      	cbnz	r0, 1564e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x56>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   15640:	686a      	ldr	r2, [r5, #4]
   15642:	9b03      	ldr	r3, [sp, #12]
   15644:	445b      	add	r3, fp
   15646:	6013      	str	r3, [r2, #0]
      ++planner_index;
   15648:	3601      	adds	r6, #1
   1564a:	e7e1      	b.n	15610 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
  return kTfLiteOk;
   1564c:	2300      	movs	r3, #0
}
   1564e:	4618      	mov	r0, r3
   15650:	b005      	add	sp, #20
   15652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015656 <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   15656:	4770      	bx	lr

00015658 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
   15658:	b508      	push	{r3, lr}
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   1565a:	6840      	ldr	r0, [r0, #4]
   1565c:	6803      	ldr	r3, [r0, #0]
   1565e:	68db      	ldr	r3, [r3, #12]
   15660:	2210      	movs	r2, #16
   15662:	4798      	blx	r3
}
   15664:	bd08      	pop	{r3, pc}

00015666 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
void MicroAllocator::ResetTempAllocations() {
   15666:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
   15668:	6840      	ldr	r0, [r0, #4]
   1566a:	6803      	ldr	r3, [r0, #0]
   1566c:	695b      	ldr	r3, [r3, #20]
   1566e:	4798      	blx	r3
}
   15670:	bd08      	pop	{r3, pc}

00015672 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
   15672:	b508      	push	{r3, lr}
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   15674:	6840      	ldr	r0, [r0, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
   15676:	6803      	ldr	r3, [r0, #0]
   15678:	68db      	ldr	r3, [r3, #12]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   1567a:	2204      	movs	r2, #4
   1567c:	2140      	movs	r1, #64	; 0x40
   1567e:	4798      	blx	r3
}
   15680:	bd08      	pop	{r3, pc}

00015682 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   15682:	4770      	bx	lr

00015684 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
   15684:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   15686:	b161      	cbz	r1, 156a2 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
   15688:	4613      	mov	r3, r2
   1568a:	460c      	mov	r4, r1

  if (scratch_buffer_request_count_ == 0) {
   1568c:	6942      	ldr	r2, [r0, #20]
   1568e:	b132      	cbz	r2, 1569e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
   15690:	6840      	ldr	r0, [r0, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
   15692:	6802      	ldr	r2, [r0, #0]
   15694:	68d5      	ldr	r5, [r2, #12]
      memory_allocator_->AllocateFromTail(
   15696:	2204      	movs	r2, #4
   15698:	0099      	lsls	r1, r3, #2
   1569a:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
   1569c:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
   1569e:	2000      	movs	r0, #0
   156a0:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   156a2:	f003 f902 	bl	188aa <abort>

000156a6 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   156a6:	b510      	push	{r4, lr}
   156a8:	4604      	mov	r4, r0
   156aa:	f003 f8e7 	bl	1887c <_ZdlPv>
   156ae:	4620      	mov	r0, r4
   156b0:	bd10      	pop	{r4, pc}

000156b2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   156b2:	b510      	push	{r4, lr}
   156b4:	4604      	mov	r4, r0
   156b6:	f003 f8e1 	bl	1887c <_ZdlPv>
   156ba:	4620      	mov	r0, r4
   156bc:	bd10      	pop	{r4, pc}

000156be <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   156be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   156c2:	b082      	sub	sp, #8
   156c4:	4682      	mov	sl, r0
   156c6:	4689      	mov	r9, r1
   156c8:	4617      	mov	r7, r2
   156ca:	4698      	mov	r8, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
   156cc:	2500      	movs	r5, #0
   156ce:	e00a      	b.n	156e6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x28>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   156d0:	68e1      	ldr	r1, [r4, #12]
   156d2:	9301      	str	r3, [sp, #4]
   156d4:	9100      	str	r1, [sp, #0]
   156d6:	68a3      	ldr	r3, [r4, #8]
   156d8:	4651      	mov	r1, sl
   156da:	4648      	mov	r0, r9
   156dc:	f000 f8c9 	bl	15872 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   156e0:	4603      	mov	r3, r0
   156e2:	bb08      	cbnz	r0, 15728 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   156e4:	3501      	adds	r5, #1
   156e6:	4545      	cmp	r5, r8
   156e8:	d21d      	bcs.n	15726 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x68>
    const AllocationInfo* current = &allocation_info[i];
   156ea:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   156ee:	00e3      	lsls	r3, r4, #3
   156f0:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    if (current->needs_allocating) {
   156f4:	7d26      	ldrb	r6, [r4, #20]
   156f6:	2e00      	cmp	r6, #0
   156f8:	d0f4      	beq.n	156e4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
          AlignSizeUp(current->bytes, kBufferAlignment);
   156fa:	2110      	movs	r1, #16
   156fc:	58f8      	ldr	r0, [r7, r3]
   156fe:	f7ff fcf3 	bl	150e8 <_ZN6tflite11AlignSizeUpEjj>
   15702:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   15704:	6923      	ldr	r3, [r4, #16]
   15706:	f1b3 3fff 	cmp.w	r3, #4294967295
   1570a:	d1e1      	bne.n	156d0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
        TF_LITE_ENSURE_STATUS(
   1570c:	f8d9 3000 	ldr.w	r3, [r9]
   15710:	689e      	ldr	r6, [r3, #8]
   15712:	68e3      	ldr	r3, [r4, #12]
   15714:	9300      	str	r3, [sp, #0]
   15716:	68a3      	ldr	r3, [r4, #8]
   15718:	4651      	mov	r1, sl
   1571a:	4648      	mov	r0, r9
   1571c:	47b0      	blx	r6
   1571e:	4603      	mov	r3, r0
   15720:	2800      	cmp	r0, #0
   15722:	d0df      	beq.n	156e4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
   15724:	e000      	b.n	15728 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  return kTfLiteOk;
   15726:	2300      	movs	r3, #0
}
   15728:	4618      	mov	r0, r3
   1572a:	b002      	add	sp, #8
   1572c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00015730 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   15730:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
   15732:	b178      	cbz	r0, 15754 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x24>
   15734:	460c      	mov	r4, r1
   15736:	4605      	mov	r5, r0
  TFLITE_DCHECK(error_reporter != nullptr);
   15738:	b171      	cbz	r1, 15758 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      sizeof(MicroAllocator), alignof(MicroAllocator));
   1573a:	6803      	ldr	r3, [r0, #0]
   1573c:	68db      	ldr	r3, [r3, #12]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   1573e:	2204      	movs	r2, #4
   15740:	211c      	movs	r1, #28
   15742:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   15744:	4606      	mov	r6, r0
   15746:	b118      	cbz	r0, 15750 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x20>
   15748:	4622      	mov	r2, r4
   1574a:	4629      	mov	r1, r5
   1574c:	f7f2 f988 	bl	7a60 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   15750:	4630      	mov	r0, r6
   15752:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
   15754:	f003 f8a9 	bl	188aa <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   15758:	f003 f8a7 	bl	188aa <abort>

0001575c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   1575c:	b570      	push	{r4, r5, r6, lr}
   1575e:	4604      	mov	r4, r0
   15760:	460e      	mov	r6, r1
   15762:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   15764:	2110      	movs	r1, #16
   15766:	f7ff fcb3 	bl	150d0 <_ZN6tflite14AlignPointerUpEPhj>
   1576a:	4601      	mov	r1, r0
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   1576c:	4434      	add	r4, r6
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   1576e:	1a22      	subs	r2, r4, r0
   15770:	4628      	mov	r0, r5
   15772:	f7f0 fdbd 	bl	62f0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   15776:	4629      	mov	r1, r5
   15778:	f7ff ffda 	bl	15730 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   1577c:	bd70      	pop	{r4, r5, r6, pc}

0001577e <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
   1577e:	b508      	push	{r3, lr}
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
   15780:	2300      	movs	r3, #0
   15782:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   15784:	6840      	ldr	r0, [r0, #4]
   15786:	6803      	ldr	r3, [r0, #0]
   15788:	689b      	ldr	r3, [r3, #8]
   1578a:	2204      	movs	r2, #4
   1578c:	2160      	movs	r1, #96	; 0x60
   1578e:	4798      	blx	r3
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}
   15790:	bd08      	pop	{r3, pc}

00015792 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
   15792:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
   15794:	6840      	ldr	r0, [r0, #4]
   15796:	f7ff fc70 	bl	1507a <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
   1579a:	2104      	movs	r1, #4
   1579c:	f7ff fc98 	bl	150d0 <_ZN6tflite14AlignPointerUpEPhj>
                     alignof(internal::ScratchBufferRequest)));
}
   157a0:	bd08      	pop	{r3, pc}

000157a2 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
   157a2:	b570      	push	{r4, r5, r6, lr}
   157a4:	4605      	mov	r5, r0
   157a6:	460e      	mov	r6, r1
  ResetTempAllocations();
   157a8:	6803      	ldr	r3, [r0, #0]
   157aa:	689b      	ldr	r3, [r3, #8]
   157ac:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
   157ae:	4628      	mov	r0, r5
   157b0:	f7ff ffef 	bl	15792 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   157b4:	2300      	movs	r3, #0
   157b6:	e000      	b.n	157ba <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
   157b8:	3301      	adds	r3, #1
   157ba:	6969      	ldr	r1, [r5, #20]
   157bc:	4299      	cmp	r1, r3
   157be:	d907      	bls.n	157d0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   157c0:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   157c4:	6854      	ldr	r4, [r2, #4]
   157c6:	f1b4 3fff 	cmp.w	r4, #4294967295
   157ca:	d1f5      	bne.n	157b8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
      requests[i].node_idx = node_id;
   157cc:	6056      	str	r6, [r2, #4]
   157ce:	e7f3      	b.n	157b8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   157d0:	6868      	ldr	r0, [r5, #4]
   157d2:	6803      	ldr	r3, [r0, #0]
   157d4:	689b      	ldr	r3, [r3, #8]
   157d6:	310c      	adds	r1, #12
   157d8:	2204      	movs	r2, #4
   157da:	00c9      	lsls	r1, r1, #3
   157dc:	4798      	blx	r3
}
   157de:	bd70      	pop	{r4, r5, r6, pc}

000157e0 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
   157e0:	6880      	ldr	r0, [r0, #8]
   157e2:	4770      	bx	lr

000157e4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   157e4:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   157e6:	b119      	cbz	r1, 157f0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   157e8:	b122      	cbz	r2, 157f4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   157ea:	601a      	str	r2, [r3, #0]
}
   157ec:	2000      	movs	r0, #0
   157ee:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   157f0:	f003 f85b 	bl	188aa <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   157f4:	f003 f859 	bl	188aa <abort>

000157f8 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
    TfLiteIntArray** result) {
   157f8:	b508      	push	{r3, lr}
   157fa:	4613      	mov	r3, r2
  return internal::FlatBufferVectorToTfLiteTypeArray(
   157fc:	460a      	mov	r2, r1
   157fe:	68c1      	ldr	r1, [r0, #12]
   15800:	6840      	ldr	r0, [r0, #4]
   15802:	f7ff ffef 	bl	157e4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
}
   15806:	bd08      	pop	{r3, pc}

00015808 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   15808:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   1580a:	b119      	cbz	r1, 15814 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   1580c:	b122      	cbz	r2, 15818 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   1580e:	601a      	str	r2, [r3, #0]
}
   15810:	2000      	movs	r0, #0
   15812:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   15814:	f003 f849 	bl	188aa <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   15818:	f003 f847 	bl	188aa <abort>

0001581c <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   1581c:	4770      	bx	lr

0001581e <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   1581e:	6880      	ldr	r0, [r0, #8]
   15820:	4770      	bx	lr

00015822 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   15822:	b510      	push	{r4, lr}
   15824:	4604      	mov	r4, r0
}
   15826:	f003 f829 	bl	1887c <_ZdlPv>
   1582a:	4620      	mov	r0, r4
   1582c:	bd10      	pop	{r4, pc}

0001582e <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   1582e:	b4f0      	push	{r4, r5, r6, r7}
    for (int i = 1; i < size; ++i) {
   15830:	2301      	movs	r3, #1
    any_swapped = false;
   15832:	2700      	movs	r7, #0
   15834:	e000      	b.n	15838 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
    for (int i = 1; i < size; ++i) {
   15836:	3301      	adds	r3, #1
   15838:	4293      	cmp	r3, r2
   1583a:	da16      	bge.n	1586a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
      if (values[i - 1] < values[i]) {
   1583c:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   15840:	3c01      	subs	r4, #1
   15842:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   15846:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   1584a:	42b5      	cmp	r5, r6
   1584c:	daf3      	bge.n	15836 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
        values[i - 1] = values[i];
   1584e:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        values[i] = value_temp;
   15852:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        const int id_temp = ids[i - 1];
   15856:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        ids[i - 1] = ids[i];
   1585a:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
   1585e:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
        ids[i] = id_temp;
   15862:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
        any_swapped = true;
   15866:	2701      	movs	r7, #1
   15868:	e7e5      	b.n	15836 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
   1586a:	2f00      	cmp	r7, #0
   1586c:	d1e0      	bne.n	15830 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   1586e:	bcf0      	pop	{r4, r5, r6, r7}
   15870:	4770      	bx	lr

00015872 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   15872:	b570      	push	{r4, r5, r6, lr}
   15874:	b082      	sub	sp, #8
  BufferRequirements* current = &requirements_[buffer_count_];
   15876:	68c5      	ldr	r5, [r0, #12]
   15878:	6886      	ldr	r6, [r0, #8]
   1587a:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   1587e:	6804      	ldr	r4, [r0, #0]
   15880:	68a4      	ldr	r4, [r4, #8]
   15882:	9e06      	ldr	r6, [sp, #24]
   15884:	9600      	str	r6, [sp, #0]
   15886:	47a0      	blx	r4
   15888:	b918      	cbnz	r0, 15892 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
   1588a:	9b07      	ldr	r3, [sp, #28]
   1588c:	606b      	str	r3, [r5, #4]
}
   1588e:	b002      	add	sp, #8
   15890:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
   15892:	2001      	movs	r0, #1
   15894:	e7fb      	b.n	1588e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

00015896 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
   15896:	68c0      	ldr	r0, [r0, #12]
   15898:	6849      	ldr	r1, [r1, #4]
  const BufferRequirements* entry_requirements =
   1589a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   1589e:	6888      	ldr	r0, [r1, #8]
   158a0:	4298      	cmp	r0, r3
   158a2:	dc04      	bgt.n	158ae <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x18>
  if (first_time_used > entry_requirements->last_time_used) {
   158a4:	68cb      	ldr	r3, [r1, #12]
   158a6:	4293      	cmp	r3, r2
   158a8:	db03      	blt.n	158b2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  return true;
   158aa:	2001      	movs	r0, #1
   158ac:	4770      	bx	lr
    return false;
   158ae:	2000      	movs	r0, #0
   158b0:	4770      	bx	lr
    return false;
   158b2:	2000      	movs	r0, #0
}
   158b4:	4770      	bx	lr

000158b6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   158b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   158b8:	4605      	mov	r5, r0
   158ba:	4616      	mov	r6, r2
   158bc:	461f      	mov	r7, r3
  if (start == nullptr) {
   158be:	b1c9      	cbz	r1, 158f4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (start->next_entry_index == -1) {
   158c0:	688b      	ldr	r3, [r1, #8]
   158c2:	f1b3 3fff 	cmp.w	r3, #4294967295
   158c6:	d01c      	beq.n	15902 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4c>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
   158c8:	6984      	ldr	r4, [r0, #24]
   158ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   158ce:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   158d2:	463b      	mov	r3, r7
   158d4:	4632      	mov	r2, r6
   158d6:	4621      	mov	r1, r4
   158d8:	4628      	mov	r0, r5
   158da:	f7ff ffdc 	bl	15896 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   158de:	b998      	cbnz	r0, 15908 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
    if (candidate_next_entry->next_entry_index == -1) {
   158e0:	68a4      	ldr	r4, [r4, #8]
   158e2:	f1b4 3fff 	cmp.w	r4, #4294967295
   158e6:	d00e      	beq.n	15906 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x50>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   158e8:	69a9      	ldr	r1, [r5, #24]
   158ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    candidate_next_entry =
   158ee:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   158f2:	e7ee      	b.n	158d2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   158f4:	6984      	ldr	r4, [r0, #24]
   158f6:	6a03      	ldr	r3, [r0, #32]
   158f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   158fc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   15900:	e7e7      	b.n	158d2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
      return nullptr;
   15902:	2400      	movs	r4, #0
   15904:	e000      	b.n	15908 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
  ListEntry* result = nullptr;
   15906:	2400      	movs	r4, #0
}
   15908:	4620      	mov	r0, r4
   1590a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001590c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   1590c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   15910:	2b00      	cmp	r3, #0
   15912:	f000 80d5 	beq.w	15ac0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b4>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   15916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1591a:	b083      	sub	sp, #12
   1591c:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   1591e:	6886      	ldr	r6, [r0, #8]
   15920:	2e00      	cmp	r6, #0
   15922:	f000 80ca 	beq.w	15aba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
  need_to_calculate_offsets_ = false;
   15926:	2000      	movs	r0, #0
   15928:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   1592c:	4603      	mov	r3, r0
   1592e:	e00e      	b.n	1594e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x42>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   15930:	6925      	ldr	r5, [r4, #16]
   15932:	5852      	ldr	r2, [r2, r1]
   15934:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
   15938:	6962      	ldr	r2, [r4, #20]
   1593a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   1593e:	68e2      	ldr	r2, [r4, #12]
   15940:	4411      	add	r1, r2
   15942:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15944:	6849      	ldr	r1, [r1, #4]
   15946:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
   1594a:	3001      	adds	r0, #1
  for (int i = 0; i < buffer_count_; ++i) {
   1594c:	3301      	adds	r3, #1
   1594e:	68a2      	ldr	r2, [r4, #8]
   15950:	429a      	cmp	r2, r3
   15952:	dd15      	ble.n	15980 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   15954:	68e2      	ldr	r2, [r4, #12]
   15956:	0119      	lsls	r1, r3, #4
   15958:	eb02 1503 	add.w	r5, r2, r3, lsl #4
   1595c:	686d      	ldr	r5, [r5, #4]
   1595e:	f1b5 3fff 	cmp.w	r5, #4294967295
   15962:	d1e5      	bne.n	15930 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      idx_from_tail--;
   15964:	3e01      	subs	r6, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   15966:	6925      	ldr	r5, [r4, #16]
   15968:	5852      	ldr	r2, [r2, r1]
   1596a:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   1596e:	6962      	ldr	r2, [r4, #20]
   15970:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      buffer_offsets_[i] = -1;
   15974:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15976:	f04f 31ff 	mov.w	r1, #4294967295
   1597a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   1597e:	e7e5      	b.n	1594c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   15980:	6923      	ldr	r3, [r4, #16]
                     &buffer_ids_sorted_[idx_from_head],
   15982:	6961      	ldr	r1, [r4, #20]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   15984:	1a12      	subs	r2, r2, r0
   15986:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1598a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1598e:	f7ff ff4e 	bl	1582e <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  first_entry_index_ = 0;
   15992:	2300      	movs	r3, #0
   15994:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
   15996:	2301      	movs	r3, #1
   15998:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   1599a:	f8d4 a018 	ldr.w	sl, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   1599e:	f04f 33ff 	mov.w	r3, #4294967295
   159a2:	f8ca 3008 	str.w	r3, [sl, #8]
  int buffer_id = buffer_ids_sorted_[0];
   159a6:	6963      	ldr	r3, [r4, #20]
   159a8:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   159aa:	f8ca 3004 	str.w	r3, [sl, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   159ae:	68e2      	ldr	r2, [r4, #12]
   159b0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   159b4:	6852      	ldr	r2, [r2, #4]
   159b6:	f1b2 3fff 	cmp.w	r2, #4294967295
   159ba:	d007      	beq.n	159cc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc0>
  first_entry->offset = buffer_offsets_[buffer_id];
   159bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   159be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159c2:	f8ca 3000 	str.w	r3, [sl]
  for (int i = 1; i < buffer_count_; ++i) {
   159c6:	f04f 0901 	mov.w	r9, #1
   159ca:	e036      	b.n	15a3a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
    buffer_offsets_[buffer_id] = 0;
   159cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   159ce:	2100      	movs	r1, #0
   159d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   159d4:	e7f2      	b.n	159bc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb0>
      ListEntry* prior_entry = nullptr;
   159d6:	2100      	movs	r1, #0
    int candidate_offset = 0;
   159d8:	460d      	mov	r5, r1
   159da:	f8cd a000 	str.w	sl, [sp]
   159de:	f8cd 9004 	str.w	r9, [sp, #4]
   159e2:	4681      	mov	r9, r0
   159e4:	4692      	mov	sl, r2
   159e6:	e004      	b.n	159f2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
        if (next_entry == nullptr) {
   159e8:	b1d9      	cbz	r1, 15a22 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x116>
        const int gap = next_entry->offset - candidate_offset;
   159ea:	680b      	ldr	r3, [r1, #0]
   159ec:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
   159ee:	459b      	cmp	fp, r3
   159f0:	dd12      	ble.n	15a18 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   159f2:	460e      	mov	r6, r1
   159f4:	4653      	mov	r3, sl
   159f6:	464a      	mov	r2, r9
   159f8:	4620      	mov	r0, r4
   159fa:	f7ff ff5c 	bl	158b6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
   159fe:	4601      	mov	r1, r0
        if (prior_entry) {
   15a00:	2e00      	cmp	r6, #0
   15a02:	d0f1      	beq.n	159e8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
              &requirements_[prior_entry->requirements_index];
   15a04:	6873      	ldr	r3, [r6, #4]
   15a06:	011a      	lsls	r2, r3, #4
              prior_entry->offset + candidate_requirements->size;
   15a08:	6833      	ldr	r3, [r6, #0]
   15a0a:	f858 2002 	ldr.w	r2, [r8, r2]
          const int prior_entry_offset =
   15a0e:	4413      	add	r3, r2
          if (prior_entry_offset > candidate_offset) {
   15a10:	429d      	cmp	r5, r3
   15a12:	dae9      	bge.n	159e8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
            candidate_offset = prior_entry_offset;
   15a14:	461d      	mov	r5, r3
   15a16:	e7e7      	b.n	159e8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
   15a18:	f8dd a000 	ldr.w	sl, [sp]
   15a1c:	f8dd 9004 	ldr.w	r9, [sp, #4]
   15a20:	e01f      	b.n	15a62 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
   15a22:	f8dd a000 	ldr.w	sl, [sp]
   15a26:	f8dd 9004 	ldr.w	r9, [sp, #4]
   15a2a:	e01a      	b.n	15a62 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
      first_entry->next_entry_index = first_entry_index_;
   15a2c:	6a23      	ldr	r3, [r4, #32]
   15a2e:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
   15a32:	6227      	str	r7, [r4, #32]
      first_entry = new_entry;
   15a34:	46e2      	mov	sl, ip
  for (int i = 1; i < buffer_count_; ++i) {
   15a36:	f109 0901 	add.w	r9, r9, #1
   15a3a:	68a3      	ldr	r3, [r4, #8]
   15a3c:	454b      	cmp	r3, r9
   15a3e:	dd3c      	ble.n	15aba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
   15a40:	6963      	ldr	r3, [r4, #20]
   15a42:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   15a46:	f8d4 800c 	ldr.w	r8, [r4, #12]
   15a4a:	013a      	lsls	r2, r7, #4
   15a4c:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    const int wanted_size = wanted_requirements->size;
   15a50:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   15a54:	689a      	ldr	r2, [r3, #8]
   15a56:	4610      	mov	r0, r2
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   15a58:	68da      	ldr	r2, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   15a5a:	685d      	ldr	r5, [r3, #4]
   15a5c:	f1b5 3fff 	cmp.w	r5, #4294967295
   15a60:	d0b9      	beq.n	159d6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    buffer_offsets_[buffer_id] = candidate_offset;
   15a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15a64:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   15a68:	69a2      	ldr	r2, [r4, #24]
   15a6a:	69e3      	ldr	r3, [r4, #28]
   15a6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15a70:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
   15a74:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
   15a78:	f8cc 7004 	str.w	r7, [ip, #4]
    const int new_entry_index = next_free_entry_;
   15a7c:	69e7      	ldr	r7, [r4, #28]
    ++next_free_entry_;
   15a7e:	1c7b      	adds	r3, r7, #1
   15a80:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   15a82:	f8da 3000 	ldr.w	r3, [sl]
   15a86:	42ab      	cmp	r3, r5
   15a88:	dcd0      	bgt.n	15a2c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x120>
      ListEntry* current_entry = first_entry;
   15a8a:	4650      	mov	r0, sl
   15a8c:	e000      	b.n	15a90 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
        current_entry = next_entry;
   15a8e:	4630      	mov	r0, r6
        const int next_entry_index = current_entry->next_entry_index;
   15a90:	6883      	ldr	r3, [r0, #8]
        if (next_entry_index == -1) {
   15a92:	f1b3 3fff 	cmp.w	r3, #4294967295
   15a96:	d00c      	beq.n	15ab2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a6>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   15a98:	69a2      	ldr	r2, [r4, #24]
   15a9a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15a9e:	eb02 0681 	add.w	r6, r2, r1, lsl #2
        if (next_entry->offset > candidate_offset) {
   15aa2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   15aa6:	42aa      	cmp	r2, r5
   15aa8:	ddf1      	ble.n	15a8e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x182>
          new_entry->next_entry_index = current_entry->next_entry_index;
   15aaa:	f8cc 3008 	str.w	r3, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
   15aae:	6087      	str	r7, [r0, #8]
          break;
   15ab0:	e7c1      	b.n	15a36 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
          current_entry->next_entry_index = new_entry_index;
   15ab2:	6087      	str	r7, [r0, #8]
          new_entry->next_entry_index = -1;
   15ab4:	f8cc 3008 	str.w	r3, [ip, #8]
          break;
   15ab8:	e7bd      	b.n	15a36 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
}
   15aba:	b003      	add	sp, #12
   15abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ac0:	4770      	bx	lr

00015ac2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   15ac2:	b570      	push	{r4, r5, r6, lr}
   15ac4:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   15ac6:	f7ff ff21 	bl	1590c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   15aca:	68a3      	ldr	r3, [r4, #8]
   15acc:	b1d3      	cbz	r3, 15b04 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   15ace:	69a6      	ldr	r6, [r4, #24]
   15ad0:	6a23      	ldr	r3, [r4, #32]
   15ad2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15ad6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  size_t max_size = 0;
   15ada:	2000      	movs	r0, #0
   15adc:	e007      	b.n	15aee <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x2c>
    if (entry->next_entry_index == -1) {
   15ade:	689b      	ldr	r3, [r3, #8]
   15ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
   15ae4:	d00f      	beq.n	15b06 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   15ae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15aea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (entry) {
   15aee:	b153      	cbz	r3, 15b06 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
        &requirements_[entry->requirements_index];
   15af0:	68e5      	ldr	r5, [r4, #12]
   15af2:	685a      	ldr	r2, [r3, #4]
   15af4:	0111      	lsls	r1, r2, #4
    const size_t current_size = entry->offset + requirements->size;
   15af6:	681a      	ldr	r2, [r3, #0]
   15af8:	5869      	ldr	r1, [r5, r1]
   15afa:	440a      	add	r2, r1
    if (current_size > max_size) {
   15afc:	4290      	cmp	r0, r2
   15afe:	d2ee      	bcs.n	15ade <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
      max_size = current_size;
   15b00:	4610      	mov	r0, r2
   15b02:	e7ec      	b.n	15ade <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
    return 0;
   15b04:	2000      	movs	r0, #0
}
   15b06:	bd70      	pop	{r4, r5, r6, pc}

00015b08 <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
   15b08:	3001      	adds	r0, #1
}
   15b0a:	0080      	lsls	r0, r0, #2
   15b0c:	4770      	bx	lr

00015b0e <TfLiteIntArrayEqualsArray>:
  if (a == NULL) return (b_size == 0);
   15b0e:	b180      	cbz	r0, 15b32 <TfLiteIntArrayEqualsArray+0x24>
                              const int b_data[]) {
   15b10:	b430      	push	{r4, r5}
   15b12:	4605      	mov	r5, r0
  if (a->size != b_size) return 0;
   15b14:	6804      	ldr	r4, [r0, #0]
   15b16:	428c      	cmp	r4, r1
   15b18:	d111      	bne.n	15b3e <TfLiteIntArrayEqualsArray+0x30>
  int i = 0;
   15b1a:	2300      	movs	r3, #0
  for (; i < a->size; i++)
   15b1c:	429c      	cmp	r4, r3
   15b1e:	dd0c      	ble.n	15b3a <TfLiteIntArrayEqualsArray+0x2c>
    if (a->data[i] != b_data[i]) return 0;
   15b20:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   15b24:	6848      	ldr	r0, [r1, #4]
   15b26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   15b2a:	4288      	cmp	r0, r1
   15b2c:	d10a      	bne.n	15b44 <TfLiteIntArrayEqualsArray+0x36>
  for (; i < a->size; i++)
   15b2e:	3301      	adds	r3, #1
   15b30:	e7f4      	b.n	15b1c <TfLiteIntArrayEqualsArray+0xe>
  if (a == NULL) return (b_size == 0);
   15b32:	fab1 f081 	clz	r0, r1
   15b36:	0940      	lsrs	r0, r0, #5
}
   15b38:	4770      	bx	lr
  return 1;
   15b3a:	2001      	movs	r0, #1
   15b3c:	e000      	b.n	15b40 <TfLiteIntArrayEqualsArray+0x32>
  if (a->size != b_size) return 0;
   15b3e:	2000      	movs	r0, #0
}
   15b40:	bc30      	pop	{r4, r5}
   15b42:	4770      	bx	lr
    if (a->data[i] != b_data[i]) return 0;
   15b44:	2000      	movs	r0, #0
   15b46:	e7fb      	b.n	15b40 <TfLiteIntArrayEqualsArray+0x32>

00015b48 <TfLiteIntArrayEqual>:
  if (a == b) return 1;
   15b48:	4288      	cmp	r0, r1
   15b4a:	d008      	beq.n	15b5e <TfLiteIntArrayEqual+0x16>
  if (a == NULL || b == NULL) return 0;
   15b4c:	b148      	cbz	r0, 15b62 <TfLiteIntArrayEqual+0x1a>
   15b4e:	b151      	cbz	r1, 15b66 <TfLiteIntArrayEqual+0x1e>
int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
   15b50:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
   15b52:	460a      	mov	r2, r1
   15b54:	f852 1b04 	ldr.w	r1, [r2], #4
   15b58:	f7ff ffd9 	bl	15b0e <TfLiteIntArrayEqualsArray>
}
   15b5c:	bd08      	pop	{r3, pc}
  if (a == b) return 1;
   15b5e:	2001      	movs	r0, #1
   15b60:	4770      	bx	lr
  if (a == NULL || b == NULL) return 0;
   15b62:	2000      	movs	r0, #0
   15b64:	4770      	bx	lr
   15b66:	2000      	movs	r0, #0
}
   15b68:	4770      	bx	lr

00015b6a <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   15b6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15b6e:	460e      	mov	r6, r1
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   15b70:	2401      	movs	r4, #1
   15b72:	fa04 fc00 	lsl.w	ip, r4, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   15b76:	1a12      	subs	r2, r2, r0
   15b78:	f1a2 0120 	sub.w	r1, r2, #32
   15b7c:	f1c2 0320 	rsb	r3, r2, #32
   15b80:	fa04 f101 	lsl.w	r1, r4, r1
   15b84:	fa24 f303 	lsr.w	r3, r4, r3
   15b88:	ea41 0703 	orr.w	r7, r1, r3
   15b8c:	fa04 f502 	lsl.w	r5, r4, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   15b90:	f10c 30ff 	add.w	r0, ip, #4294967295
   15b94:	f7ea fc56 	bl	444 <__aeabi_i2d>
   15b98:	4680      	mov	r8, r0
   15b9a:	4689      	mov	r9, r1
   15b9c:	4628      	mov	r0, r5
   15b9e:	4639      	mov	r1, r7
   15ba0:	f7ea fc8c 	bl	4bc <__aeabi_l2d>
   15ba4:	4602      	mov	r2, r0
   15ba6:	460b      	mov	r3, r1
   15ba8:	4640      	mov	r0, r8
   15baa:	4649      	mov	r1, r9
   15bac:	f7ea fcb4 	bl	518 <__aeabi_dmul>
   15bb0:	4680      	mov	r8, r0
   15bb2:	4689      	mov	r9, r1
      (1ll << input_left_shift);
   15bb4:	f1a6 0120 	sub.w	r1, r6, #32
   15bb8:	f1c6 0320 	rsb	r3, r6, #32
   15bbc:	fa04 f101 	lsl.w	r1, r4, r1
   15bc0:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
   15bc4:	fa04 f006 	lsl.w	r0, r4, r6
   15bc8:	4319      	orrs	r1, r3
   15bca:	f7ea fc77 	bl	4bc <__aeabi_l2d>
   15bce:	4602      	mov	r2, r0
   15bd0:	460b      	mov	r3, r1
  const double max_input_rescaled =
   15bd2:	4640      	mov	r0, r8
   15bd4:	4649      	mov	r1, r9
   15bd6:	f7ea fdc9 	bl	76c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   15bda:	f7eb fec5 	bl	1968 <floor>
   15bde:	f7ea ff35 	bl	a4c <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   15be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                             const TfLiteNode* node, int index) {
   15be6:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   15be8:	680b      	ldr	r3, [r1, #0]
   15bea:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   15bee:	2a00      	cmp	r2, #0
   15bf0:	db10      	blt.n	15c14 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   15bf2:	428a      	cmp	r2, r1
   15bf4:	da10      	bge.n	15c18 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   15bf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   15bfa:	f1b1 3fff 	cmp.w	r1, #4294967295
   15bfe:	d00d      	beq.n	15c1c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   15c00:	2900      	cmp	r1, #0
   15c02:	db0d      	blt.n	15c20 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   15c04:	6883      	ldr	r3, [r0, #8]
   15c06:	b113      	cbz	r3, 15c0e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   15c08:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   15c0c:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   15c0e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   15c10:	4798      	blx	r3
   15c12:	e7fb      	b.n	15c0c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   15c14:	2000      	movs	r0, #0
   15c16:	e7f9      	b.n	15c0c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15c18:	2000      	movs	r0, #0
   15c1a:	e7f7      	b.n	15c0c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15c1c:	2000      	movs	r0, #0
   15c1e:	e7f5      	b.n	15c0c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15c20:	2000      	movs	r0, #0
  return GetMutableInput(context, node, index);
   15c22:	e7f3      	b.n	15c0c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>

00015c24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
   15c24:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   15c26:	684b      	ldr	r3, [r1, #4]
   15c28:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   15c2c:	2a00      	cmp	r2, #0
   15c2e:	db10      	blt.n	15c52 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
   15c30:	4291      	cmp	r1, r2
   15c32:	dd10      	ble.n	15c56 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   15c34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   15c38:	f1b1 3fff 	cmp.w	r1, #4294967295
   15c3c:	d00d      	beq.n	15c5a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   15c3e:	2900      	cmp	r1, #0
   15c40:	db0d      	blt.n	15c5e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   15c42:	6883      	ldr	r3, [r0, #8]
   15c44:	b113      	cbz	r3, 15c4c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   15c46:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   15c4a:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   15c4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
   15c4e:	4798      	blx	r3
   15c50:	e7fb      	b.n	15c4a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   15c52:	2000      	movs	r0, #0
   15c54:	e7f9      	b.n	15c4a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15c56:	2000      	movs	r0, #0
   15c58:	e7f7      	b.n	15c4a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15c5a:	2000      	movs	r0, #0
   15c5c:	e7f5      	b.n	15c4a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15c5e:	2000      	movs	r0, #0
   15c60:	e7f3      	b.n	15c4a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>

00015c62 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                           const TfLiteNode* node, int index) {
   15c62:	b508      	push	{r3, lr}
  return GetInput(context, node, index);
   15c64:	f7ff ffbf 	bl	15be6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
}
   15c68:	bd08      	pop	{r3, pc}

00015c6a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   15c6a:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   15c6c:	6889      	ldr	r1, [r1, #8]
   15c6e:	6880      	ldr	r0, [r0, #8]
   15c70:	f7ff ff6a 	bl	15b48 <TfLiteIntArrayEqual>
}
   15c74:	3800      	subs	r0, #0
   15c76:	bf18      	it	ne
   15c78:	2001      	movne	r0, #1
   15c7a:	bd08      	pop	{r3, pc}

00015c7c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  switch (activation) {
   15c7c:	1e43      	subs	r3, r0, #1
   15c7e:	2b04      	cmp	r3, #4
   15c80:	d804      	bhi.n	15c8c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>
   15c82:	e8df f003 	tbb	[pc, r3]
   15c86:	0404      	.short	0x0404
   15c88:	0404      	.short	0x0404
   15c8a:	04          	.byte	0x04
   15c8b:	00          	.byte	0x00
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
   15c8c:	2000      	movs	r0, #0
}
   15c8e:	4770      	bx	lr

00015c90 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   15c90:	b118      	cbz	r0, 15c9a <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xa>
   15c92:	2801      	cmp	r0, #1
   15c94:	d103      	bne.n	15c9e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xe>
      return kTfLitePaddingValid;
   15c96:	2002      	movs	r0, #2
   15c98:	4770      	bx	lr
  switch (padding) {
   15c9a:	2001      	movs	r0, #1
   15c9c:	4770      	bx	lr
  return kTfLitePaddingUnknown;
   15c9e:	2000      	movs	r0, #0
}
   15ca0:	4770      	bx	lr

00015ca2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   15ca2:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   15ca4:	b118      	cbz	r0, 15cae <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
  TFLITE_DCHECK(error_reporter != nullptr);
   15ca6:	b121      	cbz	r1, 15cb2 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
  TFLITE_DCHECK(allocator != nullptr);
   15ca8:	b12a      	cbz	r2, 15cb6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
  TFLITE_DCHECK(builtin_data != nullptr);
   15caa:	b133      	cbz	r3, 15cba <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
}
   15cac:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op != nullptr);
   15cae:	f002 fdfc 	bl	188aa <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   15cb2:	f002 fdfa 	bl	188aa <abort>
  TFLITE_DCHECK(allocator != nullptr);
   15cb6:	f002 fdf8 	bl	188aa <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
   15cba:	f002 fdf6 	bl	188aa <abort>

00015cbe <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   15cbe:	b40e      	push	{r1, r2, r3}
   15cc0:	b500      	push	{lr}
   15cc2:	b082      	sub	sp, #8
   15cc4:	aa03      	add	r2, sp, #12
   15cc6:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   15cca:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   15ccc:	6803      	ldr	r3, [r0, #0]
   15cce:	689b      	ldr	r3, [r3, #8]
   15cd0:	4798      	blx	r3
  va_end(args);
  return code;
}
   15cd2:	b002      	add	sp, #8
   15cd4:	f85d eb04 	ldr.w	lr, [sp], #4
   15cd8:	b003      	add	sp, #12
   15cda:	4770      	bx	lr

00015cdc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   15cdc:	b40c      	push	{r2, r3}
   15cde:	b500      	push	{lr}
   15ce0:	b083      	sub	sp, #12
   15ce2:	aa04      	add	r2, sp, #16
   15ce4:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   15ce8:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   15cea:	6803      	ldr	r3, [r0, #0]
   15cec:	689b      	ldr	r3, [r3, #8]
   15cee:	4798      	blx	r3
  va_end(args);
  return code;
}
   15cf0:	b003      	add	sp, #12
   15cf2:	f85d eb04 	ldr.w	lr, [sp], #4
   15cf6:	b002      	add	sp, #8
   15cf8:	4770      	bx	lr

00015cfa <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
   15cfa:	b570      	push	{r4, r5, r6, lr}
   15cfc:	b082      	sub	sp, #8
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
   15cfe:	b368      	cbz	r0, 15d5c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x62>
   15d00:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   15d02:	f7ff fa62 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15d06:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15d08:	4628      	mov	r0, r5
   15d0a:	f7ff fa64 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15d0e:	280a      	cmp	r0, #10
   15d10:	d926      	bls.n	15d60 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
   15d12:	f105 000a 	add.w	r0, r5, #10
   15d16:	f7ff fa5e 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15d1a:	b318      	cbz	r0, 15d64 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6a>
   15d1c:	4420      	add	r0, r4
   15d1e:	f7ff fa54 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
   15d22:	b2c5      	uxtb	r5, r0

  return std::max(
      op_code->builtin_code(),
   15d24:	f88d 5006 	strb.w	r5, [sp, #6]
    return data_ - ReadScalar<soffset_t>(data_);
   15d28:	4620      	mov	r0, r4
   15d2a:	f7ff fa4e 	bl	151ca <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15d2e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15d30:	4630      	mov	r0, r6
   15d32:	f7ff fa50 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15d36:	2804      	cmp	r0, #4
   15d38:	d916      	bls.n	15d68 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6e>
   15d3a:	1d30      	adds	r0, r6, #4
   15d3c:	f7ff fa4b 	bl	151d6 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15d40:	b1a0      	cbz	r0, 15d6c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x72>
   15d42:	4420      	add	r0, r4
   15d44:	f7ff fa4d 	bl	151e2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
   15d48:	b2c0      	uxtb	r0, r0
   15d4a:	f88d 0007 	strb.w	r0, [sp, #7]
      if (__a < __b)
   15d4e:	42a8      	cmp	r0, r5
   15d50:	d80e      	bhi.n	15d70 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x76>
      return __a;
   15d52:	f10d 0306 	add.w	r3, sp, #6
}
   15d56:	7818      	ldrb	r0, [r3, #0]
   15d58:	b002      	add	sp, #8
   15d5a:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(op_code != nullptr);
   15d5c:	f002 fda5 	bl	188aa <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15d60:	2000      	movs	r0, #0
   15d62:	e7da      	b.n	15d1a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15d64:	2000      	movs	r0, #0
   15d66:	e7dc      	b.n	15d22 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15d68:	2000      	movs	r0, #0
   15d6a:	e7e9      	b.n	15d40 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15d6c:	2000      	movs	r0, #0
   15d6e:	e7eb      	b.n	15d48 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>
	return __b;
   15d70:	f10d 0307 	add.w	r3, sp, #7
   15d74:	e7ef      	b.n	15d56 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5c>

00015d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   15d76:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   15d78:	b108      	cbz	r0, 15d7e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x8>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
   15d7a:	6800      	ldr	r0, [r0, #0]
   15d7c:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   15d7e:	f002 fd94 	bl	188aa <abort>

00015d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   15d82:	b108      	cbz	r0, 15d88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x6>
   15d84:	6800      	ldr	r0, [r0, #0]
   15d86:	4770      	bx	lr
}
   15d88:	4770      	bx	lr

00015d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   15d8a:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   15d8c:	b108      	cbz	r0, 15d92 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
}
   15d8e:	6800      	ldr	r0, [r0, #0]
   15d90:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   15d92:	f002 fd8a 	bl	188aa <abort>

00015d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   15d96:	b108      	cbz	r0, 15d9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x6>
   15d98:	6800      	ldr	r0, [r0, #0]
   15d9a:	4770      	bx	lr
}
   15d9c:	4770      	bx	lr

00015d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
}
   15d9e:	4770      	bx	lr

00015da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>:
}
   15da0:	4008      	ands	r0, r1
   15da2:	4770      	bx	lr

00015da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>:
}
   15da4:	4108      	asrs	r0, r1
   15da6:	4770      	bx	lr

00015da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>:
}
   15da8:	4408      	add	r0, r1
   15daa:	4770      	bx	lr

00015dac <_ZN8gemmlowp6BitNotIiEET_S1_>:
}
   15dac:	43c0      	mvns	r0, r0
   15dae:	4770      	bx	lr

00015db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
   15db0:	b508      	push	{r3, lr}
  return a ? BitNot(zero) : zero;
   15db2:	b110      	cbz	r0, 15dba <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_+0xa>
   15db4:	2000      	movs	r0, #0
   15db6:	f7ff fff9 	bl	15dac <_ZN8gemmlowp6BitNotIiEET_S1_>
}
   15dba:	bd08      	pop	{r3, pc}

00015dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
   15dbc:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a < b);
   15dbe:	4288      	cmp	r0, r1
   15dc0:	bfac      	ite	ge
   15dc2:	2000      	movge	r0, #0
   15dc4:	2001      	movlt	r0, #1
   15dc6:	f7ff fff3 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   15dca:	bd08      	pop	{r3, pc}

00015dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
   15dcc:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a > b);
   15dce:	4288      	cmp	r0, r1
   15dd0:	bfd4      	ite	le
   15dd2:	2000      	movle	r0, #0
   15dd4:	2001      	movgt	r0, #1
   15dd6:	f7ff ffeb 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   15dda:	bd08      	pop	{r3, pc}

00015ddc <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   15ddc:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15dde:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15de0:	b113      	cbz	r3, 15de8 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   15de2:	213c      	movs	r1, #60	; 0x3c
   15de4:	4798      	blx	r3
}
   15de6:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15de8:	f002 fd5f 	bl	188aa <abort>

00015dec <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
                             OpData* data) {
   15dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15df0:	b089      	sub	sp, #36	; 0x24
   15df2:	9003      	str	r0, [sp, #12]
   15df4:	4688      	mov	r8, r1
   15df6:	4616      	mov	r6, r2
   15df8:	461d      	mov	r5, r3
   15dfa:	9f12      	ldr	r7, [sp, #72]	; 0x48
   15dfc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   15dfe:	4619      	mov	r1, r3
   15e00:	4610      	mov	r0, r2
   15e02:	f7ff ff32 	bl	15c6a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   15e06:	f080 0001 	eor.w	r0, r0, #1
   15e0a:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   15e0c:	783b      	ldrb	r3, [r7, #0]
   15e0e:	2b09      	cmp	r3, #9
   15e10:	d005      	beq.n	15e1e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x32>
   15e12:	2b07      	cmp	r3, #7
   15e14:	d003      	beq.n	15e1e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x32>
  } else if (output->type == kTfLiteFloat32) {
   15e16:	2b01      	cmp	r3, #1
   15e18:	d077      	beq.n	15f0a <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x11e>
  return kTfLiteOk;
   15e1a:	2000      	movs	r0, #0
   15e1c:	e06f      	b.n	15efe <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x112>
    data->input1_offset = -input1->params.zero_point;
   15e1e:	6933      	ldr	r3, [r6, #16]
   15e20:	425b      	negs	r3, r3
   15e22:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   15e24:	692b      	ldr	r3, [r5, #16]
   15e26:	425b      	negs	r3, r3
   15e28:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   15e2a:	693b      	ldr	r3, [r7, #16]
   15e2c:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   15e2e:	783b      	ldrb	r3, [r7, #0]
   15e30:	2b07      	cmp	r3, #7
   15e32:	d067      	beq.n	15f04 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x118>
   15e34:	f04f 0914 	mov.w	r9, #20
   15e38:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
                std::max(input1->params.scale, input2->params.scale));
   15e3c:	f106 0b0c 	add.w	fp, r6, #12
   15e40:	f105 0a0c 	add.w	sl, r5, #12
      if (__a < __b)
   15e44:	68f6      	ldr	r6, [r6, #12]
   15e46:	68ed      	ldr	r5, [r5, #12]
   15e48:	4629      	mov	r1, r5
   15e4a:	4630      	mov	r0, r6
   15e4c:	f7eb f922 	bl	1094 <__aeabi_fcmplt>
   15e50:	b900      	cbnz	r0, 15e54 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x68>
      return __a;
   15e52:	46da      	mov	sl, fp
        2 * static_cast<double>(
   15e54:	f8da 0000 	ldr.w	r0, [sl]
   15e58:	f7ea fb06 	bl	468 <__aeabi_f2d>
   15e5c:	4602      	mov	r2, r0
   15e5e:	460b      	mov	r3, r1
                std::max(input1->params.scale, input2->params.scale));
   15e60:	f7ea f9a4 	bl	1ac <__adddf3>
   15e64:	4682      	mov	sl, r0
   15e66:	468b      	mov	fp, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
   15e68:	4630      	mov	r0, r6
   15e6a:	f7ea fafd 	bl	468 <__aeabi_f2d>
    const double real_input1_multiplier =
   15e6e:	4652      	mov	r2, sl
   15e70:	465b      	mov	r3, fp
   15e72:	f7ea fc7b 	bl	76c <__aeabi_ddiv>
   15e76:	e9cd 0104 	strd	r0, r1, [sp, #16]
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
   15e7a:	4628      	mov	r0, r5
   15e7c:	f7ea faf4 	bl	468 <__aeabi_f2d>
    const double real_input2_multiplier =
   15e80:	4652      	mov	r2, sl
   15e82:	465b      	mov	r3, fp
   15e84:	f7ea fc72 	bl	76c <__aeabi_ddiv>
   15e88:	e9cd 0106 	strd	r0, r1, [sp, #24]
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   15e8c:	2301      	movs	r3, #1
   15e8e:	fa03 f909 	lsl.w	r9, r3, r9
   15e92:	68f8      	ldr	r0, [r7, #12]
   15e94:	f7ea fae8 	bl	468 <__aeabi_f2d>
   15e98:	4605      	mov	r5, r0
   15e9a:	460e      	mov	r6, r1
   15e9c:	4648      	mov	r0, r9
   15e9e:	f7ea fad1 	bl	444 <__aeabi_i2d>
   15ea2:	462a      	mov	r2, r5
   15ea4:	4633      	mov	r3, r6
   15ea6:	f7ea fb37 	bl	518 <__aeabi_dmul>
   15eaa:	4602      	mov	r2, r0
   15eac:	460b      	mov	r3, r1
    const double real_output_multiplier =
   15eae:	4650      	mov	r0, sl
   15eb0:	4659      	mov	r1, fp
   15eb2:	f7ea fc5b 	bl	76c <__aeabi_ddiv>
   15eb6:	4682      	mov	sl, r0
   15eb8:	468b      	mov	fp, r1
    QuantizeMultiplierSmallerThanOneExp(
   15eba:	1d23      	adds	r3, r4, #4
   15ebc:	f104 0214 	add.w	r2, r4, #20
   15ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   15ec4:	f7f3 f9a0 	bl	9208 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    QuantizeMultiplierSmallerThanOneExp(
   15ec8:	f104 0308 	add.w	r3, r4, #8
   15ecc:	f104 0218 	add.w	r2, r4, #24
   15ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   15ed4:	f7f3 f998 	bl	9208 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    QuantizeMultiplierSmallerThanOneExp(
   15ed8:	f104 0320 	add.w	r3, r4, #32
   15edc:	f104 021c 	add.w	r2, r4, #28
   15ee0:	4650      	mov	r0, sl
   15ee2:	4659      	mov	r1, fp
   15ee4:	f7f3 f990 	bl	9208 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   15ee8:	f104 0310 	add.w	r3, r4, #16
   15eec:	9300      	str	r3, [sp, #0]
   15eee:	f104 030c 	add.w	r3, r4, #12
   15ef2:	463a      	mov	r2, r7
   15ef4:	f898 1000 	ldrb.w	r1, [r8]
   15ef8:	9803      	ldr	r0, [sp, #12]
   15efa:	f7f3 fb0b 	bl	9514 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
   15efe:	b009      	add	sp, #36	; 0x24
   15f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   15f04:	f04f 090f 	mov.w	r9, #15
   15f08:	e796      	b.n	15e38 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x4c>
    CalculateActivationRange(params->activation,
   15f0a:	f104 0238 	add.w	r2, r4, #56	; 0x38
   15f0e:	f104 0134 	add.w	r1, r4, #52	; 0x34
   15f12:	f898 0000 	ldrb.w	r0, [r8]
   15f16:	f7f4 fb07 	bl	a528 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  return kTfLiteOk;
   15f1a:	2000      	movs	r0, #0
   15f1c:	e7ef      	b.n	15efe <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x112>

00015f1e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:
             const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {
   15f1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f22:	b0e1      	sub	sp, #388	; 0x184
   15f24:	9e6a      	ldr	r6, [sp, #424]	; 0x1a8
   15f26:	9d6b      	ldr	r5, [sp, #428]	; 0x1ac
   15f28:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
  SetActivationParams(data->output_activation_min_f32,
   15f2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
                      data->output_activation_max_f32, &op_params);
   15f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  params->float_activation_min = min;
   15f2e:	912f      	str	r1, [sp, #188]	; 0xbc
  params->float_activation_max = max;
   15f30:	9230      	str	r2, [sp, #192]	; 0xc0
  if (data->requires_broadcast) {
   15f32:	781b      	ldrb	r3, [r3, #0]
   15f34:	2b00      	cmp	r3, #0
   15f36:	f000 8294 	beq.w	16462 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x544>
        op_params, tflite::micro::GetTensorShape(input1),
   15f3a:	4631      	mov	r1, r6
   15f3c:	a83c      	add	r0, sp, #240	; 0xf0
   15f3e:	f001 f8d9 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   15f42:	4630      	mov	r0, r6
   15f44:	f7ff ff17 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   15f48:	9001      	str	r0, [sp, #4]
        tflite::micro::GetTensorShape(input2),
   15f4a:	4629      	mov	r1, r5
   15f4c:	a842      	add	r0, sp, #264	; 0x108
   15f4e:	f001 f8d1 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   15f52:	4628      	mov	r0, r5
   15f54:	f7ff ff0f 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   15f58:	9002      	str	r0, [sp, #8]
        tflite::micro::GetTensorShape(output),
   15f5a:	4621      	mov	r1, r4
   15f5c:	a848      	add	r0, sp, #288	; 0x120
   15f5e:	f001 f8c9 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   15f62:	4620      	mov	r0, r4
   15f64:	f7ff ff0d 	bl	15d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   15f68:	9003      	str	r0, [sp, #12]
      : size_(0) {
   15f6a:	2300      	movs	r3, #0
   15f6c:	9306      	str	r3, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   15f6e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   15f70:	2b04      	cmp	r3, #4
   15f72:	dc0c      	bgt.n	15f8e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x70>
    if (size_ > kMaxSmallSize) {
   15f74:	9b06      	ldr	r3, [sp, #24]
   15f76:	2b05      	cmp	r3, #5
   15f78:	dd03      	ble.n	15f82 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64>
      delete[] dims_pointer_;
   15f7a:	9807      	ldr	r0, [sp, #28]
   15f7c:	b108      	cbz	r0, 15f82 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64>
   15f7e:	f002 fc7f 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
   15f82:	2304      	movs	r3, #4
   15f84:	9306      	str	r3, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   15f86:	983c      	ldr	r0, [sp, #240]	; 0xf0
    const int size_increase = new_shape_size - shape.DimensionsCount();
   15f88:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   15f8a:	2300      	movs	r3, #0
   15f8c:	e00b      	b.n	15fa6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x88>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   15f8e:	f002 fc8c 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
   15f92:	f002 fc8a 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   15f96:	f002 fc88 	bl	188aa <abort>
      dims_[i] = val;
   15f9a:	aa06      	add	r2, sp, #24
   15f9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   15fa0:	2101      	movs	r1, #1
   15fa2:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   15fa4:	3301      	adds	r3, #1
   15fa6:	4298      	cmp	r0, r3
   15fa8:	dd0b      	ble.n	15fc2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4>
    TFLITE_DCHECK_GE(i, 0);
   15faa:	2b00      	cmp	r3, #0
   15fac:	dbf1      	blt.n	15f92 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x74>
    TFLITE_DCHECK_LT(i, size_);
   15fae:	9a06      	ldr	r2, [sp, #24]
   15fb0:	4293      	cmp	r3, r2
   15fb2:	daf0      	bge.n	15f96 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78>
    if (size_ > kMaxSmallSize) {
   15fb4:	2a05      	cmp	r2, #5
   15fb6:	ddf0      	ble.n	15f9a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c>
      dims_pointer_[i] = val;
   15fb8:	9a07      	ldr	r2, [sp, #28]
   15fba:	2101      	movs	r1, #1
   15fbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15fc0:	e7f0      	b.n	15fa4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x86>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15fc2:	9b06      	ldr	r3, [sp, #24]
   15fc4:	2b05      	cmp	r3, #5
   15fc6:	dd1b      	ble.n	16000 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe2>
   15fc8:	9b07      	ldr	r3, [sp, #28]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   15fca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   15fce:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   15fd0:	2a05      	cmp	r2, #5
   15fd2:	dd17      	ble.n	16004 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe6>
   15fd4:	993d      	ldr	r1, [sp, #244]	; 0xf4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   15fd6:	0092      	lsls	r2, r2, #2
   15fd8:	f002 fc80 	bl	188dc <memcpy>
      : size_(0) {
   15fdc:	2300      	movs	r3, #0
   15fde:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   15fe0:	9b42      	ldr	r3, [sp, #264]	; 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   15fe2:	2b04      	cmp	r3, #4
   15fe4:	dc10      	bgt.n	16008 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xea>
    if (size_ > kMaxSmallSize) {
   15fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15fe8:	2b05      	cmp	r3, #5
   15fea:	dd03      	ble.n	15ff4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6>
      delete[] dims_pointer_;
   15fec:	980d      	ldr	r0, [sp, #52]	; 0x34
   15fee:	b108      	cbz	r0, 15ff4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6>
   15ff0:	f002 fc46 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
   15ff4:	2304      	movs	r3, #4
   15ff6:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   15ff8:	9842      	ldr	r0, [sp, #264]	; 0x108
    const int size_increase = new_shape_size - shape.DimensionsCount();
   15ffa:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   15ffc:	2300      	movs	r3, #0
   15ffe:	e00f      	b.n	16020 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16000:	ab07      	add	r3, sp, #28
   16002:	e7e2      	b.n	15fca <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16004:	a93d      	add	r1, sp, #244	; 0xf4
   16006:	e7e6      	b.n	15fd6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   16008:	f002 fc4f 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
   1600c:	f002 fc4d 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   16010:	f002 fc4b 	bl	188aa <abort>
      dims_[i] = val;
   16014:	aa0c      	add	r2, sp, #48	; 0x30
   16016:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1601a:	2101      	movs	r1, #1
   1601c:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   1601e:	3301      	adds	r3, #1
   16020:	4298      	cmp	r0, r3
   16022:	dd0b      	ble.n	1603c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x11e>
    TFLITE_DCHECK_GE(i, 0);
   16024:	2b00      	cmp	r3, #0
   16026:	dbf1      	blt.n	1600c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xee>
    TFLITE_DCHECK_LT(i, size_);
   16028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1602a:	4293      	cmp	r3, r2
   1602c:	daf0      	bge.n	16010 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2>
    if (size_ > kMaxSmallSize) {
   1602e:	2a05      	cmp	r2, #5
   16030:	ddf0      	ble.n	16014 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf6>
      dims_pointer_[i] = val;
   16032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16034:	2101      	movs	r1, #1
   16036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   1603a:	e7f0      	b.n	1601e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x100>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1603c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1603e:	2b05      	cmp	r3, #5
   16040:	dd0c      	ble.n	1605c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x13e>
   16042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   16044:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16048:	9a42      	ldr	r2, [sp, #264]	; 0x108
   1604a:	2a05      	cmp	r2, #5
   1604c:	dd08      	ble.n	16060 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x142>
   1604e:	9943      	ldr	r1, [sp, #268]	; 0x10c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   16050:	0092      	lsls	r2, r2, #2
   16052:	f002 fc43 	bl	188dc <memcpy>
  for (int i = N - 1; i >= 0; --i) {
   16056:	2303      	movs	r3, #3
  int desc_stride = 1;
   16058:	2101      	movs	r1, #1
  }
   1605a:	e017      	b.n	1608c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1605c:	ab0d      	add	r3, sp, #52	; 0x34
   1605e:	e7f1      	b.n	16044 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x126>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16060:	a943      	add	r1, sp, #268	; 0x10c
   16062:	e7f5      	b.n	16050 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x132>
    TFLITE_DCHECK_GE(i, 0);
   16064:	f002 fc21 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   16068:	f002 fc1f 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1606c:	aa06      	add	r2, sp, #24
   1606e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16072:	6850      	ldr	r0, [r2, #4]
   16074:	e015      	b.n	160a2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x184>
    TFLITE_DCHECK_GE(i, 0);
   16076:	f002 fc18 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   1607a:	f002 fc16 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1607e:	aa06      	add	r2, sp, #24
   16080:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16084:	6852      	ldr	r2, [r2, #4]
    desc_stride *= input_shape.Dims(i);
   16086:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
   1608a:	3b01      	subs	r3, #1
   1608c:	2b00      	cmp	r3, #0
   1608e:	db19      	blt.n	160c4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1a6>
    TFLITE_DCHECK_GE(i, 0);
   16090:	dbe8      	blt.n	16064 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x146>
    TFLITE_DCHECK_LT(i, size_);
   16092:	9a06      	ldr	r2, [sp, #24]
   16094:	4293      	cmp	r3, r2
   16096:	dae7      	bge.n	16068 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x14a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16098:	2a05      	cmp	r2, #5
   1609a:	dde7      	ble.n	1606c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x14e>
   1609c:	9a07      	ldr	r2, [sp, #28]
   1609e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
   160a2:	aa12      	add	r2, sp, #72	; 0x48
   160a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
   160a8:	1d18      	adds	r0, r3, #4
   160aa:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   160ae:	2b00      	cmp	r3, #0
   160b0:	dbe1      	blt.n	16076 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x158>
    TFLITE_DCHECK_LT(i, size_);
   160b2:	9a06      	ldr	r2, [sp, #24]
   160b4:	4293      	cmp	r3, r2
   160b6:	dae0      	bge.n	1607a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   160b8:	2a05      	cmp	r2, #5
   160ba:	dde0      	ble.n	1607e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x160>
   160bc:	9a07      	ldr	r2, [sp, #28]
   160be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   160c2:	e7e0      	b.n	16086 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x168>
  for (int i = N - 1; i >= 0; --i) {
   160c4:	2303      	movs	r3, #3
  int desc_stride = 1;
   160c6:	2101      	movs	r1, #1
   160c8:	e013      	b.n	160f2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d4>
    TFLITE_DCHECK_GE(i, 0);
   160ca:	f002 fbee 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   160ce:	f002 fbec 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   160d2:	aa0c      	add	r2, sp, #48	; 0x30
   160d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   160d8:	6850      	ldr	r0, [r2, #4]
   160da:	e015      	b.n	16108 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ea>
    TFLITE_DCHECK_GE(i, 0);
   160dc:	f002 fbe5 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   160e0:	f002 fbe3 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   160e4:	aa0c      	add	r2, sp, #48	; 0x30
   160e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   160ea:	6852      	ldr	r2, [r2, #4]
    desc_stride *= input_shape.Dims(i);
   160ec:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
   160f0:	3b01      	subs	r3, #1
   160f2:	2b00      	cmp	r3, #0
   160f4:	db19      	blt.n	1612a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x20c>
    TFLITE_DCHECK_GE(i, 0);
   160f6:	dbe8      	blt.n	160ca <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ac>
    TFLITE_DCHECK_LT(i, size_);
   160f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   160fa:	4293      	cmp	r3, r2
   160fc:	dae7      	bge.n	160ce <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1b0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   160fe:	2a05      	cmp	r2, #5
   16100:	dde7      	ble.n	160d2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1b4>
   16102:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16104:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
   16108:	aa1a      	add	r2, sp, #104	; 0x68
   1610a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
   1610e:	1d18      	adds	r0, r3, #4
   16110:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   16114:	2b00      	cmp	r3, #0
   16116:	dbe1      	blt.n	160dc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1be>
    TFLITE_DCHECK_LT(i, size_);
   16118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1611a:	4293      	cmp	r3, r2
   1611c:	dae0      	bge.n	160e0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1611e:	2a05      	cmp	r2, #5
   16120:	dde0      	ble.n	160e4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c6>
   16122:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16124:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   16128:	e7e0      	b.n	160ec <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ce>
  for (int i = 0; i < N; ++i) {
   1612a:	2300      	movs	r3, #0
   1612c:	e019      	b.n	16162 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x244>
    TFLITE_DCHECK_GE(i, 0);
   1612e:	f002 fbbc 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   16132:	f002 fbba 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16136:	aa06      	add	r2, sp, #24
   16138:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1613c:	6852      	ldr	r2, [r2, #4]
   1613e:	e01c      	b.n	1617a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x25c>
    TFLITE_DCHECK_GE(i, 0);
   16140:	f002 fbb3 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   16144:	f002 fbb1 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16148:	a90c      	add	r1, sp, #48	; 0x30
   1614a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1614e:	6849      	ldr	r1, [r1, #4]
   16150:	e01d      	b.n	1618e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
        desc0_out->strides[i] = 0;
   16152:	a812      	add	r0, sp, #72	; 0x48
   16154:	1d1a      	adds	r2, r3, #4
   16156:	2400      	movs	r4, #0
   16158:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        desc0_out->extents[i] = extent1;
   1615c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  for (int i = 0; i < N; ++i) {
   16160:	3301      	adds	r3, #1
   16162:	2b03      	cmp	r3, #3
   16164:	dc23      	bgt.n	161ae <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x290>
    TFLITE_DCHECK_GE(i, 0);
   16166:	2b00      	cmp	r3, #0
   16168:	dbe1      	blt.n	1612e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x210>
    TFLITE_DCHECK_LT(i, size_);
   1616a:	9a06      	ldr	r2, [sp, #24]
   1616c:	4293      	cmp	r3, r2
   1616e:	dae0      	bge.n	16132 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x214>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16170:	2a05      	cmp	r2, #5
   16172:	dde0      	ble.n	16136 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x218>
   16174:	9a07      	ldr	r2, [sp, #28]
   16176:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   1617a:	2b00      	cmp	r3, #0
   1617c:	dbe0      	blt.n	16140 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x222>
    TFLITE_DCHECK_LT(i, size_);
   1617e:	990c      	ldr	r1, [sp, #48]	; 0x30
   16180:	428b      	cmp	r3, r1
   16182:	dadf      	bge.n	16144 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16184:	2905      	cmp	r1, #5
   16186:	dddf      	ble.n	16148 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x22a>
   16188:	990d      	ldr	r1, [sp, #52]	; 0x34
   1618a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
   1618e:	4291      	cmp	r1, r2
   16190:	d0e6      	beq.n	16160 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
      if (extent0 == 1) {
   16192:	2a01      	cmp	r2, #1
   16194:	d0dd      	beq.n	16152 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x234>
        TFLITE_DCHECK_EQ(extent1, 1);
   16196:	2901      	cmp	r1, #1
   16198:	d107      	bne.n	161aa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
        desc1_out->strides[i] = 0;
   1619a:	a81a      	add	r0, sp, #104	; 0x68
   1619c:	1d19      	adds	r1, r3, #4
   1619e:	2400      	movs	r4, #0
   161a0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
        desc1_out->extents[i] = extent0;
   161a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   161a8:	e7da      	b.n	16160 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
        TFLITE_DCHECK_EQ(extent1, 1);
   161aa:	f002 fb7e 	bl	188aa <abort>
    if (size_ > kMaxSmallSize) {
   161ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   161b0:	2b05      	cmp	r3, #5
   161b2:	dd03      	ble.n	161bc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29e>
      delete[] dims_pointer_;
   161b4:	980d      	ldr	r0, [sp, #52]	; 0x34
   161b6:	b108      	cbz	r0, 161bc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29e>
   161b8:	f002 fb62 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   161bc:	9b06      	ldr	r3, [sp, #24]
   161be:	2b05      	cmp	r3, #5
   161c0:	dd03      	ble.n	161ca <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2ac>
      delete[] dims_pointer_;
   161c2:	9807      	ldr	r0, [sp, #28]
   161c4:	b108      	cbz	r0, 161ca <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2ac>
   161c6:	f002 fb5b 	bl	18880 <_ZdaPv>
      : size_(0) {
   161ca:	2300      	movs	r3, #0
   161cc:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   161ce:	9b48      	ldr	r3, [sp, #288]	; 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   161d0:	2b04      	cmp	r3, #4
   161d2:	dc0c      	bgt.n	161ee <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d0>
    if (size_ > kMaxSmallSize) {
   161d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   161d6:	2b05      	cmp	r3, #5
   161d8:	dd03      	ble.n	161e2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2c4>
      delete[] dims_pointer_;
   161da:	980d      	ldr	r0, [sp, #52]	; 0x34
   161dc:	b108      	cbz	r0, 161e2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2c4>
   161de:	f002 fb4f 	bl	18880 <_ZdaPv>
    size_ = dimensions_count;
   161e2:	2304      	movs	r3, #4
   161e4:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   161e6:	9848      	ldr	r0, [sp, #288]	; 0x120
    const int size_increase = new_shape_size - shape.DimensionsCount();
   161e8:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   161ea:	2300      	movs	r3, #0
   161ec:	e00b      	b.n	16206 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2e8>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   161ee:	f002 fb5c 	bl	188aa <abort>
    TFLITE_DCHECK_GE(i, 0);
   161f2:	f002 fb5a 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   161f6:	f002 fb58 	bl	188aa <abort>
      dims_[i] = val;
   161fa:	aa0c      	add	r2, sp, #48	; 0x30
   161fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16200:	2101      	movs	r1, #1
   16202:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   16204:	3301      	adds	r3, #1
   16206:	4298      	cmp	r0, r3
   16208:	dd0b      	ble.n	16222 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x304>
    TFLITE_DCHECK_GE(i, 0);
   1620a:	2b00      	cmp	r3, #0
   1620c:	dbf1      	blt.n	161f2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d4>
    TFLITE_DCHECK_LT(i, size_);
   1620e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16210:	4293      	cmp	r3, r2
   16212:	daf0      	bge.n	161f6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d8>
    if (size_ > kMaxSmallSize) {
   16214:	2a05      	cmp	r2, #5
   16216:	ddf0      	ble.n	161fa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2dc>
      dims_pointer_[i] = val;
   16218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1621a:	2101      	movs	r1, #1
   1621c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   16220:	e7f0      	b.n	16204 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2e6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16224:	2b05      	cmp	r3, #5
   16226:	dd01      	ble.n	1622c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x30e>
   16228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1622a:	e000      	b.n	1622e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x310>
   1622c:	ab0d      	add	r3, sp, #52	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   1622e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16232:	9a48      	ldr	r2, [sp, #288]	; 0x120
   16234:	2a05      	cmp	r2, #5
   16236:	dd01      	ble.n	1623c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x31e>
   16238:	9949      	ldr	r1, [sp, #292]	; 0x124
   1623a:	e000      	b.n	1623e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x320>
   1623c:	a949      	add	r1, sp, #292	; 0x124
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   1623e:	0092      	lsls	r2, r2, #2
   16240:	f002 fb4c 	bl	188dc <memcpy>
  *max = params.quantized_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
  *min = params.float_activation_min;
   16244:	f8dd b0bc 	ldr.w	fp, [sp, #188]	; 0xbc
  *max = params.float_activation_max;
   16248:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1624c:	2700      	movs	r7, #0
    TFLITE_DCHECK_LT(i, size_);
   1624e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16250:	2b00      	cmp	r3, #0
   16252:	dd08      	ble.n	16266 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x348>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16254:	2b05      	cmp	r3, #5
   16256:	dd08      	ble.n	1626a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x34c>
   16258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1625a:	681b      	ldr	r3, [r3, #0]
   1625c:	429f      	cmp	r7, r3
   1625e:	f280 80e0 	bge.w	16422 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x504>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   16262:	2600      	movs	r6, #0
   16264:	e0ce      	b.n	16404 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4e6>
    TFLITE_DCHECK_LT(i, size_);
   16266:	f002 fb20 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1626a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1626c:	e7f6      	b.n	1625c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x33e>
    TFLITE_DCHECK_LT(i, size_);
   1626e:	f002 fb1c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16274:	e0cf      	b.n	16416 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f8>
    TFLITE_DCHECK_LT(i, size_);
   16276:	f002 fb18 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1627a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1627c:	e0bd      	b.n	163fa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4dc>
    TFLITE_DCHECK_LT(i, size_);
   1627e:	f002 fb14 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16282:	9b10      	ldr	r3, [sp, #64]	; 0x40
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16284:	429d      	cmp	r5, r3
   16286:	f280 80ae 	bge.w	163e6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4c8>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   1628a:	2f00      	cmp	r7, #0
   1628c:	f2c0 808b 	blt.w	163a6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x488>
   16290:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16292:	429f      	cmp	r7, r3
   16294:	f280 8087 	bge.w	163a6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x488>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   16298:	2e00      	cmp	r6, #0
   1629a:	f2c0 8086 	blt.w	163aa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x48c>
   1629e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   162a0:	429e      	cmp	r6, r3
   162a2:	f280 8082 	bge.w	163aa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x48c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   162a6:	2c00      	cmp	r4, #0
   162a8:	f2c0 8081 	blt.w	163ae <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x490>
   162ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   162ae:	429c      	cmp	r4, r3
   162b0:	da7d      	bge.n	163ae <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x490>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   162b2:	2d00      	cmp	r5, #0
   162b4:	db7d      	blt.n	163b2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x494>
   162b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   162b8:	429d      	cmp	r5, r3
   162ba:	da7a      	bge.n	163b2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x494>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   162bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   162be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   162c0:	fb02 f206 	mul.w	r2, r2, r6
   162c4:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
   162c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   162ca:	9918      	ldr	r1, [sp, #96]	; 0x60
   162cc:	fb01 f104 	mul.w	r1, r1, r4
   162d0:	fb02 1205 	mla	r2, r2, r5, r1
         i3 * desc.strides[3];
   162d4:	4413      	add	r3, r2
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   162d6:	9a01      	ldr	r2, [sp, #4]
   162d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   162dc:	2f00      	cmp	r7, #0
   162de:	db6a      	blt.n	163b6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x498>
   162e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   162e2:	429f      	cmp	r7, r3
   162e4:	da67      	bge.n	163b6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x498>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   162e6:	2e00      	cmp	r6, #0
   162e8:	db67      	blt.n	163ba <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49c>
   162ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   162ec:	429e      	cmp	r6, r3
   162ee:	da64      	bge.n	163ba <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   162f0:	2c00      	cmp	r4, #0
   162f2:	db64      	blt.n	163be <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a0>
   162f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   162f6:	429c      	cmp	r4, r3
   162f8:	da61      	bge.n	163be <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a0>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   162fa:	2d00      	cmp	r5, #0
   162fc:	db61      	blt.n	163c2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a4>
   162fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16300:	429d      	cmp	r5, r3
   16302:	da5e      	bge.n	163c2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a4>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   16304:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16306:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16308:	fb02 f206 	mul.w	r2, r2, r6
   1630c:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
   16310:	9a21      	ldr	r2, [sp, #132]	; 0x84
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   16312:	9920      	ldr	r1, [sp, #128]	; 0x80
   16314:	fb01 f104 	mul.w	r1, r1, r4
   16318:	fb02 1205 	mla	r2, r2, r5, r1
         i3 * desc.strides[3];
   1631c:	4413      	add	r3, r2
              ActivationFunctionWithMinMax<T>(
   1631e:	9a02      	ldr	r2, [sp, #8]
   16320:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   16324:	f7ea fc10 	bl	b48 <__addsf3>
   16328:	4601      	mov	r1, r0
  inline int32_t DimensionsCount() const { return size_; }
   1632a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1632c:	2b04      	cmp	r3, #4
   1632e:	d14a      	bne.n	163c6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16330:	2f00      	cmp	r7, #0
   16332:	db4a      	blt.n	163ca <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ac>
   16334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16336:	429f      	cmp	r7, r3
   16338:	da47      	bge.n	163ca <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1633a:	2e00      	cmp	r6, #0
   1633c:	db47      	blt.n	163ce <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b0>
   1633e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16340:	4296      	cmp	r6, r2
   16342:	da44      	bge.n	163ce <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16344:	2c00      	cmp	r4, #0
   16346:	db44      	blt.n	163d2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
   16348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1634a:	429c      	cmp	r4, r3
   1634c:	da41      	bge.n	163d2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1634e:	2d00      	cmp	r5, #0
   16350:	db41      	blt.n	163d6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b8>
   16352:	9810      	ldr	r0, [sp, #64]	; 0x40
   16354:	4285      	cmp	r5, r0
   16356:	da3e      	bge.n	163d6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16358:	fb02 6207 	mla	r2, r2, r7, r6
   1635c:	fb02 4303 	mla	r3, r2, r3, r4
   16360:	fb03 5800 	mla	r8, r3, r0, r5
   16364:	9106      	str	r1, [sp, #24]
   16366:	f8cd b014 	str.w	fp, [sp, #20]
   1636a:	f8cd a010 	str.w	sl, [sp, #16]
      if (__a < __b)
   1636e:	4658      	mov	r0, fp
   16370:	f7ea feae 	bl	10d0 <__aeabi_fcmpgt>
   16374:	bb88      	cbnz	r0, 163da <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4bc>
      return __a;
   16376:	f10d 0918 	add.w	r9, sp, #24
      if (__b < __a)
   1637a:	f8d9 1000 	ldr.w	r1, [r9]
   1637e:	4650      	mov	r0, sl
   16380:	f7ea fe88 	bl	1094 <__aeabi_fcmplt>
   16384:	bb60      	cbnz	r0, 163e0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4c2>
  return min(max(x, output_activation_min), output_activation_max);
   16386:	f8d9 3000 	ldr.w	r3, [r9]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   1638a:	9a03      	ldr	r2, [sp, #12]
   1638c:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16390:	3501      	adds	r5, #1
    TFLITE_DCHECK_LT(i, size_);
   16392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16394:	2b03      	cmp	r3, #3
   16396:	f77f af72 	ble.w	1627e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x360>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1639a:	2b05      	cmp	r3, #5
   1639c:	f77f af71 	ble.w	16282 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x364>
   163a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   163a2:	68db      	ldr	r3, [r3, #12]
   163a4:	e76e      	b.n	16284 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x366>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   163a6:	f002 fa80 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   163aa:	f002 fa7e 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   163ae:	f002 fa7c 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   163b2:	f002 fa7a 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   163b6:	f002 fa78 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   163ba:	f002 fa76 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   163be:	f002 fa74 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   163c2:	f002 fa72 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   163c6:	f002 fa70 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   163ca:	f002 fa6e 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   163ce:	f002 fa6c 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   163d2:	f002 fa6a 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   163d6:	f002 fa68 	bl	188aa <abort>
	return __b;
   163da:	f10d 0914 	add.w	r9, sp, #20
   163de:	e7cc      	b.n	1637a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x45c>
	return __b;
   163e0:	f10d 0910 	add.w	r9, sp, #16
   163e4:	e7cf      	b.n	16386 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x468>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   163e6:	3401      	adds	r4, #1
    TFLITE_DCHECK_LT(i, size_);
   163e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   163ea:	2b02      	cmp	r3, #2
   163ec:	f77f af43 	ble.w	16276 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x358>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   163f0:	2b05      	cmp	r3, #5
   163f2:	f77f af42 	ble.w	1627a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x35c>
   163f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   163f8:	689b      	ldr	r3, [r3, #8]
   163fa:	429c      	cmp	r4, r3
   163fc:	da01      	bge.n	16402 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4e4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   163fe:	2500      	movs	r5, #0
   16400:	e7c7      	b.n	16392 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x474>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   16402:	3601      	adds	r6, #1
    TFLITE_DCHECK_LT(i, size_);
   16404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16406:	2b01      	cmp	r3, #1
   16408:	f77f af31 	ble.w	1626e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1640c:	2b05      	cmp	r3, #5
   1640e:	f77f af30 	ble.w	16272 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x354>
   16412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16414:	685b      	ldr	r3, [r3, #4]
   16416:	429e      	cmp	r6, r3
   16418:	da01      	bge.n	1641e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x500>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   1641a:	2400      	movs	r4, #0
   1641c:	e7e4      	b.n	163e8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ca>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   1641e:	3701      	adds	r7, #1
   16420:	e715      	b.n	1624e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x330>
    if (size_ > kMaxSmallSize) {
   16422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16424:	2b05      	cmp	r3, #5
   16426:	dd03      	ble.n	16430 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x512>
      delete[] dims_pointer_;
   16428:	980d      	ldr	r0, [sp, #52]	; 0x34
   1642a:	b108      	cbz	r0, 16430 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x512>
   1642c:	f002 fa28 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16430:	9b48      	ldr	r3, [sp, #288]	; 0x120
   16432:	2b05      	cmp	r3, #5
   16434:	dd03      	ble.n	1643e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x520>
      delete[] dims_pointer_;
   16436:	9849      	ldr	r0, [sp, #292]	; 0x124
   16438:	b108      	cbz	r0, 1643e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x520>
   1643a:	f002 fa21 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1643e:	9b42      	ldr	r3, [sp, #264]	; 0x108
   16440:	2b05      	cmp	r3, #5
   16442:	dd03      	ble.n	1644c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x52e>
      delete[] dims_pointer_;
   16444:	9843      	ldr	r0, [sp, #268]	; 0x10c
   16446:	b108      	cbz	r0, 1644c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x52e>
   16448:	f002 fa1a 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1644c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   1644e:	2b05      	cmp	r3, #5
   16450:	f340 8097 	ble.w	16582 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
      delete[] dims_pointer_;
   16454:	983d      	ldr	r0, [sp, #244]	; 0xf4
   16456:	2800      	cmp	r0, #0
   16458:	f000 8093 	beq.w	16582 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
   1645c:	f002 fa10 	bl	18880 <_ZdaPv>
   16460:	e08f      	b.n	16582 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   16462:	4631      	mov	r1, r6
   16464:	a84e      	add	r0, sp, #312	; 0x138
   16466:	f000 fe45 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   1646a:	4630      	mov	r0, r6
   1646c:	f7ff fc83 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   16470:	9001      	str	r0, [sp, #4]
                       tflite::micro::GetTensorShape(input2),
   16472:	4629      	mov	r1, r5
   16474:	a854      	add	r0, sp, #336	; 0x150
   16476:	f000 fe3d 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   1647a:	4628      	mov	r0, r5
   1647c:	f7ff fc7b 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   16480:	4607      	mov	r7, r0
                       tflite::micro::GetTensorShape(output),
   16482:	4621      	mov	r1, r4
   16484:	a85a      	add	r0, sp, #360	; 0x168
   16486:	f000 fe35 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   1648a:	4620      	mov	r0, r4
   1648c:	f7ff fc79 	bl	15d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   16490:	4680      	mov	r8, r0
  *min = params.float_activation_min;
   16492:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
  *max = params.float_activation_max;
   16496:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1649a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   1649c:	2a05      	cmp	r2, #5
   1649e:	dd03      	ble.n	164a8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x58a>
   164a0:	984f      	ldr	r0, [sp, #316]	; 0x13c
    for (int i = 0; i < size_; i++) {
   164a2:	2300      	movs	r3, #0
    int buffer_size = 1;
   164a4:	2601      	movs	r6, #1
   164a6:	e006      	b.n	164b6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x598>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   164a8:	a84f      	add	r0, sp, #316	; 0x13c
   164aa:	e7fa      	b.n	164a2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x584>
      buffer_size *= dims_data[i];
   164ac:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   164b0:	fb01 f606 	mul.w	r6, r1, r6
    for (int i = 0; i < size_; i++) {
   164b4:	3301      	adds	r3, #1
   164b6:	429a      	cmp	r2, r3
   164b8:	dcf8      	bgt.n	164ac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x58e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   164ba:	9954      	ldr	r1, [sp, #336]	; 0x150
   164bc:	2905      	cmp	r1, #5
   164be:	dd0a      	ble.n	164d6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5b8>
   164c0:	9c55      	ldr	r4, [sp, #340]	; 0x154
    for (int i = 0; i < size_; i++) {
   164c2:	2300      	movs	r3, #0
    int buffer_size = 1;
   164c4:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
   164c6:	4299      	cmp	r1, r3
   164c8:	dd07      	ble.n	164da <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5bc>
      buffer_size *= dims_data[i];
   164ca:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   164ce:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
   164d2:	3301      	adds	r3, #1
   164d4:	e7f7      	b.n	164c6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   164d6:	ac55      	add	r4, sp, #340	; 0x154
   164d8:	e7f3      	b.n	164c2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5a4>
   164da:	9c5a      	ldr	r4, [sp, #360]	; 0x168
   164dc:	2c05      	cmp	r4, #5
   164de:	dd0a      	ble.n	164f6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5d8>
   164e0:	9d5b      	ldr	r5, [sp, #364]	; 0x16c
    for (int i = 0; i < size_; i++) {
   164e2:	2300      	movs	r3, #0
    int buffer_size = 1;
   164e4:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   164e6:	429c      	cmp	r4, r3
   164e8:	dd07      	ble.n	164fa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5dc>
      buffer_size *= dims_data[i];
   164ea:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   164ee:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   164f2:	3301      	adds	r3, #1
   164f4:	e7f7      	b.n	164e6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5c8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   164f6:	ad5b      	add	r5, sp, #364	; 0x16c
   164f8:	e7f3      	b.n	164e2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5c4>
  TFLITE_CHECK_EQ(size_1, size_2);
   164fa:	4296      	cmp	r6, r2
   164fc:	d103      	bne.n	16506 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e8>
  TFLITE_CHECK_EQ(size_2, size_3);
   164fe:	428a      	cmp	r2, r1
   16500:	d103      	bne.n	1650a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ec>
  for (int i = 0; i < flat_size; ++i) {
   16502:	2400      	movs	r4, #0
   16504:	e009      	b.n	1651a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5fc>
  TFLITE_CHECK_EQ(size_1, size_2);
   16506:	f002 f9d0 	bl	188aa <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
   1650a:	f002 f9ce 	bl	188aa <abort>
	return __b;
   1650e:	ad12      	add	r5, sp, #72	; 0x48
   16510:	e01a      	b.n	16548 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62a>
  return min(max(x, output_activation_min), output_activation_max);
   16512:	682b      	ldr	r3, [r5, #0]
    output_data[i] = ActivationFunctionWithMinMax(
   16514:	f848 300b 	str.w	r3, [r8, fp]
  for (int i = 0; i < flat_size; ++i) {
   16518:	3401      	adds	r4, #1
   1651a:	42b4      	cmp	r4, r6
   1651c:	da1c      	bge.n	16558 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x63a>
        input1_data[i] + input2_data[i], activation_min, activation_max);
   1651e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
    output_data[i] = ActivationFunctionWithMinMax(
   16522:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   16526:	9b01      	ldr	r3, [sp, #4]
   16528:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1652c:	f7ea fb0c 	bl	b48 <__addsf3>
   16530:	4601      	mov	r1, r0
   16532:	901a      	str	r0, [sp, #104]	; 0x68
   16534:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   16538:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
      if (__a < __b)
   1653c:	4648      	mov	r0, r9
   1653e:	f7ea fdc7 	bl	10d0 <__aeabi_fcmpgt>
   16542:	2800      	cmp	r0, #0
   16544:	d1e3      	bne.n	1650e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f0>
      return __a;
   16546:	ad1a      	add	r5, sp, #104	; 0x68
      if (__b < __a)
   16548:	6829      	ldr	r1, [r5, #0]
   1654a:	4650      	mov	r0, sl
   1654c:	f7ea fda2 	bl	1094 <__aeabi_fcmplt>
   16550:	2800      	cmp	r0, #0
   16552:	d0de      	beq.n	16512 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f4>
	return __b;
   16554:	ad0c      	add	r5, sp, #48	; 0x30
   16556:	e7dc      	b.n	16512 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f4>
    if (size_ > kMaxSmallSize) {
   16558:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   1655a:	2b05      	cmp	r3, #5
   1655c:	dd03      	ble.n	16566 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
      delete[] dims_pointer_;
   1655e:	985b      	ldr	r0, [sp, #364]	; 0x16c
   16560:	b108      	cbz	r0, 16566 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
   16562:	f002 f98d 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16566:	9b54      	ldr	r3, [sp, #336]	; 0x150
   16568:	2b05      	cmp	r3, #5
   1656a:	dd03      	ble.n	16574 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x656>
      delete[] dims_pointer_;
   1656c:	9855      	ldr	r0, [sp, #340]	; 0x154
   1656e:	b108      	cbz	r0, 16574 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x656>
   16570:	f002 f986 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16574:	9b4e      	ldr	r3, [sp, #312]	; 0x138
   16576:	2b05      	cmp	r3, #5
   16578:	dd03      	ble.n	16582 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
      delete[] dims_pointer_;
   1657a:	984f      	ldr	r0, [sp, #316]	; 0x13c
   1657c:	b108      	cbz	r0, 16582 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
   1657e:	f002 f97f 	bl	18880 <_ZdaPv>
}
   16582:	b061      	add	sp, #388	; 0x184
   16584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016588 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   16588:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   1658a:	b108      	cbz	r0, 16590 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x8>
}
   1658c:	6800      	ldr	r0, [r0, #0]
   1658e:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   16590:	f002 f98b 	bl	188aa <abort>

00016594 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16594:	b108      	cbz	r0, 1659a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x6>
   16596:	6800      	ldr	r0, [r0, #0]
   16598:	4770      	bx	lr
}
   1659a:	4770      	bx	lr

0001659c <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   1659c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   1659e:	b108      	cbz	r0, 165a4 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
}
   165a0:	6800      	ldr	r0, [r0, #0]
   165a2:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   165a4:	f002 f981 	bl	188aa <abort>

000165a8 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   165a8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   165aa:	b108      	cbz	r0, 165b0 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x8>
}
   165ac:	6800      	ldr	r0, [r0, #0]
   165ae:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   165b0:	f002 f97b 	bl	188aa <abort>

000165b4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   165b4:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   165b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   165b8:	b113      	cbz	r3, 165c0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   165ba:	2134      	movs	r1, #52	; 0x34
   165bc:	4798      	blx	r3
}
   165be:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   165c0:	f002 f973 	bl	188aa <abort>

000165c4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
   165c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165c8:	b0a3      	sub	sp, #140	; 0x8c
   165ca:	9217      	str	r2, [sp, #92]	; 0x5c
   165cc:	461e      	mov	r6, r3
   165ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   165d0:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int stride_width = params.stride_width;
   165d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   165d6:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
   165d8:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   165dc:	920d      	str	r2, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
   165de:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   165e2:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
   165e4:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   165e8:	920f      	str	r2, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
   165ea:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   165ee:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   165f0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   165f4:	9211      	str	r2, [sp, #68]	; 0x44
  const float output_activation_min = params.float_activation_min;
   165f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
   165f8:	9212      	str	r2, [sp, #72]	; 0x48
  const float output_activation_max = params.float_activation_max;
   165fa:	6b42      	ldr	r2, [r0, #52]	; 0x34
   165fc:	9204      	str	r2, [sp, #16]
  inline int32_t DimensionsCount() const { return size_; }
   165fe:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   16600:	2a04      	cmp	r2, #4
   16602:	d173      	bne.n	166ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x128>
   16604:	468b      	mov	fp, r1
   16606:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   16608:	2a04      	cmp	r2, #4
   1660a:	d171      	bne.n	166f0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12c>
   1660c:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1660e:	2a04      	cmp	r2, #4
   16610:	d170      	bne.n	166f4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x130>
    TFLITE_DCHECK_LT(i, size_);
   16612:	680a      	ldr	r2, [r1, #0]
   16614:	2a00      	cmp	r2, #0
   16616:	dd6f      	ble.n	166f8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16618:	2a05      	cmp	r2, #5
   1661a:	dd6f      	ble.n	166fc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x138>
   1661c:	684a      	ldr	r2, [r1, #4]
   1661e:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16620:	6839      	ldr	r1, [r7, #0]
   16622:	2900      	cmp	r1, #0
   16624:	dd6c      	ble.n	16700 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x13c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16626:	2905      	cmp	r1, #5
   16628:	dd6c      	ble.n	16704 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x140>
   1662a:	6879      	ldr	r1, [r7, #4]
   1662c:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1662e:	4291      	cmp	r1, r2
   16630:	d16a      	bne.n	16708 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16632:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
   16634:	6839      	ldr	r1, [r7, #0]
   16636:	2900      	cmp	r1, #0
   16638:	dd68      	ble.n	1670c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x148>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1663a:	2905      	cmp	r1, #5
   1663c:	dd68      	ble.n	16710 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x14c>
   1663e:	6879      	ldr	r1, [r7, #4]
   16640:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16642:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
   16644:	428a      	cmp	r2, r1
   16646:	dc65      	bgt.n	16714 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x150>
      return __a;
   16648:	aa21      	add	r2, sp, #132	; 0x84
   1664a:	6812      	ldr	r2, [r2, #0]
   1664c:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   1664e:	f8db 2000 	ldr.w	r2, [fp]
   16652:	2a03      	cmp	r2, #3
   16654:	dd60      	ble.n	16718 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16656:	2a05      	cmp	r2, #5
   16658:	dd60      	ble.n	1671c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x158>
   1665a:	f8db 2004 	ldr.w	r2, [fp, #4]
   1665e:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   16660:	6831      	ldr	r1, [r6, #0]
   16662:	2903      	cmp	r1, #3
   16664:	dd5d      	ble.n	16722 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x15e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16666:	2905      	cmp	r1, #5
   16668:	dd5d      	ble.n	16726 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x162>
   1666a:	6871      	ldr	r1, [r6, #4]
   1666c:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1666e:	4291      	cmp	r1, r2
   16670:	d15b      	bne.n	1672a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16672:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   16674:	6831      	ldr	r1, [r6, #0]
   16676:	2903      	cmp	r1, #3
   16678:	dd59      	ble.n	1672e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1667a:	2905      	cmp	r1, #5
   1667c:	dd59      	ble.n	16732 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16e>
   1667e:	6871      	ldr	r1, [r6, #4]
   16680:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16682:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   16684:	428a      	cmp	r2, r1
   16686:	dc56      	bgt.n	16736 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x172>
      return __a;
   16688:	aa1f      	add	r2, sp, #124	; 0x7c
   1668a:	6812      	ldr	r2, [r2, #0]
   1668c:	9215      	str	r2, [sp, #84]	; 0x54
    TFLITE_DCHECK_LT(i, size_);
   1668e:	6832      	ldr	r2, [r6, #0]
   16690:	2a00      	cmp	r2, #0
   16692:	dd52      	ble.n	1673a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16694:	2a05      	cmp	r2, #5
   16696:	dd52      	ble.n	1673e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17a>
   16698:	6872      	ldr	r2, [r6, #4]
   1669a:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   1669c:	6839      	ldr	r1, [r7, #0]
   1669e:	2903      	cmp	r1, #3
   166a0:	dd4f      	ble.n	16742 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   166a2:	2905      	cmp	r1, #5
   166a4:	dd4f      	ble.n	16746 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
   166a6:	6879      	ldr	r1, [r7, #4]
   166a8:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   166aa:	4291      	cmp	r1, r2
   166ac:	d14d      	bne.n	1674a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   166ae:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   166b0:	6839      	ldr	r1, [r7, #0]
   166b2:	2903      	cmp	r1, #3
   166b4:	dd4b      	ble.n	1674e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   166b6:	2905      	cmp	r1, #5
   166b8:	dd4b      	ble.n	16752 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18e>
   166ba:	6879      	ldr	r1, [r7, #4]
   166bc:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   166be:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   166c0:	428a      	cmp	r2, r1
   166c2:	dc48      	bgt.n	16756 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x192>
      return __a;
   166c4:	aa1d      	add	r2, sp, #116	; 0x74
   166c6:	6812      	ldr	r2, [r2, #0]
   166c8:	9205      	str	r2, [sp, #20]
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
   166ca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   166cc:	2a00      	cmp	r2, #0
   166ce:	d049      	beq.n	16764 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166d0:	681c      	ldr	r4, [r3, #0]
   166d2:	2c05      	cmp	r4, #5
   166d4:	dd41      	ble.n	1675a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
   166d6:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   166d8:	2200      	movs	r2, #0
    int buffer_size = 1;
   166da:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   166dc:	42a2      	cmp	r2, r4
   166de:	da3e      	bge.n	1675e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19a>
      buffer_size *= dims_data[i];
   166e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   166e4:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   166e8:	3201      	adds	r2, #1
   166ea:	e7f7      	b.n	166dc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x118>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   166ec:	f002 f8dd 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   166f0:	f002 f8db 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   166f4:	f002 f8d9 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   166f8:	f002 f8d7 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   166fc:	684a      	ldr	r2, [r1, #4]
   166fe:	e78f      	b.n	16620 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5c>
    TFLITE_DCHECK_LT(i, size_);
   16700:	f002 f8d3 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16704:	6879      	ldr	r1, [r7, #4]
   16706:	e792      	b.n	1662e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16708:	f002 f8cf 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   1670c:	f002 f8cd 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16710:	6879      	ldr	r1, [r7, #4]
   16712:	e796      	b.n	16642 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x7e>
	return __b;
   16714:	aa20      	add	r2, sp, #128	; 0x80
   16716:	e798      	b.n	1664a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x86>
    TFLITE_DCHECK_LT(i, size_);
   16718:	f002 f8c7 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1671c:	f8db 2010 	ldr.w	r2, [fp, #16]
   16720:	e79e      	b.n	16660 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x9c>
    TFLITE_DCHECK_LT(i, size_);
   16722:	f002 f8c2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16726:	6931      	ldr	r1, [r6, #16]
   16728:	e7a1      	b.n	1666e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xaa>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1672a:	f002 f8be 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   1672e:	f002 f8bc 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16732:	6931      	ldr	r1, [r6, #16]
   16734:	e7a5      	b.n	16682 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xbe>
   16736:	aa1e      	add	r2, sp, #120	; 0x78
   16738:	e7a7      	b.n	1668a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xc6>
    TFLITE_DCHECK_LT(i, size_);
   1673a:	f002 f8b6 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1673e:	6872      	ldr	r2, [r6, #4]
   16740:	e7ac      	b.n	1669c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd8>
    TFLITE_DCHECK_LT(i, size_);
   16742:	f002 f8b2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16746:	6939      	ldr	r1, [r7, #16]
   16748:	e7af      	b.n	166aa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1674a:	f002 f8ae 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   1674e:	f002 f8ac 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16752:	6939      	ldr	r1, [r7, #16]
   16754:	e7b3      	b.n	166be <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xfa>
   16756:	aa1c      	add	r2, sp, #112	; 0x70
   16758:	e7b5      	b.n	166c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1675a:	3304      	adds	r3, #4
   1675c:	e7bc      	b.n	166d8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   1675e:	9b05      	ldr	r3, [sp, #20]
   16760:	4299      	cmp	r1, r3
   16762:	d161      	bne.n	16828 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x264>
    TFLITE_DCHECK_LT(i, size_);
   16764:	f8db 3000 	ldr.w	r3, [fp]
   16768:	2b01      	cmp	r3, #1
   1676a:	dd5f      	ble.n	1682c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x268>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1676c:	2b05      	cmp	r3, #5
   1676e:	dd5f      	ble.n	16830 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x26c>
   16770:	f8db 3004 	ldr.w	r3, [fp, #4]
   16774:	685b      	ldr	r3, [r3, #4]
   16776:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   16778:	f8db 3000 	ldr.w	r3, [fp]
   1677c:	2b02      	cmp	r3, #2
   1677e:	dd5b      	ble.n	16838 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16780:	2b05      	cmp	r3, #5
   16782:	dd5b      	ble.n	1683c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x278>
   16784:	f8db 3004 	ldr.w	r3, [fp, #4]
   16788:	689b      	ldr	r3, [r3, #8]
   1678a:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   1678c:	6833      	ldr	r3, [r6, #0]
   1678e:	2b01      	cmp	r3, #1
   16790:	dd58      	ble.n	16844 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x280>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16792:	2b05      	cmp	r3, #5
   16794:	dd58      	ble.n	16848 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
   16796:	6873      	ldr	r3, [r6, #4]
   16798:	685b      	ldr	r3, [r3, #4]
   1679a:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   1679c:	6833      	ldr	r3, [r6, #0]
   1679e:	2b02      	cmp	r3, #2
   167a0:	dd55      	ble.n	1684e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   167a2:	2b05      	cmp	r3, #5
   167a4:	dd55      	ble.n	16852 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28e>
   167a6:	6873      	ldr	r3, [r6, #4]
   167a8:	689b      	ldr	r3, [r3, #8]
   167aa:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   167ac:	683b      	ldr	r3, [r7, #0]
   167ae:	2b01      	cmp	r3, #1
   167b0:	dd52      	ble.n	16858 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x294>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   167b2:	2b05      	cmp	r3, #5
   167b4:	dd52      	ble.n	1685c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x298>
   167b6:	687b      	ldr	r3, [r7, #4]
   167b8:	685b      	ldr	r3, [r3, #4]
   167ba:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   167bc:	683b      	ldr	r3, [r7, #0]
   167be:	2b02      	cmp	r3, #2
   167c0:	dd4f      	ble.n	16862 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x29e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   167c2:	2b05      	cmp	r3, #5
   167c4:	dd4f      	ble.n	16866 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a2>
   167c6:	687b      	ldr	r3, [r7, #4]
   167c8:	689b      	ldr	r3, [r3, #8]
   167ca:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
   167cc:	f04f 0a00 	mov.w	sl, #0
   167d0:	46d1      	mov	r9, sl
   167d2:	46da      	mov	sl, fp
   167d4:	46b3      	mov	fp, r6
   167d6:	463e      	mov	r6, r7
   167d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   167da:	4599      	cmp	r9, r3
   167dc:	f280 8143 	bge.w	16a66 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x4a2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   167e0:	2300      	movs	r3, #0
   167e2:	9300      	str	r3, [sp, #0]
   167e4:	46c8      	mov	r8, r9
   167e6:	46d9      	mov	r9, fp
   167e8:	46d3      	mov	fp, sl
   167ea:	46b2      	mov	sl, r6
   167ec:	9b00      	ldr	r3, [sp, #0]
   167ee:	9907      	ldr	r1, [sp, #28]
   167f0:	428b      	cmp	r3, r1
   167f2:	f280 8132 	bge.w	16a5a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x496>
      const int in_y_origin = (out_y * stride_height) - pad_height;
   167f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   167f8:	fb02 f303 	mul.w	r3, r2, r3
   167fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   167fe:	1a9b      	subs	r3, r3, r2
   16800:	9313      	str	r3, [sp, #76]	; 0x4c
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16802:	2300      	movs	r3, #0
   16804:	9301      	str	r3, [sp, #4]
   16806:	4647      	mov	r7, r8
   16808:	46d8      	mov	r8, fp
   1680a:	9b01      	ldr	r3, [sp, #4]
   1680c:	9906      	ldr	r1, [sp, #24]
   1680e:	428b      	cmp	r3, r1
   16810:	f280 811d 	bge.w	16a4e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
   16814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16816:	fb02 f303 	mul.w	r3, r2, r3
   1681a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1681c:	1a9b      	subs	r3, r3, r2
   1681e:	9314      	str	r3, [sp, #80]	; 0x50
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   16820:	f04f 0b00 	mov.w	fp, #0
   16824:	463e      	mov	r6, r7
   16826:	e0f3      	b.n	16a10 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16828:	f002 f83f 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   1682c:	f002 f83d 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16830:	f8db 3008 	ldr.w	r3, [fp, #8]
   16834:	930b      	str	r3, [sp, #44]	; 0x2c
   16836:	e79f      	b.n	16778 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1b4>
    TFLITE_DCHECK_LT(i, size_);
   16838:	f002 f837 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1683c:	f8db 300c 	ldr.w	r3, [fp, #12]
   16840:	930a      	str	r3, [sp, #40]	; 0x28
   16842:	e7a3      	b.n	1678c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
   16844:	f002 f831 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16848:	68b3      	ldr	r3, [r6, #8]
   1684a:	9309      	str	r3, [sp, #36]	; 0x24
   1684c:	e7a6      	b.n	1679c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d8>
    TFLITE_DCHECK_LT(i, size_);
   1684e:	f002 f82c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16852:	68f3      	ldr	r3, [r6, #12]
   16854:	9308      	str	r3, [sp, #32]
   16856:	e7a9      	b.n	167ac <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
    TFLITE_DCHECK_LT(i, size_);
   16858:	f002 f827 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1685c:	68bb      	ldr	r3, [r7, #8]
   1685e:	9307      	str	r3, [sp, #28]
   16860:	e7ac      	b.n	167bc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
    TFLITE_DCHECK_LT(i, size_);
   16862:	f002 f822 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16866:	68fb      	ldr	r3, [r7, #12]
   16868:	9306      	str	r3, [sp, #24]
   1686a:	e7af      	b.n	167cc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x208>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1686c:	f002 f81d 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16870:	f002 f81b 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16874:	f002 f819 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16878:	f002 f817 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1687c:	f002 f815 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16880:	f002 f813 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16884:	f002 f811 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16888:	f002 f80f 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1688c:	f002 f80d 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16890:	f002 f80b 	bl	188aa <abort>
          float total = 0.f;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16894:	3501      	adds	r5, #1
   16896:	9b08      	ldr	r3, [sp, #32]
   16898:	429d      	cmp	r5, r3
   1689a:	da69      	bge.n	16970 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ac>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
   1689c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1689e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   168a0:	fb03 2a05 	mla	sl, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   168a4:	f1ba 0f00 	cmp.w	sl, #0
   168a8:	dbf4      	blt.n	16894 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   168aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   168ac:	459a      	cmp	sl, r3
   168ae:	daf1      	bge.n	16894 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   168b0:	2e00      	cmp	r6, #0
   168b2:	dbef      	blt.n	16894 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   168b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   168b6:	429e      	cmp	r6, r3
   168b8:	daec      	bge.n	16894 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   168ba:	2400      	movs	r4, #0

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   168bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   168be:	429c      	cmp	r4, r3
   168c0:	dae8      	bge.n	16894 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
  inline int32_t DimensionsCount() const { return size_; }
   168c2:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   168c6:	2b04      	cmp	r3, #4
   168c8:	d1d0      	bne.n	1686c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   168ca:	9a03      	ldr	r2, [sp, #12]
   168cc:	2a00      	cmp	r2, #0
   168ce:	dbcf      	blt.n	16870 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
   168d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   168d4:	429a      	cmp	r2, r3
   168d6:	dacb      	bge.n	16870 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   168d8:	2e00      	cmp	r6, #0
   168da:	dbcb      	blt.n	16874 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
   168dc:	f8d8 1008 	ldr.w	r1, [r8, #8]
   168e0:	428e      	cmp	r6, r1
   168e2:	dac7      	bge.n	16874 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   168e4:	f1ba 0f00 	cmp.w	sl, #0
   168e8:	dbc6      	blt.n	16878 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
   168ea:	f8d8 200c 	ldr.w	r2, [r8, #12]
   168ee:	4592      	cmp	sl, r2
   168f0:	dac2      	bge.n	16878 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   168f2:	2c00      	cmp	r4, #0
   168f4:	dbc2      	blt.n	1687c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
   168f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   168fa:	429c      	cmp	r4, r3
   168fc:	dabe      	bge.n	1687c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   168fe:	9803      	ldr	r0, [sp, #12]
   16900:	fb01 6100 	mla	r1, r1, r0, r6
   16904:	fb01 a202 	mla	r2, r1, r2, sl
   16908:	fb02 4303 	mla	r3, r2, r3, r4
                float input_value = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
   1690c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1690e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   16912:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16916:	2b04      	cmp	r3, #4
   16918:	d1b2      	bne.n	16880 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2bc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1691a:	f1bb 0f00 	cmp.w	fp, #0
   1691e:	dbb1      	blt.n	16884 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
   16920:	f8d9 3004 	ldr.w	r3, [r9, #4]
   16924:	459b      	cmp	fp, r3
   16926:	daad      	bge.n	16884 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16928:	2f00      	cmp	r7, #0
   1692a:	dbad      	blt.n	16888 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
   1692c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16930:	428f      	cmp	r7, r1
   16932:	daa9      	bge.n	16888 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16934:	2d00      	cmp	r5, #0
   16936:	dba9      	blt.n	1688c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
   16938:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1693c:	4295      	cmp	r5, r2
   1693e:	daa5      	bge.n	1688c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16940:	2c00      	cmp	r4, #0
   16942:	dba5      	blt.n	16890 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
   16944:	f8d9 3010 	ldr.w	r3, [r9, #16]
   16948:	429c      	cmp	r4, r3
   1694a:	daa1      	bge.n	16890 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1694c:	fb01 710b 	mla	r1, r1, fp, r7
   16950:	fb01 5202 	mla	r2, r1, r2, r5
   16954:	fb02 4303 	mla	r3, r2, r3, r4
                float filter_value = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
   16958:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   1695a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1695e:	f7ea f9fb 	bl	d58 <__aeabi_fmul>
   16962:	4601      	mov	r1, r0
   16964:	9802      	ldr	r0, [sp, #8]
   16966:	f7ea f8ef 	bl	b48 <__addsf3>
   1696a:	9002      	str	r0, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   1696c:	3401      	adds	r4, #1
   1696e:	e7a5      	b.n	168bc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   16970:	3701      	adds	r7, #1
   16972:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16974:	429f      	cmp	r7, r3
   16976:	da05      	bge.n	16984 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3c0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   16978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1697a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1697c:	fb03 2607 	mla	r6, r3, r7, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16980:	2500      	movs	r5, #0
   16982:	e788      	b.n	16896 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d2>
   16984:	9e03      	ldr	r6, [sp, #12]
   16986:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
   1698a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1698c:	2b00      	cmp	r3, #0
   1698e:	d049      	beq.n	16a24 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x460>
            bias_value = bias_data[out_channel];
   16990:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
   16994:	9802      	ldr	r0, [sp, #8]
   16996:	f7ea f8d7 	bl	b48 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   1699a:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1699e:	2b04      	cmp	r3, #4
   169a0:	d142      	bne.n	16a28 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x464>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   169a2:	2e00      	cmp	r6, #0
   169a4:	db42      	blt.n	16a2c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
   169a6:	f8da 3004 	ldr.w	r3, [sl, #4]
   169aa:	429e      	cmp	r6, r3
   169ac:	da3e      	bge.n	16a2c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   169ae:	9b00      	ldr	r3, [sp, #0]
   169b0:	2b00      	cmp	r3, #0
   169b2:	db3d      	blt.n	16a30 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
   169b4:	f8da 2008 	ldr.w	r2, [sl, #8]
   169b8:	4293      	cmp	r3, r2
   169ba:	da39      	bge.n	16a30 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   169bc:	9901      	ldr	r1, [sp, #4]
   169be:	2900      	cmp	r1, #0
   169c0:	db38      	blt.n	16a34 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
   169c2:	f8da 300c 	ldr.w	r3, [sl, #12]
   169c6:	4299      	cmp	r1, r3
   169c8:	da34      	bge.n	16a34 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   169ca:	f1bb 0f00 	cmp.w	fp, #0
   169ce:	db33      	blt.n	16a38 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
   169d0:	f8da 4010 	ldr.w	r4, [sl, #16]
   169d4:	45a3      	cmp	fp, r4
   169d6:	da2f      	bge.n	16a38 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   169d8:	9900      	ldr	r1, [sp, #0]
   169da:	fb02 1206 	mla	r2, r2, r6, r1
   169de:	9901      	ldr	r1, [sp, #4]
   169e0:	fb02 1303 	mla	r3, r2, r3, r1
   169e4:	fb03 b404 	mla	r4, r3, r4, fp
   169e8:	9019      	str	r0, [sp, #100]	; 0x64
   169ea:	9912      	ldr	r1, [sp, #72]	; 0x48
   169ec:	911a      	str	r1, [sp, #104]	; 0x68
   169ee:	9b04      	ldr	r3, [sp, #16]
   169f0:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   169f2:	f7ea fb4f 	bl	1094 <__aeabi_fcmplt>
   169f6:	bb08      	cbnz	r0, 16a3c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x478>
      return __a;
   169f8:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   169fa:	6829      	ldr	r1, [r5, #0]
   169fc:	9804      	ldr	r0, [sp, #16]
   169fe:	f7ea fb49 	bl	1094 <__aeabi_fcmplt>
   16a02:	b9e8      	cbnz	r0, 16a40 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x47c>
   16a04:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   16a06:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   16a08:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   16a0c:	f10b 0b01 	add.w	fp, fp, #1
   16a10:	9b05      	ldr	r3, [sp, #20]
   16a12:	459b      	cmp	fp, r3
   16a14:	da16      	bge.n	16a44 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x480>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   16a16:	2700      	movs	r7, #0
          float total = 0.f;
   16a18:	2300      	movs	r3, #0
   16a1a:	9302      	str	r3, [sp, #8]
   16a1c:	9603      	str	r6, [sp, #12]
   16a1e:	f8cd a0bc 	str.w	sl, [sp, #188]	; 0xbc
   16a22:	e7a6      	b.n	16972 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ae>
          float bias_value = 0.0f;
   16a24:	2100      	movs	r1, #0
   16a26:	e7b5      	b.n	16994 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16a28:	f001 ff3f 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16a2c:	f001 ff3d 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16a30:	f001 ff3b 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16a34:	f001 ff39 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16a38:	f001 ff37 	bl	188aa <abort>
	return __b;
   16a3c:	ad1a      	add	r5, sp, #104	; 0x68
   16a3e:	e7dc      	b.n	169fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x436>
	return __b;
   16a40:	ad1b      	add	r5, sp, #108	; 0x6c
   16a42:	e7df      	b.n	16a04 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x440>
   16a44:	4637      	mov	r7, r6
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16a46:	9b01      	ldr	r3, [sp, #4]
   16a48:	3301      	adds	r3, #1
   16a4a:	9301      	str	r3, [sp, #4]
   16a4c:	e6dd      	b.n	1680a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x246>
   16a4e:	46c3      	mov	fp, r8
   16a50:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   16a52:	9b00      	ldr	r3, [sp, #0]
   16a54:	3301      	adds	r3, #1
   16a56:	9300      	str	r3, [sp, #0]
   16a58:	e6c8      	b.n	167ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x228>
   16a5a:	4656      	mov	r6, sl
   16a5c:	46da      	mov	sl, fp
   16a5e:	46cb      	mov	fp, r9
  for (int batch = 0; batch < batches; ++batch) {
   16a60:	f108 0901 	add.w	r9, r8, #1
   16a64:	e6b8      	b.n	167d8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x214>
                                           output_activation_max);
        }
      }
    }
  }
}
   16a66:	b023      	add	sp, #140	; 0x8c
   16a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016a6c <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                               const OpDataConv& data) {
   16a6c:	b570      	push	{r4, r5, r6, lr}
   16a6e:	4604      	mov	r4, r0
   16a70:	460e      	mov	r6, r1
   16a72:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   16a74:	6913      	ldr	r3, [r2, #16]
   16a76:	425b      	negs	r3, r3
   16a78:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   16a7a:	6953      	ldr	r3, [r2, #20]
   16a7c:	425b      	negs	r3, r3
   16a7e:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   16a80:	6993      	ldr	r3, [r2, #24]
   16a82:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   16a84:	69d3      	ldr	r3, [r2, #28]
   16a86:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   16a88:	6a13      	ldr	r3, [r2, #32]
   16a8a:	425b      	negs	r3, r3
   16a8c:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   16a8e:	7808      	ldrb	r0, [r1, #0]
   16a90:	f000 fb54 	bl	1713c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   16a94:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   16a96:	686b      	ldr	r3, [r5, #4]
   16a98:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   16a9a:	682b      	ldr	r3, [r5, #0]
   16a9c:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   16a9e:	68b3      	ldr	r3, [r6, #8]
   16aa0:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   16aa2:	6873      	ldr	r3, [r6, #4]
   16aa4:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   16aa6:	6973      	ldr	r3, [r6, #20]
   16aa8:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   16aaa:	6933      	ldr	r3, [r6, #16]
   16aac:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   16aae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16ab0:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   16ab2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   16ab6:	4620      	mov	r0, r4
   16ab8:	bd70      	pop	{r4, r5, r6, pc}

00016aba <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                           const OpDataConv& data) {
   16aba:	b570      	push	{r4, r5, r6, lr}
   16abc:	4604      	mov	r4, r0
   16abe:	460d      	mov	r5, r1
   16ac0:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   16ac2:	f100 0234 	add.w	r2, r0, #52	; 0x34
   16ac6:	f100 0130 	add.w	r1, r0, #48	; 0x30
   16aca:	7b28      	ldrb	r0, [r5, #12]
   16acc:	f7f3 fd2c 	bl	a528 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   16ad0:	7828      	ldrb	r0, [r5, #0]
   16ad2:	f000 fb33 	bl	1713c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   16ad6:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   16ad8:	6833      	ldr	r3, [r6, #0]
   16ada:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   16adc:	6873      	ldr	r3, [r6, #4]
   16ade:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   16ae0:	686b      	ldr	r3, [r5, #4]
   16ae2:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   16ae4:	68ab      	ldr	r3, [r5, #8]
   16ae6:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   16ae8:	692b      	ldr	r3, [r5, #16]
   16aea:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   16aec:	696b      	ldr	r3, [r5, #20]
   16aee:	8223      	strh	r3, [r4, #16]
}
   16af0:	4620      	mov	r0, r4
   16af2:	bd70      	pop	{r4, r5, r6, pc}

00016af4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   16af4:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   16af6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16af8:	b113      	cbz	r3, 16b00 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   16afa:	2134      	movs	r1, #52	; 0x34
   16afc:	4798      	blx	r3
}
   16afe:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   16b00:	f001 fed3 	bl	188aa <abort>

00016b04 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   16b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b08:	b0a1      	sub	sp, #132	; 0x84
   16b0a:	9217      	str	r2, [sp, #92]	; 0x5c
   16b0c:	461e      	mov	r6, r3
   16b0e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   16b10:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
  const int stride_width = params.stride_width;
   16b14:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   16b18:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   16b1a:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   16b1e:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   16b20:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   16b24:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   16b26:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   16b2a:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   16b2c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   16b30:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
   16b32:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   16b36:	9212      	str	r2, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
   16b38:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   16b3c:	9205      	str	r2, [sp, #20]
  const float output_activation_min = params.float_activation_min;
   16b3e:	6b02      	ldr	r2, [r0, #48]	; 0x30
   16b40:	9213      	str	r2, [sp, #76]	; 0x4c
  const float output_activation_max = params.float_activation_max;
   16b42:	6b42      	ldr	r2, [r0, #52]	; 0x34
   16b44:	9206      	str	r2, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   16b46:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   16b48:	2a04      	cmp	r2, #4
   16b4a:	f040 80b2 	bne.w	16cb2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ae>
   16b4e:	468b      	mov	fp, r1
   16b50:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   16b52:	2a04      	cmp	r2, #4
   16b54:	f040 80af 	bne.w	16cb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
   16b58:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   16b5c:	2a04      	cmp	r2, #4
   16b5e:	f040 80ac 	bne.w	16cba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b6>
    TFLITE_DCHECK_LT(i, size_);
   16b62:	680a      	ldr	r2, [r1, #0]
   16b64:	2a00      	cmp	r2, #0
   16b66:	f340 80aa 	ble.w	16cbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ba>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16b6a:	2a05      	cmp	r2, #5
   16b6c:	f340 80a9 	ble.w	16cc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
   16b70:	684a      	ldr	r2, [r1, #4]
   16b72:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16b74:	f8d9 1000 	ldr.w	r1, [r9]
   16b78:	2900      	cmp	r1, #0
   16b7a:	f340 80a4 	ble.w	16cc6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16b7e:	2905      	cmp	r1, #5
   16b80:	f340 80a3 	ble.w	16cca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c6>
   16b84:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16b88:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16b8a:	4291      	cmp	r1, r2
   16b8c:	f040 80a0 	bne.w	16cd0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1cc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16b90:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   16b92:	f8d9 1000 	ldr.w	r1, [r9]
   16b96:	2900      	cmp	r1, #0
   16b98:	f340 809c 	ble.w	16cd4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16b9c:	2905      	cmp	r1, #5
   16b9e:	f340 809b 	ble.w	16cd8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
   16ba2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16ba6:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16ba8:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   16baa:	428a      	cmp	r2, r1
   16bac:	f300 8097 	bgt.w	16cde <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1da>
      return __a;
   16bb0:	aa1f      	add	r2, sp, #124	; 0x7c
   16bb2:	6812      	ldr	r2, [r2, #0]
   16bb4:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   16bb6:	6832      	ldr	r2, [r6, #0]
   16bb8:	2a03      	cmp	r2, #3
   16bba:	f340 8092 	ble.w	16ce2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16bbe:	2a05      	cmp	r2, #5
   16bc0:	f340 8091 	ble.w	16ce6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e2>
   16bc4:	6872      	ldr	r2, [r6, #4]
   16bc6:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   16bc8:	f8d9 1000 	ldr.w	r1, [r9]
   16bcc:	2903      	cmp	r1, #3
   16bce:	f340 808c 	ble.w	16cea <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16bd2:	2905      	cmp	r1, #5
   16bd4:	f340 808b 	ble.w	16cee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ea>
   16bd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16bdc:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16bde:	4291      	cmp	r1, r2
   16be0:	f040 8088 	bne.w	16cf4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16be4:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   16be6:	f8d9 1000 	ldr.w	r1, [r9]
   16bea:	2903      	cmp	r1, #3
   16bec:	f340 8084 	ble.w	16cf8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16bf0:	2905      	cmp	r1, #5
   16bf2:	f340 8083 	ble.w	16cfc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
   16bf6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16bfa:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16bfc:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   16bfe:	428a      	cmp	r2, r1
   16c00:	dc7f      	bgt.n	16d02 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
      return __a;
   16c02:	aa1d      	add	r2, sp, #116	; 0x74
   16c04:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16c06:	f8db 2000 	ldr.w	r2, [fp]
   16c0a:	2a01      	cmp	r2, #1
   16c0c:	dd7b      	ble.n	16d06 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16c0e:	2a05      	cmp	r2, #5
   16c10:	dd7b      	ble.n	16d0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x206>
   16c12:	f8db 2004 	ldr.w	r2, [fp, #4]
   16c16:	6852      	ldr	r2, [r2, #4]
   16c18:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   16c1a:	f8db 2000 	ldr.w	r2, [fp]
   16c1e:	2a02      	cmp	r2, #2
   16c20:	dd77      	ble.n	16d12 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16c22:	2a05      	cmp	r2, #5
   16c24:	dd77      	ble.n	16d16 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x212>
   16c26:	f8db 2004 	ldr.w	r2, [fp, #4]
   16c2a:	6892      	ldr	r2, [r2, #8]
   16c2c:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   16c2e:	f8db 2000 	ldr.w	r2, [fp]
   16c32:	2a03      	cmp	r2, #3
   16c34:	dd73      	ble.n	16d1e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16c36:	2a05      	cmp	r2, #5
   16c38:	dd73      	ble.n	16d22 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21e>
   16c3a:	f8db 2004 	ldr.w	r2, [fp, #4]
   16c3e:	68d2      	ldr	r2, [r2, #12]
   16c40:	9204      	str	r2, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   16c42:	6832      	ldr	r2, [r6, #0]
   16c44:	2a01      	cmp	r2, #1
   16c46:	dd70      	ble.n	16d2a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16c48:	2a05      	cmp	r2, #5
   16c4a:	dd70      	ble.n	16d2e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   16c4c:	6872      	ldr	r2, [r6, #4]
   16c4e:	6852      	ldr	r2, [r2, #4]
   16c50:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   16c52:	6832      	ldr	r2, [r6, #0]
   16c54:	2a02      	cmp	r2, #2
   16c56:	dd6d      	ble.n	16d34 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16c58:	2a05      	cmp	r2, #5
   16c5a:	dd6d      	ble.n	16d38 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x234>
   16c5c:	6872      	ldr	r2, [r6, #4]
   16c5e:	6892      	ldr	r2, [r2, #8]
   16c60:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   16c62:	f8d9 2000 	ldr.w	r2, [r9]
   16c66:	2a01      	cmp	r2, #1
   16c68:	dd69      	ble.n	16d3e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16c6a:	2a05      	cmp	r2, #5
   16c6c:	dd69      	ble.n	16d42 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23e>
   16c6e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   16c72:	6852      	ldr	r2, [r2, #4]
   16c74:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   16c76:	f8d9 2000 	ldr.w	r2, [r9]
   16c7a:	2a02      	cmp	r2, #2
   16c7c:	dd65      	ble.n	16d4a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x246>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16c7e:	2a05      	cmp	r2, #5
   16c80:	dd65      	ble.n	16d4e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x24a>
   16c82:	f8d9 2004 	ldr.w	r2, [r9, #4]
   16c86:	6892      	ldr	r2, [r2, #8]
   16c88:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   16c8a:	9a04      	ldr	r2, [sp, #16]
   16c8c:	9805      	ldr	r0, [sp, #20]
   16c8e:	fb02 f200 	mul.w	r2, r2, r0
   16c92:	428a      	cmp	r2, r1
   16c94:	d15f      	bne.n	16d56 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16c96:	681c      	ldr	r4, [r3, #0]
   16c98:	2c05      	cmp	r4, #5
   16c9a:	dd5e      	ble.n	16d5a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x256>
   16c9c:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   16c9e:	2200      	movs	r2, #0
    int buffer_size = 1;
   16ca0:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
   16ca2:	42a2      	cmp	r2, r4
   16ca4:	da5b      	bge.n	16d5e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
      buffer_size *= dims_data[i];
   16ca6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   16caa:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
   16cae:	3201      	adds	r2, #1
   16cb0:	e7f7      	b.n	16ca2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19e>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   16cb2:	f001 fdfa 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   16cb6:	f001 fdf8 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   16cba:	f001 fdf6 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   16cbe:	f001 fdf4 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16cc2:	684a      	ldr	r2, [r1, #4]
   16cc4:	e756      	b.n	16b74 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
    TFLITE_DCHECK_LT(i, size_);
   16cc6:	f001 fdf0 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16cca:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16cce:	e75c      	b.n	16b8a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16cd0:	f001 fdeb 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   16cd4:	f001 fde9 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16cd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16cdc:	e764      	b.n	16ba8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xa4>
	return __b;
   16cde:	aa1e      	add	r2, sp, #120	; 0x78
   16ce0:	e767      	b.n	16bb2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xae>
    TFLITE_DCHECK_LT(i, size_);
   16ce2:	f001 fde2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ce6:	6932      	ldr	r2, [r6, #16]
   16ce8:	e76e      	b.n	16bc8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc4>
    TFLITE_DCHECK_LT(i, size_);
   16cea:	f001 fdde 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16cee:	f8d9 1010 	ldr.w	r1, [r9, #16]
   16cf2:	e774      	b.n	16bde <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xda>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16cf4:	f001 fdd9 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   16cf8:	f001 fdd7 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16cfc:	f8d9 1010 	ldr.w	r1, [r9, #16]
   16d00:	e77c      	b.n	16bfc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xf8>
   16d02:	aa1c      	add	r2, sp, #112	; 0x70
   16d04:	e77e      	b.n	16c04 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
    TFLITE_DCHECK_LT(i, size_);
   16d06:	f001 fdd0 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d0a:	f8db 2008 	ldr.w	r2, [fp, #8]
   16d0e:	920c      	str	r2, [sp, #48]	; 0x30
   16d10:	e783      	b.n	16c1a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x116>
    TFLITE_DCHECK_LT(i, size_);
   16d12:	f001 fdca 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d16:	f8db 200c 	ldr.w	r2, [fp, #12]
   16d1a:	920b      	str	r2, [sp, #44]	; 0x2c
   16d1c:	e787      	b.n	16c2e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12a>
    TFLITE_DCHECK_LT(i, size_);
   16d1e:	f001 fdc4 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d22:	f8db 2010 	ldr.w	r2, [fp, #16]
   16d26:	9204      	str	r2, [sp, #16]
   16d28:	e78b      	b.n	16c42 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
    TFLITE_DCHECK_LT(i, size_);
   16d2a:	f001 fdbe 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d2e:	68b2      	ldr	r2, [r6, #8]
   16d30:	920a      	str	r2, [sp, #40]	; 0x28
   16d32:	e78e      	b.n	16c52 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x14e>
    TFLITE_DCHECK_LT(i, size_);
   16d34:	f001 fdb9 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d38:	68f2      	ldr	r2, [r6, #12]
   16d3a:	9209      	str	r2, [sp, #36]	; 0x24
   16d3c:	e791      	b.n	16c62 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   16d3e:	f001 fdb4 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d42:	f8d9 2008 	ldr.w	r2, [r9, #8]
   16d46:	9208      	str	r2, [sp, #32]
   16d48:	e795      	b.n	16c76 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x172>
    TFLITE_DCHECK_LT(i, size_);
   16d4a:	f001 fdae 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d4e:	f8d9 200c 	ldr.w	r2, [r9, #12]
   16d52:	9207      	str	r2, [sp, #28]
   16d54:	e799      	b.n	16c8a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x186>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   16d56:	f001 fda8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16d5a:	3304      	adds	r3, #4
   16d5c:	e79f      	b.n	16c9e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16d5e:	428d      	cmp	r5, r1
   16d60:	d11e      	bne.n	16da0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x29c>

  for (int b = 0; b < batches; ++b) {
   16d62:	f04f 0a00 	mov.w	sl, #0
   16d66:	464c      	mov	r4, r9
   16d68:	46d1      	mov	r9, sl
   16d6a:	46b2      	mov	sl, r6
   16d6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16d6e:	4599      	cmp	r9, r3
   16d70:	f280 811a 	bge.w	16fa8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   16d74:	2300      	movs	r3, #0
   16d76:	9300      	str	r3, [sp, #0]
   16d78:	46c8      	mov	r8, r9
   16d7a:	46d1      	mov	r9, sl
   16d7c:	46a2      	mov	sl, r4
   16d7e:	9b00      	ldr	r3, [sp, #0]
   16d80:	9a08      	ldr	r2, [sp, #32]
   16d82:	4293      	cmp	r3, r2
   16d84:	f280 810b 	bge.w	16f9e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x49a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16d88:	2300      	movs	r3, #0
   16d8a:	9301      	str	r3, [sp, #4]
   16d8c:	4647      	mov	r7, r8
   16d8e:	46d0      	mov	r8, sl
   16d90:	9b01      	ldr	r3, [sp, #4]
   16d92:	9a07      	ldr	r2, [sp, #28]
   16d94:	4293      	cmp	r3, r2
   16d96:	f280 80fc 	bge.w	16f92 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48e>
        for (int ic = 0; ic < input_depth; ++ic) {
   16d9a:	f04f 0a00 	mov.w	sl, #0
   16d9e:	e0ee      	b.n	16f7e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x47a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16da0:	f001 fd83 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16da4:	f001 fd81 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16da8:	f001 fd7f 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16dac:	f001 fd7d 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16db0:	f001 fd7b 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16db4:	f001 fd79 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16db8:	f001 fd77 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16dbc:	f001 fd75 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16dc0:	f001 fd73 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16dc4:	f001 fd71 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16dc8:	f001 fd6f 	bl	188aa <abort>
            const int oc = m + ic * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16dcc:	3601      	adds	r6, #1
   16dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16dd0:	429e      	cmp	r6, r3
   16dd2:	da60      	bge.n	16e96 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x392>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
   16dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16dd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16dd8:	fb03 2306 	mla	r3, r3, r6, r2
                const int in_y =
   16ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16dde:	9915      	ldr	r1, [sp, #84]	; 0x54
   16de0:	fb02 1205 	mla	r2, r2, r5, r1
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   16de4:	2b00      	cmp	r3, #0
   16de6:	dbf1      	blt.n	16dcc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16dea:	428b      	cmp	r3, r1
   16dec:	daee      	bge.n	16dcc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16dee:	2a00      	cmp	r2, #0
   16df0:	dbec      	blt.n	16dcc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16df2:	990c      	ldr	r1, [sp, #48]	; 0x30
   16df4:	428a      	cmp	r2, r1
   16df6:	dae9      	bge.n	16dcc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
  inline int32_t DimensionsCount() const { return size_; }
   16df8:	f8db 1000 	ldr.w	r1, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16dfc:	2904      	cmp	r1, #4
   16dfe:	d1d1      	bne.n	16da4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16e00:	2f00      	cmp	r7, #0
   16e02:	dbd1      	blt.n	16da8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
   16e04:	f8db 1004 	ldr.w	r1, [fp, #4]
   16e08:	428f      	cmp	r7, r1
   16e0a:	dacd      	bge.n	16da8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16e0c:	2a00      	cmp	r2, #0
   16e0e:	dbcd      	blt.n	16dac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
   16e10:	f8db c008 	ldr.w	ip, [fp, #8]
   16e14:	4562      	cmp	r2, ip
   16e16:	dac9      	bge.n	16dac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16e18:	2b00      	cmp	r3, #0
   16e1a:	dbc9      	blt.n	16db0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
   16e1c:	f8db 000c 	ldr.w	r0, [fp, #12]
   16e20:	4283      	cmp	r3, r0
   16e22:	dac5      	bge.n	16db0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16e24:	f1ba 0f00 	cmp.w	sl, #0
   16e28:	dbc4      	blt.n	16db4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
   16e2a:	f8db 1010 	ldr.w	r1, [fp, #16]
   16e2e:	458a      	cmp	sl, r1
   16e30:	dac0      	bge.n	16db4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16e32:	fb0c 2207 	mla	r2, ip, r7, r2
   16e36:	fb02 3300 	mla	r3, r2, r0, r3
   16e3a:	fb03 a101 	mla	r1, r3, r1, sl
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   16e3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16e40:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   16e44:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16e48:	2b04      	cmp	r3, #4
   16e4a:	d1b5      	bne.n	16db8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16e4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   16e50:	2b00      	cmp	r3, #0
   16e52:	ddb3      	ble.n	16dbc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16e54:	2d00      	cmp	r5, #0
   16e56:	dbb3      	blt.n	16dc0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
   16e58:	f8d9 3008 	ldr.w	r3, [r9, #8]
   16e5c:	429d      	cmp	r5, r3
   16e5e:	daaf      	bge.n	16dc0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16e60:	2e00      	cmp	r6, #0
   16e62:	dbaf      	blt.n	16dc4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
   16e64:	f8d9 200c 	ldr.w	r2, [r9, #12]
   16e68:	4296      	cmp	r6, r2
   16e6a:	daab      	bge.n	16dc4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16e6c:	2c00      	cmp	r4, #0
   16e6e:	dbab      	blt.n	16dc8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
   16e70:	f8d9 3010 	ldr.w	r3, [r9, #16]
   16e74:	429c      	cmp	r4, r3
   16e76:	daa7      	bge.n	16dc8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16e78:	fb02 6205 	mla	r2, r2, r5, r6
   16e7c:	fb02 4303 	mla	r3, r2, r3, r4
                  float filter_value = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
   16e80:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   16e82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   16e86:	f7e9 ff67 	bl	d58 <__aeabi_fmul>
   16e8a:	4601      	mov	r1, r0
   16e8c:	9803      	ldr	r0, [sp, #12]
   16e8e:	f7e9 fe5b 	bl	b48 <__addsf3>
   16e92:	9003      	str	r0, [sp, #12]
   16e94:	e79a      	b.n	16dcc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   16e96:	3501      	adds	r5, #1
   16e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16e9a:	429d      	cmp	r5, r3
   16e9c:	da01      	bge.n	16ea2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x39e>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16e9e:	2600      	movs	r6, #0
   16ea0:	e795      	b.n	16dce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ca>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
   16ea2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   16ea4:	2b00      	cmp	r3, #0
   16ea6:	d058      	beq.n	16f5a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x456>
              bias_value = bias_data[oc];
   16ea8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
   16eac:	9803      	ldr	r0, [sp, #12]
   16eae:	f7e9 fe4b 	bl	b48 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   16eb2:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16eb6:	2b04      	cmp	r3, #4
   16eb8:	d151      	bne.n	16f5e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16eba:	2f00      	cmp	r7, #0
   16ebc:	db51      	blt.n	16f62 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
   16ebe:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16ec2:	429f      	cmp	r7, r3
   16ec4:	da4d      	bge.n	16f62 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16ec6:	9b00      	ldr	r3, [sp, #0]
   16ec8:	2b00      	cmp	r3, #0
   16eca:	db4c      	blt.n	16f66 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
   16ecc:	f8d8 2008 	ldr.w	r2, [r8, #8]
   16ed0:	4293      	cmp	r3, r2
   16ed2:	da48      	bge.n	16f66 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16ed4:	9901      	ldr	r1, [sp, #4]
   16ed6:	2900      	cmp	r1, #0
   16ed8:	db47      	blt.n	16f6a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
   16eda:	f8d8 300c 	ldr.w	r3, [r8, #12]
   16ede:	4299      	cmp	r1, r3
   16ee0:	da43      	bge.n	16f6a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16ee2:	2c00      	cmp	r4, #0
   16ee4:	db43      	blt.n	16f6e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
   16ee6:	f8d8 1010 	ldr.w	r1, [r8, #16]
   16eea:	428c      	cmp	r4, r1
   16eec:	da3f      	bge.n	16f6e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16eee:	9d00      	ldr	r5, [sp, #0]
   16ef0:	fb02 5207 	mla	r2, r2, r7, r5
   16ef4:	9d01      	ldr	r5, [sp, #4]
   16ef6:	fb02 5303 	mla	r3, r2, r3, r5
   16efa:	fb03 4401 	mla	r4, r3, r1, r4
   16efe:	9019      	str	r0, [sp, #100]	; 0x64
   16f00:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16f02:	911a      	str	r1, [sp, #104]	; 0x68
   16f04:	9b06      	ldr	r3, [sp, #24]
   16f06:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   16f08:	f7ea f8c4 	bl	1094 <__aeabi_fcmplt>
   16f0c:	2800      	cmp	r0, #0
   16f0e:	d130      	bne.n	16f72 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46e>
      return __a;
   16f10:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   16f12:	6829      	ldr	r1, [r5, #0]
   16f14:	9806      	ldr	r0, [sp, #24]
   16f16:	f7ea f8bd 	bl	1094 <__aeabi_fcmplt>
   16f1a:	bb60      	cbnz	r0, 16f76 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x472>
   16f1c:	682b      	ldr	r3, [r5, #0]
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   16f1e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   16f20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
          for (int m = 0; m < depth_multiplier; m++) {
   16f24:	9b02      	ldr	r3, [sp, #8]
   16f26:	3301      	adds	r3, #1
   16f28:	9302      	str	r3, [sp, #8]
   16f2a:	9902      	ldr	r1, [sp, #8]
   16f2c:	9b05      	ldr	r3, [sp, #20]
   16f2e:	4299      	cmp	r1, r3
   16f30:	da23      	bge.n	16f7a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x476>
            const int oc = m + ic * depth_multiplier;
   16f32:	fb03 140a 	mla	r4, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
   16f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16f38:	9a01      	ldr	r2, [sp, #4]
   16f3a:	fb03 f302 	mul.w	r3, r3, r2
   16f3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16f40:	1a9b      	subs	r3, r3, r2
   16f42:	9314      	str	r3, [sp, #80]	; 0x50
            const int in_y_origin = (out_y * stride_height) - pad_height;
   16f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16f46:	9a00      	ldr	r2, [sp, #0]
   16f48:	fb03 f302 	mul.w	r3, r3, r2
   16f4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16f4e:	1a9b      	subs	r3, r3, r2
   16f50:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   16f52:	2500      	movs	r5, #0
            float total = 0.f;
   16f54:	2300      	movs	r3, #0
   16f56:	9303      	str	r3, [sp, #12]
   16f58:	e79e      	b.n	16e98 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x394>
            float bias_value = 0.0f;
   16f5a:	2100      	movs	r1, #0
   16f5c:	e7a6      	b.n	16eac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3a8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16f5e:	f001 fca4 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16f62:	f001 fca2 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16f66:	f001 fca0 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16f6a:	f001 fc9e 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16f6e:	f001 fc9c 	bl	188aa <abort>
	return __b;
   16f72:	ad1a      	add	r5, sp, #104	; 0x68
   16f74:	e7cd      	b.n	16f12 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x40e>
	return __b;
   16f76:	ad1b      	add	r5, sp, #108	; 0x6c
   16f78:	e7d0      	b.n	16f1c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x418>
        for (int ic = 0; ic < input_depth; ++ic) {
   16f7a:	f10a 0a01 	add.w	sl, sl, #1
   16f7e:	9b04      	ldr	r3, [sp, #16]
   16f80:	459a      	cmp	sl, r3
   16f82:	da02      	bge.n	16f8a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x486>
          for (int m = 0; m < depth_multiplier; m++) {
   16f84:	2300      	movs	r3, #0
   16f86:	9302      	str	r3, [sp, #8]
   16f88:	e7cf      	b.n	16f2a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x426>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16f8a:	9b01      	ldr	r3, [sp, #4]
   16f8c:	3301      	adds	r3, #1
   16f8e:	9301      	str	r3, [sp, #4]
   16f90:	e6fe      	b.n	16d90 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x28c>
   16f92:	46c2      	mov	sl, r8
   16f94:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   16f96:	9b00      	ldr	r3, [sp, #0]
   16f98:	3301      	adds	r3, #1
   16f9a:	9300      	str	r3, [sp, #0]
   16f9c:	e6ef      	b.n	16d7e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27a>
   16f9e:	4654      	mov	r4, sl
   16fa0:	46ca      	mov	sl, r9
  for (int b = 0; b < batches; ++b) {
   16fa2:	f108 0901 	add.w	r9, r8, #1
   16fa6:	e6e1      	b.n	16d6c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x268>
          }
        }
      }
    }
  }
}
   16fa8:	b021      	add	sp, #132	; 0x84
   16faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016fae <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   16fae:	b570      	push	{r4, r5, r6, lr}
   16fb0:	4604      	mov	r4, r0
   16fb2:	460e      	mov	r6, r1
   16fb4:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   16fb6:	6913      	ldr	r3, [r2, #16]
   16fb8:	425b      	negs	r3, r3
   16fba:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   16fbc:	6953      	ldr	r3, [r2, #20]
   16fbe:	425b      	negs	r3, r3
   16fc0:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   16fc2:	6993      	ldr	r3, [r2, #24]
   16fc4:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   16fc6:	69d3      	ldr	r3, [r2, #28]
   16fc8:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   16fca:	6a13      	ldr	r3, [r2, #32]
   16fcc:	425b      	negs	r3, r3
   16fce:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   16fd0:	7808      	ldrb	r0, [r1, #0]
   16fd2:	f000 f8b3 	bl	1713c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   16fd6:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   16fd8:	686b      	ldr	r3, [r5, #4]
   16fda:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   16fdc:	682b      	ldr	r3, [r5, #0]
   16fde:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   16fe0:	68b3      	ldr	r3, [r6, #8]
   16fe2:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   16fe4:	6873      	ldr	r3, [r6, #4]
   16fe6:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   16fe8:	69b3      	ldr	r3, [r6, #24]
   16fea:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   16fec:	6973      	ldr	r3, [r6, #20]
   16fee:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
   16ff0:	68f3      	ldr	r3, [r6, #12]
   16ff2:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
   16ff4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16ff6:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   16ff8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16ffa:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   16ffc:	4620      	mov	r0, r4
   16ffe:	bd70      	pop	{r4, r5, r6, pc}

00017000 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   17000:	b570      	push	{r4, r5, r6, lr}
   17002:	4604      	mov	r4, r0
   17004:	460d      	mov	r5, r1
   17006:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   17008:	f100 0234 	add.w	r2, r0, #52	; 0x34
   1700c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   17010:	7c28      	ldrb	r0, [r5, #16]
   17012:	f7f3 fa89 	bl	a528 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   17016:	7828      	ldrb	r0, [r5, #0]
   17018:	f000 f890 	bl	1713c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   1701c:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   1701e:	6833      	ldr	r3, [r6, #0]
   17020:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   17022:	6873      	ldr	r3, [r6, #4]
   17024:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   17026:	686b      	ldr	r3, [r5, #4]
   17028:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   1702a:	68ab      	ldr	r3, [r5, #8]
   1702c:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   1702e:	696b      	ldr	r3, [r5, #20]
   17030:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   17032:	69ab      	ldr	r3, [r5, #24]
   17034:	8223      	strh	r3, [r4, #16]
  op_params.depth_multiplier = params.depth_multiplier;
   17036:	68eb      	ldr	r3, [r5, #12]
   17038:	8263      	strh	r3, [r4, #18]
}
   1703a:	4620      	mov	r0, r4
   1703c:	bd70      	pop	{r4, r5, r6, pc}

0001703e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   1703e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   17040:	6b83      	ldr	r3, [r0, #56]	; 0x38
   17042:	b113      	cbz	r3, 1704a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
   17044:	2120      	movs	r1, #32
   17046:	4798      	blx	r3
}
   17048:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1704a:	f001 fc2e 	bl	188aa <abort>

0001704e <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
   1704e:	694a      	ldr	r2, [r1, #20]
   17050:	4252      	negs	r2, r2
   17052:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   17054:	698a      	ldr	r2, [r1, #24]
   17056:	4252      	negs	r2, r2
   17058:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   1705a:	69ca      	ldr	r2, [r1, #28]
   1705c:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   1705e:	680a      	ldr	r2, [r1, #0]
   17060:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   17062:	684a      	ldr	r2, [r1, #4]
   17064:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   17066:	688a      	ldr	r2, [r1, #8]
   17068:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   1706a:	68ca      	ldr	r2, [r1, #12]
   1706c:	6182      	str	r2, [r0, #24]
  return op_params;
}
   1706e:	4770      	bx	lr

00017070 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   17070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17074:	b084      	sub	sp, #16
   17076:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   17078:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
   1707a:	2a01      	cmp	r2, #1
   1707c:	d103      	bne.n	17086 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
   1707e:	2000      	movs	r0, #0
}
   17080:	b004      	add	sp, #16
   17082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17086:	4604      	mov	r4, r0
   17088:	4688      	mov	r8, r1
   1708a:	461f      	mov	r7, r3
    double real_multiplier = 0.0;
   1708c:	2200      	movs	r2, #0
   1708e:	2300      	movs	r3, #0
   17090:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   17094:	ab02      	add	r3, sp, #8
   17096:	9301      	str	r3, [sp, #4]
   17098:	9600      	str	r6, [sp, #0]
   1709a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1709c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1709e:	4639      	mov	r1, r7
   170a0:	f7ea fa6e 	bl	1580 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   170a4:	2800      	cmp	r0, #0
   170a6:	d1eb      	bne.n	17080 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   170a8:	1d2b      	adds	r3, r5, #4
   170aa:	462a      	mov	r2, r5
   170ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   170b0:	f7f2 f842 	bl	9138 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
   170b4:	693b      	ldr	r3, [r7, #16]
   170b6:	616b      	str	r3, [r5, #20]
    TFLITE_DCHECK(filter->params.zero_point == 0);
   170b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170ba:	691b      	ldr	r3, [r3, #16]
   170bc:	b96b      	cbnz	r3, 170da <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
    data->filter_zero_point = filter->params.zero_point;
   170be:	61ab      	str	r3, [r5, #24]
    data->output_zero_point = output->params.zero_point;
   170c0:	6933      	ldr	r3, [r6, #16]
   170c2:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
   170c4:	f105 030c 	add.w	r3, r5, #12
   170c8:	9300      	str	r3, [sp, #0]
   170ca:	f105 0308 	add.w	r3, r5, #8
   170ce:	4632      	mov	r2, r6
   170d0:	4641      	mov	r1, r8
   170d2:	4620      	mov	r0, r4
   170d4:	f7f2 fa1e 	bl	9514 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_max);
   170d8:	e7d2      	b.n	17080 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    TFLITE_DCHECK(filter->params.zero_point == 0);
   170da:	f001 fbe6 	bl	188aa <abort>

000170de <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
    TfLiteFusedActivation activation) {
   170de:	b510      	push	{r4, lr}
   170e0:	4604      	mov	r4, r0
   170e2:	4608      	mov	r0, r1
  CalculateActivationRange(activation, &op_params.float_activation_min,
   170e4:	f104 0220 	add.w	r2, r4, #32
   170e8:	f104 011c 	add.w	r1, r4, #28
   170ec:	f7f3 fa1c 	bl	a528 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
}
   170f0:	4620      	mov	r0, r4
   170f2:	bd10      	pop	{r4, pc}

000170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   170f4:	b570      	push	{r4, r5, r6, lr}
   170f6:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   170f8:	b1b9      	cbz	r1, 1712a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
   170fa:	684d      	ldr	r5, [r1, #4]
   170fc:	b1ad      	cbz	r5, 1712a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   170fe:	f855 6b04 	ldr.w	r6, [r5], #4
    size_ = dimensions_count;
   17102:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   17104:	2e05      	cmp	r6, #5
   17106:	dd07      	ble.n	17118 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
      dims_pointer_ = new int32_t[dimensions_count];
   17108:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   1710c:	429e      	cmp	r6, r3
   1710e:	d210      	bcs.n	17132 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3e>
   17110:	00b0      	lsls	r0, r6, #2
   17112:	f001 fbc8 	bl	188a6 <_Znaj>
   17116:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   17118:	6823      	ldr	r3, [r4, #0]
   1711a:	2b05      	cmp	r3, #5
   1711c:	dd0c      	ble.n	17138 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x44>
   1711e:	6860      	ldr	r0, [r4, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   17120:	00b2      	lsls	r2, r6, #2
   17122:	4629      	mov	r1, r5
   17124:	f001 fbda 	bl	188dc <memcpy>
  }
   17128:	e001      	b.n	1712e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
  RuntimeShape() : size_(0) {}
   1712a:	2300      	movs	r3, #0
   1712c:	6023      	str	r3, [r4, #0]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   1712e:	4620      	mov	r0, r4
   17130:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
   17132:	f04f 30ff 	mov.w	r0, #4294967295
   17136:	e7ec      	b.n	17112 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   17138:	1d20      	adds	r0, r4, #4
   1713a:	e7f1      	b.n	17120 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>

0001713c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   1713c:	2801      	cmp	r0, #1
   1713e:	d002      	beq.n	17146 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
   17140:	2802      	cmp	r0, #2
   17142:	d000      	beq.n	17146 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   17144:	2000      	movs	r0, #0
  }
}
   17146:	4770      	bx	lr

00017148 <_ZN6tflite17CountLeadingZerosIjEEiT_>:
  return integer_input ? __builtin_clz(integer_input)
   17148:	b110      	cbz	r0, 17150 <_ZN6tflite17CountLeadingZerosIjEEiT_+0x8>
   1714a:	fab0 f080 	clz	r0, r0
   1714e:	4770      	bx	lr
   17150:	2020      	movs	r0, #32
}
   17152:	4770      	bx	lr

00017154 <_ZN8gemmlowp3SubIiEET_S1_S1_>:
}
   17154:	1a40      	subs	r0, r0, r1
   17156:	4770      	bx	lr

00017158 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   17158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1715c:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1715e:	2001      	movs	r0, #1
   17160:	f7fe fe1d 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   17164:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   17166:	2000      	movs	r0, #0
   17168:	f7fe fe19 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1716c:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   1716e:	2001      	movs	r0, #1
   17170:	f7fe fe15 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   17174:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   17176:	4631      	mov	r1, r6
   17178:	4620      	mov	r0, r4
   1717a:	f7fe fe11 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1717e:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   17180:	2101      	movs	r1, #1
   17182:	4630      	mov	r0, r6
   17184:	f7fe fe0e 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   17188:	4606      	mov	r6, r0
   1718a:	4641      	mov	r1, r8
   1718c:	4620      	mov	r0, r4
   1718e:	f7fe fe15 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   17192:	4629      	mov	r1, r5
   17194:	f7fe fe04 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17198:	4601      	mov	r1, r0
   1719a:	4630      	mov	r0, r6
   1719c:	f7fe fe04 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   171a0:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   171a2:	2101      	movs	r1, #1
   171a4:	4620      	mov	r0, r4
   171a6:	f7fe fdfd 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   171aa:	4604      	mov	r4, r0
   171ac:	4631      	mov	r1, r6
   171ae:	4638      	mov	r0, r7
   171b0:	f7fe fe0c 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   171b4:	4629      	mov	r1, r5
   171b6:	f7fe fdf3 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   171ba:	4601      	mov	r1, r0
   171bc:	4620      	mov	r0, r4
   171be:	f7fe fdf3 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   171c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000171c6 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
   171c6:	b4f0      	push	{r4, r5, r6, r7}
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
   171c8:	17c7      	asrs	r7, r0, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   171ca:	2301      	movs	r3, #1
   171cc:	fa03 f101 	lsl.w	r1, r3, r1
   171d0:	17cd      	asrs	r5, r1, #31
   171d2:	fb01 f307 	mul.w	r3, r1, r7
   171d6:	fb00 3305 	mla	r3, r0, r5, r3
   171da:	fba1 0100 	umull	r0, r1, r1, r0
   171de:	4419      	add	r1, r3
             ? min
   171e0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   171e4:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   171e8:	db06      	blt.n	171f8 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x32>
             : wide_shifted > max ? max
   171ea:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   171ee:	f171 0300 	sbcs.w	r3, r1, #0
   171f2:	da04      	bge.n	171fe <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x38>
}
   171f4:	bcf0      	pop	{r4, r5, r6, r7}
   171f6:	4770      	bx	lr
             ? min
   171f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   171fc:	e7fa      	b.n	171f4 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>
             : wide_shifted > max ? max
   171fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
   17202:	e7f7      	b.n	171f4 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>

00017204 <_ZN8gemmlowp6BitXorIiEET_S1_S1_>:
}
   17204:	4048      	eors	r0, r1
   17206:	4770      	bx	lr

00017208 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
   17208:	b570      	push	{r4, r5, r6, lr}
   1720a:	4606      	mov	r6, r0
   1720c:	4615      	mov	r5, r2
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
   1720e:	f7fe fdc7 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17212:	4604      	mov	r4, r0
   17214:	4630      	mov	r0, r6
   17216:	f7fe fdc9 	bl	15dac <_ZN8gemmlowp6BitNotIiEET_S1_>
   1721a:	4629      	mov	r1, r5
   1721c:	f7fe fdc0 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17220:	4601      	mov	r1, r0
   17222:	4620      	mov	r0, r4
   17224:	f7ff ffee 	bl	17204 <_ZN8gemmlowp6BitXorIiEET_S1_S1_>
}
   17228:	bd70      	pop	{r4, r5, r6, pc}

0001722a <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   1722a:	b430      	push	{r4, r5}
  std::int64_t b64 = b;
   1722c:	17cb      	asrs	r3, r1, #31
  std::int64_t sum = a64 + b64;
   1722e:	180a      	adds	r2, r1, r0
   17230:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   17234:	2a00      	cmp	r2, #0
   17236:	f173 0100 	sbcs.w	r1, r3, #0
   1723a:	db0d      	blt.n	17258 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x2e>
   1723c:	2101      	movs	r1, #1
   1723e:	2000      	movs	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   17240:	1854      	adds	r4, r2, r1
   17242:	eb43 0500 	adc.w	r5, r3, r0
   17246:	0feb      	lsrs	r3, r5, #31
   17248:	18e4      	adds	r4, r4, r3
   1724a:	f145 0500 	adc.w	r5, r5, #0
   1724e:	0860      	lsrs	r0, r4, #1
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   17250:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
   17254:	bc30      	pop	{r4, r5}
   17256:	4770      	bx	lr
  std::int64_t sign = sum >= 0 ? 1 : -1;
   17258:	f04f 31ff 	mov.w	r1, #4294967295
   1725c:	4608      	mov	r0, r1
   1725e:	e7ef      	b.n	17240 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x16>

00017260 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   17260:	b508      	push	{r3, lr}
   17262:	f7fe fda1 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   17266:	bd08      	pop	{r3, pc}

00017268 <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
}
   17268:	4770      	bx	lr

0001726a <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   1726a:	b508      	push	{r3, lr}
   1726c:	f7ff ff72 	bl	17154 <_ZN8gemmlowp3SubIiEET_S1_S1_>
   17270:	bd08      	pop	{r3, pc}

00017272 <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
   17272:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(!a);
   17274:	fab0 f080 	clz	r0, r0
   17278:	0940      	lsrs	r0, r0, #5
   1727a:	f7fe fd99 	bl	15db0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   1727e:	bd08      	pop	{r3, pc}

00017280 <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   17280:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   17282:	f7f7 fc9f 	bl	ebc4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>
}
   17286:	bd08      	pop	{r3, pc}

00017288 <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   17288:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   1728a:	f7f7 fccb 	bl	ec24 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>
}
   1728e:	bd08      	pop	{r3, pc}

00017290 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
   17290:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   17292:	f7ff ffb9 	bl	17208 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
   17296:	bd08      	pop	{r3, pc}

00017298 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   17298:	b508      	push	{r3, lr}
   1729a:	f7fe fd85 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   1729e:	bd08      	pop	{r3, pc}

000172a0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   172a0:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   172a2:	f7ff ff59 	bl	17158 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>
}
   172a6:	bd08      	pop	{r3, pc}

000172a8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   172a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172ac:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   172ae:	2003      	movs	r0, #3
   172b0:	f7fe fd75 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   172b4:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   172b6:	2000      	movs	r0, #0
   172b8:	f7fe fd71 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   172bc:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   172be:	2001      	movs	r0, #1
   172c0:	f7fe fd6d 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   172c4:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   172c6:	4631      	mov	r1, r6
   172c8:	4620      	mov	r0, r4
   172ca:	f7fe fd69 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   172ce:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   172d0:	2101      	movs	r1, #1
   172d2:	4630      	mov	r0, r6
   172d4:	f7fe fd66 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   172d8:	4606      	mov	r6, r0
   172da:	4641      	mov	r1, r8
   172dc:	4620      	mov	r0, r4
   172de:	f7fe fd6d 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   172e2:	4629      	mov	r1, r5
   172e4:	f7fe fd5c 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   172e8:	4601      	mov	r1, r0
   172ea:	4630      	mov	r0, r6
   172ec:	f7fe fd5c 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   172f0:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   172f2:	2102      	movs	r1, #2
   172f4:	4620      	mov	r0, r4
   172f6:	f7fe fd55 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   172fa:	4604      	mov	r4, r0
   172fc:	4631      	mov	r1, r6
   172fe:	4638      	mov	r0, r7
   17300:	f7fe fd64 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   17304:	4629      	mov	r1, r5
   17306:	f7fe fd4b 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1730a:	4601      	mov	r1, r0
   1730c:	4620      	mov	r0, r4
   1730e:	f7fe fd4b 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   17312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017316 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   17316:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   17318:	f7ff ffc6 	bl	172a8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>
}
   1731c:	bd08      	pop	{r3, pc}

0001731e <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
   1731e:	b508      	push	{r3, lr}
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
   17320:	f7fe fd42 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   17324:	bd08      	pop	{r3, pc}

00017326 <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
   17326:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   17328:	f7ff fff9 	bl	1731e <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>
}
   1732c:	bd08      	pop	{r3, pc}

0001732e <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   1732e:	b508      	push	{r3, lr}
   17330:	f7fe fd3a 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   17334:	bd08      	pop	{r3, pc}

00017336 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   17336:	b508      	push	{r3, lr}
   17338:	f7ff ff0c 	bl	17154 <_ZN8gemmlowp3SubIiEET_S1_S1_>
   1733c:	bd08      	pop	{r3, pc}

0001733e <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
   1733e:	b508      	push	{r3, lr}
   17340:	f7fe fd2e 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17344:	bd08      	pop	{r3, pc}

00017346 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   17346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1734a:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1734c:	f640 70ff 	movw	r0, #4095	; 0xfff
   17350:	f7fe fd25 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   17354:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   17356:	2000      	movs	r0, #0
   17358:	f7fe fd21 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1735c:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   1735e:	2001      	movs	r0, #1
   17360:	f7fe fd1d 	bl	15d9e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   17364:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   17366:	4631      	mov	r1, r6
   17368:	4620      	mov	r0, r4
   1736a:	f7fe fd19 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1736e:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   17370:	2101      	movs	r1, #1
   17372:	4630      	mov	r0, r6
   17374:	f7fe fd16 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   17378:	4606      	mov	r6, r0
   1737a:	4641      	mov	r1, r8
   1737c:	4620      	mov	r0, r4
   1737e:	f7fe fd1d 	bl	15dbc <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   17382:	4629      	mov	r1, r5
   17384:	f7fe fd0c 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17388:	4601      	mov	r1, r0
   1738a:	4630      	mov	r0, r6
   1738c:	f7fe fd0c 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   17390:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   17392:	210c      	movs	r1, #12
   17394:	4620      	mov	r0, r4
   17396:	f7fe fd05 	bl	15da4 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1739a:	4604      	mov	r4, r0
   1739c:	4631      	mov	r1, r6
   1739e:	4638      	mov	r0, r7
   173a0:	f7fe fd14 	bl	15dcc <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   173a4:	4629      	mov	r1, r5
   173a6:	f7fe fcfb 	bl	15da0 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   173aa:	4601      	mov	r1, r0
   173ac:	4620      	mov	r0, r4
   173ae:	f7fe fcfb 	bl	15da8 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   173b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000173b6 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   173b6:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   173b8:	f7ff ffc5 	bl	17346 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>
}
   173bc:	bd08      	pop	{r3, pc}

000173be <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
   173be:	b508      	push	{r3, lr}
   173c0:	f7ff ff57 	bl	17272 <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>
   173c4:	bd08      	pop	{r3, pc}

000173c6 <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   173c6:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   173c8:	f7f7 fde2 	bl	ef90 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>
}
   173cc:	bd08      	pop	{r3, pc}

000173ce <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   173ce:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   173d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   173d2:	b113      	cbz	r3, 173da <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
   173d4:	2120      	movs	r1, #32
   173d6:	4798      	blx	r3
}
   173d8:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   173da:	f001 fa66 	bl	188aa <abort>

000173de <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
                                    OpDataPooling* data) {
   173de:	b4f0      	push	{r4, r5, r6, r7}
   173e0:	b084      	sub	sp, #16
  return t->dims->data[dim];
   173e2:	6893      	ldr	r3, [r2, #8]
   173e4:	689e      	ldr	r6, [r3, #8]
   173e6:	68dc      	ldr	r4, [r3, #12]
      params->stride_height, params->stride_width,
   173e8:	688a      	ldr	r2, [r1, #8]
   173ea:	684b      	ldr	r3, [r1, #4]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   173ec:	690f      	ldr	r7, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
   173ee:	68cd      	ldr	r5, [r1, #12]
   173f0:	7808      	ldrb	r0, [r1, #0]
  if (stride == 0) return 0;
   173f2:	b17b      	cbz	r3, 17414 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x36>
  switch (padding) {
   173f4:	2801      	cmp	r0, #1
   173f6:	d003      	beq.n	17400 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x22>
   173f8:	2802      	cmp	r0, #2
   173fa:	d006      	beq.n	1740a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x2c>
   173fc:	2100      	movs	r1, #0
   173fe:	e00a      	b.n	17416 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - 1) / stride;
   17400:	1919      	adds	r1, r3, r4
   17402:	3901      	subs	r1, #1
   17404:	fb91 f1f3 	sdiv	r1, r1, r3
   17408:	e005      	b.n	17416 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - effective_filter_size) / stride;
   1740a:	1919      	adds	r1, r3, r4
   1740c:	1b49      	subs	r1, r1, r5
   1740e:	fb91 f1f3 	sdiv	r1, r1, r3
   17412:	e000      	b.n	17416 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
  if (stride == 0) return 0;
   17414:	4619      	mov	r1, r3
   17416:	b17a      	cbz	r2, 17438 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5a>
  switch (padding) {
   17418:	2801      	cmp	r0, #1
   1741a:	d003      	beq.n	17424 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x46>
   1741c:	2802      	cmp	r0, #2
   1741e:	d006      	beq.n	1742e <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x50>
   17420:	2000      	movs	r0, #0
   17422:	e00a      	b.n	1743a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - 1) / stride;
   17424:	1990      	adds	r0, r2, r6
   17426:	3801      	subs	r0, #1
   17428:	fb90 f0f2 	sdiv	r0, r0, r2
   1742c:	e005      	b.n	1743a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - effective_filter_size) / stride;
   1742e:	1990      	adds	r0, r2, r6
   17430:	1bc0      	subs	r0, r0, r7
   17432:	fb90 f0f2 	sdiv	r0, r0, r2
   17436:	e000      	b.n	1743a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
  if (stride == 0) return 0;
   17438:	4610      	mov	r0, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1743a:	3801      	subs	r0, #1
   1743c:	fb00 7202 	mla	r2, r0, r2, r7
  int total_padding =
   17440:	1b92      	subs	r2, r2, r6
  total_padding = total_padding > 0 ? total_padding : 0;
   17442:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
   17446:	f002 0001 	and.w	r0, r2, #1
  return total_padding / 2;
   1744a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1744e:	1052      	asrs	r2, r2, #1
  padding_values.height =
   17450:	9201      	str	r2, [sp, #4]
  padding_values.height_offset = offset;
   17452:	9003      	str	r0, [sp, #12]
      ((out_size - 1) * stride + effective_filter_size - in_size);
   17454:	3901      	subs	r1, #1
   17456:	fb01 5303 	mla	r3, r1, r3, r5
  int total_padding =
   1745a:	1b1b      	subs	r3, r3, r4
  total_padding = total_padding > 0 ? total_padding : 0;
   1745c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  *offset = total_padding % 2;
   17460:	f003 0201 	and.w	r2, r3, #1
  return total_padding / 2;
   17464:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   17468:	105b      	asrs	r3, r3, #1
  padding_values.width =
   1746a:	9300      	str	r3, [sp, #0]
  padding_values.width_offset = offset;
   1746c:	9202      	str	r2, [sp, #8]
   1746e:	ab04      	add	r3, sp, #16
   17470:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   17474:	9c08      	ldr	r4, [sp, #32]
   17476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1747a:	2000      	movs	r0, #0
   1747c:	b004      	add	sp, #16
   1747e:	bcf0      	pop	{r4, r5, r6, r7}
   17480:	4770      	bx	lr

00017482 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   17482:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17486:	b0b5      	sub	sp, #212	; 0xd4
   17488:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   1748a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
   1748c:	6891      	ldr	r1, [r2, #8]
   1748e:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   17490:	6851      	ldr	r1, [r2, #4]
   17492:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   17494:	6911      	ldr	r1, [r2, #16]
   17496:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   17498:	68d2      	ldr	r2, [r2, #12]
   1749a:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   1749c:	685a      	ldr	r2, [r3, #4]
   1749e:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   174a2:	681a      	ldr	r2, [r3, #0]
   174a4:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   174a8:	699a      	ldr	r2, [r3, #24]
   174aa:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   174ac:	69db      	ldr	r3, [r3, #28]
   174ae:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   174b0:	4629      	mov	r1, r5
   174b2:	a81e      	add	r0, sp, #120	; 0x78
   174b4:	f7ff fe1e 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   174b8:	4628      	mov	r0, r5
   174ba:	f7fe fc5c 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   174be:	9002      	str	r0, [sp, #8]
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
   174c0:	4621      	mov	r1, r4
   174c2:	a824      	add	r0, sp, #144	; 0x90
   174c4:	f7ff fe16 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   174c8:	4620      	mov	r0, r4
   174ca:	f7fe fc5a 	bl	15d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   174ce:	9003      	str	r0, [sp, #12]
  inline int32_t DimensionsCount() const { return size_; }
   174d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   174d2:	2b04      	cmp	r3, #4
   174d4:	d17b      	bne.n	175ce <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x14c>
   174d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   174d8:	2b04      	cmp	r3, #4
   174da:	d17a      	bne.n	175d2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x150>
    TFLITE_DCHECK_LT(i, size_);
   174dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   174de:	2b00      	cmp	r3, #0
   174e0:	dd79      	ble.n	175d6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   174e2:	2b05      	cmp	r3, #5
   174e4:	dd79      	ble.n	175da <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x158>
   174e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   174e8:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   174ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
   174ec:	2a00      	cmp	r2, #0
   174ee:	dd76      	ble.n	175de <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   174f0:	2a05      	cmp	r2, #5
   174f2:	dd76      	ble.n	175e2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x160>
   174f4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   174f6:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   174f8:	429a      	cmp	r2, r3
   174fa:	d174      	bne.n	175e6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x164>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   174fc:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   174fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17500:	2a00      	cmp	r2, #0
   17502:	dd72      	ble.n	175ea <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17504:	2a05      	cmp	r2, #5
   17506:	dd72      	ble.n	175ee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x16c>
   17508:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1750a:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1750c:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   1750e:	4293      	cmp	r3, r2
   17510:	dc6f      	bgt.n	175f2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x170>
      return __a;
   17512:	ab33      	add	r3, sp, #204	; 0xcc
   17514:	681b      	ldr	r3, [r3, #0]
   17516:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   17518:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1751a:	2b03      	cmp	r3, #3
   1751c:	dd6b      	ble.n	175f6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1751e:	2b05      	cmp	r3, #5
   17520:	dd6b      	ble.n	175fa <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x178>
   17522:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17524:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   17526:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17528:	2a03      	cmp	r2, #3
   1752a:	dd68      	ble.n	175fe <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x17c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1752c:	2a05      	cmp	r2, #5
   1752e:	dd68      	ble.n	17602 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x180>
   17530:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17532:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17534:	429a      	cmp	r2, r3
   17536:	d166      	bne.n	17606 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x184>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17538:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   1753a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1753c:	2a03      	cmp	r2, #3
   1753e:	dd64      	ble.n	1760a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17540:	2a05      	cmp	r2, #5
   17542:	dd64      	ble.n	1760e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x18c>
   17544:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17546:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17548:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   1754a:	4293      	cmp	r3, r2
   1754c:	dc61      	bgt.n	17612 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x190>
      return __a;
   1754e:	ab31      	add	r3, sp, #196	; 0xc4
   17550:	681b      	ldr	r3, [r3, #0]
   17552:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   17554:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17556:	2b01      	cmp	r3, #1
   17558:	dd5d      	ble.n	17616 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1755a:	2b05      	cmp	r3, #5
   1755c:	dd5d      	ble.n	1761a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x198>
   1755e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17560:	685b      	ldr	r3, [r3, #4]
   17562:	930f      	str	r3, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
   17564:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17566:	2b02      	cmp	r3, #2
   17568:	dd5a      	ble.n	17620 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1756a:	2b05      	cmp	r3, #5
   1756c:	dd5a      	ble.n	17624 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a2>
   1756e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17570:	689b      	ldr	r3, [r3, #8]
   17572:	930e      	str	r3, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
   17574:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17576:	2b01      	cmp	r3, #1
   17578:	dd57      	ble.n	1762a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1757a:	2b05      	cmp	r3, #5
   1757c:	dd57      	ble.n	1762e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1ac>
   1757e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17580:	685b      	ldr	r3, [r3, #4]
   17582:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   17584:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17586:	2b02      	cmp	r3, #2
   17588:	dd54      	ble.n	17634 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1758a:	2b05      	cmp	r3, #5
   1758c:	dd54      	ble.n	17638 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b6>
   1758e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17590:	689b      	ldr	r3, [r3, #8]
   17592:	930c      	str	r3, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   17594:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17596:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_width = params.stride_width;
   17598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1759a:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int batch = 0; batch < batches; ++batch) {
   1759c:	f04f 0b00 	mov.w	fp, #0
   175a0:	9b08      	ldr	r3, [sp, #32]
   175a2:	459b      	cmp	fp, r3
   175a4:	f280 812d 	bge.w	17802 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   175a8:	f04f 0a00 	mov.w	sl, #0
   175ac:	46d1      	mov	r9, sl
   175ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   175b0:	4599      	cmp	r9, r3
   175b2:	f280 8123 	bge.w	177fc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x37a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   175b6:	f04f 0a00 	mov.w	sl, #0
   175ba:	46d8      	mov	r8, fp
   175bc:	46cb      	mov	fp, r9
   175be:	46d1      	mov	r9, sl
   175c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   175c2:	4599      	cmp	r9, r3
   175c4:	f280 8115 	bge.w	177f2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   175c8:	f04f 0a00 	mov.w	sl, #0
   175cc:	e0c6      	b.n	1775c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2da>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   175ce:	f001 f96c 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   175d2:	f001 f96a 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   175d6:	f001 f968 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   175da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   175dc:	e785      	b.n	174ea <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x68>
    TFLITE_DCHECK_LT(i, size_);
   175de:	f001 f964 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   175e2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   175e4:	e788      	b.n	174f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x76>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   175e6:	f001 f960 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   175ea:	f001 f95e 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   175ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
   175f0:	e78c      	b.n	1750c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x8a>
	return __b;
   175f2:	ab32      	add	r3, sp, #200	; 0xc8
   175f4:	e78e      	b.n	17514 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x92>
    TFLITE_DCHECK_LT(i, size_);
   175f6:	f001 f958 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   175fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   175fc:	e793      	b.n	17526 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xa4>
    TFLITE_DCHECK_LT(i, size_);
   175fe:	f001 f954 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17602:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   17604:	e796      	b.n	17534 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xb2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17606:	f001 f950 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   1760a:	f001 f94e 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1760e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   17610:	e79a      	b.n	17548 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xc6>
   17612:	ab30      	add	r3, sp, #192	; 0xc0
   17614:	e79c      	b.n	17550 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xce>
    TFLITE_DCHECK_LT(i, size_);
   17616:	f001 f948 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1761a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1761c:	930f      	str	r3, [sp, #60]	; 0x3c
   1761e:	e7a1      	b.n	17564 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   17620:	f001 f943 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17624:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17626:	930e      	str	r3, [sp, #56]	; 0x38
   17628:	e7a4      	b.n	17574 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   1762a:	f001 f93e 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1762e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17630:	930d      	str	r3, [sp, #52]	; 0x34
   17632:	e7a7      	b.n	17584 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   17634:	f001 f939 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17638:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1763a:	930c      	str	r3, [sp, #48]	; 0x30
   1763c:	e7aa      	b.n	17594 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x112>
	return __b;
   1763e:	a92e      	add	r1, sp, #184	; 0xb8
   17640:	e0a5      	b.n	1778e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x30c>
	return __b;
   17642:	aa2d      	add	r2, sp, #180	; 0xb4
   17644:	e0ad      	b.n	177a2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x320>
	return __b;
   17646:	aa2b      	add	r2, sp, #172	; 0xac
   17648:	e0b5      	b.n	177b6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x334>
	return __b;
   1764a:	ab2a      	add	r3, sp, #168	; 0xa8
   1764c:	e0bc      	b.n	177c8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x346>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1764e:	f001 f92c 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17652:	f001 f92a 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17656:	f001 f928 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1765a:	f001 f926 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1765e:	f001 f924 	bl	188aa <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float total = 0.f;
          float filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17662:	3601      	adds	r6, #1
   17664:	42b5      	cmp	r5, r6
   17666:	dd37      	ble.n	176d8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17668:	9f06      	ldr	r7, [sp, #24]
   1766a:	9b07      	ldr	r3, [sp, #28]
   1766c:	42bb      	cmp	r3, r7
   1766e:	ddf8      	ble.n	17662 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   17670:	9b04      	ldr	r3, [sp, #16]
   17672:	19d8      	adds	r0, r3, r7
              const int in_y = in_y_origin + filter_y;
   17674:	9b05      	ldr	r3, [sp, #20]
   17676:	eb03 0c06 	add.w	ip, r3, r6
  inline int32_t DimensionsCount() const { return size_; }
   1767a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1767c:	2b04      	cmp	r3, #4
   1767e:	d1e6      	bne.n	1764e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1cc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17680:	f1b8 0f00 	cmp.w	r8, #0
   17684:	dbe5      	blt.n	17652 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
   17686:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17688:	4598      	cmp	r8, r3
   1768a:	dae2      	bge.n	17652 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1768c:	f1bc 0f00 	cmp.w	ip, #0
   17690:	dbe1      	blt.n	17656 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
   17692:	9920      	ldr	r1, [sp, #128]	; 0x80
   17694:	458c      	cmp	ip, r1
   17696:	dade      	bge.n	17656 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17698:	2800      	cmp	r0, #0
   1769a:	dbde      	blt.n	1765a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
   1769c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1769e:	4290      	cmp	r0, r2
   176a0:	dadb      	bge.n	1765a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   176a2:	f1ba 0f00 	cmp.w	sl, #0
   176a6:	dbda      	blt.n	1765e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
   176a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   176aa:	459a      	cmp	sl, r3
   176ac:	dad7      	bge.n	1765e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   176ae:	fb01 c108 	mla	r1, r1, r8, ip
   176b2:	fb01 0202 	mla	r2, r1, r2, r0
   176b6:	fb02 a303 	mla	r3, r2, r3, sl
              total +=
   176ba:	9a02      	ldr	r2, [sp, #8]
   176bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   176c0:	9801      	ldr	r0, [sp, #4]
   176c2:	f7e9 fa41 	bl	b48 <__addsf3>
   176c6:	9001      	str	r0, [sp, #4]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   176c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   176cc:	4620      	mov	r0, r4
   176ce:	f7e9 fa3b 	bl	b48 <__addsf3>
   176d2:	4604      	mov	r4, r0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   176d4:	3701      	adds	r7, #1
   176d6:	e7c8      	b.n	1766a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e8>
            }
          }
          if (filter_count == 0) return false;
   176d8:	2100      	movs	r1, #0
   176da:	4620      	mov	r0, r4
   176dc:	f7e9 fcd0 	bl	1080 <__aeabi_fcmpeq>
   176e0:	2800      	cmp	r0, #0
   176e2:	f040 808e 	bne.w	17802 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
          const float average = total / filter_count;
   176e6:	4621      	mov	r1, r4
   176e8:	9801      	ldr	r0, [sp, #4]
   176ea:	f7e9 fbe9 	bl	ec0 <__aeabi_fdiv>
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   176ee:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   176f0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   176f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   176f4:	2b04      	cmp	r3, #4
   176f6:	d16b      	bne.n	177d0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x34e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   176f8:	f1b8 0f00 	cmp.w	r8, #0
   176fc:	db6a      	blt.n	177d4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
   176fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17700:	4598      	cmp	r8, r3
   17702:	da67      	bge.n	177d4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17704:	f1bb 0f00 	cmp.w	fp, #0
   17708:	db66      	blt.n	177d8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
   1770a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1770c:	4593      	cmp	fp, r2
   1770e:	da63      	bge.n	177d8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17710:	f1b9 0f00 	cmp.w	r9, #0
   17714:	db62      	blt.n	177dc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
   17716:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17718:	4599      	cmp	r9, r3
   1771a:	da5f      	bge.n	177dc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1771c:	f1ba 0f00 	cmp.w	sl, #0
   17720:	db5e      	blt.n	177e0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
   17722:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   17724:	45a2      	cmp	sl, r4
   17726:	da5b      	bge.n	177e0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17728:	fb02 b208 	mla	r2, r2, r8, fp
   1772c:	fb02 9303 	mla	r3, r2, r3, r9
   17730:	fb03 a404 	mla	r4, r3, r4, sl
   17734:	9012      	str	r0, [sp, #72]	; 0x48
   17736:	9111      	str	r1, [sp, #68]	; 0x44
   17738:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   1773a:	f7e9 fcab 	bl	1094 <__aeabi_fcmplt>
   1773e:	2800      	cmp	r0, #0
   17740:	d150      	bne.n	177e4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x362>
      return __a;
   17742:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   17744:	6829      	ldr	r1, [r5, #0]
   17746:	4630      	mov	r0, r6
   17748:	f7e9 fca4 	bl	1094 <__aeabi_fcmplt>
   1774c:	2800      	cmp	r0, #0
   1774e:	d14b      	bne.n	177e8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x366>
  return min(max(x, output_activation_min), output_activation_max);
   17750:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   17752:	9a03      	ldr	r2, [sp, #12]
   17754:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   17758:	f10a 0a01 	add.w	sl, sl, #1
   1775c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1775e:	459a      	cmp	sl, r3
   17760:	da44      	bge.n	177ec <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x36a>
              (out_x * stride_width) - params.padding_values.width;
   17762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17764:	fb09 f203 	mul.w	r2, r9, r3
   17768:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   1776c:	1a53      	subs	r3, r2, r1
   1776e:	9304      	str	r3, [sp, #16]
              (out_y * stride_height) - params.padding_values.height;
   17770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17772:	fb0b f003 	mul.w	r0, fp, r3
   17776:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   1777a:	1ac4      	subs	r4, r0, r3
   1777c:	9405      	str	r4, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   1777e:	2400      	movs	r4, #0
   17780:	942f      	str	r4, [sp, #188]	; 0xbc
   17782:	1a8a      	subs	r2, r1, r2
   17784:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   17786:	42a2      	cmp	r2, r4
   17788:	f73f af59 	bgt.w	1763e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1bc>
      return __a;
   1778c:	a92f      	add	r1, sp, #188	; 0xbc
   1778e:	6809      	ldr	r1, [r1, #0]
   17790:	9106      	str	r1, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
   17792:	990e      	ldr	r1, [sp, #56]	; 0x38
   17794:	440a      	add	r2, r1
   17796:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   17798:	9919      	ldr	r1, [sp, #100]	; 0x64
   1779a:	428a      	cmp	r2, r1
   1779c:	f6ff af51 	blt.w	17642 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c0>
      return __a;
   177a0:	aa19      	add	r2, sp, #100	; 0x64
   177a2:	6812      	ldr	r2, [r2, #0]
   177a4:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
   177a6:	2200      	movs	r2, #0
   177a8:	922c      	str	r2, [sp, #176]	; 0xb0
   177aa:	1a1b      	subs	r3, r3, r0
   177ac:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   177ae:	4293      	cmp	r3, r2
   177b0:	f73f af49 	bgt.w	17646 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c4>
      return __a;
   177b4:	aa2c      	add	r2, sp, #176	; 0xb0
   177b6:	6816      	ldr	r6, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   177b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   177ba:	4413      	add	r3, r2
   177bc:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   177be:	9a18      	ldr	r2, [sp, #96]	; 0x60
   177c0:	4293      	cmp	r3, r2
   177c2:	f6ff af42 	blt.w	1764a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c8>
      return __a;
   177c6:	ab18      	add	r3, sp, #96	; 0x60
   177c8:	681d      	ldr	r5, [r3, #0]
          float filter_count = 0;
   177ca:	2400      	movs	r4, #0
          float total = 0.f;
   177cc:	9401      	str	r4, [sp, #4]
   177ce:	e749      	b.n	17664 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   177d0:	f001 f86b 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   177d4:	f001 f869 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   177d8:	f001 f867 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   177dc:	f001 f865 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   177e0:	f001 f863 	bl	188aa <abort>
	return __b;
   177e4:	ad11      	add	r5, sp, #68	; 0x44
   177e6:	e7ad      	b.n	17744 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2c2>
	return __b;
   177e8:	ad10      	add	r5, sp, #64	; 0x40
   177ea:	e7b1      	b.n	17750 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2ce>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   177ec:	f109 0901 	add.w	r9, r9, #1
   177f0:	e6e6      	b.n	175c0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x13e>
   177f2:	46d9      	mov	r9, fp
   177f4:	46c3      	mov	fp, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
   177f6:	f109 0901 	add.w	r9, r9, #1
   177fa:	e6d8      	b.n	175ae <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x12c>
  for (int batch = 0; batch < batches; ++batch) {
   177fc:	f10b 0b01 	add.w	fp, fp, #1
   17800:	e6ce      	b.n	175a0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x11e>
    if (size_ > kMaxSmallSize) {
   17802:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17804:	2b05      	cmp	r3, #5
   17806:	dd03      	ble.n	17810 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
      delete[] dims_pointer_;
   17808:	9825      	ldr	r0, [sp, #148]	; 0x94
   1780a:	b108      	cbz	r0, 17810 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
   1780c:	f001 f838 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   17810:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17812:	2b05      	cmp	r3, #5
   17814:	dd03      	ble.n	1781e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
      delete[] dims_pointer_;
   17816:	981f      	ldr	r0, [sp, #124]	; 0x7c
   17818:	b108      	cbz	r0, 1781e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
   1781a:	f001 f831 	bl	18880 <_ZdaPv>
                             tflite::micro::GetTensorData<float>(output));
}
   1781e:	b035      	add	sp, #212	; 0xd4
   17820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017824 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:
}

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
   17824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17828:	b0b5      	sub	sp, #212	; 0xd4
   1782a:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   1782c:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   1782e:	6891      	ldr	r1, [r2, #8]
   17830:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   17832:	6851      	ldr	r1, [r2, #4]
   17834:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   17836:	6911      	ldr	r1, [r2, #16]
   17838:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   1783a:	68d2      	ldr	r2, [r2, #12]
   1783c:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   1783e:	685a      	ldr	r2, [r3, #4]
   17840:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   17844:	681a      	ldr	r2, [r3, #0]
   17846:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   1784a:	699a      	ldr	r2, [r3, #24]
   1784c:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   1784e:	69db      	ldr	r3, [r3, #28]
   17850:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   17852:	4629      	mov	r1, r5
   17854:	a81e      	add	r0, sp, #120	; 0x78
   17856:	f7ff fc4d 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   1785a:	4628      	mov	r0, r5
   1785c:	f7fe fa8b 	bl	15d76 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   17860:	4682      	mov	sl, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
   17862:	4621      	mov	r1, r4
   17864:	a824      	add	r0, sp, #144	; 0x90
   17866:	f7ff fc45 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   1786a:	4620      	mov	r0, r4
   1786c:	f7fe fa89 	bl	15d82 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   17870:	9000      	str	r0, [sp, #0]
  inline int32_t DimensionsCount() const { return size_; }
   17872:	9b1e      	ldr	r3, [sp, #120]	; 0x78
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17874:	2b04      	cmp	r3, #4
   17876:	f040 8081 	bne.w	1797c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x158>
   1787a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1787c:	2b04      	cmp	r3, #4
   1787e:	d17f      	bne.n	17980 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15c>
    TFLITE_DCHECK_LT(i, size_);
   17880:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17882:	2b00      	cmp	r3, #0
   17884:	dd7e      	ble.n	17984 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x160>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17886:	2b05      	cmp	r3, #5
   17888:	dd7e      	ble.n	17988 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x164>
   1788a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1788c:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   1788e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17890:	2a00      	cmp	r2, #0
   17892:	dd7b      	ble.n	1798c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17894:	2a05      	cmp	r2, #5
   17896:	dd7b      	ble.n	17990 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16c>
   17898:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1789a:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1789c:	429a      	cmp	r2, r3
   1789e:	d179      	bne.n	17994 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x170>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   178a0:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   178a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   178a4:	2a00      	cmp	r2, #0
   178a6:	dd77      	ble.n	17998 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   178a8:	2a05      	cmp	r2, #5
   178aa:	dd77      	ble.n	1799c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x178>
   178ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
   178ae:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   178b0:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   178b2:	4293      	cmp	r3, r2
   178b4:	dc74      	bgt.n	179a0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17c>
      return __a;
   178b6:	ab33      	add	r3, sp, #204	; 0xcc
   178b8:	681b      	ldr	r3, [r3, #0]
   178ba:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   178bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   178be:	2b03      	cmp	r3, #3
   178c0:	dd70      	ble.n	179a4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x180>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   178c2:	2b05      	cmp	r3, #5
   178c4:	dd70      	ble.n	179a8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x184>
   178c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   178c8:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   178ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
   178cc:	2a03      	cmp	r2, #3
   178ce:	dd6d      	ble.n	179ac <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   178d0:	2a05      	cmp	r2, #5
   178d2:	dd6d      	ble.n	179b0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18c>
   178d4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   178d6:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   178d8:	429a      	cmp	r2, r3
   178da:	d16b      	bne.n	179b4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x190>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   178dc:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   178de:	9a24      	ldr	r2, [sp, #144]	; 0x90
   178e0:	2a03      	cmp	r2, #3
   178e2:	dd69      	ble.n	179b8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   178e4:	2a05      	cmp	r2, #5
   178e6:	dd69      	ble.n	179bc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x198>
   178e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   178ea:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   178ec:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   178ee:	4293      	cmp	r3, r2
   178f0:	dc66      	bgt.n	179c0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19c>
      return __a;
   178f2:	ab31      	add	r3, sp, #196	; 0xc4
   178f4:	681b      	ldr	r3, [r3, #0]
   178f6:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   178f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   178fa:	2b01      	cmp	r3, #1
   178fc:	dd62      	ble.n	179c4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   178fe:	2b05      	cmp	r3, #5
   17900:	dd62      	ble.n	179c8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a4>
   17902:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17904:	685b      	ldr	r3, [r3, #4]
   17906:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   17908:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1790a:	2b02      	cmp	r3, #2
   1790c:	dd5f      	ble.n	179ce <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1790e:	2b05      	cmp	r3, #5
   17910:	dd5f      	ble.n	179d2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
   17912:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17914:	689b      	ldr	r3, [r3, #8]
   17916:	930c      	str	r3, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   17918:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1791a:	2b01      	cmp	r3, #1
   1791c:	dd5c      	ble.n	179d8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1791e:	2b05      	cmp	r3, #5
   17920:	dd5c      	ble.n	179dc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
   17922:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17924:	685b      	ldr	r3, [r3, #4]
   17926:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   17928:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1792a:	2b02      	cmp	r3, #2
   1792c:	dd59      	ble.n	179e2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1792e:	2b05      	cmp	r3, #5
   17930:	dd59      	ble.n	179e6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
   17932:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17934:	689b      	ldr	r3, [r3, #8]
   17936:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   17938:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1793a:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   1793c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1793e:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   17940:	f04f 0b00 	mov.w	fp, #0
   17944:	46d9      	mov	r9, fp
   17946:	46d3      	mov	fp, sl
   17948:	9b06      	ldr	r3, [sp, #24]
   1794a:	4599      	cmp	r9, r3
   1794c:	f280 8127 	bge.w	17b9e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17950:	f04f 0a00 	mov.w	sl, #0
   17954:	46d8      	mov	r8, fp
   17956:	46cb      	mov	fp, r9
   17958:	46d1      	mov	r9, sl
   1795a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1795c:	4599      	cmp	r9, r3
   1795e:	f280 8119 	bge.w	17b94 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17962:	f04f 0a00 	mov.w	sl, #0
   17966:	464f      	mov	r7, r9
   17968:	4653      	mov	r3, sl
   1796a:	46c2      	mov	sl, r8
   1796c:	4698      	mov	r8, r3
   1796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17970:	4598      	cmp	r8, r3
   17972:	f280 810b 	bge.w	17b8c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
        for (int channel = 0; channel < depth; ++channel) {
   17976:	f04f 0900 	mov.w	r9, #0
   1797a:	e0ba      	b.n	17af2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ce>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1797c:	f000 ff95 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17980:	f000 ff93 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   17984:	f000 ff91 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17988:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1798a:	e780      	b.n	1788e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x6a>
    TFLITE_DCHECK_LT(i, size_);
   1798c:	f000 ff8d 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17990:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17992:	e783      	b.n	1789c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x78>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17994:	f000 ff89 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   17998:	f000 ff87 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1799c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1799e:	e787      	b.n	178b0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8c>
	return __b;
   179a0:	ab32      	add	r3, sp, #200	; 0xc8
   179a2:	e789      	b.n	178b8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x94>
    TFLITE_DCHECK_LT(i, size_);
   179a4:	f000 ff81 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   179a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   179aa:	e78e      	b.n	178ca <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   179ac:	f000 ff7d 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   179b0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   179b2:	e791      	b.n	178d8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   179b4:	f000 ff79 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   179b8:	f000 ff77 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   179bc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   179be:	e795      	b.n	178ec <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc8>
   179c0:	ab30      	add	r3, sp, #192	; 0xc0
   179c2:	e797      	b.n	178f4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xd0>
    TFLITE_DCHECK_LT(i, size_);
   179c4:	f000 ff71 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   179c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   179ca:	930d      	str	r3, [sp, #52]	; 0x34
   179cc:	e79c      	b.n	17908 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe4>
    TFLITE_DCHECK_LT(i, size_);
   179ce:	f000 ff6c 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   179d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   179d4:	930c      	str	r3, [sp, #48]	; 0x30
   179d6:	e79f      	b.n	17918 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   179d8:	f000 ff67 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   179dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   179de:	930b      	str	r3, [sp, #44]	; 0x2c
   179e0:	e7a2      	b.n	17928 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x104>
    TFLITE_DCHECK_LT(i, size_);
   179e2:	f000 ff62 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   179e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   179e8:	930a      	str	r3, [sp, #40]	; 0x28
   179ea:	e7a5      	b.n	17938 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x114>
	return __b;
   179ec:	a92e      	add	r1, sp, #184	; 0xb8
   179ee:	e099      	b.n	17b24 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x300>
	return __b;
   179f0:	aa2d      	add	r2, sp, #180	; 0xb4
   179f2:	e0a1      	b.n	17b38 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x314>
	return __b;
   179f4:	aa2b      	add	r2, sp, #172	; 0xac
   179f6:	e0a9      	b.n	17b4c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x328>
	return __b;
   179f8:	ab2a      	add	r3, sp, #168	; 0xa8
   179fa:	e0b0      	b.n	17b5e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x33a>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   179fc:	f000 ff55 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17a00:	f000 ff53 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17a04:	f000 ff51 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17a08:	f000 ff4f 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17a0c:	f000 ff4d 	bl	188aa <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   17a10:	6833      	ldr	r3, [r6, #0]
   17a12:	930f      	str	r3, [sp, #60]	; 0x3c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17a14:	3501      	adds	r5, #1
   17a16:	9b04      	ldr	r3, [sp, #16]
   17a18:	42ab      	cmp	r3, r5
   17a1a:	dd2d      	ble.n	17a78 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x254>
              const int in_x = in_x_origin + filter_x;
   17a1c:	9b01      	ldr	r3, [sp, #4]
   17a1e:	1958      	adds	r0, r3, r5
              const int in_y = in_y_origin + filter_y;
   17a20:	9b02      	ldr	r3, [sp, #8]
   17a22:	191e      	adds	r6, r3, r4
  inline int32_t DimensionsCount() const { return size_; }
   17a24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17a26:	2b04      	cmp	r3, #4
   17a28:	d1e8      	bne.n	179fc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17a2a:	f1bb 0f00 	cmp.w	fp, #0
   17a2e:	dbe7      	blt.n	17a00 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
   17a30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17a32:	459b      	cmp	fp, r3
   17a34:	dae4      	bge.n	17a00 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17a36:	2e00      	cmp	r6, #0
   17a38:	dbe4      	blt.n	17a04 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
   17a3a:	9920      	ldr	r1, [sp, #128]	; 0x80
   17a3c:	428e      	cmp	r6, r1
   17a3e:	dae1      	bge.n	17a04 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17a40:	2800      	cmp	r0, #0
   17a42:	dbe1      	blt.n	17a08 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
   17a44:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17a46:	4290      	cmp	r0, r2
   17a48:	dade      	bge.n	17a08 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17a4a:	f1b9 0f00 	cmp.w	r9, #0
   17a4e:	dbdd      	blt.n	17a0c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
   17a50:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17a52:	4599      	cmp	r9, r3
   17a54:	dada      	bge.n	17a0c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17a56:	fb01 610b 	mla	r1, r1, fp, r6
   17a5a:	fb01 0202 	mla	r2, r1, r2, r0
   17a5e:	fb02 9303 	mla	r3, r2, r3, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   17a62:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
      if (__a < __b)
   17a66:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   17a6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17a6c:	f7e9 fb12 	bl	1094 <__aeabi_fcmplt>
   17a70:	2800      	cmp	r0, #0
   17a72:	d1cd      	bne.n	17a10 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
      return __a;
   17a74:	ae0f      	add	r6, sp, #60	; 0x3c
   17a76:	e7cb      	b.n	17a10 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17a78:	3401      	adds	r4, #1
   17a7a:	9b05      	ldr	r3, [sp, #20]
   17a7c:	42a3      	cmp	r3, r4
   17a7e:	dd01      	ble.n	17a84 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x260>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17a80:	9d03      	ldr	r5, [sp, #12]
   17a82:	e7c8      	b.n	17a16 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   17a84:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17a86:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   17a88:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   17a8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17a8c:	2b04      	cmp	r3, #4
   17a8e:	d16c      	bne.n	17b6a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x346>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17a90:	f1bb 0f00 	cmp.w	fp, #0
   17a94:	db6b      	blt.n	17b6e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
   17a96:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17a98:	459b      	cmp	fp, r3
   17a9a:	da68      	bge.n	17b6e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17a9c:	2f00      	cmp	r7, #0
   17a9e:	db68      	blt.n	17b72 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
   17aa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17aa2:	4297      	cmp	r7, r2
   17aa4:	da65      	bge.n	17b72 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17aa6:	f1b8 0f00 	cmp.w	r8, #0
   17aaa:	db64      	blt.n	17b76 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
   17aac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17aae:	4598      	cmp	r8, r3
   17ab0:	da61      	bge.n	17b76 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17ab2:	f1b9 0f00 	cmp.w	r9, #0
   17ab6:	db60      	blt.n	17b7a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
   17ab8:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   17aba:	45a1      	cmp	r9, r4
   17abc:	da5d      	bge.n	17b7a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17abe:	fb02 720b 	mla	r2, r2, fp, r7
   17ac2:	fb02 8303 	mla	r3, r2, r3, r8
   17ac6:	fb03 9404 	mla	r4, r3, r4, r9
   17aca:	9012      	str	r0, [sp, #72]	; 0x48
   17acc:	9111      	str	r1, [sp, #68]	; 0x44
   17ace:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   17ad0:	f7e9 fae0 	bl	1094 <__aeabi_fcmplt>
   17ad4:	2800      	cmp	r0, #0
   17ad6:	d152      	bne.n	17b7e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35a>
      return __a;
   17ad8:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   17ada:	6829      	ldr	r1, [r5, #0]
   17adc:	4630      	mov	r0, r6
   17ade:	f7e9 fad9 	bl	1094 <__aeabi_fcmplt>
   17ae2:	2800      	cmp	r0, #0
   17ae4:	d14d      	bne.n	17b82 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35e>
   17ae6:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   17ae8:	9a00      	ldr	r2, [sp, #0]
   17aea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   17aee:	f109 0901 	add.w	r9, r9, #1
   17af2:	9b07      	ldr	r3, [sp, #28]
   17af4:	4599      	cmp	r9, r3
   17af6:	da46      	bge.n	17b86 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
              (out_x * stride_width) - params.padding_values.width;
   17af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17afa:	fb08 f203 	mul.w	r2, r8, r3
   17afe:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   17b02:	1a53      	subs	r3, r2, r1
   17b04:	9301      	str	r3, [sp, #4]
              (out_y * stride_height) - params.padding_values.height;
   17b06:	9b08      	ldr	r3, [sp, #32]
   17b08:	fb07 f003 	mul.w	r0, r7, r3
   17b0c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   17b10:	1ac4      	subs	r4, r0, r3
   17b12:	9402      	str	r4, [sp, #8]
          const int filter_x_start = std::max(0, -in_x_origin);
   17b14:	2400      	movs	r4, #0
   17b16:	942f      	str	r4, [sp, #188]	; 0xbc
   17b18:	1a8a      	subs	r2, r1, r2
   17b1a:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   17b1c:	42a2      	cmp	r2, r4
   17b1e:	f73f af65 	bgt.w	179ec <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c8>
      return __a;
   17b22:	a92f      	add	r1, sp, #188	; 0xbc
   17b24:	6809      	ldr	r1, [r1, #0]
   17b26:	9103      	str	r1, [sp, #12]
              std::min(params.filter_width, input_width - in_x_origin);
   17b28:	990c      	ldr	r1, [sp, #48]	; 0x30
   17b2a:	440a      	add	r2, r1
   17b2c:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   17b2e:	9919      	ldr	r1, [sp, #100]	; 0x64
   17b30:	428a      	cmp	r2, r1
   17b32:	f6ff af5d 	blt.w	179f0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
      return __a;
   17b36:	aa19      	add	r2, sp, #100	; 0x64
   17b38:	6812      	ldr	r2, [r2, #0]
   17b3a:	9204      	str	r2, [sp, #16]
          const int filter_y_start = std::max(0, -in_y_origin);
   17b3c:	2200      	movs	r2, #0
   17b3e:	922c      	str	r2, [sp, #176]	; 0xb0
   17b40:	1a1b      	subs	r3, r3, r0
   17b42:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   17b44:	4293      	cmp	r3, r2
   17b46:	f73f af55 	bgt.w	179f4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
      return __a;
   17b4a:	aa2c      	add	r2, sp, #176	; 0xb0
   17b4c:	6814      	ldr	r4, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   17b4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17b50:	4413      	add	r3, r2
   17b52:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   17b54:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17b56:	4293      	cmp	r3, r2
   17b58:	f6ff af4e 	blt.w	179f8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d4>
      return __a;
   17b5c:	ab18      	add	r3, sp, #96	; 0x60
   17b5e:	681b      	ldr	r3, [r3, #0]
   17b60:	9305      	str	r3, [sp, #20]
          float max = std::numeric_limits<float>::lowest();
   17b62:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   17b66:	930f      	str	r3, [sp, #60]	; 0x3c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17b68:	e787      	b.n	17a7a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x256>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17b6a:	f000 fe9e 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17b6e:	f000 fe9c 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17b72:	f000 fe9a 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17b76:	f000 fe98 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17b7a:	f000 fe96 	bl	188aa <abort>
	return __b;
   17b7e:	ad11      	add	r5, sp, #68	; 0x44
   17b80:	e7ab      	b.n	17ada <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2b6>
	return __b;
   17b82:	ad10      	add	r5, sp, #64	; 0x40
   17b84:	e7af      	b.n	17ae6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2c2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17b86:	f108 0801 	add.w	r8, r8, #1
   17b8a:	e6f0      	b.n	1796e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14a>
   17b8c:	46d0      	mov	r8, sl
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17b8e:	f107 0901 	add.w	r9, r7, #1
   17b92:	e6e2      	b.n	1795a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
   17b94:	46d9      	mov	r9, fp
   17b96:	46c3      	mov	fp, r8
  for (int batch = 0; batch < batches; ++batch) {
   17b98:	f109 0901 	add.w	r9, r9, #1
   17b9c:	e6d4      	b.n	17948 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x124>
    if (size_ > kMaxSmallSize) {
   17b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17ba0:	2b05      	cmp	r3, #5
   17ba2:	dd03      	ble.n	17bac <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
      delete[] dims_pointer_;
   17ba4:	9825      	ldr	r0, [sp, #148]	; 0x94
   17ba6:	b108      	cbz	r0, 17bac <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
   17ba8:	f000 fe6a 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   17bac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17bae:	2b05      	cmp	r3, #5
   17bb0:	dd03      	ble.n	17bba <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
      delete[] dims_pointer_;
   17bb2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   17bb4:	b108      	cbz	r0, 17bba <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
   17bb6:	f000 fe63 	bl	18880 <_ZdaPv>
                         tflite::micro::GetTensorData<float>(output));
}
   17bba:	b035      	add	sp, #212	; 0xd4
   17bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017bc0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:
                                 TfLiteEvalTensor* output) {
   17bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bc4:	b0b1      	sub	sp, #196	; 0xc4
   17bc6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
   17bc8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   17bca:	7a21      	ldrb	r1, [r4, #8]
   17bcc:	2909      	cmp	r1, #9
   17bce:	f040 80a0 	bne.w	17d12 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x152>
  op_params.stride_height = params->stride_height;
   17bd2:	6891      	ldr	r1, [r2, #8]
   17bd4:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
   17bd6:	6851      	ldr	r1, [r2, #4]
   17bd8:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
   17bda:	6911      	ldr	r1, [r2, #16]
   17bdc:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
   17bde:	68d2      	ldr	r2, [r2, #12]
   17be0:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
   17be2:	685a      	ldr	r2, [r3, #4]
   17be4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
   17be8:	681a      	ldr	r2, [r3, #0]
   17bea:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.quantized_activation_min = data->activation_min;
   17bee:	691a      	ldr	r2, [r3, #16]
   17bf0:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.quantized_activation_max = data->activation_max;
   17bf2:	695b      	ldr	r3, [r3, #20]
   17bf4:	9317      	str	r3, [sp, #92]	; 0x5c
      op_params, tflite::micro::GetTensorShape(input),
   17bf6:	4621      	mov	r1, r4
   17bf8:	a81a      	add	r0, sp, #104	; 0x68
   17bfa:	f7ff fa7b 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   17bfe:	4620      	mov	r0, r4
   17c00:	f7fe f8c3 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   17c04:	9004      	str	r0, [sp, #16]
      tflite::micro::GetTensorShape(output),
   17c06:	4629      	mov	r1, r5
   17c08:	a820      	add	r0, sp, #128	; 0x80
   17c0a:	f7ff fa73 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   17c0e:	4628      	mov	r0, r5
   17c10:	f7fe f8c1 	bl	15d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   17c14:	9005      	str	r0, [sp, #20]

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   17c16:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17c1a:	429a      	cmp	r2, r3
   17c1c:	dc7b      	bgt.n	17d16 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x156>
  inline int32_t DimensionsCount() const { return size_; }
   17c1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17c20:	2b04      	cmp	r3, #4
   17c22:	d17a      	bne.n	17d1a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15a>
   17c24:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17c26:	2b04      	cmp	r3, #4
   17c28:	d179      	bne.n	17d1e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   17c2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17c2c:	2b00      	cmp	r3, #0
   17c2e:	dd78      	ble.n	17d22 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17c30:	2b05      	cmp	r3, #5
   17c32:	dd78      	ble.n	17d26 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x166>
   17c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17c36:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   17c38:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17c3a:	2a00      	cmp	r2, #0
   17c3c:	dd75      	ble.n	17d2a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17c3e:	2a05      	cmp	r2, #5
   17c40:	dd75      	ble.n	17d2e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16e>
   17c42:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17c44:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17c46:	429a      	cmp	r2, r3
   17c48:	d173      	bne.n	17d32 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x172>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17c4a:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   17c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17c4e:	2a00      	cmp	r2, #0
   17c50:	dd71      	ble.n	17d36 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17c52:	2a05      	cmp	r2, #5
   17c54:	dd71      	ble.n	17d3a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17a>
   17c56:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17c58:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17c5a:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   17c5c:	4293      	cmp	r3, r2
   17c5e:	dc6e      	bgt.n	17d3e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17e>
      return __a;
   17c60:	ab2f      	add	r3, sp, #188	; 0xbc
   17c62:	681b      	ldr	r3, [r3, #0]
   17c64:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   17c66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17c68:	2b03      	cmp	r3, #3
   17c6a:	dd6a      	ble.n	17d42 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17c6c:	2b05      	cmp	r3, #5
   17c6e:	dd6a      	ble.n	17d46 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x186>
   17c70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17c72:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   17c74:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17c76:	2a03      	cmp	r2, #3
   17c78:	dd67      	ble.n	17d4a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17c7a:	2a05      	cmp	r2, #5
   17c7c:	dd67      	ble.n	17d4e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18e>
   17c7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17c80:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17c82:	429a      	cmp	r2, r3
   17c84:	d165      	bne.n	17d52 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x192>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17c86:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   17c88:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17c8a:	2a03      	cmp	r2, #3
   17c8c:	dd63      	ble.n	17d56 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17c8e:	2a05      	cmp	r2, #5
   17c90:	dd63      	ble.n	17d5a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19a>
   17c92:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17c94:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17c96:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   17c98:	4293      	cmp	r3, r2
   17c9a:	dc60      	bgt.n	17d5e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19e>
      return __a;
   17c9c:	ab2d      	add	r3, sp, #180	; 0xb4
   17c9e:	681b      	ldr	r3, [r3, #0]
   17ca0:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   17ca2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17ca4:	2b01      	cmp	r3, #1
   17ca6:	dd5c      	ble.n	17d62 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ca8:	2b05      	cmp	r3, #5
   17caa:	dd5c      	ble.n	17d66 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a6>
   17cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17cae:	685b      	ldr	r3, [r3, #4]
   17cb0:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   17cb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17cb4:	2b02      	cmp	r3, #2
   17cb6:	dd59      	ble.n	17d6c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17cb8:	2b05      	cmp	r3, #5
   17cba:	dd59      	ble.n	17d70 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b0>
   17cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17cbe:	689b      	ldr	r3, [r3, #8]
   17cc0:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   17cc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17cc4:	2b01      	cmp	r3, #1
   17cc6:	dd56      	ble.n	17d76 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17cc8:	2b05      	cmp	r3, #5
   17cca:	dd56      	ble.n	17d7a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ba>
   17ccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17cce:	685b      	ldr	r3, [r3, #4]
   17cd0:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   17cd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17cd4:	2b02      	cmp	r3, #2
   17cd6:	dd53      	ble.n	17d80 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17cd8:	2b05      	cmp	r3, #5
   17cda:	dd53      	ble.n	17d84 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c4>
   17cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17cde:	689b      	ldr	r3, [r3, #8]
   17ce0:	930d      	str	r3, [sp, #52]	; 0x34
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   17ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17ce4:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_width = params.stride_width;
   17ce6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17ce8:	930c      	str	r3, [sp, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
   17cea:	f04f 0800 	mov.w	r8, #0
   17cee:	9b06      	ldr	r3, [sp, #24]
   17cf0:	4598      	cmp	r8, r3
   17cf2:	f280 8123 	bge.w	17f3c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17cf6:	2700      	movs	r7, #0
   17cf8:	46c6      	mov	lr, r8
   17cfa:	46b8      	mov	r8, r7
   17cfc:	9b08      	ldr	r3, [sp, #32]
   17cfe:	4598      	cmp	r8, r3
   17d00:	f280 8119 	bge.w	17f36 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x376>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17d04:	2600      	movs	r6, #0
   17d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17d08:	429e      	cmp	r6, r3
   17d0a:	f280 8111 	bge.w	17f30 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   17d0e:	2200      	movs	r2, #0
   17d10:	e0bc      	b.n	17e8c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2cc>
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   17d12:	f000 fdca 	bl	188aa <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   17d16:	f000 fdc8 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17d1a:	f000 fdc6 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17d1e:	f000 fdc4 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   17d22:	f000 fdc2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17d28:	e786      	b.n	17c38 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x78>
    TFLITE_DCHECK_LT(i, size_);
   17d2a:	f000 fdbe 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17d30:	e789      	b.n	17c46 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17d32:	f000 fdba 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   17d36:	f000 fdb8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17d3c:	e78d      	b.n	17c5a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x9a>
	return __b;
   17d3e:	ab2e      	add	r3, sp, #184	; 0xb8
   17d40:	e78f      	b.n	17c62 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xa2>
    TFLITE_DCHECK_LT(i, size_);
   17d42:	f000 fdb2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17d48:	e794      	b.n	17c74 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
   17d4a:	f000 fdae 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17d50:	e797      	b.n	17c82 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xc2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17d52:	f000 fdaa 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   17d56:	f000 fda8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17d5c:	e79b      	b.n	17c96 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xd6>
   17d5e:	ab2c      	add	r3, sp, #176	; 0xb0
   17d60:	e79d      	b.n	17c9e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xde>
    TFLITE_DCHECK_LT(i, size_);
   17d62:	f000 fda2 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17d68:	930a      	str	r3, [sp, #40]	; 0x28
   17d6a:	e7a2      	b.n	17cb2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   17d6c:	f000 fd9d 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17d72:	9309      	str	r3, [sp, #36]	; 0x24
   17d74:	e7a5      	b.n	17cc2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   17d76:	f000 fd98 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17d7c:	9308      	str	r3, [sp, #32]
   17d7e:	e7a8      	b.n	17cd2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x112>
    TFLITE_DCHECK_LT(i, size_);
   17d80:	f000 fd93 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17d86:	930d      	str	r3, [sp, #52]	; 0x34
   17d88:	e7ab      	b.n	17ce2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x122>
	return __b;
   17d8a:	a82a      	add	r0, sp, #168	; 0xa8
   17d8c:	e097      	b.n	17ebe <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2fe>
	return __b;
   17d8e:	a929      	add	r1, sp, #164	; 0xa4
   17d90:	e09f      	b.n	17ed2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x312>
	return __b;
   17d92:	a927      	add	r1, sp, #156	; 0x9c
   17d94:	e0a7      	b.n	17ee6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x326>
	return __b;
   17d96:	ab26      	add	r3, sp, #152	; 0x98
   17d98:	e0ae      	b.n	17ef8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x338>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17d9a:	f000 fd86 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17d9e:	f000 fd84 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17da2:	f000 fd82 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17da6:	f000 fd80 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17daa:	f000 fd7e 	bl	188aa <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17dae:	3101      	adds	r1, #1
   17db0:	9803      	ldr	r0, [sp, #12]
   17db2:	4288      	cmp	r0, r1
   17db4:	dd2f      	ble.n	17e16 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17db6:	9801      	ldr	r0, [sp, #4]
   17db8:	9c02      	ldr	r4, [sp, #8]
   17dba:	4284      	cmp	r4, r0
   17dbc:	ddf7      	ble.n	17dae <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ee>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   17dbe:	eb0c 0700 	add.w	r7, ip, r0
              const int in_y = in_y_origin + filter_y;
   17dc2:	eb09 0a01 	add.w	sl, r9, r1
  inline int32_t DimensionsCount() const { return size_; }
   17dc6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17dc8:	2d04      	cmp	r5, #4
   17dca:	d1e6      	bne.n	17d9a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1da>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17dcc:	f1be 0f00 	cmp.w	lr, #0
   17dd0:	dbe5      	blt.n	17d9e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
   17dd2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   17dd4:	45ae      	cmp	lr, r5
   17dd6:	dae2      	bge.n	17d9e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17dd8:	f1ba 0f00 	cmp.w	sl, #0
   17ddc:	dbe1      	blt.n	17da2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
   17dde:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
   17de2:	45da      	cmp	sl, fp
   17de4:	dadd      	bge.n	17da2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17de6:	2f00      	cmp	r7, #0
   17de8:	dbdd      	blt.n	17da6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
   17dea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   17dec:	42af      	cmp	r7, r5
   17dee:	dada      	bge.n	17da6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17df0:	2a00      	cmp	r2, #0
   17df2:	dbda      	blt.n	17daa <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
   17df4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   17df6:	42a2      	cmp	r2, r4
   17df8:	dad7      	bge.n	17daa <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17dfa:	fb0b aa0e 	mla	sl, fp, lr, sl
   17dfe:	fb0a 7705 	mla	r7, sl, r5, r7
   17e02:	fb07 2404 	mla	r4, r7, r4, r2
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   17e06:	9d04      	ldr	r5, [sp, #16]
   17e08:	572d      	ldrsb	r5, [r5, r4]
              acc +=
   17e0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   17e0c:	442c      	add	r4, r5
   17e0e:	940e      	str	r4, [sp, #56]	; 0x38
              filter_count++;
   17e10:	3301      	adds	r3, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17e12:	3001      	adds	r0, #1
   17e14:	e7d0      	b.n	17db8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f8>
            }
          }
          if (filter_count == 0) return false;
   17e16:	2b00      	cmp	r3, #0
   17e18:	f000 8090 	beq.w	17f3c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   17e1c:	990e      	ldr	r1, [sp, #56]	; 0x38
   17e1e:	2900      	cmp	r1, #0
   17e20:	dd6f      	ble.n	17f02 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x342>
   17e22:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   17e26:	eb01 0160 	add.w	r1, r1, r0, asr #1
   17e2a:	fb91 f3f3 	sdiv	r3, r1, r3
   17e2e:	930e      	str	r3, [sp, #56]	; 0x38
      if (__a < __b)
   17e30:	9916      	ldr	r1, [sp, #88]	; 0x58
   17e32:	428b      	cmp	r3, r1
   17e34:	db6c      	blt.n	17f10 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x350>
      return __a;
   17e36:	ab0e      	add	r3, sp, #56	; 0x38
                        : (acc - filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
   17e38:	681b      	ldr	r3, [r3, #0]
   17e3a:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
   17e3c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   17e3e:	428b      	cmp	r3, r1
   17e40:	dc68      	bgt.n	17f14 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x354>
      return __a;
   17e42:	ab0e      	add	r3, sp, #56	; 0x38
          acc = std::min(acc, params.quantized_activation_max);
   17e44:	681c      	ldr	r4, [r3, #0]
   17e46:	940e      	str	r4, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
   17e48:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17e4a:	2b04      	cmp	r3, #4
   17e4c:	d164      	bne.n	17f18 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x358>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17e4e:	f1be 0f00 	cmp.w	lr, #0
   17e52:	db63      	blt.n	17f1c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
   17e54:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17e56:	459e      	cmp	lr, r3
   17e58:	da60      	bge.n	17f1c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17e5a:	f1b8 0f00 	cmp.w	r8, #0
   17e5e:	db5f      	blt.n	17f20 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
   17e60:	9822      	ldr	r0, [sp, #136]	; 0x88
   17e62:	4580      	cmp	r8, r0
   17e64:	da5c      	bge.n	17f20 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17e66:	2e00      	cmp	r6, #0
   17e68:	db5c      	blt.n	17f24 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
   17e6a:	9923      	ldr	r1, [sp, #140]	; 0x8c
   17e6c:	428e      	cmp	r6, r1
   17e6e:	da59      	bge.n	17f24 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17e70:	2a00      	cmp	r2, #0
   17e72:	db59      	blt.n	17f28 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
   17e74:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17e76:	429a      	cmp	r2, r3
   17e78:	da56      	bge.n	17f28 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17e7a:	fb00 800e 	mla	r0, r0, lr, r8
   17e7e:	fb00 6101 	mla	r1, r0, r1, r6
   17e82:	fb01 2303 	mla	r3, r1, r3, r2
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   17e86:	9905      	ldr	r1, [sp, #20]
   17e88:	54cc      	strb	r4, [r1, r3]
        for (int channel = 0; channel < depth; ++channel) {
   17e8a:	3201      	adds	r2, #1
   17e8c:	9b07      	ldr	r3, [sp, #28]
   17e8e:	429a      	cmp	r2, r3
   17e90:	da4c      	bge.n	17f2c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x36c>
              (out_x * stride_width) - params.padding_values.width;
   17e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17e94:	fb06 f103 	mul.w	r1, r6, r3
   17e98:	f9bd 003e 	ldrsh.w	r0, [sp, #62]	; 0x3e
          const int in_x_origin =
   17e9c:	eba1 0c00 	sub.w	ip, r1, r0
              (out_y * stride_height) - params.padding_values.height;
   17ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17ea2:	fb08 f403 	mul.w	r4, r8, r3
   17ea6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
          const int in_y_origin =
   17eaa:	eba4 0903 	sub.w	r9, r4, r3
          const int filter_x_start = std::max(0, -in_x_origin);
   17eae:	2500      	movs	r5, #0
   17eb0:	952b      	str	r5, [sp, #172]	; 0xac
   17eb2:	1a41      	subs	r1, r0, r1
   17eb4:	912a      	str	r1, [sp, #168]	; 0xa8
      if (__a < __b)
   17eb6:	42a9      	cmp	r1, r5
   17eb8:	f73f af67 	bgt.w	17d8a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ca>
      return __a;
   17ebc:	a82b      	add	r0, sp, #172	; 0xac
   17ebe:	6800      	ldr	r0, [r0, #0]
   17ec0:	9001      	str	r0, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   17ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
   17ec4:	4401      	add	r1, r0
   17ec6:	9129      	str	r1, [sp, #164]	; 0xa4
      if (__b < __a)
   17ec8:	9815      	ldr	r0, [sp, #84]	; 0x54
   17eca:	4281      	cmp	r1, r0
   17ecc:	f6ff af5f 	blt.w	17d8e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ce>
      return __a;
   17ed0:	a915      	add	r1, sp, #84	; 0x54
   17ed2:	6809      	ldr	r1, [r1, #0]
   17ed4:	9102      	str	r1, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   17ed6:	2100      	movs	r1, #0
   17ed8:	9128      	str	r1, [sp, #160]	; 0xa0
   17eda:	1b1b      	subs	r3, r3, r4
   17edc:	9327      	str	r3, [sp, #156]	; 0x9c
      if (__a < __b)
   17ede:	428b      	cmp	r3, r1
   17ee0:	f73f af57 	bgt.w	17d92 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d2>
      return __a;
   17ee4:	a928      	add	r1, sp, #160	; 0xa0
   17ee6:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   17ee8:	980a      	ldr	r0, [sp, #40]	; 0x28
   17eea:	4403      	add	r3, r0
   17eec:	9326      	str	r3, [sp, #152]	; 0x98
      if (__b < __a)
   17eee:	9814      	ldr	r0, [sp, #80]	; 0x50
   17ef0:	4283      	cmp	r3, r0
   17ef2:	f6ff af50 	blt.w	17d96 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d6>
      return __a;
   17ef6:	ab14      	add	r3, sp, #80	; 0x50
   17ef8:	681b      	ldr	r3, [r3, #0]
   17efa:	9303      	str	r3, [sp, #12]
          int32_t acc = 0;
   17efc:	2300      	movs	r3, #0
   17efe:	930e      	str	r3, [sp, #56]	; 0x38
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17f00:	e756      	b.n	17db0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f0>
                        : (acc - filter_count / 2) / filter_count;
   17f02:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   17f06:	eba1 0160 	sub.w	r1, r1, r0, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   17f0a:	fb91 f3f3 	sdiv	r3, r1, r3
   17f0e:	e78e      	b.n	17e2e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x26e>
	return __b;
   17f10:	ab16      	add	r3, sp, #88	; 0x58
   17f12:	e791      	b.n	17e38 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x278>
	return __b;
   17f14:	ab17      	add	r3, sp, #92	; 0x5c
   17f16:	e795      	b.n	17e44 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x284>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17f18:	f000 fcc7 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17f1c:	f000 fcc5 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17f20:	f000 fcc3 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17f24:	f000 fcc1 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17f28:	f000 fcbf 	bl	188aa <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17f2c:	3601      	adds	r6, #1
   17f2e:	e6ea      	b.n	17d06 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x146>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17f30:	f108 0801 	add.w	r8, r8, #1
   17f34:	e6e2      	b.n	17cfc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x13c>
  for (int batch = 0; batch < batches; ++batch) {
   17f36:	f10e 0801 	add.w	r8, lr, #1
   17f3a:	e6d8      	b.n	17cee <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x12e>
    if (size_ > kMaxSmallSize) {
   17f3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17f3e:	2b05      	cmp	r3, #5
   17f40:	dd03      	ble.n	17f4a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
      delete[] dims_pointer_;
   17f42:	9821      	ldr	r0, [sp, #132]	; 0x84
   17f44:	b108      	cbz	r0, 17f4a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
   17f46:	f000 fc9b 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   17f4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17f4c:	2b05      	cmp	r3, #5
   17f4e:	dd03      	ble.n	17f58 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
      delete[] dims_pointer_;
   17f50:	981b      	ldr	r0, [sp, #108]	; 0x6c
   17f52:	b108      	cbz	r0, 17f58 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
   17f54:	f000 fc94 	bl	18880 <_ZdaPv>
}
   17f58:	b031      	add	sp, #196	; 0xc4
   17f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f5e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   17f5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f62:	b0b1      	sub	sp, #196	; 0xc4
   17f64:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   17f66:	9c3b      	ldr	r4, [sp, #236]	; 0xec
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   17f68:	6891      	ldr	r1, [r2, #8]
   17f6a:	9111      	str	r1, [sp, #68]	; 0x44
  op_params.stride_width = params->stride_width;
   17f6c:	6851      	ldr	r1, [r2, #4]
   17f6e:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.filter_height = params->filter_height;
   17f70:	6911      	ldr	r1, [r2, #16]
   17f72:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_width = params->filter_width;
   17f74:	68d2      	ldr	r2, [r2, #12]
   17f76:	9214      	str	r2, [sp, #80]	; 0x50
  op_params.padding_values.height = data->padding.height;
   17f78:	685a      	ldr	r2, [r3, #4]
   17f7a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  op_params.padding_values.width = data->padding.width;
   17f7e:	681a      	ldr	r2, [r3, #0]
   17f80:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  op_params.quantized_activation_min = data->activation_min;
   17f84:	691a      	ldr	r2, [r3, #16]
   17f86:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.quantized_activation_max = data->activation_max;
   17f88:	695b      	ldr	r3, [r3, #20]
   17f8a:	9316      	str	r3, [sp, #88]	; 0x58

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
   17f8c:	4629      	mov	r1, r5
   17f8e:	a819      	add	r0, sp, #100	; 0x64
   17f90:	f7ff f8b0 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   17f94:	4628      	mov	r0, r5
   17f96:	f7fd fef8 	bl	15d8a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   17f9a:	4681      	mov	r9, r0
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
   17f9c:	4621      	mov	r1, r4
   17f9e:	a81f      	add	r0, sp, #124	; 0x7c
   17fa0:	f7ff f8a8 	bl	170f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   17fa4:	4620      	mov	r0, r4
   17fa6:	f7fd fef6 	bl	15d96 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   17faa:	9000      	str	r0, [sp, #0]
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   17fac:	9a15      	ldr	r2, [sp, #84]	; 0x54
   17fae:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17fb0:	429a      	cmp	r2, r3
   17fb2:	f300 8081 	bgt.w	180b8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15a>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   17fb6:	f112 0f80 	cmn.w	r2, #128	; 0x80
   17fba:	db7f      	blt.n	180bc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15e>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   17fbc:	2b7f      	cmp	r3, #127	; 0x7f
   17fbe:	dc7f      	bgt.n	180c0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x162>
  inline int32_t DimensionsCount() const { return size_; }
   17fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17fc2:	2b04      	cmp	r3, #4
   17fc4:	d17e      	bne.n	180c4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x166>
   17fc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17fc8:	2b04      	cmp	r3, #4
   17fca:	d17d      	bne.n	180c8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16a>
    TFLITE_DCHECK_LT(i, size_);
   17fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17fce:	2b00      	cmp	r3, #0
   17fd0:	dd7c      	ble.n	180cc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17fd2:	2b05      	cmp	r3, #5
   17fd4:	dd7c      	ble.n	180d0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x172>
   17fd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17fd8:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   17fda:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17fdc:	2a00      	cmp	r2, #0
   17fde:	dd79      	ble.n	180d4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17fe0:	2a05      	cmp	r2, #5
   17fe2:	dd79      	ble.n	180d8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17a>
   17fe4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17fe6:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17fe8:	429a      	cmp	r2, r3
   17fea:	d177      	bne.n	180dc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17fec:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   17fee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17ff0:	2a00      	cmp	r2, #0
   17ff2:	dd75      	ble.n	180e0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ff4:	2a05      	cmp	r2, #5
   17ff6:	dd75      	ble.n	180e4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x186>
   17ff8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17ffa:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17ffc:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   17ffe:	4293      	cmp	r3, r2
   18000:	dc72      	bgt.n	180e8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18a>
      return __a;
   18002:	ab2f      	add	r3, sp, #188	; 0xbc
   18004:	681b      	ldr	r3, [r3, #0]
   18006:	9304      	str	r3, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   18008:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1800a:	2b03      	cmp	r3, #3
   1800c:	dd6e      	ble.n	180ec <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1800e:	2b05      	cmp	r3, #5
   18010:	dd6e      	ble.n	180f0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x192>
   18012:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18014:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   18016:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   18018:	2a03      	cmp	r2, #3
   1801a:	dd6b      	ble.n	180f4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1801c:	2a05      	cmp	r2, #5
   1801e:	dd6b      	ble.n	180f8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19a>
   18020:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18022:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   18024:	429a      	cmp	r2, r3
   18026:	d169      	bne.n	180fc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   18028:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   1802a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1802c:	2a03      	cmp	r2, #3
   1802e:	dd67      	ble.n	18100 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18030:	2a05      	cmp	r2, #5
   18032:	dd67      	ble.n	18104 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a6>
   18034:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18036:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   18038:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   1803a:	4293      	cmp	r3, r2
   1803c:	dc64      	bgt.n	18108 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
      return __a;
   1803e:	ab2d      	add	r3, sp, #180	; 0xb4
   18040:	681b      	ldr	r3, [r3, #0]
   18042:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   18044:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18046:	2b01      	cmp	r3, #1
   18048:	dd60      	ble.n	1810c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1804a:	2b05      	cmp	r3, #5
   1804c:	dd60      	ble.n	18110 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b2>
   1804e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18050:	685b      	ldr	r3, [r3, #4]
   18052:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   18054:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18056:	2b02      	cmp	r3, #2
   18058:	dd5d      	ble.n	18116 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1805a:	2b05      	cmp	r3, #5
   1805c:	dd5d      	ble.n	1811a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1bc>
   1805e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18060:	689b      	ldr	r3, [r3, #8]
   18062:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
   18064:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18066:	2b01      	cmp	r3, #1
   18068:	dd5a      	ble.n	18120 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1806a:	2b05      	cmp	r3, #5
   1806c:	dd5a      	ble.n	18124 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c6>
   1806e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   18070:	685b      	ldr	r3, [r3, #4]
   18072:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   18074:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18076:	2b02      	cmp	r3, #2
   18078:	dd57      	ble.n	1812a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1807a:	2b05      	cmp	r3, #5
   1807c:	dd57      	ble.n	1812e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
   1807e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   18080:	689b      	ldr	r3, [r3, #8]
   18082:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   18084:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18086:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   18088:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1808a:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   1808c:	f04f 0c00 	mov.w	ip, #0
   18090:	46c8      	mov	r8, r9
   18092:	46e1      	mov	r9, ip
   18094:	9b04      	ldr	r3, [sp, #16]
   18096:	4599      	cmp	r9, r3
   18098:	f280 812b 	bge.w	182f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x394>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1809c:	2700      	movs	r7, #0
   1809e:	46c6      	mov	lr, r8
   180a0:	46b8      	mov	r8, r7
   180a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   180a4:	4598      	cmp	r8, r3
   180a6:	f280 8120 	bge.w	182ea <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x38c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   180aa:	2600      	movs	r6, #0
   180ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   180ae:	429e      	cmp	r6, r3
   180b0:	f280 8118 	bge.w	182e4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x386>
        for (int channel = 0; channel < depth; ++channel) {
   180b4:	2300      	movs	r3, #0
   180b6:	e0c7      	b.n	18248 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ea>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   180b8:	f000 fbf7 	bl	188aa <abort>
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   180bc:	f000 fbf5 	bl	188aa <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   180c0:	f000 fbf3 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   180c4:	f000 fbf1 	bl	188aa <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   180c8:	f000 fbef 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   180cc:	f000 fbed 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   180d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   180d2:	e782      	b.n	17fda <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x7c>
    TFLITE_DCHECK_LT(i, size_);
   180d4:	f000 fbe9 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   180d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   180da:	e785      	b.n	17fe8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   180dc:	f000 fbe5 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   180e0:	f000 fbe3 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   180e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   180e6:	e789      	b.n	17ffc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x9e>
	return __b;
   180e8:	ab2e      	add	r3, sp, #184	; 0xb8
   180ea:	e78b      	b.n	18004 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   180ec:	f000 fbdd 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   180f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   180f2:	e790      	b.n	18016 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb8>
    TFLITE_DCHECK_LT(i, size_);
   180f4:	f000 fbd9 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   180f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   180fa:	e793      	b.n	18024 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   180fc:	f000 fbd5 	bl	188aa <abort>
    TFLITE_DCHECK_LT(i, size_);
   18100:	f000 fbd3 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18104:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   18106:	e797      	b.n	18038 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xda>
   18108:	ab2c      	add	r3, sp, #176	; 0xb0
   1810a:	e799      	b.n	18040 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   1810c:	f000 fbcd 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18110:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18112:	9306      	str	r3, [sp, #24]
   18114:	e79e      	b.n	18054 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf6>
    TFLITE_DCHECK_LT(i, size_);
   18116:	f000 fbc8 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1811a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1811c:	9305      	str	r3, [sp, #20]
   1811e:	e7a1      	b.n	18064 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x106>
    TFLITE_DCHECK_LT(i, size_);
   18120:	f000 fbc3 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18124:	9b21      	ldr	r3, [sp, #132]	; 0x84
   18126:	930b      	str	r3, [sp, #44]	; 0x2c
   18128:	e7a4      	b.n	18074 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x116>
    TFLITE_DCHECK_LT(i, size_);
   1812a:	f000 fbbe 	bl	188aa <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1812e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   18130:	930a      	str	r3, [sp, #40]	; 0x28
   18132:	e7a7      	b.n	18084 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x126>
	return __b;
   18134:	aa2a      	add	r2, sp, #168	; 0xa8
   18136:	e0a0      	b.n	1827a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x31c>
	return __b;
   18138:	aa29      	add	r2, sp, #164	; 0xa4
   1813a:	e0a8      	b.n	1828e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x330>
	return __b;
   1813c:	a927      	add	r1, sp, #156	; 0x9c
   1813e:	e0b0      	b.n	182a2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x344>
	return __b;
   18140:	aa26      	add	r2, sp, #152	; 0x98
   18142:	e0b7      	b.n	182b4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18144:	f000 fbb1 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18148:	f000 fbaf 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1814c:	f000 fbad 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18150:	f000 fbab 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   18154:	f000 fba9 	bl	188aa <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   18158:	f994 2000 	ldrsb.w	r2, [r4]
   1815c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   18160:	3001      	adds	r0, #1
   18162:	9a02      	ldr	r2, [sp, #8]
   18164:	4282      	cmp	r2, r0
   18166:	dd2d      	ble.n	181c4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x266>
              const int in_x = in_x_origin + filter_x;
   18168:	eb0c 0400 	add.w	r4, ip, r0
              const int in_y = in_y_origin + filter_y;
   1816c:	eb0a 0701 	add.w	r7, sl, r1
  inline int32_t DimensionsCount() const { return size_; }
   18170:	9d19      	ldr	r5, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18172:	2d04      	cmp	r5, #4
   18174:	d1e6      	bne.n	18144 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18176:	f1b9 0f00 	cmp.w	r9, #0
   1817a:	dbe5      	blt.n	18148 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
   1817c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   1817e:	45a9      	cmp	r9, r5
   18180:	dae2      	bge.n	18148 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18182:	2f00      	cmp	r7, #0
   18184:	dbe2      	blt.n	1814c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
   18186:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   1818a:	455f      	cmp	r7, fp
   1818c:	dade      	bge.n	1814c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1818e:	2c00      	cmp	r4, #0
   18190:	dbde      	blt.n	18150 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
   18192:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   18194:	42ac      	cmp	r4, r5
   18196:	dadb      	bge.n	18150 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   18198:	2b00      	cmp	r3, #0
   1819a:	dbdb      	blt.n	18154 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
   1819c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1819e:	4293      	cmp	r3, r2
   181a0:	dad8      	bge.n	18154 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   181a2:	fb0b 7709 	mla	r7, fp, r9, r7
   181a6:	fb07 4405 	mla	r4, r7, r5, r4
   181aa:	fb04 3202 	mla	r2, r4, r2, r3
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   181ae:	eb0e 0402 	add.w	r4, lr, r2
      if (__a < __b)
   181b2:	f99d 5037 	ldrsb.w	r5, [sp, #55]	; 0x37
   181b6:	f91e 2002 	ldrsb.w	r2, [lr, r2]
   181ba:	4295      	cmp	r5, r2
   181bc:	dbcc      	blt.n	18158 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
      return __a;
   181be:	f10d 0437 	add.w	r4, sp, #55	; 0x37
   181c2:	e7c9      	b.n	18158 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   181c4:	3101      	adds	r1, #1
   181c6:	9a03      	ldr	r2, [sp, #12]
   181c8:	428a      	cmp	r2, r1
   181ca:	dd01      	ble.n	181d0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x272>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   181cc:	9801      	ldr	r0, [sp, #4]
   181ce:	e7c8      	b.n	18162 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x204>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
   181d0:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
   181d4:	f88d 2097 	strb.w	r2, [sp, #151]	; 0x97
      if (__a < __b)
   181d8:	f99d 1037 	ldrsb.w	r1, [sp, #55]	; 0x37
   181dc:	428a      	cmp	r2, r1
   181de:	dc6f      	bgt.n	182c0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
      return __a;
   181e0:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   181e4:	f992 1000 	ldrsb.w	r1, [r2]
   181e8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
          max = std::min<int8_t>(max, params.quantized_activation_max);
   181ec:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   181f0:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
      if (__b < __a)
   181f4:	4291      	cmp	r1, r2
   181f6:	dc66      	bgt.n	182c6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
      return __a;
   181f8:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   181fc:	f992 4000 	ldrsb.w	r4, [r2]
   18200:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  inline int32_t DimensionsCount() const { return size_; }
   18204:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18206:	2a04      	cmp	r2, #4
   18208:	d160      	bne.n	182cc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x36e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1820a:	f1b9 0f00 	cmp.w	r9, #0
   1820e:	db5f      	blt.n	182d0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
   18210:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18212:	4591      	cmp	r9, r2
   18214:	da5c      	bge.n	182d0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18216:	f1b8 0f00 	cmp.w	r8, #0
   1821a:	db5b      	blt.n	182d4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
   1821c:	9821      	ldr	r0, [sp, #132]	; 0x84
   1821e:	4580      	cmp	r8, r0
   18220:	da58      	bge.n	182d4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18222:	2e00      	cmp	r6, #0
   18224:	db58      	blt.n	182d8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
   18226:	9922      	ldr	r1, [sp, #136]	; 0x88
   18228:	428e      	cmp	r6, r1
   1822a:	da55      	bge.n	182d8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1822c:	2b00      	cmp	r3, #0
   1822e:	db55      	blt.n	182dc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
   18230:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   18232:	4293      	cmp	r3, r2
   18234:	da52      	bge.n	182dc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   18236:	fb00 8009 	mla	r0, r0, r9, r8
   1823a:	fb00 6101 	mla	r1, r0, r1, r6
   1823e:	fb01 3202 	mla	r2, r1, r2, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   18242:	9900      	ldr	r1, [sp, #0]
   18244:	548c      	strb	r4, [r1, r2]
        for (int channel = 0; channel < depth; ++channel) {
   18246:	3301      	adds	r3, #1
   18248:	9a07      	ldr	r2, [sp, #28]
   1824a:	4293      	cmp	r3, r2
   1824c:	da48      	bge.n	182e0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x382>
              (out_x * stride_width) - params.padding_values.width;
   1824e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18250:	fb06 f002 	mul.w	r0, r6, r2
   18254:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
          const int in_x_origin =
   18258:	eba0 0c02 	sub.w	ip, r0, r2
              (out_y * stride_height) - params.padding_values.height;
   1825c:	9908      	ldr	r1, [sp, #32]
   1825e:	fb08 f401 	mul.w	r4, r8, r1
   18262:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
          const int in_y_origin =
   18266:	eba4 0a01 	sub.w	sl, r4, r1
          const int filter_x_start = std::max(0, -in_x_origin);
   1826a:	2500      	movs	r5, #0
   1826c:	952b      	str	r5, [sp, #172]	; 0xac
   1826e:	1a10      	subs	r0, r2, r0
   18270:	902a      	str	r0, [sp, #168]	; 0xa8
      if (__a < __b)
   18272:	42a8      	cmp	r0, r5
   18274:	f73f af5e 	bgt.w	18134 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d6>
      return __a;
   18278:	aa2b      	add	r2, sp, #172	; 0xac
   1827a:	6812      	ldr	r2, [r2, #0]
   1827c:	9201      	str	r2, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   1827e:	9a05      	ldr	r2, [sp, #20]
   18280:	4410      	add	r0, r2
   18282:	9029      	str	r0, [sp, #164]	; 0xa4
      if (__b < __a)
   18284:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18286:	4290      	cmp	r0, r2
   18288:	f6ff af56 	blt.w	18138 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1da>
      return __a;
   1828c:	aa14      	add	r2, sp, #80	; 0x50
   1828e:	6812      	ldr	r2, [r2, #0]
   18290:	9202      	str	r2, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   18292:	2200      	movs	r2, #0
   18294:	9228      	str	r2, [sp, #160]	; 0xa0
   18296:	1b0a      	subs	r2, r1, r4
   18298:	9227      	str	r2, [sp, #156]	; 0x9c
      if (__a < __b)
   1829a:	2a00      	cmp	r2, #0
   1829c:	f73f af4e 	bgt.w	1813c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1de>
      return __a;
   182a0:	a928      	add	r1, sp, #160	; 0xa0
   182a2:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   182a4:	9806      	ldr	r0, [sp, #24]
   182a6:	4402      	add	r2, r0
   182a8:	9226      	str	r2, [sp, #152]	; 0x98
      if (__b < __a)
   182aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
   182ac:	4282      	cmp	r2, r0
   182ae:	f6ff af47 	blt.w	18140 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e2>
      return __a;
   182b2:	aa13      	add	r2, sp, #76	; 0x4c
   182b4:	6812      	ldr	r2, [r2, #0]
   182b6:	9203      	str	r2, [sp, #12]
          int8_t max = std::numeric_limits<int8_t>::lowest();
   182b8:	2280      	movs	r2, #128	; 0x80
   182ba:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   182be:	e782      	b.n	181c6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x268>
	return __b;
   182c0:	f10d 0297 	add.w	r2, sp, #151	; 0x97
   182c4:	e78e      	b.n	181e4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x286>
	return __b;
   182c6:	f10d 0296 	add.w	r2, sp, #150	; 0x96
   182ca:	e797      	b.n	181fc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x29e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   182cc:	f000 faed 	bl	188aa <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   182d0:	f000 faeb 	bl	188aa <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   182d4:	f000 fae9 	bl	188aa <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   182d8:	f000 fae7 	bl	188aa <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   182dc:	f000 fae5 	bl	188aa <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   182e0:	3601      	adds	r6, #1
   182e2:	e6e3      	b.n	180ac <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   182e4:	f108 0801 	add.w	r8, r8, #1
   182e8:	e6db      	b.n	180a2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x144>
   182ea:	46f0      	mov	r8, lr
  for (int batch = 0; batch < batches; ++batch) {
   182ec:	f109 0901 	add.w	r9, r9, #1
   182f0:	e6d0      	b.n	18094 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
    if (size_ > kMaxSmallSize) {
   182f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   182f4:	2b05      	cmp	r3, #5
   182f6:	dd03      	ble.n	18300 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
      delete[] dims_pointer_;
   182f8:	9820      	ldr	r0, [sp, #128]	; 0x80
   182fa:	b108      	cbz	r0, 18300 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
   182fc:	f000 fac0 	bl	18880 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   18300:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18302:	2b05      	cmp	r3, #5
   18304:	dd03      	ble.n	1830e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
      delete[] dims_pointer_;
   18306:	981a      	ldr	r0, [sp, #104]	; 0x68
   18308:	b108      	cbz	r0, 1830e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
   1830a:	f000 fab9 	bl	18880 <_ZdaPv>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
   1830e:	b031      	add	sp, #196	; 0xc4
   18310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018314 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   18314:	b570      	push	{r4, r5, r6, lr}
   18316:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
   18318:	b1c0      	cbz	r0, 1834c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   1831a:	460d      	mov	r5, r1
   1831c:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   1831e:	b1b9      	cbz	r1, 18350 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   18320:	6d43      	ldr	r3, [r0, #84]	; 0x54
   18322:	680a      	ldr	r2, [r1, #0]
   18324:	6851      	ldr	r1, [r2, #4]
   18326:	4798      	blx	r3
   18328:	4604      	mov	r4, r0
  TFLITE_DCHECK(context != nullptr);
   1832a:	b19e      	cbz	r6, 18354 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK(node != nullptr);
   1832c:	b1a5      	cbz	r5, 18358 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x44>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   1832e:	6d73      	ldr	r3, [r6, #84]	; 0x54
   18330:	686a      	ldr	r2, [r5, #4]
   18332:	6851      	ldr	r1, [r2, #4]
   18334:	4630      	mov	r0, r6
   18336:	4798      	blx	r3
   18338:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   1833a:	a901      	add	r1, sp, #4
   1833c:	7a20      	ldrb	r0, [r4, #8]
   1833e:	f7fc feda 	bl	150f6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   18342:	4606      	mov	r6, r0
   18344:	b150      	cbz	r0, 1835c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   18346:	4630      	mov	r0, r6
   18348:	b002      	add	sp, #8
   1834a:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
   1834c:	f000 faad 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
   18350:	f000 faab 	bl	188aa <abort>
  TFLITE_DCHECK(context != nullptr);
   18354:	f000 faa9 	bl	188aa <abort>
  TFLITE_DCHECK(node != nullptr);
   18358:	f000 faa7 	bl	188aa <abort>
  input_bytes *= ElementCount(*input->dims);
   1835c:	6860      	ldr	r0, [r4, #4]
   1835e:	f7fc ffd6 	bl	1530e <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   18362:	9b01      	ldr	r3, [sp, #4]
   18364:	fb00 f003 	mul.w	r0, r0, r3
   18368:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   1836a:	6822      	ldr	r2, [r4, #0]
   1836c:	682b      	ldr	r3, [r5, #0]
   1836e:	429a      	cmp	r2, r3
   18370:	d0e9      	beq.n	18346 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
   18372:	2300      	movs	r3, #0
   18374:	e004      	b.n	18380 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
      output->data.raw[i] = input->data.raw[i];
   18376:	6821      	ldr	r1, [r4, #0]
   18378:	682a      	ldr	r2, [r5, #0]
   1837a:	5cc9      	ldrb	r1, [r1, r3]
   1837c:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   1837e:	3301      	adds	r3, #1
   18380:	9a01      	ldr	r2, [sp, #4]
   18382:	429a      	cmp	r2, r3
   18384:	d8f7      	bhi.n	18376 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x62>
   18386:	e7de      	b.n	18346 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>

00018388 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   18388:	b508      	push	{r3, lr}
   1838a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1838e:	f7e8 fbdb 	bl	b48 <__addsf3>
   18392:	4601      	mov	r1, r0
   18394:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   18398:	f7e8 fd92 	bl	ec0 <__aeabi_fdiv>
   1839c:	bd08      	pop	{r3, pc}

0001839e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   1839e:	b508      	push	{r3, lr}
   183a0:	f7fa f8da 	bl	12558 <expf>
   183a4:	bd08      	pop	{r3, pc}

000183a6 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   183a6:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   183a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   183aa:	b113      	cbz	r3, 183b2 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   183ac:	2138      	movs	r1, #56	; 0x38
   183ae:	4798      	blx	r3
}
   183b0:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   183b2:	f000 fa7a 	bl	188aa <abort>

000183b6 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   183b6:	b148      	cbz	r0, 183cc <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   183b8:	68c3      	ldr	r3, [r0, #12]
   183ba:	8818      	ldrh	r0, [r3, #0]
   183bc:	f3c0 0008 	ubfx	r0, r0, #0, #9
   183c0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   183c4:	bf14      	ite	ne
   183c6:	2000      	movne	r0, #0
   183c8:	2001      	moveq	r0, #1
   183ca:	4770      	bx	lr
		return false;
   183cc:	2000      	movs	r0, #0
}
   183ce:	4770      	bx	lr

000183d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   183d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183d2:	4605      	mov	r5, r0
   183d4:	460e      	mov	r6, r1
	__asm__ volatile(
   183d6:	f04f 0320 	mov.w	r3, #32
   183da:	f3ef 8711 	mrs	r7, BASEPRI
   183de:	f383 8812 	msr	BASEPRI_MAX, r3
   183e2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   183e6:	f7f9 fc71 	bl	11ccc <z_impl_z_current_get>
   183ea:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   183ec:	4631      	mov	r1, r6
   183ee:	4628      	mov	r0, r5
   183f0:	f7fc fdff 	bl	14ff2 <k_sys_fatal_error_handler>
	__asm__ volatile(
   183f4:	f387 8811 	msr	BASEPRI, r7
   183f8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   183fc:	4620      	mov	r0, r4
   183fe:	f7ec f9a1 	bl	4744 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   18402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018404 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   18404:	6902      	ldr	r2, [r0, #16]
   18406:	6943      	ldr	r3, [r0, #20]
   18408:	431a      	orrs	r2, r3
   1840a:	f012 0203 	ands.w	r2, r2, #3
   1840e:	d10d      	bne.n	1842c <create_free_list+0x28>
	slab->free_list = NULL;
   18410:	2100      	movs	r1, #0
   18412:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   18414:	e005      	b.n	18422 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   18416:	6981      	ldr	r1, [r0, #24]
   18418:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   1841a:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   1841c:	6901      	ldr	r1, [r0, #16]
   1841e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   18420:	3201      	adds	r2, #1
   18422:	68c1      	ldr	r1, [r0, #12]
   18424:	4291      	cmp	r1, r2
   18426:	d8f6      	bhi.n	18416 <create_free_list+0x12>
	return 0;
   18428:	2000      	movs	r0, #0
   1842a:	4770      	bx	lr
		return -EINVAL;
   1842c:	f06f 0015 	mvn.w	r0, #21
}
   18430:	4770      	bx	lr

00018432 <k_mem_slab_init>:
{
   18432:	b510      	push	{r4, lr}
   18434:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   18436:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   18438:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   1843a:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   1843c:	2300      	movs	r3, #0
   1843e:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   18440:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
   18442:	f7ff ffdf 	bl	18404 <create_free_list>
	if (rc < 0) {
   18446:	2800      	cmp	r0, #0
   18448:	db01      	blt.n	1844e <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   1844a:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   1844c:	6064      	str	r4, [r4, #4]
}
   1844e:	bd10      	pop	{r4, pc}

00018450 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18452:	4604      	mov	r4, r0
   18454:	460d      	mov	r5, r1
	__asm__ volatile(
   18456:	f04f 0320 	mov.w	r3, #32
   1845a:	f3ef 8611 	mrs	r6, BASEPRI
   1845e:	f383 8812 	msr	BASEPRI_MAX, r3
   18462:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   18466:	6983      	ldr	r3, [r0, #24]
   18468:	b163      	cbz	r3, 18484 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   1846a:	682b      	ldr	r3, [r5, #0]
   1846c:	69a2      	ldr	r2, [r4, #24]
   1846e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   18470:	682b      	ldr	r3, [r5, #0]
   18472:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   18474:	69e3      	ldr	r3, [r4, #28]
   18476:	3b01      	subs	r3, #1
   18478:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1847a:	f386 8811 	msr	BASEPRI, r6
   1847e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   18482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18484:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   18488:	f000 f940 	bl	1870c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1848c:	2800      	cmp	r0, #0
   1848e:	d0ec      	beq.n	1846a <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18490:	682a      	ldr	r2, [r5, #0]
   18492:	2100      	movs	r1, #0
   18494:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18498:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1849a:	f000 f89c 	bl	185d6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1849e:	4631      	mov	r1, r6
   184a0:	4638      	mov	r0, r7
   184a2:	f7f9 f8b7 	bl	11614 <z_reschedule>
			return;
   184a6:	e7ec      	b.n	18482 <k_mem_slab_free+0x32>

000184a8 <setup_thread_stack>:
{
   184a8:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   184aa:	3207      	adds	r2, #7
   184ac:	f022 0207 	bic.w	r2, r2, #7
   184b0:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   184b4:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   184b8:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   184bc:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   184c0:	2200      	movs	r2, #0
   184c2:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   184c6:	18c8      	adds	r0, r1, r3
   184c8:	bc10      	pop	{r4}
   184ca:	4770      	bx	lr

000184cc <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   184cc:	f3ef 8005 	mrs	r0, IPSR
}
   184d0:	3800      	subs	r0, #0
   184d2:	bf18      	it	ne
   184d4:	2001      	movne	r0, #1
   184d6:	4770      	bx	lr

000184d8 <z_impl_k_thread_start>:
{
   184d8:	b508      	push	{r3, lr}
	z_sched_start(thread);
   184da:	f7f9 f9c5 	bl	11868 <z_sched_start>
}
   184de:	bd08      	pop	{r3, pc}

000184e0 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   184e0:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   184e2:	2400      	movs	r4, #0
   184e4:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   184e6:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   184e8:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   184ea:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   184ec:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   184ee:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   184f0:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   184f2:	bc10      	pop	{r4}
   184f4:	4770      	bx	lr

000184f6 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   184f6:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   184f8:	f7eb fca8 	bl	3e4c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   184fc:	f7fc fd02 	bl	14f04 <sys_clock_idle_exit>
}
   18500:	bd08      	pop	{r3, pc}

00018502 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   18502:	b508      	push	{r3, lr}
	__asm__ volatile(
   18504:	f04f 0220 	mov.w	r2, #32
   18508:	f3ef 8311 	mrs	r3, BASEPRI
   1850c:	f382 8812 	msr	BASEPRI_MAX, r2
   18510:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   18514:	f7f8 fef2 	bl	112fc <pm_save_idle>
   18518:	e7f4      	b.n	18504 <idle+0x2>

0001851a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1851a:	4288      	cmp	r0, r1
   1851c:	da00      	bge.n	18520 <new_prio_for_inheritance+0x6>
   1851e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   18520:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   18524:	db01      	blt.n	1852a <new_prio_for_inheritance+0x10>
   18526:	4608      	mov	r0, r1
   18528:	4770      	bx	lr
   1852a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1852e:	4770      	bx	lr

00018530 <adjust_owner_prio>:
{
   18530:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   18532:	6880      	ldr	r0, [r0, #8]
   18534:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18538:	428b      	cmp	r3, r1
   1853a:	d101      	bne.n	18540 <adjust_owner_prio+0x10>
	return false;
   1853c:	2000      	movs	r0, #0
}
   1853e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   18540:	f7f9 f9e0 	bl	11904 <z_set_prio>
   18544:	e7fb      	b.n	1853e <adjust_owner_prio+0xe>

00018546 <z_impl_k_mutex_init>:
{
   18546:	4603      	mov	r3, r0
	mutex->owner = NULL;
   18548:	2000      	movs	r0, #0
   1854a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   1854c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1854e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   18550:	605b      	str	r3, [r3, #4]
}
   18552:	4770      	bx	lr

00018554 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   18554:	b13a      	cbz	r2, 18566 <z_impl_k_sem_init+0x12>
   18556:	428a      	cmp	r2, r1
   18558:	d308      	bcc.n	1856c <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   1855a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1855c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1855e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   18560:	6040      	str	r0, [r0, #4]
	return 0;
   18562:	2000      	movs	r0, #0
   18564:	4770      	bx	lr
		return -EINVAL;
   18566:	f06f 0015 	mvn.w	r0, #21
   1856a:	4770      	bx	lr
   1856c:	f06f 0015 	mvn.w	r0, #21
}
   18570:	4770      	bx	lr

00018572 <thread_active_elsewhere>:
}
   18572:	2000      	movs	r0, #0
   18574:	4770      	bx	lr

00018576 <pended_on_thread>:
}
   18576:	6880      	ldr	r0, [r0, #8]
   18578:	4770      	bx	lr

0001857a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1857a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1857e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   18582:	4283      	cmp	r3, r0
   18584:	d001      	beq.n	1858a <z_sched_prio_cmp+0x10>
		return b2 - b1;
   18586:	1ac0      	subs	r0, r0, r3
   18588:	4770      	bx	lr
	return 0;
   1858a:	2000      	movs	r0, #0
}
   1858c:	4770      	bx	lr

0001858e <z_reschedule_irqlock>:
{
   1858e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18590:	4603      	mov	r3, r0
   18592:	b920      	cbnz	r0, 1859e <z_reschedule_irqlock+0x10>
   18594:	f3ef 8205 	mrs	r2, IPSR
   18598:	b942      	cbnz	r2, 185ac <z_reschedule_irqlock+0x1e>
   1859a:	2201      	movs	r2, #1
   1859c:	e000      	b.n	185a0 <z_reschedule_irqlock+0x12>
   1859e:	2200      	movs	r2, #0
	if (resched(key)) {
   185a0:	b932      	cbnz	r2, 185b0 <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   185a2:	f383 8811 	msr	BASEPRI, r3
   185a6:	f3bf 8f6f 	isb	sy
}
   185aa:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   185ac:	2200      	movs	r2, #0
   185ae:	e7f7      	b.n	185a0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   185b0:	4618      	mov	r0, r3
   185b2:	f7eb fe37 	bl	4224 <arch_swap>
	return ret;
   185b6:	e7f8      	b.n	185aa <z_reschedule_irqlock+0x1c>

000185b8 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   185b8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   185ba:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   185bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   185be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   185c0:	2300      	movs	r3, #0
   185c2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   185c4:	604b      	str	r3, [r1, #4]
}
   185c6:	4770      	bx	lr

000185c8 <z_priq_dumb_best>:
{
   185c8:	4603      	mov	r3, r0
	return list->head == list;
   185ca:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   185cc:	4283      	cmp	r3, r0
   185ce:	d000      	beq.n	185d2 <z_priq_dumb_best+0xa>
}
   185d0:	4770      	bx	lr
	struct k_thread *thread = NULL;
   185d2:	2000      	movs	r0, #0
	return thread;
   185d4:	e7fc      	b.n	185d0 <z_priq_dumb_best+0x8>

000185d6 <z_ready_thread>:
{
   185d6:	b538      	push	{r3, r4, r5, lr}
   185d8:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   185da:	2300      	movs	r3, #0
	__asm__ volatile(
   185dc:	f04f 0220 	mov.w	r2, #32
   185e0:	f3ef 8511 	mrs	r5, BASEPRI
   185e4:	f382 8812 	msr	BASEPRI_MAX, r2
   185e8:	f3bf 8f6f 	isb	sy
   185ec:	e007      	b.n	185fe <z_ready_thread+0x28>
			ready_thread(thread);
   185ee:	4620      	mov	r0, r4
   185f0:	f7f9 f8fa 	bl	117e8 <ready_thread>
	__asm__ volatile(
   185f4:	f385 8811 	msr	BASEPRI, r5
   185f8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   185fc:	2301      	movs	r3, #1
   185fe:	b92b      	cbnz	r3, 1860c <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   18600:	4620      	mov	r0, r4
   18602:	f7ff ffb6 	bl	18572 <thread_active_elsewhere>
   18606:	2800      	cmp	r0, #0
   18608:	d1f4      	bne.n	185f4 <z_ready_thread+0x1e>
   1860a:	e7f0      	b.n	185ee <z_ready_thread+0x18>
}
   1860c:	bd38      	pop	{r3, r4, r5, pc}

0001860e <z_thread_timeout>:
{
   1860e:	b570      	push	{r4, r5, r6, lr}
   18610:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   18612:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   18616:	2300      	movs	r3, #0
	__asm__ volatile(
   18618:	f04f 0220 	mov.w	r2, #32
   1861c:	f3ef 8611 	mrs	r6, BASEPRI
   18620:	f382 8812 	msr	BASEPRI_MAX, r2
   18624:	f3bf 8f6f 	isb	sy
   18628:	e019      	b.n	1865e <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1862a:	4628      	mov	r0, r5
   1862c:	f7ff ffa3 	bl	18576 <pended_on_thread>
   18630:	4629      	mov	r1, r5
   18632:	f7ff ffc1 	bl	185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18636:	7b6b      	ldrb	r3, [r5, #13]
   18638:	f023 0302 	bic.w	r3, r3, #2
   1863c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1863e:	2300      	movs	r3, #0
   18640:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18642:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18646:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   1864a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1864e:	4628      	mov	r0, r5
   18650:	f7f9 f8ca 	bl	117e8 <ready_thread>
	__asm__ volatile(
   18654:	f386 8811 	msr	BASEPRI, r6
   18658:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1865c:	2301      	movs	r3, #1
   1865e:	b94b      	cbnz	r3, 18674 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   18660:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   18664:	f013 0f28 	tst.w	r3, #40	; 0x28
   18668:	d1f4      	bne.n	18654 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   1866a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1866e:	2b00      	cmp	r3, #0
   18670:	d1db      	bne.n	1862a <z_thread_timeout+0x1c>
   18672:	e7e6      	b.n	18642 <z_thread_timeout+0x34>
}
   18674:	bd70      	pop	{r4, r5, r6, pc}

00018676 <add_to_waitq_locked>:
{
   18676:	b570      	push	{r4, r5, r6, lr}
   18678:	4605      	mov	r5, r0
   1867a:	460e      	mov	r6, r1
	unready_thread(thread);
   1867c:	f7f9 f912 	bl	118a4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   18680:	7b6b      	ldrb	r3, [r5, #13]
   18682:	f043 0302 	orr.w	r3, r3, #2
   18686:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   18688:	b1b6      	cbz	r6, 186b8 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   1868a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1868c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1868e:	42a6      	cmp	r6, r4
   18690:	d019      	beq.n	186c6 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18692:	b164      	cbz	r4, 186ae <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18694:	4621      	mov	r1, r4
   18696:	4628      	mov	r0, r5
   18698:	f7ff ff6f 	bl	1857a <z_sched_prio_cmp>
   1869c:	2800      	cmp	r0, #0
   1869e:	dc0c      	bgt.n	186ba <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   186a0:	b12c      	cbz	r4, 186ae <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   186a2:	6873      	ldr	r3, [r6, #4]
   186a4:	429c      	cmp	r4, r3
   186a6:	d002      	beq.n	186ae <add_to_waitq_locked+0x38>
   186a8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   186aa:	2c00      	cmp	r4, #0
   186ac:	d1f1      	bne.n	18692 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   186ae:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   186b0:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   186b2:	606b      	str	r3, [r5, #4]
	tail->next = node;
   186b4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   186b6:	6075      	str	r5, [r6, #4]
}
   186b8:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   186ba:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   186bc:	606b      	str	r3, [r5, #4]
	node->next = successor;
   186be:	602c      	str	r4, [r5, #0]
	prev->next = node;
   186c0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   186c2:	6065      	str	r5, [r4, #4]
}
   186c4:	e7f8      	b.n	186b8 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   186c6:	2400      	movs	r4, #0
   186c8:	e7e3      	b.n	18692 <add_to_waitq_locked+0x1c>

000186ca <pend>:
{
   186ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   186ce:	4605      	mov	r5, r0
   186d0:	460f      	mov	r7, r1
   186d2:	4691      	mov	r9, r2
   186d4:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   186d6:	2400      	movs	r4, #0
	__asm__ volatile(
   186d8:	f04f 0320 	mov.w	r3, #32
   186dc:	f3ef 8611 	mrs	r6, BASEPRI
   186e0:	f383 8812 	msr	BASEPRI_MAX, r3
   186e4:	f3bf 8f6f 	isb	sy
   186e8:	b94c      	cbnz	r4, 186fe <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   186ea:	4639      	mov	r1, r7
   186ec:	4628      	mov	r0, r5
   186ee:	f7ff ffc2 	bl	18676 <add_to_waitq_locked>
	__asm__ volatile(
   186f2:	f386 8811 	msr	BASEPRI, r6
   186f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   186fa:	2401      	movs	r4, #1
   186fc:	e7f4      	b.n	186e8 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   186fe:	464a      	mov	r2, r9
   18700:	4643      	mov	r3, r8
   18702:	4628      	mov	r0, r5
   18704:	f7f8 ff24 	bl	11550 <add_thread_timeout>
}
   18708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001870c <z_unpend_first_thread>:
{
   1870c:	b570      	push	{r4, r5, r6, lr}
   1870e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   18710:	2300      	movs	r3, #0
	__asm__ volatile(
   18712:	f04f 0220 	mov.w	r2, #32
   18716:	f3ef 8511 	mrs	r5, BASEPRI
   1871a:	f382 8812 	msr	BASEPRI_MAX, r2
   1871e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   18722:	461c      	mov	r4, r3
   18724:	e013      	b.n	1874e <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   18726:	f7ff ff26 	bl	18576 <pended_on_thread>
   1872a:	4621      	mov	r1, r4
   1872c:	f7ff ff44 	bl	185b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18730:	7b63      	ldrb	r3, [r4, #13]
   18732:	f023 0302 	bic.w	r3, r3, #2
   18736:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   18738:	2300      	movs	r3, #0
   1873a:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   1873c:	f104 0018 	add.w	r0, r4, #24
   18740:	f000 f826 	bl	18790 <z_abort_timeout>
	__asm__ volatile(
   18744:	f385 8811 	msr	BASEPRI, r5
   18748:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1874c:	2301      	movs	r3, #1
   1874e:	b933      	cbnz	r3, 1875e <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   18750:	4630      	mov	r0, r6
   18752:	f7ff ff39 	bl	185c8 <z_priq_dumb_best>
		if (thread != NULL) {
   18756:	4604      	mov	r4, r0
   18758:	2800      	cmp	r0, #0
   1875a:	d1e4      	bne.n	18726 <z_unpend_first_thread+0x1a>
   1875c:	e7f2      	b.n	18744 <z_unpend_first_thread+0x38>
}
   1875e:	4620      	mov	r0, r4
   18760:	bd70      	pop	{r4, r5, r6, pc}

00018762 <remove_timeout>:
{
   18762:	b538      	push	{r3, r4, r5, lr}
   18764:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   18766:	f7f9 fb03 	bl	11d70 <next>
   1876a:	b148      	cbz	r0, 18780 <remove_timeout+0x1e>
   1876c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1876e:	6920      	ldr	r0, [r4, #16]
   18770:	6965      	ldr	r5, [r4, #20]
   18772:	6913      	ldr	r3, [r2, #16]
   18774:	6951      	ldr	r1, [r2, #20]
   18776:	181b      	adds	r3, r3, r0
   18778:	eb45 0101 	adc.w	r1, r5, r1
   1877c:	6113      	str	r3, [r2, #16]
   1877e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   18780:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   18782:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   18784:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18786:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18788:	2300      	movs	r3, #0
   1878a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1878c:	6063      	str	r3, [r4, #4]
}
   1878e:	bd38      	pop	{r3, r4, r5, pc}

00018790 <z_abort_timeout>:
{
   18790:	b570      	push	{r4, r5, r6, lr}
   18792:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   18794:	2300      	movs	r3, #0
	__asm__ volatile(
   18796:	f04f 0220 	mov.w	r2, #32
   1879a:	f3ef 8611 	mrs	r6, BASEPRI
   1879e:	f382 8812 	msr	BASEPRI_MAX, r2
   187a2:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   187a6:	f06f 0015 	mvn.w	r0, #21
   187aa:	e008      	b.n	187be <z_abort_timeout+0x2e>
			remove_timeout(to);
   187ac:	4620      	mov	r0, r4
   187ae:	f7ff ffd8 	bl	18762 <remove_timeout>
			ret = 0;
   187b2:	4628      	mov	r0, r5
	__asm__ volatile(
   187b4:	f386 8811 	msr	BASEPRI, r6
   187b8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   187bc:	2301      	movs	r3, #1
   187be:	461d      	mov	r5, r3
   187c0:	b91b      	cbnz	r3, 187ca <z_abort_timeout+0x3a>
	return node->next != NULL;
   187c2:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   187c4:	2b00      	cmp	r3, #0
   187c6:	d1f1      	bne.n	187ac <z_abort_timeout+0x1c>
   187c8:	e7f4      	b.n	187b4 <z_abort_timeout+0x24>
}
   187ca:	bd70      	pop	{r4, r5, r6, pc}

000187cc <z_get_next_timeout_expiry>:
{
   187cc:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   187ce:	2300      	movs	r3, #0
	__asm__ volatile(
   187d0:	f04f 0220 	mov.w	r2, #32
   187d4:	f3ef 8411 	mrs	r4, BASEPRI
   187d8:	f382 8812 	msr	BASEPRI_MAX, r2
   187dc:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   187e0:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   187e4:	b93b      	cbnz	r3, 187f6 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   187e6:	f7f9 fadb 	bl	11da0 <next_timeout>
	__asm__ volatile(
   187ea:	f384 8811 	msr	BASEPRI, r4
   187ee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   187f2:	2301      	movs	r3, #1
   187f4:	e7f6      	b.n	187e4 <z_get_next_timeout_expiry+0x18>
}
   187f6:	bd10      	pop	{r4, pc}

000187f8 <z_set_timeout_expiry>:
{
   187f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187fa:	4606      	mov	r6, r0
   187fc:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   187fe:	2300      	movs	r3, #0
	__asm__ volatile(
   18800:	f04f 0220 	mov.w	r2, #32
   18804:	f3ef 8511 	mrs	r5, BASEPRI
   18808:	f382 8812 	msr	BASEPRI_MAX, r2
   1880c:	f3bf 8f6f 	isb	sy
   18810:	e00a      	b.n	18828 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   18812:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   18814:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   18818:	2801      	cmp	r0, #1
   1881a:	dd00      	ble.n	1881e <z_set_timeout_expiry+0x26>
   1881c:	b97c      	cbnz	r4, 1883e <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1881e:	f385 8811 	msr	BASEPRI, r5
   18822:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   18826:	2301      	movs	r3, #1
   18828:	461c      	mov	r4, r3
   1882a:	b97b      	cbnz	r3, 1884c <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1882c:	f7f9 fab8 	bl	11da0 <next_timeout>
			      || (ticks <= next_to);
   18830:	f1b0 3fff 	cmp.w	r0, #4294967295
   18834:	d0ed      	beq.n	18812 <z_set_timeout_expiry+0x1a>
   18836:	42b0      	cmp	r0, r6
   18838:	dbec      	blt.n	18814 <z_set_timeout_expiry+0x1c>
   1883a:	2401      	movs	r4, #1
   1883c:	e7ea      	b.n	18814 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1883e:	4639      	mov	r1, r7
   18840:	42b0      	cmp	r0, r6
   18842:	bfa8      	it	ge
   18844:	4630      	movge	r0, r6
   18846:	f7ed f929 	bl	5a9c <sys_clock_set_timeout>
   1884a:	e7e8      	b.n	1881e <z_set_timeout_expiry+0x26>
}
   1884c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001884e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1884e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   18850:	f7f9 fbd8 	bl	12004 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   18854:	bd08      	pop	{r3, pc}

00018856 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   18856:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   18858:	f7f9 fbd4 	bl	12004 <sys_clock_tick_get>
}
   1885c:	bd08      	pop	{r3, pc}

0001885e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1885e:	b900      	cbnz	r0, 18862 <z_impl_k_busy_wait+0x4>
   18860:	4770      	bx	lr
{
   18862:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   18864:	f7ec f88e 	bl	4984 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   18868:	bd08      	pop	{r3, pc}

0001886a <k_heap_init>:
{
   1886a:	b510      	push	{r4, lr}
   1886c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   18870:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   18872:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   18874:	f7fb fc92 	bl	1419c <sys_heap_init>
}
   18878:	bd10      	pop	{r4, pc}

0001887a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1887a:	4770      	bx	lr

0001887c <_ZdlPv>:
   1887c:	f7fa b83e 	b.w	128fc <free>

00018880 <_ZdaPv>:
   18880:	f7ff bffc 	b.w	1887c <_ZdlPv>

00018884 <_Znwj>:
   18884:	2801      	cmp	r0, #1
   18886:	bf38      	it	cc
   18888:	2001      	movcc	r0, #1
   1888a:	b510      	push	{r4, lr}
   1888c:	4604      	mov	r4, r0
   1888e:	4620      	mov	r0, r4
   18890:	f7fa f82c 	bl	128ec <malloc>
   18894:	b930      	cbnz	r0, 188a4 <_Znwj+0x20>
   18896:	f7f9 fdd5 	bl	12444 <_ZSt15get_new_handlerv>
   1889a:	b908      	cbnz	r0, 188a0 <_Znwj+0x1c>
   1889c:	f000 f805 	bl	188aa <abort>
   188a0:	4780      	blx	r0
   188a2:	e7f4      	b.n	1888e <_Znwj+0xa>
   188a4:	bd10      	pop	{r4, pc}

000188a6 <_Znaj>:
   188a6:	f7ff bfed 	b.w	18884 <_Znwj>

000188aa <abort>:
   188aa:	b508      	push	{r3, lr}
   188ac:	2006      	movs	r0, #6
   188ae:	f7fa fd65 	bl	1337c <raise>
   188b2:	2001      	movs	r0, #1
   188b4:	f7ec f818 	bl	48e8 <_exit>

000188b8 <atoi>:
   188b8:	220a      	movs	r2, #10
   188ba:	2100      	movs	r1, #0
   188bc:	f7fa be1c 	b.w	134f8 <strtol>

000188c0 <memcmp>:
   188c0:	b530      	push	{r4, r5, lr}
   188c2:	3901      	subs	r1, #1
   188c4:	2400      	movs	r4, #0
   188c6:	42a2      	cmp	r2, r4
   188c8:	d101      	bne.n	188ce <memcmp+0xe>
   188ca:	2000      	movs	r0, #0
   188cc:	e005      	b.n	188da <memcmp+0x1a>
   188ce:	5d03      	ldrb	r3, [r0, r4]
   188d0:	3401      	adds	r4, #1
   188d2:	5d0d      	ldrb	r5, [r1, r4]
   188d4:	42ab      	cmp	r3, r5
   188d6:	d0f6      	beq.n	188c6 <memcmp+0x6>
   188d8:	1b58      	subs	r0, r3, r5
   188da:	bd30      	pop	{r4, r5, pc}

000188dc <memcpy>:
   188dc:	440a      	add	r2, r1
   188de:	4291      	cmp	r1, r2
   188e0:	f100 33ff 	add.w	r3, r0, #4294967295
   188e4:	d100      	bne.n	188e8 <memcpy+0xc>
   188e6:	4770      	bx	lr
   188e8:	b510      	push	{r4, lr}
   188ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   188ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   188f2:	4291      	cmp	r1, r2
   188f4:	d1f9      	bne.n	188ea <memcpy+0xe>
   188f6:	bd10      	pop	{r4, pc}

000188f8 <memset>:
   188f8:	4402      	add	r2, r0
   188fa:	4603      	mov	r3, r0
   188fc:	4293      	cmp	r3, r2
   188fe:	d100      	bne.n	18902 <memset+0xa>
   18900:	4770      	bx	lr
   18902:	f803 1b01 	strb.w	r1, [r3], #1
   18906:	e7f9      	b.n	188fc <memset+0x4>

00018908 <__sfputc_r>:
   18908:	6893      	ldr	r3, [r2, #8]
   1890a:	3b01      	subs	r3, #1
   1890c:	2b00      	cmp	r3, #0
   1890e:	b410      	push	{r4}
   18910:	6093      	str	r3, [r2, #8]
   18912:	da07      	bge.n	18924 <__sfputc_r+0x1c>
   18914:	6994      	ldr	r4, [r2, #24]
   18916:	42a3      	cmp	r3, r4
   18918:	db01      	blt.n	1891e <__sfputc_r+0x16>
   1891a:	290a      	cmp	r1, #10
   1891c:	d102      	bne.n	18924 <__sfputc_r+0x1c>
   1891e:	bc10      	pop	{r4}
   18920:	f7fa be0a 	b.w	13538 <__swbuf_r>
   18924:	6813      	ldr	r3, [r2, #0]
   18926:	1c58      	adds	r0, r3, #1
   18928:	6010      	str	r0, [r2, #0]
   1892a:	7019      	strb	r1, [r3, #0]
   1892c:	4608      	mov	r0, r1
   1892e:	bc10      	pop	{r4}
   18930:	4770      	bx	lr

00018932 <__sfputs_r>:
   18932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18934:	4606      	mov	r6, r0
   18936:	460f      	mov	r7, r1
   18938:	4614      	mov	r4, r2
   1893a:	18d5      	adds	r5, r2, r3
   1893c:	42ac      	cmp	r4, r5
   1893e:	d101      	bne.n	18944 <__sfputs_r+0x12>
   18940:	2000      	movs	r0, #0
   18942:	e007      	b.n	18954 <__sfputs_r+0x22>
   18944:	f814 1b01 	ldrb.w	r1, [r4], #1
   18948:	463a      	mov	r2, r7
   1894a:	4630      	mov	r0, r6
   1894c:	f7ff ffdc 	bl	18908 <__sfputc_r>
   18950:	1c43      	adds	r3, r0, #1
   18952:	d1f3      	bne.n	1893c <__sfputs_r+0xa>
   18954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018956 <__cvt>:
   18956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1895a:	b088      	sub	sp, #32
   1895c:	2b00      	cmp	r3, #0
   1895e:	461f      	mov	r7, r3
   18960:	4614      	mov	r4, r2
   18962:	bfb8      	it	lt
   18964:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   18968:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1896a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1896c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   18970:	bfb6      	itet	lt
   18972:	461f      	movlt	r7, r3
   18974:	2300      	movge	r3, #0
   18976:	232d      	movlt	r3, #45	; 0x2d
   18978:	7013      	strb	r3, [r2, #0]
   1897a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1897c:	f023 0820 	bic.w	r8, r3, #32
   18980:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   18984:	d005      	beq.n	18992 <__cvt+0x3c>
   18986:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   1898a:	d100      	bne.n	1898e <__cvt+0x38>
   1898c:	3501      	adds	r5, #1
   1898e:	2302      	movs	r3, #2
   18990:	e000      	b.n	18994 <__cvt+0x3e>
   18992:	2303      	movs	r3, #3
   18994:	aa07      	add	r2, sp, #28
   18996:	9204      	str	r2, [sp, #16]
   18998:	aa06      	add	r2, sp, #24
   1899a:	e9cd a202 	strd	sl, r2, [sp, #8]
   1899e:	e9cd 3500 	strd	r3, r5, [sp]
   189a2:	4622      	mov	r2, r4
   189a4:	463b      	mov	r3, r7
   189a6:	f7e9 f85b 	bl	1a60 <_dtoa_r>
   189aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   189ae:	4606      	mov	r6, r0
   189b0:	d102      	bne.n	189b8 <__cvt+0x62>
   189b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   189b4:	07db      	lsls	r3, r3, #31
   189b6:	d522      	bpl.n	189fe <__cvt+0xa8>
   189b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   189bc:	eb06 0905 	add.w	r9, r6, r5
   189c0:	d110      	bne.n	189e4 <__cvt+0x8e>
   189c2:	7833      	ldrb	r3, [r6, #0]
   189c4:	2b30      	cmp	r3, #48	; 0x30
   189c6:	d10a      	bne.n	189de <__cvt+0x88>
   189c8:	2200      	movs	r2, #0
   189ca:	2300      	movs	r3, #0
   189cc:	4620      	mov	r0, r4
   189ce:	4639      	mov	r1, r7
   189d0:	f7e8 f80a 	bl	9e8 <__aeabi_dcmpeq>
   189d4:	b918      	cbnz	r0, 189de <__cvt+0x88>
   189d6:	f1c5 0501 	rsb	r5, r5, #1
   189da:	f8ca 5000 	str.w	r5, [sl]
   189de:	f8da 3000 	ldr.w	r3, [sl]
   189e2:	4499      	add	r9, r3
   189e4:	2200      	movs	r2, #0
   189e6:	2300      	movs	r3, #0
   189e8:	4620      	mov	r0, r4
   189ea:	4639      	mov	r1, r7
   189ec:	f7e7 fffc 	bl	9e8 <__aeabi_dcmpeq>
   189f0:	b108      	cbz	r0, 189f6 <__cvt+0xa0>
   189f2:	f8cd 901c 	str.w	r9, [sp, #28]
   189f6:	2230      	movs	r2, #48	; 0x30
   189f8:	9b07      	ldr	r3, [sp, #28]
   189fa:	454b      	cmp	r3, r9
   189fc:	d307      	bcc.n	18a0e <__cvt+0xb8>
   189fe:	9b07      	ldr	r3, [sp, #28]
   18a00:	9a15      	ldr	r2, [sp, #84]	; 0x54
   18a02:	1b9b      	subs	r3, r3, r6
   18a04:	4630      	mov	r0, r6
   18a06:	6013      	str	r3, [r2, #0]
   18a08:	b008      	add	sp, #32
   18a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18a0e:	1c59      	adds	r1, r3, #1
   18a10:	9107      	str	r1, [sp, #28]
   18a12:	701a      	strb	r2, [r3, #0]
   18a14:	e7f0      	b.n	189f8 <__cvt+0xa2>

00018a16 <__exponent>:
   18a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18a18:	4603      	mov	r3, r0
   18a1a:	2900      	cmp	r1, #0
   18a1c:	bfb8      	it	lt
   18a1e:	4249      	neglt	r1, r1
   18a20:	f803 2b02 	strb.w	r2, [r3], #2
   18a24:	bfb4      	ite	lt
   18a26:	222d      	movlt	r2, #45	; 0x2d
   18a28:	222b      	movge	r2, #43	; 0x2b
   18a2a:	2909      	cmp	r1, #9
   18a2c:	7042      	strb	r2, [r0, #1]
   18a2e:	dd2a      	ble.n	18a86 <__exponent+0x70>
   18a30:	f10d 0407 	add.w	r4, sp, #7
   18a34:	46a4      	mov	ip, r4
   18a36:	270a      	movs	r7, #10
   18a38:	46a6      	mov	lr, r4
   18a3a:	460a      	mov	r2, r1
   18a3c:	fb91 f6f7 	sdiv	r6, r1, r7
   18a40:	fb07 1516 	mls	r5, r7, r6, r1
   18a44:	3530      	adds	r5, #48	; 0x30
   18a46:	2a63      	cmp	r2, #99	; 0x63
   18a48:	f104 34ff 	add.w	r4, r4, #4294967295
   18a4c:	f80e 5c01 	strb.w	r5, [lr, #-1]
   18a50:	4631      	mov	r1, r6
   18a52:	dcf1      	bgt.n	18a38 <__exponent+0x22>
   18a54:	3130      	adds	r1, #48	; 0x30
   18a56:	f1ae 0502 	sub.w	r5, lr, #2
   18a5a:	f804 1c01 	strb.w	r1, [r4, #-1]
   18a5e:	1c44      	adds	r4, r0, #1
   18a60:	4629      	mov	r1, r5
   18a62:	4561      	cmp	r1, ip
   18a64:	d30a      	bcc.n	18a7c <__exponent+0x66>
   18a66:	f10d 0209 	add.w	r2, sp, #9
   18a6a:	eba2 020e 	sub.w	r2, r2, lr
   18a6e:	4565      	cmp	r5, ip
   18a70:	bf88      	it	hi
   18a72:	2200      	movhi	r2, #0
   18a74:	4413      	add	r3, r2
   18a76:	1a18      	subs	r0, r3, r0
   18a78:	b003      	add	sp, #12
   18a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a7c:	f811 2b01 	ldrb.w	r2, [r1], #1
   18a80:	f804 2f01 	strb.w	r2, [r4, #1]!
   18a84:	e7ed      	b.n	18a62 <__exponent+0x4c>
   18a86:	2330      	movs	r3, #48	; 0x30
   18a88:	3130      	adds	r1, #48	; 0x30
   18a8a:	7083      	strb	r3, [r0, #2]
   18a8c:	70c1      	strb	r1, [r0, #3]
   18a8e:	1d03      	adds	r3, r0, #4
   18a90:	e7f1      	b.n	18a76 <__exponent+0x60>

00018a92 <_printf_common>:
   18a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a96:	4616      	mov	r6, r2
   18a98:	4699      	mov	r9, r3
   18a9a:	688a      	ldr	r2, [r1, #8]
   18a9c:	690b      	ldr	r3, [r1, #16]
   18a9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   18aa2:	4293      	cmp	r3, r2
   18aa4:	bfb8      	it	lt
   18aa6:	4613      	movlt	r3, r2
   18aa8:	6033      	str	r3, [r6, #0]
   18aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   18aae:	4607      	mov	r7, r0
   18ab0:	460c      	mov	r4, r1
   18ab2:	b10a      	cbz	r2, 18ab8 <_printf_common+0x26>
   18ab4:	3301      	adds	r3, #1
   18ab6:	6033      	str	r3, [r6, #0]
   18ab8:	6823      	ldr	r3, [r4, #0]
   18aba:	0699      	lsls	r1, r3, #26
   18abc:	bf42      	ittt	mi
   18abe:	6833      	ldrmi	r3, [r6, #0]
   18ac0:	3302      	addmi	r3, #2
   18ac2:	6033      	strmi	r3, [r6, #0]
   18ac4:	6825      	ldr	r5, [r4, #0]
   18ac6:	f015 0506 	ands.w	r5, r5, #6
   18aca:	d106      	bne.n	18ada <_printf_common+0x48>
   18acc:	f104 0a19 	add.w	sl, r4, #25
   18ad0:	68e3      	ldr	r3, [r4, #12]
   18ad2:	6832      	ldr	r2, [r6, #0]
   18ad4:	1a9b      	subs	r3, r3, r2
   18ad6:	42ab      	cmp	r3, r5
   18ad8:	dc26      	bgt.n	18b28 <_printf_common+0x96>
   18ada:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   18ade:	1e13      	subs	r3, r2, #0
   18ae0:	6822      	ldr	r2, [r4, #0]
   18ae2:	bf18      	it	ne
   18ae4:	2301      	movne	r3, #1
   18ae6:	0692      	lsls	r2, r2, #26
   18ae8:	d42b      	bmi.n	18b42 <_printf_common+0xb0>
   18aea:	f104 0243 	add.w	r2, r4, #67	; 0x43
   18aee:	4649      	mov	r1, r9
   18af0:	4638      	mov	r0, r7
   18af2:	47c0      	blx	r8
   18af4:	3001      	adds	r0, #1
   18af6:	d01e      	beq.n	18b36 <_printf_common+0xa4>
   18af8:	6823      	ldr	r3, [r4, #0]
   18afa:	68e5      	ldr	r5, [r4, #12]
   18afc:	6832      	ldr	r2, [r6, #0]
   18afe:	f003 0306 	and.w	r3, r3, #6
   18b02:	2b04      	cmp	r3, #4
   18b04:	bf08      	it	eq
   18b06:	1aad      	subeq	r5, r5, r2
   18b08:	68a3      	ldr	r3, [r4, #8]
   18b0a:	6922      	ldr	r2, [r4, #16]
   18b0c:	bf0c      	ite	eq
   18b0e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   18b12:	2500      	movne	r5, #0
   18b14:	4293      	cmp	r3, r2
   18b16:	bfc4      	itt	gt
   18b18:	1a9b      	subgt	r3, r3, r2
   18b1a:	18ed      	addgt	r5, r5, r3
   18b1c:	2600      	movs	r6, #0
   18b1e:	341a      	adds	r4, #26
   18b20:	42b5      	cmp	r5, r6
   18b22:	d11a      	bne.n	18b5a <_printf_common+0xc8>
   18b24:	2000      	movs	r0, #0
   18b26:	e008      	b.n	18b3a <_printf_common+0xa8>
   18b28:	2301      	movs	r3, #1
   18b2a:	4652      	mov	r2, sl
   18b2c:	4649      	mov	r1, r9
   18b2e:	4638      	mov	r0, r7
   18b30:	47c0      	blx	r8
   18b32:	3001      	adds	r0, #1
   18b34:	d103      	bne.n	18b3e <_printf_common+0xac>
   18b36:	f04f 30ff 	mov.w	r0, #4294967295
   18b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18b3e:	3501      	adds	r5, #1
   18b40:	e7c6      	b.n	18ad0 <_printf_common+0x3e>
   18b42:	18e1      	adds	r1, r4, r3
   18b44:	1c5a      	adds	r2, r3, #1
   18b46:	2030      	movs	r0, #48	; 0x30
   18b48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   18b4c:	4422      	add	r2, r4
   18b4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   18b52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   18b56:	3302      	adds	r3, #2
   18b58:	e7c7      	b.n	18aea <_printf_common+0x58>
   18b5a:	2301      	movs	r3, #1
   18b5c:	4622      	mov	r2, r4
   18b5e:	4649      	mov	r1, r9
   18b60:	4638      	mov	r0, r7
   18b62:	47c0      	blx	r8
   18b64:	3001      	adds	r0, #1
   18b66:	d0e6      	beq.n	18b36 <_printf_common+0xa4>
   18b68:	3601      	adds	r6, #1
   18b6a:	e7d9      	b.n	18b20 <_printf_common+0x8e>

00018b6c <_raise_r>:
   18b6c:	291f      	cmp	r1, #31
   18b6e:	b538      	push	{r3, r4, r5, lr}
   18b70:	4604      	mov	r4, r0
   18b72:	460d      	mov	r5, r1
   18b74:	d904      	bls.n	18b80 <_raise_r+0x14>
   18b76:	2316      	movs	r3, #22
   18b78:	6003      	str	r3, [r0, #0]
   18b7a:	f04f 30ff 	mov.w	r0, #4294967295
   18b7e:	bd38      	pop	{r3, r4, r5, pc}
   18b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18b82:	b112      	cbz	r2, 18b8a <_raise_r+0x1e>
   18b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   18b88:	b94b      	cbnz	r3, 18b9e <_raise_r+0x32>
   18b8a:	4620      	mov	r0, r4
   18b8c:	f000 f816 	bl	18bbc <_getpid_r>
   18b90:	462a      	mov	r2, r5
   18b92:	4601      	mov	r1, r0
   18b94:	4620      	mov	r0, r4
   18b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18b9a:	f7fa bbf7 	b.w	1338c <_kill_r>
   18b9e:	2b01      	cmp	r3, #1
   18ba0:	d00a      	beq.n	18bb8 <_raise_r+0x4c>
   18ba2:	1c59      	adds	r1, r3, #1
   18ba4:	d103      	bne.n	18bae <_raise_r+0x42>
   18ba6:	2316      	movs	r3, #22
   18ba8:	6003      	str	r3, [r0, #0]
   18baa:	2001      	movs	r0, #1
   18bac:	e7e7      	b.n	18b7e <_raise_r+0x12>
   18bae:	2400      	movs	r4, #0
   18bb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   18bb4:	4628      	mov	r0, r5
   18bb6:	4798      	blx	r3
   18bb8:	2000      	movs	r0, #0
   18bba:	e7e0      	b.n	18b7e <_raise_r+0x12>

00018bbc <_getpid_r>:
   18bbc:	f7fb bdf7 	b.w	147ae <_getpid>

00018bc0 <strncmp>:
   18bc0:	b510      	push	{r4, lr}
   18bc2:	b16a      	cbz	r2, 18be0 <strncmp+0x20>
   18bc4:	3901      	subs	r1, #1
   18bc6:	1884      	adds	r4, r0, r2
   18bc8:	f810 3b01 	ldrb.w	r3, [r0], #1
   18bcc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   18bd0:	4293      	cmp	r3, r2
   18bd2:	d103      	bne.n	18bdc <strncmp+0x1c>
   18bd4:	42a0      	cmp	r0, r4
   18bd6:	d001      	beq.n	18bdc <strncmp+0x1c>
   18bd8:	2b00      	cmp	r3, #0
   18bda:	d1f5      	bne.n	18bc8 <strncmp+0x8>
   18bdc:	1a98      	subs	r0, r3, r2
   18bde:	bd10      	pop	{r4, pc}
   18be0:	4610      	mov	r0, r2
   18be2:	e7fc      	b.n	18bde <strncmp+0x1e>

00018be4 <strncpy>:
   18be4:	b510      	push	{r4, lr}
   18be6:	3901      	subs	r1, #1
   18be8:	4603      	mov	r3, r0
   18bea:	b132      	cbz	r2, 18bfa <strncpy+0x16>
   18bec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18bf0:	f803 4b01 	strb.w	r4, [r3], #1
   18bf4:	3a01      	subs	r2, #1
   18bf6:	2c00      	cmp	r4, #0
   18bf8:	d1f7      	bne.n	18bea <strncpy+0x6>
   18bfa:	441a      	add	r2, r3
   18bfc:	2100      	movs	r1, #0
   18bfe:	4293      	cmp	r3, r2
   18c00:	d100      	bne.n	18c04 <strncpy+0x20>
   18c02:	bd10      	pop	{r4, pc}
   18c04:	f803 1b01 	strb.w	r1, [r3], #1
   18c08:	e7f9      	b.n	18bfe <strncpy+0x1a>

00018c0a <strnlen>:
   18c0a:	b510      	push	{r4, lr}
   18c0c:	4602      	mov	r2, r0
   18c0e:	4401      	add	r1, r0
   18c10:	428a      	cmp	r2, r1
   18c12:	4613      	mov	r3, r2
   18c14:	d101      	bne.n	18c1a <strnlen+0x10>
   18c16:	1a18      	subs	r0, r3, r0
   18c18:	bd10      	pop	{r4, pc}
   18c1a:	781c      	ldrb	r4, [r3, #0]
   18c1c:	3201      	adds	r2, #1
   18c1e:	2c00      	cmp	r4, #0
   18c20:	d1f6      	bne.n	18c10 <strnlen+0x6>
   18c22:	e7f8      	b.n	18c16 <strnlen+0xc>

00018c24 <__strtok_r>:
   18c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c26:	b908      	cbnz	r0, 18c2c <__strtok_r+0x8>
   18c28:	6810      	ldr	r0, [r2, #0]
   18c2a:	b188      	cbz	r0, 18c50 <__strtok_r+0x2c>
   18c2c:	4604      	mov	r4, r0
   18c2e:	4620      	mov	r0, r4
   18c30:	f814 5b01 	ldrb.w	r5, [r4], #1
   18c34:	460f      	mov	r7, r1
   18c36:	f817 6b01 	ldrb.w	r6, [r7], #1
   18c3a:	b91e      	cbnz	r6, 18c44 <__strtok_r+0x20>
   18c3c:	b965      	cbnz	r5, 18c58 <__strtok_r+0x34>
   18c3e:	6015      	str	r5, [r2, #0]
   18c40:	4628      	mov	r0, r5
   18c42:	e005      	b.n	18c50 <__strtok_r+0x2c>
   18c44:	42b5      	cmp	r5, r6
   18c46:	d1f6      	bne.n	18c36 <__strtok_r+0x12>
   18c48:	2b00      	cmp	r3, #0
   18c4a:	d1f0      	bne.n	18c2e <__strtok_r+0xa>
   18c4c:	6014      	str	r4, [r2, #0]
   18c4e:	7003      	strb	r3, [r0, #0]
   18c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c52:	461c      	mov	r4, r3
   18c54:	e00c      	b.n	18c70 <__strtok_r+0x4c>
   18c56:	b915      	cbnz	r5, 18c5e <__strtok_r+0x3a>
   18c58:	f814 3b01 	ldrb.w	r3, [r4], #1
   18c5c:	460e      	mov	r6, r1
   18c5e:	f816 5b01 	ldrb.w	r5, [r6], #1
   18c62:	42ab      	cmp	r3, r5
   18c64:	d1f7      	bne.n	18c56 <__strtok_r+0x32>
   18c66:	2b00      	cmp	r3, #0
   18c68:	d0f3      	beq.n	18c52 <__strtok_r+0x2e>
   18c6a:	2300      	movs	r3, #0
   18c6c:	f804 3c01 	strb.w	r3, [r4, #-1]
   18c70:	6014      	str	r4, [r2, #0]
   18c72:	e7ed      	b.n	18c50 <__strtok_r+0x2c>

00018c74 <quorem>:
   18c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c78:	6903      	ldr	r3, [r0, #16]
   18c7a:	690c      	ldr	r4, [r1, #16]
   18c7c:	42a3      	cmp	r3, r4
   18c7e:	4607      	mov	r7, r0
   18c80:	f2c0 8081 	blt.w	18d86 <quorem+0x112>
   18c84:	3c01      	subs	r4, #1
   18c86:	f101 0814 	add.w	r8, r1, #20
   18c8a:	f100 0514 	add.w	r5, r0, #20
   18c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   18c92:	9301      	str	r3, [sp, #4]
   18c94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   18c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   18c9c:	3301      	adds	r3, #1
   18c9e:	429a      	cmp	r2, r3
   18ca0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   18ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   18ca8:	fbb2 f6f3 	udiv	r6, r2, r3
   18cac:	d331      	bcc.n	18d12 <quorem+0x9e>
   18cae:	f04f 0e00 	mov.w	lr, #0
   18cb2:	4640      	mov	r0, r8
   18cb4:	46ac      	mov	ip, r5
   18cb6:	46f2      	mov	sl, lr
   18cb8:	f850 2b04 	ldr.w	r2, [r0], #4
   18cbc:	b293      	uxth	r3, r2
   18cbe:	fb06 e303 	mla	r3, r6, r3, lr
   18cc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   18cc6:	b29b      	uxth	r3, r3
   18cc8:	ebaa 0303 	sub.w	r3, sl, r3
   18ccc:	0c12      	lsrs	r2, r2, #16
   18cce:	f8dc a000 	ldr.w	sl, [ip]
   18cd2:	fb06 e202 	mla	r2, r6, r2, lr
   18cd6:	fa13 f38a 	uxtah	r3, r3, sl
   18cda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   18cde:	fa1f fa82 	uxth.w	sl, r2
   18ce2:	f8dc 2000 	ldr.w	r2, [ip]
   18ce6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   18cea:	eb02 4223 	add.w	r2, r2, r3, asr #16
   18cee:	b29b      	uxth	r3, r3
   18cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   18cf4:	4581      	cmp	r9, r0
   18cf6:	f84c 3b04 	str.w	r3, [ip], #4
   18cfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
   18cfe:	d2db      	bcs.n	18cb8 <quorem+0x44>
   18d00:	f855 300b 	ldr.w	r3, [r5, fp]
   18d04:	b92b      	cbnz	r3, 18d12 <quorem+0x9e>
   18d06:	9b01      	ldr	r3, [sp, #4]
   18d08:	3b04      	subs	r3, #4
   18d0a:	429d      	cmp	r5, r3
   18d0c:	461a      	mov	r2, r3
   18d0e:	d32e      	bcc.n	18d6e <quorem+0xfa>
   18d10:	613c      	str	r4, [r7, #16]
   18d12:	4638      	mov	r0, r7
   18d14:	f000 fa6d 	bl	191f2 <__mcmp>
   18d18:	2800      	cmp	r0, #0
   18d1a:	db24      	blt.n	18d66 <quorem+0xf2>
   18d1c:	3601      	adds	r6, #1
   18d1e:	4628      	mov	r0, r5
   18d20:	f04f 0c00 	mov.w	ip, #0
   18d24:	f858 2b04 	ldr.w	r2, [r8], #4
   18d28:	f8d0 e000 	ldr.w	lr, [r0]
   18d2c:	b293      	uxth	r3, r2
   18d2e:	ebac 0303 	sub.w	r3, ip, r3
   18d32:	0c12      	lsrs	r2, r2, #16
   18d34:	fa13 f38e 	uxtah	r3, r3, lr
   18d38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   18d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   18d40:	b29b      	uxth	r3, r3
   18d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   18d46:	45c1      	cmp	r9, r8
   18d48:	f840 3b04 	str.w	r3, [r0], #4
   18d4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
   18d50:	d2e8      	bcs.n	18d24 <quorem+0xb0>
   18d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   18d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   18d5a:	b922      	cbnz	r2, 18d66 <quorem+0xf2>
   18d5c:	3b04      	subs	r3, #4
   18d5e:	429d      	cmp	r5, r3
   18d60:	461a      	mov	r2, r3
   18d62:	d30a      	bcc.n	18d7a <quorem+0x106>
   18d64:	613c      	str	r4, [r7, #16]
   18d66:	4630      	mov	r0, r6
   18d68:	b003      	add	sp, #12
   18d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d6e:	6812      	ldr	r2, [r2, #0]
   18d70:	3b04      	subs	r3, #4
   18d72:	2a00      	cmp	r2, #0
   18d74:	d1cc      	bne.n	18d10 <quorem+0x9c>
   18d76:	3c01      	subs	r4, #1
   18d78:	e7c7      	b.n	18d0a <quorem+0x96>
   18d7a:	6812      	ldr	r2, [r2, #0]
   18d7c:	3b04      	subs	r3, #4
   18d7e:	2a00      	cmp	r2, #0
   18d80:	d1f0      	bne.n	18d64 <quorem+0xf0>
   18d82:	3c01      	subs	r4, #1
   18d84:	e7eb      	b.n	18d5e <quorem+0xea>
   18d86:	2000      	movs	r0, #0
   18d88:	e7ee      	b.n	18d68 <quorem+0xf4>

00018d8a <__sfmoreglue>:
   18d8a:	b570      	push	{r4, r5, r6, lr}
   18d8c:	1e4a      	subs	r2, r1, #1
   18d8e:	2568      	movs	r5, #104	; 0x68
   18d90:	4355      	muls	r5, r2
   18d92:	460e      	mov	r6, r1
   18d94:	f105 0174 	add.w	r1, r5, #116	; 0x74
   18d98:	f7f9 fe06 	bl	129a8 <_malloc_r>
   18d9c:	4604      	mov	r4, r0
   18d9e:	b140      	cbz	r0, 18db2 <__sfmoreglue+0x28>
   18da0:	2100      	movs	r1, #0
   18da2:	e9c0 1600 	strd	r1, r6, [r0]
   18da6:	300c      	adds	r0, #12
   18da8:	60a0      	str	r0, [r4, #8]
   18daa:	f105 0268 	add.w	r2, r5, #104	; 0x68
   18dae:	f7ff fda3 	bl	188f8 <memset>
   18db2:	4620      	mov	r0, r4
   18db4:	bd70      	pop	{r4, r5, r6, pc}

00018db6 <_fwalk_reent>:
   18db6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18dba:	4606      	mov	r6, r0
   18dbc:	4688      	mov	r8, r1
   18dbe:	f100 0448 	add.w	r4, r0, #72	; 0x48
   18dc2:	2700      	movs	r7, #0
   18dc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   18dc8:	f1b9 0901 	subs.w	r9, r9, #1
   18dcc:	d505      	bpl.n	18dda <_fwalk_reent+0x24>
   18dce:	6824      	ldr	r4, [r4, #0]
   18dd0:	2c00      	cmp	r4, #0
   18dd2:	d1f7      	bne.n	18dc4 <_fwalk_reent+0xe>
   18dd4:	4638      	mov	r0, r7
   18dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18dda:	89ab      	ldrh	r3, [r5, #12]
   18ddc:	2b01      	cmp	r3, #1
   18dde:	d907      	bls.n	18df0 <_fwalk_reent+0x3a>
   18de0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   18de4:	3301      	adds	r3, #1
   18de6:	d003      	beq.n	18df0 <_fwalk_reent+0x3a>
   18de8:	4629      	mov	r1, r5
   18dea:	4630      	mov	r0, r6
   18dec:	47c0      	blx	r8
   18dee:	4307      	orrs	r7, r0
   18df0:	3568      	adds	r5, #104	; 0x68
   18df2:	e7e9      	b.n	18dc8 <_fwalk_reent+0x12>

00018df4 <__swhatbuf_r>:
   18df4:	b570      	push	{r4, r5, r6, lr}
   18df6:	460e      	mov	r6, r1
   18df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   18dfc:	2900      	cmp	r1, #0
   18dfe:	b096      	sub	sp, #88	; 0x58
   18e00:	4614      	mov	r4, r2
   18e02:	461d      	mov	r5, r3
   18e04:	da07      	bge.n	18e16 <__swhatbuf_r+0x22>
   18e06:	2300      	movs	r3, #0
   18e08:	602b      	str	r3, [r5, #0]
   18e0a:	89b3      	ldrh	r3, [r6, #12]
   18e0c:	061a      	lsls	r2, r3, #24
   18e0e:	d410      	bmi.n	18e32 <__swhatbuf_r+0x3e>
   18e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18e14:	e00e      	b.n	18e34 <__swhatbuf_r+0x40>
   18e16:	466a      	mov	r2, sp
   18e18:	f7fa fe90 	bl	13b3c <_fstat_r>
   18e1c:	2800      	cmp	r0, #0
   18e1e:	dbf2      	blt.n	18e06 <__swhatbuf_r+0x12>
   18e20:	9a01      	ldr	r2, [sp, #4]
   18e22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   18e26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   18e2a:	425a      	negs	r2, r3
   18e2c:	415a      	adcs	r2, r3
   18e2e:	602a      	str	r2, [r5, #0]
   18e30:	e7ee      	b.n	18e10 <__swhatbuf_r+0x1c>
   18e32:	2340      	movs	r3, #64	; 0x40
   18e34:	2000      	movs	r0, #0
   18e36:	6023      	str	r3, [r4, #0]
   18e38:	b016      	add	sp, #88	; 0x58
   18e3a:	bd70      	pop	{r4, r5, r6, pc}

00018e3c <_Balloc>:
   18e3c:	b570      	push	{r4, r5, r6, lr}
   18e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   18e40:	4604      	mov	r4, r0
   18e42:	460d      	mov	r5, r1
   18e44:	b93e      	cbnz	r6, 18e56 <_Balloc+0x1a>
   18e46:	2010      	movs	r0, #16
   18e48:	f7f9 fd50 	bl	128ec <malloc>
   18e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   18e50:	6260      	str	r0, [r4, #36]	; 0x24
   18e52:	6006      	str	r6, [r0, #0]
   18e54:	60c6      	str	r6, [r0, #12]
   18e56:	6a66      	ldr	r6, [r4, #36]	; 0x24
   18e58:	68f3      	ldr	r3, [r6, #12]
   18e5a:	b183      	cbz	r3, 18e7e <_Balloc+0x42>
   18e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18e5e:	68db      	ldr	r3, [r3, #12]
   18e60:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   18e64:	b9b8      	cbnz	r0, 18e96 <_Balloc+0x5a>
   18e66:	2101      	movs	r1, #1
   18e68:	fa01 f605 	lsl.w	r6, r1, r5
   18e6c:	1d72      	adds	r2, r6, #5
   18e6e:	0092      	lsls	r2, r2, #2
   18e70:	4620      	mov	r0, r4
   18e72:	f000 fa9e 	bl	193b2 <_calloc_r>
   18e76:	b160      	cbz	r0, 18e92 <_Balloc+0x56>
   18e78:	e9c0 5601 	strd	r5, r6, [r0, #4]
   18e7c:	e00e      	b.n	18e9c <_Balloc+0x60>
   18e7e:	2221      	movs	r2, #33	; 0x21
   18e80:	2104      	movs	r1, #4
   18e82:	4620      	mov	r0, r4
   18e84:	f000 fa95 	bl	193b2 <_calloc_r>
   18e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18e8a:	60f0      	str	r0, [r6, #12]
   18e8c:	68db      	ldr	r3, [r3, #12]
   18e8e:	2b00      	cmp	r3, #0
   18e90:	d1e4      	bne.n	18e5c <_Balloc+0x20>
   18e92:	2000      	movs	r0, #0
   18e94:	bd70      	pop	{r4, r5, r6, pc}
   18e96:	6802      	ldr	r2, [r0, #0]
   18e98:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   18e9c:	2300      	movs	r3, #0
   18e9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   18ea2:	e7f7      	b.n	18e94 <_Balloc+0x58>

00018ea4 <_Bfree>:
   18ea4:	b570      	push	{r4, r5, r6, lr}
   18ea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   18ea8:	4605      	mov	r5, r0
   18eaa:	460c      	mov	r4, r1
   18eac:	b93e      	cbnz	r6, 18ebe <_Bfree+0x1a>
   18eae:	2010      	movs	r0, #16
   18eb0:	f7f9 fd1c 	bl	128ec <malloc>
   18eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   18eb8:	6268      	str	r0, [r5, #36]	; 0x24
   18eba:	6006      	str	r6, [r0, #0]
   18ebc:	60c6      	str	r6, [r0, #12]
   18ebe:	b13c      	cbz	r4, 18ed0 <_Bfree+0x2c>
   18ec0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18ec2:	6862      	ldr	r2, [r4, #4]
   18ec4:	68db      	ldr	r3, [r3, #12]
   18ec6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   18eca:	6021      	str	r1, [r4, #0]
   18ecc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   18ed0:	bd70      	pop	{r4, r5, r6, pc}

00018ed2 <__multadd>:
   18ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ed6:	690e      	ldr	r6, [r1, #16]
   18ed8:	4607      	mov	r7, r0
   18eda:	4698      	mov	r8, r3
   18edc:	460c      	mov	r4, r1
   18ede:	f101 0014 	add.w	r0, r1, #20
   18ee2:	2300      	movs	r3, #0
   18ee4:	6805      	ldr	r5, [r0, #0]
   18ee6:	b2a9      	uxth	r1, r5
   18ee8:	fb02 8101 	mla	r1, r2, r1, r8
   18eec:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   18ef0:	0c2d      	lsrs	r5, r5, #16
   18ef2:	fb02 c505 	mla	r5, r2, r5, ip
   18ef6:	b289      	uxth	r1, r1
   18ef8:	3301      	adds	r3, #1
   18efa:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   18efe:	429e      	cmp	r6, r3
   18f00:	f840 1b04 	str.w	r1, [r0], #4
   18f04:	ea4f 4815 	mov.w	r8, r5, lsr #16
   18f08:	dcec      	bgt.n	18ee4 <__multadd+0x12>
   18f0a:	f1b8 0f00 	cmp.w	r8, #0
   18f0e:	d01b      	beq.n	18f48 <__multadd+0x76>
   18f10:	68a3      	ldr	r3, [r4, #8]
   18f12:	42b3      	cmp	r3, r6
   18f14:	dc12      	bgt.n	18f3c <__multadd+0x6a>
   18f16:	6861      	ldr	r1, [r4, #4]
   18f18:	4638      	mov	r0, r7
   18f1a:	3101      	adds	r1, #1
   18f1c:	f7ff ff8e 	bl	18e3c <_Balloc>
   18f20:	6922      	ldr	r2, [r4, #16]
   18f22:	3202      	adds	r2, #2
   18f24:	f104 010c 	add.w	r1, r4, #12
   18f28:	4605      	mov	r5, r0
   18f2a:	0092      	lsls	r2, r2, #2
   18f2c:	300c      	adds	r0, #12
   18f2e:	f7ff fcd5 	bl	188dc <memcpy>
   18f32:	4621      	mov	r1, r4
   18f34:	4638      	mov	r0, r7
   18f36:	f7ff ffb5 	bl	18ea4 <_Bfree>
   18f3a:	462c      	mov	r4, r5
   18f3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   18f40:	3601      	adds	r6, #1
   18f42:	f8c3 8014 	str.w	r8, [r3, #20]
   18f46:	6126      	str	r6, [r4, #16]
   18f48:	4620      	mov	r0, r4
   18f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018f4e <__hi0bits>:
   18f4e:	0c02      	lsrs	r2, r0, #16
   18f50:	0412      	lsls	r2, r2, #16
   18f52:	4603      	mov	r3, r0
   18f54:	b9ca      	cbnz	r2, 18f8a <__hi0bits+0x3c>
   18f56:	0403      	lsls	r3, r0, #16
   18f58:	2010      	movs	r0, #16
   18f5a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   18f5e:	bf04      	itt	eq
   18f60:	021b      	lsleq	r3, r3, #8
   18f62:	3008      	addeq	r0, #8
   18f64:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   18f68:	bf04      	itt	eq
   18f6a:	011b      	lsleq	r3, r3, #4
   18f6c:	3004      	addeq	r0, #4
   18f6e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   18f72:	bf04      	itt	eq
   18f74:	009b      	lsleq	r3, r3, #2
   18f76:	3002      	addeq	r0, #2
   18f78:	2b00      	cmp	r3, #0
   18f7a:	db05      	blt.n	18f88 <__hi0bits+0x3a>
   18f7c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   18f80:	f100 0001 	add.w	r0, r0, #1
   18f84:	bf08      	it	eq
   18f86:	2020      	moveq	r0, #32
   18f88:	4770      	bx	lr
   18f8a:	2000      	movs	r0, #0
   18f8c:	e7e5      	b.n	18f5a <__hi0bits+0xc>

00018f8e <__lo0bits>:
   18f8e:	6803      	ldr	r3, [r0, #0]
   18f90:	4602      	mov	r2, r0
   18f92:	f013 0007 	ands.w	r0, r3, #7
   18f96:	d00b      	beq.n	18fb0 <__lo0bits+0x22>
   18f98:	07d9      	lsls	r1, r3, #31
   18f9a:	d422      	bmi.n	18fe2 <__lo0bits+0x54>
   18f9c:	0798      	lsls	r0, r3, #30
   18f9e:	bf49      	itett	mi
   18fa0:	085b      	lsrmi	r3, r3, #1
   18fa2:	089b      	lsrpl	r3, r3, #2
   18fa4:	2001      	movmi	r0, #1
   18fa6:	6013      	strmi	r3, [r2, #0]
   18fa8:	bf5c      	itt	pl
   18faa:	6013      	strpl	r3, [r2, #0]
   18fac:	2002      	movpl	r0, #2
   18fae:	4770      	bx	lr
   18fb0:	b299      	uxth	r1, r3
   18fb2:	b909      	cbnz	r1, 18fb8 <__lo0bits+0x2a>
   18fb4:	0c1b      	lsrs	r3, r3, #16
   18fb6:	2010      	movs	r0, #16
   18fb8:	f013 0fff 	tst.w	r3, #255	; 0xff
   18fbc:	bf04      	itt	eq
   18fbe:	0a1b      	lsreq	r3, r3, #8
   18fc0:	3008      	addeq	r0, #8
   18fc2:	0719      	lsls	r1, r3, #28
   18fc4:	bf04      	itt	eq
   18fc6:	091b      	lsreq	r3, r3, #4
   18fc8:	3004      	addeq	r0, #4
   18fca:	0799      	lsls	r1, r3, #30
   18fcc:	bf04      	itt	eq
   18fce:	089b      	lsreq	r3, r3, #2
   18fd0:	3002      	addeq	r0, #2
   18fd2:	07d9      	lsls	r1, r3, #31
   18fd4:	d403      	bmi.n	18fde <__lo0bits+0x50>
   18fd6:	085b      	lsrs	r3, r3, #1
   18fd8:	f100 0001 	add.w	r0, r0, #1
   18fdc:	d003      	beq.n	18fe6 <__lo0bits+0x58>
   18fde:	6013      	str	r3, [r2, #0]
   18fe0:	4770      	bx	lr
   18fe2:	2000      	movs	r0, #0
   18fe4:	4770      	bx	lr
   18fe6:	2020      	movs	r0, #32
   18fe8:	4770      	bx	lr

00018fea <__i2b>:
   18fea:	b510      	push	{r4, lr}
   18fec:	460c      	mov	r4, r1
   18fee:	2101      	movs	r1, #1
   18ff0:	f7ff ff24 	bl	18e3c <_Balloc>
   18ff4:	2201      	movs	r2, #1
   18ff6:	6144      	str	r4, [r0, #20]
   18ff8:	6102      	str	r2, [r0, #16]
   18ffa:	bd10      	pop	{r4, pc}

00018ffc <__multiply>:
   18ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19000:	4615      	mov	r5, r2
   19002:	690a      	ldr	r2, [r1, #16]
   19004:	692b      	ldr	r3, [r5, #16]
   19006:	429a      	cmp	r2, r3
   19008:	bfb8      	it	lt
   1900a:	460b      	movlt	r3, r1
   1900c:	460c      	mov	r4, r1
   1900e:	bfbc      	itt	lt
   19010:	462c      	movlt	r4, r5
   19012:	461d      	movlt	r5, r3
   19014:	6927      	ldr	r7, [r4, #16]
   19016:	f8d5 9010 	ldr.w	r9, [r5, #16]
   1901a:	68a3      	ldr	r3, [r4, #8]
   1901c:	6861      	ldr	r1, [r4, #4]
   1901e:	eb07 0609 	add.w	r6, r7, r9
   19022:	42b3      	cmp	r3, r6
   19024:	bfb8      	it	lt
   19026:	3101      	addlt	r1, #1
   19028:	b085      	sub	sp, #20
   1902a:	f7ff ff07 	bl	18e3c <_Balloc>
   1902e:	f100 0114 	add.w	r1, r0, #20
   19032:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   19036:	460b      	mov	r3, r1
   19038:	2200      	movs	r2, #0
   1903a:	4543      	cmp	r3, r8
   1903c:	d31d      	bcc.n	1907a <__multiply+0x7e>
   1903e:	f104 0314 	add.w	r3, r4, #20
   19042:	f105 0214 	add.w	r2, r5, #20
   19046:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1904a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   1904e:	9302      	str	r3, [sp, #8]
   19050:	1b3b      	subs	r3, r7, r4
   19052:	3b15      	subs	r3, #21
   19054:	f023 0303 	bic.w	r3, r3, #3
   19058:	3304      	adds	r3, #4
   1905a:	f104 0515 	add.w	r5, r4, #21
   1905e:	42af      	cmp	r7, r5
   19060:	bf38      	it	cc
   19062:	2304      	movcc	r3, #4
   19064:	9301      	str	r3, [sp, #4]
   19066:	9b02      	ldr	r3, [sp, #8]
   19068:	9203      	str	r2, [sp, #12]
   1906a:	4293      	cmp	r3, r2
   1906c:	d808      	bhi.n	19080 <__multiply+0x84>
   1906e:	2e00      	cmp	r6, #0
   19070:	dc5a      	bgt.n	19128 <__multiply+0x12c>
   19072:	6106      	str	r6, [r0, #16]
   19074:	b005      	add	sp, #20
   19076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1907a:	f843 2b04 	str.w	r2, [r3], #4
   1907e:	e7dc      	b.n	1903a <__multiply+0x3e>
   19080:	f8b2 a000 	ldrh.w	sl, [r2]
   19084:	f1ba 0f00 	cmp.w	sl, #0
   19088:	d024      	beq.n	190d4 <__multiply+0xd8>
   1908a:	f104 0e14 	add.w	lr, r4, #20
   1908e:	4689      	mov	r9, r1
   19090:	f04f 0c00 	mov.w	ip, #0
   19094:	f85e 5b04 	ldr.w	r5, [lr], #4
   19098:	f8d9 b000 	ldr.w	fp, [r9]
   1909c:	b2ab      	uxth	r3, r5
   1909e:	fa1f fb8b 	uxth.w	fp, fp
   190a2:	fb0a b303 	mla	r3, sl, r3, fp
   190a6:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   190aa:	f8d9 5000 	ldr.w	r5, [r9]
   190ae:	4463      	add	r3, ip
   190b0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   190b4:	fb0a c50b 	mla	r5, sl, fp, ip
   190b8:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   190bc:	b29b      	uxth	r3, r3
   190be:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   190c2:	4577      	cmp	r7, lr
   190c4:	f849 3b04 	str.w	r3, [r9], #4
   190c8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   190cc:	d8e2      	bhi.n	19094 <__multiply+0x98>
   190ce:	9b01      	ldr	r3, [sp, #4]
   190d0:	f841 c003 	str.w	ip, [r1, r3]
   190d4:	9b03      	ldr	r3, [sp, #12]
   190d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   190da:	3204      	adds	r2, #4
   190dc:	f1b9 0f00 	cmp.w	r9, #0
   190e0:	d020      	beq.n	19124 <__multiply+0x128>
   190e2:	680b      	ldr	r3, [r1, #0]
   190e4:	f104 0c14 	add.w	ip, r4, #20
   190e8:	468e      	mov	lr, r1
   190ea:	f04f 0a00 	mov.w	sl, #0
   190ee:	f8bc 5000 	ldrh.w	r5, [ip]
   190f2:	f8be b002 	ldrh.w	fp, [lr, #2]
   190f6:	fb09 b505 	mla	r5, r9, r5, fp
   190fa:	44aa      	add	sl, r5
   190fc:	b29b      	uxth	r3, r3
   190fe:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   19102:	f84e 3b04 	str.w	r3, [lr], #4
   19106:	f85c 3b04 	ldr.w	r3, [ip], #4
   1910a:	f8be 5000 	ldrh.w	r5, [lr]
   1910e:	0c1b      	lsrs	r3, r3, #16
   19110:	fb09 5303 	mla	r3, r9, r3, r5
   19114:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   19118:	4567      	cmp	r7, ip
   1911a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1911e:	d8e6      	bhi.n	190ee <__multiply+0xf2>
   19120:	9d01      	ldr	r5, [sp, #4]
   19122:	514b      	str	r3, [r1, r5]
   19124:	3104      	adds	r1, #4
   19126:	e79e      	b.n	19066 <__multiply+0x6a>
   19128:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1912c:	2b00      	cmp	r3, #0
   1912e:	d1a0      	bne.n	19072 <__multiply+0x76>
   19130:	3e01      	subs	r6, #1
   19132:	e79c      	b.n	1906e <__multiply+0x72>

00019134 <__lshift>:
   19134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19138:	460c      	mov	r4, r1
   1913a:	6849      	ldr	r1, [r1, #4]
   1913c:	6923      	ldr	r3, [r4, #16]
   1913e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   19142:	68a3      	ldr	r3, [r4, #8]
   19144:	4607      	mov	r7, r0
   19146:	4691      	mov	r9, r2
   19148:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1914c:	f108 0601 	add.w	r6, r8, #1
   19150:	42b3      	cmp	r3, r6
   19152:	db3f      	blt.n	191d4 <__lshift+0xa0>
   19154:	4638      	mov	r0, r7
   19156:	f7ff fe71 	bl	18e3c <_Balloc>
   1915a:	2300      	movs	r3, #0
   1915c:	4605      	mov	r5, r0
   1915e:	f100 0114 	add.w	r1, r0, #20
   19162:	f100 0210 	add.w	r2, r0, #16
   19166:	4618      	mov	r0, r3
   19168:	4553      	cmp	r3, sl
   1916a:	db36      	blt.n	191da <__lshift+0xa6>
   1916c:	6920      	ldr	r0, [r4, #16]
   1916e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   19172:	f104 0314 	add.w	r3, r4, #20
   19176:	f019 091f 	ands.w	r9, r9, #31
   1917a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1917e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   19182:	d02e      	beq.n	191e2 <__lshift+0xae>
   19184:	f1c9 0e20 	rsb	lr, r9, #32
   19188:	468a      	mov	sl, r1
   1918a:	2200      	movs	r2, #0
   1918c:	6818      	ldr	r0, [r3, #0]
   1918e:	fa00 f009 	lsl.w	r0, r0, r9
   19192:	4302      	orrs	r2, r0
   19194:	f84a 2b04 	str.w	r2, [sl], #4
   19198:	f853 2b04 	ldr.w	r2, [r3], #4
   1919c:	459c      	cmp	ip, r3
   1919e:	fa22 f20e 	lsr.w	r2, r2, lr
   191a2:	d8f3      	bhi.n	1918c <__lshift+0x58>
   191a4:	ebac 0304 	sub.w	r3, ip, r4
   191a8:	3b15      	subs	r3, #21
   191aa:	f023 0303 	bic.w	r3, r3, #3
   191ae:	3304      	adds	r3, #4
   191b0:	f104 0015 	add.w	r0, r4, #21
   191b4:	4560      	cmp	r0, ip
   191b6:	bf88      	it	hi
   191b8:	2304      	movhi	r3, #4
   191ba:	50ca      	str	r2, [r1, r3]
   191bc:	b10a      	cbz	r2, 191c2 <__lshift+0x8e>
   191be:	f108 0602 	add.w	r6, r8, #2
   191c2:	3e01      	subs	r6, #1
   191c4:	4638      	mov	r0, r7
   191c6:	612e      	str	r6, [r5, #16]
   191c8:	4621      	mov	r1, r4
   191ca:	f7ff fe6b 	bl	18ea4 <_Bfree>
   191ce:	4628      	mov	r0, r5
   191d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   191d4:	3101      	adds	r1, #1
   191d6:	005b      	lsls	r3, r3, #1
   191d8:	e7ba      	b.n	19150 <__lshift+0x1c>
   191da:	f842 0f04 	str.w	r0, [r2, #4]!
   191de:	3301      	adds	r3, #1
   191e0:	e7c2      	b.n	19168 <__lshift+0x34>
   191e2:	3904      	subs	r1, #4
   191e4:	f853 2b04 	ldr.w	r2, [r3], #4
   191e8:	f841 2f04 	str.w	r2, [r1, #4]!
   191ec:	459c      	cmp	ip, r3
   191ee:	d8f9      	bhi.n	191e4 <__lshift+0xb0>
   191f0:	e7e7      	b.n	191c2 <__lshift+0x8e>

000191f2 <__mcmp>:
   191f2:	690a      	ldr	r2, [r1, #16]
   191f4:	4603      	mov	r3, r0
   191f6:	6900      	ldr	r0, [r0, #16]
   191f8:	1a80      	subs	r0, r0, r2
   191fa:	b530      	push	{r4, r5, lr}
   191fc:	d10d      	bne.n	1921a <__mcmp+0x28>
   191fe:	3314      	adds	r3, #20
   19200:	3114      	adds	r1, #20
   19202:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   19206:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1920a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1920e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   19212:	4295      	cmp	r5, r2
   19214:	d002      	beq.n	1921c <__mcmp+0x2a>
   19216:	d304      	bcc.n	19222 <__mcmp+0x30>
   19218:	2001      	movs	r0, #1
   1921a:	bd30      	pop	{r4, r5, pc}
   1921c:	42a3      	cmp	r3, r4
   1921e:	d3f4      	bcc.n	1920a <__mcmp+0x18>
   19220:	e7fb      	b.n	1921a <__mcmp+0x28>
   19222:	f04f 30ff 	mov.w	r0, #4294967295
   19226:	e7f8      	b.n	1921a <__mcmp+0x28>

00019228 <__mdiff>:
   19228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1922c:	460c      	mov	r4, r1
   1922e:	4606      	mov	r6, r0
   19230:	4611      	mov	r1, r2
   19232:	4620      	mov	r0, r4
   19234:	4617      	mov	r7, r2
   19236:	f7ff ffdc 	bl	191f2 <__mcmp>
   1923a:	1e05      	subs	r5, r0, #0
   1923c:	d108      	bne.n	19250 <__mdiff+0x28>
   1923e:	4629      	mov	r1, r5
   19240:	4630      	mov	r0, r6
   19242:	f7ff fdfb 	bl	18e3c <_Balloc>
   19246:	2301      	movs	r3, #1
   19248:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1924c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19250:	bfa4      	itt	ge
   19252:	463b      	movge	r3, r7
   19254:	4627      	movge	r7, r4
   19256:	4630      	mov	r0, r6
   19258:	6879      	ldr	r1, [r7, #4]
   1925a:	bfa6      	itte	ge
   1925c:	461c      	movge	r4, r3
   1925e:	2500      	movge	r5, #0
   19260:	2501      	movlt	r5, #1
   19262:	f7ff fdeb 	bl	18e3c <_Balloc>
   19266:	693e      	ldr	r6, [r7, #16]
   19268:	60c5      	str	r5, [r0, #12]
   1926a:	6925      	ldr	r5, [r4, #16]
   1926c:	f107 0114 	add.w	r1, r7, #20
   19270:	f104 0914 	add.w	r9, r4, #20
   19274:	f100 0e14 	add.w	lr, r0, #20
   19278:	f107 0210 	add.w	r2, r7, #16
   1927c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   19280:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   19284:	46f2      	mov	sl, lr
   19286:	2700      	movs	r7, #0
   19288:	f859 3b04 	ldr.w	r3, [r9], #4
   1928c:	f852 bf04 	ldr.w	fp, [r2, #4]!
   19290:	fa1f f883 	uxth.w	r8, r3
   19294:	fa17 f78b 	uxtah	r7, r7, fp
   19298:	0c1b      	lsrs	r3, r3, #16
   1929a:	eba7 0808 	sub.w	r8, r7, r8
   1929e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   192a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
   192a6:	fa1f f888 	uxth.w	r8, r8
   192aa:	141f      	asrs	r7, r3, #16
   192ac:	454d      	cmp	r5, r9
   192ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   192b2:	f84a 3b04 	str.w	r3, [sl], #4
   192b6:	d8e7      	bhi.n	19288 <__mdiff+0x60>
   192b8:	1b2b      	subs	r3, r5, r4
   192ba:	3b15      	subs	r3, #21
   192bc:	f023 0303 	bic.w	r3, r3, #3
   192c0:	3304      	adds	r3, #4
   192c2:	3415      	adds	r4, #21
   192c4:	42a5      	cmp	r5, r4
   192c6:	bf38      	it	cc
   192c8:	2304      	movcc	r3, #4
   192ca:	4419      	add	r1, r3
   192cc:	4473      	add	r3, lr
   192ce:	469e      	mov	lr, r3
   192d0:	460d      	mov	r5, r1
   192d2:	4565      	cmp	r5, ip
   192d4:	d30e      	bcc.n	192f4 <__mdiff+0xcc>
   192d6:	f10c 0203 	add.w	r2, ip, #3
   192da:	1a52      	subs	r2, r2, r1
   192dc:	f022 0203 	bic.w	r2, r2, #3
   192e0:	3903      	subs	r1, #3
   192e2:	458c      	cmp	ip, r1
   192e4:	bf38      	it	cc
   192e6:	2200      	movcc	r2, #0
   192e8:	441a      	add	r2, r3
   192ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   192ee:	b17b      	cbz	r3, 19310 <__mdiff+0xe8>
   192f0:	6106      	str	r6, [r0, #16]
   192f2:	e7ab      	b.n	1924c <__mdiff+0x24>
   192f4:	f855 8b04 	ldr.w	r8, [r5], #4
   192f8:	fa17 f488 	uxtah	r4, r7, r8
   192fc:	1422      	asrs	r2, r4, #16
   192fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   19302:	b2a4      	uxth	r4, r4
   19304:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   19308:	f84e 4b04 	str.w	r4, [lr], #4
   1930c:	1417      	asrs	r7, r2, #16
   1930e:	e7e0      	b.n	192d2 <__mdiff+0xaa>
   19310:	3e01      	subs	r6, #1
   19312:	e7ea      	b.n	192ea <__mdiff+0xc2>

00019314 <__d2b>:
   19314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19318:	2101      	movs	r1, #1
   1931a:	461c      	mov	r4, r3
   1931c:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   19320:	4690      	mov	r8, r2
   19322:	f7ff fd8b 	bl	18e3c <_Balloc>
   19326:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1932a:	f3c4 540a 	ubfx	r4, r4, #20, #11
   1932e:	4607      	mov	r7, r0
   19330:	bb2c      	cbnz	r4, 1937e <__d2b+0x6a>
   19332:	9301      	str	r3, [sp, #4]
   19334:	f1b8 0300 	subs.w	r3, r8, #0
   19338:	d026      	beq.n	19388 <__d2b+0x74>
   1933a:	4668      	mov	r0, sp
   1933c:	9300      	str	r3, [sp, #0]
   1933e:	f7ff fe26 	bl	18f8e <__lo0bits>
   19342:	9900      	ldr	r1, [sp, #0]
   19344:	b1f0      	cbz	r0, 19384 <__d2b+0x70>
   19346:	9a01      	ldr	r2, [sp, #4]
   19348:	f1c0 0320 	rsb	r3, r0, #32
   1934c:	fa02 f303 	lsl.w	r3, r2, r3
   19350:	430b      	orrs	r3, r1
   19352:	40c2      	lsrs	r2, r0
   19354:	617b      	str	r3, [r7, #20]
   19356:	9201      	str	r2, [sp, #4]
   19358:	9b01      	ldr	r3, [sp, #4]
   1935a:	61bb      	str	r3, [r7, #24]
   1935c:	2b00      	cmp	r3, #0
   1935e:	bf14      	ite	ne
   19360:	2102      	movne	r1, #2
   19362:	2101      	moveq	r1, #1
   19364:	6139      	str	r1, [r7, #16]
   19366:	b1c4      	cbz	r4, 1939a <__d2b+0x86>
   19368:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   1936c:	4404      	add	r4, r0
   1936e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   19372:	6034      	str	r4, [r6, #0]
   19374:	6028      	str	r0, [r5, #0]
   19376:	4638      	mov	r0, r7
   19378:	b002      	add	sp, #8
   1937a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1937e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   19382:	e7d6      	b.n	19332 <__d2b+0x1e>
   19384:	6179      	str	r1, [r7, #20]
   19386:	e7e7      	b.n	19358 <__d2b+0x44>
   19388:	a801      	add	r0, sp, #4
   1938a:	f7ff fe00 	bl	18f8e <__lo0bits>
   1938e:	9b01      	ldr	r3, [sp, #4]
   19390:	617b      	str	r3, [r7, #20]
   19392:	2101      	movs	r1, #1
   19394:	6139      	str	r1, [r7, #16]
   19396:	3020      	adds	r0, #32
   19398:	e7e5      	b.n	19366 <__d2b+0x52>
   1939a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   1939e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   193a2:	6030      	str	r0, [r6, #0]
   193a4:	6918      	ldr	r0, [r3, #16]
   193a6:	f7ff fdd2 	bl	18f4e <__hi0bits>
   193aa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   193ae:	6029      	str	r1, [r5, #0]
   193b0:	e7e1      	b.n	19376 <__d2b+0x62>

000193b2 <_calloc_r>:
   193b2:	b538      	push	{r3, r4, r5, lr}
   193b4:	fb02 f501 	mul.w	r5, r2, r1
   193b8:	4629      	mov	r1, r5
   193ba:	f7f9 faf5 	bl	129a8 <_malloc_r>
   193be:	4604      	mov	r4, r0
   193c0:	b118      	cbz	r0, 193ca <_calloc_r+0x18>
   193c2:	462a      	mov	r2, r5
   193c4:	2100      	movs	r1, #0
   193c6:	f7ff fa97 	bl	188f8 <memset>
   193ca:	4620      	mov	r0, r4
   193cc:	bd38      	pop	{r3, r4, r5, pc}

000193ce <__sread>:
   193ce:	b510      	push	{r4, lr}
   193d0:	460c      	mov	r4, r1
   193d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   193d6:	f7fa fbe5 	bl	13ba4 <_read_r>
   193da:	2800      	cmp	r0, #0
   193dc:	bfab      	itete	ge
   193de:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   193e0:	89a3      	ldrhlt	r3, [r4, #12]
   193e2:	181b      	addge	r3, r3, r0
   193e4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   193e8:	bfac      	ite	ge
   193ea:	6563      	strge	r3, [r4, #84]	; 0x54
   193ec:	81a3      	strhlt	r3, [r4, #12]
   193ee:	bd10      	pop	{r4, pc}

000193f0 <__swrite>:
   193f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193f4:	461f      	mov	r7, r3
   193f6:	898b      	ldrh	r3, [r1, #12]
   193f8:	05db      	lsls	r3, r3, #23
   193fa:	4605      	mov	r5, r0
   193fc:	460c      	mov	r4, r1
   193fe:	4616      	mov	r6, r2
   19400:	d505      	bpl.n	1940e <__swrite+0x1e>
   19402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19406:	2302      	movs	r3, #2
   19408:	2200      	movs	r2, #0
   1940a:	f7fa fbb9 	bl	13b80 <_lseek_r>
   1940e:	89a3      	ldrh	r3, [r4, #12]
   19410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   19414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   19418:	81a3      	strh	r3, [r4, #12]
   1941a:	4632      	mov	r2, r6
   1941c:	463b      	mov	r3, r7
   1941e:	4628      	mov	r0, r5
   19420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19424:	f7fa bb68 	b.w	13af8 <_write_r>

00019428 <__sseek>:
   19428:	b510      	push	{r4, lr}
   1942a:	460c      	mov	r4, r1
   1942c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19430:	f7fa fba6 	bl	13b80 <_lseek_r>
   19434:	1c43      	adds	r3, r0, #1
   19436:	89a3      	ldrh	r3, [r4, #12]
   19438:	bf15      	itete	ne
   1943a:	6560      	strne	r0, [r4, #84]	; 0x54
   1943c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   19440:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   19444:	81a3      	strheq	r3, [r4, #12]
   19446:	bf18      	it	ne
   19448:	81a3      	strhne	r3, [r4, #12]
   1944a:	bd10      	pop	{r4, pc}

0001944c <__sclose>:
   1944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19450:	f7fa bb64 	b.w	13b1c <_close_r>

00019454 <__ascii_mbtowc>:
   19454:	b082      	sub	sp, #8
   19456:	b901      	cbnz	r1, 1945a <__ascii_mbtowc+0x6>
   19458:	a901      	add	r1, sp, #4
   1945a:	b142      	cbz	r2, 1946e <__ascii_mbtowc+0x1a>
   1945c:	b14b      	cbz	r3, 19472 <__ascii_mbtowc+0x1e>
   1945e:	7813      	ldrb	r3, [r2, #0]
   19460:	600b      	str	r3, [r1, #0]
   19462:	7812      	ldrb	r2, [r2, #0]
   19464:	1e10      	subs	r0, r2, #0
   19466:	bf18      	it	ne
   19468:	2001      	movne	r0, #1
   1946a:	b002      	add	sp, #8
   1946c:	4770      	bx	lr
   1946e:	4610      	mov	r0, r2
   19470:	e7fb      	b.n	1946a <__ascii_mbtowc+0x16>
   19472:	f06f 0001 	mvn.w	r0, #1
   19476:	e7f8      	b.n	1946a <__ascii_mbtowc+0x16>

00019478 <__ascii_wctomb>:
   19478:	4603      	mov	r3, r0
   1947a:	4608      	mov	r0, r1
   1947c:	b141      	cbz	r1, 19490 <__ascii_wctomb+0x18>
   1947e:	2aff      	cmp	r2, #255	; 0xff
   19480:	d904      	bls.n	1948c <__ascii_wctomb+0x14>
   19482:	228a      	movs	r2, #138	; 0x8a
   19484:	601a      	str	r2, [r3, #0]
   19486:	f04f 30ff 	mov.w	r0, #4294967295
   1948a:	4770      	bx	lr
   1948c:	700a      	strb	r2, [r1, #0]
   1948e:	2001      	movs	r0, #1
   19490:	4770      	bx	lr
	...

00019494 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   19494:	f7ec bbda 	b.w	5c4c <SystemInit>
