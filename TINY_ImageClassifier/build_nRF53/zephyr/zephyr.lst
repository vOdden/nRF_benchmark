
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	2002f530 	.word	0x2002f530
   4:	000046a9 	.word	0x000046a9
   8:	0001489b 	.word	0x0001489b
   c:	00004661 	.word	0x00004661
  10:	00004661 	.word	0x00004661
  14:	00004661 	.word	0x00004661
  18:	00004661 	.word	0x00004661
  1c:	00004661 	.word	0x00004661
	...
  2c:	00004361 	.word	0x00004361
  30:	00004661 	.word	0x00004661
  34:	00000000 	.word	0x00000000
  38:	00004305 	.word	0x00004305
  3c:	0001510b 	.word	0x0001510b

00000040 <_irq_vector_table>:
  40:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  50:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  60:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  70:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  80:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  90:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  a0:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  b0:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  c0:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  d0:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  e0:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
  f0:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
 100:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
 110:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
 120:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
 130:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
 140:	000043ed 000043ed 000043ed 000043ed     .C...C...C...C..
 150:	000043ed                                .C..

Disassembly of section text:

00000158 <__aeabi_drsub>:
     158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__adddf3>
     15e:	bf00      	nop

00000160 <__aeabi_dsub>:
     160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000164 <__adddf3>:
     164:	b530      	push	{r4, r5, lr}
     166:	ea4f 0441 	mov.w	r4, r1, lsl #1
     16a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     16e:	ea94 0f05 	teq	r4, r5
     172:	bf08      	it	eq
     174:	ea90 0f02 	teqeq	r0, r2
     178:	bf1f      	itttt	ne
     17a:	ea54 0c00 	orrsne.w	ip, r4, r0
     17e:	ea55 0c02 	orrsne.w	ip, r5, r2
     182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     18a:	f000 80e2 	beq.w	352 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd2>
     18e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     196:	bfb8      	it	lt
     198:	426d      	neglt	r5, r5
     19a:	dd0c      	ble.n	1b6 <__adddf3+0x52>
     19c:	442c      	add	r4, r5
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	ea82 0000 	eor.w	r0, r2, r0
     1aa:	ea83 0101 	eor.w	r1, r3, r1
     1ae:	ea80 0202 	eor.w	r2, r0, r2
     1b2:	ea81 0303 	eor.w	r3, r1, r3
     1b6:	2d36      	cmp	r5, #54	; 0x36
     1b8:	bf88      	it	hi
     1ba:	bd30      	pophi	{r4, r5, pc}
     1bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1cc:	d002      	beq.n	1d4 <CONFIG_SRAM_SIZE+0x14>
     1ce:	4240      	negs	r0, r0
     1d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e0:	d002      	beq.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     1e2:	4252      	negs	r2, r2
     1e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e8:	ea94 0f05 	teq	r4, r5
     1ec:	f000 80a7 	beq.w	33e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xbe>
     1f0:	f1a4 0401 	sub.w	r4, r4, #1
     1f4:	f1d5 0e20 	rsbs	lr, r5, #32
     1f8:	db0d      	blt.n	216 <CONFIG_SRAM_SIZE+0x56>
     1fa:	fa02 fc0e 	lsl.w	ip, r2, lr
     1fe:	fa22 f205 	lsr.w	r2, r2, r5
     202:	1880      	adds	r0, r0, r2
     204:	f141 0100 	adc.w	r1, r1, #0
     208:	fa03 f20e 	lsl.w	r2, r3, lr
     20c:	1880      	adds	r0, r0, r2
     20e:	fa43 f305 	asr.w	r3, r3, r5
     212:	4159      	adcs	r1, r3
     214:	e00e      	b.n	234 <CONFIG_SRAM_SIZE+0x74>
     216:	f1a5 0520 	sub.w	r5, r5, #32
     21a:	f10e 0e20 	add.w	lr, lr, #32
     21e:	2a01      	cmp	r2, #1
     220:	fa03 fc0e 	lsl.w	ip, r3, lr
     224:	bf28      	it	cs
     226:	f04c 0c02 	orrcs.w	ip, ip, #2
     22a:	fa43 f305 	asr.w	r3, r3, r5
     22e:	18c0      	adds	r0, r0, r3
     230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     238:	d507      	bpl.n	24a <CONFIG_SRAM_SIZE+0x8a>
     23a:	f04f 0e00 	mov.w	lr, #0
     23e:	f1dc 0c00 	rsbs	ip, ip, #0
     242:	eb7e 0000 	sbcs.w	r0, lr, r0
     246:	eb6e 0101 	sbc.w	r1, lr, r1
     24a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     24e:	d31b      	bcc.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     254:	d30c      	bcc.n	270 <CONFIG_SRAM_SIZE+0xb0>
     256:	0849      	lsrs	r1, r1, #1
     258:	ea5f 0030 	movs.w	r0, r0, rrx
     25c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     260:	f104 0401 	add.w	r4, r4, #1
     264:	ea4f 5244 	mov.w	r2, r4, lsl #21
     268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     26c:	f080 809a 	bcs.w	3a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x124>
     270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     274:	bf08      	it	eq
     276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     27a:	f150 0000 	adcs.w	r0, r0, #0
     27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     282:	ea41 0105 	orr.w	r1, r1, r5
     286:	bd30      	pop	{r4, r5, pc}
     288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     28c:	4140      	adcs	r0, r0
     28e:	eb41 0101 	adc.w	r1, r1, r1
     292:	3c01      	subs	r4, #1
     294:	bf28      	it	cs
     296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     29a:	d2e9      	bcs.n	270 <CONFIG_SRAM_SIZE+0xb0>
     29c:	f091 0f00 	teq	r1, #0
     2a0:	bf04      	itt	eq
     2a2:	4601      	moveq	r1, r0
     2a4:	2000      	moveq	r0, #0
     2a6:	fab1 f381 	clz	r3, r1
     2aa:	bf08      	it	eq
     2ac:	3320      	addeq	r3, #32
     2ae:	f1a3 030b 	sub.w	r3, r3, #11
     2b2:	f1b3 0220 	subs.w	r2, r3, #32
     2b6:	da0c      	bge.n	2d2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x52>
     2b8:	320c      	adds	r2, #12
     2ba:	dd08      	ble.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2bc:	f102 0c14 	add.w	ip, r2, #20
     2c0:	f1c2 020c 	rsb	r2, r2, #12
     2c4:	fa01 f00c 	lsl.w	r0, r1, ip
     2c8:	fa21 f102 	lsr.w	r1, r1, r2
     2cc:	e00c      	b.n	2e8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x68>
     2ce:	f102 0214 	add.w	r2, r2, #20
     2d2:	bfd8      	it	le
     2d4:	f1c2 0c20 	rsble	ip, r2, #32
     2d8:	fa01 f102 	lsl.w	r1, r1, r2
     2dc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e0:	bfdc      	itt	le
     2e2:	ea41 010c 	orrle.w	r1, r1, ip
     2e6:	4090      	lslle	r0, r2
     2e8:	1ae4      	subs	r4, r4, r3
     2ea:	bfa2      	ittt	ge
     2ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f0:	4329      	orrge	r1, r5
     2f2:	bd30      	popge	{r4, r5, pc}
     2f4:	ea6f 0404 	mvn.w	r4, r4
     2f8:	3c1f      	subs	r4, #31
     2fa:	da1c      	bge.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>
     2fc:	340c      	adds	r4, #12
     2fe:	dc0e      	bgt.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     300:	f104 0414 	add.w	r4, r4, #20
     304:	f1c4 0220 	rsb	r2, r4, #32
     308:	fa20 f004 	lsr.w	r0, r0, r4
     30c:	fa01 f302 	lsl.w	r3, r1, r2
     310:	ea40 0003 	orr.w	r0, r0, r3
     314:	fa21 f304 	lsr.w	r3, r1, r4
     318:	ea45 0103 	orr.w	r1, r5, r3
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	f1c4 040c 	rsb	r4, r4, #12
     322:	f1c4 0220 	rsb	r2, r4, #32
     326:	fa20 f002 	lsr.w	r0, r0, r2
     32a:	fa01 f304 	lsl.w	r3, r1, r4
     32e:	ea40 0003 	orr.w	r0, r0, r3
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	fa21 f004 	lsr.w	r0, r1, r4
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	f094 0f00 	teq	r4, #0
     342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     346:	bf06      	itte	eq
     348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     34c:	3401      	addeq	r4, #1
     34e:	3d01      	subne	r5, #1
     350:	e74e      	b.n	1f0 <CONFIG_SRAM_SIZE+0x30>
     352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     356:	bf18      	it	ne
     358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     35c:	d029      	beq.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     35e:	ea94 0f05 	teq	r4, r5
     362:	bf08      	it	eq
     364:	ea90 0f02 	teqeq	r0, r2
     368:	d005      	beq.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     36a:	ea54 0c00 	orrs.w	ip, r4, r0
     36e:	bf04      	itt	eq
     370:	4619      	moveq	r1, r3
     372:	4610      	moveq	r0, r2
     374:	bd30      	pop	{r4, r5, pc}
     376:	ea91 0f03 	teq	r1, r3
     37a:	bf1e      	ittt	ne
     37c:	2100      	movne	r1, #0
     37e:	2000      	movne	r0, #0
     380:	bd30      	popne	{r4, r5, pc}
     382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     386:	d105      	bne.n	394 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x114>
     388:	0040      	lsls	r0, r0, #1
     38a:	4149      	adcs	r1, r1
     38c:	bf28      	it	cs
     38e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     392:	bd30      	pop	{r4, r5, pc}
     394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     398:	bf3c      	itt	cc
     39a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     39e:	bd30      	popcc	{r4, r5, pc}
     3a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ac:	f04f 0000 	mov.w	r0, #0
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3b6:	bf1a      	itte	ne
     3b8:	4619      	movne	r1, r3
     3ba:	4610      	movne	r0, r2
     3bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c0:	bf1c      	itt	ne
     3c2:	460b      	movne	r3, r1
     3c4:	4602      	movne	r2, r0
     3c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ca:	bf06      	itte	eq
     3cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d0:	ea91 0f03 	teqeq	r1, r3
     3d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	bf00      	nop

000003dc <__aeabi_ui2d>:
     3dc:	f090 0f00 	teq	r0, #0
     3e0:	bf04      	itt	eq
     3e2:	2100      	moveq	r1, #0
     3e4:	4770      	bxeq	lr
     3e6:	b530      	push	{r4, r5, lr}
     3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f0:	f04f 0500 	mov.w	r5, #0
     3f4:	f04f 0100 	mov.w	r1, #0
     3f8:	e750      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     3fa:	bf00      	nop

000003fc <__aeabi_i2d>:
     3fc:	f090 0f00 	teq	r0, #0
     400:	bf04      	itt	eq
     402:	2100      	moveq	r1, #0
     404:	4770      	bxeq	lr
     406:	b530      	push	{r4, r5, lr}
     408:	f44f 6480 	mov.w	r4, #1024	; 0x400
     40c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     414:	bf48      	it	mi
     416:	4240      	negmi	r0, r0
     418:	f04f 0100 	mov.w	r1, #0
     41c:	e73e      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     41e:	bf00      	nop

00000420 <__aeabi_f2d>:
     420:	0042      	lsls	r2, r0, #1
     422:	ea4f 01e2 	mov.w	r1, r2, asr #3
     426:	ea4f 0131 	mov.w	r1, r1, rrx
     42a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     42e:	bf1f      	itttt	ne
     430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     43c:	4770      	bxne	lr
     43e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     442:	bf08      	it	eq
     444:	4770      	bxeq	lr
     446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     44a:	bf04      	itt	eq
     44c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     450:	4770      	bxeq	lr
     452:	b530      	push	{r4, r5, lr}
     454:	f44f 7460 	mov.w	r4, #896	; 0x380
     458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     45c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     460:	e71c      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     462:	bf00      	nop

00000464 <__aeabi_ul2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f04f 0500 	mov.w	r5, #0
     472:	e00a      	b.n	48a <__aeabi_l2d+0x16>

00000474 <__aeabi_l2d>:
     474:	ea50 0201 	orrs.w	r2, r0, r1
     478:	bf08      	it	eq
     47a:	4770      	bxeq	lr
     47c:	b530      	push	{r4, r5, lr}
     47e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     482:	d502      	bpl.n	48a <__aeabi_l2d+0x16>
     484:	4240      	negs	r0, r0
     486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     48a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     48e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     496:	f43f aed8 	beq.w	24a <CONFIG_SRAM_SIZE+0x8a>
     49a:	f04f 0203 	mov.w	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4b2:	f1c2 0320 	rsb	r3, r2, #32
     4b6:	fa00 fc03 	lsl.w	ip, r0, r3
     4ba:	fa20 f002 	lsr.w	r0, r0, r2
     4be:	fa01 fe03 	lsl.w	lr, r1, r3
     4c2:	ea40 000e 	orr.w	r0, r0, lr
     4c6:	fa21 f102 	lsr.w	r1, r1, r2
     4ca:	4414      	add	r4, r2
     4cc:	e6bd      	b.n	24a <CONFIG_SRAM_SIZE+0x8a>
     4ce:	bf00      	nop

000004d0 <__aeabi_dmul>:
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4de:	bf1d      	ittte	ne
     4e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4e4:	ea94 0f0c 	teqne	r4, ip
     4e8:	ea95 0f0c 	teqne	r5, ip
     4ec:	f000 f8de 	bleq	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     4f0:	442c      	add	r4, r5
     4f2:	ea81 0603 	eor.w	r6, r1, r3
     4f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     502:	bf18      	it	ne
     504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     510:	d038      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     512:	fba0 ce02 	umull	ip, lr, r0, r2
     516:	f04f 0500 	mov.w	r5, #0
     51a:	fbe1 e502 	umlal	lr, r5, r1, r2
     51e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     522:	fbe0 e503 	umlal	lr, r5, r0, r3
     526:	f04f 0600 	mov.w	r6, #0
     52a:	fbe1 5603 	umlal	r5, r6, r1, r3
     52e:	f09c 0f00 	teq	ip, #0
     532:	bf18      	it	ne
     534:	f04e 0e01 	orrne.w	lr, lr, #1
     538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     53c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     544:	d204      	bcs.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     54a:	416d      	adcs	r5, r5
     54c:	eb46 0606 	adc.w	r6, r6, r6
     550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     55c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     568:	bf88      	it	hi
     56a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     56e:	d81e      	bhi.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     574:	bf08      	it	eq
     576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     57a:	f150 0000 	adcs.w	r0, r0, #0
     57e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     588:	ea46 0101 	orr.w	r1, r6, r1
     58c:	ea40 0002 	orr.w	r0, r0, r2
     590:	ea81 0103 	eor.w	r1, r1, r3
     594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     598:	bfc2      	ittt	gt
     59a:	ebd4 050c 	rsbsgt	r5, r4, ip
     59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5a2:	bd70      	popgt	{r4, r5, r6, pc}
     5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a8:	f04f 0e00 	mov.w	lr, #0
     5ac:	3c01      	subs	r4, #1
     5ae:	f300 80ab 	bgt.w	708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
     5b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5b6:	bfde      	ittt	le
     5b8:	2000      	movle	r0, #0
     5ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5be:	bd70      	pople	{r4, r5, r6, pc}
     5c0:	f1c4 0400 	rsb	r4, r4, #0
     5c4:	3c20      	subs	r4, #32
     5c6:	da35      	bge.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
     5c8:	340c      	adds	r4, #12
     5ca:	dc1b      	bgt.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0520 	rsb	r5, r4, #32
     5d4:	fa00 f305 	lsl.w	r3, r0, r5
     5d8:	fa20 f004 	lsr.w	r0, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea40 0002 	orr.w	r0, r0, r2
     5e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f0:	fa21 f604 	lsr.w	r6, r1, r4
     5f4:	eb42 0106 	adc.w	r1, r2, r6
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 040c 	rsb	r4, r4, #12
     608:	f1c4 0520 	rsb	r5, r4, #32
     60c:	fa00 f304 	lsl.w	r3, r0, r4
     610:	fa20 f005 	lsr.w	r0, r0, r5
     614:	fa01 f204 	lsl.w	r2, r1, r4
     618:	ea40 0002 	orr.w	r0, r0, r2
     61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     624:	f141 0100 	adc.w	r1, r1, #0
     628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     62c:	bf08      	it	eq
     62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     632:	bd70      	pop	{r4, r5, r6, pc}
     634:	f1c4 0520 	rsb	r5, r4, #32
     638:	fa00 f205 	lsl.w	r2, r0, r5
     63c:	ea4e 0e02 	orr.w	lr, lr, r2
     640:	fa20 f304 	lsr.w	r3, r0, r4
     644:	fa01 f205 	lsl.w	r2, r1, r5
     648:	ea43 0302 	orr.w	r3, r3, r2
     64c:	fa21 f004 	lsr.w	r0, r1, r4
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	fa21 f204 	lsr.w	r2, r1, r4
     658:	ea20 0002 	bic.w	r0, r0, r2
     65c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     664:	bf08      	it	eq
     666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	f094 0f00 	teq	r4, #0
     670:	d10f      	bne.n	692 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1aa>
     672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     676:	0040      	lsls	r0, r0, #1
     678:	eb41 0101 	adc.w	r1, r1, r1
     67c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     680:	bf08      	it	eq
     682:	3c01      	subeq	r4, #1
     684:	d0f7      	beq.n	676 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18e>
     686:	ea41 0106 	orr.w	r1, r1, r6
     68a:	f095 0f00 	teq	r5, #0
     68e:	bf18      	it	ne
     690:	4770      	bxne	lr
     692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     696:	0052      	lsls	r2, r2, #1
     698:	eb43 0303 	adc.w	r3, r3, r3
     69c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a0:	bf08      	it	eq
     6a2:	3d01      	subeq	r5, #1
     6a4:	d0f7      	beq.n	696 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ae>
     6a6:	ea43 0306 	orr.w	r3, r3, r6
     6aa:	4770      	bx	lr
     6ac:	ea94 0f0c 	teq	r4, ip
     6b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6b4:	bf18      	it	ne
     6b6:	ea95 0f0c 	teqne	r5, ip
     6ba:	d00c      	beq.n	6d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ee>
     6bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c0:	bf18      	it	ne
     6c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6c6:	d1d1      	bne.n	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     6c8:	ea81 0103 	eor.w	r1, r1, r3
     6cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d0:	f04f 0000 	mov.w	r0, #0
     6d4:	bd70      	pop	{r4, r5, r6, pc}
     6d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6da:	bf06      	itte	eq
     6dc:	4610      	moveq	r0, r2
     6de:	4619      	moveq	r1, r3
     6e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6e4:	d019      	beq.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6e6:	ea94 0f0c 	teq	r4, ip
     6ea:	d102      	bne.n	6f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20a>
     6ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f0:	d113      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6f2:	ea95 0f0c 	teq	r5, ip
     6f6:	d105      	bne.n	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     6f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6fc:	bf1c      	itt	ne
     6fe:	4610      	movne	r0, r2
     700:	4619      	movne	r1, r3
     702:	d10a      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     704:	ea81 0103 	eor.w	r1, r1, r3
     708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     70c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     714:	f04f 0000 	mov.w	r0, #0
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     71e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     722:	bd70      	pop	{r4, r5, r6, pc}

00000724 <__aeabi_ddiv>:
     724:	b570      	push	{r4, r5, r6, lr}
     726:	f04f 0cff 	mov.w	ip, #255	; 0xff
     72a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     72e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     732:	bf1d      	ittte	ne
     734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     738:	ea94 0f0c 	teqne	r4, ip
     73c:	ea95 0f0c 	teqne	r5, ip
     740:	f000 f8a7 	bleq	892 <CONFIG_ISR_STACK_SIZE+0x92>
     744:	eba4 0405 	sub.w	r4, r4, r5
     748:	ea81 0e03 	eor.w	lr, r1, r3
     74c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     750:	ea4f 3101 	mov.w	r1, r1, lsl #12
     754:	f000 8088 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     758:	ea4f 3303 	mov.w	r3, r3, lsl #12
     75c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     768:	ea4f 2202 	mov.w	r2, r2, lsl #8
     76c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     774:	ea4f 2600 	mov.w	r6, r0, lsl #8
     778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     77c:	429d      	cmp	r5, r3
     77e:	bf08      	it	eq
     780:	4296      	cmpeq	r6, r2
     782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     786:	f504 7440 	add.w	r4, r4, #768	; 0x300
     78a:	d202      	bcs.n	792 <__aeabi_ddiv+0x6e>
     78c:	085b      	lsrs	r3, r3, #1
     78e:	ea4f 0232 	mov.w	r2, r2, rrx
     792:	1ab6      	subs	r6, r6, r2
     794:	eb65 0503 	sbc.w	r5, r5, r3
     798:	085b      	lsrs	r3, r3, #1
     79a:	ea4f 0232 	mov.w	r2, r2, rrx
     79e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 000c 	orrcs.w	r0, r0, ip
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d0:	085b      	lsrs	r3, r3, #1
     7d2:	ea4f 0232 	mov.w	r2, r2, rrx
     7d6:	ebb6 0e02 	subs.w	lr, r6, r2
     7da:	eb75 0e03 	sbcs.w	lr, r5, r3
     7de:	bf22      	ittt	cs
     7e0:	1ab6      	subcs	r6, r6, r2
     7e2:	4675      	movcs	r5, lr
     7e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	ea4f 0232 	mov.w	r2, r2, rrx
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     800:	ea55 0e06 	orrs.w	lr, r5, r6
     804:	d018      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     806:	ea4f 1505 	mov.w	r5, r5, lsl #4
     80a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     80e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     81a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     81e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     822:	d1c0      	bne.n	7a6 <__aeabi_ddiv+0x82>
     824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     828:	d10b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     82a:	ea41 0100 	orr.w	r1, r1, r0
     82e:	f04f 0000 	mov.w	r0, #0
     832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     836:	e7b6      	b.n	7a6 <__aeabi_ddiv+0x82>
     838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     83c:	bf04      	itt	eq
     83e:	4301      	orreq	r1, r0
     840:	2000      	moveq	r0, #0
     842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     846:	bf88      	it	hi
     848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     84c:	f63f aeaf 	bhi.w	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     850:	ebb5 0c03 	subs.w	ip, r5, r3
     854:	bf04      	itt	eq
     856:	ebb6 0c02 	subseq.w	ip, r6, r2
     85a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     85e:	f150 0000 	adcs.w	r0, r0, #0
     862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     86c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     874:	bfc2      	ittt	gt
     876:	ebd4 050c 	rsbsgt	r5, r4, ip
     87a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     87e:	bd70      	popgt	{r4, r5, r6, pc}
     880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     884:	f04f 0e00 	mov.w	lr, #0
     888:	3c01      	subs	r4, #1
     88a:	e690      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     88c:	ea45 0e06 	orr.w	lr, r5, r6
     890:	e68d      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     896:	ea94 0f0c 	teq	r4, ip
     89a:	bf08      	it	eq
     89c:	ea95 0f0c 	teqeq	r5, ip
     8a0:	f43f af3b 	beq.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8a4:	ea94 0f0c 	teq	r4, ip
     8a8:	d10a      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8ae:	f47f af34 	bne.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8b2:	ea95 0f0c 	teq	r5, ip
     8b6:	f47f af25 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	e72c      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8c0:	ea95 0f0c 	teq	r5, ip
     8c4:	d106      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ca:	f43f aefd 	beq.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8ce:	4610      	mov	r0, r2
     8d0:	4619      	mov	r1, r3
     8d2:	e722      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d8:	bf18      	it	ne
     8da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8de:	f47f aec5 	bne.w	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     8e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8e6:	f47f af0d 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8ee:	f47f aeeb 	bne.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8f2:	e712      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>

000008f4 <__gedf2>:
     8f4:	f04f 3cff 	mov.w	ip, #4294967295
     8f8:	e006      	b.n	908 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__ledf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	e002      	b.n	908 <__cmpdf2+0x4>
     902:	bf00      	nop

00000904 <__cmpdf2>:
     904:	f04f 0c01 	mov.w	ip, #1
     908:	f84d cd04 	str.w	ip, [sp, #-4]!
     90c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     918:	bf18      	it	ne
     91a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     91e:	d01b      	beq.n	958 <__cmpdf2+0x54>
     920:	b001      	add	sp, #4
     922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     926:	bf0c      	ite	eq
     928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     92c:	ea91 0f03 	teqne	r1, r3
     930:	bf02      	ittt	eq
     932:	ea90 0f02 	teqeq	r0, r2
     936:	2000      	moveq	r0, #0
     938:	4770      	bxeq	lr
     93a:	f110 0f00 	cmn.w	r0, #0
     93e:	ea91 0f03 	teq	r1, r3
     942:	bf58      	it	pl
     944:	4299      	cmppl	r1, r3
     946:	bf08      	it	eq
     948:	4290      	cmpeq	r0, r2
     94a:	bf2c      	ite	cs
     94c:	17d8      	asrcs	r0, r3, #31
     94e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     952:	f040 0001 	orr.w	r0, r0, #1
     956:	4770      	bx	lr
     958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     95c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     960:	d102      	bne.n	968 <__cmpdf2+0x64>
     962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     966:	d107      	bne.n	978 <__cmpdf2+0x74>
     968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     96c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     970:	d1d6      	bne.n	920 <__cmpdf2+0x1c>
     972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     976:	d0d3      	beq.n	920 <__cmpdf2+0x1c>
     978:	f85d 0b04 	ldr.w	r0, [sp], #4
     97c:	4770      	bx	lr
     97e:	bf00      	nop

00000980 <__aeabi_cdrcmple>:
     980:	4684      	mov	ip, r0
     982:	4610      	mov	r0, r2
     984:	4662      	mov	r2, ip
     986:	468c      	mov	ip, r1
     988:	4619      	mov	r1, r3
     98a:	4663      	mov	r3, ip
     98c:	e000      	b.n	990 <__aeabi_cdcmpeq>
     98e:	bf00      	nop

00000990 <__aeabi_cdcmpeq>:
     990:	b501      	push	{r0, lr}
     992:	f7ff ffb7 	bl	904 <__cmpdf2>
     996:	2800      	cmp	r0, #0
     998:	bf48      	it	mi
     99a:	f110 0f00 	cmnmi.w	r0, #0
     99e:	bd01      	pop	{r0, pc}

000009a0 <__aeabi_dcmpeq>:
     9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9a4:	f7ff fff4 	bl	990 <__aeabi_cdcmpeq>
     9a8:	bf0c      	ite	eq
     9aa:	2001      	moveq	r0, #1
     9ac:	2000      	movne	r0, #0
     9ae:	f85d fb08 	ldr.w	pc, [sp], #8
     9b2:	bf00      	nop

000009b4 <__aeabi_dcmplt>:
     9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b8:	f7ff ffea 	bl	990 <__aeabi_cdcmpeq>
     9bc:	bf34      	ite	cc
     9be:	2001      	movcc	r0, #1
     9c0:	2000      	movcs	r0, #0
     9c2:	f85d fb08 	ldr.w	pc, [sp], #8
     9c6:	bf00      	nop

000009c8 <__aeabi_dcmple>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff ffe0 	bl	990 <__aeabi_cdcmpeq>
     9d0:	bf94      	ite	ls
     9d2:	2001      	movls	r0, #1
     9d4:	2000      	movhi	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmpge>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffce 	bl	980 <__aeabi_cdrcmple>
     9e4:	bf94      	ite	ls
     9e6:	2001      	movls	r0, #1
     9e8:	2000      	movhi	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmpgt>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffc4 	bl	980 <__aeabi_cdrcmple>
     9f8:	bf34      	ite	cc
     9fa:	2001      	movcc	r0, #1
     9fc:	2000      	movcs	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_d2iz>:
     a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a0c:	d215      	bcs.n	a3a <__aeabi_d2iz+0x36>
     a0e:	d511      	bpl.n	a34 <__aeabi_d2iz+0x30>
     a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a18:	d912      	bls.n	a40 <__aeabi_d2iz+0x3c>
     a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a2a:	fa23 f002 	lsr.w	r0, r3, r2
     a2e:	bf18      	it	ne
     a30:	4240      	negne	r0, r0
     a32:	4770      	bx	lr
     a34:	f04f 0000 	mov.w	r0, #0
     a38:	4770      	bx	lr
     a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a3e:	d105      	bne.n	a4c <__aeabi_d2iz+0x48>
     a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a44:	bf08      	it	eq
     a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a4a:	4770      	bx	lr
     a4c:	f04f 0000 	mov.w	r0, #0
     a50:	4770      	bx	lr
     a52:	bf00      	nop

00000a54 <__aeabi_d2f>:
     a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a5c:	bf24      	itt	cs
     a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a66:	d90d      	bls.n	a84 <__aeabi_d2f+0x30>
     a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a7c:	bf08      	it	eq
     a7e:	f020 0001 	biceq.w	r0, r0, #1
     a82:	4770      	bx	lr
     a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a88:	d121      	bne.n	ace <__aeabi_d2f+0x7a>
     a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a8e:	bfbc      	itt	lt
     a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a94:	4770      	bxlt	lr
     a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a9e:	f1c2 0218 	rsb	r2, r2, #24
     aa2:	f1c2 0c20 	rsb	ip, r2, #32
     aa6:	fa10 f30c 	lsls.w	r3, r0, ip
     aaa:	fa20 f002 	lsr.w	r0, r0, r2
     aae:	bf18      	it	ne
     ab0:	f040 0001 	orrne.w	r0, r0, #1
     ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     abc:	fa03 fc0c 	lsl.w	ip, r3, ip
     ac0:	ea40 000c 	orr.w	r0, r0, ip
     ac4:	fa23 f302 	lsr.w	r3, r3, r2
     ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     acc:	e7cc      	b.n	a68 <__aeabi_d2f+0x14>
     ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
     ad2:	d107      	bne.n	ae4 <__aeabi_d2f+0x90>
     ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ad8:	bf1e      	ittt	ne
     ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ae2:	4770      	bxne	lr
     ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <__aeabi_frsub>:
     af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     af8:	e002      	b.n	b00 <__addsf3>
     afa:	bf00      	nop

00000afc <__aeabi_fsub>:
     afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b00 <__addsf3>:
     b00:	0042      	lsls	r2, r0, #1
     b02:	bf1f      	itttt	ne
     b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b08:	ea92 0f03 	teqne	r2, r3
     b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b14:	d06a      	beq.n	bec <__addsf3+0xec>
     b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b1e:	bfc1      	itttt	gt
     b20:	18d2      	addgt	r2, r2, r3
     b22:	4041      	eorgt	r1, r0
     b24:	4048      	eorgt	r0, r1
     b26:	4041      	eorgt	r1, r0
     b28:	bfb8      	it	lt
     b2a:	425b      	neglt	r3, r3
     b2c:	2b19      	cmp	r3, #25
     b2e:	bf88      	it	hi
     b30:	4770      	bxhi	lr
     b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3e:	bf18      	it	ne
     b40:	4240      	negne	r0, r0
     b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b4e:	bf18      	it	ne
     b50:	4249      	negne	r1, r1
     b52:	ea92 0f03 	teq	r2, r3
     b56:	d03f      	beq.n	bd8 <__addsf3+0xd8>
     b58:	f1a2 0201 	sub.w	r2, r2, #1
     b5c:	fa41 fc03 	asr.w	ip, r1, r3
     b60:	eb10 000c 	adds.w	r0, r0, ip
     b64:	f1c3 0320 	rsb	r3, r3, #32
     b68:	fa01 f103 	lsl.w	r1, r1, r3
     b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b70:	d502      	bpl.n	b78 <__addsf3+0x78>
     b72:	4249      	negs	r1, r1
     b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b7c:	d313      	bcc.n	ba6 <__addsf3+0xa6>
     b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b82:	d306      	bcc.n	b92 <__addsf3+0x92>
     b84:	0840      	lsrs	r0, r0, #1
     b86:	ea4f 0131 	mov.w	r1, r1, rrx
     b8a:	f102 0201 	add.w	r2, r2, #1
     b8e:	2afe      	cmp	r2, #254	; 0xfe
     b90:	d251      	bcs.n	c36 <__addsf3+0x136>
     b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b9a:	bf08      	it	eq
     b9c:	f020 0001 	biceq.w	r0, r0, #1
     ba0:	ea40 0003 	orr.w	r0, r0, r3
     ba4:	4770      	bx	lr
     ba6:	0049      	lsls	r1, r1, #1
     ba8:	eb40 0000 	adc.w	r0, r0, r0
     bac:	3a01      	subs	r2, #1
     bae:	bf28      	it	cs
     bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bb4:	d2ed      	bcs.n	b92 <__addsf3+0x92>
     bb6:	fab0 fc80 	clz	ip, r0
     bba:	f1ac 0c08 	sub.w	ip, ip, #8
     bbe:	ebb2 020c 	subs.w	r2, r2, ip
     bc2:	fa00 f00c 	lsl.w	r0, r0, ip
     bc6:	bfaa      	itet	ge
     bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bcc:	4252      	neglt	r2, r2
     bce:	4318      	orrge	r0, r3
     bd0:	bfbc      	itt	lt
     bd2:	40d0      	lsrlt	r0, r2
     bd4:	4318      	orrlt	r0, r3
     bd6:	4770      	bx	lr
     bd8:	f092 0f00 	teq	r2, #0
     bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     be0:	bf06      	itte	eq
     be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     be6:	3201      	addeq	r2, #1
     be8:	3b01      	subne	r3, #1
     bea:	e7b5      	b.n	b58 <__addsf3+0x58>
     bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bf4:	bf18      	it	ne
     bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bfa:	d021      	beq.n	c40 <__addsf3+0x140>
     bfc:	ea92 0f03 	teq	r2, r3
     c00:	d004      	beq.n	c0c <__addsf3+0x10c>
     c02:	f092 0f00 	teq	r2, #0
     c06:	bf08      	it	eq
     c08:	4608      	moveq	r0, r1
     c0a:	4770      	bx	lr
     c0c:	ea90 0f01 	teq	r0, r1
     c10:	bf1c      	itt	ne
     c12:	2000      	movne	r0, #0
     c14:	4770      	bxne	lr
     c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c1a:	d104      	bne.n	c26 <__addsf3+0x126>
     c1c:	0040      	lsls	r0, r0, #1
     c1e:	bf28      	it	cs
     c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c24:	4770      	bx	lr
     c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c2a:	bf3c      	itt	cc
     c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c30:	4770      	bxcc	lr
     c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c3e:	4770      	bx	lr
     c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c44:	bf16      	itet	ne
     c46:	4608      	movne	r0, r1
     c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c4c:	4601      	movne	r1, r0
     c4e:	0242      	lsls	r2, r0, #9
     c50:	bf06      	itte	eq
     c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c56:	ea90 0f01 	teqeq	r0, r1
     c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c5e:	4770      	bx	lr

00000c60 <__aeabi_ui2f>:
     c60:	f04f 0300 	mov.w	r3, #0
     c64:	e004      	b.n	c70 <__aeabi_i2f+0x8>
     c66:	bf00      	nop

00000c68 <__aeabi_i2f>:
     c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c6c:	bf48      	it	mi
     c6e:	4240      	negmi	r0, r0
     c70:	ea5f 0c00 	movs.w	ip, r0
     c74:	bf08      	it	eq
     c76:	4770      	bxeq	lr
     c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c7c:	4601      	mov	r1, r0
     c7e:	f04f 0000 	mov.w	r0, #0
     c82:	e01c      	b.n	cbe <__aeabi_l2f+0x2a>

00000c84 <__aeabi_ul2f>:
     c84:	ea50 0201 	orrs.w	r2, r0, r1
     c88:	bf08      	it	eq
     c8a:	4770      	bxeq	lr
     c8c:	f04f 0300 	mov.w	r3, #0
     c90:	e00a      	b.n	ca8 <__aeabi_l2f+0x14>
     c92:	bf00      	nop

00000c94 <__aeabi_l2f>:
     c94:	ea50 0201 	orrs.w	r2, r0, r1
     c98:	bf08      	it	eq
     c9a:	4770      	bxeq	lr
     c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ca0:	d502      	bpl.n	ca8 <__aeabi_l2f+0x14>
     ca2:	4240      	negs	r0, r0
     ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ca8:	ea5f 0c01 	movs.w	ip, r1
     cac:	bf02      	ittt	eq
     cae:	4684      	moveq	ip, r0
     cb0:	4601      	moveq	r1, r0
     cb2:	2000      	moveq	r0, #0
     cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     cb8:	bf08      	it	eq
     cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     cc2:	fabc f28c 	clz	r2, ip
     cc6:	3a08      	subs	r2, #8
     cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ccc:	db10      	blt.n	cf0 <__aeabi_l2f+0x5c>
     cce:	fa01 fc02 	lsl.w	ip, r1, r2
     cd2:	4463      	add	r3, ip
     cd4:	fa00 fc02 	lsl.w	ip, r0, r2
     cd8:	f1c2 0220 	rsb	r2, r2, #32
     cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ce0:	fa20 f202 	lsr.w	r2, r0, r2
     ce4:	eb43 0002 	adc.w	r0, r3, r2
     ce8:	bf08      	it	eq
     cea:	f020 0001 	biceq.w	r0, r0, #1
     cee:	4770      	bx	lr
     cf0:	f102 0220 	add.w	r2, r2, #32
     cf4:	fa01 fc02 	lsl.w	ip, r1, r2
     cf8:	f1c2 0220 	rsb	r2, r2, #32
     cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d00:	fa21 f202 	lsr.w	r2, r1, r2
     d04:	eb43 0002 	adc.w	r0, r3, r2
     d08:	bf08      	it	eq
     d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d0e:	4770      	bx	lr

00000d10 <__aeabi_fmul>:
     d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d18:	bf1e      	ittt	ne
     d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d1e:	ea92 0f0c 	teqne	r2, ip
     d22:	ea93 0f0c 	teqne	r3, ip
     d26:	d06f      	beq.n	e08 <__aeabi_fmul+0xf8>
     d28:	441a      	add	r2, r3
     d2a:	ea80 0c01 	eor.w	ip, r0, r1
     d2e:	0240      	lsls	r0, r0, #9
     d30:	bf18      	it	ne
     d32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d36:	d01e      	beq.n	d76 <__aeabi_fmul+0x66>
     d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d44:	fba0 3101 	umull	r3, r1, r0, r1
     d48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d50:	bf3e      	ittt	cc
     d52:	0049      	lslcc	r1, r1, #1
     d54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d58:	005b      	lslcc	r3, r3, #1
     d5a:	ea40 0001 	orr.w	r0, r0, r1
     d5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d62:	2afd      	cmp	r2, #253	; 0xfd
     d64:	d81d      	bhi.n	da2 <__aeabi_fmul+0x92>
     d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d6e:	bf08      	it	eq
     d70:	f020 0001 	biceq.w	r0, r0, #1
     d74:	4770      	bx	lr
     d76:	f090 0f00 	teq	r0, #0
     d7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d7e:	bf08      	it	eq
     d80:	0249      	lsleq	r1, r1, #9
     d82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d8a:	3a7f      	subs	r2, #127	; 0x7f
     d8c:	bfc2      	ittt	gt
     d8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d96:	4770      	bxgt	lr
     d98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d9c:	f04f 0300 	mov.w	r3, #0
     da0:	3a01      	subs	r2, #1
     da2:	dc5d      	bgt.n	e60 <__aeabi_fmul+0x150>
     da4:	f112 0f19 	cmn.w	r2, #25
     da8:	bfdc      	itt	le
     daa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     dae:	4770      	bxle	lr
     db0:	f1c2 0200 	rsb	r2, r2, #0
     db4:	0041      	lsls	r1, r0, #1
     db6:	fa21 f102 	lsr.w	r1, r1, r2
     dba:	f1c2 0220 	rsb	r2, r2, #32
     dbe:	fa00 fc02 	lsl.w	ip, r0, r2
     dc2:	ea5f 0031 	movs.w	r0, r1, rrx
     dc6:	f140 0000 	adc.w	r0, r0, #0
     dca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     dce:	bf08      	it	eq
     dd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dd4:	4770      	bx	lr
     dd6:	f092 0f00 	teq	r2, #0
     dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dde:	bf02      	ittt	eq
     de0:	0040      	lsleq	r0, r0, #1
     de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     de6:	3a01      	subeq	r2, #1
     de8:	d0f9      	beq.n	dde <__aeabi_fmul+0xce>
     dea:	ea40 000c 	orr.w	r0, r0, ip
     dee:	f093 0f00 	teq	r3, #0
     df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     df6:	bf02      	ittt	eq
     df8:	0049      	lsleq	r1, r1, #1
     dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     dfe:	3b01      	subeq	r3, #1
     e00:	d0f9      	beq.n	df6 <__aeabi_fmul+0xe6>
     e02:	ea41 010c 	orr.w	r1, r1, ip
     e06:	e78f      	b.n	d28 <__aeabi_fmul+0x18>
     e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e0c:	ea92 0f0c 	teq	r2, ip
     e10:	bf18      	it	ne
     e12:	ea93 0f0c 	teqne	r3, ip
     e16:	d00a      	beq.n	e2e <__aeabi_fmul+0x11e>
     e18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e1c:	bf18      	it	ne
     e1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e22:	d1d8      	bne.n	dd6 <__aeabi_fmul+0xc6>
     e24:	ea80 0001 	eor.w	r0, r0, r1
     e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e2c:	4770      	bx	lr
     e2e:	f090 0f00 	teq	r0, #0
     e32:	bf17      	itett	ne
     e34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e38:	4608      	moveq	r0, r1
     e3a:	f091 0f00 	teqne	r1, #0
     e3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e42:	d014      	beq.n	e6e <__aeabi_fmul+0x15e>
     e44:	ea92 0f0c 	teq	r2, ip
     e48:	d101      	bne.n	e4e <__aeabi_fmul+0x13e>
     e4a:	0242      	lsls	r2, r0, #9
     e4c:	d10f      	bne.n	e6e <__aeabi_fmul+0x15e>
     e4e:	ea93 0f0c 	teq	r3, ip
     e52:	d103      	bne.n	e5c <__aeabi_fmul+0x14c>
     e54:	024b      	lsls	r3, r1, #9
     e56:	bf18      	it	ne
     e58:	4608      	movne	r0, r1
     e5a:	d108      	bne.n	e6e <__aeabi_fmul+0x15e>
     e5c:	ea80 0001 	eor.w	r0, r0, r1
     e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e6c:	4770      	bx	lr
     e6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e76:	4770      	bx	lr

00000e78 <__aeabi_fdiv>:
     e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e80:	bf1e      	ittt	ne
     e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e86:	ea92 0f0c 	teqne	r2, ip
     e8a:	ea93 0f0c 	teqne	r3, ip
     e8e:	d069      	beq.n	f64 <__aeabi_fdiv+0xec>
     e90:	eba2 0203 	sub.w	r2, r2, r3
     e94:	ea80 0c01 	eor.w	ip, r0, r1
     e98:	0249      	lsls	r1, r1, #9
     e9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e9e:	d037      	beq.n	f10 <__aeabi_fdiv+0x98>
     ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ea4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ea8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     eac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     eb0:	428b      	cmp	r3, r1
     eb2:	bf38      	it	cc
     eb4:	005b      	lslcc	r3, r3, #1
     eb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     eba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ebe:	428b      	cmp	r3, r1
     ec0:	bf24      	itt	cs
     ec2:	1a5b      	subcs	r3, r3, r1
     ec4:	ea40 000c 	orrcs.w	r0, r0, ip
     ec8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     ecc:	bf24      	itt	cs
     ece:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     ed2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     ed6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     eda:	bf24      	itt	cs
     edc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     ee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ee4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ee8:	bf24      	itt	cs
     eea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     eee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     ef2:	011b      	lsls	r3, r3, #4
     ef4:	bf18      	it	ne
     ef6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     efa:	d1e0      	bne.n	ebe <__aeabi_fdiv+0x46>
     efc:	2afd      	cmp	r2, #253	; 0xfd
     efe:	f63f af50 	bhi.w	da2 <__aeabi_fmul+0x92>
     f02:	428b      	cmp	r3, r1
     f04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f08:	bf08      	it	eq
     f0a:	f020 0001 	biceq.w	r0, r0, #1
     f0e:	4770      	bx	lr
     f10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f18:	327f      	adds	r2, #127	; 0x7f
     f1a:	bfc2      	ittt	gt
     f1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f24:	4770      	bxgt	lr
     f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f2a:	f04f 0300 	mov.w	r3, #0
     f2e:	3a01      	subs	r2, #1
     f30:	e737      	b.n	da2 <__aeabi_fmul+0x92>
     f32:	f092 0f00 	teq	r2, #0
     f36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f3a:	bf02      	ittt	eq
     f3c:	0040      	lsleq	r0, r0, #1
     f3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f42:	3a01      	subeq	r2, #1
     f44:	d0f9      	beq.n	f3a <__aeabi_fdiv+0xc2>
     f46:	ea40 000c 	orr.w	r0, r0, ip
     f4a:	f093 0f00 	teq	r3, #0
     f4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f52:	bf02      	ittt	eq
     f54:	0049      	lsleq	r1, r1, #1
     f56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f5a:	3b01      	subeq	r3, #1
     f5c:	d0f9      	beq.n	f52 <__aeabi_fdiv+0xda>
     f5e:	ea41 010c 	orr.w	r1, r1, ip
     f62:	e795      	b.n	e90 <__aeabi_fdiv+0x18>
     f64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f68:	ea92 0f0c 	teq	r2, ip
     f6c:	d108      	bne.n	f80 <__aeabi_fdiv+0x108>
     f6e:	0242      	lsls	r2, r0, #9
     f70:	f47f af7d 	bne.w	e6e <__aeabi_fmul+0x15e>
     f74:	ea93 0f0c 	teq	r3, ip
     f78:	f47f af70 	bne.w	e5c <__aeabi_fmul+0x14c>
     f7c:	4608      	mov	r0, r1
     f7e:	e776      	b.n	e6e <__aeabi_fmul+0x15e>
     f80:	ea93 0f0c 	teq	r3, ip
     f84:	d104      	bne.n	f90 <__aeabi_fdiv+0x118>
     f86:	024b      	lsls	r3, r1, #9
     f88:	f43f af4c 	beq.w	e24 <__aeabi_fmul+0x114>
     f8c:	4608      	mov	r0, r1
     f8e:	e76e      	b.n	e6e <__aeabi_fmul+0x15e>
     f90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f94:	bf18      	it	ne
     f96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f9a:	d1ca      	bne.n	f32 <__aeabi_fdiv+0xba>
     f9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fa0:	f47f af5c 	bne.w	e5c <__aeabi_fmul+0x14c>
     fa4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     fa8:	f47f af3c 	bne.w	e24 <__aeabi_fmul+0x114>
     fac:	e75f      	b.n	e6e <__aeabi_fmul+0x15e>
     fae:	bf00      	nop

00000fb0 <__gesf2>:
     fb0:	f04f 3cff 	mov.w	ip, #4294967295
     fb4:	e006      	b.n	fc4 <__cmpsf2+0x4>
     fb6:	bf00      	nop

00000fb8 <__lesf2>:
     fb8:	f04f 0c01 	mov.w	ip, #1
     fbc:	e002      	b.n	fc4 <__cmpsf2+0x4>
     fbe:	bf00      	nop

00000fc0 <__cmpsf2>:
     fc0:	f04f 0c01 	mov.w	ip, #1
     fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
     fc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
     fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fd4:	bf18      	it	ne
     fd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     fda:	d011      	beq.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
     fdc:	b001      	add	sp, #4
     fde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     fe2:	bf18      	it	ne
     fe4:	ea90 0f01 	teqne	r0, r1
     fe8:	bf58      	it	pl
     fea:	ebb2 0003 	subspl.w	r0, r2, r3
     fee:	bf88      	it	hi
     ff0:	17c8      	asrhi	r0, r1, #31
     ff2:	bf38      	it	cc
     ff4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     ff8:	bf18      	it	ne
     ffa:	f040 0001 	orrne.w	r0, r0, #1
     ffe:	4770      	bx	lr
    1000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1004:	d102      	bne.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    1006:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    100a:	d105      	bne.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    100c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1010:	d1e4      	bne.n	fdc <__cmpsf2+0x1c>
    1012:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    1016:	d0e1      	beq.n	fdc <__cmpsf2+0x1c>
    1018:	f85d 0b04 	ldr.w	r0, [sp], #4
    101c:	4770      	bx	lr
    101e:	bf00      	nop

00001020 <__aeabi_cfrcmple>:
    1020:	4684      	mov	ip, r0
    1022:	4608      	mov	r0, r1
    1024:	4661      	mov	r1, ip
    1026:	e7ff      	b.n	1028 <__aeabi_cfcmpeq>

00001028 <__aeabi_cfcmpeq>:
    1028:	b50f      	push	{r0, r1, r2, r3, lr}
    102a:	f7ff ffc9 	bl	fc0 <__cmpsf2>
    102e:	2800      	cmp	r0, #0
    1030:	bf48      	it	mi
    1032:	f110 0f00 	cmnmi.w	r0, #0
    1036:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001038 <__aeabi_fcmpeq>:
    1038:	f84d ed08 	str.w	lr, [sp, #-8]!
    103c:	f7ff fff4 	bl	1028 <__aeabi_cfcmpeq>
    1040:	bf0c      	ite	eq
    1042:	2001      	moveq	r0, #1
    1044:	2000      	movne	r0, #0
    1046:	f85d fb08 	ldr.w	pc, [sp], #8
    104a:	bf00      	nop

0000104c <__aeabi_fcmplt>:
    104c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1050:	f7ff ffea 	bl	1028 <__aeabi_cfcmpeq>
    1054:	bf34      	ite	cc
    1056:	2001      	movcc	r0, #1
    1058:	2000      	movcs	r0, #0
    105a:	f85d fb08 	ldr.w	pc, [sp], #8
    105e:	bf00      	nop

00001060 <__aeabi_fcmple>:
    1060:	f84d ed08 	str.w	lr, [sp, #-8]!
    1064:	f7ff ffe0 	bl	1028 <__aeabi_cfcmpeq>
    1068:	bf94      	ite	ls
    106a:	2001      	movls	r0, #1
    106c:	2000      	movhi	r0, #0
    106e:	f85d fb08 	ldr.w	pc, [sp], #8
    1072:	bf00      	nop

00001074 <__aeabi_fcmpge>:
    1074:	f84d ed08 	str.w	lr, [sp, #-8]!
    1078:	f7ff ffd2 	bl	1020 <__aeabi_cfrcmple>
    107c:	bf94      	ite	ls
    107e:	2001      	movls	r0, #1
    1080:	2000      	movhi	r0, #0
    1082:	f85d fb08 	ldr.w	pc, [sp], #8
    1086:	bf00      	nop

00001088 <__aeabi_fcmpgt>:
    1088:	f84d ed08 	str.w	lr, [sp, #-8]!
    108c:	f7ff ffc8 	bl	1020 <__aeabi_cfrcmple>
    1090:	bf34      	ite	cc
    1092:	2001      	movcc	r0, #1
    1094:	2000      	movcs	r0, #0
    1096:	f85d fb08 	ldr.w	pc, [sp], #8
    109a:	bf00      	nop

0000109c <__aeabi_f2iz>:
    109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10a4:	d30f      	bcc.n	10c6 <__aeabi_f2iz+0x2a>
    10a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10ae:	d90d      	bls.n	10cc <__aeabi_f2iz+0x30>
    10b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    10bc:	fa23 f002 	lsr.w	r0, r3, r2
    10c0:	bf18      	it	ne
    10c2:	4240      	negne	r0, r0
    10c4:	4770      	bx	lr
    10c6:	f04f 0000 	mov.w	r0, #0
    10ca:	4770      	bx	lr
    10cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    10d0:	d101      	bne.n	10d6 <__aeabi_f2iz+0x3a>
    10d2:	0242      	lsls	r2, r0, #9
    10d4:	d105      	bne.n	10e2 <__aeabi_f2iz+0x46>
    10d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    10da:	bf08      	it	eq
    10dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10e0:	4770      	bx	lr
    10e2:	f04f 0000 	mov.w	r0, #0
    10e6:	4770      	bx	lr

000010e8 <__aeabi_uldivmod>:
    10e8:	b953      	cbnz	r3, 1100 <__aeabi_uldivmod+0x18>
    10ea:	b94a      	cbnz	r2, 1100 <__aeabi_uldivmod+0x18>
    10ec:	2900      	cmp	r1, #0
    10ee:	bf08      	it	eq
    10f0:	2800      	cmpeq	r0, #0
    10f2:	bf1c      	itt	ne
    10f4:	f04f 31ff 	movne.w	r1, #4294967295
    10f8:	f04f 30ff 	movne.w	r0, #4294967295
    10fc:	f000 b9a8 	b.w	1450 <__aeabi_idiv0>
    1100:	f1ad 0c08 	sub.w	ip, sp, #8
    1104:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1108:	f000 f83e 	bl	1188 <__udivmoddi4>
    110c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1114:	b004      	add	sp, #16
    1116:	4770      	bx	lr

00001118 <__aeabi_d2lz>:
    1118:	b538      	push	{r3, r4, r5, lr}
    111a:	4605      	mov	r5, r0
    111c:	460c      	mov	r4, r1
    111e:	2200      	movs	r2, #0
    1120:	2300      	movs	r3, #0
    1122:	4628      	mov	r0, r5
    1124:	4621      	mov	r1, r4
    1126:	f7ff fc45 	bl	9b4 <__aeabi_dcmplt>
    112a:	b928      	cbnz	r0, 1138 <__aeabi_d2lz+0x20>
    112c:	4628      	mov	r0, r5
    112e:	4621      	mov	r1, r4
    1130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1134:	f000 b80a 	b.w	114c <__aeabi_d2ulz>
    1138:	4628      	mov	r0, r5
    113a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    113e:	f000 f805 	bl	114c <__aeabi_d2ulz>
    1142:	4240      	negs	r0, r0
    1144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1148:	bd38      	pop	{r3, r4, r5, pc}
    114a:	bf00      	nop

0000114c <__aeabi_d2ulz>:
    114c:	b5d0      	push	{r4, r6, r7, lr}
    114e:	2200      	movs	r2, #0
    1150:	4b0b      	ldr	r3, [pc, #44]	; (1180 <__aeabi_d2ulz+0x34>)
    1152:	4606      	mov	r6, r0
    1154:	460f      	mov	r7, r1
    1156:	f7ff f9bb 	bl	4d0 <__aeabi_dmul>
    115a:	f000 f97b 	bl	1454 <__aeabi_d2uiz>
    115e:	4604      	mov	r4, r0
    1160:	f7ff f93c 	bl	3dc <__aeabi_ui2d>
    1164:	2200      	movs	r2, #0
    1166:	4b07      	ldr	r3, [pc, #28]	; (1184 <__aeabi_d2ulz+0x38>)
    1168:	f7ff f9b2 	bl	4d0 <__aeabi_dmul>
    116c:	4602      	mov	r2, r0
    116e:	460b      	mov	r3, r1
    1170:	4630      	mov	r0, r6
    1172:	4639      	mov	r1, r7
    1174:	f7fe fff4 	bl	160 <__aeabi_dsub>
    1178:	f000 f96c 	bl	1454 <__aeabi_d2uiz>
    117c:	4621      	mov	r1, r4
    117e:	bdd0      	pop	{r4, r6, r7, pc}
    1180:	3df00000 	.word	0x3df00000
    1184:	41f00000 	.word	0x41f00000

00001188 <__udivmoddi4>:
    1188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    118c:	9e08      	ldr	r6, [sp, #32]
    118e:	460d      	mov	r5, r1
    1190:	4604      	mov	r4, r0
    1192:	468a      	mov	sl, r1
    1194:	2b00      	cmp	r3, #0
    1196:	d17f      	bne.n	1298 <__udivmoddi4+0x110>
    1198:	428a      	cmp	r2, r1
    119a:	4617      	mov	r7, r2
    119c:	d941      	bls.n	1222 <__udivmoddi4+0x9a>
    119e:	fab2 f282 	clz	r2, r2
    11a2:	b14a      	cbz	r2, 11b8 <__udivmoddi4+0x30>
    11a4:	f1c2 0120 	rsb	r1, r2, #32
    11a8:	fa05 f302 	lsl.w	r3, r5, r2
    11ac:	4097      	lsls	r7, r2
    11ae:	4094      	lsls	r4, r2
    11b0:	fa20 f101 	lsr.w	r1, r0, r1
    11b4:	ea41 0a03 	orr.w	sl, r1, r3
    11b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
    11bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    11c0:	fa1f f987 	uxth.w	r9, r7
    11c4:	fbba fef8 	udiv	lr, sl, r8
    11c8:	fb08 a31e 	mls	r3, r8, lr, sl
    11cc:	fb0e f109 	mul.w	r1, lr, r9
    11d0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    11d4:	4299      	cmp	r1, r3
    11d6:	d906      	bls.n	11e6 <__udivmoddi4+0x5e>
    11d8:	18fb      	adds	r3, r7, r3
    11da:	d202      	bcs.n	11e2 <__udivmoddi4+0x5a>
    11dc:	4299      	cmp	r1, r3
    11de:	f200 8124 	bhi.w	142a <__udivmoddi4+0x2a2>
    11e2:	f10e 3eff 	add.w	lr, lr, #4294967295
    11e6:	1a59      	subs	r1, r3, r1
    11e8:	b2a3      	uxth	r3, r4
    11ea:	fbb1 f0f8 	udiv	r0, r1, r8
    11ee:	fb08 1110 	mls	r1, r8, r0, r1
    11f2:	fb00 f909 	mul.w	r9, r0, r9
    11f6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    11fa:	45a1      	cmp	r9, r4
    11fc:	d905      	bls.n	120a <__udivmoddi4+0x82>
    11fe:	193c      	adds	r4, r7, r4
    1200:	d202      	bcs.n	1208 <__udivmoddi4+0x80>
    1202:	45a1      	cmp	r9, r4
    1204:	f200 810e 	bhi.w	1424 <__udivmoddi4+0x29c>
    1208:	3801      	subs	r0, #1
    120a:	eba4 0409 	sub.w	r4, r4, r9
    120e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    1212:	2100      	movs	r1, #0
    1214:	b11e      	cbz	r6, 121e <__udivmoddi4+0x96>
    1216:	40d4      	lsrs	r4, r2
    1218:	2300      	movs	r3, #0
    121a:	e9c6 4300 	strd	r4, r3, [r6]
    121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1222:	b902      	cbnz	r2, 1226 <__udivmoddi4+0x9e>
    1224:	deff      	udf	#255	; 0xff
    1226:	fab2 f282 	clz	r2, r2
    122a:	2a00      	cmp	r2, #0
    122c:	d14f      	bne.n	12ce <__udivmoddi4+0x146>
    122e:	1bcb      	subs	r3, r1, r7
    1230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1234:	fa1f f887 	uxth.w	r8, r7
    1238:	2101      	movs	r1, #1
    123a:	0c25      	lsrs	r5, r4, #16
    123c:	fbb3 fcfe 	udiv	ip, r3, lr
    1240:	fb0e 301c 	mls	r0, lr, ip, r3
    1244:	462b      	mov	r3, r5
    1246:	fb08 f90c 	mul.w	r9, r8, ip
    124a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    124e:	45a9      	cmp	r9, r5
    1250:	d90a      	bls.n	1268 <__udivmoddi4+0xe0>
    1252:	197d      	adds	r5, r7, r5
    1254:	bf2c      	ite	cs
    1256:	2301      	movcs	r3, #1
    1258:	2300      	movcc	r3, #0
    125a:	45a9      	cmp	r9, r5
    125c:	d902      	bls.n	1264 <__udivmoddi4+0xdc>
    125e:	2b00      	cmp	r3, #0
    1260:	f000 80d9 	beq.w	1416 <__udivmoddi4+0x28e>
    1264:	f10c 3cff 	add.w	ip, ip, #4294967295
    1268:	eba5 0509 	sub.w	r5, r5, r9
    126c:	b2a3      	uxth	r3, r4
    126e:	fbb5 f0fe 	udiv	r0, r5, lr
    1272:	fb0e 5510 	mls	r5, lr, r0, r5
    1276:	fb08 f800 	mul.w	r8, r8, r0
    127a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    127e:	45a0      	cmp	r8, r4
    1280:	d905      	bls.n	128e <__udivmoddi4+0x106>
    1282:	193c      	adds	r4, r7, r4
    1284:	d202      	bcs.n	128c <__udivmoddi4+0x104>
    1286:	45a0      	cmp	r8, r4
    1288:	f200 80c9 	bhi.w	141e <__udivmoddi4+0x296>
    128c:	3801      	subs	r0, #1
    128e:	eba4 0408 	sub.w	r4, r4, r8
    1292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1296:	e7bd      	b.n	1214 <__udivmoddi4+0x8c>
    1298:	428b      	cmp	r3, r1
    129a:	d908      	bls.n	12ae <__udivmoddi4+0x126>
    129c:	2e00      	cmp	r6, #0
    129e:	f000 80b1 	beq.w	1404 <__udivmoddi4+0x27c>
    12a2:	2100      	movs	r1, #0
    12a4:	e9c6 0500 	strd	r0, r5, [r6]
    12a8:	4608      	mov	r0, r1
    12aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12ae:	fab3 f183 	clz	r1, r3
    12b2:	2900      	cmp	r1, #0
    12b4:	d146      	bne.n	1344 <__udivmoddi4+0x1bc>
    12b6:	42ab      	cmp	r3, r5
    12b8:	f0c0 80a7 	bcc.w	140a <__udivmoddi4+0x282>
    12bc:	4282      	cmp	r2, r0
    12be:	f240 80a4 	bls.w	140a <__udivmoddi4+0x282>
    12c2:	4608      	mov	r0, r1
    12c4:	2e00      	cmp	r6, #0
    12c6:	d0aa      	beq.n	121e <__udivmoddi4+0x96>
    12c8:	e9c6 4a00 	strd	r4, sl, [r6]
    12cc:	e7a7      	b.n	121e <__udivmoddi4+0x96>
    12ce:	f1c2 0020 	rsb	r0, r2, #32
    12d2:	4097      	lsls	r7, r2
    12d4:	fa01 f302 	lsl.w	r3, r1, r2
    12d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    12dc:	40c1      	lsrs	r1, r0
    12de:	fa24 f500 	lsr.w	r5, r4, r0
    12e2:	fa1f f887 	uxth.w	r8, r7
    12e6:	4094      	lsls	r4, r2
    12e8:	431d      	orrs	r5, r3
    12ea:	fbb1 f0fe 	udiv	r0, r1, lr
    12ee:	0c2b      	lsrs	r3, r5, #16
    12f0:	fb0e 1110 	mls	r1, lr, r0, r1
    12f4:	fb00 fc08 	mul.w	ip, r0, r8
    12f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12fc:	459c      	cmp	ip, r3
    12fe:	d909      	bls.n	1314 <__udivmoddi4+0x18c>
    1300:	18fb      	adds	r3, r7, r3
    1302:	bf2c      	ite	cs
    1304:	2101      	movcs	r1, #1
    1306:	2100      	movcc	r1, #0
    1308:	459c      	cmp	ip, r3
    130a:	d902      	bls.n	1312 <__udivmoddi4+0x18a>
    130c:	2900      	cmp	r1, #0
    130e:	f000 8095 	beq.w	143c <__udivmoddi4+0x2b4>
    1312:	3801      	subs	r0, #1
    1314:	eba3 030c 	sub.w	r3, r3, ip
    1318:	b2ad      	uxth	r5, r5
    131a:	fbb3 f1fe 	udiv	r1, r3, lr
    131e:	fb0e 3311 	mls	r3, lr, r1, r3
    1322:	fb01 fc08 	mul.w	ip, r1, r8
    1326:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    132a:	45ac      	cmp	ip, r5
    132c:	d905      	bls.n	133a <__udivmoddi4+0x1b2>
    132e:	197d      	adds	r5, r7, r5
    1330:	d202      	bcs.n	1338 <__udivmoddi4+0x1b0>
    1332:	45ac      	cmp	ip, r5
    1334:	f200 8089 	bhi.w	144a <__udivmoddi4+0x2c2>
    1338:	3901      	subs	r1, #1
    133a:	eba5 030c 	sub.w	r3, r5, ip
    133e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1342:	e77a      	b.n	123a <__udivmoddi4+0xb2>
    1344:	f1c1 0420 	rsb	r4, r1, #32
    1348:	408b      	lsls	r3, r1
    134a:	fa02 f701 	lsl.w	r7, r2, r1
    134e:	fa05 fc01 	lsl.w	ip, r5, r1
    1352:	40e2      	lsrs	r2, r4
    1354:	fa20 f804 	lsr.w	r8, r0, r4
    1358:	40e5      	lsrs	r5, r4
    135a:	fa00 fe01 	lsl.w	lr, r0, r1
    135e:	4313      	orrs	r3, r2
    1360:	ea48 020c 	orr.w	r2, r8, ip
    1364:	ea4f 4813 	mov.w	r8, r3, lsr #16
    1368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    136c:	fa1f f983 	uxth.w	r9, r3
    1370:	fbb5 faf8 	udiv	sl, r5, r8
    1374:	fb08 551a 	mls	r5, r8, sl, r5
    1378:	fb0a f009 	mul.w	r0, sl, r9
    137c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    1380:	4560      	cmp	r0, ip
    1382:	d90a      	bls.n	139a <__udivmoddi4+0x212>
    1384:	eb13 0c0c 	adds.w	ip, r3, ip
    1388:	bf2c      	ite	cs
    138a:	2501      	movcs	r5, #1
    138c:	2500      	movcc	r5, #0
    138e:	4560      	cmp	r0, ip
    1390:	d901      	bls.n	1396 <__udivmoddi4+0x20e>
    1392:	2d00      	cmp	r5, #0
    1394:	d055      	beq.n	1442 <__udivmoddi4+0x2ba>
    1396:	f10a 3aff 	add.w	sl, sl, #4294967295
    139a:	ebac 0c00 	sub.w	ip, ip, r0
    139e:	b292      	uxth	r2, r2
    13a0:	fbbc f0f8 	udiv	r0, ip, r8
    13a4:	fb08 cc10 	mls	ip, r8, r0, ip
    13a8:	fb00 f909 	mul.w	r9, r0, r9
    13ac:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    13b0:	45e1      	cmp	r9, ip
    13b2:	d905      	bls.n	13c0 <__udivmoddi4+0x238>
    13b4:	eb13 0c0c 	adds.w	ip, r3, ip
    13b8:	d201      	bcs.n	13be <__udivmoddi4+0x236>
    13ba:	45e1      	cmp	r9, ip
    13bc:	d83b      	bhi.n	1436 <__udivmoddi4+0x2ae>
    13be:	3801      	subs	r0, #1
    13c0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    13c4:	ebac 0c09 	sub.w	ip, ip, r9
    13c8:	fba0 8907 	umull	r8, r9, r0, r7
    13cc:	45cc      	cmp	ip, r9
    13ce:	4645      	mov	r5, r8
    13d0:	464a      	mov	r2, r9
    13d2:	d302      	bcc.n	13da <__udivmoddi4+0x252>
    13d4:	d106      	bne.n	13e4 <__udivmoddi4+0x25c>
    13d6:	45c6      	cmp	lr, r8
    13d8:	d204      	bcs.n	13e4 <__udivmoddi4+0x25c>
    13da:	3801      	subs	r0, #1
    13dc:	ebb8 0507 	subs.w	r5, r8, r7
    13e0:	eb69 0203 	sbc.w	r2, r9, r3
    13e4:	b32e      	cbz	r6, 1432 <__udivmoddi4+0x2aa>
    13e6:	ebbe 0305 	subs.w	r3, lr, r5
    13ea:	eb6c 0c02 	sbc.w	ip, ip, r2
    13ee:	fa23 f201 	lsr.w	r2, r3, r1
    13f2:	fa0c f404 	lsl.w	r4, ip, r4
    13f6:	fa2c f301 	lsr.w	r3, ip, r1
    13fa:	2100      	movs	r1, #0
    13fc:	4314      	orrs	r4, r2
    13fe:	e9c6 4300 	strd	r4, r3, [r6]
    1402:	e70c      	b.n	121e <__udivmoddi4+0x96>
    1404:	4631      	mov	r1, r6
    1406:	4630      	mov	r0, r6
    1408:	e709      	b.n	121e <__udivmoddi4+0x96>
    140a:	1a84      	subs	r4, r0, r2
    140c:	eb65 0303 	sbc.w	r3, r5, r3
    1410:	2001      	movs	r0, #1
    1412:	469a      	mov	sl, r3
    1414:	e756      	b.n	12c4 <__udivmoddi4+0x13c>
    1416:	f1ac 0c02 	sub.w	ip, ip, #2
    141a:	443d      	add	r5, r7
    141c:	e724      	b.n	1268 <__udivmoddi4+0xe0>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e734      	b.n	128e <__udivmoddi4+0x106>
    1424:	3802      	subs	r0, #2
    1426:	443c      	add	r4, r7
    1428:	e6ef      	b.n	120a <__udivmoddi4+0x82>
    142a:	f1ae 0e02 	sub.w	lr, lr, #2
    142e:	443b      	add	r3, r7
    1430:	e6d9      	b.n	11e6 <__udivmoddi4+0x5e>
    1432:	4631      	mov	r1, r6
    1434:	e6f3      	b.n	121e <__udivmoddi4+0x96>
    1436:	3802      	subs	r0, #2
    1438:	449c      	add	ip, r3
    143a:	e7c1      	b.n	13c0 <__udivmoddi4+0x238>
    143c:	3802      	subs	r0, #2
    143e:	443b      	add	r3, r7
    1440:	e768      	b.n	1314 <__udivmoddi4+0x18c>
    1442:	f1aa 0a02 	sub.w	sl, sl, #2
    1446:	449c      	add	ip, r3
    1448:	e7a7      	b.n	139a <__udivmoddi4+0x212>
    144a:	3902      	subs	r1, #2
    144c:	443d      	add	r5, r7
    144e:	e774      	b.n	133a <__udivmoddi4+0x1b2>

00001450 <__aeabi_idiv0>:
    1450:	4770      	bx	lr
    1452:	bf00      	nop

00001454 <__aeabi_d2uiz>:
    1454:	004a      	lsls	r2, r1, #1
    1456:	d211      	bcs.n	147c <__aeabi_d2uiz+0x28>
    1458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    145c:	d211      	bcs.n	1482 <__aeabi_d2uiz+0x2e>
    145e:	d50d      	bpl.n	147c <__aeabi_d2uiz+0x28>
    1460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1468:	d40e      	bmi.n	1488 <__aeabi_d2uiz+0x34>
    146a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    146e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1476:	fa23 f002 	lsr.w	r0, r3, r2
    147a:	4770      	bx	lr
    147c:	f04f 0000 	mov.w	r0, #0
    1480:	4770      	bx	lr
    1482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1486:	d102      	bne.n	148e <__aeabi_d2uiz+0x3a>
    1488:	f04f 30ff 	mov.w	r0, #4294967295
    148c:	4770      	bx	lr
    148e:	f04f 0000 	mov.w	r0, #0
    1492:	4770      	bx	lr

00001494 <__aeabi_dcmpun>:
    1494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    149c:	d102      	bne.n	14a4 <__aeabi_dcmpun+0x10>
    149e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14a2:	d10a      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ac:	d102      	bne.n	14b4 <__aeabi_dcmpun+0x20>
    14ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14b2:	d102      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14b4:	f04f 0000 	mov.w	r0, #0
    14b8:	4770      	bx	lr
    14ba:	f04f 0001 	mov.w	r0, #1
    14be:	4770      	bx	lr

000014c0 <strcmp>:
    14c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    14c4:	f811 3b01 	ldrb.w	r3, [r1], #1
    14c8:	2a01      	cmp	r2, #1
    14ca:	bf28      	it	cs
    14cc:	429a      	cmpcs	r2, r3
    14ce:	d0f7      	beq.n	14c0 <strcmp>
    14d0:	1ad0      	subs	r0, r2, r3
    14d2:	4770      	bx	lr

000014d4 <strlen>:
    14d4:	4603      	mov	r3, r0
    14d6:	f813 2b01 	ldrb.w	r2, [r3], #1
    14da:	2a00      	cmp	r2, #0
    14dc:	d1fb      	bne.n	14d6 <strlen+0x2>
    14de:	1a18      	subs	r0, r3, r0
    14e0:	3801      	subs	r0, #1
    14e2:	4770      	bx	lr
    14e4:	0000      	movs	r0, r0
	...

000014e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    14e8:	b530      	push	{r4, r5, lr}
    14ea:	b085      	sub	sp, #20
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    14ec:	f7fe fff0 	bl	4d0 <__aeabi_dmul>
    14f0:	4604      	mov	r4, r0
    14f2:	460d      	mov	r5, r1
    14f4:	9b08      	ldr	r3, [sp, #32]
    14f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    14fa:	40d8      	lsrs	r0, r3
    14fc:	f7fe ff7e 	bl	3fc <__aeabi_i2d>
    1500:	4622      	mov	r2, r4
    1502:	462b      	mov	r3, r5
    1504:	f7fe ffe4 	bl	4d0 <__aeabi_dmul>
    1508:	4602      	mov	r2, r0
    150a:	460b      	mov	r3, r1
    150c:	e9cd 2300 	strd	r2, r3, [sp]
    1510:	a309      	add	r3, pc, #36	; (adr r3, 1538 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x50>)
    1512:	e9d3 2300 	ldrd	r2, r3, [r3]
    1516:	e9cd 2302 	strd	r2, r3, [sp, #8]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    151a:	f7ff fa69 	bl	9f0 <__aeabi_dcmpgt>
    151e:	b940      	cbnz	r0, 1532 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4a>
	return __b;
      return __a;
    1520:	4669      	mov	r1, sp
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1524:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1526:	e9d1 0100 	ldrd	r0, r1, [r1]
    152a:	f007 ffdb 	bl	94e4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
                                   quantized_multiplier, left_shift);
}
    152e:	b005      	add	sp, #20
    1530:	bd30      	pop	{r4, r5, pc}
	return __b;
    1532:	a902      	add	r1, sp, #8
    1534:	e7f5      	b.n	1522 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x3a>
    1536:	bf00      	nop
    1538:	ffc00000 	.word	0xffc00000
    153c:	41dfffff 	.word	0x41dfffff

00001540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1544:	b082      	sub	sp, #8
    1546:	4607      	mov	r7, r0
    1548:	460d      	mov	r5, r1
    154a:	4616      	mov	r6, r2
    154c:	461c      	mov	r4, r3
    154e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1552:	68c8      	ldr	r0, [r1, #12]
    1554:	f7fe ff64 	bl	420 <__aeabi_f2d>
    1558:	4680      	mov	r8, r0
    155a:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    155c:	68f0      	ldr	r0, [r6, #12]
    155e:	f7fe ff5f 	bl	420 <__aeabi_f2d>
    1562:	4602      	mov	r2, r0
    1564:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1566:	4640      	mov	r0, r8
    1568:	4649      	mov	r1, r9
    156a:	f7fe ffb1 	bl	4d0 <__aeabi_dmul>
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    156e:	b1ec      	cbz	r4, 15ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6c>
    1570:	4680      	mov	r8, r0
    1572:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    1574:	68e0      	ldr	r0, [r4, #12]
    1576:	f7fe ff53 	bl	420 <__aeabi_f2d>
    157a:	4602      	mov	r2, r0
    157c:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    157e:	4640      	mov	r0, r8
    1580:	4649      	mov	r1, r9
    1582:	f7fe fded 	bl	160 <__aeabi_dsub>
    1586:	4680      	mov	r8, r0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1588:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    158c:	f8da 000c 	ldr.w	r0, [sl, #12]
    1590:	f7fe ff46 	bl	420 <__aeabi_f2d>
    1594:	4602      	mov	r2, r0
    1596:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1598:	4640      	mov	r0, r8
    159a:	4621      	mov	r1, r4
    159c:	f7ff f8c2 	bl	724 <__aeabi_ddiv>
    15a0:	a30d      	add	r3, pc, #52	; (adr r3, 15d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    15a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15a6:	f7ff fa0f 	bl	9c8 <__aeabi_dcmple>
    15aa:	b150      	cbz	r0, 15c2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x82>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    15ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15ae:	9300      	str	r3, [sp, #0]
    15b0:	4653      	mov	r3, sl
    15b2:	4632      	mov	r2, r6
    15b4:	4629      	mov	r1, r5
    15b6:	4638      	mov	r0, r7
    15b8:	f008 f8fe 	bl	97b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                          multiplier);
}
    15bc:	b002      	add	sp, #8
    15be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15c2:	697c      	ldr	r4, [r7, #20]
    15c4:	4b06      	ldr	r3, [pc, #24]	; (15e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    15c6:	9300      	str	r3, [sp, #0]
    15c8:	f44f 739f 	mov.w	r3, #318	; 0x13e
    15cc:	4a05      	ldr	r2, [pc, #20]	; (15e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    15ce:	4906      	ldr	r1, [pc, #24]	; (15e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    15d0:	4638      	mov	r0, r7
    15d2:	47a0      	blx	r4
    15d4:	2001      	movs	r0, #1
    15d6:	e7f1      	b.n	15bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7c>
    15d8:	47ae147b 	.word	0x47ae147b
    15dc:	3f947ae1 	.word	0x3f947ae1
    15e0:	0001c0f8 	.word	0x0001c0f8
    15e4:	0001c068 	.word	0x0001c068
    15e8:	0001be64 	.word	0x0001be64
    15ec:	00000000 	.word	0x00000000

000015f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
    15f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15f4:	b088      	sub	sp, #32
    15f6:	4605      	mov	r5, r0
    15f8:	460e      	mov	r6, r1
    15fa:	461f      	mov	r7, r3
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    15fc:	780c      	ldrb	r4, [r1, #0]
    15fe:	2c09      	cmp	r4, #9
    1600:	d013      	beq.n	162a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
    1602:	2c07      	cmp	r4, #7
    1604:	d011      	beq.n	162a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1606:	2c01      	cmp	r4, #1
    1608:	f040 8133 	bne.w	1872 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x282>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    160c:	7810      	ldrb	r0, [r2, #0]
    160e:	2801      	cmp	r0, #1
    1610:	f040 8144 	bne.w	189c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>
    op_data->beta = static_cast<double>(params->beta);
    1614:	6818      	ldr	r0, [r3, #0]
    1616:	f7fe ff03 	bl	420 <__aeabi_f2d>
    161a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    161c:	e9c3 0100 	strd	r0, r1, [r3]
  }
  return kTfLiteOk;
    1620:	2400      	movs	r4, #0
}
    1622:	4620      	mov	r0, r4
    1624:	b008      	add	sp, #32
    1626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (input->type == kTfLiteInt16) {
    162a:	2c07      	cmp	r4, #7
    162c:	d01e      	beq.n	166c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7c>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    162e:	2c09      	cmp	r4, #9
    1630:	f040 8086 	bne.w	1740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x150>
      if (output->type == kTfLiteInt16) {
    1634:	7810      	ldrb	r0, [r2, #0]
    1636:	2807      	cmp	r0, #7
    1638:	f000 8097 	beq.w	176a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    163c:	2809      	cmp	r0, #9
    163e:	f040 80d5 	bne.w	17ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1fc>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1642:	6913      	ldr	r3, [r2, #16]
    1644:	f113 0f80 	cmn.w	r3, #128	; 0x80
    1648:	f000 80e4 	beq.w	1814 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x224>
    164c:	696c      	ldr	r4, [r5, #20]
    164e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    1652:	9203      	str	r2, [sp, #12]
    1654:	9302      	str	r3, [sp, #8]
    1656:	4b9e      	ldr	r3, [pc, #632]	; (18d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
    1658:	9301      	str	r3, [sp, #4]
    165a:	4b9e      	ldr	r3, [pc, #632]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    165c:	9300      	str	r3, [sp, #0]
    165e:	2330      	movs	r3, #48	; 0x30
    1660:	4a9d      	ldr	r2, [pc, #628]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1662:	499e      	ldr	r1, [pc, #632]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1664:	4628      	mov	r0, r5
    1666:	47a0      	blx	r4
    1668:	2401      	movs	r4, #1
    166a:	e7da      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    166c:	6913      	ldr	r3, [r2, #16]
    166e:	2b00      	cmp	r3, #0
    1670:	d13b      	bne.n	16ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfa>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1672:	f8d2 800c 	ldr.w	r8, [r2, #12]
    1676:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    167a:	4640      	mov	r0, r8
    167c:	f7ff fd04 	bl	1088 <__aeabi_fcmpgt>
    1680:	2800      	cmp	r0, #0
    1682:	d041      	beq.n	1708 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x118>
    1684:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    1688:	4640      	mov	r0, r8
    168a:	f7ff fa37 	bl	afc <__aeabi_fsub>
    168e:	4994      	ldr	r1, [pc, #592]	; (18e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
    1690:	f7ff fcfa 	bl	1088 <__aeabi_fcmpgt>
    1694:	2800      	cmp	r0, #0
    1696:	d13d      	bne.n	1714 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x124>
    if (input->type == kTfLiteInt16) {
    1698:	2c07      	cmp	r4, #7
    169a:	f000 80cd 	beq.w	1838 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
          static_cast<double>(params->beta),
    169e:	683f      	ldr	r7, [r7, #0]
      tflite::PreprocessSoftmaxScaling(
    16a0:	68f0      	ldr	r0, [r6, #12]
    16a2:	f7fe febd 	bl	420 <__aeabi_f2d>
    16a6:	4604      	mov	r4, r0
    16a8:	460d      	mov	r5, r1
    16aa:	4638      	mov	r0, r7
    16ac:	f7fe feb8 	bl	420 <__aeabi_f2d>
    16b0:	ab07      	add	r3, sp, #28
    16b2:	9302      	str	r3, [sp, #8]
    16b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16b6:	3308      	adds	r3, #8
    16b8:	9301      	str	r3, [sp, #4]
    16ba:	2605      	movs	r6, #5
    16bc:	9600      	str	r6, [sp, #0]
    16be:	4622      	mov	r2, r4
    16c0:	462b      	mov	r3, r5
    16c2:	f7ff ff11 	bl	14e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    16c6:	9907      	ldr	r1, [sp, #28]
    16c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16ca:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    16cc:	221f      	movs	r2, #31
    16ce:	4630      	mov	r0, r6
    16d0:	f014 fb4e 	bl	15d70 <_ZN6tflite20CalculateInputRadiusEiii>
    16d4:	f7fe fe92 	bl	3fc <__aeabi_i2d>
      op_data->diff_min =
    16d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    16dc:	4619      	mov	r1, r3
    16de:	f7ff f991 	bl	a04 <__aeabi_d2iz>
    16e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16e4:	6198      	str	r0, [r3, #24]
  return kTfLiteOk;
    16e6:	2400      	movs	r4, #0
    16e8:	e79b      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    16ea:	696c      	ldr	r4, [r5, #20]
    16ec:	2200      	movs	r2, #0
    16ee:	9203      	str	r2, [sp, #12]
    16f0:	9302      	str	r3, [sp, #8]
    16f2:	4b7c      	ldr	r3, [pc, #496]	; (18e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
    16f4:	9301      	str	r3, [sp, #4]
    16f6:	4b77      	ldr	r3, [pc, #476]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    16f8:	9300      	str	r3, [sp, #0]
    16fa:	2325      	movs	r3, #37	; 0x25
    16fc:	4a76      	ldr	r2, [pc, #472]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    16fe:	4977      	ldr	r1, [pc, #476]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1700:	4628      	mov	r0, r5
    1702:	47a0      	blx	r4
    1704:	2401      	movs	r4, #1
    1706:	e78c      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1708:	4641      	mov	r1, r8
    170a:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
    170e:	f7ff f9f5 	bl	afc <__aeabi_fsub>
    1712:	e7bc      	b.n	168e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9e>
    1714:	696c      	ldr	r4, [r5, #20]
    1716:	2200      	movs	r2, #0
    1718:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    171c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1720:	4640      	mov	r0, r8
    1722:	f7fe fe7d 	bl	420 <__aeabi_f2d>
    1726:	e9cd 0102 	strd	r0, r1, [sp, #8]
    172a:	4b6f      	ldr	r3, [pc, #444]	; (18e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
    172c:	9301      	str	r3, [sp, #4]
    172e:	4b6f      	ldr	r3, [pc, #444]	; (18ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    1730:	9300      	str	r3, [sp, #0]
    1732:	2326      	movs	r3, #38	; 0x26
    1734:	4a68      	ldr	r2, [pc, #416]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1736:	496e      	ldr	r1, [pc, #440]	; (18f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    1738:	4628      	mov	r0, r5
    173a:	47a0      	blx	r4
    173c:	2401      	movs	r4, #1
    173e:	e770      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    1740:	696e      	ldr	r6, [r5, #20]
    1742:	4620      	mov	r0, r4
    1744:	f007 fe2a 	bl	939c <TfLiteTypeGetName>
    1748:	4604      	mov	r4, r0
    174a:	2009      	movs	r0, #9
    174c:	f007 fe26 	bl	939c <TfLiteTypeGetName>
    1750:	9003      	str	r0, [sp, #12]
    1752:	9402      	str	r4, [sp, #8]
    1754:	4b67      	ldr	r3, [pc, #412]	; (18f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1756:	9301      	str	r3, [sp, #4]
    1758:	4b67      	ldr	r3, [pc, #412]	; (18f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    175a:	9300      	str	r3, [sp, #0]
    175c:	2329      	movs	r3, #41	; 0x29
    175e:	4a5e      	ldr	r2, [pc, #376]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1760:	4966      	ldr	r1, [pc, #408]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    1762:	4628      	mov	r0, r5
    1764:	47b0      	blx	r6
    1766:	2401      	movs	r4, #1
    1768:	e75b      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    176a:	6913      	ldr	r3, [r2, #16]
    176c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    1770:	d00e      	beq.n	1790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a0>
    1772:	696c      	ldr	r4, [r5, #20]
    1774:	4a62      	ldr	r2, [pc, #392]	; (1900 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
    1776:	9203      	str	r2, [sp, #12]
    1778:	9302      	str	r3, [sp, #8]
    177a:	4b62      	ldr	r3, [pc, #392]	; (1904 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
    177c:	9301      	str	r3, [sp, #4]
    177e:	4b55      	ldr	r3, [pc, #340]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    1780:	9300      	str	r3, [sp, #0]
    1782:	232b      	movs	r3, #43	; 0x2b
    1784:	4a54      	ldr	r2, [pc, #336]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1786:	4955      	ldr	r1, [pc, #340]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1788:	4628      	mov	r0, r5
    178a:	47a0      	blx	r4
    178c:	2401      	movs	r4, #1
    178e:	e748      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    1790:	f8d2 800c 	ldr.w	r8, [r2, #12]
    1794:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    1798:	4640      	mov	r0, r8
    179a:	f7ff fc75 	bl	1088 <__aeabi_fcmpgt>
    179e:	b1f8      	cbz	r0, 17e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f0>
    17a0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    17a4:	4640      	mov	r0, r8
    17a6:	f7ff f9a9 	bl	afc <__aeabi_fsub>
    17aa:	4957      	ldr	r1, [pc, #348]	; (1908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
    17ac:	f7ff fc6c 	bl	1088 <__aeabi_fcmpgt>
    17b0:	2800      	cmp	r0, #0
    17b2:	f43f af71 	beq.w	1698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    17b6:	696c      	ldr	r4, [r5, #20]
    17b8:	2200      	movs	r2, #0
    17ba:	4b54      	ldr	r3, [pc, #336]	; (190c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
    17bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    17c0:	4640      	mov	r0, r8
    17c2:	f7fe fe2d 	bl	420 <__aeabi_f2d>
    17c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    17ca:	4b51      	ldr	r3, [pc, #324]	; (1910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
    17cc:	9301      	str	r3, [sp, #4]
    17ce:	4b47      	ldr	r3, [pc, #284]	; (18ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    17d0:	9300      	str	r3, [sp, #0]
    17d2:	232c      	movs	r3, #44	; 0x2c
    17d4:	4a40      	ldr	r2, [pc, #256]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    17d6:	4946      	ldr	r1, [pc, #280]	; (18f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    17d8:	4628      	mov	r0, r5
    17da:	47a0      	blx	r4
    17dc:	2401      	movs	r4, #1
    17de:	e720      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    17e0:	4641      	mov	r1, r8
    17e2:	f04f 505e 	mov.w	r0, #931135488	; 0x37800000
    17e6:	f7ff f989 	bl	afc <__aeabi_fsub>
    17ea:	e7de      	b.n	17aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ba>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    17ec:	696e      	ldr	r6, [r5, #20]
    17ee:	f007 fdd5 	bl	939c <TfLiteTypeGetName>
    17f2:	4604      	mov	r4, r0
    17f4:	2009      	movs	r0, #9
    17f6:	f007 fdd1 	bl	939c <TfLiteTypeGetName>
    17fa:	9003      	str	r0, [sp, #12]
    17fc:	9402      	str	r4, [sp, #8]
    17fe:	4b3d      	ldr	r3, [pc, #244]	; (18f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1800:	9301      	str	r3, [sp, #4]
    1802:	4b44      	ldr	r3, [pc, #272]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    1804:	9300      	str	r3, [sp, #0]
    1806:	232f      	movs	r3, #47	; 0x2f
    1808:	4a33      	ldr	r2, [pc, #204]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    180a:	493c      	ldr	r1, [pc, #240]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    180c:	4628      	mov	r0, r5
    180e:	47b0      	blx	r6
    1810:	2401      	movs	r4, #1
    1812:	e706      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    1814:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    1818:	68d0      	ldr	r0, [r2, #12]
    181a:	f7ff fc0d 	bl	1038 <__aeabi_fcmpeq>
    181e:	2800      	cmp	r0, #0
    1820:	f47f af3a 	bne.w	1698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    1824:	696c      	ldr	r4, [r5, #20]
    1826:	4b3c      	ldr	r3, [pc, #240]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
    1828:	9300      	str	r3, [sp, #0]
    182a:	2331      	movs	r3, #49	; 0x31
    182c:	4a2a      	ldr	r2, [pc, #168]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    182e:	493b      	ldr	r1, [pc, #236]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
    1830:	4628      	mov	r0, r5
    1832:	47a0      	blx	r4
    1834:	2401      	movs	r4, #1
    1836:	e6f4      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
          static_cast<double>(input->params.scale) *
    1838:	68f0      	ldr	r0, [r6, #12]
    183a:	f7fe fdf1 	bl	420 <__aeabi_f2d>
    183e:	4604      	mov	r4, r0
    1840:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    1842:	6838      	ldr	r0, [r7, #0]
    1844:	f7fe fdec 	bl	420 <__aeabi_f2d>
    1848:	4602      	mov	r2, r0
    184a:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    184c:	4620      	mov	r0, r4
    184e:	4629      	mov	r1, r5
    1850:	f7fe fe3e 	bl	4d0 <__aeabi_dmul>
      double input_scale_beta_rescale =
    1854:	a31c      	add	r3, pc, #112	; (adr r3, 18c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
    1856:	e9d3 2300 	ldrd	r2, r3, [r3]
    185a:	f7fe ff63 	bl	724 <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    185e:	ab07      	add	r3, sp, #28
    1860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1862:	3208      	adds	r2, #8
    1864:	f007 fdf0 	bl	9448 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    1868:	9b07      	ldr	r3, [sp, #28]
    186a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    186c:	60d3      	str	r3, [r2, #12]
  return kTfLiteOk;
    186e:	2400      	movs	r4, #0
    1870:	e6d7      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1872:	6946      	ldr	r6, [r0, #20]
    1874:	4620      	mov	r0, r4
    1876:	f007 fd91 	bl	939c <TfLiteTypeGetName>
    187a:	4604      	mov	r4, r0
    187c:	2001      	movs	r0, #1
    187e:	f007 fd8d 	bl	939c <TfLiteTypeGetName>
    1882:	9003      	str	r0, [sp, #12]
    1884:	9402      	str	r4, [sp, #8]
    1886:	4b26      	ldr	r3, [pc, #152]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    1888:	9301      	str	r3, [sp, #4]
    188a:	4b1b      	ldr	r3, [pc, #108]	; (18f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    188c:	9300      	str	r3, [sp, #0]
    188e:	234e      	movs	r3, #78	; 0x4e
    1890:	4a11      	ldr	r2, [pc, #68]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1892:	491a      	ldr	r1, [pc, #104]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    1894:	4628      	mov	r0, r5
    1896:	47b0      	blx	r6
    1898:	2401      	movs	r4, #1
    189a:	e6c2      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    189c:	696f      	ldr	r7, [r5, #20]
    189e:	f007 fd7d 	bl	939c <TfLiteTypeGetName>
    18a2:	4606      	mov	r6, r0
    18a4:	2001      	movs	r0, #1
    18a6:	f007 fd79 	bl	939c <TfLiteTypeGetName>
    18aa:	9003      	str	r0, [sp, #12]
    18ac:	9602      	str	r6, [sp, #8]
    18ae:	4b1c      	ldr	r3, [pc, #112]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    18b0:	9301      	str	r3, [sp, #4]
    18b2:	4b18      	ldr	r3, [pc, #96]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    18b4:	9300      	str	r3, [sp, #0]
    18b6:	234f      	movs	r3, #79	; 0x4f
    18b8:	4a07      	ldr	r2, [pc, #28]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    18ba:	4910      	ldr	r1, [pc, #64]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    18bc:	4628      	mov	r0, r5
    18be:	47b8      	blx	r7
    18c0:	e6af      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    18c2:	bf00      	nop
    18c4:	f3af 8000 	nop.w
    18c8:	00140014 	.word	0x00140014
    18cc:	3f240014 	.word	0x3f240014
    18d0:	0001cebc 	.word	0x0001cebc
    18d4:	0001ce48 	.word	0x0001ce48
    18d8:	0001cdf0 	.word	0x0001cdf0
    18dc:	0001c124 	.word	0x0001c124
    18e0:	3303126f 	.word	0x3303126f
    18e4:	0001c688 	.word	0x0001c688
    18e8:	0001ce84 	.word	0x0001ce84
    18ec:	0001ce90 	.word	0x0001ce90
    18f0:	0001ce64 	.word	0x0001ce64
    18f4:	0001c200 	.word	0x0001c200
    18f8:	0001c7ec 	.word	0x0001c7ec
    18fc:	0001cb24 	.word	0x0001cb24
    1900:	ffff8000 	.word	0xffff8000
    1904:	0001cea8 	.word	0x0001cea8
    1908:	3283126f 	.word	0x3283126f
    190c:	3ef00000 	.word	0x3ef00000
    1910:	0001ceb0 	.word	0x0001ceb0
    1914:	0001c7dc 	.word	0x0001c7dc
    1918:	0001cec4 	.word	0x0001cec4
    191c:	0001be64 	.word	0x0001be64
    1920:	0001cee8 	.word	0x0001cee8
    1924:	00000000 	.word	0x00000000

00001928 <floor>:
    1928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    192a:	f3c1 570a 	ubfx	r7, r1, #20, #11
    192e:	460b      	mov	r3, r1
    1930:	4602      	mov	r2, r0
    1932:	460c      	mov	r4, r1
    1934:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
    1938:	4606      	mov	r6, r0
    193a:	2d13      	cmp	r5, #19
    193c:	dc20      	bgt.n	1980 <floor+0x58>
    193e:	2d00      	cmp	r5, #0
    1940:	db40      	blt.n	19c4 <floor+0x9c>
    1942:	4f35      	ldr	r7, [pc, #212]	; (1a18 <floor+0xf0>)
    1944:	412f      	asrs	r7, r5
    1946:	ea01 0c07 	and.w	ip, r1, r7
    194a:	ea5c 0c00 	orrs.w	ip, ip, r0
    194e:	d014      	beq.n	197a <floor+0x52>
    1950:	a32f      	add	r3, pc, #188	; (adr r3, 1a10 <floor+0xe8>)
    1952:	e9d3 2300 	ldrd	r2, r3, [r3]
    1956:	f7fe fc05 	bl	164 <__adddf3>
    195a:	2200      	movs	r2, #0
    195c:	2300      	movs	r3, #0
    195e:	f7ff f847 	bl	9f0 <__aeabi_dcmpgt>
    1962:	b140      	cbz	r0, 1976 <floor+0x4e>
    1964:	2c00      	cmp	r4, #0
    1966:	da03      	bge.n	1970 <floor+0x48>
    1968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    196c:	412b      	asrs	r3, r5
    196e:	441c      	add	r4, r3
    1970:	ea24 0407 	bic.w	r4, r4, r7
    1974:	2600      	movs	r6, #0
    1976:	4632      	mov	r2, r6
    1978:	4623      	mov	r3, r4
    197a:	4610      	mov	r0, r2
    197c:	4619      	mov	r1, r3
    197e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1980:	2d33      	cmp	r5, #51	; 0x33
    1982:	dd07      	ble.n	1994 <floor+0x6c>
    1984:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    1988:	d1f7      	bne.n	197a <floor+0x52>
    198a:	f7fe fbeb 	bl	164 <__adddf3>
    198e:	4602      	mov	r2, r0
    1990:	460b      	mov	r3, r1
    1992:	e7f2      	b.n	197a <floor+0x52>
    1994:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    1998:	f04f 3cff 	mov.w	ip, #4294967295
    199c:	fa2c f707 	lsr.w	r7, ip, r7
    19a0:	4207      	tst	r7, r0
    19a2:	d0ea      	beq.n	197a <floor+0x52>
    19a4:	a31a      	add	r3, pc, #104	; (adr r3, 1a10 <floor+0xe8>)
    19a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19aa:	f7fe fbdb 	bl	164 <__adddf3>
    19ae:	2200      	movs	r2, #0
    19b0:	2300      	movs	r3, #0
    19b2:	f7ff f81d 	bl	9f0 <__aeabi_dcmpgt>
    19b6:	2800      	cmp	r0, #0
    19b8:	d0dd      	beq.n	1976 <floor+0x4e>
    19ba:	2c00      	cmp	r4, #0
    19bc:	db1b      	blt.n	19f6 <floor+0xce>
    19be:	ea26 0607 	bic.w	r6, r6, r7
    19c2:	e7d8      	b.n	1976 <floor+0x4e>
    19c4:	a312      	add	r3, pc, #72	; (adr r3, 1a10 <floor+0xe8>)
    19c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ca:	f7fe fbcb 	bl	164 <__adddf3>
    19ce:	2200      	movs	r2, #0
    19d0:	2300      	movs	r3, #0
    19d2:	f7ff f80d 	bl	9f0 <__aeabi_dcmpgt>
    19d6:	2800      	cmp	r0, #0
    19d8:	d0cd      	beq.n	1976 <floor+0x4e>
    19da:	2c00      	cmp	r4, #0
    19dc:	db02      	blt.n	19e4 <floor+0xbc>
    19de:	2600      	movs	r6, #0
    19e0:	4634      	mov	r4, r6
    19e2:	e7c8      	b.n	1976 <floor+0x4e>
    19e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    19e8:	4a0c      	ldr	r2, [pc, #48]	; (1a1c <floor+0xf4>)
    19ea:	4333      	orrs	r3, r6
    19ec:	2600      	movs	r6, #0
    19ee:	42b3      	cmp	r3, r6
    19f0:	bf18      	it	ne
    19f2:	4614      	movne	r4, r2
    19f4:	e7bf      	b.n	1976 <floor+0x4e>
    19f6:	2d14      	cmp	r5, #20
    19f8:	d008      	beq.n	1a0c <floor+0xe4>
    19fa:	2201      	movs	r2, #1
    19fc:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
    1a00:	fa02 f303 	lsl.w	r3, r2, r3
    1a04:	199e      	adds	r6, r3, r6
    1a06:	bf28      	it	cs
    1a08:	18a4      	addcs	r4, r4, r2
    1a0a:	e7d8      	b.n	19be <floor+0x96>
    1a0c:	3401      	adds	r4, #1
    1a0e:	e7d6      	b.n	19be <floor+0x96>
    1a10:	8800759c 	.word	0x8800759c
    1a14:	7e37e43c 	.word	0x7e37e43c
    1a18:	000fffff 	.word	0x000fffff
    1a1c:	bff00000 	.word	0xbff00000

00001a20 <_dtoa_r>:
    1a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a24:	4616      	mov	r6, r2
    1a26:	b099      	sub	sp, #100	; 0x64
    1a28:	461f      	mov	r7, r3
    1a2a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1a2c:	4605      	mov	r5, r0
    1a2e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1a32:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1a36:	b93c      	cbnz	r4, 1a48 <_dtoa_r+0x28>
    1a38:	2010      	movs	r0, #16
    1a3a:	f011 f867 	bl	12b0c <malloc>
    1a3e:	6268      	str	r0, [r5, #36]	; 0x24
    1a40:	6004      	str	r4, [r0, #0]
    1a42:	60c4      	str	r4, [r0, #12]
    1a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1a48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a4a:	6819      	ldr	r1, [r3, #0]
    1a4c:	b151      	cbz	r1, 1a64 <_dtoa_r+0x44>
    1a4e:	685a      	ldr	r2, [r3, #4]
    1a50:	2301      	movs	r3, #1
    1a52:	4628      	mov	r0, r5
    1a54:	4093      	lsls	r3, r2
    1a56:	604a      	str	r2, [r1, #4]
    1a58:	608b      	str	r3, [r1, #8]
    1a5a:	f017 fb34 	bl	190c6 <_Bfree>
    1a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a60:	2200      	movs	r2, #0
    1a62:	601a      	str	r2, [r3, #0]
    1a64:	1e3b      	subs	r3, r7, #0
    1a66:	bfb7      	itett	lt
    1a68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1a6c:	2300      	movge	r3, #0
    1a6e:	2201      	movlt	r2, #1
    1a70:	9305      	strlt	r3, [sp, #20]
    1a72:	bfa8      	it	ge
    1a74:	f8c8 3000 	strge.w	r3, [r8]
    1a78:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1a7c:	4bac      	ldr	r3, [pc, #688]	; (1d30 <_dtoa_r+0x310>)
    1a7e:	bfb8      	it	lt
    1a80:	f8c8 2000 	strlt.w	r2, [r8]
    1a84:	ea33 0309 	bics.w	r3, r3, r9
    1a88:	d119      	bne.n	1abe <_dtoa_r+0x9e>
    1a8a:	f242 730f 	movw	r3, #9999	; 0x270f
    1a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1a90:	6013      	str	r3, [r2, #0]
    1a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
    1a96:	4333      	orrs	r3, r6
    1a98:	f000 856a 	beq.w	2570 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x570>
    1a9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1a9e:	b953      	cbnz	r3, 1ab6 <_dtoa_r+0x96>
    1aa0:	4ba4      	ldr	r3, [pc, #656]	; (1d34 <_dtoa_r+0x314>)
    1aa2:	e023      	b.n	1aec <_dtoa_r+0xcc>
    1aa4:	4ba4      	ldr	r3, [pc, #656]	; (1d38 <_dtoa_r+0x318>)
    1aa6:	9303      	str	r3, [sp, #12]
    1aa8:	3308      	adds	r3, #8
    1aaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1aac:	6013      	str	r3, [r2, #0]
    1aae:	9803      	ldr	r0, [sp, #12]
    1ab0:	b019      	add	sp, #100	; 0x64
    1ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	4b9f      	ldr	r3, [pc, #636]	; (1d34 <_dtoa_r+0x314>)
    1ab8:	9303      	str	r3, [sp, #12]
    1aba:	3303      	adds	r3, #3
    1abc:	e7f5      	b.n	1aaa <_dtoa_r+0x8a>
    1abe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1ac2:	2200      	movs	r2, #0
    1ac4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    1ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1acc:	2300      	movs	r3, #0
    1ace:	f7fe ff67 	bl	9a0 <__aeabi_dcmpeq>
    1ad2:	4680      	mov	r8, r0
    1ad4:	b160      	cbz	r0, 1af0 <_dtoa_r+0xd0>
    1ad6:	2301      	movs	r3, #1
    1ad8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1ada:	6013      	str	r3, [r2, #0]
    1adc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1ade:	2b00      	cmp	r3, #0
    1ae0:	f000 8543 	beq.w	256a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x56a>
    1ae4:	4b95      	ldr	r3, [pc, #596]	; (1d3c <_dtoa_r+0x31c>)
    1ae6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1ae8:	6013      	str	r3, [r2, #0]
    1aea:	3b01      	subs	r3, #1
    1aec:	9303      	str	r3, [sp, #12]
    1aee:	e7de      	b.n	1aae <_dtoa_r+0x8e>
    1af0:	ab16      	add	r3, sp, #88	; 0x58
    1af2:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1af6:	4628      	mov	r0, r5
    1af8:	9301      	str	r3, [sp, #4]
    1afa:	ab17      	add	r3, sp, #92	; 0x5c
    1afc:	9300      	str	r3, [sp, #0]
    1afe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1b02:	f017 fd1f 	bl	19544 <__d2b>
    1b06:	4683      	mov	fp, r0
    1b08:	2c00      	cmp	r4, #0
    1b0a:	d07c      	beq.n	1c06 <_dtoa_r+0x1e6>
    1b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1b12:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1b22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1b26:	2200      	movs	r2, #0
    1b28:	4b85      	ldr	r3, [pc, #532]	; (1d40 <_dtoa_r+0x320>)
    1b2a:	f7fe fb19 	bl	160 <__aeabi_dsub>
    1b2e:	a37a      	add	r3, pc, #488	; (adr r3, 1d18 <_dtoa_r+0x2f8>)
    1b30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b34:	f7fe fccc 	bl	4d0 <__aeabi_dmul>
    1b38:	a379      	add	r3, pc, #484	; (adr r3, 1d20 <_dtoa_r+0x300>)
    1b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b3e:	f7fe fb11 	bl	164 <__adddf3>
    1b42:	4606      	mov	r6, r0
    1b44:	460f      	mov	r7, r1
    1b46:	4620      	mov	r0, r4
    1b48:	f7fe fc58 	bl	3fc <__aeabi_i2d>
    1b4c:	a376      	add	r3, pc, #472	; (adr r3, 1d28 <_dtoa_r+0x308>)
    1b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b52:	f7fe fcbd 	bl	4d0 <__aeabi_dmul>
    1b56:	4602      	mov	r2, r0
    1b58:	460b      	mov	r3, r1
    1b5a:	4630      	mov	r0, r6
    1b5c:	4639      	mov	r1, r7
    1b5e:	f7fe fb01 	bl	164 <__adddf3>
    1b62:	4606      	mov	r6, r0
    1b64:	460f      	mov	r7, r1
    1b66:	f7fe ff4d 	bl	a04 <__aeabi_d2iz>
    1b6a:	2200      	movs	r2, #0
    1b6c:	4682      	mov	sl, r0
    1b6e:	2300      	movs	r3, #0
    1b70:	4630      	mov	r0, r6
    1b72:	4639      	mov	r1, r7
    1b74:	f7fe ff1e 	bl	9b4 <__aeabi_dcmplt>
    1b78:	b148      	cbz	r0, 1b8e <_dtoa_r+0x16e>
    1b7a:	4650      	mov	r0, sl
    1b7c:	f7fe fc3e 	bl	3fc <__aeabi_i2d>
    1b80:	4632      	mov	r2, r6
    1b82:	463b      	mov	r3, r7
    1b84:	f7fe ff0c 	bl	9a0 <__aeabi_dcmpeq>
    1b88:	b908      	cbnz	r0, 1b8e <_dtoa_r+0x16e>
    1b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
    1b8e:	f1ba 0f16 	cmp.w	sl, #22
    1b92:	d856      	bhi.n	1c42 <_dtoa_r+0x222>
    1b94:	4b6b      	ldr	r3, [pc, #428]	; (1d44 <_dtoa_r+0x324>)
    1b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba2:	f7fe ff07 	bl	9b4 <__aeabi_dcmplt>
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d04d      	beq.n	1c46 <_dtoa_r+0x226>
    1baa:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bae:	2300      	movs	r3, #0
    1bb0:	930f      	str	r3, [sp, #60]	; 0x3c
    1bb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1bb4:	1b1c      	subs	r4, r3, r4
    1bb6:	1e63      	subs	r3, r4, #1
    1bb8:	9309      	str	r3, [sp, #36]	; 0x24
    1bba:	bf49      	itett	mi
    1bbc:	f1c4 0301 	rsbmi	r3, r4, #1
    1bc0:	2300      	movpl	r3, #0
    1bc2:	9306      	strmi	r3, [sp, #24]
    1bc4:	2300      	movmi	r3, #0
    1bc6:	bf54      	ite	pl
    1bc8:	9306      	strpl	r3, [sp, #24]
    1bca:	9309      	strmi	r3, [sp, #36]	; 0x24
    1bcc:	f1ba 0f00 	cmp.w	sl, #0
    1bd0:	db3b      	blt.n	1c4a <_dtoa_r+0x22a>
    1bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bd4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    1bd8:	4453      	add	r3, sl
    1bda:	9309      	str	r3, [sp, #36]	; 0x24
    1bdc:	2300      	movs	r3, #0
    1bde:	930a      	str	r3, [sp, #40]	; 0x28
    1be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1be2:	2b09      	cmp	r3, #9
    1be4:	f200 80b4 	bhi.w	1d50 <_dtoa_r+0x330>
    1be8:	2b05      	cmp	r3, #5
    1bea:	bfc5      	ittet	gt
    1bec:	3b04      	subgt	r3, #4
    1bee:	2400      	movgt	r4, #0
    1bf0:	2401      	movle	r4, #1
    1bf2:	9322      	strgt	r3, [sp, #136]	; 0x88
    1bf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1bf6:	3b02      	subs	r3, #2
    1bf8:	2b03      	cmp	r3, #3
    1bfa:	f200 80b5 	bhi.w	1d68 <_dtoa_r+0x348>
    1bfe:	e8df f003 	tbb	[pc, r3]
    1c02:	7d2e      	.short	0x7d2e
    1c04:	a57b      	.short	0xa57b
    1c06:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1c0a:	441c      	add	r4, r3
    1c0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1c10:	2b20      	cmp	r3, #32
    1c12:	bfc6      	itte	gt
    1c14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1c18:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1c1c:	f1c3 0320 	rsble	r3, r3, #32
    1c20:	f104 34ff 	add.w	r4, r4, #4294967295
    1c24:	bfc5      	ittet	gt
    1c26:	fa09 f303 	lslgt.w	r3, r9, r3
    1c2a:	fa26 f000 	lsrgt.w	r0, r6, r0
    1c2e:	fa06 f003 	lslle.w	r0, r6, r3
    1c32:	4318      	orrgt	r0, r3
    1c34:	f7fe fbd2 	bl	3dc <__aeabi_ui2d>
    1c38:	2301      	movs	r3, #1
    1c3a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1c3e:	9313      	str	r3, [sp, #76]	; 0x4c
    1c40:	e771      	b.n	1b26 <_dtoa_r+0x106>
    1c42:	2301      	movs	r3, #1
    1c44:	e7b4      	b.n	1bb0 <_dtoa_r+0x190>
    1c46:	900f      	str	r0, [sp, #60]	; 0x3c
    1c48:	e7b3      	b.n	1bb2 <_dtoa_r+0x192>
    1c4a:	9b06      	ldr	r3, [sp, #24]
    1c4c:	eba3 030a 	sub.w	r3, r3, sl
    1c50:	9306      	str	r3, [sp, #24]
    1c52:	f1ca 0300 	rsb	r3, sl, #0
    1c56:	930a      	str	r3, [sp, #40]	; 0x28
    1c58:	2300      	movs	r3, #0
    1c5a:	930e      	str	r3, [sp, #56]	; 0x38
    1c5c:	e7c0      	b.n	1be0 <_dtoa_r+0x1c0>
    1c5e:	2300      	movs	r3, #0
    1c60:	930b      	str	r3, [sp, #44]	; 0x2c
    1c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1c64:	2b00      	cmp	r3, #0
    1c66:	f300 8082 	bgt.w	1d6e <_dtoa_r+0x34e>
    1c6a:	f04f 0901 	mov.w	r9, #1
    1c6e:	464b      	mov	r3, r9
    1c70:	f8cd 9020 	str.w	r9, [sp, #32]
    1c74:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    1c78:	2200      	movs	r2, #0
    1c7a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    1c7c:	6072      	str	r2, [r6, #4]
    1c7e:	2204      	movs	r2, #4
    1c80:	f102 0014 	add.w	r0, r2, #20
    1c84:	6871      	ldr	r1, [r6, #4]
    1c86:	4298      	cmp	r0, r3
    1c88:	d977      	bls.n	1d7a <_dtoa_r+0x35a>
    1c8a:	4628      	mov	r0, r5
    1c8c:	f017 f9e7 	bl	1905e <_Balloc>
    1c90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1c92:	6030      	str	r0, [r6, #0]
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	9303      	str	r3, [sp, #12]
    1c98:	9b08      	ldr	r3, [sp, #32]
    1c9a:	2b0e      	cmp	r3, #14
    1c9c:	f200 80ee 	bhi.w	1e7c <_dtoa_r+0x45c>
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	f000 80eb 	beq.w	1e7c <_dtoa_r+0x45c>
    1ca6:	f1ba 0f00 	cmp.w	sl, #0
    1caa:	dd7a      	ble.n	1da2 <_dtoa_r+0x382>
    1cac:	f00a 030f 	and.w	r3, sl, #15
    1cb0:	4a24      	ldr	r2, [pc, #144]	; (1d44 <_dtoa_r+0x324>)
    1cb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1cb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1cba:	e9d3 3400 	ldrd	r3, r4, [r3]
    1cbe:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1cc2:	ea4f 142a 	mov.w	r4, sl, asr #4
    1cc6:	d05c      	beq.n	1d82 <_dtoa_r+0x362>
    1cc8:	4b1f      	ldr	r3, [pc, #124]	; (1d48 <_dtoa_r+0x328>)
    1cca:	f004 040f 	and.w	r4, r4, #15
    1cce:	2703      	movs	r7, #3
    1cd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1cd8:	f7fe fd24 	bl	724 <__aeabi_ddiv>
    1cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1ce0:	4e19      	ldr	r6, [pc, #100]	; (1d48 <_dtoa_r+0x328>)
    1ce2:	2c00      	cmp	r4, #0
    1ce4:	d14f      	bne.n	1d86 <_dtoa_r+0x366>
    1ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1cee:	f7fe fd19 	bl	724 <__aeabi_ddiv>
    1cf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1cf6:	e06e      	b.n	1dd6 <_dtoa_r+0x3b6>
    1cf8:	2301      	movs	r3, #1
    1cfa:	e7b1      	b.n	1c60 <_dtoa_r+0x240>
    1cfc:	2300      	movs	r3, #0
    1cfe:	930b      	str	r3, [sp, #44]	; 0x2c
    1d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1d02:	eb0a 0903 	add.w	r9, sl, r3
    1d06:	f109 0301 	add.w	r3, r9, #1
    1d0a:	2b01      	cmp	r3, #1
    1d0c:	9308      	str	r3, [sp, #32]
    1d0e:	bfb8      	it	lt
    1d10:	2301      	movlt	r3, #1
    1d12:	e7b1      	b.n	1c78 <_dtoa_r+0x258>
    1d14:	f3af 8000 	nop.w
    1d18:	636f4361 	.word	0x636f4361
    1d1c:	3fd287a7 	.word	0x3fd287a7
    1d20:	8b60c8b3 	.word	0x8b60c8b3
    1d24:	3fc68a28 	.word	0x3fc68a28
    1d28:	509f79fb 	.word	0x509f79fb
    1d2c:	3fd34413 	.word	0x3fd34413
    1d30:	7ff00000 	.word	0x7ff00000
    1d34:	0001d283 	.word	0x0001d283
    1d38:	0001d27a 	.word	0x0001d27a
    1d3c:	0001d257 	.word	0x0001d257
    1d40:	3ff80000 	.word	0x3ff80000
    1d44:	00019b70 	.word	0x00019b70
    1d48:	00019b48 	.word	0x00019b48
    1d4c:	2301      	movs	r3, #1
    1d4e:	e7d6      	b.n	1cfe <_dtoa_r+0x2de>
    1d50:	2401      	movs	r4, #1
    1d52:	2300      	movs	r3, #0
    1d54:	940b      	str	r4, [sp, #44]	; 0x2c
    1d56:	9322      	str	r3, [sp, #136]	; 0x88
    1d58:	f04f 39ff 	mov.w	r9, #4294967295
    1d5c:	2200      	movs	r2, #0
    1d5e:	2312      	movs	r3, #18
    1d60:	f8cd 9020 	str.w	r9, [sp, #32]
    1d64:	9223      	str	r2, [sp, #140]	; 0x8c
    1d66:	e787      	b.n	1c78 <_dtoa_r+0x258>
    1d68:	2301      	movs	r3, #1
    1d6a:	930b      	str	r3, [sp, #44]	; 0x2c
    1d6c:	e7f4      	b.n	1d58 <_dtoa_r+0x338>
    1d6e:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1d72:	464b      	mov	r3, r9
    1d74:	f8cd 9020 	str.w	r9, [sp, #32]
    1d78:	e77e      	b.n	1c78 <_dtoa_r+0x258>
    1d7a:	3101      	adds	r1, #1
    1d7c:	0052      	lsls	r2, r2, #1
    1d7e:	6071      	str	r1, [r6, #4]
    1d80:	e77e      	b.n	1c80 <_dtoa_r+0x260>
    1d82:	2702      	movs	r7, #2
    1d84:	e7ac      	b.n	1ce0 <_dtoa_r+0x2c0>
    1d86:	07e1      	lsls	r1, r4, #31
    1d88:	d508      	bpl.n	1d9c <_dtoa_r+0x37c>
    1d8a:	3701      	adds	r7, #1
    1d8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1d90:	e9d6 2300 	ldrd	r2, r3, [r6]
    1d94:	f7fe fb9c 	bl	4d0 <__aeabi_dmul>
    1d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1d9c:	1064      	asrs	r4, r4, #1
    1d9e:	3608      	adds	r6, #8
    1da0:	e79f      	b.n	1ce2 <_dtoa_r+0x2c2>
    1da2:	f000 80a5 	beq.w	1ef0 <_dtoa_r+0x4d0>
    1da6:	f1ca 0400 	rsb	r4, sl, #0
    1daa:	4ba3      	ldr	r3, [pc, #652]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1dac:	4ea3      	ldr	r6, [pc, #652]	; (203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>)
    1dae:	2702      	movs	r7, #2
    1db0:	f004 020f 	and.w	r2, r4, #15
    1db4:	1124      	asrs	r4, r4, #4
    1db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dc2:	f7fe fb85 	bl	4d0 <__aeabi_dmul>
    1dc6:	2300      	movs	r3, #0
    1dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1dcc:	2c00      	cmp	r4, #0
    1dce:	f040 8084 	bne.w	1eda <_dtoa_r+0x4ba>
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d18d      	bne.n	1cf2 <_dtoa_r+0x2d2>
    1dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dd8:	2b00      	cmp	r3, #0
    1dda:	f000 808b 	beq.w	1ef4 <_dtoa_r+0x4d4>
    1dde:	2200      	movs	r2, #0
    1de0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1de4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1dec:	4b94      	ldr	r3, [pc, #592]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1dee:	f7fe fde1 	bl	9b4 <__aeabi_dcmplt>
    1df2:	2800      	cmp	r0, #0
    1df4:	d07e      	beq.n	1ef4 <_dtoa_r+0x4d4>
    1df6:	9b08      	ldr	r3, [sp, #32]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d07b      	beq.n	1ef4 <_dtoa_r+0x4d4>
    1dfc:	f1b9 0f00 	cmp.w	r9, #0
    1e00:	dd38      	ble.n	1e74 <_dtoa_r+0x454>
    1e02:	f10a 38ff 	add.w	r8, sl, #4294967295
    1e06:	3701      	adds	r7, #1
    1e08:	464c      	mov	r4, r9
    1e0a:	2200      	movs	r2, #0
    1e0c:	4b8d      	ldr	r3, [pc, #564]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1e0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1e12:	f7fe fb5d 	bl	4d0 <__aeabi_dmul>
    1e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e1a:	4638      	mov	r0, r7
    1e1c:	f7fe faee 	bl	3fc <__aeabi_i2d>
    1e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1e24:	f7fe fb54 	bl	4d0 <__aeabi_dmul>
    1e28:	2200      	movs	r2, #0
    1e2a:	4b87      	ldr	r3, [pc, #540]	; (2048 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48>)
    1e2c:	f7fe f99a 	bl	164 <__adddf3>
    1e30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    1e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1e38:	9611      	str	r6, [sp, #68]	; 0x44
    1e3a:	2c00      	cmp	r4, #0
    1e3c:	d15d      	bne.n	1efa <_dtoa_r+0x4da>
    1e3e:	2200      	movs	r2, #0
    1e40:	4b82      	ldr	r3, [pc, #520]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e46:	f7fe f98b 	bl	160 <__aeabi_dsub>
    1e4a:	4602      	mov	r2, r0
    1e4c:	460b      	mov	r3, r1
    1e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1e52:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e54:	4633      	mov	r3, r6
    1e56:	f7fe fdcb 	bl	9f0 <__aeabi_dcmpgt>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	f040 8294 	bne.w	2388 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x388>
    1e60:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e6a:	f7fe fda3 	bl	9b4 <__aeabi_dcmplt>
    1e6e:	2800      	cmp	r0, #0
    1e70:	f040 8288 	bne.w	2384 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x384>
    1e74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1e78:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1e7e:	2b00      	cmp	r3, #0
    1e80:	f2c0 814f 	blt.w	2122 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x122>
    1e84:	f1ba 0f0e 	cmp.w	sl, #14
    1e88:	f300 814b 	bgt.w	2122 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x122>
    1e8c:	4b6a      	ldr	r3, [pc, #424]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1e92:	e9d3 3400 	ldrd	r3, r4, [r3]
    1e96:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	f280 80d9 	bge.w	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
    1ea2:	9b08      	ldr	r3, [sp, #32]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	f300 80d5 	bgt.w	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
    1eaa:	f040 826a 	bne.w	2382 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x382>
    1eae:	2200      	movs	r2, #0
    1eb0:	4b66      	ldr	r3, [pc, #408]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1eb6:	f7fe fb0b 	bl	4d0 <__aeabi_dmul>
    1eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1ebe:	f7fe fd8d 	bl	9dc <__aeabi_dcmpge>
    1ec2:	9c08      	ldr	r4, [sp, #32]
    1ec4:	4626      	mov	r6, r4
    1ec6:	2800      	cmp	r0, #0
    1ec8:	f040 8240 	bne.w	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    1ecc:	9f03      	ldr	r7, [sp, #12]
    1ece:	2331      	movs	r3, #49	; 0x31
    1ed0:	f10a 0a01 	add.w	sl, sl, #1
    1ed4:	f807 3b01 	strb.w	r3, [r7], #1
    1ed8:	e23c      	b.n	2354 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x354>
    1eda:	07e2      	lsls	r2, r4, #31
    1edc:	d505      	bpl.n	1eea <_dtoa_r+0x4ca>
    1ede:	3701      	adds	r7, #1
    1ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
    1ee4:	f7fe faf4 	bl	4d0 <__aeabi_dmul>
    1ee8:	2301      	movs	r3, #1
    1eea:	1064      	asrs	r4, r4, #1
    1eec:	3608      	adds	r6, #8
    1eee:	e76d      	b.n	1dcc <_dtoa_r+0x3ac>
    1ef0:	2702      	movs	r7, #2
    1ef2:	e770      	b.n	1dd6 <_dtoa_r+0x3b6>
    1ef4:	46d0      	mov	r8, sl
    1ef6:	9c08      	ldr	r4, [sp, #32]
    1ef8:	e78f      	b.n	1e1a <_dtoa_r+0x3fa>
    1efa:	9903      	ldr	r1, [sp, #12]
    1efc:	4b4e      	ldr	r3, [pc, #312]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1efe:	4421      	add	r1, r4
    1f00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1f04:	9112      	str	r1, [sp, #72]	; 0x48
    1f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1f0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1f10:	2900      	cmp	r1, #0
    1f12:	d046      	beq.n	1fa2 <_dtoa_r+0x582>
    1f14:	2000      	movs	r0, #0
    1f16:	494e      	ldr	r1, [pc, #312]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    1f18:	f7fe fc04 	bl	724 <__aeabi_ddiv>
    1f1c:	463b      	mov	r3, r7
    1f1e:	4632      	mov	r2, r6
    1f20:	f7fe f91e 	bl	160 <__aeabi_dsub>
    1f24:	9f03      	ldr	r7, [sp, #12]
    1f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f2e:	f7fe fd69 	bl	a04 <__aeabi_d2iz>
    1f32:	4604      	mov	r4, r0
    1f34:	f7fe fa62 	bl	3fc <__aeabi_i2d>
    1f38:	4602      	mov	r2, r0
    1f3a:	460b      	mov	r3, r1
    1f3c:	3430      	adds	r4, #48	; 0x30
    1f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f42:	f7fe f90d 	bl	160 <__aeabi_dsub>
    1f46:	4602      	mov	r2, r0
    1f48:	460b      	mov	r3, r1
    1f4a:	f807 4b01 	strb.w	r4, [r7], #1
    1f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f56:	f7fe fd2d 	bl	9b4 <__aeabi_dcmplt>
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d164      	bne.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    1f5e:	2000      	movs	r0, #0
    1f60:	4937      	ldr	r1, [pc, #220]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1f66:	f7fe f8fb 	bl	160 <__aeabi_dsub>
    1f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f6e:	f7fe fd21 	bl	9b4 <__aeabi_dcmplt>
    1f72:	2800      	cmp	r0, #0
    1f74:	f040 80b4 	bne.w	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    1f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f7a:	429f      	cmp	r7, r3
    1f7c:	f43f af7a 	beq.w	1e74 <_dtoa_r+0x454>
    1f80:	2200      	movs	r2, #0
    1f82:	4b30      	ldr	r3, [pc, #192]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1f84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1f88:	f7fe faa2 	bl	4d0 <__aeabi_dmul>
    1f8c:	2200      	movs	r2, #0
    1f8e:	4b2d      	ldr	r3, [pc, #180]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f98:	f7fe fa9a 	bl	4d0 <__aeabi_dmul>
    1f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1fa0:	e7c3      	b.n	1f2a <_dtoa_r+0x50a>
    1fa2:	4630      	mov	r0, r6
    1fa4:	4639      	mov	r1, r7
    1fa6:	f7fe fa93 	bl	4d0 <__aeabi_dmul>
    1faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fac:	9c03      	ldr	r4, [sp, #12]
    1fae:	9314      	str	r3, [sp, #80]	; 0x50
    1fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fb8:	f7fe fd24 	bl	a04 <__aeabi_d2iz>
    1fbc:	9015      	str	r0, [sp, #84]	; 0x54
    1fbe:	f7fe fa1d 	bl	3fc <__aeabi_i2d>
    1fc2:	4602      	mov	r2, r0
    1fc4:	460b      	mov	r3, r1
    1fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fca:	f7fe f8c9 	bl	160 <__aeabi_dsub>
    1fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1fd0:	4606      	mov	r6, r0
    1fd2:	460f      	mov	r7, r1
    1fd4:	3330      	adds	r3, #48	; 0x30
    1fd6:	2200      	movs	r2, #0
    1fd8:	f804 3b01 	strb.w	r3, [r4], #1
    1fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fde:	429c      	cmp	r4, r3
    1fe0:	d124      	bne.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    1fe2:	4b1b      	ldr	r3, [pc, #108]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    1fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1fe8:	f7fe f8bc 	bl	164 <__adddf3>
    1fec:	4602      	mov	r2, r0
    1fee:	460b      	mov	r3, r1
    1ff0:	4630      	mov	r0, r6
    1ff2:	4639      	mov	r1, r7
    1ff4:	f7fe fcfc 	bl	9f0 <__aeabi_dcmpgt>
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d170      	bne.n	20de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xde>
    1ffc:	2000      	movs	r0, #0
    1ffe:	4914      	ldr	r1, [pc, #80]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    2000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2004:	f7fe f8ac 	bl	160 <__aeabi_dsub>
    2008:	4602      	mov	r2, r0
    200a:	460b      	mov	r3, r1
    200c:	4630      	mov	r0, r6
    200e:	4639      	mov	r1, r7
    2010:	f7fe fcd0 	bl	9b4 <__aeabi_dcmplt>
    2014:	2800      	cmp	r0, #0
    2016:	f43f af2d 	beq.w	1e74 <_dtoa_r+0x454>
    201a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    201c:	1e7b      	subs	r3, r7, #1
    201e:	9314      	str	r3, [sp, #80]	; 0x50
    2020:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    2024:	2b30      	cmp	r3, #48	; 0x30
    2026:	d0f8      	beq.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
    2028:	46c2      	mov	sl, r8
    202a:	e048      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    202c:	4b05      	ldr	r3, [pc, #20]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    202e:	f7fe fa4f 	bl	4d0 <__aeabi_dmul>
    2032:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2036:	e7bd      	b.n	1fb4 <_dtoa_r+0x594>
    2038:	00019b70 	.word	0x00019b70
    203c:	00019b48 	.word	0x00019b48
    2040:	3ff00000 	.word	0x3ff00000
    2044:	40240000 	.word	0x40240000
    2048:	401c0000 	.word	0x401c0000
    204c:	40140000 	.word	0x40140000
    2050:	3fe00000 	.word	0x3fe00000
    2054:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    2058:	9f03      	ldr	r7, [sp, #12]
    205a:	4640      	mov	r0, r8
    205c:	4649      	mov	r1, r9
    205e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2062:	f7fe fb5f 	bl	724 <__aeabi_ddiv>
    2066:	f7fe fccd 	bl	a04 <__aeabi_d2iz>
    206a:	4604      	mov	r4, r0
    206c:	f7fe f9c6 	bl	3fc <__aeabi_i2d>
    2070:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2078:	f7fe fa2a 	bl	4d0 <__aeabi_dmul>
    207c:	460b      	mov	r3, r1
    207e:	4602      	mov	r2, r0
    2080:	4649      	mov	r1, r9
    2082:	4640      	mov	r0, r8
    2084:	f7fe f86c 	bl	160 <__aeabi_dsub>
    2088:	f807 6b01 	strb.w	r6, [r7], #1
    208c:	9e03      	ldr	r6, [sp, #12]
    208e:	9b08      	ldr	r3, [sp, #32]
    2090:	1bbe      	subs	r6, r7, r6
    2092:	42b3      	cmp	r3, r6
    2094:	d138      	bne.n	2108 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x108>
    2096:	4602      	mov	r2, r0
    2098:	460b      	mov	r3, r1
    209a:	f7fe f863 	bl	164 <__adddf3>
    209e:	4680      	mov	r8, r0
    20a0:	4689      	mov	r9, r1
    20a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20a6:	f7fe fca3 	bl	9f0 <__aeabi_dcmpgt>
    20aa:	bb58      	cbnz	r0, 2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20ac:	4640      	mov	r0, r8
    20ae:	4649      	mov	r1, r9
    20b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20b4:	f7fe fc74 	bl	9a0 <__aeabi_dcmpeq>
    20b8:	b108      	cbz	r0, 20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    20ba:	07e1      	lsls	r1, r4, #31
    20bc:	d422      	bmi.n	2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20be:	4628      	mov	r0, r5
    20c0:	4659      	mov	r1, fp
    20c2:	f017 f800 	bl	190c6 <_Bfree>
    20c6:	2300      	movs	r3, #0
    20c8:	f10a 0001 	add.w	r0, sl, #1
    20cc:	703b      	strb	r3, [r7, #0]
    20ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
    20d0:	6018      	str	r0, [r3, #0]
    20d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    20d4:	2b00      	cmp	r3, #0
    20d6:	f43f acea 	beq.w	1aae <_dtoa_r+0x8e>
    20da:	601f      	str	r7, [r3, #0]
    20dc:	e4e7      	b.n	1aae <_dtoa_r+0x8e>
    20de:	4627      	mov	r7, r4
    20e0:	463b      	mov	r3, r7
    20e2:	461f      	mov	r7, r3
    20e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    20e8:	2a39      	cmp	r2, #57	; 0x39
    20ea:	d107      	bne.n	20fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xfc>
    20ec:	9a03      	ldr	r2, [sp, #12]
    20ee:	429a      	cmp	r2, r3
    20f0:	d1f7      	bne.n	20e2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe2>
    20f2:	2230      	movs	r2, #48	; 0x30
    20f4:	9903      	ldr	r1, [sp, #12]
    20f6:	f108 0801 	add.w	r8, r8, #1
    20fa:	700a      	strb	r2, [r1, #0]
    20fc:	781a      	ldrb	r2, [r3, #0]
    20fe:	3201      	adds	r2, #1
    2100:	701a      	strb	r2, [r3, #0]
    2102:	e791      	b.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    2104:	46d0      	mov	r8, sl
    2106:	e7eb      	b.n	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    2108:	2200      	movs	r2, #0
    210a:	4ba1      	ldr	r3, [pc, #644]	; (2390 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x390>)
    210c:	f7fe f9e0 	bl	4d0 <__aeabi_dmul>
    2110:	2200      	movs	r2, #0
    2112:	2300      	movs	r3, #0
    2114:	4680      	mov	r8, r0
    2116:	4689      	mov	r9, r1
    2118:	f7fe fc42 	bl	9a0 <__aeabi_dcmpeq>
    211c:	2800      	cmp	r0, #0
    211e:	d09c      	beq.n	205a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5a>
    2120:	e7cd      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2124:	2a00      	cmp	r2, #0
    2126:	f000 80cc 	beq.w	22c2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c2>
    212a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    212c:	2a01      	cmp	r2, #1
    212e:	f300 80af 	bgt.w	2290 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x290>
    2132:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2134:	2a00      	cmp	r2, #0
    2136:	f000 80a7 	beq.w	2288 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x288>
    213a:	f203 4333 	addw	r3, r3, #1075	; 0x433
    213e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2140:	9f06      	ldr	r7, [sp, #24]
    2142:	9a06      	ldr	r2, [sp, #24]
    2144:	2101      	movs	r1, #1
    2146:	4628      	mov	r0, r5
    2148:	441a      	add	r2, r3
    214a:	9206      	str	r2, [sp, #24]
    214c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    214e:	441a      	add	r2, r3
    2150:	9209      	str	r2, [sp, #36]	; 0x24
    2152:	f017 f85c 	bl	1920e <__i2b>
    2156:	4606      	mov	r6, r0
    2158:	2f00      	cmp	r7, #0
    215a:	dd0c      	ble.n	2176 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x176>
    215c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    215e:	2b00      	cmp	r3, #0
    2160:	dd09      	ble.n	2176 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x176>
    2162:	42bb      	cmp	r3, r7
    2164:	9a06      	ldr	r2, [sp, #24]
    2166:	bfa8      	it	ge
    2168:	463b      	movge	r3, r7
    216a:	1ad2      	subs	r2, r2, r3
    216c:	1aff      	subs	r7, r7, r3
    216e:	9206      	str	r2, [sp, #24]
    2170:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2172:	1ad3      	subs	r3, r2, r3
    2174:	9309      	str	r3, [sp, #36]	; 0x24
    2176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2178:	b1f3      	cbz	r3, 21b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b8>
    217a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    217c:	2b00      	cmp	r3, #0
    217e:	f000 80a4 	beq.w	22ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ca>
    2182:	2c00      	cmp	r4, #0
    2184:	dd10      	ble.n	21a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a8>
    2186:	4631      	mov	r1, r6
    2188:	4622      	mov	r2, r4
    218a:	4628      	mov	r0, r5
    218c:	f011 fd72 	bl	13c74 <__pow5mult>
    2190:	465a      	mov	r2, fp
    2192:	4601      	mov	r1, r0
    2194:	4606      	mov	r6, r0
    2196:	4628      	mov	r0, r5
    2198:	f017 f842 	bl	19220 <__multiply>
    219c:	4680      	mov	r8, r0
    219e:	4659      	mov	r1, fp
    21a0:	4628      	mov	r0, r5
    21a2:	46c3      	mov	fp, r8
    21a4:	f016 ff8f 	bl	190c6 <_Bfree>
    21a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21aa:	1b1a      	subs	r2, r3, r4
    21ac:	d004      	beq.n	21b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b8>
    21ae:	4659      	mov	r1, fp
    21b0:	4628      	mov	r0, r5
    21b2:	f011 fd5f 	bl	13c74 <__pow5mult>
    21b6:	4683      	mov	fp, r0
    21b8:	2101      	movs	r1, #1
    21ba:	4628      	mov	r0, r5
    21bc:	f017 f827 	bl	1920e <__i2b>
    21c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    21c2:	4604      	mov	r4, r0
    21c4:	2b00      	cmp	r3, #0
    21c6:	f340 8082 	ble.w	22ce <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ce>
    21ca:	461a      	mov	r2, r3
    21cc:	4601      	mov	r1, r0
    21ce:	4628      	mov	r0, r5
    21d0:	f011 fd50 	bl	13c74 <__pow5mult>
    21d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    21d6:	4604      	mov	r4, r0
    21d8:	2b01      	cmp	r3, #1
    21da:	dd7b      	ble.n	22d4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2d4>
    21dc:	f04f 0800 	mov.w	r8, #0
    21e0:	6923      	ldr	r3, [r4, #16]
    21e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    21e6:	6918      	ldr	r0, [r3, #16]
    21e8:	f016 ffc3 	bl	19172 <__hi0bits>
    21ec:	f1c0 0020 	rsb	r0, r0, #32
    21f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21f2:	4418      	add	r0, r3
    21f4:	f010 001f 	ands.w	r0, r0, #31
    21f8:	f000 808d 	beq.w	2316 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x316>
    21fc:	f1c0 0320 	rsb	r3, r0, #32
    2200:	2b04      	cmp	r3, #4
    2202:	f340 8086 	ble.w	2312 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x312>
    2206:	f1c0 001c 	rsb	r0, r0, #28
    220a:	9b06      	ldr	r3, [sp, #24]
    220c:	4407      	add	r7, r0
    220e:	4403      	add	r3, r0
    2210:	9306      	str	r3, [sp, #24]
    2212:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2214:	4403      	add	r3, r0
    2216:	9309      	str	r3, [sp, #36]	; 0x24
    2218:	9b06      	ldr	r3, [sp, #24]
    221a:	2b00      	cmp	r3, #0
    221c:	dd05      	ble.n	222a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22a>
    221e:	4659      	mov	r1, fp
    2220:	461a      	mov	r2, r3
    2222:	4628      	mov	r0, r5
    2224:	f017 f897 	bl	19356 <__lshift>
    2228:	4683      	mov	fp, r0
    222a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    222c:	2b00      	cmp	r3, #0
    222e:	dd05      	ble.n	223c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x23c>
    2230:	4621      	mov	r1, r4
    2232:	461a      	mov	r2, r3
    2234:	4628      	mov	r0, r5
    2236:	f017 f88e 	bl	19356 <__lshift>
    223a:	4604      	mov	r4, r0
    223c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    223e:	2b00      	cmp	r3, #0
    2240:	d06b      	beq.n	231a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x31a>
    2242:	4621      	mov	r1, r4
    2244:	4658      	mov	r0, fp
    2246:	f017 f8e5 	bl	19414 <__mcmp>
    224a:	2800      	cmp	r0, #0
    224c:	da65      	bge.n	231a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x31a>
    224e:	2300      	movs	r3, #0
    2250:	4659      	mov	r1, fp
    2252:	220a      	movs	r2, #10
    2254:	4628      	mov	r0, r5
    2256:	f016 ff4d 	bl	190f4 <__multadd>
    225a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    225c:	f10a 3aff 	add.w	sl, sl, #4294967295
    2260:	4683      	mov	fp, r0
    2262:	2b00      	cmp	r3, #0
    2264:	f000 818b 	beq.w	257e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x57e>
    2268:	4631      	mov	r1, r6
    226a:	2300      	movs	r3, #0
    226c:	220a      	movs	r2, #10
    226e:	4628      	mov	r0, r5
    2270:	f016 ff40 	bl	190f4 <__multadd>
    2274:	f1b9 0f00 	cmp.w	r9, #0
    2278:	4606      	mov	r6, r0
    227a:	f300 8091 	bgt.w	23a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a0>
    227e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2280:	2b02      	cmp	r3, #2
    2282:	f340 808d 	ble.w	23a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a0>
    2286:	e050      	b.n	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
    2288:	9b16      	ldr	r3, [sp, #88]	; 0x58
    228a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    228e:	e756      	b.n	213e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x13e>
    2290:	9b08      	ldr	r3, [sp, #32]
    2292:	1e5c      	subs	r4, r3, #1
    2294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2296:	42a3      	cmp	r3, r4
    2298:	bfb7      	itett	lt
    229a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    229c:	1b1c      	subge	r4, r3, r4
    229e:	940a      	strlt	r4, [sp, #40]	; 0x28
    22a0:	1ae2      	sublt	r2, r4, r3
    22a2:	bfbf      	itttt	lt
    22a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    22a6:	2400      	movlt	r4, #0
    22a8:	189b      	addlt	r3, r3, r2
    22aa:	930e      	strlt	r3, [sp, #56]	; 0x38
    22ac:	9b08      	ldr	r3, [sp, #32]
    22ae:	2b00      	cmp	r3, #0
    22b0:	bfbb      	ittet	lt
    22b2:	9b06      	ldrlt	r3, [sp, #24]
    22b4:	9a08      	ldrlt	r2, [sp, #32]
    22b6:	9f06      	ldrge	r7, [sp, #24]
    22b8:	1a9f      	sublt	r7, r3, r2
    22ba:	bfac      	ite	ge
    22bc:	9b08      	ldrge	r3, [sp, #32]
    22be:	2300      	movlt	r3, #0
    22c0:	e73f      	b.n	2142 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x142>
    22c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    22c4:	9f06      	ldr	r7, [sp, #24]
    22c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    22c8:	e746      	b.n	2158 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x158>
    22ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    22cc:	e76f      	b.n	21ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1ae>
    22ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    22d0:	2b01      	cmp	r3, #1
    22d2:	dc19      	bgt.n	2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22d4:	9b04      	ldr	r3, [sp, #16]
    22d6:	b9bb      	cbnz	r3, 2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22d8:	9b05      	ldr	r3, [sp, #20]
    22da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    22de:	b99b      	cbnz	r3, 2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22e0:	9b05      	ldr	r3, [sp, #20]
    22e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    22e6:	0d1b      	lsrs	r3, r3, #20
    22e8:	051b      	lsls	r3, r3, #20
    22ea:	b183      	cbz	r3, 230e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30e>
    22ec:	9b06      	ldr	r3, [sp, #24]
    22ee:	f04f 0801 	mov.w	r8, #1
    22f2:	3301      	adds	r3, #1
    22f4:	9306      	str	r3, [sp, #24]
    22f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22f8:	3301      	adds	r3, #1
    22fa:	9309      	str	r3, [sp, #36]	; 0x24
    22fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    22fe:	2b00      	cmp	r3, #0
    2300:	f47f af6e 	bne.w	21e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e0>
    2304:	2001      	movs	r0, #1
    2306:	e773      	b.n	21f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f0>
    2308:	f04f 0800 	mov.w	r8, #0
    230c:	e7f6      	b.n	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
    230e:	4698      	mov	r8, r3
    2310:	e7f4      	b.n	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
    2312:	d081      	beq.n	2218 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x218>
    2314:	4618      	mov	r0, r3
    2316:	301c      	adds	r0, #28
    2318:	e777      	b.n	220a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20a>
    231a:	9b08      	ldr	r3, [sp, #32]
    231c:	2b00      	cmp	r3, #0
    231e:	dc39      	bgt.n	2394 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x394>
    2320:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2322:	2b02      	cmp	r3, #2
    2324:	dd36      	ble.n	2394 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x394>
    2326:	f8dd 9020 	ldr.w	r9, [sp, #32]
    232a:	f1b9 0f00 	cmp.w	r9, #0
    232e:	d10d      	bne.n	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    2330:	4621      	mov	r1, r4
    2332:	464b      	mov	r3, r9
    2334:	2205      	movs	r2, #5
    2336:	4628      	mov	r0, r5
    2338:	f016 fedc 	bl	190f4 <__multadd>
    233c:	4601      	mov	r1, r0
    233e:	4604      	mov	r4, r0
    2340:	4658      	mov	r0, fp
    2342:	f017 f867 	bl	19414 <__mcmp>
    2346:	2800      	cmp	r0, #0
    2348:	f73f adc0 	bgt.w	1ecc <_dtoa_r+0x4ac>
    234c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    234e:	9f03      	ldr	r7, [sp, #12]
    2350:	ea6f 0a03 	mvn.w	sl, r3
    2354:	f04f 0800 	mov.w	r8, #0
    2358:	4621      	mov	r1, r4
    235a:	4628      	mov	r0, r5
    235c:	f016 feb3 	bl	190c6 <_Bfree>
    2360:	2e00      	cmp	r6, #0
    2362:	f43f aeac 	beq.w	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2366:	f1b8 0f00 	cmp.w	r8, #0
    236a:	d005      	beq.n	2378 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x378>
    236c:	45b0      	cmp	r8, r6
    236e:	d003      	beq.n	2378 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x378>
    2370:	4641      	mov	r1, r8
    2372:	4628      	mov	r0, r5
    2374:	f016 fea7 	bl	190c6 <_Bfree>
    2378:	4631      	mov	r1, r6
    237a:	4628      	mov	r0, r5
    237c:	f016 fea3 	bl	190c6 <_Bfree>
    2380:	e69d      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2382:	2400      	movs	r4, #0
    2384:	4626      	mov	r6, r4
    2386:	e7e1      	b.n	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    2388:	46c2      	mov	sl, r8
    238a:	4626      	mov	r6, r4
    238c:	e59e      	b.n	1ecc <_dtoa_r+0x4ac>
    238e:	bf00      	nop
    2390:	40240000 	.word	0x40240000
    2394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2396:	f8dd 9020 	ldr.w	r9, [sp, #32]
    239a:	2b00      	cmp	r3, #0
    239c:	f000 80f6 	beq.w	258c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58c>
    23a0:	2f00      	cmp	r7, #0
    23a2:	dd05      	ble.n	23b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3b0>
    23a4:	4631      	mov	r1, r6
    23a6:	463a      	mov	r2, r7
    23a8:	4628      	mov	r0, r5
    23aa:	f016 ffd4 	bl	19356 <__lshift>
    23ae:	4606      	mov	r6, r0
    23b0:	f1b8 0f00 	cmp.w	r8, #0
    23b4:	d055      	beq.n	2462 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x462>
    23b6:	6871      	ldr	r1, [r6, #4]
    23b8:	4628      	mov	r0, r5
    23ba:	f016 fe50 	bl	1905e <_Balloc>
    23be:	6932      	ldr	r2, [r6, #16]
    23c0:	4607      	mov	r7, r0
    23c2:	f106 010c 	add.w	r1, r6, #12
    23c6:	3202      	adds	r2, #2
    23c8:	300c      	adds	r0, #12
    23ca:	0092      	lsls	r2, r2, #2
    23cc:	f016 fb91 	bl	18af2 <memcpy>
    23d0:	2201      	movs	r2, #1
    23d2:	4639      	mov	r1, r7
    23d4:	4628      	mov	r0, r5
    23d6:	f016 ffbe 	bl	19356 <__lshift>
    23da:	9b03      	ldr	r3, [sp, #12]
    23dc:	46b0      	mov	r8, r6
    23de:	4606      	mov	r6, r0
    23e0:	3301      	adds	r3, #1
    23e2:	9308      	str	r3, [sp, #32]
    23e4:	9b03      	ldr	r3, [sp, #12]
    23e6:	444b      	add	r3, r9
    23e8:	930a      	str	r3, [sp, #40]	; 0x28
    23ea:	9b04      	ldr	r3, [sp, #16]
    23ec:	f003 0301 	and.w	r3, r3, #1
    23f0:	9309      	str	r3, [sp, #36]	; 0x24
    23f2:	9b08      	ldr	r3, [sp, #32]
    23f4:	4621      	mov	r1, r4
    23f6:	4658      	mov	r0, fp
    23f8:	3b01      	subs	r3, #1
    23fa:	9304      	str	r3, [sp, #16]
    23fc:	f016 fd47 	bl	18e8e <quorem>
    2400:	4603      	mov	r3, r0
    2402:	4641      	mov	r1, r8
    2404:	9006      	str	r0, [sp, #24]
    2406:	4658      	mov	r0, fp
    2408:	3330      	adds	r3, #48	; 0x30
    240a:	930b      	str	r3, [sp, #44]	; 0x2c
    240c:	f017 f802 	bl	19414 <__mcmp>
    2410:	4632      	mov	r2, r6
    2412:	4681      	mov	r9, r0
    2414:	4621      	mov	r1, r4
    2416:	4628      	mov	r0, r5
    2418:	f017 f817 	bl	1944a <__mdiff>
    241c:	68c2      	ldr	r2, [r0, #12]
    241e:	4607      	mov	r7, r0
    2420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2422:	bb02      	cbnz	r2, 2466 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x466>
    2424:	4601      	mov	r1, r0
    2426:	4658      	mov	r0, fp
    2428:	f016 fff4 	bl	19414 <__mcmp>
    242c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    242e:	4602      	mov	r2, r0
    2430:	4639      	mov	r1, r7
    2432:	4628      	mov	r0, r5
    2434:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2438:	f016 fe45 	bl	190c6 <_Bfree>
    243c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    243e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2440:	9f08      	ldr	r7, [sp, #32]
    2442:	ea43 0102 	orr.w	r1, r3, r2
    2446:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2448:	430b      	orrs	r3, r1
    244a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    244c:	d10d      	bne.n	246a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46a>
    244e:	2b39      	cmp	r3, #57	; 0x39
    2450:	d029      	beq.n	24a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a6>
    2452:	f1b9 0f00 	cmp.w	r9, #0
    2456:	dd01      	ble.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    2458:	9b06      	ldr	r3, [sp, #24]
    245a:	3331      	adds	r3, #49	; 0x31
    245c:	9a04      	ldr	r2, [sp, #16]
    245e:	7013      	strb	r3, [r2, #0]
    2460:	e77a      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    2462:	4630      	mov	r0, r6
    2464:	e7b9      	b.n	23da <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3da>
    2466:	2201      	movs	r2, #1
    2468:	e7e2      	b.n	2430 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x430>
    246a:	f1b9 0f00 	cmp.w	r9, #0
    246e:	db06      	blt.n	247e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x47e>
    2470:	9922      	ldr	r1, [sp, #136]	; 0x88
    2472:	ea41 0909 	orr.w	r9, r1, r9
    2476:	9909      	ldr	r1, [sp, #36]	; 0x24
    2478:	ea59 0101 	orrs.w	r1, r9, r1
    247c:	d120      	bne.n	24c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c0>
    247e:	2a00      	cmp	r2, #0
    2480:	ddec      	ble.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    2482:	4659      	mov	r1, fp
    2484:	2201      	movs	r2, #1
    2486:	4628      	mov	r0, r5
    2488:	9308      	str	r3, [sp, #32]
    248a:	f016 ff64 	bl	19356 <__lshift>
    248e:	4621      	mov	r1, r4
    2490:	4683      	mov	fp, r0
    2492:	f016 ffbf 	bl	19414 <__mcmp>
    2496:	2800      	cmp	r0, #0
    2498:	9b08      	ldr	r3, [sp, #32]
    249a:	dc02      	bgt.n	24a2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a2>
    249c:	d1de      	bne.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    249e:	07da      	lsls	r2, r3, #31
    24a0:	d5dc      	bpl.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    24a2:	2b39      	cmp	r3, #57	; 0x39
    24a4:	d1d8      	bne.n	2458 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x458>
    24a6:	2339      	movs	r3, #57	; 0x39
    24a8:	9a04      	ldr	r2, [sp, #16]
    24aa:	7013      	strb	r3, [r2, #0]
    24ac:	463b      	mov	r3, r7
    24ae:	461f      	mov	r7, r3
    24b0:	3b01      	subs	r3, #1
    24b2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    24b6:	2a39      	cmp	r2, #57	; 0x39
    24b8:	d050      	beq.n	255c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x55c>
    24ba:	3201      	adds	r2, #1
    24bc:	701a      	strb	r2, [r3, #0]
    24be:	e74b      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    24c0:	2a00      	cmp	r2, #0
    24c2:	dd03      	ble.n	24cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4cc>
    24c4:	2b39      	cmp	r3, #57	; 0x39
    24c6:	d0ee      	beq.n	24a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a6>
    24c8:	3301      	adds	r3, #1
    24ca:	e7c7      	b.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    24cc:	9a08      	ldr	r2, [sp, #32]
    24ce:	990a      	ldr	r1, [sp, #40]	; 0x28
    24d0:	f802 3c01 	strb.w	r3, [r2, #-1]
    24d4:	428a      	cmp	r2, r1
    24d6:	d02a      	beq.n	252e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x52e>
    24d8:	4659      	mov	r1, fp
    24da:	2300      	movs	r3, #0
    24dc:	220a      	movs	r2, #10
    24de:	4628      	mov	r0, r5
    24e0:	f016 fe08 	bl	190f4 <__multadd>
    24e4:	45b0      	cmp	r8, r6
    24e6:	4683      	mov	fp, r0
    24e8:	f04f 0300 	mov.w	r3, #0
    24ec:	f04f 020a 	mov.w	r2, #10
    24f0:	4641      	mov	r1, r8
    24f2:	4628      	mov	r0, r5
    24f4:	d107      	bne.n	2506 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x506>
    24f6:	f016 fdfd 	bl	190f4 <__multadd>
    24fa:	4680      	mov	r8, r0
    24fc:	4606      	mov	r6, r0
    24fe:	9b08      	ldr	r3, [sp, #32]
    2500:	3301      	adds	r3, #1
    2502:	9308      	str	r3, [sp, #32]
    2504:	e775      	b.n	23f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3f2>
    2506:	f016 fdf5 	bl	190f4 <__multadd>
    250a:	4631      	mov	r1, r6
    250c:	4680      	mov	r8, r0
    250e:	2300      	movs	r3, #0
    2510:	220a      	movs	r2, #10
    2512:	4628      	mov	r0, r5
    2514:	f016 fdee 	bl	190f4 <__multadd>
    2518:	4606      	mov	r6, r0
    251a:	e7f0      	b.n	24fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4fe>
    251c:	f1b9 0f00 	cmp.w	r9, #0
    2520:	9a03      	ldr	r2, [sp, #12]
    2522:	f04f 0800 	mov.w	r8, #0
    2526:	bfcc      	ite	gt
    2528:	464f      	movgt	r7, r9
    252a:	2701      	movle	r7, #1
    252c:	4417      	add	r7, r2
    252e:	4659      	mov	r1, fp
    2530:	2201      	movs	r2, #1
    2532:	4628      	mov	r0, r5
    2534:	9308      	str	r3, [sp, #32]
    2536:	f016 ff0e 	bl	19356 <__lshift>
    253a:	4621      	mov	r1, r4
    253c:	4683      	mov	fp, r0
    253e:	f016 ff69 	bl	19414 <__mcmp>
    2542:	2800      	cmp	r0, #0
    2544:	dcb2      	bgt.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
    2546:	d102      	bne.n	254e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54e>
    2548:	9b08      	ldr	r3, [sp, #32]
    254a:	07db      	lsls	r3, r3, #31
    254c:	d4ae      	bmi.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
    254e:	463b      	mov	r3, r7
    2550:	461f      	mov	r7, r3
    2552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2556:	2a30      	cmp	r2, #48	; 0x30
    2558:	d0fa      	beq.n	2550 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x550>
    255a:	e6fd      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    255c:	9a03      	ldr	r2, [sp, #12]
    255e:	429a      	cmp	r2, r3
    2560:	d1a5      	bne.n	24ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ae>
    2562:	f10a 0a01 	add.w	sl, sl, #1
    2566:	2331      	movs	r3, #49	; 0x31
    2568:	e779      	b.n	245e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45e>
    256a:	4b13      	ldr	r3, [pc, #76]	; (25b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5b8>)
    256c:	f7ff babe 	b.w	1aec <_dtoa_r+0xcc>
    2570:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2572:	2b00      	cmp	r3, #0
    2574:	f47f aa96 	bne.w	1aa4 <_dtoa_r+0x84>
    2578:	4b10      	ldr	r3, [pc, #64]	; (25bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5bc>)
    257a:	f7ff bab7 	b.w	1aec <_dtoa_r+0xcc>
    257e:	f1b9 0f00 	cmp.w	r9, #0
    2582:	dc03      	bgt.n	258c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58c>
    2584:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2586:	2b02      	cmp	r3, #2
    2588:	f73f aecf 	bgt.w	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
    258c:	9f03      	ldr	r7, [sp, #12]
    258e:	4621      	mov	r1, r4
    2590:	4658      	mov	r0, fp
    2592:	f016 fc7c 	bl	18e8e <quorem>
    2596:	9a03      	ldr	r2, [sp, #12]
    2598:	f100 0330 	add.w	r3, r0, #48	; 0x30
    259c:	f807 3b01 	strb.w	r3, [r7], #1
    25a0:	1aba      	subs	r2, r7, r2
    25a2:	4591      	cmp	r9, r2
    25a4:	ddba      	ble.n	251c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x51c>
    25a6:	4659      	mov	r1, fp
    25a8:	2300      	movs	r3, #0
    25aa:	220a      	movs	r2, #10
    25ac:	4628      	mov	r0, r5
    25ae:	f016 fda1 	bl	190f4 <__multadd>
    25b2:	4683      	mov	fp, r0
    25b4:	e7eb      	b.n	258e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58e>
    25b6:	bf00      	nop
    25b8:	0001d256 	.word	0x0001d256
    25bc:	0001d27a 	.word	0x0001d27a

000025c0 <_Z18ee_serial_callbackc>:
 * from the UART ISR for each new character received. When the parser sees the
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
    25c0:	b538      	push	{r3, r4, r5, lr}
  if (c == EE_CMD_TERMINATOR) {
    25c2:	2825      	cmp	r0, #37	; 0x25
    25c4:	d00c      	beq.n	25e0 <_Z18ee_serial_callbackc+0x20>
    g_cmd_buf[g_cmd_pos] = (char)0;
    th_command_ready(g_cmd_buf);
    g_cmd_pos = 0;
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    25c6:	4b0c      	ldr	r3, [pc, #48]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25c8:	681a      	ldr	r2, [r3, #0]
    25ca:	490c      	ldr	r1, [pc, #48]	; (25fc <_Z18ee_serial_callbackc+0x3c>)
    25cc:	5488      	strb	r0, [r1, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    25ce:	681b      	ldr	r3, [r3, #0]
    25d0:	2b4f      	cmp	r3, #79	; 0x4f
    25d2:	d80e      	bhi.n	25f2 <_Z18ee_serial_callbackc+0x32>
    25d4:	4b08      	ldr	r3, [pc, #32]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	3301      	adds	r3, #1
    25da:	4a07      	ldr	r2, [pc, #28]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25dc:	6013      	str	r3, [r2, #0]
  }
}
    25de:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = (char)0;
    25e0:	4c05      	ldr	r4, [pc, #20]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25e2:	6823      	ldr	r3, [r4, #0]
    25e4:	4805      	ldr	r0, [pc, #20]	; (25fc <_Z18ee_serial_callbackc+0x3c>)
    25e6:	2500      	movs	r5, #0
    25e8:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    25ea:	f011 fc84 	bl	13ef6 <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    25ee:	6025      	str	r5, [r4, #0]
    25f0:	e7f5      	b.n	25de <_Z18ee_serial_callbackc+0x1e>
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    25f2:	2350      	movs	r3, #80	; 0x50
    25f4:	e7f1      	b.n	25da <_Z18ee_serial_callbackc+0x1a>
    25f6:	bf00      	nop
    25f8:	200185e4 	.word	0x200185e4
    25fc:	20018590 	.word	0x20018590

00002600 <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    2600:	b508      	push	{r3, lr}
  th_serialport_initialize();
    2602:	f011 fc92 	bl	13f2a <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    2606:	f000 fad1 	bl	2bac <_Z23th_timestamp_initializev>
  th_final_initialize();
    260a:	f000 fad9 	bl	2bc0 <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    260e:	4805      	ldr	r0, [pc, #20]	; (2624 <_Z23ee_benchmark_initializev+0x24>)
    2610:	f011 fc7d 	bl	13f0e <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    2614:	4b04      	ldr	r3, [pc, #16]	; (2628 <_Z23ee_benchmark_initializev+0x28>)
    2616:	2201      	movs	r2, #1
    2618:	701a      	strb	r2, [r3, #0]
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    261a:	4804      	ldr	r0, [pc, #16]	; (262c <_Z23ee_benchmark_initializev+0x2c>)
    261c:	f011 fc77 	bl	13f0e <_Z9th_printfPKcz>
}
    2620:	bd08      	pop	{r3, pc}
    2622:	bf00      	nop
    2624:	00019c38 	.word	0x00019c38
    2628:	20027368 	.word	0x20027368
    262c:	00019c48 	.word	0x00019c48

00002630 <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    2630:	b570      	push	{r4, r5, r6, lr}
    2632:	4604      	mov	r4, r0
    2634:	460d      	mov	r5, r1
  th_load_tensor(); /* if necessary */
    2636:	f000 fa01 	bl	2a3c <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    263a:	4629      	mov	r1, r5
    263c:	4811      	ldr	r0, [pc, #68]	; (2684 <_Z8ee_inferjj+0x54>)
    263e:	f011 fc66 	bl	13f0e <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    2642:	1e6e      	subs	r6, r5, #1
    2644:	b11d      	cbz	r5, 264e <_Z8ee_inferjj+0x1e>
    th_infer(); /* call the API inference function */
    2646:	f000 f9e7 	bl	2a18 <_Z8th_inferv>
  while (n_warmup-- > 0) {
    264a:	4635      	mov	r5, r6
    264c:	e7f9      	b.n	2642 <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    264e:	480e      	ldr	r0, [pc, #56]	; (2688 <_Z8ee_inferjj+0x58>)
    2650:	f011 fc5d 	bl	13f0e <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    2654:	4621      	mov	r1, r4
    2656:	480d      	ldr	r0, [pc, #52]	; (268c <_Z8ee_inferjj+0x5c>)
    2658:	f011 fc59 	bl	13f0e <_Z9th_printfPKcz>
  th_timestamp();
    265c:	f000 fa72 	bl	2b44 <_Z12th_timestampv>
  th_pre();
    2660:	f011 fc47 	bl	13ef2 <_Z6th_prev>
  while (n-- > 0) {
    2664:	1e65      	subs	r5, r4, #1
    2666:	b11c      	cbz	r4, 2670 <_Z8ee_inferjj+0x40>
    th_infer(); /* call the API inference function */
    2668:	f000 f9d6 	bl	2a18 <_Z8th_inferv>
  while (n-- > 0) {
    266c:	462c      	mov	r4, r5
    266e:	e7f9      	b.n	2664 <_Z8ee_inferjj+0x34>
  }
  th_post();
    2670:	f011 fc40 	bl	13ef4 <_Z7th_postv>
  th_timestamp();
    2674:	f000 fa66 	bl	2b44 <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    2678:	4805      	ldr	r0, [pc, #20]	; (2690 <_Z8ee_inferjj+0x60>)
    267a:	f011 fc48 	bl	13f0e <_Z9th_printfPKcz>
  th_results();
    267e:	f000 fa1f 	bl	2ac0 <_Z10th_resultsv>
}
    2682:	bd70      	pop	{r4, r5, r6, pc}
    2684:	00019c54 	.word	0x00019c54
    2688:	00019c68 	.word	0x00019c68
    268c:	00019c78 	.word	0x00019c78
    2690:	00019c8c 	.word	0x00019c8c

00002694 <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    2694:	b570      	push	{r4, r5, r6, lr}
    2696:	b082      	sub	sp, #8
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    2698:	2250      	movs	r2, #80	; 0x50
    269a:	4951      	ldr	r1, [pc, #324]	; (27e0 <_Z15ee_buffer_parsePc+0x14c>)
    269c:	f016 fb9d 	bl	18dda <strncmp>
    26a0:	b110      	cbz	r0, 26a8 <_Z15ee_buffer_parsePc+0x14>
    return EE_ARG_UNCLAIMED;
    26a2:	2001      	movs	r0, #1
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    26a4:	b002      	add	sp, #8
    26a6:	bd70      	pop	{r4, r5, r6, pc}
  p_next = strtok(NULL, EE_CMD_DELIMITER);
    26a8:	494e      	ldr	r1, [pc, #312]	; (27e4 <_Z15ee_buffer_parsePc+0x150>)
    26aa:	f010 ff91 	bl	135d0 <strtok>
  if (p_next == NULL) {
    26ae:	4605      	mov	r5, r0
    26b0:	b1d8      	cbz	r0, 26ea <_Z15ee_buffer_parsePc+0x56>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    26b2:	2250      	movs	r2, #80	; 0x50
    26b4:	494c      	ldr	r1, [pc, #304]	; (27e8 <_Z15ee_buffer_parsePc+0x154>)
    26b6:	f016 fb90 	bl	18dda <strncmp>
    26ba:	bb50      	cbnz	r0, 2712 <_Z15ee_buffer_parsePc+0x7e>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    26bc:	4949      	ldr	r1, [pc, #292]	; (27e4 <_Z15ee_buffer_parsePc+0x150>)
    26be:	f010 ff87 	bl	135d0 <strtok>
    if (p_next == NULL) {
    26c2:	b1b8      	cbz	r0, 26f4 <_Z15ee_buffer_parsePc+0x60>
      g_buff_size = (size_t)atoi(p_next);
    26c4:	f016 f9f5 	bl	18ab2 <atoi>
    26c8:	4601      	mov	r1, r0
    26ca:	4b48      	ldr	r3, [pc, #288]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    26cc:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    26ce:	b1b0      	cbz	r0, 26fe <_Z15ee_buffer_parsePc+0x6a>
        g_buff_pos = 0;
    26d0:	4b47      	ldr	r3, [pc, #284]	; (27f0 <_Z15ee_buffer_parsePc+0x15c>)
    26d2:	2200      	movs	r2, #0
    26d4:	601a      	str	r2, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    26d6:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
    26da:	d915      	bls.n	2708 <_Z15ee_buffer_parsePc+0x74>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    26dc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    26e0:	4844      	ldr	r0, [pc, #272]	; (27f4 <_Z15ee_buffer_parsePc+0x160>)
    26e2:	f011 fc14 	bl	13f0e <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26e6:	2000      	movs	r0, #0
    26e8:	e7dc      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    26ea:	4843      	ldr	r0, [pc, #268]	; (27f8 <_Z15ee_buffer_parsePc+0x164>)
    26ec:	f011 fc0f 	bl	13f0e <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26f0:	2000      	movs	r0, #0
    26f2:	e7d7      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    26f4:	4841      	ldr	r0, [pc, #260]	; (27fc <_Z15ee_buffer_parsePc+0x168>)
    26f6:	f011 fc0a 	bl	13f0e <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26fa:	2000      	movs	r0, #0
    26fc:	e7d2      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    26fe:	4840      	ldr	r0, [pc, #256]	; (2800 <_Z15ee_buffer_parsePc+0x16c>)
    2700:	f011 fc05 	bl	13f0e <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2704:	2000      	movs	r0, #0
    2706:	e7cd      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    2708:	483e      	ldr	r0, [pc, #248]	; (2804 <_Z15ee_buffer_parsePc+0x170>)
    270a:	f011 fc00 	bl	13f0e <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    270e:	2000      	movs	r0, #0
    2710:	e7c8      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    2712:	2250      	movs	r2, #80	; 0x50
    2714:	493c      	ldr	r1, [pc, #240]	; (2808 <_Z15ee_buffer_parsePc+0x174>)
    2716:	4628      	mov	r0, r5
    2718:	f016 fb5f 	bl	18dda <strncmp>
    271c:	bb60      	cbnz	r0, 2778 <_Z15ee_buffer_parsePc+0xe4>
    size_t i = 0;
    271e:	2400      	movs	r4, #0
    2720:	e012      	b.n	2748 <_Z15ee_buffer_parsePc+0xb4>
        th_printf("m-buffer-");
    2722:	483a      	ldr	r0, [pc, #232]	; (280c <_Z15ee_buffer_parsePc+0x178>)
    2724:	f011 fbf3 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    2728:	4b39      	ldr	r3, [pc, #228]	; (2810 <_Z15ee_buffer_parsePc+0x17c>)
    272a:	5d19      	ldrb	r1, [r3, r4]
    272c:	4839      	ldr	r0, [pc, #228]	; (2814 <_Z15ee_buffer_parsePc+0x180>)
    272e:	f011 fbee 	bl	13f0e <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    2732:	3401      	adds	r4, #1
    2734:	f014 0f07 	tst.w	r4, #7
    2738:	d003      	beq.n	2742 <_Z15ee_buffer_parsePc+0xae>
    273a:	4b2c      	ldr	r3, [pc, #176]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    273c:	681b      	ldr	r3, [r3, #0]
    273e:	429c      	cmp	r4, r3
    2740:	d10c      	bne.n	275c <_Z15ee_buffer_parsePc+0xc8>
        th_printf("\r\n");
    2742:	4835      	ldr	r0, [pc, #212]	; (2818 <_Z15ee_buffer_parsePc+0x184>)
    2744:	f011 fbe3 	bl	13f0e <_Z9th_printfPKcz>
    for (; i < g_buff_size; ++i) {
    2748:	4b28      	ldr	r3, [pc, #160]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	42a3      	cmp	r3, r4
    274e:	d909      	bls.n	2764 <_Z15ee_buffer_parsePc+0xd0>
    if ((i + max) % max == 0 || i == 0) {
    2750:	f014 0f07 	tst.w	r4, #7
    2754:	d0e5      	beq.n	2722 <_Z15ee_buffer_parsePc+0x8e>
    2756:	2c00      	cmp	r4, #0
    2758:	d1e6      	bne.n	2728 <_Z15ee_buffer_parsePc+0x94>
    275a:	e7e2      	b.n	2722 <_Z15ee_buffer_parsePc+0x8e>
        th_printf("-");
    275c:	482f      	ldr	r0, [pc, #188]	; (281c <_Z15ee_buffer_parsePc+0x188>)
    275e:	f011 fbd6 	bl	13f0e <_Z9th_printfPKcz>
    2762:	e7f1      	b.n	2748 <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    2764:	f014 0f07 	tst.w	r4, #7
    2768:	d101      	bne.n	276e <_Z15ee_buffer_parsePc+0xda>
  return EE_ARG_CLAIMED;
    276a:	2000      	movs	r0, #0
    276c:	e79a      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    th_printf("\r\n");
    276e:	482a      	ldr	r0, [pc, #168]	; (2818 <_Z15ee_buffer_parsePc+0x184>)
    2770:	f011 fbcd 	bl	13f0e <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2774:	2000      	movs	r0, #0
    2776:	e795      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    2778:	2150      	movs	r1, #80	; 0x50
    277a:	4628      	mov	r0, r5
    277c:	f011 fbbf 	bl	13efe <_Z10th_strnlenPKcj>
    2780:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    2782:	f010 0401 	ands.w	r4, r0, #1
    2786:	d11f      	bne.n	27c8 <_Z15ee_buffer_parsePc+0x134>
    test[2] = 0;
    2788:	2300      	movs	r3, #0
    278a:	f88d 3006 	strb.w	r3, [sp, #6]
    for (size_t i = 0; i < numbytes;) {
    278e:	42b4      	cmp	r4, r6
    2790:	d224      	bcs.n	27dc <_Z15ee_buffer_parsePc+0x148>
      test[0] = p_next[i++];
    2792:	1c63      	adds	r3, r4, #1
    2794:	5d2a      	ldrb	r2, [r5, r4]
    2796:	f88d 2004 	strb.w	r2, [sp, #4]
      test[1] = p_next[i++];
    279a:	5ceb      	ldrb	r3, [r5, r3]
    279c:	3402      	adds	r4, #2
    279e:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    27a2:	a801      	add	r0, sp, #4
    27a4:	f011 fb1c 	bl	13de0 <_Z9ee_hexdecPc>
      if (res < 0) {
    27a8:	2800      	cmp	r0, #0
    27aa:	db11      	blt.n	27d0 <_Z15ee_buffer_parsePc+0x13c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    27ac:	4a10      	ldr	r2, [pc, #64]	; (27f0 <_Z15ee_buffer_parsePc+0x15c>)
    27ae:	6813      	ldr	r3, [r2, #0]
    27b0:	4917      	ldr	r1, [pc, #92]	; (2810 <_Z15ee_buffer_parsePc+0x17c>)
    27b2:	54c8      	strb	r0, [r1, r3]
        g_buff_pos++;
    27b4:	3301      	adds	r3, #1
    27b6:	6013      	str	r3, [r2, #0]
        if (g_buff_pos == g_buff_size) {
    27b8:	4a0c      	ldr	r2, [pc, #48]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    27ba:	6812      	ldr	r2, [r2, #0]
    27bc:	4293      	cmp	r3, r2
    27be:	d1e6      	bne.n	278e <_Z15ee_buffer_parsePc+0xfa>
          th_printf("m-load-done\r\n");
    27c0:	4817      	ldr	r0, [pc, #92]	; (2820 <_Z15ee_buffer_parsePc+0x18c>)
    27c2:	f011 fba4 	bl	13f0e <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    27c6:	e007      	b.n	27d8 <_Z15ee_buffer_parsePc+0x144>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    27c8:	4816      	ldr	r0, [pc, #88]	; (2824 <_Z15ee_buffer_parsePc+0x190>)
    27ca:	f011 fba0 	bl	13f0e <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    27ce:	e003      	b.n	27d8 <_Z15ee_buffer_parsePc+0x144>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    27d0:	a901      	add	r1, sp, #4
    27d2:	4815      	ldr	r0, [pc, #84]	; (2828 <_Z15ee_buffer_parsePc+0x194>)
    27d4:	f011 fb9b 	bl	13f0e <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    27d8:	2000      	movs	r0, #0
    27da:	e763      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
  return EE_ARG_CLAIMED;
    27dc:	2000      	movs	r0, #0
    27de:	e761      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    27e0:	00019c9c 	.word	0x00019c9c
    27e4:	00019ca0 	.word	0x00019ca0
    27e8:	00019cd0 	.word	0x00019cd0
    27ec:	2001858c 	.word	0x2001858c
    27f0:	20018588 	.word	0x20018588
    27f4:	00019d34 	.word	0x00019d34
    27f8:	00019ca4 	.word	0x00019ca4
    27fc:	00019cd8 	.word	0x00019cd8
    2800:	00019d08 	.word	0x00019d08
    2804:	00019d64 	.word	0x00019d64
    2808:	00019d80 	.word	0x00019d80
    280c:	00019d88 	.word	0x00019d88
    2810:	200185e8 	.word	0x200185e8
    2814:	00019d94 	.word	0x00019d94
    2818:	0001d044 	.word	0x0001d044
    281c:	00019d90 	.word	0x00019d90
    2820:	00019de4 	.word	0x00019de4
    2824:	00019d9c 	.word	0x00019d9c
    2828:	00019dc4 	.word	0x00019dc4

0000282c <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    282c:	b510      	push	{r4, lr}
    282e:	4604      	mov	r4, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    2830:	2250      	movs	r2, #80	; 0x50
    2832:	493b      	ldr	r1, [pc, #236]	; (2920 <_Z16ee_profile_parsePc+0xf4>)
    2834:	f016 fad1 	bl	18dda <strncmp>
    2838:	b948      	cbnz	r0, 284e <_Z16ee_profile_parsePc+0x22>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    283a:	493a      	ldr	r1, [pc, #232]	; (2924 <_Z16ee_profile_parsePc+0xf8>)
    283c:	483a      	ldr	r0, [pc, #232]	; (2928 <_Z16ee_profile_parsePc+0xfc>)
    283e:	f011 fb66 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    2842:	493a      	ldr	r1, [pc, #232]	; (292c <_Z16ee_profile_parsePc+0x100>)
    2844:	483a      	ldr	r0, [pc, #232]	; (2930 <_Z16ee_profile_parsePc+0x104>)
    2846:	f011 fb62 	bl	13f0e <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    284a:	2000      	movs	r0, #0
}
    284c:	bd10      	pop	{r4, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    284e:	2250      	movs	r2, #80	; 0x50
    2850:	4938      	ldr	r1, [pc, #224]	; (2934 <_Z16ee_profile_parsePc+0x108>)
    2852:	4620      	mov	r0, r4
    2854:	f016 fac1 	bl	18dda <strncmp>
    2858:	bb30      	cbnz	r0, 28a8 <_Z16ee_profile_parsePc+0x7c>
    th_printf("%s\r\n", EE_FW_VERSION);
    285a:	4932      	ldr	r1, [pc, #200]	; (2924 <_Z16ee_profile_parsePc+0xf8>)
    285c:	4836      	ldr	r0, [pc, #216]	; (2938 <_Z16ee_profile_parsePc+0x10c>)
    285e:	f011 fb56 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("\r\n");
    2862:	4836      	ldr	r0, [pc, #216]	; (293c <_Z16ee_profile_parsePc+0x110>)
    2864:	f011 fb53 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    2868:	4835      	ldr	r0, [pc, #212]	; (2940 <_Z16ee_profile_parsePc+0x114>)
    286a:	f011 fb50 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    286e:	4835      	ldr	r0, [pc, #212]	; (2944 <_Z16ee_profile_parsePc+0x118>)
    2870:	f011 fb4d 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    2874:	4834      	ldr	r0, [pc, #208]	; (2948 <_Z16ee_profile_parsePc+0x11c>)
    2876:	f011 fb4a 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    287a:	4834      	ldr	r0, [pc, #208]	; (294c <_Z16ee_profile_parsePc+0x120>)
    287c:	f011 fb47 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    2880:	4833      	ldr	r0, [pc, #204]	; (2950 <_Z16ee_profile_parsePc+0x124>)
    2882:	f011 fb44 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    2886:	4833      	ldr	r0, [pc, #204]	; (2954 <_Z16ee_profile_parsePc+0x128>)
    2888:	f011 fb41 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    288c:	4832      	ldr	r0, [pc, #200]	; (2958 <_Z16ee_profile_parsePc+0x12c>)
    288e:	f011 fb3e 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    2892:	4832      	ldr	r0, [pc, #200]	; (295c <_Z16ee_profile_parsePc+0x130>)
    2894:	f011 fb3b 	bl	13f0e <_Z9th_printfPKcz>
    th_printf(
    2898:	4831      	ldr	r0, [pc, #196]	; (2960 <_Z16ee_profile_parsePc+0x134>)
    289a:	f011 fb38 	bl	13f0e <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    289e:	4831      	ldr	r0, [pc, #196]	; (2964 <_Z16ee_profile_parsePc+0x138>)
    28a0:	f011 fb35 	bl	13f0e <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    28a4:	2000      	movs	r0, #0
    28a6:	e7d1      	b.n	284c <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    28a8:	4620      	mov	r0, r4
    28aa:	f7ff fef3 	bl	2694 <_Z15ee_buffer_parsePc>
    28ae:	2800      	cmp	r0, #0
    28b0:	d0cc      	beq.n	284c <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    28b2:	2250      	movs	r2, #80	; 0x50
    28b4:	492c      	ldr	r1, [pc, #176]	; (2968 <_Z16ee_profile_parsePc+0x13c>)
    28b6:	4620      	mov	r0, r4
    28b8:	f016 fa8f 	bl	18dda <strncmp>
    28bc:	bb18      	cbnz	r0, 2906 <_Z16ee_profile_parsePc+0xda>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    28be:	492b      	ldr	r1, [pc, #172]	; (296c <_Z16ee_profile_parsePc+0x140>)
    28c0:	f010 fe86 	bl	135d0 <strtok>
    if (p_next) {
    28c4:	b1b0      	cbz	r0, 28f4 <_Z16ee_profile_parsePc+0xc8>
      i = atoi(p_next);
    28c6:	f016 f8f4 	bl	18ab2 <atoi>
      if (i <= 0) {
    28ca:	1e04      	subs	r4, r0, #0
    28cc:	dd0d      	ble.n	28ea <_Z16ee_profile_parsePc+0xbe>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    28ce:	4927      	ldr	r1, [pc, #156]	; (296c <_Z16ee_profile_parsePc+0x140>)
    28d0:	2000      	movs	r0, #0
    28d2:	f010 fe7d 	bl	135d0 <strtok>
      if (p_next) {
    28d6:	b1a0      	cbz	r0, 2902 <_Z16ee_profile_parsePc+0xd6>
        i = atoi(p_next);
    28d8:	f016 f8eb 	bl	18ab2 <atoi>
        if (i < 0) {
    28dc:	1e01      	subs	r1, r0, #0
    28de:	da0b      	bge.n	28f8 <_Z16ee_profile_parsePc+0xcc>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    28e0:	4823      	ldr	r0, [pc, #140]	; (2970 <_Z16ee_profile_parsePc+0x144>)
    28e2:	f011 fb14 	bl	13f0e <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    28e6:	2000      	movs	r0, #0
    28e8:	e7b0      	b.n	284c <_Z16ee_profile_parsePc+0x20>
        th_printf("e-[Inference iterations must be >0]\r\n");
    28ea:	4822      	ldr	r0, [pc, #136]	; (2974 <_Z16ee_profile_parsePc+0x148>)
    28ec:	f011 fb0f 	bl	13f0e <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    28f0:	2000      	movs	r0, #0
    28f2:	e7ab      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    28f4:	210a      	movs	r1, #10
    size_t n = 1;
    28f6:	2401      	movs	r4, #1
    ee_infer(n, w);
    28f8:	4620      	mov	r0, r4
    28fa:	f7ff fe99 	bl	2630 <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    28fe:	2000      	movs	r0, #0
    2900:	e7a4      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2902:	210a      	movs	r1, #10
    2904:	e7f8      	b.n	28f8 <_Z16ee_profile_parsePc+0xcc>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    2906:	2250      	movs	r2, #80	; 0x50
    2908:	491b      	ldr	r1, [pc, #108]	; (2978 <_Z16ee_profile_parsePc+0x14c>)
    290a:	4620      	mov	r0, r4
    290c:	f016 fa65 	bl	18dda <strncmp>
    2910:	b108      	cbz	r0, 2916 <_Z16ee_profile_parsePc+0xea>
    return EE_ARG_UNCLAIMED;
    2912:	2001      	movs	r0, #1
    2914:	e79a      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    th_results();
    2916:	f000 f8d3 	bl	2ac0 <_Z10th_resultsv>
  return EE_ARG_CLAIMED;
    291a:	2000      	movs	r0, #0
    291c:	e796      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    291e:	bf00      	nop
    2920:	00019df4 	.word	0x00019df4
    2924:	00019dfc 	.word	0x00019dfc
    2928:	00019e20 	.word	0x00019e20
    292c:	00019e34 	.word	0x00019e34
    2930:	00019e3c 	.word	0x00019e3c
    2934:	00019e4c 	.word	0x00019e4c
    2938:	00019e54 	.word	0x00019e54
    293c:	0001d044 	.word	0x0001d044
    2940:	00019e5c 	.word	0x00019e5c
    2944:	00019e84 	.word	0x00019e84
    2948:	00019eb4 	.word	0x00019eb4
    294c:	00019edc 	.word	0x00019edc
    2950:	00019f10 	.word	0x00019f10
    2954:	00019f48 	.word	0x00019f48
    2958:	00019f80 	.word	0x00019f80
    295c:	00019f9c 	.word	0x00019f9c
    2960:	00019fcc 	.word	0x00019fcc
    2964:	0001a014 	.word	0x0001a014
    2968:	0001a044 	.word	0x0001a044
    296c:	00019ca0 	.word	0x00019ca0
    2970:	0001a074 	.word	0x0001a074
    2974:	0001a04c 	.word	0x0001a04c
    2978:	0001a098 	.word	0x0001a098

0000297c <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    297c:	4b14      	ldr	r3, [pc, #80]	; (29d0 <_Z33ee_serial_command_parser_callbackPc+0x54>)
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	b903      	cbnz	r3, 2984 <_Z33ee_serial_command_parser_callbackPc+0x8>
    2982:	4770      	bx	lr
void ee_serial_command_parser_callback(char *p_command) {
    2984:	b510      	push	{r4, lr}
  tok = strtok(p_command, EE_CMD_DELIMITER);
    2986:	4913      	ldr	r1, [pc, #76]	; (29d4 <_Z33ee_serial_command_parser_callbackPc+0x58>)
    2988:	f010 fe22 	bl	135d0 <strtok>
    298c:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    298e:	2250      	movs	r2, #80	; 0x50
    2990:	4911      	ldr	r1, [pc, #68]	; (29d8 <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    2992:	f016 fa22 	bl	18dda <strncmp>
    2996:	b940      	cbnz	r0, 29aa <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    2998:	4a10      	ldr	r2, [pc, #64]	; (29dc <_Z33ee_serial_command_parser_callbackPc+0x60>)
    299a:	4911      	ldr	r1, [pc, #68]	; (29e0 <_Z33ee_serial_command_parser_callbackPc+0x64>)
    299c:	4811      	ldr	r0, [pc, #68]	; (29e4 <_Z33ee_serial_command_parser_callbackPc+0x68>)
    299e:	f011 fab6 	bl	13f0e <_Z9th_printfPKcz>
  th_printf(EE_MSG_READY);
    29a2:	4811      	ldr	r0, [pc, #68]	; (29e8 <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    29a4:	f011 fab3 	bl	13f0e <_Z9th_printfPKcz>
}
    29a8:	bd10      	pop	{r4, pc}
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    29aa:	2250      	movs	r2, #80	; 0x50
    29ac:	490f      	ldr	r1, [pc, #60]	; (29ec <_Z33ee_serial_command_parser_callbackPc+0x70>)
    29ae:	4620      	mov	r0, r4
    29b0:	f016 fa13 	bl	18dda <strncmp>
    29b4:	b910      	cbnz	r0, 29bc <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    29b6:	f000 f8c5 	bl	2b44 <_Z12th_timestampv>
    29ba:	e7f2      	b.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    29bc:	4620      	mov	r0, r4
    29be:	f7ff ff35 	bl	282c <_Z16ee_profile_parsePc>
    29c2:	2800      	cmp	r0, #0
    29c4:	d0ed      	beq.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
    th_printf(EE_ERR_CMD, tok);
    29c6:	4621      	mov	r1, r4
    29c8:	4809      	ldr	r0, [pc, #36]	; (29f0 <_Z33ee_serial_command_parser_callbackPc+0x74>)
    29ca:	f011 faa0 	bl	13f0e <_Z9th_printfPKcz>
    29ce:	e7e8      	b.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
    29d0:	20027368 	.word	0x20027368
    29d4:	00019ca0 	.word	0x00019ca0
    29d8:	0001a0a0 	.word	0x0001a0a0
    29dc:	0001a0a8 	.word	0x0001a0a8
    29e0:	0001a0b4 	.word	0x0001a0b4
    29e4:	0001a0b8 	.word	0x0001a0b8
    29e8:	00019c48 	.word	0x00019c48
    29ec:	0001a0cc 	.word	0x0001a0cc
    29f0:	0001a0d8 	.word	0x0001a0d8

000029f4 <_Z13ee_get_bufferPhj>:
 * typically the length of the provided buffer.
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    29f4:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    29f6:	4b06      	ldr	r3, [pc, #24]	; (2a10 <_Z13ee_get_bufferPhj+0x1c>)
    29f8:	681c      	ldr	r4, [r3, #0]
    29fa:	428c      	cmp	r4, r1
    29fc:	d900      	bls.n	2a00 <_Z13ee_get_bufferPhj+0xc>
    29fe:	460c      	mov	r4, r1
  if (buffer != nullptr) {
    2a00:	b118      	cbz	r0, 2a0a <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    2a02:	4622      	mov	r2, r4
    2a04:	4903      	ldr	r1, [pc, #12]	; (2a14 <_Z13ee_get_bufferPhj+0x20>)
    2a06:	f016 f874 	bl	18af2 <memcpy>
  }
  return len;
}
    2a0a:	4620      	mov	r0, r4
    2a0c:	bd10      	pop	{r4, pc}
    2a0e:	bf00      	nop
    2a10:	20018588 	.word	0x20018588
    2a14:	200185e8 	.word	0x200185e8

00002a18 <_Z8th_inferv>:
  }
  th_printf("]\r\n");
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() { runner->Invoke(); }
    2a18:	b510      	push	{r4, lr}
    2a1a:	4b06      	ldr	r3, [pc, #24]	; (2a34 <_Z8th_inferv+0x1c>)
    2a1c:	681c      	ldr	r4, [r3, #0]
    interpreter_.AllocateTensors();
  }

  void Invoke() {
    // Run the model on this input and make sure it succeeds.
    TfLiteStatus invoke_status = interpreter_.Invoke();
    2a1e:	f104 000c 	add.w	r0, r4, #12
    2a22:	f005 f98b 	bl	7d3c <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
    2a26:	b900      	cbnz	r0, 2a2a <_Z8th_inferv+0x12>
    2a28:	bd10      	pop	{r4, pc}
      TF_LITE_REPORT_ERROR(reporter_, "Invoke failed.");
    2a2a:	4903      	ldr	r1, [pc, #12]	; (2a38 <_Z8th_inferv+0x20>)
    2a2c:	68a0      	ldr	r0, [r4, #8]
    2a2e:	f013 fa49 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2a32:	e7f9      	b.n	2a28 <_Z8th_inferv+0x10>
    2a34:	200193a8 	.word	0x200193a8
    2a38:	0001a0f4 	.word	0x0001a0f4

00002a3c <_Z14th_load_tensorv>:
void th_load_tensor() {
    2a3c:	b500      	push	{lr}
    2a3e:	f5ad 5dc0 	sub.w	sp, sp, #6144	; 0x1800
    2a42:	b081      	sub	sp, #4
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input_quantized),
    2a44:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2a48:	eb0d 0001 	add.w	r0, sp, r1
    2a4c:	f7ff ffd2 	bl	29f4 <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(uint8_t) != kIcInputSize) {
    2a50:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
    2a54:	d101      	bne.n	2a5a <_Z14th_load_tensorv+0x1e>
  for(i=0; i<kIcInputSize;i++)
    2a56:	2300      	movs	r3, #0
    2a58:	e00f      	b.n	2a7a <_Z14th_load_tensorv+0x3e>
    th_printf("Input db has %d elemented, expected %d\n", bytes / sizeof(uint8_t),
    2a5a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2a5e:	4601      	mov	r1, r0
    2a60:	4815      	ldr	r0, [pc, #84]	; (2ab8 <_Z14th_load_tensorv+0x7c>)
    2a62:	f011 fa54 	bl	13f0e <_Z9th_printfPKcz>
}
    2a66:	f50d 5dc0 	add.w	sp, sp, #6144	; 0x1800
    2a6a:	b001      	add	sp, #4
    2a6c:	f85d fb04 	ldr.w	pc, [sp], #4
	    input_asint[i] = (int8_t)(input_quantized[i] - 128);
    2a70:	3a80      	subs	r2, #128	; 0x80
    2a72:	f80d 2003 	strb.w	r2, [sp, r3]
  for(i=0; i<kIcInputSize;i++)
    2a76:	3301      	adds	r3, #1
    2a78:	b29b      	uxth	r3, r3
    2a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    2a7e:	d208      	bcs.n	2a92 <_Z14th_load_tensorv+0x56>
	  if(input_quantized[i]<=127)
    2a80:	f50d 6240 	add.w	r2, sp, #3072	; 0xc00
    2a84:	56d2      	ldrsb	r2, [r2, r3]
    2a86:	2a00      	cmp	r2, #0
    2a88:	dbf2      	blt.n	2a70 <_Z14th_load_tensorv+0x34>
	    input_asint[i] = ((int8_t)input_quantized[i]) - 128;
    2a8a:	3a80      	subs	r2, #128	; 0x80
    2a8c:	f80d 2003 	strb.w	r2, [sp, r3]
    2a90:	e7f1      	b.n	2a76 <_Z14th_load_tensorv+0x3a>
  runner->SetInput(input_asint);
    2a92:	4b0a      	ldr	r3, [pc, #40]	; (2abc <_Z14th_load_tensorv+0x80>)
    2a94:	6818      	ldr	r0, [r3, #0]
    }
  }

  void SetInput(const inputT* custom_input) {
    // Populate input tensor with an image with no person.
    TfLiteTensor* input = interpreter_.input(0);
    2a96:	2100      	movs	r1, #0
    2a98:	300c      	adds	r0, #12
    2a9a:	f004 fbcd 	bl	7238 <_ZN6tflite16MicroInterpreter5inputEj>

namespace tflite {

template <typename T>
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2a9e:	4603      	mov	r3, r0
    2aa0:	b100      	cbz	r0, 2aa4 <_Z14th_load_tensorv+0x68>
    2aa2:	6840      	ldr	r0, [r0, #4]
    inputT* input_buffer = tflite::GetTensorData<inputT>(input);
    int input_length = input->bytes / sizeof(inputT);
    2aa4:	6999      	ldr	r1, [r3, #24]
    for (int i = 0; i < input_length; i++) {
    2aa6:	2300      	movs	r3, #0
    2aa8:	4299      	cmp	r1, r3
    2aaa:	dddc      	ble.n	2a66 <_Z14th_load_tensorv+0x2a>
      input_buffer[i] = custom_input[i];
    2aac:	f91d 2003 	ldrsb.w	r2, [sp, r3]
    2ab0:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < input_length; i++) {
    2ab2:	3301      	adds	r3, #1
    2ab4:	e7f8      	b.n	2aa8 <_Z14th_load_tensorv+0x6c>
    2ab6:	bf00      	nop
    2ab8:	0001a104 	.word	0x0001a104
    2abc:	200193a8 	.word	0x200193a8

00002ac0 <_Z10th_resultsv>:
void th_results() {
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  th_printf("m-results-[");
    2ac2:	481b      	ldr	r0, [pc, #108]	; (2b30 <_Z10th_resultsv+0x70>)
    2ac4:	f011 fa23 	bl	13f0e <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2ac8:	2400      	movs	r4, #0
    2aca:	e020      	b.n	2b0e <_Z10th_resultsv+0x4e>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2acc:	571f      	ldrsb	r7, [r3, r4]
    2ace:	4d19      	ldr	r5, [pc, #100]	; (2b34 <_Z10th_resultsv+0x74>)
    2ad0:	6828      	ldr	r0, [r5, #0]

  int input_size() { return interpreter_.input(0)->bytes / sizeof(inputT); }

  int output_size() { return interpreter_.output(0)->bytes / sizeof(outputT); }

  float output_scale() { return interpreter_.output(0)->params.scale; }
    2ad2:	2100      	movs	r1, #0
    2ad4:	300c      	adds	r0, #12
    2ad6:	f004 fb53 	bl	7180 <_ZN6tflite16MicroInterpreter6outputEj>
    2ada:	68c6      	ldr	r6, [r0, #12]
    2adc:	6828      	ldr	r0, [r5, #0]

  int output_zero_point() { return interpreter_.output(0)->params.zero_point; }
    2ade:	2100      	movs	r1, #0
    2ae0:	300c      	adds	r0, #12
    2ae2:	f004 fb4d 	bl	7180 <_ZN6tflite16MicroInterpreter6outputEj>
    2ae6:	6900      	ldr	r0, [r0, #16]

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    2ae8:	1a38      	subs	r0, r7, r0
    2aea:	f7fe f8bd 	bl	c68 <__aeabi_i2f>
    2aee:	4631      	mov	r1, r6
    2af0:	f7fe f90e 	bl	d10 <__aeabi_fmul>
    th_printf("%0.3f", converted);
    2af4:	f7fd fc94 	bl	420 <__aeabi_f2d>
    2af8:	4602      	mov	r2, r0
    2afa:	460b      	mov	r3, r1
    2afc:	480e      	ldr	r0, [pc, #56]	; (2b38 <_Z10th_resultsv+0x78>)
    2afe:	f011 fa06 	bl	13f0e <_Z9th_printfPKcz>
    if (i < (nresults - 1)) {
    2b02:	2c08      	cmp	r4, #8
    2b04:	d802      	bhi.n	2b0c <_Z10th_resultsv+0x4c>
      th_printf(",");
    2b06:	480d      	ldr	r0, [pc, #52]	; (2b3c <_Z10th_resultsv+0x7c>)
    2b08:	f011 fa01 	bl	13f0e <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2b0c:	3401      	adds	r4, #1
    2b0e:	2c09      	cmp	r4, #9
    2b10:	d80a      	bhi.n	2b28 <_Z10th_resultsv+0x68>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2b12:	4b08      	ldr	r3, [pc, #32]	; (2b34 <_Z10th_resultsv+0x74>)
    2b14:	6818      	ldr	r0, [r3, #0]
    return tflite::GetTensorData<outputT>(interpreter_.output(0));
    2b16:	2100      	movs	r1, #0
    2b18:	300c      	adds	r0, #12
    2b1a:	f004 fb31 	bl	7180 <_ZN6tflite16MicroInterpreter6outputEj>
    2b1e:	4603      	mov	r3, r0
    2b20:	2800      	cmp	r0, #0
    2b22:	d0d3      	beq.n	2acc <_Z10th_resultsv+0xc>
    2b24:	6843      	ldr	r3, [r0, #4]
    2b26:	e7d1      	b.n	2acc <_Z10th_resultsv+0xc>
  th_printf("]\r\n");
    2b28:	4805      	ldr	r0, [pc, #20]	; (2b40 <_Z10th_resultsv+0x80>)
    2b2a:	f011 f9f0 	bl	13f0e <_Z9th_printfPKcz>
}
    2b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b30:	0001a12c 	.word	0x0001a12c
    2b34:	200193a8 	.word	0x200193a8
    2b38:	0001a138 	.word	0x0001a138
    2b3c:	0001a140 	.word	0x0001a140
    2b40:	00019f98 	.word	0x00019f98

00002b44 <_Z12th_timestampv>:

void th_serialport_initialize(void) {

}

void th_timestamp(void) {
    2b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2b46:	f015 ff83 	bl	18a50 <z_impl_k_uptime_ticks>
/* Step 3. Release driver */
       g_timestampPin = 1;

/* USER CODE 1 END */
#else
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2b4a:	014e      	lsls	r6, r1, #5
    2b4c:	0143      	lsls	r3, r0, #5
    2b4e:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
    2b52:	1a1b      	subs	r3, r3, r0
    2b54:	eb62 0201 	sbc.w	r2, r2, r1
    2b58:	0256      	lsls	r6, r2, #9
    2b5a:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
    2b5e:	025f      	lsls	r7, r3, #9
    2b60:	4632      	mov	r2, r6
    2b62:	183b      	adds	r3, r7, r0
    2b64:	eb41 0202 	adc.w	r2, r1, r2
    2b68:	0197      	lsls	r7, r2, #6
    2b6a:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
    2b6e:	019e      	lsls	r6, r3, #6
    2b70:	1af3      	subs	r3, r6, r3
    2b72:	eb67 0202 	sbc.w	r2, r7, r2
    2b76:	181c      	adds	r4, r3, r0
    2b78:	eb42 0501 	adc.w	r5, r2, r1
    2b7c:	4623      	mov	r3, r4
    2b7e:	4629      	mov	r1, r5
    2b80:	2c00      	cmp	r4, #0
    2b82:	f175 0200 	sbcs.w	r2, r5, #0
    2b86:	db06      	blt.n	2b96 <_Z12th_timestampv+0x52>
    2b88:	0bdb      	lsrs	r3, r3, #15
       unsigned long microSeconds = (unsigned long) uptime_usec;
       /* USER CODE 2 BEGIN */
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
    2b8a:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
    2b8e:	4806      	ldr	r0, [pc, #24]	; (2ba8 <_Z12th_timestampv+0x64>)
    2b90:	f011 f9bd 	bl	13f0e <_Z9th_printfPKcz>
#endif
}
    2b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2b96:	f647 73ff 	movw	r3, #32767	; 0x7fff
    2b9a:	18e3      	adds	r3, r4, r3
    2b9c:	f04f 0100 	mov.w	r1, #0
    2ba0:	eb45 0101 	adc.w	r1, r5, r1
    2ba4:	e7f0      	b.n	2b88 <_Z12th_timestampv+0x44>
    2ba6:	bf00      	nop
    2ba8:	0001a144 	.word	0x0001a144

00002bac <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    2bac:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    2bae:	4803      	ldr	r0, [pc, #12]	; (2bbc <_Z23th_timestamp_initializev+0x10>)
    2bb0:	f011 f9ad 	bl	13f0e <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
    2bb4:	f7ff ffc6 	bl	2b44 <_Z12th_timestampv>
}
    2bb8:	bd08      	pop	{r3, pc}
    2bba:	bf00      	nop
    2bbc:	0001a154 	.word	0x0001a154

00002bc0 <_Z19th_final_initializev>:
void th_final_initialize(void) {
    2bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bc2:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroMutableOpResolver<7> resolver;
    2bc4:	4bb0      	ldr	r3, [pc, #704]	; (2e88 <_Z19th_final_initializev+0x2c8>)
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	f013 0f01 	tst.w	r3, #1
    2bcc:	d012      	beq.n	2bf4 <_Z19th_final_initializev+0x34>
    return AddBuiltin(BuiltinOperator_ABS, tflite::ops::micro::Register_ABS(),
                      ParseAbs);
  }

  TfLiteStatus AddAdd() {
    return AddBuiltin(BuiltinOperator_ADD, tflite::ops::micro::Register_ADD(),
    2bce:	a804      	add	r0, sp, #16
    2bd0:	f007 fe22 	bl	a818 <_ZN6tflite3ops5micro12Register_ADDEv>
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
    2bd4:	48ad      	ldr	r0, [pc, #692]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2bd6:	6803      	ldr	r3, [r0, #0]
    2bd8:	699b      	ldr	r3, [r3, #24]
    2bda:	2100      	movs	r1, #0
    2bdc:	4798      	blx	r3
    2bde:	b1d8      	cbz	r0, 2c18 <_Z19th_final_initializev+0x58>
      if (error_reporter_ != nullptr) {
    2be0:	4baa      	ldr	r3, [pc, #680]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2be2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2be6:	2800      	cmp	r0, #0
    2be8:	d03a      	beq.n	2c60 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2bea:	2200      	movs	r2, #0
    2bec:	49a8      	ldr	r1, [pc, #672]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2bee:	f013 f969 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
    2bf2:	e035      	b.n	2c60 <_Z19th_final_initializev+0xa0>
      : error_reporter_(error_reporter) {}
    2bf4:	48a5      	ldr	r0, [pc, #660]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2bf6:	4ba7      	ldr	r3, [pc, #668]	; (2e94 <_Z19th_final_initializev+0x2d4>)
    2bf8:	6003      	str	r3, [r0, #0]
    2bfa:	2300      	movs	r3, #0
    2bfc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    2c00:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    2c04:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    2c08:	4b9f      	ldr	r3, [pc, #636]	; (2e88 <_Z19th_final_initializev+0x2c8>)
    2c0a:	2201      	movs	r2, #1
    2c0c:	601a      	str	r2, [r3, #0]
    2c0e:	4aa2      	ldr	r2, [pc, #648]	; (2e98 <_Z19th_final_initializev+0x2d8>)
    2c10:	49a2      	ldr	r1, [pc, #648]	; (2e9c <_Z19th_final_initializev+0x2dc>)
    2c12:	f011 fe4d 	bl	148b0 <__aeabi_atexit>
    2c16:	e7da      	b.n	2bce <_Z19th_final_initializev+0xe>
    }

    if (registrations_len_ >= tOpCount) {
    2c18:	4b9c      	ldr	r3, [pc, #624]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c1a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2c1e:	2e06      	cmp	r6, #6
    2c20:	d830      	bhi.n	2c84 <_Z19th_final_initializev+0xc4>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    2c22:	4f9a      	ldr	r7, [pc, #616]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c24:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2c28:	f10c 0404 	add.w	r4, ip, #4
    2c2c:	ad04      	add	r5, sp, #16
    2c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    2c3a:	2200      	movs	r2, #0
    2c3c:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2c40:	3601      	adds	r6, #1
    2c42:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4

    builtin_codes_[num_buitin_ops_] = op;
    2c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2c4a:	18f9      	adds	r1, r7, r3
    2c4c:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2c50:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2c54:	4992      	ldr	r1, [pc, #584]	; (2ea0 <_Z19th_final_initializev+0x2e0>)
    2c56:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2c5a:	3301      	adds	r3, #1
    2c5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddFullyConnected();
    2c60:	a804      	add	r0, sp, #16
    2c62:	f00b fdb5 	bl	e7d0 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    if (FindOp(op) != nullptr) {
    2c66:	4889      	ldr	r0, [pc, #548]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c68:	6803      	ldr	r3, [r0, #0]
    2c6a:	699b      	ldr	r3, [r3, #24]
    2c6c:	2109      	movs	r1, #9
    2c6e:	4798      	blx	r3
    2c70:	b190      	cbz	r0, 2c98 <_Z19th_final_initializev+0xd8>
      if (error_reporter_ != nullptr) {
    2c72:	4b86      	ldr	r3, [pc, #536]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c74:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2c78:	b390      	cbz	r0, 2ce0 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c7a:	2209      	movs	r2, #9
    2c7c:	4984      	ldr	r1, [pc, #528]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2c7e:	f013 f921 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2c82:	e02d      	b.n	2ce0 <_Z19th_final_initializev+0x120>
      if (error_reporter_) {
    2c84:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2c88:	2800      	cmp	r0, #0
    2c8a:	d0e9      	beq.n	2c60 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c8c:	2307      	movs	r3, #7
    2c8e:	2200      	movs	r2, #0
    2c90:	4984      	ldr	r1, [pc, #528]	; (2ea4 <_Z19th_final_initializev+0x2e4>)
    2c92:	f013 f917 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2c96:	e7e3      	b.n	2c60 <_Z19th_final_initializev+0xa0>
    if (registrations_len_ >= tOpCount) {
    2c98:	4b7c      	ldr	r3, [pc, #496]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c9a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2c9e:	2e06      	cmp	r6, #6
    2ca0:	d830      	bhi.n	2d04 <_Z19th_final_initializev+0x144>
    registrations_[registrations_len_] = registration;
    2ca2:	4f7a      	ldr	r7, [pc, #488]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2ca4:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2ca8:	f10c 0404 	add.w	r4, ip, #4
    2cac:	ad04      	add	r5, sp, #16
    2cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2cb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2cba:	2209      	movs	r2, #9
    2cbc:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2cc0:	3601      	adds	r6, #1
    2cc2:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2cca:	18f9      	adds	r1, r7, r3
    2ccc:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2cd0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2cd4:	4974      	ldr	r1, [pc, #464]	; (2ea8 <_Z19th_final_initializev+0x2e8>)
    2cd6:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2cda:	3301      	adds	r3, #1
    2cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddConv2D();
    2ce0:	a804      	add	r0, sp, #16
    2ce2:	f009 ffe1 	bl	cca8 <_ZN6tflite16Register_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2ce6:	4869      	ldr	r0, [pc, #420]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2ce8:	6803      	ldr	r3, [r0, #0]
    2cea:	699b      	ldr	r3, [r3, #24]
    2cec:	2103      	movs	r1, #3
    2cee:	4798      	blx	r3
    2cf0:	b190      	cbz	r0, 2d18 <_Z19th_final_initializev+0x158>
      if (error_reporter_ != nullptr) {
    2cf2:	4b66      	ldr	r3, [pc, #408]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2cf4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2cf8:	b390      	cbz	r0, 2d60 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cfa:	2203      	movs	r2, #3
    2cfc:	4964      	ldr	r1, [pc, #400]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2cfe:	f013 f8e1 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d02:	e02d      	b.n	2d60 <_Z19th_final_initializev+0x1a0>
      if (error_reporter_) {
    2d04:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2d08:	2800      	cmp	r0, #0
    2d0a:	d0e9      	beq.n	2ce0 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d0c:	2307      	movs	r3, #7
    2d0e:	2209      	movs	r2, #9
    2d10:	4964      	ldr	r1, [pc, #400]	; (2ea4 <_Z19th_final_initializev+0x2e4>)
    2d12:	f013 f8d7 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d16:	e7e3      	b.n	2ce0 <_Z19th_final_initializev+0x120>
    if (registrations_len_ >= tOpCount) {
    2d18:	4b5c      	ldr	r3, [pc, #368]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d1a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2d1e:	2e06      	cmp	r6, #6
    2d20:	d830      	bhi.n	2d84 <_Z19th_final_initializev+0x1c4>
    registrations_[registrations_len_] = registration;
    2d22:	4f5a      	ldr	r7, [pc, #360]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d24:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2d28:	f10c 0404 	add.w	r4, ip, #4
    2d2c:	ad04      	add	r5, sp, #16
    2d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2d3a:	2203      	movs	r2, #3
    2d3c:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2d40:	3601      	adds	r6, #1
    2d42:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2d4a:	18f9      	adds	r1, r7, r3
    2d4c:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d50:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2d54:	4955      	ldr	r1, [pc, #340]	; (2eac <_Z19th_final_initializev+0x2ec>)
    2d56:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2d5a:	3301      	adds	r3, #1
    2d5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
    2d60:	a804      	add	r0, sp, #16
    2d62:	f00a fe6f 	bl	da44 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2d66:	4849      	ldr	r0, [pc, #292]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d68:	6803      	ldr	r3, [r0, #0]
    2d6a:	699b      	ldr	r3, [r3, #24]
    2d6c:	2104      	movs	r1, #4
    2d6e:	4798      	blx	r3
    2d70:	b190      	cbz	r0, 2d98 <_Z19th_final_initializev+0x1d8>
      if (error_reporter_ != nullptr) {
    2d72:	4b46      	ldr	r3, [pc, #280]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d74:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2d78:	b390      	cbz	r0, 2de0 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d7a:	2204      	movs	r2, #4
    2d7c:	4944      	ldr	r1, [pc, #272]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2d7e:	f013 f8a1 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d82:	e02d      	b.n	2de0 <_Z19th_final_initializev+0x220>
      if (error_reporter_) {
    2d84:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2d88:	2800      	cmp	r0, #0
    2d8a:	d0e9      	beq.n	2d60 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d8c:	2307      	movs	r3, #7
    2d8e:	2203      	movs	r2, #3
    2d90:	4944      	ldr	r1, [pc, #272]	; (2ea4 <_Z19th_final_initializev+0x2e4>)
    2d92:	f013 f897 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d96:	e7e3      	b.n	2d60 <_Z19th_final_initializev+0x1a0>
    if (registrations_len_ >= tOpCount) {
    2d98:	4b3c      	ldr	r3, [pc, #240]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d9a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2d9e:	2e06      	cmp	r6, #6
    2da0:	d830      	bhi.n	2e04 <_Z19th_final_initializev+0x244>
    registrations_[registrations_len_] = registration;
    2da2:	4f3a      	ldr	r7, [pc, #232]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2da4:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2da8:	f10c 0404 	add.w	r4, ip, #4
    2dac:	ad04      	add	r5, sp, #16
    2dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2db2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2dba:	2204      	movs	r2, #4
    2dbc:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2dc0:	3601      	adds	r6, #1
    2dc2:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2dca:	18f9      	adds	r1, r7, r3
    2dcc:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2dd0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2dd4:	4936      	ldr	r1, [pc, #216]	; (2eb0 <_Z19th_final_initializev+0x2f0>)
    2dd6:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2dda:	3301      	adds	r3, #1
    2ddc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    2de0:	a804      	add	r0, sp, #16
    2de2:	f00c ff0b 	bl	fbfc <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    if (FindOp(op) != nullptr) {
    2de6:	4829      	ldr	r0, [pc, #164]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2de8:	6803      	ldr	r3, [r0, #0]
    2dea:	699b      	ldr	r3, [r3, #24]
    2dec:	2116      	movs	r1, #22
    2dee:	4798      	blx	r3
    2df0:	b190      	cbz	r0, 2e18 <_Z19th_final_initializev+0x258>
      if (error_reporter_ != nullptr) {
    2df2:	4b26      	ldr	r3, [pc, #152]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2df4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2df8:	b390      	cbz	r0, 2e60 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2dfa:	2216      	movs	r2, #22
    2dfc:	4924      	ldr	r1, [pc, #144]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2dfe:	f013 f861 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e02:	e02d      	b.n	2e60 <_Z19th_final_initializev+0x2a0>
      if (error_reporter_) {
    2e04:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2e08:	2800      	cmp	r0, #0
    2e0a:	d0e9      	beq.n	2de0 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e0c:	2307      	movs	r3, #7
    2e0e:	2204      	movs	r2, #4
    2e10:	4924      	ldr	r1, [pc, #144]	; (2ea4 <_Z19th_final_initializev+0x2e4>)
    2e12:	f013 f857 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e16:	e7e3      	b.n	2de0 <_Z19th_final_initializev+0x220>
    if (registrations_len_ >= tOpCount) {
    2e18:	4b1c      	ldr	r3, [pc, #112]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2e1a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2e1e:	2e06      	cmp	r6, #6
    2e20:	d84a      	bhi.n	2eb8 <_Z19th_final_initializev+0x2f8>
    registrations_[registrations_len_] = registration;
    2e22:	4f1a      	ldr	r7, [pc, #104]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2e24:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2e28:	f10c 0404 	add.w	r4, ip, #4
    2e2c:	ad04      	add	r5, sp, #16
    2e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2e3a:	2216      	movs	r2, #22
    2e3c:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2e40:	3601      	adds	r6, #1
    2e42:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2e4a:	18f9      	adds	r1, r7, r3
    2e4c:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2e50:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2e54:	4917      	ldr	r1, [pc, #92]	; (2eb4 <_Z19th_final_initializev+0x2f4>)
    2e56:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2e5a:	3301      	adds	r3, #1
    2e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddSoftmax();
    2e60:	a804      	add	r0, sp, #16
    2e62:	f00c fedb 	bl	fc1c <_ZN6tflite16Register_SOFTMAXEv>
    if (FindOp(op) != nullptr) {
    2e66:	4809      	ldr	r0, [pc, #36]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2e68:	6803      	ldr	r3, [r0, #0]
    2e6a:	699b      	ldr	r3, [r3, #24]
    2e6c:	2119      	movs	r1, #25
    2e6e:	4798      	blx	r3
    2e70:	b360      	cbz	r0, 2ecc <_Z19th_final_initializev+0x30c>
      if (error_reporter_ != nullptr) {
    2e72:	4b06      	ldr	r3, [pc, #24]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2e74:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2e78:	2800      	cmp	r0, #0
    2e7a:	d04b      	beq.n	2f14 <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e7c:	2219      	movs	r2, #25
    2e7e:	4904      	ldr	r1, [pc, #16]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2e80:	f013 f820 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e84:	e046      	b.n	2f14 <_Z19th_final_initializev+0x354>
    2e86:	bf00      	nop
    2e88:	200191ec 	.word	0x200191ec
    2e8c:	20019294 	.word	0x20019294
    2e90:	0001a174 	.word	0x0001a174
    2e94:	0001a210 	.word	0x0001a210
    2e98:	20026c10 	.word	0x20026c10
    2e9c:	00013e71 	.word	0x00013e71
    2ea0:	00009d29 	.word	0x00009d29
    2ea4:	0001a1c4 	.word	0x0001a1c4
    2ea8:	0000a251 	.word	0x0000a251
    2eac:	0000a055 	.word	0x0000a055
    2eb0:	0000a401 	.word	0x0000a401
    2eb4:	00009c01 	.word	0x00009c01
      if (error_reporter_) {
    2eb8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2ebc:	2800      	cmp	r0, #0
    2ebe:	d0cf      	beq.n	2e60 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ec0:	2307      	movs	r3, #7
    2ec2:	2216      	movs	r2, #22
    2ec4:	494f      	ldr	r1, [pc, #316]	; (3004 <_Z19th_final_initializev+0x444>)
    2ec6:	f012 fffd 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2eca:	e7c9      	b.n	2e60 <_Z19th_final_initializev+0x2a0>
    if (registrations_len_ >= tOpCount) {
    2ecc:	4b4e      	ldr	r3, [pc, #312]	; (3008 <_Z19th_final_initializev+0x448>)
    2ece:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2ed2:	2e06      	cmp	r6, #6
    2ed4:	d830      	bhi.n	2f38 <_Z19th_final_initializev+0x378>
    registrations_[registrations_len_] = registration;
    2ed6:	4f4c      	ldr	r7, [pc, #304]	; (3008 <_Z19th_final_initializev+0x448>)
    2ed8:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2edc:	f10c 0404 	add.w	r4, ip, #4
    2ee0:	ad04      	add	r5, sp, #16
    2ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ee6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2eea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2eee:	2219      	movs	r2, #25
    2ef0:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2ef4:	3601      	adds	r6, #1
    2ef6:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2efe:	18f9      	adds	r1, r7, r3
    2f00:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2f04:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2f08:	4940      	ldr	r1, [pc, #256]	; (300c <_Z19th_final_initializev+0x44c>)
    2f0a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2f0e:	3301      	adds	r3, #1
    2f10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
    2f14:	a804      	add	r0, sp, #16
    2f16:	f00c fcf5 	bl	f904 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    if (FindOp(op) != nullptr) {
    2f1a:	483b      	ldr	r0, [pc, #236]	; (3008 <_Z19th_final_initializev+0x448>)
    2f1c:	6803      	ldr	r3, [r0, #0]
    2f1e:	699b      	ldr	r3, [r3, #24]
    2f20:	2101      	movs	r1, #1
    2f22:	4798      	blx	r3
    2f24:	b190      	cbz	r0, 2f4c <_Z19th_final_initializev+0x38c>
      if (error_reporter_ != nullptr) {
    2f26:	4b38      	ldr	r3, [pc, #224]	; (3008 <_Z19th_final_initializev+0x448>)
    2f28:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2f2c:	b390      	cbz	r0, 2f94 <_Z19th_final_initializev+0x3d4>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f2e:	2201      	movs	r2, #1
    2f30:	4937      	ldr	r1, [pc, #220]	; (3010 <_Z19th_final_initializev+0x450>)
    2f32:	f012 ffc7 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f36:	e02d      	b.n	2f94 <_Z19th_final_initializev+0x3d4>
      if (error_reporter_) {
    2f38:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2f3c:	2800      	cmp	r0, #0
    2f3e:	d0e9      	beq.n	2f14 <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f40:	2307      	movs	r3, #7
    2f42:	2219      	movs	r2, #25
    2f44:	492f      	ldr	r1, [pc, #188]	; (3004 <_Z19th_final_initializev+0x444>)
    2f46:	f012 ffbd 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f4a:	e7e3      	b.n	2f14 <_Z19th_final_initializev+0x354>
    if (registrations_len_ >= tOpCount) {
    2f4c:	4b2e      	ldr	r3, [pc, #184]	; (3008 <_Z19th_final_initializev+0x448>)
    2f4e:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2f52:	2e06      	cmp	r6, #6
    2f54:	d828      	bhi.n	2fa8 <_Z19th_final_initializev+0x3e8>
    registrations_[registrations_len_] = registration;
    2f56:	4f2c      	ldr	r7, [pc, #176]	; (3008 <_Z19th_final_initializev+0x448>)
    2f58:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2f5c:	f10c 0404 	add.w	r4, ip, #4
    2f60:	ad04      	add	r5, sp, #16
    2f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2f6e:	2201      	movs	r2, #1
    2f70:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2f74:	4416      	add	r6, r2
    2f76:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2f7e:	18f9      	adds	r1, r7, r3
    2f80:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2f84:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2f88:	4922      	ldr	r1, [pc, #136]	; (3014 <_Z19th_final_initializev+0x454>)
    2f8a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2f8e:	3301      	adds	r3, #1
    2f90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      pretrainedResnet_quant_tflite, resolver, tensor_arena, kTensorArenaSize);
    2f94:	4b20      	ldr	r3, [pc, #128]	; (3018 <_Z19th_final_initializev+0x458>)
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	f013 0f01 	tst.w	r3, #1
    2f9c:	d00e      	beq.n	2fbc <_Z19th_final_initializev+0x3fc>
  runner = &model_runner;
    2f9e:	4b1f      	ldr	r3, [pc, #124]	; (301c <_Z19th_final_initializev+0x45c>)
    2fa0:	4a1f      	ldr	r2, [pc, #124]	; (3020 <_Z19th_final_initializev+0x460>)
    2fa2:	601a      	str	r2, [r3, #0]
}
    2fa4:	b00d      	add	sp, #52	; 0x34
    2fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (error_reporter_) {
    2fa8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2fac:	2800      	cmp	r0, #0
    2fae:	d0f1      	beq.n	2f94 <_Z19th_final_initializev+0x3d4>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2fb0:	2307      	movs	r3, #7
    2fb2:	2201      	movs	r2, #1
    2fb4:	4913      	ldr	r1, [pc, #76]	; (3004 <_Z19th_final_initializev+0x444>)
    2fb6:	f012 ff85 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2fba:	e7eb      	b.n	2f94 <_Z19th_final_initializev+0x3d4>
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<tflite::Model>(buf);
    2fbc:	4819      	ldr	r0, [pc, #100]	; (3024 <_Z19th_final_initializev+0x464>)
    2fbe:	f010 ffea 	bl	13f96 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
    2fc2:	4601      	mov	r1, r0
                     reporter_) {
    2fc4:	4c16      	ldr	r4, [pc, #88]	; (3020 <_Z19th_final_initializev+0x460>)
    2fc6:	6020      	str	r0, [r4, #0]
namespace tflite {

// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
    2fc8:	4623      	mov	r3, r4
    2fca:	4a17      	ldr	r2, [pc, #92]	; (3028 <_Z19th_final_initializev+0x468>)
    2fcc:	f843 2f04 	str.w	r2, [r3, #4]!
    2fd0:	60a3      	str	r3, [r4, #8]
    2fd2:	f104 050c 	add.w	r5, r4, #12
    2fd6:	2200      	movs	r2, #0
    2fd8:	9202      	str	r2, [sp, #8]
    2fda:	9301      	str	r3, [sp, #4]
    2fdc:	f44f 4358 	mov.w	r3, #55296	; 0xd800
    2fe0:	9300      	str	r3, [sp, #0]
    2fe2:	4b12      	ldr	r3, [pc, #72]	; (302c <_Z19th_final_initializev+0x46c>)
    2fe4:	4a08      	ldr	r2, [pc, #32]	; (3008 <_Z19th_final_initializev+0x448>)
    2fe6:	4628      	mov	r0, r5
    2fe8:	f012 fb9a 	bl	15720 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    interpreter_.AllocateTensors();
    2fec:	4628      	mov	r0, r5
    2fee:	f004 fb8d 	bl	770c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
      pretrainedResnet_quant_tflite, resolver, tensor_arena, kTensorArenaSize);
    2ff2:	4b09      	ldr	r3, [pc, #36]	; (3018 <_Z19th_final_initializev+0x458>)
    2ff4:	2201      	movs	r2, #1
    2ff6:	601a      	str	r2, [r3, #0]
    2ff8:	4a0d      	ldr	r2, [pc, #52]	; (3030 <_Z19th_final_initializev+0x470>)
    2ffa:	490e      	ldr	r1, [pc, #56]	; (3034 <_Z19th_final_initializev+0x474>)
    2ffc:	4620      	mov	r0, r4
    2ffe:	f011 fc57 	bl	148b0 <__aeabi_atexit>
    3002:	e7cc      	b.n	2f9e <_Z19th_final_initializev+0x3de>
    3004:	0001a1c4 	.word	0x0001a1c4
    3008:	20019294 	.word	0x20019294
    300c:	0000a635 	.word	0x0000a635
    3010:	0001a174 	.word	0x0001a174
    3014:	00009e5d 	.word	0x00009e5d
    3018:	200191e8 	.word	0x200191e8
    301c:	200193a8 	.word	0x200193a8
    3020:	200191f0 	.word	0x200191f0
    3024:	20000000 	.word	0x20000000
    3028:	0001a5a8 	.word	0x0001a5a8
    302c:	200193ac 	.word	0x200193ac
    3030:	20026c10 	.word	0x20026c10
    3034:	00013e73 	.word	0x00013e73

00003038 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    3038:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    303a:	680b      	ldr	r3, [r1, #0]
    303c:	3301      	adds	r3, #1
    303e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3040:	4b01      	ldr	r3, [pc, #4]	; (3048 <char_out+0x10>)
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	4798      	blx	r3
}
    3046:	bd08      	pop	{r3, pc}
    3048:	200180c0 	.word	0x200180c0

0000304c <__printk_hook_install>:
	_char_out = fn;
    304c:	4b01      	ldr	r3, [pc, #4]	; (3054 <__printk_hook_install+0x8>)
    304e:	6018      	str	r0, [r3, #0]
}
    3050:	4770      	bx	lr
    3052:	bf00      	nop
    3054:	200180c0 	.word	0x200180c0

00003058 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    3058:	b500      	push	{lr}
    305a:	b083      	sub	sp, #12
    305c:	4602      	mov	r2, r0
    305e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3060:	2100      	movs	r1, #0
    3062:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    3064:	a901      	add	r1, sp, #4
    3066:	4803      	ldr	r0, [pc, #12]	; (3074 <vprintk+0x1c>)
    3068:	f000 f94e 	bl	3308 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    306c:	b003      	add	sp, #12
    306e:	f85d fb04 	ldr.w	pc, [sp], #4
    3072:	bf00      	nop
    3074:	00003039 	.word	0x00003039

00003078 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3078:	b510      	push	{r4, lr}
    307a:	b084      	sub	sp, #16
    307c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    307e:	9001      	str	r0, [sp, #4]
    3080:	9102      	str	r1, [sp, #8]
    3082:	2100      	movs	r1, #0
    3084:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    3086:	a901      	add	r1, sp, #4
    3088:	4805      	ldr	r0, [pc, #20]	; (30a0 <vsnprintk+0x28>)
    308a:	f000 f93d 	bl	3308 <cbvprintf>

	if (ctx.count < ctx.max) {
    308e:	9b03      	ldr	r3, [sp, #12]
    3090:	9a02      	ldr	r2, [sp, #8]
    3092:	4293      	cmp	r3, r2
    3094:	da01      	bge.n	309a <vsnprintk+0x22>
		str[ctx.count] = '\0';
    3096:	2200      	movs	r2, #0
    3098:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    309a:	9803      	ldr	r0, [sp, #12]
    309c:	b004      	add	sp, #16
    309e:	bd10      	pop	{r4, pc}
    30a0:	00013feb 	.word	0x00013feb

000030a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    30a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    30a8:	b083      	sub	sp, #12
    30aa:	4604      	mov	r4, r0
    30ac:	4608      	mov	r0, r1
    30ae:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30b0:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    30b2:	f013 0f08 	tst.w	r3, #8
    30b6:	d105      	bne.n	30c4 <process_event+0x20>
    30b8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    30bc:	2300      	movs	r3, #0
    30be:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    30c0:	9301      	str	r3, [sp, #4]
}
    30c2:	e069      	b.n	3198 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    30c4:	2901      	cmp	r1, #1
    30c6:	d009      	beq.n	30dc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    30c8:	f043 0320 	orr.w	r3, r3, #32
    30cc:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    30ce:	f385 8811 	msr	BASEPRI, r5
    30d2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    30d6:	b003      	add	sp, #12
    30d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    30dc:	f043 0310 	orr.w	r3, r3, #16
    30e0:	83a3      	strh	r3, [r4, #28]
    30e2:	e7f4      	b.n	30ce <process_event+0x2a>
			evt = process_recheck(mgr);
    30e4:	4620      	mov	r0, r4
    30e6:	f010 ffdb 	bl	140a0 <process_recheck>
    30ea:	e057      	b.n	319c <process_event+0xf8>
			res = mgr->last_res;
    30ec:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    30f0:	464a      	mov	r2, r9
    30f2:	4669      	mov	r1, sp
    30f4:	4620      	mov	r0, r4
    30f6:	f010 ffec 	bl	140d2 <process_complete>
		onoff_transition_fn transit = NULL;
    30fa:	2700      	movs	r7, #0
    30fc:	e05a      	b.n	31b4 <process_event+0x110>
			transit = mgr->transitions->start;
    30fe:	6923      	ldr	r3, [r4, #16]
    3100:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    3102:	2106      	movs	r1, #6
    3104:	4620      	mov	r0, r4
    3106:	f010 ffa4 	bl	14052 <set_state>
		res = 0;
    310a:	f04f 0900 	mov.w	r9, #0
    310e:	e051      	b.n	31b4 <process_event+0x110>
			transit = mgr->transitions->stop;
    3110:	6923      	ldr	r3, [r4, #16]
    3112:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3114:	2104      	movs	r1, #4
    3116:	4620      	mov	r0, r4
    3118:	f010 ff9b 	bl	14052 <set_state>
		res = 0;
    311c:	f04f 0900 	mov.w	r9, #0
    3120:	e048      	b.n	31b4 <process_event+0x110>
			transit = mgr->transitions->reset;
    3122:	6923      	ldr	r3, [r4, #16]
    3124:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    3126:	2105      	movs	r1, #5
    3128:	4620      	mov	r0, r4
    312a:	f010 ff92 	bl	14052 <set_state>
		res = 0;
    312e:	f04f 0900 	mov.w	r9, #0
    3132:	e03f      	b.n	31b4 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    3134:	2200      	movs	r2, #0
    3136:	e046      	b.n	31c6 <process_event+0x122>
    3138:	2200      	movs	r2, #0
    313a:	e044      	b.n	31c6 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    313c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3140:	83a3      	strh	r3, [r4, #28]
    3142:	f385 8811 	msr	BASEPRI, r5
    3146:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    314a:	2900      	cmp	r1, #0
    314c:	d144      	bne.n	31d8 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    314e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3150:	b12b      	cbz	r3, 315e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    3152:	464b      	mov	r3, r9
    3154:	4642      	mov	r2, r8
    3156:	4669      	mov	r1, sp
    3158:	4620      	mov	r0, r4
    315a:	f011 f830 	bl	141be <notify_all>
			if (transit != NULL) {
    315e:	b117      	cbz	r7, 3166 <process_event+0xc2>
				transit(mgr, transition_complete);
    3160:	4925      	ldr	r1, [pc, #148]	; (31f8 <process_event+0x154>)
    3162:	4620      	mov	r0, r4
    3164:	47b8      	blx	r7
	__asm__ volatile(
    3166:	f04f 0320 	mov.w	r3, #32
    316a:	f3ef 8511 	mrs	r5, BASEPRI
    316e:	f383 8812 	msr	BASEPRI_MAX, r3
    3172:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3176:	8ba3      	ldrh	r3, [r4, #28]
    3178:	f023 0308 	bic.w	r3, r3, #8
    317c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    317e:	8ba3      	ldrh	r3, [r4, #28]
    3180:	f013 0f10 	tst.w	r3, #16
    3184:	d02e      	beq.n	31e4 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3186:	f023 0310 	bic.w	r3, r3, #16
    318a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    318c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    318e:	8ba6      	ldrh	r6, [r4, #28]
    3190:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    3194:	2800      	cmp	r0, #0
    3196:	d09a      	beq.n	30ce <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    3198:	2802      	cmp	r0, #2
    319a:	d0a3      	beq.n	30e4 <process_event+0x40>
		if (evt == EVT_NOP) {
    319c:	2800      	cmp	r0, #0
    319e:	d096      	beq.n	30ce <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    31a0:	2801      	cmp	r0, #1
    31a2:	d0a3      	beq.n	30ec <process_event+0x48>
		} else if (evt == EVT_START) {
    31a4:	2803      	cmp	r0, #3
    31a6:	d0aa      	beq.n	30fe <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    31a8:	2804      	cmp	r0, #4
    31aa:	d0b1      	beq.n	3110 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    31ac:	2805      	cmp	r0, #5
    31ae:	d0b8      	beq.n	3122 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    31b0:	2700      	movs	r7, #0
		res = 0;
    31b2:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    31b4:	8ba3      	ldrh	r3, [r4, #28]
    31b6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    31ba:	45b0      	cmp	r8, r6
    31bc:	d0ba      	beq.n	3134 <process_event+0x90>
    31be:	68a2      	ldr	r2, [r4, #8]
    31c0:	2a00      	cmp	r2, #0
    31c2:	d0b9      	beq.n	3138 <process_event+0x94>
    31c4:	2201      	movs	r2, #1
		if (do_monitors
    31c6:	4611      	mov	r1, r2
    31c8:	2a00      	cmp	r2, #0
    31ca:	d1b7      	bne.n	313c <process_event+0x98>
    31cc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    31ce:	2a00      	cmp	r2, #0
    31d0:	d1b4      	bne.n	313c <process_event+0x98>
		    || (transit != NULL)) {
    31d2:	2f00      	cmp	r7, #0
    31d4:	d1b2      	bne.n	313c <process_event+0x98>
    31d6:	e7d2      	b.n	317e <process_event+0xda>
				notify_monitors(mgr, state, res);
    31d8:	464a      	mov	r2, r9
    31da:	4641      	mov	r1, r8
    31dc:	4620      	mov	r0, r4
    31de:	f010 ff40 	bl	14062 <notify_monitors>
    31e2:	e7b4      	b.n	314e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    31e4:	f013 0f20 	tst.w	r3, #32
    31e8:	d004      	beq.n	31f4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    31ea:	f023 0320 	bic.w	r3, r3, #32
    31ee:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    31f0:	2002      	movs	r0, #2
    31f2:	e7cc      	b.n	318e <process_event+0xea>
		evt = EVT_NOP;
    31f4:	2000      	movs	r0, #0
    31f6:	e7ca      	b.n	318e <process_event+0xea>
    31f8:	000141ed 	.word	0x000141ed

000031fc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    31fc:	b410      	push	{r4}
    31fe:	4604      	mov	r4, r0
	const char *sp = *str;
    3200:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3202:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    3204:	7813      	ldrb	r3, [r2, #0]
    3206:	4907      	ldr	r1, [pc, #28]	; (3224 <extract_decimal+0x28>)
    3208:	5c59      	ldrb	r1, [r3, r1]
    320a:	f011 0f04 	tst.w	r1, #4
    320e:	d006      	beq.n	321e <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    3210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3214:	3201      	adds	r2, #1
    3216:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    321a:	3830      	subs	r0, #48	; 0x30
    321c:	e7f2      	b.n	3204 <extract_decimal+0x8>
	}
	*str = sp;
    321e:	6022      	str	r2, [r4, #0]
	return val;
}
    3220:	bc10      	pop	{r4}
    3222:	4770      	bx	lr
    3224:	0001d135 	.word	0x0001d135

00003228 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    322c:	b083      	sub	sp, #12
    322e:	4604      	mov	r4, r0
    3230:	460d      	mov	r5, r1
    3232:	9201      	str	r2, [sp, #4]
    3234:	469a      	mov	sl, r3
    3236:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    323a:	78d3      	ldrb	r3, [r2, #3]
    323c:	4a31      	ldr	r2, [pc, #196]	; (3304 <encode_uint+0xdc>)
    323e:	f813 b002 	ldrb.w	fp, [r3, r2]
    3242:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    3246:	2b6f      	cmp	r3, #111	; 0x6f
    3248:	d00f      	beq.n	326a <encode_uint+0x42>
    324a:	d906      	bls.n	325a <encode_uint+0x32>
    324c:	2b70      	cmp	r3, #112	; 0x70
    324e:	d00f      	beq.n	3270 <encode_uint+0x48>
    3250:	2b78      	cmp	r3, #120	; 0x78
    3252:	d110      	bne.n	3276 <encode_uint+0x4e>
		return 16;
    3254:	f04f 0910 	mov.w	r9, #16
    3258:	e023      	b.n	32a2 <encode_uint+0x7a>
	switch (specifier) {
    325a:	2b58      	cmp	r3, #88	; 0x58
    325c:	d002      	beq.n	3264 <encode_uint+0x3c>
    325e:	f04f 090a 	mov.w	r9, #10
    3262:	e01e      	b.n	32a2 <encode_uint+0x7a>
		return 16;
    3264:	f04f 0910 	mov.w	r9, #16
    3268:	e01b      	b.n	32a2 <encode_uint+0x7a>
		return 8;
    326a:	f04f 0908 	mov.w	r9, #8
    326e:	e018      	b.n	32a2 <encode_uint+0x7a>
		return 16;
    3270:	f04f 0910 	mov.w	r9, #16
    3274:	e015      	b.n	32a2 <encode_uint+0x7a>
	switch (specifier) {
    3276:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    327a:	e012      	b.n	32a2 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    327c:	b2d2      	uxtb	r2, r2
    327e:	3230      	adds	r2, #48	; 0x30
    3280:	b2d2      	uxtb	r2, r2
    3282:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    3286:	4632      	mov	r2, r6
    3288:	463b      	mov	r3, r7
    328a:	4620      	mov	r0, r4
    328c:	4629      	mov	r1, r5
    328e:	f7fd ff2b 	bl	10e8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    3292:	42bd      	cmp	r5, r7
    3294:	bf08      	it	eq
    3296:	42b4      	cmpeq	r4, r6
    3298:	d318      	bcc.n	32cc <encode_uint+0xa4>
    329a:	45d0      	cmp	r8, sl
    329c:	d916      	bls.n	32cc <encode_uint+0xa4>
		value /= radix;
    329e:	4604      	mov	r4, r0
    32a0:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    32a2:	464e      	mov	r6, r9
    32a4:	2700      	movs	r7, #0
    32a6:	464a      	mov	r2, r9
    32a8:	463b      	mov	r3, r7
    32aa:	4620      	mov	r0, r4
    32ac:	4629      	mov	r1, r5
    32ae:	f7fd ff1b 	bl	10e8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    32b2:	2a09      	cmp	r2, #9
    32b4:	d9e2      	bls.n	327c <encode_uint+0x54>
    32b6:	f1bb 0f01 	cmp.w	fp, #1
    32ba:	d003      	beq.n	32c4 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    32bc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    32be:	3257      	adds	r2, #87	; 0x57
    32c0:	b2d2      	uxtb	r2, r2
    32c2:	e7de      	b.n	3282 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    32c4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    32c6:	3237      	adds	r2, #55	; 0x37
    32c8:	b2d2      	uxtb	r2, r2
    32ca:	e7da      	b.n	3282 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    32cc:	9b01      	ldr	r3, [sp, #4]
    32ce:	781b      	ldrb	r3, [r3, #0]
    32d0:	f013 0f20 	tst.w	r3, #32
    32d4:	d005      	beq.n	32e2 <encode_uint+0xba>
		if (radix == 8) {
    32d6:	f1b9 0f08 	cmp.w	r9, #8
    32da:	d006      	beq.n	32ea <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    32dc:	f1b9 0f10 	cmp.w	r9, #16
    32e0:	d009      	beq.n	32f6 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    32e2:	4640      	mov	r0, r8
    32e4:	b003      	add	sp, #12
    32e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    32ea:	9a01      	ldr	r2, [sp, #4]
    32ec:	7893      	ldrb	r3, [r2, #2]
    32ee:	f043 0308 	orr.w	r3, r3, #8
    32f2:	7093      	strb	r3, [r2, #2]
    32f4:	e7f5      	b.n	32e2 <encode_uint+0xba>
			conv->altform_0c = true;
    32f6:	9a01      	ldr	r2, [sp, #4]
    32f8:	7893      	ldrb	r3, [r2, #2]
    32fa:	f043 0310 	orr.w	r3, r3, #16
    32fe:	7093      	strb	r3, [r2, #2]
    3300:	e7ef      	b.n	32e2 <encode_uint+0xba>
    3302:	bf00      	nop
    3304:	0001d135 	.word	0x0001d135

00003308 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    330c:	b093      	sub	sp, #76	; 0x4c
    330e:	4606      	mov	r6, r0
    3310:	460d      	mov	r5, r1
    3312:	4692      	mov	sl, r2
    3314:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3316:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3318:	f89a 0000 	ldrb.w	r0, [sl]
    331c:	2800      	cmp	r0, #0
    331e:	f000 84d6 	beq.w	3cce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x236>
		if (*fp != '%') {
    3322:	2825      	cmp	r0, #37	; 0x25
    3324:	d008      	beq.n	3338 <cbvprintf+0x30>
			OUTC(*fp++);
    3326:	f10a 0a01 	add.w	sl, sl, #1
    332a:	4629      	mov	r1, r5
    332c:	47b0      	blx	r6
    332e:	2800      	cmp	r0, #0
    3330:	f2c0 84ce 	blt.w	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3334:	3401      	adds	r4, #1
			continue;
    3336:	e7ef      	b.n	3318 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    3338:	2300      	movs	r3, #0
    333a:	9306      	str	r3, [sp, #24]
    333c:	9307      	str	r3, [sp, #28]
    333e:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    3340:	9308      	str	r3, [sp, #32]
    3342:	9309      	str	r3, [sp, #36]	; 0x24
    3344:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    3346:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    334a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    334e:	2b25      	cmp	r3, #37	; 0x25
    3350:	d001      	beq.n	3356 <cbvprintf+0x4e>
	bool loop = true;
    3352:	2701      	movs	r7, #1
    3354:	e02c      	b.n	33b0 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    3356:	f10a 0802 	add.w	r8, sl, #2
    335a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    335e:	e1a8      	b.n	36b2 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    3360:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3364:	f043 0304 	orr.w	r3, r3, #4
    3368:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    336c:	b1ff      	cbz	r7, 33ae <cbvprintf+0xa6>
			++sp;
    336e:	f108 0801 	add.w	r8, r8, #1
    3372:	e01c      	b.n	33ae <cbvprintf+0xa6>
			conv->flag_plus = true;
    3374:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3378:	f043 0308 	orr.w	r3, r3, #8
    337c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    3380:	e7f4      	b.n	336c <cbvprintf+0x64>
			conv->flag_space = true;
    3382:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3386:	f043 0310 	orr.w	r3, r3, #16
    338a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    338e:	e7ed      	b.n	336c <cbvprintf+0x64>
			conv->flag_hash = true;
    3390:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3394:	f043 0320 	orr.w	r3, r3, #32
    3398:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    339c:	e7e6      	b.n	336c <cbvprintf+0x64>
			conv->flag_zero = true;
    339e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33a6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    33aa:	e7df      	b.n	336c <cbvprintf+0x64>
		switch (*sp) {
    33ac:	2700      	movs	r7, #0
	} while (loop);
    33ae:	b34f      	cbz	r7, 3404 <cbvprintf+0xfc>
		switch (*sp) {
    33b0:	f898 3000 	ldrb.w	r3, [r8]
    33b4:	3b20      	subs	r3, #32
    33b6:	2b10      	cmp	r3, #16
    33b8:	d8f8      	bhi.n	33ac <cbvprintf+0xa4>
    33ba:	a201      	add	r2, pc, #4	; (adr r2, 33c0 <cbvprintf+0xb8>)
    33bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    33c0:	00003383 	.word	0x00003383
    33c4:	000033ad 	.word	0x000033ad
    33c8:	000033ad 	.word	0x000033ad
    33cc:	00003391 	.word	0x00003391
    33d0:	000033ad 	.word	0x000033ad
    33d4:	000033ad 	.word	0x000033ad
    33d8:	000033ad 	.word	0x000033ad
    33dc:	000033ad 	.word	0x000033ad
    33e0:	000033ad 	.word	0x000033ad
    33e4:	000033ad 	.word	0x000033ad
    33e8:	000033ad 	.word	0x000033ad
    33ec:	00003375 	.word	0x00003375
    33f0:	000033ad 	.word	0x000033ad
    33f4:	00003361 	.word	0x00003361
    33f8:	000033ad 	.word	0x000033ad
    33fc:	000033ad 	.word	0x000033ad
    3400:	0000339f 	.word	0x0000339f
	if (conv->flag_zero && conv->flag_dash) {
    3404:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3408:	f003 0344 	and.w	r3, r3, #68	; 0x44
    340c:	2b44      	cmp	r3, #68	; 0x44
    340e:	d06d      	beq.n	34ec <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    3410:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    3414:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    341c:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    3420:	f898 3000 	ldrb.w	r3, [r8]
    3424:	2b2a      	cmp	r3, #42	; 0x2a
    3426:	d068      	beq.n	34fa <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    3428:	a805      	add	r0, sp, #20
    342a:	f7ff fee7 	bl	31fc <extract_decimal>
	if (sp != wp) {
    342e:	9b05      	ldr	r3, [sp, #20]
    3430:	4598      	cmp	r8, r3
    3432:	d012      	beq.n	345a <cbvprintf+0x152>
		conv->width_present = true;
    3434:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    343c:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    3440:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    3442:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    3446:	2800      	cmp	r0, #0
    3448:	db60      	blt.n	350c <cbvprintf+0x204>
    344a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    344c:	4313      	orrs	r3, r2
    344e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3452:	f363 0241 	bfi	r2, r3, #1, #1
    3456:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    345a:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    345c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    345e:	781b      	ldrb	r3, [r3, #0]
    3460:	2b2e      	cmp	r3, #46	; 0x2e
    3462:	bf14      	ite	ne
    3464:	2300      	movne	r3, #0
    3466:	2301      	moveq	r3, #1
    3468:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    346c:	f363 0241 	bfi	r2, r3, #1, #1
    3470:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    3474:	2b00      	cmp	r3, #0
    3476:	d04b      	beq.n	3510 <cbvprintf+0x208>
	++sp;
    3478:	9b05      	ldr	r3, [sp, #20]
    347a:	1c5a      	adds	r2, r3, #1
    347c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    347e:	785b      	ldrb	r3, [r3, #1]
    3480:	2b2a      	cmp	r3, #42	; 0x2a
    3482:	d048      	beq.n	3516 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    3484:	a805      	add	r0, sp, #20
    3486:	f7ff feb9 	bl	31fc <extract_decimal>
	conv->prec_value = prec;
    348a:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    348c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3490:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    3494:	2800      	cmp	r0, #0
    3496:	db47      	blt.n	3528 <cbvprintf+0x220>
    3498:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    349a:	4313      	orrs	r3, r2
    349c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    34a0:	f363 0241 	bfi	r2, r3, #1, #1
    34a4:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    34a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    34ac:	f898 3000 	ldrb.w	r3, [r8]
    34b0:	3b4c      	subs	r3, #76	; 0x4c
    34b2:	2b2e      	cmp	r3, #46	; 0x2e
    34b4:	f200 80dc 	bhi.w	3670 <cbvprintf+0x368>
    34b8:	e8df f003 	tbb	[pc, r3]
    34bc:	dadadaca 	.word	0xdadadaca
    34c0:	dadadada 	.word	0xdadadada
    34c4:	dadadada 	.word	0xdadadada
    34c8:	dadadada 	.word	0xdadadada
    34cc:	dadadada 	.word	0xdadadada
    34d0:	dadadada 	.word	0xdadadada
    34d4:	dadadada 	.word	0xdadadada
    34d8:	da6ada38 	.word	0xda6ada38
    34dc:	dadada51 	.word	0xdadada51
    34e0:	dadadada 	.word	0xdadadada
    34e4:	dadadac0 	.word	0xdadadac0
    34e8:	dada      	.short	0xdada
    34ea:	b6          	.byte	0xb6
    34eb:	00          	.byte	0x00
		conv->flag_zero = false;
    34ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
    34f0:	f36f 1386 	bfc	r3, #6, #1
    34f4:	f88d 3020 	strb.w	r3, [sp, #32]
    34f8:	e78a      	b.n	3410 <cbvprintf+0x108>
		conv->width_star = true;
    34fa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34fe:	f043 0301 	orr.w	r3, r3, #1
    3502:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3506:	4643      	mov	r3, r8
    3508:	3301      	adds	r3, #1
    350a:	e7a7      	b.n	345c <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    350c:	2201      	movs	r2, #1
    350e:	e79d      	b.n	344c <cbvprintf+0x144>
		return sp;
    3510:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3514:	e7ca      	b.n	34ac <cbvprintf+0x1a4>
		conv->prec_star = true;
    3516:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    351a:	f043 0304 	orr.w	r3, r3, #4
    351e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3522:	f102 0801 	add.w	r8, r2, #1
    3526:	e7c1      	b.n	34ac <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    3528:	2201      	movs	r2, #1
    352a:	e7b6      	b.n	349a <cbvprintf+0x192>
		if (*++sp == 'h') {
    352c:	f108 0201 	add.w	r2, r8, #1
    3530:	f898 3001 	ldrb.w	r3, [r8, #1]
    3534:	2b68      	cmp	r3, #104	; 0x68
    3536:	d008      	beq.n	354a <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    3538:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    353c:	2102      	movs	r1, #2
    353e:	f361 03c6 	bfi	r3, r1, #3, #4
    3542:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    3546:	4690      	mov	r8, r2
    3548:	e02b      	b.n	35a2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    354a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    354e:	2201      	movs	r2, #1
    3550:	f362 03c6 	bfi	r3, r2, #3, #4
    3554:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    3558:	f108 0802 	add.w	r8, r8, #2
    355c:	e021      	b.n	35a2 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    355e:	f108 0201 	add.w	r2, r8, #1
    3562:	f898 3001 	ldrb.w	r3, [r8, #1]
    3566:	2b6c      	cmp	r3, #108	; 0x6c
    3568:	d008      	beq.n	357c <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    356a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    356e:	2103      	movs	r1, #3
    3570:	f361 03c6 	bfi	r3, r1, #3, #4
    3574:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    3578:	4690      	mov	r8, r2
    357a:	e012      	b.n	35a2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    357c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3580:	2204      	movs	r2, #4
    3582:	f362 03c6 	bfi	r3, r2, #3, #4
    3586:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    358a:	f108 0802 	add.w	r8, r8, #2
    358e:	e008      	b.n	35a2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    3590:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3594:	2205      	movs	r2, #5
    3596:	f362 03c6 	bfi	r3, r2, #3, #4
    359a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    359e:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    35a2:	f818 3b01 	ldrb.w	r3, [r8], #1
    35a6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    35aa:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    35ae:	2a37      	cmp	r2, #55	; 0x37
    35b0:	f200 8150 	bhi.w	3854 <cbvprintf+0x54c>
    35b4:	e8df f012 	tbh	[pc, r2, lsl #1]
    35b8:	014e0126 	.word	0x014e0126
    35bc:	014e014e 	.word	0x014e014e
    35c0:	01260126 	.word	0x01260126
    35c4:	014e0126 	.word	0x014e0126
    35c8:	014e014e 	.word	0x014e014e
    35cc:	014e014e 	.word	0x014e014e
    35d0:	014e014e 	.word	0x014e014e
    35d4:	014e014e 	.word	0x014e014e
    35d8:	014e014e 	.word	0x014e014e
    35dc:	014e014e 	.word	0x014e014e
    35e0:	014e014e 	.word	0x014e014e
    35e4:	0113014e 	.word	0x0113014e
    35e8:	014e014e 	.word	0x014e014e
    35ec:	014e014e 	.word	0x014e014e
    35f0:	014e014e 	.word	0x014e014e
    35f4:	014e014e 	.word	0x014e014e
    35f8:	014e0126 	.word	0x014e0126
    35fc:	00630113 	.word	0x00630113
    3600:	01260126 	.word	0x01260126
    3604:	014e0126 	.word	0x014e0126
    3608:	014e0063 	.word	0x014e0063
    360c:	014e014e 	.word	0x014e014e
    3610:	012f014e 	.word	0x012f014e
    3614:	013f0113 	.word	0x013f0113
    3618:	014e014e 	.word	0x014e014e
    361c:	014e013f 	.word	0x014e013f
    3620:	014e0113 	.word	0x014e0113
    3624:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    3628:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    362c:	2206      	movs	r2, #6
    362e:	f362 03c6 	bfi	r3, r2, #3, #4
    3632:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    3636:	f108 0801 	add.w	r8, r8, #1
		break;
    363a:	e7b2      	b.n	35a2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    363c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3640:	2207      	movs	r2, #7
    3642:	f362 03c6 	bfi	r3, r2, #3, #4
    3646:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    364a:	f108 0801 	add.w	r8, r8, #1
		break;
    364e:	e7a8      	b.n	35a2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    3650:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3654:	2208      	movs	r2, #8
    3656:	f362 03c6 	bfi	r3, r2, #3, #4
    365a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    365e:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    3662:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3666:	f043 0302 	orr.w	r3, r3, #2
    366a:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    366e:	e798      	b.n	35a2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    3670:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3674:	f36f 03c6 	bfc	r3, #3, #4
    3678:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    367c:	e791      	b.n	35a2 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    367e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3682:	2101      	movs	r1, #1
    3684:	f361 0202 	bfi	r2, r1, #0, #3
    3688:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    368c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    3690:	f002 0278 	and.w	r2, r2, #120	; 0x78
    3694:	2a40      	cmp	r2, #64	; 0x40
    3696:	f000 80aa 	beq.w	37ee <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    369a:	2b63      	cmp	r3, #99	; 0x63
    369c:	f000 80ae 	beq.w	37fc <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    36a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    36a4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    36a8:	4317      	orrs	r7, r2
    36aa:	f367 0341 	bfi	r3, r7, #1, #1
    36ae:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    36b2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    36b6:	f013 0f01 	tst.w	r3, #1
    36ba:	f000 80da 	beq.w	3872 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    36be:	9b03      	ldr	r3, [sp, #12]
    36c0:	1d1a      	adds	r2, r3, #4
    36c2:	9203      	str	r2, [sp, #12]
    36c4:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    36c6:	2f00      	cmp	r7, #0
    36c8:	f2c0 80cb 	blt.w	3862 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    36cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    36d0:	f013 0f04 	tst.w	r3, #4
    36d4:	f000 80df 	beq.w	3896 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    36d8:	9b03      	ldr	r3, [sp, #12]
    36da:	1d1a      	adds	r2, r3, #4
    36dc:	9203      	str	r2, [sp, #12]
    36de:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    36e2:	f1bb 0f00 	cmp.w	fp, #0
    36e6:	f2c0 80cd 	blt.w	3884 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    36ea:	2300      	movs	r3, #0
    36ec:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    36ee:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    36f0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    36f4:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    36f8:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    36fc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    3700:	2b01      	cmp	r3, #1
    3702:	f000 80d1 	beq.w	38a8 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    3706:	2b02      	cmp	r3, #2
    3708:	f000 8116 	beq.w	3938 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    370c:	2b04      	cmp	r3, #4
    370e:	f000 8167 	beq.w	39e0 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3712:	2b03      	cmp	r3, #3
    3714:	f000 817e 	beq.w	3a14 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    3718:	f89d 9020 	ldrb.w	r9, [sp, #32]
    371c:	f019 0303 	ands.w	r3, r9, #3
    3720:	9302      	str	r3, [sp, #8]
    3722:	f040 817d 	bne.w	3a20 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    3726:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    372a:	3b25      	subs	r3, #37	; 0x25
    372c:	2b53      	cmp	r3, #83	; 0x53
    372e:	f200 8233 	bhi.w	3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>
    3732:	e8df f013 	tbh	[pc, r3, lsl #1]
    3736:	0181      	.short	0x0181
    3738:	02310231 	.word	0x02310231
    373c:	02310231 	.word	0x02310231
    3740:	02310231 	.word	0x02310231
    3744:	02310231 	.word	0x02310231
    3748:	02310231 	.word	0x02310231
    374c:	02310231 	.word	0x02310231
    3750:	02310231 	.word	0x02310231
    3754:	02310231 	.word	0x02310231
    3758:	02310231 	.word	0x02310231
    375c:	02310231 	.word	0x02310231
    3760:	02310231 	.word	0x02310231
    3764:	02310231 	.word	0x02310231
    3768:	02310231 	.word	0x02310231
    376c:	02310231 	.word	0x02310231
    3770:	02310231 	.word	0x02310231
    3774:	02310231 	.word	0x02310231
    3778:	02310231 	.word	0x02310231
    377c:	02310231 	.word	0x02310231
    3780:	02310231 	.word	0x02310231
    3784:	02310231 	.word	0x02310231
    3788:	02310231 	.word	0x02310231
    378c:	02310231 	.word	0x02310231
    3790:	02310231 	.word	0x02310231
    3794:	02310231 	.word	0x02310231
    3798:	02310231 	.word	0x02310231
    379c:	023101c7 	.word	0x023101c7
    37a0:	02310231 	.word	0x02310231
    37a4:	02310231 	.word	0x02310231
    37a8:	02310231 	.word	0x02310231
    37ac:	02310231 	.word	0x02310231
    37b0:	01a10231 	.word	0x01a10231
    37b4:	023101ab 	.word	0x023101ab
    37b8:	02310231 	.word	0x02310231
    37bc:	01ab0231 	.word	0x01ab0231
    37c0:	02310231 	.word	0x02310231
    37c4:	02310231 	.word	0x02310231
    37c8:	01c70208 	.word	0x01c70208
    37cc:	023101ea 	.word	0x023101ea
    37d0:	018f0231 	.word	0x018f0231
    37d4:	01c70231 	.word	0x01c70231
    37d8:	02310231 	.word	0x02310231
    37dc:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    37de:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    37e2:	2102      	movs	r1, #2
    37e4:	f361 0202 	bfi	r2, r1, #0, #3
    37e8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    37ec:	e74e      	b.n	368c <cbvprintf+0x384>
			conv->invalid = true;
    37ee:	f89d 1020 	ldrb.w	r1, [sp, #32]
    37f2:	f041 0101 	orr.w	r1, r1, #1
    37f6:	f88d 1020 	strb.w	r1, [sp, #32]
    37fa:	e74e      	b.n	369a <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    37fc:	1e17      	subs	r7, r2, #0
    37fe:	bf18      	it	ne
    3800:	2701      	movne	r7, #1
    3802:	e74d      	b.n	36a0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    3804:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3808:	2204      	movs	r2, #4
    380a:	f362 0302 	bfi	r3, r2, #0, #3
    380e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    3812:	2701      	movs	r7, #1
			break;
    3814:	e744      	b.n	36a0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    3816:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    381a:	2203      	movs	r2, #3
    381c:	f362 0302 	bfi	r3, r2, #0, #3
    3820:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    3824:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3828:	f003 0378 	and.w	r3, r3, #120	; 0x78
    382c:	2b40      	cmp	r3, #64	; 0x40
    382e:	f47f af37 	bne.w	36a0 <cbvprintf+0x398>
			unsupported = true;
    3832:	2701      	movs	r7, #1
    3834:	e734      	b.n	36a0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    3836:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    383a:	2203      	movs	r2, #3
    383c:	f362 0302 	bfi	r3, r2, #0, #3
    3840:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    3844:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3848:	f013 0f78 	tst.w	r3, #120	; 0x78
    384c:	f43f af28 	beq.w	36a0 <cbvprintf+0x398>
			unsupported = true;
    3850:	2701      	movs	r7, #1
    3852:	e725      	b.n	36a0 <cbvprintf+0x398>
		conv->invalid = true;
    3854:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3858:	f043 0301 	orr.w	r3, r3, #1
    385c:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    3860:	e71e      	b.n	36a0 <cbvprintf+0x398>
				conv->flag_dash = true;
    3862:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3866:	f043 0304 	orr.w	r3, r3, #4
    386a:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    386e:	427f      	negs	r7, r7
    3870:	e72c      	b.n	36cc <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    3872:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    3876:	2b00      	cmp	r3, #0
    3878:	db02      	blt.n	3880 <cbvprintf+0x578>
		int width = -1;
    387a:	f04f 37ff 	mov.w	r7, #4294967295
    387e:	e725      	b.n	36cc <cbvprintf+0x3c4>
			width = conv->width_value;
    3880:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3882:	e723      	b.n	36cc <cbvprintf+0x3c4>
				conv->prec_present = false;
    3884:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3888:	f36f 0341 	bfc	r3, #1, #1
    388c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    3890:	f04f 3bff 	mov.w	fp, #4294967295
    3894:	e729      	b.n	36ea <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    3896:	f013 0f02 	tst.w	r3, #2
    389a:	d002      	beq.n	38a2 <cbvprintf+0x59a>
			precision = conv->prec_value;
    389c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    38a0:	e723      	b.n	36ea <cbvprintf+0x3e2>
		int precision = -1;
    38a2:	f04f 3bff 	mov.w	fp, #4294967295
    38a6:	e720      	b.n	36ea <cbvprintf+0x3e2>
			switch (length_mod) {
    38a8:	1ecb      	subs	r3, r1, #3
    38aa:	2b04      	cmp	r3, #4
    38ac:	d804      	bhi.n	38b8 <cbvprintf+0x5b0>
    38ae:	e8df f003 	tbb	[pc, r3]
    38b2:	1d0b      	.short	0x1d0b
    38b4:	3529      	.short	0x3529
    38b6:	35          	.byte	0x35
    38b7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    38b8:	9b03      	ldr	r3, [sp, #12]
    38ba:	1d1a      	adds	r2, r3, #4
    38bc:	9203      	str	r2, [sp, #12]
    38be:	681a      	ldr	r2, [r3, #0]
    38c0:	17d3      	asrs	r3, r2, #31
    38c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    38c6:	e006      	b.n	38d6 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    38c8:	9b03      	ldr	r3, [sp, #12]
    38ca:	1d1a      	adds	r2, r3, #4
    38cc:	9203      	str	r2, [sp, #12]
    38ce:	681a      	ldr	r2, [r3, #0]
    38d0:	17d3      	asrs	r3, r2, #31
    38d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    38d6:	2901      	cmp	r1, #1
    38d8:	d028      	beq.n	392c <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    38da:	2902      	cmp	r1, #2
    38dc:	f47f af1c 	bne.w	3718 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    38e0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    38e4:	17d3      	asrs	r3, r2, #31
    38e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    38ea:	e715      	b.n	3718 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    38ec:	9b03      	ldr	r3, [sp, #12]
    38ee:	3307      	adds	r3, #7
    38f0:	f023 0307 	bic.w	r3, r3, #7
    38f4:	f103 0208 	add.w	r2, r3, #8
    38f8:	9203      	str	r2, [sp, #12]
    38fa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    38fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3902:	e7e8      	b.n	38d6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    3904:	9b03      	ldr	r3, [sp, #12]
    3906:	3307      	adds	r3, #7
    3908:	f023 0307 	bic.w	r3, r3, #7
    390c:	f103 0208 	add.w	r2, r3, #8
    3910:	9203      	str	r2, [sp, #12]
    3912:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3916:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    391a:	e7dc      	b.n	38d6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    391c:	9b03      	ldr	r3, [sp, #12]
    391e:	1d1a      	adds	r2, r3, #4
    3920:	9203      	str	r2, [sp, #12]
    3922:	681a      	ldr	r2, [r3, #0]
    3924:	17d3      	asrs	r3, r2, #31
				value->sint =
    3926:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    392a:	e7d4      	b.n	38d6 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    392c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3930:	9306      	str	r3, [sp, #24]
    3932:	2300      	movs	r3, #0
    3934:	9307      	str	r3, [sp, #28]
    3936:	e6ef      	b.n	3718 <cbvprintf+0x410>
			switch (length_mod) {
    3938:	1ecb      	subs	r3, r1, #3
    393a:	2b04      	cmp	r3, #4
    393c:	d804      	bhi.n	3948 <cbvprintf+0x640>
    393e:	e8df f003 	tbb	[pc, r3]
    3942:	1f0b      	.short	0x1f0b
    3944:	4135      	.short	0x4135
    3946:	41          	.byte	0x41
    3947:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    3948:	9b03      	ldr	r3, [sp, #12]
    394a:	1d1a      	adds	r2, r3, #4
    394c:	9203      	str	r2, [sp, #12]
    394e:	681b      	ldr	r3, [r3, #0]
    3950:	9306      	str	r3, [sp, #24]
    3952:	2300      	movs	r3, #0
    3954:	9307      	str	r3, [sp, #28]
				break;
    3956:	e01e      	b.n	3996 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    3958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    395c:	2b63      	cmp	r3, #99	; 0x63
    395e:	d007      	beq.n	3970 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    3960:	9b03      	ldr	r3, [sp, #12]
    3962:	1d1a      	adds	r2, r3, #4
    3964:	9203      	str	r2, [sp, #12]
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	9306      	str	r3, [sp, #24]
    396a:	2300      	movs	r3, #0
    396c:	9307      	str	r3, [sp, #28]
    396e:	e012      	b.n	3996 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    3970:	9b03      	ldr	r3, [sp, #12]
    3972:	1d1a      	adds	r2, r3, #4
    3974:	9203      	str	r2, [sp, #12]
    3976:	681b      	ldr	r3, [r3, #0]
    3978:	9306      	str	r3, [sp, #24]
    397a:	2300      	movs	r3, #0
    397c:	9307      	str	r3, [sp, #28]
    397e:	e00a      	b.n	3996 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    3980:	9b03      	ldr	r3, [sp, #12]
    3982:	3307      	adds	r3, #7
    3984:	f023 0307 	bic.w	r3, r3, #7
    3988:	f103 0208 	add.w	r2, r3, #8
    398c:	9203      	str	r2, [sp, #12]
    398e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3992:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    3996:	2901      	cmp	r1, #1
    3998:	d01c      	beq.n	39d4 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    399a:	2902      	cmp	r1, #2
    399c:	f47f aebc 	bne.w	3718 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    39a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    39a4:	9306      	str	r3, [sp, #24]
    39a6:	2300      	movs	r3, #0
    39a8:	9307      	str	r3, [sp, #28]
    39aa:	e6b5      	b.n	3718 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    39ac:	9b03      	ldr	r3, [sp, #12]
    39ae:	3307      	adds	r3, #7
    39b0:	f023 0307 	bic.w	r3, r3, #7
    39b4:	f103 0208 	add.w	r2, r3, #8
    39b8:	9203      	str	r2, [sp, #12]
    39ba:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    39be:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    39c2:	e7e8      	b.n	3996 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    39c4:	9b03      	ldr	r3, [sp, #12]
    39c6:	1d1a      	adds	r2, r3, #4
    39c8:	9203      	str	r2, [sp, #12]
    39ca:	681b      	ldr	r3, [r3, #0]
				value->uint =
    39cc:	9306      	str	r3, [sp, #24]
    39ce:	2300      	movs	r3, #0
    39d0:	9307      	str	r3, [sp, #28]
				break;
    39d2:	e7e0      	b.n	3996 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    39d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    39d8:	9306      	str	r3, [sp, #24]
    39da:	2300      	movs	r3, #0
    39dc:	9307      	str	r3, [sp, #28]
    39de:	e69b      	b.n	3718 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    39e0:	2908      	cmp	r1, #8
    39e2:	d00b      	beq.n	39fc <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    39e4:	9b03      	ldr	r3, [sp, #12]
    39e6:	3307      	adds	r3, #7
    39e8:	f023 0307 	bic.w	r3, r3, #7
    39ec:	f103 0208 	add.w	r2, r3, #8
    39f0:	9203      	str	r2, [sp, #12]
    39f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    39f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    39fa:	e68d      	b.n	3718 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    39fc:	9b03      	ldr	r3, [sp, #12]
    39fe:	3307      	adds	r3, #7
    3a00:	f023 0307 	bic.w	r3, r3, #7
    3a04:	f103 0208 	add.w	r2, r3, #8
    3a08:	9203      	str	r2, [sp, #12]
    3a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3a12:	e681      	b.n	3718 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    3a14:	9b03      	ldr	r3, [sp, #12]
    3a16:	1d1a      	adds	r2, r3, #4
    3a18:	9203      	str	r2, [sp, #12]
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	9306      	str	r3, [sp, #24]
    3a1e:	e67b      	b.n	3718 <cbvprintf+0x410>
			OUTS(sp, fp);
    3a20:	4643      	mov	r3, r8
    3a22:	4652      	mov	r2, sl
    3a24:	4629      	mov	r1, r5
    3a26:	4630      	mov	r0, r6
    3a28:	f010 fd66 	bl	144f8 <outs>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	f2c0 814f 	blt.w	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3a32:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    3a34:	46c2      	mov	sl, r8
			continue;
    3a36:	e46f      	b.n	3318 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    3a38:	4629      	mov	r1, r5
    3a3a:	2025      	movs	r0, #37	; 0x25
    3a3c:	47b0      	blx	r6
    3a3e:	2800      	cmp	r0, #0
    3a40:	f2c0 8146 	blt.w	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3a44:	3401      	adds	r4, #1
		char sign = 0;
    3a46:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3a4a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3a4e:	f04f 0a00 	mov.w	sl, #0
			break;
    3a52:	e0a7      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		case 's': {
			bps = (const char *)value->ptr;
    3a54:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    3a58:	f1bb 0f00 	cmp.w	fp, #0
    3a5c:	db08      	blt.n	3a70 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    3a5e:	4659      	mov	r1, fp
    3a60:	4650      	mov	r0, sl
    3a62:	f015 f9df 	bl	18e24 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    3a66:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    3a6a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    3a6e:	e099      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
				len = strlen(bps);
    3a70:	4650      	mov	r0, sl
    3a72:	f7fd fd2f 	bl	14d4 <strlen>
    3a76:	e7f6      	b.n	3a66 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3a78:	9b06      	ldr	r3, [sp, #24]
    3a7a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    3a7e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    3a82:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    3a86:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    3a8a:	e08b      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    3a8c:	f019 0f08 	tst.w	r9, #8
    3a90:	d105      	bne.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
				sign = '+';
			} else if (conv->flag_space) {
    3a92:	f019 0910 	ands.w	r9, r9, #16
    3a96:	d004      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
				sign = ' ';
    3a98:	f04f 0920 	mov.w	r9, #32
    3a9c:	e001      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
				sign = '+';
    3a9e:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3aa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    3aa6:	2a00      	cmp	r2, #0
    3aa8:	f173 0100 	sbcs.w	r1, r3, #0
    3aac:	db02      	blt.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    3aae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3ab2:	e009      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
				value->uint = (uint_value_type)-sint;
    3ab4:	4252      	negs	r2, r2
    3ab6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3aba:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    3abe:	f04f 092d 	mov.w	r9, #45	; 0x2d
    3ac2:	e001      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
		switch (conv->specifier) {
    3ac4:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3ac8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3acc:	9300      	str	r3, [sp, #0]
    3ace:	ab0c      	add	r3, sp, #48	; 0x30
    3ad0:	aa08      	add	r2, sp, #32
    3ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3ad6:	f7ff fba7 	bl	3228 <encode_uint>
    3ada:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    3adc:	f1bb 0f00 	cmp.w	fp, #0
    3ae0:	f2c0 8090 	blt.w	3c04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16c>
				size_t len = bpe - bps;
    3ae4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3ae8:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    3aec:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3af0:	f36f 1286 	bfc	r2, #6, #1
    3af4:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3af8:	459b      	cmp	fp, r3
    3afa:	f240 8086 	bls.w	3c0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x172>
					conv->pad0_value = precision - (int)len;
    3afe:	ebab 0303 	sub.w	r3, fp, r3
    3b02:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    3b04:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b08:	e04c      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3b0a:	9806      	ldr	r0, [sp, #24]
    3b0c:	b930      	cbnz	r0, 3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
		char sign = 0;
    3b0e:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3b12:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 3cd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x240>
			bps = "(nil)";
    3b16:	f1ab 0a05 	sub.w	sl, fp, #5
    3b1a:	e043      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3b1c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3b20:	9300      	str	r3, [sp, #0]
    3b22:	ab0c      	add	r3, sp, #48	; 0x30
    3b24:	aa08      	add	r2, sp, #32
    3b26:	2100      	movs	r1, #0
    3b28:	f7ff fb7e 	bl	3228 <encode_uint>
    3b2c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    3b2e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3b32:	f043 0310 	orr.w	r3, r3, #16
    3b36:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    3b3a:	2378      	movs	r3, #120	; 0x78
    3b3c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    3b40:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    3b44:	e7ca      	b.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3b46:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    3b48:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3b4c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3b50:	2b07      	cmp	r3, #7
    3b52:	d806      	bhi.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
    3b54:	e8df f003 	tbb	[pc, r3]
    3b58:	100e0c04 	.word	0x100e0c04
    3b5c:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    3b60:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3b62:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3b66:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3b6a:	f04f 0a00 	mov.w	sl, #0
}
    3b6e:	e019      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		*(signed char *)dp = (signed char)count;
    3b70:	7014      	strb	r4, [r2, #0]
		break;
    3b72:	e7f6      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(short *)dp = (short)count;
    3b74:	8014      	strh	r4, [r2, #0]
		break;
    3b76:	e7f4      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(long *)dp = (long)count;
    3b78:	6014      	str	r4, [r2, #0]
		break;
    3b7a:	e7f2      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(long long *)dp = (long long)count;
    3b7c:	4620      	mov	r0, r4
    3b7e:	17e1      	asrs	r1, r4, #31
    3b80:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3b84:	e7ed      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(intmax_t *)dp = (intmax_t)count;
    3b86:	4620      	mov	r0, r4
    3b88:	17e1      	asrs	r1, r4, #31
    3b8a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3b8e:	e7e8      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(size_t *)dp = (size_t)count;
    3b90:	6014      	str	r4, [r2, #0]
		break;
    3b92:	e7e6      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3b94:	6014      	str	r4, [r2, #0]
		break;
    3b96:	e7e4      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		switch (conv->specifier) {
    3b98:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3b9c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3ba0:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3ba4:	f1ba 0f00 	cmp.w	sl, #0
    3ba8:	f000 808e 	beq.w	3cc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x230>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3bac:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    3bb0:	f1b9 0f00 	cmp.w	r9, #0
    3bb4:	d000      	beq.n	3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>
			nj_len += 1U;
    3bb6:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    3bb8:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    3bbc:	f011 0f10 	tst.w	r1, #16
    3bc0:	d026      	beq.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
			nj_len += 2U;
    3bc2:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3bc6:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3bc8:	f011 0f40 	tst.w	r1, #64	; 0x40
    3bcc:	d001      	beq.n	3bd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13a>
			nj_len += conv->pad0_pre_exp;
    3bce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3bd0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3bd2:	2f00      	cmp	r7, #0
    3bd4:	dd32      	ble.n	3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
			width -= (int)nj_len;
    3bd6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3bd8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3bdc:	f013 0f04 	tst.w	r3, #4
    3be0:	d12c      	bne.n	3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3be2:	f013 0f40 	tst.w	r3, #64	; 0x40
    3be6:	d018      	beq.n	3c1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x182>
					if (sign != 0) {
    3be8:	f1b9 0f00 	cmp.w	r9, #0
    3bec:	d018      	beq.n	3c20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x188>
						OUTC(sign);
    3bee:	4629      	mov	r1, r5
    3bf0:	4648      	mov	r0, r9
    3bf2:	47b0      	blx	r6
    3bf4:	2800      	cmp	r0, #0
    3bf6:	db6b      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3bf8:	3401      	adds	r4, #1
						sign = 0;
    3bfa:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    3bfe:	2330      	movs	r3, #48	; 0x30
    3c00:	9302      	str	r3, [sp, #8]
    3c02:	e00f      	b.n	3c24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18c>
		const char *bpe = buf + sizeof(buf);
    3c04:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3c08:	e7cc      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
    3c0a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3c0e:	e7c9      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		} else if (conv->altform_0) {
    3c10:	f011 0f08 	tst.w	r1, #8
    3c14:	d0d6      	beq.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
			nj_len += 1U;
    3c16:	3201      	adds	r2, #1
    3c18:	e7d4      	b.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
				char pad = ' ';
    3c1a:	2320      	movs	r3, #32
    3c1c:	9302      	str	r3, [sp, #8]
    3c1e:	e001      	b.n	3c24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18c>
					pad = '0';
    3c20:	2330      	movs	r3, #48	; 0x30
    3c22:	9302      	str	r3, [sp, #8]
    3c24:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3c26:	1e5f      	subs	r7, r3, #1
    3c28:	2b00      	cmp	r3, #0
    3c2a:	dd07      	ble.n	3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
					OUTC(pad);
    3c2c:	4629      	mov	r1, r5
    3c2e:	9802      	ldr	r0, [sp, #8]
    3c30:	47b0      	blx	r6
    3c32:	2800      	cmp	r0, #0
    3c34:	db4c      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c36:	3401      	adds	r4, #1
				while (width-- > 0) {
    3c38:	463b      	mov	r3, r7
    3c3a:	e7f4      	b.n	3c26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3c3c:	f1b9 0f00 	cmp.w	r9, #0
    3c40:	d005      	beq.n	3c4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b6>
			OUTC(sign);
    3c42:	4629      	mov	r1, r5
    3c44:	4648      	mov	r0, r9
    3c46:	47b0      	blx	r6
    3c48:	2800      	cmp	r0, #0
    3c4a:	db41      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c4c:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3c4e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3c52:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3c56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3c5a:	4313      	orrs	r3, r2
    3c5c:	d005      	beq.n	3c6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d2>
				OUTC('0');
    3c5e:	4629      	mov	r1, r5
    3c60:	2030      	movs	r0, #48	; 0x30
    3c62:	47b0      	blx	r6
    3c64:	2800      	cmp	r0, #0
    3c66:	db33      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c68:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3c6a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3c6e:	f013 0f10 	tst.w	r3, #16
    3c72:	d006      	beq.n	3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
				OUTC(conv->specifier);
    3c74:	4629      	mov	r1, r5
    3c76:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    3c7a:	47b0      	blx	r6
    3c7c:	2800      	cmp	r0, #0
    3c7e:	db27      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c80:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    3c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    3c84:	f103 39ff 	add.w	r9, r3, #4294967295
    3c88:	2b00      	cmp	r3, #0
    3c8a:	dd07      	ble.n	3c9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x204>
				OUTC('0');
    3c8c:	4629      	mov	r1, r5
    3c8e:	2030      	movs	r0, #48	; 0x30
    3c90:	47b0      	blx	r6
    3c92:	2800      	cmp	r0, #0
    3c94:	db1c      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c96:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3c98:	464b      	mov	r3, r9
    3c9a:	e7f3      	b.n	3c84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ec>
			}

			OUTS(bps, bpe);
    3c9c:	465b      	mov	r3, fp
    3c9e:	4652      	mov	r2, sl
    3ca0:	4629      	mov	r1, r5
    3ca2:	4630      	mov	r0, r6
    3ca4:	f010 fc28 	bl	144f8 <outs>
    3ca8:	2800      	cmp	r0, #0
    3caa:	db11      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3cac:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3cae:	2f00      	cmp	r7, #0
    3cb0:	dd07      	ble.n	3cc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22a>
			OUTC(' ');
    3cb2:	4629      	mov	r1, r5
    3cb4:	2020      	movs	r0, #32
    3cb6:	47b0      	blx	r6
    3cb8:	2800      	cmp	r0, #0
    3cba:	db09      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3cbc:	3401      	adds	r4, #1
			--width;
    3cbe:	3f01      	subs	r7, #1
    3cc0:	e7f5      	b.n	3cae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x216>
		fp = extract_conversion(conv, sp);
    3cc2:	46c2      	mov	sl, r8
    3cc4:	f7ff bb28 	b.w	3318 <cbvprintf+0x10>
    3cc8:	46c2      	mov	sl, r8
    3cca:	f7ff bb25 	b.w	3318 <cbvprintf+0x10>
		}
	}

	return count;
    3cce:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    3cd0:	b013      	add	sp, #76	; 0x4c
    3cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cd6:	bf00      	nop
    3cd8:	0001a239 	.word	0x0001a239

00003cdc <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    3cdc:	b508      	push	{r3, lr}
    3cde:	4604      	mov	r4, r0
    3ce0:	f04f 0220 	mov.w	r2, #32
    3ce4:	f3ef 8311 	mrs	r3, BASEPRI
    3ce8:	f382 8812 	msr	BASEPRI_MAX, r2
    3cec:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3cf0:	f011 fa0d 	bl	1510e <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3cf4:	4620      	mov	r0, r4
    3cf6:	f000 fd07 	bl	4708 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3cfa:	4803      	ldr	r0, [pc, #12]	; (3d08 <sys_reboot+0x2c>)
    3cfc:	f010 f98d 	bl	1401a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3d00:	f000 fa78 	bl	41f4 <arch_cpu_idle>
    3d04:	e7fc      	b.n	3d00 <sys_reboot+0x24>
    3d06:	bf00      	nop
    3d08:	0001a23c 	.word	0x0001a23c

00003d0c <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    3d0c:	b410      	push	{r4}
    3d0e:	f04f 0320 	mov.w	r3, #32
    3d12:	f3ef 8411 	mrs	r4, BASEPRI
    3d16:	f383 8812 	msr	BASEPRI_MAX, r3
    3d1a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    3d1e:	2101      	movs	r1, #1
    3d20:	4b12      	ldr	r3, [pc, #72]	; (3d6c <nordicsemi_nrf53_init+0x60>)
    3d22:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    3d26:	4a12      	ldr	r2, [pc, #72]	; (3d70 <nordicsemi_nrf53_init+0x64>)
    3d28:	2302      	movs	r3, #2
    3d2a:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    3d2e:	4811      	ldr	r0, [pc, #68]	; (3d74 <nordicsemi_nrf53_init+0x68>)
    3d30:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3d34:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    3d38:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3d3c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    3d40:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    3d44:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    3d48:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3d4c:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    3d50:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    3d54:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    3d58:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    3d5c:	f384 8811 	msr	BASEPRI, r4
    3d60:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3d64:	2000      	movs	r0, #0
    3d66:	bc10      	pop	{r4}
    3d68:	4770      	bx	lr
    3d6a:	bf00      	nop
    3d6c:	50001000 	.word	0x50001000
    3d70:	50004000 	.word	0x50004000
    3d74:	50842500 	.word	0x50842500

00003d78 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3d78:	b170      	cbz	r0, 3d98 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    3d7a:	b508      	push	{r3, lr}
    3d7c:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    3d7e:	4b07      	ldr	r3, [pc, #28]	; (3d9c <arch_busy_wait+0x24>)
    3d80:	681b      	ldr	r3, [r3, #0]
    3d82:	4807      	ldr	r0, [pc, #28]	; (3da0 <arch_busy_wait+0x28>)
    3d84:	fba0 1303 	umull	r1, r3, r0, r3
    3d88:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    3d8a:	fb03 f002 	mul.w	r0, r3, r2
    3d8e:	4b05      	ldr	r3, [pc, #20]	; (3da4 <arch_busy_wait+0x2c>)
    3d90:	f043 0301 	orr.w	r3, r3, #1
    3d94:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3d96:	bd08      	pop	{r3, pc}
    3d98:	4770      	bx	lr
    3d9a:	bf00      	nop
    3d9c:	20018120 	.word	0x20018120
    3da0:	431bde83 	.word	0x431bde83
    3da4:	00019b40 	.word	0x00019b40

00003da8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    3da8:	b084      	sub	sp, #16
    3daa:	ab04      	add	r3, sp, #16
    3dac:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    3db0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3db4:	2b06      	cmp	r3, #6
    3db6:	d001      	beq.n	3dbc <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    3db8:	b004      	add	sp, #16
    3dba:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    3dbc:	4b03      	ldr	r3, [pc, #12]	; (3dcc <pm_power_state_set+0x24>)
    3dbe:	2201      	movs	r2, #1
    3dc0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3dc4:	f3bf 8f4f 	dsb	sy
        __WFE();
    3dc8:	bf20      	wfe
    while (true)
    3dca:	e7fd      	b.n	3dc8 <pm_power_state_set+0x20>
    3dcc:	50004000 	.word	0x50004000

00003dd0 <tty_init>:
	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
	if (!uart_dev) {
    3dd0:	b1c1      	cbz	r1, 3e04 <tty_init+0x34>
{
    3dd2:	b508      	push	{r3, lr}
    3dd4:	4602      	mov	r2, r0
    3dd6:	4608      	mov	r0, r1
		return -ENODEV;
	}

	tty->uart_dev = uart_dev;
    3dd8:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    3dda:	2300      	movs	r3, #0
    3ddc:	6153      	str	r3, [r2, #20]
	tty->rx_ringbuf_sz = 0U;
    3dde:	6193      	str	r3, [r2, #24]
	tty->tx_ringbuf = NULL;
    3de0:	6353      	str	r3, [r2, #52]	; 0x34
	tty->tx_ringbuf_sz = 0U;
    3de2:	6393      	str	r3, [r2, #56]	; 0x38

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3de4:	87d3      	strh	r3, [r2, #62]	; 0x3e
    3de6:	8793      	strh	r3, [r2, #60]	; 0x3c
    3de8:	83d3      	strh	r3, [r2, #30]
    3dea:	8393      	strh	r3, [r2, #28]

	tty->rx_timeout = SYS_FOREVER_MS;
    3dec:	f04f 33ff 	mov.w	r3, #4294967295
    3df0:	6213      	str	r3, [r2, #32]
	tty->tx_timeout = SYS_FOREVER_MS;
    3df2:	6413      	str	r3, [r2, #64]	; 0x40
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3df4:	688b      	ldr	r3, [r1, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3df6:	b143      	cbz	r3, 3e0a <tty_init+0x3a>
    3df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3dfa:	b143      	cbz	r3, 3e0e <tty_init+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    3dfc:	4905      	ldr	r1, [pc, #20]	; (3e14 <tty_init+0x44>)
    3dfe:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    3e00:	2000      	movs	r0, #0
}
    3e02:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3e04:	f06f 0012 	mvn.w	r0, #18
}
    3e08:	4770      	bx	lr
	return 0;
    3e0a:	2000      	movs	r0, #0
    3e0c:	e7f9      	b.n	3e02 <tty_init+0x32>
    3e0e:	2000      	movs	r0, #0
    3e10:	e7f7      	b.n	3e02 <tty_init+0x32>
    3e12:	bf00      	nop
    3e14:	00014723 	.word	0x00014723

00003e18 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    3e18:	b500      	push	{lr}
    3e1a:	b083      	sub	sp, #12
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    3e1c:	2201      	movs	r2, #1
    3e1e:	f10d 0107 	add.w	r1, sp, #7
    3e22:	4805      	ldr	r0, [pc, #20]	; (3e38 <console_getchar+0x20>)
    3e24:	f010 fcc3 	bl	147ae <tty_read>
	if (res < 0) {
    3e28:	2800      	cmp	r0, #0
    3e2a:	db01      	blt.n	3e30 <console_getchar+0x18>
		return res;
	}

	return c;
    3e2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3e30:	b003      	add	sp, #12
    3e32:	f85d fb04 	ldr.w	pc, [sp], #4
    3e36:	bf00      	nop
    3e38:	20026bbc 	.word	0x20026bbc

00003e3c <console_init>:

int console_init(void)
{
    3e3c:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3e3e:	4810      	ldr	r0, [pc, #64]	; (3e80 <console_init+0x44>)
    3e40:	f014 fbbc 	bl	185bc <z_device_ready>
    3e44:	b1b0      	cbz	r0, 3e74 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    3e46:	490e      	ldr	r1, [pc, #56]	; (3e80 <console_init+0x44>)
    3e48:	480e      	ldr	r0, [pc, #56]	; (3e84 <console_init+0x48>)
    3e4a:	f7ff ffc1 	bl	3dd0 <tty_init>

	if (ret) {
    3e4e:	4604      	mov	r4, r0
    3e50:	b970      	cbnz	r0, 3e70 <console_init+0x34>
		return ret;
	}

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
    3e52:	4b0b      	ldr	r3, [pc, #44]	; (3e80 <console_init+0x44>)
    3e54:	689b      	ldr	r3, [r3, #8]
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    3e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e58:	b17b      	cbz	r3, 3e7a <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    3e5a:	4d0a      	ldr	r5, [pc, #40]	; (3e84 <console_init+0x48>)
    3e5c:	2210      	movs	r2, #16
    3e5e:	490a      	ldr	r1, [pc, #40]	; (3e88 <console_init+0x4c>)
    3e60:	4628      	mov	r0, r5
    3e62:	f010 fce5 	bl	14830 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    3e66:	2210      	movs	r2, #16
    3e68:	4908      	ldr	r1, [pc, #32]	; (3e8c <console_init+0x50>)
    3e6a:	4628      	mov	r0, r5
    3e6c:	f010 fcc5 	bl	147fa <tty_set_rx_buf>

	return 0;
}
    3e70:	4620      	mov	r0, r4
    3e72:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3e74:	f06f 0412 	mvn.w	r4, #18
    3e78:	e7fa      	b.n	3e70 <console_init+0x34>
			return -ENOTSUP;
    3e7a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3e7e:	e7f7      	b.n	3e70 <console_init+0x34>
    3e80:	00019748 	.word	0x00019748
    3e84:	20026bbc 	.word	0x20026bbc
    3e88:	20026c00 	.word	0x20026c00
    3e8c:	20026bac 	.word	0x20026bac

00003e90 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    3e90:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    3e92:	4c04      	ldr	r4, [pc, #16]	; (3ea4 <__do_init_array_aux+0x14>)
    3e94:	4b04      	ldr	r3, [pc, #16]	; (3ea8 <__do_init_array_aux+0x18>)
    3e96:	429c      	cmp	r4, r3
    3e98:	d203      	bcs.n	3ea2 <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
    3e9a:	f854 3b04 	ldr.w	r3, [r4], #4
    3e9e:	4798      	blx	r3
		func++) {
    3ea0:	e7f8      	b.n	3e94 <__do_init_array_aux+0x4>
	}
}
    3ea2:	bd10      	pop	{r4, pc}
    3ea4:	000199d8 	.word	0x000199d8
    3ea8:	000199d8 	.word	0x000199d8

00003eac <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    3eac:	4b06      	ldr	r3, [pc, #24]	; (3ec8 <__do_global_ctors_aux+0x1c>)
    3eae:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    3eb0:	b14b      	cbz	r3, 3ec6 <__do_global_ctors_aux+0x1a>
{
    3eb2:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    3eb4:	1e5c      	subs	r4, r3, #1
    3eb6:	4a04      	ldr	r2, [pc, #16]	; (3ec8 <__do_global_ctors_aux+0x1c>)
    3eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ebc:	4798      	blx	r3
    3ebe:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    3ec0:	2c00      	cmp	r4, #0
    3ec2:	d1f7      	bne.n	3eb4 <__do_global_ctors_aux+0x8>
	}
}
    3ec4:	bd10      	pop	{r4, pc}
    3ec6:	4770      	bx	lr
    3ec8:	000199d0 	.word	0x000199d0

00003ecc <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3ecc:	4b1b      	ldr	r3, [pc, #108]	; (3f3c <pm_system_resume+0x70>)
    3ece:	681b      	ldr	r3, [r3, #0]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d132      	bne.n	3f3a <pm_system_resume+0x6e>
{
    3ed4:	b530      	push	{r4, r5, lr}
    3ed6:	b085      	sub	sp, #20
		post_ops_done = 1;
    3ed8:	4b18      	ldr	r3, [pc, #96]	; (3f3c <pm_system_resume+0x70>)
    3eda:	2201      	movs	r2, #1
    3edc:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3ede:	4b18      	ldr	r3, [pc, #96]	; (3f40 <pm_system_resume+0x74>)
    3ee0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3ee4:	ab04      	add	r3, sp, #16
    3ee6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3eea:	4b16      	ldr	r3, [pc, #88]	; (3f44 <pm_system_resume+0x78>)
    3eec:	b163      	cbz	r3, 3f08 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    3eee:	f010 fb1e 	bl	1452e <pm_power_state_exit_post_ops>
	__asm__ volatile(
    3ef2:	f04f 0320 	mov.w	r3, #32
    3ef6:	f3ef 8511 	mrs	r5, BASEPRI
    3efa:	f383 8812 	msr	BASEPRI_MAX, r3
    3efe:	f3bf 8f6f 	isb	sy
    3f02:	4b11      	ldr	r3, [pc, #68]	; (3f48 <pm_system_resume+0x7c>)
    3f04:	681c      	ldr	r4, [r3, #0]
    3f06:	e00a      	b.n	3f1e <pm_system_resume+0x52>
	__asm__ volatile(
    3f08:	2300      	movs	r3, #0
    3f0a:	f383 8811 	msr	BASEPRI, r3
    3f0e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3f12:	e7ee      	b.n	3ef2 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f14:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3f16:	b10c      	cbz	r4, 3f1c <pm_system_resume+0x50>
	return node->next;
    3f18:	6823      	ldr	r3, [r4, #0]
    3f1a:	b143      	cbz	r3, 3f2e <pm_system_resume+0x62>
{
    3f1c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f1e:	b134      	cbz	r4, 3f2e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3f20:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3f22:	2b00      	cmp	r3, #0
    3f24:	d0f6      	beq.n	3f14 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3f26:	4a06      	ldr	r2, [pc, #24]	; (3f40 <pm_system_resume+0x74>)
    3f28:	7810      	ldrb	r0, [r2, #0]
    3f2a:	4798      	blx	r3
    3f2c:	e7f2      	b.n	3f14 <pm_system_resume+0x48>
	__asm__ volatile(
    3f2e:	f385 8811 	msr	BASEPRI, r5
    3f32:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3f36:	b005      	add	sp, #20
    3f38:	bd30      	pop	{r4, r5, pc}
    3f3a:	4770      	bx	lr
    3f3c:	200180c4 	.word	0x200180c4
    3f40:	20026c1c 	.word	0x20026c1c
    3f44:	0001452f 	.word	0x0001452f
    3f48:	20026c14 	.word	0x20026c14

00003f4c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3f4c:	b570      	push	{r4, r5, r6, lr}
    3f4e:	b088      	sub	sp, #32
    3f50:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3f52:	4c2a      	ldr	r4, [pc, #168]	; (3ffc <pm_system_suspend+0xb0>)
    3f54:	466d      	mov	r5, sp
    3f56:	4601      	mov	r1, r0
    3f58:	4628      	mov	r0, r5
    3f5a:	f010 fc85 	bl	14868 <pm_policy_next_state>
    3f5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3f66:	7820      	ldrb	r0, [r4, #0]
    3f68:	2800      	cmp	r0, #0
    3f6a:	d045      	beq.n	3ff8 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3f6c:	4b24      	ldr	r3, [pc, #144]	; (4000 <CONFIG_FPROTECT_BLOCK_SIZE>)
    3f6e:	2200      	movs	r2, #0
    3f70:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3f72:	f1b6 3fff 	cmp.w	r6, #4294967295
    3f76:	d10c      	bne.n	3f92 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3f78:	f00d fcee 	bl	11958 <k_sched_lock>
	__asm__ volatile(
    3f7c:	f04f 0320 	mov.w	r3, #32
    3f80:	f3ef 8511 	mrs	r5, BASEPRI
    3f84:	f383 8812 	msr	BASEPRI_MAX, r3
    3f88:	f3bf 8f6f 	isb	sy
	return list->head;
    3f8c:	4b1d      	ldr	r3, [pc, #116]	; (4004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    3f8e:	681c      	ldr	r4, [r3, #0]
    3f90:	e016      	b.n	3fc0 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3f92:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3f94:	0c59      	lsrs	r1, r3, #17
    3f96:	03d8      	lsls	r0, r3, #15
    3f98:	4c1b      	ldr	r4, [pc, #108]	; (4008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
    3f9a:	4a1c      	ldr	r2, [pc, #112]	; (400c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
    3f9c:	2300      	movs	r3, #0
    3f9e:	1900      	adds	r0, r0, r4
    3fa0:	f04f 0400 	mov.w	r4, #0
    3fa4:	eb44 0101 	adc.w	r1, r4, r1
    3fa8:	f7fd f89e 	bl	10e8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3fac:	2101      	movs	r1, #1
    3fae:	1a30      	subs	r0, r6, r0
    3fb0:	f014 fd1f 	bl	189f2 <z_set_timeout_expiry>
    3fb4:	e7e0      	b.n	3f78 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fb6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3fb8:	b10c      	cbz	r4, 3fbe <pm_system_suspend+0x72>
	return node->next;
    3fba:	6823      	ldr	r3, [r4, #0]
    3fbc:	b143      	cbz	r3, 3fd0 <pm_system_suspend+0x84>
{
    3fbe:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fc0:	b134      	cbz	r4, 3fd0 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    3fc2:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d0f6      	beq.n	3fb6 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    3fc8:	4a0c      	ldr	r2, [pc, #48]	; (3ffc <pm_system_suspend+0xb0>)
    3fca:	7810      	ldrb	r0, [r2, #0]
    3fcc:	4798      	blx	r3
    3fce:	e7f2      	b.n	3fb6 <pm_system_suspend+0x6a>
	__asm__ volatile(
    3fd0:	f385 8811 	msr	BASEPRI, r5
    3fd4:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    3fd8:	4b08      	ldr	r3, [pc, #32]	; (3ffc <pm_system_suspend+0xb0>)
    3fda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3fde:	ab08      	add	r3, sp, #32
    3fe0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3fe4:	4b0a      	ldr	r3, [pc, #40]	; (4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
    3fe6:	b10b      	cbz	r3, 3fec <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3fe8:	f7ff fede 	bl	3da8 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3fec:	f7ff ff6e 	bl	3ecc <pm_system_resume>
	k_sched_unlock();
    3ff0:	f00d feb0 	bl	11d54 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3ff4:	4b01      	ldr	r3, [pc, #4]	; (3ffc <pm_system_suspend+0xb0>)
    3ff6:	7818      	ldrb	r0, [r3, #0]
}
    3ff8:	b008      	add	sp, #32
    3ffa:	bd70      	pop	{r4, r5, r6, pc}
    3ffc:	20026c1c 	.word	0x20026c1c
    4000:	200180c4 	.word	0x200180c4
    4004:	20026c14 	.word	0x20026c14
    4008:	000f423f 	.word	0x000f423f
    400c:	000f4240 	.word	0x000f4240
    4010:	00003da9 	.word	0x00003da9

00004014 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    4014:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    4016:	4802      	ldr	r0, [pc, #8]	; (4020 <nrf_cc3xx_platform_abort_init+0xc>)
    4018:	f00e fa08 	bl	1242c <nrf_cc3xx_platform_set_abort>
}
    401c:	bd08      	pop	{r3, pc}
    401e:	bf00      	nop
    4020:	0001a268 	.word	0x0001a268

00004024 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    4024:	b308      	cbz	r0, 406a <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4026:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    4028:	6843      	ldr	r3, [r0, #4]
    402a:	2b04      	cmp	r3, #4
    402c:	d007      	beq.n	403e <mutex_unlock_platform+0x1a>
    402e:	2b08      	cmp	r3, #8
    4030:	d012      	beq.n	4058 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4032:	b1fb      	cbz	r3, 4074 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    4034:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    4036:	f00d fb7f 	bl	11738 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    403a:	2000      	movs	r0, #0
    403c:	e014      	b.n	4068 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    403e:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4040:	2200      	movs	r2, #0
    4042:	e8d3 1fef 	ldaex	r1, [r3]
    4046:	2901      	cmp	r1, #1
    4048:	d103      	bne.n	4052 <mutex_unlock_platform+0x2e>
    404a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    404e:	2800      	cmp	r0, #0
    4050:	d1f7      	bne.n	4042 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4052:	d10d      	bne.n	4070 <mutex_unlock_platform+0x4c>
    4054:	4610      	mov	r0, r2
    4056:	e007      	b.n	4068 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    4058:	6803      	ldr	r3, [r0, #0]
    405a:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    405c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    4060:	2000      	movs	r0, #0
    4062:	4a05      	ldr	r2, [pc, #20]	; (4078 <mutex_unlock_platform+0x54>)
    4064:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    4068:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    406a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    406e:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4070:	4802      	ldr	r0, [pc, #8]	; (407c <mutex_unlock_platform+0x58>)
    4072:	e7f9      	b.n	4068 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4074:	4802      	ldr	r0, [pc, #8]	; (4080 <mutex_unlock_platform+0x5c>)
    4076:	e7f7      	b.n	4068 <mutex_unlock_platform+0x44>
    4078:	50030000 	.word	0x50030000
    407c:	ffff8fe9 	.word	0xffff8fe9
    4080:	ffff8fea 	.word	0xffff8fea

00004084 <mutex_lock_platform>:
    if(mutex == NULL) {
    4084:	b370      	cbz	r0, 40e4 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4086:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    4088:	6843      	ldr	r3, [r0, #4]
    408a:	2b04      	cmp	r3, #4
    408c:	d004      	beq.n	4098 <mutex_lock_platform+0x14>
    408e:	2b08      	cmp	r3, #8
    4090:	d00f      	beq.n	40b2 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4092:	b9c3      	cbnz	r3, 40c6 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4094:	4815      	ldr	r0, [pc, #84]	; (40ec <mutex_lock_platform+0x68>)
    4096:	e00b      	b.n	40b0 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    4098:	6803      	ldr	r3, [r0, #0]
    409a:	2201      	movs	r2, #1
    409c:	e8d3 1fef 	ldaex	r1, [r3]
    40a0:	2900      	cmp	r1, #0
    40a2:	d103      	bne.n	40ac <mutex_lock_platform+0x28>
    40a4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    40a8:	2800      	cmp	r0, #0
    40aa:	d1f7      	bne.n	409c <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40ac:	d116      	bne.n	40dc <mutex_lock_platform+0x58>
    40ae:	2000      	movs	r0, #0
}
    40b0:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    40b2:	6803      	ldr	r3, [r0, #0]
    40b4:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    40b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    40ba:	4a0d      	ldr	r2, [pc, #52]	; (40f0 <mutex_lock_platform+0x6c>)
    40bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40c0:	b973      	cbnz	r3, 40e0 <mutex_lock_platform+0x5c>
    40c2:	2000      	movs	r0, #0
    40c4:	e7f4      	b.n	40b0 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    40c6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    40c8:	f04f 32ff 	mov.w	r2, #4294967295
    40cc:	f04f 33ff 	mov.w	r3, #4294967295
    40d0:	f00d faa8 	bl	11624 <z_impl_k_mutex_lock>
        if (ret == 0) {
    40d4:	2800      	cmp	r0, #0
    40d6:	d0eb      	beq.n	40b0 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    40d8:	4806      	ldr	r0, [pc, #24]	; (40f4 <mutex_lock_platform+0x70>)
    40da:	e7e9      	b.n	40b0 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40dc:	4805      	ldr	r0, [pc, #20]	; (40f4 <mutex_lock_platform+0x70>)
    40de:	e7e7      	b.n	40b0 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40e0:	4804      	ldr	r0, [pc, #16]	; (40f4 <mutex_lock_platform+0x70>)
    40e2:	e7e5      	b.n	40b0 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    40e4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    40e8:	4770      	bx	lr
    40ea:	bf00      	nop
    40ec:	ffff8fea 	.word	0xffff8fea
    40f0:	50030000 	.word	0x50030000
    40f4:	ffff8fe9 	.word	0xffff8fe9

000040f8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    40f8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    40fa:	4604      	mov	r4, r0
    40fc:	b190      	cbz	r0, 4124 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    40fe:	6863      	ldr	r3, [r4, #4]
    4100:	2b04      	cmp	r3, #4
    4102:	d00e      	beq.n	4122 <mutex_free_platform+0x2a>
    4104:	2b08      	cmp	r3, #8
    4106:	d00c      	beq.n	4122 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4108:	b15b      	cbz	r3, 4122 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    410a:	f013 0f02 	tst.w	r3, #2
    410e:	d10e      	bne.n	412e <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4110:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    4112:	2200      	movs	r2, #0
    4114:	601a      	str	r2, [r3, #0]
    4116:	605a      	str	r2, [r3, #4]
    4118:	609a      	str	r2, [r3, #8]
    411a:	60da      	str	r2, [r3, #12]
    411c:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    411e:	2300      	movs	r3, #0
    4120:	6063      	str	r3, [r4, #4]
}
    4122:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4124:	4b05      	ldr	r3, [pc, #20]	; (413c <mutex_free_platform+0x44>)
    4126:	685b      	ldr	r3, [r3, #4]
    4128:	4805      	ldr	r0, [pc, #20]	; (4140 <mutex_free_platform+0x48>)
    412a:	4798      	blx	r3
    412c:	e7e7      	b.n	40fe <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    412e:	4621      	mov	r1, r4
    4130:	4804      	ldr	r0, [pc, #16]	; (4144 <mutex_free_platform+0x4c>)
    4132:	f014 fa90 	bl	18656 <k_mem_slab_free>
        mutex->mutex = NULL;
    4136:	2300      	movs	r3, #0
    4138:	6023      	str	r3, [r4, #0]
    413a:	e7f0      	b.n	411e <mutex_free_platform+0x26>
    413c:	2001812c 	.word	0x2001812c
    4140:	0001a270 	.word	0x0001a270
    4144:	20026c28 	.word	0x20026c28

00004148 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4148:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    414a:	4604      	mov	r4, r0
    414c:	b178      	cbz	r0, 416e <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    414e:	6863      	ldr	r3, [r4, #4]
    4150:	2b04      	cmp	r3, #4
    4152:	d00b      	beq.n	416c <mutex_init_platform+0x24>
    4154:	2b08      	cmp	r3, #8
    4156:	d009      	beq.n	416c <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4158:	b90b      	cbnz	r3, 415e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    415a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    415c:	b163      	cbz	r3, 4178 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    415e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4160:	f014 faee 	bl	18740 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4164:	6863      	ldr	r3, [r4, #4]
    4166:	f043 0301 	orr.w	r3, r3, #1
    416a:	6063      	str	r3, [r4, #4]
}
    416c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    416e:	4b10      	ldr	r3, [pc, #64]	; (41b0 <mutex_init_platform+0x68>)
    4170:	685b      	ldr	r3, [r3, #4]
    4172:	4810      	ldr	r0, [pc, #64]	; (41b4 <mutex_init_platform+0x6c>)
    4174:	4798      	blx	r3
    4176:	e7ea      	b.n	414e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    4178:	f04f 32ff 	mov.w	r2, #4294967295
    417c:	f04f 33ff 	mov.w	r3, #4294967295
    4180:	4621      	mov	r1, r4
    4182:	480d      	ldr	r0, [pc, #52]	; (41b8 <mutex_init_platform+0x70>)
    4184:	f00d f926 	bl	113d4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    4188:	b908      	cbnz	r0, 418e <mutex_init_platform+0x46>
    418a:	6823      	ldr	r3, [r4, #0]
    418c:	b91b      	cbnz	r3, 4196 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    418e:	4b08      	ldr	r3, [pc, #32]	; (41b0 <mutex_init_platform+0x68>)
    4190:	685b      	ldr	r3, [r3, #4]
    4192:	480a      	ldr	r0, [pc, #40]	; (41bc <mutex_init_platform+0x74>)
    4194:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4196:	6823      	ldr	r3, [r4, #0]
    4198:	2200      	movs	r2, #0
    419a:	601a      	str	r2, [r3, #0]
    419c:	605a      	str	r2, [r3, #4]
    419e:	609a      	str	r2, [r3, #8]
    41a0:	60da      	str	r2, [r3, #12]
    41a2:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    41a4:	6863      	ldr	r3, [r4, #4]
    41a6:	f043 0302 	orr.w	r3, r3, #2
    41aa:	6063      	str	r3, [r4, #4]
    41ac:	e7d7      	b.n	415e <mutex_init_platform+0x16>
    41ae:	bf00      	nop
    41b0:	2001812c 	.word	0x2001812c
    41b4:	0001a270 	.word	0x0001a270
    41b8:	20026c28 	.word	0x20026c28
    41bc:	0001a298 	.word	0x0001a298

000041c0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    41c0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    41c2:	2340      	movs	r3, #64	; 0x40
    41c4:	2214      	movs	r2, #20
    41c6:	4904      	ldr	r1, [pc, #16]	; (41d8 <nrf_cc3xx_platform_mutex_init+0x18>)
    41c8:	4804      	ldr	r0, [pc, #16]	; (41dc <nrf_cc3xx_platform_mutex_init+0x1c>)
    41ca:	f014 fa35 	bl	18638 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    41ce:	4904      	ldr	r1, [pc, #16]	; (41e0 <nrf_cc3xx_platform_mutex_init+0x20>)
    41d0:	4804      	ldr	r0, [pc, #16]	; (41e4 <nrf_cc3xx_platform_mutex_init+0x24>)
    41d2:	f00e f989 	bl	124e8 <nrf_cc3xx_platform_set_mutexes>
}
    41d6:	bd08      	pop	{r3, pc}
    41d8:	20026c48 	.word	0x20026c48
    41dc:	20026c28 	.word	0x20026c28
    41e0:	0001a2d8 	.word	0x0001a2d8
    41e4:	0001a2c8 	.word	0x0001a2c8

000041e8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    41e8:	4901      	ldr	r1, [pc, #4]	; (41f0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    41ea:	2210      	movs	r2, #16
	str	r2, [r1]
    41ec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    41ee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    41f0:	e000ed10 	.word	0xe000ed10

000041f4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    41f4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    41f6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    41f8:	f380 8811 	msr	BASEPRI, r0
	isb
    41fc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4200:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4204:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4206:	b662      	cpsie	i
	isb
    4208:	f3bf 8f6f 	isb	sy

	bx	lr
    420c:	4770      	bx	lr
    420e:	bf00      	nop

00004210 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4210:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4212:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4214:	f381 8811 	msr	BASEPRI, r1

	wfe
    4218:	bf20      	wfe

	msr	BASEPRI, r0
    421a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    421e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4220:	4770      	bx	lr
    4222:	bf00      	nop

00004224 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4224:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4226:	2b00      	cmp	r3, #0
    4228:	db08      	blt.n	423c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    422a:	f000 001f 	and.w	r0, r0, #31
    422e:	095b      	lsrs	r3, r3, #5
    4230:	2201      	movs	r2, #1
    4232:	fa02 f000 	lsl.w	r0, r2, r0
    4236:	4a02      	ldr	r2, [pc, #8]	; (4240 <arch_irq_enable+0x1c>)
    4238:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    423c:	4770      	bx	lr
    423e:	bf00      	nop
    4240:	e000e100 	.word	0xe000e100

00004244 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4244:	0942      	lsrs	r2, r0, #5
    4246:	4b05      	ldr	r3, [pc, #20]	; (425c <arch_irq_is_enabled+0x18>)
    4248:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    424c:	f000 001f 	and.w	r0, r0, #31
    4250:	2301      	movs	r3, #1
    4252:	fa03 f000 	lsl.w	r0, r3, r0
}
    4256:	4010      	ands	r0, r2
    4258:	4770      	bx	lr
    425a:	bf00      	nop
    425c:	e000e100 	.word	0xe000e100

00004260 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4260:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4262:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4264:	2b00      	cmp	r3, #0
    4266:	db08      	blt.n	427a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4268:	0149      	lsls	r1, r1, #5
    426a:	b2c9      	uxtb	r1, r1
    426c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4270:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4274:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4278:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    427a:	f000 000f 	and.w	r0, r0, #15
    427e:	0149      	lsls	r1, r1, #5
    4280:	b2c9      	uxtb	r1, r1
    4282:	4b01      	ldr	r3, [pc, #4]	; (4288 <z_arm_irq_priority_set+0x28>)
    4284:	5419      	strb	r1, [r3, r0]
}
    4286:	4770      	bx	lr
    4288:	e000ed14 	.word	0xe000ed14

0000428c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    428c:	bf30      	wfi
    b z_SysNmiOnReset
    428e:	f7ff bffd 	b.w	428c <z_SysNmiOnReset>
    4292:	bf00      	nop

00004294 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4294:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4296:	4b0b      	ldr	r3, [pc, #44]	; (42c4 <z_arm_prep_c+0x30>)
    4298:	4a0b      	ldr	r2, [pc, #44]	; (42c8 <z_arm_prep_c+0x34>)
    429a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    429e:	609a      	str	r2, [r3, #8]
    42a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    42a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    42ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    42b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    42b4:	f00d f82e 	bl	11314 <z_bss_zero>
	z_data_copy();
    42b8:	f00d febc 	bl	12034 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    42bc:	f000 f9da 	bl	4674 <z_arm_interrupt_init>
	z_cstart();
    42c0:	f00d f834 	bl	1132c <z_cstart>
    42c4:	e000ed00 	.word	0xe000ed00
    42c8:	00000000 	.word	0x00000000

000042cc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    42cc:	4a0a      	ldr	r2, [pc, #40]	; (42f8 <arch_swap+0x2c>)
    42ce:	6893      	ldr	r3, [r2, #8]
    42d0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    42d4:	4909      	ldr	r1, [pc, #36]	; (42fc <arch_swap+0x30>)
    42d6:	6809      	ldr	r1, [r1, #0]
    42d8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    42dc:	4908      	ldr	r1, [pc, #32]	; (4300 <arch_swap+0x34>)
    42de:	684b      	ldr	r3, [r1, #4]
    42e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    42e4:	604b      	str	r3, [r1, #4]
    42e6:	2300      	movs	r3, #0
    42e8:	f383 8811 	msr	BASEPRI, r3
    42ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    42f0:	6893      	ldr	r3, [r2, #8]
}
    42f2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    42f6:	4770      	bx	lr
    42f8:	200272fc 	.word	0x200272fc
    42fc:	0001cf90 	.word	0x0001cf90
    4300:	e000ed00 	.word	0xe000ed00

00004304 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4304:	4914      	ldr	r1, [pc, #80]	; (4358 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4306:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4308:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    430c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    430e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4312:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4316:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4318:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    431c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4320:	4f0e      	ldr	r7, [pc, #56]	; (435c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4322:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4326:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4328:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    432a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    432c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4330:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4332:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4336:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    433a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    433e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4342:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    4346:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    434a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    434c:	f010 faab 	bl	148a6 <configure_builtin_stack_guard>
    pop {r2, lr}
    4350:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4354:	4770      	bx	lr
    4356:	0000      	.short	0x0000
    ldr r1, =_kernel
    4358:	200272fc 	.word	0x200272fc
    ldr v4, =_SCS_ICSR
    435c:	e000ed04 	.word	0xe000ed04

00004360 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4360:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4364:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4366:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    436a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    436e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4370:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4374:	2902      	cmp	r1, #2
    beq _oops
    4376:	d0ff      	beq.n	4378 <_oops>

00004378 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4378:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    437a:	f010 fa82 	bl	14882 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    437e:	bd01      	pop	{r0, pc}

00004380 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4380:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4382:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4386:	490d      	ldr	r1, [pc, #52]	; (43bc <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4388:	f021 0101 	bic.w	r1, r1, #1
    438c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4390:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4394:	9b01      	ldr	r3, [sp, #4]
    4396:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    439a:	9b02      	ldr	r3, [sp, #8]
    439c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    43a0:	9b03      	ldr	r3, [sp, #12]
    43a2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    43a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    43aa:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    43ae:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    43b0:	2300      	movs	r3, #0
    43b2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    43b6:	bc10      	pop	{r4}
    43b8:	4770      	bx	lr
    43ba:	bf00      	nop
    43bc:	000142f9 	.word	0x000142f9

000043c0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    43c0:	4b09      	ldr	r3, [pc, #36]	; (43e8 <arch_switch_to_main_thread+0x28>)
    43c2:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    43c4:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    43c8:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    43cc:	4610      	mov	r0, r2
    43ce:	f381 8809 	msr	PSP, r1
    43d2:	2100      	movs	r1, #0
    43d4:	b663      	cpsie	if
    43d6:	f381 8811 	msr	BASEPRI, r1
    43da:	f3bf 8f6f 	isb	sy
    43de:	2200      	movs	r2, #0
    43e0:	2300      	movs	r3, #0
    43e2:	f00f ff89 	bl	142f8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    43e6:	bf00      	nop
    43e8:	200272fc 	.word	0x200272fc

000043ec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    43ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    43ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    43f0:	4a0b      	ldr	r2, [pc, #44]	; (4420 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    43f2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    43f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    43f6:	bf1e      	ittt	ne
	movne	r1, #0
    43f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    43fa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    43fc:	f014 f978 	blne	186f0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4400:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4402:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4406:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    440a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    440e:	4905      	ldr	r1, [pc, #20]	; (4424 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4410:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4412:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4414:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4416:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    441a:	4903      	ldr	r1, [pc, #12]	; (4428 <_isr_wrapper+0x3c>)
	bx r1
    441c:	4708      	bx	r1
    441e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4420:	200272fc 	.word	0x200272fc
	ldr r1, =_sw_isr_table
    4424:	000197a8 	.word	0x000197a8
	ldr r1, =z_arm_int_exit
    4428:	0000442d 	.word	0x0000442d

0000442c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    442c:	4b04      	ldr	r3, [pc, #16]	; (4440 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    442e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4430:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4432:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4434:	d003      	beq.n	443e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4436:	4903      	ldr	r1, [pc, #12]	; (4444 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    443c:	600a      	str	r2, [r1, #0]

0000443e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    443e:	4770      	bx	lr
	ldr r3, =_kernel
    4440:	200272fc 	.word	0x200272fc
	ldr r1, =_SCS_ICSR
    4444:	e000ed04 	.word	0xe000ed04

00004448 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    4448:	b510      	push	{r4, lr}
    444a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    444c:	4b13      	ldr	r3, [pc, #76]	; (449c <mem_manage_fault+0x54>)
    444e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4454:	f013 0f02 	tst.w	r3, #2
    4458:	d00b      	beq.n	4472 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    445a:	4b10      	ldr	r3, [pc, #64]	; (449c <mem_manage_fault+0x54>)
    445c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4460:	f013 0f80 	tst.w	r3, #128	; 0x80
    4464:	d005      	beq.n	4472 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    4466:	b121      	cbz	r1, 4472 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4468:	4a0c      	ldr	r2, [pc, #48]	; (449c <mem_manage_fault+0x54>)
    446a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    446c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4470:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4472:	4b0a      	ldr	r3, [pc, #40]	; (449c <mem_manage_fault+0x54>)
    4474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    447a:	f013 0f10 	tst.w	r3, #16
    447e:	d101      	bne.n	4484 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4480:	4b06      	ldr	r3, [pc, #24]	; (449c <mem_manage_fault+0x54>)
    4482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4484:	4a05      	ldr	r2, [pc, #20]	; (449c <mem_manage_fault+0x54>)
    4486:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4488:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    448c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    448e:	2101      	movs	r1, #1
    4490:	f010 fa15 	bl	148be <memory_fault_recoverable>
    4494:	7020      	strb	r0, [r4, #0]

	return reason;
}
    4496:	2000      	movs	r0, #0
    4498:	bd10      	pop	{r4, pc}
    449a:	bf00      	nop
    449c:	e000ed00 	.word	0xe000ed00

000044a0 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    44a0:	b510      	push	{r4, lr}
    44a2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    44a4:	4b12      	ldr	r3, [pc, #72]	; (44f0 <bus_fault+0x50>)
    44a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    44a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    44aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44ac:	f413 7f00 	tst.w	r3, #512	; 0x200
    44b0:	d00b      	beq.n	44ca <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    44b2:	4b0f      	ldr	r3, [pc, #60]	; (44f0 <bus_fault+0x50>)
    44b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    44b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44b8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    44bc:	d005      	beq.n	44ca <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    44be:	b121      	cbz	r1, 44ca <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    44c0:	4a0b      	ldr	r2, [pc, #44]	; (44f0 <bus_fault+0x50>)
    44c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    44c8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    44ca:	4b09      	ldr	r3, [pc, #36]	; (44f0 <bus_fault+0x50>)
    44cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    44ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    44d4:	d101      	bne.n	44da <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    44d6:	4b06      	ldr	r3, [pc, #24]	; (44f0 <bus_fault+0x50>)
    44d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    44da:	4a05      	ldr	r2, [pc, #20]	; (44f0 <bus_fault+0x50>)
    44dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44de:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    44e2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    44e4:	2101      	movs	r1, #1
    44e6:	f010 f9ea 	bl	148be <memory_fault_recoverable>
    44ea:	7020      	strb	r0, [r4, #0]

	return reason;
}
    44ec:	2000      	movs	r0, #0
    44ee:	bd10      	pop	{r4, pc}
    44f0:	e000ed00 	.word	0xe000ed00

000044f4 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    44f4:	4b0a      	ldr	r3, [pc, #40]	; (4520 <usage_fault+0x2c>)
    44f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    44f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    44fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    44fc:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    4500:	d10b      	bne.n	451a <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4502:	4b07      	ldr	r3, [pc, #28]	; (4520 <usage_fault+0x2c>)
    4504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    450a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    450c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    450e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4512:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4516:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    4518:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    451a:	2002      	movs	r0, #2
    451c:	e7f1      	b.n	4502 <usage_fault+0xe>
    451e:	bf00      	nop
    4520:	e000ed00 	.word	0xe000ed00

00004524 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4524:	b510      	push	{r4, lr}
    4526:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4528:	2300      	movs	r3, #0
    452a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    452c:	4b1b      	ldr	r3, [pc, #108]	; (459c <hard_fault+0x78>)
    452e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4530:	f010 0002 	ands.w	r0, r0, #2
    4534:	d12d      	bne.n	4592 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4538:	2b00      	cmp	r3, #0
    453a:	db2b      	blt.n	4594 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    453c:	4b17      	ldr	r3, [pc, #92]	; (459c <hard_fault+0x78>)
    453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4540:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    4544:	d027      	beq.n	4596 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4546:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4548:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    454c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4550:	429a      	cmp	r2, r3
    4552:	d010      	beq.n	4576 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    4554:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4558:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    455c:	781b      	ldrb	r3, [r3, #0]
    455e:	b963      	cbnz	r3, 457a <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    4560:	4b0f      	ldr	r3, [pc, #60]	; (45a0 <hard_fault+0x7c>)
    4562:	781b      	ldrb	r3, [r3, #0]
    4564:	b97b      	cbnz	r3, 4586 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    4566:	4b0f      	ldr	r3, [pc, #60]	; (45a4 <hard_fault+0x80>)
    4568:	881b      	ldrh	r3, [r3, #0]
    456a:	b29b      	uxth	r3, r3
    456c:	b193      	cbz	r3, 4594 <hard_fault+0x70>
			reason = usage_fault(esf);
    456e:	4620      	mov	r0, r4
    4570:	f7ff ffc0 	bl	44f4 <usage_fault>
    4574:	e00e      	b.n	4594 <hard_fault+0x70>
			reason = esf->basic.r0;
    4576:	6820      	ldr	r0, [r4, #0]
    4578:	e00c      	b.n	4594 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    457a:	460a      	mov	r2, r1
    457c:	2101      	movs	r1, #1
    457e:	4620      	mov	r0, r4
    4580:	f7ff ff62 	bl	4448 <mem_manage_fault>
    4584:	e006      	b.n	4594 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    4586:	460a      	mov	r2, r1
    4588:	2101      	movs	r1, #1
    458a:	4620      	mov	r0, r4
    458c:	f7ff ff88 	bl	44a0 <bus_fault>
    4590:	e000      	b.n	4594 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4592:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4594:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4596:	4618      	mov	r0, r3
	return reason;
    4598:	e7fc      	b.n	4594 <hard_fault+0x70>
    459a:	bf00      	nop
    459c:	e000ed00 	.word	0xe000ed00
    45a0:	e000ed29 	.word	0xe000ed29
    45a4:	e000ed2a 	.word	0xe000ed2a

000045a8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    45a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45aa:	b08b      	sub	sp, #44	; 0x2c
    45ac:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    45ae:	4b25      	ldr	r3, [pc, #148]	; (4644 <z_arm_fault+0x9c>)
    45b0:	6859      	ldr	r1, [r3, #4]
    45b2:	f3c1 0108 	ubfx	r1, r1, #0, #9
    45b6:	2300      	movs	r3, #0
    45b8:	f383 8811 	msr	BASEPRI, r3
    45bc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    45c0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    45c4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    45c8:	d115      	bne.n	45f6 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    45ca:	f002 030c 	and.w	r3, r2, #12
    45ce:	2b08      	cmp	r3, #8
    45d0:	d014      	beq.n	45fc <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    45d2:	f012 0f08 	tst.w	r2, #8
    45d6:	d00b      	beq.n	45f0 <z_arm_fault+0x48>
	*nested_exc = false;
    45d8:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    45da:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    45de:	4620      	mov	r0, r4
    45e0:	f010 f972 	bl	148c8 <fault_handle>
    45e4:	4606      	mov	r6, r0
	if (recoverable) {
    45e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    45ea:	b153      	cbz	r3, 4602 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    45ec:	b00b      	add	sp, #44	; 0x2c
    45ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    45f0:	4604      	mov	r4, r0
			*nested_exc = true;
    45f2:	2701      	movs	r7, #1
    45f4:	e7f1      	b.n	45da <z_arm_fault+0x32>
	*nested_exc = false;
    45f6:	2700      	movs	r7, #0
		return NULL;
    45f8:	463c      	mov	r4, r7
    45fa:	e7ee      	b.n	45da <z_arm_fault+0x32>
	*nested_exc = false;
    45fc:	2700      	movs	r7, #0
		return NULL;
    45fe:	463c      	mov	r4, r7
    4600:	e7eb      	b.n	45da <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4602:	ad01      	add	r5, sp, #4
    4604:	6820      	ldr	r0, [r4, #0]
    4606:	6861      	ldr	r1, [r4, #4]
    4608:	68a2      	ldr	r2, [r4, #8]
    460a:	68e3      	ldr	r3, [r4, #12]
    460c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    460e:	6920      	ldr	r0, [r4, #16]
    4610:	6961      	ldr	r1, [r4, #20]
    4612:	69a2      	ldr	r2, [r4, #24]
    4614:	69e3      	ldr	r3, [r4, #28]
    4616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    4618:	b14f      	cbz	r7, 462e <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    461a:	9b08      	ldr	r3, [sp, #32]
    461c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4620:	b95a      	cbnz	r2, 463a <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4622:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4626:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    462a:	9308      	str	r3, [sp, #32]
    462c:	e005      	b.n	463a <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    462e:	9b08      	ldr	r3, [sp, #32]
    4630:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4634:	f023 0301 	bic.w	r3, r3, #1
    4638:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    463a:	a901      	add	r1, sp, #4
    463c:	4630      	mov	r0, r6
    463e:	f010 f91c 	bl	1487a <z_arm_fatal_error>
    4642:	e7d3      	b.n	45ec <z_arm_fault+0x44>
    4644:	e000ed00 	.word	0xe000ed00

00004648 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4648:	4b04      	ldr	r3, [pc, #16]	; (465c <z_arm_fault_init+0x14>)
    464a:	695a      	ldr	r2, [r3, #20]
    464c:	f042 0210 	orr.w	r2, r2, #16
    4650:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    4652:	695a      	ldr	r2, [r3, #20]
    4654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4658:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    465a:	4770      	bx	lr
    465c:	e000ed00 	.word	0xe000ed00

00004660 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4660:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4664:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4668:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    466a:	4672      	mov	r2, lr
	bl z_arm_fault
    466c:	f7ff ff9c 	bl	45a8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4670:	bd01      	pop	{r0, pc}
    4672:	bf00      	nop

00004674 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4674:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4676:	e006      	b.n	4686 <z_arm_interrupt_init+0x12>
    4678:	f002 010f 	and.w	r1, r2, #15
    467c:	4b09      	ldr	r3, [pc, #36]	; (46a4 <z_arm_interrupt_init+0x30>)
    467e:	440b      	add	r3, r1
    4680:	2120      	movs	r1, #32
    4682:	7619      	strb	r1, [r3, #24]
    4684:	3201      	adds	r2, #1
    4686:	2a44      	cmp	r2, #68	; 0x44
    4688:	dc0a      	bgt.n	46a0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    468a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    468c:	2b00      	cmp	r3, #0
    468e:	dbf3      	blt.n	4678 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4690:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4694:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4698:	2120      	movs	r1, #32
    469a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    469e:	e7f1      	b.n	4684 <z_arm_interrupt_init+0x10>
	}
}
    46a0:	4770      	bx	lr
    46a2:	bf00      	nop
    46a4:	e000ecfc 	.word	0xe000ecfc

000046a8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    46a8:	2000      	movs	r0, #0
    msr CONTROL, r0
    46aa:	f380 8814 	msr	CONTROL, r0
    isb
    46ae:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    46b2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    46b4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    46b8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    46bc:	f015 f802 	bl	196c4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    46c0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    46c2:	490e      	ldr	r1, [pc, #56]	; (46fc <__start+0x54>)
    str r0, [r1]
    46c4:	6008      	str	r0, [r1, #0]
    dsb
    46c6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    46ca:	480d      	ldr	r0, [pc, #52]	; (4700 <__start+0x58>)
    msr msp, r0
    46cc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    46d0:	f000 f83c 	bl	474c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    46d4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    46d6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    46da:	480a      	ldr	r0, [pc, #40]	; (4704 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    46dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    46e0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    46e2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    46e6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    46ea:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    46ec:	4308      	orrs	r0, r1
    msr CONTROL, r0
    46ee:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    46f2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    46f6:	f7ff fdcd 	bl	4294 <z_arm_prep_c>
    46fa:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    46fc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4700:	2002f530 	.word	0x2002f530
    ldr r0, =z_interrupt_stacks
    4704:	2002f670 	.word	0x2002f670

00004708 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    4708:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    470c:	4905      	ldr	r1, [pc, #20]	; (4724 <sys_arch_reboot+0x1c>)
    470e:	68ca      	ldr	r2, [r1, #12]
    4710:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4714:	4b04      	ldr	r3, [pc, #16]	; (4728 <sys_arch_reboot+0x20>)
    4716:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4718:	60cb      	str	r3, [r1, #12]
    471a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    471e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4720:	e7fd      	b.n	471e <sys_arch_reboot+0x16>
    4722:	bf00      	nop
    4724:	e000ed00 	.word	0xe000ed00
    4728:	05fa0004 	.word	0x05fa0004

0000472c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    472c:	4b06      	ldr	r3, [pc, #24]	; (4748 <z_arm_clear_arm_mpu_config+0x1c>)
    472e:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4730:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4734:	2300      	movs	r3, #0
    4736:	4283      	cmp	r3, r0
    4738:	da05      	bge.n	4746 <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    473a:	4a03      	ldr	r2, [pc, #12]	; (4748 <z_arm_clear_arm_mpu_config+0x1c>)
    473c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    473e:	2100      	movs	r1, #0
    4740:	6111      	str	r1, [r2, #16]
    4742:	3301      	adds	r3, #1
    4744:	e7f7      	b.n	4736 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    4746:	4770      	bx	lr
    4748:	e000ed90 	.word	0xe000ed90

0000474c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    474c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    474e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4750:	2400      	movs	r4, #0
    4752:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4756:	f7ff ffe9 	bl	472c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    475a:	4623      	mov	r3, r4
    475c:	2b0f      	cmp	r3, #15
    475e:	d809      	bhi.n	4774 <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4760:	f103 0120 	add.w	r1, r3, #32
    4764:	4a0d      	ldr	r2, [pc, #52]	; (479c <z_arm_init_arch_hw_at_boot+0x50>)
    4766:	f04f 30ff 	mov.w	r0, #4294967295
    476a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    476e:	3301      	adds	r3, #1
    4770:	b2db      	uxtb	r3, r3
    4772:	e7f3      	b.n	475c <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4774:	2300      	movs	r3, #0
    4776:	2b0f      	cmp	r3, #15
    4778:	d809      	bhi.n	478e <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    477a:	f103 0160 	add.w	r1, r3, #96	; 0x60
    477e:	4a07      	ldr	r2, [pc, #28]	; (479c <z_arm_init_arch_hw_at_boot+0x50>)
    4780:	f04f 30ff 	mov.w	r0, #4294967295
    4784:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4788:	3301      	adds	r3, #1
    478a:	b2db      	uxtb	r3, r3
    478c:	e7f3      	b.n	4776 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    478e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4794:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4798:	bd10      	pop	{r4, pc}
    479a:	bf00      	nop
    479c:	e000e100 	.word	0xe000e100

000047a0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    47a0:	b508      	push	{r3, lr}
	if (_current == thread) {
    47a2:	4b08      	ldr	r3, [pc, #32]	; (47c4 <z_impl_k_thread_abort+0x24>)
    47a4:	689b      	ldr	r3, [r3, #8]
    47a6:	4283      	cmp	r3, r0
    47a8:	d002      	beq.n	47b0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    47aa:	f00d fc1b 	bl	11fe4 <z_thread_abort>
}
    47ae:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    47b0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    47b4:	2b00      	cmp	r3, #0
    47b6:	d0f8      	beq.n	47aa <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    47b8:	4a03      	ldr	r2, [pc, #12]	; (47c8 <z_impl_k_thread_abort+0x28>)
    47ba:	6853      	ldr	r3, [r2, #4]
    47bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    47c0:	6053      	str	r3, [r2, #4]
    47c2:	e7f2      	b.n	47aa <z_impl_k_thread_abort+0xa>
    47c4:	200272fc 	.word	0x200272fc
    47c8:	e000ed00 	.word	0xe000ed00

000047cc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    47cc:	b510      	push	{r4, lr}
    47ce:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    47d0:	4c09      	ldr	r4, [pc, #36]	; (47f8 <z_arm_configure_static_mpu_regions+0x2c>)
    47d2:	4623      	mov	r3, r4
    47d4:	4a09      	ldr	r2, [pc, #36]	; (47fc <z_arm_configure_static_mpu_regions+0x30>)
    47d6:	2101      	movs	r1, #1
    47d8:	4809      	ldr	r0, [pc, #36]	; (4800 <z_arm_configure_static_mpu_regions+0x34>)
    47da:	f010 f8da 	bl	14992 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47de:	2300      	movs	r3, #0
    47e0:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    47e2:	4b08      	ldr	r3, [pc, #32]	; (4804 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47e4:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    47e6:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47e8:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    47ea:	2101      	movs	r1, #1
    47ec:	a801      	add	r0, sp, #4
    47ee:	f010 f8d4 	bl	1499a <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    47f2:	b004      	add	sp, #16
    47f4:	bd10      	pop	{r4, pc}
    47f6:	bf00      	nop
    47f8:	20070000 	.word	0x20070000
    47fc:	20000000 	.word	0x20000000
    4800:	0001a2ec 	.word	0x0001a2ec
    4804:	20018400 	.word	0x20018400

00004808 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    4808:	4b01      	ldr	r3, [pc, #4]	; (4810 <mpu_init+0x8>)
    480a:	4a02      	ldr	r2, [pc, #8]	; (4814 <mpu_init+0xc>)
    480c:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    480e:	4770      	bx	lr
    4810:	e000ed90 	.word	0xe000ed90
    4814:	0044ffaa 	.word	0x0044ffaa

00004818 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    4818:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    481a:	680b      	ldr	r3, [r1, #0]
    481c:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    4820:	7a0c      	ldrb	r4, [r1, #8]
    4822:	f004 031f 	and.w	r3, r4, #31
    4826:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    4828:	68cb      	ldr	r3, [r1, #12]
    482a:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    482e:	0964      	lsrs	r4, r4, #5
    4830:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    4834:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    4838:	4902      	ldr	r1, [pc, #8]	; (4844 <region_init+0x2c>)
    483a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    483c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    483e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    4840:	bc10      	pop	{r4}
    4842:	4770      	bx	lr
    4844:	e000ed90 	.word	0xe000ed90

00004848 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    484c:	b087      	sub	sp, #28
    484e:	4681      	mov	r9, r0
    4850:	9100      	str	r1, [sp, #0]
    4852:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    4854:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    4856:	2700      	movs	r7, #0
    4858:	e034      	b.n	48c4 <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
    485a:	f06f 0615 	mvn.w	r6, #21
    485e:	e053      	b.n	4908 <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    4860:	45d8      	cmp	r8, fp
    4862:	d169      	bne.n	4938 <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    4864:	4629      	mov	r1, r5
    4866:	b2f0      	uxtb	r0, r6
    4868:	f010 f878 	bl	1495c <mpu_configure_region>
    486c:	e029      	b.n	48c2 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
    486e:	4b58      	ldr	r3, [pc, #352]	; (49d0 <mpu_configure_regions_and_partition+0x188>)
    4870:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4872:	68d9      	ldr	r1, [r3, #12]
    4874:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    4878:	f022 021f 	bic.w	r2, r2, #31
    487c:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    487e:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    4880:	4629      	mov	r1, r5
    4882:	b2e0      	uxtb	r0, r4
    4884:	f010 f86a 	bl	1495c <mpu_configure_region>
    4888:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    488a:	f110 0f16 	cmn.w	r0, #22
    488e:	f000 8097 	beq.w	49c0 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    4892:	3401      	adds	r4, #1
    4894:	e015      	b.n	48c2 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    4896:	3b01      	subs	r3, #1
	MPU->RNR = index;
    4898:	494d      	ldr	r1, [pc, #308]	; (49d0 <mpu_configure_regions_and_partition+0x188>)
    489a:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    489c:	690a      	ldr	r2, [r1, #16]
    489e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    48a2:	f023 031f 	bic.w	r3, r3, #31
    48a6:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    48a8:	610b      	str	r3, [r1, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    48aa:	4629      	mov	r1, r5
    48ac:	b2e0      	uxtb	r0, r4
    48ae:	f010 f855 	bl	1495c <mpu_configure_region>
    48b2:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    48b4:	f110 0f16 	cmn.w	r0, #22
    48b8:	f000 8082 	beq.w	49c0 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    48bc:	3401      	adds	r4, #1
    48be:	e000      	b.n	48c2 <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    48c0:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    48c2:	3701      	adds	r7, #1
    48c4:	9b00      	ldr	r3, [sp, #0]
    48c6:	429f      	cmp	r7, r3
    48c8:	da7a      	bge.n	49c0 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
    48ca:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    48ce:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    48d2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    48d6:	f8d5 8004 	ldr.w	r8, [r5, #4]
    48da:	f1b8 0f00 	cmp.w	r8, #0
    48de:	d0f0      	beq.n	48c2 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    48e0:	9b01      	ldr	r3, [sp, #4]
    48e2:	b123      	cbz	r3, 48ee <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
    48e4:	4628      	mov	r0, r5
    48e6:	f010 f81c 	bl	14922 <mpu_partition_is_valid>
		if (do_sanity_check &&
    48ea:	2800      	cmp	r0, #0
    48ec:	d064      	beq.n	49b8 <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
    48ee:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    48f2:	4658      	mov	r0, fp
    48f4:	f010 f80b 	bl	1490e <arm_cmse_mpu_region_get>
    48f8:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    48fa:	eb08 000b 	add.w	r0, r8, fp
    48fe:	3801      	subs	r0, #1
    4900:	f010 f805 	bl	1490e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4904:	4286      	cmp	r6, r0
    4906:	d1a8      	bne.n	485a <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    4908:	f116 0f16 	cmn.w	r6, #22
    490c:	d057      	beq.n	49be <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
    490e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    4910:	42b3      	cmp	r3, r6
    4912:	db59      	blt.n	49c8 <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    4914:	4630      	mov	r0, r6
	MPU->RNR = index;
    4916:	4b2e      	ldr	r3, [pc, #184]	; (49d0 <mpu_configure_regions_and_partition+0x188>)
    4918:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    491a:	68d9      	ldr	r1, [r3, #12]
    491c:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    4920:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4922:	691b      	ldr	r3, [r3, #16]
    4924:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4928:	f859 300a 	ldr.w	r3, [r9, sl]
    492c:	686a      	ldr	r2, [r5, #4]
    492e:	441a      	add	r2, r3
    4930:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    4934:	4299      	cmp	r1, r3
    4936:	d093      	beq.n	4860 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    4938:	4299      	cmp	r1, r3
    493a:	d098      	beq.n	486e <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    493c:	45d8      	cmp	r8, fp
    493e:	d0aa      	beq.n	4896 <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
    4940:	3b01      	subs	r3, #1
	MPU->RNR = index;
    4942:	4923      	ldr	r1, [pc, #140]	; (49d0 <mpu_configure_regions_and_partition+0x188>)
    4944:	4606      	mov	r6, r0
    4946:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4948:	690a      	ldr	r2, [r1, #16]
    494a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    494e:	f023 031f 	bic.w	r3, r3, #31
    4952:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4954:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
    4956:	4629      	mov	r1, r5
    4958:	b2e0      	uxtb	r0, r4
    495a:	f00f ffff 	bl	1495c <mpu_configure_region>
    495e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4960:	f110 0f16 	cmn.w	r0, #22
    4964:	d02c      	beq.n	49c0 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
    4966:	3001      	adds	r0, #1
	MPU->RNR = index;
    4968:	4b19      	ldr	r3, [pc, #100]	; (49d0 <mpu_configure_regions_and_partition+0x188>)
    496a:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    496c:	68d9      	ldr	r1, [r3, #12]
    496e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    4972:	f361 0204 	bfi	r2, r1, #0, #5
    4976:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    497a:	691b      	ldr	r3, [r3, #16]
    497c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    4980:	b2d2      	uxtb	r2, r2
    4982:	f363 1247 	bfi	r2, r3, #5, #3
    4986:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    498a:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    498e:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    4990:	4413      	add	r3, r2
    4992:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    4994:	f023 031f 	bic.w	r3, r3, #31
    4998:	eba8 080b 	sub.w	r8, r8, fp
    499c:	4443      	add	r3, r8
    499e:	3b01      	subs	r3, #1
    49a0:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    49a4:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    49a6:	a902      	add	r1, sp, #8
    49a8:	b2c0      	uxtb	r0, r0
    49aa:	f00f ffcc 	bl	14946 <region_allocate_and_init>
    49ae:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    49b0:	f110 0f16 	cmn.w	r0, #22
    49b4:	d184      	bne.n	48c0 <mpu_configure_regions_and_partition+0x78>
    49b6:	e003      	b.n	49c0 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    49b8:	f06f 0415 	mvn.w	r4, #21
    49bc:	e000      	b.n	49c0 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    49be:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    49c0:	4620      	mov	r0, r4
    49c2:	b007      	add	sp, #28
    49c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    49c8:	f06f 0415 	mvn.w	r4, #21
    49cc:	e7f8      	b.n	49c0 <mpu_configure_regions_and_partition+0x178>
    49ce:	bf00      	nop
    49d0:	e000ed90 	.word	0xe000ed90

000049d4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    49d4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    49d6:	4c03      	ldr	r4, [pc, #12]	; (49e4 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    49d8:	2301      	movs	r3, #1
    49da:	7822      	ldrb	r2, [r4, #0]
    49dc:	f7ff ff34 	bl	4848 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    49e0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    49e2:	bd10      	pop	{r4, pc}
    49e4:	20027369 	.word	0x20027369

000049e8 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    49e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49ec:	4607      	mov	r7, r0
    49ee:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    49f0:	2400      	movs	r4, #0
    49f2:	e003      	b.n	49fc <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    49f4:	f06f 0515 	mvn.w	r5, #21
    49f8:	e017      	b.n	4a2a <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    49fa:	3401      	adds	r4, #1
    49fc:	45a0      	cmp	r8, r4
    49fe:	dd3c      	ble.n	4a7a <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
    4a00:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4a04:	009a      	lsls	r2, r3, #2
    4a06:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4a0a:	685e      	ldr	r6, [r3, #4]
    4a0c:	2e00      	cmp	r6, #0
    4a0e:	d0f4      	beq.n	49fa <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4a10:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4a14:	4648      	mov	r0, r9
    4a16:	f00f ff7a 	bl	1490e <arm_cmse_mpu_region_get>
    4a1a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4a1c:	eb06 0009 	add.w	r0, r6, r9
    4a20:	3801      	subs	r0, #1
    4a22:	f00f ff74 	bl	1490e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4a26:	4285      	cmp	r5, r0
    4a28:	d1e4      	bne.n	49f4 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    4a2a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4a2e:	4a16      	ldr	r2, [pc, #88]	; (4a88 <mpu_mark_areas_for_dynamic_regions+0xa0>)
    4a30:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4a34:	f115 0f16 	cmn.w	r5, #22
    4a38:	d020      	beq.n	4a7c <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    4a3a:	4b14      	ldr	r3, [pc, #80]	; (4a8c <mpu_mark_areas_for_dynamic_regions+0xa4>)
    4a3c:	781b      	ldrb	r3, [r3, #0]
    4a3e:	42ab      	cmp	r3, r5
    4a40:	dd1f      	ble.n	4a82 <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    4a42:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4a46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    4a4a:	4a11      	ldr	r2, [pc, #68]	; (4a90 <mpu_mark_areas_for_dynamic_regions+0xa8>)
    4a4c:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    4a4e:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    4a50:	68d5      	ldr	r5, [r2, #12]
    4a52:	7b18      	ldrb	r0, [r3, #12]
    4a54:	f365 0004 	bfi	r0, r5, #0, #5
    4a58:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4a5a:	6910      	ldr	r0, [r2, #16]
    4a5c:	f3c0 0042 	ubfx	r0, r0, #1, #3
    4a60:	7b1d      	ldrb	r5, [r3, #12]
    4a62:	f360 1547 	bfi	r5, r0, #5, #3
    4a66:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    4a68:	68d1      	ldr	r1, [r2, #12]
    4a6a:	f021 011f 	bic.w	r1, r1, #31
    4a6e:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    4a70:	6912      	ldr	r2, [r2, #16]
    4a72:	f022 021f 	bic.w	r2, r2, #31
    4a76:	611a      	str	r2, [r3, #16]
}
    4a78:	e7bf      	b.n	49fa <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    4a7a:	2500      	movs	r5, #0
}
    4a7c:	4628      	mov	r0, r5
    4a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    4a82:	f06f 0515 	mvn.w	r5, #21
    4a86:	e7f9      	b.n	4a7c <mpu_mark_areas_for_dynamic_regions+0x94>
    4a88:	20027148 	.word	0x20027148
    4a8c:	20027369 	.word	0x20027369
    4a90:	e000ed90 	.word	0xe000ed90

00004a94 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4a94:	4b03      	ldr	r3, [pc, #12]	; (4aa4 <arm_core_mpu_enable+0x10>)
    4a96:	2205      	movs	r2, #5
    4a98:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4a9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a9e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4aa2:	4770      	bx	lr
    4aa4:	e000ed90 	.word	0xe000ed90

00004aa8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4aa8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4aac:	4b01      	ldr	r3, [pc, #4]	; (4ab4 <arm_core_mpu_disable+0xc>)
    4aae:	2200      	movs	r2, #0
    4ab0:	605a      	str	r2, [r3, #4]
}
    4ab2:	4770      	bx	lr
    4ab4:	e000ed90 	.word	0xe000ed90

00004ab8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4ab8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4aba:	4b0e      	ldr	r3, [pc, #56]	; (4af4 <z_arm_mpu_init+0x3c>)
    4abc:	681d      	ldr	r5, [r3, #0]
    4abe:	2d08      	cmp	r5, #8
    4ac0:	d815      	bhi.n	4aee <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4ac2:	f7ff fff1 	bl	4aa8 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    4ac6:	f7ff fe9f 	bl	4808 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4aca:	2400      	movs	r4, #0
    4acc:	42a5      	cmp	r5, r4
    4ace:	d908      	bls.n	4ae2 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4ad0:	4b08      	ldr	r3, [pc, #32]	; (4af4 <z_arm_mpu_init+0x3c>)
    4ad2:	6859      	ldr	r1, [r3, #4]
    4ad4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    4ad8:	4620      	mov	r0, r4
    4ada:	f7ff fe9d 	bl	4818 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4ade:	3401      	adds	r4, #1
    4ae0:	e7f4      	b.n	4acc <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4ae2:	4b05      	ldr	r3, [pc, #20]	; (4af8 <z_arm_mpu_init+0x40>)
    4ae4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4ae6:	f7ff ffd5 	bl	4a94 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4aea:	2000      	movs	r0, #0
}
    4aec:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4aee:	f04f 30ff 	mov.w	r0, #4294967295
    4af2:	e7fb      	b.n	4aec <z_arm_mpu_init+0x34>
    4af4:	0001a310 	.word	0x0001a310
    4af8:	20027369 	.word	0x20027369

00004afc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4afc:	4b01      	ldr	r3, [pc, #4]	; (4b04 <__stdout_hook_install+0x8>)
    4afe:	6018      	str	r0, [r3, #0]
}
    4b00:	4770      	bx	lr
    4b02:	bf00      	nop
    4b04:	200180ec 	.word	0x200180ec

00004b08 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4b08:	b570      	push	{r4, r5, r6, lr}
    4b0a:	4606      	mov	r6, r0
    4b0c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    4b0e:	2400      	movs	r4, #0
    4b10:	e000      	b.n	4b14 <z_impl_zephyr_read_stdin+0xc>
    4b12:	3401      	adds	r4, #1
    4b14:	42ac      	cmp	r4, r5
    4b16:	da08      	bge.n	4b2a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    4b18:	4b05      	ldr	r3, [pc, #20]	; (4b30 <z_impl_zephyr_read_stdin+0x28>)
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	4798      	blx	r3
    4b1e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4b20:	280a      	cmp	r0, #10
    4b22:	d001      	beq.n	4b28 <z_impl_zephyr_read_stdin+0x20>
    4b24:	280d      	cmp	r0, #13
    4b26:	d1f4      	bne.n	4b12 <z_impl_zephyr_read_stdin+0xa>
			i++;
    4b28:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    4b2a:	4620      	mov	r0, r4
    4b2c:	bd70      	pop	{r4, r5, r6, pc}
    4b2e:	bf00      	nop
    4b30:	200180e8 	.word	0x200180e8

00004b34 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b36:	4605      	mov	r5, r0
    4b38:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4b3a:	2400      	movs	r4, #0
    4b3c:	e004      	b.n	4b48 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    4b3e:	4b09      	ldr	r3, [pc, #36]	; (4b64 <z_impl_zephyr_write_stdout+0x30>)
    4b40:	681b      	ldr	r3, [r3, #0]
    4b42:	7830      	ldrb	r0, [r6, #0]
    4b44:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4b46:	3401      	adds	r4, #1
    4b48:	42bc      	cmp	r4, r7
    4b4a:	da08      	bge.n	4b5e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    4b4c:	192e      	adds	r6, r5, r4
    4b4e:	5d2b      	ldrb	r3, [r5, r4]
    4b50:	2b0a      	cmp	r3, #10
    4b52:	d1f4      	bne.n	4b3e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    4b54:	4b03      	ldr	r3, [pc, #12]	; (4b64 <z_impl_zephyr_write_stdout+0x30>)
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	200d      	movs	r0, #13
    4b5a:	4798      	blx	r3
    4b5c:	e7ef      	b.n	4b3e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    4b5e:	4638      	mov	r0, r7
    4b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b62:	bf00      	nop
    4b64:	200180ec 	.word	0x200180ec

00004b68 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4b68:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    4b6a:	2205      	movs	r2, #5
    4b6c:	4902      	ldr	r1, [pc, #8]	; (4b78 <_exit+0x10>)
    4b6e:	2001      	movs	r0, #1
    4b70:	f00f ff24 	bl	149bc <_write>
	while (1) {
    4b74:	e7fe      	b.n	4b74 <_exit+0xc>
    4b76:	bf00      	nop
    4b78:	0001a2f8 	.word	0x0001a2f8

00004b7c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    4b7c:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    4b7e:	4b08      	ldr	r3, [pc, #32]	; (4ba0 <_sbrk+0x24>)
    4b80:	6819      	ldr	r1, [r3, #0]
    4b82:	4b08      	ldr	r3, [pc, #32]	; (4ba4 <_sbrk+0x28>)
    4b84:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4b86:	440a      	add	r2, r1
    4b88:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    4b8c:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
    4b90:	429a      	cmp	r2, r3
    4b92:	d202      	bcs.n	4b9a <_sbrk+0x1e>
		heap_sz += count;
    4b94:	4b02      	ldr	r3, [pc, #8]	; (4ba0 <_sbrk+0x24>)
    4b96:	601a      	str	r2, [r3, #0]
		ret = ptr;
    4b98:	4770      	bx	lr
	} else {
		ret = (void *)-1;
    4b9a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    4b9e:	4770      	bx	lr
    4ba0:	2002715c 	.word	0x2002715c
    4ba4:	2002fe70 	.word	0x2002fe70

00004ba8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4ba8:	4800      	ldr	r0, [pc, #0]	; (4bac <get_hf_flags+0x4>)
    4baa:	4770      	bx	lr
    4bac:	200271f8 	.word	0x200271f8

00004bb0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4bb0:	4b01      	ldr	r3, [pc, #4]	; (4bb8 <get_subsys+0x8>)
    4bb2:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    4bb4:	1140      	asrs	r0, r0, #5
    4bb6:	4770      	bx	lr
    4bb8:	20027170 	.word	0x20027170

00004bbc <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4bbc:	b538      	push	{r3, r4, r5, lr}
    4bbe:	4605      	mov	r5, r0
    4bc0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4bc2:	f7ff fff5 	bl	4bb0 <get_subsys>
    4bc6:	4601      	mov	r1, r0
    4bc8:	2240      	movs	r2, #64	; 0x40
    4bca:	4803      	ldr	r0, [pc, #12]	; (4bd8 <onoff_stop+0x1c>)
    4bcc:	f00f ff9d 	bl	14b0a <stop>
    4bd0:	4601      	mov	r1, r0
	notify(mgr, res);
    4bd2:	4628      	mov	r0, r5
    4bd4:	47a0      	blx	r4
}
    4bd6:	bd38      	pop	{r3, r4, r5, pc}
    4bd8:	00019730 	.word	0x00019730

00004bdc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4bdc:	b530      	push	{r4, r5, lr}
    4bde:	b083      	sub	sp, #12
    4be0:	4605      	mov	r5, r0
    4be2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4be4:	f7ff ffe4 	bl	4bb0 <get_subsys>
    4be8:	4601      	mov	r1, r0
    4bea:	2340      	movs	r3, #64	; 0x40
    4bec:	9300      	str	r3, [sp, #0]
    4bee:	4623      	mov	r3, r4
    4bf0:	4a05      	ldr	r2, [pc, #20]	; (4c08 <onoff_start+0x2c>)
    4bf2:	4806      	ldr	r0, [pc, #24]	; (4c0c <onoff_start+0x30>)
    4bf4:	f00f ffa3 	bl	14b3e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4bf8:	1e01      	subs	r1, r0, #0
    4bfa:	db01      	blt.n	4c00 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4bfc:	b003      	add	sp, #12
    4bfe:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4c00:	4628      	mov	r0, r5
    4c02:	47a0      	blx	r4
}
    4c04:	e7fa      	b.n	4bfc <onoff_start+0x20>
    4c06:	bf00      	nop
    4c08:	00014b87 	.word	0x00014b87
    4c0c:	00019730 	.word	0x00019730

00004c10 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4c10:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4c12:	2805      	cmp	r0, #5
    4c14:	d815      	bhi.n	4c42 <clock_event_handler+0x32>
    4c16:	e8df f000 	tbb	[pc, r0]
    4c1a:	1a03      	.short	0x1a03
    4c1c:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4c20:	2100      	movs	r1, #0
    4c22:	480d      	ldr	r0, [pc, #52]	; (4c58 <clock_event_handler+0x48>)
    4c24:	f00f fefc 	bl	14a20 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4c28:	6883      	ldr	r3, [r0, #8]
    4c2a:	f013 0f07 	tst.w	r3, #7
    4c2e:	d108      	bne.n	4c42 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4c30:	2100      	movs	r1, #0
    4c32:	4809      	ldr	r0, [pc, #36]	; (4c58 <clock_event_handler+0x48>)
    4c34:	f00f ff57 	bl	14ae6 <clkstarted_handle>
    4c38:	e003      	b.n	4c42 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    4c3a:	2102      	movs	r1, #2
    4c3c:	4806      	ldr	r0, [pc, #24]	; (4c58 <clock_event_handler+0x48>)
    4c3e:	f00f ff52 	bl	14ae6 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    4c42:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    4c44:	2103      	movs	r1, #3
    4c46:	4804      	ldr	r0, [pc, #16]	; (4c58 <clock_event_handler+0x48>)
    4c48:	f00f ff4d 	bl	14ae6 <clkstarted_handle>
		break;
    4c4c:	e7f9      	b.n	4c42 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4c4e:	2101      	movs	r1, #1
    4c50:	4801      	ldr	r0, [pc, #4]	; (4c58 <clock_event_handler+0x48>)
    4c52:	f00f ff48 	bl	14ae6 <clkstarted_handle>
}
    4c56:	e7f4      	b.n	4c42 <clock_event_handler+0x32>
    4c58:	00019730 	.word	0x00019730

00004c5c <generic_hfclk_start>:
{
    4c5c:	b510      	push	{r4, lr}
	__asm__ volatile(
    4c5e:	f04f 0320 	mov.w	r3, #32
    4c62:	f3ef 8411 	mrs	r4, BASEPRI
    4c66:	f383 8812 	msr	BASEPRI_MAX, r3
    4c6a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4c6e:	4a13      	ldr	r2, [pc, #76]	; (4cbc <generic_hfclk_start+0x60>)
    4c70:	6813      	ldr	r3, [r2, #0]
    4c72:	f043 0302 	orr.w	r3, r3, #2
    4c76:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4c78:	f013 0f01 	tst.w	r3, #1
    4c7c:	d108      	bne.n	4c90 <generic_hfclk_start+0x34>
	bool already_started = false;
    4c7e:	2300      	movs	r3, #0
	__asm__ volatile(
    4c80:	f384 8811 	msr	BASEPRI, r4
    4c84:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4c88:	b99b      	cbnz	r3, 4cb2 <generic_hfclk_start+0x56>
	hfclk_start();
    4c8a:	f00f ff84 	bl	14b96 <hfclk_start>
}
    4c8e:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4c90:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4c94:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4c98:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4c9c:	f012 0f01 	tst.w	r2, #1
    4ca0:	d101      	bne.n	4ca6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    4ca2:	2300      	movs	r3, #0
    4ca4:	e7ec      	b.n	4c80 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4ca6:	f7ff ff7f 	bl	4ba8 <get_hf_flags>
    4caa:	f00f ff09 	bl	14ac0 <set_on_state>
			already_started = true;
    4cae:	2301      	movs	r3, #1
    4cb0:	e7e6      	b.n	4c80 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    4cb2:	2100      	movs	r1, #0
    4cb4:	4802      	ldr	r0, [pc, #8]	; (4cc0 <generic_hfclk_start+0x64>)
    4cb6:	f00f ff16 	bl	14ae6 <clkstarted_handle>
		return;
    4cba:	e7e8      	b.n	4c8e <generic_hfclk_start+0x32>
    4cbc:	20027220 	.word	0x20027220
    4cc0:	00019730 	.word	0x00019730

00004cc4 <generic_hfclk_stop>:
{
    4cc4:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4cc6:	4b08      	ldr	r3, [pc, #32]	; (4ce8 <generic_hfclk_stop+0x24>)
    4cc8:	e8d3 2fef 	ldaex	r2, [r3]
    4ccc:	f022 0102 	bic.w	r1, r2, #2
    4cd0:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4cd4:	2800      	cmp	r0, #0
    4cd6:	d1f7      	bne.n	4cc8 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4cd8:	f012 0f01 	tst.w	r2, #1
    4cdc:	d000      	beq.n	4ce0 <generic_hfclk_stop+0x1c>
}
    4cde:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4ce0:	f00f ff6d 	bl	14bbe <hfclk_stop>
    4ce4:	e7fb      	b.n	4cde <generic_hfclk_stop+0x1a>
    4ce6:	bf00      	nop
    4ce8:	20027220 	.word	0x20027220

00004cec <api_blocking_start>:
{
    4cec:	b500      	push	{lr}
    4cee:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4cf0:	f8cd d000 	str.w	sp, [sp]
    4cf4:	f8cd d004 	str.w	sp, [sp, #4]
    4cf8:	2300      	movs	r3, #0
    4cfa:	9302      	str	r3, [sp, #8]
    4cfc:	2301      	movs	r3, #1
    4cfe:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4d00:	466b      	mov	r3, sp
    4d02:	4a07      	ldr	r2, [pc, #28]	; (4d20 <api_blocking_start+0x34>)
    4d04:	f00f ff37 	bl	14b76 <api_start>
	if (err < 0) {
    4d08:	2800      	cmp	r0, #0
    4d0a:	db05      	blt.n	4d18 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4d10:	2300      	movs	r3, #0
    4d12:	4668      	mov	r0, sp
    4d14:	f00c fd78 	bl	11808 <z_impl_k_sem_take>
}
    4d18:	b005      	add	sp, #20
    4d1a:	f85d fb04 	ldr.w	pc, [sp], #4
    4d1e:	bf00      	nop
    4d20:	00014be7 	.word	0x00014be7

00004d24 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4d24:	b570      	push	{r4, r5, r6, lr}
    4d26:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d28:	2200      	movs	r2, #0
    4d2a:	2101      	movs	r1, #1
    4d2c:	2005      	movs	r0, #5
    4d2e:	f7ff fa97 	bl	4260 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4d32:	2005      	movs	r0, #5
    4d34:	f7ff fa76 	bl	4224 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4d38:	4811      	ldr	r0, [pc, #68]	; (4d80 <clk_init+0x5c>)
    4d3a:	f001 f92b 	bl	5f94 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4d3e:	4b11      	ldr	r3, [pc, #68]	; (4d84 <clk_init+0x60>)
    4d40:	4298      	cmp	r0, r3
    4d42:	d119      	bne.n	4d78 <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4d44:	f010 fa72 	bl	1522c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4d48:	2400      	movs	r4, #0
    4d4a:	2c03      	cmp	r4, #3
    4d4c:	d812      	bhi.n	4d74 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4d4e:	4621      	mov	r1, r4
    4d50:	4630      	mov	r0, r6
    4d52:	f00f fe65 	bl	14a20 <get_sub_data>
    4d56:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4d58:	4621      	mov	r1, r4
    4d5a:	4630      	mov	r0, r6
    4d5c:	f00f fe6b 	bl	14a36 <get_onoff_manager>
    4d60:	4909      	ldr	r1, [pc, #36]	; (4d88 <clk_init+0x64>)
    4d62:	f00f fa51 	bl	14208 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4d66:	2800      	cmp	r0, #0
    4d68:	db05      	blt.n	4d76 <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4d6a:	2301      	movs	r3, #1
    4d6c:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4d6e:	441c      	add	r4, r3
    4d70:	b2e4      	uxtb	r4, r4
    4d72:	e7ea      	b.n	4d4a <clk_init+0x26>
	}

	return 0;
    4d74:	2000      	movs	r0, #0
}
    4d76:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4d78:	f06f 0004 	mvn.w	r0, #4
    4d7c:	e7fb      	b.n	4d76 <clk_init+0x52>
    4d7e:	bf00      	nop
    4d80:	00004c11 	.word	0x00004c11
    4d84:	0bad0000 	.word	0x0bad0000
    4d88:	0001a374 	.word	0x0001a374

00004d8c <lfclk_spinwait>:
{
    4d8c:	b570      	push	{r4, r5, r6, lr}
    4d8e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4d90:	2801      	cmp	r0, #1
    4d92:	d107      	bne.n	4da4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4d94:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d98:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4d9c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4da0:	2b02      	cmp	r3, #2
    4da2:	d03f      	beq.n	4e24 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4da4:	f013 fc8f 	bl	186c6 <k_is_in_isr>
    4da8:	b920      	cbnz	r0, 4db4 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    4daa:	4b30      	ldr	r3, [pc, #192]	; (4e6c <lfclk_spinwait+0xe0>)
    4dac:	781b      	ldrb	r3, [r3, #0]
    4dae:	b19b      	cbz	r3, 4dd8 <lfclk_spinwait+0x4c>
    4db0:	2300      	movs	r3, #0
    4db2:	e000      	b.n	4db6 <lfclk_spinwait+0x2a>
    4db4:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    4db6:	461c      	mov	r4, r3
    4db8:	b183      	cbz	r3, 4ddc <lfclk_spinwait+0x50>
	__asm__ volatile(
    4dba:	f04f 0320 	mov.w	r3, #32
    4dbe:	f3ef 8611 	mrs	r6, BASEPRI
    4dc2:	f383 8812 	msr	BASEPRI_MAX, r3
    4dc6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4dca:	b9a4      	cbnz	r4, 4df6 <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    4dcc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4dd0:	2202      	movs	r2, #2
    4dd2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4dd6:	e00e      	b.n	4df6 <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4dd8:	2301      	movs	r3, #1
    4dda:	e7ec      	b.n	4db6 <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    4ddc:	2600      	movs	r6, #0
    4dde:	e7f4      	b.n	4dca <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4de0:	b30c      	cbz	r4, 4e26 <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4de2:	4630      	mov	r0, r6
    4de4:	f7ff fa14 	bl	4210 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4de8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4dec:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4df0:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4df2:	2b01      	cmp	r3, #1
    4df4:	d01c      	beq.n	4e30 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4df6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4dfa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4dfe:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4e02:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4e06:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4e0a:	d126      	bne.n	4e5a <lfclk_spinwait+0xce>
    return false;
    4e0c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4e0e:	2a00      	cmp	r2, #0
    4e10:	d0e6      	beq.n	4de0 <lfclk_spinwait+0x54>
    4e12:	2b02      	cmp	r3, #2
    4e14:	d001      	beq.n	4e1a <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4e16:	2d01      	cmp	r5, #1
    4e18:	d1e2      	bne.n	4de0 <lfclk_spinwait+0x54>
	if (isr_mode) {
    4e1a:	b304      	cbz	r4, 4e5e <lfclk_spinwait+0xd2>
	__asm__ volatile(
    4e1c:	f386 8811 	msr	BASEPRI, r6
    4e20:	f3bf 8f6f 	isb	sy
}
    4e24:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    4e26:	2021      	movs	r0, #33	; 0x21
    4e28:	2100      	movs	r1, #0
    4e2a:	f00d f8a9 	bl	11f80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4e2e:	e7db      	b.n	4de8 <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4e30:	4b0f      	ldr	r3, [pc, #60]	; (4e70 <lfclk_spinwait+0xe4>)
    4e32:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4e34:	2b00      	cmp	r3, #0
    4e36:	d0de      	beq.n	4df6 <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e38:	4b0d      	ldr	r3, [pc, #52]	; (4e70 <lfclk_spinwait+0xe4>)
    4e3a:	2200      	movs	r2, #0
    4e3c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4e3e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e40:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4e44:	2202      	movs	r2, #2
    4e46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e4a:	4b0a      	ldr	r3, [pc, #40]	; (4e74 <lfclk_spinwait+0xe8>)
    4e4c:	2220      	movs	r2, #32
    4e4e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e52:	4b09      	ldr	r3, [pc, #36]	; (4e78 <lfclk_spinwait+0xec>)
    4e54:	2201      	movs	r2, #1
    4e56:	601a      	str	r2, [r3, #0]
}
    4e58:	e7cd      	b.n	4df6 <lfclk_spinwait+0x6a>
                return true;
    4e5a:	2201      	movs	r2, #1
    4e5c:	e7d7      	b.n	4e0e <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    4e5e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4e62:	2202      	movs	r2, #2
    4e64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4e68:	e7dc      	b.n	4e24 <lfclk_spinwait+0x98>
    4e6a:	bf00      	nop
    4e6c:	2002736b 	.word	0x2002736b
    4e70:	50005104 	.word	0x50005104
    4e74:	e000e100 	.word	0xe000e100
    4e78:	50005008 	.word	0x50005008

00004e7c <z_nrf_clock_control_lf_on>:
{
    4e7c:	b510      	push	{r4, lr}
    4e7e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4e80:	4b0e      	ldr	r3, [pc, #56]	; (4ebc <z_nrf_clock_control_lf_on+0x40>)
    4e82:	2101      	movs	r1, #1
    4e84:	e8d3 2fef 	ldaex	r2, [r3]
    4e88:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4e8c:	2800      	cmp	r0, #0
    4e8e:	d1f9      	bne.n	4e84 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    4e90:	b11a      	cbz	r2, 4e9a <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    4e92:	1e63      	subs	r3, r4, #1
    4e94:	2b01      	cmp	r3, #1
    4e96:	d90c      	bls.n	4eb2 <z_nrf_clock_control_lf_on+0x36>
}
    4e98:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4e9a:	4809      	ldr	r0, [pc, #36]	; (4ec0 <z_nrf_clock_control_lf_on+0x44>)
    4e9c:	f00f fdcb 	bl	14a36 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4ea0:	4908      	ldr	r1, [pc, #32]	; (4ec4 <z_nrf_clock_control_lf_on+0x48>)
    4ea2:	2300      	movs	r3, #0
    4ea4:	604b      	str	r3, [r1, #4]
    4ea6:	60cb      	str	r3, [r1, #12]
    4ea8:	2301      	movs	r3, #1
    4eaa:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4eac:	f00f f9c8 	bl	14240 <onoff_request>
    4eb0:	e7ef      	b.n	4e92 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    4eb2:	4620      	mov	r0, r4
    4eb4:	f7ff ff6a 	bl	4d8c <lfclk_spinwait>
		break;
    4eb8:	e7ee      	b.n	4e98 <z_nrf_clock_control_lf_on+0x1c>
    4eba:	bf00      	nop
    4ebc:	20027224 	.word	0x20027224
    4ec0:	00019730 	.word	0x00019730
    4ec4:	20027160 	.word	0x20027160

00004ec8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4ec8:	b538      	push	{r3, r4, r5, lr}
    4eca:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4ecc:	b2c5      	uxtb	r5, r0
    4ece:	4b0b      	ldr	r3, [pc, #44]	; (4efc <console_out+0x34>)
    4ed0:	681b      	ldr	r3, [r3, #0]
    4ed2:	4628      	mov	r0, r5
    4ed4:	4798      	blx	r3

	if (handled_by_debug_server) {
    4ed6:	2801      	cmp	r0, #1
    4ed8:	d007      	beq.n	4eea <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4eda:	2c0a      	cmp	r4, #10
    4edc:	d007      	beq.n	4eee <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4ede:	4b08      	ldr	r3, [pc, #32]	; (4f00 <console_out+0x38>)
    4ee0:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4ee2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4ee4:	685b      	ldr	r3, [r3, #4]
    4ee6:	4629      	mov	r1, r5
    4ee8:	4798      	blx	r3

	return c;
}
    4eea:	4620      	mov	r0, r4
    4eec:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    4eee:	4b04      	ldr	r3, [pc, #16]	; (4f00 <console_out+0x38>)
    4ef0:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4ef2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4ef4:	685b      	ldr	r3, [r3, #4]
    4ef6:	210d      	movs	r1, #13
    4ef8:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4efa:	e7f0      	b.n	4ede <console_out+0x16>
    4efc:	200180f0 	.word	0x200180f0
    4f00:	20027228 	.word	0x20027228

00004f04 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4f04:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    4f06:	4c04      	ldr	r4, [pc, #16]	; (4f18 <uart_console_hook_install+0x14>)
    4f08:	4620      	mov	r0, r4
    4f0a:	f7ff fdf7 	bl	4afc <__stdout_hook_install>
	__printk_hook_install(console_out);
    4f0e:	4620      	mov	r0, r4
    4f10:	f7fe f89c 	bl	304c <__printk_hook_install>
}
    4f14:	bd10      	pop	{r4, pc}
    4f16:	bf00      	nop
    4f18:	00004ec9 	.word	0x00004ec9

00004f1c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4f1c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4f1e:	4806      	ldr	r0, [pc, #24]	; (4f38 <uart_console_init+0x1c>)
    4f20:	4b06      	ldr	r3, [pc, #24]	; (4f3c <uart_console_init+0x20>)
    4f22:	6018      	str	r0, [r3, #0]
    4f24:	f013 fb4a 	bl	185bc <z_device_ready>
    4f28:	b118      	cbz	r0, 4f32 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    4f2a:	f7ff ffeb 	bl	4f04 <uart_console_hook_install>

	return 0;
    4f2e:	2000      	movs	r0, #0
}
    4f30:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4f32:	f06f 0012 	mvn.w	r0, #18
    4f36:	e7fb      	b.n	4f30 <uart_console_init+0x14>
    4f38:	00019748 	.word	0x00019748
    4f3c:	20027228 	.word	0x20027228

00004f40 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    4f40:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    4f42:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4f44:	f8d3 c004 	ldr.w	ip, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f48:	4b38      	ldr	r3, [pc, #224]	; (502c <gpio_nrfx_config+0xec>)
    4f4a:	4013      	ands	r3, r2
    4f4c:	4c38      	ldr	r4, [pc, #224]	; (5030 <gpio_nrfx_config+0xf0>)
    4f4e:	42a3      	cmp	r3, r4
    4f50:	d027      	beq.n	4fa2 <gpio_nrfx_config+0x62>
    4f52:	d812      	bhi.n	4f7a <gpio_nrfx_config+0x3a>
    4f54:	2b06      	cmp	r3, #6
    4f56:	d026      	beq.n	4fa6 <gpio_nrfx_config+0x66>
    4f58:	d904      	bls.n	4f64 <gpio_nrfx_config+0x24>
    4f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4f5e:	d109      	bne.n	4f74 <gpio_nrfx_config+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    4f60:	2501      	movs	r5, #1
    4f62:	e016      	b.n	4f92 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f64:	b30b      	cbz	r3, 4faa <gpio_nrfx_config+0x6a>
    4f66:	2b02      	cmp	r3, #2
    4f68:	d101      	bne.n	4f6e <gpio_nrfx_config+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    4f6a:	2504      	movs	r5, #4
    4f6c:	e011      	b.n	4f92 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f6e:	f06f 0015 	mvn.w	r0, #21
    4f72:	e049      	b.n	5008 <gpio_nrfx_config+0xc8>
    4f74:	f06f 0015 	mvn.w	r0, #21
    4f78:	e046      	b.n	5008 <gpio_nrfx_config+0xc8>
    4f7a:	4c2e      	ldr	r4, [pc, #184]	; (5034 <gpio_nrfx_config+0xf4>)
    4f7c:	42a3      	cmp	r3, r4
    4f7e:	d016      	beq.n	4fae <gpio_nrfx_config+0x6e>
    4f80:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4f84:	d101      	bne.n	4f8a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0H1;
    4f86:	2503      	movs	r5, #3
    4f88:	e003      	b.n	4f92 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4f8e:	d149      	bne.n	5024 <gpio_nrfx_config+0xe4>
		drive = NRF_GPIO_PIN_S0H1;
    4f90:	2502      	movs	r5, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    4f92:	f012 0f10 	tst.w	r2, #16
    4f96:	d10c      	bne.n	4fb2 <gpio_nrfx_config+0x72>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    4f98:	f012 0f20 	tst.w	r2, #32
    4f9c:	d036      	beq.n	500c <gpio_nrfx_config+0xcc>
		pull = NRF_GPIO_PIN_PULLDOWN;
    4f9e:	2601      	movs	r6, #1
    4fa0:	e008      	b.n	4fb4 <gpio_nrfx_config+0x74>
		drive = NRF_GPIO_PIN_H0D1;
    4fa2:	2507      	movs	r5, #7
    4fa4:	e7f5      	b.n	4f92 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0D1;
    4fa6:	2506      	movs	r5, #6
    4fa8:	e7f3      	b.n	4f92 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4faa:	2500      	movs	r5, #0
    4fac:	e7f1      	b.n	4f92 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0H1;
    4fae:	2505      	movs	r5, #5
    4fb0:	e7ef      	b.n	4f92 <gpio_nrfx_config+0x52>
		pull = NRF_GPIO_PIN_PULLUP;
    4fb2:	2603      	movs	r6, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    4fb4:	f3c2 2440 	ubfx	r4, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4fb8:	f412 7f80 	tst.w	r2, #256	; 0x100
    4fbc:	bf0c      	ite	eq
    4fbe:	2701      	moveq	r7, #1
    4fc0:	2700      	movne	r7, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    4fc2:	f412 7f00 	tst.w	r2, #512	; 0x200
    4fc6:	d006      	beq.n	4fd6 <gpio_nrfx_config+0x96>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4fc8:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4fcc:	d020      	beq.n	5010 <gpio_nrfx_config+0xd0>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4fce:	2301      	movs	r3, #1
    4fd0:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4fd2:	f8cc 3008 	str.w	r3, [ip, #8]
	return port->config;
    4fd6:	6843      	ldr	r3, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    4fd8:	7a18      	ldrb	r0, [r3, #8]
    4fda:	f001 031f 	and.w	r3, r1, #31
    4fde:	ea43 1140 	orr.w	r1, r3, r0, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4fe2:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fe4:	2901      	cmp	r1, #1
    4fe6:	d01b      	beq.n	5020 <gpio_nrfx_config+0xe0>
        case 0: return NRF_P0;
    4fe8:	4813      	ldr	r0, [pc, #76]	; (5038 <gpio_nrfx_config+0xf8>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4fea:	3380      	adds	r3, #128	; 0x80
    4fec:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    4ff0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4ff4:	ea44 0247 	orr.w	r2, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4ff8:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4ffc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5000:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    5002:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    5006:	2000      	movs	r0, #0
}
    5008:	bcf0      	pop	{r4, r5, r6, r7}
    500a:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    500c:	2600      	movs	r6, #0
    500e:	e7d1      	b.n	4fb4 <gpio_nrfx_config+0x74>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    5010:	f412 6f80 	tst.w	r2, #1024	; 0x400
    5014:	d0df      	beq.n	4fd6 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    5016:	2301      	movs	r3, #1
    5018:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    501a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    501e:	e7da      	b.n	4fd6 <gpio_nrfx_config+0x96>
        case 1: return NRF_P1;
    5020:	4806      	ldr	r0, [pc, #24]	; (503c <gpio_nrfx_config+0xfc>)
    5022:	e7e2      	b.n	4fea <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5024:	f06f 0015 	mvn.w	r0, #21
    5028:	e7ee      	b.n	5008 <gpio_nrfx_config+0xc8>
    502a:	bf00      	nop
    502c:	00f00006 	.word	0x00f00006
    5030:	00100006 	.word	0x00100006
    5034:	00400002 	.word	0x00400002
    5038:	50842500 	.word	0x50842500
    503c:	50842800 	.word	0x50842800

00005040 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    5040:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    5042:	6905      	ldr	r5, [r0, #16]
	return port->config;
    5044:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    5046:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    5048:	696a      	ldr	r2, [r5, #20]
    504a:	69ab      	ldr	r3, [r5, #24]
    504c:	4313      	orrs	r3, r2
    504e:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    5052:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    5054:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    5056:	e010      	b.n	507a <cfg_level_pins+0x3a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    5058:	f04f 0c02 	mov.w	ip, #2
    505c:	e01c      	b.n	5098 <cfg_level_pins+0x58>
    505e:	4f13      	ldr	r7, [pc, #76]	; (50ac <cfg_level_pins+0x6c>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5060:	3480      	adds	r4, #128	; 0x80
    5062:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    5066:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    506a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    506e:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    5072:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    5076:	3001      	adds	r0, #1
		bit <<= 1;
    5078:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    507a:	b1a1      	cbz	r1, 50a6 <cfg_level_pins+0x66>
		if (level_pins & bit) {
    507c:	420b      	tst	r3, r1
    507e:	d0fa      	beq.n	5076 <cfg_level_pins+0x36>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5080:	7a34      	ldrb	r4, [r6, #8]
    5082:	f000 021f 	and.w	r2, r0, #31
    5086:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    508a:	692c      	ldr	r4, [r5, #16]
    508c:	40c4      	lsrs	r4, r0
    508e:	f014 0f01 	tst.w	r4, #1
    5092:	d1e1      	bne.n	5058 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    5094:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    5098:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    509c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    509e:	2a01      	cmp	r2, #1
    50a0:	d0dd      	beq.n	505e <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    50a2:	4f03      	ldr	r7, [pc, #12]	; (50b0 <cfg_level_pins+0x70>)
    50a4:	e7dc      	b.n	5060 <cfg_level_pins+0x20>
	}
}
    50a6:	bcf0      	pop	{r4, r5, r6, r7}
    50a8:	4770      	bx	lr
    50aa:	bf00      	nop
    50ac:	50842800 	.word	0x50842800
    50b0:	50842500 	.word	0x50842500

000050b4 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    50b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50b6:	468c      	mov	ip, r1
	return port->data;
    50b8:	6903      	ldr	r3, [r0, #16]
	return port->config;
    50ba:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    50bc:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    50be:	695a      	ldr	r2, [r3, #20]
    50c0:	6998      	ldr	r0, [r3, #24]
    50c2:	4302      	orrs	r2, r0
    50c4:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    50c8:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    50ca:	6912      	ldr	r2, [r2, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    50cc:	6918      	ldr	r0, [r3, #16]
    50ce:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    50d0:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    50d4:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    50d6:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    50d8:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    50da:	e015      	b.n	5108 <check_level_trigger_pins+0x54>
        case 1: return NRF_P1;
    50dc:	f8df e070 	ldr.w	lr, [pc, #112]	; 5150 <check_level_trigger_pins+0x9c>
    50e0:	e025      	b.n	512e <check_level_trigger_pins+0x7a>
    *p_pin = pin_number & 0x1F;
    50e2:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    50e6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50e8:	2a01      	cmp	r2, #1
    50ea:	d02d      	beq.n	5148 <check_level_trigger_pins+0x94>
        case 0: return NRF_P0;
    50ec:	f8df e064 	ldr.w	lr, [pc, #100]	; 5154 <check_level_trigger_pins+0xa0>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    50f0:	f106 0280 	add.w	r2, r6, #128	; 0x80
    50f4:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    50f8:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    50fc:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    5100:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    5104:	3501      	adds	r5, #1
		bit <<= 1;
    5106:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    5108:	b30c      	cbz	r4, 514e <check_level_trigger_pins+0x9a>
		if (check_pins & bit) {
    510a:	4223      	tst	r3, r4
    510c:	d0fa      	beq.n	5104 <check_level_trigger_pins+0x50>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    510e:	7a0e      	ldrb	r6, [r1, #8]
    5110:	f005 021f 	and.w	r2, r5, #31
    5114:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    5118:	423b      	tst	r3, r7
    511a:	d1e2      	bne.n	50e2 <check_level_trigger_pins+0x2e>
    *p_pin = pin_number & 0x1F;
    511c:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    5120:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5124:	f1be 0f01 	cmp.w	lr, #1
    5128:	d0d8      	beq.n	50dc <check_level_trigger_pins+0x28>
        case 0: return NRF_P0;
    512a:	f8df e028 	ldr.w	lr, [pc, #40]	; 5154 <check_level_trigger_pins+0xa0>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    512e:	3680      	adds	r6, #128	; 0x80
    5130:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5134:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    5138:	2e02      	cmp	r6, #2
    513a:	d1d2      	bne.n	50e2 <check_level_trigger_pins+0x2e>
					*sense_levels |= bit;
    513c:	f8dc 6000 	ldr.w	r6, [ip]
    5140:	431e      	orrs	r6, r3
    5142:	f8cc 6000 	str.w	r6, [ip]
    5146:	e7cc      	b.n	50e2 <check_level_trigger_pins+0x2e>
        case 1: return NRF_P1;
    5148:	f8df e004 	ldr.w	lr, [pc, #4]	; 5150 <check_level_trigger_pins+0x9c>
    514c:	e7d0      	b.n	50f0 <check_level_trigger_pins+0x3c>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    514e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5150:	50842800 	.word	0x50842800
    5154:	50842500 	.word	0x50842500

00005158 <gpiote_pin_cleanup>:
{
    5158:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    515a:	4b14      	ldr	r3, [pc, #80]	; (51ac <gpiote_pin_cleanup+0x54>)
    515c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    5160:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    5162:	2300      	movs	r3, #0
    5164:	e000      	b.n	5168 <gpiote_pin_cleanup+0x10>
    5166:	3301      	adds	r3, #1
    5168:	2b07      	cmp	r3, #7
    516a:	d81d      	bhi.n	51a8 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    516c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    5170:	490e      	ldr	r1, [pc, #56]	; (51ac <gpiote_pin_cleanup+0x54>)
    5172:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    5176:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    517a:	4290      	cmp	r0, r2
    517c:	d1f3      	bne.n	5166 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    517e:	fa24 f203 	lsr.w	r2, r4, r3
    5182:	f012 0f01 	tst.w	r2, #1
    5186:	d0ee      	beq.n	5166 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    5188:	460a      	mov	r2, r1
    518a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    518e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5192:	f021 0101 	bic.w	r1, r1, #1
    5196:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    519a:	2101      	movs	r1, #1
    519c:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    519e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    51a2:	b2d8      	uxtb	r0, r3
    51a4:	f001 f968 	bl	6478 <nrfx_gpiote_channel_free>
}
    51a8:	bd10      	pop	{r4, pc}
    51aa:	bf00      	nop
    51ac:	5000d000 	.word	0x5000d000

000051b0 <gpiote_channel_alloc>:
{
    51b0:	b570      	push	{r4, r5, r6, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	4604      	mov	r4, r0
    51b6:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    51b8:	f10d 0007 	add.w	r0, sp, #7
    51bc:	f001 f978 	bl	64b0 <nrfx_gpiote_channel_alloc>
    51c0:	4b1c      	ldr	r3, [pc, #112]	; (5234 <gpiote_channel_alloc+0x84>)
    51c2:	4298      	cmp	r0, r3
    51c4:	d132      	bne.n	522c <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    51c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    51ca:	f103 0240 	add.w	r2, r3, #64	; 0x40
    51ce:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    51d0:	4e19      	ldr	r6, [pc, #100]	; (5238 <gpiote_channel_alloc+0x88>)
    51d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    51d6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    51da:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    51de:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    51e2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51e6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    51ea:	0224      	lsls	r4, r4, #8
    51ec:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    51f0:	042d      	lsls	r5, r5, #16
    51f2:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51f6:	432c      	orrs	r4, r5
    51f8:	430c      	orrs	r4, r1
    51fa:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    51fe:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    5202:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5206:	2000      	movs	r0, #0
    5208:	6018      	str	r0, [r3, #0]
    520a:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    520c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5210:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    5214:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    5218:	f042 0201 	orr.w	r2, r2, #1
    521c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    5220:	2301      	movs	r3, #1
    5222:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    5224:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    5228:	b002      	add	sp, #8
    522a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    522c:	f06f 0012 	mvn.w	r0, #18
    5230:	e7fa      	b.n	5228 <gpiote_channel_alloc+0x78>
    5232:	bf00      	nop
    5234:	0bad0000 	.word	0x0bad0000
    5238:	5000d000 	.word	0x5000d000

0000523c <gpiote_pin_int_cfg>:
{
    523c:	b570      	push	{r4, r5, r6, lr}
    523e:	460d      	mov	r5, r1
	return port->data;
    5240:	6906      	ldr	r6, [r0, #16]
	return port->config;
    5242:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5244:	7a1b      	ldrb	r3, [r3, #8]
    5246:	f001 041f 	and.w	r4, r1, #31
    524a:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    524e:	4620      	mov	r0, r4
    5250:	f7ff ff82 	bl	5158 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    5254:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    5258:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    525a:	2b01      	cmp	r3, #1
    525c:	d01f      	beq.n	529e <gpiote_pin_int_cfg+0x62>
        case 0: return NRF_P0;
    525e:	4a1f      	ldr	r2, [pc, #124]	; (52dc <gpiote_pin_int_cfg+0xa0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5260:	f100 0180 	add.w	r1, r0, #128	; 0x80
    5264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5268:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    526c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    5270:	68f3      	ldr	r3, [r6, #12]
    5272:	40eb      	lsrs	r3, r5
    5274:	f013 0f01 	tst.w	r3, #1
    5278:	d02e      	beq.n	52d8 <gpiote_pin_int_cfg+0x9c>
		if (data->trig_edge & BIT(pin)) {
    527a:	6973      	ldr	r3, [r6, #20]
    527c:	40eb      	lsrs	r3, r5
    527e:	f013 0f01 	tst.w	r3, #1
    5282:	d015      	beq.n	52b0 <gpiote_pin_int_cfg+0x74>
				if (data->double_edge & BIT(pin)) {
    5284:	69b3      	ldr	r3, [r6, #24]
    5286:	40eb      	lsrs	r3, r5
    5288:	f013 0f01 	tst.w	r3, #1
    528c:	d109      	bne.n	52a2 <gpiote_pin_int_cfg+0x66>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    528e:	6931      	ldr	r1, [r6, #16]
    5290:	fa21 f505 	lsr.w	r5, r1, r5
    5294:	f015 0f01 	tst.w	r5, #1
    5298:	d008      	beq.n	52ac <gpiote_pin_int_cfg+0x70>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    529a:	2101      	movs	r1, #1
    529c:	e002      	b.n	52a4 <gpiote_pin_int_cfg+0x68>
        case 1: return NRF_P1;
    529e:	4a10      	ldr	r2, [pc, #64]	; (52e0 <gpiote_pin_int_cfg+0xa4>)
    52a0:	e7de      	b.n	5260 <gpiote_pin_int_cfg+0x24>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    52a2:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    52a4:	4620      	mov	r0, r4
    52a6:	f7ff ff83 	bl	51b0 <gpiote_channel_alloc>
    52aa:	e016      	b.n	52da <gpiote_pin_int_cfg+0x9e>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    52ac:	2102      	movs	r1, #2
    52ae:	e7f9      	b.n	52a4 <gpiote_pin_int_cfg+0x68>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    52b0:	6931      	ldr	r1, [r6, #16]
    52b2:	fa21 f505 	lsr.w	r5, r1, r5
    52b6:	f015 0f01 	tst.w	r5, #1
    52ba:	d10b      	bne.n	52d4 <gpiote_pin_int_cfg+0x98>
	return NRF_GPIO_PIN_SENSE_LOW;
    52bc:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    52be:	3080      	adds	r0, #128	; 0x80
    52c0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    52c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    52c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    52cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    52d0:	2000      	movs	r0, #0
}
    52d2:	e002      	b.n	52da <gpiote_pin_int_cfg+0x9e>
		return NRF_GPIO_PIN_SENSE_HIGH;
    52d4:	2102      	movs	r1, #2
    52d6:	e7f2      	b.n	52be <gpiote_pin_int_cfg+0x82>
	int res = 0;
    52d8:	2000      	movs	r0, #0
}
    52da:	bd70      	pop	{r4, r5, r6, pc}
    52dc:	50842500 	.word	0x50842500
    52e0:	50842800 	.word	0x50842800

000052e4 <gpio_nrfx_pin_interrupt_configure>:
{
    52e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    52e6:	6904      	ldr	r4, [r0, #16]
	return port->config;
    52e8:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    52ea:	7a2e      	ldrb	r6, [r5, #8]
    52ec:	f001 051f 	and.w	r5, r1, #31
    52f0:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    52f4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    52f8:	d025      	beq.n	5346 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    52fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    52fe:	d034      	beq.n	536a <gpio_nrfx_pin_interrupt_configure+0x86>
    5300:	68e5      	ldr	r5, [r4, #12]
    5302:	2601      	movs	r6, #1
    5304:	408e      	lsls	r6, r1
    5306:	4335      	orrs	r5, r6
    5308:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    530a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    530e:	d032      	beq.n	5376 <gpio_nrfx_pin_interrupt_configure+0x92>
    5310:	6962      	ldr	r2, [r4, #20]
    5312:	2501      	movs	r5, #1
    5314:	408d      	lsls	r5, r1
    5316:	ea22 0205 	bic.w	r2, r2, r5
    531a:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    531c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    5320:	d02e      	beq.n	5380 <gpio_nrfx_pin_interrupt_configure+0x9c>
    5322:	69a2      	ldr	r2, [r4, #24]
    5324:	2501      	movs	r5, #1
    5326:	408d      	lsls	r5, r1
    5328:	ea22 0205 	bic.w	r2, r2, r5
    532c:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    532e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    5332:	d02a      	beq.n	538a <gpio_nrfx_pin_interrupt_configure+0xa6>
    5334:	6923      	ldr	r3, [r4, #16]
    5336:	2201      	movs	r2, #1
    5338:	408a      	lsls	r2, r1
    533a:	ea23 0302 	bic.w	r3, r3, r2
    533e:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    5340:	f7ff ff7c 	bl	523c <gpiote_pin_int_cfg>
}
    5344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    5346:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    534a:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    534c:	2d01      	cmp	r5, #1
    534e:	d00a      	beq.n	5366 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    5350:	4f10      	ldr	r7, [pc, #64]	; (5394 <gpio_nrfx_pin_interrupt_configure+0xb0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5352:	f106 0580 	add.w	r5, r6, #128	; 0x80
    5356:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    535a:	f015 0f01 	tst.w	r5, #1
    535e:	d0cc      	beq.n	52fa <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    5360:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5364:	e7ee      	b.n	5344 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    5366:	4f0c      	ldr	r7, [pc, #48]	; (5398 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    5368:	e7f3      	b.n	5352 <gpio_nrfx_pin_interrupt_configure+0x6e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    536a:	68e5      	ldr	r5, [r4, #12]
    536c:	2601      	movs	r6, #1
    536e:	408e      	lsls	r6, r1
    5370:	ea25 0506 	bic.w	r5, r5, r6
    5374:	e7c8      	b.n	5308 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    5376:	6962      	ldr	r2, [r4, #20]
    5378:	2501      	movs	r5, #1
    537a:	408d      	lsls	r5, r1
    537c:	432a      	orrs	r2, r5
    537e:	e7cc      	b.n	531a <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    5380:	69a2      	ldr	r2, [r4, #24]
    5382:	2501      	movs	r5, #1
    5384:	408d      	lsls	r5, r1
    5386:	432a      	orrs	r2, r5
    5388:	e7d0      	b.n	532c <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    538a:	6923      	ldr	r3, [r4, #16]
    538c:	2201      	movs	r2, #1
    538e:	408a      	lsls	r2, r1
    5390:	4313      	orrs	r3, r2
    5392:	e7d4      	b.n	533e <gpio_nrfx_pin_interrupt_configure+0x5a>
    5394:	50842500 	.word	0x50842500
    5398:	50842800 	.word	0x50842800

0000539c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    539c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    539e:	4b0b      	ldr	r3, [pc, #44]	; (53cc <gpio_nrfx_init+0x30>)
    53a0:	781b      	ldrb	r3, [r3, #0]
    53a2:	b10b      	cbz	r3, 53a8 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    53a4:	2000      	movs	r0, #0
    53a6:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    53a8:	4b08      	ldr	r3, [pc, #32]	; (53cc <gpio_nrfx_init+0x30>)
    53aa:	2201      	movs	r2, #1
    53ac:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    53ae:	2200      	movs	r2, #0
    53b0:	2105      	movs	r1, #5
    53b2:	200d      	movs	r0, #13
    53b4:	f7fe ff54 	bl	4260 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    53b8:	200d      	movs	r0, #13
    53ba:	f7fe ff33 	bl	4224 <arch_irq_enable>
    53be:	4b04      	ldr	r3, [pc, #16]	; (53d0 <gpio_nrfx_init+0x34>)
    53c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    53c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    53c8:	e7ec      	b.n	53a4 <gpio_nrfx_init+0x8>
    53ca:	bf00      	nop
    53cc:	2002736a 	.word	0x2002736a
    53d0:	5000d000 	.word	0x5000d000

000053d4 <gpiote_event_handler>:
{
    53d4:	b570      	push	{r4, r5, r6, lr}
    53d6:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    53d8:	2300      	movs	r3, #0
    53da:	9302      	str	r3, [sp, #8]
    53dc:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    53de:	9300      	str	r3, [sp, #0]
    53e0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    53e2:	4b46      	ldr	r3, [pc, #280]	; (54fc <gpiote_event_handler+0x128>)
    53e4:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    53e6:	b90c      	cbnz	r4, 53ec <gpiote_event_handler+0x18>
{
    53e8:	2100      	movs	r1, #0
    53ea:	e011      	b.n	5410 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    53ec:	4d44      	ldr	r5, [pc, #272]	; (5500 <gpiote_event_handler+0x12c>)
    53ee:	4669      	mov	r1, sp
    53f0:	4628      	mov	r0, r5
    53f2:	f7ff fe5f 	bl	50b4 <check_level_trigger_pins>
		fired_triggers[0] =
    53f6:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    53f8:	a901      	add	r1, sp, #4
    53fa:	f105 0018 	add.w	r0, r5, #24
    53fe:	f7ff fe59 	bl	50b4 <check_level_trigger_pins>
		fired_triggers[1] =
    5402:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5404:	4b3d      	ldr	r3, [pc, #244]	; (54fc <gpiote_event_handler+0x128>)
    5406:	2200      	movs	r2, #0
    5408:	601a      	str	r2, [r3, #0]
    540a:	681b      	ldr	r3, [r3, #0]
}
    540c:	e7ec      	b.n	53e8 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    540e:	3101      	adds	r1, #1
    5410:	2907      	cmp	r1, #7
    5412:	d82d      	bhi.n	5470 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    5414:	f101 0340 	add.w	r3, r1, #64	; 0x40
    5418:	009b      	lsls	r3, r3, #2
    541a:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    541c:	2301      	movs	r3, #1
    541e:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    5420:	4838      	ldr	r0, [pc, #224]	; (5504 <gpiote_event_handler+0x130>)
    5422:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    5426:	4203      	tst	r3, r0
    5428:	d0f1      	beq.n	540e <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    542a:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    542e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    5432:	681b      	ldr	r3, [r3, #0]
    5434:	2b00      	cmp	r3, #0
    5436:	d0ea      	beq.n	540e <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5438:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    543c:	4831      	ldr	r0, [pc, #196]	; (5504 <gpiote_event_handler+0x130>)
    543e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    5442:	f3c0 3340 	ubfx	r3, r0, #13, #1
    5446:	f3c0 2004 	ubfx	r0, r0, #8, #5
    544a:	2501      	movs	r5, #1
    544c:	fa05 f000 	lsl.w	r0, r5, r0
    5450:	ad04      	add	r5, sp, #16
    5452:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5456:	f853 5c08 	ldr.w	r5, [r3, #-8]
    545a:	4305      	orrs	r5, r0
    545c:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    5460:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    5464:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5468:	2200      	movs	r2, #0
    546a:	601a      	str	r2, [r3, #0]
    546c:	681b      	ldr	r3, [r3, #0]
}
    546e:	e7ce      	b.n	540e <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    5470:	9e02      	ldr	r6, [sp, #8]
    5472:	b92e      	cbnz	r6, 5480 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    5474:	9e03      	ldr	r6, [sp, #12]
    5476:	b9ee      	cbnz	r6, 54b4 <gpiote_event_handler+0xe0>
	if (port_event) {
    5478:	2c00      	cmp	r4, #0
    547a:	d135      	bne.n	54e8 <gpiote_event_handler+0x114>
}
    547c:	b004      	add	sp, #16
    547e:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    5480:	4b21      	ldr	r3, [pc, #132]	; (5508 <gpiote_event_handler+0x134>)
    5482:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5484:	b119      	cbz	r1, 548e <gpiote_event_handler+0xba>
    5486:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5488:	b149      	cbz	r1, 549e <gpiote_event_handler+0xca>
	return node->next;
    548a:	680d      	ldr	r5, [r1, #0]
    548c:	e007      	b.n	549e <gpiote_event_handler+0xca>
    548e:	460d      	mov	r5, r1
    5490:	e005      	b.n	549e <gpiote_event_handler+0xca>
    5492:	b16d      	cbz	r5, 54b0 <gpiote_event_handler+0xdc>
    5494:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5496:	b105      	cbz	r5, 549a <gpiote_event_handler+0xc6>
	return node->next;
    5498:	682b      	ldr	r3, [r5, #0]
    549a:	4629      	mov	r1, r5
    549c:	461d      	mov	r5, r3
    549e:	2900      	cmp	r1, #0
    54a0:	d0e8      	beq.n	5474 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    54a2:	688a      	ldr	r2, [r1, #8]
    54a4:	4032      	ands	r2, r6
    54a6:	d0f4      	beq.n	5492 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    54a8:	684b      	ldr	r3, [r1, #4]
    54aa:	4815      	ldr	r0, [pc, #84]	; (5500 <gpiote_event_handler+0x12c>)
    54ac:	4798      	blx	r3
    54ae:	e7f0      	b.n	5492 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    54b0:	462b      	mov	r3, r5
    54b2:	e7f2      	b.n	549a <gpiote_event_handler+0xc6>
	return list->head;
    54b4:	4b15      	ldr	r3, [pc, #84]	; (550c <gpiote_event_handler+0x138>)
    54b6:	6859      	ldr	r1, [r3, #4]
    54b8:	b119      	cbz	r1, 54c2 <gpiote_event_handler+0xee>
    54ba:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    54bc:	b149      	cbz	r1, 54d2 <gpiote_event_handler+0xfe>
	return node->next;
    54be:	680d      	ldr	r5, [r1, #0]
    54c0:	e007      	b.n	54d2 <gpiote_event_handler+0xfe>
    54c2:	460d      	mov	r5, r1
    54c4:	e005      	b.n	54d2 <gpiote_event_handler+0xfe>
    54c6:	b16d      	cbz	r5, 54e4 <gpiote_event_handler+0x110>
    54c8:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    54ca:	b105      	cbz	r5, 54ce <gpiote_event_handler+0xfa>
	return node->next;
    54cc:	682b      	ldr	r3, [r5, #0]
    54ce:	4629      	mov	r1, r5
    54d0:	461d      	mov	r5, r3
    54d2:	2900      	cmp	r1, #0
    54d4:	d0d0      	beq.n	5478 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    54d6:	688a      	ldr	r2, [r1, #8]
    54d8:	4032      	ands	r2, r6
    54da:	d0f4      	beq.n	54c6 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    54dc:	684b      	ldr	r3, [r1, #4]
    54de:	480c      	ldr	r0, [pc, #48]	; (5510 <gpiote_event_handler+0x13c>)
    54e0:	4798      	blx	r3
    54e2:	e7f0      	b.n	54c6 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    54e4:	462b      	mov	r3, r5
    54e6:	e7f2      	b.n	54ce <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    54e8:	4c05      	ldr	r4, [pc, #20]	; (5500 <gpiote_event_handler+0x12c>)
    54ea:	4620      	mov	r0, r4
    54ec:	f7ff fda8 	bl	5040 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    54f0:	f104 0018 	add.w	r0, r4, #24
    54f4:	f7ff fda4 	bl	5040 <cfg_level_pins>
}
    54f8:	e7c0      	b.n	547c <gpiote_event_handler+0xa8>
    54fa:	bf00      	nop
    54fc:	5000d17c 	.word	0x5000d17c
    5500:	00019778 	.word	0x00019778
    5504:	5000d000 	.word	0x5000d000
    5508:	2002722c 	.word	0x2002722c
    550c:	20027248 	.word	0x20027248
    5510:	00019790 	.word	0x00019790

00005514 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    5514:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    5516:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    5518:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    551c:	d06f      	beq.n	55fe <baudrate_set+0xea>
    551e:	d83a      	bhi.n	5596 <baudrate_set+0x82>
    5520:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    5524:	d06e      	beq.n	5604 <baudrate_set+0xf0>
    5526:	d90a      	bls.n	553e <baudrate_set+0x2a>
    5528:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    552c:	d075      	beq.n	561a <baudrate_set+0x106>
    552e:	d924      	bls.n	557a <baudrate_set+0x66>
    5530:	f647 2312 	movw	r3, #31250	; 0x7a12
    5534:	4299      	cmp	r1, r3
    5536:	d12b      	bne.n	5590 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5538:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    553c:	e013      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    553e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    5542:	d061      	beq.n	5608 <baudrate_set+0xf4>
    5544:	d907      	bls.n	5556 <baudrate_set+0x42>
    5546:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    554a:	d063      	beq.n	5614 <baudrate_set+0x100>
    554c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5550:	d110      	bne.n	5574 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5552:	4b3c      	ldr	r3, [pc, #240]	; (5644 <baudrate_set+0x130>)
    5554:	e007      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    5556:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    555a:	d058      	beq.n	560e <baudrate_set+0xfa>
    555c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5560:	d105      	bne.n	556e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    5562:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5566:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    556a:	2000      	movs	r0, #0
    556c:	4770      	bx	lr
	switch (baudrate) {
    556e:	f06f 0015 	mvn.w	r0, #21
    5572:	4770      	bx	lr
    5574:	f06f 0015 	mvn.w	r0, #21
    5578:	4770      	bx	lr
    557a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    557e:	d04e      	beq.n	561e <baudrate_set+0x10a>
    5580:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    5584:	d101      	bne.n	558a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5586:	4b30      	ldr	r3, [pc, #192]	; (5648 <baudrate_set+0x134>)
    5588:	e7ed      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    558a:	f06f 0015 	mvn.w	r0, #21
    558e:	4770      	bx	lr
    5590:	f06f 0015 	mvn.w	r0, #21
    5594:	4770      	bx	lr
    5596:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    559a:	d042      	beq.n	5622 <baudrate_set+0x10e>
    559c:	d909      	bls.n	55b2 <baudrate_set+0x9e>
    559e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    55a2:	d046      	beq.n	5632 <baudrate_set+0x11e>
    55a4:	d91f      	bls.n	55e6 <baudrate_set+0xd2>
    55a6:	4b29      	ldr	r3, [pc, #164]	; (564c <baudrate_set+0x138>)
    55a8:	4299      	cmp	r1, r3
    55aa:	d148      	bne.n	563e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    55ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    55b0:	e7d9      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    55b2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    55b6:	d037      	beq.n	5628 <baudrate_set+0x114>
    55b8:	d905      	bls.n	55c6 <baudrate_set+0xb2>
    55ba:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    55be:	d10f      	bne.n	55e0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    55c0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    55c4:	e7cf      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    55c6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    55ca:	4299      	cmp	r1, r3
    55cc:	d02e      	beq.n	562c <baudrate_set+0x118>
    55ce:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    55d2:	d102      	bne.n	55da <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    55d4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    55d8:	e7c5      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    55da:	f06f 0015 	mvn.w	r0, #21
    55de:	4770      	bx	lr
    55e0:	f06f 0015 	mvn.w	r0, #21
    55e4:	4770      	bx	lr
    55e6:	4b1a      	ldr	r3, [pc, #104]	; (5650 <baudrate_set+0x13c>)
    55e8:	4299      	cmp	r1, r3
    55ea:	d025      	beq.n	5638 <baudrate_set+0x124>
    55ec:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    55f0:	d102      	bne.n	55f8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    55f2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    55f6:	e7b6      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    55f8:	f06f 0015 	mvn.w	r0, #21
    55fc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    55fe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5602:	e7b0      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5604:	4b13      	ldr	r3, [pc, #76]	; (5654 <baudrate_set+0x140>)
    5606:	e7ae      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5608:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    560c:	e7ab      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    560e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5612:	e7a8      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5614:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5618:	e7a5      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    561a:	4b0f      	ldr	r3, [pc, #60]	; (5658 <baudrate_set+0x144>)
    561c:	e7a3      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    561e:	4b0f      	ldr	r3, [pc, #60]	; (565c <baudrate_set+0x148>)
    5620:	e7a1      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5622:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5626:	e79e      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5628:	4b0d      	ldr	r3, [pc, #52]	; (5660 <baudrate_set+0x14c>)
    562a:	e79c      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    562c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5630:	e799      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5632:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5636:	e796      	b.n	5566 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5638:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    563c:	e793      	b.n	5566 <baudrate_set+0x52>
	switch (baudrate) {
    563e:	f06f 0015 	mvn.w	r0, #21
}
    5642:	4770      	bx	lr
    5644:	0013b000 	.word	0x0013b000
    5648:	004ea000 	.word	0x004ea000
    564c:	000f4240 	.word	0x000f4240
    5650:	0003d090 	.word	0x0003d090
    5654:	00275000 	.word	0x00275000
    5658:	0075c000 	.word	0x0075c000
    565c:	003af000 	.word	0x003af000
    5660:	013a9000 	.word	0x013a9000

00005664 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5668:	4605      	mov	r5, r0
    566a:	460f      	mov	r7, r1
	return dev->data;
    566c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5670:	f013 f829 	bl	186c6 <k_is_in_isr>
    5674:	b920      	cbnz	r0, 5680 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    5676:	4b16      	ldr	r3, [pc, #88]	; (56d0 <uarte_nrfx_poll_out+0x6c>)
    5678:	781b      	ldrb	r3, [r3, #0]
    567a:	b1ab      	cbz	r3, 56a8 <uarte_nrfx_poll_out+0x44>
    567c:	2300      	movs	r3, #0
    567e:	e000      	b.n	5682 <uarte_nrfx_poll_out+0x1e>
    5680:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    5682:	b19b      	cbz	r3, 56ac <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    5684:	f04f 0320 	mov.w	r3, #32
    5688:	f3ef 8411 	mrs	r4, BASEPRI
    568c:	f383 8812 	msr	BASEPRI_MAX, r3
    5690:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    5694:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    5696:	4628      	mov	r0, r5
    5698:	f00f fbe4 	bl	14e64 <is_tx_ready>
    569c:	b950      	cbnz	r0, 56b4 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    569e:	f384 8811 	msr	BASEPRI, r4
    56a2:	f3bf 8f6f 	isb	sy
}
    56a6:	e7ed      	b.n	5684 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    56a8:	2301      	movs	r3, #1
    56aa:	e7ea      	b.n	5682 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    56ac:	4628      	mov	r0, r5
    56ae:	f00f fcf6 	bl	1509e <wait_tx_ready>
    56b2:	4606      	mov	r6, r0
	}

	data->char_out = c;
    56b4:	4641      	mov	r1, r8
    56b6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    56ba:	2201      	movs	r2, #1
    56bc:	4628      	mov	r0, r5
    56be:	f00f fbeb 	bl	14e98 <tx_start>
	__asm__ volatile(
    56c2:	f386 8811 	msr	BASEPRI, r6
    56c6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    56ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56ce:	bf00      	nop
    56d0:	2002736b 	.word	0x2002736b

000056d4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    56d4:	b538      	push	{r3, r4, r5, lr}
    56d6:	4605      	mov	r5, r0
    56d8:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    56da:	f101 0016 	add.w	r0, r1, #22
    56de:	f000 fe7d 	bl	63dc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    56e2:	4b0a      	ldr	r3, [pc, #40]	; (570c <endtx_stoptx_ppi_init+0x38>)
    56e4:	4298      	cmp	r0, r3
    56e6:	d10e      	bne.n	5706 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    56e8:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    56ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    56ee:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    56f2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    56f6:	7da2      	ldrb	r2, [r4, #22]
    56f8:	2301      	movs	r3, #1
    56fa:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    56fc:	4a04      	ldr	r2, [pc, #16]	; (5710 <endtx_stoptx_ppi_init+0x3c>)
    56fe:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    5702:	2000      	movs	r0, #0
}
    5704:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    5706:	f06f 0004 	mvn.w	r0, #4
    570a:	e7fb      	b.n	5704 <endtx_stoptx_ppi_init+0x30>
    570c:	0bad0000 	.word	0x0bad0000
    5710:	50017000 	.word	0x50017000

00005714 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    5716:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    5718:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    571a:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    571c:	2300      	movs	r3, #0
    571e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5722:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    5724:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5726:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    572a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    572c:	2b01      	cmp	r3, #1
    572e:	f000 80a0 	beq.w	5872 <uarte_instance_init+0x15e>
        case 0: return NRF_P0;
    5732:	4a5a      	ldr	r2, [pc, #360]	; (589c <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5734:	2301      	movs	r3, #1
    5736:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    5738:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(cfg->pseltxd);
    573a:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    573c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5740:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5742:	2b01      	cmp	r3, #1
    5744:	f000 8097 	beq.w	5876 <uarte_instance_init+0x162>
        case 0: return NRF_P0;
    5748:	4954      	ldr	r1, [pc, #336]	; (589c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    574a:	3280      	adds	r2, #128	; 0x80
    574c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    5750:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5754:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    5758:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    575c:	68e3      	ldr	r3, [r4, #12]
    575e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5762:	d010      	beq.n	5786 <uarte_instance_init+0x72>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    5764:	7e27      	ldrb	r7, [r4, #24]
    *p_pin = pin_number & 0x1F;
    5766:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    576a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    576c:	2b01      	cmp	r3, #1
    576e:	f000 8084 	beq.w	587a <uarte_instance_init+0x166>
        case 0: return NRF_P0;
    5772:	494a      	ldr	r1, [pc, #296]	; (589c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5774:	3280      	adds	r2, #128	; 0x80
    5776:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    577a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    577e:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    5782:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    5786:	68a2      	ldr	r2, [r4, #8]
    5788:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    578a:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    578e:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    5792:	6923      	ldr	r3, [r4, #16]
    5794:	f1b3 3fff 	cmp.w	r3, #4294967295
    5798:	d00f      	beq.n	57ba <uarte_instance_init+0xa6>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    579a:	7e67      	ldrb	r7, [r4, #25]
    *p_pin = pin_number & 0x1F;
    579c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    57a0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57a2:	2b01      	cmp	r3, #1
    57a4:	d06b      	beq.n	587e <uarte_instance_init+0x16a>
        case 0: return NRF_P0;
    57a6:	493d      	ldr	r1, [pc, #244]	; (589c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    57a8:	3280      	adds	r2, #128	; 0x80
    57aa:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    57ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    57b2:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    57b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    57ba:	6963      	ldr	r3, [r4, #20]
    57bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    57c0:	d018      	beq.n	57f4 <uarte_instance_init+0xe0>
    *p_pin = pin_number & 0x1F;
    57c2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    57c6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57c8:	2b01      	cmp	r3, #1
    57ca:	d05a      	beq.n	5882 <uarte_instance_init+0x16e>
        case 0: return NRF_P0;
    57cc:	4933      	ldr	r1, [pc, #204]	; (589c <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    57ce:	2301      	movs	r3, #1
    57d0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    57d2:	608b      	str	r3, [r1, #8]
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    57d4:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    57d6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    57da:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57dc:	2b01      	cmp	r3, #1
    57de:	d052      	beq.n	5886 <uarte_instance_init+0x172>
        case 0: return NRF_P0;
    57e0:	492e      	ldr	r1, [pc, #184]	; (589c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    57e2:	3280      	adds	r2, #128	; 0x80
    57e4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    57e8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    57ec:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    57f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    57f4:	6962      	ldr	r2, [r4, #20]
    57f6:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    57f8:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    57fc:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    5800:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5802:	3104      	adds	r1, #4
    5804:	f00f fab2 	bl	14d6c <uarte_nrfx_configure>
	if (err) {
    5808:	4607      	mov	r7, r0
    580a:	bb80      	cbnz	r0, 586e <uarte_instance_init+0x15a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    580c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    580e:	f013 0f08 	tst.w	r3, #8
    5812:	d13a      	bne.n	588a <uarte_instance_init+0x176>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5814:	2308      	movs	r3, #8
    5816:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    581a:	68e3      	ldr	r3, [r4, #12]
    581c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5820:	d00c      	beq.n	583c <uarte_instance_init+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5822:	2300      	movs	r3, #0
    5824:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5828:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    582c:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5830:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5834:	2301      	movs	r3, #1
    5836:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    583a:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    583c:	6863      	ldr	r3, [r4, #4]
    583e:	f013 0f08 	tst.w	r3, #8
    5842:	d103      	bne.n	584c <uarte_instance_init+0x138>
    p_reg->INTENSET = mask;
    5844:	f44f 7380 	mov.w	r3, #256	; 0x100
    5848:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    584c:	6863      	ldr	r3, [r4, #4]
    584e:	f013 0f10 	tst.w	r3, #16
    5852:	d003      	beq.n	585c <uarte_instance_init+0x148>
    5854:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5858:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    585c:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    585e:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5862:	2300      	movs	r3, #0
    5864:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5868:	2301      	movs	r3, #1
    586a:	60ab      	str	r3, [r5, #8]
    586c:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    586e:	4638      	mov	r0, r7
    5870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    5872:	4a0b      	ldr	r2, [pc, #44]	; (58a0 <uarte_instance_init+0x18c>)
    5874:	e75e      	b.n	5734 <uarte_instance_init+0x20>
    5876:	490a      	ldr	r1, [pc, #40]	; (58a0 <uarte_instance_init+0x18c>)
    5878:	e767      	b.n	574a <uarte_instance_init+0x36>
    587a:	4909      	ldr	r1, [pc, #36]	; (58a0 <uarte_instance_init+0x18c>)
    587c:	e77a      	b.n	5774 <uarte_instance_init+0x60>
    587e:	4908      	ldr	r1, [pc, #32]	; (58a0 <uarte_instance_init+0x18c>)
    5880:	e792      	b.n	57a8 <uarte_instance_init+0x94>
    5882:	4907      	ldr	r1, [pc, #28]	; (58a0 <uarte_instance_init+0x18c>)
    5884:	e7a3      	b.n	57ce <uarte_instance_init+0xba>
    5886:	4906      	ldr	r1, [pc, #24]	; (58a0 <uarte_instance_init+0x18c>)
    5888:	e7ab      	b.n	57e2 <uarte_instance_init+0xce>
		err = endtx_stoptx_ppi_init(uarte, data);
    588a:	4631      	mov	r1, r6
    588c:	4628      	mov	r0, r5
    588e:	f7ff ff21 	bl	56d4 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5892:	2800      	cmp	r0, #0
    5894:	dabe      	bge.n	5814 <uarte_instance_init+0x100>
			return err;
    5896:	4607      	mov	r7, r0
    5898:	e7e9      	b.n	586e <uarte_instance_init+0x15a>
    589a:	bf00      	nop
    589c:	50842500 	.word	0x50842500
    58a0:	50842800 	.word	0x50842800

000058a4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    58a4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    58a8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    58ac:	4b01      	ldr	r3, [pc, #4]	; (58b4 <set_comparator+0x10>)
    58ae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    58b2:	4770      	bx	lr
    58b4:	50015000 	.word	0x50015000

000058b8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    58b8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    58bc:	4b01      	ldr	r3, [pc, #4]	; (58c4 <get_comparator+0xc>)
    58be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    58c2:	4770      	bx	lr
    58c4:	50015000 	.word	0x50015000

000058c8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    58c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58cc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    58ce:	4a02      	ldr	r2, [pc, #8]	; (58d8 <event_enable+0x10>)
    58d0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    58d4:	4770      	bx	lr
    58d6:	bf00      	nop
    58d8:	50015000 	.word	0x50015000

000058dc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    58dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58e0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    58e2:	4a02      	ldr	r2, [pc, #8]	; (58ec <event_disable+0x10>)
    58e4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    58e8:	4770      	bx	lr
    58ea:	bf00      	nop
    58ec:	50015000 	.word	0x50015000

000058f0 <counter>:
     return p_reg->COUNTER;
    58f0:	4b01      	ldr	r3, [pc, #4]	; (58f8 <counter+0x8>)
    58f2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    58f6:	4770      	bx	lr
    58f8:	50015000 	.word	0x50015000

000058fc <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    58fc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    58fe:	2301      	movs	r3, #1
    5900:	4083      	lsls	r3, r0
    5902:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5904:	4a0d      	ldr	r2, [pc, #52]	; (593c <compare_int_lock+0x40>)
    5906:	e8d2 1fef 	ldaex	r1, [r2]
    590a:	ea01 0c04 	and.w	ip, r1, r4
    590e:	e8c2 cfee 	stlex	lr, ip, [r2]
    5912:	f1be 0f00 	cmp.w	lr, #0
    5916:	d1f6      	bne.n	5906 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5918:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    591c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5920:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    5924:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    5928:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    592c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5930:	420b      	tst	r3, r1
}
    5932:	bf14      	ite	ne
    5934:	2001      	movne	r0, #1
    5936:	2000      	moveq	r0, #0
    5938:	bd10      	pop	{r4, pc}
    593a:	bf00      	nop
    593c:	20027288 	.word	0x20027288

00005940 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5940:	b570      	push	{r4, r5, r6, lr}
    5942:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5944:	f00f fbf7 	bl	15136 <full_int_lock>
    5948:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    594a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    594e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    5950:	4a15      	ldr	r2, [pc, #84]	; (59a8 <channel_processing_check_and_clear+0x68>)
    5952:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5956:	4213      	tst	r3, r2
    5958:	d105      	bne.n	5966 <channel_processing_check_and_clear+0x26>
	bool result = false;
    595a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    595c:	4628      	mov	r0, r5
    595e:	f00f fbf3 	bl	15148 <full_int_unlock>

	return result;
}
    5962:	4630      	mov	r0, r6
    5964:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5966:	2301      	movs	r3, #1
    5968:	40a3      	lsls	r3, r4
    596a:	43db      	mvns	r3, r3
    596c:	4a0f      	ldr	r2, [pc, #60]	; (59ac <channel_processing_check_and_clear+0x6c>)
    596e:	e8d2 1fef 	ldaex	r1, [r2]
    5972:	ea01 0003 	and.w	r0, r1, r3
    5976:	e8c2 0fe6 	stlex	r6, r0, [r2]
    597a:	2e00      	cmp	r6, #0
    597c:	d1f7      	bne.n	596e <channel_processing_check_and_clear+0x2e>
    597e:	b959      	cbnz	r1, 5998 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5980:	f104 0350 	add.w	r3, r4, #80	; 0x50
    5984:	009b      	lsls	r3, r3, #2
    5986:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5988:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    598c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5990:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5992:	b113      	cbz	r3, 599a <channel_processing_check_and_clear+0x5a>
    5994:	2301      	movs	r3, #1
    5996:	e000      	b.n	599a <channel_processing_check_and_clear+0x5a>
    5998:	2301      	movs	r3, #1
		if (result) {
    599a:	461e      	mov	r6, r3
    599c:	2b00      	cmp	r3, #0
    599e:	d0dd      	beq.n	595c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    59a0:	4620      	mov	r0, r4
    59a2:	f00f fbb9 	bl	15118 <event_clear>
    59a6:	e7d9      	b.n	595c <channel_processing_check_and_clear+0x1c>
    59a8:	50015000 	.word	0x50015000
    59ac:	20027284 	.word	0x20027284

000059b0 <compare_int_unlock>:
	if (key) {
    59b0:	b901      	cbnz	r1, 59b4 <compare_int_unlock+0x4>
}
    59b2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    59b4:	2301      	movs	r3, #1
    59b6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    59b8:	4a0e      	ldr	r2, [pc, #56]	; (59f4 <compare_int_unlock+0x44>)
    59ba:	e8d2 1fef 	ldaex	r1, [r2]
    59be:	4319      	orrs	r1, r3
    59c0:	e8c2 1fec 	stlex	ip, r1, [r2]
    59c4:	f1bc 0f00 	cmp.w	ip, #0
    59c8:	d1f7      	bne.n	59ba <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    59ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    59ce:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    59d0:	4a09      	ldr	r2, [pc, #36]	; (59f8 <compare_int_unlock+0x48>)
    59d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    59d6:	4b09      	ldr	r3, [pc, #36]	; (59fc <compare_int_unlock+0x4c>)
    59d8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    59dc:	fa23 f000 	lsr.w	r0, r3, r0
    59e0:	f010 0f01 	tst.w	r0, #1
    59e4:	d0e5      	beq.n	59b2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59e6:	4b06      	ldr	r3, [pc, #24]	; (5a00 <compare_int_unlock+0x50>)
    59e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    59ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    59f0:	e7df      	b.n	59b2 <compare_int_unlock+0x2>
    59f2:	bf00      	nop
    59f4:	20027288 	.word	0x20027288
    59f8:	50015000 	.word	0x50015000
    59fc:	20027284 	.word	0x20027284
    5a00:	e000e100 	.word	0xe000e100

00005a04 <sys_clock_timeout_handler>:
{
    5a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a06:	4607      	mov	r7, r0
    5a08:	4614      	mov	r4, r2
    5a0a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    5a0c:	4610      	mov	r0, r2
    5a0e:	4619      	mov	r1, r3
    5a10:	f00f fb8e 	bl	15130 <absolute_time_to_cc>
    5a14:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5a16:	4b15      	ldr	r3, [pc, #84]	; (5a6c <sys_clock_timeout_handler+0x68>)
    5a18:	681a      	ldr	r2, [r3, #0]
    5a1a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    5a1c:	601c      	str	r4, [r3, #0]
    5a1e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5a20:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5a24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5a28:	d308      	bcc.n	5a3c <sys_clock_timeout_handler+0x38>
	return false;
    5a2a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5a2c:	f00c fc0e 	bl	1224c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5a30:	4638      	mov	r0, r7
    5a32:	f7ff ff41 	bl	58b8 <get_comparator>
    5a36:	42a8      	cmp	r0, r5
    5a38:	d00c      	beq.n	5a54 <sys_clock_timeout_handler+0x50>
}
    5a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5a3c:	4b0c      	ldr	r3, [pc, #48]	; (5a70 <sys_clock_timeout_handler+0x6c>)
    5a3e:	6819      	ldr	r1, [r3, #0]
    5a40:	0a0b      	lsrs	r3, r1, #8
    5a42:	060a      	lsls	r2, r1, #24
    5a44:	1952      	adds	r2, r2, r5
    5a46:	f143 0300 	adc.w	r3, r3, #0
    5a4a:	490a      	ldr	r1, [pc, #40]	; (5a74 <sys_clock_timeout_handler+0x70>)
    5a4c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5a50:	2401      	movs	r4, #1
    5a52:	e7eb      	b.n	5a2c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    5a54:	b11c      	cbz	r4, 5a5e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    5a56:	4638      	mov	r0, r7
    5a58:	f7ff ff36 	bl	58c8 <event_enable>
}
    5a5c:	e7ed      	b.n	5a3a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    5a5e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    5a62:	4638      	mov	r0, r7
    5a64:	f7ff ff1e 	bl	58a4 <set_comparator>
    5a68:	e7f5      	b.n	5a56 <sys_clock_timeout_handler+0x52>
    5a6a:	bf00      	nop
    5a6c:	20018418 	.word	0x20018418
    5a70:	2002728c 	.word	0x2002728c
    5a74:	20018400 	.word	0x20018400

00005a78 <z_nrf_rtc_timer_read>:
{
    5a78:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5a7a:	4b0d      	ldr	r3, [pc, #52]	; (5ab0 <z_nrf_rtc_timer_read+0x38>)
    5a7c:	681b      	ldr	r3, [r3, #0]
    5a7e:	0a1d      	lsrs	r5, r3, #8
    5a80:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5a82:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    5a86:	f7ff ff33 	bl	58f0 <counter>
    5a8a:	4603      	mov	r3, r0
	val += cntr;
    5a8c:	1820      	adds	r0, r4, r0
    5a8e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5a96:	d20a      	bcs.n	5aae <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    5a98:	4b06      	ldr	r3, [pc, #24]	; (5ab4 <z_nrf_rtc_timer_read+0x3c>)
    5a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    5a9e:	4299      	cmp	r1, r3
    5aa0:	bf08      	it	eq
    5aa2:	4290      	cmpeq	r0, r2
    5aa4:	d203      	bcs.n	5aae <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    5aa6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5aaa:	f141 0100 	adc.w	r1, r1, #0
}
    5aae:	bd38      	pop	{r3, r4, r5, pc}
    5ab0:	2002728c 	.word	0x2002728c
    5ab4:	20018400 	.word	0x20018400

00005ab8 <compare_set_nolocks>:
{
    5ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5abc:	4606      	mov	r6, r0
    5abe:	4614      	mov	r4, r2
    5ac0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    5ac2:	4610      	mov	r0, r2
    5ac4:	4619      	mov	r1, r3
    5ac6:	f00f fb33 	bl	15130 <absolute_time_to_cc>
    5aca:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5acc:	f7ff ffd4 	bl	5a78 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5ad0:	42a9      	cmp	r1, r5
    5ad2:	bf08      	it	eq
    5ad4:	42a0      	cmpeq	r0, r4
    5ad6:	d21e      	bcs.n	5b16 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5ad8:	ebb4 0800 	subs.w	r8, r4, r0
    5adc:	eb65 0901 	sbc.w	r9, r5, r1
    5ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5ae4:	2300      	movs	r3, #0
    5ae6:	454b      	cmp	r3, r9
    5ae8:	bf08      	it	eq
    5aea:	4542      	cmpeq	r2, r8
    5aec:	d32a      	bcc.n	5b44 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
    5aee:	4b17      	ldr	r3, [pc, #92]	; (5b4c <compare_set_nolocks+0x94>)
    5af0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    5af4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5af8:	42ab      	cmp	r3, r5
    5afa:	bf08      	it	eq
    5afc:	42a2      	cmpeq	r2, r4
    5afe:	d014      	beq.n	5b2a <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    5b00:	4639      	mov	r1, r7
    5b02:	4630      	mov	r0, r6
    5b04:	f00f fb25 	bl	15152 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    5b08:	4639      	mov	r1, r7
    5b0a:	f00f fb01 	bl	15110 <counter_sub>
    5b0e:	1824      	adds	r4, r4, r0
    5b10:	f145 0500 	adc.w	r5, r5, #0
    5b14:	e009      	b.n	5b2a <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    5b16:	2301      	movs	r3, #1
    5b18:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5b1a:	4a0d      	ldr	r2, [pc, #52]	; (5b50 <compare_set_nolocks+0x98>)
    5b1c:	e8d2 1fef 	ldaex	r1, [r2]
    5b20:	4319      	orrs	r1, r3
    5b22:	e8c2 1fe0 	stlex	r0, r1, [r2]
    5b26:	2800      	cmp	r0, #0
    5b28:	d1f8      	bne.n	5b1c <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
    5b2a:	4b08      	ldr	r3, [pc, #32]	; (5b4c <compare_set_nolocks+0x94>)
    5b2c:	0132      	lsls	r2, r6, #4
    5b2e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    5b32:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    5b36:	9908      	ldr	r1, [sp, #32]
    5b38:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    5b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b3c:	6073      	str	r3, [r6, #4]
	return ret;
    5b3e:	2000      	movs	r0, #0
}
    5b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    5b44:	f06f 0015 	mvn.w	r0, #21
    5b48:	e7fa      	b.n	5b40 <compare_set_nolocks+0x88>
    5b4a:	bf00      	nop
    5b4c:	20018408 	.word	0x20018408
    5b50:	20027284 	.word	0x20027284

00005b54 <process_channel>:

static void process_channel(int32_t chan)
{
    5b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b58:	b082      	sub	sp, #8
    5b5a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    5b5c:	f7ff fef0 	bl	5940 <channel_processing_check_and_clear>
    5b60:	b910      	cbnz	r0, 5b68 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    5b62:	b002      	add	sp, #8
    5b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    5b68:	f7ff ff86 	bl	5a78 <z_nrf_rtc_timer_read>
    5b6c:	4606      	mov	r6, r0
    5b6e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    5b70:	f00f fae1 	bl	15136 <full_int_lock>
    5b74:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    5b76:	4b13      	ldr	r3, [pc, #76]	; (5bc4 <process_channel+0x70>)
    5b78:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5b7c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5b80:	454f      	cmp	r7, r9
    5b82:	bf08      	it	eq
    5b84:	4546      	cmpeq	r6, r8
    5b86:	d20b      	bcs.n	5ba0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5b88:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    5b8a:	4650      	mov	r0, sl
    5b8c:	f00f fadc 	bl	15148 <full_int_unlock>
		if (handler) {
    5b90:	2e00      	cmp	r6, #0
    5b92:	d0e6      	beq.n	5b62 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    5b94:	9500      	str	r5, [sp, #0]
    5b96:	4642      	mov	r2, r8
    5b98:	464b      	mov	r3, r9
    5b9a:	4620      	mov	r0, r4
    5b9c:	47b0      	blx	r6
}
    5b9e:	e7e0      	b.n	5b62 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5ba0:	4a08      	ldr	r2, [pc, #32]	; (5bc4 <process_channel+0x70>)
    5ba2:	0123      	lsls	r3, r4, #4
    5ba4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5ba8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    5baa:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    5bac:	2000      	movs	r0, #0
    5bae:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5bb0:	f04f 32ff 	mov.w	r2, #4294967295
    5bb4:	f04f 33ff 	mov.w	r3, #4294967295
    5bb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    5bbc:	4620      	mov	r0, r4
    5bbe:	f7ff fe8d 	bl	58dc <event_disable>
    5bc2:	e7e2      	b.n	5b8a <process_channel+0x36>
    5bc4:	20018408 	.word	0x20018408

00005bc8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5bc8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    5bca:	4b0d      	ldr	r3, [pc, #52]	; (5c00 <rtc_nrf_isr+0x38>)
    5bcc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5bd0:	f013 0f02 	tst.w	r3, #2
    5bd4:	d00a      	beq.n	5bec <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bd6:	4b0b      	ldr	r3, [pc, #44]	; (5c04 <rtc_nrf_isr+0x3c>)
    5bd8:	681b      	ldr	r3, [r3, #0]
    5bda:	b13b      	cbz	r3, 5bec <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5bdc:	4b09      	ldr	r3, [pc, #36]	; (5c04 <rtc_nrf_isr+0x3c>)
    5bde:	2200      	movs	r2, #0
    5be0:	601a      	str	r2, [r3, #0]
    5be2:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    5be4:	4a08      	ldr	r2, [pc, #32]	; (5c08 <rtc_nrf_isr+0x40>)
    5be6:	6813      	ldr	r3, [r2, #0]
    5be8:	3301      	adds	r3, #1
    5bea:	6013      	str	r3, [r2, #0]
{
    5bec:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5bee:	2c00      	cmp	r4, #0
    5bf0:	dd00      	ble.n	5bf4 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    5bf2:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5bf4:	4620      	mov	r0, r4
    5bf6:	f7ff ffad 	bl	5b54 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5bfa:	3401      	adds	r4, #1
    5bfc:	e7f7      	b.n	5bee <rtc_nrf_isr+0x26>
    5bfe:	bf00      	nop
    5c00:	50015000 	.word	0x50015000
    5c04:	50015104 	.word	0x50015104
    5c08:	2002728c 	.word	0x2002728c

00005c0c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    5c0c:	b530      	push	{r4, r5, lr}
    5c0e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    5c10:	2300      	movs	r3, #0
    5c12:	4a1f      	ldr	r2, [pc, #124]	; (5c90 <sys_clock_driver_init+0x84>)
    5c14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5c18:	2b00      	cmp	r3, #0
    5c1a:	dd27      	ble.n	5c6c <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    5c1c:	4c1c      	ldr	r4, [pc, #112]	; (5c90 <sys_clock_driver_init+0x84>)
    5c1e:	2502      	movs	r5, #2
    5c20:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c24:	4b1b      	ldr	r3, [pc, #108]	; (5c94 <sys_clock_driver_init+0x88>)
    5c26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    5c2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5c2e:	2200      	movs	r2, #0
    5c30:	2101      	movs	r1, #1
    5c32:	2015      	movs	r0, #21
    5c34:	f7fe fb14 	bl	4260 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5c38:	2015      	movs	r0, #21
    5c3a:	f7fe faf3 	bl	4224 <arch_irq_enable>
    5c3e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5c42:	2301      	movs	r3, #1
    5c44:	4a14      	ldr	r2, [pc, #80]	; (5c98 <sys_clock_driver_init+0x8c>)
    5c46:	6013      	str	r3, [r2, #0]
    5c48:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5c4a:	4a14      	ldr	r2, [pc, #80]	; (5c9c <sys_clock_driver_init+0x90>)
    5c4c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5c4e:	2400      	movs	r4, #0
    5c50:	9401      	str	r4, [sp, #4]
    5c52:	4b13      	ldr	r3, [pc, #76]	; (5ca0 <sys_clock_driver_init+0x94>)
    5c54:	9300      	str	r3, [sp, #0]
    5c56:	4a13      	ldr	r2, [pc, #76]	; (5ca4 <sys_clock_driver_init+0x98>)
    5c58:	2300      	movs	r3, #0
    5c5a:	4620      	mov	r0, r4
    5c5c:	f00f fab4 	bl	151c8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5c60:	4628      	mov	r0, r5
    5c62:	f7ff f90b 	bl	4e7c <z_nrf_clock_control_lf_on>

	return 0;
}
    5c66:	4620      	mov	r0, r4
    5c68:	b003      	add	sp, #12
    5c6a:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5c6c:	4a0e      	ldr	r2, [pc, #56]	; (5ca8 <sys_clock_driver_init+0x9c>)
    5c6e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5c72:	f04f 30ff 	mov.w	r0, #4294967295
    5c76:	f04f 31ff 	mov.w	r1, #4294967295
    5c7a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5c82:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    5c84:	4902      	ldr	r1, [pc, #8]	; (5c90 <sys_clock_driver_init+0x84>)
    5c86:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5c8a:	3301      	adds	r3, #1
    5c8c:	e7c4      	b.n	5c18 <sys_clock_driver_init+0xc>
    5c8e:	bf00      	nop
    5c90:	50015000 	.word	0x50015000
    5c94:	e000e100 	.word	0xe000e100
    5c98:	50015008 	.word	0x50015008
    5c9c:	20027288 	.word	0x20027288
    5ca0:	00005a05 	.word	0x00005a05
    5ca4:	007fffff 	.word	0x007fffff
    5ca8:	20018408 	.word	0x20018408

00005cac <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    5cac:	b510      	push	{r4, lr}
    5cae:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5cb0:	f1b0 3fff 	cmp.w	r0, #4294967295
    5cb4:	d007      	beq.n	5cc6 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5cb6:	1e44      	subs	r4, r0, #1
    5cb8:	2c00      	cmp	r4, #0
    5cba:	dd07      	ble.n	5ccc <sys_clock_set_timeout+0x20>
    5cbc:	4b11      	ldr	r3, [pc, #68]	; (5d04 <sys_clock_set_timeout+0x58>)
    5cbe:	429c      	cmp	r4, r3
    5cc0:	dd05      	ble.n	5cce <sys_clock_set_timeout+0x22>
    5cc2:	4c11      	ldr	r4, [pc, #68]	; (5d08 <sys_clock_set_timeout+0x5c>)
    5cc4:	e003      	b.n	5cce <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5cc6:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    5cca:	e7f4      	b.n	5cb6 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5ccc:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5cce:	f7ff fed3 	bl	5a78 <z_nrf_rtc_timer_read>
    5cd2:	4b0e      	ldr	r3, [pc, #56]	; (5d0c <sys_clock_set_timeout+0x60>)
    5cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cd8:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    5cda:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5cde:	d300      	bcc.n	5ce2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5ce0:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5ce2:	4404      	add	r4, r0
    5ce4:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5ce6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    5cea:	d300      	bcc.n	5cee <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    5cec:	4c06      	ldr	r4, [pc, #24]	; (5d08 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5cee:	2000      	movs	r0, #0
    5cf0:	9001      	str	r0, [sp, #4]
    5cf2:	4907      	ldr	r1, [pc, #28]	; (5d10 <sys_clock_set_timeout+0x64>)
    5cf4:	9100      	str	r1, [sp, #0]
    5cf6:	1912      	adds	r2, r2, r4
    5cf8:	f143 0300 	adc.w	r3, r3, #0
    5cfc:	f00f fa64 	bl	151c8 <compare_set>
}
    5d00:	b002      	add	sp, #8
    5d02:	bd10      	pop	{r4, pc}
    5d04:	007ffffe 	.word	0x007ffffe
    5d08:	007fffff 	.word	0x007fffff
    5d0c:	20018418 	.word	0x20018418
    5d10:	00005a05 	.word	0x00005a05

00005d14 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    5d14:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5d16:	f7ff feaf 	bl	5a78 <z_nrf_rtc_timer_read>
    5d1a:	4b02      	ldr	r3, [pc, #8]	; (5d24 <sys_clock_elapsed+0x10>)
    5d1c:	681b      	ldr	r3, [r3, #0]
}
    5d1e:	1ac0      	subs	r0, r0, r3
    5d20:	bd08      	pop	{r3, pc}
    5d22:	bf00      	nop
    5d24:	20018418 	.word	0x20018418

00005d28 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d28:	4b08      	ldr	r3, [pc, #32]	; (5d4c <nrf53_errata_42+0x24>)
    5d2a:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d2c:	3304      	adds	r3, #4
    5d2e:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d30:	2a07      	cmp	r2, #7
    5d32:	d001      	beq.n	5d38 <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d34:	2000      	movs	r0, #0
    5d36:	4770      	bx	lr
                    switch(var2)
    5d38:	3b02      	subs	r3, #2
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d804      	bhi.n	5d48 <nrf53_errata_42+0x20>
    5d3e:	e8df f003 	tbb	[pc, r3]
    5d42:	01          	.byte	0x01
    5d43:	00          	.byte	0x00
                if (var1 == 0x07)
    5d44:	2001      	movs	r0, #1
    5d46:	4770      	bx	lr
                            return false;
    5d48:	2000      	movs	r0, #0
    #endif
}
    5d4a:	4770      	bx	lr
    5d4c:	00ff0130 	.word	0x00ff0130

00005d50 <nrf53_errata_46>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d50:	4b0a      	ldr	r3, [pc, #40]	; (5d7c <nrf53_errata_46+0x2c>)
    5d52:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d54:	3304      	adds	r3, #4
    5d56:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d58:	2a07      	cmp	r2, #7
    5d5a:	d001      	beq.n	5d60 <nrf53_errata_46+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d5c:	2000      	movs	r0, #0
    5d5e:	4770      	bx	lr
                    switch(var2)
    5d60:	2b04      	cmp	r3, #4
    5d62:	d007      	beq.n	5d74 <nrf53_errata_46+0x24>
    5d64:	d808      	bhi.n	5d78 <nrf53_errata_46+0x28>
    5d66:	3b02      	subs	r3, #2
    5d68:	2b01      	cmp	r3, #1
    5d6a:	d801      	bhi.n	5d70 <nrf53_errata_46+0x20>
    5d6c:	2001      	movs	r0, #1
    #endif
}
    5d6e:	4770      	bx	lr
                            return false;
    5d70:	2000      	movs	r0, #0
    5d72:	4770      	bx	lr
                            return false;
    5d74:	2000      	movs	r0, #0
    5d76:	4770      	bx	lr
                            return false;
    5d78:	2000      	movs	r0, #0
    5d7a:	4770      	bx	lr
    5d7c:	00ff0130 	.word	0x00ff0130

00005d80 <nrf53_errata_49>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d80:	4b08      	ldr	r3, [pc, #32]	; (5da4 <nrf53_errata_49+0x24>)
    5d82:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d84:	3304      	adds	r3, #4
    5d86:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5d88:	2a07      	cmp	r2, #7
    5d8a:	d001      	beq.n	5d90 <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d8c:	2000      	movs	r0, #0
    5d8e:	4770      	bx	lr
                    switch(var2)
    5d90:	3b02      	subs	r3, #2
    5d92:	2b00      	cmp	r3, #0
    5d94:	d804      	bhi.n	5da0 <nrf53_errata_49+0x20>
    5d96:	e8df f003 	tbb	[pc, r3]
    5d9a:	01          	.byte	0x01
    5d9b:	00          	.byte	0x00
                if (var1 == 0x07)
    5d9c:	2001      	movs	r0, #1
    5d9e:	4770      	bx	lr
                            return false;
    5da0:	2000      	movs	r0, #0
    #endif
}
    5da2:	4770      	bx	lr
    5da4:	00ff0130 	.word	0x00ff0130

00005da8 <nrf53_errata_55>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5da8:	4b03      	ldr	r3, [pc, #12]	; (5db8 <nrf53_errata_55+0x10>)
    5daa:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5dac:	2b07      	cmp	r3, #7
    5dae:	d001      	beq.n	5db4 <nrf53_errata_55+0xc>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5db0:	2000      	movs	r0, #0
    5db2:	4770      	bx	lr
                            return true;
    5db4:	2001      	movs	r0, #1
    #endif
}
    5db6:	4770      	bx	lr
    5db8:	00ff0130 	.word	0x00ff0130

00005dbc <nrf53_errata_64>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5dbc:	4b08      	ldr	r3, [pc, #32]	; (5de0 <nrf53_errata_64+0x24>)
    5dbe:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5dc0:	3304      	adds	r3, #4
    5dc2:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5dc4:	2a07      	cmp	r2, #7
    5dc6:	d001      	beq.n	5dcc <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5dc8:	2000      	movs	r0, #0
    5dca:	4770      	bx	lr
                    switch(var2)
    5dcc:	3b02      	subs	r3, #2
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d804      	bhi.n	5ddc <nrf53_errata_64+0x20>
    5dd2:	e8df f003 	tbb	[pc, r3]
    5dd6:	01          	.byte	0x01
    5dd7:	00          	.byte	0x00
                if (var1 == 0x07)
    5dd8:	2001      	movs	r0, #1
    5dda:	4770      	bx	lr
                            return false;
    5ddc:	2000      	movs	r0, #0
    #endif
}
    5dde:	4770      	bx	lr
    5de0:	00ff0130 	.word	0x00ff0130

00005de4 <nrf53_errata_69>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5de4:	4b08      	ldr	r3, [pc, #32]	; (5e08 <nrf53_errata_69+0x24>)
    5de6:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5de8:	3304      	adds	r3, #4
    5dea:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5dec:	2a07      	cmp	r2, #7
    5dee:	d001      	beq.n	5df4 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5df0:	2000      	movs	r0, #0
    5df2:	4770      	bx	lr
                    switch(var2)
    5df4:	3b02      	subs	r3, #2
    5df6:	2b00      	cmp	r3, #0
    5df8:	d804      	bhi.n	5e04 <nrf53_errata_69+0x20>
    5dfa:	e8df f003 	tbb	[pc, r3]
    5dfe:	01          	.byte	0x01
    5dff:	00          	.byte	0x00
                if (var1 == 0x07)
    5e00:	2001      	movs	r0, #1
    5e02:	4770      	bx	lr
                            return false;
    5e04:	2000      	movs	r0, #0
    #endif
}
    5e06:	4770      	bx	lr
    5e08:	00ff0130 	.word	0x00ff0130

00005e0c <nrf53_errata_97>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5e0c:	4b08      	ldr	r3, [pc, #32]	; (5e30 <nrf53_errata_97+0x24>)
    5e0e:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5e10:	3304      	adds	r3, #4
    5e12:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5e14:	2a07      	cmp	r2, #7
    5e16:	d001      	beq.n	5e1c <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5e18:	2000      	movs	r0, #0
    5e1a:	4770      	bx	lr
                    switch(var2)
    5e1c:	3b02      	subs	r3, #2
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d804      	bhi.n	5e2c <nrf53_errata_97+0x20>
    5e22:	e8df f003 	tbb	[pc, r3]
    5e26:	01          	.byte	0x01
    5e27:	00          	.byte	0x00
                if (var1 == 0x07)
    5e28:	2001      	movs	r0, #1
    5e2a:	4770      	bx	lr
                            return false;
    5e2c:	2000      	movs	r0, #0
    #endif
}
    5e2e:	4770      	bx	lr
    5e30:	00ff0130 	.word	0x00ff0130

00005e34 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    5e34:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e38:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    5e3c:	f002 0203 	and.w	r2, r2, #3
    5e40:	4b02      	ldr	r3, [pc, #8]	; (5e4c <SystemCoreClockUpdate+0x18>)
    5e42:	40d3      	lsrs	r3, r2
    5e44:	4a02      	ldr	r2, [pc, #8]	; (5e50 <SystemCoreClockUpdate+0x1c>)
    5e46:	6013      	str	r3, [r2, #0]
#endif
}
    5e48:	4770      	bx	lr
    5e4a:	bf00      	nop
    5e4c:	07a12000 	.word	0x07a12000
    5e50:	20018120 	.word	0x20018120

00005e54 <SystemInit>:

void SystemInit(void)
{
    5e54:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    5e56:	f7ff ffd9 	bl	5e0c <nrf53_errata_97>
    5e5a:	b158      	cbz	r0, 5e74 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    5e5c:	4b3b      	ldr	r3, [pc, #236]	; (5f4c <SystemInit+0xf8>)
    5e5e:	681b      	ldr	r3, [r3, #0]
    5e60:	b943      	cbnz	r3, 5e74 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    5e62:	4b3a      	ldr	r3, [pc, #232]	; (5f4c <SystemInit+0xf8>)
    5e64:	220d      	movs	r2, #13
    5e66:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    5e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    5e6c:	2201      	movs	r2, #1
    5e6e:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    5e70:	2200      	movs	r2, #0
    5e72:	601a      	str	r2, [r3, #0]
{
    5e74:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5e76:	2a1f      	cmp	r2, #31
    5e78:	d815      	bhi.n	5ea6 <SystemInit+0x52>
    5e7a:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5e7e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5e82:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    5e86:	f1b3 3fff 	cmp.w	r3, #4294967295
    5e8a:	d00c      	beq.n	5ea6 <SystemInit+0x52>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    5e8c:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5e90:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5e94:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    5e98:	00db      	lsls	r3, r3, #3
    5e9a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    5e9e:	685b      	ldr	r3, [r3, #4]
    5ea0:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5ea2:	3201      	adds	r2, #1
    5ea4:	e7e7      	b.n	5e76 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    5ea6:	f7ff ff89 	bl	5dbc <nrf53_errata_64>
    5eaa:	b128      	cbz	r0, 5eb8 <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    5eac:	4b28      	ldr	r3, [pc, #160]	; (5f50 <SystemInit+0xfc>)
    5eae:	2229      	movs	r2, #41	; 0x29
    5eb0:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    5eb2:	3330      	adds	r3, #48	; 0x30
    5eb4:	2203      	movs	r2, #3
    5eb6:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    5eb8:	f7ff ff36 	bl	5d28 <nrf53_errata_42>
    5ebc:	b138      	cbz	r0, 5ece <SystemInit+0x7a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    5ebe:	4b25      	ldr	r3, [pc, #148]	; (5f54 <SystemInit+0x100>)
    5ec0:	4a25      	ldr	r2, [pc, #148]	; (5f58 <SystemInit+0x104>)
    5ec2:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    5ec4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ec8:	2201      	movs	r2, #1
    5eca:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    5ece:	f7ff ff3f 	bl	5d50 <nrf53_errata_46>
    5ed2:	b110      	cbz	r0, 5eda <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    5ed4:	4b21      	ldr	r3, [pc, #132]	; (5f5c <SystemInit+0x108>)
    5ed6:	2200      	movs	r2, #0
    5ed8:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    5eda:	f7ff ff51 	bl	5d80 <nrf53_errata_49>
    5ede:	b168      	cbz	r0, 5efc <SystemInit+0xa8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    5ee0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ee4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5ee8:	f013 0f01 	tst.w	r3, #1
    5eec:	d006      	beq.n	5efc <SystemInit+0xa8>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    5eee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ef2:	2200      	movs	r2, #0
    5ef4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    5ef8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    5efc:	f7ff ff54 	bl	5da8 <nrf53_errata_55>
    5f00:	b160      	cbz	r0, 5f1c <SystemInit+0xc8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    5f02:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f06:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5f0a:	f013 0f01 	tst.w	r3, #1
    5f0e:	d005      	beq.n	5f1c <SystemInit+0xc8>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    5f10:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f14:	f06f 0201 	mvn.w	r2, #1
    5f18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    5f1c:	f7ff ff62 	bl	5de4 <nrf53_errata_69>
    5f20:	b110      	cbz	r0, 5f28 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    5f22:	4b0b      	ldr	r3, [pc, #44]	; (5f50 <SystemInit+0xfc>)
    5f24:	2265      	movs	r2, #101	; 0x65
    5f26:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    5f28:	4a0d      	ldr	r2, [pc, #52]	; (5f60 <SystemInit+0x10c>)
    5f2a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    5f2e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    5f32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    5f36:	4a0b      	ldr	r2, [pc, #44]	; (5f64 <SystemInit+0x110>)
    5f38:	6811      	ldr	r1, [r2, #0]
    5f3a:	4b0b      	ldr	r3, [pc, #44]	; (5f68 <SystemInit+0x114>)
    5f3c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    5f40:	69d2      	ldr	r2, [r2, #28]
    5f42:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    5f46:	f7ff ff75 	bl	5e34 <SystemCoreClockUpdate>
}
    5f4a:	bd08      	pop	{r3, pc}
    5f4c:	50004a20 	.word	0x50004a20
    5f50:	5000470c 	.word	0x5000470c
    5f54:	50039530 	.word	0x50039530
    5f58:	beef0044 	.word	0xbeef0044
    5f5c:	5003254c 	.word	0x5003254c
    5f60:	e000ed00 	.word	0xe000ed00
    5f64:	00ff8000 	.word	0x00ff8000
    5f68:	50006000 	.word	0x50006000

00005f6c <nrf53_errata_4>:
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5f6c:	4b08      	ldr	r3, [pc, #32]	; (5f90 <nrf53_errata_4+0x24>)
    5f6e:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5f70:	3304      	adds	r3, #4
    5f72:	681b      	ldr	r3, [r3, #0]
                if (var1 == 0x07)
    5f74:	2a07      	cmp	r2, #7
    5f76:	d001      	beq.n	5f7c <nrf53_errata_4+0x10>
        return false;
    5f78:	2000      	movs	r0, #0
    5f7a:	4770      	bx	lr
                    switch(var2)
    5f7c:	3b02      	subs	r3, #2
    5f7e:	2b00      	cmp	r3, #0
    5f80:	d804      	bhi.n	5f8c <nrf53_errata_4+0x20>
    5f82:	e8df f003 	tbb	[pc, r3]
    5f86:	01          	.byte	0x01
    5f87:	00          	.byte	0x00
                if (var1 == 0x07)
    5f88:	2001      	movs	r0, #1
    5f8a:	4770      	bx	lr
                            return false;
    5f8c:	2000      	movs	r0, #0
}
    5f8e:	4770      	bx	lr
    5f90:	00ff0130 	.word	0x00ff0130

00005f94 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5f94:	4b05      	ldr	r3, [pc, #20]	; (5fac <nrfx_clock_init+0x18>)
    5f96:	791b      	ldrb	r3, [r3, #4]
    5f98:	b92b      	cbnz	r3, 5fa6 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5f9a:	4b04      	ldr	r3, [pc, #16]	; (5fac <nrfx_clock_init+0x18>)
    5f9c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5f9e:	2201      	movs	r2, #1
    5fa0:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5fa2:	4803      	ldr	r0, [pc, #12]	; (5fb0 <nrfx_clock_init+0x1c>)
    5fa4:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5fa6:	4803      	ldr	r0, [pc, #12]	; (5fb4 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5fa8:	4770      	bx	lr
    5faa:	bf00      	nop
    5fac:	20027290 	.word	0x20027290
    5fb0:	0bad0000 	.word	0x0bad0000
    5fb4:	0bad000c 	.word	0x0bad000c

00005fb8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5fb8:	2803      	cmp	r0, #3
    5fba:	d84e      	bhi.n	605a <nrfx_clock_start+0xa2>
    5fbc:	e8df f000 	tbb	[pc, r0]
    5fc0:	40322702 	.word	0x40322702
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5fc4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5fc8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5fcc:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5fd0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5fd4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5fd8:	d111      	bne.n	5ffe <nrfx_clock_start+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5fda:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5fde:	2201      	movs	r2, #1
    5fe0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fe4:	4b1d      	ldr	r3, [pc, #116]	; (605c <nrfx_clock_start+0xa4>)
    5fe6:	2200      	movs	r2, #0
    5fe8:	601a      	str	r2, [r3, #0]
    5fea:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5fec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ff0:	2202      	movs	r2, #2
    5ff2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ff6:	3308      	adds	r3, #8
    5ff8:	2201      	movs	r2, #1
    5ffa:	601a      	str	r2, [r3, #0]
}
    5ffc:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5ffe:	2b02      	cmp	r3, #2
    6000:	d1eb      	bne.n	5fda <nrfx_clock_start+0x22>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6002:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6006:	2202      	movs	r2, #2
    6008:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    600c:	e7ea      	b.n	5fe4 <nrfx_clock_start+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    600e:	4b14      	ldr	r3, [pc, #80]	; (6060 <nrfx_clock_start+0xa8>)
    6010:	2200      	movs	r2, #0
    6012:	601a      	str	r2, [r3, #0]
    6014:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6016:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    601a:	2201      	movs	r2, #1
    601c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6020:	601a      	str	r2, [r3, #0]
}
    6022:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6024:	4b0f      	ldr	r3, [pc, #60]	; (6064 <nrfx_clock_start+0xac>)
    6026:	2200      	movs	r2, #0
    6028:	601a      	str	r2, [r3, #0]
    602a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    602c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6030:	f44f 7200 	mov.w	r2, #512	; 0x200
    6034:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6038:	3320      	adds	r3, #32
    603a:	2201      	movs	r2, #1
    603c:	601a      	str	r2, [r3, #0]
}
    603e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6040:	4b09      	ldr	r3, [pc, #36]	; (6068 <nrfx_clock_start+0xb0>)
    6042:	2200      	movs	r2, #0
    6044:	601a      	str	r2, [r3, #0]
    6046:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6048:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    604c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6050:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6054:	3318      	adds	r3, #24
    6056:	2201      	movs	r2, #1
    6058:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    605a:	4770      	bx	lr
    605c:	50005104 	.word	0x50005104
    6060:	50005100 	.word	0x50005100
    6064:	50005124 	.word	0x50005124
    6068:	50005120 	.word	0x50005120

0000606c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    606c:	b570      	push	{r4, r5, r6, lr}
    606e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6070:	2803      	cmp	r0, #3
    6072:	f200 80cd 	bhi.w	6210 <nrfx_clock_stop+0x1a4>
    6076:	e8df f000 	tbb	[pc, r0]
    607a:	1402      	.short	0x1402
    607c:	3021      	.short	0x3021
    p_reg->INTENCLR = mask;
    607e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6082:	2202      	movs	r2, #2
    6084:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6088:	f503 7382 	add.w	r3, r3, #260	; 0x104
    608c:	2200      	movs	r2, #0
    608e:	601a      	str	r2, [r3, #0]
    6090:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6092:	4b60      	ldr	r3, [pc, #384]	; (6214 <nrfx_clock_stop+0x1a8>)
    6094:	2201      	movs	r2, #1
    6096:	601a      	str	r2, [r3, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    6098:	2c01      	cmp	r4, #1
    609a:	d02d      	beq.n	60f8 <nrfx_clock_stop+0x8c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    609c:	f242 7510 	movw	r5, #10000	; 0x2710
    60a0:	e0a1      	b.n	61e6 <nrfx_clock_stop+0x17a>
    p_reg->INTENCLR = mask;
    60a2:	2301      	movs	r3, #1
    60a4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    60a8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60ac:	f502 7280 	add.w	r2, r2, #256	; 0x100
    60b0:	2100      	movs	r1, #0
    60b2:	6011      	str	r1, [r2, #0]
    60b4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60b6:	4a58      	ldr	r2, [pc, #352]	; (6218 <nrfx_clock_stop+0x1ac>)
    60b8:	6013      	str	r3, [r2, #0]
}
    60ba:	e7ed      	b.n	6098 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    60bc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    60c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60c8:	f503 7392 	add.w	r3, r3, #292	; 0x124
    60cc:	2200      	movs	r2, #0
    60ce:	601a      	str	r2, [r3, #0]
    60d0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60d2:	4b52      	ldr	r3, [pc, #328]	; (621c <nrfx_clock_stop+0x1b0>)
    60d4:	2201      	movs	r2, #1
    60d6:	601a      	str	r2, [r3, #0]
}
    60d8:	e7de      	b.n	6098 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    60da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60de:	f44f 7280 	mov.w	r2, #256	; 0x100
    60e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60e6:	f503 7390 	add.w	r3, r3, #288	; 0x120
    60ea:	2200      	movs	r2, #0
    60ec:	601a      	str	r2, [r3, #0]
    60ee:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60f0:	4b4b      	ldr	r3, [pc, #300]	; (6220 <nrfx_clock_stop+0x1b4>)
    60f2:	2201      	movs	r2, #1
    60f4:	601a      	str	r2, [r3, #0]
}
    60f6:	e7cf      	b.n	6098 <nrfx_clock_stop+0x2c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    60f8:	4626      	mov	r6, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    60fa:	f242 7510 	movw	r5, #10000	; 0x2710
    60fe:	e035      	b.n	616c <nrfx_clock_stop+0x100>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6100:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6104:	f8d3 6418 	ldr.w	r6, [r3, #1048]	; 0x418
    6108:	f006 0603 	and.w	r6, r6, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    610c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    6110:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6114:	d13a      	bne.n	618c <nrfx_clock_stop+0x120>
    return false;
    6116:	2300      	movs	r3, #0
    6118:	e01f      	b.n	615a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    611a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    611e:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    6122:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6126:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    612a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    612e:	d12f      	bne.n	6190 <nrfx_clock_stop+0x124>
    return false;
    6130:	2300      	movs	r3, #0
    6132:	e012      	b.n	615a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6134:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6138:	f8d3 645c 	ldr.w	r6, [r3, #1116]	; 0x45c
    613c:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6140:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    6144:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6148:	d124      	bne.n	6194 <nrfx_clock_stop+0x128>
    return false;
    614a:	2300      	movs	r3, #0
    614c:	e005      	b.n	615a <nrfx_clock_stop+0xee>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    614e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6152:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    6156:	f3c3 4300 	ubfx	r3, r3, #16, #1
    615a:	2b00      	cmp	r3, #0
    615c:	d058      	beq.n	6210 <nrfx_clock_stop+0x1a4>
    615e:	2e01      	cmp	r6, #1
    6160:	d156      	bne.n	6210 <nrfx_clock_stop+0x1a4>
    6162:	2001      	movs	r0, #1
    6164:	f00f f85e 	bl	15224 <nrfx_busy_wait>
    6168:	3d01      	subs	r5, #1
    616a:	d051      	beq.n	6210 <nrfx_clock_stop+0x1a4>
    switch (domain)
    616c:	2c03      	cmp	r4, #3
    616e:	d80b      	bhi.n	6188 <nrfx_clock_stop+0x11c>
    6170:	a301      	add	r3, pc, #4	; (adr r3, 6178 <nrfx_clock_stop+0x10c>)
    6172:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    6176:	bf00      	nop
    6178:	00006101 	.word	0x00006101
    617c:	0000611b 	.word	0x0000611b
    6180:	00006135 	.word	0x00006135
    6184:	0000614f 	.word	0x0000614f
    6188:	2300      	movs	r3, #0
    618a:	e7e6      	b.n	615a <nrfx_clock_stop+0xee>
                return true;
    618c:	2301      	movs	r3, #1
    618e:	e7e4      	b.n	615a <nrfx_clock_stop+0xee>
                return true;
    6190:	2301      	movs	r3, #1
    6192:	e7e2      	b.n	615a <nrfx_clock_stop+0xee>
                return true;
    6194:	2301      	movs	r3, #1
    6196:	e7e0      	b.n	615a <nrfx_clock_stop+0xee>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6198:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    619c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    61a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    61a4:	d12e      	bne.n	6204 <nrfx_clock_stop+0x198>
    return false;
    61a6:	2300      	movs	r3, #0
    61a8:	e017      	b.n	61da <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    61aa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    61b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    61b6:	d127      	bne.n	6208 <nrfx_clock_stop+0x19c>
    return false;
    61b8:	2300      	movs	r3, #0
    61ba:	e00e      	b.n	61da <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    61bc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61c0:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    61c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    61c8:	d120      	bne.n	620c <nrfx_clock_stop+0x1a0>
    return false;
    61ca:	2300      	movs	r3, #0
    61cc:	e005      	b.n	61da <nrfx_clock_stop+0x16e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    61ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61d2:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    61d6:	f3c3 4300 	ubfx	r3, r3, #16, #1
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    61da:	b1cb      	cbz	r3, 6210 <nrfx_clock_stop+0x1a4>
    61dc:	2001      	movs	r0, #1
    61de:	f00f f821 	bl	15224 <nrfx_busy_wait>
    61e2:	3d01      	subs	r5, #1
    61e4:	d014      	beq.n	6210 <nrfx_clock_stop+0x1a4>
    switch (domain)
    61e6:	2c03      	cmp	r4, #3
    61e8:	d80a      	bhi.n	6200 <nrfx_clock_stop+0x194>
    61ea:	a301      	add	r3, pc, #4	; (adr r3, 61f0 <nrfx_clock_stop+0x184>)
    61ec:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    61f0:	00006199 	.word	0x00006199
    61f4:	000061ab 	.word	0x000061ab
    61f8:	000061bd 	.word	0x000061bd
    61fc:	000061cf 	.word	0x000061cf
    6200:	2300      	movs	r3, #0
    6202:	e7ea      	b.n	61da <nrfx_clock_stop+0x16e>
                return true;
    6204:	2301      	movs	r3, #1
    6206:	e7e8      	b.n	61da <nrfx_clock_stop+0x16e>
                return true;
    6208:	2301      	movs	r3, #1
    620a:	e7e6      	b.n	61da <nrfx_clock_stop+0x16e>
                return true;
    620c:	2301      	movs	r3, #1
    620e:	e7e4      	b.n	61da <nrfx_clock_stop+0x16e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6210:	bd70      	pop	{r4, r5, r6, pc}
    6212:	bf00      	nop
    6214:	5000500c 	.word	0x5000500c
    6218:	50005004 	.word	0x50005004
    621c:	50005024 	.word	0x50005024
    6220:	5000501c 	.word	0x5000501c

00006224 <nrfx_clock_divider_set>:
}

#if defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK192M
nrfx_err_t nrfx_clock_divider_set(nrf_clock_domain_t domain,
                                  nrf_clock_hfclk_div_t div)
{
    6224:	b510      	push	{r4, lr}
    6226:	460c      	mov	r4, r1
    switch(domain)
    6228:	2801      	cmp	r0, #1
    622a:	d003      	beq.n	6234 <nrfx_clock_divider_set+0x10>
    622c:	2802      	cmp	r0, #2
    622e:	d05a      	beq.n	62e6 <nrfx_clock_divider_set+0xc2>
    6230:	4834      	ldr	r0, [pc, #208]	; (6304 <nrfx_clock_divider_set+0xe0>)
#endif
        default:
            NRFX_ASSERT(0);
            return NRFX_ERROR_NOT_SUPPORTED;
    }
}
    6232:	bd10      	pop	{r4, pc}
            switch (div)
    6234:	b359      	cbz	r1, 628e <nrfx_clock_divider_set+0x6a>
    6236:	2901      	cmp	r1, #1
    6238:	d15f      	bne.n	62fa <nrfx_clock_divider_set+0xd6>
                    if (nrf53_errata_4())
    623a:	f7ff fe97 	bl	5f6c <nrf53_errata_4>
    623e:	b1f8      	cbz	r0, 6280 <nrfx_clock_divider_set+0x5c>
	__asm__ volatile(
    6240:	f04f 0320 	mov.w	r3, #32
    6244:	f3ef 8211 	mrs	r2, BASEPRI
    6248:	f383 8812 	msr	BASEPRI_MAX, r3
    624c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6250:	f3bf 8f4f 	dsb	sy

#if defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)
NRF_STATIC_INLINE
void nrf_clock_hfclk_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLKCTRL = (((uint8_t)(divider) << CLOCK_HFCLKCTRL_HCLK_Pos) &
    6254:	f004 0403 	and.w	r4, r4, #3
    6258:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    625c:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
                        *(volatile uint32_t *)0x5084450C = 0x0;
    6260:	2300      	movs	r3, #0
    6262:	4929      	ldr	r1, [pc, #164]	; (6308 <nrfx_clock_divider_set+0xe4>)
    6264:	600b      	str	r3, [r1, #0]
                        *(volatile uint32_t *)0x50026548 = 0x0;
    6266:	4929      	ldr	r1, [pc, #164]	; (630c <nrfx_clock_divider_set+0xe8>)
    6268:	600b      	str	r3, [r1, #0]
                        *(volatile uint32_t *)0x50081EE4 = 0x0D;
    626a:	4b29      	ldr	r3, [pc, #164]	; (6310 <nrfx_clock_divider_set+0xec>)
    626c:	210d      	movs	r1, #13
    626e:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    6270:	f382 8811 	msr	BASEPRI, r2
    6274:	f3bf 8f6f 	isb	sy
            SystemCoreClockUpdate();
    6278:	f7ff fddc 	bl	5e34 <SystemCoreClockUpdate>
            return NRFX_SUCCESS;
    627c:	4825      	ldr	r0, [pc, #148]	; (6314 <nrfx_clock_divider_set+0xf0>)
    627e:	e7d8      	b.n	6232 <nrfx_clock_divider_set+0xe>
    6280:	f004 0403 	and.w	r4, r4, #3
    6284:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6288:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}
    628c:	e7f4      	b.n	6278 <nrfx_clock_divider_set+0x54>
                    if (nrf53_errata_4())
    628e:	f7ff fe6d 	bl	5f6c <nrf53_errata_4>
    6292:	b308      	cbz	r0, 62d8 <nrfx_clock_divider_set+0xb4>
	__asm__ volatile(
    6294:	f04f 0220 	mov.w	r2, #32
    6298:	f3ef 8311 	mrs	r3, BASEPRI
    629c:	f382 8812 	msr	BASEPRI_MAX, r2
    62a0:	f3bf 8f6f 	isb	sy
    62a4:	f3bf 8f4f 	dsb	sy
                        *(volatile uint32_t *)0x5084450C = 0x4040;
    62a8:	4a17      	ldr	r2, [pc, #92]	; (6308 <nrfx_clock_divider_set+0xe4>)
    62aa:	f244 0140 	movw	r1, #16448	; 0x4040
    62ae:	6011      	str	r1, [r2, #0]
                        *(volatile uint32_t *)0x50026548 = 0x40;
    62b0:	4a16      	ldr	r2, [pc, #88]	; (630c <nrfx_clock_divider_set+0xe8>)
    62b2:	2140      	movs	r1, #64	; 0x40
    62b4:	6011      	str	r1, [r2, #0]
                        *(volatile uint32_t *)0x50081EE4 = 0x4D;
    62b6:	f502 22b7 	add.w	r2, r2, #374784	; 0x5b800
    62ba:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
    62be:	214d      	movs	r1, #77	; 0x4d
    62c0:	6011      	str	r1, [r2, #0]
    p_reg->HFCLKCTRL = (((uint8_t)(divider) << CLOCK_HFCLKCTRL_HCLK_Pos) &
    62c2:	f004 0403 	and.w	r4, r4, #3
    62c6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    62ca:	f8c2 4558 	str.w	r4, [r2, #1368]	; 0x558
	__asm__ volatile(
    62ce:	f383 8811 	msr	BASEPRI, r3
    62d2:	f3bf 8f6f 	isb	sy
}
    62d6:	e7cf      	b.n	6278 <nrfx_clock_divider_set+0x54>
    62d8:	f004 0403 	and.w	r4, r4, #3
    62dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62e0:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
}
    62e4:	e7c8      	b.n	6278 <nrfx_clock_divider_set+0x54>
            if (div > NRF_CLOCK_HFCLK_DIV_4)
    62e6:	2902      	cmp	r1, #2
    62e8:	d809      	bhi.n	62fe <nrfx_clock_divider_set+0xda>

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    62ea:	f001 0403 	and.w	r4, r1, #3
    62ee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62f2:	f8c3 45b8 	str.w	r4, [r3, #1464]	; 0x5b8
            return NRFX_SUCCESS;
    62f6:	4807      	ldr	r0, [pc, #28]	; (6314 <nrfx_clock_divider_set+0xf0>)
    62f8:	e79b      	b.n	6232 <nrfx_clock_divider_set+0xe>
    62fa:	4807      	ldr	r0, [pc, #28]	; (6318 <nrfx_clock_divider_set+0xf4>)
    62fc:	e799      	b.n	6232 <nrfx_clock_divider_set+0xe>
                return NRFX_ERROR_INVALID_PARAM;
    62fe:	4806      	ldr	r0, [pc, #24]	; (6318 <nrfx_clock_divider_set+0xf4>)
    6300:	e797      	b.n	6232 <nrfx_clock_divider_set+0xe>
    6302:	bf00      	nop
    6304:	0bad0003 	.word	0x0bad0003
    6308:	5084450c 	.word	0x5084450c
    630c:	50026548 	.word	0x50026548
    6310:	50081ee4 	.word	0x50081ee4
    6314:	0bad0000 	.word	0x0bad0000
    6318:	0bad0004 	.word	0x0bad0004

0000631c <nrfx_power_clock_irq_handler>:
#endif

void nrfx_clock_irq_handler(void)
{
    631c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    631e:	4b2a      	ldr	r3, [pc, #168]	; (63c8 <nrfx_power_clock_irq_handler+0xac>)
    6320:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6322:	b15b      	cbz	r3, 633c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6324:	4b28      	ldr	r3, [pc, #160]	; (63c8 <nrfx_power_clock_irq_handler+0xac>)
    6326:	2000      	movs	r0, #0
    6328:	6018      	str	r0, [r3, #0]
    632a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    632c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6330:	2201      	movs	r2, #1
    6332:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6336:	4b25      	ldr	r3, [pc, #148]	; (63cc <nrfx_power_clock_irq_handler+0xb0>)
    6338:	681b      	ldr	r3, [r3, #0]
    633a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    633c:	4b24      	ldr	r3, [pc, #144]	; (63d0 <nrfx_power_clock_irq_handler+0xb4>)
    633e:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6340:	b1b3      	cbz	r3, 6370 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6342:	4b23      	ldr	r3, [pc, #140]	; (63d0 <nrfx_power_clock_irq_handler+0xb4>)
    6344:	2200      	movs	r2, #0
    6346:	601a      	str	r2, [r3, #0]
    6348:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    634a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    634e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6352:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6356:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    635a:	2b01      	cmp	r3, #1
    635c:	d02b      	beq.n	63b6 <nrfx_power_clock_irq_handler+0x9a>
    p_reg->INTENCLR = mask;
    635e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6362:	2202      	movs	r2, #2
    6364:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6368:	4b18      	ldr	r3, [pc, #96]	; (63cc <nrfx_power_clock_irq_handler+0xb0>)
    636a:	681b      	ldr	r3, [r3, #0]
    636c:	2001      	movs	r0, #1
    636e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6370:	4b18      	ldr	r3, [pc, #96]	; (63d4 <nrfx_power_clock_irq_handler+0xb8>)
    6372:	681b      	ldr	r3, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    6374:	b16b      	cbz	r3, 6392 <nrfx_power_clock_irq_handler+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6376:	4b17      	ldr	r3, [pc, #92]	; (63d4 <nrfx_power_clock_irq_handler+0xb8>)
    6378:	2200      	movs	r2, #0
    637a:	601a      	str	r2, [r3, #0]
    637c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    637e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6382:	f44f 7280 	mov.w	r2, #256	; 0x100
    6386:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    638a:	4b10      	ldr	r3, [pc, #64]	; (63cc <nrfx_power_clock_irq_handler+0xb0>)
    638c:	681b      	ldr	r3, [r3, #0]
    638e:	2004      	movs	r0, #4
    6390:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6392:	4b11      	ldr	r3, [pc, #68]	; (63d8 <nrfx_power_clock_irq_handler+0xbc>)
    6394:	681b      	ldr	r3, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    6396:	b16b      	cbz	r3, 63b4 <nrfx_power_clock_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6398:	4b0f      	ldr	r3, [pc, #60]	; (63d8 <nrfx_power_clock_irq_handler+0xbc>)
    639a:	2200      	movs	r2, #0
    639c:	601a      	str	r2, [r3, #0]
    639e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    63a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    63a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    63a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    63ac:	4b07      	ldr	r3, [pc, #28]	; (63cc <nrfx_power_clock_irq_handler+0xb0>)
    63ae:	681b      	ldr	r3, [r3, #0]
    63b0:	2005      	movs	r0, #5
    63b2:	4798      	blx	r3
    }
#endif
}
    63b4:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    63b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    63ba:	2202      	movs	r2, #2
    63bc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63c0:	3308      	adds	r3, #8
    63c2:	2201      	movs	r2, #1
    63c4:	601a      	str	r2, [r3, #0]
}
    63c6:	e7d3      	b.n	6370 <nrfx_power_clock_irq_handler+0x54>
    63c8:	50005100 	.word	0x50005100
    63cc:	20027290 	.word	0x20027290
    63d0:	50005104 	.word	0x50005104
    63d4:	50005120 	.word	0x50005120
    63d8:	50005124 	.word	0x50005124

000063dc <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    63dc:	b470      	push	{r4, r5, r6}
	__asm__ volatile(
    63de:	f04f 0320 	mov.w	r3, #32
    63e2:	f3ef 8611 	mrs	r6, BASEPRI
    63e6:	f383 8812 	msr	BASEPRI_MAX, r3
    63ea:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    63ee:	4b0e      	ldr	r3, [pc, #56]	; (6428 <nrfx_dppi_channel_alloc+0x4c>)
    63f0:	681d      	ldr	r5, [r3, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    63f2:	43e9      	mvns	r1, r5
    63f4:	d016      	beq.n	6424 <nrfx_dppi_channel_alloc+0x48>
    uint8_t channel = 0;
    63f6:	2300      	movs	r3, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    63f8:	fa21 f203 	lsr.w	r2, r1, r3
    63fc:	f012 0f01 	tst.w	r2, #1
    6400:	d102      	bne.n	6408 <nrfx_dppi_channel_alloc+0x2c>
        {
            channel++;
    6402:	3301      	adds	r3, #1
    6404:	b2db      	uxtb	r3, r3
    6406:	e7f7      	b.n	63f8 <nrfx_dppi_channel_alloc+0x1c>
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    6408:	2201      	movs	r2, #1
    640a:	fa02 f403 	lsl.w	r4, r2, r3
    640e:	4325      	orrs	r5, r4
    6410:	4a05      	ldr	r2, [pc, #20]	; (6428 <nrfx_dppi_channel_alloc+0x4c>)
    6412:	6015      	str	r5, [r2, #0]
        *p_channel = channel;
    6414:	7003      	strb	r3, [r0, #0]

        err_code = NRFX_SUCCESS;
    6416:	4805      	ldr	r0, [pc, #20]	; (642c <nrfx_dppi_channel_alloc+0x50>)
	__asm__ volatile(
    6418:	f386 8811 	msr	BASEPRI, r6
    641c:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    6420:	bc70      	pop	{r4, r5, r6}
    6422:	4770      	bx	lr
        err_code = NRFX_ERROR_NO_MEM;
    6424:	4802      	ldr	r0, [pc, #8]	; (6430 <nrfx_dppi_channel_alloc+0x54>)
    6426:	e7f7      	b.n	6418 <nrfx_dppi_channel_alloc+0x3c>
    6428:	20027298 	.word	0x20027298
    642c:	0bad0000 	.word	0x0bad0000
    6430:	0bad0002 	.word	0x0bad0002

00006434 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    6434:	4b04      	ldr	r3, [pc, #16]	; (6448 <is_allocated_channel+0x14>)
    6436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    6438:	2301      	movs	r3, #1
    643a:	4083      	lsls	r3, r0
    643c:	421a      	tst	r2, r3
}
    643e:	bf14      	ite	ne
    6440:	2001      	movne	r0, #1
    6442:	2000      	moveq	r0, #0
    6444:	4770      	bx	lr
    6446:	bf00      	nop
    6448:	2002729c 	.word	0x2002729c

0000644c <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    644c:	2301      	movs	r3, #1
    644e:	fa03 f000 	lsl.w	r0, r3, r0
    6452:	4a02      	ldr	r2, [pc, #8]	; (645c <channel_allocated_set+0x10>)
    6454:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    6456:	4303      	orrs	r3, r0
    6458:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    645a:	4770      	bx	lr
    645c:	2002729c 	.word	0x2002729c

00006460 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    6460:	2301      	movs	r3, #1
    6462:	fa03 f000 	lsl.w	r0, r3, r0
    6466:	4a03      	ldr	r2, [pc, #12]	; (6474 <channel_allocated_clr+0x14>)
    6468:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    646a:	ea23 0300 	bic.w	r3, r3, r0
    646e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    6470:	4770      	bx	lr
    6472:	bf00      	nop
    6474:	2002729c 	.word	0x2002729c

00006478 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    6478:	b538      	push	{r3, r4, r5, lr}
    647a:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    647c:	f00e fee7 	bl	1524e <is_app_channel>
    6480:	b908      	cbnz	r0, 6486 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    6482:	4809      	ldr	r0, [pc, #36]	; (64a8 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6484:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6486:	f04f 0320 	mov.w	r3, #32
    648a:	f3ef 8511 	mrs	r5, BASEPRI
    648e:	f383 8812 	msr	BASEPRI_MAX, r3
    6492:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    6496:	4620      	mov	r0, r4
    6498:	f7ff ffe2 	bl	6460 <channel_allocated_clr>
	__asm__ volatile(
    649c:	f385 8811 	msr	BASEPRI, r5
    64a0:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    64a4:	4801      	ldr	r0, [pc, #4]	; (64ac <nrfx_gpiote_channel_free+0x34>)
}
    64a6:	e7ed      	b.n	6484 <nrfx_gpiote_channel_free+0xc>
    64a8:	0bad0004 	.word	0x0bad0004
    64ac:	0bad0000 	.word	0x0bad0000

000064b0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    64b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    64b4:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    64b6:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    64b8:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    64ba:	4f17      	ldr	r7, [pc, #92]	; (6518 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    64bc:	e013      	b.n	64e6 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    64be:	4620      	mov	r0, r4
    64c0:	f7ff ffc4 	bl	644c <channel_allocated_set>
            *p_channel = ch_idx;
    64c4:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    64c8:	4f14      	ldr	r7, [pc, #80]	; (651c <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    64ca:	f386 8811 	msr	BASEPRI, r6
    64ce:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    64d2:	4b12      	ldr	r3, [pc, #72]	; (651c <nrfx_gpiote_channel_alloc+0x6c>)
    64d4:	429f      	cmp	r7, r3
    64d6:	d01b      	beq.n	6510 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    64d8:	2301      	movs	r3, #1
    64da:	fa03 f309 	lsl.w	r3, r3, r9
    64de:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    64e2:	3401      	adds	r4, #1
    64e4:	b2e4      	uxtb	r4, r4
    64e6:	b19d      	cbz	r5, 6510 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    64e8:	f04f 0320 	mov.w	r3, #32
    64ec:	f3ef 8611 	mrs	r6, BASEPRI
    64f0:	f383 8812 	msr	BASEPRI_MAX, r3
    64f4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    64f8:	46a1      	mov	r9, r4
    64fa:	fa25 f304 	lsr.w	r3, r5, r4
    64fe:	f013 0f01 	tst.w	r3, #1
    6502:	d0e2      	beq.n	64ca <nrfx_gpiote_channel_alloc+0x1a>
    6504:	4620      	mov	r0, r4
    6506:	f7ff ff95 	bl	6434 <is_allocated_channel>
    650a:	2800      	cmp	r0, #0
    650c:	d1dd      	bne.n	64ca <nrfx_gpiote_channel_alloc+0x1a>
    650e:	e7d6      	b.n	64be <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6510:	4638      	mov	r0, r7
    6512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6516:	bf00      	nop
    6518:	0bad0002 	.word	0x0bad0002
    651c:	0bad0000 	.word	0x0bad0000

00006520 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
    6520:	b570      	push	{r4, r5, r6, lr}
    6522:	b082      	sub	sp, #8
    6524:	4604      	mov	r4, r0
  if (head_ != temp_) {
    6526:	6905      	ldr	r5, [r0, #16]
    6528:	6983      	ldr	r3, [r0, #24]
    652a:	429d      	cmp	r5, r3
    652c:	d006      	beq.n	653c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
    652e:	490f      	ldr	r1, [pc, #60]	; (656c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    6530:	6840      	ldr	r0, [r0, #4]
    6532:	f00f fcc7 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
    6536:	2001      	movs	r0, #1
  }
  head_ = aligned_result + size;
  temp_ = head_;

  return kTfLiteOk;
}
    6538:	b002      	add	sp, #8
    653a:	bd70      	pop	{r4, r5, r6, pc}
    653c:	460e      	mov	r6, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    653e:	4611      	mov	r1, r2
    6540:	6880      	ldr	r0, [r0, #8]
    6542:	f00e fec8 	bl	152d6 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6546:	6963      	ldr	r3, [r4, #20]
    6548:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    654a:	42b3      	cmp	r3, r6
    654c:	d304      	bcc.n	6558 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x38>
  head_ = aligned_result + size;
    654e:	4430      	add	r0, r6
    6550:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    6552:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    6554:	2000      	movs	r0, #0
    6556:	e7ef      	b.n	6538 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    TF_LITE_REPORT_ERROR(
    6558:	1af2      	subs	r2, r6, r3
    655a:	9200      	str	r2, [sp, #0]
    655c:	4632      	mov	r2, r6
    655e:	4904      	ldr	r1, [pc, #16]	; (6570 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
    6560:	6860      	ldr	r0, [r4, #4]
    6562:	f00f fcaf 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    6566:	2001      	movs	r0, #1
    6568:	e7e6      	b.n	6538 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    656a:	bf00      	nop
    656c:	0001a448 	.word	0x0001a448
    6570:	0001a4a0 	.word	0x0001a4a0

00006574 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    6574:	b530      	push	{r4, r5, lr}
    6576:	b083      	sub	sp, #12
    6578:	4605      	mov	r5, r0
    657a:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    657c:	4611      	mov	r1, r2
    657e:	6980      	ldr	r0, [r0, #24]
    6580:	f00e fea9 	bl	152d6 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6584:	696b      	ldr	r3, [r5, #20]
    6586:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    6588:	42a3      	cmp	r3, r4
    658a:	d303      	bcc.n	6594 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
  }
  temp_ = aligned_result + size;
    658c:	4404      	add	r4, r0
    658e:	61ac      	str	r4, [r5, #24]
  return aligned_result;
}
    6590:	b003      	add	sp, #12
    6592:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    6594:	1ae2      	subs	r2, r4, r3
    6596:	9200      	str	r2, [sp, #0]
    6598:	4622      	mov	r2, r4
    659a:	4903      	ldr	r1, [pc, #12]	; (65a8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    659c:	6868      	ldr	r0, [r5, #4]
    659e:	f00f fc91 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    65a2:	2000      	movs	r0, #0
    65a4:	e7f4      	b.n	6590 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    65a6:	bf00      	nop
    65a8:	0001a4e4 	.word	0x0001a4e4

000065ac <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    65ac:	b530      	push	{r4, r5, lr}
    65ae:	b083      	sub	sp, #12
    65b0:	4604      	mov	r4, r0
    65b2:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    65b4:	6940      	ldr	r0, [r0, #20]
    65b6:	4611      	mov	r1, r2
    65b8:	1b40      	subs	r0, r0, r5
    65ba:	f00e fe93 	bl	152e4 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    65be:	6923      	ldr	r3, [r4, #16]
    65c0:	4283      	cmp	r3, r0
    65c2:	d802      	bhi.n	65ca <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1e>
  tail_ = aligned_result;
    65c4:	6160      	str	r0, [r4, #20]
}
    65c6:	b003      	add	sp, #12
    65c8:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    65ca:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    65cc:	9300      	str	r3, [sp, #0]
    65ce:	1aeb      	subs	r3, r5, r3
    65d0:	462a      	mov	r2, r5
    65d2:	4903      	ldr	r1, [pc, #12]	; (65e0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    65d4:	6860      	ldr	r0, [r4, #4]
    65d6:	f00f fc75 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    65da:	2000      	movs	r0, #0
    65dc:	e7f3      	b.n	65c6 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1a>
    65de:	bf00      	nop
    65e0:	0001a530 	.word	0x0001a530

000065e4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    65e4:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    65e6:	4d05      	ldr	r5, [pc, #20]	; (65fc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    65e8:	6005      	str	r5, [r0, #0]
    65ea:	6041      	str	r1, [r0, #4]
    65ec:	6082      	str	r2, [r0, #8]
    65ee:	60c3      	str	r3, [r0, #12]
    65f0:	6102      	str	r2, [r0, #16]
    65f2:	6143      	str	r3, [r0, #20]
    65f4:	6182      	str	r2, [r0, #24]
    65f6:	bc30      	pop	{r4, r5}
    65f8:	4770      	bx	lr
    65fa:	bf00      	nop
    65fc:	0001a584 	.word	0x0001a584

00006600 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    6600:	b510      	push	{r4, lr}
    6602:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    6604:	b300      	cbz	r0, 6648 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    6606:	460c      	mov	r4, r1
    6608:	4613      	mov	r3, r2
    660a:	4601      	mov	r1, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    660c:	b1f4      	cbz	r4, 664c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
    660e:	4622      	mov	r2, r4
    6610:	a801      	add	r0, sp, #4
    6612:	f00e fe2e 	bl	15272 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    6616:	2204      	movs	r2, #4
    6618:	211c      	movs	r1, #28
    661a:	eb0d 0002 	add.w	r0, sp, r2
    661e:	f7ff ffc5 	bl	65ac <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    6622:	4603      	mov	r3, r0
    6624:	b168      	cbz	r0, 6642 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x42>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    6626:	4a0a      	ldr	r2, [pc, #40]	; (6650 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    6628:	6002      	str	r2, [r0, #0]
    662a:	9a02      	ldr	r2, [sp, #8]
    662c:	6042      	str	r2, [r0, #4]
    662e:	9a03      	ldr	r2, [sp, #12]
    6630:	6082      	str	r2, [r0, #8]
    6632:	9a04      	ldr	r2, [sp, #16]
    6634:	60c2      	str	r2, [r0, #12]
    6636:	9a05      	ldr	r2, [sp, #20]
    6638:	6102      	str	r2, [r0, #16]
    663a:	9a06      	ldr	r2, [sp, #24]
    663c:	6142      	str	r2, [r0, #20]
    663e:	9a07      	ldr	r2, [sp, #28]
    6640:	6182      	str	r2, [r0, #24]
}
    6642:	4618      	mov	r0, r3
    6644:	b008      	add	sp, #32
    6646:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6648:	f012 fa2c 	bl	18aa4 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    664c:	f012 fa2a 	bl	18aa4 <abort>
    6650:	0001a584 	.word	0x0001a584

00006654 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
    6654:	b508      	push	{r3, lr}
    6656:	4602      	mov	r2, r0
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    6658:	4b03      	ldr	r3, [pc, #12]	; (6668 <DebugLog+0x14>)
    665a:	681b      	ldr	r3, [r3, #0]
    665c:	4903      	ldr	r1, [pc, #12]	; (666c <DebugLog+0x18>)
    665e:	68d8      	ldr	r0, [r3, #12]
    6660:	f00c fa42 	bl	12ae8 <fiprintf>
#endif
}
    6664:	bd08      	pop	{r3, pc}
    6666:	bf00      	nop
    6668:	2001818c 	.word	0x2001818c
    666c:	0001a59c 	.word	0x0001a59c

00006670 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    6670:	b500      	push	{lr}
    6672:	b0c1      	sub	sp, #260	; 0x104
    6674:	4602      	mov	r2, r0
    6676:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    6678:	f44f 7180 	mov.w	r1, #256	; 0x100
    667c:	4668      	mov	r0, sp
    667e:	f000 f917 	bl	68b0 <MicroVsnprintf>
  DebugLog(log_buffer);
    6682:	4668      	mov	r0, sp
    6684:	f7ff ffe6 	bl	6654 <DebugLog>
  DebugLog("\r\n");
    6688:	4802      	ldr	r0, [pc, #8]	; (6694 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    668a:	f7ff ffe3 	bl	6654 <DebugLog>
#endif
}
    668e:	b041      	add	sp, #260	; 0x104
    6690:	f85d fb04 	ldr.w	pc, [sp], #4
    6694:	0001d044 	.word	0x0001d044

00006698 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:
  return kTfLiteOk;
}

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    6698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    669c:	b083      	sub	sp, #12
    669e:	4680      	mov	r8, r0
    66a0:	468b      	mov	fp, r1
    66a2:	4692      	mov	sl, r2
    66a4:	4699      	mov	r9, r3
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
    66a6:	4606      	mov	r6, r0
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    66a8:	f00e fe92 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    66ac:	eba8 0400 	sub.w	r4, r8, r0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    66b0:	4620      	mov	r0, r4
    66b2:	f00e fe93 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66b6:	2804      	cmp	r0, #4
    66b8:	d90d      	bls.n	66d6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    66ba:	1d20      	adds	r0, r4, #4
    66bc:	f00e fe8e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    66c0:	eb08 0400 	add.w	r4, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66c4:	b148      	cbz	r0, 66da <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x42>
    66c6:	4620      	mov	r0, r4
    66c8:	f00e fe7c 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    66cc:	4404      	add	r4, r0
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    66ce:	b3ac      	cbz	r4, 673c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa4>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    66d0:	2500      	movs	r5, #0
  int element_count = 1;
    66d2:	2701      	movs	r7, #1
    66d4:	e01e      	b.n	6714 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66d6:	2000      	movs	r0, #0
    66d8:	e7f2      	b.n	66c0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66da:	2400      	movs	r4, #0
    66dc:	e7f7      	b.n	66ce <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66de:	1d20      	adds	r0, r4, #4
    66e0:	f00e fe7c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    66e4:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66e6:	b300      	cbz	r0, 672a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
    66e8:	4620      	mov	r0, r4
    66ea:	f00e fe6b 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    66ee:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    66f0:	6820      	ldr	r0, [r4, #0]
    66f2:	f00d fc48 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    66f6:	4285      	cmp	r5, r0
    66f8:	d221      	bcs.n	673e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa6>
    66fa:	6820      	ldr	r0, [r4, #0]
    66fc:	f00d fc43 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6700:	4285      	cmp	r5, r0
    6702:	d214      	bcs.n	672e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6704:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6706:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    670a:	f00e fe60 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    670e:	fb00 f707 	mul.w	r7, r0, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6712:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6714:	4630      	mov	r0, r6
    6716:	f00e fe5b 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    671a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    671c:	4620      	mov	r0, r4
    671e:	f00e fe5d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6722:	2804      	cmp	r0, #4
    6724:	d8db      	bhi.n	66de <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x46>
    6726:	2000      	movs	r0, #0
    6728:	e7dc      	b.n	66e4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    672a:	2400      	movs	r4, #0
    672c:	e7e0      	b.n	66f0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
    FLATBUFFERS_ASSERT(i < size());
    672e:	4b1a      	ldr	r3, [pc, #104]	; (6798 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x100>)
    6730:	4a1a      	ldr	r2, [pc, #104]	; (679c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x104>)
    6732:	f44f 7183 	mov.w	r1, #262	; 0x106
    6736:	481a      	ldr	r0, [pc, #104]	; (67a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x108>)
    6738:	f00c f9b8 	bl	12aac <__assert_func>
  int element_count = 1;
    673c:	2701      	movs	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    673e:	4640      	mov	r0, r8
    6740:	f00e fe46 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6744:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6748:	4620      	mov	r0, r4
    674a:	f00e fe47 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    674e:	2806      	cmp	r0, #6
    6750:	d910      	bls.n	6774 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xdc>
    6752:	1da0      	adds	r0, r4, #6
    6754:	f00e fe42 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6758:	b170      	cbz	r0, 6778 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe0>
    675a:	4440      	add	r0, r8
    675c:	f00e fe44 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    6760:	464a      	mov	r2, r9
    6762:	f10d 0107 	add.w	r1, sp, #7
    6766:	b2c0      	uxtb	r0, r0
    6768:	f003 f9b0 	bl	9acc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    676c:	b130      	cbz	r0, 677c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe4>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    676e:	b003      	add	sp, #12
    6770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6774:	2000      	movs	r0, #0
    6776:	e7ef      	b.n	6758 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6778:	2000      	movs	r0, #0
    677a:	e7f1      	b.n	6760 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc8>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    677c:	4651      	mov	r1, sl
    677e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6782:	f00e fdbb 	bl	152fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    6786:	2800      	cmp	r0, #0
    6788:	d1f1      	bne.n	676e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
  *bytes = element_count * (*type_size);
    678a:	f8da 3000 	ldr.w	r3, [sl]
    678e:	fb07 f703 	mul.w	r7, r7, r3
    6792:	f8cb 7000 	str.w	r7, [fp]
  return kTfLiteOk;
    6796:	e7ea      	b.n	676e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
    6798:	0001a5b4 	.word	0x0001a5b4
    679c:	0001a5c0 	.word	0x0001a5c0
    67a0:	0001a680 	.word	0x0001a680

000067a4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
    67a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67a6:	b089      	sub	sp, #36	; 0x24
    67a8:	9001      	str	r0, [sp, #4]
    67aa:	460e      	mov	r6, r1
  char* current = buffer;
  char* current_end = buffer + (kFastToBufferSize - 1);
    67ac:	f101 052f 	add.w	r5, r1, #47	; 0x2f
  const uint32_t exponent_mask = 0x7f800000;
  const int32_t exponent_shift = 23;
  const int32_t exponent_bias = 127;
  const uint32_t fraction_mask = 0x007fffff;
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
    67b0:	2204      	movs	r2, #4
    67b2:	eb0d 0102 	add.w	r1, sp, r2
    67b6:	a807      	add	r0, sp, #28
    67b8:	f012 f99b 	bl	18af2 <memcpy>
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    67bc:	9b07      	ldr	r3, [sp, #28]
    67be:	f3c3 54c7 	ubfx	r4, r3, #23, #8
    67c2:	3c7f      	subs	r4, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
    67c4:	f3c3 0716 	ubfx	r7, r3, #0, #23
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
    67c8:	2b00      	cmp	r3, #0
    67ca:	db0e      	blt.n	67ea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x46>
    *current = '-';
    current += 1;
  }
  *current = 0;
    67cc:	2300      	movs	r3, #0
    67ce:	7033      	strb	r3, [r6, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
    67d0:	2c80      	cmp	r4, #128	; 0x80
    67d2:	d00e      	beq.n	67f2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x4e>
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    67d4:	4b32      	ldr	r3, [pc, #200]	; (68a0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xfc>)
    67d6:	f10d 0c0c 	add.w	ip, sp, #12
    67da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    67dc:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    67e0:	f88c 3000 	strb.w	r3, [ip]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
    67e4:	463a      	mov	r2, r7
  for (int i = 0; i < scale_shifts_size; ++i) {
    67e6:	2300      	movs	r3, #0
    67e8:	e01a      	b.n	6820 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7c>
    *current = '-';
    67ea:	232d      	movs	r3, #45	; 0x2d
    67ec:	f806 3b01 	strb.w	r3, [r6], #1
    current += 1;
    67f0:	e7ec      	b.n	67cc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x28>
    if (fraction == 0) {
    67f2:	b937      	cbnz	r7, 6802 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x5e>
      current = StrCatStr(current, (current_end - current), "Inf");
    67f4:	4a2b      	ldr	r2, [pc, #172]	; (68a4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x100>)
    67f6:	1ba9      	subs	r1, r5, r6
    67f8:	4630      	mov	r0, r6
    67fa:	f00e fe0c 	bl	15416 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    67fe:	4607      	mov	r7, r0
      return current;
    6800:	e04a      	b.n	6898 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
      current = StrCatStr(current, (current_end - current), "NaN");
    6802:	4a29      	ldr	r2, [pc, #164]	; (68a8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>)
    6804:	1ba9      	subs	r1, r5, r6
    6806:	4630      	mov	r0, r6
    6808:	f00e fe05 	bl	15416 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    680c:	4607      	mov	r7, r0
      return current;
    680e:	e043      	b.n	6898 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    scaled_fraction += (fraction >> scale_shifts[i]);
    6810:	a908      	add	r1, sp, #32
    6812:	18c8      	adds	r0, r1, r3
    6814:	f910 0c14 	ldrsb.w	r0, [r0, #-20]
    6818:	fa27 f000 	lsr.w	r0, r7, r0
    681c:	4402      	add	r2, r0
  for (int i = 0; i < scale_shifts_size; ++i) {
    681e:	3301      	adds	r3, #1
    6820:	2b0c      	cmp	r3, #12
    6822:	ddf5      	ble.n	6810 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x6c>
  }
  *current = '1';
    6824:	2331      	movs	r3, #49	; 0x31
    6826:	7033      	strb	r3, [r6, #0]
  current += 1;
  *current = '.';
    6828:	232e      	movs	r3, #46	; 0x2e
    682a:	7073      	strb	r3, [r6, #1]
  current += 1;
    682c:	1cb7      	adds	r7, r6, #2
  *current = 0;
    682e:	2300      	movs	r3, #0
    6830:	70b3      	strb	r3, [r6, #2]
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
    6832:	1be9      	subs	r1, r5, r7
    6834:	2907      	cmp	r1, #7
    6836:	dd2f      	ble.n	6898 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    return current;
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6838:	2301      	movs	r3, #1
    683a:	2b06      	cmp	r3, #6
    683c:	dc03      	bgt.n	6846 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xa2>
    *(current + i) = '0';
    683e:	2030      	movs	r0, #48	; 0x30
    6840:	54f8      	strb	r0, [r7, r3]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6842:	3301      	adds	r3, #1
    6844:	e7f9      	b.n	683a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6846:	230a      	movs	r3, #10
    6848:	4638      	mov	r0, r7
    684a:	f00e fe31 	bl	154b0 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>
  int fraction_digits = current - previous;
    684e:	1bc1      	subs	r1, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
    6850:	2330      	movs	r3, #48	; 0x30
    6852:	7003      	strb	r3, [r0, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
    6854:	f1d1 0607 	rsbs	r6, r1, #7
    6858:	d00c      	beq.n	6874 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
    for (int i = 0; i < fraction_digits; i++) {
    685a:	2300      	movs	r3, #0
    685c:	428b      	cmp	r3, r1
    685e:	da06      	bge.n	686e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xca>
      current--;
      *(current + leading_zeros) = *current;
    6860:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    6864:	5582      	strb	r2, [r0, r6]
      *current = '0';
    6866:	2230      	movs	r2, #48	; 0x30
    6868:	7002      	strb	r2, [r0, #0]
    for (int i = 0; i < fraction_digits; i++) {
    686a:	3301      	adds	r3, #1
    686c:	e7f6      	b.n	685c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb8>
    }
    current += kMaxFractionalDigits;
    686e:	3007      	adds	r0, #7
    6870:	e000      	b.n	6874 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
    current--;
    6872:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    6874:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6878:	2b30      	cmp	r3, #48	; 0x30
    687a:	d102      	bne.n	6882 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xde>
    687c:	1e43      	subs	r3, r0, #1
    687e:	42bb      	cmp	r3, r7
    6880:	d8f7      	bhi.n	6872 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
  }
  *current = 0;
    6882:	2300      	movs	r3, #0
    6884:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    6886:	4a09      	ldr	r2, [pc, #36]	; (68ac <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>)
    6888:	1a29      	subs	r1, r5, r0
    688a:	f00e fdc4 	bl	15416 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    688e:	4622      	mov	r2, r4
    6890:	1a29      	subs	r1, r5, r0
    6892:	f00e fdfe 	bl	15492 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>
    6896:	4607      	mov	r7, r0
  return current;
}
    6898:	4638      	mov	r0, r7
    689a:	b009      	add	sp, #36	; 0x24
    689c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    689e:	bf00      	nop
    68a0:	0001a6f4 	.word	0x0001a6f4
    68a4:	0001a6e8 	.word	0x0001a6e8
    68a8:	0001a6ec 	.word	0x0001a6ec
    68ac:	0001a6f0 	.word	0x0001a6f0

000068b0 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    68b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68b2:	b083      	sub	sp, #12
    68b4:	4607      	mov	r7, r0
    68b6:	4615      	mov	r5, r2
    68b8:	9301      	str	r3, [sp, #4]
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    68ba:	1e4e      	subs	r6, r1, #1
  int output_index = 0;
    68bc:	2400      	movs	r4, #0
    68be:	e07c      	b.n	69ba <MicroVsnprintf+0x10a>
    if (*current == '%') {
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    68c0:	1b33      	subs	r3, r6, r4
    68c2:	2b0a      	cmp	r3, #10
    68c4:	dd09      	ble.n	68da <MicroVsnprintf+0x2a>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    68c6:	9b01      	ldr	r3, [sp, #4]
    68c8:	1d1a      	adds	r2, r3, #4
    68ca:	9201      	str	r2, [sp, #4]
    68cc:	6819      	ldr	r1, [r3, #0]
    68ce:	1938      	adds	r0, r7, r4
    68d0:	f00e fdfe 	bl	154d0 <_ZN12_GLOBAL__N_111FormatInt32EPci>
          output_index +=
    68d4:	4404      	add	r4, r0
          current++;
    68d6:	1caa      	adds	r2, r5, #2
          break;
    68d8:	e06e      	b.n	69b8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    68da:	1c60      	adds	r0, r4, #1
    68dc:	2300      	movs	r3, #0
    68de:	553b      	strb	r3, [r7, r4]
            return output_index;
    68e0:	e0b1      	b.n	6a46 <MicroVsnprintf+0x196>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    68e2:	1b33      	subs	r3, r6, r4
    68e4:	2b0a      	cmp	r3, #10
    68e6:	dd09      	ble.n	68fc <MicroVsnprintf+0x4c>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    68e8:	9b01      	ldr	r3, [sp, #4]
    68ea:	1d1a      	adds	r2, r3, #4
    68ec:	9201      	str	r2, [sp, #4]
    68ee:	6819      	ldr	r1, [r3, #0]
    68f0:	1938      	adds	r0, r7, r4
    68f2:	f00e fdf5 	bl	154e0 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>
          output_index +=
    68f6:	4404      	add	r4, r0
          current++;
    68f8:	1caa      	adds	r2, r5, #2
          break;
    68fa:	e05d      	b.n	69b8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    68fc:	1c60      	adds	r0, r4, #1
    68fe:	2300      	movs	r3, #0
    6900:	553b      	strb	r3, [r7, r4]
            return output_index;
    6902:	e0a0      	b.n	6a46 <MicroVsnprintf+0x196>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    6904:	1b33      	subs	r3, r6, r4
    6906:	2b09      	cmp	r3, #9
    6908:	dd0f      	ble.n	692a <MicroVsnprintf+0x7a>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = '0';
    690a:	1c63      	adds	r3, r4, #1
    690c:	2230      	movs	r2, #48	; 0x30
    690e:	553a      	strb	r2, [r7, r4]
          output[output_index++] = 'x';
    6910:	3402      	adds	r4, #2
    6912:	2278      	movs	r2, #120	; 0x78
    6914:	54fa      	strb	r2, [r7, r3]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6916:	9b01      	ldr	r3, [sp, #4]
    6918:	1d1a      	adds	r2, r3, #4
    691a:	9201      	str	r2, [sp, #4]
    691c:	6819      	ldr	r1, [r3, #0]
    691e:	1938      	adds	r0, r7, r4
    6920:	f00e fde7 	bl	154f2 <_ZN12_GLOBAL__N_19FormatHexEPcj>
          output_index +=
    6924:	4404      	add	r4, r0
          current++;
    6926:	1caa      	adds	r2, r5, #2
          break;
    6928:	e046      	b.n	69b8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    692a:	1c60      	adds	r0, r4, #1
    692c:	2300      	movs	r3, #0
    692e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6930:	e089      	b.n	6a46 <MicroVsnprintf+0x196>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6932:	1b30      	subs	r0, r6, r4
    6934:	f7fa f998 	bl	c68 <__aeabi_i2f>
    6938:	4944      	ldr	r1, [pc, #272]	; (6a4c <MicroVsnprintf+0x19c>)
    693a:	f7fa fb87 	bl	104c <__aeabi_fcmplt>
    693e:	b988      	cbnz	r0, 6964 <MicroVsnprintf+0xb4>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	3307      	adds	r3, #7
    6944:	f023 0307 	bic.w	r3, r3, #7
    6948:	f103 0208 	add.w	r2, r3, #8
    694c:	9201      	str	r2, [sp, #4]
    694e:	e9d3 0100 	ldrd	r0, r1, [r3]
    6952:	f7fa f87f 	bl	a54 <__aeabi_d2f>
    6956:	4601      	mov	r1, r0
    6958:	1938      	adds	r0, r7, r4
    695a:	f00e fdd3 	bl	15504 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
          output_index +=
    695e:	4404      	add	r4, r0
          current++;
    6960:	1caa      	adds	r2, r5, #2
          break;
    6962:	e029      	b.n	69b8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    6964:	1c60      	adds	r0, r4, #1
    6966:	2300      	movs	r3, #0
    6968:	553b      	strb	r3, [r7, r4]
            return output_index;
    696a:	e06c      	b.n	6a46 <MicroVsnprintf+0x196>
        case '%':
          output[output_index++] = *current++;
    696c:	1caa      	adds	r2, r5, #2
    696e:	553b      	strb	r3, [r7, r4]
    6970:	3401      	adds	r4, #1
          break;
    6972:	e021      	b.n	69b8 <MicroVsnprintf+0x108>
        case 'c':
          if (usable_length - output_index < 1) {
    6974:	1b33      	subs	r3, r6, r4
    6976:	2b00      	cmp	r3, #0
    6978:	dd07      	ble.n	698a <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
    697a:	9b01      	ldr	r3, [sp, #4]
    697c:	1d1a      	adds	r2, r3, #4
    697e:	9201      	str	r2, [sp, #4]
    6980:	681b      	ldr	r3, [r3, #0]
    6982:	553b      	strb	r3, [r7, r4]
          current++;
    6984:	1caa      	adds	r2, r5, #2
          output[output_index++] = va_arg(args, int32_t);
    6986:	3401      	adds	r4, #1
          break;
    6988:	e016      	b.n	69b8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    698a:	1c60      	adds	r0, r4, #1
    698c:	2300      	movs	r3, #0
    698e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6990:	e059      	b.n	6a46 <MicroVsnprintf+0x196>
        case 's':
          char* string = va_arg(args, char*);
    6992:	9b01      	ldr	r3, [sp, #4]
    6994:	1d1a      	adds	r2, r3, #4
    6996:	9201      	str	r2, [sp, #4]
    6998:	6819      	ldr	r1, [r3, #0]
          int string_idx = 0;
    699a:	2300      	movs	r3, #0
          while (string_idx + output_index < usable_length &&
    699c:	18e2      	adds	r2, r4, r3
    699e:	42b2      	cmp	r2, r6
    69a0:	da05      	bge.n	69ae <MicroVsnprintf+0xfe>
                 string[string_idx] != '\0') {
    69a2:	5cca      	ldrb	r2, [r1, r3]
          while (string_idx + output_index < usable_length &&
    69a4:	b11a      	cbz	r2, 69ae <MicroVsnprintf+0xfe>
            output[output_index++] = string[string_idx++];
    69a6:	3301      	adds	r3, #1
    69a8:	553a      	strb	r2, [r7, r4]
    69aa:	3401      	adds	r4, #1
          while (string_idx + output_index < usable_length &&
    69ac:	e7f6      	b.n	699c <MicroVsnprintf+0xec>
          }
          current++;
    69ae:	1caa      	adds	r2, r5, #2
    69b0:	e002      	b.n	69b8 <MicroVsnprintf+0x108>
      }
    } else {
      output[output_index++] = *current++;
    69b2:	1c6a      	adds	r2, r5, #1
    69b4:	553b      	strb	r3, [r7, r4]
    69b6:	3401      	adds	r4, #1
          output[output_index++] = va_arg(args, int32_t);
    69b8:	4615      	mov	r5, r2
  while (*current != '\0' && output_index < usable_length) {
    69ba:	782b      	ldrb	r3, [r5, #0]
    69bc:	2b00      	cmp	r3, #0
    69be:	d03f      	beq.n	6a40 <MicroVsnprintf+0x190>
    69c0:	42b4      	cmp	r4, r6
    69c2:	da3d      	bge.n	6a40 <MicroVsnprintf+0x190>
    if (*current == '%') {
    69c4:	2b25      	cmp	r3, #37	; 0x25
    69c6:	d1f4      	bne.n	69b2 <MicroVsnprintf+0x102>
      current++;
    69c8:	1c6a      	adds	r2, r5, #1
      switch (*current) {
    69ca:	786b      	ldrb	r3, [r5, #1]
    69cc:	2b25      	cmp	r3, #37	; 0x25
    69ce:	d0cd      	beq.n	696c <MicroVsnprintf+0xbc>
    69d0:	d3f2      	bcc.n	69b8 <MicroVsnprintf+0x108>
    69d2:	2b78      	cmp	r3, #120	; 0x78
    69d4:	d8f0      	bhi.n	69b8 <MicroVsnprintf+0x108>
    69d6:	2b63      	cmp	r3, #99	; 0x63
    69d8:	d3ee      	bcc.n	69b8 <MicroVsnprintf+0x108>
    69da:	3b63      	subs	r3, #99	; 0x63
    69dc:	2b15      	cmp	r3, #21
    69de:	d8eb      	bhi.n	69b8 <MicroVsnprintf+0x108>
    69e0:	a101      	add	r1, pc, #4	; (adr r1, 69e8 <MicroVsnprintf+0x138>)
    69e2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    69e6:	bf00      	nop
    69e8:	00006975 	.word	0x00006975
    69ec:	000068c1 	.word	0x000068c1
    69f0:	000069b9 	.word	0x000069b9
    69f4:	00006933 	.word	0x00006933
    69f8:	000069b9 	.word	0x000069b9
    69fc:	000069b9 	.word	0x000069b9
    6a00:	000069b9 	.word	0x000069b9
    6a04:	000069b9 	.word	0x000069b9
    6a08:	000069b9 	.word	0x000069b9
    6a0c:	000069b9 	.word	0x000069b9
    6a10:	000069b9 	.word	0x000069b9
    6a14:	000069b9 	.word	0x000069b9
    6a18:	000069b9 	.word	0x000069b9
    6a1c:	000069b9 	.word	0x000069b9
    6a20:	000069b9 	.word	0x000069b9
    6a24:	000069b9 	.word	0x000069b9
    6a28:	00006993 	.word	0x00006993
    6a2c:	000069b9 	.word	0x000069b9
    6a30:	000068e3 	.word	0x000068e3
    6a34:	000069b9 	.word	0x000069b9
    6a38:	000069b9 	.word	0x000069b9
    6a3c:	00006905 	.word	0x00006905
    }
  }
  output[output_index++] = '\0';
    6a40:	1c60      	adds	r0, r4, #1
    6a42:	2300      	movs	r3, #0
    6a44:	553b      	strb	r3, [r7, r4]
  return output_index;
}
    6a46:	b003      	add	sp, #12
    6a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a4a:	bf00      	nop
    6a4c:	41600000 	.word	0x41600000

00006a50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    6a50:	b570      	push	{r4, r5, r6, lr}
    6a52:	4604      	mov	r4, r0
    6a54:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    6a56:	f00e fcbb 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a5a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a5c:	4630      	mov	r0, r6
    6a5e:	f00e fcbd 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a62:	2808      	cmp	r0, #8
    6a64:	d918      	bls.n	6a98 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>
    6a66:	f106 0008 	add.w	r0, r6, #8
    6a6a:	f00e fcb7 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6a6e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a70:	b1a0      	cbz	r0, 6a9c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
    6a72:	4620      	mov	r0, r4
    6a74:	f00e fca6 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a78:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6a7a:	6820      	ldr	r0, [r4, #0]
    6a7c:	f00d fa83 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6a80:	4285      	cmp	r5, r0
    6a82:	d20d      	bcs.n	6aa0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x50>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6a84:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6a86:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6a8a:	4620      	mov	r0, r4
    6a8c:	f00e fc9a 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
    6a90:	4420      	add	r0, r4
    6a92:	f00e fd4d 	bl	15530 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
}
    6a96:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a98:	2000      	movs	r0, #0
    6a9a:	e7e8      	b.n	6a6e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a9c:	2400      	movs	r4, #0
    6a9e:	e7ec      	b.n	6a7a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    FLATBUFFERS_ASSERT(i < size());
    6aa0:	4b03      	ldr	r3, [pc, #12]	; (6ab0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>)
    6aa2:	4a04      	ldr	r2, [pc, #16]	; (6ab4 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x64>)
    6aa4:	f44f 7183 	mov.w	r1, #262	; 0x106
    6aa8:	4803      	ldr	r0, [pc, #12]	; (6ab8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x68>)
    6aaa:	f00b ffff 	bl	12aac <__assert_func>
    6aae:	bf00      	nop
    6ab0:	0001a5b4 	.word	0x0001a5b4
    6ab4:	0001a704 	.word	0x0001a704
    6ab8:	0001a680 	.word	0x0001a680

00006abc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    6abc:	6943      	ldr	r3, [r0, #20]
    6abe:	2b20      	cmp	r3, #32
    6ac0:	d007      	beq.n	6ad2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    6ac2:	b2da      	uxtb	r2, r3
  return (v < low) || (high < v);
    6ac4:	2a91      	cmp	r2, #145	; 0x91
    6ac6:	d806      	bhi.n	6ad6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1a>
  const size_t index = static_cast<size_t>(e);
    6ac8:	4613      	mov	r3, r2
  return EnumNamesBuiltinOperator()[index];
    6aca:	4a04      	ldr	r2, [pc, #16]	; (6adc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    6acc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6ad0:	4770      	bx	lr
    return registration->custom_name;
    6ad2:	6980      	ldr	r0, [r0, #24]
    6ad4:	4770      	bx	lr
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6ad6:	4802      	ldr	r0, [pc, #8]	; (6ae0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>)
  }
}
    6ad8:	4770      	bx	lr
    6ada:	bf00      	nop
    6adc:	0001b110 	.word	0x0001b110
    6ae0:	00019de0 	.word	0x00019de0

00006ae4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    6ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ae8:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    6aea:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6aee:	2600      	movs	r6, #0
    6af0:	e024      	b.n	6b3c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x58>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    6af2:	4621      	mov	r1, r4
    6af4:	68e8      	ldr	r0, [r5, #12]
    6af6:	f00e ff57 	bl	159a8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    6afa:	3401      	adds	r4, #1
    6afc:	42bc      	cmp	r4, r7
    6afe:	d21c      	bcs.n	6b3a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6b00:	692b      	ldr	r3, [r5, #16]
    6b02:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    6b06:	212c      	movs	r1, #44	; 0x2c
    6b08:	fb01 3104 	mla	r1, r1, r4, r3
      const TfLiteRegistration* registration =
    6b0c:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
    6b10:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6b14:	2b00      	cmp	r3, #0
    6b16:	d0ec      	beq.n	6af2 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    6b18:	6868      	ldr	r0, [r5, #4]
    6b1a:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
    6b1c:	4682      	mov	sl, r0
    6b1e:	2800      	cmp	r0, #0
    6b20:	d0e7      	beq.n	6af2 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    6b22:	4648      	mov	r0, r9
    6b24:	f7ff ffca 	bl	6abc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6b28:	4601      	mov	r1, r0
    6b2a:	4653      	mov	r3, sl
    6b2c:	4622      	mov	r2, r4
    6b2e:	480c      	ldr	r0, [pc, #48]	; (6b60 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    6b30:	f00e fbc3 	bl	152ba <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6b34:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    6b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6b3a:	3601      	adds	r6, #1
    6b3c:	69ab      	ldr	r3, [r5, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6b3e:	6818      	ldr	r0, [r3, #0]
    6b40:	f00d fa21 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6b44:	4286      	cmp	r6, r0
    6b46:	d207      	bcs.n	6b58 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    current_subgraph_index_ = subgraph_idx;
    6b48:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    6b4a:	4631      	mov	r1, r6
    6b4c:	68a8      	ldr	r0, [r5, #8]
    6b4e:	f7ff ff7f 	bl	6a50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    6b52:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    6b54:	2400      	movs	r4, #0
    6b56:	e7d1      	b.n	6afc <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x18>
  current_subgraph_index_ = previous_subgraph_idx;
    6b58:	f8c5 8014 	str.w	r8, [r5, #20]
  return kTfLiteOk;
    6b5c:	2000      	movs	r0, #0
    6b5e:	e7ea      	b.n	6b36 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x52>
    6b60:	0001a7fc 	.word	0x0001a7fc

00006b64 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    6b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b68:	b083      	sub	sp, #12
    6b6a:	4606      	mov	r6, r0
    6b6c:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    6b6e:	f8d0 b014 	ldr.w	fp, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    6b72:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    6b74:	6983      	ldr	r3, [r0, #24]
    6b76:	6818      	ldr	r0, [r3, #0]
    6b78:	f00d fa05 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6b7c:	4284      	cmp	r4, r0
    6b7e:	d207      	bcs.n	6b90 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x2c>
    6b80:	46a2      	mov	sl, r4
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    6b82:	4621      	mov	r1, r4
    6b84:	68b0      	ldr	r0, [r6, #8]
    6b86:	f7ff ff63 	bl	6a50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    6b8a:	4681      	mov	r9, r0
  for (size_t i = 0; i < operators_size; ++i) {
    6b8c:	2700      	movs	r7, #0
    6b8e:	e01d      	b.n	6bcc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    6b90:	4602      	mov	r2, r0
    6b92:	4621      	mov	r1, r4
    6b94:	4827      	ldr	r0, [pc, #156]	; (6c34 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd0>)
    6b96:	f00e fb90 	bl	152ba <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    6b9a:	2501      	movs	r5, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    6b9c:	4628      	mov	r0, r5
    6b9e:	b003      	add	sp, #12
    6ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK(registration->invoke);
    6ba4:	f011 ff7e 	bl	18aa4 <abort>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    6ba8:	4640      	mov	r0, r8
    6baa:	f7ff ff87 	bl	6abc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6bae:	4601      	mov	r1, r0
    6bb0:	462b      	mov	r3, r5
    6bb2:	463a      	mov	r2, r7
    6bb4:	4820      	ldr	r0, [pc, #128]	; (6c38 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd4>)
    6bb6:	f00e fb80 	bl	152ba <_Z11MicroPrintfPKcz>
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
    6bba:	2c00      	cmp	r4, #0
    6bbc:	d0ee      	beq.n	6b9c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
      profiler_->EndEvent(event_handle_);
    6bbe:	6823      	ldr	r3, [r4, #0]
    6bc0:	68db      	ldr	r3, [r3, #12]
    6bc2:	9900      	ldr	r1, [sp, #0]
    6bc4:	4620      	mov	r0, r4
    6bc6:	4798      	blx	r3
    6bc8:	e7e8      	b.n	6b9c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
  for (size_t i = 0; i < operators_size; ++i) {
    6bca:	3701      	adds	r7, #1
    6bcc:	454f      	cmp	r7, r9
    6bce:	d22d      	bcs.n	6c2c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6bd0:	6933      	ldr	r3, [r6, #16]
    6bd2:	f853 303a 	ldr.w	r3, [r3, sl, lsl #3]
    6bd6:	252c      	movs	r5, #44	; 0x2c
    6bd8:	fb05 3507 	mla	r5, r5, r7, r3
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    6bdc:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    6be0:	4640      	mov	r0, r8
    6be2:	f7ff ff6b 	bl	6abc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6be6:	4601      	mov	r1, r0
    6be8:	6873      	ldr	r3, [r6, #4]
    6bea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
      : profiler_(profiler) {
    6bec:	2300      	movs	r3, #0
    6bee:	9300      	str	r3, [sp, #0]
    if (profiler_ != nullptr) {
    6bf0:	b124      	cbz	r4, 6bfc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x98>
      event_handle_ = profiler_->BeginEvent(tag);
    6bf2:	6823      	ldr	r3, [r4, #0]
    6bf4:	689b      	ldr	r3, [r3, #8]
    6bf6:	4620      	mov	r0, r4
    6bf8:	4798      	blx	r3
    6bfa:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
    6bfc:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6c00:	2b00      	cmp	r3, #0
    6c02:	d0cf      	beq.n	6ba4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x40>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    6c04:	4629      	mov	r1, r5
    6c06:	6870      	ldr	r0, [r6, #4]
    6c08:	4798      	blx	r3
    6c0a:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
    6c0c:	68f0      	ldr	r0, [r6, #12]
    6c0e:	6803      	ldr	r3, [r0, #0]
    6c10:	689b      	ldr	r3, [r3, #8]
    6c12:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
    6c14:	2d01      	cmp	r5, #1
    6c16:	d0c7      	beq.n	6ba8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x44>
    } else if (invoke_status != kTfLiteOk) {
    6c18:	2d00      	cmp	r5, #0
    6c1a:	d1ce      	bne.n	6bba <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x56>
    if (profiler_ != nullptr) {
    6c1c:	2c00      	cmp	r4, #0
    6c1e:	d0d4      	beq.n	6bca <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
      profiler_->EndEvent(event_handle_);
    6c20:	6823      	ldr	r3, [r4, #0]
    6c22:	68db      	ldr	r3, [r3, #12]
    6c24:	9900      	ldr	r1, [sp, #0]
    6c26:	4620      	mov	r0, r4
    6c28:	4798      	blx	r3
    6c2a:	e7ce      	b.n	6bca <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
  current_subgraph_index_ = previous_subgraph_idx;
    6c2c:	f8c6 b014 	str.w	fp, [r6, #20]
  return kTfLiteOk;
    6c30:	2500      	movs	r5, #0
    6c32:	e7b3      	b.n	6b9c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
    6c34:	0001a834 	.word	0x0001a834
    6c38:	0001a868 	.word	0x0001a868

00006c3c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    6c3c:	b570      	push	{r4, r5, r6, lr}
    6c3e:	4604      	mov	r4, r0
    6c40:	4615      	mov	r5, r2
      current_subgraph_index_(0) {
    6c42:	4a11      	ldr	r2, [pc, #68]	; (6c88 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x4c>)
    6c44:	6002      	str	r2, [r0, #0]
    6c46:	6041      	str	r1, [r0, #4]
    6c48:	6085      	str	r5, [r0, #8]
    6c4a:	60c3      	str	r3, [r0, #12]
    6c4c:	2300      	movs	r3, #0
    6c4e:	6103      	str	r3, [r0, #16]
    6c50:	6143      	str	r3, [r0, #20]
  if (model != nullptr) {
    6c52:	b19d      	cbz	r5, 6c7c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    6c54:	4628      	mov	r0, r5
    6c56:	f00e fbbb 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c5a:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c5c:	4630      	mov	r0, r6
    6c5e:	f00e fbbd 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c62:	2808      	cmp	r0, #8
    6c64:	d90c      	bls.n	6c80 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    6c66:	f106 0008 	add.w	r0, r6, #8
    6c6a:	f00e fbb7 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c6e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c70:	b140      	cbz	r0, 6c84 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x48>
    6c72:	4628      	mov	r0, r5
    6c74:	f00e fba6 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c78:	4405      	add	r5, r0
    subgraphs_ = model->subgraphs();
    6c7a:	61a5      	str	r5, [r4, #24]
}
    6c7c:	4620      	mov	r0, r4
    6c7e:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c80:	2000      	movs	r0, #0
    6c82:	e7f4      	b.n	6c6e <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x32>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c84:	2500      	movs	r5, #0
    6c86:	e7f8      	b.n	6c7a <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3e>
    6c88:	0001b364 	.word	0x0001b364

00006c8c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    6c8c:	b570      	push	{r4, r5, r6, lr}
    6c8e:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    6c90:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6c92:	4620      	mov	r0, r4
    6c94:	f00e fb9c 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c98:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c9a:	4630      	mov	r0, r6
    6c9c:	f00e fb9e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ca0:	2808      	cmp	r0, #8
    6ca2:	d92c      	bls.n	6cfe <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x72>
    6ca4:	f106 0008 	add.w	r0, r6, #8
    6ca8:	f00e fb98 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6cac:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cae:	b340      	cbz	r0, 6d02 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x76>
    6cb0:	4620      	mov	r0, r4
    6cb2:	f00e fb87 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6cb6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6cb8:	6820      	ldr	r0, [r4, #0]
    6cba:	f00d f964 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6cbe:	4285      	cmp	r5, r0
    6cc0:	d221      	bcs.n	6d06 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x7a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6cc2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6cc4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6cc8:	4620      	mov	r0, r4
    6cca:	f00e fb7b 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6cce:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6cd0:	4620      	mov	r0, r4
    6cd2:	f00e fb7d 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6cd6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6cd8:	4628      	mov	r0, r5
    6cda:	f00e fb7f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cde:	2808      	cmp	r0, #8
    6ce0:	d918      	bls.n	6d14 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x88>
    6ce2:	f105 0008 	add.w	r0, r5, #8
    6ce6:	f00e fb79 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6cea:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cec:	b1a0      	cbz	r0, 6d18 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x8c>
    6cee:	4620      	mov	r0, r4
    6cf0:	f00e fb68 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6cf4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6cf6:	6820      	ldr	r0, [r4, #0]
    6cf8:	f00d f945 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6cfc:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cfe:	2000      	movs	r0, #0
    6d00:	e7d4      	b.n	6cac <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d02:	2400      	movs	r4, #0
    6d04:	e7d8      	b.n	6cb8 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6d06:	4b05      	ldr	r3, [pc, #20]	; (6d1c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x90>)
    6d08:	4a05      	ldr	r2, [pc, #20]	; (6d20 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x94>)
    6d0a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6d0e:	4805      	ldr	r0, [pc, #20]	; (6d24 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x98>)
    6d10:	f00b fecc 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d14:	2000      	movs	r0, #0
    6d16:	e7e8      	b.n	6cea <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d18:	2400      	movs	r4, #0
    6d1a:	e7ec      	b.n	6cf6 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x6a>
    6d1c:	0001a5b4 	.word	0x0001a5b4
    6d20:	0001a704 	.word	0x0001a704
    6d24:	0001a680 	.word	0x0001a680

00006d28 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    6d28:	b570      	push	{r4, r5, r6, lr}
    6d2a:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    6d2c:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6d2e:	4620      	mov	r0, r4
    6d30:	f00e fb4e 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d34:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d36:	4630      	mov	r0, r6
    6d38:	f00e fb50 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d3c:	2808      	cmp	r0, #8
    6d3e:	d92b      	bls.n	6d98 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x70>
    6d40:	f106 0008 	add.w	r0, r6, #8
    6d44:	f00e fb4a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d48:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d4a:	b338      	cbz	r0, 6d9c <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x74>
    6d4c:	4620      	mov	r0, r4
    6d4e:	f00e fb39 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d52:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d54:	6820      	ldr	r0, [r4, #0]
    6d56:	f00d f916 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d5a:	4285      	cmp	r5, r0
    6d5c:	d220      	bcs.n	6da0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x78>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d5e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6d60:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6d64:	4620      	mov	r0, r4
    6d66:	f00e fb2d 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d6a:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6d6c:	4620      	mov	r0, r4
    6d6e:	f00e fb2f 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d72:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d74:	4628      	mov	r0, r5
    6d76:	f00e fb31 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d7a:	2806      	cmp	r0, #6
    6d7c:	d917      	bls.n	6dae <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x86>
    6d7e:	1da8      	adds	r0, r5, #6
    6d80:	f00e fb2c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d84:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d86:	b1a0      	cbz	r0, 6db2 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x8a>
    6d88:	4620      	mov	r0, r4
    6d8a:	f00e fb1b 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d8e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d90:	6820      	ldr	r0, [r4, #0]
    6d92:	f00d f8f8 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6d96:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d98:	2000      	movs	r0, #0
    6d9a:	e7d5      	b.n	6d48 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d9c:	2400      	movs	r4, #0
    6d9e:	e7d9      	b.n	6d54 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6da0:	4b05      	ldr	r3, [pc, #20]	; (6db8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x90>)
    6da2:	4a06      	ldr	r2, [pc, #24]	; (6dbc <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x94>)
    6da4:	f44f 7183 	mov.w	r1, #262	; 0x106
    6da8:	4805      	ldr	r0, [pc, #20]	; (6dc0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x98>)
    6daa:	f00b fe7f 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6dae:	2000      	movs	r0, #0
    6db0:	e7e8      	b.n	6d84 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6db2:	2400      	movs	r4, #0
    6db4:	e7ec      	b.n	6d90 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x68>
    6db6:	bf00      	nop
    6db8:	0001a5b4 	.word	0x0001a5b4
    6dbc:	0001a704 	.word	0x0001a704
    6dc0:	0001a680 	.word	0x0001a680

00006dc4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    6dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dc8:	4606      	mov	r6, r0
    6dca:	460d      	mov	r5, r1
    6dcc:	4617      	mov	r7, r2
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    6dce:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6dd0:	4620      	mov	r0, r4
    6dd2:	f00e fafd 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6dd6:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6dda:	4640      	mov	r0, r8
    6ddc:	f00e fafe 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6de0:	2808      	cmp	r0, #8
    6de2:	d93d      	bls.n	6e60 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x9c>
    6de4:	f108 0008 	add.w	r0, r8, #8
    6de8:	f00e faf8 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6dec:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6dee:	b3c8      	cbz	r0, 6e64 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa0>
    6df0:	4620      	mov	r0, r4
    6df2:	f00e fae7 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6df6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6df8:	6820      	ldr	r0, [r4, #0]
    6dfa:	f00d f8c4 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6dfe:	4285      	cmp	r5, r0
    6e00:	d232      	bcs.n	6e68 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e02:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6e04:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6e08:	4620      	mov	r0, r4
    6e0a:	f00e fadb 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e0e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6e10:	4620      	mov	r0, r4
    6e12:	f00e fadd 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e16:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e1a:	4640      	mov	r0, r8
    6e1c:	f00e fade 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e20:	2808      	cmp	r0, #8
    6e22:	d928      	bls.n	6e76 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb2>
    6e24:	f108 0008 	add.w	r0, r8, #8
    6e28:	f00e fad8 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6e2c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e2e:	b320      	cbz	r0, 6e7a <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb6>
    6e30:	4620      	mov	r0, r4
    6e32:	f00e fac7 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e36:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6e38:	6820      	ldr	r0, [r4, #0]
    6e3a:	f00d f8a4 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6e3e:	4287      	cmp	r7, r0
    6e40:	d21d      	bcs.n	6e7e <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e42:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6e44:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6e48:	f00e fac1 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6e4c:	6931      	ldr	r1, [r6, #16]
    6e4e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6e52:	686b      	ldr	r3, [r5, #4]
    6e54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6e58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e60:	2000      	movs	r0, #0
    6e62:	e7c3      	b.n	6dec <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e64:	2400      	movs	r4, #0
    6e66:	e7c7      	b.n	6df8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6e68:	4b08      	ldr	r3, [pc, #32]	; (6e8c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6e6a:	4a09      	ldr	r2, [pc, #36]	; (6e90 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xcc>)
    6e6c:	f44f 7183 	mov.w	r1, #262	; 0x106
    6e70:	4808      	ldr	r0, [pc, #32]	; (6e94 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6e72:	f00b fe1b 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e76:	2000      	movs	r0, #0
    6e78:	e7d8      	b.n	6e2c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e7a:	2400      	movs	r4, #0
    6e7c:	e7dc      	b.n	6e38 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6e7e:	4b03      	ldr	r3, [pc, #12]	; (6e8c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6e80:	4a05      	ldr	r2, [pc, #20]	; (6e98 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd4>)
    6e82:	f44f 7183 	mov.w	r1, #262	; 0x106
    6e86:	4803      	ldr	r0, [pc, #12]	; (6e94 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6e88:	f00b fe10 	bl	12aac <__assert_func>
    6e8c:	0001a5b4 	.word	0x0001a5b4
    6e90:	0001a704 	.word	0x0001a704
    6e94:	0001a680 	.word	0x0001a680
    6e98:	0001a5c0 	.word	0x0001a5c0

00006e9c <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
                                               int input_idx) {
    6e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ea0:	4606      	mov	r6, r0
    6ea2:	460d      	mov	r5, r1
    6ea4:	4617      	mov	r7, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    6ea6:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6ea8:	4620      	mov	r0, r4
    6eaa:	f00e fa91 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6eae:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6eb2:	4640      	mov	r0, r8
    6eb4:	f00e fa92 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6eb8:	2808      	cmp	r0, #8
    6eba:	d93d      	bls.n	6f38 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x9c>
    6ebc:	f108 0008 	add.w	r0, r8, #8
    6ec0:	f00e fa8c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6ec4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ec6:	b3c8      	cbz	r0, 6f3c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa0>
    6ec8:	4620      	mov	r0, r4
    6eca:	f00e fa7b 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ece:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6ed0:	6820      	ldr	r0, [r4, #0]
    6ed2:	f00d f858 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6ed6:	4285      	cmp	r5, r0
    6ed8:	d232      	bcs.n	6f40 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6eda:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6edc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ee0:	4620      	mov	r0, r4
    6ee2:	f00e fa6f 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ee6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6ee8:	4620      	mov	r0, r4
    6eea:	f00e fa71 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6eee:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ef2:	4640      	mov	r0, r8
    6ef4:	f00e fa72 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ef8:	2806      	cmp	r0, #6
    6efa:	d928      	bls.n	6f4e <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb2>
    6efc:	f108 0006 	add.w	r0, r8, #6
    6f00:	f00e fa6c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6f04:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f06:	b320      	cbz	r0, 6f52 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb6>
    6f08:	4620      	mov	r0, r4
    6f0a:	f00e fa5b 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f0e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6f10:	6820      	ldr	r0, [r4, #0]
    6f12:	f00d f838 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6f16:	4287      	cmp	r7, r0
    6f18:	d21d      	bcs.n	6f56 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6f1a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6f1c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6f20:	f00e fa55 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6f24:	6931      	ldr	r1, [r6, #16]
    6f26:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6f2a:	686b      	ldr	r3, [r5, #4]
    6f2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6f30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f38:	2000      	movs	r0, #0
    6f3a:	e7c3      	b.n	6ec4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f3c:	2400      	movs	r4, #0
    6f3e:	e7c7      	b.n	6ed0 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6f40:	4b08      	ldr	r3, [pc, #32]	; (6f64 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6f42:	4a09      	ldr	r2, [pc, #36]	; (6f68 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xcc>)
    6f44:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f48:	4808      	ldr	r0, [pc, #32]	; (6f6c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6f4a:	f00b fdaf 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f4e:	2000      	movs	r0, #0
    6f50:	e7d8      	b.n	6f04 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f52:	2400      	movs	r4, #0
    6f54:	e7dc      	b.n	6f10 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6f56:	4b03      	ldr	r3, [pc, #12]	; (6f64 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6f58:	4a05      	ldr	r2, [pc, #20]	; (6f70 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd4>)
    6f5a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f5e:	4803      	ldr	r0, [pc, #12]	; (6f6c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6f60:	f00b fda4 	bl	12aac <__assert_func>
    6f64:	0001a5b4 	.word	0x0001a5b4
    6f68:	0001a704 	.word	0x0001a704
    6f6c:	0001a680 	.word	0x0001a680
    6f70:	0001a5c0 	.word	0x0001a5c0

00006f74 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    6f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f78:	b083      	sub	sp, #12
    6f7a:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6f7c:	2700      	movs	r7, #0
    6f7e:	e0c8      	b.n	7112 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19e>
    6f80:	4b71      	ldr	r3, [pc, #452]	; (7148 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6f82:	4a72      	ldr	r2, [pc, #456]	; (714c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d8>)
    6f84:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f88:	4871      	ldr	r0, [pc, #452]	; (7150 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6f8a:	f00b fd8f 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f8e:	2000      	movs	r0, #0
    6f90:	e01d      	b.n	6fce <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f92:	2400      	movs	r4, #0
    6f94:	e022      	b.n	6fdc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x68>
    FLATBUFFERS_ASSERT(i < size());
    6f96:	4b6c      	ldr	r3, [pc, #432]	; (7148 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6f98:	4a6e      	ldr	r2, [pc, #440]	; (7154 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e0>)
    6f9a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f9e:	486c      	ldr	r0, [pc, #432]	; (7150 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6fa0:	f00b fd84 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fa4:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6fa6:	b118      	cbz	r0, 6fb0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
    6fa8:	4420      	add	r0, r4
    6faa:	f00e fae0 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    6fae:	e000      	b.n	6fb2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3e>
    6fb0:	2000      	movs	r0, #0
      if (tensor->is_variable()) {
    6fb2:	bba0      	cbnz	r0, 701e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6fb4:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6fb6:	4630      	mov	r0, r6
    6fb8:	f00e fa0a 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6fbc:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6fbe:	4620      	mov	r0, r4
    6fc0:	f00e fa0c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fc4:	2804      	cmp	r0, #4
    6fc6:	d9e2      	bls.n	6f8e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1a>
    6fc8:	1d20      	adds	r0, r4, #4
    6fca:	f00e fa07 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6fce:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fd0:	2800      	cmp	r0, #0
    6fd2:	d0de      	beq.n	6f92 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
    6fd4:	4620      	mov	r0, r4
    6fd6:	f00e f9f5 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fda:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6fdc:	6820      	ldr	r0, [r4, #0]
    6fde:	f00c ffd2 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6fe2:	4285      	cmp	r5, r0
    6fe4:	f080 8094 	bcs.w	7110 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19c>
    6fe8:	6820      	ldr	r0, [r4, #0]
    6fea:	f00c ffcc 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6fee:	4285      	cmp	r5, r0
    6ff0:	d2d1      	bcs.n	6f96 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6ff2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6ff4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ff8:	4620      	mov	r0, r4
    6ffa:	f00e f9e3 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ffe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7000:	4620      	mov	r0, r4
    7002:	f00e f9e5 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7006:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    700a:	4648      	mov	r0, r9
    700c:	f00e f9e6 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7010:	280e      	cmp	r0, #14
    7012:	d9c7      	bls.n	6fa4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x30>
    7014:	f109 000e 	add.w	r0, r9, #14
    7018:	f00e f9e0 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    701c:	e7c3      	b.n	6fa6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x32>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    701e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    7022:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    7026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    702a:	6858      	ldr	r0, [r3, #4]
    702c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    7030:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    7034:	a901      	add	r1, sp, #4
    7036:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    703a:	f00e f9a2 	bl	15382 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    703e:	4603      	mov	r3, r0
    7040:	2800      	cmp	r0, #0
    7042:	d17d      	bne.n	7140 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1cc>
    return data_ - ReadScalar<soffset_t>(data_);
    7044:	4620      	mov	r0, r4
    7046:	f00e f9c3 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    704a:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    704e:	4648      	mov	r0, r9
    7050:	f00e f9c4 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7054:	2806      	cmp	r0, #6
    7056:	d914      	bls.n	7082 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    7058:	f109 0006 	add.w	r0, r9, #6
    705c:	f00e f9be 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7060:	b188      	cbz	r0, 7086 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
    7062:	4420      	add	r0, r4
    7064:	f00e f9c0 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        if (tensor->type() == tflite::TensorType_INT8) {
    7068:	2809      	cmp	r0, #9
    706a:	d00e      	beq.n	708a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x116>
        int value = 0;
    706c:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    706e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    7072:	4453      	add	r3, sl
    7074:	685b      	ldr	r3, [r3, #4]
    7076:	9a01      	ldr	r2, [sp, #4]
    7078:	f853 000b 	ldr.w	r0, [r3, fp]
    707c:	f011 fd46 	bl	18b0c <memset>
    7080:	e798      	b.n	6fb4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7082:	2000      	movs	r0, #0
    7084:	e7ec      	b.n	7060 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7086:	2000      	movs	r0, #0
    7088:	e7ee      	b.n	7068 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
    return data_ - ReadScalar<soffset_t>(data_);
    708a:	4620      	mov	r0, r4
    708c:	f00e f9a0 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7090:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7094:	4648      	mov	r0, r9
    7096:	f00e f9a1 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    709a:	280c      	cmp	r0, #12
    709c:	d928      	bls.n	70f0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17c>
    709e:	f109 000c 	add.w	r0, r9, #12
    70a2:	f00e f99b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    70a6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70a8:	b320      	cbz	r0, 70f4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x180>
    70aa:	4620      	mov	r0, r4
    70ac:	f00e f98a 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70b0:	4404      	add	r4, r0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    70b2:	46a1      	mov	r9, r4
    return data_ - ReadScalar<soffset_t>(data_);
    70b4:	4620      	mov	r0, r4
    70b6:	f00e f98b 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    70ba:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    70bc:	4620      	mov	r0, r4
    70be:	f00e f98d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70c2:	280a      	cmp	r0, #10
    70c4:	d918      	bls.n	70f8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x184>
    70c6:	f104 000a 	add.w	r0, r4, #10
    70ca:	f00e f987 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    70ce:	4481      	add	r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70d0:	b1a0      	cbz	r0, 70fc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x188>
    70d2:	4648      	mov	r0, r9
    70d4:	f00e f976 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70d8:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    70da:	f8d9 0000 	ldr.w	r0, [r9]
    70de:	f00c ff52 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    70e2:	b170      	cbz	r0, 7102 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18e>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    70e4:	e9d9 0101 	ldrd	r0, r1, [r9, #4]
    70e8:	f00e fa46 	bl	15578 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    70ec:	4601      	mov	r1, r0
    70ee:	e7be      	b.n	706e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70f0:	2000      	movs	r0, #0
    70f2:	e7d8      	b.n	70a6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70f4:	2400      	movs	r4, #0
    70f6:	e7dc      	b.n	70b2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x13e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70f8:	2000      	movs	r0, #0
    70fa:	e7e8      	b.n	70ce <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70fc:	f04f 0900 	mov.w	r9, #0
    7100:	e7eb      	b.n	70da <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x166>
    FLATBUFFERS_ASSERT(i < size());
    7102:	4b11      	ldr	r3, [pc, #68]	; (7148 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    7104:	4a14      	ldr	r2, [pc, #80]	; (7158 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e4>)
    7106:	f44f 7183 	mov.w	r1, #262	; 0x106
    710a:	4811      	ldr	r0, [pc, #68]	; (7150 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    710c:	f00b fcce 	bl	12aac <__assert_func>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    7110:	3701      	adds	r7, #1
    7112:	f8d8 6018 	ldr.w	r6, [r8, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    7116:	6830      	ldr	r0, [r6, #0]
    7118:	f00c ff35 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    711c:	4287      	cmp	r7, r0
    711e:	d20e      	bcs.n	713e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1ca>
    7120:	6830      	ldr	r0, [r6, #0]
    7122:	f00c ff30 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7126:	4287      	cmp	r7, r0
    7128:	f4bf af2a 	bcs.w	6f80 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    712c:	3604      	adds	r6, #4
    p += i * sizeof(uoffset_t);
    712e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7132:	4630      	mov	r0, r6
    7134:	f00e f946 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7138:	4406      	add	r6, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    713a:	2500      	movs	r5, #0
    713c:	e73b      	b.n	6fb6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x42>
  return kTfLiteOk;
    713e:	2300      	movs	r3, #0
}
    7140:	4618      	mov	r0, r3
    7142:	b003      	add	sp, #12
    7144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7148:	0001a5b4 	.word	0x0001a5b4
    714c:	0001a704 	.word	0x0001a704
    7150:	0001a680 	.word	0x0001a680
    7154:	0001a89c 	.word	0x0001a89c
    7158:	0001a990 	.word	0x0001a990

0000715c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
    715c:	6180      	str	r0, [r0, #24]
  context_.ReportError = ReportOpError;
    715e:	4b05      	ldr	r3, [pc, #20]	; (7174 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x18>)
    7160:	6203      	str	r3, [r0, #32]
  context_.GetTensor = GetTensor;
    7162:	4b05      	ldr	r3, [pc, #20]	; (7178 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x1c>)
    7164:	65c3      	str	r3, [r0, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    7166:	4b05      	ldr	r3, [pc, #20]	; (717c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x20>)
    7168:	6603      	str	r3, [r0, #96]	; 0x60
  context_.profiler = profiler;
    716a:	6401      	str	r1, [r0, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
    716c:	2300      	movs	r3, #0
    716e:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
}
    7172:	4770      	bx	lr
    7174:	000156ff 	.word	0x000156ff
    7178:	000156ad 	.word	0x000156ad
    717c:	000156cb 	.word	0x000156cb

00007180 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    7180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7182:	4605      	mov	r5, r0
    7184:	460e      	mov	r6, r1
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
    7186:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7188:	4620      	mov	r0, r4
    718a:	f00e f921 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    718e:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7190:	4638      	mov	r0, r7
    7192:	f00e f923 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7196:	2808      	cmp	r0, #8
    7198:	d92f      	bls.n	71fa <_ZN6tflite16MicroInterpreter6outputEj+0x7a>
    719a:	f107 0008 	add.w	r0, r7, #8
    719e:	f00e f91d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    71a2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71a4:	b358      	cbz	r0, 71fe <_ZN6tflite16MicroInterpreter6outputEj+0x7e>
    71a6:	4620      	mov	r0, r4
    71a8:	f00e f90c 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71ac:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    71ae:	6820      	ldr	r0, [r4, #0]
    71b0:	f00c fee9 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    71b4:	b328      	cbz	r0, 7202 <_ZN6tflite16MicroInterpreter6outputEj+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    71b6:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    71b8:	4620      	mov	r0, r4
    71ba:	f00e f903 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71be:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    71c0:	4620      	mov	r0, r4
    71c2:	f00e f905 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    71c6:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    71c8:	4638      	mov	r0, r7
    71ca:	f00e f907 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71ce:	2808      	cmp	r0, #8
    71d0:	d91e      	bls.n	7210 <_ZN6tflite16MicroInterpreter6outputEj+0x90>
    71d2:	f107 0008 	add.w	r0, r7, #8
    71d6:	f00e f901 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    71da:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71dc:	b1d0      	cbz	r0, 7214 <_ZN6tflite16MicroInterpreter6outputEj+0x94>
    71de:	4620      	mov	r0, r4
    71e0:	f00e f8f0 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71e4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    71e6:	6820      	ldr	r0, [r4, #0]
    71e8:	f00c fecd 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  const size_t length = outputs_size();
  if (index >= length) {
    71ec:	4286      	cmp	r6, r0
    71ee:	d213      	bcs.n	7218 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return output_tensors_[index];
    71f0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    71f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    71f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71fa:	2000      	movs	r0, #0
    71fc:	e7d1      	b.n	71a2 <_ZN6tflite16MicroInterpreter6outputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71fe:	2400      	movs	r4, #0
    7200:	e7d5      	b.n	71ae <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    7202:	4b09      	ldr	r3, [pc, #36]	; (7228 <_ZN6tflite16MicroInterpreter6outputEj+0xa8>)
    7204:	4a09      	ldr	r2, [pc, #36]	; (722c <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
    7206:	f44f 7183 	mov.w	r1, #262	; 0x106
    720a:	4809      	ldr	r0, [pc, #36]	; (7230 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
    720c:	f00b fc4e 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7210:	2000      	movs	r0, #0
    7212:	e7e2      	b.n	71da <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7214:	2400      	movs	r4, #0
    7216:	e7e6      	b.n	71e6 <_ZN6tflite16MicroInterpreter6outputEj+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7218:	4603      	mov	r3, r0
    721a:	4632      	mov	r2, r6
    721c:	4905      	ldr	r1, [pc, #20]	; (7234 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
    721e:	68a8      	ldr	r0, [r5, #8]
    7220:	f00e fe50 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7224:	2000      	movs	r0, #0
    7226:	e7e7      	b.n	71f8 <_ZN6tflite16MicroInterpreter6outputEj+0x78>
    7228:	0001a5b4 	.word	0x0001a5b4
    722c:	0001a704 	.word	0x0001a704
    7230:	0001a680 	.word	0x0001a680
    7234:	0001b394 	.word	0x0001b394

00007238 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    7238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    723a:	4605      	mov	r5, r0
    723c:	460e      	mov	r6, r1
    return model_->subgraphs()->Get(0)->inputs()->size();
    723e:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7240:	4620      	mov	r0, r4
    7242:	f00e f8c5 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7246:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7248:	4638      	mov	r0, r7
    724a:	f00e f8c7 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    724e:	2808      	cmp	r0, #8
    7250:	d92e      	bls.n	72b0 <_ZN6tflite16MicroInterpreter5inputEj+0x78>
    7252:	f107 0008 	add.w	r0, r7, #8
    7256:	f00e f8c1 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    725a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    725c:	b350      	cbz	r0, 72b4 <_ZN6tflite16MicroInterpreter5inputEj+0x7c>
    725e:	4620      	mov	r0, r4
    7260:	f00e f8b0 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7264:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7266:	6820      	ldr	r0, [r4, #0]
    7268:	f00c fe8d 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    726c:	b320      	cbz	r0, 72b8 <_ZN6tflite16MicroInterpreter5inputEj+0x80>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    726e:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7270:	4620      	mov	r0, r4
    7272:	f00e f8a7 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7276:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7278:	4620      	mov	r0, r4
    727a:	f00e f8a9 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    727e:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7280:	4638      	mov	r0, r7
    7282:	f00e f8ab 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7286:	2806      	cmp	r0, #6
    7288:	d91d      	bls.n	72c6 <_ZN6tflite16MicroInterpreter5inputEj+0x8e>
    728a:	1db8      	adds	r0, r7, #6
    728c:	f00e f8a6 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7290:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7292:	b1d0      	cbz	r0, 72ca <_ZN6tflite16MicroInterpreter5inputEj+0x92>
    7294:	4620      	mov	r0, r4
    7296:	f00e f895 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    729a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    729c:	6820      	ldr	r0, [r4, #0]
    729e:	f00c fe72 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  if (index >= length) {
    72a2:	4286      	cmp	r6, r0
    72a4:	d213      	bcs.n	72ce <_ZN6tflite16MicroInterpreter5inputEj+0x96>
  return input_tensors_[index];
    72a6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    72aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    72ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72b0:	2000      	movs	r0, #0
    72b2:	e7d2      	b.n	725a <_ZN6tflite16MicroInterpreter5inputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72b4:	2400      	movs	r4, #0
    72b6:	e7d6      	b.n	7266 <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    72b8:	4b09      	ldr	r3, [pc, #36]	; (72e0 <_ZN6tflite16MicroInterpreter5inputEj+0xa8>)
    72ba:	4a0a      	ldr	r2, [pc, #40]	; (72e4 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
    72bc:	f44f 7183 	mov.w	r1, #262	; 0x106
    72c0:	4809      	ldr	r0, [pc, #36]	; (72e8 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
    72c2:	f00b fbf3 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72c6:	2000      	movs	r0, #0
    72c8:	e7e2      	b.n	7290 <_ZN6tflite16MicroInterpreter5inputEj+0x58>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72ca:	2400      	movs	r4, #0
    72cc:	e7e6      	b.n	729c <_ZN6tflite16MicroInterpreter5inputEj+0x64>
    TF_LITE_REPORT_ERROR(error_reporter_,
    72ce:	4603      	mov	r3, r0
    72d0:	4632      	mov	r2, r6
    72d2:	4906      	ldr	r1, [pc, #24]	; (72ec <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
    72d4:	68a8      	ldr	r0, [r5, #8]
    72d6:	f00e fdf5 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    72da:	2000      	movs	r0, #0
    72dc:	e7e7      	b.n	72ae <_ZN6tflite16MicroInterpreter5inputEj+0x76>
    72de:	bf00      	nop
    72e0:	0001a5b4 	.word	0x0001a5b4
    72e4:	0001a704 	.word	0x0001a704
    72e8:	0001a680 	.word	0x0001a680
    72ec:	0001b3c0 	.word	0x0001b3c0

000072f0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    72f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72f4:	b08b      	sub	sp, #44	; 0x2c
    72f6:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    72f8:	2300      	movs	r3, #0
    72fa:	9305      	str	r3, [sp, #20]
    72fc:	f10b 006c 	add.w	r0, fp, #108	; 0x6c
    7300:	f00e f9aa 	bl	15658 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    7304:	9b05      	ldr	r3, [sp, #20]
    7306:	4298      	cmp	r0, r3
    7308:	f340 81f6 	ble.w	76f8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x408>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    730c:	f8db 5000 	ldr.w	r5, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
    7310:	4628      	mov	r0, r5
    7312:	f00e f85d 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7316:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7318:	4620      	mov	r0, r4
    731a:	f00e f85f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    731e:	2808      	cmp	r0, #8
    7320:	d927      	bls.n	7372 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x82>
    7322:	f104 0008 	add.w	r0, r4, #8
    7326:	f00e f859 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    732a:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    732c:	b318      	cbz	r0, 7376 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x86>
    732e:	4620      	mov	r0, r4
    7330:	f00e f848 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7334:	4404      	add	r4, r0
    7336:	9e05      	ldr	r6, [sp, #20]
    7338:	9600      	str	r6, [sp, #0]
  uoffset_t size() const { return EndianScalar(length_); }
    733a:	6820      	ldr	r0, [r4, #0]
    733c:	f00c fe23 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7340:	4286      	cmp	r6, r0
    7342:	d21a      	bcs.n	737a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7344:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7346:	9b05      	ldr	r3, [sp, #20]
    7348:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    734c:	4620      	mov	r0, r4
    734e:	f00e f839 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7352:	1823      	adds	r3, r4, r0
    7354:	9302      	str	r3, [sp, #8]
    7356:	d017      	beq.n	7388 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
    return data_ - ReadScalar<soffset_t>(data_);
    7358:	4628      	mov	r0, r5
    735a:	f00e f839 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    735e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7360:	4620      	mov	r0, r4
    7362:	f00e f83b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7366:	2806      	cmp	r0, #6
    7368:	d910      	bls.n	738c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9c>
    736a:	1da0      	adds	r0, r4, #6
    736c:	f00e f836 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7370:	e00d      	b.n	738e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9e>
    7372:	2000      	movs	r0, #0
    7374:	e7d9      	b.n	732a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7376:	2400      	movs	r4, #0
    7378:	e7dd      	b.n	7336 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x46>
    FLATBUFFERS_ASSERT(i < size());
    737a:	4b4e      	ldr	r3, [pc, #312]	; (74b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    737c:	4a4e      	ldr	r2, [pc, #312]	; (74b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c8>)
    737e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7382:	484e      	ldr	r0, [pc, #312]	; (74bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    7384:	f00b fb92 	bl	12aac <__assert_func>
    7388:	f011 fb8c 	bl	18aa4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    738c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    738e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7390:	b178      	cbz	r0, 73b2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc2>
    7392:	4628      	mov	r0, r5
    7394:	f00e f816 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7398:	eb05 0900 	add.w	r9, r5, r0
        allocator_.GetBuiltinDataAllocator();
    739c:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
    73a0:	f00e fb21 	bl	159e6 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    73a4:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    73a6:	9802      	ldr	r0, [sp, #8]
    73a8:	f00e f8c2 	bl	15530 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    73ac:	9003      	str	r0, [sp, #12]
    for (size_t i = 0; i < operators_size; ++i) {
    73ae:	2700      	movs	r7, #0
    73b0:	e0dd      	b.n	756e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
    73b2:	f04f 0900 	mov.w	r9, #0
    73b6:	e7f1      	b.n	739c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73b8:	2000      	movs	r0, #0
    73ba:	e0eb      	b.n	7594 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73bc:	2400      	movs	r4, #0
    73be:	e0f2      	b.n	75a6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b6>
    FLATBUFFERS_ASSERT(i < size());
    73c0:	4b3c      	ldr	r3, [pc, #240]	; (74b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    73c2:	4a3f      	ldr	r2, [pc, #252]	; (74c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>)
    73c4:	f44f 7183 	mov.w	r1, #262	; 0x106
    73c8:	483c      	ldr	r0, [pc, #240]	; (74bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    73ca:	f00b fb6f 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73ce:	2000      	movs	r0, #0
    73d0:	e103      	b.n	75da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ea>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    73d2:	2600      	movs	r6, #0
    73d4:	e108      	b.n	75e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    73d6:	4631      	mov	r1, r6
    73d8:	483a      	ldr	r0, [pc, #232]	; (74c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
    73da:	f00d ff6e 	bl	152ba <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    73de:	2301      	movs	r3, #1
    73e0:	461c      	mov	r4, r3
}
    73e2:	4620      	mov	r0, r4
    73e4:	b00b      	add	sp, #44	; 0x2c
    73e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    73ea:	4b32      	ldr	r3, [pc, #200]	; (74b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    73ec:	4a36      	ldr	r2, [pc, #216]	; (74c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
    73ee:	f44f 7183 	mov.w	r1, #262	; 0x106
    73f2:	4832      	ldr	r0, [pc, #200]	; (74bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    73f4:	f00b fb5a 	bl	12aac <__assert_func>
    73f8:	4604      	mov	r4, r0
        MicroPrintf("Failed to get registration from op code %s\n ",
    73fa:	4650      	mov	r0, sl
    73fc:	f00e fd80 	bl	15f00 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    7400:	2891      	cmp	r0, #145	; 0x91
    7402:	d806      	bhi.n	7412 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
  return EnumNamesBuiltinOperator()[index];
    7404:	4b31      	ldr	r3, [pc, #196]	; (74cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7406:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    740a:	4831      	ldr	r0, [pc, #196]	; (74d0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e0>)
    740c:	f00d ff55 	bl	152ba <_Z11MicroPrintfPKcz>
        return status;
    7410:	e7e7      	b.n	73e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7412:	4930      	ldr	r1, [pc, #192]	; (74d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    7414:	e7f9      	b.n	740a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    7416:	4631      	mov	r1, r6
    7418:	482f      	ldr	r0, [pc, #188]	; (74d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>)
    741a:	f00d ff4e 	bl	152ba <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    741e:	2301      	movs	r3, #1
    7420:	461c      	mov	r4, r3
    7422:	e7de      	b.n	73e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    return data_ - ReadScalar<soffset_t>(data_);
    7424:	4620      	mov	r0, r4
    7426:	f00d ffd3 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    742a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    742c:	4630      	mov	r0, r6
    742e:	f00d ffd5 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7432:	280e      	cmp	r0, #14
    7434:	d904      	bls.n	7440 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x150>
    7436:	f106 000e 	add.w	r0, r6, #14
    743a:	f00d ffcf 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    743e:	e000      	b.n	7442 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x152>
    7440:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7442:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7444:	b160      	cbz	r0, 7460 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x170>
    7446:	4630      	mov	r0, r6
    7448:	f00d ffbc 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    744c:	4430      	add	r0, r6
        if (op->custom_options() != nullptr) {
    744e:	b360      	cbz	r0, 74aa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7450:	4603      	mov	r3, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7452:	f853 0b04 	ldr.w	r0, [r3], #4
    7456:	9301      	str	r3, [sp, #4]
    7458:	f00c fd95 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    745c:	4682      	mov	sl, r0
    745e:	e131      	b.n	76c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7460:	2000      	movs	r0, #0
    7462:	e7f4      	b.n	744e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7464:	2000      	movs	r0, #0
    7466:	e10b      	b.n	7680 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x390>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7468:	2300      	movs	r3, #0
    746a:	9301      	str	r3, [sp, #4]
    746c:	e113      	b.n	7696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a6>
  return (v < low) || (high < v);
    746e:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    7472:	d809      	bhi.n	7488 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x198>
  const size_t index = static_cast<size_t>(e);
    7474:	b2f2      	uxtb	r2, r6
  return EnumNamesBuiltinOperator()[index];
    7476:	4b15      	ldr	r3, [pc, #84]	; (74cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
          MicroPrintf(
    747c:	4817      	ldr	r0, [pc, #92]	; (74dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>)
    747e:	f00d ff1c 	bl	152ba <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    7482:	2301      	movs	r3, #1
    7484:	461c      	mov	r4, r3
    7486:	e7ac      	b.n	73e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7488:	4912      	ldr	r1, [pc, #72]	; (74d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    748a:	e7f7      	b.n	747c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18c>
    748c:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    7490:	d804      	bhi.n	749c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
  const size_t index = static_cast<size_t>(e);
    7492:	b2f3      	uxtb	r3, r6
  return EnumNamesBuiltinOperator()[index];
    7494:	4a0d      	ldr	r2, [pc, #52]	; (74cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7496:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    749a:	e000      	b.n	749e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ae>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    749c:	490d      	ldr	r1, [pc, #52]	; (74d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
          MicroPrintf("Did not find a parser for %s",
    749e:	4810      	ldr	r0, [pc, #64]	; (74e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>)
    74a0:	f00d ff0b 	bl	152ba <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    74a4:	2301      	movs	r3, #1
    74a6:	461c      	mov	r4, r3
    74a8:	e79b      	b.n	73e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
      const char* custom_data = nullptr;
    74aa:	9001      	str	r0, [sp, #4]
      size_t custom_data_size = 0;
    74ac:	f04f 0a00 	mov.w	sl, #0
    74b0:	e108      	b.n	76c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    74b2:	bf00      	nop
    74b4:	0001a5b4 	.word	0x0001a5b4
    74b8:	0001a704 	.word	0x0001a704
    74bc:	0001a680 	.word	0x0001a680
    74c0:	0001b3ec 	.word	0x0001b3ec
    74c4:	0001b4e4 	.word	0x0001b4e4
    74c8:	0001b510 	.word	0x0001b510
    74cc:	0001b110 	.word	0x0001b110
    74d0:	0001b610 	.word	0x0001b610
    74d4:	00019de0 	.word	0x00019de0
    74d8:	0001b640 	.word	0x0001b640
    74dc:	0001b664 	.word	0x0001b664
    74e0:	0001b6ac 	.word	0x0001b6ac
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74e4:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    74e6:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74e8:	2800      	cmp	r0, #0
    74ea:	f000 80fb 	beq.w	76e4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f4>
    74ee:	4630      	mov	r0, r6
    74f0:	f00d ff68 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74f4:	1831      	adds	r1, r6, r0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    74f6:	aa08      	add	r2, sp, #32
    74f8:	4640      	mov	r0, r8
    74fa:	f00e fa80 	bl	159fe <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    74fe:	2800      	cmp	r0, #0
    7500:	f040 80ff 	bne.w	7702 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x412>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7504:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    7508:	4620      	mov	r0, r4
    750a:	f00d ff61 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    750e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7510:	4630      	mov	r0, r6
    7512:	f00d ff63 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7516:	2808      	cmp	r0, #8
    7518:	f240 80e6 	bls.w	76e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f8>
    751c:	f106 0008 	add.w	r0, r6, #8
    7520:	f00d ff5c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7524:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7526:	2800      	cmp	r0, #0
    7528:	f000 80e0 	beq.w	76ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3fc>
    752c:	4620      	mov	r0, r4
    752e:	f00d ff49 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7532:	1821      	adds	r1, r4, r0
    7534:	aa09      	add	r2, sp, #36	; 0x24
    7536:	4640      	mov	r0, r8
    7538:	f00e fa61 	bl	159fe <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    753c:	2800      	cmp	r0, #0
    753e:	f040 80e2 	bne.w	7706 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x416>
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    7542:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    7546:	9a00      	ldr	r2, [sp, #0]
    7548:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
    754c:	1974      	adds	r4, r6, r5
      *node = {};
    754e:	2228      	movs	r2, #40	; 0x28
    7550:	2100      	movs	r1, #0
    7552:	4620      	mov	r0, r4
    7554:	f011 fada 	bl	18b0c <memset>
      node->inputs = inputs_array;
    7558:	9b08      	ldr	r3, [sp, #32]
    755a:	5173      	str	r3, [r6, r5]
      node->outputs = outputs_array;
    755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    755e:	6063      	str	r3, [r4, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    7560:	9b07      	ldr	r3, [sp, #28]
    7562:	6163      	str	r3, [r4, #20]
      node->custom_initial_data = custom_data;
    7564:	9b01      	ldr	r3, [sp, #4]
    7566:	61a3      	str	r3, [r4, #24]
      node->custom_initial_data_size = custom_data_size;
    7568:	f8c4 a01c 	str.w	sl, [r4, #28]
    for (size_t i = 0; i < operators_size; ++i) {
    756c:	3701      	adds	r7, #1
    756e:	9b03      	ldr	r3, [sp, #12]
    7570:	429f      	cmp	r7, r3
    7572:	f080 80bd 	bcs.w	76f0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x400>
    return data_ - ReadScalar<soffset_t>(data_);
    7576:	9c02      	ldr	r4, [sp, #8]
    7578:	4620      	mov	r0, r4
    757a:	f00d ff29 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    757e:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7580:	4620      	mov	r0, r4
    7582:	f00d ff2b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7586:	280a      	cmp	r0, #10
    7588:	f67f af16 	bls.w	73b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
    758c:	f104 000a 	add.w	r0, r4, #10
    7590:	f00d ff24 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7594:	9b02      	ldr	r3, [sp, #8]
    7596:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7598:	2800      	cmp	r0, #0
    759a:	f43f af0f 	beq.w	73bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xcc>
    759e:	4620      	mov	r0, r4
    75a0:	f00d ff10 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75a4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    75a6:	6820      	ldr	r0, [r4, #0]
    75a8:	f00c fced 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    75ac:	4287      	cmp	r7, r0
    75ae:	f4bf af07 	bcs.w	73c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    75b2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    75b4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    75b8:	4620      	mov	r0, r4
    75ba:	f00d ff03 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75be:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    75c0:	4620      	mov	r0, r4
    75c2:	f00d ff05 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75c6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75c8:	4628      	mov	r0, r5
    75ca:	f00d ff07 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75ce:	2804      	cmp	r0, #4
    75d0:	f67f aefd 	bls.w	73ce <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xde>
    75d4:	1d28      	adds	r0, r5, #4
    75d6:	f00d ff01 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    75da:	2800      	cmp	r0, #0
    75dc:	f43f aef9 	beq.w	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe2>
    75e0:	4420      	add	r0, r4
    75e2:	f00d feef 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75e6:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    75e8:	f8d9 0000 	ldr.w	r0, [r9]
    75ec:	f00c fccb 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (index >= opcodes->size()) {
    75f0:	42b0      	cmp	r0, r6
    75f2:	f67f aef0 	bls.w	73d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
    75f6:	f8d9 0000 	ldr.w	r0, [r9]
    75fa:	f00c fcc4 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    75fe:	4286      	cmp	r6, r0
    7600:	f4bf aef3 	bcs.w	73ea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xfa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7604:	f109 0a04 	add.w	sl, r9, #4
    p += i * sizeof(uoffset_t);
    7608:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    760c:	4650      	mov	r0, sl
    760e:	f00d fed9 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7612:	4482      	add	sl, r0
    7614:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                          .node_and_registrations[i]
    7618:	9a00      	ldr	r2, [sp, #0]
    761a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    761e:	252c      	movs	r5, #44	; 0x2c
    7620:	fb05 f507 	mul.w	r5, r5, r7
    7624:	442b      	add	r3, r5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    7626:	3328      	adds	r3, #40	; 0x28
    7628:	f8db 2008 	ldr.w	r2, [fp, #8]
    762c:	f8db 1004 	ldr.w	r1, [fp, #4]
    7630:	4650      	mov	r0, sl
    7632:	f003 f87d 	bl	a730 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    7636:	2800      	cmp	r0, #0
    7638:	f47f aede 	bne.w	73f8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
    763c:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                     .node_and_registrations[i]
    7640:	9a00      	ldr	r2, [sp, #0]
    7642:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    7646:	442b      	add	r3, r5
                                     .registration;
    7648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
    764a:	2b00      	cmp	r3, #0
    764c:	f43f aee3 	beq.w	7416 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
          static_cast<BuiltinOperator>(registration->builtin_code);
    7650:	695e      	ldr	r6, [r3, #20]
      BuiltinOperator op_type =
    7652:	fa5f fa86 	uxtb.w	sl, r6
      unsigned char* builtin_data = nullptr;
    7656:	2300      	movs	r3, #0
    7658:	9307      	str	r3, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    765a:	f1ba 0f20 	cmp.w	sl, #32
    765e:	f43f aee1 	beq.w	7424 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x134>
    return data_ - ReadScalar<soffset_t>(data_);
    7662:	4620      	mov	r0, r4
    7664:	f00d feb4 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7668:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    766c:	4640      	mov	r0, r8
    766e:	f00d feb5 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7672:	280e      	cmp	r0, #14
    7674:	f67f aef6 	bls.w	7464 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
    7678:	f108 000e 	add.w	r0, r8, #14
    767c:	f00d feae 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7680:	eb04 0800 	add.w	r8, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7684:	2800      	cmp	r0, #0
    7686:	f43f aeef 	beq.w	7468 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x178>
    768a:	4640      	mov	r0, r8
    768c:	f00d fe9a 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7690:	eb08 0300 	add.w	r3, r8, r0
    7694:	9301      	str	r3, [sp, #4]
        if (op->custom_options() != nullptr) {
    7696:	9b01      	ldr	r3, [sp, #4]
    7698:	2b00      	cmp	r3, #0
    769a:	f47f aee8 	bne.w	746e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17e>
            op_resolver_.GetOpDataParser(op_type);
    769e:	f8db 0004 	ldr.w	r0, [fp, #4]
    76a2:	6803      	ldr	r3, [r0, #0]
    76a4:	6a1b      	ldr	r3, [r3, #32]
    76a6:	4651      	mov	r1, sl
    76a8:	4798      	blx	r3
        if (parser == nullptr) {
    76aa:	4680      	mov	r8, r0
    76ac:	2800      	cmp	r0, #0
    76ae:	f43f aeed 	beq.w	748c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    76b2:	ab07      	add	r3, sp, #28
    76b4:	9a04      	ldr	r2, [sp, #16]
    76b6:	f8db 1008 	ldr.w	r1, [fp, #8]
    76ba:	4620      	mov	r0, r4
    76bc:	47c0      	blx	r8
    76be:	b9f0      	cbnz	r0, 76fe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x40e>
      size_t custom_data_size = 0;
    76c0:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    76c4:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    76c8:	4620      	mov	r0, r4
    76ca:	f00d fe81 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76ce:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76d0:	4630      	mov	r0, r6
    76d2:	f00d fe83 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76d6:	2806      	cmp	r0, #6
    76d8:	f67f af04 	bls.w	74e4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f4>
    76dc:	1db0      	adds	r0, r6, #6
    76de:	f00d fe7d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    76e2:	e700      	b.n	74e6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76e4:	2100      	movs	r1, #0
    76e6:	e706      	b.n	74f6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76e8:	2000      	movs	r0, #0
    76ea:	e71b      	b.n	7524 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76ec:	2100      	movs	r1, #0
    76ee:	e721      	b.n	7534 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x244>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    76f0:	9b05      	ldr	r3, [sp, #20]
    76f2:	3301      	adds	r3, #1
    76f4:	9305      	str	r3, [sp, #20]
    76f6:	e601      	b.n	72fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    76f8:	2300      	movs	r3, #0
    76fa:	461c      	mov	r4, r3
    76fc:	e671      	b.n	73e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    76fe:	4604      	mov	r4, r0
    7700:	e66f      	b.n	73e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7702:	4604      	mov	r4, r0
    7704:	e66d      	b.n	73e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7706:	4604      	mov	r4, r0
    7708:	e66b      	b.n	73e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    770a:	bf00      	nop

0000770c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7710:	b083      	sub	sp, #12
    7712:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    7714:	6801      	ldr	r1, [r0, #0]
    7716:	6e80      	ldr	r0, [r0, #104]	; 0x68
    7718:	f000 fe60 	bl	83dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    771c:	b170      	cbz	r0, 773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30>
    771e:	4601      	mov	r1, r0
  graph_.SetSubgraphAllocations(allocations);
    7720:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    7724:	4630      	mov	r0, r6
    7726:	f00d ff35 	bl	15594 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    772a:	4628      	mov	r0, r5
    772c:	f7ff fde0 	bl	72f0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    7730:	4603      	mov	r3, r0
    7732:	b158      	cbz	r0, 774c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
}
    7734:	4618      	mov	r0, r3
    7736:	b003      	add	sp, #12
    7738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    773c:	49bc      	ldr	r1, [pc, #752]	; (7a30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
    773e:	68a8      	ldr	r0, [r5, #8]
    7740:	f00e fbc0 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    7744:	2301      	movs	r3, #1
    7746:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
    return kTfLiteError;
    774a:	e7f3      	b.n	7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    774c:	4bb9      	ldr	r3, [pc, #740]	; (7a34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x328>)
    774e:	646b      	str	r3, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    7750:	2400      	movs	r4, #0
    7752:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
    7754:	652c      	str	r4, [r5, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
    7756:	4bb8      	ldr	r3, [pc, #736]	; (7a38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x32c>)
    7758:	612b      	str	r3, [r5, #16]
  graph_.InitSubgraphs();
    775a:	4630      	mov	r0, r6
    775c:	f00d ff1c 	bl	15598 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    7760:	4bb6      	ldr	r3, [pc, #728]	; (7a3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x330>)
    7762:	64eb      	str	r3, [r5, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    7764:	4630      	mov	r0, r6
    7766:	f7ff f9bd 	bl	6ae4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.AllocatePersistentBuffer = nullptr;
    776a:	646c      	str	r4, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    776c:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    776e:	4bb4      	ldr	r3, [pc, #720]	; (7a40 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x334>)
    7770:	652b      	str	r3, [r5, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    7772:	462b      	mov	r3, r5
    7774:	f853 1b8c 	ldr.w	r1, [r3], #140
    7778:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    777a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    777c:	f000 fb90 	bl	7ea0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    7780:	4603      	mov	r3, r0
    7782:	2800      	cmp	r0, #0
    7784:	d1d6      	bne.n	7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7786:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
    7788:	6833      	ldr	r3, [r6, #0]
    778a:	68df      	ldr	r7, [r3, #12]
    778c:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    778e:	4620      	mov	r0, r4
    7790:	f00d fe1e 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7794:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7798:	4640      	mov	r0, r8
    779a:	f00d fe1f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    779e:	2808      	cmp	r0, #8
    77a0:	d921      	bls.n	77e6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    77a2:	f108 0008 	add.w	r0, r8, #8
    77a6:	f00d fe19 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    77aa:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77ac:	b1e8      	cbz	r0, 77ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    77ae:	4620      	mov	r0, r4
    77b0:	f00d fe08 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77b4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    77b6:	6820      	ldr	r0, [r4, #0]
    77b8:	f00c fbe5 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    77bc:	b1b8      	cbz	r0, 77ee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    77be:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    77c0:	4620      	mov	r0, r4
    77c2:	f00d fdff 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77c6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    77c8:	4620      	mov	r0, r4
    77ca:	f00d fe01 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    77ce:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    77d2:	4640      	mov	r0, r8
    77d4:	f00d fe02 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77d8:	2806      	cmp	r0, #6
    77da:	d90f      	bls.n	77fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>
    77dc:	f108 0006 	add.w	r0, r8, #6
    77e0:	f00d fdfc 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    77e4:	e00b      	b.n	77fe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf2>
    77e6:	2000      	movs	r0, #0
    77e8:	e7df      	b.n	77aa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77ea:	2400      	movs	r4, #0
    77ec:	e7e3      	b.n	77b6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xaa>
    FLATBUFFERS_ASSERT(i < size());
    77ee:	4b95      	ldr	r3, [pc, #596]	; (7a44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    77f0:	4a95      	ldr	r2, [pc, #596]	; (7a48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    77f2:	f44f 7183 	mov.w	r1, #262	; 0x106
    77f6:	4895      	ldr	r0, [pc, #596]	; (7a4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    77f8:	f00b f958 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77fc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    77fe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7800:	b178      	cbz	r0, 7822 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
    7802:	4620      	mov	r0, r4
    7804:	f00d fdde 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7808:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    780a:	6820      	ldr	r0, [r4, #0]
    780c:	f00c fbbb 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7810:	0081      	lsls	r1, r0, #2
    7812:	4630      	mov	r0, r6
    7814:	47b8      	blx	r7
    7816:	4604      	mov	r4, r0
  input_tensors_ =
    7818:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    781c:	b118      	cbz	r0, 7826 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
  for (size_t i = 0; i < inputs_size(); ++i) {
    781e:	2600      	movs	r6, #0
    7820:	e09c      	b.n	795c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7822:	2400      	movs	r4, #0
    7824:	e7f1      	b.n	780a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    TF_LITE_REPORT_ERROR(
    7826:	68ae      	ldr	r6, [r5, #8]
    7828:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    782a:	4628      	mov	r0, r5
    782c:	f00d fdd0 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7830:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7832:	4638      	mov	r0, r7
    7834:	f00d fdd2 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7838:	2808      	cmp	r0, #8
    783a:	d91f      	bls.n	787c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x170>
    783c:	f107 0008 	add.w	r0, r7, #8
    7840:	f00d fdcc 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7844:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7846:	b1d8      	cbz	r0, 7880 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x174>
    7848:	4628      	mov	r0, r5
    784a:	f00d fdbb 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    784e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7850:	6828      	ldr	r0, [r5, #0]
    7852:	f00c fb98 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7856:	b1a8      	cbz	r0, 7884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7858:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    785a:	4628      	mov	r0, r5
    785c:	f00d fdb2 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7860:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7862:	4628      	mov	r0, r5
    7864:	f00d fdb4 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7868:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    786a:	4638      	mov	r0, r7
    786c:	f00d fdb6 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7870:	2806      	cmp	r0, #6
    7872:	d90e      	bls.n	7892 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x186>
    7874:	1db8      	adds	r0, r7, #6
    7876:	f00d fdb1 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    787a:	e00b      	b.n	7894 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>
    787c:	2000      	movs	r0, #0
    787e:	e7e1      	b.n	7844 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7880:	4625      	mov	r5, r4
    7882:	e7e5      	b.n	7850 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
    FLATBUFFERS_ASSERT(i < size());
    7884:	4b6f      	ldr	r3, [pc, #444]	; (7a44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7886:	4a70      	ldr	r2, [pc, #448]	; (7a48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7888:	f44f 7183 	mov.w	r1, #262	; 0x106
    788c:	486f      	ldr	r0, [pc, #444]	; (7a4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    788e:	f00b f90d 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7892:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7894:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7896:	b118      	cbz	r0, 78a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>
    7898:	4628      	mov	r0, r5
    789a:	f00d fd93 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    789e:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78a0:	6820      	ldr	r0, [r4, #0]
    78a2:	f00c fb70 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    78a6:	0082      	lsls	r2, r0, #2
    78a8:	4969      	ldr	r1, [pc, #420]	; (7a50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x344>)
    78aa:	4630      	mov	r0, r6
    78ac:	f00e fb0a 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    78b0:	2301      	movs	r3, #1
    78b2:	e73f      	b.n	7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78b4:	2000      	movs	r0, #0
    78b6:	e05f      	b.n	7978 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78b8:	2400      	movs	r4, #0
    78ba:	e064      	b.n	7986 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27a>
    FLATBUFFERS_ASSERT(i < size());
    78bc:	4b61      	ldr	r3, [pc, #388]	; (7a44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    78be:	4a62      	ldr	r2, [pc, #392]	; (7a48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    78c0:	f44f 7183 	mov.w	r1, #262	; 0x106
    78c4:	4861      	ldr	r0, [pc, #388]	; (7a4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    78c6:	f00b f8f1 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78ca:	2000      	movs	r0, #0
    78cc:	e071      	b.n	79b2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78ce:	2400      	movs	r4, #0
    78d0:	e076      	b.n	79c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78d2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    78d4:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78d6:	2800      	cmp	r0, #0
    78d8:	f000 808f 	beq.w	79fa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ee>
    78dc:	4620      	mov	r0, r4
    78de:	f00d fd71 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78e2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78e4:	6820      	ldr	r0, [r4, #0]
    78e6:	f00c fb4e 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    78ea:	2800      	cmp	r0, #0
    78ec:	f000 8087 	beq.w	79fe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    78f0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    78f2:	4620      	mov	r0, r4
    78f4:	f00d fd66 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78f8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    78fa:	4620      	mov	r0, r4
    78fc:	f00d fd68 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7900:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7904:	4658      	mov	r0, fp
    7906:	f00d fd69 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    790a:	2806      	cmp	r0, #6
    790c:	d97e      	bls.n	7a0c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    790e:	f10b 0006 	add.w	r0, fp, #6
    7912:	f00d fd63 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7916:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7918:	2800      	cmp	r0, #0
    791a:	d079      	beq.n	7a10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x304>
    791c:	4620      	mov	r0, r4
    791e:	f00d fd51 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7922:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7924:	6820      	ldr	r0, [r4, #0]
    7926:	f00c fb2e 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    792a:	4286      	cmp	r6, r0
    792c:	d272      	bcs.n	7a14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    792e:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7930:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7934:	f00d fd4b 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7938:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    793a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
    793e:	2200      	movs	r2, #0
    7940:	9200      	str	r2, [sp, #0]
    7942:	4652      	mov	r2, sl
    7944:	4639      	mov	r1, r7
    7946:	4640      	mov	r0, r8
    7948:	47c8      	blx	r9
    794a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (input_tensors_[i] == nullptr) {
    794e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    7952:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7956:	2b00      	cmp	r3, #0
    7958:	d063      	beq.n	7a22 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x316>
  for (size_t i = 0; i < inputs_size(); ++i) {
    795a:	3601      	adds	r6, #1
    795c:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    795e:	4620      	mov	r0, r4
    7960:	f00d fd36 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7964:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7966:	4638      	mov	r0, r7
    7968:	f00d fd38 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    796c:	2808      	cmp	r0, #8
    796e:	d9a1      	bls.n	78b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    7970:	f107 0008 	add.w	r0, r7, #8
    7974:	f00d fd32 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7978:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    797a:	2800      	cmp	r0, #0
    797c:	d09c      	beq.n	78b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
    797e:	4620      	mov	r0, r4
    7980:	f00d fd20 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7984:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7986:	6820      	ldr	r0, [r4, #0]
    7988:	f00c fafd 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    798c:	2800      	cmp	r0, #0
    798e:	d095      	beq.n	78bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7990:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7992:	4620      	mov	r0, r4
    7994:	f00d fd16 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7998:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    799a:	4620      	mov	r0, r4
    799c:	f00d fd18 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79a0:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79a2:	4638      	mov	r0, r7
    79a4:	f00d fd1a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79a8:	2806      	cmp	r0, #6
    79aa:	d98e      	bls.n	78ca <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
    79ac:	1db8      	adds	r0, r7, #6
    79ae:	f00d fd15 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    79b2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79b4:	2800      	cmp	r0, #0
    79b6:	d08a      	beq.n	78ce <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    79b8:	4620      	mov	r0, r4
    79ba:	f00d fd03 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79be:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    79c0:	6820      	ldr	r0, [r4, #0]
    79c2:	f00c fae0 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    79c6:	4286      	cmp	r6, r0
    79c8:	d248      	bcs.n	7a5c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    79ca:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    79ce:	f8d8 3000 	ldr.w	r3, [r8]
    79d2:	f8d3 9000 	ldr.w	r9, [r3]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    79d6:	682f      	ldr	r7, [r5, #0]
    79d8:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    79dc:	4638      	mov	r0, r7
    79de:	f00d fcf7 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79e2:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79e4:	4620      	mov	r0, r4
    79e6:	f00d fcf9 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79ea:	2808      	cmp	r0, #8
    79ec:	f67f af71 	bls.w	78d2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c6>
    79f0:	f104 0008 	add.w	r0, r4, #8
    79f4:	f00d fcf2 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    79f8:	e76c      	b.n	78d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79fa:	2400      	movs	r4, #0
    79fc:	e772      	b.n	78e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    FLATBUFFERS_ASSERT(i < size());
    79fe:	4b11      	ldr	r3, [pc, #68]	; (7a44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7a00:	4a11      	ldr	r2, [pc, #68]	; (7a48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7a02:	f44f 7183 	mov.w	r1, #262	; 0x106
    7a06:	4811      	ldr	r0, [pc, #68]	; (7a4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7a08:	f00b f850 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a0c:	2000      	movs	r0, #0
    7a0e:	e782      	b.n	7916 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a10:	2400      	movs	r4, #0
    7a12:	e787      	b.n	7924 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
    FLATBUFFERS_ASSERT(i < size());
    7a14:	4b0b      	ldr	r3, [pc, #44]	; (7a44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7a16:	4a0f      	ldr	r2, [pc, #60]	; (7a54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x348>)
    7a18:	f44f 7183 	mov.w	r1, #262	; 0x106
    7a1c:	480b      	ldr	r0, [pc, #44]	; (7a4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7a1e:	f00b f845 	bl	12aac <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7a22:	4632      	mov	r2, r6
    7a24:	490c      	ldr	r1, [pc, #48]	; (7a58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>)
    7a26:	68a8      	ldr	r0, [r5, #8]
    7a28:	f00e fa4c 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7a2c:	2301      	movs	r3, #1
    7a2e:	e681      	b.n	7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7a30:	0001b6cc 	.word	0x0001b6cc
    7a34:	00015693 	.word	0x00015693
    7a38:	000156e3 	.word	0x000156e3
    7a3c:	000156ed 	.word	0x000156ed
    7a40:	000156a1 	.word	0x000156a1
    7a44:	0001a5b4 	.word	0x0001a5b4
    7a48:	0001a704 	.word	0x0001a704
    7a4c:	0001a680 	.word	0x0001a680
    7a50:	0001b6f0 	.word	0x0001b6f0
    7a54:	0001a5c0 	.word	0x0001a5c0
    7a58:	0001b73c 	.word	0x0001b73c
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7a5c:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
    7a5e:	6833      	ldr	r3, [r6, #0]
    7a60:	68df      	ldr	r7, [r3, #12]
    return model_->subgraphs()->Get(0)->outputs()->size();
    7a62:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7a64:	4620      	mov	r0, r4
    7a66:	f00d fcb3 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a6a:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a6e:	4640      	mov	r0, r8
    7a70:	f00d fcb4 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a74:	2808      	cmp	r0, #8
    7a76:	d904      	bls.n	7a82 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x376>
    7a78:	f108 0008 	add.w	r0, r8, #8
    7a7c:	f00d fcae 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7a80:	e000      	b.n	7a84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x378>
    7a82:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7a84:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a86:	b360      	cbz	r0, 7ae2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d6>
    7a88:	4620      	mov	r0, r4
    7a8a:	f00d fc9b 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a8e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a90:	6820      	ldr	r0, [r4, #0]
    7a92:	f00c fa78 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a96:	b330      	cbz	r0, 7ae6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3da>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a98:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7a9a:	4620      	mov	r0, r4
    7a9c:	f00d fc92 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7aa0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7aa2:	4620      	mov	r0, r4
    7aa4:	f00d fc94 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7aa8:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7aac:	4640      	mov	r0, r8
    7aae:	f00d fc95 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ab2:	2808      	cmp	r0, #8
    7ab4:	d91e      	bls.n	7af4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e8>
    7ab6:	f108 0008 	add.w	r0, r8, #8
    7aba:	f00d fc8f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7abe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ac0:	b1d0      	cbz	r0, 7af8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3ec>
    7ac2:	4620      	mov	r0, r4
    7ac4:	f00d fc7e 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ac8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7aca:	6820      	ldr	r0, [r4, #0]
    7acc:	f00c fa5b 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7ad0:	0081      	lsls	r1, r0, #2
    7ad2:	4630      	mov	r0, r6
    7ad4:	47b8      	blx	r7
    7ad6:	4604      	mov	r4, r0
  output_tensors_ =
    7ad8:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    7adc:	b170      	cbz	r0, 7afc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f0>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7ade:	2600      	movs	r6, #0
    7ae0:	e0c6      	b.n	7c70 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x564>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ae2:	2400      	movs	r4, #0
    7ae4:	e7d4      	b.n	7a90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x384>
    FLATBUFFERS_ASSERT(i < size());
    7ae6:	4b8f      	ldr	r3, [pc, #572]	; (7d24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7ae8:	4a8f      	ldr	r2, [pc, #572]	; (7d28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7aea:	f44f 7183 	mov.w	r1, #262	; 0x106
    7aee:	488f      	ldr	r0, [pc, #572]	; (7d2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7af0:	f00a ffdc 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7af4:	2000      	movs	r0, #0
    7af6:	e7e2      	b.n	7abe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3b2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7af8:	2400      	movs	r4, #0
    7afa:	e7e6      	b.n	7aca <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3be>
    TF_LITE_REPORT_ERROR(
    7afc:	68ae      	ldr	r6, [r5, #8]
    7afe:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7b00:	4628      	mov	r0, r5
    7b02:	f00d fc65 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b06:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b08:	4638      	mov	r0, r7
    7b0a:	f00d fc67 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b0e:	2808      	cmp	r0, #8
    7b10:	d920      	bls.n	7b54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x448>
    7b12:	f107 0008 	add.w	r0, r7, #8
    7b16:	f00d fc61 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7b1a:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b1c:	b1e0      	cbz	r0, 7b58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x44c>
    7b1e:	4628      	mov	r0, r5
    7b20:	f00d fc50 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b24:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7b26:	6828      	ldr	r0, [r5, #0]
    7b28:	f00c fa2d 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7b2c:	b1b0      	cbz	r0, 7b5c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x450>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b2e:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7b30:	4628      	mov	r0, r5
    7b32:	f00d fc47 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b36:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7b38:	4628      	mov	r0, r5
    7b3a:	f00d fc49 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b3e:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b40:	4638      	mov	r0, r7
    7b42:	f00d fc4b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b46:	2808      	cmp	r0, #8
    7b48:	d90f      	bls.n	7b6a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x45e>
    7b4a:	f107 0008 	add.w	r0, r7, #8
    7b4e:	f00d fc45 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7b52:	e00b      	b.n	7b6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x460>
    7b54:	2000      	movs	r0, #0
    7b56:	e7e0      	b.n	7b1a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b58:	4625      	mov	r5, r4
    7b5a:	e7e4      	b.n	7b26 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x41a>
    FLATBUFFERS_ASSERT(i < size());
    7b5c:	4b71      	ldr	r3, [pc, #452]	; (7d24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7b5e:	4a72      	ldr	r2, [pc, #456]	; (7d28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7b60:	f44f 7183 	mov.w	r1, #262	; 0x106
    7b64:	4871      	ldr	r0, [pc, #452]	; (7d2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7b66:	f00a ffa1 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b6a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7b6c:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b6e:	b118      	cbz	r0, 7b78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x46c>
    7b70:	4628      	mov	r0, r5
    7b72:	f00d fc27 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b76:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7b78:	6820      	ldr	r0, [r4, #0]
    7b7a:	f00c fa04 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7b7e:	0082      	lsls	r2, r0, #2
    7b80:	496b      	ldr	r1, [pc, #428]	; (7d30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x624>)
    7b82:	4630      	mov	r0, r6
    7b84:	f00e f99e 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7b88:	2301      	movs	r3, #1
    7b8a:	e5d3      	b.n	7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b8c:	2000      	movs	r0, #0
    7b8e:	e07d      	b.n	7c8c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x580>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b90:	2400      	movs	r4, #0
    7b92:	e083      	b.n	7c9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x590>
    FLATBUFFERS_ASSERT(i < size());
    7b94:	4b63      	ldr	r3, [pc, #396]	; (7d24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7b96:	4a64      	ldr	r2, [pc, #400]	; (7d28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7b98:	f44f 7183 	mov.w	r1, #262	; 0x106
    7b9c:	4863      	ldr	r0, [pc, #396]	; (7d2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7b9e:	f00a ff85 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ba2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7ba4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ba6:	2800      	cmp	r0, #0
    7ba8:	f000 8092 	beq.w	7cd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c4>
    7bac:	4620      	mov	r0, r4
    7bae:	f00d fc09 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7bb2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7bb4:	6820      	ldr	r0, [r4, #0]
    7bb6:	f00c f9e6 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7bba:	4286      	cmp	r6, r0
    7bbc:	f080 80a7 	bcs.w	7d0e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x602>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7bc0:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    7bc4:	f8d8 3000 	ldr.w	r3, [r8]
    7bc8:	f8d3 9000 	ldr.w	r9, [r3]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7bcc:	682f      	ldr	r7, [r5, #0]
    7bce:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    7bd2:	4638      	mov	r0, r7
    7bd4:	f00d fbfc 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7bd8:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7bda:	4620      	mov	r0, r4
    7bdc:	f00d fbfe 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7be0:	2808      	cmp	r0, #8
    7be2:	d977      	bls.n	7cd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c8>
    7be4:	f104 0008 	add.w	r0, r4, #8
    7be8:	f00d fbf8 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7bec:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7bee:	2800      	cmp	r0, #0
    7bf0:	d072      	beq.n	7cd8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5cc>
    7bf2:	4620      	mov	r0, r4
    7bf4:	f00d fbe6 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7bf8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7bfa:	6820      	ldr	r0, [r4, #0]
    7bfc:	f00c f9c3 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7c00:	2800      	cmp	r0, #0
    7c02:	d06b      	beq.n	7cdc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5d0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c04:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7c06:	4620      	mov	r0, r4
    7c08:	f00d fbdc 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c0c:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7c0e:	4620      	mov	r0, r4
    7c10:	f00d fbde 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c14:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c18:	4658      	mov	r0, fp
    7c1a:	f00d fbdf 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c1e:	2808      	cmp	r0, #8
    7c20:	d963      	bls.n	7cea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5de>
    7c22:	f10b 0008 	add.w	r0, fp, #8
    7c26:	f00d fbd9 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7c2a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c2c:	2800      	cmp	r0, #0
    7c2e:	d05e      	beq.n	7cee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e2>
    7c30:	4620      	mov	r0, r4
    7c32:	f00d fbc7 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c36:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7c38:	6820      	ldr	r0, [r4, #0]
    7c3a:	f00c f9a4 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7c3e:	4286      	cmp	r6, r0
    7c40:	d257      	bcs.n	7cf2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c42:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7c44:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7c48:	f00d fbc1 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7c4c:	4603      	mov	r3, r0
    7c4e:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
    7c52:	2200      	movs	r2, #0
    7c54:	9200      	str	r2, [sp, #0]
    7c56:	4652      	mov	r2, sl
    7c58:	4639      	mov	r1, r7
    7c5a:	4640      	mov	r0, r8
    7c5c:	47c8      	blx	r9
    7c5e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (output_tensors_[i] == nullptr) {
    7c62:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    7c66:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d048      	beq.n	7d00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5f4>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7c6e:	3601      	adds	r6, #1
    7c70:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7c72:	4620      	mov	r0, r4
    7c74:	f00d fbac 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c78:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c7a:	4638      	mov	r0, r7
    7c7c:	f00d fbae 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c80:	2808      	cmp	r0, #8
    7c82:	d983      	bls.n	7b8c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x480>
    7c84:	f107 0008 	add.w	r0, r7, #8
    7c88:	f00d fba8 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7c8c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c8e:	2800      	cmp	r0, #0
    7c90:	f43f af7e 	beq.w	7b90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x484>
    7c94:	4620      	mov	r0, r4
    7c96:	f00d fb95 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c9a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7c9c:	6820      	ldr	r0, [r4, #0]
    7c9e:	f00c f972 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7ca2:	2800      	cmp	r0, #0
    7ca4:	f43f af76 	beq.w	7b94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x488>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7ca8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7caa:	4620      	mov	r0, r4
    7cac:	f00d fb8a 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7cb0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7cb2:	4620      	mov	r0, r4
    7cb4:	f00d fb8c 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7cb8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7cba:	4638      	mov	r0, r7
    7cbc:	f00d fb8e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cc0:	2808      	cmp	r0, #8
    7cc2:	f67f af6e 	bls.w	7ba2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x496>
    7cc6:	f107 0008 	add.w	r0, r7, #8
    7cca:	f00d fb87 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7cce:	e769      	b.n	7ba4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x498>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cd0:	2400      	movs	r4, #0
    7cd2:	e76f      	b.n	7bb4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cd4:	2000      	movs	r0, #0
    7cd6:	e789      	b.n	7bec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4e0>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cd8:	2400      	movs	r4, #0
    7cda:	e78e      	b.n	7bfa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4ee>
    FLATBUFFERS_ASSERT(i < size());
    7cdc:	4b11      	ldr	r3, [pc, #68]	; (7d24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7cde:	4a12      	ldr	r2, [pc, #72]	; (7d28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7ce0:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ce4:	4811      	ldr	r0, [pc, #68]	; (7d2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7ce6:	f00a fee1 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cea:	2000      	movs	r0, #0
    7cec:	e79d      	b.n	7c2a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x51e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cee:	2400      	movs	r4, #0
    7cf0:	e7a2      	b.n	7c38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x52c>
    FLATBUFFERS_ASSERT(i < size());
    7cf2:	4b0c      	ldr	r3, [pc, #48]	; (7d24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7cf4:	4a0f      	ldr	r2, [pc, #60]	; (7d34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x628>)
    7cf6:	f44f 7183 	mov.w	r1, #262	; 0x106
    7cfa:	480c      	ldr	r0, [pc, #48]	; (7d2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7cfc:	f00a fed6 	bl	12aac <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7d00:	4632      	mov	r2, r6
    7d02:	490d      	ldr	r1, [pc, #52]	; (7d38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62c>)
    7d04:	68a8      	ldr	r0, [r5, #8]
    7d06:	f00e f8dd 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7d0a:	2301      	movs	r3, #1
    7d0c:	e512      	b.n	7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    7d0e:	4628      	mov	r0, r5
    7d10:	f00d fd45 	bl	1579e <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
    7d14:	4603      	mov	r3, r0
    7d16:	2800      	cmp	r0, #0
    7d18:	f47f ad0c 	bne.w	7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    7d1c:	2201      	movs	r2, #1
    7d1e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
  return kTfLiteOk;
    7d22:	e507      	b.n	7734 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7d24:	0001a5b4 	.word	0x0001a5b4
    7d28:	0001a704 	.word	0x0001a704
    7d2c:	0001a680 	.word	0x0001a680
    7d30:	0001b764 	.word	0x0001b764
    7d34:	0001a5c0 	.word	0x0001a5c0
    7d38:	0001b7b0 	.word	0x0001b7b0

00007d3c <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    7d3c:	b510      	push	{r4, lr}
    7d3e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    7d40:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    7d44:	b95b      	cbnz	r3, 7d5e <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
  if (!tensors_allocated_) {
    7d46:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    7d4a:	b913      	cbnz	r3, 7d52 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    7d4c:	f7ff fcde 	bl	770c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    7d50:	b920      	cbnz	r0, 7d5c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
  return graph_.InvokeSubgraph(0);
    7d52:	2100      	movs	r1, #0
    7d54:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    7d58:	f7fe ff04 	bl	6b64 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
}
    7d5c:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    7d5e:	4903      	ldr	r1, [pc, #12]	; (7d6c <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
    7d60:	6880      	ldr	r0, [r0, #8]
    7d62:	f00e f8af 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7d66:	2001      	movs	r0, #1
    7d68:	e7f8      	b.n	7d5c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    7d6a:	bf00      	nop
    7d6c:	0001b7d8 	.word	0x0001b7d8

00007d70 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
  return kTfLiteOk;
}

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
    7d70:	b410      	push	{r4}
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
    7d72:	4c05      	ldr	r4, [pc, #20]	; (7d88 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x18>)
    7d74:	6004      	str	r4, [r0, #0]
    7d76:	6041      	str	r1, [r0, #4]
    7d78:	60c2      	str	r2, [r0, #12]
    7d7a:	2200      	movs	r2, #0
    7d7c:	7402      	strb	r2, [r0, #16]
    7d7e:	6142      	str	r2, [r0, #20]
    7d80:	6182      	str	r2, [r0, #24]
    7d82:	bc10      	pop	{r4}
    7d84:	4770      	bx	lr
    7d86:	bf00      	nop
    7d88:	0001bf24 	.word	0x0001bf24

00007d8c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    7d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d8e:	4605      	mov	r5, r0
    7d90:	460f      	mov	r7, r1
    7d92:	461e      	mov	r6, r3
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    7d94:	f00d fe00 	bl	15998 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7d98:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    7d9a:	4613      	mov	r3, r2
    7d9c:	e000      	b.n	7da0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x14>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7d9e:	3201      	adds	r2, #1
    7da0:	696c      	ldr	r4, [r5, #20]
    7da2:	4294      	cmp	r4, r2
    7da4:	d907      	bls.n	7db6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2a>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    7da6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    7daa:	6864      	ldr	r4, [r4, #4]
    7dac:	f1b4 3fff 	cmp.w	r4, #4294967295
    7db0:	d1f5      	bne.n	7d9e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
      ++current_node_request_count;
    7db2:	3301      	adds	r3, #1
    7db4:	e7f3      	b.n	7d9e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    7db6:	2b0b      	cmp	r3, #11
    7db8:	d80d      	bhi.n	7dd6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4a>
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
    7dba:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
      &requests[scratch_buffer_request_count_];
  *current_request = {};
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
    7dbe:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    7dc2:	f04f 32ff 	mov.w	r2, #4294967295
    7dc6:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
    7dc8:	696b      	ldr	r3, [r5, #20]
    7dca:	6033      	str	r3, [r6, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
    7dcc:	696b      	ldr	r3, [r5, #20]
    7dce:	3301      	adds	r3, #1
    7dd0:	616b      	str	r3, [r5, #20]
  return kTfLiteOk;
    7dd2:	2000      	movs	r0, #0
}
    7dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
    7dd6:	220c      	movs	r2, #12
    7dd8:	4902      	ldr	r1, [pc, #8]	; (7de4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>)
    7dda:	68e8      	ldr	r0, [r5, #12]
    7ddc:	f00e f872 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7de0:	2001      	movs	r0, #1
    7de2:	e7f7      	b.n	7dd4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>
    7de4:	0001b808 	.word	0x0001b808

00007de8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    7de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7dec:	b122      	cbz	r2, 7df8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    7dee:	4607      	mov	r7, r0
    7df0:	460e      	mov	r6, r1
    7df2:	4690      	mov	r8, r2

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7df4:	2500      	movs	r5, #0
    7df6:	e029      	b.n	7e4c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x64>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7df8:	f010 fe54 	bl	18aa4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7dfc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7dfe:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e00:	b390      	cbz	r0, 7e68 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x80>
    7e02:	4620      	mov	r0, r4
    7e04:	f00d fade 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e08:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7e0a:	6820      	ldr	r0, [r4, #0]
    7e0c:	f00c f8bb 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7e10:	4285      	cmp	r5, r0
    7e12:	d23a      	bcs.n	7e8a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    7e14:	6820      	ldr	r0, [r4, #0]
    7e16:	f00c f8b6 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7e1a:	4285      	cmp	r5, r0
    7e1c:	d226      	bcs.n	7e6c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7e1e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7e20:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7e24:	4620      	mov	r0, r4
    7e26:	f00d facd 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    TFLITE_DCHECK(subgraph != nullptr);
    7e2a:	1820      	adds	r0, r4, r0
    7e2c:	d025      	beq.n	7e7a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7e2e:	f00d fb7f 	bl	15530 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
    7e32:	687b      	ldr	r3, [r7, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
    7e34:	681a      	ldr	r2, [r3, #0]
    7e36:	68d4      	ldr	r4, [r2, #12]
        memory_allocator_->AllocateFromTail(
    7e38:	2204      	movs	r2, #4
    7e3a:	212c      	movs	r1, #44	; 0x2c
    7e3c:	fb01 f100 	mul.w	r1, r1, r0
    7e40:	4618      	mov	r0, r3
    7e42:	47a0      	blx	r4
    if (output == nullptr) {
    7e44:	b1d8      	cbz	r0, 7e7e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
      TF_LITE_REPORT_ERROR(
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    7e46:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7e4a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7e4c:	4630      	mov	r0, r6
    7e4e:	f00d fabf 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e52:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e54:	4620      	mov	r0, r4
    7e56:	f00d fac1 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e5a:	2808      	cmp	r0, #8
    7e5c:	d9ce      	bls.n	7dfc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    7e5e:	f104 0008 	add.w	r0, r4, #8
    7e62:	f00d fabb 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7e66:	e7ca      	b.n	7dfe <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e68:	2400      	movs	r4, #0
    7e6a:	e7ce      	b.n	7e0a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x22>
    FLATBUFFERS_ASSERT(i < size());
    7e6c:	4b08      	ldr	r3, [pc, #32]	; (7e90 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
    7e6e:	4a09      	ldr	r2, [pc, #36]	; (7e94 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    7e70:	f44f 7183 	mov.w	r1, #262	; 0x106
    7e74:	4808      	ldr	r0, [pc, #32]	; (7e98 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
    7e76:	f00a fe19 	bl	12aac <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7e7a:	f010 fe13 	bl	18aa4 <abort>
      TF_LITE_REPORT_ERROR(
    7e7e:	4907      	ldr	r1, [pc, #28]	; (7e9c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
    7e80:	68f8      	ldr	r0, [r7, #12]
    7e82:	f00e f81f 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7e86:	2001      	movs	r0, #1
    7e88:	e000      	b.n	7e8c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
  }
  return kTfLiteOk;
    7e8a:	2000      	movs	r0, #0
}
    7e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e90:	0001a5b4 	.word	0x0001a5b4
    7e94:	0001a704 	.word	0x0001a704
    7e98:	0001a680 	.word	0x0001a680
    7e9c:	0001b840 	.word	0x0001b840

00007ea0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    7ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ea4:	b083      	sub	sp, #12
    7ea6:	4605      	mov	r5, r0
    7ea8:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    7eaa:	7c03      	ldrb	r3, [r0, #16]
    7eac:	b11b      	cbz	r3, 7eb6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x16>
    7eae:	460f      	mov	r7, r1
    7eb0:	4691      	mov	r9, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7eb2:	2600      	movs	r6, #0
    7eb4:	e043      	b.n	7f3e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7eb6:	4930      	ldr	r1, [pc, #192]	; (7f78 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xd8>)
    7eb8:	68c0      	ldr	r0, [r0, #12]
    7eba:	f00e f803 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7ebe:	2301      	movs	r3, #1
    7ec0:	e055      	b.n	7f6e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ec2:	f104 0008 	add.w	r0, r4, #8
    7ec6:	f00d fa89 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7eca:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ecc:	2800      	cmp	r0, #0
    7ece:	d041      	beq.n	7f54 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    7ed0:	4620      	mov	r0, r4
    7ed2:	f00d fa77 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ed6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7ed8:	6820      	ldr	r0, [r4, #0]
    7eda:	f00c f854 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7ede:	4286      	cmp	r6, r0
    7ee0:	d243      	bcs.n	7f6a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xca>
    7ee2:	6820      	ldr	r0, [r4, #0]
    7ee4:	f00c f84f 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7ee8:	4286      	cmp	r6, r0
    7eea:	d235      	bcs.n	7f58 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7eec:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7eee:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7ef2:	4620      	mov	r0, r4
    7ef4:	f00d fa66 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7ef8:	1824      	adds	r4, r4, r0
    7efa:	d034      	beq.n	7f66 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xc6>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    7efc:	682b      	ldr	r3, [r5, #0]
    7efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7f00:	696a      	ldr	r2, [r5, #20]
    7f02:	4641      	mov	r1, r8
    7f04:	4628      	mov	r0, r5
    7f06:	4798      	blx	r3
    7f08:	4603      	mov	r3, r0
    7f0a:	bb80      	cbnz	r0, 7f6e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    7f0c:	682b      	ldr	r3, [r5, #0]
    7f0e:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    7f12:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    7f16:	9600      	str	r6, [sp, #0]
    7f18:	f8d8 3000 	ldr.w	r3, [r8]
    7f1c:	f8da 2004 	ldr.w	r2, [sl, #4]
    7f20:	4639      	mov	r1, r7
    7f22:	4628      	mov	r0, r5
    7f24:	47d8      	blx	fp
    7f26:	4603      	mov	r3, r0
    7f28:	bb08      	cbnz	r0, 7f6e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    7f2a:	682b      	ldr	r3, [r5, #0]
    7f2c:	6a1b      	ldr	r3, [r3, #32]
    7f2e:	f8da 2004 	ldr.w	r2, [sl, #4]
    7f32:	4621      	mov	r1, r4
    7f34:	4628      	mov	r0, r5
    7f36:	4798      	blx	r3
    7f38:	4603      	mov	r3, r0
    7f3a:	b9c0      	cbnz	r0, 7f6e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7f3c:	3601      	adds	r6, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7f3e:	4638      	mov	r0, r7
    7f40:	f00d fa46 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f44:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f46:	4620      	mov	r0, r4
    7f48:	f00d fa48 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f4c:	2808      	cmp	r0, #8
    7f4e:	d8b8      	bhi.n	7ec2 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x22>
    7f50:	2000      	movs	r0, #0
    7f52:	e7ba      	b.n	7eca <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f54:	2400      	movs	r4, #0
    7f56:	e7bf      	b.n	7ed8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x38>
    FLATBUFFERS_ASSERT(i < size());
    7f58:	4b08      	ldr	r3, [pc, #32]	; (7f7c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xdc>)
    7f5a:	4a09      	ldr	r2, [pc, #36]	; (7f80 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe0>)
    7f5c:	f44f 7183 	mov.w	r1, #262	; 0x106
    7f60:	4808      	ldr	r0, [pc, #32]	; (7f84 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe4>)
    7f62:	f00a fda3 	bl	12aac <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7f66:	f010 fd9d 	bl	18aa4 <abort>
  model_is_allocating_ = false;
    7f6a:	2300      	movs	r3, #0
    7f6c:	742b      	strb	r3, [r5, #16]
}
    7f6e:	4618      	mov	r0, r3
    7f70:	b003      	add	sp, #12
    7f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f76:	bf00      	nop
    7f78:	0001b878 	.word	0x0001b878
    7f7c:	0001a5b4 	.word	0x0001a5b4
    7f80:	0001a704 	.word	0x0001a704
    7f84:	0001a680 	.word	0x0001a680

00007f88 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    7f88:	b570      	push	{r4, r5, r6, lr}
    7f8a:	4606      	mov	r6, r0
    7f8c:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7f8e:	f00d fa1f 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f92:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f94:	4620      	mov	r0, r4
    7f96:	f00d fa21 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f9a:	2808      	cmp	r0, #8
    7f9c:	d923      	bls.n	7fe6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5e>
    7f9e:	f104 0008 	add.w	r0, r4, #8
    7fa2:	f00d fa1b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7fa6:	b300      	cbz	r0, 7fea <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x62>
    7fa8:	4430      	add	r0, r6
    7faa:	f00d fa0b 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7fae:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7fb0:	6828      	ldr	r0, [r5, #0]
    7fb2:	f00b ffe8 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7fb6:	42b0      	cmp	r0, r6
    7fb8:	d919      	bls.n	7fee <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x66>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7fba:	1d2c      	adds	r4, r5, #4
    p += i * sizeof(uoffset_t);
    7fbc:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7fc0:	4620      	mov	r0, r4
    7fc2:	f00d f9ff 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    7fc6:	1824      	adds	r4, r4, r0
    7fc8:	d025      	beq.n	8016 <CONFIG_MAIN_STACK_SIZE+0x16>
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
    7fca:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    7fcc:	4620      	mov	r0, r4
    7fce:	f00d f9ff 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7fd2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7fd4:	4620      	mov	r0, r4
    7fd6:	f00d fa01 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fda:	2804      	cmp	r0, #4
    7fdc:	d90e      	bls.n	7ffc <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x74>
    7fde:	1d20      	adds	r0, r4, #4
    7fe0:	f00d f9fc 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7fe4:	e00b      	b.n	7ffe <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x76>
    7fe6:	2000      	movs	r0, #0
    7fe8:	e7dd      	b.n	7fa6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7fea:	2600      	movs	r6, #0
    7fec:	e7e0      	b.n	7fb0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x28>
    FLATBUFFERS_ASSERT(i < size());
    7fee:	4b0d      	ldr	r3, [pc, #52]	; (8024 <CONFIG_MAIN_STACK_SIZE+0x24>)
    7ff0:	4a0d      	ldr	r2, [pc, #52]	; (8028 <CONFIG_MAIN_STACK_SIZE+0x28>)
    7ff2:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ff6:	480d      	ldr	r0, [pc, #52]	; (802c <CONFIG_MAIN_STACK_SIZE+0x2c>)
    7ff8:	f00a fd58 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ffc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7ffe:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000:	b158      	cbz	r0, 801a <CONFIG_MAIN_STACK_SIZE+0x1a>
    8002:	4628      	mov	r0, r5
    8004:	f00d f9de 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8008:	182c      	adds	r4, r5, r0
    if (auto* array = buffer->data()) {
    800a:	b124      	cbz	r4, 8016 <CONFIG_MAIN_STACK_SIZE+0x16>
  uoffset_t size() const { return EndianScalar(length_); }
    800c:	6820      	ldr	r0, [r4, #0]
    800e:	f00b ffba 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (array->size()) {
    8012:	b120      	cbz	r0, 801e <CONFIG_MAIN_STACK_SIZE+0x1e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8014:	3404      	adds	r4, #4
}
    8016:	4620      	mov	r0, r4
    8018:	bd70      	pop	{r4, r5, r6, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    801a:	2400      	movs	r4, #0
    801c:	e7f5      	b.n	800a <CONFIG_MAIN_STACK_SIZE+0xa>
  void* out_buffer = nullptr;
    801e:	2400      	movs	r4, #0
  return out_buffer;
    8020:	e7f9      	b.n	8016 <CONFIG_MAIN_STACK_SIZE+0x16>
    8022:	bf00      	nop
    8024:	0001a5b4 	.word	0x0001a5b4
    8028:	0001b8c4 	.word	0x0001b8c4
    802c:	0001a680 	.word	0x0001a680

00008030 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    8030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8034:	b082      	sub	sp, #8
    8036:	4606      	mov	r6, r0
    8038:	460f      	mov	r7, r1
    803a:	4690      	mov	r8, r2
    803c:	461d      	mov	r5, r3
    803e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    8042:	4608      	mov	r0, r1
    8044:	f00d f9c4 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8048:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    804a:	4620      	mov	r0, r4
    804c:	f00d f9c6 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8050:	2808      	cmp	r0, #8
    8052:	d93e      	bls.n	80d2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    8054:	f104 0008 	add.w	r0, r4, #8
    8058:	f00d f9c0 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    805c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    805e:	2800      	cmp	r0, #0
    8060:	d039      	beq.n	80d6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    8062:	4620      	mov	r0, r4
    8064:	f00d f9ae 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8068:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    806a:	6820      	ldr	r0, [r4, #0]
    806c:	f00b ff8b 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8070:	4581      	cmp	r9, r0
    8072:	d232      	bcs.n	80da <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8074:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8076:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    807a:	4620      	mov	r0, r4
    807c:	f00d f9a2 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    8080:	42c4      	cmn	r4, r0
    8082:	d031      	beq.n	80e8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    8084:	6833      	ldr	r3, [r6, #0]
    8086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8088:	4630      	mov	r0, r6
    808a:	4798      	blx	r3
    808c:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
    808e:	6833      	ldr	r3, [r6, #0]
    8090:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(
    8094:	2300      	movs	r3, #0
    8096:	9301      	str	r3, [sp, #4]
    8098:	f8cd 9000 	str.w	r9, [sp]
    809c:	462b      	mov	r3, r5
    809e:	4602      	mov	r2, r0
    80a0:	4639      	mov	r1, r7
    80a2:	4630      	mov	r0, r6
    80a4:	47d0      	blx	sl
    80a6:	bb08      	cbnz	r0, 80ec <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    80a8:	f1b8 0f00 	cmp.w	r8, #0
    80ac:	d00d      	beq.n	80ca <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    80ae:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
    80b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    80ba:	00ad      	lsls	r5, r5, #2
    80bc:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    80be:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    80c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80c4:	441d      	add	r5, r3
    80c6:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    80c8:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    80ca:	4620      	mov	r0, r4
    80cc:	b002      	add	sp, #8
    80ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80d2:	2000      	movs	r0, #0
    80d4:	e7c2      	b.n	805c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80d6:	2400      	movs	r4, #0
    80d8:	e7c7      	b.n	806a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    80da:	4b07      	ldr	r3, [pc, #28]	; (80f8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
    80dc:	4a07      	ldr	r2, [pc, #28]	; (80fc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    80de:	f44f 7183 	mov.w	r1, #262	; 0x106
    80e2:	4807      	ldr	r0, [pc, #28]	; (8100 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    80e4:	f00a fce2 	bl	12aac <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    80e8:	f010 fcdc 	bl	18aa4 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    80ec:	4905      	ldr	r1, [pc, #20]	; (8104 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    80ee:	68f0      	ldr	r0, [r6, #12]
    80f0:	f00d fee8 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    80f4:	2400      	movs	r4, #0
    80f6:	e7e8      	b.n	80ca <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    80f8:	0001a5b4 	.word	0x0001a5b4
    80fc:	0001a704 	.word	0x0001a704
    8100:	0001a680 	.word	0x0001a680
    8104:	0001b9b8 	.word	0x0001b9b8

00008108 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    8108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    810c:	b082      	sub	sp, #8
    810e:	4680      	mov	r8, r0
    8110:	460e      	mov	r6, r1
    8112:	4617      	mov	r7, r2
    8114:	461d      	mov	r5, r3
    8116:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    811a:	4608      	mov	r0, r1
    811c:	f00d f958 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8120:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8122:	4620      	mov	r0, r4
    8124:	f00d f95a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8128:	2808      	cmp	r0, #8
    812a:	d93e      	bls.n	81aa <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    812c:	f104 0008 	add.w	r0, r4, #8
    8130:	f00d f954 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8134:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8136:	2800      	cmp	r0, #0
    8138:	d039      	beq.n	81ae <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    813a:	4620      	mov	r0, r4
    813c:	f00d f942 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8140:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8142:	6820      	ldr	r0, [r4, #0]
    8144:	f00b ff1f 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8148:	4581      	cmp	r9, r0
    814a:	d232      	bcs.n	81b2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    814c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    814e:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8152:	4620      	mov	r0, r4
    8154:	f00d f936 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    8158:	42c4      	cmn	r4, r0
    815a:	d031      	beq.n	81c0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    815c:	f8d8 0004 	ldr.w	r0, [r8, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    8160:	6803      	ldr	r3, [r0, #0]
    8162:	691b      	ldr	r3, [r3, #16]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    8164:	2204      	movs	r2, #4
    8166:	2140      	movs	r1, #64	; 0x40
    8168:	4798      	blx	r3
    816a:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    816c:	f8d8 3000 	ldr.w	r3, [r8]
    8170:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    8174:	2301      	movs	r3, #1
    8176:	9301      	str	r3, [sp, #4]
    8178:	f8cd 9000 	str.w	r9, [sp]
    817c:	462b      	mov	r3, r5
    817e:	4602      	mov	r2, r0
    8180:	4631      	mov	r1, r6
    8182:	4640      	mov	r0, r8
    8184:	47d0      	blx	sl
    8186:	b9e8      	cbnz	r0, 81c4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    8188:	b15f      	cbz	r7, 81a2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    818a:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
    818e:	687b      	ldr	r3, [r7, #4]
    8190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    8194:	00ad      	lsls	r5, r5, #2
    8196:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    8198:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    819a:	687b      	ldr	r3, [r7, #4]
    819c:	441d      	add	r5, r3
    819e:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    81a0:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    81a2:	4620      	mov	r0, r4
    81a4:	b002      	add	sp, #8
    81a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81aa:	2000      	movs	r0, #0
    81ac:	e7c2      	b.n	8134 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81ae:	2400      	movs	r4, #0
    81b0:	e7c7      	b.n	8142 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    81b2:	4b08      	ldr	r3, [pc, #32]	; (81d4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    81b4:	4a08      	ldr	r2, [pc, #32]	; (81d8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    81b6:	f44f 7183 	mov.w	r1, #262	; 0x106
    81ba:	4808      	ldr	r0, [pc, #32]	; (81dc <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    81bc:	f00a fc76 	bl	12aac <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    81c0:	f010 fc70 	bl	18aa4 <abort>
    TF_LITE_REPORT_ERROR(
    81c4:	4906      	ldr	r1, [pc, #24]	; (81e0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd8>)
    81c6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    81ca:	f00d fe7b 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    81ce:	2400      	movs	r4, #0
    81d0:	e7e7      	b.n	81a2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    81d2:	bf00      	nop
    81d4:	0001a5b4 	.word	0x0001a5b4
    81d8:	0001a704 	.word	0x0001a704
    81dc:	0001a680 	.word	0x0001a680
    81e0:	0001ba04 	.word	0x0001ba04

000081e4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>:
    const Model* model, const int32_t** offline_planner_offsets) {
    81e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81e8:	4607      	mov	r7, r0
    81ea:	460c      	mov	r4, r1
    81ec:	4690      	mov	r8, r2
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
    81ee:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
    81f0:	4608      	mov	r0, r1
    81f2:	f00d f8ed 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    81f6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    81f8:	4628      	mov	r0, r5
    81fa:	f00d f8ef 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81fe:	2810      	cmp	r0, #16
    8200:	d904      	bls.n	820c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x28>
    8202:	f105 0010 	add.w	r0, r5, #16
    8206:	f00d f8e9 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    820a:	e000      	b.n	820e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x2a>
    820c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    820e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8210:	b140      	cbz	r0, 8224 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x40>
    8212:	4620      	mov	r0, r4
    8214:	f00d f8d6 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8218:	4404      	add	r4, r0
  if (model->metadata()) {
    821a:	2c00      	cmp	r4, #0
    821c:	f000 80cc 	beq.w	83b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    8220:	2500      	movs	r5, #0
    8222:	e023      	b.n	826c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x88>
    8224:	2400      	movs	r4, #0
    8226:	e7f8      	b.n	821a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8228:	2000      	movs	r0, #0
    822a:	e02c      	b.n	8286 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xa2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    822c:	2400      	movs	r4, #0
    822e:	e031      	b.n	8294 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xb0>
    FLATBUFFERS_ASSERT(i < size());
    8230:	4b64      	ldr	r3, [pc, #400]	; (83c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    8232:	4a65      	ldr	r2, [pc, #404]	; (83c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e4>)
    8234:	f44f 7183 	mov.w	r1, #262	; 0x106
    8238:	4864      	ldr	r0, [pc, #400]	; (83cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    823a:	f00a fc37 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    823e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8240:	eb04 0900 	add.w	r9, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8244:	2800      	cmp	r0, #0
    8246:	d046      	beq.n	82d6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf2>
    8248:	4648      	mov	r0, r9
    824a:	f00d f8bb 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    824e:	4481      	add	r9, r0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8250:	f109 0904 	add.w	r9, r9, #4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    8254:	f8df a180 	ldr.w	sl, [pc, #384]	; 83d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f4>
    8258:	4650      	mov	r0, sl
    825a:	f7f9 f93b 	bl	14d4 <strlen>
    825e:	4602      	mov	r2, r0
    8260:	4651      	mov	r1, sl
    8262:	4648      	mov	r0, r9
    8264:	f010 fdb9 	bl	18dda <strncmp>
    8268:	b3c0      	cbz	r0, 82dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    826a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    826c:	4630      	mov	r0, r6
    826e:	f00d f8af 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8272:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8274:	4620      	mov	r0, r4
    8276:	f00d f8b1 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    827a:	2810      	cmp	r0, #16
    827c:	d9d4      	bls.n	8228 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x44>
    827e:	f104 0010 	add.w	r0, r4, #16
    8282:	f00d f8ab 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8286:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8288:	2800      	cmp	r0, #0
    828a:	d0cf      	beq.n	822c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x48>
    828c:	4620      	mov	r0, r4
    828e:	f00d f899 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8292:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8294:	6820      	ldr	r0, [r4, #0]
    8296:	f00b fe76 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    829a:	4285      	cmp	r5, r0
    829c:	f080 808e 	bcs.w	83bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d8>
    82a0:	6820      	ldr	r0, [r4, #0]
    82a2:	f00b fe70 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    82a6:	4285      	cmp	r5, r0
    82a8:	d2c2      	bcs.n	8230 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x4c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    82aa:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    82ac:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    82b0:	4620      	mov	r0, r4
    82b2:	f00d f887 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82b6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    82b8:	4620      	mov	r0, r4
    82ba:	f00d f889 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    82be:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    82c2:	4648      	mov	r0, r9
    82c4:	f00d f88a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82c8:	2804      	cmp	r0, #4
    82ca:	d9b8      	bls.n	823e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5a>
    82cc:	f109 0004 	add.w	r0, r9, #4
    82d0:	f00d f884 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    82d4:	e7b4      	b.n	8240 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82d6:	f04f 0900 	mov.w	r9, #0
    82da:	e7b9      	b.n	8250 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x6c>
    return data_ - ReadScalar<soffset_t>(data_);
    82dc:	4630      	mov	r0, r6
    82de:	f00d f877 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    82e2:	eba6 0900 	sub.w	r9, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    82e6:	4648      	mov	r0, r9
    82e8:	f00d f878 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82ec:	280c      	cmp	r0, #12
    82ee:	d94e      	bls.n	838e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1aa>
    82f0:	f109 000c 	add.w	r0, r9, #12
    82f4:	f00d f872 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    82f8:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82fc:	2800      	cmp	r0, #0
    82fe:	d048      	beq.n	8392 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ae>
    8300:	4648      	mov	r0, r9
    8302:	f00d f85f 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8306:	4481      	add	r9, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8308:	4620      	mov	r0, r4
    830a:	f00d f861 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    830e:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8312:	4650      	mov	r0, sl
    8314:	f00d f862 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8318:	2806      	cmp	r0, #6
    831a:	d93d      	bls.n	8398 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b4>
    831c:	f10a 0006 	add.w	r0, sl, #6
    8320:	f00d f85c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8324:	b3d0      	cbz	r0, 839c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b8>
    8326:	4420      	add	r0, r4
    8328:	f00d f84c 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    832c:	4682      	mov	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    832e:	f8d9 0000 	ldr.w	r0, [r9]
    8332:	f00b fe28 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8336:	4550      	cmp	r0, sl
    8338:	d933      	bls.n	83a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1be>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    833a:	f109 0404 	add.w	r4, r9, #4
    p += i * sizeof(uoffset_t);
    833e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8342:	4620      	mov	r0, r4
    8344:	f00d f83e 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8348:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    834a:	4620      	mov	r0, r4
    834c:	f00d f840 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8350:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8354:	4648      	mov	r0, r9
    8356:	f00d f841 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    835a:	2804      	cmp	r0, #4
    835c:	d928      	bls.n	83b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1cc>
    835e:	f109 0004 	add.w	r0, r9, #4
    8362:	f00d f83b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8366:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8368:	b320      	cbz	r0, 83b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d0>
    836a:	4620      	mov	r0, r4
    836c:	f00d f82a 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8370:	4420      	add	r0, r4
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    8372:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    8374:	3010      	adds	r0, #16
        *offline_planner_offsets =
    8376:	f8c8 0000 	str.w	r0, [r8]
        if (tensor_count_ != nbr_tensors) {
    837a:	687b      	ldr	r3, [r7, #4]
    837c:	4293      	cmp	r3, r2
    837e:	f43f af74 	beq.w	826a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x86>
          TF_LITE_REPORT_ERROR(reporter_,
    8382:	4913      	ldr	r1, [pc, #76]	; (83d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ec>)
    8384:	68f8      	ldr	r0, [r7, #12]
    8386:	f00d fd9d 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
    838a:	2001      	movs	r0, #1
    838c:	e017      	b.n	83be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    838e:	2000      	movs	r0, #0
    8390:	e7b2      	b.n	82f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8392:	f04f 0900 	mov.w	r9, #0
    8396:	e7b7      	b.n	8308 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x124>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8398:	2000      	movs	r0, #0
    839a:	e7c3      	b.n	8324 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x140>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    839c:	f04f 0a00 	mov.w	sl, #0
    83a0:	e7c5      	b.n	832e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x14a>
    FLATBUFFERS_ASSERT(i < size());
    83a2:	4b08      	ldr	r3, [pc, #32]	; (83c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    83a4:	4a0b      	ldr	r2, [pc, #44]	; (83d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f0>)
    83a6:	f44f 7183 	mov.w	r1, #262	; 0x106
    83aa:	4808      	ldr	r0, [pc, #32]	; (83cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    83ac:	f00a fb7e 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83b0:	2000      	movs	r0, #0
    83b2:	e7d8      	b.n	8366 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x182>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83b4:	2000      	movs	r0, #0
    83b6:	e7dc      	b.n	8372 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x18e>
  return kTfLiteOk;
    83b8:	2000      	movs	r0, #0
    83ba:	e000      	b.n	83be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    83bc:	2000      	movs	r0, #0
}
    83be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83c2:	bf00      	nop
    83c4:	0001a5b4 	.word	0x0001a5b4
    83c8:	0001ba48 	.word	0x0001ba48
    83cc:	0001a680 	.word	0x0001a680
    83d0:	0001bb40 	.word	0x0001bb40
    83d4:	0001b8c4 	.word	0x0001b8c4
    83d8:	0001beec 	.word	0x0001beec

000083dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    83dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(model != nullptr);
    83e0:	b349      	cbz	r1, 8436 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5a>
    83e2:	4604      	mov	r4, r0
    83e4:	460d      	mov	r5, r1
  if (model_is_allocating_) {
    83e6:	7c03      	ldrb	r3, [r0, #16]
    83e8:	bb3b      	cbnz	r3, 843a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5e>
  model_is_allocating_ = true;
    83ea:	2301      	movs	r3, #1
    83ec:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    83ee:	6840      	ldr	r0, [r0, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    83f0:	6803      	ldr	r3, [r0, #0]
    83f2:	68db      	ldr	r3, [r3, #12]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    83f4:	2204      	movs	r2, #4
    83f6:	2108      	movs	r1, #8
    83f8:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    83fa:	4603      	mov	r3, r0
    83fc:	b118      	cbz	r0, 8406 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    83fe:	6862      	ldr	r2, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    8400:	4926      	ldr	r1, [pc, #152]	; (849c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc0>)
    8402:	6001      	str	r1, [r0, #0]
    8404:	6042      	str	r2, [r0, #4]
  builtin_data_allocator_ =
    8406:	60a3      	str	r3, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    8408:	4620      	mov	r0, r4
    840a:	f00d fabb 	bl	15984 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    840e:	2800      	cmp	r0, #0
    8410:	d142      	bne.n	8498 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xbc>
      memory_allocator_->AllocateFromTail(
    8412:	6867      	ldr	r7, [r4, #4]
          alignof(SubgraphAllocations)));
    8414:	683b      	ldr	r3, [r7, #0]
    8416:	f8d3 800c 	ldr.w	r8, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    841a:	4628      	mov	r0, r5
    841c:	f00c ffd8 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8420:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8422:	4630      	mov	r0, r6
    8424:	f00c ffda 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8428:	2808      	cmp	r0, #8
    842a:	d90c      	bls.n	8446 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
    842c:	f106 0008 	add.w	r0, r6, #8
    8430:	f00c ffd4 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8434:	e008      	b.n	8448 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
  TFLITE_DCHECK(model != nullptr);
    8436:	f010 fb35 	bl	18aa4 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    843a:	4919      	ldr	r1, [pc, #100]	; (84a0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc4>)
    843c:	68c0      	ldr	r0, [r0, #12]
    843e:	f00d fd41 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    8442:	2600      	movs	r6, #0
    8444:	e01d      	b.n	8482 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    8446:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8448:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    844a:	b1e8      	cbz	r0, 8488 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>
    844c:	4630      	mov	r0, r6
    844e:	f00c ffb9 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8452:	4406      	add	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8454:	6830      	ldr	r0, [r6, #0]
    8456:	f00b fd96 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      memory_allocator_->AllocateFromTail(
    845a:	2204      	movs	r2, #4
    845c:	00c1      	lsls	r1, r0, #3
    845e:	4638      	mov	r0, r7
    8460:	47c0      	blx	r8
  if (output == nullptr) {
    8462:	4606      	mov	r6, r0
    8464:	b190      	cbz	r0, 848c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb0>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    8466:	6823      	ldr	r3, [r4, #0]
    8468:	69db      	ldr	r3, [r3, #28]
    846a:	4602      	mov	r2, r0
    846c:	4629      	mov	r1, r5
    846e:	4620      	mov	r0, r4
    8470:	4798      	blx	r3
    8472:	b978      	cbnz	r0, 8494 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    8474:	6823      	ldr	r3, [r4, #0]
    8476:	699b      	ldr	r3, [r3, #24]
    8478:	4632      	mov	r2, r6
    847a:	4629      	mov	r1, r5
    847c:	4620      	mov	r0, r4
    847e:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    8480:	b940      	cbnz	r0, 8494 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
}
    8482:	4630      	mov	r0, r6
    8484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8488:	2600      	movs	r6, #0
    848a:	e7e3      	b.n	8454 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    MicroPrintf("Failed to allocate memory for model metadata.");
    848c:	4805      	ldr	r0, [pc, #20]	; (84a4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc8>)
    848e:	f00c ff14 	bl	152ba <_Z11MicroPrintfPKcz>
    return nullptr;
    8492:	e7f6      	b.n	8482 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    8494:	2600      	movs	r6, #0
    8496:	e7f4      	b.n	8482 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    8498:	2600      	movs	r6, #0
    849a:	e7f2      	b.n	8482 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    849c:	0001bf0c 	.word	0x0001bf0c
    84a0:	0001bb8c 	.word	0x0001bb8c
    84a4:	0001bbe4 	.word	0x0001bbe4

000084a8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    84a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    84ac:	b083      	sub	sp, #12
    84ae:	4680      	mov	r8, r0
    84b0:	460e      	mov	r6, r1
    84b2:	4617      	mov	r7, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    84b4:	2500      	movs	r5, #0
    84b6:	e013      	b.n	84e0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84b8:	2000      	movs	r0, #0
    84ba:	e01d      	b.n	84f8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x50>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84bc:	2400      	movs	r4, #0
    84be:	e022      	b.n	8506 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    FLATBUFFERS_ASSERT(i < size());
    84c0:	4b31      	ldr	r3, [pc, #196]	; (8588 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe0>)
    84c2:	4a32      	ldr	r2, [pc, #200]	; (858c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe4>)
    84c4:	f44f 7183 	mov.w	r1, #262	; 0x106
    84c8:	4831      	ldr	r0, [pc, #196]	; (8590 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe8>)
    84ca:	f00a faef 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84ce:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    84d0:	b118      	cbz	r0, 84da <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
    84d2:	4420      	add	r0, r4
    84d4:	f00d f84b 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    84d8:	e000      	b.n	84dc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x34>
    84da:	2000      	movs	r0, #0
    auto* tensor = subgraph->tensors()->Get(i);
    if (tensor->is_variable()) {
    84dc:	bb98      	cbnz	r0, 8546 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9e>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    84de:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    84e0:	4630      	mov	r0, r6
    84e2:	f00c ff75 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    84e6:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    84e8:	4620      	mov	r0, r4
    84ea:	f00c ff77 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84ee:	2804      	cmp	r0, #4
    84f0:	d9e2      	bls.n	84b8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
    84f2:	1d20      	adds	r0, r4, #4
    84f4:	f00c ff72 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    84f8:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84fa:	2800      	cmp	r0, #0
    84fc:	d0de      	beq.n	84bc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
    84fe:	4620      	mov	r0, r4
    8500:	f00c ff60 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8504:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8506:	6820      	ldr	r0, [r4, #0]
    8508:	f00b fd3d 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    850c:	4285      	cmp	r5, r0
    850e:	d236      	bcs.n	857e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd6>
    8510:	6820      	ldr	r0, [r4, #0]
    8512:	f00b fd38 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8516:	4285      	cmp	r5, r0
    8518:	d2d2      	bcs.n	84c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    851a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    851c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8520:	4620      	mov	r0, r4
    8522:	f00c ff4f 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8526:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8528:	4620      	mov	r0, r4
    852a:	f00c ff51 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    852e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8532:	4648      	mov	r0, r9
    8534:	f00c ff52 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8538:	280e      	cmp	r0, #14
    853a:	d9c8      	bls.n	84ce <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x26>
    853c:	f109 000e 	add.w	r0, r9, #14
    8540:	f00c ff4c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8544:	e7c4      	b.n	84d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    8546:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    854a:	0084      	lsls	r4, r0, #2
    854c:	a901      	add	r1, sp, #4
    854e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    8552:	f00c ff16 	bl	15382 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    8556:	4603      	mov	r3, r0
    8558:	b990      	cbnz	r0, 8580 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    855a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    855e:	6803      	ldr	r3, [r0, #0]
    8560:	68db      	ldr	r3, [r3, #12]
    8562:	2210      	movs	r2, #16
    8564:	9901      	ldr	r1, [sp, #4]
    8566:	4798      	blx	r3
      eval_tensors[i].data.data =
    8568:	5138      	str	r0, [r7, r4]

      if (eval_tensors[i].data.data == nullptr) {
    856a:	2800      	cmp	r0, #0
    856c:	d1b7      	bne.n	84de <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        TF_LITE_REPORT_ERROR(error_reporter_,
    856e:	9a01      	ldr	r2, [sp, #4]
    8570:	4908      	ldr	r1, [pc, #32]	; (8594 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xec>)
    8572:	f8d8 000c 	ldr.w	r0, [r8, #12]
    8576:	f00d fca5 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    857a:	2301      	movs	r3, #1
    857c:	e000      	b.n	8580 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
      }
    }
  }
  return kTfLiteOk;
    857e:	2300      	movs	r3, #0
}
    8580:	4618      	mov	r0, r3
    8582:	b003      	add	sp, #12
    8584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8588:	0001a5b4 	.word	0x0001a5b4
    858c:	0001a89c 	.word	0x0001a89c
    8590:	0001a680 	.word	0x0001a680
    8594:	0001bc14 	.word	0x0001bc14

00008598 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    8598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    859c:	b083      	sub	sp, #12
  TFLITE_DCHECK(eval_tensors != nullptr);
    859e:	b12b      	cbz	r3, 85ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x14>
    85a0:	4604      	mov	r4, r0
    85a2:	4688      	mov	r8, r1
    85a4:	4692      	mov	sl, r2
    85a6:	4699      	mov	r9, r3
  for (size_t i = 0; i < tensor_count_; ++i) {
    85a8:	2600      	movs	r6, #0
    85aa:	e04b      	b.n	8644 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xac>
  TFLITE_DCHECK(eval_tensors != nullptr);
    85ac:	f010 fa7a 	bl	18aa4 <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    85b0:	4640      	mov	r0, r8
    85b2:	f00c ff0d 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85b6:	eba8 0b00 	sub.w	fp, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    85ba:	4658      	mov	r0, fp
    85bc:	f00c ff0e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85c0:	2804      	cmp	r0, #4
    85c2:	d92e      	bls.n	8622 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8a>
    85c4:	f10b 0004 	add.w	r0, fp, #4
    85c8:	f00c ff08 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    85cc:	eb08 0b00 	add.w	fp, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85d0:	b120      	cbz	r0, 85dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x44>
    85d2:	4658      	mov	r0, fp
    85d4:	f00c fef6 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    85d8:	eb0b 0700 	add.w	r7, fp, r0
  uoffset_t size() const { return EndianScalar(length_); }
    85dc:	6838      	ldr	r0, [r7, #0]
    85de:	f00b fcd2 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    85e2:	4286      	cmp	r6, r0
    85e4:	d21f      	bcs.n	8626 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    85e6:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
    85e8:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    85ec:	4638      	mov	r0, r7
    85ee:	f00c fee9 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    85f2:	4407      	add	r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
    85f4:	4638      	mov	r0, r7
    85f6:	f00c feeb 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85fa:	eba7 0b00 	sub.w	fp, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    85fe:	4658      	mov	r0, fp
    8600:	f00c feec 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8604:	280e      	cmp	r0, #14
    8606:	d915      	bls.n	8634 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x9c>
    8608:	f10b 000e 	add.w	r0, fp, #14
    860c:	f00c fee6 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8610:	b118      	cbz	r0, 861a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x82>
    8612:	4438      	add	r0, r7
    8614:	f00c ffab 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8618:	9001      	str	r0, [sp, #4]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    861a:	9b01      	ldr	r3, [sp, #4]
    861c:	b963      	cbnz	r3, 8638 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa0>
    861e:	2301      	movs	r3, #1
    8620:	e02c      	b.n	867c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8622:	2000      	movs	r0, #0
    8624:	e7d2      	b.n	85cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x34>
    FLATBUFFERS_ASSERT(i < size());
    8626:	4bb6      	ldr	r3, [pc, #728]	; (8900 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8628:	4ab6      	ldr	r2, [pc, #728]	; (8904 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x36c>)
    862a:	f44f 7183 	mov.w	r1, #262	; 0x106
    862e:	48b6      	ldr	r0, [pc, #728]	; (8908 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8630:	f00a fa3c 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8634:	2000      	movs	r0, #0
    8636:	e7eb      	b.n	8610 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x78>
    8638:	2300      	movs	r3, #0
    863a:	e01f      	b.n	867c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
      current->offline_offset = kOnlinePlannedBuffer;
    863c:	f04f 33ff 	mov.w	r3, #4294967295
    8640:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8642:	3601      	adds	r6, #1
    8644:	6863      	ldr	r3, [r4, #4]
    8646:	42b3      	cmp	r3, r6
    8648:	d920      	bls.n	868c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xf4>
    AllocationInfo* current = &info_[i];
    864a:	6825      	ldr	r5, [r4, #0]
    864c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8650:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    current->output_ptr = &(eval_tensors[i].data.data);
    8654:	009f      	lsls	r7, r3, #2
    8656:	eb09 0083 	add.w	r0, r9, r3, lsl #2
    865a:	6068      	str	r0, [r5, #4]
    TF_LITE_ENSURE_STATUS(
    865c:	4629      	mov	r1, r5
    865e:	f00c fe90 	bl	15382 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    8662:	9001      	str	r0, [sp, #4]
    8664:	2800      	cmp	r0, #0
    8666:	f040 8146 	bne.w	88f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35e>
    current->first_created = -1;
    866a:	f04f 33ff 	mov.w	r3, #4294967295
    866e:	60ab      	str	r3, [r5, #8]
    current->last_used = -1;
    8670:	60eb      	str	r3, [r5, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    8672:	f859 7007 	ldr.w	r7, [r9, r7]
    8676:	2f00      	cmp	r7, #0
    8678:	d09a      	beq.n	85b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x18>
    867a:	2300      	movs	r3, #0
    867c:	752b      	strb	r3, [r5, #20]
    if (offline_offsets) {
    867e:	f1ba 0f00 	cmp.w	sl, #0
    8682:	d0db      	beq.n	863c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa4>
      current->offline_offset = offline_offsets[i];
    8684:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    8688:	612b      	str	r3, [r5, #16]
    868a:	e7da      	b.n	8642 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xaa>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    868c:	4640      	mov	r0, r8
    868e:	f00c ff4f 	bl	15530 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    8692:	4607      	mov	r7, r0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8694:	f04f 0900 	mov.w	r9, #0
    8698:	e01f      	b.n	86da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x142>
    869a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    869c:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86a0:	b350      	cbz	r0, 86f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x160>
    86a2:	4628      	mov	r0, r5
    86a4:	f00c fe8e 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    86a8:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    86aa:	6828      	ldr	r0, [r5, #0]
    86ac:	f00b fc6b 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    86b0:	4581      	cmp	r9, r0
    86b2:	d22a      	bcs.n	870a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x172>
    86b4:	6828      	ldr	r0, [r5, #0]
    86b6:	f00b fc66 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    86ba:	4581      	cmp	r9, r0
    86bc:	d21e      	bcs.n	86fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x164>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    86be:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    86c0:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    86c4:	f00c fe83 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    86c8:	6823      	ldr	r3, [r4, #0]
    86ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    86ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->first_created = 0;
    86d2:	2300      	movs	r3, #0
    86d4:	6083      	str	r3, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    86d6:	f109 0901 	add.w	r9, r9, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    86da:	4646      	mov	r6, r8
    return data_ - ReadScalar<soffset_t>(data_);
    86dc:	4640      	mov	r0, r8
    86de:	f00c fe77 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86e2:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86e6:	4628      	mov	r0, r5
    86e8:	f00c fe78 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86ec:	2806      	cmp	r0, #6
    86ee:	d9d4      	bls.n	869a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x102>
    86f0:	1da8      	adds	r0, r5, #6
    86f2:	f00c fe73 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    86f6:	e7d1      	b.n	869c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x104>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86f8:	2500      	movs	r5, #0
    86fa:	e7d6      	b.n	86aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x112>
    FLATBUFFERS_ASSERT(i < size());
    86fc:	4b80      	ldr	r3, [pc, #512]	; (8900 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    86fe:	4a83      	ldr	r2, [pc, #524]	; (890c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8700:	f44f 7183 	mov.w	r1, #262	; 0x106
    8704:	4880      	ldr	r0, [pc, #512]	; (8908 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8706:	f00a f9d1 	bl	12aac <__assert_func>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    870a:	f04f 0800 	mov.w	r8, #0
    870e:	e01e      	b.n	874e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1b6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8710:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8712:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8714:	b348      	cbz	r0, 876a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d2>
    8716:	4628      	mov	r0, r5
    8718:	f00c fe54 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    871c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    871e:	6828      	ldr	r0, [r5, #0]
    8720:	f00b fc31 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8724:	4580      	cmp	r8, r0
    8726:	d229      	bcs.n	877c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e4>
    8728:	6828      	ldr	r0, [r5, #0]
    872a:	f00b fc2c 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    872e:	4580      	cmp	r8, r0
    8730:	d21d      	bcs.n	876e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8732:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8734:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
    8738:	f00c fe49 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    873c:	6823      	ldr	r3, [r4, #0]
    873e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8742:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->last_used = operators_size - 1;
    8746:	1e7b      	subs	r3, r7, #1
    8748:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    874a:	f108 0801 	add.w	r8, r8, #1
    return data_ - ReadScalar<soffset_t>(data_);
    874e:	4630      	mov	r0, r6
    8750:	f00c fe3e 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8754:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8756:	4628      	mov	r0, r5
    8758:	f00c fe40 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    875c:	2808      	cmp	r0, #8
    875e:	d9d7      	bls.n	8710 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x178>
    8760:	f105 0008 	add.w	r0, r5, #8
    8764:	f00c fe3a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8768:	e7d3      	b.n	8712 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x17a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    876a:	2500      	movs	r5, #0
    876c:	e7d7      	b.n	871e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x186>
    FLATBUFFERS_ASSERT(i < size());
    876e:	4b64      	ldr	r3, [pc, #400]	; (8900 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8770:	4a66      	ldr	r2, [pc, #408]	; (890c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8772:	f44f 7183 	mov.w	r1, #262	; 0x106
    8776:	4864      	ldr	r0, [pc, #400]	; (8908 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8778:	f00a f998 	bl	12aac <__assert_func>
  for (int i = (operators_size - 1); i >= 0; --i) {
    877c:	3f01      	subs	r7, #1
    877e:	e08d      	b.n	889c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x304>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8780:	2000      	movs	r0, #0
    8782:	e09b      	b.n	88bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x324>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8784:	f04f 0900 	mov.w	r9, #0
    8788:	e0a1      	b.n	88ce <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x336>
    FLATBUFFERS_ASSERT(i < size());
    878a:	4b5d      	ldr	r3, [pc, #372]	; (8900 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    878c:	4a60      	ldr	r2, [pc, #384]	; (8910 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x378>)
    878e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8792:	485d      	ldr	r0, [pc, #372]	; (8908 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8794:	f00a f98a 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8798:	2000      	movs	r0, #0
    879a:	e019      	b.n	87d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x238>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    879c:	2500      	movs	r5, #0
    879e:	e01f      	b.n	87e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x248>
    FLATBUFFERS_ASSERT(i < size());
    87a0:	4b57      	ldr	r3, [pc, #348]	; (8900 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    87a2:	4a5a      	ldr	r2, [pc, #360]	; (890c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    87a4:	f44f 7183 	mov.w	r1, #262	; 0x106
    87a8:	4857      	ldr	r0, [pc, #348]	; (8908 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    87aa:	f00a f97f 	bl	12aac <__assert_func>
        current->last_used = i;
    87ae:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    87b0:	f10a 0a01 	add.w	sl, sl, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    87b4:	46c8      	mov	r8, r9
    return data_ - ReadScalar<soffset_t>(data_);
    87b6:	4648      	mov	r0, r9
    87b8:	f00c fe0a 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    87bc:	eba9 0500 	sub.w	r5, r9, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    87c0:	4628      	mov	r0, r5
    87c2:	f00c fe0b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87c6:	2806      	cmp	r0, #6
    87c8:	d9e6      	bls.n	8798 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x200>
    87ca:	1da8      	adds	r0, r5, #6
    87cc:	f00c fe06 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    87d0:	eb09 0500 	add.w	r5, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87d4:	2800      	cmp	r0, #0
    87d6:	d0e1      	beq.n	879c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x204>
    87d8:	4628      	mov	r0, r5
    87da:	f00c fdf3 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87de:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    87e0:	6828      	ldr	r0, [r5, #0]
    87e2:	f00b fbd0 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    87e6:	4582      	cmp	sl, r0
    87e8:	d215      	bcs.n	8816 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x27e>
    87ea:	6828      	ldr	r0, [r5, #0]
    87ec:	f00b fbcb 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    87f0:	4582      	cmp	sl, r0
    87f2:	d2d5      	bcs.n	87a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x208>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    87f4:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    87f6:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
    87fa:	f00c fde8 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    87fe:	6823      	ldr	r3, [r4, #0]
    8800:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8804:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    8808:	68c3      	ldr	r3, [r0, #12]
    880a:	f1b3 3fff 	cmp.w	r3, #4294967295
    880e:	d0ce      	beq.n	87ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    8810:	42bb      	cmp	r3, r7
    8812:	dacd      	bge.n	87b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x218>
    8814:	e7cb      	b.n	87ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8816:	f04f 0900 	mov.w	r9, #0
    881a:	e00d      	b.n	8838 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2a0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    881c:	2000      	movs	r0, #0
    881e:	e019      	b.n	8854 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2bc>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8820:	2500      	movs	r5, #0
    8822:	e01f      	b.n	8864 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2cc>
    FLATBUFFERS_ASSERT(i < size());
    8824:	4b36      	ldr	r3, [pc, #216]	; (8900 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8826:	4a39      	ldr	r2, [pc, #228]	; (890c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8828:	f44f 7183 	mov.w	r1, #262	; 0x106
    882c:	4836      	ldr	r0, [pc, #216]	; (8908 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    882e:	f00a f93d 	bl	12aac <__assert_func>
        current->first_created = i;
    8832:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8834:	f109 0901 	add.w	r9, r9, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8838:	4640      	mov	r0, r8
    883a:	f00c fdc9 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    883e:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8842:	4628      	mov	r0, r5
    8844:	f00c fdca 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8848:	2808      	cmp	r0, #8
    884a:	d9e7      	bls.n	881c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x284>
    884c:	f105 0008 	add.w	r0, r5, #8
    8850:	f00c fdc4 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8854:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8858:	2800      	cmp	r0, #0
    885a:	d0e1      	beq.n	8820 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x288>
    885c:	4628      	mov	r0, r5
    885e:	f00c fdb1 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8862:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8864:	6828      	ldr	r0, [r5, #0]
    8866:	f00b fb8e 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    886a:	4581      	cmp	r9, r0
    886c:	d215      	bcs.n	889a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x302>
    886e:	6828      	ldr	r0, [r5, #0]
    8870:	f00b fb89 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8874:	4581      	cmp	r9, r0
    8876:	d2d5      	bcs.n	8824 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8878:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    887a:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    887e:	f00c fda6 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    8882:	6823      	ldr	r3, [r4, #0]
    8884:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8888:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    888c:	6883      	ldr	r3, [r0, #8]
    888e:	f1b3 3fff 	cmp.w	r3, #4294967295
    8892:	d0ce      	beq.n	8832 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
    8894:	42bb      	cmp	r3, r7
    8896:	ddcd      	ble.n	8834 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29c>
    8898:	e7cb      	b.n	8832 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
  for (int i = (operators_size - 1); i >= 0; --i) {
    889a:	3f01      	subs	r7, #1
    889c:	2f00      	cmp	r7, #0
    889e:	db28      	blt.n	88f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35a>
    return data_ - ReadScalar<soffset_t>(data_);
    88a0:	4630      	mov	r0, r6
    88a2:	f00c fd95 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    88a6:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    88a8:	4628      	mov	r0, r5
    88aa:	f00c fd97 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88ae:	280a      	cmp	r0, #10
    88b0:	f67f af66 	bls.w	8780 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e8>
    88b4:	f105 000a 	add.w	r0, r5, #10
    88b8:	f00c fd90 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    88bc:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88c0:	2800      	cmp	r0, #0
    88c2:	f43f af5f 	beq.w	8784 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1ec>
    88c6:	4648      	mov	r0, r9
    88c8:	f00c fd7c 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    88cc:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    88ce:	f8d9 0000 	ldr.w	r0, [r9]
    88d2:	f00b fb58 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    88d6:	4287      	cmp	r7, r0
    88d8:	f4bf af57 	bcs.w	878a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    88dc:	f109 0904 	add.w	r9, r9, #4
    p += i * sizeof(uoffset_t);
    88e0:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    88e4:	4648      	mov	r0, r9
    88e6:	f00c fd6d 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    88ea:	4481      	add	r9, r0
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    88ec:	f04f 0a00 	mov.w	sl, #0
    88f0:	e760      	b.n	87b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x21c>
  return kTfLiteOk;
    88f2:	2300      	movs	r3, #0
    88f4:	9301      	str	r3, [sp, #4]
}
    88f6:	9801      	ldr	r0, [sp, #4]
    88f8:	b003      	add	sp, #12
    88fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88fe:	bf00      	nop
    8900:	0001a5b4 	.word	0x0001a5b4
    8904:	0001a89c 	.word	0x0001a89c
    8908:	0001a680 	.word	0x0001a680
    890c:	0001a5c0 	.word	0x0001a5c0
    8910:	0001b3ec 	.word	0x0001b3ec

00008914 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8918:	b083      	sub	sp, #12
    891a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    891e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  TFLITE_DCHECK(result != nullptr);
    8920:	b31d      	cbz	r5, 896a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    8922:	4607      	mov	r7, r0
    8924:	4688      	mov	r8, r1
    8926:	4614      	mov	r4, r2
    8928:	469a      	mov	sl, r3
  *result = {};
    892a:	2240      	movs	r2, #64	; 0x40
    892c:	2100      	movs	r1, #0
    892e:	4628      	mov	r0, r5
    8930:	f010 f8ec 	bl	18b0c <memset>
    return data_ - ReadScalar<soffset_t>(data_);
    8934:	4620      	mov	r0, r4
    8936:	f00c fd4b 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    893a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    893c:	4630      	mov	r0, r6
    893e:	f00c fd4d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8942:	2806      	cmp	r0, #6
    8944:	d913      	bls.n	896e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    8946:	1db0      	adds	r0, r6, #6
    8948:	f00c fd48 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    894c:	b188      	cbz	r0, 8972 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5e>
    894e:	4420      	add	r0, r4
    8950:	f00c fd4a 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8954:	464a      	mov	r2, r9
    8956:	4629      	mov	r1, r5
    8958:	b2c0      	uxtb	r0, r0
    895a:	f001 f8b7 	bl	9acc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    895e:	4606      	mov	r6, r0
    8960:	b148      	cbz	r0, 8976 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x62>
}
    8962:	4630      	mov	r0, r6
    8964:	b003      	add	sp, #12
    8966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(result != nullptr);
    896a:	f010 f89b 	bl	18aa4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    896e:	2000      	movs	r0, #0
    8970:	e7ec      	b.n	894c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8972:	2000      	movs	r0, #0
    8974:	e7ee      	b.n	8954 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    8976:	4620      	mov	r0, r4
    8978:	f00c fd2a 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    897c:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8980:	4658      	mov	r0, fp
    8982:	f00c fd2b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8986:	280e      	cmp	r0, #14
    8988:	d93f      	bls.n	8a0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf6>
    898a:	f10b 000e 	add.w	r0, fp, #14
    898e:	f00c fd25 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8992:	b118      	cbz	r0, 899c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x88>
    8994:	4420      	add	r0, r4
    8996:	f00c fdea 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    899a:	4606      	mov	r6, r0
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    899c:	3e00      	subs	r6, #0
    899e:	bf18      	it	ne
    89a0:	2601      	movne	r6, #1
  result->is_variable = flatbuffer_tensor.is_variable();
    89a2:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    89a6:	4651      	mov	r1, sl
    89a8:	4620      	mov	r0, r4
    89aa:	f7ff faed 	bl	7f88 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    89ae:	6068      	str	r0, [r5, #4]
  if (result->data.data == nullptr) {
    89b0:	b368      	cbz	r0, 8a0e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
    result->allocation_type = kTfLiteMmapRo;
    89b2:	2301      	movs	r3, #1
    89b4:	752b      	strb	r3, [r5, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    89b6:	464b      	mov	r3, r9
    89b8:	aa01      	add	r2, sp, #4
    89ba:	f105 0118 	add.w	r1, r5, #24
    89be:	4620      	mov	r0, r4
    89c0:	f7fd fe6a 	bl	6698 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    89c4:	4606      	mov	r6, r0
    89c6:	2800      	cmp	r0, #0
    89c8:	d1cb      	bne.n	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    89ca:	4620      	mov	r0, r4
    89cc:	f00c fd00 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    89d0:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    89d4:	4650      	mov	r0, sl
    89d6:	f00c fd01 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89da:	2804      	cmp	r0, #4
    89dc:	d91a      	bls.n	8a14 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    89de:	f10a 0004 	add.w	r0, sl, #4
    89e2:	f00c fcfb 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    89e6:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89ea:	b1a8      	cbz	r0, 8a18 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    89ec:	4650      	mov	r0, sl
    89ee:	f00c fce9 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    89f2:	eb0a 0200 	add.w	r2, sl, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    89f6:	b18a      	cbz	r2, 8a1c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    89f8:	f105 0308 	add.w	r3, r5, #8
    89fc:	4649      	mov	r1, r9
    89fe:	4638      	mov	r0, r7
    8a00:	f00c fff3 	bl	159ea <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8a04:	b160      	cbz	r0, 8a20 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10c>
    8a06:	4606      	mov	r6, r0
    8a08:	e7ab      	b.n	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a0a:	2000      	movs	r0, #0
    8a0c:	e7c1      	b.n	8992 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    result->allocation_type = kTfLiteArenaRw;
    8a0e:	2302      	movs	r3, #2
    8a10:	752b      	strb	r3, [r5, #20]
    8a12:	e7d0      	b.n	89b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    8a14:	2000      	movs	r0, #0
    8a16:	e7e6      	b.n	89e6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a18:	2200      	movs	r2, #0
    8a1a:	e7ec      	b.n	89f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8a1c:	4bb6      	ldr	r3, [pc, #728]	; (8cf8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e4>)
    8a1e:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8a20:	4620      	mov	r0, r4
    8a22:	f00c fcd5 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a26:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a2a:	4650      	mov	r0, sl
    8a2c:	f00c fcd6 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a30:	280c      	cmp	r0, #12
    8a32:	d91a      	bls.n	8a6a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x156>
    8a34:	f10a 000c 	add.w	r0, sl, #12
    8a38:	f00c fcd0 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8a3c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a3e:	b1b0      	cbz	r0, 8a6e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15a>
    8a40:	4620      	mov	r0, r4
    8a42:	f00c fcbf 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a46:	4404      	add	r4, r0
      src_quantization->zero_point() &&
    8a48:	2c00      	cmp	r4, #0
    8a4a:	d08a      	beq.n	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    8a4c:	46a2      	mov	sl, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8a4e:	4620      	mov	r0, r4
    8a50:	f00c fcbe 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a54:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a56:	4620      	mov	r0, r4
    8a58:	f00c fcc0 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a5c:	2808      	cmp	r0, #8
    8a5e:	d908      	bls.n	8a72 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
    8a60:	f104 0008 	add.w	r0, r4, #8
    8a64:	f00c fcba 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8a68:	e004      	b.n	8a74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x160>
    8a6a:	2000      	movs	r0, #0
    8a6c:	e7e6      	b.n	8a3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x128>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a6e:	2400      	movs	r4, #0
    8a70:	e7ea      	b.n	8a48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a72:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8a74:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a78:	2800      	cmp	r0, #0
    8a7a:	d060      	beq.n	8b3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22a>
    8a7c:	4620      	mov	r0, r4
    8a7e:	f00c fca1 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a82:	4404      	add	r4, r0
  if (src_quantization && src_quantization->scale() &&
    8a84:	2c00      	cmp	r4, #0
    8a86:	f43f af6c 	beq.w	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    8a8a:	6820      	ldr	r0, [r4, #0]
    8a8c:	f00b fa7b 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8a90:	2800      	cmp	r0, #0
    8a92:	f43f af66 	beq.w	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    8a96:	4650      	mov	r0, sl
    8a98:	f00c fc9a 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a9c:	ebaa 0b00 	sub.w	fp, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8aa0:	4658      	mov	r0, fp
    8aa2:	f00c fc9b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8aa6:	280a      	cmp	r0, #10
    8aa8:	d94b      	bls.n	8b42 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
    8aaa:	f10b 000a 	add.w	r0, fp, #10
    8aae:	f00c fc95 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8ab2:	eb0a 0b00 	add.w	fp, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ab6:	2800      	cmp	r0, #0
    8ab8:	d045      	beq.n	8b46 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
    8aba:	4658      	mov	r0, fp
    8abc:	f00c fc82 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8ac0:	4458      	add	r0, fp
      (src_quantization->scale()->size() > 0) &&
    8ac2:	2800      	cmp	r0, #0
    8ac4:	f43f af4d 	beq.w	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    8ac8:	6800      	ldr	r0, [r0, #0]
    8aca:	f00b fa5c 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      src_quantization->zero_point() &&
    8ace:	2800      	cmp	r0, #0
    8ad0:	f43f af47 	beq.w	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    8ad4:	6820      	ldr	r0, [r4, #0]
    8ad6:	f00b fa56 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8ada:	b3b0      	cbz	r0, 8b4a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x236>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8adc:	6860      	ldr	r0, [r4, #4]
    8ade:	f00c fd4c 	bl	1557a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
    result->params.scale = src_quantization->scale()->Get(0);
    8ae2:	60e8      	str	r0, [r5, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    8ae4:	4650      	mov	r0, sl
    8ae6:	f00c fc73 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8aea:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8aee:	4620      	mov	r0, r4
    8af0:	f00c fc74 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8af4:	280a      	cmp	r0, #10
    8af6:	d92f      	bls.n	8b58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    8af8:	f104 000a 	add.w	r0, r4, #10
    8afc:	f00c fc6e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8b00:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b04:	b350      	cbz	r0, 8b5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    8b06:	4620      	mov	r0, r4
    8b08:	f00c fc5c 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b0c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8b0e:	6820      	ldr	r0, [r4, #0]
    8b10:	f00b fa39 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8b14:	b320      	cbz	r0, 8b60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8b16:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    8b1a:	f00c fd2d 	bl	15578 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    result->params.zero_point =
    8b1e:	6128      	str	r0, [r5, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8b20:	4650      	mov	r0, sl
    8b22:	f00c fc55 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b26:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b2a:	4620      	mov	r0, r4
    8b2c:	f00c fc56 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b30:	2808      	cmp	r0, #8
    8b32:	d91c      	bls.n	8b6e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25a>
    8b34:	f104 0008 	add.w	r0, r4, #8
    8b38:	f00c fc50 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8b3c:	e018      	b.n	8b70 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b3e:	2400      	movs	r4, #0
    8b40:	e7a0      	b.n	8a84 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b42:	2000      	movs	r0, #0
    8b44:	e7b5      	b.n	8ab2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b46:	2000      	movs	r0, #0
    8b48:	e7bb      	b.n	8ac2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ae>
    FLATBUFFERS_ASSERT(i < size());
    8b4a:	4b6c      	ldr	r3, [pc, #432]	; (8cfc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8b4c:	4a6c      	ldr	r2, [pc, #432]	; (8d00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ec>)
    8b4e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8b52:	486c      	ldr	r0, [pc, #432]	; (8d04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8b54:	f009 ffaa 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b58:	2000      	movs	r0, #0
    8b5a:	e7d1      	b.n	8b00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b5c:	2400      	movs	r4, #0
    8b5e:	e7d6      	b.n	8b0e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fa>
    FLATBUFFERS_ASSERT(i < size());
    8b60:	4b66      	ldr	r3, [pc, #408]	; (8cfc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8b62:	4a69      	ldr	r2, [pc, #420]	; (8d08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8b64:	f44f 7183 	mov.w	r1, #262	; 0x106
    8b68:	4866      	ldr	r0, [pc, #408]	; (8d04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8b6a:	f009 ff9f 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b6e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8b70:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b74:	b390      	cbz	r0, 8bdc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>
    8b76:	4620      	mov	r0, r4
    8b78:	f00c fc24 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b7c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8b7e:	6820      	ldr	r0, [r4, #0]
    8b80:	f00b fa01 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8b84:	4604      	mov	r4, r0
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    8b86:	f1b8 0f00 	cmp.w	r8, #0
    8b8a:	d029      	beq.n	8be0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>
                                          alignof(TfLiteAffineQuantization)))
    8b8c:	683b      	ldr	r3, [r7, #0]
    8b8e:	691b      	ldr	r3, [r3, #16]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    8b90:	2204      	movs	r2, #4
    8b92:	210c      	movs	r1, #12
    8b94:	4638      	mov	r0, r7
    8b96:	4798      	blx	r3
    8b98:	4683      	mov	fp, r0
    if (quantization == nullptr) {
    8b9a:	f1bb 0f00 	cmp.w	fp, #0
    8b9e:	d027      	beq.n	8bf0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8ba0:	f1b8 0f00 	cmp.w	r8, #0
    8ba4:	d02a      	beq.n	8bfc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
                  alignof(TfLiteIntArray)))
    8ba6:	683b      	ldr	r3, [r7, #0]
    8ba8:	691e      	ldr	r6, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8baa:	4620      	mov	r0, r4
    8bac:	f00d f8af 	bl	15d0e <TfLiteIntArrayGetSizeInBytes>
    8bb0:	4601      	mov	r1, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8bb2:	2204      	movs	r2, #4
    8bb4:	4638      	mov	r0, r7
    8bb6:	47b0      	blx	r6
    quantization->zero_point =
    8bb8:	f8cb 0004 	str.w	r0, [fp, #4]
    if (quantization->zero_point == nullptr) {
    8bbc:	b340      	cbz	r0, 8c10 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2fc>
    return data_ - ReadScalar<soffset_t>(data_);
    8bbe:	4650      	mov	r0, sl
    8bc0:	f00c fc06 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8bc4:	ebaa 0600 	sub.w	r6, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8bc8:	4630      	mov	r0, r6
    8bca:	f00c fc07 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bce:	2808      	cmp	r0, #8
    8bd0:	d924      	bls.n	8c1c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    8bd2:	f106 0008 	add.w	r0, r6, #8
    8bd6:	f00c fc01 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8bda:	e020      	b.n	8c1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x30a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bdc:	2400      	movs	r4, #0
    8bde:	e7ce      	b.n	8b7e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
                      alignof(TfLiteAffineQuantization)));
    8be0:	683b      	ldr	r3, [r7, #0]
    8be2:	68db      	ldr	r3, [r3, #12]
                  allocator->AllocateFromTail(
    8be4:	2204      	movs	r2, #4
    8be6:	210c      	movs	r1, #12
    8be8:	4638      	mov	r0, r7
    8bea:	4798      	blx	r3
    8bec:	4683      	mov	fp, r0
    8bee:	e7d4      	b.n	8b9a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      TF_LITE_REPORT_ERROR(error_reporter,
    8bf0:	4946      	ldr	r1, [pc, #280]	; (8d0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f8>)
    8bf2:	4648      	mov	r0, r9
    8bf4:	f00d f966 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8bf8:	2601      	movs	r6, #1
    8bfa:	e6b2      	b.n	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
                  alignof(TfLiteIntArray)));
    8bfc:	683b      	ldr	r3, [r7, #0]
    8bfe:	68de      	ldr	r6, [r3, #12]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8c00:	4620      	mov	r0, r4
    8c02:	f00d f884 	bl	15d0e <TfLiteIntArrayGetSizeInBytes>
    8c06:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8c08:	2204      	movs	r2, #4
    8c0a:	4638      	mov	r0, r7
    8c0c:	47b0      	blx	r6
    8c0e:	e7d3      	b.n	8bb8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a4>
      TF_LITE_REPORT_ERROR(error_reporter,
    8c10:	493f      	ldr	r1, [pc, #252]	; (8d10 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3fc>)
    8c12:	4648      	mov	r0, r9
    8c14:	f00d f956 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8c18:	2601      	movs	r6, #1
    8c1a:	e6a2      	b.n	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c1c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8c1e:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c22:	b1b0      	cbz	r0, 8c52 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x33e>
    8c24:	4630      	mov	r0, r6
    8c26:	f00c fbcd 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c2a:	1832      	adds	r2, r6, r0
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8c2c:	465b      	mov	r3, fp
    8c2e:	4649      	mov	r1, r9
    8c30:	4638      	mov	r0, r7
    8c32:	f00c feec 	bl	15a0e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8c36:	4606      	mov	r6, r0
    8c38:	2800      	cmp	r0, #0
    8c3a:	f47f ae92 	bne.w	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    quantization->zero_point->size = channels;
    8c3e:	f8db 3004 	ldr.w	r3, [fp, #4]
    8c42:	601c      	str	r4, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
    8c44:	f8db 3004 	ldr.w	r3, [fp, #4]
    8c48:	f103 0904 	add.w	r9, r3, #4
    for (int i = 0; i < channels; i++) {
    8c4c:	f04f 0800 	mov.w	r8, #0
    8c50:	e019      	b.n	8c86 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x372>
    8c52:	2200      	movs	r2, #0
    8c54:	e7ea      	b.n	8c2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x318>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c56:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8c58:	eb0a 0700 	add.w	r7, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c5c:	b320      	cbz	r0, 8ca8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x394>
    8c5e:	4638      	mov	r0, r7
    8c60:	f00c fbb0 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c64:	4407      	add	r7, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8c66:	6838      	ldr	r0, [r7, #0]
    8c68:	f00b f98d 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8c6c:	4580      	cmp	r8, r0
    8c6e:	d21d      	bcs.n	8cac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x398>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8c70:	3704      	adds	r7, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8c72:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    8c76:	e9d7 0100 	ldrd	r0, r1, [r7]
    8c7a:	f00c fc7d 	bl	15578 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    8c7e:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
    for (int i = 0; i < channels; i++) {
    8c82:	f108 0801 	add.w	r8, r8, #1
    8c86:	45a0      	cmp	r8, r4
    8c88:	da17      	bge.n	8cba <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a6>
    return data_ - ReadScalar<soffset_t>(data_);
    8c8a:	4650      	mov	r0, sl
    8c8c:	f00c fba0 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8c90:	ebaa 0700 	sub.w	r7, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8c94:	4638      	mov	r0, r7
    8c96:	f00c fba1 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c9a:	280a      	cmp	r0, #10
    8c9c:	d9db      	bls.n	8c56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x342>
    8c9e:	f107 000a 	add.w	r0, r7, #10
    8ca2:	f00c fb9b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8ca6:	e7d7      	b.n	8c58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x344>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ca8:	2700      	movs	r7, #0
    8caa:	e7dc      	b.n	8c66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x352>
    FLATBUFFERS_ASSERT(i < size());
    8cac:	4b13      	ldr	r3, [pc, #76]	; (8cfc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8cae:	4a16      	ldr	r2, [pc, #88]	; (8d08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8cb0:	f44f 7183 	mov.w	r1, #262	; 0x106
    8cb4:	4813      	ldr	r0, [pc, #76]	; (8d04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8cb6:	f009 fef9 	bl	12aac <__assert_func>
    return data_ - ReadScalar<soffset_t>(data_);
    8cba:	4650      	mov	r0, sl
    8cbc:	f00c fb88 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8cc0:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8cc4:	4620      	mov	r0, r4
    8cc6:	f00c fb89 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cca:	2810      	cmp	r0, #16
    8ccc:	d90f      	bls.n	8cee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3da>
    8cce:	f104 0010 	add.w	r0, r4, #16
    8cd2:	f00c fb83 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8cd6:	b160      	cbz	r0, 8cf2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3de>
    8cd8:	4450      	add	r0, sl
    8cda:	f00c fb79 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    8cde:	f8cb 0008 	str.w	r0, [fp, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    8ce2:	2301      	movs	r3, #1
    8ce4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    8ce8:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    8cec:	e639      	b.n	8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cee:	2000      	movs	r0, #0
    8cf0:	e7f1      	b.n	8cd6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8cf2:	2000      	movs	r0, #0
    8cf4:	e7f3      	b.n	8cde <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ca>
    8cf6:	bf00      	nop
    8cf8:	0001bee8 	.word	0x0001bee8
    8cfc:	0001a5b4 	.word	0x0001a5b4
    8d00:	0001bc44 	.word	0x0001bc44
    8d04:	0001a680 	.word	0x0001a680
    8d08:	0001a990 	.word	0x0001a990
    8d0c:	0001bd08 	.word	0x0001bd08
    8d10:	0001bd38 	.word	0x0001bd38

00008d14 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
    8d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d18:	b082      	sub	sp, #8
    8d1a:	4607      	mov	r7, r0
    8d1c:	460e      	mov	r6, r1
    8d1e:	4690      	mov	r8, r2
    8d20:	469a      	mov	sl, r3
    8d22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    8d24:	f8d0 9004 	ldr.w	r9, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8d28:	4608      	mov	r0, r1
    8d2a:	f00c fb51 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d2e:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d30:	4628      	mov	r0, r5
    8d32:	f00c fb53 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d36:	2808      	cmp	r0, #8
    8d38:	d941      	bls.n	8dbe <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xaa>
    8d3a:	f105 0008 	add.w	r0, r5, #8
    8d3e:	f00c fb4d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8d42:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d44:	b3e8      	cbz	r0, 8dc2 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xae>
    8d46:	4628      	mov	r0, r5
    8d48:	f00c fb3c 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d4c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8d4e:	6828      	ldr	r0, [r5, #0]
    8d50:	f00b f919 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8d54:	4284      	cmp	r4, r0
    8d56:	d236      	bcs.n	8dc6 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8d58:	3504      	adds	r5, #4
    p += i * sizeof(uoffset_t);
    8d5a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8d5e:	4620      	mov	r0, r4
    8d60:	f00c fb30 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d64:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8d66:	4620      	mov	r0, r4
    8d68:	f00c fb32 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d6c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d6e:	4628      	mov	r0, r5
    8d70:	f00c fb34 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d74:	2804      	cmp	r0, #4
    8d76:	d92d      	bls.n	8dd4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
    8d78:	1d28      	adds	r0, r5, #4
    8d7a:	f00c fb2f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8d7e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d80:	b350      	cbz	r0, 8dd8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc4>
    8d82:	4620      	mov	r0, r4
    8d84:	f00c fb1e 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d88:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8d8a:	6820      	ldr	r0, [r4, #0]
    8d8c:	f00b f8fb 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8d90:	4582      	cmp	sl, r0
    8d92:	d223      	bcs.n	8ddc <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8d94:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8d96:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8d9a:	4620      	mov	r0, r4
    8d9c:	f00c fb12 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8da0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8da2:	4630      	mov	r0, r6
    8da4:	f00c fb14 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8da8:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8daa:	4628      	mov	r0, r5
    8dac:	f00c fb16 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8db0:	280c      	cmp	r0, #12
    8db2:	d91a      	bls.n	8dea <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd6>
    8db4:	f105 000c 	add.w	r0, r5, #12
    8db8:	f00c fb10 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8dbc:	e016      	b.n	8dec <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd8>
    8dbe:	2000      	movs	r0, #0
    8dc0:	e7bf      	b.n	8d42 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x2e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dc2:	2500      	movs	r5, #0
    8dc4:	e7c3      	b.n	8d4e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8dc6:	4b14      	ldr	r3, [pc, #80]	; (8e18 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8dc8:	4a14      	ldr	r2, [pc, #80]	; (8e1c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x108>)
    8dca:	f44f 7183 	mov.w	r1, #262	; 0x106
    8dce:	4814      	ldr	r0, [pc, #80]	; (8e20 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8dd0:	f009 fe6c 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dd4:	2000      	movs	r0, #0
    8dd6:	e7d2      	b.n	8d7e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dd8:	2400      	movs	r4, #0
    8dda:	e7d6      	b.n	8d8a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x76>
    FLATBUFFERS_ASSERT(i < size());
    8ddc:	4b0e      	ldr	r3, [pc, #56]	; (8e18 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8dde:	4a11      	ldr	r2, [pc, #68]	; (8e24 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x110>)
    8de0:	f44f 7183 	mov.w	r1, #262	; 0x106
    8de4:	480e      	ldr	r0, [pc, #56]	; (8e20 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8de6:	f009 fe61 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dea:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8dec:	4406      	add	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dee:	b180      	cbz	r0, 8e12 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xfe>
    8df0:	4630      	mov	r0, r6
    8df2:	f00c fae7 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8df6:	1833      	adds	r3, r6, r0
    8df8:	f8cd 8004 	str.w	r8, [sp, #4]
    8dfc:	68fa      	ldr	r2, [r7, #12]
    8dfe:	9200      	str	r2, [sp, #0]
    8e00:	4622      	mov	r2, r4
    8e02:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    8e06:	4648      	mov	r0, r9
    8e08:	f7ff fd84 	bl	8914 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
      model->buffers(), error_reporter_, tensor);
}
    8e0c:	b002      	add	sp, #8
    8e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e12:	2300      	movs	r3, #0
    8e14:	e7f0      	b.n	8df8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xe4>
    8e16:	bf00      	nop
    8e18:	0001a5b4 	.word	0x0001a5b4
    8e1c:	0001a704 	.word	0x0001a704
    8e20:	0001a680 	.word	0x0001a680
    8e24:	0001a89c 	.word	0x0001a89c

00008e28 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    8e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e2c:	4680      	mov	r8, r0
    8e2e:	460c      	mov	r4, r1
    8e30:	4691      	mov	r9, r2
    8e32:	461f      	mov	r7, r3
    8e34:	9d08      	ldr	r5, [sp, #32]
  *result = {};
    8e36:	2300      	movs	r3, #0
    8e38:	602b      	str	r3, [r5, #0]
    8e3a:	606b      	str	r3, [r5, #4]
    8e3c:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8e3e:	4608      	mov	r0, r1
    8e40:	f00c fac6 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e44:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e46:	4630      	mov	r0, r6
    8e48:	f00c fac8 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e4c:	2806      	cmp	r0, #6
    8e4e:	d911      	bls.n	8e74 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    8e50:	1db0      	adds	r0, r6, #6
    8e52:	f00c fac3 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8e56:	b178      	cbz	r0, 8e78 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x50>
    8e58:	4420      	add	r0, r4
    8e5a:	f00c fac5 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8e5e:	463a      	mov	r2, r7
    8e60:	f105 0108 	add.w	r1, r5, #8
    8e64:	b2c0      	uxtb	r0, r0
    8e66:	f000 fe31 	bl	9acc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    8e6a:	4606      	mov	r6, r0
    8e6c:	b130      	cbz	r0, 8e7c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
}
    8e6e:	4630      	mov	r0, r6
    8e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e74:	2000      	movs	r0, #0
    8e76:	e7ee      	b.n	8e56 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8e78:	2000      	movs	r0, #0
    8e7a:	e7f0      	b.n	8e5e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x36>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8e7c:	4649      	mov	r1, r9
    8e7e:	4620      	mov	r0, r4
    8e80:	f7ff f882 	bl	7f88 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    8e84:	6028      	str	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    8e86:	4620      	mov	r0, r4
    8e88:	f00c faa2 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e8c:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e90:	4648      	mov	r0, r9
    8e92:	f00c faa3 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e96:	2804      	cmp	r0, #4
    8e98:	d911      	bls.n	8ebe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x96>
    8e9a:	f109 0004 	add.w	r0, r9, #4
    8e9e:	f00c fa9d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8ea2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ea4:	b168      	cbz	r0, 8ec2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9a>
    8ea6:	4620      	mov	r0, r4
    8ea8:	f00c fa8c 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8eac:	1822      	adds	r2, r4, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8eae:	b152      	cbz	r2, 8ec6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9e>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8eb0:	1d2b      	adds	r3, r5, #4
    8eb2:	4639      	mov	r1, r7
    8eb4:	4640      	mov	r0, r8
    8eb6:	f00c fd98 	bl	159ea <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8eba:	4606      	mov	r6, r0
    8ebc:	e7d7      	b.n	8e6e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ebe:	2000      	movs	r0, #0
    8ec0:	e7ef      	b.n	8ea2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ec2:	2200      	movs	r2, #0
    8ec4:	e7f3      	b.n	8eae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x86>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8ec6:	4b01      	ldr	r3, [pc, #4]	; (8ecc <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0xa4>)
    8ec8:	606b      	str	r3, [r5, #4]
    8eca:	e7d0      	b.n	8e6e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    8ecc:	0001bee8 	.word	0x0001bee8

00008ed0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    8ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ed4:	b087      	sub	sp, #28
    8ed6:	9104      	str	r1, [sp, #16]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8ed8:	9205      	str	r2, [sp, #20]
    8eda:	b192      	cbz	r2, 8f02 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x32>
    8edc:	4683      	mov	fp, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8ede:	2300      	movs	r3, #0
    8ee0:	9303      	str	r3, [sp, #12]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    8ee2:	9c04      	ldr	r4, [sp, #16]
    8ee4:	46a0      	mov	r8, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8ee6:	4620      	mov	r0, r4
    8ee8:	f00c fa72 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8eec:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8eee:	4620      	mov	r0, r4
    8ef0:	f00c fa74 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ef4:	2808      	cmp	r0, #8
    8ef6:	d906      	bls.n	8f06 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x36>
    8ef8:	f104 0008 	add.w	r0, r4, #8
    8efc:	f00c fa6e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8f00:	e002      	b.n	8f08 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8f02:	f00f fdcf 	bl	18aa4 <abort>
    8f06:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8f08:	9b04      	ldr	r3, [sp, #16]
    8f0a:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f0c:	2800      	cmp	r0, #0
    8f0e:	d03d      	beq.n	8f8c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>
    8f10:	4620      	mov	r0, r4
    8f12:	f00c fa57 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f16:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8f18:	6820      	ldr	r0, [r4, #0]
    8f1a:	f00b f834 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8f1e:	9d03      	ldr	r5, [sp, #12]
    8f20:	4285      	cmp	r5, r0
    8f22:	f080 80b3 	bcs.w	908c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1bc>
    8f26:	6820      	ldr	r0, [r4, #0]
    8f28:	f00b f82d 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8f2c:	4285      	cmp	r5, r0
    8f2e:	d22f      	bcs.n	8f90 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8f30:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8f32:	9b03      	ldr	r3, [sp, #12]
    8f34:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8f38:	4620      	mov	r0, r4
    8f3a:	f00c fa43 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    8f3e:	1824      	adds	r4, r4, r0
    8f40:	d02d      	beq.n	8f9e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xce>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    8f42:	4627      	mov	r7, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8f44:	4620      	mov	r0, r4
    8f46:	f00c fa43 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8f4a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8f4c:	4628      	mov	r0, r5
    8f4e:	f00c fa45 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f52:	2804      	cmp	r0, #4
    8f54:	d925      	bls.n	8fa2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
    8f56:	1d28      	adds	r0, r5, #4
    8f58:	f00c fa40 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8f5c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f5e:	b310      	cbz	r0, 8fa6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd6>
    8f60:	4620      	mov	r0, r4
    8f62:	f00c fa2f 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f66:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8f68:	6820      	ldr	r0, [r4, #0]
    8f6a:	f00b f80c 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8f6e:	4682      	mov	sl, r0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8f70:	f8db 0004 	ldr.w	r0, [fp, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    8f74:	6803      	ldr	r3, [r0, #0]
    8f76:	68db      	ldr	r3, [r3, #12]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8f78:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8f7c:	0089      	lsls	r1, r1, #2
    8f7e:	460c      	mov	r4, r1
    8f80:	2204      	movs	r2, #4
    8f82:	4798      	blx	r3
    if (tensors == nullptr) {
    8f84:	9002      	str	r0, [sp, #8]
    8f86:	b180      	cbz	r0, 8faa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    for (size_t i = 0; i < alloc_count; ++i) {
    8f88:	2500      	movs	r5, #0
    8f8a:	e038      	b.n	8ffe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f8c:	2400      	movs	r4, #0
    8f8e:	e7c3      	b.n	8f18 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
    FLATBUFFERS_ASSERT(i < size());
    8f90:	4b3f      	ldr	r3, [pc, #252]	; (9090 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8f92:	4a40      	ldr	r2, [pc, #256]	; (9094 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c4>)
    8f94:	f44f 7183 	mov.w	r1, #262	; 0x106
    8f98:	483f      	ldr	r0, [pc, #252]	; (9098 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8f9a:	f009 fd87 	bl	12aac <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    8f9e:	f00f fd81 	bl	18aa4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8fa2:	2000      	movs	r0, #0
    8fa4:	e7da      	b.n	8f5c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fa6:	2400      	movs	r4, #0
    8fa8:	e7de      	b.n	8f68 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x98>
      TF_LITE_REPORT_ERROR(
    8faa:	4622      	mov	r2, r4
    8fac:	493b      	ldr	r1, [pc, #236]	; (909c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1cc>)
    8fae:	f8db 000c 	ldr.w	r0, [fp, #12]
    8fb2:	f00c ff87 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8fb6:	2001      	movs	r0, #1
    8fb8:	e05c      	b.n	9074 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8fba:	2000      	movs	r0, #0
    8fbc:	e02f      	b.n	901e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fbe:	2400      	movs	r4, #0
    8fc0:	e034      	b.n	902c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15c>
    FLATBUFFERS_ASSERT(i < size());
    8fc2:	4b33      	ldr	r3, [pc, #204]	; (9090 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8fc4:	4a36      	ldr	r2, [pc, #216]	; (90a0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d0>)
    8fc6:	f44f 7183 	mov.w	r1, #262	; 0x106
    8fca:	4833      	ldr	r0, [pc, #204]	; (9098 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8fcc:	f009 fd6e 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8fd0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8fd2:	eb08 0600 	add.w	r6, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fd6:	2800      	cmp	r0, #0
    8fd8:	d043      	beq.n	9062 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x192>
    8fda:	4630      	mov	r0, r6
    8fdc:	f00c f9f2 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8fe0:	1832      	adds	r2, r6, r0
          error_reporter_, &tensors[i]);
    8fe2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8fe6:	9902      	ldr	r1, [sp, #8]
    8fe8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8fec:	9300      	str	r3, [sp, #0]
    8fee:	f8db 300c 	ldr.w	r3, [fp, #12]
    8ff2:	4621      	mov	r1, r4
    8ff4:	4648      	mov	r0, r9
    8ff6:	f7ff ff17 	bl	8e28 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    8ffa:	bba0      	cbnz	r0, 9066 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x196>
    for (size_t i = 0; i < alloc_count; ++i) {
    8ffc:	3501      	adds	r5, #1
    8ffe:	4555      	cmp	r5, sl
    9000:	d23b      	bcs.n	907a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1aa>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    9002:	f8db 9004 	ldr.w	r9, [fp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    9006:	4638      	mov	r0, r7
    9008:	f00c f9e2 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    900c:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    900e:	4620      	mov	r0, r4
    9010:	f00c f9e4 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9014:	2804      	cmp	r0, #4
    9016:	d9d0      	bls.n	8fba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xea>
    9018:	1d20      	adds	r0, r4, #4
    901a:	f00c f9df 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    901e:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9020:	2800      	cmp	r0, #0
    9022:	d0cc      	beq.n	8fbe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xee>
    9024:	4620      	mov	r0, r4
    9026:	f00c f9cd 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    902a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    902c:	6820      	ldr	r0, [r4, #0]
    902e:	f00a ffaa 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    9032:	4285      	cmp	r5, r0
    9034:	d2c5      	bcs.n	8fc2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9036:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    9038:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    903c:	4620      	mov	r0, r4
    903e:	f00c f9c1 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9042:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    9044:	4640      	mov	r0, r8
    9046:	f00c f9c3 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    904a:	eba8 0600 	sub.w	r6, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    904e:	4630      	mov	r0, r6
    9050:	f00c f9c4 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9054:	280c      	cmp	r0, #12
    9056:	d9bb      	bls.n	8fd0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x100>
    9058:	f106 000c 	add.w	r0, r6, #12
    905c:	f00c f9be 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9060:	e7b7      	b.n	8fd2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9062:	2200      	movs	r2, #0
    9064:	e7bd      	b.n	8fe2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    9066:	462a      	mov	r2, r5
    9068:	490e      	ldr	r1, [pc, #56]	; (90a4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d4>)
    906a:	f8db 000c 	ldr.w	r0, [fp, #12]
    906e:	f00c ff29 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    9072:	2001      	movs	r0, #1
}
    9074:	b007      	add	sp, #28
    9076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    subgraph_allocations[subgraph_idx].tensors = tensors;
    907a:	9b05      	ldr	r3, [sp, #20]
    907c:	9a03      	ldr	r2, [sp, #12]
    907e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9082:	9902      	ldr	r1, [sp, #8]
    9084:	6059      	str	r1, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    9086:	1c53      	adds	r3, r2, #1
    9088:	9303      	str	r3, [sp, #12]
    908a:	e72a      	b.n	8ee2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
    908c:	2000      	movs	r0, #0
    908e:	e7f1      	b.n	9074 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    9090:	0001a5b4 	.word	0x0001a5b4
    9094:	0001a704 	.word	0x0001a704
    9098:	0001a680 	.word	0x0001a680
    909c:	0001bd68 	.word	0x0001bd68
    90a0:	0001a89c 	.word	0x0001a89c
    90a4:	0001bdb0 	.word	0x0001bdb0

000090a8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    90a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90ac:	b093      	sub	sp, #76	; 0x4c
    90ae:	4606      	mov	r6, r0
    90b0:	460f      	mov	r7, r1
    90b2:	4690      	mov	r8, r2
    90b4:	4699      	mov	r9, r3
    90b6:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    90ba:	4608      	mov	r0, r1
    90bc:	f00c f988 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    90c0:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    90c2:	4620      	mov	r0, r4
    90c4:	f00c f98a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90c8:	2808      	cmp	r0, #8
    90ca:	d948      	bls.n	915e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb6>
    90cc:	f104 0008 	add.w	r0, r4, #8
    90d0:	f00c f984 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    90d4:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    90d6:	2800      	cmp	r0, #0
    90d8:	d043      	beq.n	9162 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xba>
    90da:	4620      	mov	r0, r4
    90dc:	f00c f972 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    90e0:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    90e2:	6820      	ldr	r0, [r4, #0]
    90e4:	f00a ff4f 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    90e8:	4582      	cmp	sl, r0
    90ea:	d23c      	bcs.n	9166 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xbe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    90ec:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    90ee:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    90f2:	4620      	mov	r0, r4
    90f4:	f00c f966 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    90f8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    90fa:	4620      	mov	r0, r4
    90fc:	f00c f968 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9100:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9102:	4628      	mov	r0, r5
    9104:	f00c f96a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9108:	2804      	cmp	r0, #4
    910a:	d933      	bls.n	9174 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xcc>
    910c:	1d28      	adds	r0, r5, #4
    910e:	f00c f965 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9112:	1825      	adds	r5, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9114:	b380      	cbz	r0, 9178 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd0>
    9116:	4628      	mov	r0, r5
    9118:	f00c f954 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    911c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    911e:	6828      	ldr	r0, [r5, #0]
    9120:	f00a ff31 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    9124:	6973      	ldr	r3, [r6, #20]
    9126:	18c5      	adds	r5, r0, r3
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    9128:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
    912c:	ea4f 0aca 	mov.w	sl, sl, lsl #3

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    9130:	6870      	ldr	r0, [r6, #4]
    9132:	6803      	ldr	r3, [r0, #0]
    9134:	691b      	ldr	r3, [r3, #16]
    9136:	2204      	movs	r2, #4
    9138:	4651      	mov	r1, sl
    913a:	4798      	blx	r3
  if (allocation_info == nullptr) {
    913c:	4683      	mov	fp, r0
    913e:	b1e8      	cbz	r0, 917c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd4>
    return data_ - ReadScalar<soffset_t>(data_);
    9140:	4620      	mov	r0, r4
    9142:	f00c f945 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9146:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    914a:	4650      	mov	r0, sl
    914c:	f00c f946 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9150:	2804      	cmp	r0, #4
    9152:	d91a      	bls.n	918a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe2>
    9154:	f10a 0004 	add.w	r0, sl, #4
    9158:	f00c f940 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    915c:	e016      	b.n	918c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe4>
    915e:	2000      	movs	r0, #0
    9160:	e7b8      	b.n	90d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9162:	2400      	movs	r4, #0
    9164:	e7bd      	b.n	90e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    9166:	4b55      	ldr	r3, [pc, #340]	; (92bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x214>)
    9168:	4a55      	ldr	r2, [pc, #340]	; (92c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x218>)
    916a:	f44f 7183 	mov.w	r1, #262	; 0x106
    916e:	4855      	ldr	r0, [pc, #340]	; (92c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21c>)
    9170:	f009 fc9c 	bl	12aac <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9174:	2000      	movs	r0, #0
    9176:	e7cc      	b.n	9112 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9178:	2500      	movs	r5, #0
    917a:	e7d0      	b.n	911e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x76>
    TF_LITE_REPORT_ERROR(
    917c:	4652      	mov	r2, sl
    917e:	4952      	ldr	r1, [pc, #328]	; (92c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x220>)
    9180:	68f0      	ldr	r0, [r6, #12]
    9182:	f00c fe9f 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
    9186:	2701      	movs	r7, #1
    9188:	e01b      	b.n	91c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    918a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    918c:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9190:	b1d8      	cbz	r0, 91ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x122>
    9192:	4650      	mov	r0, sl
    9194:	f00c f916 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9198:	4482      	add	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    919a:	f8da 0000 	ldr.w	r0, [sl]
    919e:	f00a fef2 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
                                scratch_buffer_request_count_, error_reporter_);
    91a2:	6972      	ldr	r2, [r6, #20]
    91a4:	68f3      	ldr	r3, [r6, #12]
        reporter_(reporter) {}
    91a6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    91aa:	900f      	str	r0, [sp, #60]	; 0x3c
    91ac:	9210      	str	r2, [sp, #64]	; 0x40
    91ae:	9311      	str	r3, [sp, #68]	; 0x44

  const int32_t* offline_planner_offsets = nullptr;
    91b0:	2300      	movs	r3, #0
    91b2:	930d      	str	r3, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(
    91b4:	aa0d      	add	r2, sp, #52	; 0x34
    91b6:	4639      	mov	r1, r7
    91b8:	a80e      	add	r0, sp, #56	; 0x38
    91ba:	f7ff f813 	bl	81e4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>
    91be:	4607      	mov	r7, r0
    91c0:	b130      	cbz	r0, 91d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    91c2:	4638      	mov	r0, r7
    91c4:	b013      	add	sp, #76	; 0x4c
    91c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    91ca:	f04f 0a00 	mov.w	sl, #0
    91ce:	e7e4      	b.n	919a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
  TF_LITE_ENSURE_STATUS(
    91d0:	4643      	mov	r3, r8
    91d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    91d4:	4621      	mov	r1, r4
    91d6:	a80e      	add	r0, sp, #56	; 0x38
    91d8:	f7ff f9de 	bl	8598 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>
    91dc:	4607      	mov	r7, r0
    91de:	2800      	cmp	r0, #0
    91e0:	d1ef      	bne.n	91c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      GetScratchBufferRequests();
    91e2:	4630      	mov	r0, r6
    91e4:	f00c fbd8 	bl	15998 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
    91e8:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
    91ea:	464a      	mov	r2, r9
    91ec:	a80e      	add	r0, sp, #56	; 0x38
    91ee:	f00c fae2 	bl	157b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
    91f2:	4607      	mov	r7, r0
    91f4:	2800      	cmp	r0, #0
    91f6:	d1e4      	bne.n	91c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    91f8:	2110      	movs	r1, #16
    91fa:	6870      	ldr	r0, [r6, #4]
    91fc:	f00c f842 	bl	15284 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    9200:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    9202:	6870      	ldr	r0, [r6, #4]
    9204:	6803      	ldr	r3, [r0, #0]
    9206:	691b      	ldr	r3, [r3, #16]
    9208:	2210      	movs	r2, #16
    920a:	4621      	mov	r1, r4
    920c:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    920e:	4601      	mov	r1, r0
    9210:	2800      	cmp	r0, #0
    9212:	d036      	beq.n	9282 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1da>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    9214:	4622      	mov	r2, r4
    9216:	a802      	add	r0, sp, #8
    9218:	f000 f882 	bl	9320 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    921c:	462b      	mov	r3, r5
    921e:	465a      	mov	r2, fp
    9220:	a902      	add	r1, sp, #8
    9222:	68f0      	ldr	r0, [r6, #12]
    9224:	f00c fb4e 	bl	158c4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
    9228:	4607      	mov	r7, r0
    922a:	2800      	cmp	r0, #0
    922c:	d141      	bne.n	92b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  memory_allocator_->ResetTempAllocations();
    922e:	6870      	ldr	r0, [r6, #4]
    9230:	6803      	ldr	r3, [r0, #0]
    9232:	695b      	ldr	r3, [r3, #20]
    9234:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    9236:	2110      	movs	r1, #16
    9238:	6870      	ldr	r0, [r6, #4]
    923a:	f00c f823 	bl	15284 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    923e:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    9240:	a802      	add	r0, sp, #8
    9242:	f00c fd41 	bl	15cc8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    9246:	42a0      	cmp	r0, r4
    9248:	d828      	bhi.n	929c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    924a:	68f4      	ldr	r4, [r6, #12]
    924c:	6870      	ldr	r0, [r6, #4]
    924e:	f00c f817 	bl	15280 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    9252:	4602      	mov	r2, r0
    9254:	9500      	str	r5, [sp, #0]
    9256:	465b      	mov	r3, fp
    9258:	a902      	add	r1, sp, #8
    925a:	4620      	mov	r0, r4
    925c:	f00c facf 	bl	157fe <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
    9260:	4607      	mov	r7, r0
    9262:	bb30      	cbnz	r0, 92b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  head_usage = planner.GetMaximumMemorySize();
    9264:	a802      	add	r0, sp, #8
    9266:	f00c fd2f 	bl	15cc8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    926a:	69b3      	ldr	r3, [r6, #24]
    926c:	4283      	cmp	r3, r0
    926e:	d200      	bcs.n	9272 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ca>
    max_head_buffer_usage_ = head_usage;
    9270:	61b0      	str	r0, [r6, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    9272:	6870      	ldr	r0, [r6, #4]
    9274:	6803      	ldr	r3, [r0, #0]
    9276:	689b      	ldr	r3, [r3, #8]
    9278:	2210      	movs	r2, #16
    927a:	69b1      	ldr	r1, [r6, #24]
    927c:	4798      	blx	r3
    927e:	4607      	mov	r7, r0
    9280:	e017      	b.n	92b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    9282:	68f0      	ldr	r0, [r6, #12]
    9284:	4b11      	ldr	r3, [pc, #68]	; (92cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x224>)
    9286:	9301      	str	r3, [sp, #4]
    9288:	f240 33d2 	movw	r3, #978	; 0x3d2
    928c:	9300      	str	r3, [sp, #0]
    928e:	4b10      	ldr	r3, [pc, #64]	; (92d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>)
    9290:	4a10      	ldr	r2, [pc, #64]	; (92d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x22c>)
    9292:	4601      	mov	r1, r0
    9294:	f00c fe25 	bl	15ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9298:	2701      	movs	r7, #1
    929a:	e792      	b.n	91c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    TF_LITE_REPORT_ERROR(
    929c:	68f5      	ldr	r5, [r6, #12]
    929e:	a802      	add	r0, sp, #8
    92a0:	f00c fd12 	bl	15cc8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    92a4:	4602      	mov	r2, r0
    92a6:	4623      	mov	r3, r4
    92a8:	490b      	ldr	r1, [pc, #44]	; (92d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>)
    92aa:	4628      	mov	r0, r5
    92ac:	f00c fe0a 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    92b0:	2701      	movs	r7, #1
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    92b2:	a802      	add	r0, sp, #8
    92b4:	f00c fbb5 	bl	15a22 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    92b8:	e783      	b.n	91c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    92ba:	bf00      	nop
    92bc:	0001a5b4 	.word	0x0001a5b4
    92c0:	0001a704 	.word	0x0001a704
    92c4:	0001a680 	.word	0x0001a680
    92c8:	0001bdd0 	.word	0x0001bdd0
    92cc:	0001be7c 	.word	0x0001be7c
    92d0:	0001be14 	.word	0x0001be14
    92d4:	0001be64 	.word	0x0001be64
    92d8:	0001be98 	.word	0x0001be98

000092dc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    92dc:	b538      	push	{r3, r4, r5, lr}
    92de:	4604      	mov	r4, r0
    92e0:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    92e2:	68a5      	ldr	r5, [r4, #8]
    92e4:	6861      	ldr	r1, [r4, #4]
    92e6:	428d      	cmp	r5, r1
    92e8:	da12      	bge.n	9310 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
                         max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
    92ea:	68e1      	ldr	r1, [r4, #12]
    92ec:	0128      	lsls	r0, r5, #4
    92ee:	eb01 1505 	add.w	r5, r1, r5, lsl #4
  current->size = size;
    92f2:	500a      	str	r2, [r1, r0]
  current->first_time_used = first_time_used;
    92f4:	60ab      	str	r3, [r5, #8]
  current->last_time_used = last_time_used;
    92f6:	9b04      	ldr	r3, [sp, #16]
    92f8:	60eb      	str	r3, [r5, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    92fa:	f04f 33ff 	mov.w	r3, #4294967295
    92fe:	606b      	str	r3, [r5, #4]
  ++buffer_count_;
    9300:	68a3      	ldr	r3, [r4, #8]
    9302:	3301      	adds	r3, #1
    9304:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
    9306:	2301      	movs	r3, #1
    9308:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    930c:	2000      	movs	r0, #0
}
    930e:	bd38      	pop	{r3, r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    9310:	460a      	mov	r2, r1
    9312:	4902      	ldr	r1, [pc, #8]	; (931c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    9314:	f00c fdd6 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9318:	2001      	movs	r0, #1
    931a:	e7f8      	b.n	930e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x32>
    931c:	0001bf58 	.word	0x0001bf58

00009320 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    9320:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    9322:	4c0f      	ldr	r4, [pc, #60]	; (9360 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
    9324:	6004      	str	r4, [r0, #0]
    9326:	2400      	movs	r4, #0
    9328:	6084      	str	r4, [r0, #8]
    932a:	2401      	movs	r4, #1
    932c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    9330:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    9334:	fba4 4202 	umull	r4, r2, r4, r2
    9338:	0952      	lsrs	r2, r2, #5
    933a:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    933c:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    933e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    9342:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    9344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    9348:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    934a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    934e:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    9350:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9354:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    9358:	6241      	str	r1, [r0, #36]	; 0x24
}
    935a:	bc10      	pop	{r4}
    935c:	4770      	bx	lr
    935e:	bf00      	nop
    9360:	0001bfac 	.word	0x0001bfac

00009364 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    9364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9366:	4605      	mov	r5, r0
    9368:	460f      	mov	r7, r1
    936a:	4614      	mov	r4, r2
    936c:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    936e:	f00c fbd0 	bl	15b12 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    9372:	2c00      	cmp	r4, #0
    9374:	db08      	blt.n	9388 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    9376:	68ab      	ldr	r3, [r5, #8]
    9378:	42a3      	cmp	r3, r4
    937a:	dd05      	ble.n	9388 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    937c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    937e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    9382:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    9384:	2000      	movs	r0, #0
}
    9386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    9388:	68ab      	ldr	r3, [r5, #8]
    938a:	4622      	mov	r2, r4
    938c:	4902      	ldr	r1, [pc, #8]	; (9398 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    938e:	4638      	mov	r0, r7
    9390:	f00c fd98 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9394:	2001      	movs	r0, #1
    9396:	e7f6      	b.n	9386 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    9398:	0001bf78 	.word	0x0001bf78

0000939c <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    939c:	2810      	cmp	r0, #16
    939e:	d82a      	bhi.n	93f6 <TfLiteTypeGetName+0x5a>
    93a0:	e8df f000 	tbb	[pc, r0]
    93a4:	110d2b09 	.word	0x110d2b09
    93a8:	0b191f15 	.word	0x0b191f15
    93ac:	2321131b 	.word	0x2321131b
    93b0:	2725171d 	.word	0x2725171d
    93b4:	0f          	.byte	0x0f
    93b5:	00          	.byte	0x00
    case kTfLiteFloat64:
      return "FLOAT64";
    case kTfLiteResource:
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
    93b6:	4812      	ldr	r0, [pc, #72]	; (9400 <TfLiteTypeGetName+0x64>)
    93b8:	4770      	bx	lr
      return "INT16";
    93ba:	4812      	ldr	r0, [pc, #72]	; (9404 <TfLiteTypeGetName+0x68>)
    93bc:	4770      	bx	lr
      return "INT32";
    93be:	4812      	ldr	r0, [pc, #72]	; (9408 <TfLiteTypeGetName+0x6c>)
    93c0:	4770      	bx	lr
      return "UINT32";
    93c2:	4812      	ldr	r0, [pc, #72]	; (940c <TfLiteTypeGetName+0x70>)
    93c4:	4770      	bx	lr
      return "UINT8";
    93c6:	4812      	ldr	r0, [pc, #72]	; (9410 <TfLiteTypeGetName+0x74>)
    93c8:	4770      	bx	lr
      return "INT8";
    93ca:	4812      	ldr	r0, [pc, #72]	; (9414 <TfLiteTypeGetName+0x78>)
    93cc:	4770      	bx	lr
      return "INT64";
    93ce:	4812      	ldr	r0, [pc, #72]	; (9418 <TfLiteTypeGetName+0x7c>)
    93d0:	4770      	bx	lr
      return "UINT64";
    93d2:	4812      	ldr	r0, [pc, #72]	; (941c <TfLiteTypeGetName+0x80>)
    93d4:	4770      	bx	lr
      return "BOOL";
    93d6:	4812      	ldr	r0, [pc, #72]	; (9420 <TfLiteTypeGetName+0x84>)
    93d8:	4770      	bx	lr
      return "COMPLEX64";
    93da:	4812      	ldr	r0, [pc, #72]	; (9424 <TfLiteTypeGetName+0x88>)
    93dc:	4770      	bx	lr
      return "COMPLEX128";
    93de:	4812      	ldr	r0, [pc, #72]	; (9428 <TfLiteTypeGetName+0x8c>)
    93e0:	4770      	bx	lr
      return "STRING";
    93e2:	4812      	ldr	r0, [pc, #72]	; (942c <TfLiteTypeGetName+0x90>)
    93e4:	4770      	bx	lr
      return "FLOAT16";
    93e6:	4812      	ldr	r0, [pc, #72]	; (9430 <TfLiteTypeGetName+0x94>)
    93e8:	4770      	bx	lr
      return "FLOAT64";
    93ea:	4812      	ldr	r0, [pc, #72]	; (9434 <TfLiteTypeGetName+0x98>)
    93ec:	4770      	bx	lr
      return "RESOURCE";
    93ee:	4812      	ldr	r0, [pc, #72]	; (9438 <TfLiteTypeGetName+0x9c>)
    93f0:	4770      	bx	lr
      return "VARIANT";
    93f2:	4812      	ldr	r0, [pc, #72]	; (943c <TfLiteTypeGetName+0xa0>)
    93f4:	4770      	bx	lr
  }
  return "Unknown type";
    93f6:	4812      	ldr	r0, [pc, #72]	; (9440 <TfLiteTypeGetName+0xa4>)
    93f8:	4770      	bx	lr
      return "FLOAT32";
    93fa:	4812      	ldr	r0, [pc, #72]	; (9444 <TfLiteTypeGetName+0xa8>)
}
    93fc:	4770      	bx	lr
    93fe:	bf00      	nop
    9400:	0001c060 	.word	0x0001c060
    9404:	0001bfdc 	.word	0x0001bfdc
    9408:	0001bfe4 	.word	0x0001bfe4
    940c:	0001bfec 	.word	0x0001bfec
    9410:	0001bff4 	.word	0x0001bff4
    9414:	0001bffc 	.word	0x0001bffc
    9418:	0001c004 	.word	0x0001c004
    941c:	0001c00c 	.word	0x0001c00c
    9420:	0001c014 	.word	0x0001c014
    9424:	0001c01c 	.word	0x0001c01c
    9428:	0001c028 	.word	0x0001c028
    942c:	0001c034 	.word	0x0001c034
    9430:	0001c03c 	.word	0x0001c03c
    9434:	0001c044 	.word	0x0001c044
    9438:	0001c04c 	.word	0x0001c04c
    943c:	0001c058 	.word	0x0001c058
    9440:	0001bfc4 	.word	0x0001bfc4
    9444:	0001bfd4 	.word	0x0001bfd4

00009448 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    9448:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    944c:	4606      	mov	r6, r0
    944e:	460f      	mov	r7, r1
    9450:	4615      	mov	r5, r2
    9452:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    9454:	2200      	movs	r2, #0
    9456:	2300      	movs	r3, #0
    9458:	f7f7 faa2 	bl	9a0 <__aeabi_dcmpeq>
    945c:	b120      	cbz	r0, 9468 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    945e:	2300      	movs	r3, #0
    9460:	602b      	str	r3, [r5, #0]
    *shift = 0;
    9462:	6023      	str	r3, [r4, #0]
}
    9464:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  const double q = std::frexp(double_multiplier, shift);
    9468:	4622      	mov	r2, r4
    946a:	4630      	mov	r0, r6
    946c:	4639      	mov	r1, r7
    946e:	f009 f905 	bl	1267c <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    9472:	2200      	movs	r2, #0
    9474:	4b1a      	ldr	r3, [pc, #104]	; (94e0 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x98>)
    9476:	f7f7 f82b 	bl	4d0 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    947a:	f009 f937 	bl	126ec <round>
    947e:	f7f7 fe4b 	bl	1118 <__aeabi_d2lz>
    9482:	4606      	mov	r6, r0
    9484:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    9486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    948a:	2300      	movs	r3, #0
    948c:	4282      	cmp	r2, r0
    948e:	418b      	sbcs	r3, r1
    9490:	db12      	blt.n	94b8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>
  if (q_fixed == (1ll << 31)) {
    9492:	2900      	cmp	r1, #0
    9494:	bf08      	it	eq
    9496:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    949a:	d00f      	beq.n	94bc <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x74>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    949c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    94a0:	f177 0300 	sbcs.w	r3, r7, #0
    94a4:	da19      	bge.n	94da <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x92>
  if (*shift < -31) {
    94a6:	6823      	ldr	r3, [r4, #0]
    94a8:	f113 0f1f 	cmn.w	r3, #31
    94ac:	da02      	bge.n	94b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x6c>
    *shift = 0;
    94ae:	2300      	movs	r3, #0
    94b0:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    94b2:	2600      	movs	r6, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    94b4:	602e      	str	r6, [r5, #0]
    94b6:	e7d5      	b.n	9464 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    94b8:	f00f faf4 	bl	18aa4 <abort>
    q_fixed /= 2;
    94bc:	0fc9      	lsrs	r1, r1, #31
    94be:	eb16 0b01 	adds.w	fp, r6, r1
    94c2:	f147 0c00 	adc.w	ip, r7, #0
    94c6:	ea4f 025b 	mov.w	r2, fp, lsr #1
    94ca:	ea42 76cc 	orr.w	r6, r2, ip, lsl #31
    94ce:	ea4f 076c 	mov.w	r7, ip, asr #1
    ++*shift;
    94d2:	6823      	ldr	r3, [r4, #0]
    94d4:	3301      	adds	r3, #1
    94d6:	6023      	str	r3, [r4, #0]
    94d8:	e7e0      	b.n	949c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x54>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    94da:	f00f fae3 	bl	18aa4 <abort>
    94de:	bf00      	nop
    94e0:	41e00000 	.word	0x41e00000

000094e4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    94e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94e6:	4606      	mov	r6, r0
    94e8:	460f      	mov	r7, r1
    94ea:	4615      	mov	r5, r2
    94ec:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    94ee:	2200      	movs	r2, #0
    94f0:	4b08      	ldr	r3, [pc, #32]	; (9514 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x30>)
    94f2:	f7f7 fa7d 	bl	9f0 <__aeabi_dcmpgt>
    94f6:	b148      	cbz	r0, 950c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x28>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    94f8:	4623      	mov	r3, r4
    94fa:	462a      	mov	r2, r5
    94fc:	4630      	mov	r0, r6
    94fe:	4639      	mov	r1, r7
    9500:	f7ff ffa2 	bl	9448 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    9504:	6823      	ldr	r3, [r4, #0]
    9506:	2b00      	cmp	r3, #0
    9508:	db02      	blt.n	9510 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>
}
    950a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    950c:	f00f faca 	bl	18aa4 <abort>
  TFLITE_CHECK_GE(*left_shift, 0);
    9510:	f00f fac8 	bl	18aa4 <abort>
    9514:	3ff00000 	.word	0x3ff00000

00009518 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>:
                                         int* left_shift) {
    9518:	b5f0      	push	{r4, r5, r6, r7, lr}
    951a:	b083      	sub	sp, #12
    951c:	4604      	mov	r4, r0
    951e:	460d      	mov	r5, r1
    9520:	4616      	mov	r6, r2
    9522:	461f      	mov	r7, r3
  TFLITE_CHECK_LT(double_multiplier, 1.);
    9524:	2200      	movs	r2, #0
    9526:	4b0e      	ldr	r3, [pc, #56]	; (9560 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x48>)
    9528:	f7f7 fa44 	bl	9b4 <__aeabi_dcmplt>
    952c:	b190      	cbz	r0, 9554 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x3c>
  TFLITE_CHECK_GT(double_multiplier, 0.);
    952e:	2200      	movs	r2, #0
    9530:	2300      	movs	r3, #0
    9532:	4620      	mov	r0, r4
    9534:	4629      	mov	r1, r5
    9536:	f7f7 fa5b 	bl	9f0 <__aeabi_dcmpgt>
    953a:	b168      	cbz	r0, 9558 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x40>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
    953c:	ab01      	add	r3, sp, #4
    953e:	4632      	mov	r2, r6
    9540:	4620      	mov	r0, r4
    9542:	4629      	mov	r1, r5
    9544:	f7ff ff80 	bl	9448 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_LE(shift, 0);
    9548:	9b01      	ldr	r3, [sp, #4]
    954a:	2b00      	cmp	r3, #0
    954c:	dc06      	bgt.n	955c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x44>
  *left_shift = shift;
    954e:	603b      	str	r3, [r7, #0]
}
    9550:	b003      	add	sp, #12
    9552:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TFLITE_CHECK_LT(double_multiplier, 1.);
    9554:	f00f faa6 	bl	18aa4 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
    9558:	f00f faa4 	bl	18aa4 <abort>
  TFLITE_CHECK_LE(shift, 0);
    955c:	f00f faa2 	bl	18aa4 <abort>
    9560:	3ff00000 	.word	0x3ff00000

00009564 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>:
  return kTfLiteOk;
}

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
    9564:	b5f0      	push	{r4, r5, r6, r7, lr}
    9566:	b087      	sub	sp, #28
    9568:	4605      	mov	r5, r0
    956a:	460c      	mov	r4, r1
    956c:	9203      	str	r2, [sp, #12]
    956e:	9302      	str	r3, [sp, #8]
    9570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const auto scale = output->params.scale;
    9572:	68de      	ldr	r6, [r3, #12]
  const auto zero_point = output->params.zero_point;
    9574:	691f      	ldr	r7, [r3, #16]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
    9576:	2901      	cmp	r1, #1
    9578:	d00e      	beq.n	9598 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x34>
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
    957a:	2903      	cmp	r1, #3
    957c:	d042      	beq.n	9604 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xa0>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else if (activation == kTfLiteActReluN1To1) {
    957e:	2902      	cmp	r1, #2
    9580:	f000 80a7 	beq.w	96d2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16e>
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else {
    *act_min = qmin;
    9584:	9b03      	ldr	r3, [sp, #12]
    9586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9588:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    958a:	9b02      	ldr	r3, [sp, #8]
    958c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    958e:	6013      	str	r3, [r2, #0]
  }
  return kTfLiteOk;
    9590:	2400      	movs	r4, #0
}
    9592:	4620      	mov	r0, r4
    9594:	b007      	add	sp, #28
    9596:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const float tmp = TfLiteRound(f / scale);
    9598:	4631      	mov	r1, r6
    959a:	2000      	movs	r0, #0
    959c:	f7f7 fc6c 	bl	e78 <__aeabi_fdiv>
    95a0:	f7f6 ff3e 	bl	420 <__aeabi_f2d>
    95a4:	f009 f8a2 	bl	126ec <round>
    95a8:	f7f7 fa54 	bl	a54 <__aeabi_d2f>
    95ac:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    95ae:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    95b2:	f7f7 fd5f 	bl	1074 <__aeabi_fcmpge>
    95b6:	b160      	cbz	r0, 95d2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
    95b8:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    95bc:	4630      	mov	r0, r6
    95be:	f7f7 fd4f 	bl	1060 <__aeabi_fcmple>
    95c2:	b130      	cbz	r0, 95d2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
  q = zero_point + static_cast<int32_t>(tmp);
    95c4:	4630      	mov	r0, r6
    95c6:	f7f7 fd69 	bl	109c <__aeabi_f2iz>
    95ca:	4407      	add	r7, r0
    95cc:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    95ce:	2400      	movs	r4, #0
    95d0:	e008      	b.n	95e4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x80>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    95d2:	696e      	ldr	r6, [r5, #20]
    95d4:	4b73      	ldr	r3, [pc, #460]	; (97a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    95d6:	9300      	str	r3, [sp, #0]
    95d8:	f240 1359 	movw	r3, #345	; 0x159
    95dc:	4a72      	ldr	r2, [pc, #456]	; (97a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    95de:	4973      	ldr	r1, [pc, #460]	; (97ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    95e0:	4628      	mov	r0, r5
    95e2:	47b0      	blx	r6
    TF_LITE_ENSURE_OK(context,
    95e4:	2c00      	cmp	r4, #0
    95e6:	d1d4      	bne.n	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    95e8:	9a05      	ldr	r2, [sp, #20]
    95ea:	9b03      	ldr	r3, [sp, #12]
    95ec:	429a      	cmp	r2, r3
    95ee:	dc07      	bgt.n	9600 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x9c>
	return __b;
      return __a;
    95f0:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    95f2:	681b      	ldr	r3, [r3, #0]
    95f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    95f6:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    95f8:	9b02      	ldr	r3, [sp, #8]
    95fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    95fc:	6013      	str	r3, [r2, #0]
    95fe:	e7c8      	b.n	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    9600:	ab05      	add	r3, sp, #20
    9602:	e7f6      	b.n	95f2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x8e>
  const float tmp = TfLiteRound(f / scale);
    9604:	4631      	mov	r1, r6
    9606:	2000      	movs	r0, #0
    9608:	f7f7 fc36 	bl	e78 <__aeabi_fdiv>
    960c:	f7f6 ff08 	bl	420 <__aeabi_f2d>
    9610:	f009 f86c 	bl	126ec <round>
    9614:	f7f7 fa1e 	bl	a54 <__aeabi_d2f>
    9618:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    961a:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    961e:	f7f7 fd29 	bl	1074 <__aeabi_fcmpge>
    9622:	b160      	cbz	r0, 963e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
    9624:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    9628:	4620      	mov	r0, r4
    962a:	f7f7 fd19 	bl	1060 <__aeabi_fcmple>
    962e:	b130      	cbz	r0, 963e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
  q = zero_point + static_cast<int32_t>(tmp);
    9630:	4620      	mov	r0, r4
    9632:	f7f7 fd33 	bl	109c <__aeabi_f2iz>
    9636:	4438      	add	r0, r7
    9638:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    963a:	2400      	movs	r4, #0
    963c:	e009      	b.n	9652 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xee>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    963e:	696c      	ldr	r4, [r5, #20]
    9640:	4b58      	ldr	r3, [pc, #352]	; (97a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9642:	9300      	str	r3, [sp, #0]
    9644:	f240 1359 	movw	r3, #345	; 0x159
    9648:	4a57      	ldr	r2, [pc, #348]	; (97a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    964a:	4958      	ldr	r1, [pc, #352]	; (97ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    964c:	4628      	mov	r0, r5
    964e:	47a0      	blx	r4
    9650:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9652:	2c00      	cmp	r4, #0
    9654:	d19d      	bne.n	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    9656:	9a03      	ldr	r2, [sp, #12]
    9658:	9b05      	ldr	r3, [sp, #20]
    965a:	429a      	cmp	r2, r3
    965c:	db1f      	blt.n	969e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13a>
      return __a;
    965e:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9660:	681b      	ldr	r3, [r3, #0]
    9662:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9664:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    9666:	4631      	mov	r1, r6
    9668:	4851      	ldr	r0, [pc, #324]	; (97b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x24c>)
    966a:	f7f7 fc05 	bl	e78 <__aeabi_fdiv>
    966e:	f7f6 fed7 	bl	420 <__aeabi_f2d>
    9672:	f009 f83b 	bl	126ec <round>
    9676:	f7f7 f9ed 	bl	a54 <__aeabi_d2f>
    967a:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    967c:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9680:	f7f7 fcf8 	bl	1074 <__aeabi_fcmpge>
    9684:	b168      	cbz	r0, 96a2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
    9686:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    968a:	4630      	mov	r0, r6
    968c:	f7f7 fce8 	bl	1060 <__aeabi_fcmple>
    9690:	b138      	cbz	r0, 96a2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
  q = zero_point + static_cast<int32_t>(tmp);
    9692:	4630      	mov	r0, r6
    9694:	f7f7 fd02 	bl	109c <__aeabi_f2iz>
    9698:	4407      	add	r7, r0
    969a:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    969c:	e00b      	b.n	96b6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x152>
	return __b;
    969e:	ab05      	add	r3, sp, #20
    96a0:	e7de      	b.n	9660 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xfc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    96a2:	696c      	ldr	r4, [r5, #20]
    96a4:	4b3f      	ldr	r3, [pc, #252]	; (97a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    96a6:	9300      	str	r3, [sp, #0]
    96a8:	f240 1359 	movw	r3, #345	; 0x159
    96ac:	4a3e      	ldr	r2, [pc, #248]	; (97a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    96ae:	493f      	ldr	r1, [pc, #252]	; (97ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    96b0:	4628      	mov	r0, r5
    96b2:	47a0      	blx	r4
    96b4:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    96b6:	2c00      	cmp	r4, #0
    96b8:	f47f af6b 	bne.w	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    96bc:	9a05      	ldr	r2, [sp, #20]
    96be:	9b02      	ldr	r3, [sp, #8]
    96c0:	429a      	cmp	r2, r3
    96c2:	db04      	blt.n	96ce <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16a>
      return __a;
    96c4:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    96c6:	681b      	ldr	r3, [r3, #0]
    96c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    96ca:	6013      	str	r3, [r2, #0]
    96cc:	e761      	b.n	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    96ce:	ab05      	add	r3, sp, #20
    96d0:	e7f9      	b.n	96c6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x162>
  const float tmp = TfLiteRound(f / scale);
    96d2:	4631      	mov	r1, r6
    96d4:	4837      	ldr	r0, [pc, #220]	; (97b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x250>)
    96d6:	f7f7 fbcf 	bl	e78 <__aeabi_fdiv>
    96da:	f7f6 fea1 	bl	420 <__aeabi_f2d>
    96de:	f009 f805 	bl	126ec <round>
    96e2:	f7f7 f9b7 	bl	a54 <__aeabi_d2f>
    96e6:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    96e8:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    96ec:	f7f7 fcc2 	bl	1074 <__aeabi_fcmpge>
    96f0:	b160      	cbz	r0, 970c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
    96f2:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    96f6:	4620      	mov	r0, r4
    96f8:	f7f7 fcb2 	bl	1060 <__aeabi_fcmple>
    96fc:	b130      	cbz	r0, 970c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
  q = zero_point + static_cast<int32_t>(tmp);
    96fe:	4620      	mov	r0, r4
    9700:	f7f7 fccc 	bl	109c <__aeabi_f2iz>
    9704:	4438      	add	r0, r7
    9706:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    9708:	2400      	movs	r4, #0
    970a:	e009      	b.n	9720 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1bc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    970c:	696c      	ldr	r4, [r5, #20]
    970e:	4b25      	ldr	r3, [pc, #148]	; (97a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9710:	9300      	str	r3, [sp, #0]
    9712:	f240 1359 	movw	r3, #345	; 0x159
    9716:	4a24      	ldr	r2, [pc, #144]	; (97a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9718:	4924      	ldr	r1, [pc, #144]	; (97ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    971a:	4628      	mov	r0, r5
    971c:	47a0      	blx	r4
    971e:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9720:	2c00      	cmp	r4, #0
    9722:	f47f af36 	bne.w	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    9726:	9a03      	ldr	r2, [sp, #12]
    9728:	9b05      	ldr	r3, [sp, #20]
    972a:	429a      	cmp	r2, r3
    972c:	db20      	blt.n	9770 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x20c>
      return __a;
    972e:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9730:	681b      	ldr	r3, [r3, #0]
    9732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9734:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    9736:	4631      	mov	r1, r6
    9738:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    973c:	f7f7 fb9c 	bl	e78 <__aeabi_fdiv>
    9740:	f7f6 fe6e 	bl	420 <__aeabi_f2d>
    9744:	f008 ffd2 	bl	126ec <round>
    9748:	f7f7 f984 	bl	a54 <__aeabi_d2f>
    974c:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    974e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9752:	f7f7 fc8f 	bl	1074 <__aeabi_fcmpge>
    9756:	b168      	cbz	r0, 9774 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
    9758:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    975c:	4630      	mov	r0, r6
    975e:	f7f7 fc7f 	bl	1060 <__aeabi_fcmple>
    9762:	b138      	cbz	r0, 9774 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
  q = zero_point + static_cast<int32_t>(tmp);
    9764:	4630      	mov	r0, r6
    9766:	f7f7 fc99 	bl	109c <__aeabi_f2iz>
    976a:	4407      	add	r7, r0
    976c:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    976e:	e00b      	b.n	9788 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x224>
	return __b;
    9770:	ab05      	add	r3, sp, #20
    9772:	e7dd      	b.n	9730 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1cc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9774:	696c      	ldr	r4, [r5, #20]
    9776:	4b0b      	ldr	r3, [pc, #44]	; (97a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9778:	9300      	str	r3, [sp, #0]
    977a:	f240 1359 	movw	r3, #345	; 0x159
    977e:	4a0a      	ldr	r2, [pc, #40]	; (97a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9780:	490a      	ldr	r1, [pc, #40]	; (97ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9782:	4628      	mov	r0, r5
    9784:	47a0      	blx	r4
    9786:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9788:	2c00      	cmp	r4, #0
    978a:	f47f af02 	bne.w	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    978e:	9a05      	ldr	r2, [sp, #20]
    9790:	9b02      	ldr	r3, [sp, #8]
    9792:	429a      	cmp	r2, r3
    9794:	db04      	blt.n	97a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x23c>
      return __a;
    9796:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    9798:	681b      	ldr	r3, [r3, #0]
    979a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    979c:	6013      	str	r3, [r2, #0]
    979e:	e6f8      	b.n	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    97a0:	ab05      	add	r3, sp, #20
    97a2:	e7f9      	b.n	9798 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x234>
    97a4:	0001c0b4 	.word	0x0001c0b4
    97a8:	0001c068 	.word	0x0001c068
    97ac:	0001be64 	.word	0x0001be64
    97b0:	40c00000 	.word	0x40c00000
    97b4:	bf800000 	.word	0xbf800000

000097b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    97b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97bc:	b082      	sub	sp, #8
    97be:	4680      	mov	r8, r0
    97c0:	4608      	mov	r0, r1
    97c2:	461d      	mov	r5, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    97c4:	68d1      	ldr	r1, [r2, #12]
    97c6:	68c0      	ldr	r0, [r0, #12]
    97c8:	f7f7 faa2 	bl	d10 <__aeabi_fmul>
    97cc:	4604      	mov	r4, r0
  const double input_product_scale =
    97ce:	f7f6 fe27 	bl	420 <__aeabi_f2d>
    97d2:	4606      	mov	r6, r0
    97d4:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    97d6:	2100      	movs	r1, #0
    97d8:	4620      	mov	r0, r4
    97da:	f7f7 fc4b 	bl	1074 <__aeabi_fcmpge>
    97de:	b178      	cbz	r0, 9800 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    97e0:	68e8      	ldr	r0, [r5, #12]
    97e2:	f7f6 fe1d 	bl	420 <__aeabi_f2d>
    97e6:	4602      	mov	r2, r0
    97e8:	460b      	mov	r3, r1
    97ea:	4630      	mov	r0, r6
    97ec:	4639      	mov	r1, r7
    97ee:	f7f6 ff99 	bl	724 <__aeabi_ddiv>
    97f2:	9b08      	ldr	r3, [sp, #32]
    97f4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    97f8:	2000      	movs	r0, #0
}
    97fa:	b002      	add	sp, #8
    97fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    9800:	f8d8 4014 	ldr.w	r4, [r8, #20]
    9804:	4b04      	ldr	r3, [pc, #16]	; (9818 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    9806:	9300      	str	r3, [sp, #0]
    9808:	f240 134b 	movw	r3, #331	; 0x14b
    980c:	4a03      	ldr	r2, [pc, #12]	; (981c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    980e:	4904      	ldr	r1, [pc, #16]	; (9820 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    9810:	4640      	mov	r0, r8
    9812:	47a0      	blx	r4
    9814:	2001      	movs	r0, #1
    9816:	e7f0      	b.n	97fa <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    9818:	0001c0dc 	.word	0x0001c0dc
    981c:	0001c068 	.word	0x0001c068
    9820:	0001be64 	.word	0x0001be64

00009824 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    9824:	b570      	push	{r4, r5, r6, lr}
    9826:	b084      	sub	sp, #16
    9828:	4614      	mov	r4, r2
    982a:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    982c:	7813      	ldrb	r3, [r2, #0]
    982e:	2b03      	cmp	r3, #3
    9830:	d00d      	beq.n	984e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    9832:	2b09      	cmp	r3, #9
    9834:	d00e      	beq.n	9854 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    9836:	2b07      	cmp	r3, #7
    9838:	d017      	beq.n	986a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    983a:	6944      	ldr	r4, [r0, #20]
    983c:	4b0d      	ldr	r3, [pc, #52]	; (9874 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>)
    983e:	9300      	str	r3, [sp, #0]
    9840:	f240 1391 	movw	r3, #401	; 0x191
    9844:	4a0c      	ldr	r2, [pc, #48]	; (9878 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x54>)
    9846:	490d      	ldr	r1, [pc, #52]	; (987c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>)
    9848:	47a0      	blx	r4
    984a:	2001      	movs	r0, #1
    984c:	e00b      	b.n	9866 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x42>
    qmax = std::numeric_limits<uint8_t>::max();
    984e:	23ff      	movs	r3, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    9850:	2200      	movs	r2, #0
    9852:	e002      	b.n	985a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    qmax = std::numeric_limits<int8_t>::max();
    9854:	237f      	movs	r3, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    9856:	f06f 027f 	mvn.w	r2, #127	; 0x7f
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
    985a:	9e08      	ldr	r6, [sp, #32]
    985c:	9602      	str	r6, [sp, #8]
    985e:	9501      	str	r5, [sp, #4]
    9860:	9400      	str	r4, [sp, #0]
    9862:	f7ff fe7f 	bl	9564 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>
                                               output, act_min, act_max);
}
    9866:	b004      	add	sp, #16
    9868:	bd70      	pop	{r4, r5, r6, pc}
    qmax = std::numeric_limits<int16_t>::max();
    986a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    986e:	4a04      	ldr	r2, [pc, #16]	; (9880 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>)
    9870:	e7f3      	b.n	985a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    9872:	bf00      	nop
    9874:	0001c11c 	.word	0x0001c11c
    9878:	0001c068 	.word	0x0001c068
    987c:	0001be64 	.word	0x0001be64
    9880:	ffff8000 	.word	0xffff8000

00009884 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
    9884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9888:	b08d      	sub	sp, #52	; 0x34
    988a:	4604      	mov	r4, r0
    988c:	9304      	str	r3, [sp, #16]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    988e:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
    9892:	2e01      	cmp	r6, #1
    9894:	d010      	beq.n	98b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    9896:	6947      	ldr	r7, [r0, #20]
    9898:	2501      	movs	r5, #1
    989a:	9503      	str	r5, [sp, #12]
    989c:	9602      	str	r6, [sp, #8]
    989e:	4b7d      	ldr	r3, [pc, #500]	; (9a94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    98a0:	9301      	str	r3, [sp, #4]
    98a2:	4b7d      	ldr	r3, [pc, #500]	; (9a98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
    98a4:	9300      	str	r3, [sp, #0]
    98a6:	23da      	movs	r3, #218	; 0xda
    98a8:	4a7c      	ldr	r2, [pc, #496]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    98aa:	497d      	ldr	r1, [pc, #500]	; (9aa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    98ac:	47b8      	blx	r7
    98ae:	462e      	mov	r6, r5
}
    98b0:	4630      	mov	r0, r6
    98b2:	b00d      	add	sp, #52	; 0x34
    98b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98b8:	460d      	mov	r5, r1
    98ba:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    98bc:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
    98c0:	f1b8 0f01 	cmp.w	r8, #1
    98c4:	d00d      	beq.n	98e2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5e>
    98c6:	6945      	ldr	r5, [r0, #20]
    98c8:	2301      	movs	r3, #1
    98ca:	9303      	str	r3, [sp, #12]
    98cc:	f8cd 8008 	str.w	r8, [sp, #8]
    98d0:	4b70      	ldr	r3, [pc, #448]	; (9a94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    98d2:	9301      	str	r3, [sp, #4]
    98d4:	4b73      	ldr	r3, [pc, #460]	; (9aa4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
    98d6:	9300      	str	r3, [sp, #0]
    98d8:	23dc      	movs	r3, #220	; 0xdc
    98da:	4a70      	ldr	r2, [pc, #448]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    98dc:	4970      	ldr	r1, [pc, #448]	; (9aa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    98de:	47a8      	blx	r5
    98e0:	e7e6      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const auto* affine_quantization =
    98e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    98e4:	b1b3      	cbz	r3, 9914 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x90>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    98e6:	f8d3 b000 	ldr.w	fp, [r3]
    98ea:	f1bb 0f00 	cmp.w	fp, #0
    98ee:	d01a      	beq.n	9926 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa2>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    98f0:	f8db 7000 	ldr.w	r7, [fp]
  if (is_per_channel) {
    98f4:	2f01      	cmp	r7, #1
    98f6:	dd5a      	ble.n	99ae <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    TF_LITE_ENSURE(context,
    98f8:	780a      	ldrb	r2, [r1, #0]
    98fa:	2a09      	cmp	r2, #9
    98fc:	d01c      	beq.n	9938 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    98fe:	2a07      	cmp	r2, #7
    9900:	d01a      	beq.n	9938 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    9902:	6945      	ldr	r5, [r0, #20]
    9904:	4b68      	ldr	r3, [pc, #416]	; (9aa8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    9906:	9300      	str	r3, [sp, #0]
    9908:	23ec      	movs	r3, #236	; 0xec
    990a:	4a64      	ldr	r2, [pc, #400]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    990c:	4967      	ldr	r1, [pc, #412]	; (9aac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    990e:	47a8      	blx	r5
    9910:	4646      	mov	r6, r8
    9912:	e7cd      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization);
    9914:	6945      	ldr	r5, [r0, #20]
    9916:	4b66      	ldr	r3, [pc, #408]	; (9ab0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    9918:	9300      	str	r3, [sp, #0]
    991a:	23e7      	movs	r3, #231	; 0xe7
    991c:	4a5f      	ldr	r2, [pc, #380]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    991e:	4963      	ldr	r1, [pc, #396]	; (9aac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9920:	47a8      	blx	r5
    9922:	4646      	mov	r6, r8
    9924:	e7c4      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    9926:	6945      	ldr	r5, [r0, #20]
    9928:	4b62      	ldr	r3, [pc, #392]	; (9ab4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    992a:	9300      	str	r3, [sp, #0]
    992c:	23e8      	movs	r3, #232	; 0xe8
    992e:	4a5b      	ldr	r2, [pc, #364]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9930:	495e      	ldr	r1, [pc, #376]	; (9aac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9932:	47a8      	blx	r5
    9934:	4646      	mov	r6, r8
    9936:	e7bb      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    9938:	f89a 2000 	ldrb.w	r2, [sl]
    993c:	2a09      	cmp	r2, #9
    993e:	d00e      	beq.n	995e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xda>
    9940:	6965      	ldr	r5, [r4, #20]
    9942:	2309      	movs	r3, #9
    9944:	9303      	str	r3, [sp, #12]
    9946:	9202      	str	r2, [sp, #8]
    9948:	4b5b      	ldr	r3, [pc, #364]	; (9ab8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x234>)
    994a:	9301      	str	r3, [sp, #4]
    994c:	4b5b      	ldr	r3, [pc, #364]	; (9abc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x238>)
    994e:	9300      	str	r3, [sp, #0]
    9950:	23ee      	movs	r3, #238	; 0xee
    9952:	4a52      	ldr	r2, [pc, #328]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9954:	4952      	ldr	r1, [pc, #328]	; (9aa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    9956:	4620      	mov	r0, r4
    9958:	47a8      	blx	r5
    995a:	4646      	mov	r6, r8
    995c:	e7a8      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    995e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9960:	4297      	cmp	r7, r2
    9962:	d00d      	beq.n	9980 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xfc>
    9964:	6965      	ldr	r5, [r4, #20]
    9966:	9203      	str	r2, [sp, #12]
    9968:	9702      	str	r7, [sp, #8]
    996a:	4b55      	ldr	r3, [pc, #340]	; (9ac0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    996c:	9301      	str	r3, [sp, #4]
    996e:	4b55      	ldr	r3, [pc, #340]	; (9ac4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x240>)
    9970:	9300      	str	r3, [sp, #0]
    9972:	23ef      	movs	r3, #239	; 0xef
    9974:	4a49      	ldr	r2, [pc, #292]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9976:	494a      	ldr	r1, [pc, #296]	; (9aa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    9978:	4620      	mov	r0, r4
    997a:	47a8      	blx	r5
    997c:	4646      	mov	r6, r8
    997e:	e797      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(
    9980:	f8da 2008 	ldr.w	r2, [sl, #8]
    9984:	689b      	ldr	r3, [r3, #8]
    9986:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    998a:	6853      	ldr	r3, [r2, #4]
    998c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    998e:	4293      	cmp	r3, r2
    9990:	d00d      	beq.n	99ae <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    9992:	6965      	ldr	r5, [r4, #20]
    9994:	9303      	str	r3, [sp, #12]
    9996:	9202      	str	r2, [sp, #8]
    9998:	4b4b      	ldr	r3, [pc, #300]	; (9ac8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x244>)
    999a:	9301      	str	r3, [sp, #4]
    999c:	4b48      	ldr	r3, [pc, #288]	; (9ac0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    999e:	9300      	str	r3, [sp, #0]
    99a0:	23f0      	movs	r3, #240	; 0xf0
    99a2:	4a3e      	ldr	r2, [pc, #248]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    99a4:	493e      	ldr	r1, [pc, #248]	; (9aa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    99a6:	4620      	mov	r0, r4
    99a8:	47a8      	blx	r5
    99aa:	4646      	mov	r6, r8
    99ac:	e780      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const float input_scale = input->params.scale;
    99ae:	f8d5 900c 	ldr.w	r9, [r5, #12]
  const float output_scale = output->params.scale;
    99b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    99b4:	f8d3 800c 	ldr.w	r8, [r3, #12]
  const float* filter_scales = affine_quantization->scale->data;
    99b8:	f10b 0304 	add.w	r3, fp, #4
  for (int i = 0; i < num_channels; ++i) {
    99bc:	2600      	movs	r6, #0
    99be:	9405      	str	r4, [sp, #20]
    99c0:	9506      	str	r5, [sp, #24]
    99c2:	f8cd a01c 	str.w	sl, [sp, #28]
    99c6:	469a      	mov	sl, r3
    99c8:	e024      	b.n	9a14 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x190>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    99ca:	f8db 0004 	ldr.w	r0, [fp, #4]
    const double filter_scale = static_cast<double>(scale);
    99ce:	f7f6 fd27 	bl	420 <__aeabi_f2d>
    99d2:	4604      	mov	r4, r0
    99d4:	460d      	mov	r5, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    99d6:	4648      	mov	r0, r9
    99d8:	f7f6 fd22 	bl	420 <__aeabi_f2d>
    99dc:	4622      	mov	r2, r4
    99de:	462b      	mov	r3, r5
    99e0:	f7f6 fd76 	bl	4d0 <__aeabi_dmul>
    99e4:	4604      	mov	r4, r0
    99e6:	460d      	mov	r5, r1
                                          static_cast<double>(output_scale);
    99e8:	4640      	mov	r0, r8
    99ea:	f7f6 fd19 	bl	420 <__aeabi_f2d>
    99ee:	4602      	mov	r2, r0
    99f0:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    99f2:	4620      	mov	r0, r4
    99f4:	4629      	mov	r1, r5
    99f6:	f7f6 fe95 	bl	724 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    99fa:	ab0a      	add	r3, sp, #40	; 0x28
    99fc:	aa09      	add	r2, sp, #36	; 0x24
    99fe:	f7ff fd23 	bl	9448 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    9a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a04:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9a06:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
    9a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9a0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9a0e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    9a12:	3601      	adds	r6, #1
    9a14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9a16:	429e      	cmp	r6, r3
    9a18:	da04      	bge.n	9a24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1a0>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    9a1a:	2f01      	cmp	r7, #1
    9a1c:	ddd5      	ble.n	99ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x146>
    9a1e:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
    9a22:	e7d4      	b.n	99ce <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x14a>
    9a24:	9c05      	ldr	r4, [sp, #20]
    9a26:	9d06      	ldr	r5, [sp, #24]
    9a28:	f8dd a01c 	ldr.w	sl, [sp, #28]
  if (input->type == kTfLiteUInt8) {
    9a2c:	782b      	ldrb	r3, [r5, #0]
    9a2e:	2b03      	cmp	r3, #3
    9a30:	d008      	beq.n	9a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1c0>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    9a32:	782b      	ldrb	r3, [r5, #0]
    9a34:	2b09      	cmp	r3, #9
    9a36:	d022      	beq.n	9a7e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    9a38:	2b03      	cmp	r3, #3
    9a3a:	d020      	beq.n	9a7e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    9a3c:	2b07      	cmp	r3, #7
    9a3e:	d01e      	beq.n	9a7e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
  return kTfLiteOk;
    9a40:	2600      	movs	r6, #0
    9a42:	e735      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    double real_multiplier = 0.0;
    9a44:	2200      	movs	r2, #0
    9a46:	2300      	movs	r3, #0
    9a48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    9a4c:	ab0a      	add	r3, sp, #40	; 0x28
    9a4e:	9301      	str	r3, [sp, #4]
    9a50:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9a52:	9300      	str	r3, [sp, #0]
    9a54:	9b04      	ldr	r3, [sp, #16]
    9a56:	4652      	mov	r2, sl
    9a58:	4629      	mov	r1, r5
    9a5a:	4620      	mov	r0, r4
    9a5c:	f7f7 fd70 	bl	1540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    9a60:	4606      	mov	r6, r0
    9a62:	2800      	cmp	r0, #0
    9a64:	f47f af24 	bne.w	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    9a68:	ab09      	add	r3, sp, #36	; 0x24
    9a6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9a6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9a70:	f7ff fcea 	bl	9448 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    9a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a76:	425b      	negs	r3, r3
    9a78:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9a7a:	6013      	str	r3, [r2, #0]
    9a7c:	e7d9      	b.n	9a32 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ae>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    9a7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9a80:	9300      	str	r3, [sp, #0]
    9a82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9a84:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9a86:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9a88:	7809      	ldrb	r1, [r1, #0]
    9a8a:	4620      	mov	r0, r4
    9a8c:	f7ff feca 	bl	9824 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    9a90:	4606      	mov	r6, r0
    9a92:	e70d      	b.n	98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    9a94:	0001c140 	.word	0x0001c140
    9a98:	0001c15c 	.word	0x0001c15c
    9a9c:	0001c068 	.word	0x0001c068
    9aa0:	0001c124 	.word	0x0001c124
    9aa4:	0001c178 	.word	0x0001c178
    9aa8:	0001c1c4 	.word	0x0001c1c4
    9aac:	0001be64 	.word	0x0001be64
    9ab0:	0001c194 	.word	0x0001c194
    9ab4:	0001c1a8 	.word	0x0001c1a8
    9ab8:	0001c200 	.word	0x0001c200
    9abc:	0001c20c 	.word	0x0001c20c
    9ac0:	0001c21c 	.word	0x0001c21c
    9ac4:	0001c22c 	.word	0x0001c22c
    9ac8:	0001c250 	.word	0x0001c250

00009acc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    9acc:	b508      	push	{r3, lr}
    9ace:	4613      	mov	r3, r2
  switch (tensor_type) {
    9ad0:	280f      	cmp	r0, #15
    9ad2:	d848      	bhi.n	9b66 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x9a>
    9ad4:	e8df f000 	tbb	[pc, r0]
    9ad8:	1f17080c 	.word	0x1f17080c
    9adc:	13332f27 	.word	0x13332f27
    9ae0:	3b0f2337 	.word	0x3b0f2337
    9ae4:	1b433f2b 	.word	0x1b433f2b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    9ae8:	230a      	movs	r3, #10
    9aea:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9aec:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    9aee:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
    9af0:	2301      	movs	r3, #1
    9af2:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9af4:	e7fb      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
    9af6:	230b      	movs	r3, #11
    9af8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9afa:	2000      	movs	r0, #0
    9afc:	e7f7      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
    9afe:	2307      	movs	r3, #7
    9b00:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b02:	2000      	movs	r0, #0
    9b04:	e7f3      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
    9b06:	2302      	movs	r3, #2
    9b08:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b0a:	2000      	movs	r0, #0
    9b0c:	e7ef      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
    9b0e:	2310      	movs	r3, #16
    9b10:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b12:	2000      	movs	r0, #0
    9b14:	e7eb      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
    9b16:	2303      	movs	r3, #3
    9b18:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b1a:	2000      	movs	r0, #0
    9b1c:	e7e7      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
    9b1e:	2309      	movs	r3, #9
    9b20:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b22:	2000      	movs	r0, #0
    9b24:	e7e3      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
    9b26:	2304      	movs	r3, #4
    9b28:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b2a:	2000      	movs	r0, #0
    9b2c:	e7df      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
    9b2e:	230d      	movs	r3, #13
    9b30:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b32:	2000      	movs	r0, #0
    9b34:	e7db      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
    9b36:	2305      	movs	r3, #5
    9b38:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b3a:	2000      	movs	r0, #0
    9b3c:	e7d7      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
    9b3e:	2306      	movs	r3, #6
    9b40:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b42:	2000      	movs	r0, #0
    9b44:	e7d3      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
    9b46:	2308      	movs	r3, #8
    9b48:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b4a:	2000      	movs	r0, #0
    9b4c:	e7cf      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
    9b4e:	230c      	movs	r3, #12
    9b50:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b52:	2000      	movs	r0, #0
    9b54:	e7cb      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
    9b56:	230e      	movs	r3, #14
    9b58:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b5a:	2000      	movs	r0, #0
    9b5c:	e7c7      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
    9b5e:	230f      	movs	r3, #15
    9b60:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b62:	2000      	movs	r0, #0
    9b64:	e7c3      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
    9b66:	2200      	movs	r2, #0
    9b68:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    9b6a:	4602      	mov	r2, r0
    9b6c:	4902      	ldr	r1, [pc, #8]	; (9b78 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xac>)
    9b6e:	4618      	mov	r0, r3
    9b70:	f00c f9a8 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9b74:	2001      	movs	r0, #1
    9b76:	e7ba      	b.n	9aee <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
    9b78:	0001c290 	.word	0x0001c290

00009b7c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>:
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
    9b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b80:	461c      	mov	r4, r3
  if (!flat_vector) {
    9b82:	b1d1      	cbz	r1, 9bba <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x3e>
    9b84:	4680      	mov	r8, r0
    9b86:	4617      	mov	r7, r2
    9b88:	460d      	mov	r5, r1
  uoffset_t size() const { return EndianScalar(length_); }
    9b8a:	6808      	ldr	r0, [r1, #0]
    9b8c:	f00a f9fb 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    9b90:	4606      	mov	r6, r0
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
    9b92:	ebb0 0f98 	cmp.w	r0, r8, lsr #2
    9b96:	d817      	bhi.n	9bc8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x4c>
      for (size_t i = 0; i < num_dimensions; ++i) {
    9b98:	2400      	movs	r4, #0
    9b9a:	42b4      	cmp	r4, r6
    9b9c:	d222      	bcs.n	9be4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x68>
    9b9e:	6828      	ldr	r0, [r5, #0]
    9ba0:	f00a f9f1 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    9ba4:	4284      	cmp	r4, r0
    9ba6:	d216      	bcs.n	9bd6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x5a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9ba8:	1d2b      	adds	r3, r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    9baa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    9bae:	f00b fc0e 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
        buffer[i] = flat_vector->Get(i);
    9bb2:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
    9bb6:	3401      	adds	r4, #1
    9bb8:	e7ef      	b.n	9b9a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x1e>
    TF_LITE_REPORT_ERROR(error_reporter,
    9bba:	9a06      	ldr	r2, [sp, #24]
    9bbc:	490b      	ldr	r1, [pc, #44]	; (9bec <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x70>)
    9bbe:	4618      	mov	r0, r3
    9bc0:	f00c f980 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9bc4:	2001      	movs	r0, #1
    9bc6:	e00e      	b.n	9be6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
      TF_LITE_REPORT_ERROR(
    9bc8:	9a06      	ldr	r2, [sp, #24]
    9bca:	4909      	ldr	r1, [pc, #36]	; (9bf0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x74>)
    9bcc:	4620      	mov	r0, r4
    9bce:	f00c f979 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9bd2:	2001      	movs	r0, #1
    9bd4:	e007      	b.n	9be6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
    FLATBUFFERS_ASSERT(i < size());
    9bd6:	4b07      	ldr	r3, [pc, #28]	; (9bf4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x78>)
    9bd8:	4a07      	ldr	r2, [pc, #28]	; (9bf8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x7c>)
    9bda:	f44f 7183 	mov.w	r1, #262	; 0x106
    9bde:	4807      	ldr	r0, [pc, #28]	; (9bfc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x80>)
    9be0:	f008 ff64 	bl	12aac <__assert_func>
  return kTfLiteOk;
    9be4:	2000      	movs	r0, #0
}
    9be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bea:	bf00      	nop
    9bec:	0001c2b4 	.word	0x0001c2b4
    9bf0:	0001c2e4 	.word	0x0001c2e4
    9bf4:	0001a5b4 	.word	0x0001a5b4
    9bf8:	0001a5c0 	.word	0x0001a5c0
    9bfc:	0001a680 	.word	0x0001a680

00009c00 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    9c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c04:	b084      	sub	sp, #16
    9c06:	4604      	mov	r4, r0
    9c08:	4688      	mov	r8, r1
    9c0a:	4615      	mov	r5, r2
    9c0c:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9c0e:	f00c f94b 	bl	15ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9c12:	682b      	ldr	r3, [r5, #0]
    9c14:	681b      	ldr	r3, [r3, #0]
    9c16:	2204      	movs	r2, #4
    9c18:	2124      	movs	r1, #36	; 0x24
    9c1a:	4628      	mov	r0, r5
    9c1c:	4798      	blx	r3
    return new (allocated_memory) T();
    9c1e:	4606      	mov	r6, r0
    9c20:	b118      	cbz	r0, 9c2a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9c22:	2224      	movs	r2, #36	; 0x24
    9c24:	2100      	movs	r1, #0
    9c26:	f00e ff71 	bl	18b0c <memset>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    9c2a:	9502      	str	r5, [sp, #8]
    9c2c:	9603      	str	r6, [sp, #12]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9c2e:	b336      	cbz	r6, 9c7e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9c30:	4620      	mov	r0, r4
    9c32:	f00b fbcd 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c36:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c38:	4628      	mov	r0, r5
    9c3a:	f00b fbcf 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c3e:	280a      	cmp	r0, #10
    9c40:	d92a      	bls.n	9c98 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9c42:	f105 000a 	add.w	r0, r5, #10
    9c46:	f00b fbc9 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c4a:	b338      	cbz	r0, 9c9c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9c4c:	4420      	add	r0, r4
    9c4e:	f00b fc8e 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    9c52:	2811      	cmp	r0, #17
    9c54:	d128      	bne.n	9ca8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9c56:	4620      	mov	r0, r4
    9c58:	f00b fbba 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c5c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c5e:	4628      	mov	r0, r5
    9c60:	f00b fbbc 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c64:	280c      	cmp	r0, #12
    9c66:	d91b      	bls.n	9ca0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9c68:	f105 000c 	add.w	r0, r5, #12
    9c6c:	f00b fbb6 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9c70:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9c72:	b1b8      	cbz	r0, 9ca4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9c74:	4620      	mov	r0, r4
    9c76:	f00b fba5 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9c7a:	4404      	add	r4, r0
    9c7c:	e015      	b.n	9caa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9c7e:	4b26      	ldr	r3, [pc, #152]	; (9d18 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
    9c80:	9301      	str	r3, [sp, #4]
    9c82:	f240 63c3 	movw	r3, #1731	; 0x6c3
    9c86:	9300      	str	r3, [sp, #0]
    9c88:	4b24      	ldr	r3, [pc, #144]	; (9d1c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    9c8a:	4a25      	ldr	r2, [pc, #148]	; (9d20 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
    9c8c:	4641      	mov	r1, r8
    9c8e:	4640      	mov	r0, r8
    9c90:	f00c f927 	bl	15ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9c94:	2501      	movs	r5, #1
    9c96:	e030      	b.n	9cfa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c98:	2000      	movs	r0, #0
    9c9a:	e7d6      	b.n	9c4a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c9c:	2000      	movs	r0, #0
    9c9e:	e7d8      	b.n	9c52 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ca0:	2000      	movs	r0, #0
    9ca2:	e7e5      	b.n	9c70 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9ca4:	2400      	movs	r4, #0
    9ca6:	e000      	b.n	9caa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9ca8:	2400      	movs	r4, #0

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
    9caa:	b314      	cbz	r4, 9cf2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
    9cac:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9cae:	4620      	mov	r0, r4
    9cb0:	f00b fb8e 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9cb4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9cb6:	4620      	mov	r0, r4
    9cb8:	f00b fb90 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cbc:	2804      	cmp	r0, #4
    9cbe:	d926      	bls.n	9d0e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    9cc0:	1d20      	adds	r0, r4, #4
    9cc2:	f00b fb8b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9cc6:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9cc8:	b318      	cbz	r0, 9d12 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    9cca:	4628      	mov	r0, r5
    9ccc:	f00b fb7a 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9cd0:	182c      	adds	r4, r5, r0
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
    9cd2:	b174      	cbz	r4, 9cf2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
      TF_LITE_ENSURE_STATUS(
    9cd4:	4b13      	ldr	r3, [pc, #76]	; (9d24 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    9cd6:	9300      	str	r3, [sp, #0]
    9cd8:	4643      	mov	r3, r8
    9cda:	4632      	mov	r2, r6
    9cdc:	4621      	mov	r1, r4
    9cde:	2020      	movs	r0, #32
    9ce0:	f7ff ff4c 	bl	9b7c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>
    9ce4:	4605      	mov	r5, r0
    9ce6:	b940      	cbnz	r0, 9cfa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
  uoffset_t size() const { return EndianScalar(length_); }
    9ce8:	6820      	ldr	r0, [r4, #0]
    9cea:	f00a f94c 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9cee:	9b03      	ldr	r3, [sp, #12]
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
    9cf0:	6218      	str	r0, [r3, #32]
    9cf2:	9b03      	ldr	r3, [sp, #12]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
    9cf4:	2500      	movs	r5, #0
    9cf6:	9503      	str	r5, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    9cf8:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    9cfa:	9903      	ldr	r1, [sp, #12]
    9cfc:	b119      	cbz	r1, 9d06 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9cfe:	9802      	ldr	r0, [sp, #8]
    9d00:	6803      	ldr	r3, [r0, #0]
    9d02:	685b      	ldr	r3, [r3, #4]
    9d04:	4798      	blx	r3
  return kTfLiteOk;
}
    9d06:	4628      	mov	r0, r5
    9d08:	b004      	add	sp, #16
    9d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d0e:	2000      	movs	r0, #0
    9d10:	e7d9      	b.n	9cc6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9d12:	2400      	movs	r4, #0
    9d14:	e7dd      	b.n	9cd2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    9d16:	bf00      	nop
    9d18:	0001c380 	.word	0x0001c380
    9d1c:	0001c328 	.word	0x0001c328
    9d20:	0001be64 	.word	0x0001be64
    9d24:	0001c394 	.word	0x0001c394

00009d28 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
    9d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d2c:	b084      	sub	sp, #16
    9d2e:	4604      	mov	r4, r0
    9d30:	4688      	mov	r8, r1
    9d32:	4616      	mov	r6, r2
    9d34:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9d36:	f00c f8b7 	bl	15ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9d3a:	6833      	ldr	r3, [r6, #0]
    9d3c:	681b      	ldr	r3, [r3, #0]
    9d3e:	2201      	movs	r2, #1
    9d40:	2102      	movs	r1, #2
    9d42:	4630      	mov	r0, r6
    9d44:	4798      	blx	r3
    return new (allocated_memory) T();
    9d46:	4605      	mov	r5, r0
    9d48:	b110      	cbz	r0, 9d50 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28>
    9d4a:	2300      	movs	r3, #0
    9d4c:	7003      	strb	r3, [r0, #0]
    9d4e:	7043      	strb	r3, [r0, #1]
    9d50:	9602      	str	r6, [sp, #8]
    9d52:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9d54:	b335      	cbz	r5, 9da4 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    return data_ - ReadScalar<soffset_t>(data_);
    9d56:	4620      	mov	r0, r4
    9d58:	f00b fb3a 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d5c:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d5e:	4630      	mov	r0, r6
    9d60:	f00b fb3c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d64:	280a      	cmp	r0, #10
    9d66:	d92a      	bls.n	9dbe <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    9d68:	f106 000a 	add.w	r0, r6, #10
    9d6c:	f00b fb36 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d70:	b338      	cbz	r0, 9dc2 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9a>
    9d72:	4420      	add	r0, r4
    9d74:	f00b fbfb 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
    9d78:	280b      	cmp	r0, #11
    9d7a:	d128      	bne.n	9dce <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    return data_ - ReadScalar<soffset_t>(data_);
    9d7c:	4620      	mov	r0, r4
    9d7e:	f00b fb27 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d82:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d84:	4630      	mov	r0, r6
    9d86:	f00b fb29 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d8a:	280c      	cmp	r0, #12
    9d8c:	d91b      	bls.n	9dc6 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    9d8e:	f106 000c 	add.w	r0, r6, #12
    9d92:	f00b fb23 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9d96:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9d98:	b1b8      	cbz	r0, 9dca <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    9d9a:	4620      	mov	r0, r4
    9d9c:	f00b fb12 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9da0:	4404      	add	r4, r0
    9da2:	e015      	b.n	9dd0 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    9da4:	4b2a      	ldr	r3, [pc, #168]	; (9e50 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    9da6:	9301      	str	r3, [sp, #4]
    9da8:	f240 33a5 	movw	r3, #933	; 0x3a5
    9dac:	9300      	str	r3, [sp, #0]
    9dae:	4b29      	ldr	r3, [pc, #164]	; (9e54 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    9db0:	4a29      	ldr	r2, [pc, #164]	; (9e58 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    9db2:	4641      	mov	r1, r8
    9db4:	4640      	mov	r0, r8
    9db6:	f00c f894 	bl	15ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9dba:	2401      	movs	r4, #1
    9dbc:	e035      	b.n	9e2a <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dbe:	2000      	movs	r0, #0
    9dc0:	e7d6      	b.n	9d70 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9dc2:	2000      	movs	r0, #0
    9dc4:	e7d8      	b.n	9d78 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dc6:	2000      	movs	r0, #0
    9dc8:	e7e5      	b.n	9d96 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9dca:	2400      	movs	r4, #0
    9dcc:	e000      	b.n	9dd0 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    9dce:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9dd0:	b344      	cbz	r4, 9e24 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    9dd2:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9dd4:	4620      	mov	r0, r4
    9dd6:	f00b fafb 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9dda:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9ddc:	4620      	mov	r0, r4
    9dde:	f00b fafd 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9de2:	2804      	cmp	r0, #4
    9de4:	d92b      	bls.n	9e3e <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    9de6:	1d20      	adds	r0, r4, #4
    9de8:	f00b faf8 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9dec:	b348      	cbz	r0, 9e42 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>
    9dee:	4430      	add	r0, r6
    9df0:	f00b fafa 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9df4:	b2c0      	uxtb	r0, r0
    9df6:	f00c f844 	bl	15e82 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9dfa:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    9dfc:	4630      	mov	r0, r6
    9dfe:	f00b fae7 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e02:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e04:	4620      	mov	r0, r4
    9e06:	f00b fae9 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e0a:	2806      	cmp	r0, #6
    9e0c:	d91b      	bls.n	9e46 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11e>
    9e0e:	1da0      	adds	r0, r4, #6
    9e10:	f00b fae4 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e14:	b1c8      	cbz	r0, 9e4a <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    9e16:	4430      	add	r0, r6
    9e18:	f00b fba9 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return GetField<uint8_t>(VT_POT_SCALE_INT16, 1) != 0;
    9e1c:	3800      	subs	r0, #0
    9e1e:	bf18      	it	ne
    9e20:	2001      	movne	r0, #1
    params->pot_scale_int16 = schema_params->pot_scale_int16();
    9e22:	7068      	strb	r0, [r5, #1]
	_M_t._M_ptr() = pointer();
    9e24:	2400      	movs	r4, #0
    9e26:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9e28:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    9e2a:	9903      	ldr	r1, [sp, #12]
    9e2c:	b119      	cbz	r1, 9e36 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9e2e:	9802      	ldr	r0, [sp, #8]
    9e30:	6803      	ldr	r3, [r0, #0]
    9e32:	685b      	ldr	r3, [r3, #4]
    9e34:	4798      	blx	r3
}
    9e36:	4620      	mov	r0, r4
    9e38:	b004      	add	sp, #16
    9e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e3e:	2000      	movs	r0, #0
    9e40:	e7d4      	b.n	9dec <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e42:	2000      	movs	r0, #0
    9e44:	e7d6      	b.n	9df4 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e46:	2000      	movs	r0, #0
    9e48:	e7e4      	b.n	9e14 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e4a:	2001      	movs	r0, #1
    9e4c:	e7e6      	b.n	9e1c <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    9e4e:	bf00      	nop
    9e50:	0001c380 	.word	0x0001c380
    9e54:	0001c328 	.word	0x0001c328
    9e58:	0001be64 	.word	0x0001be64

00009e5c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    9e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e60:	b084      	sub	sp, #16
    9e62:	4604      	mov	r4, r0
    9e64:	4688      	mov	r8, r1
    9e66:	4615      	mov	r5, r2
    9e68:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9e6a:	f00c f81d 	bl	15ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9e6e:	682b      	ldr	r3, [r5, #0]
    9e70:	681b      	ldr	r3, [r3, #0]
    9e72:	2204      	movs	r2, #4
    9e74:	2128      	movs	r1, #40	; 0x28
    9e76:	4628      	mov	r0, r5
    9e78:	4798      	blx	r3
    return new (allocated_memory) T();
    9e7a:	4607      	mov	r7, r0
    9e7c:	b118      	cbz	r0, 9e86 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9e7e:	2228      	movs	r2, #40	; 0x28
    9e80:	2100      	movs	r1, #0
    9e82:	f00e fe43 	bl	18b0c <memset>
    9e86:	9502      	str	r5, [sp, #8]
    9e88:	9703      	str	r7, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9e8a:	b337      	cbz	r7, 9eda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9e8c:	4620      	mov	r0, r4
    9e8e:	f00b fa9f 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e92:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e94:	4628      	mov	r0, r5
    9e96:	f00b faa1 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e9a:	280a      	cmp	r0, #10
    9e9c:	d92a      	bls.n	9ef4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9e9e:	f105 000a 	add.w	r0, r5, #10
    9ea2:	f00b fa9b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ea6:	b338      	cbz	r0, 9ef8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9ea8:	4420      	add	r0, r4
    9eaa:	f00b fb60 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    9eae:	2805      	cmp	r0, #5
    9eb0:	d128      	bne.n	9f04 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9eb2:	4620      	mov	r0, r4
    9eb4:	f00b fa8c 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9eb8:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9eba:	4628      	mov	r0, r5
    9ebc:	f00b fa8e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ec0:	280c      	cmp	r0, #12
    9ec2:	d91b      	bls.n	9efc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9ec4:	f105 000c 	add.w	r0, r5, #12
    9ec8:	f00b fa88 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9ecc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9ece:	b1b8      	cbz	r0, 9f00 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9ed0:	4620      	mov	r0, r4
    9ed2:	f00b fa77 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9ed6:	4404      	add	r4, r0
    9ed8:	e015      	b.n	9f06 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9eda:	4b5b      	ldr	r3, [pc, #364]	; (a048 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>)
    9edc:	9301      	str	r3, [sp, #4]
    9ede:	f240 6361 	movw	r3, #1633	; 0x661
    9ee2:	9300      	str	r3, [sp, #0]
    9ee4:	4b59      	ldr	r3, [pc, #356]	; (a04c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9ee6:	4a5a      	ldr	r2, [pc, #360]	; (a050 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9ee8:	4641      	mov	r1, r8
    9eea:	4640      	mov	r0, r8
    9eec:	f00b fff9 	bl	15ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9ef0:	2401      	movs	r4, #1
    9ef2:	e086      	b.n	a002 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ef4:	2000      	movs	r0, #0
    9ef6:	e7d6      	b.n	9ea6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ef8:	2000      	movs	r0, #0
    9efa:	e7d8      	b.n	9eae <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9efc:	2000      	movs	r0, #0
    9efe:	e7e5      	b.n	9ecc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9f00:	2400      	movs	r4, #0
    9f02:	e000      	b.n	9f06 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9f04:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9f06:	2c00      	cmp	r4, #0
    9f08:	d077      	beq.n	9ffa <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19e>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9f0a:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9f0c:	4620      	mov	r0, r4
    9f0e:	f00b fa5f 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f12:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f14:	4620      	mov	r0, r4
    9f16:	f00b fa61 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f1a:	2804      	cmp	r0, #4
    9f1c:	d97b      	bls.n	a016 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ba>
    9f1e:	1d20      	adds	r0, r4, #4
    9f20:	f00b fa5c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f24:	2800      	cmp	r0, #0
    9f26:	d078      	beq.n	a01a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1be>
    9f28:	4428      	add	r0, r5
    9f2a:	f00b fa5d 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9f2e:	b2c0      	uxtb	r0, r0
    9f30:	f00b ffb1 	bl	15e96 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9f34:	7038      	strb	r0, [r7, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9f36:	9f03      	ldr	r7, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9f38:	4628      	mov	r0, r5
    9f3a:	f00b fa49 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f3e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f40:	4620      	mov	r0, r4
    9f42:	f00b fa4b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f46:	2806      	cmp	r0, #6
    9f48:	d969      	bls.n	a01e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c2>
    9f4a:	1da0      	adds	r0, r4, #6
    9f4c:	f00b fa46 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f50:	2800      	cmp	r0, #0
    9f52:	d066      	beq.n	a022 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c6>
    9f54:	4428      	add	r0, r5
    9f56:	f00b fa3b 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9f5a:	6078      	str	r0, [r7, #4]
    9f5c:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9f5e:	4628      	mov	r0, r5
    9f60:	f00b fa36 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f64:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f66:	4638      	mov	r0, r7
    9f68:	f00b fa38 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f6c:	2808      	cmp	r0, #8
    9f6e:	d95a      	bls.n	a026 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ca>
    9f70:	f107 0008 	add.w	r0, r7, #8
    9f74:	f00b fa32 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f78:	2800      	cmp	r0, #0
    9f7a:	d056      	beq.n	a02a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ce>
    9f7c:	4428      	add	r0, r5
    9f7e:	f00b fa27 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9f82:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9f84:	4628      	mov	r0, r5
    9f86:	f00b fa23 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f8a:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f8c:	4638      	mov	r0, r7
    9f8e:	f00b fa25 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f92:	280a      	cmp	r0, #10
    9f94:	d94b      	bls.n	a02e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    9f96:	f107 000a 	add.w	r0, r7, #10
    9f9a:	f00b fa1f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f9e:	2800      	cmp	r0, #0
    9fa0:	d047      	beq.n	a032 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d6>
    9fa2:	4428      	add	r0, r5
    9fa4:	f00b fa14 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_width = schema_params->filter_width();
    9fa8:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9faa:	4628      	mov	r0, r5
    9fac:	f00b fa10 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9fb0:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9fb2:	4638      	mov	r0, r7
    9fb4:	f00b fa12 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fb8:	280c      	cmp	r0, #12
    9fba:	d93c      	bls.n	a036 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    9fbc:	f107 000c 	add.w	r0, r7, #12
    9fc0:	f00b fa0c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fc4:	2800      	cmp	r0, #0
    9fc6:	d038      	beq.n	a03a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1de>
    9fc8:	4428      	add	r0, r5
    9fca:	f00b fa01 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_height = schema_params->filter_height();
    9fce:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9fd0:	4628      	mov	r0, r5
    9fd2:	f00b f9fd 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9fd6:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9fd8:	4638      	mov	r0, r7
    9fda:	f00b f9ff 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fde:	280e      	cmp	r0, #14
    9fe0:	d92d      	bls.n	a03e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e2>
    9fe2:	f107 000e 	add.w	r0, r7, #14
    9fe6:	f00b f9f9 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fea:	b350      	cbz	r0, a042 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    9fec:	4428      	add	r0, r5
    9fee:	f00b f9fb 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9ff2:	b2c0      	uxtb	r0, r0
    9ff4:	f00b ff45 	bl	15e82 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9ff8:	7520      	strb	r0, [r4, #20]
    9ffa:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9ffc:	2400      	movs	r4, #0
    9ffe:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a000:	6033      	str	r3, [r6, #0]
	if (__ptr != nullptr)
    a002:	9903      	ldr	r1, [sp, #12]
    a004:	b119      	cbz	r1, a00e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b2>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a006:	9802      	ldr	r0, [sp, #8]
    a008:	6803      	ldr	r3, [r0, #0]
    a00a:	685b      	ldr	r3, [r3, #4]
    a00c:	4798      	blx	r3
}
    a00e:	4620      	mov	r0, r4
    a010:	b004      	add	sp, #16
    a012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a016:	2000      	movs	r0, #0
    a018:	e784      	b.n	9f24 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a01a:	2000      	movs	r0, #0
    a01c:	e787      	b.n	9f2e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a01e:	2000      	movs	r0, #0
    a020:	e796      	b.n	9f50 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a022:	2000      	movs	r0, #0
    a024:	e799      	b.n	9f5a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a026:	2000      	movs	r0, #0
    a028:	e7a6      	b.n	9f78 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a02a:	2000      	movs	r0, #0
    a02c:	e7a9      	b.n	9f82 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x126>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a02e:	2000      	movs	r0, #0
    a030:	e7b5      	b.n	9f9e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x142>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a032:	2000      	movs	r0, #0
    a034:	e7b8      	b.n	9fa8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a036:	2000      	movs	r0, #0
    a038:	e7c4      	b.n	9fc4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a03a:	2000      	movs	r0, #0
    a03c:	e7c7      	b.n	9fce <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x172>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a03e:	2000      	movs	r0, #0
    a040:	e7d3      	b.n	9fea <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a042:	2000      	movs	r0, #0
    a044:	e7d5      	b.n	9ff2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x196>
    a046:	bf00      	nop
    a048:	0001c380 	.word	0x0001c380
    a04c:	0001c328 	.word	0x0001c328
    a050:	0001be64 	.word	0x0001be64

0000a054 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
    a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a058:	b084      	sub	sp, #16
    a05a:	4604      	mov	r4, r0
    a05c:	4688      	mov	r8, r1
    a05e:	4615      	mov	r5, r2
    a060:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a062:	f00b ff21 	bl	15ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a066:	682b      	ldr	r3, [r5, #0]
    a068:	681b      	ldr	r3, [r3, #0]
    a06a:	2204      	movs	r2, #4
    a06c:	2118      	movs	r1, #24
    a06e:	4628      	mov	r0, r5
    a070:	4798      	blx	r3
    return new (allocated_memory) T();
    a072:	4606      	mov	r6, r0
    a074:	b130      	cbz	r0, a084 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x30>
    a076:	2300      	movs	r3, #0
    a078:	6003      	str	r3, [r0, #0]
    a07a:	6043      	str	r3, [r0, #4]
    a07c:	6083      	str	r3, [r0, #8]
    a07e:	60c3      	str	r3, [r0, #12]
    a080:	6103      	str	r3, [r0, #16]
    a082:	6143      	str	r3, [r0, #20]
    a084:	9502      	str	r5, [sp, #8]
    a086:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a088:	b336      	cbz	r6, a0d8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return data_ - ReadScalar<soffset_t>(data_);
    a08a:	4620      	mov	r0, r4
    a08c:	f00b f9a0 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a090:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a092:	4628      	mov	r0, r5
    a094:	f00b f9a2 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a098:	280a      	cmp	r0, #10
    a09a:	d92a      	bls.n	a0f2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    a09c:	f105 000a 	add.w	r0, r5, #10
    a0a0:	f00b f99c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0a4:	b338      	cbz	r0, a0f6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    a0a6:	4420      	add	r0, r4
    a0a8:	f00b fa61 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
    a0ac:	2801      	cmp	r0, #1
    a0ae:	d128      	bne.n	a102 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
    return data_ - ReadScalar<soffset_t>(data_);
    a0b0:	4620      	mov	r0, r4
    a0b2:	f00b f98d 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a0b6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a0b8:	4628      	mov	r0, r5
    a0ba:	f00b f98f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0be:	280c      	cmp	r0, #12
    a0c0:	d91b      	bls.n	a0fa <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a0c2:	f105 000c 	add.w	r0, r5, #12
    a0c6:	f00b f989 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a0ca:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a0cc:	b1b8      	cbz	r0, a0fe <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    a0ce:	4620      	mov	r0, r4
    a0d0:	f00b f978 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a0d4:	4404      	add	r4, r0
    a0d6:	e015      	b.n	a104 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    a0d8:	4b5a      	ldr	r3, [pc, #360]	; (a244 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    a0da:	9301      	str	r3, [sp, #4]
    a0dc:	f240 434d 	movw	r3, #1101	; 0x44d
    a0e0:	9300      	str	r3, [sp, #0]
    a0e2:	4b59      	ldr	r3, [pc, #356]	; (a248 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    a0e4:	4a59      	ldr	r2, [pc, #356]	; (a24c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f8>)
    a0e6:	4641      	mov	r1, r8
    a0e8:	4640      	mov	r0, r8
    a0ea:	f00b fefa 	bl	15ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a0ee:	2401      	movs	r4, #1
    a0f0:	e086      	b.n	a200 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0f2:	2000      	movs	r0, #0
    a0f4:	e7d6      	b.n	a0a4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0f6:	2000      	movs	r0, #0
    a0f8:	e7d8      	b.n	a0ac <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0fa:	2000      	movs	r0, #0
    a0fc:	e7e5      	b.n	a0ca <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a0fe:	2400      	movs	r4, #0
    a100:	e000      	b.n	a104 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    a102:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a104:	2c00      	cmp	r4, #0
    a106:	d077      	beq.n	a1f8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    a108:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a10a:	4620      	mov	r0, r4
    a10c:	f00b f960 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a110:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a112:	4620      	mov	r0, r4
    a114:	f00b f962 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a118:	2804      	cmp	r0, #4
    a11a:	d97b      	bls.n	a214 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c0>
    a11c:	1d20      	adds	r0, r4, #4
    a11e:	f00b f95d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a122:	2800      	cmp	r0, #0
    a124:	d078      	beq.n	a218 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c4>
    a126:	4428      	add	r0, r5
    a128:	f00b f95e 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    a12c:	b2c0      	uxtb	r0, r0
    a12e:	f00b feb2 	bl	15e96 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    a132:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    a134:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a136:	4628      	mov	r0, r5
    a138:	f00b f94a 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a13c:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a13e:	4620      	mov	r0, r4
    a140:	f00b f94c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a144:	2806      	cmp	r0, #6
    a146:	d969      	bls.n	a21c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    a148:	1da0      	adds	r0, r4, #6
    a14a:	f00b f947 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a14e:	2800      	cmp	r0, #0
    a150:	d066      	beq.n	a220 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1cc>
    a152:	4428      	add	r0, r5
    a154:	f00b f93c 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    a158:	6070      	str	r0, [r6, #4]
    a15a:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a15c:	4628      	mov	r0, r5
    a15e:	f00b f937 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a162:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a164:	4630      	mov	r0, r6
    a166:	f00b f939 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a16a:	2808      	cmp	r0, #8
    a16c:	d95a      	bls.n	a224 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    a16e:	f106 0008 	add.w	r0, r6, #8
    a172:	f00b f933 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a176:	2800      	cmp	r0, #0
    a178:	d056      	beq.n	a228 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d4>
    a17a:	4428      	add	r0, r5
    a17c:	f00b f928 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    a180:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    a182:	4628      	mov	r0, r5
    a184:	f00b f924 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a188:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a18a:	4630      	mov	r0, r6
    a18c:	f00b f926 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a190:	280a      	cmp	r0, #10
    a192:	d94b      	bls.n	a22c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d8>
    a194:	f106 000a 	add.w	r0, r6, #10
    a198:	f00b f920 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a19c:	2800      	cmp	r0, #0
    a19e:	d047      	beq.n	a230 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1dc>
    a1a0:	4428      	add	r0, r5
    a1a2:	f00b f921 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    a1a6:	b2c0      	uxtb	r0, r0
    a1a8:	f00b fe6b 	bl	15e82 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a1ac:	7320      	strb	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a1ae:	4628      	mov	r0, r5
    a1b0:	f00b f90e 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1b4:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1b6:	4630      	mov	r0, r6
    a1b8:	f00b f910 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1bc:	280c      	cmp	r0, #12
    a1be:	d939      	bls.n	a234 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e0>
    a1c0:	f106 000c 	add.w	r0, r6, #12
    a1c4:	f00b f90a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1c8:	2800      	cmp	r0, #0
    a1ca:	d035      	beq.n	a238 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
    a1cc:	4428      	add	r0, r5
    a1ce:	f00b f8ff 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    a1d2:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    a1d4:	4628      	mov	r0, r5
    a1d6:	f00b f8fb 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1da:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1dc:	4630      	mov	r0, r6
    a1de:	f00b f8fd 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1e2:	280e      	cmp	r0, #14
    a1e4:	d92a      	bls.n	a23c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e8>
    a1e6:	f106 000e 	add.w	r0, r6, #14
    a1ea:	f00b f8f7 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1ee:	b338      	cbz	r0, a240 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>
    a1f0:	4428      	add	r0, r5
    a1f2:	f00b f8ed 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    a1f6:	6160      	str	r0, [r4, #20]
    a1f8:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    a1fa:	2400      	movs	r4, #0
    a1fc:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a1fe:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    a200:	9903      	ldr	r1, [sp, #12]
    a202:	b119      	cbz	r1, a20c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b8>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a204:	9802      	ldr	r0, [sp, #8]
    a206:	6803      	ldr	r3, [r0, #0]
    a208:	685b      	ldr	r3, [r3, #4]
    a20a:	4798      	blx	r3
}
    a20c:	4620      	mov	r0, r4
    a20e:	b004      	add	sp, #16
    a210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a214:	2000      	movs	r0, #0
    a216:	e784      	b.n	a122 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a218:	2000      	movs	r0, #0
    a21a:	e787      	b.n	a12c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a21c:	2000      	movs	r0, #0
    a21e:	e796      	b.n	a14e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a220:	2000      	movs	r0, #0
    a222:	e799      	b.n	a158 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a224:	2000      	movs	r0, #0
    a226:	e7a6      	b.n	a176 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a228:	2000      	movs	r0, #0
    a22a:	e7a9      	b.n	a180 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a22c:	2000      	movs	r0, #0
    a22e:	e7b5      	b.n	a19c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x148>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a230:	2000      	movs	r0, #0
    a232:	e7b8      	b.n	a1a6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x152>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a234:	2000      	movs	r0, #0
    a236:	e7c7      	b.n	a1c8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x174>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a238:	2001      	movs	r0, #1
    a23a:	e7ca      	b.n	a1d2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a23c:	2000      	movs	r0, #0
    a23e:	e7d6      	b.n	a1ee <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a240:	2001      	movs	r0, #1
    a242:	e7d8      	b.n	a1f6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    a244:	0001c380 	.word	0x0001c380
    a248:	0001c328 	.word	0x0001c328
    a24c:	0001be64 	.word	0x0001be64

0000a250 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
    a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a254:	b084      	sub	sp, #16
    a256:	4604      	mov	r4, r0
    a258:	4688      	mov	r8, r1
    a25a:	4616      	mov	r6, r2
    a25c:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a25e:	f00b fe23 	bl	15ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a262:	6833      	ldr	r3, [r6, #0]
    a264:	681b      	ldr	r3, [r3, #0]
    a266:	2201      	movs	r2, #1
    a268:	2104      	movs	r1, #4
    a26a:	4630      	mov	r0, r6
    a26c:	4798      	blx	r3
    return new (allocated_memory) T();
    a26e:	4605      	mov	r5, r0
    a270:	b108      	cbz	r0, a276 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a272:	2300      	movs	r3, #0
    a274:	6003      	str	r3, [r0, #0]
    a276:	9602      	str	r6, [sp, #8]
    a278:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a27a:	b305      	cbz	r5, a2be <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return data_ - ReadScalar<soffset_t>(data_);
    a27c:	4620      	mov	r0, r4
    a27e:	f00b f8a7 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a282:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a284:	4630      	mov	r0, r6
    a286:	f00b f8a9 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a28a:	280a      	cmp	r0, #10
    a28c:	d924      	bls.n	a2d8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    a28e:	f106 000a 	add.w	r0, r6, #10
    a292:	f00b f8a3 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a296:	b308      	cbz	r0, a2dc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    a298:	4420      	add	r0, r4
    a29a:	f00b f968 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    a29e:	2808      	cmp	r0, #8
    a2a0:	d128      	bne.n	a2f4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a2a2:	4620      	mov	r0, r4
    a2a4:	f00b f894 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a2a8:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a2aa:	4630      	mov	r0, r6
    a2ac:	f00b f896 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2b0:	280c      	cmp	r0, #12
    a2b2:	d915      	bls.n	a2e0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    a2b4:	f106 000c 	add.w	r0, r6, #12
    a2b8:	f00b f890 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a2bc:	e011      	b.n	a2e2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    a2be:	4b4c      	ldr	r3, [pc, #304]	; (a3f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a0>)
    a2c0:	9301      	str	r3, [sp, #4]
    a2c2:	f240 531d 	movw	r3, #1309	; 0x51d
    a2c6:	9300      	str	r3, [sp, #0]
    a2c8:	4b4a      	ldr	r3, [pc, #296]	; (a3f4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>)
    a2ca:	4a4b      	ldr	r2, [pc, #300]	; (a3f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a8>)
    a2cc:	4641      	mov	r1, r8
    a2ce:	4640      	mov	r0, r8
    a2d0:	f00b fe07 	bl	15ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a2d4:	2401      	movs	r4, #1
    a2d6:	e07d      	b.n	a3d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
    a2d8:	2000      	movs	r0, #0
    a2da:	e7dc      	b.n	a296 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2dc:	2000      	movs	r0, #0
    a2de:	e7de      	b.n	a29e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2e0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    a2e2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a2e4:	b120      	cbz	r0, a2f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a2e6:	4620      	mov	r0, r4
    a2e8:	f00b f86c 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a2ec:	4404      	add	r4, r0
    a2ee:	e002      	b.n	a2f6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a2f0:	2400      	movs	r4, #0
    a2f2:	e000      	b.n	a2f6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a2f4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a2f6:	2c00      	cmp	r4, #0
    a2f8:	d069      	beq.n	a3ce <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    a2fa:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a2fc:	4620      	mov	r0, r4
    a2fe:	f00b f867 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a302:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a304:	4620      	mov	r0, r4
    a306:	f00b f869 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a30a:	2804      	cmp	r0, #4
    a30c:	d903      	bls.n	a316 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    a30e:	1d20      	adds	r0, r4, #4
    a310:	f00b f864 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a314:	e000      	b.n	a318 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    a316:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a318:	b118      	cbz	r0, a322 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    a31a:	4430      	add	r0, r6
    a31c:	f00b f864 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a320:	e000      	b.n	a324 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    a322:	2000      	movs	r0, #0
        ConvertActivation(schema_params->fused_activation_function());
    a324:	b2c0      	uxtb	r0, r0
    a326:	f00b fdac 	bl	15e82 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a32a:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    a32c:	4630      	mov	r0, r6
    a32e:	f00b f84f 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a332:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a334:	4620      	mov	r0, r4
    a336:	f00b f851 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a33a:	2808      	cmp	r0, #8
    a33c:	d904      	bls.n	a348 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    a33e:	f104 0008 	add.w	r0, r4, #8
    a342:	f00b f84b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a346:	e000      	b.n	a34a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    a348:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a34a:	b118      	cbz	r0, a354 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    a34c:	4430      	add	r0, r6
    a34e:	f00b f90e 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a352:	e000      	b.n	a356 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    a354:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    a356:	3800      	subs	r0, #0
    a358:	bf18      	it	ne
    a35a:	2001      	movne	r0, #1
    params->keep_num_dims = schema_params->keep_num_dims();
    a35c:	70a8      	strb	r0, [r5, #2]
    return data_ - ReadScalar<soffset_t>(data_);
    a35e:	4630      	mov	r0, r6
    a360:	f00b f836 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a364:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a366:	4620      	mov	r0, r4
    a368:	f00b f838 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a36c:	280a      	cmp	r0, #10
    a36e:	d904      	bls.n	a37a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    a370:	f104 000a 	add.w	r0, r4, #10
    a374:	f00b f832 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a378:	e000      	b.n	a37c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    a37a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a37c:	b118      	cbz	r0, a386 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
    a37e:	4430      	add	r0, r6
    a380:	f00b f8f5 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a384:	e000      	b.n	a388 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    a386:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    a388:	3800      	subs	r0, #0
    a38a:	bf18      	it	ne
    a38c:	2001      	movne	r0, #1
    params->asymmetric_quantize_inputs =
    a38e:	70e8      	strb	r0, [r5, #3]
    return data_ - ReadScalar<soffset_t>(data_);
    a390:	4630      	mov	r0, r6
    a392:	f00b f81d 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a396:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a398:	4620      	mov	r0, r4
    a39a:	f00b f81f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a39e:	2806      	cmp	r0, #6
    a3a0:	d903      	bls.n	a3aa <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    a3a2:	1da0      	adds	r0, r4, #6
    a3a4:	f00b f81a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a3a8:	e000      	b.n	a3ac <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15c>
    a3aa:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3ac:	b118      	cbz	r0, a3b6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x166>
    a3ae:	4430      	add	r0, r6
    a3b0:	f00b f81a 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a3b4:	e000      	b.n	a3b8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    a3b6:	2000      	movs	r0, #0
    switch (schema_params->weights_format()) {
    a3b8:	b138      	cbz	r0, a3ca <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17a>
    a3ba:	2801      	cmp	r0, #1
    a3bc:	d014      	beq.n	a3e8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198>
        TF_LITE_REPORT_ERROR(error_reporter,
    a3be:	490f      	ldr	r1, [pc, #60]	; (a3fc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>)
    a3c0:	4640      	mov	r0, r8
    a3c2:	f00b fd7f 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    a3c6:	2401      	movs	r4, #1
    a3c8:	e004      	b.n	a3d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    a3ca:	2300      	movs	r3, #0
    a3cc:	706b      	strb	r3, [r5, #1]
	_M_t._M_ptr() = pointer();
    a3ce:	2400      	movs	r4, #0
    a3d0:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a3d2:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    a3d4:	9903      	ldr	r1, [sp, #12]
    a3d6:	b119      	cbz	r1, a3e0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x190>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a3d8:	9802      	ldr	r0, [sp, #8]
    a3da:	6803      	ldr	r3, [r0, #0]
    a3dc:	685b      	ldr	r3, [r3, #4]
    a3de:	4798      	blx	r3
}
    a3e0:	4620      	mov	r0, r4
    a3e2:	b004      	add	sp, #16
    a3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->weights_format =
    a3e8:	2301      	movs	r3, #1
    a3ea:	706b      	strb	r3, [r5, #1]
        break;
    a3ec:	e7ef      	b.n	a3ce <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    a3ee:	bf00      	nop
    a3f0:	0001c380 	.word	0x0001c380
    a3f4:	0001c328 	.word	0x0001c328
    a3f8:	0001be64 	.word	0x0001be64
    a3fc:	0001c39c 	.word	0x0001c39c

0000a400 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
    a400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a404:	b084      	sub	sp, #16
    a406:	4604      	mov	r4, r0
    a408:	4688      	mov	r8, r1
    a40a:	4615      	mov	r5, r2
    a40c:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a40e:	f00b fd4b 	bl	15ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a412:	682b      	ldr	r3, [r5, #0]
    a414:	681b      	ldr	r3, [r3, #0]
    a416:	2204      	movs	r2, #4
    a418:	211c      	movs	r1, #28
    a41a:	4628      	mov	r0, r5
    a41c:	4798      	blx	r3
    return new (allocated_memory) T();
    a41e:	4606      	mov	r6, r0
    a420:	b138      	cbz	r0, a432 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x32>
    a422:	2300      	movs	r3, #0
    a424:	6003      	str	r3, [r0, #0]
    a426:	6043      	str	r3, [r0, #4]
    a428:	6083      	str	r3, [r0, #8]
    a42a:	60c3      	str	r3, [r0, #12]
    a42c:	6103      	str	r3, [r0, #16]
    a42e:	6143      	str	r3, [r0, #20]
    a430:	6183      	str	r3, [r0, #24]
    a432:	9502      	str	r5, [sp, #8]
    a434:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a436:	b336      	cbz	r6, a486 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x86>
    return data_ - ReadScalar<soffset_t>(data_);
    a438:	4620      	mov	r0, r4
    a43a:	f00a ffc9 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a43e:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a440:	4628      	mov	r0, r5
    a442:	f00a ffcb 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a446:	280a      	cmp	r0, #10
    a448:	d92a      	bls.n	a4a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a44a:	f105 000a 	add.w	r0, r5, #10
    a44e:	f00a ffc5 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a452:	b338      	cbz	r0, a4a4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    a454:	4420      	add	r0, r4
    a456:	f00b f88a 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
    a45a:	2802      	cmp	r0, #2
    a45c:	d128      	bne.n	a4b0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return data_ - ReadScalar<soffset_t>(data_);
    a45e:	4620      	mov	r0, r4
    a460:	f00a ffb6 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a464:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a466:	4628      	mov	r0, r5
    a468:	f00a ffb8 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a46c:	280c      	cmp	r0, #12
    a46e:	d91b      	bls.n	a4a8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    a470:	f105 000c 	add.w	r0, r5, #12
    a474:	f00a ffb2 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a478:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a47a:	b1b8      	cbz	r0, a4ac <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    a47c:	4620      	mov	r0, r4
    a47e:	f00a ffa1 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a482:	4404      	add	r4, r0
    a484:	e015      	b.n	a4b2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a486:	4b68      	ldr	r3, [pc, #416]	; (a628 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x228>)
    a488:	9301      	str	r3, [sp, #4]
    a48a:	f240 43a2 	movw	r3, #1186	; 0x4a2
    a48e:	9300      	str	r3, [sp, #0]
    a490:	4b66      	ldr	r3, [pc, #408]	; (a62c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22c>)
    a492:	4a67      	ldr	r2, [pc, #412]	; (a630 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x230>)
    a494:	4641      	mov	r1, r8
    a496:	4640      	mov	r0, r8
    a498:	f00b fd23 	bl	15ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a49c:	2401      	movs	r4, #1
    a49e:	e09c      	b.n	a5da <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4a0:	2000      	movs	r0, #0
    a4a2:	e7d6      	b.n	a452 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a4a4:	2000      	movs	r0, #0
    a4a6:	e7d8      	b.n	a45a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4a8:	2000      	movs	r0, #0
    a4aa:	e7e5      	b.n	a478 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a4ac:	2400      	movs	r4, #0
    a4ae:	e000      	b.n	a4b2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a4b0:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a4b2:	2c00      	cmp	r4, #0
    a4b4:	f000 808d 	beq.w	a5d2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    a4b8:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a4ba:	4620      	mov	r0, r4
    a4bc:	f00a ff88 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a4c0:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a4c2:	4620      	mov	r0, r4
    a4c4:	f00a ff8a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4c8:	2804      	cmp	r0, #4
    a4ca:	f240 8090 	bls.w	a5ee <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ee>
    a4ce:	1d20      	adds	r0, r4, #4
    a4d0:	f00a ff84 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a4d4:	2800      	cmp	r0, #0
    a4d6:	f000 808c 	beq.w	a5f2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
    a4da:	4428      	add	r0, r5
    a4dc:	f00a ff84 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    a4e0:	b2c0      	uxtb	r0, r0
    a4e2:	f00b fcd8 	bl	15e96 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    a4e6:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    a4e8:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a4ea:	4628      	mov	r0, r5
    a4ec:	f00a ff70 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a4f0:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a4f2:	4620      	mov	r0, r4
    a4f4:	f00a ff72 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4f8:	2806      	cmp	r0, #6
    a4fa:	d97c      	bls.n	a5f6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f6>
    a4fc:	1da0      	adds	r0, r4, #6
    a4fe:	f00a ff6d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a502:	2800      	cmp	r0, #0
    a504:	d079      	beq.n	a5fa <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fa>
    a506:	4428      	add	r0, r5
    a508:	f00a ff62 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    a50c:	6070      	str	r0, [r6, #4]
    a50e:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a510:	4628      	mov	r0, r5
    a512:	f00a ff5d 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a516:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a518:	4630      	mov	r0, r6
    a51a:	f00a ff5f 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a51e:	2808      	cmp	r0, #8
    a520:	d96d      	bls.n	a5fe <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fe>
    a522:	f106 0008 	add.w	r0, r6, #8
    a526:	f00a ff59 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a52a:	2800      	cmp	r0, #0
    a52c:	d069      	beq.n	a602 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x202>
    a52e:	4428      	add	r0, r5
    a530:	f00a ff4e 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    a534:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    a536:	4628      	mov	r0, r5
    a538:	f00a ff4a 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a53c:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a53e:	4630      	mov	r0, r6
    a540:	f00a ff4c 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a544:	280a      	cmp	r0, #10
    a546:	d95e      	bls.n	a606 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x206>
    a548:	f106 000a 	add.w	r0, r6, #10
    a54c:	f00a ff46 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a550:	2800      	cmp	r0, #0
    a552:	d05a      	beq.n	a60a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20a>
    a554:	4428      	add	r0, r5
    a556:	f00a ff3b 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->depth_multiplier = schema_params->depth_multiplier();
    a55a:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a55c:	4628      	mov	r0, r5
    a55e:	f00a ff37 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a562:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a564:	4630      	mov	r0, r6
    a566:	f00a ff39 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a56a:	280c      	cmp	r0, #12
    a56c:	d94f      	bls.n	a60e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20e>
    a56e:	f106 000c 	add.w	r0, r6, #12
    a572:	f00a ff33 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a576:	2800      	cmp	r0, #0
    a578:	d04b      	beq.n	a612 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x212>
    a57a:	4428      	add	r0, r5
    a57c:	f00a ff34 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    a580:	b2c0      	uxtb	r0, r0
    a582:	f00b fc7e 	bl	15e82 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a586:	7420      	strb	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    a588:	4628      	mov	r0, r5
    a58a:	f00a ff21 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a58e:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a590:	4630      	mov	r0, r6
    a592:	f00a ff23 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a596:	280e      	cmp	r0, #14
    a598:	d93d      	bls.n	a616 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x216>
    a59a:	f106 000e 	add.w	r0, r6, #14
    a59e:	f00a ff1d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5a2:	2800      	cmp	r0, #0
    a5a4:	d039      	beq.n	a61a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21a>
    a5a6:	4428      	add	r0, r5
    a5a8:	f00a ff12 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    a5ac:	6160      	str	r0, [r4, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    a5ae:	4628      	mov	r0, r5
    a5b0:	f00a ff0e 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a5b4:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a5b6:	4630      	mov	r0, r6
    a5b8:	f00a ff10 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5bc:	2810      	cmp	r0, #16
    a5be:	d92e      	bls.n	a61e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21e>
    a5c0:	f106 0010 	add.w	r0, r6, #16
    a5c4:	f00a ff0a 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5c8:	b358      	cbz	r0, a622 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x222>
    a5ca:	4428      	add	r0, r5
    a5cc:	f00a ff00 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    a5d0:	61a0      	str	r0, [r4, #24]
    a5d2:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    a5d4:	2400      	movs	r4, #0
    a5d6:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a5d8:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    a5da:	9903      	ldr	r1, [sp, #12]
    a5dc:	b119      	cbz	r1, a5e6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a5de:	9802      	ldr	r0, [sp, #8]
    a5e0:	6803      	ldr	r3, [r0, #0]
    a5e2:	685b      	ldr	r3, [r3, #4]
    a5e4:	4798      	blx	r3
}
    a5e6:	4620      	mov	r0, r4
    a5e8:	b004      	add	sp, #16
    a5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5ee:	2000      	movs	r0, #0
    a5f0:	e770      	b.n	a4d4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5f2:	2000      	movs	r0, #0
    a5f4:	e774      	b.n	a4e0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5f6:	2000      	movs	r0, #0
    a5f8:	e783      	b.n	a502 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5fa:	2000      	movs	r0, #0
    a5fc:	e786      	b.n	a50c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5fe:	2000      	movs	r0, #0
    a600:	e793      	b.n	a52a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a602:	2000      	movs	r0, #0
    a604:	e796      	b.n	a534 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a606:	2000      	movs	r0, #0
    a608:	e7a2      	b.n	a550 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a60a:	2000      	movs	r0, #0
    a60c:	e7a5      	b.n	a55a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a60e:	2000      	movs	r0, #0
    a610:	e7b1      	b.n	a576 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x176>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a612:	2000      	movs	r0, #0
    a614:	e7b4      	b.n	a580 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x180>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a616:	2000      	movs	r0, #0
    a618:	e7c3      	b.n	a5a2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a61a:	2001      	movs	r0, #1
    a61c:	e7c6      	b.n	a5ac <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a61e:	2000      	movs	r0, #0
    a620:	e7d2      	b.n	a5c8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a622:	2001      	movs	r0, #1
    a624:	e7d4      	b.n	a5d0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    a626:	bf00      	nop
    a628:	0001c380 	.word	0x0001c380
    a62c:	0001c328 	.word	0x0001c328
    a630:	0001be64 	.word	0x0001be64

0000a634 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a638:	b084      	sub	sp, #16
    a63a:	4604      	mov	r4, r0
    a63c:	4688      	mov	r8, r1
    a63e:	4615      	mov	r5, r2
    a640:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a642:	f00b fc31 	bl	15ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a646:	682b      	ldr	r3, [r5, #0]
    a648:	681b      	ldr	r3, [r3, #0]
    a64a:	2204      	movs	r2, #4
    a64c:	4611      	mov	r1, r2
    a64e:	4628      	mov	r0, r5
    a650:	4798      	blx	r3
    return new (allocated_memory) T();
    a652:	4606      	mov	r6, r0
    a654:	b108      	cbz	r0, a65a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a656:	2300      	movs	r3, #0
    a658:	6003      	str	r3, [r0, #0]
    a65a:	9502      	str	r5, [sp, #8]
    a65c:	9603      	str	r6, [sp, #12]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a65e:	b336      	cbz	r6, a6ae <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return data_ - ReadScalar<soffset_t>(data_);
    a660:	4620      	mov	r0, r4
    a662:	f00a feb5 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a666:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a668:	4628      	mov	r0, r5
    a66a:	f00a feb7 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a66e:	280a      	cmp	r0, #10
    a670:	d92a      	bls.n	a6c8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    a672:	f105 000a 	add.w	r0, r5, #10
    a676:	f00a feb1 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a67a:	b338      	cbz	r0, a6cc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    a67c:	4420      	add	r0, r4
    a67e:	f00a ff76 	bl	1556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    a682:	2809      	cmp	r0, #9
    a684:	d128      	bne.n	a6d8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a686:	4620      	mov	r0, r4
    a688:	f00a fea2 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a68c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a68e:	4628      	mov	r0, r5
    a690:	f00a fea4 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a694:	280c      	cmp	r0, #12
    a696:	d91b      	bls.n	a6d0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    a698:	f105 000c 	add.w	r0, r5, #12
    a69c:	f00a fe9e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a6a0:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a6a2:	b1b8      	cbz	r0, a6d4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a6a4:	4620      	mov	r0, r4
    a6a6:	f00a fe8d 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a6aa:	4404      	add	r4, r0
    a6ac:	e015      	b.n	a6da <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a6ae:	4b1d      	ldr	r3, [pc, #116]	; (a724 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
    a6b0:	9301      	str	r3, [sp, #4]
    a6b2:	f240 734c 	movw	r3, #1868	; 0x74c
    a6b6:	9300      	str	r3, [sp, #0]
    a6b8:	4b1b      	ldr	r3, [pc, #108]	; (a728 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
    a6ba:	4a1c      	ldr	r2, [pc, #112]	; (a72c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
    a6bc:	4641      	mov	r1, r8
    a6be:	4640      	mov	r0, r8
    a6c0:	f00b fc0f 	bl	15ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a6c4:	2401      	movs	r4, #1
    a6c6:	e01e      	b.n	a706 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a6c8:	2000      	movs	r0, #0
    a6ca:	e7d6      	b.n	a67a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a6cc:	2000      	movs	r0, #0
    a6ce:	e7d8      	b.n	a682 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a6d0:	2000      	movs	r0, #0
    a6d2:	e7e5      	b.n	a6a0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a6d4:	2400      	movs	r4, #0
    a6d6:	e000      	b.n	a6da <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a6d8:	2400      	movs	r4, #0

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    a6da:	b18c      	cbz	r4, a700 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return GetField<float>(VT_BETA, 0.0f);
    a6dc:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a6de:	4620      	mov	r0, r4
    a6e0:	f00a fe76 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a6e4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a6e6:	4620      	mov	r0, r4
    a6e8:	f00a fe78 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a6ec:	2804      	cmp	r0, #4
    a6ee:	d914      	bls.n	a71a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
    a6f0:	1d20      	adds	r0, r4, #4
    a6f2:	f00a fe73 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a6f6:	b190      	cbz	r0, a71e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xea>
    a6f8:	4428      	add	r0, r5
    a6fa:	f00a ff3f 	bl	1557c <_ZN11flatbuffers10ReadScalarIfEET_PKv>
    params->beta = schema_params->beta();
    a6fe:	6030      	str	r0, [r6, #0]
	_M_t._M_ptr() = pointer();
    a700:	2400      	movs	r4, #0
    a702:	9403      	str	r4, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    a704:	603e      	str	r6, [r7, #0]
	if (__ptr != nullptr)
    a706:	9903      	ldr	r1, [sp, #12]
    a708:	b119      	cbz	r1, a712 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xde>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a70a:	9802      	ldr	r0, [sp, #8]
    a70c:	6803      	ldr	r3, [r0, #0]
    a70e:	685b      	ldr	r3, [r3, #4]
    a710:	4798      	blx	r3
  return kTfLiteOk;
}
    a712:	4620      	mov	r0, r4
    a714:	b004      	add	sp, #16
    a716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a71a:	2000      	movs	r0, #0
    a71c:	e7eb      	b.n	a6f6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a71e:	2000      	movs	r0, #0
    a720:	e7ed      	b.n	a6fe <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    a722:	bf00      	nop
    a724:	0001c380 	.word	0x0001c380
    a728:	0001c328 	.word	0x0001c328
    a72c:	0001be64 	.word	0x0001be64

0000a730 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    a730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a734:	4604      	mov	r4, r0
    a736:	4688      	mov	r8, r1
    a738:	4691      	mov	r9, r2
    a73a:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    a73c:	2300      	movs	r3, #0
    a73e:	6033      	str	r3, [r6, #0]
  auto builtin_code = GetBuiltinCode(opcode);
    a740:	f00b fbde 	bl	15f00 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    a744:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    a746:	4620      	mov	r0, r4
    a748:	f00a fe42 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a74c:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a74e:	4638      	mov	r0, r7
    a750:	f00a fe44 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a754:	2808      	cmp	r0, #8
    a756:	d904      	bls.n	a762 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    a758:	f107 0008 	add.w	r0, r7, #8
    a75c:	f00a fe3e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a760:	e000      	b.n	a764 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x34>
    a762:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a764:	b120      	cbz	r0, a770 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
    a766:	4420      	add	r0, r4
    a768:	f00a fe32 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a76c:	4607      	mov	r7, r0
    a76e:	e000      	b.n	a772 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    a770:	2701      	movs	r7, #1
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    a772:	2d91      	cmp	r5, #145	; 0x91
    a774:	d80d      	bhi.n	a792 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    a776:	2d20      	cmp	r5, #32
    a778:	d01c      	beq.n	a7b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
    *registration = op_resolver.FindOp(builtin_code, version);
    a77a:	f8d8 3000 	ldr.w	r3, [r8]
    a77e:	681b      	ldr	r3, [r3, #0]
    a780:	463a      	mov	r2, r7
    a782:	4629      	mov	r1, r5
    a784:	4640      	mov	r0, r8
    a786:	4798      	blx	r3
    a788:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a78a:	b148      	cbz	r0, a7a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x70>
  TfLiteStatus status = kTfLiteOk;
    a78c:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    a78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(
    a792:	462a      	mov	r2, r5
    a794:	491c      	ldr	r1, [pc, #112]	; (a808 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd8>)
    a796:	4648      	mov	r0, r9
    a798:	f00b fb94 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a79c:	2001      	movs	r0, #1
    a79e:	e7f6      	b.n	a78e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      TF_LITE_REPORT_ERROR(
    a7a0:	463b      	mov	r3, r7
    a7a2:	4a1a      	ldr	r2, [pc, #104]	; (a80c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>)
    a7a4:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    a7a8:	4919      	ldr	r1, [pc, #100]	; (a810 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
    a7aa:	4648      	mov	r0, r9
    a7ac:	f00b fb8a 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    a7b0:	2001      	movs	r0, #1
    a7b2:	e7ec      	b.n	a78e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return data_ - ReadScalar<soffset_t>(data_);
    a7b4:	4620      	mov	r0, r4
    a7b6:	f00a fe0b 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a7ba:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a7bc:	4628      	mov	r0, r5
    a7be:	f00a fe0d 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a7c2:	2806      	cmp	r0, #6
    a7c4:	d914      	bls.n	a7f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>
    a7c6:	1da8      	adds	r0, r5, #6
    a7c8:	f00a fe08 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a7cc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a7ce:	b188      	cbz	r0, a7f4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>
    a7d0:	4620      	mov	r0, r4
    a7d2:	f00a fdf7 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a7d6:	1821      	adds	r1, r4, r0
  } else if (!opcode->custom_code()) {
    a7d8:	b171      	cbz	r1, a7f8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>
    *registration = op_resolver.FindOp(name, version);
    a7da:	f8d8 3000 	ldr.w	r3, [r8]
    a7de:	685b      	ldr	r3, [r3, #4]
    a7e0:	463a      	mov	r2, r7
    a7e2:	3104      	adds	r1, #4
    a7e4:	4640      	mov	r0, r8
    a7e6:	4798      	blx	r3
    a7e8:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a7ea:	b158      	cbz	r0, a804 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  TfLiteStatus status = kTfLiteOk;
    a7ec:	2000      	movs	r0, #0
    a7ee:	e7ce      	b.n	a78e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a7f0:	2000      	movs	r0, #0
    a7f2:	e7eb      	b.n	a7cc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a7f4:	2100      	movs	r1, #0
    a7f6:	e7ef      	b.n	a7d8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
    TF_LITE_REPORT_ERROR(
    a7f8:	4906      	ldr	r1, [pc, #24]	; (a814 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
    a7fa:	4648      	mov	r0, r9
    a7fc:	f00b fb62 	bl	15ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a800:	2001      	movs	r0, #1
    a802:	e7c4      	b.n	a78e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      status = kTfLiteError;
    a804:	2001      	movs	r0, #1
    a806:	e7c2      	b.n	a78e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    a808:	0001c3c8 	.word	0x0001c3c8
    a80c:	0001b110 	.word	0x0001b110
    a810:	0001c41c 	.word	0x0001c41c
    a814:	0001c4c0 	.word	0x0001c4c0

0000a818 <_ZN6tflite3ops5micro12Register_ADDEv>:
  return kTfLiteOk;
}

}  // namespace add

TfLiteRegistration Register_ADD() {
    a818:	b470      	push	{r4, r5, r6}
    a81a:	4606      	mov	r6, r0
          /*prepare=*/add::Prepare,
          /*invoke=*/add::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    a81c:	4604      	mov	r4, r0
    a81e:	4d05      	ldr	r5, [pc, #20]	; (a834 <_ZN6tflite3ops5micro12Register_ADDEv+0x1c>)
    a820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    a82c:	4630      	mov	r0, r6
    a82e:	bc70      	pop	{r4, r5, r6}
    a830:	4770      	bx	lr
    a832:	bf00      	nop
    a834:	00019a40 	.word	0x00019a40

0000a838 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    a838:	2801      	cmp	r0, #1
    a83a:	d009      	beq.n	a850 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x18>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    a83c:	2803      	cmp	r0, #3
    a83e:	d00c      	beq.n	a85a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x22>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    a840:	2802      	cmp	r0, #2
    a842:	d00f      	beq.n	a864 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    a844:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    a848:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a84a:	4b09      	ldr	r3, [pc, #36]	; (a870 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a84c:	6013      	str	r3, [r2, #0]
  }
}
    a84e:	4770      	bx	lr
    *activation_min = 0;
    a850:	2300      	movs	r3, #0
    a852:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a854:	4b06      	ldr	r3, [pc, #24]	; (a870 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a856:	6013      	str	r3, [r2, #0]
    a858:	4770      	bx	lr
    *activation_min = 0;
    a85a:	2300      	movs	r3, #0
    a85c:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    a85e:	4b05      	ldr	r3, [pc, #20]	; (a874 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x3c>)
    a860:	6013      	str	r3, [r2, #0]
    a862:	4770      	bx	lr
    *activation_min = -1;
    a864:	4b04      	ldr	r3, [pc, #16]	; (a878 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x40>)
    a866:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    a868:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    a86c:	6013      	str	r3, [r2, #0]
    a86e:	4770      	bx	lr
    a870:	7f7fffff 	.word	0x7f7fffff
    a874:	40c00000 	.word	0x40c00000
    a878:	bf800000 	.word	0xbf800000

0000a87c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a87c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a87e:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->user_data != nullptr);
    a880:	690b      	ldr	r3, [r1, #16]
    a882:	b303      	cbz	r3, a8c6 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    a884:	4605      	mov	r5, r0
    a886:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a888:	694b      	ldr	r3, [r1, #20]
    a88a:	b1f3      	cbz	r3, a8ca <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    a88c:	2200      	movs	r2, #0
    a88e:	f00b faad 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input1 != nullptr);
    a892:	4606      	mov	r6, r0
    a894:	b1d8      	cbz	r0, a8ce <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
    a896:	2201      	movs	r2, #1
    a898:	4621      	mov	r1, r4
    a89a:	4628      	mov	r0, r5
    a89c:	f00b faa6 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input2 != nullptr);
    a8a0:	4607      	mov	r7, r0
    a8a2:	b1f0      	cbz	r0, a8e2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    a8a4:	2200      	movs	r2, #0
    a8a6:	4621      	mov	r1, r4
    a8a8:	4628      	mov	r0, r5
    a8aa:	f00b fabe 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    a8ae:	b310      	cbz	r0, a8f6 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
  OpData* data = static_cast<OpData*>(node->user_data);
    a8b0:	6922      	ldr	r2, [r4, #16]
  TF_LITE_ENSURE_STATUS(
    a8b2:	9201      	str	r2, [sp, #4]
    a8b4:	9000      	str	r0, [sp, #0]
    a8b6:	463b      	mov	r3, r7
    a8b8:	4632      	mov	r2, r6
    a8ba:	6961      	ldr	r1, [r4, #20]
    a8bc:	4628      	mov	r0, r5
    a8be:	f00b fb98 	bl	15ff2 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
}
    a8c2:	b003      	add	sp, #12
    a8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    a8c6:	f00e f8ed 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a8ca:	f00e f8eb 	bl	18aa4 <abort>
  TF_LITE_ENSURE(context, input1 != nullptr);
    a8ce:	696c      	ldr	r4, [r5, #20]
    a8d0:	4b0e      	ldr	r3, [pc, #56]	; (a90c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    a8d2:	9300      	str	r3, [sp, #0]
    a8d4:	23d5      	movs	r3, #213	; 0xd5
    a8d6:	4a0e      	ldr	r2, [pc, #56]	; (a910 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a8d8:	490e      	ldr	r1, [pc, #56]	; (a914 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a8da:	4628      	mov	r0, r5
    a8dc:	47a0      	blx	r4
    a8de:	2001      	movs	r0, #1
    a8e0:	e7ef      	b.n	a8c2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
  TF_LITE_ENSURE(context, input2 != nullptr);
    a8e2:	696c      	ldr	r4, [r5, #20]
    a8e4:	4b0c      	ldr	r3, [pc, #48]	; (a918 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    a8e6:	9300      	str	r3, [sp, #0]
    a8e8:	23d7      	movs	r3, #215	; 0xd7
    a8ea:	4a09      	ldr	r2, [pc, #36]	; (a910 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a8ec:	4909      	ldr	r1, [pc, #36]	; (a914 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a8ee:	4628      	mov	r0, r5
    a8f0:	47a0      	blx	r4
    a8f2:	2001      	movs	r0, #1
    a8f4:	e7e5      	b.n	a8c2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
  TF_LITE_ENSURE(context, output != nullptr);
    a8f6:	696c      	ldr	r4, [r5, #20]
    a8f8:	4b08      	ldr	r3, [pc, #32]	; (a91c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
    a8fa:	9300      	str	r3, [sp, #0]
    a8fc:	23d9      	movs	r3, #217	; 0xd9
    a8fe:	4a04      	ldr	r2, [pc, #16]	; (a910 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a900:	4904      	ldr	r1, [pc, #16]	; (a914 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a902:	4628      	mov	r0, r5
    a904:	47a0      	blx	r4
    a906:	2001      	movs	r0, #1
    a908:	e7db      	b.n	a8c2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
    a90a:	bf00      	nop
    a90c:	0001c544 	.word	0x0001c544
    a910:	0001c4f8 	.word	0x0001c4f8
    a914:	0001be64 	.word	0x0001be64
    a918:	0001c558 	.word	0x0001c558
    a91c:	0001c56c 	.word	0x0001c56c

0000a920 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>:
// This function is used for 8-bit as well as for 16-bit, but the accumulator
// is 32-bit for both cases. The overflow does not happen due to the
// choice of the shift (20 or 15, accordingly - see add.cc for more comments).
template <typename T>
inline typename std::enable_if<is_small_integer<T>::value, void>::type
BroadcastAdd4DSlow(const ArithmeticParams& params,
    a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a924:	b0ab      	sub	sp, #172	; 0xac
    a926:	9206      	str	r2, [sp, #24]
    a928:	461d      	mov	r5, r3
    a92a:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
      : size_(0) {
    a92c:	2300      	movs	r3, #0
    a92e:	9308      	str	r3, [sp, #32]
  inline int32_t DimensionsCount() const { return size_; }
    a930:	680b      	ldr	r3, [r1, #0]
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a932:	2b04      	cmp	r3, #4
    a934:	dc0e      	bgt.n	a954 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34>
    a936:	4607      	mov	r7, r0
    a938:	460e      	mov	r6, r1
    if (size_ > kMaxSmallSize) {
    a93a:	9b08      	ldr	r3, [sp, #32]
    a93c:	2b05      	cmp	r3, #5
    a93e:	dd03      	ble.n	a948 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28>
      delete[] dims_pointer_;
    a940:	9809      	ldr	r0, [sp, #36]	; 0x24
    a942:	b108      	cbz	r0, a948 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28>
    a944:	f00e f899 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
    a948:	2304      	movs	r3, #4
    a94a:	9308      	str	r3, [sp, #32]
  inline int32_t DimensionsCount() const { return size_; }
    a94c:	6830      	ldr	r0, [r6, #0]
    Resize(new_shape_size);
    const int size_increase = new_shape_size - shape.DimensionsCount();
    a94e:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    a950:	2300      	movs	r3, #0
    a952:	e00c      	b.n	a96e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x4e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a954:	f00e f8a6 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a958:	f00e f8a4 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a95c:	f00e f8a2 	bl	18aa4 <abort>
      dims_[i] = val;
    a960:	2101      	movs	r1, #1
    a962:	aa2a      	add	r2, sp, #168	; 0xa8
    a964:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a968:	f842 1c84 	str.w	r1, [r2, #-132]
    for (int i = 0; i < size_increase; ++i) {
    a96c:	3301      	adds	r3, #1
    a96e:	4298      	cmp	r0, r3
    a970:	dd0b      	ble.n	a98a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6a>
    TFLITE_DCHECK_GE(i, 0);
    a972:	2b00      	cmp	r3, #0
    a974:	dbf0      	blt.n	a958 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x38>
    TFLITE_DCHECK_LT(i, size_);
    a976:	9a08      	ldr	r2, [sp, #32]
    a978:	4293      	cmp	r3, r2
    a97a:	daef      	bge.n	a95c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3c>
    if (size_ > kMaxSmallSize) {
    a97c:	2a05      	cmp	r2, #5
    a97e:	ddef      	ble.n	a960 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x40>
      dims_pointer_[i] = val;
    a980:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a982:	2101      	movs	r1, #1
    a984:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a988:	e7f0      	b.n	a96c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x4c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a98a:	9b08      	ldr	r3, [sp, #32]
    a98c:	2b05      	cmp	r3, #5
    a98e:	dd01      	ble.n	a994 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x74>
    a990:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a992:	e000      	b.n	a996 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76>
    a994:	ab09      	add	r3, sp, #36	; 0x24
      SetDim(i, pad_value);
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a996:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a99a:	6832      	ldr	r2, [r6, #0]
    a99c:	2a05      	cmp	r2, #5
    a99e:	dd15      	ble.n	a9cc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xac>
    a9a0:	6871      	ldr	r1, [r6, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a9a2:	0092      	lsls	r2, r2, #2
    a9a4:	f00e f8a5 	bl	18af2 <memcpy>
      : size_(0) {
    a9a8:	2300      	movs	r3, #0
    a9aa:	930e      	str	r3, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
    a9ac:	682b      	ldr	r3, [r5, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a9ae:	2b04      	cmp	r3, #4
    a9b0:	dc0e      	bgt.n	a9d0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb0>
    if (size_ > kMaxSmallSize) {
    a9b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a9b4:	2b05      	cmp	r3, #5
    a9b6:	dd03      	ble.n	a9c0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xa0>
      delete[] dims_pointer_;
    a9b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a9ba:	b108      	cbz	r0, a9c0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xa0>
    a9bc:	f00e f85d 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
    a9c0:	2304      	movs	r3, #4
    a9c2:	930e      	str	r3, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
    a9c4:	6828      	ldr	r0, [r5, #0]
    const int size_increase = new_shape_size - shape.DimensionsCount();
    a9c6:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    a9c8:	2300      	movs	r3, #0
    a9ca:	e00e      	b.n	a9ea <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xca>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a9cc:	1d31      	adds	r1, r6, #4
    a9ce:	e7e8      	b.n	a9a2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x82>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a9d0:	f00e f868 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a9d4:	f00e f866 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a9d8:	f00e f864 	bl	18aa4 <abort>
      dims_[i] = val;
    a9dc:	2101      	movs	r1, #1
    a9de:	aa2a      	add	r2, sp, #168	; 0xa8
    a9e0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a9e4:	f842 1c6c 	str.w	r1, [r2, #-108]
    for (int i = 0; i < size_increase; ++i) {
    a9e8:	3301      	adds	r3, #1
    a9ea:	4298      	cmp	r0, r3
    a9ec:	dd0b      	ble.n	aa06 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xe6>
    TFLITE_DCHECK_GE(i, 0);
    a9ee:	2b00      	cmp	r3, #0
    a9f0:	dbf0      	blt.n	a9d4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    a9f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a9f4:	4293      	cmp	r3, r2
    a9f6:	daef      	bge.n	a9d8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb8>
    if (size_ > kMaxSmallSize) {
    a9f8:	2a05      	cmp	r2, #5
    a9fa:	ddef      	ble.n	a9dc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xbc>
      dims_pointer_[i] = val;
    a9fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a9fe:	2101      	movs	r1, #1
    aa00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    aa04:	e7f0      	b.n	a9e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xc8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aa06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aa08:	2b05      	cmp	r3, #5
    aa0a:	dd0c      	ble.n	aa26 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x106>
    aa0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    aa0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aa12:	682a      	ldr	r2, [r5, #0]
    aa14:	2a05      	cmp	r2, #5
    aa16:	dd08      	ble.n	aa2a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x10a>
    aa18:	6869      	ldr	r1, [r5, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    aa1a:	0092      	lsls	r2, r2, #2
    aa1c:	f00e f869 	bl	18af2 <memcpy>
// Copies dims to desc, calculating strides.
template <int N>
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
                           NdArrayDesc<N>* desc_out) {
  int desc_stride = 1;
  for (int i = N - 1; i >= 0; --i) {
    aa20:	2303      	movs	r3, #3
  int desc_stride = 1;
    aa22:	2101      	movs	r1, #1
                sizeof(int32_t) * shape.DimensionsCount());
  }
    aa24:	e019      	b.n	aa5a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aa26:	ab0f      	add	r3, sp, #60	; 0x3c
    aa28:	e7f1      	b.n	aa0e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xee>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aa2a:	1d29      	adds	r1, r5, #4
    aa2c:	e7f5      	b.n	aa1a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xfa>
    TFLITE_DCHECK_GE(i, 0);
    aa2e:	f00e f839 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aa32:	f00e f837 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa36:	aa2a      	add	r2, sp, #168	; 0xa8
    aa38:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aa3c:	f852 2c84 	ldr.w	r2, [r2, #-132]
    aa40:	e016      	b.n	aa70 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x150>
    TFLITE_DCHECK_GE(i, 0);
    aa42:	f00e f82f 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aa46:	f00e f82d 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa4a:	aa2a      	add	r2, sp, #168	; 0xa8
    aa4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aa50:	f852 2c84 	ldr.w	r2, [r2, #-132]
    desc_out->extents[i] = input_shape.Dims(i);
    desc_out->strides[i] = desc_stride;
    desc_stride *= input_shape.Dims(i);
    aa54:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
    aa58:	3b01      	subs	r3, #1
    aa5a:	2b00      	cmp	r3, #0
    aa5c:	db1e      	blt.n	aa9c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x17c>
    TFLITE_DCHECK_GE(i, 0);
    aa5e:	dbe6      	blt.n	aa2e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    aa60:	9a08      	ldr	r2, [sp, #32]
    aa62:	4293      	cmp	r3, r2
    aa64:	dae5      	bge.n	aa32 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa66:	2a05      	cmp	r2, #5
    aa68:	dde5      	ble.n	aa36 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x116>
    aa6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    aa70:	a82a      	add	r0, sp, #168	; 0xa8
    aa72:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    aa76:	f840 2c20 	str.w	r2, [r0, #-32]
    desc_out->strides[i] = desc_stride;
    aa7a:	1d1a      	adds	r2, r3, #4
    aa7c:	a82a      	add	r0, sp, #168	; 0xa8
    aa7e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    aa82:	f842 1c20 	str.w	r1, [r2, #-32]
    TFLITE_DCHECK_GE(i, 0);
    aa86:	2b00      	cmp	r3, #0
    aa88:	dbdb      	blt.n	aa42 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x122>
    TFLITE_DCHECK_LT(i, size_);
    aa8a:	9a08      	ldr	r2, [sp, #32]
    aa8c:	4293      	cmp	r3, r2
    aa8e:	dada      	bge.n	aa46 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x126>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa90:	2a05      	cmp	r2, #5
    aa92:	ddda      	ble.n	aa4a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x12a>
    aa94:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    aa9a:	e7db      	b.n	aa54 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x134>
  for (int i = N - 1; i >= 0; --i) {
    aa9c:	2303      	movs	r3, #3
  int desc_stride = 1;
    aa9e:	2101      	movs	r1, #1
    aaa0:	e015      	b.n	aace <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1ae>
    TFLITE_DCHECK_GE(i, 0);
    aaa2:	f00d ffff 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aaa6:	f00d fffd 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aaaa:	aa2a      	add	r2, sp, #168	; 0xa8
    aaac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aab0:	f852 2c6c 	ldr.w	r2, [r2, #-108]
    aab4:	e016      	b.n	aae4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1c4>
    TFLITE_DCHECK_GE(i, 0);
    aab6:	f00d fff5 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aaba:	f00d fff3 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aabe:	aa2a      	add	r2, sp, #168	; 0xa8
    aac0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aac4:	f852 2c6c 	ldr.w	r2, [r2, #-108]
    desc_stride *= input_shape.Dims(i);
    aac8:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
    aacc:	3b01      	subs	r3, #1
    aace:	2b00      	cmp	r3, #0
    aad0:	db1e      	blt.n	ab10 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f0>
    TFLITE_DCHECK_GE(i, 0);
    aad2:	dbe6      	blt.n	aaa2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x182>
    TFLITE_DCHECK_LT(i, size_);
    aad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aad6:	4293      	cmp	r3, r2
    aad8:	dae5      	bge.n	aaa6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x186>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aada:	2a05      	cmp	r2, #5
    aadc:	dde5      	ble.n	aaaa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x18a>
    aade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    aae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    aae4:	a82a      	add	r0, sp, #168	; 0xa8
    aae6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    aaea:	f840 2c40 	str.w	r2, [r0, #-64]
    desc_out->strides[i] = desc_stride;
    aaee:	1d1a      	adds	r2, r3, #4
    aaf0:	a82a      	add	r0, sp, #168	; 0xa8
    aaf2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    aaf6:	f842 1c40 	str.w	r1, [r2, #-64]
    TFLITE_DCHECK_GE(i, 0);
    aafa:	2b00      	cmp	r3, #0
    aafc:	dbdb      	blt.n	aab6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x196>
    TFLITE_DCHECK_LT(i, size_);
    aafe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ab00:	4293      	cmp	r3, r2
    ab02:	dada      	bge.n	aaba <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x19a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab04:	2a05      	cmp	r2, #5
    ab06:	ddda      	ble.n	aabe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x19e>
    ab08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ab0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ab0e:	e7db      	b.n	aac8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1a8>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
    ab10:	2300      	movs	r3, #0
    ab12:	e020      	b.n	ab56 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x236>
    TFLITE_DCHECK_GE(i, 0);
    ab14:	f00d ffc6 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ab18:	f00d ffc4 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab1c:	aa2a      	add	r2, sp, #168	; 0xa8
    ab1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ab22:	f852 2c84 	ldr.w	r2, [r2, #-132]
    ab26:	e022      	b.n	ab6e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x24e>
    TFLITE_DCHECK_GE(i, 0);
    ab28:	f00d ffbc 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ab2c:	f00d ffba 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab30:	a92a      	add	r1, sp, #168	; 0xa8
    ab32:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    ab36:	f851 1c6c 	ldr.w	r1, [r1, #-108]
    ab3a:	e022      	b.n	ab82 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x262>
    const int extent0 = extended_input0_shape.Dims(i);
    const int extent1 = extended_input1_shape.Dims(i);
    if (extent0 != extent1) {
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
    ab3c:	1d1a      	adds	r2, r3, #4
    ab3e:	a82a      	add	r0, sp, #168	; 0xa8
    ab40:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ab44:	2000      	movs	r0, #0
    ab46:	f842 0c20 	str.w	r0, [r2, #-32]
        desc0_out->extents[i] = extent1;
    ab4a:	aa2a      	add	r2, sp, #168	; 0xa8
    ab4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ab50:	f842 1c20 	str.w	r1, [r2, #-32]
  for (int i = 0; i < N; ++i) {
    ab54:	3301      	adds	r3, #1
    ab56:	2b03      	cmp	r3, #3
    ab58:	dc28      	bgt.n	abac <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28c>
    TFLITE_DCHECK_GE(i, 0);
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	dbda      	blt.n	ab14 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f4>
    TFLITE_DCHECK_LT(i, size_);
    ab5e:	9a08      	ldr	r2, [sp, #32]
    ab60:	4293      	cmp	r3, r2
    ab62:	dad9      	bge.n	ab18 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab64:	2a05      	cmp	r2, #5
    ab66:	ddd9      	ble.n	ab1c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1fc>
    ab68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    ab6e:	2b00      	cmp	r3, #0
    ab70:	dbda      	blt.n	ab28 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x208>
    TFLITE_DCHECK_LT(i, size_);
    ab72:	990e      	ldr	r1, [sp, #56]	; 0x38
    ab74:	428b      	cmp	r3, r1
    ab76:	dad9      	bge.n	ab2c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x20c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab78:	2905      	cmp	r1, #5
    ab7a:	ddd9      	ble.n	ab30 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x210>
    ab7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ab7e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
    ab82:	4291      	cmp	r1, r2
    ab84:	d0e6      	beq.n	ab54 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x234>
      if (extent0 == 1) {
    ab86:	2a01      	cmp	r2, #1
    ab88:	d0d8      	beq.n	ab3c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x21c>
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
    ab8a:	2901      	cmp	r1, #1
    ab8c:	d10c      	bne.n	aba8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x288>
        desc1_out->strides[i] = 0;
    ab8e:	1d19      	adds	r1, r3, #4
    ab90:	a82a      	add	r0, sp, #168	; 0xa8
    ab92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ab96:	2000      	movs	r0, #0
    ab98:	f841 0c40 	str.w	r0, [r1, #-64]
        desc1_out->extents[i] = extent0;
    ab9c:	a92a      	add	r1, sp, #168	; 0xa8
    ab9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    aba2:	f841 2c40 	str.w	r2, [r1, #-64]
    aba6:	e7d5      	b.n	ab54 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x234>
        TFLITE_DCHECK_EQ(extent1, 1);
    aba8:	f00d ff7c 	bl	18aa4 <abort>
    if (size_ > kMaxSmallSize) {
    abac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    abae:	2b05      	cmp	r3, #5
    abb0:	dd03      	ble.n	abba <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x29a>
      delete[] dims_pointer_;
    abb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    abb4:	b108      	cbz	r0, abba <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x29a>
    abb6:	f00d ff60 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    abba:	9b08      	ldr	r3, [sp, #32]
    abbc:	2b05      	cmp	r3, #5
    abbe:	dd03      	ble.n	abc8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2a8>
      delete[] dims_pointer_;
    abc0:	9809      	ldr	r0, [sp, #36]	; 0x24
    abc2:	b108      	cbz	r0, abc8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2a8>
    abc4:	f00d ff59 	bl	18a7a <_ZdaPv>
      : size_(0) {
    abc8:	2300      	movs	r3, #0
    abca:	9314      	str	r3, [sp, #80]	; 0x50
  inline int32_t DimensionsCount() const { return size_; }
    abcc:	6823      	ldr	r3, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    abce:	2b04      	cmp	r3, #4
    abd0:	dc0c      	bgt.n	abec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2cc>
    if (size_ > kMaxSmallSize) {
    abd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    abd4:	2b05      	cmp	r3, #5
    abd6:	dd03      	ble.n	abe0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2c0>
      delete[] dims_pointer_;
    abd8:	9815      	ldr	r0, [sp, #84]	; 0x54
    abda:	b108      	cbz	r0, abe0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2c0>
    abdc:	f00d ff4d 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
    abe0:	2304      	movs	r3, #4
    abe2:	9314      	str	r3, [sp, #80]	; 0x50
  inline int32_t DimensionsCount() const { return size_; }
    abe4:	6820      	ldr	r0, [r4, #0]
    const int size_increase = new_shape_size - shape.DimensionsCount();
    abe6:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    abe8:	2300      	movs	r3, #0
    abea:	e00c      	b.n	ac06 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2e6>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    abec:	f00d ff5a 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    abf0:	f00d ff58 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    abf4:	f00d ff56 	bl	18aa4 <abort>
      dims_[i] = val;
    abf8:	2101      	movs	r1, #1
    abfa:	aa2a      	add	r2, sp, #168	; 0xa8
    abfc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ac00:	f842 1c54 	str.w	r1, [r2, #-84]
    for (int i = 0; i < size_increase; ++i) {
    ac04:	3301      	adds	r3, #1
    ac06:	4298      	cmp	r0, r3
    ac08:	dd0b      	ble.n	ac22 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x302>
    TFLITE_DCHECK_GE(i, 0);
    ac0a:	2b00      	cmp	r3, #0
    ac0c:	dbf0      	blt.n	abf0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d0>
    TFLITE_DCHECK_LT(i, size_);
    ac0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ac10:	4293      	cmp	r3, r2
    ac12:	daef      	bge.n	abf4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d4>
    if (size_ > kMaxSmallSize) {
    ac14:	2a05      	cmp	r2, #5
    ac16:	ddef      	ble.n	abf8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d8>
      dims_pointer_[i] = val;
    ac18:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ac1a:	2101      	movs	r1, #1
    ac1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    ac20:	e7f0      	b.n	ac04 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac22:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac24:	2b05      	cmp	r3, #5
    ac26:	dd1a      	ble.n	ac5e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x33e>
    ac28:	9b15      	ldr	r3, [sp, #84]	; 0x54
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    ac2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac2e:	6822      	ldr	r2, [r4, #0]
    ac30:	2a05      	cmp	r2, #5
    ac32:	dd16      	ble.n	ac62 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x342>
    ac34:	6861      	ldr	r1, [r4, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    ac36:	0092      	lsls	r2, r2, #2
    ac38:	f00d ff5b 	bl	18af2 <memcpy>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    ac3c:	2300      	movs	r3, #0
    ac3e:	9302      	str	r3, [sp, #8]
    ac40:	46ba      	mov	sl, r7
    TFLITE_DCHECK_LT(i, size_);
    ac42:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac44:	2b00      	cmp	r3, #0
    ac46:	dd0e      	ble.n	ac66 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x346>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac48:	2b05      	cmp	r3, #5
    ac4a:	dd0e      	ble.n	ac6a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34a>
    ac4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ac4e:	681b      	ldr	r3, [r3, #0]
    ac50:	9a02      	ldr	r2, [sp, #8]
    ac52:	429a      	cmp	r2, r3
    ac54:	f280 82be 	bge.w	b1d4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8b4>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    ac58:	2300      	movs	r3, #0
    ac5a:	9307      	str	r3, [sp, #28]
    ac5c:	e2a4      	b.n	b1a8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x888>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac5e:	ab15      	add	r3, sp, #84	; 0x54
    ac60:	e7e3      	b.n	ac2a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x30a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac62:	1d21      	adds	r1, r4, #4
    ac64:	e7e7      	b.n	ac36 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x316>
    TFLITE_DCHECK_LT(i, size_);
    ac66:	f00d ff1d 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ac6c:	e7f0      	b.n	ac50 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x330>
    TFLITE_DCHECK_LT(i, size_);
    ac6e:	f00d ff19 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac72:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ac74:	e2a1      	b.n	b1ba <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x89a>
    TFLITE_DCHECK_LT(i, size_);
    ac76:	f00d ff15 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ac7c:	e28b      	b.n	b196 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x876>
    TFLITE_DCHECK_LT(i, size_);
    ac7e:	f00d ff11 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac82:	9b18      	ldr	r3, [sp, #96]	; 0x60
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    ac84:	4599      	cmp	r9, r3
    ac86:	f280 827b 	bge.w	b180 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x860>
          const int32_t input1_val =
              params.input1_offset +
    ac8a:	f8db 2004 	ldr.w	r2, [fp, #4]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    ac8e:	9902      	ldr	r1, [sp, #8]
    ac90:	2900      	cmp	r1, #0
    ac92:	f2c0 81ef 	blt.w	b074 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x754>
    ac96:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ac98:	4299      	cmp	r1, r3
    ac9a:	f280 81eb 	bge.w	b074 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x754>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    ac9e:	f1ba 0f00 	cmp.w	sl, #0
    aca2:	f2c0 81e9 	blt.w	b078 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x758>
    aca6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    aca8:	459a      	cmp	sl, r3
    acaa:	f280 81e5 	bge.w	b078 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x758>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    acae:	f1b8 0f00 	cmp.w	r8, #0
    acb2:	f2c0 81e3 	blt.w	b07c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x75c>
    acb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    acb8:	4598      	cmp	r8, r3
    acba:	f280 81df 	bge.w	b07c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x75c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    acbe:	f1b9 0f00 	cmp.w	r9, #0
    acc2:	f2c0 81dd 	blt.w	b080 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x760>
    acc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    acc8:	4599      	cmp	r9, r3
    acca:	f280 81d9 	bge.w	b080 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x760>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    acce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    acd0:	fb03 f10a 	mul.w	r1, r3, sl
    acd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    acd6:	9d02      	ldr	r5, [sp, #8]
    acd8:	fb03 1305 	mla	r3, r3, r5, r1
    acdc:	9928      	ldr	r1, [sp, #160]	; 0xa0
    acde:	fb01 f008 	mul.w	r0, r1, r8
    ace2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    ace4:	fb01 0109 	mla	r1, r1, r9, r0
         i3 * desc.strides[3];
    ace8:	440b      	add	r3, r1
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
    acea:	9906      	ldr	r1, [sp, #24]
    acec:	f931 7013 	ldrsh.w	r7, [r1, r3, lsl #1]
          const int32_t input1_val =
    acf0:	443a      	add	r2, r7
          const int32_t input2_val =
              params.input2_offset +
    acf2:	f8db 4008 	ldr.w	r4, [fp, #8]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    acf6:	2d00      	cmp	r5, #0
    acf8:	f2c0 81c4 	blt.w	b084 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x764>
    acfc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    acfe:	429d      	cmp	r5, r3
    ad00:	f280 81c0 	bge.w	b084 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x764>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    ad04:	f1ba 0f00 	cmp.w	sl, #0
    ad08:	f2c0 81be 	blt.w	b088 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x768>
    ad0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ad0e:	459a      	cmp	sl, r3
    ad10:	f280 81ba 	bge.w	b088 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x768>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    ad14:	f1b8 0f00 	cmp.w	r8, #0
    ad18:	f2c0 81b8 	blt.w	b08c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76c>
    ad1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ad1e:	4598      	cmp	r8, r3
    ad20:	f280 81b4 	bge.w	b08c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    ad24:	f1b9 0f00 	cmp.w	r9, #0
    ad28:	f2c0 81b2 	blt.w	b090 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x770>
    ad2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ad2e:	4599      	cmp	r9, r3
    ad30:	f280 81ae 	bge.w	b090 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x770>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    ad34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ad36:	fb03 f30a 	mul.w	r3, r3, sl
    ad3a:	991e      	ldr	r1, [sp, #120]	; 0x78
    ad3c:	9802      	ldr	r0, [sp, #8]
    ad3e:	fb01 3300 	mla	r3, r1, r0, r3
    ad42:	9920      	ldr	r1, [sp, #128]	; 0x80
    ad44:	fb01 f008 	mul.w	r0, r1, r8
    ad48:	9921      	ldr	r1, [sp, #132]	; 0x84
    ad4a:	fb01 0109 	mla	r1, r1, r9, r0
         i3 * desc.strides[3];
    ad4e:	440b      	add	r3, r1
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
    ad50:	9934      	ldr	r1, [sp, #208]	; 0xd0
    ad52:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
          const int32_t input2_val =
    ad56:	441c      	add	r4, r3
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
    ad58:	f8db 3018 	ldr.w	r3, [fp, #24]
          const int32_t shifted_input1_val =
    ad5c:	fa02 f703 	lsl.w	r7, r2, r3
          const int32_t shifted_input2_val =
    ad60:	409c      	lsls	r4, r3
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
    ad62:	f8db c01c 	ldr.w	ip, [fp, #28]
                  params.input1_shift);
    ad66:	f8db 5020 	ldr.w	r5, [fp, #32]
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ad6a:	45bc      	cmp	ip, r7
    ad6c:	f000 8192 	beq.w	b094 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x774>
    ad70:	2600      	movs	r6, #0
  std::int64_t a_64(a);
    ad72:	17fb      	asrs	r3, r7, #31
  std::int64_t b_64(b);
    ad74:	4660      	mov	r0, ip
    ad76:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    ad78:	fb07 f101 	mul.w	r1, r7, r1
    ad7c:	fb0c 1103 	mla	r1, ip, r3, r1
    ad80:	fba7 230c 	umull	r2, r3, r7, ip
    ad84:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ad86:	2a00      	cmp	r2, #0
    ad88:	f173 0100 	sbcs.w	r1, r3, #0
    ad8c:	f2c0 8189 	blt.w	b0a2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x782>
    ad90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ad94:	1852      	adds	r2, r2, r1
    ad96:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ad9a:	4611      	mov	r1, r2
    ad9c:	4618      	mov	r0, r3
    ad9e:	2a00      	cmp	r2, #0
    ada0:	f173 0700 	sbcs.w	r7, r3, #0
    ada4:	f2c0 817f 	blt.w	b0a6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x786>
    ada8:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    adaa:	ea41 0740 	orr.w	r7, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    adae:	2e00      	cmp	r6, #0
    adb0:	f040 8181 	bne.w	b0b6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x796>
  return RoundingDivideByPOT(
    adb4:	426d      	negs	r5, r5

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    adb6:	2d00      	cmp	r5, #0
    adb8:	f2c0 8180 	blt.w	b0bc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x79c>
  assert(exponent <= 31);
    adbc:	2d1f      	cmp	r5, #31
    adbe:	f300 8184 	bgt.w	b0ca <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7aa>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    adc2:	2601      	movs	r6, #1
    adc4:	fa06 f005 	lsl.w	r0, r6, r5
    adc8:	3801      	subs	r0, #1
    adca:	f00b f8eb 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    adce:	9000      	str	r0, [sp, #0]
  const IntegerType zero = Dup<IntegerType>(0);
    add0:	2000      	movs	r0, #0
    add2:	f00b f8e7 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    add6:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    add8:	4630      	mov	r0, r6
    adda:	f00b f8e3 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    adde:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    ade0:	9900      	ldr	r1, [sp, #0]
    ade2:	4638      	mov	r0, r7
    ade4:	f00b f8df 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ade8:	9005      	str	r0, [sp, #20]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    adea:	4631      	mov	r1, r6
    adec:	9800      	ldr	r0, [sp, #0]
    adee:	f00b f8dc 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    adf2:	4606      	mov	r6, r0
    adf4:	9904      	ldr	r1, [sp, #16]
    adf6:	4638      	mov	r0, r7
    adf8:	f00b f8e3 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    adfc:	9903      	ldr	r1, [sp, #12]
    adfe:	f00b f8d2 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ae02:	4601      	mov	r1, r0
    ae04:	4630      	mov	r0, r6
    ae06:	f00b f8d2 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ae0a:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
    ae0c:	4629      	mov	r1, r5
    ae0e:	4638      	mov	r0, r7
    ae10:	f00b f8cb 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ae14:	4605      	mov	r5, r0
    ae16:	4631      	mov	r1, r6
    ae18:	9805      	ldr	r0, [sp, #20]
    ae1a:	f00b f8da 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ae1e:	9903      	ldr	r1, [sp, #12]
    ae20:	f00b f8c1 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ae24:	4601      	mov	r1, r0
    ae26:	4628      	mov	r0, r5
    ae28:	f00b f8c1 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ae2c:	9000      	str	r0, [sp, #0]
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
    ae2e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
                  params.input2_shift);
    ae32:	f8db 5028 	ldr.w	r5, [fp, #40]	; 0x28
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ae36:	42a2      	cmp	r2, r4
    ae38:	f000 814e 	beq.w	b0d8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7b8>
    ae3c:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    ae40:	17e1      	asrs	r1, r4, #31
  std::int64_t b_64(b);
    ae42:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    ae44:	fb04 f307 	mul.w	r3, r4, r7
    ae48:	fb02 3101 	mla	r1, r2, r1, r3
    ae4c:	fba4 2302 	umull	r2, r3, r4, r2
    ae50:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ae52:	2a00      	cmp	r2, #0
    ae54:	f173 0100 	sbcs.w	r1, r3, #0
    ae58:	f2c0 8147 	blt.w	b0ea <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7ca>
    ae5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ae60:	1852      	adds	r2, r2, r1
    ae62:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ae66:	4611      	mov	r1, r2
    ae68:	4618      	mov	r0, r3
    ae6a:	2a00      	cmp	r2, #0
    ae6c:	f173 0400 	sbcs.w	r4, r3, #0
    ae70:	f2c0 813d 	blt.w	b0ee <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7ce>
    ae74:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ae76:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ae7a:	f1bc 0f00 	cmp.w	ip, #0
    ae7e:	f040 813e 	bne.w	b0fe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7de>
    ae82:	426d      	negs	r5, r5
  assert(exponent >= 0);
    ae84:	2d00      	cmp	r5, #0
    ae86:	f2c0 813d 	blt.w	b104 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7e4>
  assert(exponent <= 31);
    ae8a:	2d1f      	cmp	r5, #31
    ae8c:	f300 8141 	bgt.w	b112 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7f2>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ae90:	2701      	movs	r7, #1
    ae92:	fa07 f005 	lsl.w	r0, r7, r5
    ae96:	3801      	subs	r0, #1
    ae98:	f00b f884 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ae9c:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ae9e:	2000      	movs	r0, #0
    aea0:	f00b f880 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    aea4:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    aea6:	4638      	mov	r0, r7
    aea8:	f00b f87c 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    aeac:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    aeae:	4631      	mov	r1, r6
    aeb0:	4620      	mov	r0, r4
    aeb2:	f00b f878 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aeb6:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    aeb8:	4639      	mov	r1, r7
    aeba:	4630      	mov	r0, r6
    aebc:	f00b f875 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    aec0:	4606      	mov	r6, r0
    aec2:	9903      	ldr	r1, [sp, #12]
    aec4:	4620      	mov	r0, r4
    aec6:	f00b f87c 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    aeca:	9f04      	ldr	r7, [sp, #16]
    aecc:	4639      	mov	r1, r7
    aece:	f00b f86a 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aed2:	4601      	mov	r1, r0
    aed4:	4630      	mov	r0, r6
    aed6:	f00b f86a 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    aeda:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
    aedc:	4629      	mov	r1, r5
    aede:	4620      	mov	r0, r4
    aee0:	f00b f863 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    aee4:	4604      	mov	r4, r0
    aee6:	4631      	mov	r1, r6
    aee8:	9805      	ldr	r0, [sp, #20]
    aeea:	f00b f872 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    aeee:	4639      	mov	r1, r7
    aef0:	f00b f859 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aef4:	4601      	mov	r1, r0
    aef6:	4620      	mov	r0, r4
    aef8:	f00b f859 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    aefc:	9b00      	ldr	r3, [sp, #0]
    aefe:	4403      	add	r3, r0
    af00:	461a      	mov	r2, r3
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
    af02:	f8db 3010 	ldr.w	r3, [fp, #16]
    af06:	f8db 5014 	ldr.w	r5, [fp, #20]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    af0a:	4293      	cmp	r3, r2
    af0c:	f000 8108 	beq.w	b120 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x800>
    af10:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    af14:	4610      	mov	r0, r2
    af16:	17d1      	asrs	r1, r2, #31
    af18:	e9cd 0100 	strd	r0, r1, [sp]
  std::int64_t b_64(b);
    af1c:	17df      	asrs	r7, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    af1e:	fb02 f007 	mul.w	r0, r2, r7
    af22:	9901      	ldr	r1, [sp, #4]
    af24:	fb03 0101 	mla	r1, r3, r1, r0
    af28:	fba2 2303 	umull	r2, r3, r2, r3
    af2c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    af2e:	2a00      	cmp	r2, #0
    af30:	f173 0100 	sbcs.w	r1, r3, #0
    af34:	f2c0 80fd 	blt.w	b132 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x812>
    af38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    af3c:	1852      	adds	r2, r2, r1
    af3e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    af42:	4611      	mov	r1, r2
    af44:	4618      	mov	r0, r3
    af46:	2a00      	cmp	r2, #0
    af48:	f173 0400 	sbcs.w	r4, r3, #0
    af4c:	f2c0 80f3 	blt.w	b136 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x816>
    af50:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    af52:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    af56:	f1bc 0f00 	cmp.w	ip, #0
    af5a:	f040 80f4 	bne.w	b146 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x826>
    af5e:	426d      	negs	r5, r5
  assert(exponent >= 0);
    af60:	2d00      	cmp	r5, #0
    af62:	f2c0 80f3 	blt.w	b14c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x82c>
  assert(exponent <= 31);
    af66:	2d1f      	cmp	r5, #31
    af68:	f300 80f7 	bgt.w	b15a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x83a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    af6c:	2601      	movs	r6, #1
    af6e:	fa06 f005 	lsl.w	r0, r6, r5
    af72:	3801      	subs	r0, #1
    af74:	f00b f816 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af78:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    af7a:	2000      	movs	r0, #0
    af7c:	f00b f812 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af80:	9000      	str	r0, [sp, #0]
  const IntegerType one = Dup<IntegerType>(1);
    af82:	4630      	mov	r0, r6
    af84:	f00b f80e 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af88:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    af8a:	4639      	mov	r1, r7
    af8c:	4620      	mov	r0, r4
    af8e:	f00b f80a 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    af92:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    af94:	4631      	mov	r1, r6
    af96:	4638      	mov	r0, r7
    af98:	f00b f807 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    af9c:	4607      	mov	r7, r0
    af9e:	9900      	ldr	r1, [sp, #0]
    afa0:	4620      	mov	r0, r4
    afa2:	f00b f80e 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    afa6:	9e03      	ldr	r6, [sp, #12]
    afa8:	4631      	mov	r1, r6
    afaa:	f00a fffc 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afae:	4601      	mov	r1, r0
    afb0:	4638      	mov	r0, r7
    afb2:	f00a fffc 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    afb6:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    afb8:	4629      	mov	r1, r5
    afba:	4620      	mov	r0, r4
    afbc:	f00a fff5 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    afc0:	4604      	mov	r4, r0
    afc2:	4639      	mov	r1, r7
    afc4:	9804      	ldr	r0, [sp, #16]
    afc6:	f00b f804 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    afca:	4631      	mov	r1, r6
    afcc:	f00a ffeb 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afd0:	4601      	mov	r1, r0
    afd2:	4620      	mov	r0, r4
    afd4:	f00a ffeb 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
              params.output_offset;
    afd8:	f8db 300c 	ldr.w	r3, [fp, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
    afdc:	4403      	add	r3, r0
          const int32_t raw_output =
    afde:	930e      	str	r3, [sp, #56]	; 0x38
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
    afe0:	f10b 0030 	add.w	r0, fp, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
    afe4:	f10b 022c 	add.w	r2, fp, #44	; 0x2c
      if (__a < __b)
    afe8:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
    afec:	428b      	cmp	r3, r1
    afee:	f300 80bb 	bgt.w	b168 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x848>
      if (__b < __a)
    aff2:	6813      	ldr	r3, [r2, #0]
    aff4:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
    aff8:	4299      	cmp	r1, r3
    affa:	dc00      	bgt.n	affe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6de>
      return __a;
    affc:	4602      	mov	r2, r0
          const int32_t clamped_output =
    affe:	6810      	ldr	r0, [r2, #0]
  inline int32_t DimensionsCount() const { return size_; }
    b000:	9b14      	ldr	r3, [sp, #80]	; 0x50
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b002:	2b04      	cmp	r3, #4
    b004:	f040 80b2 	bne.w	b16c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x84c>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b008:	9a02      	ldr	r2, [sp, #8]
    b00a:	2a00      	cmp	r2, #0
    b00c:	f2c0 80b0 	blt.w	b170 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x850>
    b010:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b012:	429a      	cmp	r2, r3
    b014:	f280 80ac 	bge.w	b170 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x850>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b018:	f1ba 0f00 	cmp.w	sl, #0
    b01c:	f2c0 80aa 	blt.w	b174 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x854>
    b020:	9916      	ldr	r1, [sp, #88]	; 0x58
    b022:	458a      	cmp	sl, r1
    b024:	f280 80a6 	bge.w	b174 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x854>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b028:	f1b8 0f00 	cmp.w	r8, #0
    b02c:	f2c0 80a4 	blt.w	b178 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x858>
    b030:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    b032:	4590      	cmp	r8, r2
    b034:	f280 80a0 	bge.w	b178 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x858>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b038:	f1b9 0f00 	cmp.w	r9, #0
    b03c:	f2c0 809e 	blt.w	b17c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x85c>
    b040:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b042:	4599      	cmp	r9, r3
    b044:	f280 809a 	bge.w	b17c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x85c>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    b048:	9c02      	ldr	r4, [sp, #8]
    b04a:	fb01 a104 	mla	r1, r1, r4, sl
    b04e:	fb01 8202 	mla	r2, r1, r2, r8
    b052:	fb02 9303 	mla	r3, r2, r3, r9
          output_data[Offset(extended_output_shape, b, y, x, c)] =
    b056:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    b058:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    b05c:	f109 0901 	add.w	r9, r9, #1
    TFLITE_DCHECK_LT(i, size_);
    b060:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b062:	2b03      	cmp	r3, #3
    b064:	f77f ae0b 	ble.w	ac7e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x35e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b068:	2b05      	cmp	r3, #5
    b06a:	f77f ae0a 	ble.w	ac82 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x362>
    b06e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b070:	68db      	ldr	r3, [r3, #12]
    b072:	e607      	b.n	ac84 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x364>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    b074:	f00d fd16 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    b078:	f00d fd14 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    b07c:	f00d fd12 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    b080:	f00d fd10 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    b084:	f00d fd0e 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    b088:	f00d fd0c 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    b08c:	f00d fd0a 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    b090:	f00d fd08 	bl	18aa4 <abort>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b094:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
    b098:	d001      	beq.n	b09e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x77e>
    b09a:	2600      	movs	r6, #0
    b09c:	e669      	b.n	ad72 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x452>
    b09e:	2601      	movs	r6, #1
    b0a0:	e667      	b.n	ad72 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x452>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b0a2:	4951      	ldr	r1, [pc, #324]	; (b1e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    b0a4:	e676      	b.n	ad94 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x474>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b0a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b0aa:	1851      	adds	r1, r2, r1
    b0ac:	f04f 0000 	mov.w	r0, #0
    b0b0:	eb43 0000 	adc.w	r0, r3, r0
    b0b4:	e678      	b.n	ada8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x488>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b0b6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    b0ba:	e67b      	b.n	adb4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x494>
  assert(exponent >= 0);
    b0bc:	4b4b      	ldr	r3, [pc, #300]	; (b1ec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    b0be:	4a4c      	ldr	r2, [pc, #304]	; (b1f0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b0c0:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b0c4:	484b      	ldr	r0, [pc, #300]	; (b1f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b0c6:	f007 fcf1 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    b0ca:	4b4b      	ldr	r3, [pc, #300]	; (b1f8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    b0cc:	4a48      	ldr	r2, [pc, #288]	; (b1f0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b0ce:	f240 1167 	movw	r1, #359	; 0x167
    b0d2:	4848      	ldr	r0, [pc, #288]	; (b1f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b0d4:	f007 fcea 	bl	12aac <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b0d8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    b0dc:	d002      	beq.n	b0e4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7c4>
    b0de:	f04f 0c00 	mov.w	ip, #0
    b0e2:	e6ad      	b.n	ae40 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x520>
    b0e4:	f04f 0c01 	mov.w	ip, #1
    b0e8:	e6aa      	b.n	ae40 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x520>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b0ea:	493f      	ldr	r1, [pc, #252]	; (b1e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    b0ec:	e6b8      	b.n	ae60 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x540>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b0ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b0f2:	1851      	adds	r1, r2, r1
    b0f4:	f04f 0000 	mov.w	r0, #0
    b0f8:	eb43 0000 	adc.w	r0, r3, r0
    b0fc:	e6ba      	b.n	ae74 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x554>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b0fe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b102:	e6be      	b.n	ae82 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x562>
  assert(exponent >= 0);
    b104:	4b39      	ldr	r3, [pc, #228]	; (b1ec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    b106:	4a3a      	ldr	r2, [pc, #232]	; (b1f0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b108:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b10c:	4839      	ldr	r0, [pc, #228]	; (b1f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b10e:	f007 fccd 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    b112:	4b39      	ldr	r3, [pc, #228]	; (b1f8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    b114:	4a36      	ldr	r2, [pc, #216]	; (b1f0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b116:	f240 1167 	movw	r1, #359	; 0x167
    b11a:	4836      	ldr	r0, [pc, #216]	; (b1f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b11c:	f007 fcc6 	bl	12aac <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b124:	d002      	beq.n	b12c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x80c>
    b126:	f04f 0c00 	mov.w	ip, #0
    b12a:	e6f3      	b.n	af14 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x5f4>
    b12c:	f04f 0c01 	mov.w	ip, #1
    b130:	e6f0      	b.n	af14 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x5f4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b132:	492d      	ldr	r1, [pc, #180]	; (b1e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    b134:	e702      	b.n	af3c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x61c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b136:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b13a:	1851      	adds	r1, r2, r1
    b13c:	f04f 0000 	mov.w	r0, #0
    b140:	eb43 0000 	adc.w	r0, r3, r0
    b144:	e704      	b.n	af50 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x630>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b146:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b14a:	e708      	b.n	af5e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x63e>
  assert(exponent >= 0);
    b14c:	4b27      	ldr	r3, [pc, #156]	; (b1ec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    b14e:	4a28      	ldr	r2, [pc, #160]	; (b1f0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b150:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b154:	4827      	ldr	r0, [pc, #156]	; (b1f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b156:	f007 fca9 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    b15a:	4b27      	ldr	r3, [pc, #156]	; (b1f8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    b15c:	4a24      	ldr	r2, [pc, #144]	; (b1f0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b15e:	f240 1167 	movw	r1, #359	; 0x167
    b162:	4824      	ldr	r0, [pc, #144]	; (b1f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b164:	f007 fca2 	bl	12aac <__assert_func>
	return __b;
    b168:	aa0e      	add	r2, sp, #56	; 0x38
    b16a:	e742      	b.n	aff2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6d2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b16c:	f00d fc9a 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b170:	f00d fc98 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b174:	f00d fc96 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b178:	f00d fc94 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b17c:	f00d fc92 	bl	18aa4 <abort>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    b180:	f108 0801 	add.w	r8, r8, #1
    TFLITE_DCHECK_LT(i, size_);
    b184:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b186:	2b02      	cmp	r3, #2
    b188:	f77f ad75 	ble.w	ac76 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x356>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b18c:	2b05      	cmp	r3, #5
    b18e:	f77f ad74 	ble.w	ac7a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x35a>
    b192:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b194:	689b      	ldr	r3, [r3, #8]
    b196:	4598      	cmp	r8, r3
    b198:	da02      	bge.n	b1a0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x880>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    b19a:	f04f 0900 	mov.w	r9, #0
    b19e:	e75f      	b.n	b060 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x740>
    b1a0:	46da      	mov	sl, fp
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    b1a2:	9b07      	ldr	r3, [sp, #28]
    b1a4:	3301      	adds	r3, #1
    b1a6:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    b1a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b1aa:	2b01      	cmp	r3, #1
    b1ac:	f77f ad5f 	ble.w	ac6e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b1b0:	2b05      	cmp	r3, #5
    b1b2:	f77f ad5e 	ble.w	ac72 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x352>
    b1b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b1b8:	685b      	ldr	r3, [r3, #4]
    b1ba:	9a07      	ldr	r2, [sp, #28]
    b1bc:	429a      	cmp	r2, r3
    b1be:	da05      	bge.n	b1cc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8ac>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    b1c0:	f04f 0900 	mov.w	r9, #0
    b1c4:	46c8      	mov	r8, r9
    b1c6:	46d3      	mov	fp, sl
    b1c8:	4692      	mov	sl, r2
    b1ca:	e7db      	b.n	b184 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x864>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    b1cc:	9b02      	ldr	r3, [sp, #8]
    b1ce:	3301      	adds	r3, #1
    b1d0:	9302      	str	r3, [sp, #8]
    b1d2:	e536      	b.n	ac42 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x322>
    if (size_ > kMaxSmallSize) {
    b1d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b1d6:	2b05      	cmp	r3, #5
    b1d8:	dd03      	ble.n	b1e2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c2>
      delete[] dims_pointer_;
    b1da:	9815      	ldr	r0, [sp, #84]	; 0x54
    b1dc:	b108      	cbz	r0, b1e2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c2>
    b1de:	f00d fc4c 	bl	18a7a <_ZdaPv>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
    b1e2:	b02b      	add	sp, #172	; 0xac
    b1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1e8:	c0000001 	.word	0xc0000001
    b1ec:	0001c580 	.word	0x0001c580
    b1f0:	0001c590 	.word	0x0001c590
    b1f4:	0001c5e8 	.word	0x0001c5e8
    b1f8:	0001c644 	.word	0x0001c644

0000b1fc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>:
      }
    }
  }
}

inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
    b1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b200:	b085      	sub	sp, #20
    b202:	4614      	mov	r4, r2
  const int32_t input1_val = params.input1_offset + x;
    b204:	6852      	ldr	r2, [r2, #4]
    b206:	4402      	add	r2, r0
  const int32_t input2_val = params.input2_offset + y;
    b208:	68a6      	ldr	r6, [r4, #8]
    b20a:	440e      	add	r6, r1
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
    b20c:	69a1      	ldr	r1, [r4, #24]
    b20e:	408a      	lsls	r2, r1
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
    b210:	408e      	lsls	r6, r1
  const int32_t scaled_input1_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
    b212:	69e3      	ldr	r3, [r4, #28]
    b214:	6a27      	ldr	r7, [r4, #32]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b216:	4293      	cmp	r3, r2
    b218:	f000 8143 	beq.w	b4a2 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2a6>
    b21c:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    b220:	ea4f 7be2 	mov.w	fp, r2, asr #31
  std::int64_t b_64(b);
    b224:	ea4f 79e3 	mov.w	r9, r3, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    b228:	fb02 f009 	mul.w	r0, r2, r9
    b22c:	fb03 010b 	mla	r1, r3, fp, r0
    b230:	fba2 2303 	umull	r2, r3, r2, r3
    b234:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b236:	2a00      	cmp	r2, #0
    b238:	f173 0100 	sbcs.w	r1, r3, #0
    b23c:	f2c0 813a 	blt.w	b4b4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2b8>
    b240:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b244:	1852      	adds	r2, r2, r1
    b246:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b24a:	4611      	mov	r1, r2
    b24c:	461d      	mov	r5, r3
    b24e:	2a00      	cmp	r2, #0
    b250:	f173 0000 	sbcs.w	r0, r3, #0
    b254:	f2c0 8130 	blt.w	b4b8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2bc>
    b258:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    b25a:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b25e:	f1bc 0f00 	cmp.w	ip, #0
    b262:	f040 8131 	bne.w	b4c8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2cc>
  return RoundingDivideByPOT(
    b266:	427f      	negs	r7, r7
  assert(exponent >= 0);
    b268:	2f00      	cmp	r7, #0
    b26a:	f2c0 8130 	blt.w	b4ce <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2d2>
  assert(exponent <= 31);
    b26e:	2f1f      	cmp	r7, #31
    b270:	f300 8134 	bgt.w	b4dc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2e0>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b274:	f04f 0b01 	mov.w	fp, #1
    b278:	fa0b f007 	lsl.w	r0, fp, r7
    b27c:	3801      	subs	r0, #1
    b27e:	f00a fe91 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b282:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
    b284:	2000      	movs	r0, #0
    b286:	f00a fe8d 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b28a:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    b28c:	4658      	mov	r0, fp
    b28e:	f00a fe89 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b292:	4680      	mov	r8, r0
  const IntegerType remainder = BitAnd(x, mask);
    b294:	4649      	mov	r1, r9
    b296:	4628      	mov	r0, r5
    b298:	f00a fe85 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b29c:	9001      	str	r0, [sp, #4]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b29e:	4659      	mov	r1, fp
    b2a0:	4648      	mov	r0, r9
    b2a2:	f00a fe82 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b2a6:	4681      	mov	r9, r0
    b2a8:	4651      	mov	r1, sl
    b2aa:	4628      	mov	r0, r5
    b2ac:	f00a fe89 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b2b0:	4641      	mov	r1, r8
    b2b2:	f00a fe78 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b2b6:	4601      	mov	r1, r0
    b2b8:	4648      	mov	r0, r9
    b2ba:	f00a fe78 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b2be:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    b2c0:	4639      	mov	r1, r7
    b2c2:	4628      	mov	r0, r5
    b2c4:	f00a fe71 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b2c8:	4605      	mov	r5, r0
    b2ca:	4649      	mov	r1, r9
    b2cc:	9801      	ldr	r0, [sp, #4]
    b2ce:	f00a fe80 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b2d2:	4641      	mov	r1, r8
    b2d4:	f00a fe67 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b2d8:	4601      	mov	r1, r0
    b2da:	4628      	mov	r0, r5
    b2dc:	f00a fe67 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b2e0:	9001      	str	r0, [sp, #4]
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
    b2e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    b2e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b2e6:	42b2      	cmp	r2, r6
    b2e8:	f000 80ff 	beq.w	b4ea <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2ee>
    b2ec:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    b2ee:	ea4f 79e6 	mov.w	r9, r6, asr #31
  std::int64_t b_64(b);
    b2f2:	ea4f 7be2 	mov.w	fp, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    b2f6:	fb06 f10b 	mul.w	r1, r6, fp
    b2fa:	fb02 1109 	mla	r1, r2, r9, r1
    b2fe:	fba6 2302 	umull	r2, r3, r6, r2
    b302:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b304:	2a00      	cmp	r2, #0
    b306:	f173 0100 	sbcs.w	r1, r3, #0
    b30a:	f2c0 80f5 	blt.w	b4f8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2fc>
    b30e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b312:	1852      	adds	r2, r2, r1
    b314:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b318:	4611      	mov	r1, r2
    b31a:	461d      	mov	r5, r3
    b31c:	2a00      	cmp	r2, #0
    b31e:	f173 0600 	sbcs.w	r6, r3, #0
    b322:	f2c0 80eb 	blt.w	b4fc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x300>
    b326:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    b328:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b32c:	2f00      	cmp	r7, #0
    b32e:	f040 80ed 	bne.w	b50c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x310>
    b332:	4246      	negs	r6, r0
  assert(exponent >= 0);
    b334:	2e00      	cmp	r6, #0
    b336:	f2c0 80ec 	blt.w	b512 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x316>
  assert(exponent <= 31);
    b33a:	2e1f      	cmp	r6, #31
    b33c:	f300 80f0 	bgt.w	b520 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x324>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b340:	f04f 0b01 	mov.w	fp, #1
    b344:	fa0b f006 	lsl.w	r0, fp, r6
    b348:	3801      	subs	r0, #1
    b34a:	f00a fe2b 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b34e:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    b350:	2000      	movs	r0, #0
    b352:	f00a fe27 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b356:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    b358:	4658      	mov	r0, fp
    b35a:	f00a fe23 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b35e:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    b360:	4641      	mov	r1, r8
    b362:	4628      	mov	r0, r5
    b364:	f00a fe1f 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b368:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b36a:	4659      	mov	r1, fp
    b36c:	4640      	mov	r0, r8
    b36e:	f00a fe1c 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b372:	4680      	mov	r8, r0
    b374:	4651      	mov	r1, sl
    b376:	4628      	mov	r0, r5
    b378:	f00a fe23 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b37c:	4639      	mov	r1, r7
    b37e:	f00a fe12 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b382:	4601      	mov	r1, r0
    b384:	4640      	mov	r0, r8
    b386:	f00a fe12 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b38a:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    b38c:	4631      	mov	r1, r6
    b38e:	4628      	mov	r0, r5
    b390:	f00a fe0b 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b394:	4605      	mov	r5, r0
    b396:	4641      	mov	r1, r8
    b398:	4648      	mov	r0, r9
    b39a:	f00a fe1a 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b39e:	4639      	mov	r1, r7
    b3a0:	f00a fe01 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b3a4:	4601      	mov	r1, r0
    b3a6:	4628      	mov	r0, r5
    b3a8:	f00a fe01 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    b3ac:	9b01      	ldr	r3, [sp, #4]
    b3ae:	4403      	add	r3, r0
    b3b0:	461a      	mov	r2, r3
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          raw_sum, params.output_multiplier, params.output_shift) +
    b3b2:	6923      	ldr	r3, [r4, #16]
    b3b4:	6961      	ldr	r1, [r4, #20]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b3b6:	4293      	cmp	r3, r2
    b3b8:	f000 80b9 	beq.w	b52e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x332>
    b3bc:	2000      	movs	r0, #0
  std::int64_t a_64(a);
    b3be:	17d7      	asrs	r7, r2, #31
  std::int64_t b_64(b);
    b3c0:	ea4f 79e3 	mov.w	r9, r3, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    b3c4:	fb02 f509 	mul.w	r5, r2, r9
    b3c8:	fb03 5507 	mla	r5, r3, r7, r5
    b3cc:	fba2 2303 	umull	r2, r3, r2, r3
    b3d0:	442b      	add	r3, r5
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b3d2:	2a00      	cmp	r2, #0
    b3d4:	f173 0500 	sbcs.w	r5, r3, #0
    b3d8:	f2c0 80b0 	blt.w	b53c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x340>
    b3dc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b3e0:	1952      	adds	r2, r2, r5
    b3e2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
    b3e6:	4615      	mov	r5, r2
    b3e8:	461e      	mov	r6, r3
    b3ea:	2a00      	cmp	r2, #0
    b3ec:	f173 0700 	sbcs.w	r7, r3, #0
    b3f0:	f2c0 80a6 	blt.w	b540 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x344>
    b3f4:	0fed      	lsrs	r5, r5, #31
  std::int32_t ab_x2_high32 =
    b3f6:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b3fa:	2800      	cmp	r0, #0
    b3fc:	f040 80a8 	bne.w	b550 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x354>
    b400:	424e      	negs	r6, r1
  assert(exponent >= 0);
    b402:	2e00      	cmp	r6, #0
    b404:	f2c0 80a7 	blt.w	b556 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x35a>
  assert(exponent <= 31);
    b408:	2e1f      	cmp	r6, #31
    b40a:	f300 80ab 	bgt.w	b564 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x368>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b40e:	f04f 0b01 	mov.w	fp, #1
    b412:	fa0b f006 	lsl.w	r0, fp, r6
    b416:	3801      	subs	r0, #1
    b418:	f00a fdc4 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b41c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    b41e:	2000      	movs	r0, #0
    b420:	f00a fdc0 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b424:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    b426:	4658      	mov	r0, fp
    b428:	f00a fdbc 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b42c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    b42e:	4641      	mov	r1, r8
    b430:	4628      	mov	r0, r5
    b432:	f00a fdb8 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b436:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b438:	4659      	mov	r1, fp
    b43a:	4640      	mov	r0, r8
    b43c:	f00a fdb5 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b440:	4680      	mov	r8, r0
    b442:	4651      	mov	r1, sl
    b444:	4628      	mov	r0, r5
    b446:	f00a fdbc 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b44a:	4639      	mov	r1, r7
    b44c:	f00a fdab 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b450:	4601      	mov	r1, r0
    b452:	4640      	mov	r0, r8
    b454:	f00a fdab 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b458:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    b45a:	4631      	mov	r1, r6
    b45c:	4628      	mov	r0, r5
    b45e:	f00a fda4 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b462:	4605      	mov	r5, r0
    b464:	4641      	mov	r1, r8
    b466:	4648      	mov	r0, r9
    b468:	f00a fdb3 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b46c:	4639      	mov	r1, r7
    b46e:	f00a fd9a 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b472:	4601      	mov	r1, r0
    b474:	4628      	mov	r0, r5
    b476:	f00a fd9a 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
      params.output_offset;
    b47a:	68e3      	ldr	r3, [r4, #12]
          raw_sum, params.output_multiplier, params.output_shift) +
    b47c:	4418      	add	r0, r3
      params.output_offset;
    b47e:	9003      	str	r0, [sp, #12]
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
    b480:	f104 0530 	add.w	r5, r4, #48	; 0x30
               std::max(params.quantized_activation_min, raw_output));
    b484:	f104 032c 	add.w	r3, r4, #44	; 0x2c
      if (__a < __b)
    b488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    b48a:	4290      	cmp	r0, r2
    b48c:	dc71      	bgt.n	b572 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x376>
      if (__b < __a)
    b48e:	681a      	ldr	r2, [r3, #0]
    b490:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b492:	4291      	cmp	r1, r2
    b494:	dc00      	bgt.n	b498 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x29c>
      return __a;
    b496:	462b      	mov	r3, r5
  return static_cast<int8_t>(clamped_output);
}
    b498:	f993 0000 	ldrsb.w	r0, [r3]
    b49c:	b005      	add	sp, #20
    b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b4a2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b4a6:	d002      	beq.n	b4ae <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2b2>
    b4a8:	f04f 0c00 	mov.w	ip, #0
    b4ac:	e6b8      	b.n	b220 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x24>
    b4ae:	f04f 0c01 	mov.w	ip, #1
    b4b2:	e6b5      	b.n	b220 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x24>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b4b4:	4930      	ldr	r1, [pc, #192]	; (b578 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b4b6:	e6c5      	b.n	b244 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x48>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b4b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b4bc:	1851      	adds	r1, r2, r1
    b4be:	f04f 0500 	mov.w	r5, #0
    b4c2:	eb43 0505 	adc.w	r5, r3, r5
    b4c6:	e6c7      	b.n	b258 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x5c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b4c8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b4cc:	e6cb      	b.n	b266 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x6a>
  assert(exponent >= 0);
    b4ce:	4b2b      	ldr	r3, [pc, #172]	; (b57c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b4d0:	4a2b      	ldr	r2, [pc, #172]	; (b580 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b4d2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b4d6:	482b      	ldr	r0, [pc, #172]	; (b584 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b4d8:	f007 fae8 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    b4dc:	4b2a      	ldr	r3, [pc, #168]	; (b588 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b4de:	4a28      	ldr	r2, [pc, #160]	; (b580 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b4e0:	f240 1167 	movw	r1, #359	; 0x167
    b4e4:	4827      	ldr	r0, [pc, #156]	; (b584 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b4e6:	f007 fae1 	bl	12aac <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b4ea:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    b4ee:	d001      	beq.n	b4f4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2f8>
    b4f0:	2700      	movs	r7, #0
    b4f2:	e6fc      	b.n	b2ee <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xf2>
    b4f4:	2701      	movs	r7, #1
    b4f6:	e6fa      	b.n	b2ee <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xf2>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b4f8:	491f      	ldr	r1, [pc, #124]	; (b578 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b4fa:	e70a      	b.n	b312 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x116>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b500:	1851      	adds	r1, r2, r1
    b502:	f04f 0500 	mov.w	r5, #0
    b506:	eb43 0505 	adc.w	r5, r3, r5
    b50a:	e70c      	b.n	b326 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x12a>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b50c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b510:	e70f      	b.n	b332 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x136>
  assert(exponent >= 0);
    b512:	4b1a      	ldr	r3, [pc, #104]	; (b57c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b514:	4a1a      	ldr	r2, [pc, #104]	; (b580 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b516:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b51a:	481a      	ldr	r0, [pc, #104]	; (b584 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b51c:	f007 fac6 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    b520:	4b19      	ldr	r3, [pc, #100]	; (b588 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b522:	4a17      	ldr	r2, [pc, #92]	; (b580 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b524:	f240 1167 	movw	r1, #359	; 0x167
    b528:	4816      	ldr	r0, [pc, #88]	; (b584 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b52a:	f007 fabf 	bl	12aac <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b52e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b532:	d001      	beq.n	b538 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x33c>
    b534:	2000      	movs	r0, #0
    b536:	e742      	b.n	b3be <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1c2>
    b538:	2001      	movs	r0, #1
    b53a:	e740      	b.n	b3be <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1c2>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b53c:	4d0e      	ldr	r5, [pc, #56]	; (b578 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b53e:	e74f      	b.n	b3e0 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b540:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b544:	1955      	adds	r5, r2, r5
    b546:	f04f 0600 	mov.w	r6, #0
    b54a:	eb43 0606 	adc.w	r6, r3, r6
    b54e:	e751      	b.n	b3f4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1f8>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b550:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b554:	e754      	b.n	b400 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x204>
  assert(exponent >= 0);
    b556:	4b09      	ldr	r3, [pc, #36]	; (b57c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b558:	4a09      	ldr	r2, [pc, #36]	; (b580 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b55a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b55e:	4809      	ldr	r0, [pc, #36]	; (b584 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b560:	f007 faa4 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    b564:	4b08      	ldr	r3, [pc, #32]	; (b588 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b566:	4a06      	ldr	r2, [pc, #24]	; (b580 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b568:	f240 1167 	movw	r1, #359	; 0x167
    b56c:	4805      	ldr	r0, [pc, #20]	; (b584 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b56e:	f007 fa9d 	bl	12aac <__assert_func>
	return __b;
    b572:	ab03      	add	r3, sp, #12
    b574:	e78b      	b.n	b48e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x292>
    b576:	bf00      	nop
    b578:	c0000001 	.word	0xc0000001
    b57c:	0001c580 	.word	0x0001c580
    b580:	0001c590 	.word	0x0001c590
    b584:	0001c5e8 	.word	0x0001c5e8
    b588:	0001c644 	.word	0x0001c644

0000b58c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:
                              TfLiteEvalTensor* output) {
    b58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b590:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
    b594:	4680      	mov	r8, r0
    b596:	9fa2      	ldr	r7, [sp, #648]	; 0x288
    b598:	9ea3      	ldr	r6, [sp, #652]	; 0x28c
    b59a:	9da4      	ldr	r5, [sp, #656]	; 0x290
  op_params.left_shift = data->left_shift;
    b59c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b59e:	922e      	str	r2, [sp, #184]	; 0xb8
  op_params.input1_offset = data->input1_offset;
    b5a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b5a2:	9229      	str	r2, [sp, #164]	; 0xa4
  op_params.input1_multiplier = data->input1_multiplier;
    b5a4:	695a      	ldr	r2, [r3, #20]
    b5a6:	922f      	str	r2, [sp, #188]	; 0xbc
  op_params.input1_shift = data->input1_shift;
    b5a8:	685a      	ldr	r2, [r3, #4]
    b5aa:	9230      	str	r2, [sp, #192]	; 0xc0
  op_params.input2_offset = data->input2_offset;
    b5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b5ae:	922a      	str	r2, [sp, #168]	; 0xa8
  op_params.input2_multiplier = data->input2_multiplier;
    b5b0:	699a      	ldr	r2, [r3, #24]
    b5b2:	9231      	str	r2, [sp, #196]	; 0xc4
  op_params.input2_shift = data->input2_shift;
    b5b4:	689a      	ldr	r2, [r3, #8]
    b5b6:	9232      	str	r2, [sp, #200]	; 0xc8
  op_params.output_offset = data->output_offset;
    b5b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    b5ba:	922b      	str	r2, [sp, #172]	; 0xac
  op_params.output_multiplier = data->output_multiplier;
    b5bc:	69da      	ldr	r2, [r3, #28]
    b5be:	922c      	str	r2, [sp, #176]	; 0xb0
  op_params.output_shift = data->output_shift;
    b5c0:	6a1a      	ldr	r2, [r3, #32]
    b5c2:	922d      	str	r2, [sp, #180]	; 0xb4
  SetActivationParams(data->output_activation_min, data->output_activation_max,
    b5c4:	68da      	ldr	r2, [r3, #12]
    b5c6:	691b      	ldr	r3, [r3, #16]
  params->float_activation_max = max;
}

template <typename P>
inline void SetActivationParams(int32_t min, int32_t max, P* params) {
  params->quantized_activation_min = min;
    b5c8:	9233      	str	r2, [sp, #204]	; 0xcc
  params->quantized_activation_max = max;
    b5ca:	9334      	str	r3, [sp, #208]	; 0xd0
      tflite::micro::GetTensorShape(input1),
    b5cc:	4639      	mov	r1, r7
    b5ce:	a842      	add	r0, sp, #264	; 0x108
    b5d0:	f00b fe93 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
    b5d4:	4631      	mov	r1, r6
    b5d6:	a848      	add	r0, sp, #288	; 0x120
    b5d8:	f00b fe8f 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
    b5dc:	9a42      	ldr	r2, [sp, #264]	; 0x108
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());
    b5de:	9297      	str	r2, [sp, #604]	; 0x25c
    b5e0:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b5e2:	9396      	str	r3, [sp, #600]	; 0x258
      if (__a < __b)
    b5e4:	429a      	cmp	r2, r3
    b5e6:	db11      	blt.n	b60c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x80>
      return __a;
    b5e8:	ab97      	add	r3, sp, #604	; 0x25c
    b5ea:	681c      	ldr	r4, [r3, #0]

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    b5ec:	2304      	movs	r3, #4
    b5ee:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    size_ = dimensions_count;
    b5f2:	9412      	str	r4, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    b5f4:	2c05      	cmp	r4, #5
    b5f6:	dd07      	ble.n	b608 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c>
      dims_pointer_ = new int32_t[dimensions_count];
    b5f8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b5fc:	429c      	cmp	r4, r3
    b5fe:	d207      	bcs.n	b610 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x84>
    b600:	00a0      	lsls	r0, r4, #2
    b602:	f00d fa4d 	bl	18aa0 <_Znaj>
    b606:	9013      	str	r0, [sp, #76]	; 0x4c
    for (int i = 0; i < shape_size; ++i) {
    b608:	2300      	movs	r3, #0
  }
    b60a:	e00e      	b.n	b62a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9e>
	return __b;
    b60c:	ab96      	add	r3, sp, #600	; 0x258
    b60e:	e7ec      	b.n	b5ea <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e>
      dims_pointer_ = new int32_t[dimensions_count];
    b610:	f04f 30ff 	mov.w	r0, #4294967295
    b614:	e7f5      	b.n	b602 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x76>
    TFLITE_DCHECK_GE(i, 0);
    b616:	f00d fa45 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b61a:	f00d fa43 	bl	18aa4 <abort>
      dims_[i] = val;
    b61e:	aa12      	add	r2, sp, #72	; 0x48
    b620:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b624:	2101      	movs	r1, #1
    b626:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < shape_size; ++i) {
    b628:	3301      	adds	r3, #1
    b62a:	429c      	cmp	r4, r3
    b62c:	dd0b      	ble.n	b646 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xba>
    TFLITE_DCHECK_GE(i, 0);
    b62e:	2b00      	cmp	r3, #0
    b630:	dbf1      	blt.n	b616 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x8a>
    TFLITE_DCHECK_LT(i, size_);
    b632:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b634:	4293      	cmp	r3, r2
    b636:	daf0      	bge.n	b61a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x8e>
    if (size_ > kMaxSmallSize) {
    b638:	2a05      	cmp	r2, #5
    b63a:	ddf0      	ble.n	b61e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x92>
      dims_pointer_[i] = val;
    b63c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b63e:	2101      	movs	r1, #1
    b640:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b644:	e7f0      	b.n	b628 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c>
      : size_(0) {
    b646:	2300      	movs	r3, #0
    b648:	9318      	str	r3, [sp, #96]	; 0x60
  inline int32_t DimensionsCount() const { return size_; }
    b64a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b64c:	429c      	cmp	r4, r3
    b64e:	db15      	blt.n	b67c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf0>
    if (size_ > kMaxSmallSize) {
    b650:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b652:	2b05      	cmp	r3, #5
    b654:	dd03      	ble.n	b65e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2>
      delete[] dims_pointer_;
    b656:	9819      	ldr	r0, [sp, #100]	; 0x64
    b658:	b108      	cbz	r0, b65e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2>
    b65a:	f00d fa0e 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
    b65e:	9418      	str	r4, [sp, #96]	; 0x60
    if (dimensions_count > kMaxSmallSize) {
    b660:	2c05      	cmp	r4, #5
    b662:	dd07      	ble.n	b674 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe8>
      dims_pointer_ = new int32_t[dimensions_count];
    b664:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b668:	429c      	cmp	r4, r3
    b66a:	d209      	bcs.n	b680 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf4>
    b66c:	00a0      	lsls	r0, r4, #2
    b66e:	f00d fa17 	bl	18aa0 <_Znaj>
    b672:	9019      	str	r0, [sp, #100]	; 0x64
  inline int32_t DimensionsCount() const { return size_; }
    b674:	9842      	ldr	r0, [sp, #264]	; 0x108
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b676:	1a20      	subs	r0, r4, r0
    for (int i = 0; i < size_increase; ++i) {
    b678:	2300      	movs	r3, #0
    b67a:	e00e      	b.n	b69a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b67c:	f00d fa12 	bl	18aa4 <abort>
      dims_pointer_ = new int32_t[dimensions_count];
    b680:	f04f 30ff 	mov.w	r0, #4294967295
    b684:	e7f3      	b.n	b66e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe2>
    TFLITE_DCHECK_GE(i, 0);
    b686:	f00d fa0d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b68a:	f00d fa0b 	bl	18aa4 <abort>
      dims_[i] = val;
    b68e:	aa18      	add	r2, sp, #96	; 0x60
    b690:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b694:	2101      	movs	r1, #1
    b696:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    b698:	3301      	adds	r3, #1
    b69a:	4298      	cmp	r0, r3
    b69c:	dd0b      	ble.n	b6b6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x12a>
    TFLITE_DCHECK_GE(i, 0);
    b69e:	2b00      	cmp	r3, #0
    b6a0:	dbf1      	blt.n	b686 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    b6a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b6a4:	4293      	cmp	r3, r2
    b6a6:	daf0      	bge.n	b68a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xfe>
    if (size_ > kMaxSmallSize) {
    b6a8:	2a05      	cmp	r2, #5
    b6aa:	ddf0      	ble.n	b68e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x102>
      dims_pointer_[i] = val;
    b6ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
    b6ae:	2101      	movs	r1, #1
    b6b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b6b4:	e7f0      	b.n	b698 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b6b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b6b8:	2b05      	cmp	r3, #5
    b6ba:	dd1e      	ble.n	b6fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x16e>
    b6bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b6be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b6c2:	9a42      	ldr	r2, [sp, #264]	; 0x108
    b6c4:	2a05      	cmp	r2, #5
    b6c6:	dd1a      	ble.n	b6fe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x172>
    b6c8:	9943      	ldr	r1, [sp, #268]	; 0x10c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b6ca:	0092      	lsls	r2, r2, #2
    b6cc:	f00d fa11 	bl	18af2 <memcpy>
      : size_(0) {
    b6d0:	2300      	movs	r3, #0
    b6d2:	9320      	str	r3, [sp, #128]	; 0x80
  inline int32_t DimensionsCount() const { return size_; }
    b6d4:	9b48      	ldr	r3, [sp, #288]	; 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b6d6:	429c      	cmp	r4, r3
    b6d8:	db13      	blt.n	b702 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x176>
    if (size_ > kMaxSmallSize) {
    b6da:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b6dc:	2b05      	cmp	r3, #5
    b6de:	dd03      	ble.n	b6e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
      delete[] dims_pointer_;
    b6e0:	9821      	ldr	r0, [sp, #132]	; 0x84
    b6e2:	b108      	cbz	r0, b6e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
    b6e4:	f00d f9c9 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
    b6e8:	9420      	str	r4, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    b6ea:	2c05      	cmp	r4, #5
    b6ec:	dd10      	ble.n	b710 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x184>
      dims_pointer_ = new int32_t[dimensions_count];
    b6ee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b6f2:	429c      	cmp	r4, r3
    b6f4:	d207      	bcs.n	b706 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x17a>
    b6f6:	00a0      	lsls	r0, r4, #2
    b6f8:	e007      	b.n	b70a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b6fa:	ab19      	add	r3, sp, #100	; 0x64
    b6fc:	e7df      	b.n	b6be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x132>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b6fe:	a943      	add	r1, sp, #268	; 0x10c
    b700:	e7e3      	b.n	b6ca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x13e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b702:	f00d f9cf 	bl	18aa4 <abort>
      dims_pointer_ = new int32_t[dimensions_count];
    b706:	f04f 30ff 	mov.w	r0, #4294967295
    b70a:	f00d f9c9 	bl	18aa0 <_Znaj>
    b70e:	9021      	str	r0, [sp, #132]	; 0x84
  inline int32_t DimensionsCount() const { return size_; }
    b710:	9848      	ldr	r0, [sp, #288]	; 0x120
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b712:	1a20      	subs	r0, r4, r0
    for (int i = 0; i < size_increase; ++i) {
    b714:	2300      	movs	r3, #0
    b716:	e009      	b.n	b72c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1a0>
    TFLITE_DCHECK_GE(i, 0);
    b718:	f00d f9c4 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b71c:	f00d f9c2 	bl	18aa4 <abort>
      dims_[i] = val;
    b720:	aa20      	add	r2, sp, #128	; 0x80
    b722:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b726:	2101      	movs	r1, #1
    b728:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    b72a:	3301      	adds	r3, #1
    b72c:	4298      	cmp	r0, r3
    b72e:	dd0b      	ble.n	b748 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1bc>
    TFLITE_DCHECK_GE(i, 0);
    b730:	2b00      	cmp	r3, #0
    b732:	dbf1      	blt.n	b718 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x18c>
    TFLITE_DCHECK_LT(i, size_);
    b734:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b736:	4293      	cmp	r3, r2
    b738:	daf0      	bge.n	b71c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x190>
    if (size_ > kMaxSmallSize) {
    b73a:	2a05      	cmp	r2, #5
    b73c:	ddf0      	ble.n	b720 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x194>
      dims_pointer_[i] = val;
    b73e:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b740:	2101      	movs	r1, #1
    b742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b746:	e7f0      	b.n	b72a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b748:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b74a:	2b05      	cmp	r3, #5
    b74c:	dd01      	ble.n	b752 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c6>
    b74e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b750:	e000      	b.n	b754 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c8>
    b752:	ab21      	add	r3, sp, #132	; 0x84
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b754:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b758:	9a48      	ldr	r2, [sp, #288]	; 0x120
    b75a:	2a05      	cmp	r2, #5
    b75c:	dd01      	ble.n	b762 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d6>
    b75e:	9949      	ldr	r1, [sp, #292]	; 0x124
    b760:	e000      	b.n	b764 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d8>
    b762:	a949      	add	r1, sp, #292	; 0x124
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b764:	0092      	lsls	r2, r2, #2
    b766:	f00d f9c4 	bl	18af2 <memcpy>
    return this->size_ == comp.size_ &&
    b76a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b76c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b76e:	429a      	cmp	r2, r3
    b770:	d02d      	beq.n	b7ce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
    b772:	2300      	movs	r3, #0

  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    b774:	2b00      	cmp	r3, #0
    b776:	d13c      	bne.n	b7f2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x266>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    return false;
  }

  for (int i = dims_count - 1; i >= 0; --i) {
    b778:	1e63      	subs	r3, r4, #1
    b77a:	461a      	mov	r2, r3
    b77c:	2a00      	cmp	r2, #0
    b77e:	f2c0 80ad 	blt.w	b8dc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    TFLITE_DCHECK_GE(i, 0);
    b782:	f2c0 8094 	blt.w	b8ae <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x322>
    TFLITE_DCHECK_LT(i, size_);
    b786:	9918      	ldr	r1, [sp, #96]	; 0x60
    b788:	428a      	cmp	r2, r1
    b78a:	f280 8092 	bge.w	b8b2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x326>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b78e:	2905      	cmp	r1, #5
    b790:	f340 8091 	ble.w	b8b6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x32a>
    b794:	9919      	ldr	r1, [sp, #100]	; 0x64
    b796:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b79a:	2a00      	cmp	r2, #0
    b79c:	f2c0 8090 	blt.w	b8c0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x334>
    TFLITE_DCHECK_LT(i, size_);
    b7a0:	9920      	ldr	r1, [sp, #128]	; 0x80
    b7a2:	428a      	cmp	r2, r1
    b7a4:	f280 808e 	bge.w	b8c4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x338>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b7a8:	2905      	cmp	r1, #5
    b7aa:	f340 808d 	ble.w	b8c8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x33c>
    b7ae:	9921      	ldr	r1, [sp, #132]	; 0x84
    b7b0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
    b7b4:	4281      	cmp	r1, r0
    b7b6:	f000 808c 	beq.w	b8d2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x346>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
    b7ba:	2801      	cmp	r0, #1
    b7bc:	f000 808b 	beq.w	b8d6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x34a>
      params->broadcast_category =
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
    } else if (extended_shape1.Dims(i) == 1) {
    b7c0:	2901      	cmp	r1, #1
    b7c2:	f040 809e 	bne.w	b902 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x376>
      params->broadcast_category =
    b7c6:	2203      	movs	r2, #3
    b7c8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
          BroadcastableOpCategory::kSecondInputBroadcastsFast;
      break;
    b7cc:	e086      	b.n	b8dc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b7ce:	2a05      	cmp	r2, #5
    b7d0:	dd01      	ble.n	b7d6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x24a>
    b7d2:	9819      	ldr	r0, [sp, #100]	; 0x64
    b7d4:	e000      	b.n	b7d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x24c>
    b7d6:	a819      	add	r0, sp, #100	; 0x64
    b7d8:	2b05      	cmp	r3, #5
    b7da:	dd01      	ble.n	b7e0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x254>
    b7dc:	9921      	ldr	r1, [sp, #132]	; 0x84
    b7de:	e000      	b.n	b7e2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x256>
    b7e0:	a921      	add	r1, sp, #132	; 0x84
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
    b7e2:	0092      	lsls	r2, r2, #2
    b7e4:	f00d f977 	bl	18ad6 <memcmp>
    return this->size_ == comp.size_ &&
    b7e8:	b908      	cbnz	r0, b7ee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x262>
    b7ea:	2301      	movs	r3, #1
    b7ec:	e7c2      	b.n	b774 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1e8>
    b7ee:	2300      	movs	r3, #0
    b7f0:	e7c0      	b.n	b774 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1e8>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    b7f2:	2301      	movs	r3, #1
    b7f4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    return false;
    b7f8:	2300      	movs	r3, #0
    b7fa:	9305      	str	r3, [sp, #20]
    if (size_ > kMaxSmallSize) {
    b7fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b7fe:	2b05      	cmp	r3, #5
    b800:	dd03      	ble.n	b80a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x27e>
      delete[] dims_pointer_;
    b802:	9821      	ldr	r0, [sp, #132]	; 0x84
    b804:	b108      	cbz	r0, b80a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x27e>
    b806:	f00d f938 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b80a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b80c:	2b05      	cmp	r3, #5
    b80e:	dd03      	ble.n	b818 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
      delete[] dims_pointer_;
    b810:	9819      	ldr	r0, [sp, #100]	; 0x64
    b812:	b108      	cbz	r0, b818 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
    b814:	f00d f931 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b818:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b81a:	2b05      	cmp	r3, #5
    b81c:	dd03      	ble.n	b826 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29a>
      delete[] dims_pointer_;
    b81e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b820:	b108      	cbz	r0, b826 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29a>
    b822:	f00d f92a 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b826:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b828:	2b05      	cmp	r3, #5
    b82a:	dd03      	ble.n	b834 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2a8>
      delete[] dims_pointer_;
    b82c:	9849      	ldr	r0, [sp, #292]	; 0x124
    b82e:	b108      	cbz	r0, b834 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2a8>
    b830:	f00d f923 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b834:	9b42      	ldr	r3, [sp, #264]	; 0x108
    b836:	2b05      	cmp	r3, #5
    b838:	dd03      	ble.n	b842 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2b6>
      delete[] dims_pointer_;
    b83a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    b83c:	b108      	cbz	r0, b842 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2b6>
    b83e:	f00d f91c 	bl	18a7a <_ZdaPv>
  switch (output->type) {
    b842:	7a28      	ldrb	r0, [r5, #8]
    b844:	2807      	cmp	r0, #7
    b846:	f000 843d 	beq.w	c0c4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb38>
    b84a:	2809      	cmp	r0, #9
    b84c:	f040 86e6 	bne.w	c61c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1090>
      if (need_broadcast) {
    b850:	9b05      	ldr	r3, [sp, #20]
    b852:	2b00      	cmp	r3, #0
    b854:	f000 838a 	beq.w	bf6c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9e0>
            op_params, tflite::micro::GetTensorShape(input1),
    b858:	4639      	mov	r1, r7
    b85a:	a84e      	add	r0, sp, #312	; 0x138
    b85c:	f00b fd4d 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b860:	4638      	mov	r0, r7
    b862:	f00a fb95 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b866:	4680      	mov	r8, r0
            tflite::micro::GetTensorShape(input2),
    b868:	4631      	mov	r1, r6
    b86a:	a854      	add	r0, sp, #336	; 0x150
    b86c:	f00b fd45 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b870:	4630      	mov	r0, r6
    b872:	f00a fb8d 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b876:	4681      	mov	r9, r0
            tflite::micro::GetTensorShape(output),
    b878:	4629      	mov	r1, r5
    b87a:	a85a      	add	r0, sp, #360	; 0x168
    b87c:	f00b fd3d 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b880:	4628      	mov	r0, r5
    b882:	f00a fb8b 	bl	15f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    b886:	4682      	mov	sl, r0
      : size_(0) {
    b888:	2300      	movs	r3, #0
    b88a:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
    b88c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b88e:	2b04      	cmp	r3, #4
    b890:	f300 812a 	bgt.w	bae8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x55c>
    if (size_ > kMaxSmallSize) {
    b894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b896:	2b05      	cmp	r3, #5
    b898:	dd03      	ble.n	b8a2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x316>
      delete[] dims_pointer_;
    b89a:	980d      	ldr	r0, [sp, #52]	; 0x34
    b89c:	b108      	cbz	r0, b8a2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x316>
    b89e:	f00d f8ec 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
    b8a2:	2304      	movs	r3, #4
    b8a4:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
    b8a6:	984e      	ldr	r0, [sp, #312]	; 0x138
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b8a8:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    b8aa:	2300      	movs	r3, #0
    b8ac:	e127      	b.n	bafe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x572>
    TFLITE_DCHECK_GE(i, 0);
    b8ae:	f00d f8f9 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b8b2:	f00d f8f7 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8b6:	a918      	add	r1, sp, #96	; 0x60
    b8b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b8bc:	6848      	ldr	r0, [r1, #4]
    b8be:	e76c      	b.n	b79a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x20e>
    TFLITE_DCHECK_GE(i, 0);
    b8c0:	f00d f8f0 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b8c4:	f00d f8ee 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8c8:	a920      	add	r1, sp, #128	; 0x80
    b8ca:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b8ce:	6849      	ldr	r1, [r1, #4]
    b8d0:	e770      	b.n	b7b4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x228>
  for (int i = dims_count - 1; i >= 0; --i) {
    b8d2:	3a01      	subs	r2, #1
    b8d4:	e752      	b.n	b77c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1f0>
      params->broadcast_category =
    b8d6:	2202      	movs	r2, #2
    b8d8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
      return true;
    }
  }

  if (params->broadcast_category !=
    b8dc:	f89d 10a0 	ldrb.w	r1, [sp, #160]	; 0xa0
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
    b8e0:	1e8a      	subs	r2, r1, #2
    b8e2:	b2d2      	uxtb	r2, r2
  if (params->broadcast_category !=
    b8e4:	2a01      	cmp	r2, #1
    b8e6:	d812      	bhi.n	b90e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x382>

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
    b8e8:	2903      	cmp	r1, #3
    b8ea:	d012      	beq.n	b912 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x386>
    b8ec:	aa18      	add	r2, sp, #96	; 0x60
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
    b8ee:	2903      	cmp	r1, #3
    b8f0:	d011      	beq.n	b916 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x38a>
    b8f2:	a920      	add	r1, sp, #128	; 0x80
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
  params->broadcast_shape[0] = 1;
    b8f4:	2001      	movs	r0, #1
    b8f6:	903c      	str	r0, [sp, #240]	; 0xf0
  params->broadcast_shape[1] = 1;
    b8f8:	903d      	str	r0, [sp, #244]	; 0xf4
  params->broadcast_shape[2] = 1;
    b8fa:	903e      	str	r0, [sp, #248]	; 0xf8
  params->broadcast_shape[3] = 1;
    b8fc:	903f      	str	r0, [sp, #252]	; 0xfc
  params->broadcast_shape[4] = 1;
    b8fe:	9040      	str	r0, [sp, #256]	; 0x100
    b900:	e021      	b.n	b946 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ba>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    b902:	2304      	movs	r3, #4
    b904:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
      return true;
    b908:	2301      	movs	r3, #1
    b90a:	9305      	str	r3, [sp, #20]
    b90c:	e776      	b.n	b7fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    TFLITE_DCHECK(false);
    b90e:	f00d f8c9 	bl	18aa4 <abort>
  const RuntimeShape* shape_a =
    b912:	aa20      	add	r2, sp, #128	; 0x80
    b914:	e7eb      	b.n	b8ee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x362>
  const RuntimeShape* shape_b =
    b916:	a918      	add	r1, sp, #96	; 0x60
    b918:	e7ec      	b.n	b8f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x368>
    TFLITE_DCHECK_GE(i, 0);
    b91a:	f00d f8c3 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b91e:	f00d f8c1 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b922:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b926:	6844      	ldr	r4, [r0, #4]
    b928:	e018      	b.n	b95c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3d0>
    TFLITE_DCHECK_GE(i, 0);
    b92a:	f00d f8bb 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b92e:	f00d f8b9 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b932:	6848      	ldr	r0, [r1, #4]
    b934:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b938:	42a0      	cmp	r0, r4
    b93a:	d12e      	bne.n	b99a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x40e>
    params->broadcast_shape[4] *= shape_b->Dims(i);
    b93c:	9c40      	ldr	r4, [sp, #256]	; 0x100
    b93e:	fb00 f004 	mul.w	r0, r0, r4
    b942:	9040      	str	r0, [sp, #256]	; 0x100
    --i;
    b944:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b946:	2b00      	cmp	r3, #0
    b948:	db27      	blt.n	b99a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x40e>
    TFLITE_DCHECK_GE(i, 0);
    b94a:	dbe6      	blt.n	b91a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x38e>
    TFLITE_DCHECK_LT(i, size_);
    b94c:	6810      	ldr	r0, [r2, #0]
    b94e:	4283      	cmp	r3, r0
    b950:	dae5      	bge.n	b91e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x392>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b952:	2805      	cmp	r0, #5
    b954:	dde5      	ble.n	b922 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x396>
    b956:	6850      	ldr	r0, [r2, #4]
    b958:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b95c:	2b00      	cmp	r3, #0
    b95e:	dbe4      	blt.n	b92a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x39e>
    TFLITE_DCHECK_LT(i, size_);
    b960:	6808      	ldr	r0, [r1, #0]
    b962:	4283      	cmp	r3, r0
    b964:	dae3      	bge.n	b92e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b966:	2805      	cmp	r0, #5
    b968:	dce3      	bgt.n	b932 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3a6>
    b96a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    b96e:	6840      	ldr	r0, [r0, #4]
    b970:	e7e2      	b.n	b938 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ac>
    TFLITE_DCHECK_GE(i, 0);
    b972:	f00d f897 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b976:	f00d f895 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b97a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b97e:	6840      	ldr	r0, [r0, #4]
    b980:	e016      	b.n	b9b0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x424>
    TFLITE_DCHECK_GE(i, 0);
    b982:	f00d f88f 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b986:	f00d f88d 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b98a:	6848      	ldr	r0, [r1, #4]
    b98c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
    params->broadcast_shape[3] *= shape_b->Dims(i);
    b990:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
    b992:	fb00 f004 	mul.w	r0, r0, r4
    b996:	903f      	str	r0, [sp, #252]	; 0xfc
    --i;
    b998:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == 1) {
    b99a:	2b00      	cmp	r3, #0
    b99c:	db2b      	blt.n	b9f6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x46a>
    TFLITE_DCHECK_GE(i, 0);
    b99e:	dbe8      	blt.n	b972 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3e6>
    TFLITE_DCHECK_LT(i, size_);
    b9a0:	6810      	ldr	r0, [r2, #0]
    b9a2:	4283      	cmp	r3, r0
    b9a4:	dae7      	bge.n	b976 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9a6:	2805      	cmp	r0, #5
    b9a8:	dde7      	ble.n	b97a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ee>
    b9aa:	6850      	ldr	r0, [r2, #4]
    b9ac:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    b9b0:	2801      	cmp	r0, #1
    b9b2:	d120      	bne.n	b9f6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x46a>
    TFLITE_DCHECK_GE(i, 0);
    b9b4:	2b00      	cmp	r3, #0
    b9b6:	dbe4      	blt.n	b982 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3f6>
    TFLITE_DCHECK_LT(i, size_);
    b9b8:	6808      	ldr	r0, [r1, #0]
    b9ba:	4283      	cmp	r3, r0
    b9bc:	dae3      	bge.n	b986 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9be:	2805      	cmp	r0, #5
    b9c0:	dce3      	bgt.n	b98a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3fe>
    b9c2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    b9c6:	6840      	ldr	r0, [r0, #4]
    b9c8:	e7e2      	b.n	b990 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x404>
    TFLITE_DCHECK_GE(i, 0);
    b9ca:	f00d f86b 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b9ce:	f00d f869 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9d2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b9d6:	6840      	ldr	r0, [r0, #4]
    b9d8:	e018      	b.n	ba0c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x480>
    TFLITE_DCHECK_GE(i, 0);
    b9da:	f00d f863 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b9de:	f00d f861 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9e2:	684c      	ldr	r4, [r1, #4]
    b9e4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b9e8:	4284      	cmp	r4, r0
    b9ea:	d12e      	bne.n	ba4a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4be>
    params->broadcast_shape[2] *= shape_a->Dims(i);
    b9ec:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
    b9ee:	fb00 f004 	mul.w	r0, r0, r4
    b9f2:	903e      	str	r0, [sp, #248]	; 0xf8
    --i;
    b9f4:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	db27      	blt.n	ba4a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4be>
    TFLITE_DCHECK_GE(i, 0);
    b9fa:	dbe6      	blt.n	b9ca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x43e>
    TFLITE_DCHECK_LT(i, size_);
    b9fc:	6810      	ldr	r0, [r2, #0]
    b9fe:	4283      	cmp	r3, r0
    ba00:	dae5      	bge.n	b9ce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x442>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba02:	2805      	cmp	r0, #5
    ba04:	dde5      	ble.n	b9d2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x446>
    ba06:	6850      	ldr	r0, [r2, #4]
    ba08:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    ba0c:	2b00      	cmp	r3, #0
    ba0e:	dbe4      	blt.n	b9da <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x44e>
    TFLITE_DCHECK_LT(i, size_);
    ba10:	680c      	ldr	r4, [r1, #0]
    ba12:	42a3      	cmp	r3, r4
    ba14:	dae3      	bge.n	b9de <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x452>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba16:	2c05      	cmp	r4, #5
    ba18:	dce3      	bgt.n	b9e2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x456>
    ba1a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
    ba1e:	6864      	ldr	r4, [r4, #4]
    ba20:	e7e2      	b.n	b9e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x45c>
    TFLITE_DCHECK_GE(i, 0);
    ba22:	f00d f83f 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba26:	f00d f83d 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba2a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    ba2e:	6840      	ldr	r0, [r0, #4]
    ba30:	e016      	b.n	ba60 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4d4>
    TFLITE_DCHECK_GE(i, 0);
    ba32:	f00d f837 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba36:	f00d f835 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba3a:	6850      	ldr	r0, [r2, #4]
    ba3c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
    params->broadcast_shape[1] *= shape_a->Dims(i);
    ba40:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
    ba42:	fb00 f004 	mul.w	r0, r0, r4
    ba46:	903d      	str	r0, [sp, #244]	; 0xf4
    --i;
    ba48:	3b01      	subs	r3, #1
  while (i >= 0 && shape_b->Dims(i) == 1) {
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	db2b      	blt.n	baa6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x51a>
    TFLITE_DCHECK_GE(i, 0);
    ba4e:	dbe8      	blt.n	ba22 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x496>
    TFLITE_DCHECK_LT(i, size_);
    ba50:	6808      	ldr	r0, [r1, #0]
    ba52:	4283      	cmp	r3, r0
    ba54:	dae7      	bge.n	ba26 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba56:	2805      	cmp	r0, #5
    ba58:	dde7      	ble.n	ba2a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49e>
    ba5a:	6848      	ldr	r0, [r1, #4]
    ba5c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    ba60:	2801      	cmp	r0, #1
    ba62:	d120      	bne.n	baa6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x51a>
    TFLITE_DCHECK_GE(i, 0);
    ba64:	2b00      	cmp	r3, #0
    ba66:	dbe4      	blt.n	ba32 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a6>
    TFLITE_DCHECK_LT(i, size_);
    ba68:	6810      	ldr	r0, [r2, #0]
    ba6a:	4283      	cmp	r3, r0
    ba6c:	dae3      	bge.n	ba36 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba6e:	2805      	cmp	r0, #5
    ba70:	dce3      	bgt.n	ba3a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ae>
    ba72:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    ba76:	6840      	ldr	r0, [r0, #4]
    ba78:	e7e2      	b.n	ba40 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
    TFLITE_DCHECK_GE(i, 0);
    ba7a:	f00d f813 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba7e:	f00d f811 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba82:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    ba86:	6844      	ldr	r4, [r0, #4]
    ba88:	e018      	b.n	babc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x530>
    TFLITE_DCHECK_GE(i, 0);
    ba8a:	f00d f80b 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba8e:	f00d f809 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba92:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    ba96:	6840      	ldr	r0, [r0, #4]
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    ba98:	42a0      	cmp	r0, r4
    ba9a:	d11a      	bne.n	bad2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x546>
    params->broadcast_shape[0] *= shape_b->Dims(i);
    ba9c:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
    ba9e:	fb00 f004 	mul.w	r0, r0, r4
    baa2:	903c      	str	r0, [sp, #240]	; 0xf0
    --i;
    baa4:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    baa6:	2b00      	cmp	r3, #0
    baa8:	db13      	blt.n	bad2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x546>
    TFLITE_DCHECK_GE(i, 0);
    baaa:	dbe6      	blt.n	ba7a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ee>
    TFLITE_DCHECK_LT(i, size_);
    baac:	6810      	ldr	r0, [r2, #0]
    baae:	4283      	cmp	r3, r0
    bab0:	dae5      	bge.n	ba7e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bab2:	2805      	cmp	r0, #5
    bab4:	dde5      	ble.n	ba82 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f6>
    bab6:	6850      	ldr	r0, [r2, #4]
    bab8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    babc:	2b00      	cmp	r3, #0
    babe:	dbe4      	blt.n	ba8a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4fe>
    TFLITE_DCHECK_LT(i, size_);
    bac0:	6808      	ldr	r0, [r1, #0]
    bac2:	4283      	cmp	r3, r0
    bac4:	dae3      	bge.n	ba8e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x502>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bac6:	2805      	cmp	r0, #5
    bac8:	dde3      	ble.n	ba92 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x506>
    baca:	6848      	ldr	r0, [r1, #4]
    bacc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    bad0:	e7e2      	b.n	ba98 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x50c>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
    bad2:	2b00      	cmp	r3, #0
    bad4:	db05      	blt.n	bae2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x556>
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    bad6:	2304      	movs	r3, #4
    bad8:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  }
  return true;
    badc:	2301      	movs	r3, #1
    bade:	9305      	str	r3, [sp, #20]
    bae0:	e68c      	b.n	b7fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    bae2:	2301      	movs	r3, #1
    bae4:	9305      	str	r3, [sp, #20]
    bae6:	e689      	b.n	b7fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bae8:	f00c ffdc 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    baec:	f00c ffda 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    baf0:	f00c ffd8 	bl	18aa4 <abort>
      dims_pointer_[i] = val;
    baf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    baf6:	2101      	movs	r1, #1
    baf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_increase; ++i) {
    bafc:	3301      	adds	r3, #1
    bafe:	4298      	cmp	r0, r3
    bb00:	dd0c      	ble.n	bb1c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x590>
    TFLITE_DCHECK_GE(i, 0);
    bb02:	2b00      	cmp	r3, #0
    bb04:	dbf2      	blt.n	baec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x560>
    TFLITE_DCHECK_LT(i, size_);
    bb06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bb08:	4293      	cmp	r3, r2
    bb0a:	daf1      	bge.n	baf0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x564>
    if (size_ > kMaxSmallSize) {
    bb0c:	2a05      	cmp	r2, #5
    bb0e:	dcf1      	bgt.n	baf4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x568>
      dims_[i] = val;
    bb10:	aa0c      	add	r2, sp, #48	; 0x30
    bb12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    bb16:	2101      	movs	r1, #1
    bb18:	6051      	str	r1, [r2, #4]
    bb1a:	e7ef      	b.n	bafc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x570>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bb1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bb1e:	2b05      	cmp	r3, #5
    bb20:	dd01      	ble.n	bb26 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x59a>
    bb22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bb24:	e000      	b.n	bb28 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x59c>
    bb26:	ab0d      	add	r3, sp, #52	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bb28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bb2c:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    bb2e:	2a05      	cmp	r2, #5
    bb30:	dd01      	ble.n	bb36 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5aa>
    bb32:	994f      	ldr	r1, [sp, #316]	; 0x13c
    bb34:	e000      	b.n	bb38 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ac>
    bb36:	a94f      	add	r1, sp, #316	; 0x13c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bb38:	0092      	lsls	r2, r2, #2
    bb3a:	f00c ffda 	bl	18af2 <memcpy>
      : size_(0) {
    bb3e:	2300      	movs	r3, #0
    bb40:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    bb42:	9b54      	ldr	r3, [sp, #336]	; 0x150
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bb44:	2b04      	cmp	r3, #4
    bb46:	dc0c      	bgt.n	bb62 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5d6>
    if (size_ > kMaxSmallSize) {
    bb48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb4a:	2b05      	cmp	r3, #5
    bb4c:	dd03      	ble.n	bb56 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ca>
      delete[] dims_pointer_;
    bb4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bb50:	b108      	cbz	r0, bb56 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ca>
    bb52:	f00c ff92 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
    bb56:	2304      	movs	r3, #4
    bb58:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    bb5a:	9854      	ldr	r0, [sp, #336]	; 0x150
    const int size_increase = new_shape_size - shape.DimensionsCount();
    bb5c:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    bb5e:	2300      	movs	r3, #0
    bb60:	e00b      	b.n	bb7a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ee>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bb62:	f00c ff9f 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    bb66:	f00c ff9d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bb6a:	f00c ff9b 	bl	18aa4 <abort>
      dims_[i] = val;
    bb6e:	aa12      	add	r2, sp, #72	; 0x48
    bb70:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    bb74:	2101      	movs	r1, #1
    bb76:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    bb78:	3301      	adds	r3, #1
    bb7a:	4298      	cmp	r0, r3
    bb7c:	dd0b      	ble.n	bb96 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x60a>
    TFLITE_DCHECK_GE(i, 0);
    bb7e:	2b00      	cmp	r3, #0
    bb80:	dbf1      	blt.n	bb66 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5da>
    TFLITE_DCHECK_LT(i, size_);
    bb82:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bb84:	4293      	cmp	r3, r2
    bb86:	daf0      	bge.n	bb6a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5de>
    if (size_ > kMaxSmallSize) {
    bb88:	2a05      	cmp	r2, #5
    bb8a:	ddf0      	ble.n	bb6e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e2>
      dims_pointer_[i] = val;
    bb8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bb8e:	2101      	movs	r1, #1
    bb90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    bb94:	e7f0      	b.n	bb78 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bb96:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb98:	2b05      	cmp	r3, #5
    bb9a:	dd0c      	ble.n	bbb6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62a>
    bb9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bb9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bba2:	9a54      	ldr	r2, [sp, #336]	; 0x150
    bba4:	2a05      	cmp	r2, #5
    bba6:	dd08      	ble.n	bbba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62e>
    bba8:	9955      	ldr	r1, [sp, #340]	; 0x154
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bbaa:	0092      	lsls	r2, r2, #2
    bbac:	f00c ffa1 	bl	18af2 <memcpy>
  for (int i = N - 1; i >= 0; --i) {
    bbb0:	2303      	movs	r3, #3
  int desc_stride = 1;
    bbb2:	2201      	movs	r2, #1
  }
    bbb4:	e017      	b.n	bbe6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x65a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bbb6:	ab13      	add	r3, sp, #76	; 0x4c
    bbb8:	e7f1      	b.n	bb9e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x612>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bbba:	a955      	add	r1, sp, #340	; 0x154
    bbbc:	e7f5      	b.n	bbaa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x61e>
    TFLITE_DCHECK_GE(i, 0);
    bbbe:	f00c ff71 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bbc2:	f00c ff6f 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbc6:	a90c      	add	r1, sp, #48	; 0x30
    bbc8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bbcc:	6848      	ldr	r0, [r1, #4]
    bbce:	e015      	b.n	bbfc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x670>
    TFLITE_DCHECK_GE(i, 0);
    bbd0:	f00c ff68 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bbd4:	f00c ff66 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbd8:	a90c      	add	r1, sp, #48	; 0x30
    bbda:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bbde:	6849      	ldr	r1, [r1, #4]
    desc_stride *= input_shape.Dims(i);
    bbe0:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = N - 1; i >= 0; --i) {
    bbe4:	3b01      	subs	r3, #1
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	db19      	blt.n	bc1e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x692>
    TFLITE_DCHECK_GE(i, 0);
    bbea:	dbe8      	blt.n	bbbe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x632>
    TFLITE_DCHECK_LT(i, size_);
    bbec:	990c      	ldr	r1, [sp, #48]	; 0x30
    bbee:	428b      	cmp	r3, r1
    bbf0:	dae7      	bge.n	bbc2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x636>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbf2:	2905      	cmp	r1, #5
    bbf4:	dde7      	ble.n	bbc6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x63a>
    bbf6:	990d      	ldr	r1, [sp, #52]	; 0x34
    bbf8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    bbfc:	a918      	add	r1, sp, #96	; 0x60
    bbfe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
    bc02:	1d18      	adds	r0, r3, #4
    bc04:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    bc08:	2b00      	cmp	r3, #0
    bc0a:	dbe1      	blt.n	bbd0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x644>
    TFLITE_DCHECK_LT(i, size_);
    bc0c:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc0e:	428b      	cmp	r3, r1
    bc10:	dae0      	bge.n	bbd4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc12:	2905      	cmp	r1, #5
    bc14:	dde0      	ble.n	bbd8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64c>
    bc16:	990d      	ldr	r1, [sp, #52]	; 0x34
    bc18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    bc1c:	e7e0      	b.n	bbe0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x654>
  for (int i = N - 1; i >= 0; --i) {
    bc1e:	2303      	movs	r3, #3
  int desc_stride = 1;
    bc20:	2201      	movs	r2, #1
    bc22:	e013      	b.n	bc4c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6c0>
    TFLITE_DCHECK_GE(i, 0);
    bc24:	f00c ff3e 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bc28:	f00c ff3c 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc2c:	a912      	add	r1, sp, #72	; 0x48
    bc2e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bc32:	6848      	ldr	r0, [r1, #4]
    bc34:	e015      	b.n	bc62 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6d6>
    TFLITE_DCHECK_GE(i, 0);
    bc36:	f00c ff35 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bc3a:	f00c ff33 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc3e:	a912      	add	r1, sp, #72	; 0x48
    bc40:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bc44:	6849      	ldr	r1, [r1, #4]
    desc_stride *= input_shape.Dims(i);
    bc46:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = N - 1; i >= 0; --i) {
    bc4a:	3b01      	subs	r3, #1
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	db19      	blt.n	bc84 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6f8>
    TFLITE_DCHECK_GE(i, 0);
    bc50:	dbe8      	blt.n	bc24 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x698>
    TFLITE_DCHECK_LT(i, size_);
    bc52:	9912      	ldr	r1, [sp, #72]	; 0x48
    bc54:	428b      	cmp	r3, r1
    bc56:	dae7      	bge.n	bc28 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x69c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc58:	2905      	cmp	r1, #5
    bc5a:	dde7      	ble.n	bc2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6a0>
    bc5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bc5e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    bc62:	a920      	add	r1, sp, #128	; 0x80
    bc64:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
    bc68:	1d18      	adds	r0, r3, #4
    bc6a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    bc6e:	2b00      	cmp	r3, #0
    bc70:	dbe1      	blt.n	bc36 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6aa>
    TFLITE_DCHECK_LT(i, size_);
    bc72:	9912      	ldr	r1, [sp, #72]	; 0x48
    bc74:	428b      	cmp	r3, r1
    bc76:	dae0      	bge.n	bc3a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc78:	2905      	cmp	r1, #5
    bc7a:	dde0      	ble.n	bc3e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6b2>
    bc7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bc7e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    bc82:	e7e0      	b.n	bc46 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6ba>
  for (int i = 0; i < N; ++i) {
    bc84:	2300      	movs	r3, #0
    bc86:	e019      	b.n	bcbc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x730>
    TFLITE_DCHECK_GE(i, 0);
    bc88:	f00c ff0c 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bc8c:	f00c ff0a 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc90:	aa0c      	add	r2, sp, #48	; 0x30
    bc92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    bc96:	6852      	ldr	r2, [r2, #4]
    bc98:	e01c      	b.n	bcd4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x748>
    TFLITE_DCHECK_GE(i, 0);
    bc9a:	f00c ff03 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bc9e:	f00c ff01 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bca2:	a912      	add	r1, sp, #72	; 0x48
    bca4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bca8:	6849      	ldr	r1, [r1, #4]
    bcaa:	e01d      	b.n	bce8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x75c>
        desc0_out->strides[i] = 0;
    bcac:	a818      	add	r0, sp, #96	; 0x60
    bcae:	1d1a      	adds	r2, r3, #4
    bcb0:	2400      	movs	r4, #0
    bcb2:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        desc0_out->extents[i] = extent1;
    bcb6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  for (int i = 0; i < N; ++i) {
    bcba:	3301      	adds	r3, #1
    bcbc:	2b03      	cmp	r3, #3
    bcbe:	dc23      	bgt.n	bd08 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x77c>
    TFLITE_DCHECK_GE(i, 0);
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	dbe1      	blt.n	bc88 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6fc>
    TFLITE_DCHECK_LT(i, size_);
    bcc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bcc6:	4293      	cmp	r3, r2
    bcc8:	dae0      	bge.n	bc8c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x700>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bcca:	2a05      	cmp	r2, #5
    bccc:	dde0      	ble.n	bc90 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x704>
    bcce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bcd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    bcd4:	2b00      	cmp	r3, #0
    bcd6:	dbe0      	blt.n	bc9a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x70e>
    TFLITE_DCHECK_LT(i, size_);
    bcd8:	9912      	ldr	r1, [sp, #72]	; 0x48
    bcda:	428b      	cmp	r3, r1
    bcdc:	dadf      	bge.n	bc9e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x712>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bcde:	2905      	cmp	r1, #5
    bce0:	dddf      	ble.n	bca2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x716>
    bce2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bce4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
    bce8:	4291      	cmp	r1, r2
    bcea:	d0e6      	beq.n	bcba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x72e>
      if (extent0 == 1) {
    bcec:	2a01      	cmp	r2, #1
    bcee:	d0dd      	beq.n	bcac <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x720>
        TFLITE_DCHECK_EQ(extent1, 1);
    bcf0:	2901      	cmp	r1, #1
    bcf2:	d107      	bne.n	bd04 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x778>
        desc1_out->strides[i] = 0;
    bcf4:	a820      	add	r0, sp, #128	; 0x80
    bcf6:	1d19      	adds	r1, r3, #4
    bcf8:	2400      	movs	r4, #0
    bcfa:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
        desc1_out->extents[i] = extent0;
    bcfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    bd02:	e7da      	b.n	bcba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x72e>
        TFLITE_DCHECK_EQ(extent1, 1);
    bd04:	f00c fece 	bl	18aa4 <abort>
    if (size_ > kMaxSmallSize) {
    bd08:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd0a:	2b05      	cmp	r3, #5
    bd0c:	dd03      	ble.n	bd16 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78a>
      delete[] dims_pointer_;
    bd0e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bd10:	b108      	cbz	r0, bd16 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78a>
    bd12:	f00c feb2 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bd16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd18:	2b05      	cmp	r3, #5
    bd1a:	dd03      	ble.n	bd24 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x798>
      delete[] dims_pointer_;
    bd1c:	980d      	ldr	r0, [sp, #52]	; 0x34
    bd1e:	b108      	cbz	r0, bd24 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x798>
    bd20:	f00c feab 	bl	18a7a <_ZdaPv>
      : size_(0) {
    bd24:	2300      	movs	r3, #0
    bd26:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    bd28:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bd2a:	2b04      	cmp	r3, #4
    bd2c:	dc0c      	bgt.n	bd48 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7bc>
    if (size_ > kMaxSmallSize) {
    bd2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd30:	2b05      	cmp	r3, #5
    bd32:	dd03      	ble.n	bd3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7b0>
      delete[] dims_pointer_;
    bd34:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bd36:	b108      	cbz	r0, bd3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7b0>
    bd38:	f00c fe9f 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
    bd3c:	2304      	movs	r3, #4
    bd3e:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    bd40:	985a      	ldr	r0, [sp, #360]	; 0x168
    const int size_increase = new_shape_size - shape.DimensionsCount();
    bd42:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    bd44:	2300      	movs	r3, #0
    bd46:	e00a      	b.n	bd5e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7d2>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bd48:	f00c feac 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    bd4c:	f00c feaa 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bd50:	f00c fea8 	bl	18aa4 <abort>
      dims_pointer_[i] = val;
    bd54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bd56:	2101      	movs	r1, #1
    bd58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_increase; ++i) {
    bd5c:	3301      	adds	r3, #1
    bd5e:	4298      	cmp	r0, r3
    bd60:	dd0c      	ble.n	bd7c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7f0>
    TFLITE_DCHECK_GE(i, 0);
    bd62:	2b00      	cmp	r3, #0
    bd64:	dbf2      	blt.n	bd4c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c0>
    TFLITE_DCHECK_LT(i, size_);
    bd66:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bd68:	4293      	cmp	r3, r2
    bd6a:	daf1      	bge.n	bd50 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c4>
    if (size_ > kMaxSmallSize) {
    bd6c:	2a05      	cmp	r2, #5
    bd6e:	dcf1      	bgt.n	bd54 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c8>
      dims_[i] = val;
    bd70:	aa12      	add	r2, sp, #72	; 0x48
    bd72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    bd76:	2101      	movs	r1, #1
    bd78:	6051      	str	r1, [r2, #4]
    bd7a:	e7ef      	b.n	bd5c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7d0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bd7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd7e:	2b05      	cmp	r3, #5
    bd80:	dd16      	ble.n	bdb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x824>
    bd82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bd84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bd88:	9a5a      	ldr	r2, [sp, #360]	; 0x168
    bd8a:	2a05      	cmp	r2, #5
    bd8c:	dd12      	ble.n	bdb4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x828>
    bd8e:	995b      	ldr	r1, [sp, #364]	; 0x16c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bd90:	0092      	lsls	r2, r2, #2
    bd92:	f00c feae 	bl	18af2 <memcpy>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    bd96:	2700      	movs	r7, #0
    TFLITE_DCHECK_LT(i, size_);
    bd98:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd9a:	2b00      	cmp	r3, #0
    bd9c:	dd0c      	ble.n	bdb8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x82c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bd9e:	2b05      	cmp	r3, #5
    bda0:	dd0c      	ble.n	bdbc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x830>
    bda2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bda4:	681b      	ldr	r3, [r3, #0]
    bda6:	429f      	cmp	r7, r3
    bda8:	f280 80c2 	bge.w	bf30 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9a4>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    bdac:	2600      	movs	r6, #0
    bdae:	e0b0      	b.n	bf12 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x986>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bdb0:	ab13      	add	r3, sp, #76	; 0x4c
    bdb2:	e7e7      	b.n	bd84 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7f8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bdb4:	a95b      	add	r1, sp, #364	; 0x16c
    bdb6:	e7eb      	b.n	bd90 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x804>
    TFLITE_DCHECK_LT(i, size_);
    bdb8:	f00c fe74 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bdbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bdbe:	e7f2      	b.n	bda6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x81a>
    TFLITE_DCHECK_LT(i, size_);
    bdc0:	f00c fe70 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bdc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bdc6:	e0ad      	b.n	bf24 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x998>
    TFLITE_DCHECK_LT(i, size_);
    bdc8:	f00c fe6c 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bdcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bdce:	e09b      	b.n	bf08 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x97c>
    TFLITE_DCHECK_LT(i, size_);
    bdd0:	f00c fe68 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bdd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    bdd6:	429c      	cmp	r4, r3
    bdd8:	f280 808c 	bge.w	bef4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x968>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bddc:	2f00      	cmp	r7, #0
    bdde:	db6f      	blt.n	bec0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x934>
    bde0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bde2:	429f      	cmp	r7, r3
    bde4:	da6c      	bge.n	bec0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x934>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bde6:	2e00      	cmp	r6, #0
    bde8:	db6c      	blt.n	bec4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x938>
    bdea:	9b19      	ldr	r3, [sp, #100]	; 0x64
    bdec:	429e      	cmp	r6, r3
    bdee:	da69      	bge.n	bec4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x938>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bdf0:	2d00      	cmp	r5, #0
    bdf2:	db69      	blt.n	bec8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x93c>
    bdf4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bdf6:	429d      	cmp	r5, r3
    bdf8:	da66      	bge.n	bec8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x93c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    bdfa:	2c00      	cmp	r4, #0
    bdfc:	db66      	blt.n	becc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x940>
    bdfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    be00:	429c      	cmp	r4, r3
    be02:	da63      	bge.n	becc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x940>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    be04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    be06:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    be08:	fb02 f206 	mul.w	r2, r2, r6
    be0c:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
    be10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    be12:	991e      	ldr	r1, [sp, #120]	; 0x78
    be14:	fb01 f105 	mul.w	r1, r1, r5
    be18:	fb02 1204 	mla	r2, r2, r4, r1
         i3 * desc.strides[3];
    be1c:	4413      	add	r3, r2
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
    be1e:	f918 0003 	ldrsb.w	r0, [r8, r3]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    be22:	2f00      	cmp	r7, #0
    be24:	db54      	blt.n	bed0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x944>
    be26:	9b20      	ldr	r3, [sp, #128]	; 0x80
    be28:	429f      	cmp	r7, r3
    be2a:	da51      	bge.n	bed0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x944>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    be2c:	2e00      	cmp	r6, #0
    be2e:	db51      	blt.n	bed4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x948>
    be30:	9b21      	ldr	r3, [sp, #132]	; 0x84
    be32:	429e      	cmp	r6, r3
    be34:	da4e      	bge.n	bed4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x948>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    be36:	2d00      	cmp	r5, #0
    be38:	db4e      	blt.n	bed8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x94c>
    be3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    be3c:	429d      	cmp	r5, r3
    be3e:	da4b      	bge.n	bed8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x94c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    be40:	2c00      	cmp	r4, #0
    be42:	db4b      	blt.n	bedc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x950>
    be44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    be46:	429c      	cmp	r4, r3
    be48:	da48      	bge.n	bedc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x950>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    be4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    be4c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    be4e:	fb02 f206 	mul.w	r2, r2, r6
    be52:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
    be56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    be58:	9926      	ldr	r1, [sp, #152]	; 0x98
    be5a:	fb01 f105 	mul.w	r1, r1, r5
    be5e:	fb02 1204 	mla	r2, r2, r4, r1
         i3 * desc.strides[3];
    be62:	4413      	add	r3, r2
    be64:	f919 1003 	ldrsb.w	r1, [r9, r3]
  inline int32_t DimensionsCount() const { return size_; }
    be68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    be6a:	2b04      	cmp	r3, #4
    be6c:	d138      	bne.n	bee0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x954>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    be6e:	2f00      	cmp	r7, #0
    be70:	db38      	blt.n	bee4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x958>
    be72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    be74:	429f      	cmp	r7, r3
    be76:	da35      	bge.n	bee4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x958>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    be78:	2e00      	cmp	r6, #0
    be7a:	db35      	blt.n	bee8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x95c>
    be7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    be7e:	4296      	cmp	r6, r2
    be80:	da32      	bge.n	bee8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x95c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    be82:	2d00      	cmp	r5, #0
    be84:	db32      	blt.n	beec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x960>
    be86:	9b15      	ldr	r3, [sp, #84]	; 0x54
    be88:	429d      	cmp	r5, r3
    be8a:	da2f      	bge.n	beec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x960>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    be8c:	2c00      	cmp	r4, #0
    be8e:	db2f      	blt.n	bef0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x964>
    be90:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    be94:	455c      	cmp	r4, fp
    be96:	da2b      	bge.n	bef0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x964>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    be98:	fb02 6207 	mla	r2, r2, r7, r6
    be9c:	fb02 5303 	mla	r3, r2, r3, r5
    bea0:	fb03 4b0b 	mla	fp, r3, fp, r4
    bea4:	aa28      	add	r2, sp, #160	; 0xa0
    bea6:	f7ff f9a9 	bl	b1fc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
    beaa:	f80a 000b 	strb.w	r0, [sl, fp]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    beae:	3401      	adds	r4, #1
    TFLITE_DCHECK_LT(i, size_);
    beb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    beb2:	2b03      	cmp	r3, #3
    beb4:	dd8c      	ble.n	bdd0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x844>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    beb6:	2b05      	cmp	r3, #5
    beb8:	dd8c      	ble.n	bdd4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x848>
    beba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bebc:	68db      	ldr	r3, [r3, #12]
    bebe:	e78a      	b.n	bdd6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x84a>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bec0:	f00c fdf0 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bec4:	f00c fdee 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bec8:	f00c fdec 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    becc:	f00c fdea 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bed0:	f00c fde8 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bed4:	f00c fde6 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bed8:	f00c fde4 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    bedc:	f00c fde2 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bee0:	f00c fde0 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bee4:	f00c fdde 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bee8:	f00c fddc 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    beec:	f00c fdda 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bef0:	f00c fdd8 	bl	18aa4 <abort>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    bef4:	3501      	adds	r5, #1
    TFLITE_DCHECK_LT(i, size_);
    bef6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bef8:	2b02      	cmp	r3, #2
    befa:	f77f af65 	ble.w	bdc8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x83c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    befe:	2b05      	cmp	r3, #5
    bf00:	f77f af64 	ble.w	bdcc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x840>
    bf04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bf06:	689b      	ldr	r3, [r3, #8]
    bf08:	429d      	cmp	r5, r3
    bf0a:	da01      	bge.n	bf10 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x984>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    bf0c:	2400      	movs	r4, #0
    bf0e:	e7cf      	b.n	beb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x924>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    bf10:	3601      	adds	r6, #1
    TFLITE_DCHECK_LT(i, size_);
    bf12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bf14:	2b01      	cmp	r3, #1
    bf16:	f77f af53 	ble.w	bdc0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x834>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bf1a:	2b05      	cmp	r3, #5
    bf1c:	f77f af52 	ble.w	bdc4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x838>
    bf20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bf22:	685b      	ldr	r3, [r3, #4]
    bf24:	429e      	cmp	r6, r3
    bf26:	da01      	bge.n	bf2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9a0>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    bf28:	2500      	movs	r5, #0
    bf2a:	e7e4      	b.n	bef6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x96a>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    bf2c:	3701      	adds	r7, #1
    bf2e:	e733      	b.n	bd98 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x80c>
    if (size_ > kMaxSmallSize) {
    bf30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bf32:	2b05      	cmp	r3, #5
    bf34:	dd03      	ble.n	bf3e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9b2>
      delete[] dims_pointer_;
    bf36:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bf38:	b108      	cbz	r0, bf3e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9b2>
    bf3a:	f00c fd9e 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bf3e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    bf40:	2b05      	cmp	r3, #5
    bf42:	dd03      	ble.n	bf4c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c0>
      delete[] dims_pointer_;
    bf44:	985b      	ldr	r0, [sp, #364]	; 0x16c
    bf46:	b108      	cbz	r0, bf4c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c0>
    bf48:	f00c fd97 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bf4c:	9b54      	ldr	r3, [sp, #336]	; 0x150
    bf4e:	2b05      	cmp	r3, #5
    bf50:	dd03      	ble.n	bf5a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9ce>
      delete[] dims_pointer_;
    bf52:	9855      	ldr	r0, [sp, #340]	; 0x154
    bf54:	b108      	cbz	r0, bf5a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9ce>
    bf56:	f00c fd90 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bf5a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    bf5c:	2b05      	cmp	r3, #5
    bf5e:	dd03      	ble.n	bf68 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9dc>
      delete[] dims_pointer_;
    bf60:	984f      	ldr	r0, [sp, #316]	; 0x13c
    bf62:	b108      	cbz	r0, bf68 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9dc>
    bf64:	f00c fd89 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    bf68:	2000      	movs	r0, #0
    bf6a:	e361      	b.n	c630 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
            op_params, tflite::micro::GetTensorShape(input1),
    bf6c:	4639      	mov	r1, r7
    bf6e:	a860      	add	r0, sp, #384	; 0x180
    bf70:	f00b f9c3 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bf74:	4638      	mov	r0, r7
    bf76:	f00a f80b 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    bf7a:	4607      	mov	r7, r0
            tflite::micro::GetTensorShape(input2),
    bf7c:	4631      	mov	r1, r6
    bf7e:	a866      	add	r0, sp, #408	; 0x198
    bf80:	f00b f9bb 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bf84:	4630      	mov	r0, r6
    bf86:	f00a f803 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    bf8a:	4606      	mov	r6, r0
            tflite::micro::GetTensorShape(output),
    bf8c:	4629      	mov	r1, r5
    bf8e:	a86c      	add	r0, sp, #432	; 0x1b0
    bf90:	f00b f9b3 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bf94:	4628      	mov	r0, r5
    bf96:	f00a f801 	bl	15f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    bf9a:	4680      	mov	r8, r0
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    bf9c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    bf9e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    bfa0:	429a      	cmp	r2, r3
    bfa2:	dc12      	bgt.n	bfca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa3e>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    bfa4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    bfa6:	4252      	negs	r2, r2
    bfa8:	f112 0f80 	cmn.w	r2, #128	; 0x80
    bfac:	db0f      	blt.n	bfce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa42>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    bfae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bfb0:	425b      	negs	r3, r3
    bfb2:	f113 0f80 	cmn.w	r3, #128	; 0x80
    bfb6:	db0c      	blt.n	bfd2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa46>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    bfb8:	2a7f      	cmp	r2, #127	; 0x7f
    bfba:	dc0c      	bgt.n	bfd6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4a>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    bfbc:	2b7f      	cmp	r3, #127	; 0x7f
    bfbe:	dc0c      	bgt.n	bfda <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bfc0:	9960      	ldr	r1, [sp, #384]	; 0x180
    bfc2:	2905      	cmp	r1, #5
    bfc4:	dd0b      	ble.n	bfde <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa52>
    bfc6:	9861      	ldr	r0, [sp, #388]	; 0x184
    bfc8:	e00a      	b.n	bfe0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa54>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    bfca:	f00c fd6b 	bl	18aa4 <abort>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    bfce:	f00c fd69 	bl	18aa4 <abort>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    bfd2:	f00c fd67 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    bfd6:	f00c fd65 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    bfda:	f00c fd63 	bl	18aa4 <abort>
    bfde:	a861      	add	r0, sp, #388	; 0x184
    for (int i = 0; i < size_; i++) {
    bfe0:	2300      	movs	r3, #0
    int buffer_size = 1;
    bfe2:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    bfe4:	4299      	cmp	r1, r3
    bfe6:	dd05      	ble.n	bff4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa68>
      buffer_size *= dims_data[i];
    bfe8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    bfec:	fb02 f505 	mul.w	r5, r2, r5
    for (int i = 0; i < size_; i++) {
    bff0:	3301      	adds	r3, #1
    bff2:	e7f7      	b.n	bfe4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa58>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bff4:	9866      	ldr	r0, [sp, #408]	; 0x198
    bff6:	2805      	cmp	r0, #5
    bff8:	dd01      	ble.n	bffe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa72>
    bffa:	9c67      	ldr	r4, [sp, #412]	; 0x19c
    bffc:	e000      	b.n	c000 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa74>
    bffe:	ac67      	add	r4, sp, #412	; 0x19c
    for (int i = 0; i < size_; i++) {
    c000:	2300      	movs	r3, #0
    int buffer_size = 1;
    c002:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
    c004:	4298      	cmp	r0, r3
    c006:	dd05      	ble.n	c014 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa88>
      buffer_size *= dims_data[i];
    c008:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    c00c:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
    c010:	3301      	adds	r3, #1
    c012:	e7f7      	b.n	c004 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa78>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c014:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
    c016:	2c05      	cmp	r4, #5
    c018:	dd0b      	ble.n	c032 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaa6>
    c01a:	986d      	ldr	r0, [sp, #436]	; 0x1b4
    for (int i = 0; i < size_; i++) {
    c01c:	2300      	movs	r3, #0
    int buffer_size = 1;
    c01e:	2101      	movs	r1, #1
    c020:	4694      	mov	ip, r2
    for (int i = 0; i < size_; i++) {
    c022:	429c      	cmp	r4, r3
    c024:	dd07      	ble.n	c036 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaaa>
      buffer_size *= dims_data[i];
    c026:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    c02a:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    c02e:	3301      	adds	r3, #1
    c030:	e7f7      	b.n	c022 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa96>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c032:	a86d      	add	r0, sp, #436	; 0x1b4
    c034:	e7f2      	b.n	c01c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa90>
  TFLITE_CHECK_EQ(size_1, size_2);
    c036:	4565      	cmp	r5, ip
    c038:	d115      	bne.n	c066 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xada>
  TFLITE_CHECK_EQ(size_2, size_3);
    c03a:	458c      	cmp	ip, r1
    c03c:	d115      	bne.n	c06a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xade>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    c03e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    c040:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    c042:	429a      	cmp	r2, r3
    c044:	dc13      	bgt.n	c06e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xae2>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    c046:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c048:	4252      	negs	r2, r2
    c04a:	f112 0f80 	cmn.w	r2, #128	; 0x80
    c04e:	db10      	blt.n	c072 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xae6>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    c050:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c052:	425b      	negs	r3, r3
    c054:	f113 0f80 	cmn.w	r3, #128	; 0x80
    c058:	db0d      	blt.n	c076 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaea>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    c05a:	2a7f      	cmp	r2, #127	; 0x7f
    c05c:	dc0d      	bgt.n	c07a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaee>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    c05e:	2b7f      	cmp	r3, #127	; 0x7f
    c060:	dc0d      	bgt.n	c07e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaf2>
  for (int i = 0; i < size; ++i) {
    c062:	2400      	movs	r4, #0
    c064:	e015      	b.n	c092 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb06>
  TFLITE_CHECK_EQ(size_1, size_2);
    c066:	f00c fd1d 	bl	18aa4 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
    c06a:	f00c fd1b 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    c06e:	f00c fd19 	bl	18aa4 <abort>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    c072:	f00c fd17 	bl	18aa4 <abort>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    c076:	f00c fd15 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    c07a:	f00c fd13 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    c07e:	f00c fd11 	bl	18aa4 <abort>
    output_data[i] = binary_func(input1_data[i], input2_data[i], params);
    c082:	aa28      	add	r2, sp, #160	; 0xa0
    c084:	5731      	ldrsb	r1, [r6, r4]
    c086:	5738      	ldrsb	r0, [r7, r4]
    c088:	f7ff f8b8 	bl	b1fc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
    c08c:	f808 0004 	strb.w	r0, [r8, r4]
  for (int i = 0; i < size; ++i) {
    c090:	3401      	adds	r4, #1
    c092:	42ac      	cmp	r4, r5
    c094:	dbf5      	blt.n	c082 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaf6>
    if (size_ > kMaxSmallSize) {
    c096:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    c098:	2b05      	cmp	r3, #5
    c09a:	dd03      	ble.n	c0a4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb18>
      delete[] dims_pointer_;
    c09c:	986d      	ldr	r0, [sp, #436]	; 0x1b4
    c09e:	b108      	cbz	r0, c0a4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb18>
    c0a0:	f00c fceb 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c0a4:	9b66      	ldr	r3, [sp, #408]	; 0x198
    c0a6:	2b05      	cmp	r3, #5
    c0a8:	dd03      	ble.n	c0b2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb26>
      delete[] dims_pointer_;
    c0aa:	9867      	ldr	r0, [sp, #412]	; 0x19c
    c0ac:	b108      	cbz	r0, c0b2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb26>
    c0ae:	f00c fce4 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c0b2:	9b60      	ldr	r3, [sp, #384]	; 0x180
    c0b4:	2b05      	cmp	r3, #5
    c0b6:	dd03      	ble.n	c0c0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb34>
      delete[] dims_pointer_;
    c0b8:	9861      	ldr	r0, [sp, #388]	; 0x184
    c0ba:	b108      	cbz	r0, c0c0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb34>
    c0bc:	f00c fcdd 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    c0c0:	2000      	movs	r0, #0
    c0c2:	e2b5      	b.n	c630 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
      if (need_broadcast) {
    c0c4:	9b05      	ldr	r3, [sp, #20]
    c0c6:	2b00      	cmp	r3, #0
    c0c8:	d037      	beq.n	c13a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbae>
            op_params, tflite::micro::GetTensorShape(input1),
    c0ca:	4639      	mov	r1, r7
    c0cc:	a872      	add	r0, sp, #456	; 0x1c8
    c0ce:	f00b f914 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    c0d2:	4638      	mov	r0, r7
    c0d4:	f00a fb5b 	bl	1678e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    c0d8:	4604      	mov	r4, r0
            tflite::micro::GetTensorShape(input2),
    c0da:	4631      	mov	r1, r6
    c0dc:	a878      	add	r0, sp, #480	; 0x1e0
    c0de:	f00b f90c 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    c0e2:	4630      	mov	r0, r6
    c0e4:	f00a fb53 	bl	1678e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    c0e8:	4606      	mov	r6, r0
            tflite::micro::GetTensorShape(output),
    c0ea:	af7e      	add	r7, sp, #504	; 0x1f8
    c0ec:	4629      	mov	r1, r5
    c0ee:	4638      	mov	r0, r7
    c0f0:	f00b f903 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    c0f4:	4628      	mov	r0, r5
    c0f6:	f00a fb50 	bl	1679a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    c0fa:	9002      	str	r0, [sp, #8]
    c0fc:	9701      	str	r7, [sp, #4]
    c0fe:	9600      	str	r6, [sp, #0]
    c100:	ab78      	add	r3, sp, #480	; 0x1e0
    c102:	4622      	mov	r2, r4
    c104:	a972      	add	r1, sp, #456	; 0x1c8
    c106:	a828      	add	r0, sp, #160	; 0xa0
    c108:	f7fe fc0a 	bl	a920 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>
    if (size_ > kMaxSmallSize) {
    c10c:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
    c10e:	2b05      	cmp	r3, #5
    c110:	dd03      	ble.n	c11a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8e>
      delete[] dims_pointer_;
    c112:	987f      	ldr	r0, [sp, #508]	; 0x1fc
    c114:	b108      	cbz	r0, c11a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8e>
    c116:	f00c fcb0 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c11a:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
    c11c:	2b05      	cmp	r3, #5
    c11e:	dd03      	ble.n	c128 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb9c>
      delete[] dims_pointer_;
    c120:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    c122:	b108      	cbz	r0, c128 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb9c>
    c124:	f00c fca9 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c128:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
    c12a:	2b05      	cmp	r3, #5
    c12c:	dd03      	ble.n	c136 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbaa>
      delete[] dims_pointer_;
    c12e:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    c130:	b108      	cbz	r0, c136 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbaa>
    c132:	f00c fca2 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    c136:	2000      	movs	r0, #0
    c138:	e27a      	b.n	c630 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    c13a:	4639      	mov	r1, r7
    c13c:	a884      	add	r0, sp, #528	; 0x210
    c13e:	f00b f8dc 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    c142:	4638      	mov	r0, r7
    c144:	f00a fb23 	bl	1678e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    c148:	9009      	str	r0, [sp, #36]	; 0x24
                           tflite::micro::GetTensorShape(input2),
    c14a:	4631      	mov	r1, r6
    c14c:	a88a      	add	r0, sp, #552	; 0x228
    c14e:	f00b f8d4 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    c152:	4630      	mov	r0, r6
    c154:	f00a fb1b 	bl	1678e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    c158:	900a      	str	r0, [sp, #40]	; 0x28
                           tflite::micro::GetTensorShape(output),
    c15a:	4629      	mov	r1, r5
    c15c:	a890      	add	r0, sp, #576	; 0x240
    c15e:	f00b f8cc 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    c162:	4628      	mov	r0, r5
    c164:	f00a fb19 	bl	1679a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    c168:	900b      	str	r0, [sp, #44]	; 0x2c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    c16a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    c16c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    c16e:	429a      	cmp	r2, r3
    c170:	dc04      	bgt.n	c17c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c172:	9984      	ldr	r1, [sp, #528]	; 0x210
    c174:	2905      	cmp	r1, #5
    c176:	dd03      	ble.n	c180 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf4>
    c178:	9885      	ldr	r0, [sp, #532]	; 0x214
    c17a:	e002      	b.n	c182 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf6>
    c17c:	f00c fc92 	bl	18aa4 <abort>
    c180:	a885      	add	r0, sp, #532	; 0x214
    for (int i = 0; i < size_; i++) {
    c182:	2300      	movs	r3, #0
    int buffer_size = 1;
    c184:	2201      	movs	r2, #1
    c186:	e004      	b.n	c192 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc06>
      buffer_size *= dims_data[i];
    c188:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    c18c:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
    c190:	3301      	adds	r3, #1
    c192:	4299      	cmp	r1, r3
    c194:	dcf8      	bgt.n	c188 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbfc>
    c196:	9208      	str	r2, [sp, #32]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c198:	988a      	ldr	r0, [sp, #552]	; 0x228
    c19a:	2805      	cmp	r0, #5
    c19c:	dd01      	ble.n	c1a2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc16>
    c19e:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
    c1a0:	e000      	b.n	c1a4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc18>
    c1a2:	ac8b      	add	r4, sp, #556	; 0x22c
    for (int i = 0; i < size_; i++) {
    c1a4:	2300      	movs	r3, #0
    int buffer_size = 1;
    c1a6:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    c1a8:	4298      	cmp	r0, r3
    c1aa:	dd05      	ble.n	c1b8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc2c>
      buffer_size *= dims_data[i];
    c1ac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    c1b0:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    c1b4:	3301      	adds	r3, #1
    c1b6:	e7f7      	b.n	c1a8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc1c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c1b8:	9c90      	ldr	r4, [sp, #576]	; 0x240
    c1ba:	2c05      	cmp	r4, #5
    c1bc:	dd01      	ble.n	c1c2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc36>
    c1be:	9d91      	ldr	r5, [sp, #580]	; 0x244
    c1c0:	e000      	b.n	c1c4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc38>
    c1c2:	ad91      	add	r5, sp, #580	; 0x244
    for (int i = 0; i < size_; i++) {
    c1c4:	2300      	movs	r3, #0
    int buffer_size = 1;
    c1c6:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
    c1c8:	429c      	cmp	r4, r3
    c1ca:	dd05      	ble.n	c1d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc4c>
      buffer_size *= dims_data[i];
    c1cc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    c1d0:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    c1d4:	3301      	adds	r3, #1
    c1d6:	e7f7      	b.n	c1c8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc3c>
  TFLITE_CHECK_EQ(size_1, size_2);
    c1d8:	9b08      	ldr	r3, [sp, #32]
    c1da:	428b      	cmp	r3, r1
    c1dc:	d124      	bne.n	c228 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc9c>
  TFLITE_CHECK_EQ(size_2, size_3);
    c1de:	4291      	cmp	r1, r2
    c1e0:	d124      	bne.n	c22c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca0>
  TFLITE_DCHECK_GT(params.input1_offset, -max_value);
    c1e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c1e4:	4b42      	ldr	r3, [pc, #264]	; (c2f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    c1e6:	429a      	cmp	r2, r3
    c1e8:	db22      	blt.n	c230 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca4>
  TFLITE_DCHECK_GT(params.input2_offset, -max_value);
    c1ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c1ec:	4940      	ldr	r1, [pc, #256]	; (c2f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    c1ee:	428b      	cmp	r3, r1
    c1f0:	db20      	blt.n	c234 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca8>
  TFLITE_DCHECK_LT(params.input1_offset, max_value);
    c1f2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    c1f6:	428a      	cmp	r2, r1
    c1f8:	dc1e      	bgt.n	c238 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcac>
  TFLITE_DCHECK_LT(params.input2_offset, max_value);
    c1fa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    c1fe:	4293      	cmp	r3, r2
    c200:	dc1c      	bgt.n	c23c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb0>
  TFLITE_DCHECK_GT(params.input1_offset, -std::numeric_limits<T>::max());
    c202:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c204:	4b3a      	ldr	r3, [pc, #232]	; (c2f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    c206:	429a      	cmp	r2, r3
    c208:	db1a      	blt.n	c240 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb4>
  TFLITE_DCHECK_GT(params.input2_offset, -std::numeric_limits<T>::max());
    c20a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c20c:	4938      	ldr	r1, [pc, #224]	; (c2f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    c20e:	428b      	cmp	r3, r1
    c210:	db18      	blt.n	c244 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb8>
  TFLITE_DCHECK_LT(params.input1_offset, std::numeric_limits<T>::max());
    c212:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    c216:	428a      	cmp	r2, r1
    c218:	dc16      	bgt.n	c248 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcbc>
  TFLITE_DCHECK_LT(params.input2_offset, std::numeric_limits<T>::max());
    c21a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    c21e:	4293      	cmp	r3, r2
    c220:	dc14      	bgt.n	c24c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcc0>
  for (int i = 0; i < size; ++i) {
    c222:	f04f 0b00 	mov.w	fp, #0
    c226:	e0c5      	b.n	c3b4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe28>
  TFLITE_CHECK_EQ(size_1, size_2);
    c228:	f00c fc3c 	bl	18aa4 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
    c22c:	f00c fc3a 	bl	18aa4 <abort>
  TFLITE_DCHECK_GT(params.input1_offset, -max_value);
    c230:	f00c fc38 	bl	18aa4 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -max_value);
    c234:	f00c fc36 	bl	18aa4 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, max_value);
    c238:	f00c fc34 	bl	18aa4 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, max_value);
    c23c:	f00c fc32 	bl	18aa4 <abort>
  TFLITE_DCHECK_GT(params.input1_offset, -std::numeric_limits<T>::max());
    c240:	f00c fc30 	bl	18aa4 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -std::numeric_limits<T>::max());
    c244:	f00c fc2e 	bl	18aa4 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, std::numeric_limits<T>::max());
    c248:	f00c fc2c 	bl	18aa4 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, std::numeric_limits<T>::max());
    c24c:	f00c fc2a 	bl	18aa4 <abort>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c250:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c254:	d001      	beq.n	c25a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcce>
    c256:	9905      	ldr	r1, [sp, #20]
    c258:	e0c6      	b.n	c3e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe5c>
    c25a:	2101      	movs	r1, #1
    c25c:	e0c4      	b.n	c3e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe5c>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c25e:	4c25      	ldr	r4, [pc, #148]	; (c2f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    c260:	e0d3      	b.n	c40a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe7e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c262:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c266:	1996      	adds	r6, r2, r6
    c268:	f04f 0400 	mov.w	r4, #0
    c26c:	eb43 0704 	adc.w	r7, r3, r4
    c270:	e0d5      	b.n	c41e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe92>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c272:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c276:	e0d8      	b.n	c42a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe9e>
  assert(exponent >= 0);
    c278:	4b1f      	ldr	r3, [pc, #124]	; (c2f8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6c>)
    c27a:	4a20      	ldr	r2, [pc, #128]	; (c2fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    c27c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    c280:	481f      	ldr	r0, [pc, #124]	; (c300 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    c282:	f006 fc13 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    c286:	4b1f      	ldr	r3, [pc, #124]	; (c304 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd78>)
    c288:	4a1c      	ldr	r2, [pc, #112]	; (c2fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    c28a:	f240 1167 	movw	r1, #359	; 0x167
    c28e:	481c      	ldr	r0, [pc, #112]	; (c300 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    c290:	f006 fc0c 	bl	12aac <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c294:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    c298:	d002      	beq.n	c2a0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd14>
    c29a:	f8dd c014 	ldr.w	ip, [sp, #20]
    c29e:	e10a      	b.n	c4b6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2a>
    c2a0:	f04f 0c01 	mov.w	ip, #1
    c2a4:	e107      	b.n	c4b6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2a>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c2a6:	4913      	ldr	r1, [pc, #76]	; (c2f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    c2a8:	e115      	b.n	c4d6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c2aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c2ae:	1851      	adds	r1, r2, r1
    c2b0:	f04f 0400 	mov.w	r4, #0
    c2b4:	eb43 0004 	adc.w	r0, r3, r4
    c2b8:	e117      	b.n	c4ea <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf5e>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c2ba:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c2be:	e11b      	b.n	c4f8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf6c>
  assert(exponent >= 0);
    c2c0:	4b0d      	ldr	r3, [pc, #52]	; (c2f8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6c>)
    c2c2:	4a0e      	ldr	r2, [pc, #56]	; (c2fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    c2c4:	f44f 71b3 	mov.w	r1, #358	; 0x166
    c2c8:	480d      	ldr	r0, [pc, #52]	; (c300 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    c2ca:	f006 fbef 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    c2ce:	4b0d      	ldr	r3, [pc, #52]	; (c304 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd78>)
    c2d0:	4a0a      	ldr	r2, [pc, #40]	; (c2fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    c2d2:	f240 1167 	movw	r1, #359	; 0x167
    c2d6:	480a      	ldr	r0, [pc, #40]	; (c300 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    c2d8:	f006 fbe8 	bl	12aac <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c2dc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    c2e0:	d001      	beq.n	c2e6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd5a>
    c2e2:	9b05      	ldr	r3, [sp, #20]
    c2e4:	e14d      	b.n	c582 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xff6>
    c2e6:	2301      	movs	r3, #1
    c2e8:	e14b      	b.n	c582 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xff6>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c2ea:	4c02      	ldr	r4, [pc, #8]	; (c2f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    c2ec:	e15a      	b.n	c5a4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1018>
    c2ee:	bf00      	nop
    c2f0:	ffff8002 	.word	0xffff8002
    c2f4:	c0000001 	.word	0xc0000001
    c2f8:	0001c580 	.word	0x0001c580
    c2fc:	0001c590 	.word	0x0001c590
    c300:	0001c5e8 	.word	0x0001c5e8
    c304:	0001c644 	.word	0x0001c644
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c308:	0fec      	lsrs	r4, r5, #31
  std::int32_t ab_x2_high32 =
    c30a:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c30e:	2b00      	cmp	r3, #0
    c310:	f040 815a 	bne.w	c5c8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x103c>
  return RoundingDivideByPOT(
    c314:	4255      	negs	r5, r2
  assert(exponent >= 0);
    c316:	2d00      	cmp	r5, #0
    c318:	f2c0 8159 	blt.w	c5ce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1042>
  assert(exponent <= 31);
    c31c:	2d1f      	cmp	r5, #31
    c31e:	f300 815d 	bgt.w	c5dc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1050>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c322:	f04f 0a01 	mov.w	sl, #1
    c326:	fa0a f005 	lsl.w	r0, sl, r5
    c32a:	3801      	subs	r0, #1
    c32c:	f009 fe3a 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c330:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c332:	2000      	movs	r0, #0
    c334:	f009 fe36 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c338:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    c33a:	4650      	mov	r0, sl
    c33c:	f009 fe32 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c340:	4606      	mov	r6, r0
  const IntegerType remainder = BitAnd(x, mask);
    c342:	4639      	mov	r1, r7
    c344:	4620      	mov	r0, r4
    c346:	f009 fe2e 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c34a:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c34c:	4651      	mov	r1, sl
    c34e:	4638      	mov	r0, r7
    c350:	f009 fe2b 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c354:	4607      	mov	r7, r0
    c356:	4649      	mov	r1, r9
    c358:	4620      	mov	r0, r4
    c35a:	f009 fe32 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c35e:	4631      	mov	r1, r6
    c360:	f009 fe21 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c364:	4601      	mov	r1, r0
    c366:	4638      	mov	r0, r7
    c368:	f009 fe21 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c36c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    c36e:	4629      	mov	r1, r5
    c370:	4620      	mov	r0, r4
    c372:	f009 fe1a 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c376:	4604      	mov	r4, r0
    c378:	4639      	mov	r1, r7
    c37a:	4640      	mov	r0, r8
    c37c:	f009 fe29 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c380:	4631      	mov	r1, r6
    c382:	f009 fe10 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c386:	4601      	mov	r1, r0
    c388:	4620      	mov	r0, r4
    c38a:	f009 fe10 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
        params.output_offset;
    c38e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
            raw_sum, params.output_multiplier, params.output_shift) +
    c390:	4418      	add	r0, r3
    const int32_t raw_output =
    c392:	9020      	str	r0, [sp, #128]	; 0x80
      if (__a < __b)
    c394:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    c396:	4298      	cmp	r0, r3
    c398:	f300 8127 	bgt.w	c5ea <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x105e>
      return __a;
    c39c:	ab33      	add	r3, sp, #204	; 0xcc
      if (__b < __a)
    c39e:	6819      	ldr	r1, [r3, #0]
    c3a0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    c3a2:	4291      	cmp	r1, r2
    c3a4:	db00      	blt.n	c3a8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe1c>
      return __a;
    c3a6:	ab34      	add	r3, sp, #208	; 0xd0
    const int32_t clamped_output =
    c3a8:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<T>(clamped_output);
    c3aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c3ac:	9906      	ldr	r1, [sp, #24]
    c3ae:	5253      	strh	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    c3b0:	f10b 0b01 	add.w	fp, fp, #1
    c3b4:	9b08      	ldr	r3, [sp, #32]
    c3b6:	455b      	cmp	r3, fp
    c3b8:	f340 8119 	ble.w	c5ee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1062>
    const int32_t input1_val = params.input1_offset + input1_data[i];
    c3bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c3be:	ea4f 034b 	mov.w	r3, fp, lsl #1
    c3c2:	9306      	str	r3, [sp, #24]
    c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3c6:	f933 301b 	ldrsh.w	r3, [r3, fp, lsl #1]
    c3ca:	441a      	add	r2, r3
    const int32_t input2_val = params.input2_offset + input2_data[i];
    c3cc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    c3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3d0:	f933 301b 	ldrsh.w	r3, [r3, fp, lsl #1]
    c3d4:	441d      	add	r5, r3
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
    c3d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c3d8:	409a      	lsls	r2, r3
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
    c3da:	409d      	lsls	r5, r3
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
    c3dc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    c3de:	9830      	ldr	r0, [sp, #192]	; 0xc0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c3e0:	429a      	cmp	r2, r3
    c3e2:	f43f af35 	beq.w	c250 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcc4>
    c3e6:	9905      	ldr	r1, [sp, #20]
  std::int64_t a_64(a);
    c3e8:	ea4f 79e2 	mov.w	r9, r2, asr #31
  std::int64_t b_64(b);
    c3ec:	17df      	asrs	r7, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    c3ee:	fb02 f407 	mul.w	r4, r2, r7
    c3f2:	fb03 4409 	mla	r4, r3, r9, r4
    c3f6:	fba2 2303 	umull	r2, r3, r2, r3
    c3fa:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c3fc:	2a00      	cmp	r2, #0
    c3fe:	f173 0400 	sbcs.w	r4, r3, #0
    c402:	f6ff af2c 	blt.w	c25e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcd2>
    c406:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c40a:	1912      	adds	r2, r2, r4
    c40c:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    c410:	4616      	mov	r6, r2
    c412:	461f      	mov	r7, r3
    c414:	2a00      	cmp	r2, #0
    c416:	f173 0400 	sbcs.w	r4, r3, #0
    c41a:	f6ff af22 	blt.w	c262 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcd6>
    c41e:	0ff4      	lsrs	r4, r6, #31
  std::int32_t ab_x2_high32 =
    c420:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c424:	2900      	cmp	r1, #0
    c426:	f47f af24 	bne.w	c272 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xce6>
    c42a:	4246      	negs	r6, r0
  assert(exponent >= 0);
    c42c:	2e00      	cmp	r6, #0
    c42e:	f6ff af23 	blt.w	c278 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcec>
  assert(exponent <= 31);
    c432:	2e1f      	cmp	r6, #31
    c434:	f73f af27 	bgt.w	c286 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcfa>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c438:	f04f 0a01 	mov.w	sl, #1
    c43c:	fa0a f006 	lsl.w	r0, sl, r6
    c440:	3801      	subs	r0, #1
    c442:	f009 fdaf 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c446:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c448:	2000      	movs	r0, #0
    c44a:	f009 fdab 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c44e:	9007      	str	r0, [sp, #28]
  const IntegerType one = Dup<IntegerType>(1);
    c450:	4650      	mov	r0, sl
    c452:	f009 fda7 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c456:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    c458:	4641      	mov	r1, r8
    c45a:	4620      	mov	r0, r4
    c45c:	f009 fda3 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c460:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c462:	4651      	mov	r1, sl
    c464:	4640      	mov	r0, r8
    c466:	f009 fda0 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c46a:	4680      	mov	r8, r0
    c46c:	9907      	ldr	r1, [sp, #28]
    c46e:	4620      	mov	r0, r4
    c470:	f009 fda7 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c474:	4639      	mov	r1, r7
    c476:	f009 fd96 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c47a:	4601      	mov	r1, r0
    c47c:	4640      	mov	r0, r8
    c47e:	f009 fd96 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c482:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    c484:	4631      	mov	r1, r6
    c486:	4620      	mov	r0, r4
    c488:	f009 fd8f 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c48c:	4604      	mov	r4, r0
    c48e:	4641      	mov	r1, r8
    c490:	4648      	mov	r0, r9
    c492:	f009 fd9e 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c496:	4639      	mov	r1, r7
    c498:	f009 fd85 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c49c:	4601      	mov	r1, r0
    c49e:	4620      	mov	r0, r4
    c4a0:	f009 fd85 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c4a4:	4680      	mov	r8, r0
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
    c4a6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    c4a8:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c4ac:	4295      	cmp	r5, r2
    c4ae:	f43f aef1 	beq.w	c294 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd08>
    c4b2:	f8dd c014 	ldr.w	ip, [sp, #20]
  std::int64_t a_64(a);
    c4b6:	17e9      	asrs	r1, r5, #31
  std::int64_t b_64(b);
    c4b8:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    c4ba:	fb05 f307 	mul.w	r3, r5, r7
    c4be:	fb02 3101 	mla	r1, r2, r1, r3
    c4c2:	fba5 2302 	umull	r2, r3, r5, r2
    c4c6:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c4c8:	2a00      	cmp	r2, #0
    c4ca:	f173 0100 	sbcs.w	r1, r3, #0
    c4ce:	f6ff aeea 	blt.w	c2a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd1a>
    c4d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c4d6:	1852      	adds	r2, r2, r1
    c4d8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    c4dc:	4611      	mov	r1, r2
    c4de:	4618      	mov	r0, r3
    c4e0:	2a00      	cmp	r2, #0
    c4e2:	f173 0400 	sbcs.w	r4, r3, #0
    c4e6:	f6ff aee0 	blt.w	c2aa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd1e>
    c4ea:	0fcc      	lsrs	r4, r1, #31
  std::int32_t ab_x2_high32 =
    c4ec:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c4f0:	f1bc 0f00 	cmp.w	ip, #0
    c4f4:	f47f aee1 	bne.w	c2ba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2e>
    c4f8:	f1ce 0500 	rsb	r5, lr, #0
  assert(exponent >= 0);
    c4fc:	2d00      	cmp	r5, #0
    c4fe:	f6ff aedf 	blt.w	c2c0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd34>
  assert(exponent <= 31);
    c502:	2d1f      	cmp	r5, #31
    c504:	f73f aee3 	bgt.w	c2ce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd42>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c508:	f04f 0a01 	mov.w	sl, #1
    c50c:	fa0a f005 	lsl.w	r0, sl, r5
    c510:	3801      	subs	r0, #1
    c512:	f009 fd47 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c516:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c518:	2000      	movs	r0, #0
    c51a:	f009 fd43 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c51e:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    c520:	4650      	mov	r0, sl
    c522:	f009 fd3f 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c526:	4606      	mov	r6, r0
  const IntegerType remainder = BitAnd(x, mask);
    c528:	4639      	mov	r1, r7
    c52a:	4620      	mov	r0, r4
    c52c:	f009 fd3b 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c530:	9007      	str	r0, [sp, #28]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c532:	4651      	mov	r1, sl
    c534:	4638      	mov	r0, r7
    c536:	f009 fd38 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c53a:	4607      	mov	r7, r0
    c53c:	4649      	mov	r1, r9
    c53e:	4620      	mov	r0, r4
    c540:	f009 fd3f 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c544:	4631      	mov	r1, r6
    c546:	f009 fd2e 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c54a:	4601      	mov	r1, r0
    c54c:	4638      	mov	r0, r7
    c54e:	f009 fd2e 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c552:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    c554:	4629      	mov	r1, r5
    c556:	4620      	mov	r0, r4
    c558:	f009 fd27 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c55c:	4604      	mov	r4, r0
    c55e:	4639      	mov	r1, r7
    c560:	9807      	ldr	r0, [sp, #28]
    c562:	f009 fd36 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c566:	4631      	mov	r1, r6
    c568:	f009 fd1d 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c56c:	4601      	mov	r1, r0
    c56e:	4620      	mov	r0, r4
    c570:	f009 fd1d 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    c574:	4440      	add	r0, r8
            raw_sum, params.output_multiplier, params.output_shift) +
    c576:	992c      	ldr	r1, [sp, #176]	; 0xb0
    c578:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c57a:	4288      	cmp	r0, r1
    c57c:	f43f aeae 	beq.w	c2dc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd50>
    c580:	9b05      	ldr	r3, [sp, #20]
  std::int64_t a_64(a);
    c582:	ea4f 79e0 	mov.w	r9, r0, asr #31
  std::int64_t b_64(b);
    c586:	17cf      	asrs	r7, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    c588:	fb00 f407 	mul.w	r4, r0, r7
    c58c:	fb01 4409 	mla	r4, r1, r9, r4
    c590:	fba0 0101 	umull	r0, r1, r0, r1
    c594:	4421      	add	r1, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c596:	2800      	cmp	r0, #0
    c598:	f171 0400 	sbcs.w	r4, r1, #0
    c59c:	f6ff aea5 	blt.w	c2ea <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd5e>
    c5a0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c5a4:	1900      	adds	r0, r0, r4
    c5a6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
    c5aa:	4605      	mov	r5, r0
    c5ac:	460e      	mov	r6, r1
    c5ae:	2800      	cmp	r0, #0
    c5b0:	f171 0400 	sbcs.w	r4, r1, #0
    c5b4:	f6bf aea8 	bge.w	c308 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd7c>
    c5b8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    c5bc:	1945      	adds	r5, r0, r5
    c5be:	f04f 0400 	mov.w	r4, #0
    c5c2:	eb41 0604 	adc.w	r6, r1, r4
    c5c6:	e69f      	b.n	c308 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd7c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c5c8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c5cc:	e6a2      	b.n	c314 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd88>
  assert(exponent >= 0);
    c5ce:	4b1a      	ldr	r3, [pc, #104]	; (c638 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10ac>)
    c5d0:	4a1a      	ldr	r2, [pc, #104]	; (c63c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b0>)
    c5d2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    c5d6:	481a      	ldr	r0, [pc, #104]	; (c640 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b4>)
    c5d8:	f006 fa68 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    c5dc:	4b19      	ldr	r3, [pc, #100]	; (c644 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b8>)
    c5de:	4a17      	ldr	r2, [pc, #92]	; (c63c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b0>)
    c5e0:	f240 1167 	movw	r1, #359	; 0x167
    c5e4:	4816      	ldr	r0, [pc, #88]	; (c640 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b4>)
    c5e6:	f006 fa61 	bl	12aac <__assert_func>
	return __b;
    c5ea:	ab20      	add	r3, sp, #128	; 0x80
    c5ec:	e6d7      	b.n	c39e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe12>
    if (size_ > kMaxSmallSize) {
    c5ee:	9b90      	ldr	r3, [sp, #576]	; 0x240
    c5f0:	2b05      	cmp	r3, #5
    c5f2:	dd03      	ble.n	c5fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1070>
      delete[] dims_pointer_;
    c5f4:	9891      	ldr	r0, [sp, #580]	; 0x244
    c5f6:	b108      	cbz	r0, c5fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1070>
    c5f8:	f00c fa3f 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c5fc:	9b8a      	ldr	r3, [sp, #552]	; 0x228
    c5fe:	2b05      	cmp	r3, #5
    c600:	dd03      	ble.n	c60a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x107e>
      delete[] dims_pointer_;
    c602:	988b      	ldr	r0, [sp, #556]	; 0x22c
    c604:	b108      	cbz	r0, c60a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x107e>
    c606:	f00c fa38 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c60a:	9b84      	ldr	r3, [sp, #528]	; 0x210
    c60c:	2b05      	cmp	r3, #5
    c60e:	dd03      	ble.n	c618 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x108c>
      delete[] dims_pointer_;
    c610:	9885      	ldr	r0, [sp, #532]	; 0x214
    c612:	b108      	cbz	r0, c618 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x108c>
    c614:	f00c fa31 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    c618:	2000      	movs	r0, #0
    c61a:	e009      	b.n	c630 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c61c:	f8d8 6014 	ldr.w	r6, [r8, #20]
    c620:	f7fc febc 	bl	939c <TfLiteTypeGetName>
    c624:	4602      	mov	r2, r0
    c626:	7a2b      	ldrb	r3, [r5, #8]
    c628:	4907      	ldr	r1, [pc, #28]	; (c648 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10bc>)
    c62a:	4640      	mov	r0, r8
    c62c:	47b0      	blx	r6
      return kTfLiteError;
    c62e:	2001      	movs	r0, #1
}
    c630:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c638:	0001c580 	.word	0x0001c580
    c63c:	0001c590 	.word	0x0001c590
    c640:	0001c5e8 	.word	0x0001c5e8
    c644:	0001c644 	.word	0x0001c644
    c648:	0001c654 	.word	0x0001c654

0000c64c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c650:	b084      	sub	sp, #16
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
    c652:	f8d1 9014 	ldr.w	r9, [r1, #20]
  TFLITE_DCHECK(node->user_data != nullptr);
    c656:	f8d1 8010 	ldr.w	r8, [r1, #16]
    c65a:	f1b8 0f00 	cmp.w	r8, #0
    c65e:	d02c      	beq.n	c6ba <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
    c660:	4604      	mov	r4, r0
    c662:	460d      	mov	r5, r1
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    c664:	b358      	cbz	r0, c6be <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    c666:	b361      	cbz	r1, c6c2 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c668:	6d43      	ldr	r3, [r0, #84]	; 0x54
    c66a:	680a      	ldr	r2, [r1, #0]
    c66c:	6851      	ldr	r1, [r2, #4]
    c66e:	4798      	blx	r3
    c670:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
    c672:	b344      	cbz	r4, c6c6 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK(node != nullptr);
    c674:	b34d      	cbz	r5, c6ca <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c676:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c678:	682a      	ldr	r2, [r5, #0]
    c67a:	6891      	ldr	r1, [r2, #8]
    c67c:	4620      	mov	r0, r4
    c67e:	4798      	blx	r3
    c680:	4682      	mov	sl, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    c682:	b324      	cbz	r4, c6ce <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x82>
  TFLITE_DCHECK(node != nullptr);
    c684:	b32d      	cbz	r5, c6d2 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x86>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    c686:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c688:	686a      	ldr	r2, [r5, #4]
    c68a:	6851      	ldr	r1, [r2, #4]
    c68c:	4620      	mov	r0, r4
    c68e:	4798      	blx	r3
    c690:	4606      	mov	r6, r0
  if (output->type == kTfLiteFloat32) {
    c692:	7a00      	ldrb	r0, [r0, #8]
    c694:	2801      	cmp	r0, #1
    c696:	d01e      	beq.n	c6d6 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  } else if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
    c698:	2809      	cmp	r0, #9
    c69a:	d001      	beq.n	c6a0 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x54>
    c69c:	2807      	cmp	r0, #7
    c69e:	d126      	bne.n	c6ee <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
    c6a0:	9602      	str	r6, [sp, #8]
    c6a2:	f8cd a004 	str.w	sl, [sp, #4]
    c6a6:	9700      	str	r7, [sp, #0]
    c6a8:	4643      	mov	r3, r8
    c6aa:	464a      	mov	r2, r9
    c6ac:	4629      	mov	r1, r5
    c6ae:	4620      	mov	r0, r4
    c6b0:	f7fe ff6c 	bl	b58c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
}
    c6b4:	b004      	add	sp, #16
    c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    c6ba:	f00c f9f3 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6be:	f00c f9f1 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6c2:	f00c f9ef 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6c6:	f00c f9ed 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6ca:	f00c f9eb 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6ce:	f00c f9e9 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6d2:	f00c f9e7 	bl	18aa4 <abort>
    EvalAdd(context, node, params, data, input1, input2, output);
    c6d6:	9602      	str	r6, [sp, #8]
    c6d8:	f8cd a004 	str.w	sl, [sp, #4]
    c6dc:	9700      	str	r7, [sp, #0]
    c6de:	4643      	mov	r3, r8
    c6e0:	464a      	mov	r2, r9
    c6e2:	4629      	mov	r1, r5
    c6e4:	4620      	mov	r0, r4
    c6e6:	f009 fd1d 	bl	16124 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
  return kTfLiteOk;
    c6ea:	2000      	movs	r0, #0
    c6ec:	e7e2      	b.n	c6b4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c6ee:	6965      	ldr	r5, [r4, #20]
    c6f0:	f7fc fe54 	bl	939c <TfLiteTypeGetName>
    c6f4:	4602      	mov	r2, r0
    c6f6:	7a33      	ldrb	r3, [r6, #8]
    c6f8:	4902      	ldr	r1, [pc, #8]	; (c704 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
    c6fa:	4620      	mov	r0, r4
    c6fc:	47a8      	blx	r5
    return kTfLiteError;
    c6fe:	2001      	movs	r0, #1
    c700:	e7d8      	b.n	c6b4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    c702:	bf00      	nop
    c704:	0001c654 	.word	0x0001c654

0000c708 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
    c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c70c:	b0a5      	sub	sp, #148	; 0x94
    c70e:	9118      	str	r1, [sp, #96]	; 0x60
    c710:	9219      	str	r2, [sp, #100]	; 0x64
    c712:	461d      	mov	r5, r3
    c714:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
    c718:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    c71a:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  const int stride_width = params.stride_width;
    c71e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    c722:	920e      	str	r2, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
    c724:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    c728:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
    c72a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    c72e:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
    c730:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    c734:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
    c736:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    c73a:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
    c73c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    c740:	9213      	str	r2, [sp, #76]	; 0x4c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    c742:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c744:	921d      	str	r2, [sp, #116]	; 0x74
  const int32_t output_activation_max = params.quantized_activation_max;
    c746:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    c748:	911c      	str	r1, [sp, #112]	; 0x70

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c74a:	428a      	cmp	r2, r1
    c74c:	f300 8086 	bgt.w	c85c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x154>
  inline int32_t DimensionsCount() const { return size_; }
    c750:	682a      	ldr	r2, [r5, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    c752:	2a04      	cmp	r2, #4
    c754:	f040 8084 	bne.w	c860 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    c758:	f8de 2000 	ldr.w	r2, [lr]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    c75c:	2a04      	cmp	r2, #4
    c75e:	f040 8081 	bne.w	c864 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x15c>
    c762:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    c766:	2a04      	cmp	r2, #4
    c768:	d17e      	bne.n	c868 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x160>
    TFLITE_DCHECK_LT(i, size_);
    c76a:	682a      	ldr	r2, [r5, #0]
    c76c:	2a00      	cmp	r2, #0
    c76e:	dd7d      	ble.n	c86c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x164>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c770:	2a05      	cmp	r2, #5
    c772:	dd7d      	ble.n	c870 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x168>
    c774:	686a      	ldr	r2, [r5, #4]
    c776:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    c778:	f8d9 2000 	ldr.w	r2, [r9]
    c77c:	2a00      	cmp	r2, #0
    c77e:	dd79      	ble.n	c874 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c780:	2a05      	cmp	r2, #5
    c782:	dd79      	ble.n	c878 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x170>
    c784:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c788:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c78a:	428a      	cmp	r2, r1
    c78c:	d177      	bne.n	c87e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c78e:	9123      	str	r1, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    c790:	f8d9 2000 	ldr.w	r2, [r9]
    c794:	2a00      	cmp	r2, #0
    c796:	dd74      	ble.n	c882 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c798:	2a05      	cmp	r2, #5
    c79a:	dd74      	ble.n	c886 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17e>
    c79c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c7a0:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c7a2:	9222      	str	r2, [sp, #136]	; 0x88
      if (__b < __a)
    c7a4:	4291      	cmp	r1, r2
    c7a6:	dc71      	bgt.n	c88c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x184>
      return __a;
    c7a8:	aa23      	add	r2, sp, #140	; 0x8c
    c7aa:	6812      	ldr	r2, [r2, #0]
    c7ac:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    c7ae:	682a      	ldr	r2, [r5, #0]
    c7b0:	2a03      	cmp	r2, #3
    c7b2:	dd6d      	ble.n	c890 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7b4:	2a05      	cmp	r2, #5
    c7b6:	dd6d      	ble.n	c894 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x18c>
    c7b8:	686a      	ldr	r2, [r5, #4]
    c7ba:	68d1      	ldr	r1, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    c7bc:	f8de 2000 	ldr.w	r2, [lr]
    c7c0:	2a03      	cmp	r2, #3
    c7c2:	dd69      	ble.n	c898 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x190>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7c4:	2a05      	cmp	r2, #5
    c7c6:	dd69      	ble.n	c89c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x194>
    c7c8:	f8de 2004 	ldr.w	r2, [lr, #4]
    c7cc:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c7ce:	428a      	cmp	r2, r1
    c7d0:	d167      	bne.n	c8a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c7d2:	9121      	str	r1, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    c7d4:	f8de 2000 	ldr.w	r2, [lr]
    c7d8:	2a03      	cmp	r2, #3
    c7da:	dd64      	ble.n	c8a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7dc:	2a05      	cmp	r2, #5
    c7de:	dd64      	ble.n	c8aa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a2>
    c7e0:	f8de 2004 	ldr.w	r2, [lr, #4]
    c7e4:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c7e6:	9220      	str	r2, [sp, #128]	; 0x80
      if (__b < __a)
    c7e8:	4291      	cmp	r1, r2
    c7ea:	dc61      	bgt.n	c8b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a8>
      return __a;
    c7ec:	aa21      	add	r2, sp, #132	; 0x84
    c7ee:	6812      	ldr	r2, [r2, #0]
    c7f0:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    c7f2:	f8de 2000 	ldr.w	r2, [lr]
    c7f6:	2a00      	cmp	r2, #0
    c7f8:	dd5c      	ble.n	c8b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7fa:	2a05      	cmp	r2, #5
    c7fc:	dd5c      	ble.n	c8b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
    c7fe:	f8de 2004 	ldr.w	r2, [lr, #4]
    c802:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    c804:	f8d9 2000 	ldr.w	r2, [r9]
    c808:	2a03      	cmp	r2, #3
    c80a:	dd58      	ble.n	c8be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c80c:	2a05      	cmp	r2, #5
    c80e:	dd58      	ble.n	c8c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ba>
    c810:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c814:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c816:	428a      	cmp	r2, r1
    c818:	d156      	bne.n	c8c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c81a:	911f      	str	r1, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
    c81c:	f8d9 2000 	ldr.w	r2, [r9]
    c820:	2a03      	cmp	r2, #3
    c822:	dd53      	ble.n	c8cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c824:	2a05      	cmp	r2, #5
    c826:	dd53      	ble.n	c8d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c8>
    c828:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c82c:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c82e:	921e      	str	r2, [sp, #120]	; 0x78
      if (__b < __a)
    c830:	4291      	cmp	r1, r2
    c832:	dc50      	bgt.n	c8d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ce>
      return __a;
    c834:	aa1f      	add	r2, sp, #124	; 0x7c
    c836:	6812      	ldr	r2, [r2, #0]
    c838:	9205      	str	r2, [sp, #20]
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    c83a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    c83c:	2a00      	cmp	r2, #0
    c83e:	d051      	beq.n	c8e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c840:	6818      	ldr	r0, [r3, #0]
    c842:	2805      	cmp	r0, #5
    c844:	dd49      	ble.n	c8da <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d2>
    c846:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    c848:	2100      	movs	r1, #0
    int buffer_size = 1;
    c84a:	2401      	movs	r4, #1
    for (int i = 0; i < size_; i++) {
    c84c:	4281      	cmp	r1, r0
    c84e:	da46      	bge.n	c8de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d6>
      buffer_size *= dims_data[i];
    c850:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    c854:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
    c858:	3101      	adds	r1, #1
    c85a:	e7f7      	b.n	c84c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x144>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c85c:	f00c f922 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    c860:	f00c f920 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    c864:	f00c f91e 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    c868:	f00c f91c 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c86c:	f00c f91a 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c870:	6869      	ldr	r1, [r5, #4]
    c872:	e781      	b.n	c778 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x70>
    TFLITE_DCHECK_LT(i, size_);
    c874:	f00c f916 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c878:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c87c:	e785      	b.n	c78a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x82>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c87e:	f00c f911 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c882:	f00c f90f 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c886:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c88a:	e78a      	b.n	c7a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x9a>
	return __b;
    c88c:	aa22      	add	r2, sp, #136	; 0x88
    c88e:	e78c      	b.n	c7aa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xa2>
    TFLITE_DCHECK_LT(i, size_);
    c890:	f00c f908 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c894:	6929      	ldr	r1, [r5, #16]
    c896:	e791      	b.n	c7bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    c898:	f00c f904 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c89c:	f8de 2010 	ldr.w	r2, [lr, #16]
    c8a0:	e795      	b.n	c7ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c8a2:	f00c f8ff 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c8a6:	f00c f8fd 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8aa:	f8de 2010 	ldr.w	r2, [lr, #16]
    c8ae:	e79a      	b.n	c7e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xde>
    c8b0:	aa20      	add	r2, sp, #128	; 0x80
    c8b2:	e79c      	b.n	c7ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xe6>
    TFLITE_DCHECK_LT(i, size_);
    c8b4:	f00c f8f6 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8b8:	f8de 1004 	ldr.w	r1, [lr, #4]
    c8bc:	e7a2      	b.n	c804 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xfc>
    TFLITE_DCHECK_LT(i, size_);
    c8be:	f00c f8f1 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8c2:	f8d9 2010 	ldr.w	r2, [r9, #16]
    c8c6:	e7a6      	b.n	c816 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x10e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c8c8:	f00c f8ec 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c8cc:	f00c f8ea 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8d0:	f8d9 2010 	ldr.w	r2, [r9, #16]
    c8d4:	e7ab      	b.n	c82e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x126>
    c8d6:	aa1e      	add	r2, sp, #120	; 0x78
    c8d8:	e7ad      	b.n	c836 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x12e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c8da:	3304      	adds	r3, #4
    c8dc:	e7b4      	b.n	c848 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x140>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    c8de:	9b05      	ldr	r3, [sp, #20]
    c8e0:	429c      	cmp	r4, r3
    c8e2:	d160      	bne.n	c9a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x29e>
    TFLITE_DCHECK_LT(i, size_);
    c8e4:	682b      	ldr	r3, [r5, #0]
    c8e6:	2b01      	cmp	r3, #1
    c8e8:	dd5f      	ble.n	c9aa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8ea:	2b05      	cmp	r3, #5
    c8ec:	dd5f      	ble.n	c9ae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a6>
    c8ee:	686b      	ldr	r3, [r5, #4]
    c8f0:	685b      	ldr	r3, [r3, #4]
    c8f2:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    c8f4:	682b      	ldr	r3, [r5, #0]
    c8f6:	2b02      	cmp	r3, #2
    c8f8:	dd5c      	ble.n	c9b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8fa:	2b05      	cmp	r3, #5
    c8fc:	dd5c      	ble.n	c9b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b0>
    c8fe:	686b      	ldr	r3, [r5, #4]
    c900:	689b      	ldr	r3, [r3, #8]
    c902:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    c904:	f8de 3000 	ldr.w	r3, [lr]
    c908:	2b01      	cmp	r3, #1
    c90a:	dd58      	ble.n	c9be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c90c:	2b05      	cmp	r3, #5
    c90e:	dd58      	ble.n	c9c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ba>
    c910:	f8de 3004 	ldr.w	r3, [lr, #4]
    c914:	685b      	ldr	r3, [r3, #4]
    c916:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    c918:	f8de 3000 	ldr.w	r3, [lr]
    c91c:	2b02      	cmp	r3, #2
    c91e:	dd54      	ble.n	c9ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c920:	2b05      	cmp	r3, #5
    c922:	dd54      	ble.n	c9ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c6>
    c924:	f8de 3004 	ldr.w	r3, [lr, #4]
    c928:	689b      	ldr	r3, [r3, #8]
    c92a:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    c92c:	f8d9 3000 	ldr.w	r3, [r9]
    c930:	2b01      	cmp	r3, #1
    c932:	dd50      	ble.n	c9d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c934:	2b05      	cmp	r3, #5
    c936:	dd50      	ble.n	c9da <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2d2>
    c938:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c93c:	685b      	ldr	r3, [r3, #4]
    c93e:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    c940:	f8d9 3000 	ldr.w	r3, [r9]
    c944:	2b02      	cmp	r3, #2
    c946:	dd4c      	ble.n	c9e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c948:	2b05      	cmp	r3, #5
    c94a:	dd4c      	ble.n	c9e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2de>
    c94c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c950:	689b      	ldr	r3, [r3, #8]
    c952:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    c954:	2300      	movs	r3, #0
    c956:	9300      	str	r3, [sp, #0]
    c958:	46f0      	mov	r8, lr
    c95a:	464c      	mov	r4, r9
    c95c:	46a9      	mov	r9, r5
    c95e:	9b00      	ldr	r3, [sp, #0]
    c960:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c962:	4293      	cmp	r3, r2
    c964:	f280 8190 	bge.w	cc88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x580>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    c968:	2300      	movs	r3, #0
    c96a:	9301      	str	r3, [sp, #4]
    c96c:	46ce      	mov	lr, r9
    c96e:	46c1      	mov	r9, r8
    c970:	9b01      	ldr	r3, [sp, #4]
    c972:	9907      	ldr	r1, [sp, #28]
    c974:	428b      	cmp	r3, r1
    c976:	f280 8181 	bge.w	cc7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x574>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    c97a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c97c:	fb02 f303 	mul.w	r3, r2, r3
    c980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c982:	1a9b      	subs	r3, r3, r2
    c984:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    c986:	2300      	movs	r3, #0
    c988:	9304      	str	r3, [sp, #16]
    c98a:	46f0      	mov	r8, lr
    c98c:	9b04      	ldr	r3, [sp, #16]
    c98e:	9906      	ldr	r1, [sp, #24]
    c990:	428b      	cmp	r3, r1
    c992:	f280 816e 	bge.w	cc72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x56a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    c996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c998:	fb02 f303 	mul.w	r3, r2, r3
    c99c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c99e:	1a9b      	subs	r3, r3, r2
    c9a0:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    c9a2:	2100      	movs	r1, #0
    c9a4:	e135      	b.n	cc12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x50a>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    c9a6:	f00c f87d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c9aa:	f00c f87b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9ae:	68ab      	ldr	r3, [r5, #8]
    c9b0:	930b      	str	r3, [sp, #44]	; 0x2c
    c9b2:	e79f      	b.n	c8f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    c9b4:	f00c f876 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9b8:	68eb      	ldr	r3, [r5, #12]
    c9ba:	930a      	str	r3, [sp, #40]	; 0x28
    c9bc:	e7a2      	b.n	c904 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fc>
    TFLITE_DCHECK_LT(i, size_);
    c9be:	f00c f871 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9c2:	f8de 3008 	ldr.w	r3, [lr, #8]
    c9c6:	9309      	str	r3, [sp, #36]	; 0x24
    c9c8:	e7a6      	b.n	c918 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x210>
    TFLITE_DCHECK_LT(i, size_);
    c9ca:	f00c f86b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9ce:	f8de 300c 	ldr.w	r3, [lr, #12]
    c9d2:	9308      	str	r3, [sp, #32]
    c9d4:	e7aa      	b.n	c92c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x224>
    TFLITE_DCHECK_LT(i, size_);
    c9d6:	f00c f865 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9da:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c9de:	9307      	str	r3, [sp, #28]
    c9e0:	e7ae      	b.n	c940 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x238>
    TFLITE_DCHECK_LT(i, size_);
    c9e2:	f00c f85f 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9e6:	f8d9 300c 	ldr.w	r3, [r9, #12]
    c9ea:	9306      	str	r3, [sp, #24]
    c9ec:	e7b2      	b.n	c954 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x24c>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c9ee:	f00c f859 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c9f2:	f00c f857 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c9f6:	f00c f855 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c9fa:	f00c f853 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    c9fe:	f00c f851 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ca02:	f00c f84f 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ca06:	f00c f84d 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ca0a:	f00c f84b 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ca0e:	f00c f849 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ca12:	f00c f847 	bl	18aa4 <abort>
    ca16:	9c33      	ldr	r4, [sp, #204]	; 0xcc
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    ca18:	3501      	adds	r5, #1
    ca1a:	9b08      	ldr	r3, [sp, #32]
    ca1c:	429d      	cmp	r5, r3
    ca1e:	da68      	bge.n	caf2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ea>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    ca20:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ca22:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ca24:	fb03 2205 	mla	r2, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    ca28:	2a00      	cmp	r2, #0
    ca2a:	dbf5      	blt.n	ca18 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    ca2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca2e:	429a      	cmp	r2, r3
    ca30:	daf2      	bge.n	ca18 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    ca32:	2f00      	cmp	r7, #0
    ca34:	dbf0      	blt.n	ca18 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    ca36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca38:	429f      	cmp	r7, r3
    ca3a:	daed      	bge.n	ca18 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    ca3c:	2300      	movs	r3, #0
    ca3e:	9433      	str	r4, [sp, #204]	; 0xcc

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    ca40:	9c16      	ldr	r4, [sp, #88]	; 0x58
    ca42:	42a3      	cmp	r3, r4
    ca44:	dae7      	bge.n	ca16 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ca46:	f8d8 4000 	ldr.w	r4, [r8]
    ca4a:	2c04      	cmp	r4, #4
    ca4c:	d1cf      	bne.n	c9ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ca4e:	2800      	cmp	r0, #0
    ca50:	dbcf      	blt.n	c9f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
    ca52:	f8d8 4004 	ldr.w	r4, [r8, #4]
    ca56:	42a0      	cmp	r0, r4
    ca58:	dacb      	bge.n	c9f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ca5a:	2f00      	cmp	r7, #0
    ca5c:	dbcb      	blt.n	c9f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
    ca5e:	f8d8 a008 	ldr.w	sl, [r8, #8]
    ca62:	4557      	cmp	r7, sl
    ca64:	dac7      	bge.n	c9f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ca66:	2a00      	cmp	r2, #0
    ca68:	dbc7      	blt.n	c9fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
    ca6a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
    ca6e:	4572      	cmp	r2, lr
    ca70:	dac3      	bge.n	c9fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ca72:	2b00      	cmp	r3, #0
    ca74:	dbc3      	blt.n	c9fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
    ca76:	f8d8 c010 	ldr.w	ip, [r8, #16]
    ca7a:	4563      	cmp	r3, ip
    ca7c:	dabf      	bge.n	c9fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ca7e:	fb0a 7a00 	mla	sl, sl, r0, r7
    ca82:	fb0a 2a0e 	mla	sl, sl, lr, r2
    ca86:	fb0a 3c0c 	mla	ip, sl, ip, r3
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    ca8a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    ca8c:	f934 e01c 	ldrsh.w	lr, [r4, ip, lsl #1]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ca90:	f8d9 4000 	ldr.w	r4, [r9]
    ca94:	2c04      	cmp	r4, #4
    ca96:	d1b4      	bne.n	ca02 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fa>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ca98:	2900      	cmp	r1, #0
    ca9a:	dbb4      	blt.n	ca06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
    ca9c:	f8d9 4004 	ldr.w	r4, [r9, #4]
    caa0:	42a1      	cmp	r1, r4
    caa2:	dab0      	bge.n	ca06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    caa4:	2e00      	cmp	r6, #0
    caa6:	dbb0      	blt.n	ca0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
    caa8:	f8d9 c008 	ldr.w	ip, [r9, #8]
    caac:	4566      	cmp	r6, ip
    caae:	daac      	bge.n	ca0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cab0:	2d00      	cmp	r5, #0
    cab2:	dbac      	blt.n	ca0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
    cab4:	f8d9 b00c 	ldr.w	fp, [r9, #12]
    cab8:	455d      	cmp	r5, fp
    caba:	daa8      	bge.n	ca0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cabc:	2b00      	cmp	r3, #0
    cabe:	dba8      	blt.n	ca12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
    cac0:	f8d9 a010 	ldr.w	sl, [r9, #16]
    cac4:	4553      	cmp	r3, sl
    cac6:	daa4      	bge.n	ca12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    cac8:	fb0c 6c01 	mla	ip, ip, r1, r6
    cacc:	fb0c 5c0b 	mla	ip, ip, fp, r5
    cad0:	fb0c 3c0a 	mla	ip, ip, sl, r3
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    cad4:	9c30      	ldr	r4, [sp, #192]	; 0xc0
    cad6:	f914 c00c 	ldrsb.w	ip, [r4, ip]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
    cada:	fb0c fe0e 	mul.w	lr, ip, lr
    cade:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    cae2:	eb1a 0a0e 	adds.w	sl, sl, lr
    cae6:	eb4b 7bee 	adc.w	fp, fp, lr, asr #31
    caea:	e9cd ab02 	strd	sl, fp, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    caee:	3301      	adds	r3, #1
    caf0:	e7a6      	b.n	ca40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x338>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    caf2:	3601      	adds	r6, #1
    caf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    caf6:	429e      	cmp	r6, r3
    caf8:	da06      	bge.n	cb08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x400>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    cafa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cafc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cafe:	fb03 2706 	mla	r7, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    cb02:	2500      	movs	r5, #0
    cb04:	9800      	ldr	r0, [sp, #0]
    cb06:	e788      	b.n	ca1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x312>
    cb08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
              }
            }
          }
          if (bias_data) {
    cb0c:	9832      	ldr	r0, [sp, #200]	; 0xc8
    cb0e:	b130      	cbz	r0, cb1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x416>
            acc += bias_data[out_channel];
    cb10:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    cb14:	6828      	ldr	r0, [r5, #0]
    cb16:	686d      	ldr	r5, [r5, #4]
    cb18:	1812      	adds	r2, r2, r0
    cb1a:	eb45 0303 	adc.w	r3, r5, r3
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
    cb1e:	9818      	ldr	r0, [sp, #96]	; 0x60
    cb20:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    cb24:	9d19      	ldr	r5, [sp, #100]	; 0x64
    cb26:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
  assert(quantized_multiplier >= 0);
    cb2a:	2800      	cmp	r0, #0
    cb2c:	db7a      	blt.n	cc24 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x51c>
  assert(shift >= -31 && shift < 8);
    cb2e:	f105 061f 	add.w	r6, r5, #31
    cb32:	2e26      	cmp	r6, #38	; 0x26
    cb34:	d87c      	bhi.n	cc30 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x528>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    cb36:	1c16      	adds	r6, r2, #0
    cb38:	960c      	str	r6, [sp, #48]	; 0x30
    cb3a:	f543 4600 	adc.w	r6, r3, #32768	; 0x8000
    cb3e:	960d      	str	r6, [sp, #52]	; 0x34
    cb40:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    cb44:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    cb48:	bf08      	it	eq
    cb4a:	2e00      	cmpeq	r6, #0
    cb4c:	d276      	bcs.n	cc3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x534>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    cb4e:	4e50      	ldr	r6, [pc, #320]	; (cc90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x588>)
    cb50:	42b0      	cmp	r0, r6
    cb52:	dc79      	bgt.n	cc48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x540>
    cb54:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    cb58:	1400      	asrs	r0, r0, #16
  int total_shift = 15 - shift;
    cb5a:	f1c5 0c0f 	rsb	ip, r5, #15
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    cb5e:	17c7      	asrs	r7, r0, #31
    cb60:	fb02 f607 	mul.w	r6, r2, r7
    cb64:	fb00 6603 	mla	r6, r0, r3, r6
    cb68:	fba2 2300 	umull	r2, r3, r2, r0
    cb6c:	4433      	add	r3, r6
    cb6e:	f1c5 070e 	rsb	r7, r5, #14
    cb72:	2001      	movs	r0, #1
    cb74:	f1a7 0a20 	sub.w	sl, r7, #32
    cb78:	f1c7 0e20 	rsb	lr, r7, #32
    cb7c:	fa00 f60a 	lsl.w	r6, r0, sl
    cb80:	fa20 fe0e 	lsr.w	lr, r0, lr
    cb84:	ea46 060e 	orr.w	r6, r6, lr
    cb88:	40b8      	lsls	r0, r7
    cb8a:	1810      	adds	r0, r2, r0
    cb8c:	eb43 0606 	adc.w	r6, r3, r6
  int32_t result = x >> total_shift;
    cb90:	3511      	adds	r5, #17
    cb92:	f1bc 0320 	subs.w	r3, ip, #32
    cb96:	fa20 f00c 	lsr.w	r0, r0, ip
    cb9a:	fa06 f505 	lsl.w	r5, r6, r5
    cb9e:	ea40 0005 	orr.w	r0, r0, r5
    cba2:	d402      	bmi.n	cbaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4a2>
    cba4:	fa46 f303 	asr.w	r3, r6, r3
    cba8:	4318      	orrs	r0, r3
              acc, output_multiplier[out_channel], output_shift[out_channel]);
    cbaa:	901b      	str	r0, [sp, #108]	; 0x6c
      if (__a < __b)
    cbac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    cbae:	4283      	cmp	r3, r0
    cbb0:	dc4d      	bgt.n	cc4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x546>
      return __a;
    cbb2:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::max(scaled_acc, output_activation_min);
    cbb4:	681a      	ldr	r2, [r3, #0]
    cbb6:	921b      	str	r2, [sp, #108]	; 0x6c
      if (__b < __a)
    cbb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    cbba:	429a      	cmp	r2, r3
    cbbc:	dc49      	bgt.n	cc52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54a>
      return __a;
    cbbe:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::min(scaled_acc, output_activation_max);
    cbc0:	681a      	ldr	r2, [r3, #0]
    cbc2:	921b      	str	r2, [sp, #108]	; 0x6c
  inline int32_t DimensionsCount() const { return size_; }
    cbc4:	6823      	ldr	r3, [r4, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cbc6:	2b04      	cmp	r3, #4
    cbc8:	d145      	bne.n	cc56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cbca:	9800      	ldr	r0, [sp, #0]
    cbcc:	2800      	cmp	r0, #0
    cbce:	db44      	blt.n	cc5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
    cbd0:	6863      	ldr	r3, [r4, #4]
    cbd2:	4298      	cmp	r0, r3
    cbd4:	da41      	bge.n	cc5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cbd6:	9b01      	ldr	r3, [sp, #4]
    cbd8:	2b00      	cmp	r3, #0
    cbda:	db40      	blt.n	cc5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
    cbdc:	68a5      	ldr	r5, [r4, #8]
    cbde:	42ab      	cmp	r3, r5
    cbe0:	da3d      	bge.n	cc5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cbe2:	9b04      	ldr	r3, [sp, #16]
    cbe4:	2b00      	cmp	r3, #0
    cbe6:	db3c      	blt.n	cc62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
    cbe8:	68e0      	ldr	r0, [r4, #12]
    cbea:	4283      	cmp	r3, r0
    cbec:	da39      	bge.n	cc62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cbee:	2900      	cmp	r1, #0
    cbf0:	db39      	blt.n	cc66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
    cbf2:	6923      	ldr	r3, [r4, #16]
    cbf4:	4299      	cmp	r1, r3
    cbf6:	da36      	bge.n	cc66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    cbf8:	9e00      	ldr	r6, [sp, #0]
    cbfa:	9f01      	ldr	r7, [sp, #4]
    cbfc:	fb05 7506 	mla	r5, r5, r6, r7
    cc00:	9e04      	ldr	r6, [sp, #16]
    cc02:	fb05 6000 	mla	r0, r5, r0, r6
    cc06:	fb00 1303 	mla	r3, r0, r3, r1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    cc0a:	9834      	ldr	r0, [sp, #208]	; 0xd0
    cc0c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    cc10:	3101      	adds	r1, #1
    cc12:	9b05      	ldr	r3, [sp, #20]
    cc14:	4299      	cmp	r1, r3
    cc16:	da28      	bge.n	cc6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x562>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    cc18:	2600      	movs	r6, #0
          std::int64_t acc = 0;
    cc1a:	2200      	movs	r2, #0
    cc1c:	2300      	movs	r3, #0
    cc1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    cc22:	e767      	b.n	caf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ec>
  assert(quantized_multiplier >= 0);
    cc24:	4b1b      	ldr	r3, [pc, #108]	; (cc94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58c>)
    cc26:	4a1c      	ldr	r2, [pc, #112]	; (cc98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    cc28:	21b3      	movs	r1, #179	; 0xb3
    cc2a:	481c      	ldr	r0, [pc, #112]	; (cc9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    cc2c:	f005 ff3e 	bl	12aac <__assert_func>
  assert(shift >= -31 && shift < 8);
    cc30:	4b1b      	ldr	r3, [pc, #108]	; (cca0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x598>)
    cc32:	4a19      	ldr	r2, [pc, #100]	; (cc98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    cc34:	21b4      	movs	r1, #180	; 0xb4
    cc36:	4819      	ldr	r0, [pc, #100]	; (cc9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    cc38:	f005 ff38 	bl	12aac <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    cc3c:	4b19      	ldr	r3, [pc, #100]	; (cca4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x59c>)
    cc3e:	4a16      	ldr	r2, [pc, #88]	; (cc98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    cc40:	21b5      	movs	r1, #181	; 0xb5
    cc42:	4816      	ldr	r0, [pc, #88]	; (cc9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    cc44:	f005 ff32 	bl	12aac <__assert_func>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    cc48:	f647 70ff 	movw	r0, #32767	; 0x7fff
    cc4c:	e785      	b.n	cb5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x452>
	return __b;
    cc4e:	ab1d      	add	r3, sp, #116	; 0x74
    cc50:	e7b0      	b.n	cbb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4ac>
	return __b;
    cc52:	ab1c      	add	r3, sp, #112	; 0x70
    cc54:	e7b4      	b.n	cbc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4b8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cc56:	f00b ff25 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cc5a:	f00b ff23 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cc5e:	f00b ff21 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cc62:	f00b ff1f 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cc66:	f00b ff1d 	bl	18aa4 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cc6a:	9b04      	ldr	r3, [sp, #16]
    cc6c:	3301      	adds	r3, #1
    cc6e:	9304      	str	r3, [sp, #16]
    cc70:	e68c      	b.n	c98c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x284>
    cc72:	46c6      	mov	lr, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    cc74:	9b01      	ldr	r3, [sp, #4]
    cc76:	3301      	adds	r3, #1
    cc78:	9301      	str	r3, [sp, #4]
    cc7a:	e679      	b.n	c970 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x268>
    cc7c:	46c8      	mov	r8, r9
    cc7e:	46f1      	mov	r9, lr
  for (int batch = 0; batch < batches; ++batch) {
    cc80:	9b00      	ldr	r3, [sp, #0]
    cc82:	3301      	adds	r3, #1
    cc84:	9300      	str	r3, [sp, #0]
    cc86:	e66a      	b.n	c95e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x256>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
    cc88:	b025      	add	sp, #148	; 0x94
    cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc8e:	bf00      	nop
    cc90:	7ffeffff 	.word	0x7ffeffff
    cc94:	0001c670 	.word	0x0001c670
    cc98:	0001c68c 	.word	0x0001c68c
    cc9c:	0001c6d4 	.word	0x0001c6d4
    cca0:	0001c724 	.word	0x0001c724
    cca4:	0001c740 	.word	0x0001c740

0000cca8 <_ZN6tflite16Register_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    cca8:	b470      	push	{r4, r5, r6}
    ccaa:	4606      	mov	r6, r0
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    ccac:	4604      	mov	r4, r0
    ccae:	4d05      	ldr	r5, [pc, #20]	; (ccc4 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
    ccb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ccb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ccb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ccb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    ccbc:	4630      	mov	r0, r6
    ccbe:	bc70      	pop	{r4, r5, r6}
    ccc0:	4770      	bx	lr
    ccc2:	bf00      	nop
    ccc4:	00019a60 	.word	0x00019a60

0000ccc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    int8_t* output_data) {
    ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cccc:	b0a7      	sub	sp, #156	; 0x9c
    ccce:	911a      	str	r1, [sp, #104]	; 0x68
    ccd0:	921b      	str	r2, [sp, #108]	; 0x6c
    ccd2:	469a      	mov	sl, r3
    ccd4:	9f31      	ldr	r7, [sp, #196]	; 0xc4
    ccd6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    ccd8:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    ccdc:	6942      	ldr	r2, [r0, #20]
    ccde:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_width = params.stride_width;
    cce0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    cce4:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    cce6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    ccea:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    ccec:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    ccf0:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    ccf2:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    ccf6:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    ccf8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    ccfc:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
    ccfe:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    cd02:	9212      	str	r2, [sp, #72]	; 0x48
  const int32_t output_offset = params.output_offset;
    cd04:	69c2      	ldr	r2, [r0, #28]
    cd06:	9213      	str	r2, [sp, #76]	; 0x4c
  const int32_t output_activation_min = params.quantized_activation_min;
    cd08:	6a81      	ldr	r1, [r0, #40]	; 0x28
    cd0a:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    cd0c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    cd0e:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    cd10:	4291      	cmp	r1, r2
    cd12:	f300 8082 	bgt.w	ce1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
  inline int32_t DimensionsCount() const { return size_; }
    cd16:	f8da 2000 	ldr.w	r2, [sl]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cd1a:	2a04      	cmp	r2, #4
    cd1c:	d17f      	bne.n	ce1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x156>
    cd1e:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    cd20:	2a04      	cmp	r2, #4
    cd22:	d17e      	bne.n	ce22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15a>
    cd24:	f8d8 2000 	ldr.w	r2, [r8]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    cd28:	2a04      	cmp	r2, #4
    cd2a:	d17c      	bne.n	ce26 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15e>
    TFLITE_DCHECK_LT(i, size_);
    cd2c:	f8da 2000 	ldr.w	r2, [sl]
    cd30:	2a00      	cmp	r2, #0
    cd32:	dd7a      	ble.n	ce2a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd34:	2a05      	cmp	r2, #5
    cd36:	dd7a      	ble.n	ce2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
    cd38:	f8da 2004 	ldr.w	r2, [sl, #4]
    cd3c:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    cd3e:	f8d8 1000 	ldr.w	r1, [r8]
    cd42:	2900      	cmp	r1, #0
    cd44:	dd76      	ble.n	ce34 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd46:	2905      	cmp	r1, #5
    cd48:	dd76      	ble.n	ce38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x170>
    cd4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cd4e:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cd50:	4291      	cmp	r1, r2
    cd52:	d174      	bne.n	ce3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cd54:	9225      	str	r2, [sp, #148]	; 0x94
    TFLITE_DCHECK_LT(i, size_);
    cd56:	f8d8 1000 	ldr.w	r1, [r8]
    cd5a:	2900      	cmp	r1, #0
    cd5c:	dd71      	ble.n	ce42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd5e:	2905      	cmp	r1, #5
    cd60:	dd71      	ble.n	ce46 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17e>
    cd62:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cd66:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cd68:	9124      	str	r1, [sp, #144]	; 0x90
      if (__b < __a)
    cd6a:	428a      	cmp	r2, r1
    cd6c:	dc6e      	bgt.n	ce4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      return __a;
    cd6e:	aa25      	add	r2, sp, #148	; 0x94
    cd70:	6812      	ldr	r2, [r2, #0]
    cd72:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    cd74:	f8da 2000 	ldr.w	r2, [sl]
    cd78:	2a03      	cmp	r2, #3
    cd7a:	dd69      	ble.n	ce50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd7c:	2a05      	cmp	r2, #5
    cd7e:	dd69      	ble.n	ce54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
    cd80:	f8da 2004 	ldr.w	r2, [sl, #4]
    cd84:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    cd86:	6839      	ldr	r1, [r7, #0]
    cd88:	2903      	cmp	r1, #3
    cd8a:	dd66      	ble.n	ce5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd8c:	2905      	cmp	r1, #5
    cd8e:	dd66      	ble.n	ce5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x196>
    cd90:	6879      	ldr	r1, [r7, #4]
    cd92:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cd94:	4291      	cmp	r1, r2
    cd96:	d164      	bne.n	ce62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cd98:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    cd9a:	6839      	ldr	r1, [r7, #0]
    cd9c:	2903      	cmp	r1, #3
    cd9e:	dd62      	ble.n	ce66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cda0:	2905      	cmp	r1, #5
    cda2:	dd62      	ble.n	ce6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    cda4:	6879      	ldr	r1, [r7, #4]
    cda6:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cda8:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    cdaa:	428a      	cmp	r2, r1
    cdac:	dc5f      	bgt.n	ce6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
      return __a;
    cdae:	aa23      	add	r2, sp, #140	; 0x8c
    cdb0:	6812      	ldr	r2, [r2, #0]
    cdb2:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    cdb4:	683a      	ldr	r2, [r7, #0]
    cdb6:	2a00      	cmp	r2, #0
    cdb8:	dd5b      	ble.n	ce72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cdba:	2a05      	cmp	r2, #5
    cdbc:	dd5b      	ble.n	ce76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
    cdbe:	687a      	ldr	r2, [r7, #4]
    cdc0:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    cdc2:	f8d8 1000 	ldr.w	r1, [r8]
    cdc6:	2903      	cmp	r1, #3
    cdc8:	dd57      	ble.n	ce7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cdca:	2905      	cmp	r1, #5
    cdcc:	dd57      	ble.n	ce7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
    cdce:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cdd2:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cdd4:	4291      	cmp	r1, r2
    cdd6:	d155      	bne.n	ce84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cdd8:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    cdda:	f8d8 1000 	ldr.w	r1, [r8]
    cdde:	2903      	cmp	r1, #3
    cde0:	dd52      	ble.n	ce88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cde2:	2905      	cmp	r1, #5
    cde4:	dd52      	ble.n	ce8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    cde6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cdea:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cdec:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    cdee:	428a      	cmp	r2, r1
    cdf0:	dc4f      	bgt.n	ce92 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ca>
      return __a;
    cdf2:	aa21      	add	r2, sp, #132	; 0x84
    cdf4:	6812      	ldr	r2, [r2, #0]
    cdf6:	9203      	str	r2, [sp, #12]
  if (bias_data) {
    cdf8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    cdfa:	2a00      	cmp	r2, #0
    cdfc:	d050      	beq.n	cea0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    cdfe:	681c      	ldr	r4, [r3, #0]
    ce00:	2c05      	cmp	r4, #5
    ce02:	dd48      	ble.n	ce96 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
    ce04:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    ce06:	2200      	movs	r2, #0
    int buffer_size = 1;
    ce08:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    ce0a:	42a2      	cmp	r2, r4
    ce0c:	da45      	bge.n	ce9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d2>
      buffer_size *= dims_data[i];
    ce0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ce12:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
    ce16:	3201      	adds	r2, #1
    ce18:	e7f7      	b.n	ce0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ce1a:	f00b fe43 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ce1e:	f00b fe41 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ce22:	f00b fe3f 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ce26:	f00b fe3d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ce2a:	f00b fe3b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce2e:	f8da 2004 	ldr.w	r2, [sl, #4]
    ce32:	e784      	b.n	cd3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x76>
    TFLITE_DCHECK_LT(i, size_);
    ce34:	f00b fe36 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce38:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ce3c:	e788      	b.n	cd50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x88>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ce3e:	f00b fe31 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ce42:	f00b fe2f 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce46:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ce4a:	e78d      	b.n	cd68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
	return __b;
    ce4c:	aa24      	add	r2, sp, #144	; 0x90
    ce4e:	e78f      	b.n	cd70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    ce50:	f00b fe28 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce54:	f8da 2010 	ldr.w	r2, [sl, #16]
    ce58:	e795      	b.n	cd86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xbe>
    TFLITE_DCHECK_LT(i, size_);
    ce5a:	f00b fe23 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce5e:	6939      	ldr	r1, [r7, #16]
    ce60:	e798      	b.n	cd94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xcc>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ce62:	f00b fe1f 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ce66:	f00b fe1d 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce6a:	6939      	ldr	r1, [r7, #16]
    ce6c:	e79c      	b.n	cda8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe0>
    ce6e:	aa22      	add	r2, sp, #136	; 0x88
    ce70:	e79e      	b.n	cdb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe8>
    TFLITE_DCHECK_LT(i, size_);
    ce72:	f00b fe17 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce76:	687a      	ldr	r2, [r7, #4]
    ce78:	e7a3      	b.n	cdc2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    ce7a:	f00b fe13 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
    ce82:	e7a7      	b.n	cdd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ce84:	f00b fe0e 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ce88:	f00b fe0c 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce8c:	f8d8 1010 	ldr.w	r1, [r8, #16]
    ce90:	e7ac      	b.n	cdec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
    ce92:	aa20      	add	r2, sp, #128	; 0x80
    ce94:	e7ae      	b.n	cdf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ce96:	3304      	adds	r3, #4
    ce98:	e7b5      	b.n	ce06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    ce9a:	9b03      	ldr	r3, [sp, #12]
    ce9c:	4299      	cmp	r1, r3
    ce9e:	d167      	bne.n	cf70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a8>
    TFLITE_DCHECK_LT(i, size_);
    cea0:	f8da 3000 	ldr.w	r3, [sl]
    cea4:	2b01      	cmp	r3, #1
    cea6:	dd65      	ble.n	cf74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cea8:	2b05      	cmp	r3, #5
    ceaa:	dd65      	ble.n	cf78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b0>
    ceac:	f8da 3004 	ldr.w	r3, [sl, #4]
    ceb0:	685b      	ldr	r3, [r3, #4]
    ceb2:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    ceb4:	f8da 3000 	ldr.w	r3, [sl]
    ceb8:	2b02      	cmp	r3, #2
    ceba:	dd61      	ble.n	cf80 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cebc:	2b05      	cmp	r3, #5
    cebe:	dd61      	ble.n	cf84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2bc>
    cec0:	f8da 3004 	ldr.w	r3, [sl, #4]
    cec4:	689b      	ldr	r3, [r3, #8]
    cec6:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    cec8:	683b      	ldr	r3, [r7, #0]
    ceca:	2b01      	cmp	r3, #1
    cecc:	dd5e      	ble.n	cf8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cece:	2b05      	cmp	r3, #5
    ced0:	dd5e      	ble.n	cf90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	685b      	ldr	r3, [r3, #4]
    ced6:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    ced8:	683b      	ldr	r3, [r7, #0]
    ceda:	2b02      	cmp	r3, #2
    cedc:	dd5b      	ble.n	cf96 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cede:	2b05      	cmp	r3, #5
    cee0:	dd5b      	ble.n	cf9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    cee2:	687b      	ldr	r3, [r7, #4]
    cee4:	689b      	ldr	r3, [r3, #8]
    cee6:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
    cee8:	f8d8 3000 	ldr.w	r3, [r8]
    ceec:	2b01      	cmp	r3, #1
    ceee:	dd57      	ble.n	cfa0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cef0:	2b05      	cmp	r3, #5
    cef2:	dd57      	ble.n	cfa4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2dc>
    cef4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    cef8:	685b      	ldr	r3, [r3, #4]
    cefa:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    cefc:	f8d8 3000 	ldr.w	r3, [r8]
    cf00:	2b02      	cmp	r3, #2
    cf02:	dd53      	ble.n	cfac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf04:	2b05      	cmp	r3, #5
    cf06:	dd53      	ble.n	cfb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e8>
    cf08:	f8d8 3004 	ldr.w	r3, [r8, #4]
    cf0c:	689b      	ldr	r3, [r3, #8]
    cf0e:	9304      	str	r3, [sp, #16]
  for (int batch = 0; batch < batches; ++batch) {
    cf10:	f04f 0b00 	mov.w	fp, #0
    cf14:	46d1      	mov	r9, sl
    cf16:	46ba      	mov	sl, r7
    cf18:	4647      	mov	r7, r8
    cf1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cf1c:	459b      	cmp	fp, r3
    cf1e:	f280 81cd 	bge.w	d2bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    cf22:	2300      	movs	r3, #0
    cf24:	9301      	str	r3, [sp, #4]
    cf26:	46c8      	mov	r8, r9
    cf28:	46d1      	mov	r9, sl
    cf2a:	46da      	mov	sl, fp
    cf2c:	46bb      	mov	fp, r7
    cf2e:	9b01      	ldr	r3, [sp, #4]
    cf30:	9905      	ldr	r1, [sp, #20]
    cf32:	428b      	cmp	r3, r1
    cf34:	f280 81bb 	bge.w	d2ae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e6>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    cf38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cf3a:	fb02 f303 	mul.w	r3, r2, r3
    cf3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cf40:	1a9b      	subs	r3, r3, r2
    cf42:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cf44:	2300      	movs	r3, #0
    cf46:	9302      	str	r3, [sp, #8]
    cf48:	f8cd b0d4 	str.w	fp, [sp, #212]	; 0xd4
    cf4c:	46c3      	mov	fp, r8
    cf4e:	46c8      	mov	r8, r9
    cf50:	46d1      	mov	r9, sl
    cf52:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    cf56:	9b02      	ldr	r3, [sp, #8]
    cf58:	9904      	ldr	r1, [sp, #16]
    cf5a:	428b      	cmp	r3, r1
    cf5c:	f280 819c 	bge.w	d298 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5d0>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    cf60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cf62:	fb02 f303 	mul.w	r3, r2, r3
    cf66:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf68:	1a9b      	subs	r3, r3, r2
    cf6a:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    cf6c:	2400      	movs	r4, #0
    cf6e:	e157      	b.n	d220 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    cf70:	f00b fd98 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    cf74:	f00b fd96 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf78:	f8da 3008 	ldr.w	r3, [sl, #8]
    cf7c:	9309      	str	r3, [sp, #36]	; 0x24
    cf7e:	e799      	b.n	ceb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    cf80:	f00b fd90 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf84:	f8da 300c 	ldr.w	r3, [sl, #12]
    cf88:	9308      	str	r3, [sp, #32]
    cf8a:	e79d      	b.n	cec8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
    TFLITE_DCHECK_LT(i, size_);
    cf8c:	f00b fd8a 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf90:	68bb      	ldr	r3, [r7, #8]
    cf92:	9307      	str	r3, [sp, #28]
    cf94:	e7a0      	b.n	ced8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    TFLITE_DCHECK_LT(i, size_);
    cf96:	f00b fd85 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf9a:	68fb      	ldr	r3, [r7, #12]
    cf9c:	9306      	str	r3, [sp, #24]
    cf9e:	e7a3      	b.n	cee8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
    TFLITE_DCHECK_LT(i, size_);
    cfa0:	f00b fd80 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cfa4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    cfa8:	9305      	str	r3, [sp, #20]
    cfaa:	e7a7      	b.n	cefc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    TFLITE_DCHECK_LT(i, size_);
    cfac:	f00b fd7a 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cfb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    cfb4:	9304      	str	r3, [sp, #16]
    cfb6:	e7ab      	b.n	cf10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cfb8:	f00b fd74 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cfbc:	f00b fd72 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cfc0:	f00b fd70 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cfc4:	f00b fd6e 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cfc8:	f00b fd6c 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cfcc:	f00b fd6a 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cfd0:	f00b fd68 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cfd4:	f00b fd66 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cfd8:	f00b fd64 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cfdc:	f00b fd62 	bl	18aa4 <abort>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    cfe0:	3201      	adds	r2, #1
    cfe2:	9b06      	ldr	r3, [sp, #24]
    cfe4:	429a      	cmp	r2, r3
    cfe6:	da63      	bge.n	d0b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3e8>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    cfe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfea:	9815      	ldr	r0, [sp, #84]	; 0x54
    cfec:	fb03 0002 	mla	r0, r3, r2, r0
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    cff0:	2800      	cmp	r0, #0
    cff2:	dbf5      	blt.n	cfe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    cff4:	9b08      	ldr	r3, [sp, #32]
    cff6:	4298      	cmp	r0, r3
    cff8:	daf2      	bge.n	cfe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    cffa:	2900      	cmp	r1, #0
    cffc:	dbf0      	blt.n	cfe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    cffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d000:	4299      	cmp	r1, r3
    d002:	daed      	bge.n	cfe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    d004:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    d006:	9d16      	ldr	r5, [sp, #88]	; 0x58
    d008:	42ab      	cmp	r3, r5
    d00a:	dae9      	bge.n	cfe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
  inline int32_t DimensionsCount() const { return size_; }
    d00c:	f8db 5000 	ldr.w	r5, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    d010:	2d04      	cmp	r5, #4
    d012:	d1d1      	bne.n	cfb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    d014:	f1b9 0f00 	cmp.w	r9, #0
    d018:	dbd0      	blt.n	cfbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
    d01a:	f8db 5004 	ldr.w	r5, [fp, #4]
    d01e:	45a9      	cmp	r9, r5
    d020:	dacc      	bge.n	cfbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    d022:	2900      	cmp	r1, #0
    d024:	dbcc      	blt.n	cfc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
    d026:	f8db c008 	ldr.w	ip, [fp, #8]
    d02a:	4561      	cmp	r1, ip
    d02c:	dac8      	bge.n	cfc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    d02e:	2800      	cmp	r0, #0
    d030:	dbc8      	blt.n	cfc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
    d032:	f8db 700c 	ldr.w	r7, [fp, #12]
    d036:	42b8      	cmp	r0, r7
    d038:	dac4      	bge.n	cfc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    d03a:	2b00      	cmp	r3, #0
    d03c:	dbc4      	blt.n	cfc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
    d03e:	f8db 5010 	ldr.w	r5, [fp, #16]
    d042:	42ab      	cmp	r3, r5
    d044:	dac0      	bge.n	cfc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    d046:	fb0c 1c09 	mla	ip, ip, r9, r1
    d04a:	fb0c 0707 	mla	r7, ip, r7, r0
    d04e:	fb07 3505 	mla	r5, r7, r5, r3
                                                      in_x, in_channel)];
    d052:	9f30      	ldr	r7, [sp, #192]	; 0xc0
    d054:	577f      	ldrsb	r7, [r7, r5]
  inline int32_t DimensionsCount() const { return size_; }
    d056:	f8d8 5000 	ldr.w	r5, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    d05a:	2d04      	cmp	r5, #4
    d05c:	d1b6      	bne.n	cfcc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x304>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    d05e:	2c00      	cmp	r4, #0
    d060:	dbb6      	blt.n	cfd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
    d062:	f8d8 5004 	ldr.w	r5, [r8, #4]
    d066:	42ac      	cmp	r4, r5
    d068:	dab2      	bge.n	cfd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    d06a:	2e00      	cmp	r6, #0
    d06c:	dbb2      	blt.n	cfd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
    d06e:	f8d8 e008 	ldr.w	lr, [r8, #8]
    d072:	4576      	cmp	r6, lr
    d074:	daae      	bge.n	cfd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    d076:	2a00      	cmp	r2, #0
    d078:	dbae      	blt.n	cfd8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
    d07a:	f8d8 c00c 	ldr.w	ip, [r8, #12]
    d07e:	4562      	cmp	r2, ip
    d080:	daaa      	bge.n	cfd8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    d082:	2b00      	cmp	r3, #0
    d084:	dbaa      	blt.n	cfdc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
    d086:	f8d8 5010 	ldr.w	r5, [r8, #16]
    d08a:	42ab      	cmp	r3, r5
    d08c:	daa6      	bge.n	cfdc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    d08e:	fb0e 6e04 	mla	lr, lr, r4, r6
    d092:	fb0e 2c0c 	mla	ip, lr, ip, r2
    d096:	fb0c 3c05 	mla	ip, ip, r5, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    d09a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    d09c:	f915 c00c 	ldrsb.w	ip, [r5, ip]
                acc += filter_val * (input_val + input_offset);
    d0a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d0a2:	442f      	add	r7, r5
    d0a4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    d0a6:	fb0c 5507 	mla	r5, ip, r7, r5
    d0aa:	951d      	str	r5, [sp, #116]	; 0x74
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    d0ac:	3301      	adds	r3, #1
    d0ae:	e7aa      	b.n	d006 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    d0b0:	3601      	adds	r6, #1
    d0b2:	9b07      	ldr	r3, [sp, #28]
    d0b4:	429e      	cmp	r6, r3
    d0b6:	da05      	bge.n	d0c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fc>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    d0b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d0bc:	fb03 2106 	mla	r1, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    d0c0:	2200      	movs	r2, #0
    d0c2:	e78e      	b.n	cfe2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x31a>
          if (bias_data) {
    d0c4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    d0c6:	b123      	cbz	r3, d0d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x40a>
            acc += bias_data[out_channel];
    d0c8:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    d0cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d0ce:	4413      	add	r3, r2
    d0d0:	931d      	str	r3, [sp, #116]	; 0x74
          acc = MultiplyByQuantizedMultiplier(
    d0d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    d0d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d0d6:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
    d0da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d0dc:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    d0e0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    d0e4:	2e00      	cmp	r6, #0
    d0e6:	f340 80a1 	ble.w	d22c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x564>
    d0ea:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    d0ec:	409d      	lsls	r5, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    d0ee:	45ac      	cmp	ip, r5
    d0f0:	f000 809e 	beq.w	d230 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x568>
    d0f4:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    d0f6:	17eb      	asrs	r3, r5, #31
  std::int64_t b_64(b);
    d0f8:	4660      	mov	r0, ip
    d0fa:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    d0fc:	fb05 f101 	mul.w	r1, r5, r1
    d100:	fb0c 1103 	mla	r1, ip, r3, r1
    d104:	fba5 230c 	umull	r2, r3, r5, ip
    d108:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    d10a:	2a00      	cmp	r2, #0
    d10c:	f173 0100 	sbcs.w	r1, r3, #0
    d110:	f2c0 8095 	blt.w	d23e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x576>
    d114:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    d118:	1852      	adds	r2, r2, r1
    d11a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    d11e:	4611      	mov	r1, r2
    d120:	461d      	mov	r5, r3
    d122:	2a00      	cmp	r2, #0
    d124:	f173 0000 	sbcs.w	r0, r3, #0
    d128:	f2c0 808b 	blt.w	d242 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57a>
    d12c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    d12e:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    d132:	2f00      	cmp	r7, #0
    d134:	f040 808d 	bne.w	d252 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x58a>
  assert(exponent >= 0);
    d138:	2e00      	cmp	r6, #0
    d13a:	f2c0 808d 	blt.w	d258 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x590>
  assert(exponent <= 31);
    d13e:	2e1f      	cmp	r6, #31
    d140:	f300 8091 	bgt.w	d266 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x59e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d144:	2701      	movs	r7, #1
    d146:	fa07 f006 	lsl.w	r0, r7, r6
    d14a:	3801      	subs	r0, #1
    d14c:	f008 ff2a 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d150:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType zero = Dup<IntegerType>(0);
    d152:	2000      	movs	r0, #0
    d154:	f008 ff26 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d158:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    d15a:	4638      	mov	r0, r7
    d15c:	f008 ff22 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d160:	900b      	str	r0, [sp, #44]	; 0x2c
  const IntegerType remainder = BitAnd(x, mask);
    d162:	990a      	ldr	r1, [sp, #40]	; 0x28
    d164:	4628      	mov	r0, r5
    d166:	f008 ff1e 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d16a:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d16c:	4639      	mov	r1, r7
    d16e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d170:	f008 ff1b 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d174:	4607      	mov	r7, r0
    d176:	9918      	ldr	r1, [sp, #96]	; 0x60
    d178:	4628      	mov	r0, r5
    d17a:	f008 ff22 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d17e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d180:	f008 ff11 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d184:	4601      	mov	r1, r0
    d186:	4638      	mov	r0, r7
    d188:	f008 ff11 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d18c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    d18e:	4631      	mov	r1, r6
    d190:	4628      	mov	r0, r5
    d192:	f008 ff0a 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d196:	4605      	mov	r5, r0
    d198:	4639      	mov	r1, r7
    d19a:	9819      	ldr	r0, [sp, #100]	; 0x64
    d19c:	f008 ff19 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d1a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d1a2:	f008 ff00 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d1a6:	4601      	mov	r1, r0
    d1a8:	4628      	mov	r0, r5
    d1aa:	f008 ff00 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
          acc += output_offset;
    d1ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d1b0:	4418      	add	r0, r3
    d1b2:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    d1b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    d1b6:	4290      	cmp	r0, r2
    d1b8:	db5c      	blt.n	d274 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
      return __a;
    d1ba:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::max(acc, output_activation_min);
    d1bc:	681b      	ldr	r3, [r3, #0]
    d1be:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    d1c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    d1c2:	4293      	cmp	r3, r2
    d1c4:	dc58      	bgt.n	d278 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
      return __a;
    d1c6:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::min(acc, output_activation_max);
    d1c8:	6818      	ldr	r0, [r3, #0]
    d1ca:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    d1cc:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    d1d0:	2b04      	cmp	r3, #4
    d1d2:	d153      	bne.n	d27c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    d1d4:	f1b9 0f00 	cmp.w	r9, #0
    d1d8:	db52      	blt.n	d280 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    d1da:	f8da 3004 	ldr.w	r3, [sl, #4]
    d1de:	4599      	cmp	r9, r3
    d1e0:	da4e      	bge.n	d280 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    d1e2:	9b01      	ldr	r3, [sp, #4]
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	db4d      	blt.n	d284 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
    d1e8:	f8da 1008 	ldr.w	r1, [sl, #8]
    d1ec:	428b      	cmp	r3, r1
    d1ee:	da49      	bge.n	d284 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    d1f0:	9b02      	ldr	r3, [sp, #8]
    d1f2:	2b00      	cmp	r3, #0
    d1f4:	db48      	blt.n	d288 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
    d1f6:	f8da 200c 	ldr.w	r2, [sl, #12]
    d1fa:	4293      	cmp	r3, r2
    d1fc:	da44      	bge.n	d288 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    d1fe:	2c00      	cmp	r4, #0
    d200:	db44      	blt.n	d28c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
    d202:	f8da 3010 	ldr.w	r3, [sl, #16]
    d206:	429c      	cmp	r4, r3
    d208:	da40      	bge.n	d28c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    d20a:	9d01      	ldr	r5, [sp, #4]
    d20c:	fb01 5109 	mla	r1, r1, r9, r5
    d210:	9d02      	ldr	r5, [sp, #8]
    d212:	fb01 5202 	mla	r2, r1, r2, r5
    d216:	fb02 4303 	mla	r3, r2, r3, r4
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    d21a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    d21c:	54d0      	strb	r0, [r2, r3]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    d21e:	3401      	adds	r4, #1
    d220:	9b03      	ldr	r3, [sp, #12]
    d222:	429c      	cmp	r4, r3
    d224:	da34      	bge.n	d290 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c8>
          int32_t acc = 0;
    d226:	2600      	movs	r6, #0
    d228:	961d      	str	r6, [sp, #116]	; 0x74
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    d22a:	e742      	b.n	d0b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3ea>
  int right_shift = shift > 0 ? 0 : -shift;
    d22c:	4276      	negs	r6, r6
    d22e:	e75d      	b.n	d0ec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x424>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    d230:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    d234:	d001      	beq.n	d23a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x572>
    d236:	2700      	movs	r7, #0
    d238:	e75d      	b.n	d0f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
    d23a:	2701      	movs	r7, #1
    d23c:	e75b      	b.n	d0f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    d23e:	4921      	ldr	r1, [pc, #132]	; (d2c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5fc>)
    d240:	e76a      	b.n	d118 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x450>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    d242:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d246:	1851      	adds	r1, r2, r1
    d248:	f04f 0500 	mov.w	r5, #0
    d24c:	eb43 0505 	adc.w	r5, r3, r5
    d250:	e76c      	b.n	d12c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x464>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    d252:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    d256:	e76f      	b.n	d138 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x470>
  assert(exponent >= 0);
    d258:	4b1b      	ldr	r3, [pc, #108]	; (d2c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    d25a:	4a1c      	ldr	r2, [pc, #112]	; (d2cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    d25c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d260:	481b      	ldr	r0, [pc, #108]	; (d2d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    d262:	f005 fc23 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    d266:	4b1b      	ldr	r3, [pc, #108]	; (d2d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    d268:	4a18      	ldr	r2, [pc, #96]	; (d2cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    d26a:	f240 1167 	movw	r1, #359	; 0x167
    d26e:	4818      	ldr	r0, [pc, #96]	; (d2d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    d270:	f005 fc1c 	bl	12aac <__assert_func>
	return __b;
    d274:	ab1f      	add	r3, sp, #124	; 0x7c
    d276:	e7a1      	b.n	d1bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4f4>
	return __b;
    d278:	ab1e      	add	r3, sp, #120	; 0x78
    d27a:	e7a5      	b.n	d1c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x500>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    d27c:	f00b fc12 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    d280:	f00b fc10 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    d284:	f00b fc0e 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    d288:	f00b fc0c 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    d28c:	f00b fc0a 	bl	18aa4 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    d290:	9b02      	ldr	r3, [sp, #8]
    d292:	3301      	adds	r3, #1
    d294:	9302      	str	r3, [sp, #8]
    d296:	e65e      	b.n	cf56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
    d298:	f8cd a0d4 	str.w	sl, [sp, #212]	; 0xd4
    d29c:	46ca      	mov	sl, r9
    d29e:	46c1      	mov	r9, r8
    d2a0:	46d8      	mov	r8, fp
    d2a2:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
    for (int out_y = 0; out_y < output_height; ++out_y) {
    d2a6:	9b01      	ldr	r3, [sp, #4]
    d2a8:	3301      	adds	r3, #1
    d2aa:	9301      	str	r3, [sp, #4]
    d2ac:	e63f      	b.n	cf2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x266>
    d2ae:	465f      	mov	r7, fp
    d2b0:	46d3      	mov	fp, sl
    d2b2:	46ca      	mov	sl, r9
    d2b4:	46c1      	mov	r9, r8
  for (int batch = 0; batch < batches; ++batch) {
    d2b6:	f10b 0b01 	add.w	fp, fp, #1
    d2ba:	e62e      	b.n	cf1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x252>
}
    d2bc:	b027      	add	sp, #156	; 0x9c
    d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2c2:	bf00      	nop
    d2c4:	c0000001 	.word	0xc0000001
    d2c8:	0001c580 	.word	0x0001c580
    d2cc:	0001c590 	.word	0x0001c590
    d2d0:	0001c5e8 	.word	0x0001c5e8
    d2d4:	0001c644 	.word	0x0001c644

0000d2d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2dc:	b0e7      	sub	sp, #412	; 0x19c
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    d2de:	4bae      	ldr	r3, [pc, #696]	; (d598 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    d2e0:	681a      	ldr	r2, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d2e2:	2800      	cmp	r0, #0
    d2e4:	d052      	beq.n	d38c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    d2e6:	4688      	mov	r8, r1
    d2e8:	4681      	mov	r9, r0
  TFLITE_DCHECK(node != nullptr);
    d2ea:	2900      	cmp	r1, #0
    d2ec:	d050      	beq.n	d390 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d2ee:	6d44      	ldr	r4, [r0, #84]	; 0x54
    d2f0:	680b      	ldr	r3, [r1, #0]
    d2f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    d2f6:	6859      	ldr	r1, [r3, #4]
    d2f8:	47a0      	blx	r4
    d2fa:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    d2fc:	4ba7      	ldr	r3, [pc, #668]	; (d59c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    d2fe:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d300:	f1b9 0f00 	cmp.w	r9, #0
    d304:	d046      	beq.n	d394 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
  TFLITE_DCHECK(node != nullptr);
    d306:	f1b8 0f00 	cmp.w	r8, #0
    d30a:	d045      	beq.n	d398 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d30c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d310:	f8d8 3000 	ldr.w	r3, [r8]
    d314:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d318:	6859      	ldr	r1, [r3, #4]
    d31a:	4648      	mov	r0, r9
    d31c:	4790      	blx	r2
    d31e:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    d320:	f8d8 3000 	ldr.w	r3, [r8]
    d324:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    d326:	2b03      	cmp	r3, #3
    d328:	d038      	beq.n	d39c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    d32a:	2600      	movs	r6, #0
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
    d32c:	4b9c      	ldr	r3, [pc, #624]	; (d5a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    d32e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d330:	f1b9 0f00 	cmp.w	r9, #0
    d334:	d049      	beq.n	d3ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf2>
  TFLITE_DCHECK(node != nullptr);
    d336:	f1b8 0f00 	cmp.w	r8, #0
    d33a:	d048      	beq.n	d3ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d33c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d340:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d344:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d348:	6859      	ldr	r1, [r3, #4]
    d34a:	4648      	mov	r0, r9
    d34c:	4790      	blx	r2
    d34e:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d350:	f8d8 1014 	ldr.w	r1, [r8, #20]
    d354:	2900      	cmp	r1, #0
    d356:	d03c      	beq.n	d3d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
  TFLITE_DCHECK(node->user_data != nullptr);
    d358:	f8d8 b010 	ldr.w	fp, [r8, #16]
    d35c:	f1bb 0f00 	cmp.w	fp, #0
    d360:	d039      	beq.n	d3d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    d362:	7a38      	ldrb	r0, [r7, #8]
    d364:	7a23      	ldrb	r3, [r4, #8]
    d366:	4298      	cmp	r0, r3
    d368:	d037      	beq.n	d3da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    d36a:	f8d9 4014 	ldr.w	r4, [r9, #20]
    d36e:	9303      	str	r3, [sp, #12]
    d370:	9002      	str	r0, [sp, #8]
    d372:	4b8c      	ldr	r3, [pc, #560]	; (d5a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    d374:	9301      	str	r3, [sp, #4]
    d376:	4b8c      	ldr	r3, [pc, #560]	; (d5a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    d378:	9300      	str	r3, [sp, #0]
    d37a:	2337      	movs	r3, #55	; 0x37
    d37c:	4a8b      	ldr	r2, [pc, #556]	; (d5ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    d37e:	498c      	ldr	r1, [pc, #560]	; (d5b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    d380:	4648      	mov	r0, r9
    d382:	47a0      	blx	r4
    d384:	2001      	movs	r0, #1
}
    d386:	b067      	add	sp, #412	; 0x19c
    d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(context != nullptr);
    d38c:	f00b fb8a 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    d390:	f00b fb88 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    d394:	f00b fb86 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    d398:	f00b fb84 	bl	18aa4 <abort>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    d39c:	4b85      	ldr	r3, [pc, #532]	; (d5b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    d39e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d3a0:	f1b9 0f00 	cmp.w	r9, #0
    d3a4:	d00d      	beq.n	d3c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
  TFLITE_DCHECK(node != nullptr);
    d3a6:	f1b8 0f00 	cmp.w	r8, #0
    d3aa:	d00c      	beq.n	d3c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d3ac:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d3b0:	f8d8 3000 	ldr.w	r3, [r8]
    d3b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d3b8:	6859      	ldr	r1, [r3, #4]
    d3ba:	4648      	mov	r0, r9
    d3bc:	4790      	blx	r2
    d3be:	4606      	mov	r6, r0
    d3c0:	e7b4      	b.n	d32c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  TFLITE_DCHECK(context != nullptr);
    d3c2:	f00b fb6f 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    d3c6:	f00b fb6d 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    d3ca:	f00b fb6b 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    d3ce:	f00b fb69 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d3d2:	f00b fb67 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d3d6:	f00b fb65 	bl	18aa4 <abort>
  TF_LITE_ENSURE_MSG(
    d3da:	7a2b      	ldrb	r3, [r5, #8]
    d3dc:	4298      	cmp	r0, r3
    d3de:	d00a      	beq.n	d3f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    d3e0:	2807      	cmp	r0, #7
    d3e2:	d101      	bne.n	d3e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
    d3e4:	2b09      	cmp	r3, #9
    d3e6:	d006      	beq.n	d3f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    d3e8:	f8d9 3014 	ldr.w	r3, [r9, #20]
    d3ec:	4972      	ldr	r1, [pc, #456]	; (d5b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    d3ee:	4648      	mov	r0, r9
    d3f0:	4798      	blx	r3
    d3f2:	2001      	movs	r0, #1
    d3f4:	e7c7      	b.n	d386 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  switch (input->type) {  // Already know in/out types are same.
    d3f6:	2807      	cmp	r0, #7
    d3f8:	d073      	beq.n	d4e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    d3fa:	2809      	cmp	r0, #9
    d3fc:	f000 80e0 	beq.w	d5c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    d400:	2801      	cmp	r0, #1
    d402:	d00a      	beq.n	d41a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    d404:	f8d9 4014 	ldr.w	r4, [r9, #20]
    d408:	f7fb ffc8 	bl	939c <TfLiteTypeGetName>
    d40c:	4602      	mov	r2, r0
    d40e:	7a3b      	ldrb	r3, [r7, #8]
    d410:	496a      	ldr	r1, [pc, #424]	; (d5bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    d412:	4648      	mov	r0, r9
    d414:	47a0      	blx	r4
      return kTfLiteError;
    d416:	2001      	movs	r0, #1
    d418:	e7b5      	b.n	d386 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    d41a:	465a      	mov	r2, fp
    d41c:	a80a      	add	r0, sp, #40	; 0x28
    d41e:	f009 fc4f 	bl	16cc0 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d422:	4639      	mov	r1, r7
    d424:	a818      	add	r0, sp, #96	; 0x60
    d426:	f009 ff68 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d42a:	4638      	mov	r0, r7
    d42c:	f008 fda6 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d430:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(filter),
    d432:	4629      	mov	r1, r5
    d434:	a81e      	add	r0, sp, #120	; 0x78
    d436:	f009 ff60 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d43a:	4628      	mov	r0, r5
    d43c:	f008 fd9e 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d440:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d442:	f10d 0890 	add.w	r8, sp, #144	; 0x90
    d446:	4631      	mov	r1, r6
    d448:	4640      	mov	r0, r8
    d44a:	f009 ff56 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d44e:	4630      	mov	r0, r6
    d450:	f008 fd94 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d454:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d456:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
    d45a:	4621      	mov	r1, r4
    d45c:	4648      	mov	r0, r9
    d45e:	f009 ff4c 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d462:	4620      	mov	r0, r4
    d464:	f008 fd90 	bl	15f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    d468:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(nullptr), nullptr);
    d46a:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
    d46e:	2100      	movs	r1, #0
    d470:	4650      	mov	r0, sl
    d472:	f009 ff42 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d476:	2300      	movs	r3, #0
    d478:	9306      	str	r3, [sp, #24]
    d47a:	f8cd a014 	str.w	sl, [sp, #20]
    d47e:	9404      	str	r4, [sp, #16]
    d480:	f8cd 900c 	str.w	r9, [sp, #12]
    d484:	9602      	str	r6, [sp, #8]
    d486:	f8cd 8004 	str.w	r8, [sp, #4]
    d48a:	9500      	str	r5, [sp, #0]
    d48c:	ab1e      	add	r3, sp, #120	; 0x78
    d48e:	463a      	mov	r2, r7
    d490:	a918      	add	r1, sp, #96	; 0x60
    d492:	a80a      	add	r0, sp, #40	; 0x28
    d494:	f009 f999 	bl	167ca <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
    if (size_ > kMaxSmallSize) {
    d498:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    d49a:	2b05      	cmp	r3, #5
    d49c:	dd03      	ble.n	d4a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
      delete[] dims_pointer_;
    d49e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    d4a0:	b108      	cbz	r0, d4a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    d4a2:	f00b faea 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d4a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    d4a8:	2b05      	cmp	r3, #5
    d4aa:	dd03      	ble.n	d4b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
      delete[] dims_pointer_;
    d4ac:	982b      	ldr	r0, [sp, #172]	; 0xac
    d4ae:	b108      	cbz	r0, d4b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    d4b0:	f00b fae3 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d4b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d4b6:	2b05      	cmp	r3, #5
    d4b8:	dd03      	ble.n	d4c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      delete[] dims_pointer_;
    d4ba:	9825      	ldr	r0, [sp, #148]	; 0x94
    d4bc:	b108      	cbz	r0, d4c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    d4be:	f00b fadc 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d4c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    d4c4:	2b05      	cmp	r3, #5
    d4c6:	dd03      	ble.n	d4d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      delete[] dims_pointer_;
    d4c8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d4ca:	b108      	cbz	r0, d4d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    d4cc:	f00b fad5 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d4d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d4d2:	2b05      	cmp	r3, #5
    d4d4:	dd03      	ble.n	d4de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
      delete[] dims_pointer_;
    d4d6:	9819      	ldr	r0, [sp, #100]	; 0x64
    d4d8:	b108      	cbz	r0, d4de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
    d4da:	f00b face 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    d4de:	2000      	movs	r0, #0
      break;
    d4e0:	e751      	b.n	d386 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    d4e2:	465a      	mov	r2, fp
    d4e4:	a80a      	add	r0, sp, #40	; 0x28
    d4e6:	f009 fbc4 	bl	16c72 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d4ea:	f8db a024 	ldr.w	sl, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    d4ee:	f8db b028 	ldr.w	fp, [fp, #40]	; 0x28
    d4f2:	4639      	mov	r1, r7
    d4f4:	a836      	add	r0, sp, #216	; 0xd8
    d4f6:	f009 ff00 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d4fa:	4638      	mov	r0, r7
    d4fc:	f009 f947 	bl	1678e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    d500:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    d502:	af3c      	add	r7, sp, #240	; 0xf0
    d504:	4629      	mov	r1, r5
    d506:	4638      	mov	r0, r7
    d508:	f009 fef7 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d50c:	4628      	mov	r0, r5
    d50e:	f008 fd3f 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d512:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d514:	f50d 7884 	add.w	r8, sp, #264	; 0x108
    d518:	4631      	mov	r1, r6
    d51a:	4640      	mov	r0, r8
    d51c:	f009 feed 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d520:	4630      	mov	r0, r6
    d522:	f009 f944 	bl	167ae <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
    d526:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d528:	f50d 7990 	add.w	r9, sp, #288	; 0x120
    d52c:	4621      	mov	r1, r4
    d52e:	4648      	mov	r0, r9
    d530:	f009 fee3 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d534:	4620      	mov	r0, r4
    d536:	f009 f930 	bl	1679a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    d53a:	9006      	str	r0, [sp, #24]
    d53c:	f8cd 9014 	str.w	r9, [sp, #20]
    d540:	9604      	str	r6, [sp, #16]
    d542:	f8cd 800c 	str.w	r8, [sp, #12]
    d546:	9502      	str	r5, [sp, #8]
    d548:	9701      	str	r7, [sp, #4]
    d54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d54c:	9300      	str	r3, [sp, #0]
    d54e:	ab36      	add	r3, sp, #216	; 0xd8
    d550:	465a      	mov	r2, fp
    d552:	4651      	mov	r1, sl
    d554:	a80a      	add	r0, sp, #40	; 0x28
    d556:	f7ff f8d7 	bl	c708 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
    if (size_ > kMaxSmallSize) {
    d55a:	9b48      	ldr	r3, [sp, #288]	; 0x120
    d55c:	2b05      	cmp	r3, #5
    d55e:	dd03      	ble.n	d568 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
      delete[] dims_pointer_;
    d560:	9849      	ldr	r0, [sp, #292]	; 0x124
    d562:	b108      	cbz	r0, d568 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
    d564:	f00b fa89 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d568:	9b42      	ldr	r3, [sp, #264]	; 0x108
    d56a:	2b05      	cmp	r3, #5
    d56c:	dd03      	ble.n	d576 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      delete[] dims_pointer_;
    d56e:	9843      	ldr	r0, [sp, #268]	; 0x10c
    d570:	b108      	cbz	r0, d576 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
    d572:	f00b fa82 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d576:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    d578:	2b05      	cmp	r3, #5
    d57a:	dd03      	ble.n	d584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      delete[] dims_pointer_;
    d57c:	983d      	ldr	r0, [sp, #244]	; 0xf4
    d57e:	b108      	cbz	r0, d584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    d580:	f00b fa7b 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d584:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    d586:	2b05      	cmp	r3, #5
    d588:	dd03      	ble.n	d592 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
      delete[] dims_pointer_;
    d58a:	9837      	ldr	r0, [sp, #220]	; 0xdc
    d58c:	b108      	cbz	r0, d592 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
    d58e:	f00b fa74 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    d592:	2000      	movs	r0, #0
      break;
    d594:	e6f7      	b.n	d386 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
    d596:	bf00      	nop
    d598:	0001c9d0 	.word	0x0001c9d0
    d59c:	0001c9d8 	.word	0x0001c9d8
    d5a0:	0001c9d4 	.word	0x0001c9d4
    d5a4:	0001c7dc 	.word	0x0001c7dc
    d5a8:	0001c7ec 	.word	0x0001c7ec
    d5ac:	0001c790 	.word	0x0001c790
    d5b0:	0001c124 	.word	0x0001c124
    d5b4:	0001c9cc 	.word	0x0001c9cc
    d5b8:	0001c7f8 	.word	0x0001c7f8
    d5bc:	0001c654 	.word	0x0001c654
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    d5c0:	465a      	mov	r2, fp
    d5c2:	a80a      	add	r0, sp, #40	; 0x28
    d5c4:	f009 fb55 	bl	16c72 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d5c8:	f8db 8024 	ldr.w	r8, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    d5cc:	f8db 9028 	ldr.w	r9, [fp, #40]	; 0x28
    d5d0:	4639      	mov	r1, r7
    d5d2:	a84e      	add	r0, sp, #312	; 0x138
    d5d4:	f009 fe91 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d5d8:	4638      	mov	r0, r7
    d5da:	f008 fcd9 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d5de:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    d5e0:	af54      	add	r7, sp, #336	; 0x150
    d5e2:	4629      	mov	r1, r5
    d5e4:	4638      	mov	r0, r7
    d5e6:	f009 fe88 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d5ea:	4628      	mov	r0, r5
    d5ec:	f008 fcd0 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d5f0:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d5f2:	f50d 7ab4 	add.w	sl, sp, #360	; 0x168
    d5f6:	4631      	mov	r1, r6
    d5f8:	4650      	mov	r0, sl
    d5fa:	f009 fe7e 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d5fe:	4630      	mov	r0, r6
    d600:	f009 f8cf 	bl	167a2 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    d604:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d606:	f50d 7bc0 	add.w	fp, sp, #384	; 0x180
    d60a:	4621      	mov	r1, r4
    d60c:	4658      	mov	r0, fp
    d60e:	f009 fe74 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d612:	4620      	mov	r0, r4
    d614:	f008 fcc2 	bl	15f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    d618:	9006      	str	r0, [sp, #24]
    d61a:	f8cd b014 	str.w	fp, [sp, #20]
    d61e:	9604      	str	r6, [sp, #16]
    d620:	f8cd a00c 	str.w	sl, [sp, #12]
    d624:	9502      	str	r5, [sp, #8]
    d626:	9701      	str	r7, [sp, #4]
    d628:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d62a:	9300      	str	r3, [sp, #0]
    d62c:	ab4e      	add	r3, sp, #312	; 0x138
    d62e:	464a      	mov	r2, r9
    d630:	4641      	mov	r1, r8
    d632:	a80a      	add	r0, sp, #40	; 0x28
    d634:	f7ff fb48 	bl	ccc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    d638:	9b60      	ldr	r3, [sp, #384]	; 0x180
    d63a:	2b05      	cmp	r3, #5
    d63c:	dd03      	ble.n	d646 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
      delete[] dims_pointer_;
    d63e:	9861      	ldr	r0, [sp, #388]	; 0x184
    d640:	b108      	cbz	r0, d646 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    d642:	f00b fa1a 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d646:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    d648:	2b05      	cmp	r3, #5
    d64a:	dd03      	ble.n	d654 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
      delete[] dims_pointer_;
    d64c:	985b      	ldr	r0, [sp, #364]	; 0x16c
    d64e:	b108      	cbz	r0, d654 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    d650:	f00b fa13 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d654:	9b54      	ldr	r3, [sp, #336]	; 0x150
    d656:	2b05      	cmp	r3, #5
    d658:	dd03      	ble.n	d662 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
      delete[] dims_pointer_;
    d65a:	9855      	ldr	r0, [sp, #340]	; 0x154
    d65c:	b108      	cbz	r0, d662 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    d65e:	f00b fa0c 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d662:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    d664:	2b05      	cmp	r3, #5
    d666:	dd03      	ble.n	d670 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
      delete[] dims_pointer_;
    d668:	984f      	ldr	r0, [sp, #316]	; 0x13c
    d66a:	b108      	cbz	r0, d670 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
    d66c:	f00b fa05 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    d670:	2000      	movs	r0, #0
      break;
    d672:	e688      	b.n	d386 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>

0000d674 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    d674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d678:	b08f      	sub	sp, #60	; 0x3c
    d67a:	4604      	mov	r4, r0
    d67c:	460d      	mov	r5, r1
    d67e:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    d680:	6809      	ldr	r1, [r1, #0]
    d682:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    d684:	2903      	cmp	r1, #3
    d686:	d00a      	beq.n	d69e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    d688:	2902      	cmp	r1, #2
    d68a:	d008      	beq.n	d69e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    d68c:	6945      	ldr	r5, [r0, #20]
    d68e:	4b77      	ldr	r3, [pc, #476]	; (d86c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
    d690:	9300      	str	r3, [sp, #0]
    d692:	2356      	movs	r3, #86	; 0x56
    d694:	4a76      	ldr	r2, [pc, #472]	; (d870 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d696:	4977      	ldr	r1, [pc, #476]	; (d874 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d698:	47a8      	blx	r5
    d69a:	2001      	movs	r0, #1
    d69c:	e011      	b.n	d6c2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    d69e:	686a      	ldr	r2, [r5, #4]
    d6a0:	6812      	ldr	r2, [r2, #0]
    d6a2:	2a01      	cmp	r2, #1
    d6a4:	d010      	beq.n	d6c8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    d6a6:	6966      	ldr	r6, [r4, #20]
    d6a8:	2501      	movs	r5, #1
    d6aa:	9503      	str	r5, [sp, #12]
    d6ac:	9202      	str	r2, [sp, #8]
    d6ae:	4b72      	ldr	r3, [pc, #456]	; (d878 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    d6b0:	9301      	str	r3, [sp, #4]
    d6b2:	4b72      	ldr	r3, [pc, #456]	; (d87c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    d6b4:	9300      	str	r3, [sp, #0]
    d6b6:	2357      	movs	r3, #87	; 0x57
    d6b8:	4a6d      	ldr	r2, [pc, #436]	; (d870 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d6ba:	4971      	ldr	r1, [pc, #452]	; (d880 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    d6bc:	4620      	mov	r0, r4
    d6be:	47b0      	blx	r6
    d6c0:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    d6c2:	b00f      	add	sp, #60	; 0x3c
    d6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    d6c8:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    d6cc:	68b1      	ldr	r1, [r6, #8]
    d6ce:	6872      	ldr	r2, [r6, #4]
    d6d0:	f8d6 8014 	ldr.w	r8, [r6, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    d6d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d6d6:	3801      	subs	r0, #1
    d6d8:	6937      	ldr	r7, [r6, #16]
    d6da:	fb00 f007 	mul.w	r0, r0, r7
    d6de:	f100 0901 	add.w	r9, r0, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
    d6e2:	b1b2      	cbz	r2, d712 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>

  switch (padding) {
    d6e4:	f1be 0f01 	cmp.w	lr, #1
    d6e8:	d005      	beq.n	d6f6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    d6ea:	f1be 0f02 	cmp.w	lr, #2
    d6ee:	d009      	beq.n	d704 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    d6f0:	f04f 0c00 	mov.w	ip, #0
    d6f4:	e00e      	b.n	d714 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    d6f6:	eb02 0c03 	add.w	ip, r2, r3
    d6fa:	f10c 3cff 	add.w	ip, ip, #4294967295
    d6fe:	fb9c fcf2 	sdiv	ip, ip, r2
    d702:	e007      	b.n	d714 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    d704:	eb02 0c03 	add.w	ip, r2, r3
    d708:	ebac 0c09 	sub.w	ip, ip, r9
    d70c:	fb9c fcf2 	sdiv	ip, ip, r2
    d710:	e000      	b.n	d714 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    d712:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    d714:	9f18      	ldr	r7, [sp, #96]	; 0x60
    d716:	3f01      	subs	r7, #1
    d718:	fb07 f708 	mul.w	r7, r7, r8
    d71c:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    d71e:	b1c1      	cbz	r1, d752 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    d720:	f1be 0f01 	cmp.w	lr, #1
    d724:	d005      	beq.n	d732 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    d726:	f1be 0f02 	cmp.w	lr, #2
    d72a:	d00a      	beq.n	d742 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    d72c:	f04f 0e00 	mov.w	lr, #0
    d730:	e010      	b.n	d754 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    d732:	9816      	ldr	r0, [sp, #88]	; 0x58
    d734:	eb01 0e00 	add.w	lr, r1, r0
    d738:	f10e 3eff 	add.w	lr, lr, #4294967295
    d73c:	fb9e fef1 	sdiv	lr, lr, r1
    d740:	e008      	b.n	d754 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    d742:	9816      	ldr	r0, [sp, #88]	; 0x58
    d744:	eb01 0e00 	add.w	lr, r1, r0
    d748:	ebae 0e07 	sub.w	lr, lr, r7
    d74c:	fb9e fef1 	sdiv	lr, lr, r1
    d750:	e000      	b.n	d754 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    d752:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    d754:	f10e 3eff 	add.w	lr, lr, #4294967295
    d758:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    d75c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    d75e:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    d760:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    d764:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    d768:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    d76c:	1049      	asrs	r1, r1, #1
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
  padding_values.height =
    d76e:	910b      	str	r1, [sp, #44]	; 0x2c
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
    d770:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    d772:	f10c 3cff 	add.w	ip, ip, #4294967295
    d776:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    d77a:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    d77c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    d780:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    d784:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    d788:	1052      	asrs	r2, r2, #1
  padding_values.width =
    d78a:	920a      	str	r2, [sp, #40]	; 0x28
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
    d78c:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    d78e:	ab0e      	add	r3, sp, #56	; 0x38
    d790:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    d794:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    d796:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    d79a:	2200      	movs	r2, #0
    d79c:	4629      	mov	r1, r5
    d79e:	4620      	mov	r0, r4
    d7a0:	f008 fb24 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d7a4:	4607      	mov	r7, r0
    d7a6:	b308      	cbz	r0, d7ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x178>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    d7a8:	2201      	movs	r2, #1
    d7aa:	4629      	mov	r1, r5
    d7ac:	4620      	mov	r0, r4
    d7ae:	f008 fb1d 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    d7b2:	4680      	mov	r8, r0
    d7b4:	b320      	cbz	r0, d800 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18c>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    d7b6:	2202      	movs	r2, #2
    d7b8:	4629      	mov	r1, r5
    d7ba:	4620      	mov	r0, r4
    d7bc:	f008 fb54 	bl	15e68 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    d7c0:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    d7c2:	2200      	movs	r2, #0
    d7c4:	4629      	mov	r1, r5
    d7c6:	4620      	mov	r0, r4
    d7c8:	f008 fb2f 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d7cc:	4605      	mov	r5, r0
    d7ce:	b308      	cbz	r0, d814 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>
  if (data_type != kTfLiteFloat32) {
    d7d0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    d7d4:	2b01      	cmp	r3, #1
    d7d6:	d127      	bne.n	d828 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b4>
  data->input_zero_point = input->params.zero_point;
    d7d8:	693b      	ldr	r3, [r7, #16]
    d7da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d7dc:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    d7de:	f8d8 3010 	ldr.w	r3, [r8, #16]
    d7e2:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    d7e4:	692b      	ldr	r3, [r5, #16]
    d7e6:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    d7e8:	2000      	movs	r0, #0
    d7ea:	e76a      	b.n	d6c2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    d7ec:	6965      	ldr	r5, [r4, #20]
    d7ee:	4b25      	ldr	r3, [pc, #148]	; (d884 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    d7f0:	9300      	str	r3, [sp, #0]
    d7f2:	2361      	movs	r3, #97	; 0x61
    d7f4:	4a1e      	ldr	r2, [pc, #120]	; (d870 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d7f6:	491f      	ldr	r1, [pc, #124]	; (d874 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d7f8:	4620      	mov	r0, r4
    d7fa:	47a8      	blx	r5
    d7fc:	2001      	movs	r0, #1
    d7fe:	e760      	b.n	d6c2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    d800:	6965      	ldr	r5, [r4, #20]
    d802:	4b21      	ldr	r3, [pc, #132]	; (d888 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    d804:	9300      	str	r3, [sp, #0]
    d806:	2363      	movs	r3, #99	; 0x63
    d808:	4a19      	ldr	r2, [pc, #100]	; (d870 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d80a:	491a      	ldr	r1, [pc, #104]	; (d874 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d80c:	4620      	mov	r0, r4
    d80e:	47a8      	blx	r5
    d810:	2001      	movs	r0, #1
    d812:	e756      	b.n	d6c2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    d814:	6965      	ldr	r5, [r4, #20]
    d816:	4b1d      	ldr	r3, [pc, #116]	; (d88c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    d818:	9300      	str	r3, [sp, #0]
    d81a:	2367      	movs	r3, #103	; 0x67
    d81c:	4a14      	ldr	r2, [pc, #80]	; (d870 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d81e:	4915      	ldr	r1, [pc, #84]	; (d874 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d820:	4620      	mov	r0, r4
    d822:	47a8      	blx	r5
    d824:	2001      	movs	r0, #1
    d826:	e74c      	b.n	d6c2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    d828:	f8d8 3008 	ldr.w	r3, [r8, #8]
    d82c:	685b      	ldr	r3, [r3, #4]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    d82e:	360c      	adds	r6, #12
    d830:	9308      	str	r3, [sp, #32]
    d832:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d836:	9307      	str	r3, [sp, #28]
    d838:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d83c:	9306      	str	r3, [sp, #24]
    d83e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d840:	3330      	adds	r3, #48	; 0x30
    d842:	9305      	str	r3, [sp, #20]
    d844:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d846:	332c      	adds	r3, #44	; 0x2c
    d848:	9304      	str	r3, [sp, #16]
    d84a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d84c:	3320      	adds	r3, #32
    d84e:	9303      	str	r3, [sp, #12]
    d850:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d852:	331c      	adds	r3, #28
    d854:	9302      	str	r3, [sp, #8]
    d856:	9601      	str	r6, [sp, #4]
    d858:	9000      	str	r0, [sp, #0]
    d85a:	464b      	mov	r3, r9
    d85c:	4642      	mov	r2, r8
    d85e:	4639      	mov	r1, r7
    d860:	4620      	mov	r0, r4
    d862:	f7fc f80f 	bl	9884 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    d866:	2800      	cmp	r0, #0
    d868:	d0b6      	beq.n	d7d8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x164>
    d86a:	e72a      	b.n	d6c2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    d86c:	0001c8c8 	.word	0x0001c8c8
    d870:	0001c874 	.word	0x0001c874
    d874:	0001be64 	.word	0x0001be64
    d878:	0001cf20 	.word	0x0001cf20
    d87c:	0001c8ec 	.word	0x0001c8ec
    d880:	0001c124 	.word	0x0001c124
    d884:	0001c900 	.word	0x0001c900
    d888:	0001c914 	.word	0x0001c914
    d88c:	0001c56c 	.word	0x0001c56c

0000d890 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d894:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    d896:	690e      	ldr	r6, [r1, #16]
    d898:	2e00      	cmp	r6, #0
    d89a:	d052      	beq.n	d942 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    d89c:	4604      	mov	r4, r0
    d89e:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d8a0:	694f      	ldr	r7, [r1, #20]
    d8a2:	2f00      	cmp	r7, #0
    d8a4:	d04f      	beq.n	d946 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb6>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    d8a6:	2200      	movs	r2, #0
    d8a8:	f008 fabf 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d8ac:	4680      	mov	r8, r0
    d8ae:	2800      	cmp	r0, #0
    d8b0:	d04b      	beq.n	d94a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xba>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    d8b2:	2200      	movs	r2, #0
    d8b4:	4629      	mov	r1, r5
    d8b6:	4620      	mov	r0, r4
    d8b8:	f008 fa98 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d8bc:	4681      	mov	r9, r0
    d8be:	2800      	cmp	r0, #0
    d8c0:	d051      	beq.n	d966 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    d8c2:	2201      	movs	r2, #1
    d8c4:	4629      	mov	r1, r5
    d8c6:	4620      	mov	r0, r4
    d8c8:	f008 fa90 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    d8cc:	4682      	mov	sl, r0
    d8ce:	2800      	cmp	r0, #0
    d8d0:	d054      	beq.n	d97c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xec>

  const int input_width = input->dims->data[2];
    d8d2:	f8d9 3008 	ldr.w	r3, [r9, #8]
    d8d6:	68da      	ldr	r2, [r3, #12]
    d8d8:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    d8da:	689b      	ldr	r3, [r3, #8]
    d8dc:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    d8de:	6883      	ldr	r3, [r0, #8]
    d8e0:	68da      	ldr	r2, [r3, #12]
    d8e2:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    d8e4:	689a      	ldr	r2, [r3, #8]
    d8e6:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    d8e8:	f8d8 2008 	ldr.w	r2, [r8, #8]
    d8ec:	68d1      	ldr	r1, [r2, #12]
    d8ee:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    d8f0:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    d8f4:	685a      	ldr	r2, [r3, #4]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    d8f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d8f8:	ea4f 0882 	mov.w	r8, r2, lsl #2
    d8fc:	4641      	mov	r1, r8
    d8fe:	4620      	mov	r0, r4
    d900:	4798      	blx	r3
  data->per_channel_output_multiplier =
    d902:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    d904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d906:	4641      	mov	r1, r8
    d908:	4620      	mov	r0, r4
    d90a:	4798      	blx	r3
  data->per_channel_output_shift =
    d90c:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    d90e:	f899 3000 	ldrb.w	r3, [r9]
    d912:	2b09      	cmp	r3, #9
    d914:	d03d      	beq.n	d992 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
    d916:	2b07      	cmp	r3, #7
    d918:	d03b      	beq.n	d992 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    d91a:	9606      	str	r6, [sp, #24]
    d91c:	9305      	str	r3, [sp, #20]
    d91e:	f8cd b010 	str.w	fp, [sp, #16]
    d922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d924:	9303      	str	r3, [sp, #12]
    d926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d928:	9302      	str	r3, [sp, #8]
    d92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d92c:	9301      	str	r3, [sp, #4]
    d92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d930:	9300      	str	r3, [sp, #0]
    d932:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d934:	463a      	mov	r2, r7
    d936:	4629      	mov	r1, r5
    d938:	4620      	mov	r0, r4
    d93a:	f7ff fe9b 	bl	d674 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    d93e:	4680      	mov	r8, r0
    d940:	e00d      	b.n	d95e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node->user_data != nullptr);
    d942:	f00b f8af 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d946:	f00b f8ad 	bl	18aa4 <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    d94a:	6965      	ldr	r5, [r4, #20]
    d94c:	4b32      	ldr	r3, [pc, #200]	; (da18 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    d94e:	9300      	str	r3, [sp, #0]
    d950:	2386      	movs	r3, #134	; 0x86
    d952:	4a32      	ldr	r2, [pc, #200]	; (da1c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d954:	4932      	ldr	r1, [pc, #200]	; (da20 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d956:	4620      	mov	r0, r4
    d958:	47a8      	blx	r5
    d95a:	f04f 0801 	mov.w	r8, #1
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    d95e:	4640      	mov	r0, r8
    d960:	b00f      	add	sp, #60	; 0x3c
    d962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    d966:	6965      	ldr	r5, [r4, #20]
    d968:	4b2e      	ldr	r3, [pc, #184]	; (da24 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    d96a:	9300      	str	r3, [sp, #0]
    d96c:	2388      	movs	r3, #136	; 0x88
    d96e:	4a2b      	ldr	r2, [pc, #172]	; (da1c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d970:	492b      	ldr	r1, [pc, #172]	; (da20 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d972:	4620      	mov	r0, r4
    d974:	47a8      	blx	r5
    d976:	f04f 0801 	mov.w	r8, #1
    d97a:	e7f0      	b.n	d95e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE(context, filter != nullptr);
    d97c:	6965      	ldr	r5, [r4, #20]
    d97e:	4b2a      	ldr	r3, [pc, #168]	; (da28 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    d980:	9300      	str	r3, [sp, #0]
    d982:	238a      	movs	r3, #138	; 0x8a
    d984:	4a25      	ldr	r2, [pc, #148]	; (da1c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d986:	4926      	ldr	r1, [pc, #152]	; (da20 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d988:	4620      	mov	r0, r4
    d98a:	47a8      	blx	r5
    d98c:	f04f 0801 	mov.w	r8, #1
    d990:	e7e5      	b.n	d95e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    d992:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    d996:	f1b8 0f01 	cmp.w	r8, #1
    d99a:	d00f      	beq.n	d9bc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    d99c:	6966      	ldr	r6, [r4, #20]
    d99e:	2501      	movs	r5, #1
    d9a0:	9503      	str	r5, [sp, #12]
    d9a2:	f8cd 8008 	str.w	r8, [sp, #8]
    d9a6:	4b21      	ldr	r3, [pc, #132]	; (da2c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    d9a8:	9301      	str	r3, [sp, #4]
    d9aa:	4b21      	ldr	r3, [pc, #132]	; (da30 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    d9ac:	9300      	str	r3, [sp, #0]
    d9ae:	239e      	movs	r3, #158	; 0x9e
    d9b0:	4a1a      	ldr	r2, [pc, #104]	; (da1c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d9b2:	4920      	ldr	r1, [pc, #128]	; (da34 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    d9b4:	4620      	mov	r0, r4
    d9b6:	47b0      	blx	r6
    d9b8:	46a8      	mov	r8, r5
    d9ba:	e7d0      	b.n	d95e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    const auto* affine_quantization =
    d9bc:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    d9c0:	b1a2      	cbz	r2, d9ec <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    d9c2:	6811      	ldr	r1, [r2, #0]
    d9c4:	b1a1      	cbz	r1, d9f0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    d9c6:	6850      	ldr	r0, [r2, #4]
    d9c8:	b1a0      	cbz	r0, d9f4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>
    TF_LITE_ENSURE(context,
    d9ca:	680a      	ldr	r2, [r1, #0]
    d9cc:	2a01      	cmp	r2, #1
    d9ce:	d013      	beq.n	d9f8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    d9d0:	f8da 1008 	ldr.w	r1, [sl, #8]
    d9d4:	6849      	ldr	r1, [r1, #4]
    d9d6:	428a      	cmp	r2, r1
    d9d8:	d00e      	beq.n	d9f8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    d9da:	6965      	ldr	r5, [r4, #20]
    d9dc:	4b16      	ldr	r3, [pc, #88]	; (da38 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    d9de:	9300      	str	r3, [sp, #0]
    d9e0:	23a7      	movs	r3, #167	; 0xa7
    d9e2:	4a0e      	ldr	r2, [pc, #56]	; (da1c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d9e4:	490e      	ldr	r1, [pc, #56]	; (da20 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d9e6:	4620      	mov	r0, r4
    d9e8:	47a8      	blx	r5
    d9ea:	e7b8      	b.n	d95e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK(affine_quantization != nullptr);
    d9ec:	f00b f85a 	bl	18aa4 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    d9f0:	f00b f858 	bl	18aa4 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    d9f4:	f00b f856 	bl	18aa4 <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    d9f8:	6801      	ldr	r1, [r0, #0]
    d9fa:	428a      	cmp	r2, r1
    d9fc:	d08d      	beq.n	d91a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    d9fe:	6965      	ldr	r5, [r4, #20]
    da00:	9103      	str	r1, [sp, #12]
    da02:	9202      	str	r2, [sp, #8]
    da04:	4b0d      	ldr	r3, [pc, #52]	; (da3c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    da06:	9301      	str	r3, [sp, #4]
    da08:	4b0d      	ldr	r3, [pc, #52]	; (da40 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    da0a:	9300      	str	r3, [sp, #0]
    da0c:	23ab      	movs	r3, #171	; 0xab
    da0e:	4a03      	ldr	r2, [pc, #12]	; (da1c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    da10:	4908      	ldr	r1, [pc, #32]	; (da34 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    da12:	4620      	mov	r0, r4
    da14:	47a8      	blx	r5
    da16:	e7a2      	b.n	d95e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    da18:	0001c56c 	.word	0x0001c56c
    da1c:	0001c874 	.word	0x0001c874
    da20:	0001be64 	.word	0x0001be64
    da24:	0001c900 	.word	0x0001c900
    da28:	0001c914 	.word	0x0001c914
    da2c:	0001c140 	.word	0x0001c140
    da30:	0001c178 	.word	0x0001c178
    da34:	0001c124 	.word	0x0001c124
    da38:	0001c928 	.word	0x0001c928
    da3c:	0001c9a4 	.word	0x0001c9a4
    da40:	0001c22c 	.word	0x0001c22c

0000da44 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    da44:	b470      	push	{r4, r5, r6}
    da46:	4606      	mov	r6, r0
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    da48:	4604      	mov	r4, r0
    da4a:	4d05      	ldr	r5, [pc, #20]	; (da60 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
    da4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    da4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    da50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    da54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    da58:	4630      	mov	r0, r6
    da5a:	bc70      	pop	{r4, r5, r6}
    da5c:	4770      	bx	lr
    da5e:	bf00      	nop
    da60:	00019a80 	.word	0x00019a80

0000da64 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da68:	b0a5      	sub	sp, #148	; 0x94
    da6a:	911a      	str	r1, [sp, #104]	; 0x68
    da6c:	921b      	str	r2, [sp, #108]	; 0x6c
    da6e:	461f      	mov	r7, r3
    da70:	f8dd 80bc 	ldr.w	r8, [sp, #188]	; 0xbc
    da74:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    da76:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
    da7a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    da7e:	920f      	str	r2, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    da80:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    da84:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    da86:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    da8a:	9211      	str	r2, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    da8c:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    da90:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    da92:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    da96:	9213      	str	r2, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    da98:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    da9c:	9214      	str	r2, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
    da9e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    daa2:	9206      	str	r2, [sp, #24]
  const int32_t input_offset = params.input_offset;
    daa4:	6942      	ldr	r2, [r0, #20]
    daa6:	9215      	str	r2, [sp, #84]	; 0x54
  const int32_t output_offset = params.output_offset;
    daa8:	69c2      	ldr	r2, [r0, #28]
    daaa:	9216      	str	r2, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    daac:	6a81      	ldr	r1, [r0, #40]	; 0x28
    daae:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    dab0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    dab2:	921e      	str	r2, [sp, #120]	; 0x78
  inline int32_t DimensionsCount() const { return size_; }
    dab4:	6838      	ldr	r0, [r7, #0]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    dab6:	2804      	cmp	r0, #4
    dab8:	f040 80b6 	bne.w	dc28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    dabc:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    dac0:	2804      	cmp	r0, #4
    dac2:	f040 80b3 	bne.w	dc2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c8>
    dac6:	f8d9 0000 	ldr.w	r0, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    daca:	2804      	cmp	r0, #4
    dacc:	f040 80b0 	bne.w	dc30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1cc>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    dad0:	4291      	cmp	r1, r2
    dad2:	f300 80af 	bgt.w	dc34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
    TFLITE_DCHECK_LT(i, size_);
    dad6:	683a      	ldr	r2, [r7, #0]
    dad8:	2a00      	cmp	r2, #0
    dada:	f340 80ad 	ble.w	dc38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dade:	2a05      	cmp	r2, #5
    dae0:	f340 80ac 	ble.w	dc3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    dae4:	687a      	ldr	r2, [r7, #4]
    dae6:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    dae8:	f8d9 1000 	ldr.w	r1, [r9]
    daec:	2900      	cmp	r1, #0
    daee:	f340 80a7 	ble.w	dc40 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    daf2:	2905      	cmp	r1, #5
    daf4:	f340 80a6 	ble.w	dc44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    daf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    dafc:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dafe:	4291      	cmp	r1, r2
    db00:	f040 80a3 	bne.w	dc4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db04:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    db06:	f8d9 1000 	ldr.w	r1, [r9]
    db0a:	2900      	cmp	r1, #0
    db0c:	f340 809f 	ble.w	dc4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db10:	2905      	cmp	r1, #5
    db12:	f340 809e 	ble.w	dc52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ee>
    db16:	f8d9 1004 	ldr.w	r1, [r9, #4]
    db1a:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db1c:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    db1e:	428a      	cmp	r2, r1
    db20:	f300 809a 	bgt.w	dc58 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
      return __a;
    db24:	aa23      	add	r2, sp, #140	; 0x8c
    db26:	6812      	ldr	r2, [r2, #0]
    db28:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    db2a:	f8d8 2000 	ldr.w	r2, [r8]
    db2e:	2a03      	cmp	r2, #3
    db30:	f340 8094 	ble.w	dc5c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db34:	2a05      	cmp	r2, #5
    db36:	f340 8093 	ble.w	dc60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fc>
    db3a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    db3e:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    db40:	f8d9 1000 	ldr.w	r1, [r9]
    db44:	2903      	cmp	r1, #3
    db46:	f340 808e 	ble.w	dc66 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db4a:	2905      	cmp	r1, #5
    db4c:	f340 808d 	ble.w	dc6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
    db50:	f8d9 1004 	ldr.w	r1, [r9, #4]
    db54:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    db56:	4291      	cmp	r1, r2
    db58:	f040 808a 	bne.w	dc70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db5c:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    db5e:	f8d9 1000 	ldr.w	r1, [r9]
    db62:	2903      	cmp	r1, #3
    db64:	f340 8086 	ble.w	dc74 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db68:	2905      	cmp	r1, #5
    db6a:	f340 8085 	ble.w	dc78 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x214>
    db6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
    db72:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db74:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    db76:	428a      	cmp	r2, r1
    db78:	f300 8081 	bgt.w	dc7e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
      return __a;
    db7c:	aa21      	add	r2, sp, #132	; 0x84
    db7e:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    db80:	683a      	ldr	r2, [r7, #0]
    db82:	2a01      	cmp	r2, #1
    db84:	dd7d      	ble.n	dc82 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db86:	2a05      	cmp	r2, #5
    db88:	dd7d      	ble.n	dc86 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
    db8a:	687a      	ldr	r2, [r7, #4]
    db8c:	6852      	ldr	r2, [r2, #4]
    db8e:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    db90:	683a      	ldr	r2, [r7, #0]
    db92:	2a02      	cmp	r2, #2
    db94:	dd7a      	ble.n	dc8c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db96:	2a05      	cmp	r2, #5
    db98:	dd7a      	ble.n	dc90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
    db9a:	687a      	ldr	r2, [r7, #4]
    db9c:	6892      	ldr	r2, [r2, #8]
    db9e:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    dba0:	683a      	ldr	r2, [r7, #0]
    dba2:	2a03      	cmp	r2, #3
    dba4:	dd77      	ble.n	dc96 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x232>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dba6:	2a05      	cmp	r2, #5
    dba8:	dd77      	ble.n	dc9a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x236>
    dbaa:	687a      	ldr	r2, [r7, #4]
    dbac:	68d2      	ldr	r2, [r2, #12]
    dbae:	9205      	str	r2, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    dbb0:	f8d8 2000 	ldr.w	r2, [r8]
    dbb4:	2a01      	cmp	r2, #1
    dbb6:	dd73      	ble.n	dca0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dbb8:	2a05      	cmp	r2, #5
    dbba:	dd73      	ble.n	dca4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x240>
    dbbc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    dbc0:	6852      	ldr	r2, [r2, #4]
    dbc2:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    dbc4:	f8d8 2000 	ldr.w	r2, [r8]
    dbc8:	2a02      	cmp	r2, #2
    dbca:	dd6f      	ble.n	dcac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dbcc:	2a05      	cmp	r2, #5
    dbce:	dd6f      	ble.n	dcb0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24c>
    dbd0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    dbd4:	6892      	ldr	r2, [r2, #8]
    dbd6:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    dbd8:	f8d9 2000 	ldr.w	r2, [r9]
    dbdc:	2a01      	cmp	r2, #1
    dbde:	dd6b      	ble.n	dcb8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x254>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dbe0:	2a05      	cmp	r2, #5
    dbe2:	dd6b      	ble.n	dcbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x258>
    dbe4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    dbe8:	6852      	ldr	r2, [r2, #4]
    dbea:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    dbec:	f8d9 2000 	ldr.w	r2, [r9]
    dbf0:	2a02      	cmp	r2, #2
    dbf2:	dd67      	ble.n	dcc4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x260>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dbf4:	2a05      	cmp	r2, #5
    dbf6:	dd67      	ble.n	dcc8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x264>
    dbf8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    dbfc:	6892      	ldr	r2, [r2, #8]
    dbfe:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    dc00:	9a05      	ldr	r2, [sp, #20]
    dc02:	9806      	ldr	r0, [sp, #24]
    dc04:	fb02 f200 	mul.w	r2, r2, r0
    dc08:	428a      	cmp	r2, r1
    dc0a:	d161      	bne.n	dcd0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dc0c:	681c      	ldr	r4, [r3, #0]
    dc0e:	2c05      	cmp	r4, #5
    dc10:	dd60      	ble.n	dcd4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x270>
    dc12:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    dc14:	2200      	movs	r2, #0
    int buffer_size = 1;
    dc16:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    dc18:	42a2      	cmp	r2, r4
    dc1a:	da5d      	bge.n	dcd8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x274>
      buffer_size *= dims_data[i];
    dc1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    dc20:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
    dc24:	3201      	adds	r2, #1
    dc26:	e7f7      	b.n	dc18 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    dc28:	f00a ff3c 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    dc2c:	f00a ff3a 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    dc30:	f00a ff38 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    dc34:	f00a ff36 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc38:	f00a ff34 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc3c:	687a      	ldr	r2, [r7, #4]
    dc3e:	e753      	b.n	dae8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
    TFLITE_DCHECK_LT(i, size_);
    dc40:	f00a ff30 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc44:	f8d9 1004 	ldr.w	r1, [r9, #4]
    dc48:	e759      	b.n	dafe <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dc4a:	f00a ff2b 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc4e:	f00a ff29 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc52:	f8d9 1004 	ldr.w	r1, [r9, #4]
    dc56:	e761      	b.n	db1c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb8>
	return __b;
    dc58:	aa22      	add	r2, sp, #136	; 0x88
    dc5a:	e764      	b.n	db26 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xc2>
    TFLITE_DCHECK_LT(i, size_);
    dc5c:	f00a ff22 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc60:	f8d8 2010 	ldr.w	r2, [r8, #16]
    dc64:	e76c      	b.n	db40 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xdc>
    TFLITE_DCHECK_LT(i, size_);
    dc66:	f00a ff1d 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc6a:	f8d9 1010 	ldr.w	r1, [r9, #16]
    dc6e:	e772      	b.n	db56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dc70:	f00a ff18 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc74:	f00a ff16 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc78:	f8d9 1010 	ldr.w	r1, [r9, #16]
    dc7c:	e77a      	b.n	db74 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x110>
    dc7e:	aa20      	add	r2, sp, #128	; 0x80
    dc80:	e77d      	b.n	db7e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11a>
    TFLITE_DCHECK_LT(i, size_);
    dc82:	f00a ff0f 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc86:	68ba      	ldr	r2, [r7, #8]
    dc88:	920c      	str	r2, [sp, #48]	; 0x30
    dc8a:	e781      	b.n	db90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    TFLITE_DCHECK_LT(i, size_);
    dc8c:	f00a ff0a 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc90:	68fa      	ldr	r2, [r7, #12]
    dc92:	920b      	str	r2, [sp, #44]	; 0x2c
    dc94:	e784      	b.n	dba0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
    TFLITE_DCHECK_LT(i, size_);
    dc96:	f00a ff05 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc9a:	693a      	ldr	r2, [r7, #16]
    dc9c:	9205      	str	r2, [sp, #20]
    dc9e:	e787      	b.n	dbb0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14c>
    TFLITE_DCHECK_LT(i, size_);
    dca0:	f00a ff00 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dca4:	f8d8 2008 	ldr.w	r2, [r8, #8]
    dca8:	920a      	str	r2, [sp, #40]	; 0x28
    dcaa:	e78b      	b.n	dbc4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    TFLITE_DCHECK_LT(i, size_);
    dcac:	f00a fefa 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dcb0:	f8d8 200c 	ldr.w	r2, [r8, #12]
    dcb4:	9209      	str	r2, [sp, #36]	; 0x24
    dcb6:	e78f      	b.n	dbd8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
    TFLITE_DCHECK_LT(i, size_);
    dcb8:	f00a fef4 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dcbc:	f8d9 2008 	ldr.w	r2, [r9, #8]
    dcc0:	9208      	str	r2, [sp, #32]
    dcc2:	e793      	b.n	dbec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    TFLITE_DCHECK_LT(i, size_);
    dcc4:	f00a feee 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dcc8:	f8d9 200c 	ldr.w	r2, [r9, #12]
    dccc:	9207      	str	r2, [sp, #28]
    dcce:	e797      	b.n	dc00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19c>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    dcd0:	f00a fee8 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dcd4:	3304      	adds	r3, #4
    dcd6:	e79d      	b.n	dc14 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    dcd8:	428d      	cmp	r5, r1
    dcda:	d128      	bne.n	dd2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ca>

  for (int batch = 0; batch < batches; ++batch) {
    dcdc:	f04f 0a00 	mov.w	sl, #0
    dce0:	46c3      	mov	fp, r8
    dce2:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
    dce6:	46d1      	mov	r9, sl
    dce8:	46ba      	mov	sl, r7
    dcea:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    dcec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    dcee:	4599      	cmp	r9, r3
    dcf0:	f280 81b4 	bge.w	e05c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    dcf4:	2300      	movs	r3, #0
    dcf6:	9301      	str	r3, [sp, #4]
    dcf8:	f8cd 900c 	str.w	r9, [sp, #12]
    dcfc:	46d0      	mov	r8, sl
    dcfe:	46d9      	mov	r9, fp
    dd00:	46ba      	mov	sl, r7
    dd02:	9b01      	ldr	r3, [sp, #4]
    dd04:	9a08      	ldr	r2, [sp, #32]
    dd06:	4293      	cmp	r3, r2
    dd08:	f280 81a0 	bge.w	e04c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    dd0c:	2300      	movs	r3, #0
    dd0e:	9302      	str	r3, [sp, #8]
    dd10:	464f      	mov	r7, r9
    dd12:	46c1      	mov	r9, r8
    dd14:	46d0      	mov	r8, sl
    dd16:	9b02      	ldr	r3, [sp, #8]
    dd18:	9a07      	ldr	r2, [sp, #28]
    dd1a:	4293      	cmp	r3, r2
    dd1c:	f280 818f 	bge.w	e03e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5da>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    dd20:	f04f 0b00 	mov.w	fp, #0
    dd24:	46da      	mov	sl, fp
    dd26:	46cb      	mov	fp, r9
    dd28:	46c1      	mov	r9, r8
    dd2a:	46b8      	mov	r8, r7
    dd2c:	e17a      	b.n	e024 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    dd2e:	f00a feb9 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dd32:	f00a feb7 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    dd36:	f00a feb5 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dd3a:	f00a feb3 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dd3e:	f00a feb1 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    dd42:	f00a feaf 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dd46:	f00a fead 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    dd4a:	f00a feab 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dd4e:	f00a fea9 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dd52:	f00a fea7 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    dd56:	f00a fea5 	bl	18aa4 <abort>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    dd5a:	3201      	adds	r2, #1
    dd5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    dd5e:	428a      	cmp	r2, r1
    dd60:	da5e      	bge.n	de20 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3bc>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
    dd62:	9911      	ldr	r1, [sp, #68]	; 0x44
    dd64:	980d      	ldr	r0, [sp, #52]	; 0x34
    dd66:	fb01 0602 	mla	r6, r1, r2, r0
                const int in_y =
    dd6a:	9912      	ldr	r1, [sp, #72]	; 0x48
    dd6c:	fb01 4703 	mla	r7, r1, r3, r4
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    dd70:	2e00      	cmp	r6, #0
    dd72:	dbf2      	blt.n	dd5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    dd74:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dd76:	428e      	cmp	r6, r1
    dd78:	daef      	bge.n	dd5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    dd7a:	2f00      	cmp	r7, #0
    dd7c:	dbed      	blt.n	dd5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    dd7e:	990c      	ldr	r1, [sp, #48]	; 0x30
    dd80:	428f      	cmp	r7, r1
    dd82:	daea      	bge.n	dd5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
  inline int32_t DimensionsCount() const { return size_; }
    dd84:	f8db 0000 	ldr.w	r0, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dd88:	2804      	cmp	r0, #4
    dd8a:	d1d2      	bne.n	dd32 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    dd8c:	9903      	ldr	r1, [sp, #12]
    dd8e:	2900      	cmp	r1, #0
    dd90:	dbd1      	blt.n	dd36 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    dd92:	f8db 0004 	ldr.w	r0, [fp, #4]
    dd96:	4281      	cmp	r1, r0
    dd98:	dacd      	bge.n	dd36 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dd9a:	2f00      	cmp	r7, #0
    dd9c:	dbcd      	blt.n	dd3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
    dd9e:	f8db e008 	ldr.w	lr, [fp, #8]
    dda2:	4577      	cmp	r7, lr
    dda4:	dac9      	bge.n	dd3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dda6:	2e00      	cmp	r6, #0
    dda8:	dbc9      	blt.n	dd3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
    ddaa:	f8db c00c 	ldr.w	ip, [fp, #12]
    ddae:	4566      	cmp	r6, ip
    ddb0:	dac5      	bge.n	dd3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ddb2:	f1ba 0f00 	cmp.w	sl, #0
    ddb6:	dbc4      	blt.n	dd42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
    ddb8:	f8db 0010 	ldr.w	r0, [fp, #16]
    ddbc:	4582      	cmp	sl, r0
    ddbe:	dac0      	bge.n	dd42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ddc0:	9903      	ldr	r1, [sp, #12]
    ddc2:	fb0e 7701 	mla	r7, lr, r1, r7
    ddc6:	fb07 660c 	mla	r6, r7, ip, r6
    ddca:	fb06 a000 	mla	r0, r6, r0, sl
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
                      input_shape, batch, in_y, in_x, in_channel)];
    ddce:	992e      	ldr	r1, [sp, #184]	; 0xb8
    ddd0:	560e      	ldrsb	r6, [r1, r0]
  inline int32_t DimensionsCount() const { return size_; }
    ddd2:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ddd6:	2804      	cmp	r0, #4
    ddd8:	d1b5      	bne.n	dd46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e2>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ddda:	f8d8 0004 	ldr.w	r0, [r8, #4]
    ddde:	2800      	cmp	r0, #0
    dde0:	ddb3      	ble.n	dd4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e6>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dde2:	2b00      	cmp	r3, #0
    dde4:	dbb3      	blt.n	dd4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
    dde6:	f8d8 0008 	ldr.w	r0, [r8, #8]
    ddea:	4283      	cmp	r3, r0
    ddec:	daaf      	bge.n	dd4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ddee:	2a00      	cmp	r2, #0
    ddf0:	dbaf      	blt.n	dd52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
    ddf2:	f8d8 700c 	ldr.w	r7, [r8, #12]
    ddf6:	42ba      	cmp	r2, r7
    ddf8:	daab      	bge.n	dd52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ddfa:	2d00      	cmp	r5, #0
    ddfc:	dbab      	blt.n	dd56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
    ddfe:	f8d8 0010 	ldr.w	r0, [r8, #16]
    de02:	4285      	cmp	r5, r0
    de04:	daa7      	bge.n	dd56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    de06:	fb07 2703 	mla	r7, r7, r3, r2
    de0a:	fb07 5000 	mla	r0, r7, r0, r5
                  int32_t filter_val = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    de0e:	9930      	ldr	r1, [sp, #192]	; 0xc0
    de10:	560f      	ldrsb	r7, [r1, r0]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
    de12:	9915      	ldr	r1, [sp, #84]	; 0x54
    de14:	440e      	add	r6, r1
    de16:	981d      	ldr	r0, [sp, #116]	; 0x74
    de18:	fb07 0006 	mla	r0, r7, r6, r0
    de1c:	901d      	str	r0, [sp, #116]	; 0x74
    de1e:	e79c      	b.n	dd5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    de20:	990d      	ldr	r1, [sp, #52]	; 0x34
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    de22:	3301      	adds	r3, #1
    de24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de26:	4293      	cmp	r3, r2
    de28:	da02      	bge.n	de30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3cc>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    de2a:	2200      	movs	r2, #0
    de2c:	910d      	str	r1, [sp, #52]	; 0x34
    de2e:	e795      	b.n	dd5c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
                }
              }
            }
            if (bias_data) {
    de30:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    de32:	b123      	cbz	r3, de3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3da>
              acc += bias_data[output_channel];
    de34:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    de38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    de3a:	4413      	add	r3, r2
    de3c:	931d      	str	r3, [sp, #116]	; 0x74
            }
            acc = MultiplyByQuantizedMultiplier(
    de3e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    de40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    de42:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    de46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    de48:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    de4c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    de50:	2e00      	cmp	r6, #0
    de52:	f340 80b3 	ble.w	dfbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    de56:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    de58:	409c      	lsls	r4, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    de5a:	45a4      	cmp	ip, r4
    de5c:	f000 80b0 	beq.w	dfc0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x55c>
    de60:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    de62:	17e3      	asrs	r3, r4, #31
  std::int64_t b_64(b);
    de64:	4660      	mov	r0, ip
    de66:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    de68:	fb04 f101 	mul.w	r1, r4, r1
    de6c:	fb0c 1103 	mla	r1, ip, r3, r1
    de70:	fba4 230c 	umull	r2, r3, r4, ip
    de74:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    de76:	2a00      	cmp	r2, #0
    de78:	f173 0100 	sbcs.w	r1, r3, #0
    de7c:	f2c0 80a7 	blt.w	dfce <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56a>
    de80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    de84:	1852      	adds	r2, r2, r1
    de86:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    de8a:	4611      	mov	r1, r2
    de8c:	461c      	mov	r4, r3
    de8e:	2a00      	cmp	r2, #0
    de90:	f173 0000 	sbcs.w	r0, r3, #0
    de94:	f2c0 809d 	blt.w	dfd2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56e>
    de98:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    de9a:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    de9e:	2f00      	cmp	r7, #0
    dea0:	f040 809f 	bne.w	dfe2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57e>
  assert(exponent >= 0);
    dea4:	2e00      	cmp	r6, #0
    dea6:	f2c0 809f 	blt.w	dfe8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x584>
  assert(exponent <= 31);
    deaa:	2e1f      	cmp	r6, #31
    deac:	f300 80a3 	bgt.w	dff6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x592>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    deb0:	2701      	movs	r7, #1
    deb2:	fa07 f006 	lsl.w	r0, r7, r6
    deb6:	3801      	subs	r0, #1
    deb8:	f008 f874 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    debc:	900d      	str	r0, [sp, #52]	; 0x34
  const IntegerType zero = Dup<IntegerType>(0);
    debe:	2000      	movs	r0, #0
    dec0:	f008 f870 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    dec4:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    dec6:	4638      	mov	r0, r7
    dec8:	f008 f86c 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    decc:	900e      	str	r0, [sp, #56]	; 0x38
  const IntegerType remainder = BitAnd(x, mask);
    dece:	990d      	ldr	r1, [sp, #52]	; 0x34
    ded0:	4620      	mov	r0, r4
    ded2:	f008 f868 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ded6:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ded8:	4639      	mov	r1, r7
    deda:	980d      	ldr	r0, [sp, #52]	; 0x34
    dedc:	f008 f865 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dee0:	4607      	mov	r7, r0
    dee2:	9918      	ldr	r1, [sp, #96]	; 0x60
    dee4:	4620      	mov	r0, r4
    dee6:	f008 f86c 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    deea:	990e      	ldr	r1, [sp, #56]	; 0x38
    deec:	f008 f85b 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    def0:	4601      	mov	r1, r0
    def2:	4638      	mov	r0, r7
    def4:	f008 f85b 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    def8:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    defa:	4631      	mov	r1, r6
    defc:	4620      	mov	r0, r4
    defe:	f008 f854 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    df02:	4604      	mov	r4, r0
    df04:	4639      	mov	r1, r7
    df06:	9819      	ldr	r0, [sp, #100]	; 0x64
    df08:	f008 f863 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    df0c:	990e      	ldr	r1, [sp, #56]	; 0x38
    df0e:	f008 f84a 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    df12:	4601      	mov	r1, r0
    df14:	4620      	mov	r0, r4
    df16:	f008 f84a 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    df1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    df1c:	4418      	add	r0, r3
    df1e:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    df20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    df22:	4290      	cmp	r0, r2
    df24:	db6e      	blt.n	e004 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a0>
      return __a;
    df26:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::max(acc, output_activation_min);
    df28:	681b      	ldr	r3, [r3, #0]
    df2a:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    df2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    df2e:	4293      	cmp	r3, r2
    df30:	dc6a      	bgt.n	e008 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a4>
      return __a;
    df32:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::min(acc, output_activation_max);
    df34:	6818      	ldr	r0, [r3, #0]
    df36:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    df38:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    df3c:	2b04      	cmp	r3, #4
    df3e:	d165      	bne.n	e00c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    df40:	9a03      	ldr	r2, [sp, #12]
    df42:	2a00      	cmp	r2, #0
    df44:	db64      	blt.n	e010 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
    df46:	f8d9 3004 	ldr.w	r3, [r9, #4]
    df4a:	429a      	cmp	r2, r3
    df4c:	da60      	bge.n	e010 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    df4e:	9b01      	ldr	r3, [sp, #4]
    df50:	2b00      	cmp	r3, #0
    df52:	db5f      	blt.n	e014 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
    df54:	f8d9 1008 	ldr.w	r1, [r9, #8]
    df58:	428b      	cmp	r3, r1
    df5a:	da5b      	bge.n	e014 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    df5c:	9b02      	ldr	r3, [sp, #8]
    df5e:	2b00      	cmp	r3, #0
    df60:	db5a      	blt.n	e018 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
    df62:	f8d9 200c 	ldr.w	r2, [r9, #12]
    df66:	4293      	cmp	r3, r2
    df68:	da56      	bge.n	e018 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    df6a:	2d00      	cmp	r5, #0
    df6c:	db56      	blt.n	e01c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    df6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    df72:	429d      	cmp	r5, r3
    df74:	da52      	bge.n	e01c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    df76:	9c03      	ldr	r4, [sp, #12]
    df78:	9e01      	ldr	r6, [sp, #4]
    df7a:	fb01 6104 	mla	r1, r1, r4, r6
    df7e:	9c02      	ldr	r4, [sp, #8]
    df80:	fb01 4202 	mla	r2, r1, r2, r4
    df84:	fb02 5303 	mla	r3, r2, r3, r5
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
    df88:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    df8a:	54d0      	strb	r0, [r2, r3]
          for (int m = 0; m < depth_multiplier; ++m) {
    df8c:	9b04      	ldr	r3, [sp, #16]
    df8e:	3301      	adds	r3, #1
    df90:	9304      	str	r3, [sp, #16]
    df92:	9904      	ldr	r1, [sp, #16]
    df94:	9b06      	ldr	r3, [sp, #24]
    df96:	4299      	cmp	r1, r3
    df98:	da42      	bge.n	e020 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
            const int output_channel = m + in_channel * depth_multiplier;
    df9a:	fb03 150a 	mla	r5, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
    df9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dfa0:	9a02      	ldr	r2, [sp, #8]
    dfa2:	fb03 f102 	mul.w	r1, r3, r2
    dfa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dfa8:	1ac9      	subs	r1, r1, r3
            const int in_y_origin = (out_y * stride_height) - pad_height;
    dfaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dfac:	9a01      	ldr	r2, [sp, #4]
    dfae:	fb03 f402 	mul.w	r4, r3, r2
    dfb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    dfb4:	1ae4      	subs	r4, r4, r3
            int32_t acc = 0;
    dfb6:	2300      	movs	r3, #0
    dfb8:	931d      	str	r3, [sp, #116]	; 0x74
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    dfba:	e733      	b.n	de24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3c0>
  int right_shift = shift > 0 ? 0 : -shift;
    dfbc:	4276      	negs	r6, r6
    dfbe:	e74b      	b.n	de58 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3f4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dfc0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    dfc4:	d001      	beq.n	dfca <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x566>
    dfc6:	2700      	movs	r7, #0
    dfc8:	e74b      	b.n	de62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
    dfca:	2701      	movs	r7, #1
    dfcc:	e749      	b.n	de62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dfce:	4925      	ldr	r1, [pc, #148]	; (e064 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    dfd0:	e758      	b.n	de84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x420>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dfd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dfd6:	1851      	adds	r1, r2, r1
    dfd8:	f04f 0400 	mov.w	r4, #0
    dfdc:	eb43 0404 	adc.w	r4, r3, r4
    dfe0:	e75a      	b.n	de98 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x434>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dfe2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    dfe6:	e75d      	b.n	dea4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x440>
  assert(exponent >= 0);
    dfe8:	4b1f      	ldr	r3, [pc, #124]	; (e068 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    dfea:	4a20      	ldr	r2, [pc, #128]	; (e06c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    dfec:	f44f 71b3 	mov.w	r1, #358	; 0x166
    dff0:	481f      	ldr	r0, [pc, #124]	; (e070 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    dff2:	f004 fd5b 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    dff6:	4b1f      	ldr	r3, [pc, #124]	; (e074 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x610>)
    dff8:	4a1c      	ldr	r2, [pc, #112]	; (e06c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    dffa:	f240 1167 	movw	r1, #359	; 0x167
    dffe:	481c      	ldr	r0, [pc, #112]	; (e070 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    e000:	f004 fd54 	bl	12aac <__assert_func>
	return __b;
    e004:	ab1f      	add	r3, sp, #124	; 0x7c
    e006:	e78f      	b.n	df28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c4>
	return __b;
    e008:	ab1e      	add	r3, sp, #120	; 0x78
    e00a:	e793      	b.n	df34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    e00c:	f00a fd4a 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    e010:	f00a fd48 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    e014:	f00a fd46 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    e018:	f00a fd44 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    e01c:	f00a fd42 	bl	18aa4 <abort>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    e020:	f10a 0a01 	add.w	sl, sl, #1
    e024:	9b05      	ldr	r3, [sp, #20]
    e026:	459a      	cmp	sl, r3
    e028:	da02      	bge.n	e030 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5cc>
          for (int m = 0; m < depth_multiplier; ++m) {
    e02a:	2300      	movs	r3, #0
    e02c:	9304      	str	r3, [sp, #16]
    e02e:	e7b0      	b.n	df92 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52e>
    e030:	4647      	mov	r7, r8
    e032:	46c8      	mov	r8, r9
    e034:	46d9      	mov	r9, fp
      for (int out_x = 0; out_x < output_width; ++out_x) {
    e036:	9b02      	ldr	r3, [sp, #8]
    e038:	3301      	adds	r3, #1
    e03a:	9302      	str	r3, [sp, #8]
    e03c:	e66b      	b.n	dd16 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b2>
    e03e:	46c2      	mov	sl, r8
    e040:	46c8      	mov	r8, r9
    e042:	46b9      	mov	r9, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
    e044:	9b01      	ldr	r3, [sp, #4]
    e046:	3301      	adds	r3, #1
    e048:	9301      	str	r3, [sp, #4]
    e04a:	e65a      	b.n	dd02 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
    e04c:	46cb      	mov	fp, r9
    e04e:	f8dd 900c 	ldr.w	r9, [sp, #12]
    e052:	4657      	mov	r7, sl
    e054:	46c2      	mov	sl, r8
  for (int batch = 0; batch < batches; ++batch) {
    e056:	f109 0901 	add.w	r9, r9, #1
    e05a:	e647      	b.n	dcec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
          }
        }
      }
    }
  }
}
    e05c:	b025      	add	sp, #148	; 0x94
    e05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e062:	bf00      	nop
    e064:	c0000001 	.word	0xc0000001
    e068:	0001c580 	.word	0x0001c580
    e06c:	0001c590 	.word	0x0001c590
    e070:	0001c5e8 	.word	0x0001c5e8
    e074:	0001c644 	.word	0x0001c644

0000e078 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e07c:	b0cb      	sub	sp, #300	; 0x12c
  TFLITE_DCHECK(node->user_data != nullptr);
    e07e:	f8d1 9010 	ldr.w	r9, [r1, #16]
    e082:	f1b9 0f00 	cmp.w	r9, #0
    e086:	d041      	beq.n	e10c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
    e088:	4605      	mov	r5, r0
    e08a:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e08c:	f8d1 a014 	ldr.w	sl, [r1, #20]
    e090:	f1ba 0f00 	cmp.w	sl, #0
    e094:	d03c      	beq.n	e110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
    e096:	4b86      	ldr	r3, [pc, #536]	; (e2b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>)
    e098:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e09a:	2800      	cmp	r0, #0
    e09c:	d03a      	beq.n	e114 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  TFLITE_DCHECK(node != nullptr);
    e09e:	2e00      	cmp	r6, #0
    e0a0:	d03a      	beq.n	e118 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e0a2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    e0a4:	6873      	ldr	r3, [r6, #4]
    e0a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e0aa:	6859      	ldr	r1, [r3, #4]
    e0ac:	4790      	blx	r2
    e0ae:	4604      	mov	r4, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
    e0b0:	4b80      	ldr	r3, [pc, #512]	; (e2b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    e0b2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e0b4:	2d00      	cmp	r5, #0
    e0b6:	d031      	beq.n	e11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
  TFLITE_DCHECK(node != nullptr);
    e0b8:	2e00      	cmp	r6, #0
    e0ba:	d031      	beq.n	e120 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e0bc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    e0be:	6833      	ldr	r3, [r6, #0]
    e0c0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e0c4:	6859      	ldr	r1, [r3, #4]
    e0c6:	4628      	mov	r0, r5
    e0c8:	4790      	blx	r2
    e0ca:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
    e0cc:	4b7a      	ldr	r3, [pc, #488]	; (e2b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
    e0ce:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e0d0:	b345      	cbz	r5, e124 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>
  TFLITE_DCHECK(node != nullptr);
    e0d2:	b34e      	cbz	r6, e128 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e0d4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    e0d6:	6833      	ldr	r3, [r6, #0]
    e0d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e0dc:	6859      	ldr	r1, [r3, #4]
    e0de:	4628      	mov	r0, r5
    e0e0:	4790      	blx	r2
    e0e2:	4680      	mov	r8, r0
    e0e4:	6833      	ldr	r3, [r6, #0]
    e0e6:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    e0e8:	2b03      	cmp	r3, #3
    e0ea:	d01f      	beq.n	e12c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    e0ec:	2600      	movs	r6, #0
  switch (input->type) {  // Already know in/out types are same.
    e0ee:	7a38      	ldrb	r0, [r7, #8]
    e0f0:	2801      	cmp	r0, #1
    e0f2:	d02c      	beq.n	e14e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    e0f4:	2809      	cmp	r0, #9
    e0f6:	d07f      	beq.n	e1f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e0f8:	696c      	ldr	r4, [r5, #20]
    e0fa:	f7fb f94f 	bl	939c <TfLiteTypeGetName>
    e0fe:	4602      	mov	r2, r0
    e100:	7a3b      	ldrb	r3, [r7, #8]
    e102:	496e      	ldr	r1, [pc, #440]	; (e2bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
    e104:	4628      	mov	r0, r5
    e106:	47a0      	blx	r4
      return kTfLiteError;
    e108:	2001      	movs	r0, #1
    e10a:	e072      	b.n	e1f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
  TFLITE_DCHECK(node->user_data != nullptr);
    e10c:	f00a fcca 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e110:	f00a fcc8 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    e114:	f00a fcc6 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e118:	f00a fcc4 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    e11c:	f00a fcc2 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e120:	f00a fcc0 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    e124:	f00a fcbe 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e128:	f00a fcbc 	bl	18aa4 <abort>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    e12c:	4b64      	ldr	r3, [pc, #400]	; (e2c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
    e12e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e130:	b14d      	cbz	r5, e146 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node != nullptr);
    e132:	b156      	cbz	r6, e14a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e134:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    e136:	6833      	ldr	r3, [r6, #0]
    e138:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e13c:	6859      	ldr	r1, [r3, #4]
    e13e:	4628      	mov	r0, r5
    e140:	4790      	blx	r2
    e142:	4606      	mov	r6, r0
    e144:	e7d3      	b.n	e0ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
  TFLITE_DCHECK(context != nullptr);
    e146:	f00a fcad 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e14a:	f00a fcab 	bl	18aa4 <abort>
          DepthwiseConvParamsFloat(params, data),
    e14e:	464a      	mov	r2, r9
    e150:	4651      	mov	r1, sl
    e152:	a80a      	add	r0, sp, #40	; 0x28
    e154:	f009 f857 	bl	17206 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    e158:	4639      	mov	r1, r7
    e15a:	a81a      	add	r0, sp, #104	; 0x68
    e15c:	f009 f8cd 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    e160:	4638      	mov	r0, r7
    e162:	f007 ff0b 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e166:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(filter),
    e168:	4641      	mov	r1, r8
    e16a:	a820      	add	r0, sp, #128	; 0x80
    e16c:	f009 f8c5 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    e170:	4640      	mov	r0, r8
    e172:	f007 ff03 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e176:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(bias),
    e178:	f10d 0898 	add.w	r8, sp, #152	; 0x98
    e17c:	4631      	mov	r1, r6
    e17e:	4640      	mov	r0, r8
    e180:	f009 f8bb 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    e184:	4630      	mov	r0, r6
    e186:	f007 fef9 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e18a:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    e18c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    e190:	4621      	mov	r1, r4
    e192:	4648      	mov	r0, r9
    e194:	f009 f8b1 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    e198:	4620      	mov	r0, r4
    e19a:	f007 fef5 	bl	15f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    e19e:	9004      	str	r0, [sp, #16]
    e1a0:	f8cd 900c 	str.w	r9, [sp, #12]
    e1a4:	9602      	str	r6, [sp, #8]
    e1a6:	f8cd 8004 	str.w	r8, [sp, #4]
    e1aa:	9700      	str	r7, [sp, #0]
    e1ac:	ab20      	add	r3, sp, #128	; 0x80
    e1ae:	462a      	mov	r2, r5
    e1b0:	a91a      	add	r1, sp, #104	; 0x68
    e1b2:	a80a      	add	r0, sp, #40	; 0x28
    e1b4:	f008 fda9 	bl	16d0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
    if (size_ > kMaxSmallSize) {
    e1b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    e1ba:	2b05      	cmp	r3, #5
    e1bc:	dd03      	ble.n	e1c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
      delete[] dims_pointer_;
    e1be:	982d      	ldr	r0, [sp, #180]	; 0xb4
    e1c0:	b108      	cbz	r0, e1c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    e1c2:	f00a fc5a 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e1c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e1c8:	2b05      	cmp	r3, #5
    e1ca:	dd03      	ble.n	e1d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
      delete[] dims_pointer_;
    e1cc:	9827      	ldr	r0, [sp, #156]	; 0x9c
    e1ce:	b108      	cbz	r0, e1d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    e1d0:	f00a fc53 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e1d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e1d6:	2b05      	cmp	r3, #5
    e1d8:	dd03      	ble.n	e1e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      delete[] dims_pointer_;
    e1da:	9821      	ldr	r0, [sp, #132]	; 0x84
    e1dc:	b108      	cbz	r0, e1e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    e1de:	f00a fc4c 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e1e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e1e4:	2b05      	cmp	r3, #5
    e1e6:	dd03      	ble.n	e1f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
      delete[] dims_pointer_;
    e1e8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e1ea:	b108      	cbz	r0, e1f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    e1ec:	f00a fc45 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    e1f0:	2000      	movs	r0, #0
}
    e1f2:	b04b      	add	sp, #300	; 0x12c
    e1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DepthwiseConvParamsQuantized(params, data),
    e1f8:	464a      	mov	r2, r9
    e1fa:	4651      	mov	r1, sl
    e1fc:	a80a      	add	r0, sp, #40	; 0x28
    e1fe:	f008 ffd9 	bl	171b4 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_multiplier, data.per_channel_output_shift,
    e202:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
    e206:	f8d9 b028 	ldr.w	fp, [r9, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
    e20a:	4639      	mov	r1, r7
    e20c:	a832      	add	r0, sp, #200	; 0xc8
    e20e:	f009 f874 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    e212:	4638      	mov	r0, r7
    e214:	f007 febc 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e218:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    e21a:	af38      	add	r7, sp, #224	; 0xe0
    e21c:	4641      	mov	r1, r8
    e21e:	4638      	mov	r0, r7
    e220:	f009 f86b 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    e224:	4640      	mov	r0, r8
    e226:	f007 feb3 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e22a:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    e22c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
    e230:	4631      	mov	r1, r6
    e232:	4640      	mov	r0, r8
    e234:	f009 f861 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    e238:	4630      	mov	r0, r6
    e23a:	f008 fab2 	bl	167a2 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    e23e:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    e240:	f50d 7988 	add.w	r9, sp, #272	; 0x110
    e244:	4621      	mov	r1, r4
    e246:	4648      	mov	r0, r9
    e248:	f009 f857 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    e24c:	4620      	mov	r0, r4
    e24e:	f007 fea5 	bl	15f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    e252:	9006      	str	r0, [sp, #24]
    e254:	f8cd 9014 	str.w	r9, [sp, #20]
    e258:	9604      	str	r6, [sp, #16]
    e25a:	f8cd 800c 	str.w	r8, [sp, #12]
    e25e:	9502      	str	r5, [sp, #8]
    e260:	9701      	str	r7, [sp, #4]
    e262:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e264:	9300      	str	r3, [sp, #0]
    e266:	ab32      	add	r3, sp, #200	; 0xc8
    e268:	465a      	mov	r2, fp
    e26a:	4651      	mov	r1, sl
    e26c:	a80a      	add	r0, sp, #40	; 0x28
    e26e:	f7ff fbf9 	bl	da64 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    e272:	9b44      	ldr	r3, [sp, #272]	; 0x110
    e274:	2b05      	cmp	r3, #5
    e276:	dd03      	ble.n	e280 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
      delete[] dims_pointer_;
    e278:	9845      	ldr	r0, [sp, #276]	; 0x114
    e27a:	b108      	cbz	r0, e280 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
    e27c:	f00a fbfd 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e280:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    e282:	2b05      	cmp	r3, #5
    e284:	dd03      	ble.n	e28e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
      delete[] dims_pointer_;
    e286:	983f      	ldr	r0, [sp, #252]	; 0xfc
    e288:	b108      	cbz	r0, e28e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    e28a:	f00a fbf6 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e28e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    e290:	2b05      	cmp	r3, #5
    e292:	dd03      	ble.n	e29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
      delete[] dims_pointer_;
    e294:	9839      	ldr	r0, [sp, #228]	; 0xe4
    e296:	b108      	cbz	r0, e29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
    e298:	f00a fbef 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e29c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    e29e:	2b05      	cmp	r3, #5
    e2a0:	dd03      	ble.n	e2aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
      delete[] dims_pointer_;
    e2a2:	9833      	ldr	r0, [sp, #204]	; 0xcc
    e2a4:	b108      	cbz	r0, e2aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
    e2a6:	f00a fbe8 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    e2aa:	2000      	movs	r0, #0
      break;
    e2ac:	e7a1      	b.n	e1f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
    e2ae:	bf00      	nop
    e2b0:	0001cac4 	.word	0x0001cac4
    e2b4:	0001cac0 	.word	0x0001cac0
    e2b8:	0001cac8 	.word	0x0001cac8
    e2bc:	0001c654 	.word	0x0001c654
    e2c0:	0001cabc 	.word	0x0001cabc

0000e2c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
    e2c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e2c8:	b08f      	sub	sp, #60	; 0x3c
    e2ca:	4604      	mov	r4, r0
    e2cc:	460d      	mov	r5, r1
    e2ce:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    e2d0:	6809      	ldr	r1, [r1, #0]
    e2d2:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    e2d4:	2903      	cmp	r1, #3
    e2d6:	d00a      	beq.n	e2ee <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    e2d8:	2902      	cmp	r1, #2
    e2da:	d008      	beq.n	e2ee <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    e2dc:	6945      	ldr	r5, [r0, #20]
    e2de:	4b79      	ldr	r3, [pc, #484]	; (e4c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    e2e0:	9300      	str	r3, [sp, #0]
    e2e2:	2357      	movs	r3, #87	; 0x57
    e2e4:	4a78      	ldr	r2, [pc, #480]	; (e4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e2e6:	4979      	ldr	r1, [pc, #484]	; (e4cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e2e8:	47a8      	blx	r5
    e2ea:	2001      	movs	r0, #1
    e2ec:	e011      	b.n	e312 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    e2ee:	686a      	ldr	r2, [r5, #4]
    e2f0:	6812      	ldr	r2, [r2, #0]
    e2f2:	2a01      	cmp	r2, #1
    e2f4:	d010      	beq.n	e318 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    e2f6:	6966      	ldr	r6, [r4, #20]
    e2f8:	2501      	movs	r5, #1
    e2fa:	9503      	str	r5, [sp, #12]
    e2fc:	9202      	str	r2, [sp, #8]
    e2fe:	4b74      	ldr	r3, [pc, #464]	; (e4d0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    e300:	9301      	str	r3, [sp, #4]
    e302:	4b74      	ldr	r3, [pc, #464]	; (e4d4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    e304:	9300      	str	r3, [sp, #0]
    e306:	2358      	movs	r3, #88	; 0x58
    e308:	4a6f      	ldr	r2, [pc, #444]	; (e4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e30a:	4973      	ldr	r1, [pc, #460]	; (e4d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    e30c:	4620      	mov	r0, r4
    e30e:	47b0      	blx	r6
    e310:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    e312:	b00f      	add	sp, #60	; 0x3c
    e314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    e318:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    e31c:	68b1      	ldr	r1, [r6, #8]
    e31e:	6872      	ldr	r2, [r6, #4]
    e320:	f8d6 8018 	ldr.w	r8, [r6, #24]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    e324:	9817      	ldr	r0, [sp, #92]	; 0x5c
    e326:	3801      	subs	r0, #1
    e328:	6977      	ldr	r7, [r6, #20]
    e32a:	fb00 f007 	mul.w	r0, r0, r7
    e32e:	f100 0901 	add.w	r9, r0, #1
  if (stride == 0) return 0;
    e332:	b1b2      	cbz	r2, e362 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
    e334:	f1be 0f01 	cmp.w	lr, #1
    e338:	d005      	beq.n	e346 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    e33a:	f1be 0f02 	cmp.w	lr, #2
    e33e:	d009      	beq.n	e354 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    e340:	f04f 0c00 	mov.w	ip, #0
    e344:	e00e      	b.n	e364 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - 1) / stride;
    e346:	eb02 0c03 	add.w	ip, r2, r3
    e34a:	f10c 3cff 	add.w	ip, ip, #4294967295
    e34e:	fb9c fcf2 	sdiv	ip, ip, r2
    e352:	e007      	b.n	e364 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - effective_filter_size) / stride;
    e354:	eb02 0c03 	add.w	ip, r2, r3
    e358:	ebac 0c09 	sub.w	ip, ip, r9
    e35c:	fb9c fcf2 	sdiv	ip, ip, r2
    e360:	e000      	b.n	e364 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    e362:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    e364:	9f18      	ldr	r7, [sp, #96]	; 0x60
    e366:	3f01      	subs	r7, #1
    e368:	fb07 f708 	mul.w	r7, r7, r8
    e36c:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    e36e:	b1c1      	cbz	r1, e3a2 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    e370:	f1be 0f01 	cmp.w	lr, #1
    e374:	d005      	beq.n	e382 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    e376:	f1be 0f02 	cmp.w	lr, #2
    e37a:	d00a      	beq.n	e392 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    e37c:	f04f 0e00 	mov.w	lr, #0
    e380:	e010      	b.n	e3a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    e382:	9816      	ldr	r0, [sp, #88]	; 0x58
    e384:	eb01 0e00 	add.w	lr, r1, r0
    e388:	f10e 3eff 	add.w	lr, lr, #4294967295
    e38c:	fb9e fef1 	sdiv	lr, lr, r1
    e390:	e008      	b.n	e3a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    e392:	9816      	ldr	r0, [sp, #88]	; 0x58
    e394:	eb01 0e00 	add.w	lr, r1, r0
    e398:	ebae 0e07 	sub.w	lr, lr, r7
    e39c:	fb9e fef1 	sdiv	lr, lr, r1
    e3a0:	e000      	b.n	e3a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    e3a2:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    e3a4:	f10e 3eff 	add.w	lr, lr, #4294967295
    e3a8:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    e3ac:	9f16      	ldr	r7, [sp, #88]	; 0x58
    e3ae:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    e3b0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    e3b4:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    e3b8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    e3bc:	1049      	asrs	r1, r1, #1
  padding_values.height =
    e3be:	910b      	str	r1, [sp, #44]	; 0x2c
  padding_values.height_offset = offset;
    e3c0:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    e3c2:	f10c 3cff 	add.w	ip, ip, #4294967295
    e3c6:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    e3ca:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    e3cc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    e3d0:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    e3d4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    e3d8:	1052      	asrs	r2, r2, #1
  padding_values.width =
    e3da:	920a      	str	r2, [sp, #40]	; 0x28
  padding_values.width_offset = offset;
    e3dc:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    e3de:	ab0e      	add	r3, sp, #56	; 0x38
    e3e0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    e3e4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    e3e6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    e3ea:	4b3c      	ldr	r3, [pc, #240]	; (e4dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    e3ec:	681a      	ldr	r2, [r3, #0]
    e3ee:	4629      	mov	r1, r5
    e3f0:	4620      	mov	r0, r4
    e3f2:	f007 fcfb 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e3f6:	4607      	mov	r7, r0
    e3f8:	b320      	cbz	r0, e444 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x180>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    e3fa:	4b39      	ldr	r3, [pc, #228]	; (e4e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
    e3fc:	681a      	ldr	r2, [r3, #0]
    e3fe:	4629      	mov	r1, r5
    e400:	4620      	mov	r0, r4
    e402:	f007 fcf3 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e406:	4680      	mov	r8, r0
    e408:	b330      	cbz	r0, e458 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    e40a:	4b36      	ldr	r3, [pc, #216]	; (e4e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
    e40c:	681a      	ldr	r2, [r3, #0]
    e40e:	4629      	mov	r1, r5
    e410:	4620      	mov	r0, r4
    e412:	f007 fd29 	bl	15e68 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    e416:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    e418:	4b33      	ldr	r3, [pc, #204]	; (e4e8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x224>)
    e41a:	681a      	ldr	r2, [r3, #0]
    e41c:	4629      	mov	r1, r5
    e41e:	4620      	mov	r0, r4
    e420:	f007 fd03 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e424:	4605      	mov	r5, r0
    e426:	b308      	cbz	r0, e46c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>
  if (data_type != kTfLiteFloat32) {
    e428:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    e42c:	2b01      	cmp	r3, #1
    e42e:	d127      	bne.n	e480 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>
  data->input_zero_point = input->params.zero_point;
    e430:	693b      	ldr	r3, [r7, #16]
    e432:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e434:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    e436:	f8d8 3010 	ldr.w	r3, [r8, #16]
    e43a:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    e43c:	692b      	ldr	r3, [r5, #16]
    e43e:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    e440:	2000      	movs	r0, #0
    e442:	e766      	b.n	e312 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    e444:	6965      	ldr	r5, [r4, #20]
    e446:	4b29      	ldr	r3, [pc, #164]	; (e4ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>)
    e448:	9300      	str	r3, [sp, #0]
    e44a:	2362      	movs	r3, #98	; 0x62
    e44c:	4a1e      	ldr	r2, [pc, #120]	; (e4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e44e:	491f      	ldr	r1, [pc, #124]	; (e4cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e450:	4620      	mov	r0, r4
    e452:	47a8      	blx	r5
    e454:	2001      	movs	r0, #1
    e456:	e75c      	b.n	e312 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    e458:	6965      	ldr	r5, [r4, #20]
    e45a:	4b25      	ldr	r3, [pc, #148]	; (e4f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
    e45c:	9300      	str	r3, [sp, #0]
    e45e:	2364      	movs	r3, #100	; 0x64
    e460:	4a19      	ldr	r2, [pc, #100]	; (e4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e462:	491a      	ldr	r1, [pc, #104]	; (e4cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e464:	4620      	mov	r0, r4
    e466:	47a8      	blx	r5
    e468:	2001      	movs	r0, #1
    e46a:	e752      	b.n	e312 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    e46c:	6965      	ldr	r5, [r4, #20]
    e46e:	4b21      	ldr	r3, [pc, #132]	; (e4f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
    e470:	9300      	str	r3, [sp, #0]
    e472:	2368      	movs	r3, #104	; 0x68
    e474:	4a14      	ldr	r2, [pc, #80]	; (e4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e476:	4915      	ldr	r1, [pc, #84]	; (e4cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e478:	4620      	mov	r0, r4
    e47a:	47a8      	blx	r5
    e47c:	2001      	movs	r0, #1
    e47e:	e748      	b.n	e312 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    e480:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e484:	691b      	ldr	r3, [r3, #16]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    e486:	3610      	adds	r6, #16
    e488:	9308      	str	r3, [sp, #32]
    e48a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e48e:	9307      	str	r3, [sp, #28]
    e490:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e494:	9306      	str	r3, [sp, #24]
    e496:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e498:	3330      	adds	r3, #48	; 0x30
    e49a:	9305      	str	r3, [sp, #20]
    e49c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e49e:	332c      	adds	r3, #44	; 0x2c
    e4a0:	9304      	str	r3, [sp, #16]
    e4a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e4a4:	3320      	adds	r3, #32
    e4a6:	9303      	str	r3, [sp, #12]
    e4a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e4aa:	331c      	adds	r3, #28
    e4ac:	9302      	str	r3, [sp, #8]
    e4ae:	9601      	str	r6, [sp, #4]
    e4b0:	9000      	str	r0, [sp, #0]
    e4b2:	464b      	mov	r3, r9
    e4b4:	4642      	mov	r2, r8
    e4b6:	4639      	mov	r1, r7
    e4b8:	4620      	mov	r0, r4
    e4ba:	f7fb f9e3 	bl	9884 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    e4be:	2800      	cmp	r0, #0
    e4c0:	d0b6      	beq.n	e430 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
    e4c2:	e726      	b.n	e312 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    e4c4:	0001c8c8 	.word	0x0001c8c8
    e4c8:	0001c9dc 	.word	0x0001c9dc
    e4cc:	0001be64 	.word	0x0001be64
    e4d0:	0001cf20 	.word	0x0001cf20
    e4d4:	0001c8ec 	.word	0x0001c8ec
    e4d8:	0001c124 	.word	0x0001c124
    e4dc:	0001c9d0 	.word	0x0001c9d0
    e4e0:	0001c9d8 	.word	0x0001c9d8
    e4e4:	0001c9cc 	.word	0x0001c9cc
    e4e8:	0001c9d4 	.word	0x0001c9d4
    e4ec:	0001c900 	.word	0x0001c900
    e4f0:	0001c914 	.word	0x0001c914
    e4f4:	0001c56c 	.word	0x0001c56c

0000e4f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4fc:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    e4fe:	690e      	ldr	r6, [r1, #16]
    e500:	2e00      	cmp	r6, #0
    e502:	d051      	beq.n	e5a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    e504:	4604      	mov	r4, r0
    e506:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e508:	694f      	ldr	r7, [r1, #20]
    e50a:	2f00      	cmp	r7, #0
    e50c:	d04e      	beq.n	e5ac <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb4>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
    e50e:	2200      	movs	r2, #0
    e510:	f007 fc8b 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e514:	4680      	mov	r8, r0
    e516:	2800      	cmp	r0, #0
    e518:	d04a      	beq.n	e5b0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
    e51a:	2200      	movs	r2, #0
    e51c:	4629      	mov	r1, r5
    e51e:	4620      	mov	r0, r4
    e520:	f007 fc64 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e524:	4681      	mov	r9, r0
    e526:	2800      	cmp	r0, #0
    e528:	d050      	beq.n	e5cc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xd4>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
    e52a:	2201      	movs	r2, #1
    e52c:	4629      	mov	r1, r5
    e52e:	4620      	mov	r0, r4
    e530:	f007 fc5c 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e534:	4682      	mov	sl, r0
    e536:	2800      	cmp	r0, #0
    e538:	d053      	beq.n	e5e2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xea>

  const int input_width = input->dims->data[2];
    e53a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    e53e:	68da      	ldr	r2, [r3, #12]
    e540:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    e542:	689b      	ldr	r3, [r3, #8]
    e544:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    e546:	6883      	ldr	r3, [r0, #8]
    e548:	68da      	ldr	r2, [r3, #12]
    e54a:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    e54c:	689a      	ldr	r2, [r3, #8]
    e54e:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    e550:	f8d8 2008 	ldr.w	r2, [r8, #8]
    e554:	68d1      	ldr	r1, [r2, #12]
    e556:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    e558:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    e55c:	691a      	ldr	r2, [r3, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    e55e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e560:	ea4f 0882 	mov.w	r8, r2, lsl #2
    e564:	4641      	mov	r1, r8
    e566:	4620      	mov	r0, r4
    e568:	4798      	blx	r3
  data->per_channel_output_multiplier =
    e56a:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    e56c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e56e:	4641      	mov	r1, r8
    e570:	4620      	mov	r0, r4
    e572:	4798      	blx	r3
  data->per_channel_output_shift =
    e574:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    e576:	f899 3000 	ldrb.w	r3, [r9]
    e57a:	2b09      	cmp	r3, #9
    e57c:	d16a      	bne.n	e654 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    e57e:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    e582:	f1b8 0f01 	cmp.w	r8, #1
    e586:	d037      	beq.n	e5f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x100>
    e588:	6966      	ldr	r6, [r4, #20]
    e58a:	2501      	movs	r5, #1
    e58c:	9503      	str	r5, [sp, #12]
    e58e:	f8cd 8008 	str.w	r8, [sp, #8]
    e592:	4b3a      	ldr	r3, [pc, #232]	; (e67c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    e594:	9301      	str	r3, [sp, #4]
    e596:	4b3a      	ldr	r3, [pc, #232]	; (e680 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    e598:	9300      	str	r3, [sp, #0]
    e59a:	23a1      	movs	r3, #161	; 0xa1
    e59c:	4a39      	ldr	r2, [pc, #228]	; (e684 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e59e:	493a      	ldr	r1, [pc, #232]	; (e688 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    e5a0:	4620      	mov	r0, r4
    e5a2:	47b0      	blx	r6
    e5a4:	46a8      	mov	r8, r5
    e5a6:	e00d      	b.n	e5c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TFLITE_DCHECK(node->user_data != nullptr);
    e5a8:	f00a fa7c 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e5ac:	f00a fa7a 	bl	18aa4 <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    e5b0:	6965      	ldr	r5, [r4, #20]
    e5b2:	4b36      	ldr	r3, [pc, #216]	; (e68c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    e5b4:	9300      	str	r3, [sp, #0]
    e5b6:	2387      	movs	r3, #135	; 0x87
    e5b8:	4a32      	ldr	r2, [pc, #200]	; (e684 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e5ba:	4935      	ldr	r1, [pc, #212]	; (e690 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e5bc:	4620      	mov	r0, r4
    e5be:	47a8      	blx	r5
    e5c0:	f04f 0801 	mov.w	r8, #1
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    e5c4:	4640      	mov	r0, r8
    e5c6:	b00f      	add	sp, #60	; 0x3c
    e5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    e5cc:	6965      	ldr	r5, [r4, #20]
    e5ce:	4b31      	ldr	r3, [pc, #196]	; (e694 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    e5d0:	9300      	str	r3, [sp, #0]
    e5d2:	238a      	movs	r3, #138	; 0x8a
    e5d4:	4a2b      	ldr	r2, [pc, #172]	; (e684 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e5d6:	492e      	ldr	r1, [pc, #184]	; (e690 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e5d8:	4620      	mov	r0, r4
    e5da:	47a8      	blx	r5
    e5dc:	f04f 0801 	mov.w	r8, #1
    e5e0:	e7f0      	b.n	e5c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE(context, filter != nullptr);
    e5e2:	6965      	ldr	r5, [r4, #20]
    e5e4:	4b2c      	ldr	r3, [pc, #176]	; (e698 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    e5e6:	9300      	str	r3, [sp, #0]
    e5e8:	238d      	movs	r3, #141	; 0x8d
    e5ea:	4a26      	ldr	r2, [pc, #152]	; (e684 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e5ec:	4928      	ldr	r1, [pc, #160]	; (e690 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e5ee:	4620      	mov	r0, r4
    e5f0:	47a8      	blx	r5
    e5f2:	f04f 0801 	mov.w	r8, #1
    e5f6:	e7e5      	b.n	e5c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    const auto* affine_quantization =
    e5f8:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    e5fc:	b1a2      	cbz	r2, e628 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x130>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    e5fe:	6811      	ldr	r1, [r2, #0]
    e600:	b1a1      	cbz	r1, e62c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    e602:	6850      	ldr	r0, [r2, #4]
    e604:	b1a0      	cbz	r0, e630 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    TF_LITE_ENSURE(
    e606:	680a      	ldr	r2, [r1, #0]
    e608:	2a01      	cmp	r2, #1
    e60a:	d013      	beq.n	e634 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    e60c:	f8da 1008 	ldr.w	r1, [sl, #8]
    e610:	6909      	ldr	r1, [r1, #16]
    e612:	428a      	cmp	r2, r1
    e614:	d00e      	beq.n	e634 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    e616:	6965      	ldr	r5, [r4, #20]
    e618:	4b20      	ldr	r3, [pc, #128]	; (e69c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    e61a:	9300      	str	r3, [sp, #0]
    e61c:	23aa      	movs	r3, #170	; 0xaa
    e61e:	4a19      	ldr	r2, [pc, #100]	; (e684 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e620:	491b      	ldr	r1, [pc, #108]	; (e690 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e622:	4620      	mov	r0, r4
    e624:	47a8      	blx	r5
    e626:	e7cd      	b.n	e5c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    TFLITE_DCHECK(affine_quantization != nullptr);
    e628:	f00a fa3c 	bl	18aa4 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    e62c:	f00a fa3a 	bl	18aa4 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    e630:	f00a fa38 	bl	18aa4 <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    e634:	6801      	ldr	r1, [r0, #0]
    e636:	428a      	cmp	r2, r1
    e638:	d00c      	beq.n	e654 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    e63a:	6965      	ldr	r5, [r4, #20]
    e63c:	9103      	str	r1, [sp, #12]
    e63e:	9202      	str	r2, [sp, #8]
    e640:	4b17      	ldr	r3, [pc, #92]	; (e6a0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    e642:	9301      	str	r3, [sp, #4]
    e644:	4b17      	ldr	r3, [pc, #92]	; (e6a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    e646:	9300      	str	r3, [sp, #0]
    e648:	23af      	movs	r3, #175	; 0xaf
    e64a:	4a0e      	ldr	r2, [pc, #56]	; (e684 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e64c:	490e      	ldr	r1, [pc, #56]	; (e688 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    e64e:	4620      	mov	r0, r4
    e650:	47a8      	blx	r5
    e652:	e7b7      	b.n	e5c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
    e654:	9606      	str	r6, [sp, #24]
    e656:	9305      	str	r3, [sp, #20]
    e658:	f8cd b010 	str.w	fp, [sp, #16]
    e65c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e65e:	9303      	str	r3, [sp, #12]
    e660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e662:	9302      	str	r3, [sp, #8]
    e664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e666:	9301      	str	r3, [sp, #4]
    e668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e66a:	9300      	str	r3, [sp, #0]
    e66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e66e:	463a      	mov	r2, r7
    e670:	4629      	mov	r1, r5
    e672:	4620      	mov	r0, r4
    e674:	f7ff fe26 	bl	e2c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    e678:	4680      	mov	r8, r0
    e67a:	e7a3      	b.n	e5c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    e67c:	0001c140 	.word	0x0001c140
    e680:	0001c178 	.word	0x0001c178
    e684:	0001c9dc 	.word	0x0001c9dc
    e688:	0001c124 	.word	0x0001c124
    e68c:	0001c56c 	.word	0x0001c56c
    e690:	0001be64 	.word	0x0001be64
    e694:	0001c900 	.word	0x0001c900
    e698:	0001c914 	.word	0x0001c914
    e69c:	0001ca38 	.word	0x0001ca38
    e6a0:	0001c9a4 	.word	0x0001c9a4
    e6a4:	0001c22c 	.word	0x0001c22c

0000e6a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    e6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e6ac:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    e6ae:	690d      	ldr	r5, [r1, #16]
    e6b0:	b37d      	cbz	r5, e712 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    e6b2:	4607      	mov	r7, r0
    e6b4:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e6b6:	694e      	ldr	r6, [r1, #20]
    e6b8:	b36e      	cbz	r6, e716 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    e6ba:	4b38      	ldr	r3, [pc, #224]	; (e79c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    e6bc:	681a      	ldr	r2, [r3, #0]
    e6be:	f007 fb95 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e6c2:	4681      	mov	r9, r0
    e6c4:	b348      	cbz	r0, e71a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x72>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
    e6c6:	4b36      	ldr	r3, [pc, #216]	; (e7a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    e6c8:	681a      	ldr	r2, [r3, #0]
    e6ca:	4621      	mov	r1, r4
    e6cc:	4638      	mov	r0, r7
    e6ce:	f007 fb8d 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e6d2:	4682      	mov	sl, r0
    e6d4:	b368      	cbz	r0, e732 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    e6d6:	4b33      	ldr	r3, [pc, #204]	; (e7a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    e6d8:	681a      	ldr	r2, [r3, #0]
    e6da:	4621      	mov	r1, r4
    e6dc:	4638      	mov	r0, r7
    e6de:	f007 fbc3 	bl	15e68 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    e6e2:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    e6e4:	4b30      	ldr	r3, [pc, #192]	; (e7a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    e6e6:	681a      	ldr	r2, [r3, #0]
    e6e8:	4621      	mov	r1, r4
    e6ea:	4638      	mov	r0, r7
    e6ec:	f007 fb9d 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e6f0:	4604      	mov	r4, r0
    e6f2:	b340      	cbz	r0, e746 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    e6f4:	f899 0000 	ldrb.w	r0, [r9]
    e6f8:	7823      	ldrb	r3, [r4, #0]
    e6fa:	4298      	cmp	r0, r3
    e6fc:	d12d      	bne.n	e75a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    e6fe:	f89a 3000 	ldrb.w	r3, [sl]
    e702:	4298      	cmp	r0, r3
    e704:	d03d      	beq.n	e782 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    e706:	697b      	ldr	r3, [r7, #20]
    e708:	4928      	ldr	r1, [pc, #160]	; (e7ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    e70a:	4638      	mov	r0, r7
    e70c:	4798      	blx	r3
    e70e:	2001      	movs	r0, #1
    e710:	e00c      	b.n	e72c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TFLITE_DCHECK(node->user_data != nullptr);
    e712:	f00a f9c7 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e716:	f00a f9c5 	bl	18aa4 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    e71a:	697c      	ldr	r4, [r7, #20]
    e71c:	4b24      	ldr	r3, [pc, #144]	; (e7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    e71e:	9300      	str	r3, [sp, #0]
    e720:	232f      	movs	r3, #47	; 0x2f
    e722:	4a24      	ldr	r2, [pc, #144]	; (e7b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e724:	4924      	ldr	r1, [pc, #144]	; (e7b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e726:	4638      	mov	r0, r7
    e728:	47a0      	blx	r4
    e72a:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    e72c:	b004      	add	sp, #16
    e72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, filter != nullptr);
    e732:	697c      	ldr	r4, [r7, #20]
    e734:	4b21      	ldr	r3, [pc, #132]	; (e7bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    e736:	9300      	str	r3, [sp, #0]
    e738:	2332      	movs	r3, #50	; 0x32
    e73a:	4a1e      	ldr	r2, [pc, #120]	; (e7b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e73c:	491e      	ldr	r1, [pc, #120]	; (e7b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e73e:	4638      	mov	r0, r7
    e740:	47a0      	blx	r4
    e742:	2001      	movs	r0, #1
    e744:	e7f2      	b.n	e72c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output != nullptr);
    e746:	697c      	ldr	r4, [r7, #20]
    e748:	4b1d      	ldr	r3, [pc, #116]	; (e7c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    e74a:	9300      	str	r3, [sp, #0]
    e74c:	2336      	movs	r3, #54	; 0x36
    e74e:	4a19      	ldr	r2, [pc, #100]	; (e7b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e750:	4919      	ldr	r1, [pc, #100]	; (e7b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e752:	4638      	mov	r0, r7
    e754:	47a0      	blx	r4
    e756:	2001      	movs	r0, #1
    e758:	e7e8      	b.n	e72c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    e75a:	697e      	ldr	r6, [r7, #20]
    e75c:	f7fa fe1e 	bl	939c <TfLiteTypeGetName>
    e760:	4605      	mov	r5, r0
    e762:	7820      	ldrb	r0, [r4, #0]
    e764:	f7fa fe1a 	bl	939c <TfLiteTypeGetName>
    e768:	9003      	str	r0, [sp, #12]
    e76a:	9502      	str	r5, [sp, #8]
    e76c:	4b15      	ldr	r3, [pc, #84]	; (e7c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
    e76e:	9301      	str	r3, [sp, #4]
    e770:	4b15      	ldr	r3, [pc, #84]	; (e7c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    e772:	9300      	str	r3, [sp, #0]
    e774:	2338      	movs	r3, #56	; 0x38
    e776:	4a0f      	ldr	r2, [pc, #60]	; (e7b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e778:	4914      	ldr	r1, [pc, #80]	; (e7cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    e77a:	4638      	mov	r0, r7
    e77c:	47b0      	blx	r6
    e77e:	2001      	movs	r0, #1
    e780:	e7d4      	b.n	e72c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    e782:	7831      	ldrb	r1, [r6, #0]
    e784:	9503      	str	r5, [sp, #12]
    e786:	9402      	str	r4, [sp, #8]
    e788:	f8cd 8004 	str.w	r8, [sp, #4]
    e78c:	f8cd a000 	str.w	sl, [sp]
    e790:	464b      	mov	r3, r9
    e792:	4602      	mov	r2, r0
    e794:	4638      	mov	r0, r7
    e796:	f008 fd6e 	bl	17276 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    e79a:	e7c7      	b.n	e72c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    e79c:	0001cbcc 	.word	0x0001cbcc
    e7a0:	0001cbd4 	.word	0x0001cbd4
    e7a4:	0001cbc8 	.word	0x0001cbc8
    e7a8:	0001cbd0 	.word	0x0001cbd0
    e7ac:	0001cb40 	.word	0x0001cb40
    e7b0:	0001c900 	.word	0x0001c900
    e7b4:	0001cacc 	.word	0x0001cacc
    e7b8:	0001be64 	.word	0x0001be64
    e7bc:	0001c914 	.word	0x0001c914
    e7c0:	0001c56c 	.word	0x0001c56c
    e7c4:	0001c7dc 	.word	0x0001c7dc
    e7c8:	0001c7ec 	.word	0x0001c7ec
    e7cc:	0001cb24 	.word	0x0001cb24

0000e7d0 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    e7d0:	b470      	push	{r4, r5, r6}
    e7d2:	4606      	mov	r6, r0
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    e7d4:	4604      	mov	r4, r0
    e7d6:	4d05      	ldr	r5, [pc, #20]	; (e7ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
    e7d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e7da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e7dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    e7e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    e7e4:	4630      	mov	r0, r6
    e7e6:	bc70      	pop	{r4, r5, r6}
    e7e8:	4770      	bx	lr
    e7ea:	bf00      	nop
    e7ec:	00019aa0 	.word	0x00019aa0

0000e7f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7f4:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e7f6:	f8d1 a014 	ldr.w	sl, [r1, #20]
    e7fa:	f1ba 0f00 	cmp.w	sl, #0
    e7fe:	d04c      	beq.n	e89a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    e800:	4604      	mov	r4, r0
    e802:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    e804:	4ba5      	ldr	r3, [pc, #660]	; (ea9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    e806:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e808:	2800      	cmp	r0, #0
    e80a:	d048      	beq.n	e89e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node != nullptr);
    e80c:	2e00      	cmp	r6, #0
    e80e:	d048      	beq.n	e8a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e810:	6d42      	ldr	r2, [r0, #84]	; 0x54
    e812:	6833      	ldr	r3, [r6, #0]
    e814:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e818:	6859      	ldr	r1, [r3, #4]
    e81a:	4790      	blx	r2
    e81c:	4680      	mov	r8, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    e81e:	4ba0      	ldr	r3, [pc, #640]	; (eaa0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    e820:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e822:	2c00      	cmp	r4, #0
    e824:	d03f      	beq.n	e8a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  TFLITE_DCHECK(node != nullptr);
    e826:	2e00      	cmp	r6, #0
    e828:	d03f      	beq.n	e8aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e82a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e82c:	6833      	ldr	r3, [r6, #0]
    e82e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e832:	6859      	ldr	r1, [r3, #4]
    e834:	4620      	mov	r0, r4
    e836:	4790      	blx	r2
    e838:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    e83a:	4b9a      	ldr	r3, [pc, #616]	; (eaa4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    e83c:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e83e:	2c00      	cmp	r4, #0
    e840:	d035      	beq.n	e8ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node != nullptr);
    e842:	2e00      	cmp	r6, #0
    e844:	d035      	beq.n	e8b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e846:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e848:	6833      	ldr	r3, [r6, #0]
    e84a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e84e:	6859      	ldr	r1, [r3, #4]
    e850:	4620      	mov	r0, r4
    e852:	4790      	blx	r2
    e854:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    e856:	4b94      	ldr	r3, [pc, #592]	; (eaa8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    e858:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e85a:	b364      	cbz	r4, e8b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node != nullptr);
    e85c:	b36e      	cbz	r6, e8ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e85e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e860:	6873      	ldr	r3, [r6, #4]
    e862:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e866:	6859      	ldr	r1, [r3, #4]
    e868:	4620      	mov	r0, r4
    e86a:	4790      	blx	r2
    e86c:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    e86e:	6931      	ldr	r1, [r6, #16]
    e870:	b329      	cbz	r1, e8be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  switch (input->type) {
    e872:	f898 0008 	ldrb.w	r0, [r8, #8]
    e876:	2801      	cmp	r0, #1
    e878:	d023      	beq.n	e8c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    e87a:	2809      	cmp	r0, #9
    e87c:	f000 8136 	beq.w	eaec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e880:	6965      	ldr	r5, [r4, #20]
    e882:	f7fa fd8b 	bl	939c <TfLiteTypeGetName>
    e886:	4602      	mov	r2, r0
    e888:	f898 3008 	ldrb.w	r3, [r8, #8]
    e88c:	4987      	ldr	r1, [pc, #540]	; (eaac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    e88e:	4620      	mov	r0, r4
    e890:	47a8      	blx	r5
      return kTfLiteError;
    e892:	2001      	movs	r0, #1
}
    e894:	b04f      	add	sp, #316	; 0x13c
    e896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e89a:	f00a f903 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    e89e:	f00a f901 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e8a2:	f00a f8ff 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    e8a6:	f00a f8fd 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e8aa:	f00a f8fb 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    e8ae:	f00a f8f9 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e8b2:	f00a f8f7 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    e8b6:	f00a f8f5 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e8ba:	f00a f8f3 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    e8be:	f00a f8f1 	bl	18aa4 <abort>
          FullyConnectedParamsFloat(params->activation),
    e8c2:	f89a 1000 	ldrb.w	r1, [sl]
    e8c6:	a812      	add	r0, sp, #72	; 0x48
    e8c8:	f008 fd0c 	bl	172e4 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    e8cc:	4641      	mov	r1, r8
    e8ce:	a81c      	add	r0, sp, #112	; 0x70
    e8d0:	f008 fd13 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e8d4:	4640      	mov	r0, r8
    e8d6:	f007 fb51 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e8da:	9001      	str	r0, [sp, #4]
          tflite::micro::GetTensorShape(filter),
    e8dc:	4649      	mov	r1, r9
    e8de:	a822      	add	r0, sp, #136	; 0x88
    e8e0:	f008 fd0b 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e8e4:	4648      	mov	r0, r9
    e8e6:	f007 fb49 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e8ea:	9002      	str	r0, [sp, #8]
          tflite::micro::GetTensorShape(bias),
    e8ec:	4639      	mov	r1, r7
    e8ee:	a828      	add	r0, sp, #160	; 0xa0
    e8f0:	f008 fd03 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e8f4:	4638      	mov	r0, r7
    e8f6:	f007 fb41 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e8fa:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    e8fc:	4629      	mov	r1, r5
    e8fe:	a82e      	add	r0, sp, #184	; 0xb8
    e900:	f008 fcfb 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e904:	4628      	mov	r0, r5
    e906:	f007 fb3f 	bl	15f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    e90a:	9003      	str	r0, [sp, #12]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  const float output_activation_min = params.float_activation_min;
    e90c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e90e:	9304      	str	r3, [sp, #16]
  const float output_activation_max = params.float_activation_max;
    e910:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  inline int32_t DimensionsCount() const { return size_; }
    e914:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    e916:	9922      	ldr	r1, [sp, #136]	; 0x88
    e918:	461c      	mov	r4, r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e91a:	1e5a      	subs	r2, r3, #1
    e91c:	d405      	bmi.n	e92a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    e91e:	429a      	cmp	r2, r3
    e920:	da03      	bge.n	e92a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e922:	2b05      	cmp	r3, #5
    e924:	dd03      	ble.n	e92e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
    e926:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    e928:	e002      	b.n	e930 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e92a:	f00a f8bb 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e92e:	ad2f      	add	r5, sp, #188	; 0xbc
  for (int i = 0; i < dims_count; ++i) {
    e930:	2300      	movs	r3, #0
  int flat_size = 1;
    e932:	f04f 0801 	mov.w	r8, #1
    e936:	e004      	b.n	e942 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e938:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    e93c:	fb00 f808 	mul.w	r8, r0, r8
  for (int i = 0; i < dims_count; ++i) {
    e940:	3301      	adds	r3, #1
    e942:	429c      	cmp	r4, r3
    e944:	dd03      	ble.n	e94e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e946:	429a      	cmp	r2, r3
    e948:	d1f6      	bne.n	e938 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
    e94a:	2001      	movs	r0, #1
    e94c:	e7f6      	b.n	e93c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TFLITE_DCHECK_GE(i, 0);
    e94e:	1e8b      	subs	r3, r1, #2
    e950:	d433      	bmi.n	e9ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TFLITE_DCHECK_LT(i, size_);
    e952:	9822      	ldr	r0, [sp, #136]	; 0x88
    e954:	4283      	cmp	r3, r0
    e956:	da32      	bge.n	e9be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e958:	2805      	cmp	r0, #5
    e95a:	dd32      	ble.n	e9c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    e95c:	9823      	ldr	r0, [sp, #140]	; 0x8c
    e95e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e962:	2a00      	cmp	r2, #0
    e964:	db33      	blt.n	e9ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    e966:	982e      	ldr	r0, [sp, #184]	; 0xb8
    e968:	4282      	cmp	r2, r0
    e96a:	da32      	bge.n	e9d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e96c:	2805      	cmp	r0, #5
    e96e:	dd32      	ble.n	e9d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    e970:	982f      	ldr	r0, [sp, #188]	; 0xbc
    e972:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e976:	4298      	cmp	r0, r3
    e978:	d133      	bne.n	e9e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e97a:	934d      	str	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_GE(i, 0);
    e97c:	2a00      	cmp	r2, #0
    e97e:	db32      	blt.n	e9e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
    e980:	982e      	ldr	r0, [sp, #184]	; 0xb8
    e982:	4282      	cmp	r2, r0
    e984:	da31      	bge.n	e9ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e986:	2805      	cmp	r0, #5
    e988:	dd31      	ble.n	e9ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    e98a:	982f      	ldr	r0, [sp, #188]	; 0xbc
    e98c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e990:	924c      	str	r2, [sp, #304]	; 0x130
      if (__b < __a)
    e992:	4293      	cmp	r3, r2
    e994:	dc31      	bgt.n	e9fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
      return __a;
    e996:	ab4d      	add	r3, sp, #308	; 0x134
    e998:	f8d3 b000 	ldr.w	fp, [r3]
    TFLITE_DCHECK_GE(i, 0);
    e99c:	3901      	subs	r1, #1
    e99e:	d42e      	bmi.n	e9fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    TFLITE_DCHECK_LT(i, size_);
    e9a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e9a2:	4299      	cmp	r1, r3
    e9a4:	da2d      	bge.n	ea02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9a6:	2b05      	cmp	r3, #5
    e9a8:	dd2d      	ble.n	ea06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    e9aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e9ac:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    e9b0:	2700      	movs	r7, #0
    e9b2:	f8cd 8014 	str.w	r8, [sp, #20]
    e9b6:	46b0      	mov	r8, r6
    e9b8:	e06a      	b.n	ea90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    TFLITE_DCHECK_GE(i, 0);
    e9ba:	f00a f873 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e9be:	f00a f871 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9c2:	a84e      	add	r0, sp, #312	; 0x138
    e9c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    e9c8:	f853 3cac 	ldr.w	r3, [r3, #-172]
    e9cc:	e7c9      	b.n	e962 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_GE(i, 0);
    e9ce:	f00a f869 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e9d2:	f00a f867 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9d6:	a84e      	add	r0, sp, #312	; 0x138
    e9d8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    e9dc:	f850 0c7c 	ldr.w	r0, [r0, #-124]
    e9e0:	e7c9      	b.n	e976 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x186>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e9e2:	f00a f85f 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    e9e6:	f00a f85d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e9ea:	f00a f85b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9ee:	a84e      	add	r0, sp, #312	; 0x138
    e9f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    e9f4:	f852 2c7c 	ldr.w	r2, [r2, #-124]
    e9f8:	e7ca      	b.n	e990 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
	return __b;
    e9fa:	ab4c      	add	r3, sp, #304	; 0x130
    e9fc:	e7cc      	b.n	e998 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    TFLITE_DCHECK_GE(i, 0);
    e9fe:	f00a f851 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ea02:	f00a f84f 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ea06:	ab4e      	add	r3, sp, #312	; 0x138
    ea08:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    ea0c:	f851 9cac 	ldr.w	r9, [r1, #-172]
    ea10:	e7ce      	b.n	e9b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    ea12:	fb09 6307 	mla	r3, r9, r7, r6
                 weights_data[out_c * accum_depth + d];
    ea16:	fb09 6204 	mla	r2, r9, r4, r6
        total += input_data[b * accum_depth + d] *
    ea1a:	9902      	ldr	r1, [sp, #8]
    ea1c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    ea20:	9a01      	ldr	r2, [sp, #4]
    ea22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    ea26:	f7f2 f973 	bl	d10 <__aeabi_fmul>
    ea2a:	4601      	mov	r1, r0
    ea2c:	4628      	mov	r0, r5
    ea2e:	f7f2 f867 	bl	b00 <__addsf3>
    ea32:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    ea34:	3601      	adds	r6, #1
    ea36:	454e      	cmp	r6, r9
    ea38:	dbeb      	blt.n	ea12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
      }
      float bias_value = 0.0f;
      if (bias_data) {
    ea3a:	f1b8 0f00 	cmp.w	r8, #0
    ea3e:	d020      	beq.n	ea82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
        bias_value = bias_data[out_c];
    ea40:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    ea44:	4628      	mov	r0, r5
    ea46:	f7f2 f85b 	bl	b00 <__addsf3>
    ea4a:	4601      	mov	r1, r0
    ea4c:	fb0b 4607 	mla	r6, fp, r7, r4
    ea50:	9011      	str	r0, [sp, #68]	; 0x44
    ea52:	9b04      	ldr	r3, [sp, #16]
    ea54:	9310      	str	r3, [sp, #64]	; 0x40
    ea56:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      if (__a < __b)
    ea5a:	4618      	mov	r0, r3
    ea5c:	f7f2 fb14 	bl	1088 <__aeabi_fcmpgt>
    ea60:	b988      	cbnz	r0, ea86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
      return __a;
    ea62:	ad11      	add	r5, sp, #68	; 0x44
      if (__b < __a)
    ea64:	6829      	ldr	r1, [r5, #0]
    ea66:	4650      	mov	r0, sl
    ea68:	f7f2 faf0 	bl	104c <__aeabi_fcmplt>
    ea6c:	b968      	cbnz	r0, ea8a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29a>
  return min(max(x, output_activation_min), output_activation_max);
    ea6e:	682b      	ldr	r3, [r5, #0]
    ea70:	9a03      	ldr	r2, [sp, #12]
    ea72:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ea76:	3401      	adds	r4, #1
    ea78:	455c      	cmp	r4, fp
    ea7a:	da08      	bge.n	ea8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      for (int d = 0; d < accum_depth; ++d) {
    ea7c:	2600      	movs	r6, #0
      float total = 0.f;
    ea7e:	2500      	movs	r5, #0
    ea80:	e7d9      	b.n	ea36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
      float bias_value = 0.0f;
    ea82:	2100      	movs	r1, #0
    ea84:	e7de      	b.n	ea44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
	return __b;
    ea86:	ad10      	add	r5, sp, #64	; 0x40
    ea88:	e7ec      	b.n	ea64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
	return __b;
    ea8a:	ad0f      	add	r5, sp, #60	; 0x3c
    ea8c:	e7ef      	b.n	ea6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    ea8e:	3701      	adds	r7, #1
    ea90:	9b05      	ldr	r3, [sp, #20]
    ea92:	429f      	cmp	r7, r3
    ea94:	da0c      	bge.n	eab0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ea96:	2400      	movs	r4, #0
    ea98:	e7ee      	b.n	ea78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>
    ea9a:	bf00      	nop
    ea9c:	0001cbcc 	.word	0x0001cbcc
    eaa0:	0001cbd4 	.word	0x0001cbd4
    eaa4:	0001cbc8 	.word	0x0001cbc8
    eaa8:	0001cbd0 	.word	0x0001cbd0
    eaac:	0001c654 	.word	0x0001c654
    if (size_ > kMaxSmallSize) {
    eab0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    eab2:	2b05      	cmp	r3, #5
    eab4:	dd03      	ble.n	eabe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      delete[] dims_pointer_;
    eab6:	982f      	ldr	r0, [sp, #188]	; 0xbc
    eab8:	b108      	cbz	r0, eabe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    eaba:	f009 ffde 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eabe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    eac0:	2b05      	cmp	r3, #5
    eac2:	dd03      	ble.n	eacc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
      delete[] dims_pointer_;
    eac4:	9829      	ldr	r0, [sp, #164]	; 0xa4
    eac6:	b108      	cbz	r0, eacc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    eac8:	f009 ffd7 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eacc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eace:	2b05      	cmp	r3, #5
    ead0:	dd03      	ble.n	eada <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
      delete[] dims_pointer_;
    ead2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    ead4:	b108      	cbz	r0, eada <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    ead6:	f009 ffd0 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eada:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    eadc:	2b05      	cmp	r3, #5
    eade:	dd03      	ble.n	eae8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
      delete[] dims_pointer_;
    eae0:	981d      	ldr	r0, [sp, #116]	; 0x74
    eae2:	b108      	cbz	r0, eae8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    eae4:	f009 ffc9 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    eae8:	2000      	movs	r0, #0
      break;
    eaea:	e6d3      	b.n	e894 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
          FullyConnectedParamsQuantized(data),
    eaec:	a812      	add	r0, sp, #72	; 0x48
    eaee:	f008 fbb1 	bl	17254 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    eaf2:	4641      	mov	r1, r8
    eaf4:	a834      	add	r0, sp, #208	; 0xd0
    eaf6:	f008 fc00 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    eafa:	4640      	mov	r0, r8
    eafc:	f007 fa48 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    eb00:	9005      	str	r0, [sp, #20]
          tflite::micro::GetTensorShape(filter),
    eb02:	4649      	mov	r1, r9
    eb04:	a83a      	add	r0, sp, #232	; 0xe8
    eb06:	f008 fbf8 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    eb0a:	4648      	mov	r0, r9
    eb0c:	f007 fa40 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    eb10:	9006      	str	r0, [sp, #24]
          tflite::micro::GetTensorShape(bias),
    eb12:	4639      	mov	r1, r7
    eb14:	a840      	add	r0, sp, #256	; 0x100
    eb16:	f008 fbf0 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    eb1a:	4638      	mov	r0, r7
    eb1c:	f007 fe41 	bl	167a2 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    eb20:	9007      	str	r0, [sp, #28]
          tflite::micro::GetTensorShape(output),
    eb22:	4629      	mov	r1, r5
    eb24:	a846      	add	r0, sp, #280	; 0x118
    eb26:	f008 fbe8 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    eb2a:	4628      	mov	r0, r5
    eb2c:	f007 fa36 	bl	15f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    eb30:	9008      	str	r0, [sp, #32]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    eb32:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb34:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t filter_offset = params.weights_offset;
    eb36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eb38:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_offset = params.output_offset;
    eb3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eb3c:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32_t output_multiplier = params.output_multiplier;
    eb3e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
  const int output_shift = params.output_shift;
    eb42:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    eb46:	9917      	ldr	r1, [sp, #92]	; 0x5c
    eb48:	910f      	str	r1, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
    eb4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    eb4c:	9210      	str	r2, [sp, #64]	; 0x40
  inline int32_t DimensionsCount() const { return size_; }
    eb4e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    eb50:	2b01      	cmp	r3, #1
    eb52:	dd33      	ble.n	ebbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    eb54:	9846      	ldr	r0, [sp, #280]	; 0x118
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    eb56:	2802      	cmp	r0, #2
    eb58:	d132      	bne.n	ebc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    eb5a:	4291      	cmp	r1, r2
    eb5c:	dc32      	bgt.n	ebc4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    TFLITE_DCHECK_LT(i, size_);
    eb5e:	9a46      	ldr	r2, [sp, #280]	; 0x118
    eb60:	2a00      	cmp	r2, #0
    eb62:	dd31      	ble.n	ebc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    eb64:	2a05      	cmp	r2, #5
    eb66:	dd31      	ble.n	ebcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    eb68:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    eb6a:	6812      	ldr	r2, [r2, #0]
    eb6c:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    eb6e:	9a46      	ldr	r2, [sp, #280]	; 0x118
    eb70:	2a01      	cmp	r2, #1
    eb72:	dd2e      	ble.n	ebd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    eb74:	2a05      	cmp	r2, #5
    eb76:	dd2e      	ble.n	ebd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    eb78:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    eb7a:	6852      	ldr	r2, [r2, #4]
    eb7c:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_GE(i, 0);
    eb7e:	1e9a      	subs	r2, r3, #2
    eb80:	d42c      	bmi.n	ebdc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    TFLITE_DCHECK_LT(i, size_);
    eb82:	993a      	ldr	r1, [sp, #232]	; 0xe8
    eb84:	428a      	cmp	r2, r1
    eb86:	da2b      	bge.n	ebe0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    eb88:	2905      	cmp	r1, #5
    eb8a:	dd2b      	ble.n	ebe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    eb8c:	993b      	ldr	r1, [sp, #236]	; 0xec
    eb8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    eb92:	9901      	ldr	r1, [sp, #4]
    eb94:	428a      	cmp	r2, r1
    eb96:	db2b      	blt.n	ebf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x400>
    TFLITE_DCHECK_GE(i, 0);
    eb98:	3b01      	subs	r3, #1
    eb9a:	d42b      	bmi.n	ebf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
    TFLITE_DCHECK_LT(i, size_);
    eb9c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    eb9e:	4293      	cmp	r3, r2
    eba0:	da2a      	bge.n	ebf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x408>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    eba2:	2a05      	cmp	r2, #5
    eba4:	dd2a      	ble.n	ebfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
    eba6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    eba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebac:	930d      	str	r3, [sp, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    ebae:	f04f 0a00 	mov.w	sl, #0
    ebb2:	4653      	mov	r3, sl
    ebb4:	46ca      	mov	sl, r9
    ebb6:	46d9      	mov	r9, fp
    ebb8:	469b      	mov	fp, r3
    ebba:	e0ee      	b.n	ed9a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    ebbc:	f009 ff72 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    ebc0:	f009 ff70 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ebc4:	f009 ff6e 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ebc8:	f009 ff6c 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ebcc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    ebce:	920c      	str	r2, [sp, #48]	; 0x30
    ebd0:	e7cd      	b.n	eb6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    ebd2:	f009 ff67 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ebd6:	9a48      	ldr	r2, [sp, #288]	; 0x120
    ebd8:	9201      	str	r2, [sp, #4]
    ebda:	e7d0      	b.n	eb7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
    TFLITE_DCHECK_GE(i, 0);
    ebdc:	f009 ff62 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ebe0:	f009 ff60 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ebe4:	a94e      	add	r1, sp, #312	; 0x138
    ebe6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    ebea:	f852 2c4c 	ldr.w	r2, [r2, #-76]
    ebee:	e7d0      	b.n	eb92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    ebf0:	f009 ff58 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    ebf4:	f009 ff56 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ebf8:	f009 ff54 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ebfc:	aa4e      	add	r2, sp, #312	; 0x138
    ebfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ec02:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    ec06:	930d      	str	r3, [sp, #52]	; 0x34
    ec08:	e7d1      	b.n	ebae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
      }
      if (bias_data) {
    ec0a:	9b07      	ldr	r3, [sp, #28]
    ec0c:	b123      	cbz	r3, ec18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x428>
        acc += bias_data[out_c];
    ec0e:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    ec12:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec14:	4413      	add	r3, r2
    ec16:	9311      	str	r3, [sp, #68]	; 0x44
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
    ec18:	9a11      	ldr	r2, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    ec1a:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ec1e:	f1b9 0f00 	cmp.w	r9, #0
    ec22:	f340 808f 	ble.w	ed44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x554>
    ec26:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ec28:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ec2a:	4592      	cmp	sl, r2
    ec2c:	f000 808d 	beq.w	ed4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55a>
    ec30:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    ec32:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    ec34:	4653      	mov	r3, sl
    ec36:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    ec38:	fb02 f304 	mul.w	r3, r2, r4
    ec3c:	fb0a 3101 	mla	r1, sl, r1, r3
    ec40:	fba2 230a 	umull	r2, r3, r2, sl
    ec44:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ec46:	2a00      	cmp	r2, #0
    ec48:	f173 0100 	sbcs.w	r1, r3, #0
    ec4c:	f2c0 8084 	blt.w	ed58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
    ec50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ec54:	1852      	adds	r2, r2, r1
    ec56:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ec5a:	4611      	mov	r1, r2
    ec5c:	461c      	mov	r4, r3
    ec5e:	2a00      	cmp	r2, #0
    ec60:	f173 0000 	sbcs.w	r0, r3, #0
    ec64:	db7a      	blt.n	ed5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56c>
    ec66:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ec68:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ec6c:	2f00      	cmp	r7, #0
    ec6e:	d17d      	bne.n	ed6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57c>
  assert(exponent >= 0);
    ec70:	2e00      	cmp	r6, #0
    ec72:	db7e      	blt.n	ed72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x582>
  assert(exponent <= 31);
    ec74:	2e1f      	cmp	r6, #31
    ec76:	f300 8083 	bgt.w	ed80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x590>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ec7a:	2701      	movs	r7, #1
    ec7c:	fa07 f006 	lsl.w	r0, r7, r6
    ec80:	3801      	subs	r0, #1
    ec82:	f007 f98f 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec86:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ec88:	2000      	movs	r0, #0
    ec8a:	f007 f98b 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec8e:	9002      	str	r0, [sp, #8]
  const IntegerType one = Dup<IntegerType>(1);
    ec90:	4638      	mov	r0, r7
    ec92:	f007 f987 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec96:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    ec98:	4641      	mov	r1, r8
    ec9a:	4620      	mov	r0, r4
    ec9c:	f007 f983 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    eca0:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    eca2:	4639      	mov	r1, r7
    eca4:	4640      	mov	r0, r8
    eca6:	f007 f980 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ecaa:	4680      	mov	r8, r0
    ecac:	9902      	ldr	r1, [sp, #8]
    ecae:	4620      	mov	r0, r4
    ecb0:	f007 f987 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ecb4:	9f03      	ldr	r7, [sp, #12]
    ecb6:	4639      	mov	r1, r7
    ecb8:	f007 f975 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ecbc:	4601      	mov	r1, r0
    ecbe:	4640      	mov	r0, r8
    ecc0:	f007 f975 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ecc4:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    ecc6:	4631      	mov	r1, r6
    ecc8:	4620      	mov	r0, r4
    ecca:	f007 f96e 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ecce:	4604      	mov	r4, r0
    ecd0:	4641      	mov	r1, r8
    ecd2:	9804      	ldr	r0, [sp, #16]
    ecd4:	f007 f97d 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ecd8:	4639      	mov	r1, r7
    ecda:	f007 f964 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ecde:	4601      	mov	r1, r0
    ece0:	4620      	mov	r0, r4
    ece2:	f007 f964 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
      acc += output_offset;
    ece6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ece8:	4418      	add	r0, r3
    ecea:	9011      	str	r0, [sp, #68]	; 0x44
      if (__a < __b)
    ecec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ecee:	4298      	cmp	r0, r3
    ecf0:	db4d      	blt.n	ed8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59e>
      return __a;
    ecf2:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::max(acc, output_activation_min);
    ecf4:	681b      	ldr	r3, [r3, #0]
    ecf6:	9311      	str	r3, [sp, #68]	; 0x44
      if (__b < __a)
    ecf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ecfa:	4293      	cmp	r3, r2
    ecfc:	dc49      	bgt.n	ed92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
      return __a;
    ecfe:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::min(acc, output_activation_max);
    ed00:	681a      	ldr	r2, [r3, #0]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    ed02:	9b01      	ldr	r3, [sp, #4]
    ed04:	fb03 530b 	mla	r3, r3, fp, r5
    ed08:	9908      	ldr	r1, [sp, #32]
    ed0a:	54ca      	strb	r2, [r1, r3]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ed0c:	3501      	adds	r5, #1
    ed0e:	9b01      	ldr	r3, [sp, #4]
    ed10:	429d      	cmp	r5, r3
    ed12:	da40      	bge.n	ed96 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
      int32_t acc = 0;
    ed14:	2300      	movs	r3, #0
    ed16:	9311      	str	r3, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    ed18:	980d      	ldr	r0, [sp, #52]	; 0x34
    ed1a:	4283      	cmp	r3, r0
    ed1c:	f6bf af75 	bge.w	ec0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41a>
        int32_t input_val = input_data[b * accum_depth + d];
    ed20:	fb00 320b 	mla	r2, r0, fp, r3
    ed24:	9905      	ldr	r1, [sp, #20]
    ed26:	5689      	ldrsb	r1, [r1, r2]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    ed28:	fb00 3205 	mla	r2, r0, r5, r3
    ed2c:	9c06      	ldr	r4, [sp, #24]
    ed2e:	56a2      	ldrsb	r2, [r4, r2]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    ed30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ed32:	4422      	add	r2, r4
    ed34:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ed36:	4421      	add	r1, r4
    ed38:	9c11      	ldr	r4, [sp, #68]	; 0x44
    ed3a:	fb01 4202 	mla	r2, r1, r2, r4
    ed3e:	9211      	str	r2, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    ed40:	3301      	adds	r3, #1
    ed42:	e7ea      	b.n	ed1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
  int right_shift = shift > 0 ? 0 : -shift;
    ed44:	f1c9 0600 	rsb	r6, r9, #0
    ed48:	e76e      	b.n	ec28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ed4a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ed4e:	d001      	beq.n	ed54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x564>
    ed50:	2700      	movs	r7, #0
    ed52:	e76e      	b.n	ec32 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
    ed54:	2701      	movs	r7, #1
    ed56:	e76c      	b.n	ec32 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ed58:	4921      	ldr	r1, [pc, #132]	; (ede0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>)
    ed5a:	e77b      	b.n	ec54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x464>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ed5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ed60:	1851      	adds	r1, r2, r1
    ed62:	f04f 0400 	mov.w	r4, #0
    ed66:	eb43 0404 	adc.w	r4, r3, r4
    ed6a:	e77c      	b.n	ec66 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ed6c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ed70:	e77e      	b.n	ec70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
  assert(exponent >= 0);
    ed72:	4b1c      	ldr	r3, [pc, #112]	; (ede4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f4>)
    ed74:	4a1c      	ldr	r2, [pc, #112]	; (ede8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    ed76:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ed7a:	481c      	ldr	r0, [pc, #112]	; (edec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    ed7c:	f003 fe96 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    ed80:	4b1b      	ldr	r3, [pc, #108]	; (edf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    ed82:	4a19      	ldr	r2, [pc, #100]	; (ede8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    ed84:	f240 1167 	movw	r1, #359	; 0x167
    ed88:	4818      	ldr	r0, [pc, #96]	; (edec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    ed8a:	f003 fe8f 	bl	12aac <__assert_func>
	return __b;
    ed8e:	ab0f      	add	r3, sp, #60	; 0x3c
    ed90:	e7b0      	b.n	ecf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x504>
	return __b;
    ed92:	ab10      	add	r3, sp, #64	; 0x40
    ed94:	e7b4      	b.n	ed00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x510>
  for (int b = 0; b < batches; ++b) {
    ed96:	f10b 0b01 	add.w	fp, fp, #1
    ed9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed9c:	459b      	cmp	fp, r3
    ed9e:	da01      	bge.n	eda4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    eda0:	2500      	movs	r5, #0
    eda2:	e7b4      	b.n	ed0e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (size_ > kMaxSmallSize) {
    eda4:	9b46      	ldr	r3, [sp, #280]	; 0x118
    eda6:	2b05      	cmp	r3, #5
    eda8:	dd03      	ble.n	edb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
      delete[] dims_pointer_;
    edaa:	9847      	ldr	r0, [sp, #284]	; 0x11c
    edac:	b108      	cbz	r0, edb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    edae:	f009 fe64 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    edb2:	9b40      	ldr	r3, [sp, #256]	; 0x100
    edb4:	2b05      	cmp	r3, #5
    edb6:	dd03      	ble.n	edc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
      delete[] dims_pointer_;
    edb8:	9841      	ldr	r0, [sp, #260]	; 0x104
    edba:	b108      	cbz	r0, edc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    edbc:	f009 fe5d 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    edc0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    edc2:	2b05      	cmp	r3, #5
    edc4:	dd03      	ble.n	edce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      delete[] dims_pointer_;
    edc6:	983b      	ldr	r0, [sp, #236]	; 0xec
    edc8:	b108      	cbz	r0, edce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
    edca:	f009 fe56 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    edce:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    edd0:	2b05      	cmp	r3, #5
    edd2:	dd03      	ble.n	eddc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
      delete[] dims_pointer_;
    edd4:	9835      	ldr	r0, [sp, #212]	; 0xd4
    edd6:	b108      	cbz	r0, eddc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    edd8:	f009 fe4f 	bl	18a7a <_ZdaPv>
  return kTfLiteOk;
    eddc:	2000      	movs	r0, #0
      break;
    edde:	e559      	b.n	e894 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    ede0:	c0000001 	.word	0xc0000001
    ede4:	0001c580 	.word	0x0001c580
    ede8:	0001c590 	.word	0x0001c590
    edec:	0001c5e8 	.word	0x0001c5e8
    edf0:	0001c644 	.word	0x0001c644

0000edf4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    edf4:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    edf6:	4288      	cmp	r0, r1
    edf8:	d01e      	beq.n	ee38 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    edfa:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    edfc:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    edfe:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    ee00:	fb01 f407 	mul.w	r4, r1, r7
    ee04:	fb00 4403 	mla	r4, r0, r3, r4
    ee08:	fba1 2300 	umull	r2, r3, r1, r0
    ee0c:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ee0e:	2a00      	cmp	r2, #0
    ee10:	f173 0100 	sbcs.w	r1, r3, #0
    ee14:	db17      	blt.n	ee46 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    ee16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ee1a:	1852      	adds	r2, r2, r1
    ee1c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ee20:	4611      	mov	r1, r2
    ee22:	4618      	mov	r0, r3
    ee24:	2a00      	cmp	r2, #0
    ee26:	f173 0400 	sbcs.w	r4, r3, #0
    ee2a:	db0e      	blt.n	ee4a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    ee2c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ee2e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ee32:	b995      	cbnz	r5, ee5a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    ee34:	bcf0      	pop	{r4, r5, r6, r7}
    ee36:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ee38:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    ee3c:	d001      	beq.n	ee42 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    ee3e:	2500      	movs	r5, #0
    ee40:	e7dc      	b.n	edfc <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    ee42:	2501      	movs	r5, #1
    ee44:	e7da      	b.n	edfc <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ee46:	4906      	ldr	r1, [pc, #24]	; (ee60 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    ee48:	e7e7      	b.n	ee1a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ee4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ee4e:	1851      	adds	r1, r2, r1
    ee50:	f04f 0000 	mov.w	r0, #0
    ee54:	eb43 0000 	adc.w	r0, r3, r0
    ee58:	e7e8      	b.n	ee2c <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ee5a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ee5e:	e7e9      	b.n	ee34 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    ee60:	c0000001 	.word	0xc0000001

0000ee64 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    ee64:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ee66:	4288      	cmp	r0, r1
    ee68:	d01e      	beq.n	eea8 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    ee6a:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    ee6c:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    ee6e:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    ee70:	fb01 f407 	mul.w	r4, r1, r7
    ee74:	fb00 4403 	mla	r4, r0, r3, r4
    ee78:	fba1 2300 	umull	r2, r3, r1, r0
    ee7c:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ee7e:	2a00      	cmp	r2, #0
    ee80:	f173 0100 	sbcs.w	r1, r3, #0
    ee84:	db17      	blt.n	eeb6 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    ee86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ee8a:	1852      	adds	r2, r2, r1
    ee8c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ee90:	4611      	mov	r1, r2
    ee92:	4618      	mov	r0, r3
    ee94:	2a00      	cmp	r2, #0
    ee96:	f173 0400 	sbcs.w	r4, r3, #0
    ee9a:	db0e      	blt.n	eeba <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    ee9c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ee9e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    eea2:	b995      	cbnz	r5, eeca <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    eea4:	bcf0      	pop	{r4, r5, r6, r7}
    eea6:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    eea8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    eeac:	d001      	beq.n	eeb2 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    eeae:	2500      	movs	r5, #0
    eeb0:	e7dc      	b.n	ee6c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    eeb2:	2501      	movs	r5, #1
    eeb4:	e7da      	b.n	ee6c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    eeb6:	4906      	ldr	r1, [pc, #24]	; (eed0 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    eeb8:	e7e7      	b.n	ee8a <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    eeba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    eebe:	1851      	adds	r1, r2, r1
    eec0:	f04f 0000 	mov.w	r0, #0
    eec4:	eb43 0000 	adc.w	r0, r3, r0
    eec8:	e7e8      	b.n	ee9c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    eeca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eece:	e7e9      	b.n	eea4 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    eed0:	c0000001 	.word	0xc0000001

0000eed4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    eed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eed8:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    eeda:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    eede:	f007 f861 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eee2:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    eee4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eee8:	f007 f85c 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eeec:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    eeee:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
    eef2:	f007 f857 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eef6:	4601      	mov	r1, r0
    eef8:	4620      	mov	r0, r4
    eefa:	f007 f86a 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    eefe:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    ef00:	480b      	ldr	r0, [pc, #44]	; (ef30 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_+0x5c>)
    ef02:	f007 f84f 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef06:	4601      	mov	r1, r0
    ef08:	4620      	mov	r0, r4
    ef0a:	f007 f85a 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ef0e:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    ef10:	2102      	movs	r1, #2
    ef12:	4620      	mov	r0, r4
    ef14:	f008 fa5a 	bl	173cc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    ef18:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    ef1a:	4641      	mov	r1, r8
    ef1c:	4638      	mov	r0, r7
    ef1e:	f008 fa76 	bl	1740e <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    ef22:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    ef24:	4631      	mov	r1, r6
    ef26:	4628      	mov	r0, r5
    ef28:	f008 fa71 	bl	1740e <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    ef2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef30:	e0000001 	.word	0xe0000001

0000ef34 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef38:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    ef3a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ef3e:	f007 f831 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef42:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    ef44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ef48:	f007 f82c 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef4c:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    ef4e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    ef52:	f007 f827 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef56:	4601      	mov	r1, r0
    ef58:	4620      	mov	r0, r4
    ef5a:	f007 f83a 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ef5e:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    ef60:	480b      	ldr	r0, [pc, #44]	; (ef90 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_+0x5c>)
    ef62:	f007 f81f 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef66:	4601      	mov	r1, r0
    ef68:	4620      	mov	r0, r4
    ef6a:	f007 f82a 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ef6e:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    ef70:	2101      	movs	r1, #1
    ef72:	4620      	mov	r0, r4
    ef74:	f008 fa2a 	bl	173cc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    ef78:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    ef7a:	4641      	mov	r1, r8
    ef7c:	4638      	mov	r0, r7
    ef7e:	f008 fa46 	bl	1740e <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    ef82:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    ef84:	4631      	mov	r1, r6
    ef86:	4628      	mov	r0, r5
    ef88:	f008 fa41 	bl	1740e <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    ef8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef90:	c0000001 	.word	0xc0000001

0000ef94 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    ef94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef98:	4604      	mov	r4, r0
    retval.raw() = Dup<RawType>(x);
    ef9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ef9e:	f007 f801 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efa2:	4601      	mov	r1, r0
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
    efa4:	4620      	mov	r0, r4
    efa6:	f008 fa43 	bl	17430 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    efaa:	4607      	mov	r7, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    efac:	2000      	movs	r0, #0
    efae:	f006 fff9 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efb2:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    efb4:	2000      	movs	r0, #0
    efb6:	f006 fff5 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efba:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
    efbc:	2001      	movs	r0, #1
    efbe:	f006 fff1 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efc2:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    efc4:	4629      	mov	r1, r5
    efc6:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    efca:	f006 ffec 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    efce:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    efd0:	2101      	movs	r1, #1
    efd2:	4628      	mov	r0, r5
    efd4:	f006 ffe9 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    efd8:	4605      	mov	r5, r0
    efda:	4641      	mov	r1, r8
    efdc:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    efe0:	f006 ffef 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    efe4:	4621      	mov	r1, r4
    efe6:	f006 ffde 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    efea:	4601      	mov	r1, r0
    efec:	4628      	mov	r0, r5
    efee:	f006 ffde 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    eff2:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    eff4:	2100      	movs	r1, #0
    eff6:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    effa:	f006 ffd6 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    effe:	4605      	mov	r5, r0
    f000:	4641      	mov	r1, r8
    f002:	4630      	mov	r0, r6
    f004:	f006 ffe5 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f008:	4621      	mov	r1, r4
    f00a:	f006 ffcc 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f00e:	4601      	mov	r1, r0
    f010:	4628      	mov	r0, r5
    f012:	f006 ffcc 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f016:	f006 ffc5 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f01a:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f01c:	2000      	movs	r0, #0
    f01e:	f006 ffc1 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f022:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f024:	2000      	movs	r0, #0
    f026:	f006 ffbd 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f02a:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    f02c:	2001      	movs	r0, #1
    f02e:	f006 ffb9 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f032:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    f034:	f8df a0a8 	ldr.w	sl, [pc, #168]	; f0e0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x14c>
    f038:	4629      	mov	r1, r5
    f03a:	4650      	mov	r0, sl
    f03c:	f006 ffb3 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f040:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f042:	2101      	movs	r1, #1
    f044:	4628      	mov	r0, r5
    f046:	f006 ffb0 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f04a:	4605      	mov	r5, r0
    f04c:	4649      	mov	r1, r9
    f04e:	4650      	mov	r0, sl
    f050:	f006 ffb7 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f054:	4621      	mov	r1, r4
    f056:	f006 ffa6 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f05a:	4601      	mov	r1, r0
    f05c:	4628      	mov	r0, r5
    f05e:	f006 ffa6 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f062:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    f064:	2100      	movs	r1, #0
    f066:	4650      	mov	r0, sl
    f068:	f006 ff9f 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f06c:	4605      	mov	r5, r0
    f06e:	4649      	mov	r1, r9
    f070:	4640      	mov	r0, r8
    f072:	f006 ffae 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f076:	4621      	mov	r1, r4
    f078:	f006 ff95 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f07c:	4601      	mov	r1, r0
    f07e:	4628      	mov	r0, r5
    f080:	f006 ff95 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f084:	f006 ff8e 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f088:	4601      	mov	r1, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    f08a:	4638      	mov	r0, r7
    f08c:	f7ff feb2 	bl	edf4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f090:	4601      	mov	r1, r0
    f092:	4630      	mov	r0, r6
    f094:	f008 f9e7 	bl	17466 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f098:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    f09a:	2600      	movs	r6, #0
    f09c:	e017      	b.n	f0ce <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x13a>
    F2 half_denominator_times_x = half_denominator * x;
    f09e:	4621      	mov	r1, r4
    f0a0:	4638      	mov	r0, r7
    f0a2:	f7ff fea7 	bl	edf4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f0a6:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    f0a8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    f0ac:	f006 ff7a 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    f0b0:	4629      	mov	r1, r5
    f0b2:	f008 f9dd 	bl	17470 <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f0b6:	4601      	mov	r1, r0
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
    f0b8:	4620      	mov	r0, r4
    f0ba:	f7ff fed3 	bl	ee64 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f0be:	f008 f9e2 	bl	17486 <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    f0c2:	4601      	mov	r1, r0
    f0c4:	4620      	mov	r0, r4
    f0c6:	f008 f9ce 	bl	17466 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f0ca:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    f0cc:	3601      	adds	r6, #1
    f0ce:	2e02      	cmp	r6, #2
    f0d0:	dde5      	ble.n	f09e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
    f0d2:	4620      	mov	r0, r4
    f0d4:	f008 f9cb 	bl	1746e <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
    f0d8:	f008 f9d9 	bl	1748e <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
}
    f0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f0e0:	c3c3c3c4 	.word	0xc3c3c3c4

0000f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    f0e4:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    f0e6:	4288      	cmp	r0, r1
    f0e8:	d01e      	beq.n	f128 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    f0ea:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    f0ec:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    f0ee:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    f0f0:	fb01 f407 	mul.w	r4, r1, r7
    f0f4:	fb00 4403 	mla	r4, r0, r3, r4
    f0f8:	fba1 2300 	umull	r2, r3, r1, r0
    f0fc:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    f0fe:	2a00      	cmp	r2, #0
    f100:	f173 0100 	sbcs.w	r1, r3, #0
    f104:	db17      	blt.n	f136 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    f106:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    f10a:	1852      	adds	r2, r2, r1
    f10c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    f110:	4611      	mov	r1, r2
    f112:	4618      	mov	r0, r3
    f114:	2a00      	cmp	r2, #0
    f116:	f173 0400 	sbcs.w	r4, r3, #0
    f11a:	db0e      	blt.n	f13a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    f11c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    f11e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    f122:	b995      	cbnz	r5, f14a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    f124:	bcf0      	pop	{r4, r5, r6, r7}
    f126:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    f128:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    f12c:	d001      	beq.n	f132 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    f12e:	2500      	movs	r5, #0
    f130:	e7dc      	b.n	f0ec <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    f132:	2501      	movs	r5, #1
    f134:	e7da      	b.n	f0ec <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    f136:	4906      	ldr	r1, [pc, #24]	; (f150 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    f138:	e7e7      	b.n	f10a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    f13a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f13e:	1851      	adds	r1, r2, r1
    f140:	f04f 0000 	mov.w	r0, #0
    f144:	eb43 0000 	adc.w	r0, r3, r0
    f148:	e7e8      	b.n	f11c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    f14a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f14e:	e7e9      	b.n	f124 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    f150:	c0000001 	.word	0xc0000001

0000f154 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    f154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f158:	4680      	mov	r8, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f15a:	2000      	movs	r0, #0
    f15c:	f006 ff22 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f160:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f162:	2000      	movs	r0, #0
    f164:	f006 ff1e 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f168:	4607      	mov	r7, r0
  const IntegerType one = Dup<IntegerType>(1);
    f16a:	2001      	movs	r0, #1
    f16c:	f006 ff1a 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f170:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    f172:	f8df 9124 	ldr.w	r9, [pc, #292]	; f298 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x144>
    f176:	4629      	mov	r1, r5
    f178:	4648      	mov	r0, r9
    f17a:	f006 ff14 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f17e:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f180:	2101      	movs	r1, #1
    f182:	4628      	mov	r0, r5
    f184:	f006 ff11 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f188:	4605      	mov	r5, r0
    f18a:	4639      	mov	r1, r7
    f18c:	4648      	mov	r0, r9
    f18e:	f006 ff18 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f192:	4621      	mov	r1, r4
    f194:	f006 ff07 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f198:	4601      	mov	r1, r0
    f19a:	4628      	mov	r0, r5
    f19c:	f006 ff07 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f1a0:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    f1a2:	2100      	movs	r1, #0
    f1a4:	4648      	mov	r0, r9
    f1a6:	f006 ff00 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f1aa:	4605      	mov	r5, r0
    f1ac:	4639      	mov	r1, r7
    f1ae:	4630      	mov	r0, r6
    f1b0:	f006 ff0f 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f1b4:	4621      	mov	r1, r4
    f1b6:	f006 fef6 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f1ba:	4601      	mov	r1, r0
    f1bc:	4628      	mov	r0, r5
    f1be:	f006 fef6 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f1c2:	f006 feef 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1c6:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f1c8:	2000      	movs	r0, #0
    f1ca:	f006 feeb 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1ce:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f1d0:	2000      	movs	r0, #0
    f1d2:	f006 fee7 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1d6:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    f1d8:	2001      	movs	r0, #1
    f1da:	f006 fee3 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1de:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    f1e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; f29c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x148>
    f1e4:	4629      	mov	r1, r5
    f1e6:	4650      	mov	r0, sl
    f1e8:	f006 fedd 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f1ec:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f1ee:	2101      	movs	r1, #1
    f1f0:	4628      	mov	r0, r5
    f1f2:	f006 feda 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f1f6:	4605      	mov	r5, r0
    f1f8:	4649      	mov	r1, r9
    f1fa:	4650      	mov	r0, sl
    f1fc:	f006 fee1 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f200:	4621      	mov	r1, r4
    f202:	f006 fed0 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f206:	4601      	mov	r1, r0
    f208:	4628      	mov	r0, r5
    f20a:	f006 fed0 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f20e:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    f210:	2100      	movs	r1, #0
    f212:	4650      	mov	r0, sl
    f214:	f006 fec9 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f218:	4605      	mov	r5, r0
    f21a:	4649      	mov	r1, r9
    f21c:	4638      	mov	r0, r7
    f21e:	f006 fed8 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f222:	4621      	mov	r1, r4
    f224:	f006 febf 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f228:	4601      	mov	r1, r0
    f22a:	4628      	mov	r0, r5
    f22c:	f006 febf 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f230:	f006 feb8 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f234:	4607      	mov	r7, r0
    f236:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f23a:	f006 feb3 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f23e:	4601      	mov	r1, r0
  F x = a + F::template ConstantPOT<-3>();
    f240:	4640      	mov	r0, r8
    f242:	f008 f92c 	bl	1749e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f246:	4604      	mov	r4, r0
  F x2 = x * x;
    f248:	4601      	mov	r1, r0
    f24a:	f7ff ff4b 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f24e:	4605      	mov	r5, r0
  F x3 = x2 * x;
    f250:	4621      	mov	r1, r4
    f252:	f7ff ff47 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f256:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    f258:	4629      	mov	r1, r5
    f25a:	4628      	mov	r0, r5
    f25c:	f7ff ff42 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
    f260:	f008 f95c 	bl	1751c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
      SaturatingRoundingMultiplyByPOT<-1>(
    f264:	4641      	mov	r1, r8
    f266:	f008 f91a 	bl	1749e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f26a:	4639      	mov	r1, r7
    f26c:	f7ff ff3a 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f270:	4629      	mov	r1, r5
    f272:	f008 f914 	bl	1749e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f276:	f008 f916 	bl	174a6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
    f27a:	4601      	mov	r1, r0
  return AddSaturatingIf16Bit(
    f27c:	4620      	mov	r0, r4
    f27e:	f008 f90e 	bl	1749e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f282:	4601      	mov	r1, r0
    f284:	4630      	mov	r0, r6
    f286:	f7ff ff2d 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f28a:	4601      	mov	r1, r0
    f28c:	4630      	mov	r0, r6
    f28e:	f008 f94d 	bl	1752c <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
}
    f292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f296:	bf00      	nop
    f298:	70f5a894 	.word	0x70f5a894
    f29c:	2aaaaaab 	.word	0x2aaaaaab

0000f2a0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    f2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2a4:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    f2a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    f2aa:	f006 fe7b 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2ae:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    f2b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f2b4:	f006 fe76 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2b8:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    f2ba:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
    f2be:	f006 fe71 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2c2:	4601      	mov	r1, r0
    f2c4:	4620      	mov	r0, r4
    f2c6:	f006 fe84 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f2ca:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    f2cc:	480b      	ldr	r0, [pc, #44]	; (f2fc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_+0x5c>)
    f2ce:	f006 fe69 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2d2:	4601      	mov	r1, r0
    f2d4:	4620      	mov	r0, r4
    f2d6:	f006 fe74 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f2da:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    f2dc:	2105      	movs	r1, #5
    f2de:	4620      	mov	r0, r4
    f2e0:	f008 f874 	bl	173cc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    f2e4:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    f2e6:	4641      	mov	r1, r8
    f2e8:	4638      	mov	r0, r7
    f2ea:	f008 f890 	bl	1740e <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    f2ee:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    f2f0:	4631      	mov	r1, r6
    f2f2:	4628      	mov	r0, r5
    f2f4:	f008 f88b 	bl	1740e <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    f2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2fc:	fc000001 	.word	0xfc000001

0000f300 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    f300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f304:	4606      	mov	r6, r0
    retval.raw() = Dup<RawType>(x);
    f306:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    f30a:	f006 fe4b 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f30e:	4604      	mov	r4, r0
    f310:	2001      	movs	r0, #1
    f312:	f006 fe47 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f316:	4601      	mov	r1, r0
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
    f318:	4620      	mov	r0, r4
    f31a:	f008 f90f 	bl	1753c <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f31e:	4601      	mov	r1, r0
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
    f320:	4630      	mov	r0, r6
    f322:	f008 f90f 	bl	17544 <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f326:	4621      	mov	r1, r4
    f328:	f008 f908 	bl	1753c <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f32c:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    f32e:	f008 f94d 	bl	175cc <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    f332:	f7ff ff0f 	bl	f154 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    f336:	4604      	mov	r4, r0
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
    f338:	4631      	mov	r1, r6
    f33a:	4628      	mov	r0, r5
    f33c:	f008 f8fe 	bl	1753c <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f340:	4605      	mov	r5, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f342:	2000      	movs	r0, #0
    f344:	f006 fe2e 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f348:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f34a:	2000      	movs	r0, #0
    f34c:	f006 fe2a 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f350:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f352:	2001      	movs	r0, #1
    f354:	f006 fe26 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f358:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f35a:	f8df b428 	ldr.w	fp, [pc, #1064]	; f784 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x484>
    f35e:	4641      	mov	r1, r8
    f360:	4658      	mov	r0, fp
    f362:	f006 fe20 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f366:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f368:	2101      	movs	r1, #1
    f36a:	4640      	mov	r0, r8
    f36c:	f006 fe1d 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f370:	4680      	mov	r8, r0
    f372:	4651      	mov	r1, sl
    f374:	4658      	mov	r0, fp
    f376:	f006 fe24 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f37a:	4639      	mov	r1, r7
    f37c:	f006 fe13 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f380:	4601      	mov	r1, r0
    f382:	4640      	mov	r0, r8
    f384:	f006 fe13 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f388:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f38a:	2100      	movs	r1, #0
    f38c:	4658      	mov	r0, fp
    f38e:	f006 fe0c 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f392:	4680      	mov	r8, r0
    f394:	4651      	mov	r1, sl
    f396:	4648      	mov	r0, r9
    f398:	f006 fe1b 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f39c:	4639      	mov	r1, r7
    f39e:	f006 fe02 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f3a2:	4601      	mov	r1, r0
    f3a4:	4640      	mov	r0, r8
    f3a6:	f006 fe02 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f3aa:	f006 fdfb 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3ae:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    f3b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    f3b4:	f006 fdf6 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3b8:	4601      	mov	r1, r0
    f3ba:	4628      	mov	r0, r5
    f3bc:	f006 fdf3 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f3c0:	f006 fdf9 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f3c4:	4607      	mov	r7, r0
    f3c6:	4641      	mov	r1, r8
    f3c8:	4620      	mov	r0, r4
    f3ca:	f7ff fe8b 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f3ce:	4601      	mov	r1, r0
    f3d0:	4622      	mov	r2, r4
    f3d2:	4638      	mov	r0, r7
    f3d4:	f008 f85f 	bl	17496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f3d8:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f3da:	2000      	movs	r0, #0
    f3dc:	f006 fde2 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3e0:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f3e2:	2000      	movs	r0, #0
    f3e4:	f006 fdde 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3e8:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f3ea:	2001      	movs	r0, #1
    f3ec:	f006 fdda 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3f0:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f3f2:	f8df b394 	ldr.w	fp, [pc, #916]	; f788 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x488>
    f3f6:	4641      	mov	r1, r8
    f3f8:	4658      	mov	r0, fp
    f3fa:	f006 fdd4 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f3fe:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f400:	2101      	movs	r1, #1
    f402:	4640      	mov	r0, r8
    f404:	f006 fdd1 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f408:	4680      	mov	r8, r0
    f40a:	4651      	mov	r1, sl
    f40c:	4658      	mov	r0, fp
    f40e:	f006 fdd8 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f412:	4639      	mov	r1, r7
    f414:	f006 fdc7 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f418:	4601      	mov	r1, r0
    f41a:	4640      	mov	r0, r8
    f41c:	f006 fdc7 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f420:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f422:	2100      	movs	r1, #0
    f424:	4658      	mov	r0, fp
    f426:	f006 fdc0 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f42a:	4680      	mov	r8, r0
    f42c:	4651      	mov	r1, sl
    f42e:	4648      	mov	r0, r9
    f430:	f006 fdcf 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f434:	4639      	mov	r1, r7
    f436:	f006 fdb6 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f43a:	4601      	mov	r1, r0
    f43c:	4640      	mov	r0, r8
    f43e:	f006 fdb6 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f442:	f006 fdaf 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f446:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    f448:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    f44c:	f006 fdaa 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f450:	4601      	mov	r1, r0
    f452:	4628      	mov	r0, r5
    f454:	f006 fda7 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f458:	f006 fdad 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f45c:	4607      	mov	r7, r0
    f45e:	4641      	mov	r1, r8
    f460:	4620      	mov	r0, r4
    f462:	f7ff fe3f 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f466:	4601      	mov	r1, r0
    f468:	4622      	mov	r2, r4
    f46a:	4638      	mov	r0, r7
    f46c:	f008 f813 	bl	17496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f470:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f472:	2000      	movs	r0, #0
    f474:	f006 fd96 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f478:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f47a:	2000      	movs	r0, #0
    f47c:	f006 fd92 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f480:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f482:	2001      	movs	r0, #1
    f484:	f006 fd8e 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f488:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f48a:	f8df b300 	ldr.w	fp, [pc, #768]	; f78c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x48c>
    f48e:	4641      	mov	r1, r8
    f490:	4658      	mov	r0, fp
    f492:	f006 fd88 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f496:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f498:	2101      	movs	r1, #1
    f49a:	4640      	mov	r0, r8
    f49c:	f006 fd85 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f4a0:	4680      	mov	r8, r0
    f4a2:	4651      	mov	r1, sl
    f4a4:	4658      	mov	r0, fp
    f4a6:	f006 fd8c 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f4aa:	4639      	mov	r1, r7
    f4ac:	f006 fd7b 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f4b0:	4601      	mov	r1, r0
    f4b2:	4640      	mov	r0, r8
    f4b4:	f006 fd7b 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f4b8:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f4ba:	2100      	movs	r1, #0
    f4bc:	4658      	mov	r0, fp
    f4be:	f006 fd74 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f4c2:	4680      	mov	r8, r0
    f4c4:	4651      	mov	r1, sl
    f4c6:	4648      	mov	r0, r9
    f4c8:	f006 fd83 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f4cc:	4639      	mov	r1, r7
    f4ce:	f006 fd6a 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f4d2:	4601      	mov	r1, r0
    f4d4:	4640      	mov	r0, r8
    f4d6:	f006 fd6a 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f4da:	f006 fd63 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f4de:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    f4e0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    f4e4:	f006 fd5e 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f4e8:	4601      	mov	r1, r0
    f4ea:	4628      	mov	r0, r5
    f4ec:	f006 fd5b 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f4f0:	f006 fd61 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f4f4:	4607      	mov	r7, r0
    f4f6:	4641      	mov	r1, r8
    f4f8:	4620      	mov	r0, r4
    f4fa:	f7ff fdf3 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f4fe:	4601      	mov	r1, r0
    f500:	4622      	mov	r2, r4
    f502:	4638      	mov	r0, r7
    f504:	f007 ffc7 	bl	17496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f508:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f50a:	2000      	movs	r0, #0
    f50c:	f006 fd4a 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f510:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f512:	2000      	movs	r0, #0
    f514:	f006 fd46 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f518:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f51a:	2001      	movs	r0, #1
    f51c:	f006 fd42 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f520:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f522:	f8df b26c 	ldr.w	fp, [pc, #620]	; f790 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x490>
    f526:	4641      	mov	r1, r8
    f528:	4658      	mov	r0, fp
    f52a:	f006 fd3c 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f52e:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f530:	2101      	movs	r1, #1
    f532:	4640      	mov	r0, r8
    f534:	f006 fd39 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f538:	4680      	mov	r8, r0
    f53a:	4651      	mov	r1, sl
    f53c:	4658      	mov	r0, fp
    f53e:	f006 fd40 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f542:	4639      	mov	r1, r7
    f544:	f006 fd2f 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f548:	4601      	mov	r1, r0
    f54a:	4640      	mov	r0, r8
    f54c:	f006 fd2f 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f550:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f552:	2100      	movs	r1, #0
    f554:	4658      	mov	r0, fp
    f556:	f006 fd28 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f55a:	4680      	mov	r8, r0
    f55c:	4651      	mov	r1, sl
    f55e:	4648      	mov	r0, r9
    f560:	f006 fd37 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f564:	4639      	mov	r1, r7
    f566:	f006 fd1e 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f56a:	4601      	mov	r1, r0
    f56c:	4640      	mov	r0, r8
    f56e:	f006 fd1e 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f572:	f006 fd17 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f576:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    f578:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    f57c:	f006 fd12 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f580:	4601      	mov	r1, r0
    f582:	4628      	mov	r0, r5
    f584:	f006 fd0f 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f588:	f006 fd15 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f58c:	4607      	mov	r7, r0
    f58e:	4641      	mov	r1, r8
    f590:	4620      	mov	r0, r4
    f592:	f7ff fda7 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f596:	4601      	mov	r1, r0
    f598:	4622      	mov	r2, r4
    f59a:	4638      	mov	r0, r7
    f59c:	f007 ff7b 	bl	17496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f5a0:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f5a2:	2000      	movs	r0, #0
    f5a4:	f006 fcfe 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f5a8:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f5aa:	2000      	movs	r0, #0
    f5ac:	f006 fcfa 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f5b0:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f5b2:	2001      	movs	r0, #1
    f5b4:	f006 fcf6 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f5b8:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f5ba:	f8df b1d8 	ldr.w	fp, [pc, #472]	; f794 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x494>
    f5be:	4641      	mov	r1, r8
    f5c0:	4658      	mov	r0, fp
    f5c2:	f006 fcf0 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f5c6:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f5c8:	2101      	movs	r1, #1
    f5ca:	4640      	mov	r0, r8
    f5cc:	f006 fced 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f5d0:	4680      	mov	r8, r0
    f5d2:	4651      	mov	r1, sl
    f5d4:	4658      	mov	r0, fp
    f5d6:	f006 fcf4 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f5da:	4639      	mov	r1, r7
    f5dc:	f006 fce3 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f5e0:	4601      	mov	r1, r0
    f5e2:	4640      	mov	r0, r8
    f5e4:	f006 fce3 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f5e8:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f5ea:	2100      	movs	r1, #0
    f5ec:	4658      	mov	r0, fp
    f5ee:	f006 fcdc 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f5f2:	4680      	mov	r8, r0
    f5f4:	4651      	mov	r1, sl
    f5f6:	4648      	mov	r0, r9
    f5f8:	f006 fceb 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f5fc:	4639      	mov	r1, r7
    f5fe:	f006 fcd2 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f602:	4601      	mov	r1, r0
    f604:	4640      	mov	r0, r8
    f606:	f006 fcd2 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f60a:	f006 fccb 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f60e:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    f610:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f614:	f006 fcc6 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f618:	4601      	mov	r1, r0
    f61a:	4628      	mov	r0, r5
    f61c:	f006 fcc3 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f620:	f006 fcc9 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f624:	4607      	mov	r7, r0
    f626:	4641      	mov	r1, r8
    f628:	4620      	mov	r0, r4
    f62a:	f7ff fd5b 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f62e:	4601      	mov	r1, r0
    f630:	4622      	mov	r2, r4
    f632:	4638      	mov	r0, r7
    f634:	f007 ff2f 	bl	17496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f638:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f63a:	2000      	movs	r0, #0
    f63c:	f006 fcb2 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f640:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f642:	2000      	movs	r0, #0
    f644:	f006 fcae 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f648:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f64a:	2001      	movs	r0, #1
    f64c:	f006 fcaa 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f650:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f652:	f8df b144 	ldr.w	fp, [pc, #324]	; f798 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x498>
    f656:	4641      	mov	r1, r8
    f658:	4658      	mov	r0, fp
    f65a:	f006 fca4 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f65e:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f660:	2101      	movs	r1, #1
    f662:	4640      	mov	r0, r8
    f664:	f006 fca1 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f668:	4680      	mov	r8, r0
    f66a:	4651      	mov	r1, sl
    f66c:	4658      	mov	r0, fp
    f66e:	f006 fca8 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f672:	4639      	mov	r1, r7
    f674:	f006 fc97 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f678:	4601      	mov	r1, r0
    f67a:	4640      	mov	r0, r8
    f67c:	f006 fc97 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f680:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f682:	2100      	movs	r1, #0
    f684:	4658      	mov	r0, fp
    f686:	f006 fc90 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f68a:	4680      	mov	r8, r0
    f68c:	4651      	mov	r1, sl
    f68e:	4648      	mov	r0, r9
    f690:	f006 fc9f 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f694:	4639      	mov	r1, r7
    f696:	f006 fc86 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f69a:	4601      	mov	r1, r0
    f69c:	4640      	mov	r0, r8
    f69e:	f006 fc86 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f6a2:	f006 fc7f 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6a6:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    f6a8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    f6ac:	f006 fc7a 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6b0:	4601      	mov	r1, r0
    f6b2:	4628      	mov	r0, r5
    f6b4:	f006 fc77 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f6b8:	f006 fc7d 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f6bc:	4607      	mov	r7, r0
    f6be:	4641      	mov	r1, r8
    f6c0:	4620      	mov	r0, r4
    f6c2:	f7ff fd0f 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f6c6:	4601      	mov	r1, r0
    f6c8:	4622      	mov	r2, r4
    f6ca:	4638      	mov	r0, r7
    f6cc:	f007 fee3 	bl	17496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f6d0:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f6d2:	2000      	movs	r0, #0
    f6d4:	f006 fc66 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6d8:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f6da:	2000      	movs	r0, #0
    f6dc:	f006 fc62 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6e0:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f6e2:	2001      	movs	r0, #1
    f6e4:	f006 fc5e 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6e8:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f6ea:	4641      	mov	r1, r8
    f6ec:	20f2      	movs	r0, #242	; 0xf2
    f6ee:	f006 fc5a 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f6f2:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f6f4:	2101      	movs	r1, #1
    f6f6:	4640      	mov	r0, r8
    f6f8:	f006 fc57 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f6fc:	4680      	mov	r8, r0
    f6fe:	4651      	mov	r1, sl
    f700:	20f2      	movs	r0, #242	; 0xf2
    f702:	f006 fc5e 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f706:	4639      	mov	r1, r7
    f708:	f006 fc4d 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f70c:	4601      	mov	r1, r0
    f70e:	4640      	mov	r0, r8
    f710:	f006 fc4d 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f714:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f716:	2100      	movs	r1, #0
    f718:	20f2      	movs	r0, #242	; 0xf2
    f71a:	f006 fc46 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f71e:	4680      	mov	r8, r0
    f720:	4651      	mov	r1, sl
    f722:	4648      	mov	r0, r9
    f724:	f006 fc55 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f728:	4639      	mov	r1, r7
    f72a:	f006 fc3c 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f72e:	4601      	mov	r1, r0
    f730:	4640      	mov	r0, r8
    f732:	f006 fc3c 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f736:	f006 fc35 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f73a:	4607      	mov	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    f73c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f740:	f006 fc30 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f744:	4601      	mov	r1, r0
    f746:	4628      	mov	r0, r5
    f748:	f006 fc2d 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f74c:	f006 fc33 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f750:	4605      	mov	r5, r0
    f752:	4639      	mov	r1, r7
    f754:	4620      	mov	r0, r4
    f756:	f7ff fcc5 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f75a:	4601      	mov	r1, r0
    f75c:	4622      	mov	r2, r4
    f75e:	4628      	mov	r0, r5
    f760:	f007 fe99 	bl	17496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f764:	4604      	mov	r4, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    f766:	4630      	mov	r0, r6
    f768:	f007 ff2c 	bl	175c4 <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>
    f76c:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    f76e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f772:	f006 fc17 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f776:	4601      	mov	r1, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    f778:	4622      	mov	r2, r4
    f77a:	4628      	mov	r0, r5
    f77c:	f007 fe8b 	bl	17496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
}
    f780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f784:	63afbe7b 	.word	0x63afbe7b
    f788:	4da2cbf2 	.word	0x4da2cbf2
    f78c:	2f16ac6c 	.word	0x2f16ac6c
    f790:	1152aaa4 	.word	0x1152aaa4
    f794:	02582ab7 	.word	0x02582ab7
    f798:	000afe11 	.word	0x000afe11

0000f79c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    f79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7a0:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f7a2:	694f      	ldr	r7, [r1, #20]
    f7a4:	b35f      	cbz	r7, f7fe <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
    f7a6:	4604      	mov	r4, r0
    f7a8:	460d      	mov	r5, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    f7aa:	f8d1 8010 	ldr.w	r8, [r1, #16]
    f7ae:	f1b8 0f00 	cmp.w	r8, #0
    f7b2:	d026      	beq.n	f802 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
  const OpDataPooling* data =
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    f7b4:	4b23      	ldr	r3, [pc, #140]	; (f844 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    f7b6:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f7b8:	b328      	cbz	r0, f806 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    f7ba:	b335      	cbz	r5, f80a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    f7bc:	6d42      	ldr	r2, [r0, #84]	; 0x54
    f7be:	682b      	ldr	r3, [r5, #0]
    f7c0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f7c4:	6859      	ldr	r1, [r3, #4]
    f7c6:	4790      	blx	r2
    f7c8:	4606      	mov	r6, r0
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    f7ca:	4b1f      	ldr	r3, [pc, #124]	; (f848 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    f7cc:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f7ce:	b1f4      	cbz	r4, f80e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    f7d0:	b1fd      	cbz	r5, f812 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    f7d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    f7d4:	686b      	ldr	r3, [r5, #4]
    f7d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f7da:	6859      	ldr	r1, [r3, #4]
    f7dc:	4620      	mov	r0, r4
    f7de:	4790      	blx	r2

  switch (input->type) {
    f7e0:	7a33      	ldrb	r3, [r6, #8]
    f7e2:	2b01      	cmp	r3, #1
    f7e4:	d017      	beq.n	f816 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    f7e6:	2b09      	cmp	r3, #9
    f7e8:	d021      	beq.n	f82e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
      break;
    case kTfLiteInt8:
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    f7ea:	6965      	ldr	r5, [r4, #20]
    f7ec:	4618      	mov	r0, r3
    f7ee:	f7f9 fdd5 	bl	939c <TfLiteTypeGetName>
    f7f2:	4602      	mov	r2, r0
    f7f4:	4915      	ldr	r1, [pc, #84]	; (f84c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    f7f6:	4620      	mov	r0, r4
    f7f8:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    f7fa:	2001      	movs	r0, #1
    f7fc:	e014      	b.n	f828 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f7fe:	f009 f951 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f802:	f009 f94f 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    f806:	f009 f94d 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    f80a:	f009 f94b 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    f80e:	f009 f949 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    f812:	f009 f947 	bl	18aa4 <abort>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
    f816:	9001      	str	r0, [sp, #4]
    f818:	9600      	str	r6, [sp, #0]
    f81a:	4643      	mov	r3, r8
    f81c:	463a      	mov	r2, r7
    f81e:	4629      	mov	r1, r5
    f820:	4620      	mov	r0, r4
    f822:	f008 f902 	bl	17a2a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  }
  return kTfLiteOk;
    f826:	2000      	movs	r0, #0
}
    f828:	b002      	add	sp, #8
    f82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
    f82e:	9001      	str	r0, [sp, #4]
    f830:	9600      	str	r6, [sp, #0]
    f832:	4643      	mov	r3, r8
    f834:	463a      	mov	r2, r7
    f836:	4629      	mov	r1, r5
    f838:	4620      	mov	r0, r4
    f83a:	f008 fc93 	bl	18164 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
    f83e:	2000      	movs	r0, #0
      break;
    f840:	e7f2      	b.n	f828 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    f842:	bf00      	nop
    f844:	0001cc80 	.word	0x0001cc80
    f848:	0001cc84 	.word	0x0001cc84
    f84c:	0001cbd8 	.word	0x0001cbd8

0000f850 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    f850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f854:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f856:	694f      	ldr	r7, [r1, #20]
    f858:	b35f      	cbz	r7, f8b2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x62>
    f85a:	4604      	mov	r4, r0
    f85c:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    f85e:	f8d1 8010 	ldr.w	r8, [r1, #16]
    f862:	f1b8 0f00 	cmp.w	r8, #0
    f866:	d026      	beq.n	f8b6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    f868:	4b23      	ldr	r3, [pc, #140]	; (f8f8 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    f86a:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f86c:	b328      	cbz	r0, f8ba <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    f86e:	b335      	cbz	r5, f8be <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    f870:	6d42      	ldr	r2, [r0, #84]	; 0x54
    f872:	682b      	ldr	r3, [r5, #0]
    f874:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f878:	6859      	ldr	r1, [r3, #4]
    f87a:	4790      	blx	r2
    f87c:	4606      	mov	r6, r0
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    f87e:	4b1f      	ldr	r3, [pc, #124]	; (f8fc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    f880:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f882:	b1f4      	cbz	r4, f8c2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    f884:	b1fd      	cbz	r5, f8c6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    f886:	6d62      	ldr	r2, [r4, #84]	; 0x54
    f888:	686b      	ldr	r3, [r5, #4]
    f88a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f88e:	6859      	ldr	r1, [r3, #4]
    f890:	4620      	mov	r0, r4
    f892:	4790      	blx	r2
  switch (input->type) {
    f894:	7a33      	ldrb	r3, [r6, #8]
    f896:	2b01      	cmp	r3, #1
    f898:	d017      	beq.n	f8ca <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    f89a:	2b09      	cmp	r3, #9
    f89c:	d021      	beq.n	f8e2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x92>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    f89e:	6965      	ldr	r5, [r4, #20]
    f8a0:	4618      	mov	r0, r3
    f8a2:	f7f9 fd7b 	bl	939c <TfLiteTypeGetName>
    f8a6:	4602      	mov	r2, r0
    f8a8:	4915      	ldr	r1, [pc, #84]	; (f900 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    f8aa:	4620      	mov	r0, r4
    f8ac:	47a8      	blx	r5
      return kTfLiteError;
    f8ae:	2001      	movs	r0, #1
    f8b0:	e014      	b.n	f8dc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f8b2:	f009 f8f7 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f8b6:	f009 f8f5 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    f8ba:	f009 f8f3 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    f8be:	f009 f8f1 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
    f8c2:	f009 f8ef 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
    f8c6:	f009 f8ed 	bl	18aa4 <abort>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
    f8ca:	9001      	str	r0, [sp, #4]
    f8cc:	9600      	str	r6, [sp, #0]
    f8ce:	4643      	mov	r3, r8
    f8d0:	463a      	mov	r2, r7
    f8d2:	4629      	mov	r1, r5
    f8d4:	4620      	mov	r0, r4
    f8d6:	f007 fed7 	bl	17688 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
    f8da:	2000      	movs	r0, #0
}
    f8dc:	b002      	add	sp, #8
    f8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
    f8e2:	9001      	str	r0, [sp, #4]
    f8e4:	9600      	str	r6, [sp, #0]
    f8e6:	4643      	mov	r3, r8
    f8e8:	463a      	mov	r2, r7
    f8ea:	4629      	mov	r1, r5
    f8ec:	4620      	mov	r0, r4
    f8ee:	f008 fa6a 	bl	17dc6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
  return kTfLiteOk;
    f8f2:	2000      	movs	r0, #0
      break;
    f8f4:	e7f2      	b.n	f8dc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    f8f6:	bf00      	nop
    f8f8:	0001cc80 	.word	0x0001cc80
    f8fc:	0001cc84 	.word	0x0001cc84
    f900:	0001cbfc 	.word	0x0001cbfc

0000f904 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
}

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
    f904:	b470      	push	{r4, r5, r6}
    f906:	4606      	mov	r6, r0
          /*prepare=*/PoolingPrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    f908:	4604      	mov	r4, r0
    f90a:	4d05      	ldr	r5, [pc, #20]	; (f920 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x1c>)
    f90c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f90e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f910:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    f918:	4630      	mov	r0, r6
    f91a:	bc70      	pop	{r4, r5, r6}
    f91c:	4770      	bx	lr
    f91e:	bf00      	nop
    f920:	00019ac0 	.word	0x00019ac0

0000f924 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:
      params->filter_width, params->padding, &out_height, &out_width);

  return kTfLiteOk;
}

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    f924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f928:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f92a:	694f      	ldr	r7, [r1, #20]
    f92c:	b34f      	cbz	r7, f982 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    f92e:	4605      	mov	r5, r0
    f930:	460c      	mov	r4, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    f932:	690e      	ldr	r6, [r1, #16]
    f934:	b33e      	cbz	r6, f986 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x62>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
    f936:	2200      	movs	r2, #0
    f938:	f006 fa58 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    f93c:	4680      	mov	r8, r0
    f93e:	b320      	cbz	r0, f98a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
    f940:	2200      	movs	r2, #0
    f942:	4621      	mov	r1, r4
    f944:	4628      	mov	r0, r5
    f946:	f006 fa70 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    f94a:	4681      	mov	r9, r0
    f94c:	b350      	cbz	r0, f9a4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x80>

  TF_LITE_ENSURE_STATUS(
    f94e:	9600      	str	r6, [sp, #0]
    f950:	4603      	mov	r3, r0
    f952:	4642      	mov	r2, r8
    f954:	4639      	mov	r1, r7
    f956:	4628      	mov	r0, r5
    f958:	f007 fe44 	bl	175e4 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
    f95c:	4604      	mov	r4, r0
    f95e:	b9e8      	cbnz	r0, f99c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
    f960:	f898 3000 	ldrb.w	r3, [r8]
    f964:	2b01      	cmp	r3, #1
    f966:	d027      	beq.n	f9b8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x94>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
    f968:	2b09      	cmp	r3, #9
    f96a:	d117      	bne.n	f99c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRangeQuantized(context, params->activation, output,
    f96c:	7d39      	ldrb	r1, [r7, #20]
    f96e:	f106 0314 	add.w	r3, r6, #20
    f972:	9300      	str	r3, [sp, #0]
    f974:	f106 0310 	add.w	r3, r6, #16
    f978:	464a      	mov	r2, r9
    f97a:	4628      	mov	r0, r5
    f97c:	f7f9 ff52 	bl	9824 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    f980:	e00c      	b.n	f99c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f982:	f009 f88f 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f986:	f009 f88d 	bl	18aa4 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    f98a:	696c      	ldr	r4, [r5, #20]
    f98c:	4b0e      	ldr	r3, [pc, #56]	; (f9c8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
    f98e:	9300      	str	r3, [sp, #0]
    f990:	233a      	movs	r3, #58	; 0x3a
    f992:	4a0e      	ldr	r2, [pc, #56]	; (f9cc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    f994:	490e      	ldr	r1, [pc, #56]	; (f9d0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    f996:	4628      	mov	r0, r5
    f998:	47a0      	blx	r4
    f99a:	2401      	movs	r4, #1
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
    f99c:	4620      	mov	r0, r4
    f99e:	b003      	add	sp, #12
    f9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    f9a4:	696c      	ldr	r4, [r5, #20]
    f9a6:	4b0b      	ldr	r3, [pc, #44]	; (f9d4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
    f9a8:	9300      	str	r3, [sp, #0]
    f9aa:	233c      	movs	r3, #60	; 0x3c
    f9ac:	4a07      	ldr	r2, [pc, #28]	; (f9cc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    f9ae:	4908      	ldr	r1, [pc, #32]	; (f9d0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    f9b0:	4628      	mov	r0, r5
    f9b2:	47a0      	blx	r4
    f9b4:	2401      	movs	r4, #1
    f9b6:	e7f1      	b.n	f99c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
    f9b8:	f106 021c 	add.w	r2, r6, #28
    f9bc:	f106 0118 	add.w	r1, r6, #24
    f9c0:	7d38      	ldrb	r0, [r7, #20]
    f9c2:	f7fa ff39 	bl	a838 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
    f9c6:	e7e9      	b.n	f99c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    f9c8:	0001c900 	.word	0x0001c900
    f9cc:	0001cc28 	.word	0x0001cc28
    f9d0:	0001be64 	.word	0x0001be64
    f9d4:	0001c56c 	.word	0x0001c56c

0000f9d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    f9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9dc:	b084      	sub	sp, #16
    f9de:	4604      	mov	r4, r0
    f9e0:	460f      	mov	r7, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    f9e2:	2200      	movs	r2, #0
    f9e4:	f006 fa02 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    f9e8:	b308      	cbz	r0, fa2e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
    f9ea:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    f9ec:	2200      	movs	r2, #0
    f9ee:	4639      	mov	r1, r7
    f9f0:	4620      	mov	r0, r4
    f9f2:	f006 fa1a 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    f9f6:	4606      	mov	r6, r0
    f9f8:	b328      	cbz	r0, fa46 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6e>
  return NumElements(t->dims);
    f9fa:	f8d5 8008 	ldr.w	r8, [r5, #8]
  for (int i = 0; i < dims->size; ++i) {
    f9fe:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    fa02:	2201      	movs	r2, #1
    fa04:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    fa06:	f8d8 1000 	ldr.w	r1, [r8]
    fa0a:	4561      	cmp	r1, ip
    fa0c:	dd25      	ble.n	fa5a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
    count *= dims->data[i];
    fa0e:	eb08 018c 	add.w	r1, r8, ip, lsl #2
    fa12:	f8d1 e004 	ldr.w	lr, [r1, #4]
    fa16:	4670      	mov	r0, lr
    fa18:	17c1      	asrs	r1, r0, #31
    fa1a:	fb02 f101 	mul.w	r1, r2, r1
    fa1e:	fb0e 1103 	mla	r1, lr, r3, r1
    fa22:	fba2 230e 	umull	r2, r3, r2, lr
    fa26:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    fa28:	f10c 0c01 	add.w	ip, ip, #1
    fa2c:	e7eb      	b.n	fa06 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input != nullptr);
    fa2e:	6965      	ldr	r5, [r4, #20]
    fa30:	4b3e      	ldr	r3, [pc, #248]	; (fb2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    fa32:	9300      	str	r3, [sp, #0]
    fa34:	2323      	movs	r3, #35	; 0x23
    fa36:	4a3e      	ldr	r2, [pc, #248]	; (fb30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fa38:	493e      	ldr	r1, [pc, #248]	; (fb34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    fa3a:	4620      	mov	r0, r4
    fa3c:	47a8      	blx	r5
    fa3e:	2001      	movs	r0, #1
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  return kTfLiteOk;
}
    fa40:	b004      	add	sp, #16
    fa42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    fa46:	6965      	ldr	r5, [r4, #20]
    fa48:	4b3b      	ldr	r3, [pc, #236]	; (fb38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
    fa4a:	9300      	str	r3, [sp, #0]
    fa4c:	2325      	movs	r3, #37	; 0x25
    fa4e:	4a38      	ldr	r2, [pc, #224]	; (fb30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fa50:	4938      	ldr	r1, [pc, #224]	; (fb34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    fa52:	4620      	mov	r0, r4
    fa54:	47a8      	blx	r5
    fa56:	2001      	movs	r0, #1
    fa58:	e7f2      	b.n	fa40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TfLiteIntArray* output_shape = output->dims;
    fa5a:	68b0      	ldr	r0, [r6, #8]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    fa5c:	683b      	ldr	r3, [r7, #0]
    fa5e:	681b      	ldr	r3, [r3, #0]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    fa60:	2b01      	cmp	r3, #1
    fa62:	d004      	beq.n	fa6e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
  for (int i = 0; i < output_shape->size; ++i) {
    fa64:	2300      	movs	r3, #0
  int stretch_dim = -1;
    fa66:	f04f 3cff 	mov.w	ip, #4294967295
  int num_output_elements = 1;
    fa6a:	2701      	movs	r7, #1
    fa6c:	e01b      	b.n	faa6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xce>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    fa6e:	6803      	ldr	r3, [r0, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    fa70:	2b01      	cmp	r3, #1
    fa72:	d1f7      	bne.n	fa64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    fa74:	6843      	ldr	r3, [r0, #4]
    fa76:	2b00      	cmp	r3, #0
    fa78:	d1f4      	bne.n	fa64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
    output_shape->size = 0;
    fa7a:	6003      	str	r3, [r0, #0]
    fa7c:	e7f2      	b.n	fa64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    fa7e:	6965      	ldr	r5, [r4, #20]
    fa80:	f04f 33ff 	mov.w	r3, #4294967295
    fa84:	9303      	str	r3, [sp, #12]
    fa86:	f8cd c008 	str.w	ip, [sp, #8]
    fa8a:	4b2c      	ldr	r3, [pc, #176]	; (fb3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x164>)
    fa8c:	9301      	str	r3, [sp, #4]
    fa8e:	4b2c      	ldr	r3, [pc, #176]	; (fb40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
    fa90:	9300      	str	r3, [sp, #0]
    fa92:	233a      	movs	r3, #58	; 0x3a
    fa94:	4a26      	ldr	r2, [pc, #152]	; (fb30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fa96:	492b      	ldr	r1, [pc, #172]	; (fb44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    fa98:	4620      	mov	r0, r4
    fa9a:	47a8      	blx	r5
    fa9c:	2001      	movs	r0, #1
    fa9e:	e7cf      	b.n	fa40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      num_output_elements *= value;
    faa0:	fb01 f707 	mul.w	r7, r1, r7
  for (int i = 0; i < output_shape->size; ++i) {
    faa4:	3301      	adds	r3, #1
    faa6:	6801      	ldr	r1, [r0, #0]
    faa8:	4299      	cmp	r1, r3
    faaa:	dd0a      	ble.n	fac2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xea>
    int value = output_shape->data[i];
    faac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
    fab0:	6849      	ldr	r1, [r1, #4]
    if (value == -1) {
    fab2:	f1b1 3fff 	cmp.w	r1, #4294967295
    fab6:	d1f3      	bne.n	faa0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    fab8:	f1bc 3fff 	cmp.w	ip, #4294967295
    fabc:	d1df      	bne.n	fa7e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
      stretch_dim = i;
    fabe:	469c      	mov	ip, r3
    fac0:	e7f0      	b.n	faa4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
  if (stretch_dim != -1) {
    fac2:	f1bc 3fff 	cmp.w	ip, #4294967295
    fac6:	d006      	beq.n	fad6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    fac8:	fb92 f3f7 	sdiv	r3, r2, r7
    facc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    fad0:	6043      	str	r3, [r0, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    fad2:	fb03 f707 	mul.w	r7, r3, r7
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    fad6:	7828      	ldrb	r0, [r5, #0]
    fad8:	7833      	ldrb	r3, [r6, #0]
    fada:	4298      	cmp	r0, r3
    fadc:	d10f      	bne.n	fafe <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x126>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    fade:	4297      	cmp	r7, r2
    fae0:	d021      	beq.n	fb26 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14e>
    fae2:	6965      	ldr	r5, [r4, #20]
    fae4:	9703      	str	r7, [sp, #12]
    fae6:	9202      	str	r2, [sp, #8]
    fae8:	4b17      	ldr	r3, [pc, #92]	; (fb48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
    faea:	9301      	str	r3, [sp, #4]
    faec:	4b17      	ldr	r3, [pc, #92]	; (fb4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
    faee:	9300      	str	r3, [sp, #0]
    faf0:	2346      	movs	r3, #70	; 0x46
    faf2:	4a0f      	ldr	r2, [pc, #60]	; (fb30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    faf4:	4913      	ldr	r1, [pc, #76]	; (fb44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    faf6:	4620      	mov	r0, r4
    faf8:	47a8      	blx	r5
    fafa:	2001      	movs	r0, #1
    fafc:	e7a0      	b.n	fa40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    fafe:	6967      	ldr	r7, [r4, #20]
    fb00:	f7f9 fc4c 	bl	939c <TfLiteTypeGetName>
    fb04:	4605      	mov	r5, r0
    fb06:	7830      	ldrb	r0, [r6, #0]
    fb08:	f7f9 fc48 	bl	939c <TfLiteTypeGetName>
    fb0c:	9003      	str	r0, [sp, #12]
    fb0e:	9502      	str	r5, [sp, #8]
    fb10:	4b0f      	ldr	r3, [pc, #60]	; (fb50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
    fb12:	9301      	str	r3, [sp, #4]
    fb14:	4b0f      	ldr	r3, [pc, #60]	; (fb54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
    fb16:	9300      	str	r3, [sp, #0]
    fb18:	2345      	movs	r3, #69	; 0x45
    fb1a:	4a05      	ldr	r2, [pc, #20]	; (fb30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fb1c:	490e      	ldr	r1, [pc, #56]	; (fb58 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
    fb1e:	4620      	mov	r0, r4
    fb20:	47b8      	blx	r7
    fb22:	2001      	movs	r0, #1
    fb24:	e78c      	b.n	fa40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  return kTfLiteOk;
    fb26:	2000      	movs	r0, #0
    fb28:	e78a      	b.n	fa40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    fb2a:	bf00      	nop
    fb2c:	0001c900 	.word	0x0001c900
    fb30:	0001cc88 	.word	0x0001cc88
    fb34:	0001be64 	.word	0x0001be64
    fb38:	0001c56c 	.word	0x0001c56c
    fb3c:	0001ccd8 	.word	0x0001ccd8
    fb40:	0001ccdc 	.word	0x0001ccdc
    fb44:	0001c124 	.word	0x0001c124
    fb48:	0001cce8 	.word	0x0001cce8
    fb4c:	0001ccfc 	.word	0x0001ccfc
    fb50:	0001c7dc 	.word	0x0001c7dc
    fb54:	0001c7ec 	.word	0x0001c7ec
    fb58:	0001cb24 	.word	0x0001cb24

0000fb5c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    fb5c:	b570      	push	{r4, r5, r6, lr}
    fb5e:	b084      	sub	sp, #16
    fb60:	4605      	mov	r5, r0
    fb62:	460c      	mov	r4, r1
    fb64:	680b      	ldr	r3, [r1, #0]
    fb66:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    fb68:	2b01      	cmp	r3, #1
    fb6a:	d00a      	beq.n	fb82 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    fb6c:	2b02      	cmp	r3, #2
    fb6e:	d008      	beq.n	fb82 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    fb70:	6944      	ldr	r4, [r0, #20]
    fb72:	4b1a      	ldr	r3, [pc, #104]	; (fbdc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    fb74:	9300      	str	r3, [sp, #0]
    fb76:	234b      	movs	r3, #75	; 0x4b
    fb78:	4a19      	ldr	r2, [pc, #100]	; (fbe0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    fb7a:	491a      	ldr	r1, [pc, #104]	; (fbe4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    fb7c:	47a0      	blx	r4
    fb7e:	2001      	movs	r0, #1
    fb80:	e011      	b.n	fba6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    fb82:	6863      	ldr	r3, [r4, #4]
    fb84:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    fb86:	2b01      	cmp	r3, #1
    fb88:	d00f      	beq.n	fbaa <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
    fb8a:	696e      	ldr	r6, [r5, #20]
    fb8c:	2401      	movs	r4, #1
    fb8e:	9403      	str	r4, [sp, #12]
    fb90:	9302      	str	r3, [sp, #8]
    fb92:	4b15      	ldr	r3, [pc, #84]	; (fbe8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    fb94:	9301      	str	r3, [sp, #4]
    fb96:	4b15      	ldr	r3, [pc, #84]	; (fbec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    fb98:	9300      	str	r3, [sp, #0]
    fb9a:	234c      	movs	r3, #76	; 0x4c
    fb9c:	4a10      	ldr	r2, [pc, #64]	; (fbe0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    fb9e:	4914      	ldr	r1, [pc, #80]	; (fbf0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    fba0:	4628      	mov	r0, r5
    fba2:	47b0      	blx	r6
    fba4:	4620      	mov	r0, r4
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    fba6:	b004      	add	sp, #16
    fba8:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    fbaa:	4621      	mov	r1, r4
    fbac:	4628      	mov	r0, r5
    fbae:	f7ff ff13 	bl	f9d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    fbb2:	2800      	cmp	r0, #0
    fbb4:	d0f7      	beq.n	fba6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    fbb6:	696e      	ldr	r6, [r5, #20]
    fbb8:	4621      	mov	r1, r4
    fbba:	4628      	mov	r0, r5
    fbbc:	f7ff ff0c 	bl	f9d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    fbc0:	2300      	movs	r3, #0
    fbc2:	9303      	str	r3, [sp, #12]
    fbc4:	9002      	str	r0, [sp, #8]
    fbc6:	4b0b      	ldr	r3, [pc, #44]	; (fbf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    fbc8:	9301      	str	r3, [sp, #4]
    fbca:	4b0b      	ldr	r3, [pc, #44]	; (fbf8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    fbcc:	9300      	str	r3, [sp, #0]
    fbce:	234d      	movs	r3, #77	; 0x4d
    fbd0:	4a03      	ldr	r2, [pc, #12]	; (fbe0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    fbd2:	4907      	ldr	r1, [pc, #28]	; (fbf0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    fbd4:	4628      	mov	r0, r5
    fbd6:	47b0      	blx	r6
    fbd8:	2001      	movs	r0, #1
    fbda:	e7e4      	b.n	fba6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    fbdc:	0001cd10 	.word	0x0001cd10
    fbe0:	0001cc88 	.word	0x0001cc88
    fbe4:	0001be64 	.word	0x0001be64
    fbe8:	0001cf20 	.word	0x0001cf20
    fbec:	0001cd40 	.word	0x0001cd40
    fbf0:	0001c124 	.word	0x0001c124
    fbf4:	0001cd54 	.word	0x0001cd54
    fbf8:	0001cd60 	.word	0x0001cd60

0000fbfc <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    fbfc:	b470      	push	{r4, r5, r6}
    fbfe:	4606      	mov	r6, r0
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    fc00:	4604      	mov	r4, r0
    fc02:	4d05      	ldr	r5, [pc, #20]	; (fc18 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
    fc04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fc06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fc08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    fc0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    fc10:	4630      	mov	r0, r6
    fc12:	bc70      	pop	{r4, r5, r6}
    fc14:	4770      	bx	lr
    fc16:	bf00      	nop
    fc18:	00019b00 	.word	0x00019b00

0000fc1c <_ZN6tflite16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    fc1c:	b470      	push	{r4, r5, r6}
    fc1e:	4606      	mov	r6, r0
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    fc20:	4604      	mov	r4, r0
    fc22:	4d05      	ldr	r5, [pc, #20]	; (fc38 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
    fc24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fc26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fc28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    fc2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    fc30:	4630      	mov	r0, r6
    fc32:	bc70      	pop	{r4, r5, r6}
    fc34:	4770      	bx	lr
    fc36:	bf00      	nop
    fc38:	00019b20 	.word	0x00019b20

0000fc3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
}

// Quantized softmax with int8_t/uint8_t input and int8_t/uint8_t/int16_t
// output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
    fc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc40:	b091      	sub	sp, #68	; 0x44
    fc42:	4691      	mov	r9, r2
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32_t input_beta_multiplier = params.input_multiplier;
    fc44:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    fc48:	68c2      	ldr	r2, [r0, #12]
    fc4a:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    fc4c:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    fc4e:	680d      	ldr	r5, [r1, #0]
      gemmlowp::FixedPoint<int32_t, kScaledDiffIntegerBits>;
  using FixedPointAccum =
      gemmlowp::FixedPoint<int32_t, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32_t, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    fc50:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
    fc52:	2200      	movs	r2, #0
    fc54:	e011      	b.n	fc7a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    fc56:	f008 ff25 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fc5a:	f008 ff23 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fc5e:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    fc62:	6866      	ldr	r6, [r4, #4]
    fc64:	e017      	b.n	fc96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    fc66:	f008 ff1d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fc6a:	f008 ff1b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fc6e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    fc72:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    fc74:	42b4      	cmp	r4, r6
    fc76:	d119      	bne.n	fcac <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    fc78:	3201      	adds	r2, #1
    fc7a:	4295      	cmp	r5, r2
    fc7c:	dd18      	ble.n	fcb0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    fc7e:	4290      	cmp	r0, r2
    fc80:	d0fa      	beq.n	fc78 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    fc82:	2a00      	cmp	r2, #0
    fc84:	dbe7      	blt.n	fc56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    fc86:	680c      	ldr	r4, [r1, #0]
    fc88:	42a2      	cmp	r2, r4
    fc8a:	dae6      	bge.n	fc5a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fc8c:	2c05      	cmp	r4, #5
    fc8e:	dde6      	ble.n	fc5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    fc90:	684c      	ldr	r4, [r1, #4]
    fc92:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    fc96:	2a00      	cmp	r2, #0
    fc98:	dbe5      	blt.n	fc66 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    fc9a:	681c      	ldr	r4, [r3, #0]
    fc9c:	42a2      	cmp	r2, r4
    fc9e:	dae4      	bge.n	fc6a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fca0:	2c05      	cmp	r4, #5
    fca2:	dde4      	ble.n	fc6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    fca4:	685c      	ldr	r4, [r3, #4]
    fca6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    fcaa:	e7e3      	b.n	fc74 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    fcac:	f008 fefa 	bl	18aa4 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    fcb0:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    fcb2:	2800      	cmp	r0, #0
    fcb4:	db08      	blt.n	fcc8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    fcb6:	42a8      	cmp	r0, r5
    fcb8:	da06      	bge.n	fcc8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fcba:	2d05      	cmp	r5, #5
    fcbc:	dd06      	ble.n	fccc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    fcbe:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    fcc0:	2200      	movs	r2, #0
  int flat_size = 1;
    fcc2:	2401      	movs	r4, #1
    fcc4:	46ac      	mov	ip, r5
    fcc6:	e007      	b.n	fcd8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    fcc8:	f008 feec 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fccc:	1d0e      	adds	r6, r1, #4
    fcce:	e7f7      	b.n	fcc0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    fcd0:	2501      	movs	r5, #1
    fcd2:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    fcd6:	3201      	adds	r2, #1
    fcd8:	4594      	cmp	ip, r2
    fcda:	dd04      	ble.n	fce6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    fcdc:	4290      	cmp	r0, r2
    fcde:	d0f7      	beq.n	fcd0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    fce0:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    fce4:	e7f5      	b.n	fcd2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    fce6:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    fce8:	2800      	cmp	r0, #0
    fcea:	db2e      	blt.n	fd4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    fcec:	680a      	ldr	r2, [r1, #0]
    fcee:	4290      	cmp	r0, r2
    fcf0:	da2d      	bge.n	fd4e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fcf2:	2a05      	cmp	r2, #5
    fcf4:	dd2d      	ble.n	fd52 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    fcf6:	684a      	ldr	r2, [r1, #4]
    fcf8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    fcfc:	2800      	cmp	r0, #0
    fcfe:	db2c      	blt.n	fd5a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    fd00:	6819      	ldr	r1, [r3, #0]
    fd02:	4288      	cmp	r0, r1
    fd04:	da2b      	bge.n	fd5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd06:	2905      	cmp	r1, #5
    fd08:	dd2b      	ble.n	fd62 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    fd0a:	6859      	ldr	r1, [r3, #4]
    fd0c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    fd10:	4291      	cmp	r1, r2
    fd12:	d12a      	bne.n	fd6a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    fd14:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    fd16:	2800      	cmp	r0, #0
    fd18:	db29      	blt.n	fd6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    fd1a:	6819      	ldr	r1, [r3, #0]
    fd1c:	4288      	cmp	r0, r1
    fd1e:	da28      	bge.n	fd72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd20:	2905      	cmp	r1, #5
    fd22:	dd28      	ble.n	fd76 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    fd24:	685b      	ldr	r3, [r3, #4]
    fd26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    fd2a:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    fd2c:	429a      	cmp	r2, r3
    fd2e:	dc26      	bgt.n	fd7e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    fd30:	ab0f      	add	r3, sp, #60	; 0x3c
    fd32:	f8d3 b000 	ldr.w	fp, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    fd36:	f04f 0a00 	mov.w	sl, #0
    fd3a:	4642      	mov	r2, r8
    fd3c:	46d0      	mov	r8, sl
    fd3e:	9702      	str	r7, [sp, #8]
    fd40:	464b      	mov	r3, r9
    fd42:	46d9      	mov	r9, fp
    fd44:	469b      	mov	fp, r3
    fd46:	4692      	mov	sl, r2
    fd48:	e15d      	b.n	10006 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ca>
    TFLITE_DCHECK_GE(i, 0);
    fd4a:	f008 feab 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fd4e:	f008 fea9 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd52:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    fd56:	684a      	ldr	r2, [r1, #4]
    fd58:	e7d0      	b.n	fcfc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    fd5a:	f008 fea3 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fd5e:	f008 fea1 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd62:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    fd66:	6849      	ldr	r1, [r1, #4]
    fd68:	e7d2      	b.n	fd10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    fd6a:	f008 fe9b 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    fd6e:	f008 fe99 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fd72:	f008 fe97 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd76:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    fd7a:	685b      	ldr	r3, [r3, #4]
    fd7c:	e7d5      	b.n	fd2a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    fd7e:	ab0e      	add	r3, sp, #56	; 0x38
    fd80:	e7d7      	b.n	fd32 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fd82:	f991 2000 	ldrsb.w	r2, [r1]
    fd86:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    fd8a:	3301      	adds	r3, #1
    fd8c:	454b      	cmp	r3, r9
    fd8e:	da0c      	bge.n	fdaa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fd90:	fb09 3208 	mla	r2, r9, r8, r3
    fd94:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    fd98:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    fd9c:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    fda0:	4282      	cmp	r2, r0
    fda2:	dcee      	bgt.n	fd82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    fda4:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    fda8:	e7eb      	b.n	fd82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    fdaa:	2000      	movs	r0, #0
    fdac:	f006 f8fa 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    fdb0:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    fdb2:	2400      	movs	r4, #0
    fdb4:	9f06      	ldr	r7, [sp, #24]
    fdb6:	9e02      	ldr	r6, [sp, #8]
    fdb8:	e01a      	b.n	fdf0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fdba:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fdbe:	d002      	beq.n	fdc6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    fdc0:	f04f 0c00 	mov.w	ip, #0
    fdc4:	e024      	b.n	fe10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    fdc6:	f04f 0c01 	mov.w	ip, #1
    fdca:	e021      	b.n	fe10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fdcc:	4993      	ldr	r1, [pc, #588]	; (1001c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    fdce:	e02f      	b.n	fe30 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fdd0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    fdd2:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fdd6:	f1bc 0f00 	cmp.w	ip, #0
    fdda:	d13a      	bne.n	fe52 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        const int32_t input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    fddc:	f7ff fa90 	bl	f300 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    fde0:	f007 fbec 	bl	175bc <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    fde4:	4601      	mov	r1, r0
    fde6:	4628      	mov	r0, r5
    fde8:	f007 fba4 	bl	17534 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    fdec:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    fdee:	3401      	adds	r4, #1
    fdf0:	454c      	cmp	r4, r9
    fdf2:	da31      	bge.n	fe58 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fdf4:	fb09 4308 	mla	r3, r9, r8, r4
    fdf8:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    fdfc:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    fe00:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    fe02:	4296      	cmp	r6, r2
    fe04:	dcf3      	bgt.n	fdee <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    fe06:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fe08:	4592      	cmp	sl, r2
    fe0a:	d0d6      	beq.n	fdba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    fe0c:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    fe10:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    fe12:	fb0a f301 	mul.w	r3, sl, r1
    fe16:	4650      	mov	r0, sl
    fe18:	17c1      	asrs	r1, r0, #31
    fe1a:	fb02 3101 	mla	r1, r2, r1, r3
    fe1e:	fbaa 2302 	umull	r2, r3, sl, r2
    fe22:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fe24:	2a00      	cmp	r2, #0
    fe26:	f173 0100 	sbcs.w	r1, r3, #0
    fe2a:	dbcf      	blt.n	fdcc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    fe2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fe30:	1852      	adds	r2, r2, r1
    fe32:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    fe36:	4611      	mov	r1, r2
    fe38:	4618      	mov	r0, r3
    fe3a:	2a00      	cmp	r2, #0
    fe3c:	f173 0e00 	sbcs.w	lr, r3, #0
    fe40:	dac6      	bge.n	fdd0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    fe42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fe46:	1851      	adds	r1, r2, r1
    fe48:	f04f 0000 	mov.w	r0, #0
    fe4c:	eb43 0000 	adc.w	r0, r3, r0
    fe50:	e7be      	b.n	fdd0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fe52:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fe56:	e7c1      	b.n	fddc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    fe58:	4628      	mov	r0, r5
    fe5a:	f007 fa78 	bl	1734e <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    fe5e:	f1c0 030c 	rsb	r3, r0, #12
    fe62:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    fe64:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    fe68:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    fe6c:	f7ff f892 	bl	ef94 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    fe70:	9008      	str	r0, [sp, #32]
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
    fe72:	2600      	movs	r6, #0
    fe74:	f8cd 8000 	str.w	r8, [sp]
    fe78:	4657      	mov	r7, sl
    fe7a:	46ca      	mov	sl, r9
    fe7c:	f8cd b004 	str.w	fp, [sp, #4]
    fe80:	e02b      	b.n	feda <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fe82:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fe86:	d001      	beq.n	fe8c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    fe88:	2500      	movs	r5, #0
    fe8a:	e039      	b.n	ff00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
    fe8c:	2501      	movs	r5, #1
    fe8e:	e037      	b.n	ff00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fe90:	4962      	ldr	r1, [pc, #392]	; (1001c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    fe92:	e045      	b.n	ff20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fe94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fe98:	1851      	adds	r1, r2, r1
    fe9a:	f04f 0000 	mov.w	r0, #0
    fe9e:	eb43 0000 	adc.w	r0, r3, r0
    fea2:	e046      	b.n	ff32 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f6>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fea4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fea8:	e048      	b.n	ff3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x300>
  assert(exponent >= 0);
    feaa:	4b5d      	ldr	r3, [pc, #372]	; (10020 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    feac:	4a5d      	ldr	r2, [pc, #372]	; (10024 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    feae:	f44f 71b3 	mov.w	r1, #358	; 0x166
    feb2:	485d      	ldr	r0, [pc, #372]	; (10028 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    feb4:	f002 fdfa 	bl	12aac <__assert_func>
  assert(exponent <= 31);
    feb8:	4b5c      	ldr	r3, [pc, #368]	; (1002c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
    feba:	4a5a      	ldr	r2, [pc, #360]	; (10024 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    febc:	f240 1167 	movw	r1, #359	; 0x167
    fec0:	4859      	ldr	r0, [pc, #356]	; (10028 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    fec2:	f002 fdf3 	bl	12aac <__assert_func>
	return __b;
    fec6:	ab0c      	add	r3, sp, #48	; 0x30
    fec8:	e089      	b.n	ffde <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a2>
	return __b;
    feca:	ab0d      	add	r3, sp, #52	; 0x34
    fecc:	e08e      	b.n	ffec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    fece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    fed2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fed4:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    for (int c = 0; c < depth; ++c) {
    fed8:	3601      	adds	r6, #1
    feda:	4556      	cmp	r6, sl
    fedc:	f280 808b 	bge.w	fff6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ba>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fee0:	9b00      	ldr	r3, [sp, #0]
    fee2:	fb0a 6403 	mla	r4, sl, r3, r6
    fee6:	9b01      	ldr	r3, [sp, #4]
    fee8:	571a      	ldrsb	r2, [r3, r4]
    feea:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    feee:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    fef0:	9b02      	ldr	r3, [sp, #8]
    fef2:	4293      	cmp	r3, r2
    fef4:	dceb      	bgt.n	fece <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    fef6:	9b06      	ldr	r3, [sp, #24]
    fef8:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fefa:	4297      	cmp	r7, r2
    fefc:	d0c1      	beq.n	fe82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    fefe:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    ff00:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    ff02:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    ff06:	fb02 f309 	mul.w	r3, r2, r9
    ff0a:	fb07 3101 	mla	r1, r7, r1, r3
    ff0e:	fba2 2307 	umull	r2, r3, r2, r7
    ff12:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ff14:	2a00      	cmp	r2, #0
    ff16:	f173 0100 	sbcs.w	r1, r3, #0
    ff1a:	dbb9      	blt.n	fe90 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    ff1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ff20:	1852      	adds	r2, r2, r1
    ff22:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ff26:	4611      	mov	r1, r2
    ff28:	4618      	mov	r0, r3
    ff2a:	2a00      	cmp	r2, #0
    ff2c:	f173 0c00 	sbcs.w	ip, r3, #0
    ff30:	dbb0      	blt.n	fe94 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    ff32:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ff34:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ff38:	2d00      	cmp	r5, #0
    ff3a:	d1b3      	bne.n	fea4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    ff3c:	f7ff f9e0 	bl	f300 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    ff40:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    ff42:	9808      	ldr	r0, [sp, #32]
    ff44:	f7ff f8ce 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ff48:	4605      	mov	r5, r0
  assert(exponent >= 0);
    ff4a:	9b07      	ldr	r3, [sp, #28]
    ff4c:	f113 090f 	adds.w	r9, r3, #15
    ff50:	d4ab      	bmi.n	feaa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    ff52:	f1b9 0f1f 	cmp.w	r9, #31
    ff56:	dcaf      	bgt.n	feb8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ff58:	f04f 0b01 	mov.w	fp, #1
    ff5c:	fa0b f009 	lsl.w	r0, fp, r9
    ff60:	3801      	subs	r0, #1
    ff62:	f006 f81f 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ff66:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ff68:	2000      	movs	r0, #0
    ff6a:	f006 f81b 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ff6e:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    ff70:	4658      	mov	r0, fp
    ff72:	f006 f817 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ff76:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    ff78:	4641      	mov	r1, r8
    ff7a:	4628      	mov	r0, r5
    ff7c:	f006 f813 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ff80:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ff82:	4659      	mov	r1, fp
    ff84:	4640      	mov	r0, r8
    ff86:	f006 f810 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ff8a:	4680      	mov	r8, r0
    ff8c:	9903      	ldr	r1, [sp, #12]
    ff8e:	4628      	mov	r0, r5
    ff90:	f006 f817 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ff94:	f8dd b010 	ldr.w	fp, [sp, #16]
    ff98:	4659      	mov	r1, fp
    ff9a:	f006 f804 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ff9e:	4601      	mov	r1, r0
    ffa0:	4640      	mov	r0, r8
    ffa2:	f006 f804 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ffa6:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    ffa8:	4649      	mov	r1, r9
    ffaa:	4628      	mov	r0, r5
    ffac:	f005 fffd 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ffb0:	4605      	mov	r5, r0
    ffb2:	4641      	mov	r1, r8
    ffb4:	9805      	ldr	r0, [sp, #20]
    ffb6:	f006 f80c 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ffba:	4659      	mov	r1, fp
    ffbc:	f005 fff3 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ffc0:	4601      	mov	r1, r0
    ffc2:	4628      	mov	r0, r5
    ffc4:	f005 fff3 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    ffc8:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
        const int32_t shifted_output =
    ffcc:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    ffce:	f647 73ff 	movw	r3, #32767	; 0x7fff
    ffd2:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    ffd4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    ffd8:	f6bf af75 	bge.w	fec6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    ffdc:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    ffde:	4a14      	ldr	r2, [pc, #80]	; (10030 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f4>)
    ffe0:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    ffe2:	681a      	ldr	r2, [r3, #0]
    ffe4:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    ffe8:	f6ff af6f 	blt.w	feca <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    ffec:	681b      	ldr	r3, [r3, #0]
    ffee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fff0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    fff4:	e770      	b.n	fed8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29c>
    fff6:	f8dd 8000 	ldr.w	r8, [sp]
    fffa:	46d1      	mov	r9, sl
    fffc:	46ba      	mov	sl, r7
    fffe:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   10002:	f108 0801 	add.w	r8, r8, #1
   10006:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10008:	4598      	cmp	r8, r3
   1000a:	da04      	bge.n	10016 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1000c:	2380      	movs	r3, #128	; 0x80
   1000e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
   10012:	2300      	movs	r3, #0
   10014:	e6ba      	b.n	fd8c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
      }
    }
  }
}
   10016:	b011      	add	sp, #68	; 0x44
   10018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1001c:	c0000001 	.word	0xc0000001
   10020:	0001c580 	.word	0x0001c580
   10024:	0001c590 	.word	0x0001c590
   10028:	0001c5e8 	.word	0x0001c5e8
   1002c:	0001c644 	.word	0x0001c644
   10030:	ffff8000 	.word	0xffff8000

00010034 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   10034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10038:	b091      	sub	sp, #68	; 0x44
   1003a:	4691      	mov	r9, r2
  const int32_t input_beta_multiplier = params.input_multiplier;
   1003c:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
   10040:	68c2      	ldr	r2, [r0, #12]
   10042:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
   10044:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
   10046:	680d      	ldr	r5, [r1, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   10048:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
   1004a:	2200      	movs	r2, #0
   1004c:	e011      	b.n	10072 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
   1004e:	f008 fd29 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10052:	f008 fd27 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10056:	eb01 0482 	add.w	r4, r1, r2, lsl #2
   1005a:	6866      	ldr	r6, [r4, #4]
   1005c:	e017      	b.n	1008e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
   1005e:	f008 fd21 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10062:	f008 fd1f 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10066:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   1006a:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1006c:	42b4      	cmp	r4, r6
   1006e:	d119      	bne.n	100a4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
   10070:	3201      	adds	r2, #1
   10072:	4295      	cmp	r5, r2
   10074:	dd18      	ble.n	100a8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
   10076:	4290      	cmp	r0, r2
   10078:	d0fa      	beq.n	10070 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
   1007a:	2a00      	cmp	r2, #0
   1007c:	dbe7      	blt.n	1004e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
   1007e:	680c      	ldr	r4, [r1, #0]
   10080:	42a2      	cmp	r2, r4
   10082:	dae6      	bge.n	10052 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10084:	2c05      	cmp	r4, #5
   10086:	dde6      	ble.n	10056 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
   10088:	684c      	ldr	r4, [r1, #4]
   1008a:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   1008e:	2a00      	cmp	r2, #0
   10090:	dbe5      	blt.n	1005e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
   10092:	681c      	ldr	r4, [r3, #0]
   10094:	42a2      	cmp	r2, r4
   10096:	dae4      	bge.n	10062 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10098:	2c05      	cmp	r4, #5
   1009a:	dde4      	ble.n	10066 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
   1009c:	685c      	ldr	r4, [r3, #4]
   1009e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
   100a2:	e7e3      	b.n	1006c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   100a4:	f008 fcfe 	bl	18aa4 <abort>
  inline int32_t DimensionsCount() const { return size_; }
   100a8:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   100aa:	2800      	cmp	r0, #0
   100ac:	db08      	blt.n	100c0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
   100ae:	42a8      	cmp	r0, r5
   100b0:	da06      	bge.n	100c0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   100b2:	2d05      	cmp	r5, #5
   100b4:	dd06      	ble.n	100c4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
   100b6:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
   100b8:	2200      	movs	r2, #0
  int flat_size = 1;
   100ba:	2401      	movs	r4, #1
   100bc:	46ac      	mov	ip, r5
   100be:	e007      	b.n	100d0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   100c0:	f008 fcf0 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   100c4:	1d0e      	adds	r6, r1, #4
   100c6:	e7f7      	b.n	100b8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   100c8:	2501      	movs	r5, #1
   100ca:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
   100ce:	3201      	adds	r2, #1
   100d0:	4594      	cmp	ip, r2
   100d2:	dd04      	ble.n	100de <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   100d4:	4290      	cmp	r0, r2
   100d6:	d0f7      	beq.n	100c8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
   100d8:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
   100dc:	e7f5      	b.n	100ca <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
   100de:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
   100e0:	2800      	cmp	r0, #0
   100e2:	db2e      	blt.n	10142 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
   100e4:	680a      	ldr	r2, [r1, #0]
   100e6:	4290      	cmp	r0, r2
   100e8:	da2d      	bge.n	10146 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   100ea:	2a05      	cmp	r2, #5
   100ec:	dd2d      	ble.n	1014a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
   100ee:	684a      	ldr	r2, [r1, #4]
   100f0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   100f4:	2800      	cmp	r0, #0
   100f6:	db2c      	blt.n	10152 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
   100f8:	6819      	ldr	r1, [r3, #0]
   100fa:	4288      	cmp	r0, r1
   100fc:	da2b      	bge.n	10156 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   100fe:	2905      	cmp	r1, #5
   10100:	dd2b      	ble.n	1015a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   10102:	6859      	ldr	r1, [r3, #4]
   10104:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10108:	4291      	cmp	r1, r2
   1010a:	d12a      	bne.n	10162 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1010c:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
   1010e:	2800      	cmp	r0, #0
   10110:	db29      	blt.n	10166 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
   10112:	6819      	ldr	r1, [r3, #0]
   10114:	4288      	cmp	r0, r1
   10116:	da28      	bge.n	1016a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10118:	2905      	cmp	r1, #5
   1011a:	dd28      	ble.n	1016e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
   1011c:	685b      	ldr	r3, [r3, #4]
   1011e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   10122:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
   10124:	429a      	cmp	r2, r3
   10126:	dc26      	bgt.n	10176 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
   10128:	ab0f      	add	r3, sp, #60	; 0x3c
   1012a:	f8d3 b000 	ldr.w	fp, [r3]
  for (int i = 0; i < outer_size; ++i) {
   1012e:	f04f 0a00 	mov.w	sl, #0
   10132:	4642      	mov	r2, r8
   10134:	46d0      	mov	r8, sl
   10136:	9702      	str	r7, [sp, #8]
   10138:	464b      	mov	r3, r9
   1013a:	46d9      	mov	r9, fp
   1013c:	469b      	mov	fp, r3
   1013e:	4692      	mov	sl, r2
   10140:	e158      	b.n	103f4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c0>
    TFLITE_DCHECK_GE(i, 0);
   10142:	f008 fcaf 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10146:	f008 fcad 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1014a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1014e:	684a      	ldr	r2, [r1, #4]
   10150:	e7d0      	b.n	100f4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
   10152:	f008 fca7 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10156:	f008 fca5 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1015a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
   1015e:	6849      	ldr	r1, [r1, #4]
   10160:	e7d2      	b.n	10108 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10162:	f008 fc9f 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
   10166:	f008 fc9d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1016a:	f008 fc9b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1016e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   10172:	685b      	ldr	r3, [r3, #4]
   10174:	e7d5      	b.n	10122 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
   10176:	ab0e      	add	r3, sp, #56	; 0x38
   10178:	e7d7      	b.n	1012a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1017a:	f991 2000 	ldrsb.w	r2, [r1]
   1017e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
   10182:	3301      	adds	r3, #1
   10184:	454b      	cmp	r3, r9
   10186:	da0c      	bge.n	101a2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   10188:	fb09 3208 	mla	r2, r9, r8, r3
   1018c:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
   10190:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
   10194:	f91b 2002 	ldrsb.w	r2, [fp, r2]
   10198:	4282      	cmp	r2, r0
   1019a:	dcee      	bgt.n	1017a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
   1019c:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   101a0:	e7eb      	b.n	1017a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
   101a2:	2000      	movs	r0, #0
   101a4:	f005 fefe 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   101a8:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
   101aa:	2400      	movs	r4, #0
   101ac:	9f06      	ldr	r7, [sp, #24]
   101ae:	9e02      	ldr	r6, [sp, #8]
   101b0:	e01a      	b.n	101e8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   101b2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   101b6:	d002      	beq.n	101be <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
   101b8:	f04f 0c00 	mov.w	ip, #0
   101bc:	e024      	b.n	10208 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
   101be:	f04f 0c01 	mov.w	ip, #1
   101c2:	e021      	b.n	10208 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   101c4:	4991      	ldr	r1, [pc, #580]	; (1040c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
   101c6:	e02f      	b.n	10228 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   101c8:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
   101ca:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   101ce:	f1bc 0f00 	cmp.w	ip, #0
   101d2:	d13a      	bne.n	1024a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   101d4:	f7ff f894 	bl	f300 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   101d8:	f007 f9f0 	bl	175bc <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
   101dc:	4601      	mov	r1, r0
   101de:	4628      	mov	r0, r5
   101e0:	f007 f9a8 	bl	17534 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
   101e4:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
   101e6:	3401      	adds	r4, #1
   101e8:	454c      	cmp	r4, r9
   101ea:	da31      	bge.n	10250 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   101ec:	fb09 4308 	mla	r3, r9, r8, r4
   101f0:	f91b 2003 	ldrsb.w	r2, [fp, r3]
   101f4:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
   101f8:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
   101fa:	4296      	cmp	r6, r2
   101fc:	dcf3      	bgt.n	101e6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
   101fe:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   10200:	4592      	cmp	sl, r2
   10202:	d0d6      	beq.n	101b2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
   10204:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
   10208:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
   1020a:	fb0a f301 	mul.w	r3, sl, r1
   1020e:	4650      	mov	r0, sl
   10210:	17c1      	asrs	r1, r0, #31
   10212:	fb02 3101 	mla	r1, r2, r1, r3
   10216:	fbaa 2302 	umull	r2, r3, sl, r2
   1021a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   1021c:	2a00      	cmp	r2, #0
   1021e:	f173 0100 	sbcs.w	r1, r3, #0
   10222:	dbcf      	blt.n	101c4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
   10224:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   10228:	1852      	adds	r2, r2, r1
   1022a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1022e:	4611      	mov	r1, r2
   10230:	4618      	mov	r0, r3
   10232:	2a00      	cmp	r2, #0
   10234:	f173 0e00 	sbcs.w	lr, r3, #0
   10238:	dac6      	bge.n	101c8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
   1023a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1023e:	1851      	adds	r1, r2, r1
   10240:	f04f 0000 	mov.w	r0, #0
   10244:	eb43 0000 	adc.w	r0, r3, r0
   10248:	e7be      	b.n	101c8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1024a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1024e:	e7c1      	b.n	101d4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
   10250:	4628      	mov	r0, r5
   10252:	f007 f87c 	bl	1734e <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   10256:	f1c0 030c 	rsb	r3, r0, #12
   1025a:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
   1025c:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
   10260:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   10264:	f7fe fe96 	bl	ef94 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   10268:	9008      	str	r0, [sp, #32]
    for (int c = 0; c < depth; ++c) {
   1026a:	2600      	movs	r6, #0
   1026c:	f8cd 8000 	str.w	r8, [sp]
   10270:	4657      	mov	r7, sl
   10272:	46ca      	mov	sl, r9
   10274:	f8cd b004 	str.w	fp, [sp, #4]
   10278:	e029      	b.n	102ce <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1027a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1027e:	d001      	beq.n	10284 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
   10280:	2500      	movs	r5, #0
   10282:	e037      	b.n	102f4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
   10284:	2501      	movs	r5, #1
   10286:	e035      	b.n	102f4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   10288:	4960      	ldr	r1, [pc, #384]	; (1040c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
   1028a:	e043      	b.n	10314 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1028c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10290:	1851      	adds	r1, r2, r1
   10292:	f04f 0000 	mov.w	r0, #0
   10296:	eb43 0000 	adc.w	r0, r3, r0
   1029a:	e044      	b.n	10326 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1029c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   102a0:	e046      	b.n	10330 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2fc>
  assert(exponent >= 0);
   102a2:	4b5b      	ldr	r3, [pc, #364]	; (10410 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
   102a4:	4a5b      	ldr	r2, [pc, #364]	; (10414 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
   102a6:	f44f 71b3 	mov.w	r1, #358	; 0x166
   102aa:	485b      	ldr	r0, [pc, #364]	; (10418 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
   102ac:	f002 fbfe 	bl	12aac <__assert_func>
  assert(exponent <= 31);
   102b0:	4b5a      	ldr	r3, [pc, #360]	; (1041c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
   102b2:	4a58      	ldr	r2, [pc, #352]	; (10414 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
   102b4:	f240 1167 	movw	r1, #359	; 0x167
   102b8:	4857      	ldr	r0, [pc, #348]	; (10418 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
   102ba:	f002 fbf7 	bl	12aac <__assert_func>
	return __b;
   102be:	ab0c      	add	r3, sp, #48	; 0x30
   102c0:	e084      	b.n	103cc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>
	return __b;
   102c2:	ab0d      	add	r3, sp, #52	; 0x34
   102c4:	e08a      	b.n	103dc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a8>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   102c6:	2380      	movs	r3, #128	; 0x80
   102c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   102ca:	5513      	strb	r3, [r2, r4]
    for (int c = 0; c < depth; ++c) {
   102cc:	3601      	adds	r6, #1
   102ce:	4556      	cmp	r6, sl
   102d0:	f280 8088 	bge.w	103e4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   102d4:	9b00      	ldr	r3, [sp, #0]
   102d6:	fb0a 6403 	mla	r4, sl, r3, r6
   102da:	9b01      	ldr	r3, [sp, #4]
   102dc:	571a      	ldrsb	r2, [r3, r4]
   102de:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
   102e2:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
   102e4:	9b02      	ldr	r3, [sp, #8]
   102e6:	4293      	cmp	r3, r2
   102e8:	dced      	bgt.n	102c6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   102ea:	9b06      	ldr	r3, [sp, #24]
   102ec:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   102ee:	4297      	cmp	r7, r2
   102f0:	d0c3      	beq.n	1027a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
   102f2:	2500      	movs	r5, #0
  std::int64_t a_64(a);
   102f4:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
   102f6:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
   102fa:	fb02 f309 	mul.w	r3, r2, r9
   102fe:	fb07 3101 	mla	r1, r7, r1, r3
   10302:	fba2 2307 	umull	r2, r3, r2, r7
   10306:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   10308:	2a00      	cmp	r2, #0
   1030a:	f173 0100 	sbcs.w	r1, r3, #0
   1030e:	dbbb      	blt.n	10288 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
   10310:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   10314:	1852      	adds	r2, r2, r1
   10316:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1031a:	4611      	mov	r1, r2
   1031c:	4618      	mov	r0, r3
   1031e:	2a00      	cmp	r2, #0
   10320:	f173 0c00 	sbcs.w	ip, r3, #0
   10324:	dbb2      	blt.n	1028c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
   10326:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
   10328:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1032c:	2d00      	cmp	r5, #0
   1032e:	d1b5      	bne.n	1029c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   10330:	f7fe ffe6 	bl	f300 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   10334:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   10336:	9808      	ldr	r0, [sp, #32]
   10338:	f7fe fed4 	bl	f0e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
   1033c:	4605      	mov	r5, r0
  assert(exponent >= 0);
   1033e:	9b07      	ldr	r3, [sp, #28]
   10340:	f113 0917 	adds.w	r9, r3, #23
   10344:	d4ad      	bmi.n	102a2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
   10346:	f1b9 0f1f 	cmp.w	r9, #31
   1034a:	dcb1      	bgt.n	102b0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1034c:	f04f 0b01 	mov.w	fp, #1
   10350:	fa0b f009 	lsl.w	r0, fp, r9
   10354:	3801      	subs	r0, #1
   10356:	f005 fe25 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1035a:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
   1035c:	2000      	movs	r0, #0
   1035e:	f005 fe21 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   10362:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
   10364:	4658      	mov	r0, fp
   10366:	f005 fe1d 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1036a:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
   1036c:	4641      	mov	r1, r8
   1036e:	4628      	mov	r0, r5
   10370:	f005 fe19 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   10374:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   10376:	4659      	mov	r1, fp
   10378:	4640      	mov	r0, r8
   1037a:	f005 fe16 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1037e:	4680      	mov	r8, r0
   10380:	9903      	ldr	r1, [sp, #12]
   10382:	4628      	mov	r0, r5
   10384:	f005 fe1d 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   10388:	f8dd b010 	ldr.w	fp, [sp, #16]
   1038c:	4659      	mov	r1, fp
   1038e:	f005 fe0a 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   10392:	4601      	mov	r1, r0
   10394:	4640      	mov	r0, r8
   10396:	f005 fe0a 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
   1039a:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
   1039c:	4649      	mov	r1, r9
   1039e:	4628      	mov	r0, r5
   103a0:	f005 fe03 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   103a4:	4605      	mov	r5, r0
   103a6:	4641      	mov	r1, r8
   103a8:	9805      	ldr	r0, [sp, #20]
   103aa:	f005 fe12 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   103ae:	4659      	mov	r1, fp
   103b0:	f005 fdf9 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   103b4:	4601      	mov	r1, r0
   103b6:	4628      	mov	r0, r5
   103b8:	f005 fdf9 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
   103bc:	3880      	subs	r0, #128	; 0x80
        const int32_t shifted_output =
   103be:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   103c0:	237f      	movs	r3, #127	; 0x7f
   103c2:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
   103c4:	4298      	cmp	r0, r3
   103c6:	f73f af7a 	bgt.w	102be <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
   103ca:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
   103cc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   103d0:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
   103d2:	681a      	ldr	r2, [r3, #0]
   103d4:	f112 0f80 	cmn.w	r2, #128	; 0x80
   103d8:	f6ff af73 	blt.w	102c2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   103dc:	681b      	ldr	r3, [r3, #0]
   103de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   103e0:	5513      	strb	r3, [r2, r4]
   103e2:	e773      	b.n	102cc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x298>
   103e4:	f8dd 8000 	ldr.w	r8, [sp]
   103e8:	46d1      	mov	r9, sl
   103ea:	46ba      	mov	sl, r7
   103ec:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   103f0:	f108 0801 	add.w	r8, r8, #1
   103f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103f6:	4598      	cmp	r8, r3
   103f8:	da04      	bge.n	10404 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d0>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   103fa:	2380      	movs	r3, #128	; 0x80
   103fc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
   10400:	2300      	movs	r3, #0
   10402:	e6bf      	b.n	10184 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
}
   10404:	b011      	add	sp, #68	; 0x44
   10406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1040a:	bf00      	nop
   1040c:	c0000001 	.word	0xc0000001
   10410:	0001c580 	.word	0x0001c580
   10414:	0001c590 	.word	0x0001c590
   10418:	0001c5e8 	.word	0x0001c5e8
   1041c:	0001c644 	.word	0x0001c644

00010420 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
   10420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10424:	b0bf      	sub	sp, #252	; 0xfc
   10426:	4604      	mov	r4, r0
   10428:	460d      	mov	r5, r1
   1042a:	4693      	mov	fp, r2
  if (input->type == kTfLiteInt8) {
   1042c:	7a03      	ldrb	r3, [r0, #8]
   1042e:	2b09      	cmp	r3, #9
   10430:	d152      	bne.n	104d8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xb8>
    if (output->type == kTfLiteInt16) {
   10432:	7a0b      	ldrb	r3, [r1, #8]
   10434:	2b07      	cmp	r3, #7
   10436:	d027      	beq.n	10488 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x68>
          op_data, tflite::micro::GetTensorShape(input),
   10438:	4601      	mov	r1, r0
   1043a:	a81e      	add	r0, sp, #120	; 0x78
   1043c:	f006 ff5d 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10440:	4620      	mov	r0, r4
   10442:	f005 fda5 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   10446:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
   10448:	4629      	mov	r1, r5
   1044a:	a824      	add	r0, sp, #144	; 0x90
   1044c:	f006 ff55 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10450:	4628      	mov	r0, r5
   10452:	f005 fda3 	bl	15f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   10456:	9000      	str	r0, [sp, #0]
   10458:	ab24      	add	r3, sp, #144	; 0x90
   1045a:	4622      	mov	r2, r4
   1045c:	a91e      	add	r1, sp, #120	; 0x78
   1045e:	4658      	mov	r0, fp
   10460:	f7ff fde8 	bl	10034 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
   10464:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10466:	2b05      	cmp	r3, #5
   10468:	dd03      	ble.n	10472 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
      delete[] dims_pointer_;
   1046a:	9825      	ldr	r0, [sp, #148]	; 0x94
   1046c:	b108      	cbz	r0, 10472 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
   1046e:	f008 fb04 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   10472:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10474:	2b05      	cmp	r3, #5
   10476:	f340 828b 	ble.w	10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   1047a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1047c:	2800      	cmp	r0, #0
   1047e:	f000 8287 	beq.w	10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   10482:	f008 fafa 	bl	18a7a <_ZdaPv>
   10486:	e283      	b.n	10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
          op_data, tflite::micro::GetTensorShape(input),
   10488:	4601      	mov	r1, r0
   1048a:	a812      	add	r0, sp, #72	; 0x48
   1048c:	f006 ff35 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10490:	4620      	mov	r0, r4
   10492:	f005 fd7d 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   10496:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
   10498:	4629      	mov	r1, r5
   1049a:	a818      	add	r0, sp, #96	; 0x60
   1049c:	f006 ff2d 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   104a0:	4628      	mov	r0, r5
   104a2:	f006 f97a 	bl	1679a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
   104a6:	9000      	str	r0, [sp, #0]
   104a8:	ab18      	add	r3, sp, #96	; 0x60
   104aa:	4622      	mov	r2, r4
   104ac:	a912      	add	r1, sp, #72	; 0x48
   104ae:	4658      	mov	r0, fp
   104b0:	f7ff fbc4 	bl	fc3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
   104b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   104b6:	2b05      	cmp	r3, #5
   104b8:	dd03      	ble.n	104c2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
      delete[] dims_pointer_;
   104ba:	9819      	ldr	r0, [sp, #100]	; 0x64
   104bc:	b108      	cbz	r0, 104c2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
   104be:	f008 fadc 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   104c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   104c4:	2b05      	cmp	r3, #5
   104c6:	f340 8263 	ble.w	10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   104ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
   104cc:	2800      	cmp	r0, #0
   104ce:	f000 825f 	beq.w	10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   104d2:	f008 fad2 	bl	18a7a <_ZdaPv>
   104d6:	e25b      	b.n	10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
        op_data, tflite::micro::GetTensorShape(input),
   104d8:	4601      	mov	r1, r0
   104da:	a82a      	add	r0, sp, #168	; 0xa8
   104dc:	f006 ff0d 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
   104e0:	4620      	mov	r0, r4
   104e2:	f006 f954 	bl	1678e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
   104e6:	9005      	str	r0, [sp, #20]
        tflite::micro::GetTensorShape(output),
   104e8:	4629      	mov	r1, r5
   104ea:	a830      	add	r0, sp, #192	; 0xc0
   104ec:	f006 ff05 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
   104f0:	4628      	mov	r0, r5
   104f2:	f006 f952 	bl	1679a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
   104f6:	9006      	str	r0, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   104f8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   104fa:	1e62      	subs	r2, r4, #1
  for (int i = 0; i < dims_count; ++i) {
   104fc:	2300      	movs	r3, #0
   104fe:	e015      	b.n	1052c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10c>
    TFLITE_DCHECK_GE(i, 0);
   10500:	f008 fad0 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10504:	f008 face 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10508:	a93e      	add	r1, sp, #248	; 0xf8
   1050a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1050e:	f851 1c4c 	ldr.w	r1, [r1, #-76]
   10512:	e019      	b.n	10548 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x128>
    TFLITE_DCHECK_GE(i, 0);
   10514:	f008 fac6 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10518:	f008 fac4 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1051c:	a83e      	add	r0, sp, #248	; 0xf8
   1051e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   10522:	f850 0c34 	ldr.w	r0, [r0, #-52]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10526:	4288      	cmp	r0, r1
   10528:	d119      	bne.n	1055e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x13e>
  for (int i = 0; i < dims_count; ++i) {
   1052a:	3301      	adds	r3, #1
   1052c:	429c      	cmp	r4, r3
   1052e:	dd18      	ble.n	10562 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x142>
    if (i != skip_dim) {
   10530:	429a      	cmp	r2, r3
   10532:	d0fa      	beq.n	1052a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
    TFLITE_DCHECK_GE(i, 0);
   10534:	2b00      	cmp	r3, #0
   10536:	dbe3      	blt.n	10500 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe0>
    TFLITE_DCHECK_LT(i, size_);
   10538:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1053a:	428b      	cmp	r3, r1
   1053c:	dae2      	bge.n	10504 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1053e:	2905      	cmp	r1, #5
   10540:	dde2      	ble.n	10508 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe8>
   10542:	992b      	ldr	r1, [sp, #172]	; 0xac
   10544:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10548:	2b00      	cmp	r3, #0
   1054a:	dbe3      	blt.n	10514 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   1054c:	9830      	ldr	r0, [sp, #192]	; 0xc0
   1054e:	4283      	cmp	r3, r0
   10550:	dae2      	bge.n	10518 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10552:	2805      	cmp	r0, #5
   10554:	dde2      	ble.n	1051c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xfc>
   10556:	9831      	ldr	r0, [sp, #196]	; 0xc4
   10558:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1055c:	e7e3      	b.n	10526 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x106>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1055e:	f008 faa1 	bl	18aa4 <abort>
  inline int32_t DimensionsCount() const { return size_; }
   10562:	982a      	ldr	r0, [sp, #168]	; 0xa8
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10564:	2a00      	cmp	r2, #0
   10566:	db05      	blt.n	10574 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
   10568:	4282      	cmp	r2, r0
   1056a:	da03      	bge.n	10574 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1056c:	2805      	cmp	r0, #5
   1056e:	dd03      	ble.n	10578 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x158>
   10570:	9c2b      	ldr	r4, [sp, #172]	; 0xac
   10572:	e002      	b.n	1057a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10574:	f008 fa96 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   10578:	ac2b      	add	r4, sp, #172	; 0xac
  for (int i = 0; i < dims_count; ++i) {
   1057a:	2300      	movs	r3, #0
  int flat_size = 1;
   1057c:	2501      	movs	r5, #1
   1057e:	e004      	b.n	1058a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x16a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   10580:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   10584:	fb01 f505 	mul.w	r5, r1, r5
  for (int i = 0; i < dims_count; ++i) {
   10588:	3301      	adds	r3, #1
   1058a:	4298      	cmp	r0, r3
   1058c:	dd03      	ble.n	10596 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x176>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   1058e:	429a      	cmp	r2, r3
   10590:	d1f6      	bne.n	10580 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x160>
   10592:	2101      	movs	r1, #1
   10594:	e7f6      	b.n	10584 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x164>
   10596:	950d      	str	r5, [sp, #52]	; 0x34
    TFLITE_DCHECK_GE(i, 0);
   10598:	2a00      	cmp	r2, #0
   1059a:	db2a      	blt.n	105f2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d2>
    TFLITE_DCHECK_LT(i, size_);
   1059c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1059e:	429a      	cmp	r2, r3
   105a0:	da29      	bge.n	105f6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   105a2:	2b05      	cmp	r3, #5
   105a4:	dd29      	ble.n	105fa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1da>
   105a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   105a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   105ac:	2a00      	cmp	r2, #0
   105ae:	db2a      	blt.n	10606 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1e6>
    TFLITE_DCHECK_LT(i, size_);
   105b0:	9930      	ldr	r1, [sp, #192]	; 0xc0
   105b2:	428a      	cmp	r2, r1
   105b4:	da29      	bge.n	1060a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   105b6:	2905      	cmp	r1, #5
   105b8:	dd29      	ble.n	1060e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ee>
   105ba:	9931      	ldr	r1, [sp, #196]	; 0xc4
   105bc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   105c0:	4299      	cmp	r1, r3
   105c2:	d12a      	bne.n	1061a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fa>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   105c4:	933b      	str	r3, [sp, #236]	; 0xec
    TFLITE_DCHECK_GE(i, 0);
   105c6:	2a00      	cmp	r2, #0
   105c8:	db29      	blt.n	1061e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fe>
    TFLITE_DCHECK_LT(i, size_);
   105ca:	9930      	ldr	r1, [sp, #192]	; 0xc0
   105cc:	428a      	cmp	r2, r1
   105ce:	da28      	bge.n	10622 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   105d0:	2905      	cmp	r1, #5
   105d2:	dd28      	ble.n	10626 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x206>
   105d4:	9931      	ldr	r1, [sp, #196]	; 0xc4
   105d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   105da:	923a      	str	r2, [sp, #232]	; 0xe8
      if (__b < __a)
   105dc:	4293      	cmp	r3, r2
   105de:	dc28      	bgt.n	10632 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x212>
      return __a;
   105e0:	ab3b      	add	r3, sp, #236	; 0xec
   105e2:	f8d3 a000 	ldr.w	sl, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
   105e6:	f04f 0800 	mov.w	r8, #0
   105ea:	46c1      	mov	r9, r8
   105ec:	46d8      	mov	r8, fp
   105ee:	46d3      	mov	fp, sl
   105f0:	e1b6      	b.n	10960 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x540>
    TFLITE_DCHECK_GE(i, 0);
   105f2:	f008 fa57 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   105f6:	f008 fa55 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   105fa:	ab3e      	add	r3, sp, #248	; 0xf8
   105fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   10600:	f853 3c4c 	ldr.w	r3, [r3, #-76]
   10604:	e7d2      	b.n	105ac <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x18c>
    TFLITE_DCHECK_GE(i, 0);
   10606:	f008 fa4d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1060a:	f008 fa4b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1060e:	a93e      	add	r1, sp, #248	; 0xf8
   10610:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   10614:	f851 1c34 	ldr.w	r1, [r1, #-52]
   10618:	e7d2      	b.n	105c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1a0>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1061a:	f008 fa43 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
   1061e:	f008 fa41 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10622:	f008 fa3f 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10626:	a93e      	add	r1, sp, #248	; 0xf8
   10628:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1062c:	f852 2c34 	ldr.w	r2, [r2, #-52]
   10630:	e7d3      	b.n	105da <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ba>
	return __b;
   10632:	ab3a      	add	r3, sp, #232	; 0xe8
   10634:	e7d5      	b.n	105e2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1c2>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   10636:	f9b2 2000 	ldrsh.w	r2, [r2]
   1063a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
   1063e:	3301      	adds	r3, #1
   10640:	455b      	cmp	r3, fp
   10642:	da0c      	bge.n	1065e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x23e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   10644:	fb0b 3109 	mla	r1, fp, r9, r3
   10648:	eb00 0241 	add.w	r2, r0, r1, lsl #1
      if (__a < __b)
   1064c:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
   10650:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
   10654:	428c      	cmp	r4, r1
   10656:	dbee      	blt.n	10636 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
      return __a;
   10658:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
   1065c:	e7eb      	b.n	10636 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
   1065e:	fb0b f309 	mul.w	r3, fp, r9
   10662:	9307      	str	r3, [sp, #28]
   10664:	9a06      	ldr	r2, [sp, #24]
   10666:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1066a:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   1066c:	2600      	movs	r6, #0
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
   1066e:	46b2      	mov	sl, r6
   10670:	f8cd 9010 	str.w	r9, [sp, #16]
   10674:	e07c      	b.n	10770 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x350>
  int right_shift = shift > 0 ? 0 : -shift;
   10676:	426d      	negs	r5, r5
   10678:	e091      	b.n	1079e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x37e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1067a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1067e:	d001      	beq.n	10684 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x264>
   10680:	2700      	movs	r7, #0
   10682:	e091      	b.n	107a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
   10684:	2701      	movs	r7, #1
   10686:	e08f      	b.n	107a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   10688:	49c3      	ldr	r1, [pc, #780]	; (10998 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x578>)
   1068a:	e0a1      	b.n	107d0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3b0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1068c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
   1068e:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   10692:	2f00      	cmp	r7, #0
   10694:	f040 80ae 	bne.w	107f4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3d4>
  assert(exponent >= 0);
   10698:	2d00      	cmp	r5, #0
   1069a:	f2c0 80ae 	blt.w	107fa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3da>
  assert(exponent <= 31);
   1069e:	2d1f      	cmp	r5, #31
   106a0:	f300 80b2 	bgt.w	10808 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3e8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   106a4:	2701      	movs	r7, #1
   106a6:	fa07 f005 	lsl.w	r0, r7, r5
   106aa:	3801      	subs	r0, #1
   106ac:	f005 fc7a 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   106b0:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
   106b2:	2000      	movs	r0, #0
   106b4:	f005 fc76 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   106b8:	9008      	str	r0, [sp, #32]
  const IntegerType one = Dup<IntegerType>(1);
   106ba:	4638      	mov	r0, r7
   106bc:	f005 fc72 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   106c0:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType remainder = BitAnd(x, mask);
   106c2:	4649      	mov	r1, r9
   106c4:	4620      	mov	r0, r4
   106c6:	f005 fc6e 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   106ca:	900b      	str	r0, [sp, #44]	; 0x2c
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   106cc:	4639      	mov	r1, r7
   106ce:	4648      	mov	r0, r9
   106d0:	f005 fc6b 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   106d4:	4681      	mov	r9, r0
   106d6:	9908      	ldr	r1, [sp, #32]
   106d8:	4620      	mov	r0, r4
   106da:	f005 fc72 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   106de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   106e0:	4639      	mov	r1, r7
   106e2:	f005 fc60 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   106e6:	4601      	mov	r1, r0
   106e8:	4648      	mov	r0, r9
   106ea:	f005 fc60 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
   106ee:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
   106f0:	4629      	mov	r1, r5
   106f2:	4620      	mov	r0, r4
   106f4:	f005 fc59 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   106f8:	4604      	mov	r4, r0
   106fa:	4649      	mov	r1, r9
   106fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   106fe:	f005 fc68 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   10702:	4639      	mov	r1, r7
   10704:	f005 fc4f 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   10708:	4601      	mov	r1, r0
   1070a:	4620      	mov	r0, r4
   1070c:	f005 fc4f 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
  int32_t sym_scaled_diff = scaled_diff + 32767;
   10710:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
   10714:	307f      	adds	r0, #127	; 0x7f
   10716:	9011      	str	r0, [sp, #68]	; 0x44
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
   10718:	4ba0      	ldr	r3, [pc, #640]	; (1099c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
   1071a:	933d      	str	r3, [sp, #244]	; 0xf4
      if (__a < __b)
   1071c:	4298      	cmp	r0, r3
   1071e:	db7a      	blt.n	10816 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3f6>
      return __a;
   10720:	ab11      	add	r3, sp, #68	; 0x44
               static_cast<int32_t>(32767));
   10722:	f647 72ff 	movw	r2, #32767	; 0x7fff
   10726:	923c      	str	r2, [sp, #240]	; 0xf0
      if (__b < __a)
   10728:	681a      	ldr	r2, [r3, #0]
   1072a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1072e:	da74      	bge.n	1081a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fa>
   10730:	f9b3 3000 	ldrsh.w	r3, [r3]
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
   10734:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   10738:	11da      	asrs	r2, r3, #7
   1073a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1073e:	b292      	uxth	r2, r2
  assert(index < 512 && "LUT index out of range.");
   10740:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10744:	d26b      	bcs.n	1081e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fe>
  int16_t offset = value & 0x7f;
   10746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  int16_t base = lut[index];
   1074a:	f930 1012 	ldrsh.w	r1, [r0, r2, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
   1074e:	3201      	adds	r2, #1
   10750:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   10754:	1a52      	subs	r2, r2, r1
   10756:	b212      	sxth	r2, r2
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   10758:	fb03 f302 	mul.w	r3, r3, r2
   1075c:	3340      	adds	r3, #64	; 0x40
  return base + delta;
   1075e:	f343 13cf 	sbfx	r3, r3, #7, #16
   10762:	440b      	add	r3, r1
   10764:	b21b      	sxth	r3, r3
      exp_results_Q015[c] =
   10766:	9a03      	ldr	r2, [sp, #12]
   10768:	990c      	ldr	r1, [sp, #48]	; 0x30
   1076a:	5253      	strh	r3, [r2, r1]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
   1076c:	449a      	add	sl, r3
    for (int c = 0; c < depth; ++c) {
   1076e:	3601      	adds	r6, #1
   10770:	455e      	cmp	r6, fp
   10772:	da5b      	bge.n	1082c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x40c>
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
   10774:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
      exp_results_Q015[c] =
   10778:	0072      	lsls	r2, r6, #1
   1077a:	920c      	str	r2, [sp, #48]	; 0x30
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
   1077c:	9a04      	ldr	r2, [sp, #16]
   1077e:	fb0b 6202 	mla	r2, fp, r2, r6
   10782:	9905      	ldr	r1, [sp, #20]
   10784:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
   10788:	1ad2      	subs	r2, r2, r3
      input_diff, params.input_multiplier, params.input_left_shift);
   1078a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1078e:	f8d8 500c 	ldr.w	r5, [r8, #12]
  int left_shift = shift > 0 ? shift : 0;
   10792:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   10796:	2d00      	cmp	r5, #0
   10798:	f77f af6d 	ble.w	10676 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x256>
   1079c:	2500      	movs	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1079e:	408a      	lsls	r2, r1
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   107a0:	4293      	cmp	r3, r2
   107a2:	f43f af6a 	beq.w	1067a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x25a>
   107a6:	2700      	movs	r7, #0
  std::int64_t a_64(a);
   107a8:	4610      	mov	r0, r2
   107aa:	17d1      	asrs	r1, r2, #31
   107ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
  std::int64_t b_64(b);
   107b0:	17d9      	asrs	r1, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
   107b2:	fb02 f001 	mul.w	r0, r2, r1
   107b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   107b8:	fb03 0101 	mla	r1, r3, r1, r0
   107bc:	fba2 2303 	umull	r2, r3, r2, r3
   107c0:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   107c2:	2a00      	cmp	r2, #0
   107c4:	f173 0100 	sbcs.w	r1, r3, #0
   107c8:	f6ff af5e 	blt.w	10688 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x268>
   107cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   107d0:	1852      	adds	r2, r2, r1
   107d2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   107d6:	4611      	mov	r1, r2
   107d8:	461c      	mov	r4, r3
   107da:	2a00      	cmp	r2, #0
   107dc:	f173 0000 	sbcs.w	r0, r3, #0
   107e0:	f6bf af54 	bge.w	1068c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
   107e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   107e8:	1851      	adds	r1, r2, r1
   107ea:	f04f 0400 	mov.w	r4, #0
   107ee:	eb43 0404 	adc.w	r4, r3, r4
   107f2:	e74b      	b.n	1068c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   107f4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   107f8:	e74e      	b.n	10698 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x278>
  assert(exponent >= 0);
   107fa:	4b69      	ldr	r3, [pc, #420]	; (109a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x580>)
   107fc:	4a69      	ldr	r2, [pc, #420]	; (109a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
   107fe:	f44f 71b3 	mov.w	r1, #358	; 0x166
   10802:	4869      	ldr	r0, [pc, #420]	; (109a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
   10804:	f002 f952 	bl	12aac <__assert_func>
  assert(exponent <= 31);
   10808:	4b68      	ldr	r3, [pc, #416]	; (109ac <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x58c>)
   1080a:	4a66      	ldr	r2, [pc, #408]	; (109a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
   1080c:	f240 1167 	movw	r1, #359	; 0x167
   10810:	4865      	ldr	r0, [pc, #404]	; (109a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
   10812:	f002 f94b 	bl	12aac <__assert_func>
	return __b;
   10816:	ab3d      	add	r3, sp, #244	; 0xf4
   10818:	e783      	b.n	10722 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x302>
	return __b;
   1081a:	ab3c      	add	r3, sp, #240	; 0xf0
   1081c:	e788      	b.n	10730 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x310>
  assert(index < 512 && "LUT index out of range.");
   1081e:	4b64      	ldr	r3, [pc, #400]	; (109b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
   10820:	4a64      	ldr	r2, [pc, #400]	; (109b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
   10822:	f44f 71ac 	mov.w	r1, #344	; 0x158
   10826:	4864      	ldr	r0, [pc, #400]	; (109b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
   10828:	f002 f940 	bl	12aac <__assert_func>
   1082c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
   10830:	4650      	mov	r0, sl
   10832:	f006 fd8c 	bl	1734e <_ZN6tflite17CountLeadingZerosIjEEiT_>
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
   10836:	4652      	mov	r2, sl
   10838:	17d3      	asrs	r3, r2, #31
   1083a:	b2c1      	uxtb	r1, r0
   1083c:	1e4d      	subs	r5, r1, #1
   1083e:	f1a1 0421 	sub.w	r4, r1, #33	; 0x21
   10842:	f1c1 0121 	rsb	r1, r1, #33	; 0x21
   10846:	fa03 f205 	lsl.w	r2, r3, r5
   1084a:	fa0a f404 	lsl.w	r4, sl, r4
   1084e:	4322      	orrs	r2, r4
   10850:	fa2a f101 	lsr.w	r1, sl, r1
   10854:	430a      	orrs	r2, r1
   10856:	fa0a f305 	lsl.w	r3, sl, r5
   1085a:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
   1085e:	f142 0200 	adc.w	r2, r2, #0
         (1 << 13)) >>
   10862:	0b9b      	lsrs	r3, r3, #14
   10864:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
   10868:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
   1086c:	9310      	str	r3, [sp, #64]	; 0x40
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
   1086e:	4a4b      	ldr	r2, [pc, #300]	; (1099c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
   10870:	9239      	str	r2, [sp, #228]	; 0xe4
      if (__a < __b)
   10872:	4293      	cmp	r3, r2
   10874:	db25      	blt.n	108c2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a2>
      return __a;
   10876:	ab10      	add	r3, sp, #64	; 0x40
                 static_cast<int32_t>(32767)));
   10878:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1087c:	9238      	str	r2, [sp, #224]	; 0xe0
      if (__b < __a)
   1087e:	681a      	ldr	r2, [r3, #0]
   10880:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   10884:	da1f      	bge.n	108c6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a6>
   10886:	f9b3 2000 	ldrsh.w	r2, [r3]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
   1088a:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   1088e:	11d3      	asrs	r3, r2, #7
   10890:	f503 7380 	add.w	r3, r3, #256	; 0x100
   10894:	b29b      	uxth	r3, r3
  assert(index < 512 && "LUT index out of range.");
   10896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1089a:	d216      	bcs.n	108ca <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4aa>
  int16_t offset = value & 0x7f;
   1089c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  int16_t base = lut[index];
   108a0:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
   108a4:	3301      	adds	r3, #1
   108a6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
   108aa:	1b1b      	subs	r3, r3, r4
   108ac:	b21b      	sxth	r3, r3
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   108ae:	fb02 f303 	mul.w	r3, r2, r3
   108b2:	3340      	adds	r3, #64	; 0x40
  return base + delta;
   108b4:	f343 13cf 	sbfx	r3, r3, #7, #16
   108b8:	18e2      	adds	r2, r4, r3
   108ba:	b212      	sxth	r2, r2

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
   108bc:	2100      	movs	r1, #0
   108be:	465f      	mov	r7, fp
   108c0:	e01e      	b.n	10900 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4e0>
	return __b;
   108c2:	ab39      	add	r3, sp, #228	; 0xe4
   108c4:	e7d8      	b.n	10878 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x458>
	return __b;
   108c6:	ab38      	add	r3, sp, #224	; 0xe0
   108c8:	e7dd      	b.n	10886 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x466>
  assert(index < 512 && "LUT index out of range.");
   108ca:	4b39      	ldr	r3, [pc, #228]	; (109b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
   108cc:	4a39      	ldr	r2, [pc, #228]	; (109b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
   108ce:	f44f 71ac 	mov.w	r1, #344	; 0x158
   108d2:	4839      	ldr	r0, [pc, #228]	; (109b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
   108d4:	f002 f8ea 	bl	12aac <__assert_func>
      uint8_t right_shift = 31 - headroom_plus_one;
      int64_t round = 1 << (right_shift - 1);
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   108d8:	9311      	str	r3, [sp, #68]	; 0x44
                            static_cast<int64_t>(reciprocal_scale_Q015) +
                        round) >>
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
   108da:	2400      	movs	r4, #0
   108dc:	9437      	str	r4, [sp, #220]	; 0xdc
      if (__a < __b)
   108de:	42a3      	cmp	r3, r4
   108e0:	db37      	blt.n	10952 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x532>
      return __a;
   108e2:	ab11      	add	r3, sp, #68	; 0x44
                   static_cast<int32_t>(32767)));
   108e4:	f647 74ff 	movw	r4, #32767	; 0x7fff
   108e8:	9436      	str	r4, [sp, #216]	; 0xd8
      if (__b < __a)
   108ea:	681c      	ldr	r4, [r3, #0]
   108ec:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   108f0:	da31      	bge.n	10956 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x536>
          std::min(std::max(result, static_cast<int32_t>(0)),
   108f2:	681c      	ldr	r4, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
   108f4:	9b07      	ldr	r3, [sp, #28]
   108f6:	440b      	add	r3, r1
   108f8:	9d06      	ldr	r5, [sp, #24]
   108fa:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
   108fe:	3101      	adds	r1, #1
   10900:	42b9      	cmp	r1, r7
   10902:	da2a      	bge.n	1095a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x53a>
      uint8_t right_shift = 31 - headroom_plus_one;
   10904:	f1c0 031f 	rsb	r3, r0, #31
   10908:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
   1090a:	1e5c      	subs	r4, r3, #1
   1090c:	2601      	movs	r6, #1
   1090e:	40a6      	lsls	r6, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   10910:	9c03      	ldr	r4, [sp, #12]
   10912:	f934 4011 	ldrsh.w	r4, [r4, r1, lsl #1]
   10916:	17e5      	asrs	r5, r4, #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   10918:	fa0f fa82 	sxth.w	sl, r2
   1091c:	ea4f 7bea 	mov.w	fp, sl, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   10920:	fb04 fc0b 	mul.w	ip, r4, fp
   10924:	fb02 cc05 	mla	ip, r2, r5, ip
   10928:	fba4 450a 	umull	r4, r5, r4, sl
   1092c:	4465      	add	r5, ip
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   1092e:	19a4      	adds	r4, r4, r6
   10930:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
                        round) >>
   10934:	f1c3 0c20 	rsb	ip, r3, #32
   10938:	f1b3 0620 	subs.w	r6, r3, #32
   1093c:	fa24 f303 	lsr.w	r3, r4, r3
   10940:	fa05 fc0c 	lsl.w	ip, r5, ip
   10944:	ea43 030c 	orr.w	r3, r3, ip
   10948:	d4c6      	bmi.n	108d8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
   1094a:	fa45 f606 	asr.w	r6, r5, r6
   1094e:	4333      	orrs	r3, r6
   10950:	e7c2      	b.n	108d8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
	return __b;
   10952:	ab37      	add	r3, sp, #220	; 0xdc
   10954:	e7c6      	b.n	108e4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4c4>
	return __b;
   10956:	ab36      	add	r3, sp, #216	; 0xd8
   10958:	e7cb      	b.n	108f2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4d2>
   1095a:	46bb      	mov	fp, r7
  for (int i = 0; i < outer_size; ++i) {
   1095c:	f109 0901 	add.w	r9, r9, #1
   10960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10962:	4599      	cmp	r9, r3
   10964:	da06      	bge.n	10974 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x554>
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
   10966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1096a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
   1096e:	2300      	movs	r3, #0
   10970:	9805      	ldr	r0, [sp, #20]
   10972:	e665      	b.n	10640 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x220>
    if (size_ > kMaxSmallSize) {
   10974:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   10976:	2b05      	cmp	r3, #5
   10978:	dd03      	ble.n	10982 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
      delete[] dims_pointer_;
   1097a:	9831      	ldr	r0, [sp, #196]	; 0xc4
   1097c:	b108      	cbz	r0, 10982 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
   1097e:	f008 f87c 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   10982:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10984:	2b05      	cmp	r3, #5
   10986:	dd03      	ble.n	10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   10988:	982b      	ldr	r0, [sp, #172]	; 0xac
   1098a:	b108      	cbz	r0, 10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   1098c:	f008 f875 	bl	18a7a <_ZdaPv>
}
   10990:	b03f      	add	sp, #252	; 0xfc
   10992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10996:	bf00      	nop
   10998:	c0000001 	.word	0xc0000001
   1099c:	ffff8000 	.word	0xffff8000
   109a0:	0001c580 	.word	0x0001c580
   109a4:	0001c590 	.word	0x0001c590
   109a8:	0001c5e8 	.word	0x0001c5e8
   109ac:	0001c644 	.word	0x0001c644
   109b0:	0001cd80 	.word	0x0001cd80
   109b4:	0001cdac 	.word	0x0001cdac
   109b8:	0001c6d4 	.word	0x0001c6d4

000109bc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   109bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109c0:	b0a1      	sub	sp, #132	; 0x84
  TFLITE_DCHECK(context != nullptr);
   109c2:	2800      	cmp	r0, #0
   109c4:	d030      	beq.n	10a28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6c>
   109c6:	460c      	mov	r4, r1
   109c8:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   109ca:	2900      	cmp	r1, #0
   109cc:	d02e      	beq.n	10a2c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   109ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
   109d0:	680a      	ldr	r2, [r1, #0]
   109d2:	6851      	ldr	r1, [r2, #4]
   109d4:	4798      	blx	r3
   109d6:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
   109d8:	b356      	cbz	r6, 10a30 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
   109da:	b35c      	cbz	r4, 10a34 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   109dc:	6d73      	ldr	r3, [r6, #84]	; 0x54
   109de:	6862      	ldr	r2, [r4, #4]
   109e0:	6851      	ldr	r1, [r2, #4]
   109e2:	4630      	mov	r0, r6
   109e4:	4798      	blx	r3
   109e6:	4681      	mov	r9, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   109e8:	6924      	ldr	r4, [r4, #16]
   109ea:	b32c      	cbz	r4, 10a38 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
   109ec:	ad04      	add	r5, sp, #16
   109ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   109f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   109f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   109f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   109f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   109f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   109fa:	e894 0003 	ldmia.w	r4, {r0, r1}
   109fe:	e885 0003 	stmia.w	r5, {r0, r1}
  switch (input->type) {
   10a02:	7a38      	ldrb	r0, [r7, #8]
   10a04:	2807      	cmp	r0, #7
   10a06:	f000 811a 	beq.w	10c3e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
   10a0a:	2809      	cmp	r0, #9
   10a0c:	f000 8117 	beq.w	10c3e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
   10a10:	2801      	cmp	r0, #1
   10a12:	d013      	beq.n	10a3c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   10a14:	6974      	ldr	r4, [r6, #20]
   10a16:	f7f8 fcc1 	bl	939c <TfLiteTypeGetName>
   10a1a:	4602      	mov	r2, r0
   10a1c:	7a3b      	ldrb	r3, [r7, #8]
   10a1e:	498c      	ldr	r1, [pc, #560]	; (10c50 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>)
   10a20:	4630      	mov	r0, r6
   10a22:	47a0      	blx	r4
      return kTfLiteError;
   10a24:	2001      	movs	r0, #1
   10a26:	e110      	b.n	10c4a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
  TFLITE_DCHECK(context != nullptr);
   10a28:	f008 f83c 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
   10a2c:	f008 f83a 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
   10a30:	f008 f838 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
   10a34:	f008 f836 	bl	18aa4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
   10a38:	f008 f834 	bl	18aa4 <abort>
          op_data, tflite::micro::GetTensorShape(input),
   10a3c:	4639      	mov	r1, r7
   10a3e:	a812      	add	r0, sp, #72	; 0x48
   10a40:	f006 fc5b 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10a44:	4638      	mov	r0, r7
   10a46:	f005 fa99 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   10a4a:	4680      	mov	r8, r0
          tflite::micro::GetTensorShape(output),
   10a4c:	4649      	mov	r1, r9
   10a4e:	a818      	add	r0, sp, #96	; 0x60
   10a50:	f006 fc53 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10a54:	4648      	mov	r0, r9
   10a56:	f005 fa97 	bl	15f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   10a5a:	4681      	mov	r9, r0
  inline int32_t DimensionsCount() const { return size_; }
   10a5c:	9812      	ldr	r0, [sp, #72]	; 0x48
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   10a5e:	1e44      	subs	r4, r0, #1
  for (int i = 0; i < dims_count; ++i) {
   10a60:	2300      	movs	r3, #0
   10a62:	e013      	b.n	10a8c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    TFLITE_DCHECK_GE(i, 0);
   10a64:	f008 f81e 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10a68:	f008 f81c 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10a6c:	aa20      	add	r2, sp, #128	; 0x80
   10a6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   10a72:	f852 2c34 	ldr.w	r2, [r2, #-52]
   10a76:	e017      	b.n	10aa8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
    TFLITE_DCHECK_GE(i, 0);
   10a78:	f008 f814 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10a7c:	f008 f812 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10a80:	9919      	ldr	r1, [sp, #100]	; 0x64
   10a82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10a86:	4291      	cmp	r1, r2
   10a88:	d11b      	bne.n	10ac2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
  for (int i = 0; i < dims_count; ++i) {
   10a8a:	3301      	adds	r3, #1
   10a8c:	4298      	cmp	r0, r3
   10a8e:	dd1a      	ble.n	10ac6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    if (i != skip_dim) {
   10a90:	429c      	cmp	r4, r3
   10a92:	d0fa      	beq.n	10a8a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK_GE(i, 0);
   10a94:	2b00      	cmp	r3, #0
   10a96:	dbe5      	blt.n	10a64 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    TFLITE_DCHECK_LT(i, size_);
   10a98:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10a9a:	4293      	cmp	r3, r2
   10a9c:	dae4      	bge.n	10a68 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10a9e:	2a05      	cmp	r2, #5
   10aa0:	dde4      	ble.n	10a6c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
   10aa2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10aa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10aa8:	2b00      	cmp	r3, #0
   10aaa:	dbe5      	blt.n	10a78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    TFLITE_DCHECK_LT(i, size_);
   10aac:	9918      	ldr	r1, [sp, #96]	; 0x60
   10aae:	428b      	cmp	r3, r1
   10ab0:	dae4      	bge.n	10a7c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10ab2:	2905      	cmp	r1, #5
   10ab4:	dce4      	bgt.n	10a80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
   10ab6:	a920      	add	r1, sp, #128	; 0x80
   10ab8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   10abc:	f851 1c1c 	ldr.w	r1, [r1, #-28]
   10ac0:	e7e1      	b.n	10a86 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10ac2:	f007 ffef 	bl	18aa4 <abort>
  inline int32_t DimensionsCount() const { return size_; }
   10ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10ac8:	2c00      	cmp	r4, #0
   10aca:	db08      	blt.n	10ade <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
   10acc:	429c      	cmp	r4, r3
   10ace:	da06      	bge.n	10ade <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   10ad0:	2b05      	cmp	r3, #5
   10ad2:	dd06      	ble.n	10ae2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x126>
   10ad4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  for (int i = 0; i < dims_count; ++i) {
   10ad6:	2200      	movs	r2, #0
  int flat_size = 1;
   10ad8:	f04f 0a01 	mov.w	sl, #1
   10adc:	e007      	b.n	10aee <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10ade:	f007 ffe1 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   10ae2:	a813      	add	r0, sp, #76	; 0x4c
   10ae4:	e7f7      	b.n	10ad6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   10ae6:	2101      	movs	r1, #1
   10ae8:	fb01 fa0a 	mul.w	sl, r1, sl
  for (int i = 0; i < dims_count; ++i) {
   10aec:	3201      	adds	r2, #1
   10aee:	4293      	cmp	r3, r2
   10af0:	dd04      	ble.n	10afc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   10af2:	4294      	cmp	r4, r2
   10af4:	d0f7      	beq.n	10ae6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
   10af6:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   10afa:	e7f5      	b.n	10ae8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TFLITE_DCHECK_GE(i, 0);
   10afc:	2c00      	cmp	r4, #0
   10afe:	db25      	blt.n	10b4c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x190>
    TFLITE_DCHECK_LT(i, size_);
   10b00:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10b02:	429c      	cmp	r4, r3
   10b04:	da24      	bge.n	10b50 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b06:	2b05      	cmp	r3, #5
   10b08:	dd24      	ble.n	10b54 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x198>
   10b0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10b0c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10b10:	2c00      	cmp	r4, #0
   10b12:	db25      	blt.n	10b60 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    TFLITE_DCHECK_LT(i, size_);
   10b14:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b16:	429c      	cmp	r4, r3
   10b18:	da24      	bge.n	10b64 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b1a:	2b05      	cmp	r3, #5
   10b1c:	dd24      	ble.n	10b68 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
   10b1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10b20:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10b24:	4293      	cmp	r3, r2
   10b26:	d125      	bne.n	10b74 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   10b28:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_GE(i, 0);
   10b2a:	2c00      	cmp	r4, #0
   10b2c:	db24      	blt.n	10b78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1bc>
    TFLITE_DCHECK_LT(i, size_);
   10b2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b30:	429c      	cmp	r4, r3
   10b32:	da23      	bge.n	10b7c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b34:	2b05      	cmp	r3, #5
   10b36:	dd23      	ble.n	10b80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c4>
   10b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10b3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   10b3e:	931e      	str	r3, [sp, #120]	; 0x78
      if (__b < __a)
   10b40:	429a      	cmp	r2, r3
   10b42:	dc23      	bgt.n	10b8c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      return __a;
   10b44:	ab1f      	add	r3, sp, #124	; 0x7c
   10b46:	681d      	ldr	r5, [r3, #0]
  for (int i = 0; i < outer_size; ++i) {
   10b48:	2400      	movs	r4, #0
   10b4a:	e061      	b.n	10c10 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>
    TFLITE_DCHECK_GE(i, 0);
   10b4c:	f007 ffaa 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10b50:	f007 ffa8 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b54:	ab20      	add	r3, sp, #128	; 0x80
   10b56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10b5a:	f853 2c34 	ldr.w	r2, [r3, #-52]
   10b5e:	e7d7      	b.n	10b10 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x154>
    TFLITE_DCHECK_GE(i, 0);
   10b60:	f007 ffa0 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10b64:	f007 ff9e 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b68:	ab20      	add	r3, sp, #128	; 0x80
   10b6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10b6e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   10b72:	e7d7      	b.n	10b24 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x168>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10b74:	f007 ff96 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
   10b78:	f007 ff94 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10b7c:	f007 ff92 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b80:	ab20      	add	r3, sp, #128	; 0x80
   10b82:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10b86:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   10b8a:	e7d8      	b.n	10b3e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
	return __b;
   10b8c:	ab1e      	add	r3, sp, #120	; 0x78
   10b8e:	e7da      	b.n	10b46 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      max = std::max(max, input_data[i * depth + c]);
   10b90:	683b      	ldr	r3, [r7, #0]
   10b92:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   10b94:	3601      	adds	r6, #1
   10b96:	42ae      	cmp	r6, r5
   10b98:	da0c      	bge.n	10bb4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      max = std::max(max, input_data[i * depth + c]);
   10b9a:	fb05 6304 	mla	r3, r5, r4, r6
   10b9e:	eb08 0783 	add.w	r7, r8, r3, lsl #2
      if (__a < __b)
   10ba2:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
   10ba6:	9803      	ldr	r0, [sp, #12]
   10ba8:	f7f0 fa50 	bl	104c <__aeabi_fcmplt>
   10bac:	2800      	cmp	r0, #0
   10bae:	d1ef      	bne.n	10b90 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
      return __a;
   10bb0:	af03      	add	r7, sp, #12
   10bb2:	e7ed      	b.n	10b90 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
    for (int c = 0; c < depth; ++c) {
   10bb4:	2700      	movs	r7, #0
    float sum = 0.f;
   10bb6:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
   10bb8:	42af      	cmp	r7, r5
   10bba:	da1a      	bge.n	10bf2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x236>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
   10bbc:	fb05 7b04 	mla	fp, r5, r4, r7
   10bc0:	9903      	ldr	r1, [sp, #12]
   10bc2:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
   10bc6:	f7ef ff99 	bl	afc <__aeabi_fsub>
   10bca:	9001      	str	r0, [sp, #4]
                                   static_cast<float>(params.beta));
   10bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10bd0:	f7ef ff40 	bl	a54 <__aeabi_d2f>
   10bd4:	4601      	mov	r1, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
   10bd6:	9801      	ldr	r0, [sp, #4]
   10bd8:	f7f0 f89a 	bl	d10 <__aeabi_fmul>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
   10bdc:	f001 fdce 	bl	1277c <expf>
   10be0:	4601      	mov	r1, r0
      output_data[i * depth + c] = exp_c;
   10be2:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
      sum += exp_c;
   10be6:	4630      	mov	r0, r6
   10be8:	f7ef ff8a 	bl	b00 <__addsf3>
   10bec:	4606      	mov	r6, r0
    for (int c = 0; c < depth; ++c) {
   10bee:	3701      	adds	r7, #1
   10bf0:	e7e2      	b.n	10bb8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>
    for (int c = 0; c < depth; ++c) {
   10bf2:	2700      	movs	r7, #0
   10bf4:	42af      	cmp	r7, r5
   10bf6:	da0a      	bge.n	10c0e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x252>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
   10bf8:	fb05 7b04 	mla	fp, r5, r4, r7
   10bfc:	4631      	mov	r1, r6
   10bfe:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
   10c02:	f7f0 f939 	bl	e78 <__aeabi_fdiv>
   10c06:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
    for (int c = 0; c < depth; ++c) {
   10c0a:	3701      	adds	r7, #1
   10c0c:	e7f2      	b.n	10bf4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  for (int i = 0; i < outer_size; ++i) {
   10c0e:	3401      	adds	r4, #1
   10c10:	4554      	cmp	r4, sl
   10c12:	da04      	bge.n	10c1e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
    float max = std::numeric_limits<float>::lowest();
   10c14:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   10c18:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   10c1a:	2600      	movs	r6, #0
   10c1c:	e7bb      	b.n	10b96 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1da>
    if (size_ > kMaxSmallSize) {
   10c1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10c20:	2b05      	cmp	r3, #5
   10c22:	dd03      	ble.n	10c2c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
      delete[] dims_pointer_;
   10c24:	9819      	ldr	r0, [sp, #100]	; 0x64
   10c26:	b108      	cbz	r0, 10c2c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
   10c28:	f007 ff27 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   10c2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10c2e:	2b05      	cmp	r3, #5
   10c30:	dd03      	ble.n	10c3a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
      delete[] dims_pointer_;
   10c32:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10c34:	b108      	cbz	r0, 10c3a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
   10c36:	f007 ff20 	bl	18a7a <_ZdaPv>
      return kTfLiteOk;
   10c3a:	2000      	movs	r0, #0
   10c3c:	e005      	b.n	10c4a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
      SoftmaxQuantized(input, output, op_data);
   10c3e:	aa04      	add	r2, sp, #16
   10c40:	4649      	mov	r1, r9
   10c42:	4638      	mov	r0, r7
   10c44:	f7ff fbec 	bl	10420 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
   10c48:	2000      	movs	r0, #0
}
   10c4a:	b021      	add	sp, #132	; 0x84
   10c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c50:	0001c654 	.word	0x0001c654

00010c54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   10c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c58:	b097      	sub	sp, #92	; 0x5c
   10c5a:	4604      	mov	r4, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   10c5c:	680b      	ldr	r3, [r1, #0]
   10c5e:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   10c60:	2b01      	cmp	r3, #1
   10c62:	d00f      	beq.n	10c84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
   10c64:	6946      	ldr	r6, [r0, #20]
   10c66:	2501      	movs	r5, #1
   10c68:	9503      	str	r5, [sp, #12]
   10c6a:	9302      	str	r3, [sp, #8]
   10c6c:	4ba9      	ldr	r3, [pc, #676]	; (10f14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   10c6e:	9301      	str	r3, [sp, #4]
   10c70:	4ba9      	ldr	r3, [pc, #676]	; (10f18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   10c72:	9300      	str	r3, [sp, #0]
   10c74:	235d      	movs	r3, #93	; 0x5d
   10c76:	4aa9      	ldr	r2, [pc, #676]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10c78:	49a9      	ldr	r1, [pc, #676]	; (10f20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10c7a:	47b0      	blx	r6
   10c7c:	4628      	mov	r0, r5
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
   10c7e:	b017      	add	sp, #92	; 0x5c
   10c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c84:	460d      	mov	r5, r1
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   10c86:	684b      	ldr	r3, [r1, #4]
   10c88:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   10c8a:	2b01      	cmp	r3, #1
   10c8c:	d00d      	beq.n	10caa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x56>
   10c8e:	6946      	ldr	r6, [r0, #20]
   10c90:	2501      	movs	r5, #1
   10c92:	9503      	str	r5, [sp, #12]
   10c94:	9302      	str	r3, [sp, #8]
   10c96:	4b9f      	ldr	r3, [pc, #636]	; (10f14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   10c98:	9301      	str	r3, [sp, #4]
   10c9a:	4ba2      	ldr	r3, [pc, #648]	; (10f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   10c9c:	9300      	str	r3, [sp, #0]
   10c9e:	235e      	movs	r3, #94	; 0x5e
   10ca0:	4a9e      	ldr	r2, [pc, #632]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10ca2:	499f      	ldr	r1, [pc, #636]	; (10f20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10ca4:	47b0      	blx	r6
   10ca6:	4628      	mov	r0, r5
   10ca8:	e7e9      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  const TfLiteTensor* input = GetInput(context, node, 0);
   10caa:	2200      	movs	r2, #0
   10cac:	f005 f89e 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   10cb0:	4606      	mov	r6, r0
   10cb2:	b340      	cbz	r0, 10d06 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   10cb4:	6883      	ldr	r3, [r0, #8]
   10cb6:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   10cb8:	2b00      	cmp	r3, #0
   10cba:	dd2e      	ble.n	10d1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TfLiteTensor* output = GetOutput(context, node, 0);
   10cbc:	2200      	movs	r2, #0
   10cbe:	4629      	mov	r1, r5
   10cc0:	4620      	mov	r0, r4
   10cc2:	f005 f8b2 	bl	15e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   10cc6:	9005      	str	r0, [sp, #20]
   10cc8:	2800      	cmp	r0, #0
   10cca:	d030      	beq.n	10d2e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   10ccc:	f8d5 9010 	ldr.w	r9, [r5, #16]
   10cd0:	f1b9 0f00 	cmp.w	r9, #0
   10cd4:	d035      	beq.n	10d42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xee>
  if (input->type == kTfLiteInt16) {
   10cd6:	7833      	ldrb	r3, [r6, #0]
   10cd8:	2b07      	cmp	r3, #7
   10cda:	d03c      	beq.n	10d56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
  if (output->type == kTfLiteInt16) {
   10cdc:	9b05      	ldr	r3, [sp, #20]
   10cde:	781b      	ldrb	r3, [r3, #0]
   10ce0:	2b07      	cmp	r3, #7
   10ce2:	d05d      	beq.n	10da0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
   10ce4:	7832      	ldrb	r2, [r6, #0]
   10ce6:	4293      	cmp	r3, r2
   10ce8:	d069      	beq.n	10dbe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   10cea:	6965      	ldr	r5, [r4, #20]
   10cec:	9303      	str	r3, [sp, #12]
   10cee:	9202      	str	r2, [sp, #8]
   10cf0:	4b8d      	ldr	r3, [pc, #564]	; (10f28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
   10cf2:	9301      	str	r3, [sp, #4]
   10cf4:	4b8d      	ldr	r3, [pc, #564]	; (10f2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
   10cf6:	9300      	str	r3, [sp, #0]
   10cf8:	2378      	movs	r3, #120	; 0x78
   10cfa:	4a88      	ldr	r2, [pc, #544]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10cfc:	4988      	ldr	r1, [pc, #544]	; (10f20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10cfe:	4620      	mov	r0, r4
   10d00:	47a8      	blx	r5
   10d02:	2001      	movs	r0, #1
   10d04:	e7bb      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, input != nullptr);
   10d06:	6965      	ldr	r5, [r4, #20]
   10d08:	4b89      	ldr	r3, [pc, #548]	; (10f30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
   10d0a:	9300      	str	r3, [sp, #0]
   10d0c:	2360      	movs	r3, #96	; 0x60
   10d0e:	4a83      	ldr	r2, [pc, #524]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d10:	4988      	ldr	r1, [pc, #544]	; (10f34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d12:	4620      	mov	r0, r4
   10d14:	47a8      	blx	r5
   10d16:	2001      	movs	r0, #1
   10d18:	e7b1      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   10d1a:	6965      	ldr	r5, [r4, #20]
   10d1c:	4b86      	ldr	r3, [pc, #536]	; (10f38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   10d1e:	9300      	str	r3, [sp, #0]
   10d20:	2361      	movs	r3, #97	; 0x61
   10d22:	4a7e      	ldr	r2, [pc, #504]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d24:	4983      	ldr	r1, [pc, #524]	; (10f34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d26:	4620      	mov	r0, r4
   10d28:	47a8      	blx	r5
   10d2a:	2001      	movs	r0, #1
   10d2c:	e7a7      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, output != nullptr);
   10d2e:	6965      	ldr	r5, [r4, #20]
   10d30:	4b82      	ldr	r3, [pc, #520]	; (10f3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   10d32:	9300      	str	r3, [sp, #0]
   10d34:	2363      	movs	r3, #99	; 0x63
   10d36:	4a79      	ldr	r2, [pc, #484]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d38:	497e      	ldr	r1, [pc, #504]	; (10f34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d3a:	4620      	mov	r0, r4
   10d3c:	47a8      	blx	r5
   10d3e:	2001      	movs	r0, #1
   10d40:	e79d      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   10d42:	6965      	ldr	r5, [r4, #20]
   10d44:	4b7e      	ldr	r3, [pc, #504]	; (10f40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   10d46:	9300      	str	r3, [sp, #0]
   10d48:	2365      	movs	r3, #101	; 0x65
   10d4a:	4a74      	ldr	r2, [pc, #464]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d4c:	4979      	ldr	r1, [pc, #484]	; (10f34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d4e:	4620      	mov	r0, r4
   10d50:	47a8      	blx	r5
   10d52:	2001      	movs	r0, #1
   10d54:	e793      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
   10d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10d58:	f240 4102 	movw	r1, #1026	; 0x402
   10d5c:	4620      	mov	r0, r4
   10d5e:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
   10d60:	b150      	cbz	r0, 10d78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x124>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
   10d62:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
   10d66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10d68:	f240 4102 	movw	r1, #1026	; 0x402
   10d6c:	4620      	mov	r0, r4
   10d6e:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   10d70:	b160      	cbz	r0, 10d8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    op_data->one_over_one_plus_x_lut =
   10d72:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   10d76:	e7b1      	b.n	10cdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
   10d78:	6965      	ldr	r5, [r4, #20]
   10d7a:	4b72      	ldr	r3, [pc, #456]	; (10f44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   10d7c:	9300      	str	r3, [sp, #0]
   10d7e:	236b      	movs	r3, #107	; 0x6b
   10d80:	4a66      	ldr	r2, [pc, #408]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d82:	496c      	ldr	r1, [pc, #432]	; (10f34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d84:	4620      	mov	r0, r4
   10d86:	47a8      	blx	r5
   10d88:	2001      	movs	r0, #1
   10d8a:	e778      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   10d8c:	6965      	ldr	r5, [r4, #20]
   10d8e:	4b6e      	ldr	r3, [pc, #440]	; (10f48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   10d90:	9300      	str	r3, [sp, #0]
   10d92:	236f      	movs	r3, #111	; 0x6f
   10d94:	4a61      	ldr	r2, [pc, #388]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d96:	4967      	ldr	r1, [pc, #412]	; (10f34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d98:	4620      	mov	r0, r4
   10d9a:	47a8      	blx	r5
   10d9c:	2001      	movs	r0, #1
   10d9e:	e76e      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context,
   10da0:	7833      	ldrb	r3, [r6, #0]
   10da2:	2b09      	cmp	r3, #9
   10da4:	d00b      	beq.n	10dbe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   10da6:	2b07      	cmp	r3, #7
   10da8:	d009      	beq.n	10dbe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   10daa:	6965      	ldr	r5, [r4, #20]
   10dac:	4b67      	ldr	r3, [pc, #412]	; (10f4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
   10dae:	9300      	str	r3, [sp, #0]
   10db0:	2375      	movs	r3, #117	; 0x75
   10db2:	4a5a      	ldr	r2, [pc, #360]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10db4:	495f      	ldr	r1, [pc, #380]	; (10f34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10db6:	4620      	mov	r0, r4
   10db8:	47a8      	blx	r5
   10dba:	2001      	movs	r0, #1
   10dbc:	e75f      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  if (input->type == kTfLiteInt16) {
   10dbe:	7833      	ldrb	r3, [r6, #0]
   10dc0:	2b07      	cmp	r3, #7
   10dc2:	f040 81b7 	bne.w	11134 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4e0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   10dc6:	9b05      	ldr	r3, [sp, #20]
   10dc8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   10dcc:	f1bb 0f00 	cmp.w	fp, #0
   10dd0:	d00f      	beq.n	10df2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
   10dd2:	6965      	ldr	r5, [r4, #20]
   10dd4:	2300      	movs	r3, #0
   10dd6:	9303      	str	r3, [sp, #12]
   10dd8:	f8cd b008 	str.w	fp, [sp, #8]
   10ddc:	4b5c      	ldr	r3, [pc, #368]	; (10f50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   10dde:	9301      	str	r3, [sp, #4]
   10de0:	4b5c      	ldr	r3, [pc, #368]	; (10f54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   10de2:	9300      	str	r3, [sp, #0]
   10de4:	237d      	movs	r3, #125	; 0x7d
   10de6:	4a4d      	ldr	r2, [pc, #308]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10de8:	494d      	ldr	r1, [pc, #308]	; (10f20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10dea:	4620      	mov	r0, r4
   10dec:	47a8      	blx	r5
   10dee:	2001      	movs	r0, #1
   10df0:	e745      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   10df2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   10df6:	9306      	str	r3, [sp, #24]
  for (int i = 0; i < num - 1; i++) {
   10df8:	465f      	mov	r7, fp
   10dfa:	f8cd 901c 	str.w	r9, [sp, #28]
   10dfe:	f8cd b020 	str.w	fp, [sp, #32]
   10e02:	469b      	mov	fp, r3
   10e04:	9609      	str	r6, [sp, #36]	; 0x24
   10e06:	e007      	b.n	10e18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
	return __b;
   10e08:	ae14      	add	r6, sp, #80	; 0x50
   10e0a:	e079      	b.n	10f00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10e0c:	6830      	ldr	r0, [r6, #0]
   10e0e:	f7f0 f945 	bl	109c <__aeabi_f2iz>
   10e12:	f82b 0017 	strh.w	r0, [fp, r7, lsl #1]
  for (int i = 0; i < num - 1; i++) {
   10e16:	4657      	mov	r7, sl
   10e18:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   10e1c:	f280 80a4 	bge.w	10f68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x314>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   10e20:	4638      	mov	r0, r7
   10e22:	f7ef ff21 	bl	c68 <__aeabi_i2f>
   10e26:	494c      	ldr	r1, [pc, #304]	; (10f58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   10e28:	f7ef ff72 	bl	d10 <__aeabi_fmul>
   10e2c:	494b      	ldr	r1, [pc, #300]	; (10f5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   10e2e:	f7ef fe65 	bl	afc <__aeabi_fsub>
   10e32:	4606      	mov	r6, r0
   10e34:	f007 fbb6 	bl	185a4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10e38:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10e3c:	f7ef ff68 	bl	d10 <__aeabi_fmul>
   10e40:	f7ef faee 	bl	420 <__aeabi_f2d>
   10e44:	f001 fc52 	bl	126ec <round>
   10e48:	f7ef fe04 	bl	a54 <__aeabi_d2f>
   10e4c:	4680      	mov	r8, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   10e4e:	f107 0a01 	add.w	sl, r7, #1
   10e52:	4650      	mov	r0, sl
   10e54:	f7ef ff08 	bl	c68 <__aeabi_i2f>
   10e58:	493f      	ldr	r1, [pc, #252]	; (10f58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   10e5a:	f7ef ff59 	bl	d10 <__aeabi_fmul>
   10e5e:	493f      	ldr	r1, [pc, #252]	; (10f5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   10e60:	f7ef fe4c 	bl	afc <__aeabi_fsub>
   10e64:	f007 fb9e 	bl	185a4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10e68:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10e6c:	f7ef ff50 	bl	d10 <__aeabi_fmul>
   10e70:	4681      	mov	r9, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
   10e72:	4630      	mov	r0, r6
   10e74:	f007 fb96 	bl	185a4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10e78:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10e7c:	f7ef ff48 	bl	d10 <__aeabi_fmul>
   10e80:	f7ef face 	bl	420 <__aeabi_f2d>
   10e84:	f001 fc32 	bl	126ec <round>
   10e88:	f7ef fde4 	bl	a54 <__aeabi_d2f>
   10e8c:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   10e8e:	4648      	mov	r0, r9
   10e90:	f7ef fe36 	bl	b00 <__addsf3>
   10e94:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10e98:	f7ef ff3a 	bl	d10 <__aeabi_fmul>
   10e9c:	f7ef fac0 	bl	420 <__aeabi_f2d>
   10ea0:	f001 fc24 	bl	126ec <round>
   10ea4:	f7ef fdd6 	bl	a54 <__aeabi_d2f>
   10ea8:	4681      	mov	r9, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   10eaa:	492d      	ldr	r1, [pc, #180]	; (10f60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
   10eac:	4630      	mov	r0, r6
   10eae:	f7ef fe27 	bl	b00 <__addsf3>
   10eb2:	f007 fb77 	bl	185a4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10eb6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10eba:	f7ef ff29 	bl	d10 <__aeabi_fmul>
   10ebe:	f7ef faaf 	bl	420 <__aeabi_f2d>
   10ec2:	f001 fc13 	bl	126ec <round>
   10ec6:	f7ef fdc5 	bl	a54 <__aeabi_d2f>
   10eca:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
   10ecc:	4648      	mov	r0, r9
   10ece:	f7ef fe15 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
   10ed2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10ed6:	f7ef ff1b 	bl	d10 <__aeabi_fmul>
   10eda:	f7ef faa1 	bl	420 <__aeabi_f2d>
   10ede:	f001 fc05 	bl	126ec <round>
   10ee2:	f7ef fdb7 	bl	a54 <__aeabi_d2f>
   10ee6:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10ee8:	4640      	mov	r0, r8
   10eea:	f7ef fe07 	bl	afc <__aeabi_fsub>
   10eee:	9015      	str	r0, [sp, #84]	; 0x54
   10ef0:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   10ef4:	9114      	str	r1, [sp, #80]	; 0x50
      if (__a < __b)
   10ef6:	f7f0 f8a9 	bl	104c <__aeabi_fcmplt>
   10efa:	2800      	cmp	r0, #0
   10efc:	d184      	bne.n	10e08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
      return __a;
   10efe:	ae15      	add	r6, sp, #84	; 0x54
                               32767.0f);
   10f00:	4918      	ldr	r1, [pc, #96]	; (10f64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>)
   10f02:	9113      	str	r1, [sp, #76]	; 0x4c
      if (__b < __a)
   10f04:	6830      	ldr	r0, [r6, #0]
   10f06:	f7f0 f8bf 	bl	1088 <__aeabi_fcmpgt>
   10f0a:	2800      	cmp	r0, #0
   10f0c:	f43f af7e 	beq.w	10e0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
	return __b;
   10f10:	ae13      	add	r6, sp, #76	; 0x4c
   10f12:	e77b      	b.n	10e0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
   10f14:	0001cf20 	.word	0x0001cf20
   10f18:	0001cef8 	.word	0x0001cef8
   10f1c:	0001cdf0 	.word	0x0001cdf0
   10f20:	0001c124 	.word	0x0001c124
   10f24:	0001cd40 	.word	0x0001cd40
   10f28:	0001c7dc 	.word	0x0001c7dc
   10f2c:	0001c7ec 	.word	0x0001c7ec
   10f30:	0001c900 	.word	0x0001c900
   10f34:	0001be64 	.word	0x0001be64
   10f38:	0001cf08 	.word	0x0001cf08
   10f3c:	0001c56c 	.word	0x0001c56c
   10f40:	0001cf24 	.word	0x0001cf24
   10f44:	0001cf40 	.word	0x0001cf40
   10f48:	0001cf58 	.word	0x0001cf58
   10f4c:	0001c1c4 	.word	0x0001c1c4
   10f50:	0001c688 	.word	0x0001c688
   10f54:	0001ce48 	.word	0x0001ce48
   10f58:	3ca00000 	.word	0x3ca00000
   10f5c:	41200000 	.word	0x41200000
   10f60:	3c200000 	.word	0x3c200000
   10f64:	46fffe00 	.word	0x46fffe00
   10f68:	f8dd 901c 	ldr.w	r9, [sp, #28]
   10f6c:	f8dd b020 	ldr.w	fp, [sp, #32]
   10f70:	9e09      	ldr	r6, [sp, #36]	; 0x24
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
   10f72:	2000      	movs	r0, #0
   10f74:	f007 fb16 	bl	185a4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10f78:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10f7c:	f7ef fec8 	bl	d10 <__aeabi_fmul>
   10f80:	f7ef fa4e 	bl	420 <__aeabi_f2d>
   10f84:	f001 fbb2 	bl	126ec <round>
   10f88:	f7ef fd64 	bl	a54 <__aeabi_d2f>
   10f8c:	9012      	str	r0, [sp, #72]	; 0x48
   10f8e:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   10f92:	9111      	str	r1, [sp, #68]	; 0x44
      if (__a < __b)
   10f94:	f7f0 f85a 	bl	104c <__aeabi_fcmplt>
   10f98:	b9a0      	cbnz	r0, 10fc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x370>
      return __a;
   10f9a:	af12      	add	r7, sp, #72	; 0x48
   10f9c:	496c      	ldr	r1, [pc, #432]	; (11150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   10f9e:	9110      	str	r1, [sp, #64]	; 0x40
      if (__b < __a)
   10fa0:	6838      	ldr	r0, [r7, #0]
   10fa2:	f7f0 f871 	bl	1088 <__aeabi_fcmpgt>
   10fa6:	b978      	cbnz	r0, 10fc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x374>
  table[num - 1] = std::min<float>(
   10fa8:	6838      	ldr	r0, [r7, #0]
   10faa:	f7f0 f877 	bl	109c <__aeabi_f2iz>
   10fae:	9b06      	ldr	r3, [sp, #24]
   10fb0:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   10fb4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
   10fb8:	9306      	str	r3, [sp, #24]
   10fba:	f8cd 901c 	str.w	r9, [sp, #28]
   10fbe:	469a      	mov	sl, r3
   10fc0:	9608      	str	r6, [sp, #32]
   10fc2:	e00b      	b.n	10fdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
	return __b;
   10fc4:	af11      	add	r7, sp, #68	; 0x44
   10fc6:	e7e9      	b.n	10f9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x348>
	return __b;
   10fc8:	af10      	add	r7, sp, #64	; 0x40
   10fca:	e7ed      	b.n	10fa8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x354>
	return __b;
   10fcc:	ae0e      	add	r6, sp, #56	; 0x38
   10fce:	e07b      	b.n	110c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x474>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10fd0:	6830      	ldr	r0, [r6, #0]
   10fd2:	f7f0 f863 	bl	109c <__aeabi_f2iz>
   10fd6:	f82a 001b 	strh.w	r0, [sl, fp, lsl #1]
  for (int i = 0; i < num - 1; i++) {
   10fda:	46cb      	mov	fp, r9
   10fdc:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   10fe0:	da7c      	bge.n	110dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x488>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   10fe2:	4658      	mov	r0, fp
   10fe4:	f7ef fe40 	bl	c68 <__aeabi_i2f>
   10fe8:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
   10fec:	f7ef fe90 	bl	d10 <__aeabi_fmul>
   10ff0:	2100      	movs	r1, #0
   10ff2:	f7ef fd85 	bl	b00 <__addsf3>
   10ff6:	4606      	mov	r6, r0
   10ff8:	f007 fac9 	bl	1858e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   10ffc:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   11000:	f7ef fe86 	bl	d10 <__aeabi_fmul>
   11004:	f7ef fa0c 	bl	420 <__aeabi_f2d>
   11008:	f001 fb70 	bl	126ec <round>
   1100c:	f7ef fd22 	bl	a54 <__aeabi_d2f>
   11010:	4607      	mov	r7, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   11012:	f10b 0901 	add.w	r9, fp, #1
   11016:	4648      	mov	r0, r9
   11018:	f7ef fe26 	bl	c68 <__aeabi_i2f>
   1101c:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
   11020:	f7ef fe76 	bl	d10 <__aeabi_fmul>
   11024:	2100      	movs	r1, #0
   11026:	f7ef fd6b 	bl	b00 <__addsf3>
   1102a:	f007 fab0 	bl	1858e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   1102e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   11032:	f7ef fe6d 	bl	d10 <__aeabi_fmul>
   11036:	4680      	mov	r8, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
   11038:	4630      	mov	r0, r6
   1103a:	f007 faa8 	bl	1858e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   1103e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   11042:	f7ef fe65 	bl	d10 <__aeabi_fmul>
   11046:	f7ef f9eb 	bl	420 <__aeabi_f2d>
   1104a:	f001 fb4f 	bl	126ec <round>
   1104e:	f7ef fd01 	bl	a54 <__aeabi_d2f>
   11052:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   11054:	4640      	mov	r0, r8
   11056:	f7ef fd53 	bl	b00 <__addsf3>
   1105a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1105e:	f7ef fe57 	bl	d10 <__aeabi_fmul>
   11062:	f7ef f9dd 	bl	420 <__aeabi_f2d>
   11066:	f001 fb41 	bl	126ec <round>
   1106a:	f7ef fcf3 	bl	a54 <__aeabi_d2f>
   1106e:	4680      	mov	r8, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   11070:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
   11074:	4630      	mov	r0, r6
   11076:	f7ef fd43 	bl	b00 <__addsf3>
   1107a:	f007 fa88 	bl	1858e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   1107e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   11082:	f7ef fe45 	bl	d10 <__aeabi_fmul>
   11086:	f7ef f9cb 	bl	420 <__aeabi_f2d>
   1108a:	f001 fb2f 	bl	126ec <round>
   1108e:	f7ef fce1 	bl	a54 <__aeabi_d2f>
   11092:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
   11094:	4640      	mov	r0, r8
   11096:	f7ef fd31 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
   1109a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1109e:	f7ef fe37 	bl	d10 <__aeabi_fmul>
   110a2:	f7ef f9bd 	bl	420 <__aeabi_f2d>
   110a6:	f001 fb21 	bl	126ec <round>
   110aa:	f7ef fcd3 	bl	a54 <__aeabi_d2f>
   110ae:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   110b0:	4638      	mov	r0, r7
   110b2:	f7ef fd23 	bl	afc <__aeabi_fsub>
   110b6:	900f      	str	r0, [sp, #60]	; 0x3c
   110b8:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   110bc:	910e      	str	r1, [sp, #56]	; 0x38
      if (__a < __b)
   110be:	f7ef ffc5 	bl	104c <__aeabi_fcmplt>
   110c2:	2800      	cmp	r0, #0
   110c4:	d182      	bne.n	10fcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x378>
      return __a;
   110c6:	ae0f      	add	r6, sp, #60	; 0x3c
                               32767.0f);
   110c8:	4921      	ldr	r1, [pc, #132]	; (11150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   110ca:	910d      	str	r1, [sp, #52]	; 0x34
      if (__b < __a)
   110cc:	6830      	ldr	r0, [r6, #0]
   110ce:	f7ef ffdb 	bl	1088 <__aeabi_fcmpgt>
   110d2:	2800      	cmp	r0, #0
   110d4:	f43f af7c 	beq.w	10fd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
	return __b;
   110d8:	ae0d      	add	r6, sp, #52	; 0x34
   110da:	e779      	b.n	10fd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
   110dc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   110e0:	9e08      	ldr	r6, [sp, #32]
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
   110e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   110e6:	f007 fa52 	bl	1858e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   110ea:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   110ee:	f7ef fe0f 	bl	d10 <__aeabi_fmul>
   110f2:	f7ef f995 	bl	420 <__aeabi_f2d>
   110f6:	f001 faf9 	bl	126ec <round>
   110fa:	f7ef fcab 	bl	a54 <__aeabi_d2f>
   110fe:	900c      	str	r0, [sp, #48]	; 0x30
   11100:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   11104:	910b      	str	r1, [sp, #44]	; 0x2c
      if (__a < __b)
   11106:	f7ef ffa1 	bl	104c <__aeabi_fcmplt>
   1110a:	b9e0      	cbnz	r0, 11146 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f2>
      return __a;
   1110c:	af0c      	add	r7, sp, #48	; 0x30
   1110e:	4910      	ldr	r1, [pc, #64]	; (11150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   11110:	910a      	str	r1, [sp, #40]	; 0x28
      if (__b < __a)
   11112:	6838      	ldr	r0, [r7, #0]
   11114:	f7ef ffb8 	bl	1088 <__aeabi_fcmpgt>
   11118:	b9b8      	cbnz	r0, 1114a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f6>
  table[num - 1] = std::min<float>(
   1111a:	6838      	ldr	r0, [r7, #0]
   1111c:	f7ef ffbe 	bl	109c <__aeabi_f2iz>
   11120:	9b06      	ldr	r3, [sp, #24]
   11122:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    op_data->zero_point = output->params.zero_point;
   11126:	9a05      	ldr	r2, [sp, #20]
   11128:	6913      	ldr	r3, [r2, #16]
   1112a:	f8c9 301c 	str.w	r3, [r9, #28]
    op_data->scale = output->params.scale;
   1112e:	68d3      	ldr	r3, [r2, #12]
   11130:	f8c9 3020 	str.w	r3, [r9, #32]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
   11134:	f8cd 9000 	str.w	r9, [sp]
   11138:	696b      	ldr	r3, [r5, #20]
   1113a:	9a05      	ldr	r2, [sp, #20]
   1113c:	4631      	mov	r1, r6
   1113e:	4620      	mov	r0, r4
   11140:	f7f0 fa56 	bl	15f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
   11144:	e59b      	b.n	10c7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
	return __b;
   11146:	af0b      	add	r7, sp, #44	; 0x2c
   11148:	e7e1      	b.n	1110e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
	return __b;
   1114a:	af0a      	add	r7, sp, #40	; 0x28
   1114c:	e7e5      	b.n	1111a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c6>
   1114e:	bf00      	nop
   11150:	46fffe00 	.word	0x46fffe00

00011154 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   11154:	4b03      	ldr	r3, [pc, #12]	; (11164 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   11156:	4a04      	ldr	r2, [pc, #16]	; (11168 <z_device_state_init+0x14>)
   11158:	4293      	cmp	r3, r2
   1115a:	d201      	bcs.n	11160 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1115c:	3318      	adds	r3, #24
   1115e:	e7fa      	b.n	11156 <z_device_state_init+0x2>
	}
}
   11160:	4770      	bx	lr
   11162:	bf00      	nop
   11164:	00019730 	.word	0x00019730
   11168:	000197a8 	.word	0x000197a8

0001116c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1116c:	b570      	push	{r4, r5, r6, lr}
   1116e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   11170:	4b11      	ldr	r3, [pc, #68]	; (111b8 <z_sys_init_run_level+0x4c>)
   11172:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   11176:	e009      	b.n	1118c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   11178:	4240      	negs	r0, r0
   1117a:	e017      	b.n	111ac <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1117c:	68eb      	ldr	r3, [r5, #12]
   1117e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   11180:	68ea      	ldr	r2, [r5, #12]
   11182:	7853      	ldrb	r3, [r2, #1]
   11184:	f043 0301 	orr.w	r3, r3, #1
   11188:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1118a:	3408      	adds	r4, #8
   1118c:	1c73      	adds	r3, r6, #1
   1118e:	4a0a      	ldr	r2, [pc, #40]	; (111b8 <z_sys_init_run_level+0x4c>)
   11190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11194:	42a3      	cmp	r3, r4
   11196:	d90d      	bls.n	111b4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   11198:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1119a:	6823      	ldr	r3, [r4, #0]
   1119c:	4628      	mov	r0, r5
   1119e:	4798      	blx	r3
		if (dev != NULL) {
   111a0:	2d00      	cmp	r5, #0
   111a2:	d0f2      	beq.n	1118a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   111a4:	2800      	cmp	r0, #0
   111a6:	d0eb      	beq.n	11180 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   111a8:	2800      	cmp	r0, #0
   111aa:	dbe5      	blt.n	11178 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   111ac:	28ff      	cmp	r0, #255	; 0xff
   111ae:	dde5      	ble.n	1117c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   111b0:	20ff      	movs	r0, #255	; 0xff
   111b2:	e7e3      	b.n	1117c <z_sys_init_run_level+0x10>
		}
	}
}
   111b4:	bd70      	pop	{r4, r5, r6, pc}
   111b6:	bf00      	nop
   111b8:	0001cf7c 	.word	0x0001cf7c

000111bc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   111bc:	4b01      	ldr	r3, [pc, #4]	; (111c4 <z_impl_z_errno+0x8>)
   111be:	6898      	ldr	r0, [r3, #8]
}
   111c0:	3094      	adds	r0, #148	; 0x94
   111c2:	4770      	bx	lr
   111c4:	200272fc 	.word	0x200272fc

000111c8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   111c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   111ca:	b089      	sub	sp, #36	; 0x24
   111cc:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   111ce:	4b15      	ldr	r3, [pc, #84]	; (11224 <init_idle_thread+0x5c>)
   111d0:	25b0      	movs	r5, #176	; 0xb0
   111d2:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   111d6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   111da:	4e13      	ldr	r6, [pc, #76]	; (11228 <init_idle_thread+0x60>)
   111dc:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   111e0:	af06      	add	r7, sp, #24
   111e2:	4603      	mov	r3, r0
   111e4:	4a11      	ldr	r2, [pc, #68]	; (1122c <init_idle_thread+0x64>)
   111e6:	2108      	movs	r1, #8
   111e8:	4638      	mov	r0, r7
   111ea:	f002 ff24 	bl	14036 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   111ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   111f2:	480f      	ldr	r0, [pc, #60]	; (11230 <init_idle_thread+0x68>)
   111f4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   111f8:	9705      	str	r7, [sp, #20]
   111fa:	2301      	movs	r3, #1
   111fc:	9304      	str	r3, [sp, #16]
   111fe:	230f      	movs	r3, #15
   11200:	9303      	str	r3, [sp, #12]
   11202:	2300      	movs	r3, #0
   11204:	9302      	str	r3, [sp, #8]
   11206:	9301      	str	r3, [sp, #4]
   11208:	9400      	str	r4, [sp, #0]
   1120a:	4b0a      	ldr	r3, [pc, #40]	; (11234 <init_idle_thread+0x6c>)
   1120c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11210:	4631      	mov	r1, r6
   11212:	4628      	mov	r0, r5
   11214:	f000 f946 	bl	114a4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11218:	7b6b      	ldrb	r3, [r5, #13]
   1121a:	f023 0304 	bic.w	r3, r3, #4
   1121e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   11220:	b009      	add	sp, #36	; 0x24
   11222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11224:	20018420 	.word	0x20018420
   11228:	2002f530 	.word	0x2002f530
   1122c:	0001cf94 	.word	0x0001cf94
   11230:	200272fc 	.word	0x200272fc
   11234:	000186fd 	.word	0x000186fd

00011238 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   11238:	b570      	push	{r4, r5, r6, lr}
   1123a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1123c:	f000 fdfe 	bl	11e3c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   11240:	4d1a      	ldr	r5, [pc, #104]	; (112ac <prepare_multithreading+0x74>)
   11242:	4b1b      	ldr	r3, [pc, #108]	; (112b0 <prepare_multithreading+0x78>)
   11244:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   11246:	4b1b      	ldr	r3, [pc, #108]	; (112b4 <prepare_multithreading+0x7c>)
   11248:	9305      	str	r3, [sp, #20]
   1124a:	2301      	movs	r3, #1
   1124c:	9304      	str	r3, [sp, #16]
   1124e:	2400      	movs	r4, #0
   11250:	9403      	str	r4, [sp, #12]
   11252:	9402      	str	r4, [sp, #8]
   11254:	9401      	str	r4, [sp, #4]
   11256:	9400      	str	r4, [sp, #0]
   11258:	4b17      	ldr	r3, [pc, #92]	; (112b8 <prepare_multithreading+0x80>)
   1125a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1125e:	4917      	ldr	r1, [pc, #92]	; (112bc <prepare_multithreading+0x84>)
   11260:	4628      	mov	r0, r5
   11262:	f000 f91f 	bl	114a4 <z_setup_new_thread>
   11266:	4606      	mov	r6, r0
   11268:	7b6b      	ldrb	r3, [r5, #13]
   1126a:	f023 0304 	bic.w	r3, r3, #4
   1126e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   11270:	4628      	mov	r0, r5
   11272:	f007 faad 	bl	187d0 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   11276:	2c00      	cmp	r4, #0
   11278:	dd02      	ble.n	11280 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1127a:	4630      	mov	r0, r6
   1127c:	b006      	add	sp, #24
   1127e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   11280:	4620      	mov	r0, r4
   11282:	f7ff ffa1 	bl	111c8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   11286:	4b0e      	ldr	r3, [pc, #56]	; (112c0 <prepare_multithreading+0x88>)
   11288:	22b0      	movs	r2, #176	; 0xb0
   1128a:	fb02 3204 	mla	r2, r2, r4, r3
   1128e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   11292:	4b07      	ldr	r3, [pc, #28]	; (112b0 <prepare_multithreading+0x78>)
   11294:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   11298:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1129a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1129c:	4a09      	ldr	r2, [pc, #36]	; (112c4 <prepare_multithreading+0x8c>)
   1129e:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
   112a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   112a6:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   112a8:	3401      	adds	r4, #1
   112aa:	e7e4      	b.n	11276 <prepare_multithreading+0x3e>
   112ac:	200184d0 	.word	0x200184d0
   112b0:	200272fc 	.word	0x200272fc
   112b4:	0001cfa0 	.word	0x0001cfa0
   112b8:	000112c9 	.word	0x000112c9
   112bc:	20027530 	.word	0x20027530
   112c0:	20018420 	.word	0x20018420
   112c4:	2002f670 	.word	0x2002f670

000112c8 <bg_thread_main>:
{
   112c8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   112ca:	4b0b      	ldr	r3, [pc, #44]	; (112f8 <bg_thread_main+0x30>)
   112cc:	2201      	movs	r2, #1
   112ce:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   112d0:	2002      	movs	r0, #2
   112d2:	f7ff ff4b 	bl	1116c <z_sys_init_run_level>
	boot_banner();
   112d6:	f001 f83b 	bl	12350 <boot_banner>
	z_cpp_init_static();
   112da:	f003 fabd 	bl	14858 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   112de:	2003      	movs	r0, #3
   112e0:	f7ff ff44 	bl	1116c <z_sys_init_run_level>
	z_init_static_threads();
   112e4:	f000 f942 	bl	1156c <z_init_static_threads>
	main();
   112e8:	f002 fe20 	bl	13f2c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   112ec:	4a03      	ldr	r2, [pc, #12]	; (112fc <bg_thread_main+0x34>)
   112ee:	7b13      	ldrb	r3, [r2, #12]
   112f0:	f023 0301 	bic.w	r3, r3, #1
   112f4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   112f6:	bd08      	pop	{r3, pc}
   112f8:	2002736b 	.word	0x2002736b
   112fc:	200184d0 	.word	0x200184d0

00011300 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   11300:	b508      	push	{r3, lr}
   11302:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   11304:	4a01      	ldr	r2, [pc, #4]	; (1130c <switch_to_main_thread+0xc>)
   11306:	4802      	ldr	r0, [pc, #8]	; (11310 <switch_to_main_thread+0x10>)
   11308:	f7f3 f85a 	bl	43c0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1130c:	000112c9 	.word	0x000112c9
   11310:	200184d0 	.word	0x200184d0

00011314 <z_bss_zero>:
{
   11314:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   11316:	4803      	ldr	r0, [pc, #12]	; (11324 <z_bss_zero+0x10>)
   11318:	4a03      	ldr	r2, [pc, #12]	; (11328 <z_bss_zero+0x14>)
   1131a:	1a12      	subs	r2, r2, r0
   1131c:	2100      	movs	r1, #0
   1131e:	f007 fbf5 	bl	18b0c <memset>
}
   11322:	bd08      	pop	{r3, pc}
   11324:	20018400 	.word	0x20018400
   11328:	2002752c 	.word	0x2002752c

0001132c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1132c:	b500      	push	{lr}
   1132e:	b0ad      	sub	sp, #180	; 0xb4
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   11330:	4b1c      	ldr	r3, [pc, #112]	; (113a4 <z_cstart+0x78>)
	uint32_t msp =
   11332:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   11336:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1133a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1133e:	4c1a      	ldr	r4, [pc, #104]	; (113a8 <z_cstart+0x7c>)
   11340:	23e0      	movs	r3, #224	; 0xe0
   11342:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   11346:	2500      	movs	r5, #0
   11348:	77e5      	strb	r5, [r4, #31]
   1134a:	7625      	strb	r5, [r4, #24]
   1134c:	7665      	strb	r5, [r4, #25]
   1134e:	76a5      	strb	r5, [r4, #26]
   11350:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   11354:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11356:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1135a:	6263      	str	r3, [r4, #36]	; 0x24
   1135c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   11360:	f7f3 f972 	bl	4648 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   11364:	f7f2 ff40 	bl	41e8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   11368:	f04f 33ff 	mov.w	r3, #4294967295
   1136c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1136e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   11370:	f7f3 fba2 	bl	4ab8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   11374:	f7f3 fa2a 	bl	47cc <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   11378:	2401      	movs	r4, #1
   1137a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1137e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   11382:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
   11384:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   11386:	4b09      	ldr	r3, [pc, #36]	; (113ac <z_cstart+0x80>)
   11388:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1138c:	f7ff fee2 	bl	11154 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   11390:	4628      	mov	r0, r5
   11392:	f7ff feeb 	bl	1116c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   11396:	4620      	mov	r0, r4
   11398:	f7ff fee8 	bl	1116c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1139c:	f7ff ff4c 	bl	11238 <prepare_multithreading>
   113a0:	f7ff ffae 	bl	11300 <switch_to_main_thread>
   113a4:	2002f670 	.word	0x2002f670
   113a8:	e000ed00 	.word	0xe000ed00
   113ac:	200272fc 	.word	0x200272fc

000113b0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   113b0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   113b2:	4c06      	ldr	r4, [pc, #24]	; (113cc <init_mem_slab_module+0x1c>)
	int rc = 0;
   113b4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   113b6:	4b06      	ldr	r3, [pc, #24]	; (113d0 <init_mem_slab_module+0x20>)
   113b8:	429c      	cmp	r4, r3
   113ba:	d206      	bcs.n	113ca <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   113bc:	4620      	mov	r0, r4
   113be:	f007 f924 	bl	1860a <create_free_list>
		if (rc < 0) {
   113c2:	2800      	cmp	r0, #0
   113c4:	db01      	blt.n	113ca <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   113c6:	3420      	adds	r4, #32
   113c8:	e7f5      	b.n	113b6 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   113ca:	bd10      	pop	{r4, pc}
   113cc:	20018374 	.word	0x20018374
   113d0:	20018374 	.word	0x20018374

000113d4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   113d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   113d6:	b083      	sub	sp, #12
   113d8:	460c      	mov	r4, r1
   113da:	461f      	mov	r7, r3
   113dc:	f04f 0320 	mov.w	r3, #32
   113e0:	f3ef 8111 	mrs	r1, BASEPRI
   113e4:	f383 8812 	msr	BASEPRI_MAX, r3
   113e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   113ec:	6983      	ldr	r3, [r0, #24]
   113ee:	b16b      	cbz	r3, 1140c <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   113f0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   113f2:	6983      	ldr	r3, [r0, #24]
   113f4:	681b      	ldr	r3, [r3, #0]
   113f6:	6183      	str	r3, [r0, #24]
		slab->num_used++;
   113f8:	69c3      	ldr	r3, [r0, #28]
   113fa:	3301      	adds	r3, #1
   113fc:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   113fe:	2000      	movs	r0, #0
	__asm__ volatile(
   11400:	f381 8811 	msr	BASEPRI, r1
   11404:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   11408:	b003      	add	sp, #12
   1140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1140c:	4616      	mov	r6, r2
   1140e:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   11412:	ea56 0307 	orrs.w	r3, r6, r7
   11416:	d104      	bne.n	11422 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   11418:	2300      	movs	r3, #0
   1141a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1141c:	f06f 000b 	mvn.w	r0, #11
   11420:	e7ee      	b.n	11400 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   11422:	e9cd 6700 	strd	r6, r7, [sp]
   11426:	4602      	mov	r2, r0
   11428:	4628      	mov	r0, r5
   1142a:	f000 fbdd 	bl	11be8 <z_pend_curr>
		if (result == 0) {
   1142e:	2800      	cmp	r0, #0
   11430:	d1ea      	bne.n	11408 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   11432:	4b02      	ldr	r3, [pc, #8]	; (1143c <k_mem_slab_alloc+0x68>)
   11434:	689b      	ldr	r3, [r3, #8]
   11436:	695b      	ldr	r3, [r3, #20]
   11438:	6023      	str	r3, [r4, #0]
		return result;
   1143a:	e7e5      	b.n	11408 <k_mem_slab_alloc+0x34>
   1143c:	200272fc 	.word	0x200272fc

00011440 <z_thread_monitor_exit>:
	__asm__ volatile(
   11440:	f04f 0320 	mov.w	r3, #32
   11444:	f3ef 8111 	mrs	r1, BASEPRI
   11448:	f383 8812 	msr	BASEPRI_MAX, r3
   1144c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   11450:	4b0a      	ldr	r3, [pc, #40]	; (1147c <z_thread_monitor_exit+0x3c>)
   11452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11454:	4283      	cmp	r3, r0
   11456:	d104      	bne.n	11462 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   11458:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1145a:	4b08      	ldr	r3, [pc, #32]	; (1147c <z_thread_monitor_exit+0x3c>)
   1145c:	629a      	str	r2, [r3, #40]	; 0x28
   1145e:	e007      	b.n	11470 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   11460:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   11462:	b113      	cbz	r3, 1146a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   11464:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
   11466:	4282      	cmp	r2, r0
   11468:	d1fa      	bne.n	11460 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1146a:	b10b      	cbz	r3, 11470 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1146c:	6f02      	ldr	r2, [r0, #112]	; 0x70
   1146e:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
   11470:	f381 8811 	msr	BASEPRI, r1
   11474:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   11478:	4770      	bx	lr
   1147a:	bf00      	nop
   1147c:	200272fc 	.word	0x200272fc

00011480 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   11480:	b538      	push	{r3, r4, r5, lr}
   11482:	4614      	mov	r4, r2
   11484:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   11486:	ea54 0305 	orrs.w	r3, r4, r5
   1148a:	d102      	bne.n	11492 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1148c:	f007 f921 	bl	186d2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   11490:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11492:	462b      	mov	r3, r5
   11494:	4902      	ldr	r1, [pc, #8]	; (114a0 <schedule_new_thread+0x20>)
   11496:	3018      	adds	r0, #24
   11498:	f000 fe2e 	bl	120f8 <z_add_timeout>
   1149c:	e7f8      	b.n	11490 <schedule_new_thread+0x10>
   1149e:	bf00      	nop
   114a0:	00018809 	.word	0x00018809

000114a4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   114a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a8:	b085      	sub	sp, #20
   114aa:	4604      	mov	r4, r0
   114ac:	460f      	mov	r7, r1
   114ae:	4615      	mov	r5, r2
   114b0:	461e      	mov	r6, r3
   114b2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   114b6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   114ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   114be:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   114c2:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   114c6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   114c8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   114ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   114cc:	2204      	movs	r2, #4
   114ce:	9911      	ldr	r1, [sp, #68]	; 0x44
   114d0:	f007 f903 	bl	186da <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   114d4:	462a      	mov	r2, r5
   114d6:	4639      	mov	r1, r7
   114d8:	4620      	mov	r0, r4
   114da:	f007 f8e8 	bl	186ae <setup_thread_stack>
   114de:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   114e0:	f8cd 8008 	str.w	r8, [sp, #8]
   114e4:	f8cd 9004 	str.w	r9, [sp, #4]
   114e8:	f8cd a000 	str.w	sl, [sp]
   114ec:	4633      	mov	r3, r6
   114ee:	4602      	mov	r2, r0
   114f0:	4639      	mov	r1, r7
   114f2:	4620      	mov	r0, r4
   114f4:	f7f2 ff44 	bl	4380 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   114f8:	2300      	movs	r3, #0
   114fa:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   114fc:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
   114fe:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   11502:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   11506:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
   1150a:	f04f 0320 	mov.w	r3, #32
   1150e:	f3ef 8211 	mrs	r2, BASEPRI
   11512:	f383 8812 	msr	BASEPRI_MAX, r3
   11516:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1151a:	4b13      	ldr	r3, [pc, #76]	; (11568 <z_setup_new_thread+0xc4>)
   1151c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1151e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
   11520:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   11522:	f382 8811 	msr	BASEPRI, r2
   11526:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1152a:	f1bb 0f00 	cmp.w	fp, #0
   1152e:	d013      	beq.n	11558 <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   11530:	221f      	movs	r2, #31
   11532:	4659      	mov	r1, fp
   11534:	f104 0074 	add.w	r0, r4, #116	; 0x74
   11538:	f007 fc61 	bl	18dfe <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1153c:	2300      	movs	r3, #0
   1153e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   11542:	4b09      	ldr	r3, [pc, #36]	; (11568 <z_setup_new_thread+0xc4>)
   11544:	689b      	ldr	r3, [r3, #8]
   11546:	b15b      	cbz	r3, 11560 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   11548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1154c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   11550:	4628      	mov	r0, r5
   11552:	b005      	add	sp, #20
   11554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   11558:	2300      	movs	r3, #0
   1155a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   1155e:	e7f0      	b.n	11542 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   11560:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
   11564:	e7f4      	b.n	11550 <z_setup_new_thread+0xac>
   11566:	bf00      	nop
   11568:	200272fc 	.word	0x200272fc

0001156c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1156c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   11570:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   11572:	4c23      	ldr	r4, [pc, #140]	; (11600 <z_init_static_threads+0x94>)
   11574:	4b23      	ldr	r3, [pc, #140]	; (11604 <z_init_static_threads+0x98>)
   11576:	429c      	cmp	r4, r3
   11578:	d215      	bcs.n	115a6 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1157a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1157c:	9305      	str	r3, [sp, #20]
   1157e:	6a23      	ldr	r3, [r4, #32]
   11580:	9304      	str	r3, [sp, #16]
   11582:	69e3      	ldr	r3, [r4, #28]
   11584:	9303      	str	r3, [sp, #12]
   11586:	69a3      	ldr	r3, [r4, #24]
   11588:	9302      	str	r3, [sp, #8]
   1158a:	6963      	ldr	r3, [r4, #20]
   1158c:	9301      	str	r3, [sp, #4]
   1158e:	6923      	ldr	r3, [r4, #16]
   11590:	9300      	str	r3, [sp, #0]
   11592:	68e3      	ldr	r3, [r4, #12]
   11594:	68a2      	ldr	r2, [r4, #8]
   11596:	6861      	ldr	r1, [r4, #4]
   11598:	6820      	ldr	r0, [r4, #0]
   1159a:	f7ff ff83 	bl	114a4 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1159e:	6823      	ldr	r3, [r4, #0]
   115a0:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   115a2:	3430      	adds	r4, #48	; 0x30
   115a4:	e7e6      	b.n	11574 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   115a6:	f000 f9d7 	bl	11958 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   115aa:	4c15      	ldr	r4, [pc, #84]	; (11600 <z_init_static_threads+0x94>)
   115ac:	e01b      	b.n	115e6 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   115ae:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   115b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   115b4:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   115b8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   115bc:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   115c0:	03d8      	lsls	r0, r3, #15
   115c2:	f240 35e7 	movw	r5, #999	; 0x3e7
   115c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   115ca:	2300      	movs	r3, #0
   115cc:	1940      	adds	r0, r0, r5
   115ce:	f04f 0500 	mov.w	r5, #0
   115d2:	eb45 0101 	adc.w	r1, r5, r1
   115d6:	f7ef fd87 	bl	10e8 <__aeabi_uldivmod>
   115da:	4602      	mov	r2, r0
   115dc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   115de:	4630      	mov	r0, r6
   115e0:	f7ff ff4e 	bl	11480 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   115e4:	3430      	adds	r4, #48	; 0x30
   115e6:	4b07      	ldr	r3, [pc, #28]	; (11604 <z_init_static_threads+0x98>)
   115e8:	429c      	cmp	r4, r3
   115ea:	d204      	bcs.n	115f6 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   115ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   115ee:	f1b3 3fff 	cmp.w	r3, #4294967295
   115f2:	d0f7      	beq.n	115e4 <z_init_static_threads+0x78>
   115f4:	e7db      	b.n	115ae <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   115f6:	f000 fbad 	bl	11d54 <k_sched_unlock>
}
   115fa:	b006      	add	sp, #24
   115fc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   11600:	20018374 	.word	0x20018374
   11604:	20018374 	.word	0x20018374

00011608 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   11608:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   1160a:	f007 f9dc 	bl	189c6 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1160e:	4b04      	ldr	r3, [pc, #16]	; (11620 <pm_save_idle+0x18>)
   11610:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   11612:	f7f2 fc9b 	bl	3f4c <pm_system_suspend>
   11616:	b100      	cbz	r0, 1161a <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   11618:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   1161a:	f7f2 fdeb 	bl	41f4 <arch_cpu_idle>
   1161e:	e7fb      	b.n	11618 <pm_save_idle+0x10>
   11620:	200272fc 	.word	0x200272fc

00011624 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   11624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11628:	b083      	sub	sp, #12
   1162a:	4604      	mov	r4, r0
   1162c:	461d      	mov	r5, r3
	__asm__ volatile(
   1162e:	f04f 0320 	mov.w	r3, #32
   11632:	f3ef 8711 	mrs	r7, BASEPRI
   11636:	f383 8812 	msr	BASEPRI_MAX, r3
   1163a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1163e:	68c1      	ldr	r1, [r0, #12]
   11640:	b999      	cbnz	r1, 1166a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   11642:	2900      	cmp	r1, #0
   11644:	d14f      	bne.n	116e6 <z_impl_k_mutex_lock+0xc2>
   11646:	4b3a      	ldr	r3, [pc, #232]	; (11730 <z_impl_k_mutex_lock+0x10c>)
   11648:	689b      	ldr	r3, [r3, #8]
   1164a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1164e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   11650:	3101      	adds	r1, #1
   11652:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   11654:	4b36      	ldr	r3, [pc, #216]	; (11730 <z_impl_k_mutex_lock+0x10c>)
   11656:	689b      	ldr	r3, [r3, #8]
   11658:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1165a:	f387 8811 	msr	BASEPRI, r7
   1165e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   11662:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   11664:	b003      	add	sp, #12
   11666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1166a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1166c:	6882      	ldr	r2, [r0, #8]
   1166e:	4b30      	ldr	r3, [pc, #192]	; (11730 <z_impl_k_mutex_lock+0x10c>)
   11670:	689b      	ldr	r3, [r3, #8]
   11672:	429a      	cmp	r2, r3
   11674:	d0e5      	beq.n	11642 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   11676:	ea55 0106 	orrs.w	r1, r5, r6
   1167a:	bf0c      	ite	eq
   1167c:	f04f 0801 	moveq.w	r8, #1
   11680:	f04f 0800 	movne.w	r8, #0
   11684:	d031      	beq.n	116ea <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   11686:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1168a:	4649      	mov	r1, r9
   1168c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   11690:	f007 f840 	bl	18714 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   11694:	4581      	cmp	r9, r0
   11696:	dc2f      	bgt.n	116f8 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   11698:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1169c:	9600      	str	r6, [sp, #0]
   1169e:	9501      	str	r5, [sp, #4]
   116a0:	4622      	mov	r2, r4
   116a2:	4639      	mov	r1, r7
   116a4:	4823      	ldr	r0, [pc, #140]	; (11734 <z_impl_k_mutex_lock+0x110>)
   116a6:	f000 fa9f 	bl	11be8 <z_pend_curr>
	if (got_mutex == 0) {
   116aa:	2800      	cmp	r0, #0
   116ac:	d0da      	beq.n	11664 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   116ae:	f04f 0320 	mov.w	r3, #32
   116b2:	f3ef 8511 	mrs	r5, BASEPRI
   116b6:	f383 8812 	msr	BASEPRI_MAX, r3
   116ba:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   116be:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116c0:	429c      	cmp	r4, r3
   116c2:	d01f      	beq.n	11704 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   116c4:	b1f3      	cbz	r3, 11704 <z_impl_k_mutex_lock+0xe0>
   116c6:	6921      	ldr	r1, [r4, #16]
   116c8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   116cc:	f007 f822 	bl	18714 <new_prio_for_inheritance>
   116d0:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   116d2:	4620      	mov	r0, r4
   116d4:	f007 f829 	bl	1872a <adjust_owner_prio>
   116d8:	b9b0      	cbnz	r0, 11708 <z_impl_k_mutex_lock+0xe4>
   116da:	f1b9 0f00 	cmp.w	r9, #0
   116de:	d015      	beq.n	1170c <z_impl_k_mutex_lock+0xe8>
   116e0:	f04f 0801 	mov.w	r8, #1
   116e4:	e012      	b.n	1170c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   116e6:	6923      	ldr	r3, [r4, #16]
   116e8:	e7b1      	b.n	1164e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   116ea:	f387 8811 	msr	BASEPRI, r7
   116ee:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   116f2:	f06f 000f 	mvn.w	r0, #15
   116f6:	e7b5      	b.n	11664 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   116f8:	4601      	mov	r1, r0
   116fa:	4620      	mov	r0, r4
   116fc:	f007 f815 	bl	1872a <adjust_owner_prio>
   11700:	4681      	mov	r9, r0
   11702:	e7cb      	b.n	1169c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   11704:	6921      	ldr	r1, [r4, #16]
   11706:	e7e4      	b.n	116d2 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   11708:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1170c:	f1b8 0f00 	cmp.w	r8, #0
   11710:	d106      	bne.n	11720 <z_impl_k_mutex_lock+0xfc>
   11712:	f385 8811 	msr	BASEPRI, r5
   11716:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1171a:	f06f 000a 	mvn.w	r0, #10
   1171e:	e7a1      	b.n	11664 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   11720:	4629      	mov	r1, r5
   11722:	4804      	ldr	r0, [pc, #16]	; (11734 <z_impl_k_mutex_lock+0x110>)
   11724:	f000 f8fc 	bl	11920 <z_reschedule>
	return -EAGAIN;
   11728:	f06f 000a 	mvn.w	r0, #10
   1172c:	e79a      	b.n	11664 <z_impl_k_mutex_lock+0x40>
   1172e:	bf00      	nop
   11730:	200272fc 	.word	0x200272fc
   11734:	20027328 	.word	0x20027328

00011738 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   11738:	6882      	ldr	r2, [r0, #8]
   1173a:	2a00      	cmp	r2, #0
   1173c:	d035      	beq.n	117aa <z_impl_k_mutex_unlock+0x72>
{
   1173e:	b538      	push	{r3, r4, r5, lr}
   11740:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   11742:	4b1d      	ldr	r3, [pc, #116]	; (117b8 <z_impl_k_mutex_unlock+0x80>)
   11744:	689b      	ldr	r3, [r3, #8]
   11746:	429a      	cmp	r2, r3
   11748:	d132      	bne.n	117b0 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1174a:	7bda      	ldrb	r2, [r3, #15]
   1174c:	3a01      	subs	r2, #1
   1174e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   11750:	68c3      	ldr	r3, [r0, #12]
   11752:	2b01      	cmp	r3, #1
   11754:	d905      	bls.n	11762 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   11756:	3b01      	subs	r3, #1
   11758:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1175a:	f000 fafb 	bl	11d54 <k_sched_unlock>

	return 0;
   1175e:	2000      	movs	r0, #0
}
   11760:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11762:	f04f 0320 	mov.w	r3, #32
   11766:	f3ef 8511 	mrs	r5, BASEPRI
   1176a:	f383 8812 	msr	BASEPRI_MAX, r3
   1176e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   11772:	6901      	ldr	r1, [r0, #16]
   11774:	f006 ffd9 	bl	1872a <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   11778:	4620      	mov	r0, r4
   1177a:	f007 f8c4 	bl	18906 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1177e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   11780:	b160      	cbz	r0, 1179c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   11782:	f990 300e 	ldrsb.w	r3, [r0, #14]
   11786:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   11788:	2300      	movs	r3, #0
   1178a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
   1178e:	f007 f81f 	bl	187d0 <z_ready_thread>
		z_reschedule(&lock, key);
   11792:	4629      	mov	r1, r5
   11794:	4809      	ldr	r0, [pc, #36]	; (117bc <z_impl_k_mutex_unlock+0x84>)
   11796:	f000 f8c3 	bl	11920 <z_reschedule>
   1179a:	e7de      	b.n	1175a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1179c:	2300      	movs	r3, #0
   1179e:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   117a0:	f385 8811 	msr	BASEPRI, r5
   117a4:	f3bf 8f6f 	isb	sy
   117a8:	e7d7      	b.n	1175a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   117aa:	f06f 0015 	mvn.w	r0, #21
}
   117ae:	4770      	bx	lr
		return -EPERM;
   117b0:	f04f 30ff 	mov.w	r0, #4294967295
   117b4:	e7d4      	b.n	11760 <z_impl_k_mutex_unlock+0x28>
   117b6:	bf00      	nop
   117b8:	200272fc 	.word	0x200272fc
   117bc:	20027328 	.word	0x20027328

000117c0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   117c0:	b538      	push	{r3, r4, r5, lr}
   117c2:	4604      	mov	r4, r0
	__asm__ volatile(
   117c4:	f04f 0320 	mov.w	r3, #32
   117c8:	f3ef 8511 	mrs	r5, BASEPRI
   117cc:	f383 8812 	msr	BASEPRI_MAX, r3
   117d0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   117d4:	f007 f897 	bl	18906 <z_unpend_first_thread>

	if (thread != NULL) {
   117d8:	b148      	cbz	r0, 117ee <z_impl_k_sem_give+0x2e>
   117da:	2200      	movs	r2, #0
   117dc:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   117e0:	f006 fff6 	bl	187d0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   117e4:	4629      	mov	r1, r5
   117e6:	4807      	ldr	r0, [pc, #28]	; (11804 <z_impl_k_sem_give+0x44>)
   117e8:	f000 f89a 	bl	11920 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   117ec:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   117ee:	68a3      	ldr	r3, [r4, #8]
   117f0:	68e2      	ldr	r2, [r4, #12]
   117f2:	4293      	cmp	r3, r2
   117f4:	d003      	beq.n	117fe <z_impl_k_sem_give+0x3e>
   117f6:	2201      	movs	r2, #1
   117f8:	4413      	add	r3, r2
   117fa:	60a3      	str	r3, [r4, #8]
}
   117fc:	e7f2      	b.n	117e4 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   117fe:	2200      	movs	r2, #0
   11800:	e7fa      	b.n	117f8 <z_impl_k_sem_give+0x38>
   11802:	bf00      	nop
   11804:	2002732c 	.word	0x2002732c

00011808 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   11808:	b530      	push	{r4, r5, lr}
   1180a:	b083      	sub	sp, #12
   1180c:	461d      	mov	r5, r3
   1180e:	f04f 0320 	mov.w	r3, #32
   11812:	f3ef 8111 	mrs	r1, BASEPRI
   11816:	f383 8812 	msr	BASEPRI_MAX, r3
   1181a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1181e:	6883      	ldr	r3, [r0, #8]
   11820:	b143      	cbz	r3, 11834 <z_impl_k_sem_take+0x2c>
		sem->count--;
   11822:	3b01      	subs	r3, #1
   11824:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   11826:	f381 8811 	msr	BASEPRI, r1
   1182a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1182e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   11830:	b003      	add	sp, #12
   11832:	bd30      	pop	{r4, r5, pc}
   11834:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11836:	ea54 0305 	orrs.w	r3, r4, r5
   1183a:	d006      	beq.n	1184a <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1183c:	e9cd 4500 	strd	r4, r5, [sp]
   11840:	4602      	mov	r2, r0
   11842:	4805      	ldr	r0, [pc, #20]	; (11858 <z_impl_k_sem_take+0x50>)
   11844:	f000 f9d0 	bl	11be8 <z_pend_curr>
	return ret;
   11848:	e7f2      	b.n	11830 <z_impl_k_sem_take+0x28>
   1184a:	f381 8811 	msr	BASEPRI, r1
   1184e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   11852:	f06f 000f 	mvn.w	r0, #15
   11856:	e7eb      	b.n	11830 <z_impl_k_sem_take+0x28>
   11858:	2002732c 	.word	0x2002732c

0001185c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1185c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1185e:	f1b3 3fff 	cmp.w	r3, #4294967295
   11862:	bf08      	it	eq
   11864:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11868:	d100      	bne.n	1186c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1186a:	bd38      	pop	{r3, r4, r5, pc}
   1186c:	4902      	ldr	r1, [pc, #8]	; (11878 <add_thread_timeout+0x1c>)
   1186e:	3018      	adds	r0, #24
   11870:	f000 fc42 	bl	120f8 <z_add_timeout>
   11874:	e7f9      	b.n	1186a <add_thread_timeout+0xe>
   11876:	bf00      	nop
   11878:	00018809 	.word	0x00018809

0001187c <z_reset_time_slice>:
{
   1187c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1187e:	4b08      	ldr	r3, [pc, #32]	; (118a0 <z_reset_time_slice+0x24>)
   11880:	681b      	ldr	r3, [r3, #0]
   11882:	b903      	cbnz	r3, 11886 <z_reset_time_slice+0xa>
}
   11884:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   11886:	f7f4 fa45 	bl	5d14 <sys_clock_elapsed>
   1188a:	4603      	mov	r3, r0
   1188c:	4a04      	ldr	r2, [pc, #16]	; (118a0 <z_reset_time_slice+0x24>)
   1188e:	6810      	ldr	r0, [r2, #0]
   11890:	4403      	add	r3, r0
   11892:	4a04      	ldr	r2, [pc, #16]	; (118a4 <z_reset_time_slice+0x28>)
   11894:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   11896:	2100      	movs	r1, #0
   11898:	f007 f8ab 	bl	189f2 <z_set_timeout_expiry>
}
   1189c:	e7f2      	b.n	11884 <z_reset_time_slice+0x8>
   1189e:	bf00      	nop
   118a0:	2002733c 	.word	0x2002733c
   118a4:	200272fc 	.word	0x200272fc

000118a8 <k_sched_time_slice_set>:
{
   118a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118ac:	4606      	mov	r6, r0
   118ae:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   118b0:	2300      	movs	r3, #0
	__asm__ volatile(
   118b2:	f04f 0220 	mov.w	r2, #32
   118b6:	f3ef 8711 	mrs	r7, BASEPRI
   118ba:	f382 8812 	msr	BASEPRI_MAX, r2
   118be:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   118c2:	e009      	b.n	118d8 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   118c4:	4b13      	ldr	r3, [pc, #76]	; (11914 <k_sched_time_slice_set+0x6c>)
   118c6:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   118ca:	f7ff ffd7 	bl	1187c <z_reset_time_slice>
	__asm__ volatile(
   118ce:	f387 8811 	msr	BASEPRI, r7
   118d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   118d6:	2301      	movs	r3, #1
   118d8:	b9cb      	cbnz	r3, 1190e <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   118da:	2300      	movs	r3, #0
   118dc:	4a0e      	ldr	r2, [pc, #56]	; (11918 <k_sched_time_slice_set+0x70>)
   118de:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   118e0:	0c75      	lsrs	r5, r6, #17
   118e2:	03f4      	lsls	r4, r6, #15
   118e4:	f240 30e7 	movw	r0, #999	; 0x3e7
   118e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   118ec:	2300      	movs	r3, #0
   118ee:	1820      	adds	r0, r4, r0
   118f0:	f04f 0100 	mov.w	r1, #0
   118f4:	eb45 0101 	adc.w	r1, r5, r1
   118f8:	f7ef fbf6 	bl	10e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   118fc:	4b07      	ldr	r3, [pc, #28]	; (1191c <k_sched_time_slice_set+0x74>)
   118fe:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   11900:	2e00      	cmp	r6, #0
   11902:	dddf      	ble.n	118c4 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   11904:	2802      	cmp	r0, #2
   11906:	bfb8      	it	lt
   11908:	2002      	movlt	r0, #2
   1190a:	6018      	str	r0, [r3, #0]
   1190c:	e7da      	b.n	118c4 <k_sched_time_slice_set+0x1c>
}
   1190e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11912:	bf00      	nop
   11914:	20027338 	.word	0x20027338
   11918:	200272fc 	.word	0x200272fc
   1191c:	2002733c 	.word	0x2002733c

00011920 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   11920:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   11922:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11924:	b921      	cbnz	r1, 11930 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11926:	f3ef 8305 	mrs	r3, IPSR
   1192a:	b913      	cbnz	r3, 11932 <z_reschedule+0x12>
   1192c:	2101      	movs	r1, #1
   1192e:	e000      	b.n	11932 <z_reschedule+0x12>
   11930:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   11932:	f011 0f01 	tst.w	r1, #1
   11936:	d007      	beq.n	11948 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   11938:	4b06      	ldr	r3, [pc, #24]	; (11954 <z_reschedule+0x34>)
   1193a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1193c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1193e:	429a      	cmp	r2, r3
   11940:	d002      	beq.n	11948 <z_reschedule+0x28>
	ret = arch_swap(key);
   11942:	f7f2 fcc3 	bl	42cc <arch_swap>
		z_swap(lock, key);
   11946:	e003      	b.n	11950 <z_reschedule+0x30>
   11948:	f380 8811 	msr	BASEPRI, r0
   1194c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   11950:	bd08      	pop	{r3, pc}
   11952:	bf00      	nop
   11954:	200272fc 	.word	0x200272fc

00011958 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   11958:	2300      	movs	r3, #0
	__asm__ volatile(
   1195a:	f04f 0220 	mov.w	r2, #32
   1195e:	f3ef 8111 	mrs	r1, BASEPRI
   11962:	f382 8812 	msr	BASEPRI_MAX, r2
   11966:	f3bf 8f6f 	isb	sy
   1196a:	b953      	cbnz	r3, 11982 <k_sched_lock+0x2a>
   1196c:	4b05      	ldr	r3, [pc, #20]	; (11984 <k_sched_lock+0x2c>)
   1196e:	689a      	ldr	r2, [r3, #8]
   11970:	7bd3      	ldrb	r3, [r2, #15]
   11972:	3b01      	subs	r3, #1
   11974:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   11976:	f381 8811 	msr	BASEPRI, r1
   1197a:	f3bf 8f6f 	isb	sy
   1197e:	2301      	movs	r3, #1
   11980:	e7f3      	b.n	1196a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   11982:	4770      	bx	lr
   11984:	200272fc 	.word	0x200272fc

00011988 <update_cache>:
{
   11988:	b538      	push	{r3, r4, r5, lr}
   1198a:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1198c:	480f      	ldr	r0, [pc, #60]	; (119cc <update_cache+0x44>)
   1198e:	f006 ff18 	bl	187c2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   11992:	4605      	mov	r5, r0
   11994:	b170      	cbz	r0, 119b4 <update_cache+0x2c>
	if (preempt_ok != 0) {
   11996:	b984      	cbnz	r4, 119ba <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   11998:	4b0d      	ldr	r3, [pc, #52]	; (119d0 <update_cache+0x48>)
   1199a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1199c:	7b5a      	ldrb	r2, [r3, #13]
   1199e:	f012 0f1f 	tst.w	r2, #31
   119a2:	d10a      	bne.n	119ba <update_cache+0x32>
	return node->next != NULL;
   119a4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   119a6:	b942      	cbnz	r2, 119ba <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   119a8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   119aa:	2a7f      	cmp	r2, #127	; 0x7f
   119ac:	d905      	bls.n	119ba <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   119ae:	4a08      	ldr	r2, [pc, #32]	; (119d0 <update_cache+0x48>)
   119b0:	61d3      	str	r3, [r2, #28]
   119b2:	e00a      	b.n	119ca <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   119b4:	4b06      	ldr	r3, [pc, #24]	; (119d0 <update_cache+0x48>)
   119b6:	68dd      	ldr	r5, [r3, #12]
   119b8:	e7ed      	b.n	11996 <update_cache+0xe>
		if (thread != _current) {
   119ba:	4b05      	ldr	r3, [pc, #20]	; (119d0 <update_cache+0x48>)
   119bc:	689b      	ldr	r3, [r3, #8]
   119be:	42ab      	cmp	r3, r5
   119c0:	d001      	beq.n	119c6 <update_cache+0x3e>
			z_reset_time_slice();
   119c2:	f7ff ff5b 	bl	1187c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   119c6:	4b02      	ldr	r3, [pc, #8]	; (119d0 <update_cache+0x48>)
   119c8:	61dd      	str	r5, [r3, #28]
}
   119ca:	bd38      	pop	{r3, r4, r5, pc}
   119cc:	2002731c 	.word	0x2002731c
   119d0:	200272fc 	.word	0x200272fc

000119d4 <move_thread_to_end_of_prio_q>:
{
   119d4:	b538      	push	{r3, r4, r5, lr}
   119d6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   119d8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   119da:	f990 300d 	ldrsb.w	r3, [r0, #13]
   119de:	2b00      	cmp	r3, #0
   119e0:	db28      	blt.n	11a34 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   119e2:	7b6b      	ldrb	r3, [r5, #13]
   119e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   119e8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   119ea:	4b1a      	ldr	r3, [pc, #104]	; (11a54 <move_thread_to_end_of_prio_q+0x80>)
   119ec:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   119f0:	429c      	cmp	r4, r3
   119f2:	d02d      	beq.n	11a50 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   119f4:	b16c      	cbz	r4, 11a12 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   119f6:	4621      	mov	r1, r4
   119f8:	4628      	mov	r0, r5
   119fa:	f006 febb 	bl	18774 <z_sched_prio_cmp>
   119fe:	2800      	cmp	r0, #0
   11a00:	dc20      	bgt.n	11a44 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11a02:	b134      	cbz	r4, 11a12 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   11a04:	4b13      	ldr	r3, [pc, #76]	; (11a54 <move_thread_to_end_of_prio_q+0x80>)
   11a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11a08:	429c      	cmp	r4, r3
   11a0a:	d002      	beq.n	11a12 <move_thread_to_end_of_prio_q+0x3e>
   11a0c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11a0e:	2c00      	cmp	r4, #0
   11a10:	d1f0      	bne.n	119f4 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   11a12:	4b10      	ldr	r3, [pc, #64]	; (11a54 <move_thread_to_end_of_prio_q+0x80>)
   11a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   11a16:	f103 0120 	add.w	r1, r3, #32
   11a1a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11a1c:	606a      	str	r2, [r5, #4]

	tail->next = node;
   11a1e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11a20:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   11a22:	4b0c      	ldr	r3, [pc, #48]	; (11a54 <move_thread_to_end_of_prio_q+0x80>)
   11a24:	6898      	ldr	r0, [r3, #8]
   11a26:	42a8      	cmp	r0, r5
   11a28:	bf14      	ite	ne
   11a2a:	2000      	movne	r0, #0
   11a2c:	2001      	moveq	r0, #1
   11a2e:	f7ff ffab 	bl	11988 <update_cache>
}
   11a32:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11a34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11a38:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   11a3a:	4601      	mov	r1, r0
   11a3c:	4806      	ldr	r0, [pc, #24]	; (11a58 <move_thread_to_end_of_prio_q+0x84>)
   11a3e:	f006 feb8 	bl	187b2 <z_priq_dumb_remove>
}
   11a42:	e7ce      	b.n	119e2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   11a44:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   11a46:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11a48:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11a4a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11a4c:	6065      	str	r5, [r4, #4]
}
   11a4e:	e7e8      	b.n	11a22 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11a50:	2400      	movs	r4, #0
   11a52:	e7cf      	b.n	119f4 <move_thread_to_end_of_prio_q+0x20>
   11a54:	200272fc 	.word	0x200272fc
   11a58:	2002731c 	.word	0x2002731c

00011a5c <z_time_slice>:
{
   11a5c:	b510      	push	{r4, lr}
	__asm__ volatile(
   11a5e:	f04f 0320 	mov.w	r3, #32
   11a62:	f3ef 8411 	mrs	r4, BASEPRI
   11a66:	f383 8812 	msr	BASEPRI_MAX, r3
   11a6a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   11a6e:	4b1c      	ldr	r3, [pc, #112]	; (11ae0 <z_time_slice+0x84>)
   11a70:	689b      	ldr	r3, [r3, #8]
   11a72:	4a1c      	ldr	r2, [pc, #112]	; (11ae4 <z_time_slice+0x88>)
   11a74:	6812      	ldr	r2, [r2, #0]
   11a76:	4293      	cmp	r3, r2
   11a78:	d01d      	beq.n	11ab6 <z_time_slice+0x5a>
	pending_current = NULL;
   11a7a:	4a1a      	ldr	r2, [pc, #104]	; (11ae4 <z_time_slice+0x88>)
   11a7c:	2100      	movs	r1, #0
   11a7e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   11a80:	4a19      	ldr	r2, [pc, #100]	; (11ae8 <z_time_slice+0x8c>)
   11a82:	6812      	ldr	r2, [r2, #0]
   11a84:	b322      	cbz	r2, 11ad0 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   11a86:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   11a88:	2a7f      	cmp	r2, #127	; 0x7f
   11a8a:	d821      	bhi.n	11ad0 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   11a8c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   11a8e:	f012 0f1f 	tst.w	r2, #31
   11a92:	d11d      	bne.n	11ad0 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   11a94:	f993 100e 	ldrsb.w	r1, [r3, #14]
   11a98:	4a14      	ldr	r2, [pc, #80]	; (11aec <z_time_slice+0x90>)
   11a9a:	6812      	ldr	r2, [r2, #0]
   11a9c:	4291      	cmp	r1, r2
   11a9e:	db17      	blt.n	11ad0 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   11aa0:	4a13      	ldr	r2, [pc, #76]	; (11af0 <z_time_slice+0x94>)
   11aa2:	4293      	cmp	r3, r2
   11aa4:	d014      	beq.n	11ad0 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   11aa6:	4a0e      	ldr	r2, [pc, #56]	; (11ae0 <z_time_slice+0x84>)
   11aa8:	6912      	ldr	r2, [r2, #16]
   11aaa:	4282      	cmp	r2, r0
   11aac:	dd0a      	ble.n	11ac4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   11aae:	1a10      	subs	r0, r2, r0
   11ab0:	4b0b      	ldr	r3, [pc, #44]	; (11ae0 <z_time_slice+0x84>)
   11ab2:	6118      	str	r0, [r3, #16]
   11ab4:	e00f      	b.n	11ad6 <z_time_slice+0x7a>
		z_reset_time_slice();
   11ab6:	f7ff fee1 	bl	1187c <z_reset_time_slice>
	__asm__ volatile(
   11aba:	f384 8811 	msr	BASEPRI, r4
   11abe:	f3bf 8f6f 	isb	sy
		return;
   11ac2:	e00c      	b.n	11ade <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   11ac4:	4618      	mov	r0, r3
   11ac6:	f7ff ff85 	bl	119d4 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   11aca:	f7ff fed7 	bl	1187c <z_reset_time_slice>
   11ace:	e002      	b.n	11ad6 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   11ad0:	4b03      	ldr	r3, [pc, #12]	; (11ae0 <z_time_slice+0x84>)
   11ad2:	2200      	movs	r2, #0
   11ad4:	611a      	str	r2, [r3, #16]
   11ad6:	f384 8811 	msr	BASEPRI, r4
   11ada:	f3bf 8f6f 	isb	sy
}
   11ade:	bd10      	pop	{r4, pc}
   11ae0:	200272fc 	.word	0x200272fc
   11ae4:	20027330 	.word	0x20027330
   11ae8:	2002733c 	.word	0x2002733c
   11aec:	20027338 	.word	0x20027338
   11af0:	20018420 	.word	0x20018420

00011af4 <ready_thread>:
{
   11af4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   11af6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   11af8:	f990 200d 	ldrsb.w	r2, [r0, #13]
   11afc:	2a00      	cmp	r2, #0
   11afe:	db2d      	blt.n	11b5c <ready_thread+0x68>
   11b00:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11b02:	f013 0f1f 	tst.w	r3, #31
   11b06:	d105      	bne.n	11b14 <ready_thread+0x20>
	return node->next != NULL;
   11b08:	6982      	ldr	r2, [r0, #24]
   11b0a:	b10a      	cbz	r2, 11b10 <ready_thread+0x1c>
   11b0c:	2200      	movs	r2, #0
   11b0e:	e002      	b.n	11b16 <ready_thread+0x22>
   11b10:	2201      	movs	r2, #1
   11b12:	e000      	b.n	11b16 <ready_thread+0x22>
   11b14:	2200      	movs	r2, #0
   11b16:	b30a      	cbz	r2, 11b5c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   11b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11b1c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   11b1e:	4b14      	ldr	r3, [pc, #80]	; (11b70 <ready_thread+0x7c>)
   11b20:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b24:	429d      	cmp	r5, r3
   11b26:	d020      	beq.n	11b6a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11b28:	b16d      	cbz	r5, 11b46 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11b2a:	4629      	mov	r1, r5
   11b2c:	4620      	mov	r0, r4
   11b2e:	f006 fe21 	bl	18774 <z_sched_prio_cmp>
   11b32:	2800      	cmp	r0, #0
   11b34:	dc13      	bgt.n	11b5e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11b36:	b135      	cbz	r5, 11b46 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   11b38:	4b0d      	ldr	r3, [pc, #52]	; (11b70 <ready_thread+0x7c>)
   11b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11b3c:	429d      	cmp	r5, r3
   11b3e:	d002      	beq.n	11b46 <ready_thread+0x52>
   11b40:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11b42:	2d00      	cmp	r5, #0
   11b44:	d1f0      	bne.n	11b28 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   11b46:	4b0a      	ldr	r3, [pc, #40]	; (11b70 <ready_thread+0x7c>)
   11b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11b4a:	f103 0120 	add.w	r1, r3, #32
   11b4e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   11b50:	6062      	str	r2, [r4, #4]
	tail->next = node;
   11b52:	6014      	str	r4, [r2, #0]
	list->tail = node;
   11b54:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   11b56:	2000      	movs	r0, #0
   11b58:	f7ff ff16 	bl	11988 <update_cache>
}
   11b5c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   11b5e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   11b60:	6063      	str	r3, [r4, #4]
	node->next = successor;
   11b62:	6025      	str	r5, [r4, #0]
	prev->next = node;
   11b64:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   11b66:	606c      	str	r4, [r5, #4]
}
   11b68:	e7f5      	b.n	11b56 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11b6a:	2500      	movs	r5, #0
   11b6c:	e7dc      	b.n	11b28 <ready_thread+0x34>
   11b6e:	bf00      	nop
   11b70:	200272fc 	.word	0x200272fc

00011b74 <z_sched_start>:
{
   11b74:	b510      	push	{r4, lr}
	__asm__ volatile(
   11b76:	f04f 0320 	mov.w	r3, #32
   11b7a:	f3ef 8411 	mrs	r4, BASEPRI
   11b7e:	f383 8812 	msr	BASEPRI_MAX, r3
   11b82:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   11b86:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   11b88:	f013 0f04 	tst.w	r3, #4
   11b8c:	d104      	bne.n	11b98 <z_sched_start+0x24>
	__asm__ volatile(
   11b8e:	f384 8811 	msr	BASEPRI, r4
   11b92:	f3bf 8f6f 	isb	sy
}
   11b96:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11b98:	f023 0304 	bic.w	r3, r3, #4
   11b9c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   11b9e:	f7ff ffa9 	bl	11af4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11ba2:	4621      	mov	r1, r4
   11ba4:	4801      	ldr	r0, [pc, #4]	; (11bac <z_sched_start+0x38>)
   11ba6:	f7ff febb 	bl	11920 <z_reschedule>
   11baa:	e7f4      	b.n	11b96 <z_sched_start+0x22>
   11bac:	20027334 	.word	0x20027334

00011bb0 <unready_thread>:
{
   11bb0:	b510      	push	{r4, lr}
   11bb2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   11bb4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   11bb6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   11bba:	2b00      	cmp	r3, #0
   11bbc:	db08      	blt.n	11bd0 <unready_thread+0x20>
	update_cache(thread == _current);
   11bbe:	4b08      	ldr	r3, [pc, #32]	; (11be0 <unready_thread+0x30>)
   11bc0:	6898      	ldr	r0, [r3, #8]
   11bc2:	42a0      	cmp	r0, r4
   11bc4:	bf14      	ite	ne
   11bc6:	2000      	movne	r0, #0
   11bc8:	2001      	moveq	r0, #1
   11bca:	f7ff fedd 	bl	11988 <update_cache>
}
   11bce:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11bd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11bd4:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   11bd6:	4601      	mov	r1, r0
   11bd8:	4802      	ldr	r0, [pc, #8]	; (11be4 <unready_thread+0x34>)
   11bda:	f006 fdea 	bl	187b2 <z_priq_dumb_remove>
}
   11bde:	e7ee      	b.n	11bbe <unready_thread+0xe>
   11be0:	200272fc 	.word	0x200272fc
   11be4:	2002731c 	.word	0x2002731c

00011be8 <z_pend_curr>:
{
   11be8:	b510      	push	{r4, lr}
   11bea:	460c      	mov	r4, r1
   11bec:	4611      	mov	r1, r2
	pending_current = _current;
   11bee:	4b06      	ldr	r3, [pc, #24]	; (11c08 <z_pend_curr+0x20>)
   11bf0:	6898      	ldr	r0, [r3, #8]
   11bf2:	4b06      	ldr	r3, [pc, #24]	; (11c0c <z_pend_curr+0x24>)
   11bf4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   11bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11bfa:	f006 fe63 	bl	188c4 <pend>
   11bfe:	4620      	mov	r0, r4
   11c00:	f7f2 fb64 	bl	42cc <arch_swap>
}
   11c04:	bd10      	pop	{r4, pc}
   11c06:	bf00      	nop
   11c08:	200272fc 	.word	0x200272fc
   11c0c:	20027330 	.word	0x20027330

00011c10 <z_set_prio>:
{
   11c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11c14:	4604      	mov	r4, r0
   11c16:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   11c18:	2300      	movs	r3, #0
	__asm__ volatile(
   11c1a:	f04f 0220 	mov.w	r2, #32
   11c1e:	f3ef 8611 	mrs	r6, BASEPRI
   11c22:	f382 8812 	msr	BASEPRI_MAX, r2
   11c26:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   11c2a:	4698      	mov	r8, r3
   11c2c:	e008      	b.n	11c40 <z_set_prio+0x30>
		if (need_sched) {
   11c2e:	f012 0801 	ands.w	r8, r2, #1
   11c32:	d111      	bne.n	11c58 <z_set_prio+0x48>
			thread->base.prio = prio;
   11c34:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   11c36:	f386 8811 	msr	BASEPRI, r6
   11c3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11c3e:	2301      	movs	r3, #1
   11c40:	461a      	mov	r2, r3
   11c42:	2b00      	cmp	r3, #0
   11c44:	d13d      	bne.n	11cc2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   11c46:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11c48:	f013 0f1f 	tst.w	r3, #31
   11c4c:	d1ef      	bne.n	11c2e <z_set_prio+0x1e>
	return node->next != NULL;
   11c4e:	69a1      	ldr	r1, [r4, #24]
   11c50:	2900      	cmp	r1, #0
   11c52:	d1ec      	bne.n	11c2e <z_set_prio+0x1e>
   11c54:	2201      	movs	r2, #1
   11c56:	e7ea      	b.n	11c2e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11c5c:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   11c5e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 11ccc <z_set_prio+0xbc>
   11c62:	4621      	mov	r1, r4
   11c64:	4648      	mov	r0, r9
   11c66:	f006 fda4 	bl	187b2 <z_priq_dumb_remove>
				thread->base.prio = prio;
   11c6a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   11c6c:	7b63      	ldrb	r3, [r4, #13]
   11c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11c72:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   11c74:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11c78:	454d      	cmp	r5, r9
   11c7a:	d020      	beq.n	11cbe <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11c7c:	b16d      	cbz	r5, 11c9a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11c7e:	4629      	mov	r1, r5
   11c80:	4620      	mov	r0, r4
   11c82:	f006 fd77 	bl	18774 <z_sched_prio_cmp>
   11c86:	2800      	cmp	r0, #0
   11c88:	dc13      	bgt.n	11cb2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11c8a:	b135      	cbz	r5, 11c9a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   11c8c:	4b0e      	ldr	r3, [pc, #56]	; (11cc8 <z_set_prio+0xb8>)
   11c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11c90:	429d      	cmp	r5, r3
   11c92:	d002      	beq.n	11c9a <z_set_prio+0x8a>
   11c94:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11c96:	2d00      	cmp	r5, #0
   11c98:	d1f0      	bne.n	11c7c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   11c9a:	4b0b      	ldr	r3, [pc, #44]	; (11cc8 <z_set_prio+0xb8>)
   11c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11c9e:	f103 0120 	add.w	r1, r3, #32
   11ca2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   11ca4:	6062      	str	r2, [r4, #4]
	tail->next = node;
   11ca6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   11ca8:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   11caa:	2001      	movs	r0, #1
   11cac:	f7ff fe6c 	bl	11988 <update_cache>
   11cb0:	e7c1      	b.n	11c36 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   11cb2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   11cb4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   11cb6:	6025      	str	r5, [r4, #0]
	prev->next = node;
   11cb8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   11cba:	606c      	str	r4, [r5, #4]
}
   11cbc:	e7f5      	b.n	11caa <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11cbe:	2500      	movs	r5, #0
   11cc0:	e7dc      	b.n	11c7c <z_set_prio+0x6c>
}
   11cc2:	4640      	mov	r0, r8
   11cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11cc8:	200272fc 	.word	0x200272fc
   11ccc:	2002731c 	.word	0x2002731c

00011cd0 <z_impl_k_thread_suspend>:
{
   11cd0:	b538      	push	{r3, r4, r5, lr}
   11cd2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   11cd4:	3018      	adds	r0, #24
   11cd6:	f006 fe58 	bl	1898a <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   11cda:	2300      	movs	r3, #0
	__asm__ volatile(
   11cdc:	f04f 0220 	mov.w	r2, #32
   11ce0:	f3ef 8511 	mrs	r5, BASEPRI
   11ce4:	f382 8812 	msr	BASEPRI_MAX, r2
   11ce8:	f3bf 8f6f 	isb	sy
   11cec:	e010      	b.n	11d10 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11cee:	7b63      	ldrb	r3, [r4, #13]
   11cf0:	f043 0310 	orr.w	r3, r3, #16
   11cf4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   11cf6:	4b15      	ldr	r3, [pc, #84]	; (11d4c <z_impl_k_thread_suspend+0x7c>)
   11cf8:	6898      	ldr	r0, [r3, #8]
   11cfa:	42a0      	cmp	r0, r4
   11cfc:	bf14      	ite	ne
   11cfe:	2000      	movne	r0, #0
   11d00:	2001      	moveq	r0, #1
   11d02:	f7ff fe41 	bl	11988 <update_cache>
	__asm__ volatile(
   11d06:	f385 8811 	msr	BASEPRI, r5
   11d0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11d0e:	2301      	movs	r3, #1
   11d10:	b963      	cbnz	r3, 11d2c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   11d12:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   11d14:	f994 300d 	ldrsb.w	r3, [r4, #13]
   11d18:	2b00      	cmp	r3, #0
   11d1a:	dae8      	bge.n	11cee <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11d1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11d20:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   11d22:	4621      	mov	r1, r4
   11d24:	480a      	ldr	r0, [pc, #40]	; (11d50 <z_impl_k_thread_suspend+0x80>)
   11d26:	f006 fd44 	bl	187b2 <z_priq_dumb_remove>
}
   11d2a:	e7e0      	b.n	11cee <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   11d2c:	4b07      	ldr	r3, [pc, #28]	; (11d4c <z_impl_k_thread_suspend+0x7c>)
   11d2e:	689b      	ldr	r3, [r3, #8]
   11d30:	42a3      	cmp	r3, r4
   11d32:	d000      	beq.n	11d36 <z_impl_k_thread_suspend+0x66>
}
   11d34:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11d36:	f04f 0320 	mov.w	r3, #32
   11d3a:	f3ef 8011 	mrs	r0, BASEPRI
   11d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   11d42:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   11d46:	f006 fd1f 	bl	18788 <z_reschedule_irqlock>
   11d4a:	e7f3      	b.n	11d34 <z_impl_k_thread_suspend+0x64>
   11d4c:	200272fc 	.word	0x200272fc
   11d50:	2002731c 	.word	0x2002731c

00011d54 <k_sched_unlock>:

void k_sched_unlock(void)
{
   11d54:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   11d56:	2300      	movs	r3, #0
   11d58:	f04f 0220 	mov.w	r2, #32
   11d5c:	f3ef 8411 	mrs	r4, BASEPRI
   11d60:	f382 8812 	msr	BASEPRI_MAX, r2
   11d64:	f3bf 8f6f 	isb	sy
   11d68:	b96b      	cbnz	r3, 11d86 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   11d6a:	4b0c      	ldr	r3, [pc, #48]	; (11d9c <k_sched_unlock+0x48>)
   11d6c:	689a      	ldr	r2, [r3, #8]
   11d6e:	7bd3      	ldrb	r3, [r2, #15]
   11d70:	3301      	adds	r3, #1
   11d72:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11d74:	2000      	movs	r0, #0
   11d76:	f7ff fe07 	bl	11988 <update_cache>
	__asm__ volatile(
   11d7a:	f384 8811 	msr	BASEPRI, r4
   11d7e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11d82:	2301      	movs	r3, #1
   11d84:	e7f0      	b.n	11d68 <k_sched_unlock+0x14>
	__asm__ volatile(
   11d86:	f04f 0320 	mov.w	r3, #32
   11d8a:	f3ef 8011 	mrs	r0, BASEPRI
   11d8e:	f383 8812 	msr	BASEPRI_MAX, r3
   11d92:	f3bf 8f6f 	isb	sy
   11d96:	f006 fcf7 	bl	18788 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   11d9a:	bd10      	pop	{r4, pc}
   11d9c:	200272fc 	.word	0x200272fc

00011da0 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   11da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   11da2:	7b43      	ldrb	r3, [r0, #13]
   11da4:	f013 0f08 	tst.w	r3, #8
   11da8:	d145      	bne.n	11e36 <end_thread+0x96>
   11daa:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   11dac:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11db0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11db4:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   11db6:	f013 0f80 	tst.w	r3, #128	; 0x80
   11dba:	d114      	bne.n	11de6 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   11dbc:	68ab      	ldr	r3, [r5, #8]
   11dbe:	b15b      	cbz	r3, 11dd8 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   11dc0:	4628      	mov	r0, r5
   11dc2:	f006 fcd5 	bl	18770 <pended_on_thread>
   11dc6:	4629      	mov	r1, r5
   11dc8:	f006 fcf3 	bl	187b2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11dcc:	7b6b      	ldrb	r3, [r5, #13]
   11dce:	f023 0302 	bic.w	r3, r3, #2
   11dd2:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   11dd4:	2300      	movs	r3, #0
   11dd6:	60ab      	str	r3, [r5, #8]
   11dd8:	f105 0018 	add.w	r0, r5, #24
   11ddc:	f006 fdd5 	bl	1898a <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   11de0:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11de4:	e01c      	b.n	11e20 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11dea:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   11dec:	4601      	mov	r1, r0
   11dee:	4812      	ldr	r0, [pc, #72]	; (11e38 <end_thread+0x98>)
   11df0:	f006 fcdf 	bl	187b2 <z_priq_dumb_remove>
}
   11df4:	e7e2      	b.n	11dbc <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   11df6:	4620      	mov	r0, r4
   11df8:	f006 fcba 	bl	18770 <pended_on_thread>
   11dfc:	4621      	mov	r1, r4
   11dfe:	f006 fcd8 	bl	187b2 <z_priq_dumb_remove>
   11e02:	7b63      	ldrb	r3, [r4, #13]
   11e04:	f023 0302 	bic.w	r3, r3, #2
   11e08:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   11e0a:	2600      	movs	r6, #0
   11e0c:	60a6      	str	r6, [r4, #8]
   11e0e:	f104 0018 	add.w	r0, r4, #24
   11e12:	f006 fdba 	bl	1898a <z_abort_timeout>
   11e16:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
   11e1a:	4620      	mov	r0, r4
   11e1c:	f7ff fe6a 	bl	11af4 <ready_thread>
	return list->head == list;
   11e20:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e22:	42bc      	cmp	r4, r7
   11e24:	d001      	beq.n	11e2a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11e26:	2c00      	cmp	r4, #0
   11e28:	d1e5      	bne.n	11df6 <end_thread+0x56>
		update_cache(1);
   11e2a:	2001      	movs	r0, #1
   11e2c:	f7ff fdac 	bl	11988 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   11e30:	4628      	mov	r0, r5
   11e32:	f7ff fb05 	bl	11440 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   11e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e38:	2002731c 	.word	0x2002731c

00011e3c <z_sched_init>:
{
   11e3c:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   11e3e:	4b05      	ldr	r3, [pc, #20]	; (11e54 <z_sched_init+0x18>)
   11e40:	f103 0220 	add.w	r2, r3, #32
   11e44:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   11e46:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   11e48:	2100      	movs	r1, #0
   11e4a:	4608      	mov	r0, r1
   11e4c:	f7ff fd2c 	bl	118a8 <k_sched_time_slice_set>
}
   11e50:	bd08      	pop	{r3, pc}
   11e52:	bf00      	nop
   11e54:	200272fc 	.word	0x200272fc

00011e58 <z_impl_k_yield>:
{
   11e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e5a:	f04f 0320 	mov.w	r3, #32
   11e5e:	f3ef 8611 	mrs	r6, BASEPRI
   11e62:	f383 8812 	msr	BASEPRI_MAX, r3
   11e66:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   11e6a:	4c1c      	ldr	r4, [pc, #112]	; (11edc <z_impl_k_yield+0x84>)
   11e6c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11e6e:	7b4b      	ldrb	r3, [r1, #13]
   11e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11e74:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   11e76:	f104 0720 	add.w	r7, r4, #32
   11e7a:	4638      	mov	r0, r7
   11e7c:	f006 fc99 	bl	187b2 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   11e80:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11e82:	7b6b      	ldrb	r3, [r5, #13]
   11e84:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11e88:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11e8a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e8c:	42bc      	cmp	r4, r7
   11e8e:	d023      	beq.n	11ed8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11e90:	b16c      	cbz	r4, 11eae <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11e92:	4621      	mov	r1, r4
   11e94:	4628      	mov	r0, r5
   11e96:	f006 fc6d 	bl	18774 <z_sched_prio_cmp>
   11e9a:	2800      	cmp	r0, #0
   11e9c:	dc16      	bgt.n	11ecc <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11e9e:	b134      	cbz	r4, 11eae <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   11ea0:	4b0e      	ldr	r3, [pc, #56]	; (11edc <z_impl_k_yield+0x84>)
   11ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11ea4:	429c      	cmp	r4, r3
   11ea6:	d002      	beq.n	11eae <z_impl_k_yield+0x56>
   11ea8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11eaa:	2c00      	cmp	r4, #0
   11eac:	d1f0      	bne.n	11e90 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   11eae:	4b0b      	ldr	r3, [pc, #44]	; (11edc <z_impl_k_yield+0x84>)
   11eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11eb2:	f103 0120 	add.w	r1, r3, #32
   11eb6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11eb8:	606a      	str	r2, [r5, #4]
	tail->next = node;
   11eba:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11ebc:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   11ebe:	2001      	movs	r0, #1
   11ec0:	f7ff fd62 	bl	11988 <update_cache>
   11ec4:	4630      	mov	r0, r6
   11ec6:	f7f2 fa01 	bl	42cc <arch_swap>
}
   11eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   11ecc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   11ece:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11ed0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11ed2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11ed4:	6065      	str	r5, [r4, #4]
}
   11ed6:	e7f2      	b.n	11ebe <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11ed8:	2400      	movs	r4, #0
   11eda:	e7d9      	b.n	11e90 <z_impl_k_yield+0x38>
   11edc:	200272fc 	.word	0x200272fc

00011ee0 <z_tick_sleep>:
{
   11ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ee4:	4604      	mov	r4, r0
   11ee6:	460d      	mov	r5, r1
	if (ticks == 0) {
   11ee8:	ea54 0105 	orrs.w	r1, r4, r5
   11eec:	d037      	beq.n	11f5e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   11eee:	f06f 0101 	mvn.w	r1, #1
   11ef2:	1a0a      	subs	r2, r1, r0
   11ef4:	f04f 31ff 	mov.w	r1, #4294967295
   11ef8:	eb61 0305 	sbc.w	r3, r1, r5
   11efc:	2a01      	cmp	r2, #1
   11efe:	f173 0300 	sbcs.w	r3, r3, #0
   11f02:	db30      	blt.n	11f66 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   11f04:	f06f 0601 	mvn.w	r6, #1
   11f08:	1a36      	subs	r6, r6, r0
   11f0a:	f04f 0320 	mov.w	r3, #32
   11f0e:	f3ef 8811 	mrs	r8, BASEPRI
   11f12:	f383 8812 	msr	BASEPRI_MAX, r3
   11f16:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   11f1a:	4f16      	ldr	r7, [pc, #88]	; (11f74 <z_tick_sleep+0x94>)
   11f1c:	68b8      	ldr	r0, [r7, #8]
   11f1e:	4b16      	ldr	r3, [pc, #88]	; (11f78 <z_tick_sleep+0x98>)
   11f20:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   11f22:	f7ff fe45 	bl	11bb0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   11f26:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11f28:	4622      	mov	r2, r4
   11f2a:	462b      	mov	r3, r5
   11f2c:	4913      	ldr	r1, [pc, #76]	; (11f7c <z_tick_sleep+0x9c>)
   11f2e:	3018      	adds	r0, #24
   11f30:	f000 f8e2 	bl	120f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   11f34:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11f36:	7b53      	ldrb	r3, [r2, #13]
   11f38:	f043 0310 	orr.w	r3, r3, #16
   11f3c:	7353      	strb	r3, [r2, #13]
   11f3e:	4640      	mov	r0, r8
   11f40:	f7f2 f9c4 	bl	42cc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   11f44:	2500      	movs	r5, #0
   11f46:	f006 fd7f 	bl	18a48 <sys_clock_tick_get_32>
   11f4a:	1a34      	subs	r4, r6, r0
   11f4c:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   11f50:	2c01      	cmp	r4, #1
   11f52:	f175 0300 	sbcs.w	r3, r5, #0
   11f56:	da0a      	bge.n	11f6e <z_tick_sleep+0x8e>
	return 0;
   11f58:	2000      	movs	r0, #0
}
   11f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   11f5e:	f7ff ff7b 	bl	11e58 <z_impl_k_yield>
		return 0;
   11f62:	2000      	movs	r0, #0
   11f64:	e7f9      	b.n	11f5a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   11f66:	f006 fd6f 	bl	18a48 <sys_clock_tick_get_32>
   11f6a:	1906      	adds	r6, r0, r4
   11f6c:	e7cd      	b.n	11f0a <z_tick_sleep+0x2a>
		return ticks;
   11f6e:	4620      	mov	r0, r4
   11f70:	e7f3      	b.n	11f5a <z_tick_sleep+0x7a>
   11f72:	bf00      	nop
   11f74:	200272fc 	.word	0x200272fc
   11f78:	20027330 	.word	0x20027330
   11f7c:	00018809 	.word	0x00018809

00011f80 <z_impl_k_sleep>:
{
   11f80:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11f82:	f1b1 3fff 	cmp.w	r1, #4294967295
   11f86:	bf08      	it	eq
   11f88:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   11f8c:	d01a      	beq.n	11fc4 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   11f8e:	f7ff ffa7 	bl	11ee0 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   11f92:	4604      	mov	r4, r0
   11f94:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   11f96:	0169      	lsls	r1, r5, #5
   11f98:	0143      	lsls	r3, r0, #5
   11f9a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   11f9e:	1a18      	subs	r0, r3, r0
   11fa0:	eb62 0305 	sbc.w	r3, r2, r5
   11fa4:	009a      	lsls	r2, r3, #2
   11fa6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   11faa:	0081      	lsls	r1, r0, #2
   11fac:	4613      	mov	r3, r2
   11fae:	1908      	adds	r0, r1, r4
   11fb0:	eb45 0303 	adc.w	r3, r5, r3
   11fb4:	00da      	lsls	r2, r3, #3
   11fb6:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   11fba:	00c1      	lsls	r1, r0, #3
   11fbc:	0bc8      	lsrs	r0, r1, #15
   11fbe:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   11fc2:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   11fc4:	4b03      	ldr	r3, [pc, #12]	; (11fd4 <z_impl_k_sleep+0x54>)
   11fc6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   11fc8:	f7ff fe82 	bl	11cd0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   11fcc:	f04f 30ff 	mov.w	r0, #4294967295
   11fd0:	e7f7      	b.n	11fc2 <z_impl_k_sleep+0x42>
   11fd2:	bf00      	nop
   11fd4:	200272fc 	.word	0x200272fc

00011fd8 <z_impl_z_current_get>:
}
   11fd8:	4b01      	ldr	r3, [pc, #4]	; (11fe0 <z_impl_z_current_get+0x8>)
   11fda:	6898      	ldr	r0, [r3, #8]
   11fdc:	4770      	bx	lr
   11fde:	bf00      	nop
   11fe0:	200272fc 	.word	0x200272fc

00011fe4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   11fe4:	b538      	push	{r3, r4, r5, lr}
   11fe6:	f04f 0320 	mov.w	r3, #32
   11fea:	f3ef 8511 	mrs	r5, BASEPRI
   11fee:	f383 8812 	msr	BASEPRI_MAX, r3
   11ff2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11ff6:	7b43      	ldrb	r3, [r0, #13]
   11ff8:	f013 0f08 	tst.w	r3, #8
   11ffc:	d004      	beq.n	12008 <z_thread_abort+0x24>
	__asm__ volatile(
   11ffe:	f385 8811 	msr	BASEPRI, r5
   12002:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   12006:	bd38      	pop	{r3, r4, r5, pc}
   12008:	4604      	mov	r4, r0
	end_thread(thread);
   1200a:	f7ff fec9 	bl	11da0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1200e:	4b08      	ldr	r3, [pc, #32]	; (12030 <z_thread_abort+0x4c>)
   12010:	689b      	ldr	r3, [r3, #8]
   12012:	42a3      	cmp	r3, r4
   12014:	d004      	beq.n	12020 <z_thread_abort+0x3c>
   12016:	f385 8811 	msr	BASEPRI, r5
   1201a:	f3bf 8f6f 	isb	sy
   1201e:	e7f2      	b.n	12006 <z_thread_abort+0x22>
   12020:	f3ef 8305 	mrs	r3, IPSR
   12024:	2b00      	cmp	r3, #0
   12026:	d1f6      	bne.n	12016 <z_thread_abort+0x32>
   12028:	4628      	mov	r0, r5
   1202a:	f7f2 f94f 	bl	42cc <arch_swap>
	return ret;
   1202e:	e7f2      	b.n	12016 <z_thread_abort+0x32>
   12030:	200272fc 	.word	0x200272fc

00012034 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   12034:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   12036:	4806      	ldr	r0, [pc, #24]	; (12050 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12038:	4a06      	ldr	r2, [pc, #24]	; (12054 <z_data_copy+0x20>)
   1203a:	1a12      	subs	r2, r2, r0
   1203c:	4906      	ldr	r1, [pc, #24]	; (12058 <z_data_copy+0x24>)
   1203e:	f006 fd58 	bl	18af2 <memcpy>
   12042:	4a06      	ldr	r2, [pc, #24]	; (1205c <z_data_copy+0x28>)
   12044:	4906      	ldr	r1, [pc, #24]	; (12060 <z_data_copy+0x2c>)
   12046:	4807      	ldr	r0, [pc, #28]	; (12064 <z_data_copy+0x30>)
   12048:	f006 fd53 	bl	18af2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1204c:	bd08      	pop	{r3, pc}
   1204e:	bf00      	nop
   12050:	20000000 	.word	0x20000000
   12054:	20018400 	.word	0x20018400
   12058:	0001d294 	.word	0x0001d294
   1205c:	00000000 	.word	0x00000000
   12060:	0001d294 	.word	0x0001d294
   12064:	20000000 	.word	0x20000000

00012068 <first>:
	return list->head == list;
   12068:	4b03      	ldr	r3, [pc, #12]	; (12078 <first+0x10>)
   1206a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1206c:	4298      	cmp	r0, r3
   1206e:	d000      	beq.n	12072 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   12070:	4770      	bx	lr
   12072:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   12074:	e7fc      	b.n	12070 <first+0x8>
   12076:	bf00      	nop
   12078:	20018124 	.word	0x20018124

0001207c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1207c:	b130      	cbz	r0, 1208c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1207e:	4a04      	ldr	r2, [pc, #16]	; (12090 <next+0x14>)
   12080:	6852      	ldr	r2, [r2, #4]
   12082:	4290      	cmp	r0, r2
   12084:	d001      	beq.n	1208a <next+0xe>
   12086:	6800      	ldr	r0, [r0, #0]
   12088:	4770      	bx	lr
   1208a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1208c:	4770      	bx	lr
   1208e:	bf00      	nop
   12090:	20018124 	.word	0x20018124

00012094 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   12094:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   12096:	4b04      	ldr	r3, [pc, #16]	; (120a8 <elapsed+0x14>)
   12098:	681b      	ldr	r3, [r3, #0]
   1209a:	b10b      	cbz	r3, 120a0 <elapsed+0xc>
   1209c:	2000      	movs	r0, #0
}
   1209e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   120a0:	f7f3 fe38 	bl	5d14 <sys_clock_elapsed>
   120a4:	e7fb      	b.n	1209e <elapsed+0xa>
   120a6:	bf00      	nop
   120a8:	20027340 	.word	0x20027340

000120ac <next_timeout>:

static int32_t next_timeout(void)
{
   120ac:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   120ae:	f7ff ffdb 	bl	12068 <first>
   120b2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   120b4:	f7ff ffee 	bl	12094 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   120b8:	b18c      	cbz	r4, 120de <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   120ba:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   120be:	1a12      	subs	r2, r2, r0
   120c0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   120c4:	2a01      	cmp	r2, #1
   120c6:	f173 0100 	sbcs.w	r1, r3, #0
   120ca:	db11      	blt.n	120f0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   120cc:	4610      	mov	r0, r2
   120ce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   120d2:	f173 0300 	sbcs.w	r3, r3, #0
   120d6:	db04      	blt.n	120e2 <next_timeout+0x36>
   120d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   120dc:	e001      	b.n	120e2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   120de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   120e2:	4b04      	ldr	r3, [pc, #16]	; (120f4 <next_timeout+0x48>)
   120e4:	691b      	ldr	r3, [r3, #16]
   120e6:	b113      	cbz	r3, 120ee <next_timeout+0x42>
   120e8:	4283      	cmp	r3, r0
   120ea:	da00      	bge.n	120ee <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   120ec:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   120ee:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   120f0:	2000      	movs	r0, #0
   120f2:	e7f6      	b.n	120e2 <next_timeout+0x36>
   120f4:	200272fc 	.word	0x200272fc

000120f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   120f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120fc:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   120fe:	f1b3 3fff 	cmp.w	r3, #4294967295
   12102:	bf08      	it	eq
   12104:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   12108:	f000 8096 	beq.w	12238 <z_add_timeout+0x140>
   1210c:	4682      	mov	sl, r0
   1210e:	4614      	mov	r4, r2
   12110:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   12112:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   12114:	2300      	movs	r3, #0
	__asm__ volatile(
   12116:	f04f 0220 	mov.w	r2, #32
   1211a:	f3ef 8b11 	mrs	fp, BASEPRI
   1211e:	f382 8812 	msr	BASEPRI_MAX, r2
   12122:	f3bf 8f6f 	isb	sy
   12126:	e02e      	b.n	12186 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   12128:	2201      	movs	r2, #1
   1212a:	2300      	movs	r3, #0
   1212c:	e04b      	b.n	121c6 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1212e:	f7ff ffb1 	bl	12094 <elapsed>
   12132:	1822      	adds	r2, r4, r0
   12134:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   12138:	3201      	adds	r2, #1
   1213a:	f143 0300 	adc.w	r3, r3, #0
   1213e:	f8ca 2010 	str.w	r2, [sl, #16]
   12142:	f8ca 3014 	str.w	r3, [sl, #20]
   12146:	e042      	b.n	121ce <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   12148:	9b00      	ldr	r3, [sp, #0]
   1214a:	1ac2      	subs	r2, r0, r3
   1214c:	9b01      	ldr	r3, [sp, #4]
   1214e:	eb61 0303 	sbc.w	r3, r1, r3
   12152:	f8cc 2010 	str.w	r2, [ip, #16]
   12156:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1215a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1215e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   12162:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   12166:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1216a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1216e:	f1bc 0f00 	cmp.w	ip, #0
   12172:	d049      	beq.n	12208 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   12174:	f7ff ff78 	bl	12068 <first>
   12178:	4582      	cmp	sl, r0
   1217a:	d050      	beq.n	1221e <z_add_timeout+0x126>
	__asm__ volatile(
   1217c:	f38b 8811 	msr	BASEPRI, fp
   12180:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   12184:	2301      	movs	r3, #1
   12186:	2b00      	cmp	r3, #0
   12188:	d156      	bne.n	12238 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1218a:	f06f 0301 	mvn.w	r3, #1
   1218e:	ebb3 0804 	subs.w	r8, r3, r4
   12192:	f04f 30ff 	mov.w	r0, #4294967295
   12196:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1219a:	f1b8 0f00 	cmp.w	r8, #0
   1219e:	f179 0300 	sbcs.w	r3, r9, #0
   121a2:	dbc4      	blt.n	1212e <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   121a4:	4a26      	ldr	r2, [pc, #152]	; (12240 <z_add_timeout+0x148>)
   121a6:	6813      	ldr	r3, [r2, #0]
   121a8:	6852      	ldr	r2, [r2, #4]
   121aa:	18e3      	adds	r3, r4, r3
   121ac:	eb45 0202 	adc.w	r2, r5, r2
   121b0:	f06f 0101 	mvn.w	r1, #1
   121b4:	1ace      	subs	r6, r1, r3
   121b6:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   121ba:	4632      	mov	r2, r6
   121bc:	463b      	mov	r3, r7
   121be:	2e01      	cmp	r6, #1
   121c0:	f177 0100 	sbcs.w	r1, r7, #0
   121c4:	dbb0      	blt.n	12128 <z_add_timeout+0x30>
   121c6:	f8ca 2010 	str.w	r2, [sl, #16]
   121ca:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   121ce:	f7ff ff4b 	bl	12068 <first>
   121d2:	4684      	mov	ip, r0
   121d4:	f1bc 0f00 	cmp.w	ip, #0
   121d8:	d0c9      	beq.n	1216e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   121da:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   121de:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   121e2:	e9cd 2300 	strd	r2, r3, [sp]
   121e6:	4282      	cmp	r2, r0
   121e8:	418b      	sbcs	r3, r1
   121ea:	dbad      	blt.n	12148 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   121ec:	9b00      	ldr	r3, [sp, #0]
   121ee:	1a1a      	subs	r2, r3, r0
   121f0:	9b01      	ldr	r3, [sp, #4]
   121f2:	eb63 0301 	sbc.w	r3, r3, r1
   121f6:	f8ca 2010 	str.w	r2, [sl, #16]
   121fa:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   121fe:	4660      	mov	r0, ip
   12200:	f7ff ff3c 	bl	1207c <next>
   12204:	4684      	mov	ip, r0
   12206:	e7e5      	b.n	121d4 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   12208:	4b0e      	ldr	r3, [pc, #56]	; (12244 <z_add_timeout+0x14c>)
   1220a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1220c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   12210:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   12214:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   12218:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1221c:	e7aa      	b.n	12174 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1221e:	f7ff ff45 	bl	120ac <next_timeout>

			if (next_time == 0 ||
   12222:	4603      	mov	r3, r0
   12224:	b118      	cbz	r0, 1222e <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   12226:	4a08      	ldr	r2, [pc, #32]	; (12248 <z_add_timeout+0x150>)
   12228:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1222a:	4282      	cmp	r2, r0
   1222c:	d0a6      	beq.n	1217c <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1222e:	2100      	movs	r1, #0
   12230:	4618      	mov	r0, r3
   12232:	f7f3 fd3b 	bl	5cac <sys_clock_set_timeout>
   12236:	e7a1      	b.n	1217c <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   12238:	b003      	add	sp, #12
   1223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1223e:	bf00      	nop
   12240:	20018580 	.word	0x20018580
   12244:	20018124 	.word	0x20018124
   12248:	200272fc 	.word	0x200272fc

0001224c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1224e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   12250:	f7ff fc04 	bl	11a5c <z_time_slice>
	__asm__ volatile(
   12254:	f04f 0320 	mov.w	r3, #32
   12258:	f3ef 8511 	mrs	r5, BASEPRI
   1225c:	f383 8812 	msr	BASEPRI_MAX, r3
   12260:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   12264:	4b28      	ldr	r3, [pc, #160]	; (12308 <sys_clock_announce+0xbc>)
   12266:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   12268:	f7ff fefe 	bl	12068 <first>
   1226c:	4604      	mov	r4, r0
   1226e:	b350      	cbz	r0, 122c6 <sys_clock_announce+0x7a>
   12270:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   12274:	4b24      	ldr	r3, [pc, #144]	; (12308 <sys_clock_announce+0xbc>)
   12276:	681b      	ldr	r3, [r3, #0]
   12278:	17d9      	asrs	r1, r3, #31
   1227a:	42b3      	cmp	r3, r6
   1227c:	eb71 0207 	sbcs.w	r2, r1, r7
   12280:	db21      	blt.n	122c6 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   12282:	4a22      	ldr	r2, [pc, #136]	; (1230c <sys_clock_announce+0xc0>)
   12284:	e9d2 0100 	ldrd	r0, r1, [r2]
   12288:	1980      	adds	r0, r0, r6
   1228a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1228e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   12292:	1b9b      	subs	r3, r3, r6
   12294:	4a1c      	ldr	r2, [pc, #112]	; (12308 <sys_clock_announce+0xbc>)
   12296:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   12298:	2200      	movs	r2, #0
   1229a:	2300      	movs	r3, #0
   1229c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   122a0:	4620      	mov	r0, r4
   122a2:	f006 fb5b 	bl	1895c <remove_timeout>
	__asm__ volatile(
   122a6:	f385 8811 	msr	BASEPRI, r5
   122aa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   122ae:	68a3      	ldr	r3, [r4, #8]
   122b0:	4620      	mov	r0, r4
   122b2:	4798      	blx	r3
	__asm__ volatile(
   122b4:	f04f 0320 	mov.w	r3, #32
   122b8:	f3ef 8511 	mrs	r5, BASEPRI
   122bc:	f383 8812 	msr	BASEPRI_MAX, r3
   122c0:	f3bf 8f6f 	isb	sy
   122c4:	e7d0      	b.n	12268 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   122c6:	b144      	cbz	r4, 122da <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   122c8:	4b0f      	ldr	r3, [pc, #60]	; (12308 <sys_clock_announce+0xbc>)
   122ca:	6819      	ldr	r1, [r3, #0]
   122cc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   122d0:	1a52      	subs	r2, r2, r1
   122d2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   122d6:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   122da:	480c      	ldr	r0, [pc, #48]	; (1230c <sys_clock_announce+0xc0>)
   122dc:	490a      	ldr	r1, [pc, #40]	; (12308 <sys_clock_announce+0xbc>)
   122de:	680c      	ldr	r4, [r1, #0]
   122e0:	e9d0 2300 	ldrd	r2, r3, [r0]
   122e4:	1912      	adds	r2, r2, r4
   122e6:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   122ea:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   122ee:	2400      	movs	r4, #0
   122f0:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   122f2:	f7ff fedb 	bl	120ac <next_timeout>
   122f6:	4621      	mov	r1, r4
   122f8:	f7f3 fcd8 	bl	5cac <sys_clock_set_timeout>
	__asm__ volatile(
   122fc:	f385 8811 	msr	BASEPRI, r5
   12300:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   12304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12306:	bf00      	nop
   12308:	20027340 	.word	0x20027340
   1230c:	20018580 	.word	0x20018580

00012310 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   12310:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   12312:	2100      	movs	r1, #0
	__asm__ volatile(
   12314:	f04f 0320 	mov.w	r3, #32
   12318:	f3ef 8411 	mrs	r4, BASEPRI
   1231c:	f383 8812 	msr	BASEPRI_MAX, r3
   12320:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   12324:	2200      	movs	r2, #0
   12326:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   12328:	b969      	cbnz	r1, 12346 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1232a:	f7f3 fcf3 	bl	5d14 <sys_clock_elapsed>
   1232e:	4b07      	ldr	r3, [pc, #28]	; (1234c <sys_clock_tick_get+0x3c>)
   12330:	e9d3 2300 	ldrd	r2, r3, [r3]
   12334:	1812      	adds	r2, r2, r0
   12336:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1233a:	f384 8811 	msr	BASEPRI, r4
   1233e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   12342:	2101      	movs	r1, #1
   12344:	e7f0      	b.n	12328 <sys_clock_tick_get+0x18>
	}
	return t;
}
   12346:	4610      	mov	r0, r2
   12348:	4619      	mov	r1, r3
   1234a:	bd10      	pop	{r4, pc}
   1234c:	20018580 	.word	0x20018580

00012350 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   12350:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   12352:	4a03      	ldr	r2, [pc, #12]	; (12360 <boot_banner+0x10>)
   12354:	4903      	ldr	r1, [pc, #12]	; (12364 <boot_banner+0x14>)
   12356:	4804      	ldr	r0, [pc, #16]	; (12368 <boot_banner+0x18>)
   12358:	f001 fe5f 	bl	1401a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1235c:	bd08      	pop	{r3, pc}
   1235e:	bf00      	nop
   12360:	00019de0 	.word	0x00019de0
   12364:	0001cfa8 	.word	0x0001cfa8
   12368:	0001cfb4 	.word	0x0001cfb4

0001236c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1236c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1236e:	4c06      	ldr	r4, [pc, #24]	; (12388 <statics_init+0x1c>)
   12370:	4b06      	ldr	r3, [pc, #24]	; (1238c <statics_init+0x20>)
   12372:	429c      	cmp	r4, r3
   12374:	d206      	bcs.n	12384 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   12376:	68a2      	ldr	r2, [r4, #8]
   12378:	6861      	ldr	r1, [r4, #4]
   1237a:	4620      	mov	r0, r4
   1237c:	f006 fb72 	bl	18a64 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12380:	3418      	adds	r4, #24
   12382:	e7f5      	b.n	12370 <statics_init+0x4>
		}
	}
	return 0;
}
   12384:	2000      	movs	r0, #0
   12386:	bd10      	pop	{r4, pc}
   12388:	20018374 	.word	0x20018374
   1238c:	20018374 	.word	0x20018374

00012390 <nrf_cc3xx_platform_init_no_rng>:
   12390:	b510      	push	{r4, lr}
   12392:	4c0a      	ldr	r4, [pc, #40]	; (123bc <nrf_cc3xx_platform_init_no_rng+0x2c>)
   12394:	6823      	ldr	r3, [r4, #0]
   12396:	b11b      	cbz	r3, 123a0 <nrf_cc3xx_platform_init_no_rng+0x10>
   12398:	2301      	movs	r3, #1
   1239a:	2000      	movs	r0, #0
   1239c:	6023      	str	r3, [r4, #0]
   1239e:	bd10      	pop	{r4, pc}
   123a0:	f000 f8d4 	bl	1254c <CC_LibInitNoRng>
   123a4:	2800      	cmp	r0, #0
   123a6:	d0f7      	beq.n	12398 <nrf_cc3xx_platform_init_no_rng+0x8>
   123a8:	3801      	subs	r0, #1
   123aa:	2807      	cmp	r0, #7
   123ac:	d803      	bhi.n	123b6 <nrf_cc3xx_platform_init_no_rng+0x26>
   123ae:	4b04      	ldr	r3, [pc, #16]	; (123c0 <nrf_cc3xx_platform_init_no_rng+0x30>)
   123b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   123b4:	bd10      	pop	{r4, pc}
   123b6:	4803      	ldr	r0, [pc, #12]	; (123c4 <nrf_cc3xx_platform_init_no_rng+0x34>)
   123b8:	bd10      	pop	{r4, pc}
   123ba:	bf00      	nop
   123bc:	20027344 	.word	0x20027344
   123c0:	0001cfdc 	.word	0x0001cfdc
   123c4:	ffff8ffe 	.word	0xffff8ffe

000123c8 <nrf_cc3xx_platform_abort>:
   123c8:	f3bf 8f4f 	dsb	sy
   123cc:	4905      	ldr	r1, [pc, #20]	; (123e4 <nrf_cc3xx_platform_abort+0x1c>)
   123ce:	4b06      	ldr	r3, [pc, #24]	; (123e8 <nrf_cc3xx_platform_abort+0x20>)
   123d0:	68ca      	ldr	r2, [r1, #12]
   123d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   123d6:	4313      	orrs	r3, r2
   123d8:	60cb      	str	r3, [r1, #12]
   123da:	f3bf 8f4f 	dsb	sy
   123de:	bf00      	nop
   123e0:	e7fd      	b.n	123de <nrf_cc3xx_platform_abort+0x16>
   123e2:	bf00      	nop
   123e4:	e000ed00 	.word	0xe000ed00
   123e8:	05fa0004 	.word	0x05fa0004

000123ec <CC_PalAbort>:
   123ec:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   123f0:	2100      	movs	r1, #0
   123f2:	b430      	push	{r4, r5}
   123f4:	4a08      	ldr	r2, [pc, #32]	; (12418 <CC_PalAbort+0x2c>)
   123f6:	4c09      	ldr	r4, [pc, #36]	; (1241c <CC_PalAbort+0x30>)
   123f8:	4d09      	ldr	r5, [pc, #36]	; (12420 <CC_PalAbort+0x34>)
   123fa:	6023      	str	r3, [r4, #0]
   123fc:	602b      	str	r3, [r5, #0]
   123fe:	6013      	str	r3, [r2, #0]
   12400:	60e3      	str	r3, [r4, #12]
   12402:	60eb      	str	r3, [r5, #12]
   12404:	60d3      	str	r3, [r2, #12]
   12406:	61a3      	str	r3, [r4, #24]
   12408:	4a06      	ldr	r2, [pc, #24]	; (12424 <CC_PalAbort+0x38>)
   1240a:	4c07      	ldr	r4, [pc, #28]	; (12428 <CC_PalAbort+0x3c>)
   1240c:	61ab      	str	r3, [r5, #24]
   1240e:	6863      	ldr	r3, [r4, #4]
   12410:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   12414:	bc30      	pop	{r4, r5}
   12416:	4718      	bx	r3
   12418:	50845408 	.word	0x50845408
   1241c:	50845400 	.word	0x50845400
   12420:	50845404 	.word	0x50845404
   12424:	50844000 	.word	0x50844000
   12428:	2001812c 	.word	0x2001812c

0001242c <nrf_cc3xx_platform_set_abort>:
   1242c:	4b02      	ldr	r3, [pc, #8]	; (12438 <nrf_cc3xx_platform_set_abort+0xc>)
   1242e:	e9d0 1200 	ldrd	r1, r2, [r0]
   12432:	e9c3 1200 	strd	r1, r2, [r3]
   12436:	4770      	bx	lr
   12438:	2001812c 	.word	0x2001812c

0001243c <mutex_free>:
   1243c:	b510      	push	{r4, lr}
   1243e:	4604      	mov	r4, r0
   12440:	b130      	cbz	r0, 12450 <mutex_free+0x14>
   12442:	6863      	ldr	r3, [r4, #4]
   12444:	06db      	lsls	r3, r3, #27
   12446:	d502      	bpl.n	1244e <mutex_free+0x12>
   12448:	2300      	movs	r3, #0
   1244a:	6023      	str	r3, [r4, #0]
   1244c:	6063      	str	r3, [r4, #4]
   1244e:	bd10      	pop	{r4, pc}
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <mutex_free+0x20>)
   12452:	4803      	ldr	r0, [pc, #12]	; (12460 <mutex_free+0x24>)
   12454:	685b      	ldr	r3, [r3, #4]
   12456:	4798      	blx	r3
   12458:	e7f3      	b.n	12442 <mutex_free+0x6>
   1245a:	bf00      	nop
   1245c:	2001812c 	.word	0x2001812c
   12460:	0001cffc 	.word	0x0001cffc

00012464 <mutex_unlock>:
   12464:	b168      	cbz	r0, 12482 <mutex_unlock+0x1e>
   12466:	6843      	ldr	r3, [r0, #4]
   12468:	b13b      	cbz	r3, 1247a <mutex_unlock+0x16>
   1246a:	06db      	lsls	r3, r3, #27
   1246c:	d507      	bpl.n	1247e <mutex_unlock+0x1a>
   1246e:	f3bf 8f5f 	dmb	sy
   12472:	2300      	movs	r3, #0
   12474:	6003      	str	r3, [r0, #0]
   12476:	4618      	mov	r0, r3
   12478:	4770      	bx	lr
   1247a:	4803      	ldr	r0, [pc, #12]	; (12488 <mutex_unlock+0x24>)
   1247c:	4770      	bx	lr
   1247e:	4803      	ldr	r0, [pc, #12]	; (1248c <mutex_unlock+0x28>)
   12480:	4770      	bx	lr
   12482:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12486:	4770      	bx	lr
   12488:	ffff8fea 	.word	0xffff8fea
   1248c:	ffff8fe9 	.word	0xffff8fe9

00012490 <mutex_init>:
   12490:	b510      	push	{r4, lr}
   12492:	4604      	mov	r4, r0
   12494:	b120      	cbz	r0, 124a0 <mutex_init+0x10>
   12496:	2200      	movs	r2, #0
   12498:	2311      	movs	r3, #17
   1249a:	6022      	str	r2, [r4, #0]
   1249c:	6063      	str	r3, [r4, #4]
   1249e:	bd10      	pop	{r4, pc}
   124a0:	4801      	ldr	r0, [pc, #4]	; (124a8 <mutex_init+0x18>)
   124a2:	f7ff ffa3 	bl	123ec <CC_PalAbort>
   124a6:	e7f6      	b.n	12496 <mutex_init+0x6>
   124a8:	0001d024 	.word	0x0001d024

000124ac <mutex_lock>:
   124ac:	b1a0      	cbz	r0, 124d8 <mutex_lock+0x2c>
   124ae:	6843      	ldr	r3, [r0, #4]
   124b0:	b183      	cbz	r3, 124d4 <mutex_lock+0x28>
   124b2:	06db      	lsls	r3, r3, #27
   124b4:	d50c      	bpl.n	124d0 <mutex_lock+0x24>
   124b6:	2201      	movs	r2, #1
   124b8:	e8d0 3fef 	ldaex	r3, [r0]
   124bc:	e8c0 2fe1 	stlex	r1, r2, [r0]
   124c0:	2900      	cmp	r1, #0
   124c2:	d1f9      	bne.n	124b8 <mutex_lock+0xc>
   124c4:	2b01      	cmp	r3, #1
   124c6:	d0f7      	beq.n	124b8 <mutex_lock+0xc>
   124c8:	f3bf 8f5f 	dmb	sy
   124cc:	2000      	movs	r0, #0
   124ce:	4770      	bx	lr
   124d0:	4803      	ldr	r0, [pc, #12]	; (124e0 <mutex_lock+0x34>)
   124d2:	4770      	bx	lr
   124d4:	4803      	ldr	r0, [pc, #12]	; (124e4 <mutex_lock+0x38>)
   124d6:	4770      	bx	lr
   124d8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   124dc:	4770      	bx	lr
   124de:	bf00      	nop
   124e0:	ffff8fe9 	.word	0xffff8fe9
   124e4:	ffff8fea 	.word	0xffff8fea

000124e8 <nrf_cc3xx_platform_set_mutexes>:
   124e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   124ec:	4c14      	ldr	r4, [pc, #80]	; (12540 <nrf_cc3xx_platform_set_mutexes+0x58>)
   124ee:	6802      	ldr	r2, [r0, #0]
   124f0:	68c3      	ldr	r3, [r0, #12]
   124f2:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   124f6:	e9c4 6302 	strd	r6, r3, [r4, #8]
   124fa:	e9c4 2500 	strd	r2, r5, [r4]
   124fe:	4b11      	ldr	r3, [pc, #68]	; (12544 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   12500:	680e      	ldr	r6, [r1, #0]
   12502:	6848      	ldr	r0, [r1, #4]
   12504:	4d10      	ldr	r5, [pc, #64]	; (12548 <nrf_cc3xx_platform_set_mutexes+0x60>)
   12506:	e9c3 6000 	strd	r6, r0, [r3]
   1250a:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   1250e:	6908      	ldr	r0, [r1, #16]
   12510:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   12514:	e9c3 7602 	strd	r7, r6, [r3, #8]
   12518:	6118      	str	r0, [r3, #16]
   1251a:	06cb      	lsls	r3, r1, #27
   1251c:	d50d      	bpl.n	1253a <nrf_cc3xx_platform_set_mutexes+0x52>
   1251e:	2300      	movs	r3, #0
   12520:	f505 7088 	add.w	r0, r5, #272	; 0x110
   12524:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   12528:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1252c:	4790      	blx	r2
   1252e:	6823      	ldr	r3, [r4, #0]
   12530:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   12534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12538:	4718      	bx	r3
   1253a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1253e:	bf00      	nop
   12540:	2001813c 	.word	0x2001813c
   12544:	2001814c 	.word	0x2001814c
   12548:	2002736c 	.word	0x2002736c

0001254c <CC_LibInitNoRng>:
   1254c:	b508      	push	{r3, lr}
   1254e:	f000 f80f 	bl	12570 <CC_HalInit>
   12552:	b928      	cbnz	r0, 12560 <CC_LibInitNoRng+0x14>
   12554:	f000 f80e 	bl	12574 <CC_PalInit>
   12558:	b930      	cbnz	r0, 12568 <CC_LibInitNoRng+0x1c>
   1255a:	4a04      	ldr	r2, [pc, #16]	; (1256c <CC_LibInitNoRng+0x20>)
   1255c:	6010      	str	r0, [r2, #0]
   1255e:	bd08      	pop	{r3, pc}
   12560:	f000 f836 	bl	125d0 <CC_PalTerminate>
   12564:	2003      	movs	r0, #3
   12566:	bd08      	pop	{r3, pc}
   12568:	2004      	movs	r0, #4
   1256a:	bd08      	pop	{r3, pc}
   1256c:	50845a0c 	.word	0x50845a0c

00012570 <CC_HalInit>:
   12570:	2000      	movs	r0, #0
   12572:	4770      	bx	lr

00012574 <CC_PalInit>:
   12574:	b510      	push	{r4, lr}
   12576:	4811      	ldr	r0, [pc, #68]	; (125bc <CC_PalInit+0x48>)
   12578:	f000 f848 	bl	1260c <CC_PalMutexCreate>
   1257c:	b100      	cbz	r0, 12580 <CC_PalInit+0xc>
   1257e:	bd10      	pop	{r4, pc}
   12580:	480f      	ldr	r0, [pc, #60]	; (125c0 <CC_PalInit+0x4c>)
   12582:	f000 f843 	bl	1260c <CC_PalMutexCreate>
   12586:	2800      	cmp	r0, #0
   12588:	d1f9      	bne.n	1257e <CC_PalInit+0xa>
   1258a:	4c0e      	ldr	r4, [pc, #56]	; (125c4 <CC_PalInit+0x50>)
   1258c:	4620      	mov	r0, r4
   1258e:	f000 f83d 	bl	1260c <CC_PalMutexCreate>
   12592:	2800      	cmp	r0, #0
   12594:	d1f3      	bne.n	1257e <CC_PalInit+0xa>
   12596:	4b0c      	ldr	r3, [pc, #48]	; (125c8 <CC_PalInit+0x54>)
   12598:	480c      	ldr	r0, [pc, #48]	; (125cc <CC_PalInit+0x58>)
   1259a:	601c      	str	r4, [r3, #0]
   1259c:	f000 f836 	bl	1260c <CC_PalMutexCreate>
   125a0:	4601      	mov	r1, r0
   125a2:	2800      	cmp	r0, #0
   125a4:	d1eb      	bne.n	1257e <CC_PalInit+0xa>
   125a6:	f000 f82d 	bl	12604 <CC_PalDmaInit>
   125aa:	4604      	mov	r4, r0
   125ac:	b108      	cbz	r0, 125b2 <CC_PalInit+0x3e>
   125ae:	4620      	mov	r0, r4
   125b0:	bd10      	pop	{r4, pc}
   125b2:	f000 f83f 	bl	12634 <CC_PalPowerSaveModeInit>
   125b6:	4620      	mov	r0, r4
   125b8:	e7fa      	b.n	125b0 <CC_PalInit+0x3c>
   125ba:	bf00      	nop
   125bc:	20018184 	.word	0x20018184
   125c0:	20018178 	.word	0x20018178
   125c4:	20018180 	.word	0x20018180
   125c8:	20018188 	.word	0x20018188
   125cc:	2001817c 	.word	0x2001817c

000125d0 <CC_PalTerminate>:
   125d0:	b508      	push	{r3, lr}
   125d2:	4808      	ldr	r0, [pc, #32]	; (125f4 <CC_PalTerminate+0x24>)
   125d4:	f000 f824 	bl	12620 <CC_PalMutexDestroy>
   125d8:	4807      	ldr	r0, [pc, #28]	; (125f8 <CC_PalTerminate+0x28>)
   125da:	f000 f821 	bl	12620 <CC_PalMutexDestroy>
   125de:	4807      	ldr	r0, [pc, #28]	; (125fc <CC_PalTerminate+0x2c>)
   125e0:	f000 f81e 	bl	12620 <CC_PalMutexDestroy>
   125e4:	4806      	ldr	r0, [pc, #24]	; (12600 <CC_PalTerminate+0x30>)
   125e6:	f000 f81b 	bl	12620 <CC_PalMutexDestroy>
   125ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   125ee:	f000 b80b 	b.w	12608 <CC_PalDmaTerminate>
   125f2:	bf00      	nop
   125f4:	20018184 	.word	0x20018184
   125f8:	20018178 	.word	0x20018178
   125fc:	20018180 	.word	0x20018180
   12600:	2001817c 	.word	0x2001817c

00012604 <CC_PalDmaInit>:
   12604:	2000      	movs	r0, #0
   12606:	4770      	bx	lr

00012608 <CC_PalDmaTerminate>:
   12608:	4770      	bx	lr
   1260a:	bf00      	nop

0001260c <CC_PalMutexCreate>:
   1260c:	b508      	push	{r3, lr}
   1260e:	4b03      	ldr	r3, [pc, #12]	; (1261c <CC_PalMutexCreate+0x10>)
   12610:	6802      	ldr	r2, [r0, #0]
   12612:	681b      	ldr	r3, [r3, #0]
   12614:	6810      	ldr	r0, [r2, #0]
   12616:	4798      	blx	r3
   12618:	2000      	movs	r0, #0
   1261a:	bd08      	pop	{r3, pc}
   1261c:	2001813c 	.word	0x2001813c

00012620 <CC_PalMutexDestroy>:
   12620:	b508      	push	{r3, lr}
   12622:	4b03      	ldr	r3, [pc, #12]	; (12630 <CC_PalMutexDestroy+0x10>)
   12624:	6802      	ldr	r2, [r0, #0]
   12626:	685b      	ldr	r3, [r3, #4]
   12628:	6810      	ldr	r0, [r2, #0]
   1262a:	4798      	blx	r3
   1262c:	2000      	movs	r0, #0
   1262e:	bd08      	pop	{r3, pc}
   12630:	2001813c 	.word	0x2001813c

00012634 <CC_PalPowerSaveModeInit>:
   12634:	b570      	push	{r4, r5, r6, lr}
   12636:	4c09      	ldr	r4, [pc, #36]	; (1265c <CC_PalPowerSaveModeInit+0x28>)
   12638:	4d09      	ldr	r5, [pc, #36]	; (12660 <CC_PalPowerSaveModeInit+0x2c>)
   1263a:	6920      	ldr	r0, [r4, #16]
   1263c:	68ab      	ldr	r3, [r5, #8]
   1263e:	4798      	blx	r3
   12640:	b118      	cbz	r0, 1264a <CC_PalPowerSaveModeInit+0x16>
   12642:	4b08      	ldr	r3, [pc, #32]	; (12664 <CC_PalPowerSaveModeInit+0x30>)
   12644:	4808      	ldr	r0, [pc, #32]	; (12668 <CC_PalPowerSaveModeInit+0x34>)
   12646:	685b      	ldr	r3, [r3, #4]
   12648:	4798      	blx	r3
   1264a:	2100      	movs	r1, #0
   1264c:	4a07      	ldr	r2, [pc, #28]	; (1266c <CC_PalPowerSaveModeInit+0x38>)
   1264e:	68eb      	ldr	r3, [r5, #12]
   12650:	6011      	str	r1, [r2, #0]
   12652:	6920      	ldr	r0, [r4, #16]
   12654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12658:	4718      	bx	r3
   1265a:	bf00      	nop
   1265c:	2001814c 	.word	0x2001814c
   12660:	2001813c 	.word	0x2001813c
   12664:	2001812c 	.word	0x2001812c
   12668:	0001d048 	.word	0x0001d048
   1266c:	20027358 	.word	0x20027358

00012670 <_ZSt15get_new_handlerv>:
   12670:	4b01      	ldr	r3, [pc, #4]	; (12678 <_ZSt15get_new_handlerv+0x8>)
   12672:	e8d3 0faf 	lda	r0, [r3]
   12676:	4770      	bx	lr
   12678:	2002735c 	.word	0x2002735c

0001267c <frexp>:
   1267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1267e:	f8df c064 	ldr.w	ip, [pc, #100]	; 126e4 <frexp+0x68>
   12682:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   12686:	2700      	movs	r7, #0
   12688:	4604      	mov	r4, r0
   1268a:	4563      	cmp	r3, ip
   1268c:	460d      	mov	r5, r1
   1268e:	4616      	mov	r6, r2
   12690:	6017      	str	r7, [r2, #0]
   12692:	dc20      	bgt.n	126d6 <frexp+0x5a>
   12694:	4684      	mov	ip, r0
   12696:	ea53 0c0c 	orrs.w	ip, r3, ip
   1269a:	d01c      	beq.n	126d6 <frexp+0x5a>
   1269c:	f8df c048 	ldr.w	ip, [pc, #72]	; 126e8 <frexp+0x6c>
   126a0:	460a      	mov	r2, r1
   126a2:	ea01 0c0c 	and.w	ip, r1, ip
   126a6:	f1bc 0f00 	cmp.w	ip, #0
   126aa:	d109      	bne.n	126c0 <frexp+0x44>
   126ac:	2200      	movs	r2, #0
   126ae:	4b0b      	ldr	r3, [pc, #44]	; (126dc <frexp+0x60>)
   126b0:	f7ed ff0e 	bl	4d0 <__aeabi_dmul>
   126b4:	f06f 0735 	mvn.w	r7, #53	; 0x35
   126b8:	4604      	mov	r4, r0
   126ba:	460a      	mov	r2, r1
   126bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   126c0:	4907      	ldr	r1, [pc, #28]	; (126e0 <frexp+0x64>)
   126c2:	151b      	asrs	r3, r3, #20
   126c4:	4011      	ands	r1, r2
   126c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   126ca:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
   126ce:	443b      	add	r3, r7
   126d0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   126d4:	6033      	str	r3, [r6, #0]
   126d6:	4620      	mov	r0, r4
   126d8:	4629      	mov	r1, r5
   126da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126dc:	43500000 	.word	0x43500000
   126e0:	800fffff 	.word	0x800fffff
   126e4:	7fefffff 	.word	0x7fefffff
   126e8:	7ff00000 	.word	0x7ff00000

000126ec <round>:
   126ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126ee:	f3c1 570a 	ubfx	r7, r1, #20, #11
   126f2:	460d      	mov	r5, r1
   126f4:	460b      	mov	r3, r1
   126f6:	4602      	mov	r2, r0
   126f8:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
   126fc:	2c13      	cmp	r4, #19
   126fe:	dc12      	bgt.n	12726 <round+0x3a>
   12700:	2c00      	cmp	r4, #0
   12702:	db2c      	blt.n	1275e <round+0x72>
   12704:	491b      	ldr	r1, [pc, #108]	; (12774 <round+0x88>)
   12706:	4121      	asrs	r1, r4
   12708:	ea05 0001 	and.w	r0, r5, r1
   1270c:	4310      	orrs	r0, r2
   1270e:	d007      	beq.n	12720 <round+0x34>
   12710:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   12714:	2200      	movs	r2, #0
   12716:	4123      	asrs	r3, r4
   12718:	441d      	add	r5, r3
   1271a:	ea25 0501 	bic.w	r5, r5, r1
   1271e:	462b      	mov	r3, r5
   12720:	4610      	mov	r0, r2
   12722:	4619      	mov	r1, r3
   12724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12726:	2c33      	cmp	r4, #51	; 0x33
   12728:	dd07      	ble.n	1273a <round+0x4e>
   1272a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   1272e:	d1f7      	bne.n	12720 <round+0x34>
   12730:	f7ed fd18 	bl	164 <__adddf3>
   12734:	4602      	mov	r2, r0
   12736:	460b      	mov	r3, r1
   12738:	e7f2      	b.n	12720 <round+0x34>
   1273a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   1273e:	f04f 31ff 	mov.w	r1, #4294967295
   12742:	fa21 f707 	lsr.w	r7, r1, r7
   12746:	4238      	tst	r0, r7
   12748:	d0ea      	beq.n	12720 <round+0x34>
   1274a:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
   1274e:	2201      	movs	r2, #1
   12750:	409a      	lsls	r2, r3
   12752:	1882      	adds	r2, r0, r2
   12754:	bf28      	it	cs
   12756:	3501      	addcs	r5, #1
   12758:	ea22 0207 	bic.w	r2, r2, r7
   1275c:	e7df      	b.n	1271e <round+0x32>
   1275e:	3401      	adds	r4, #1
   12760:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   12764:	d002      	beq.n	1276c <round+0x80>
   12766:	461d      	mov	r5, r3
   12768:	2200      	movs	r2, #0
   1276a:	e7d8      	b.n	1271e <round+0x32>
   1276c:	4d02      	ldr	r5, [pc, #8]	; (12778 <round+0x8c>)
   1276e:	2200      	movs	r2, #0
   12770:	431d      	orrs	r5, r3
   12772:	e7d4      	b.n	1271e <round+0x32>
   12774:	000fffff 	.word	0x000fffff
   12778:	3ff00000 	.word	0x3ff00000

0001277c <expf>:
   1277c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1277e:	4e33      	ldr	r6, [pc, #204]	; (1284c <expf+0xd0>)
   12780:	b08b      	sub	sp, #44	; 0x2c
   12782:	4605      	mov	r5, r0
   12784:	f000 f86e 	bl	12864 <__ieee754_expf>
   12788:	f996 3000 	ldrsb.w	r3, [r6]
   1278c:	4604      	mov	r4, r0
   1278e:	3301      	adds	r3, #1
   12790:	d00f      	beq.n	127b2 <expf+0x36>
   12792:	4628      	mov	r0, r5
   12794:	f000 f982 	bl	12a9c <finitef>
   12798:	b158      	cbz	r0, 127b2 <expf+0x36>
   1279a:	492d      	ldr	r1, [pc, #180]	; (12850 <expf+0xd4>)
   1279c:	4628      	mov	r0, r5
   1279e:	f7ee fc73 	bl	1088 <__aeabi_fcmpgt>
   127a2:	4607      	mov	r7, r0
   127a4:	2800      	cmp	r0, #0
   127a6:	d134      	bne.n	12812 <expf+0x96>
   127a8:	492a      	ldr	r1, [pc, #168]	; (12854 <expf+0xd8>)
   127aa:	4628      	mov	r0, r5
   127ac:	f7ee fc4e 	bl	104c <__aeabi_fcmplt>
   127b0:	b910      	cbnz	r0, 127b8 <expf+0x3c>
   127b2:	4620      	mov	r0, r4
   127b4:	b00b      	add	sp, #44	; 0x2c
   127b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127b8:	4b27      	ldr	r3, [pc, #156]	; (12858 <expf+0xdc>)
   127ba:	2204      	movs	r2, #4
   127bc:	4628      	mov	r0, r5
   127be:	9708      	str	r7, [sp, #32]
   127c0:	2400      	movs	r4, #0
   127c2:	2500      	movs	r5, #0
   127c4:	e9cd 2300 	strd	r2, r3, [sp]
   127c8:	f7ed fe2a 	bl	420 <__aeabi_f2d>
   127cc:	f996 3000 	ldrsb.w	r3, [r6]
   127d0:	2b02      	cmp	r3, #2
   127d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   127d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   127da:	e9cd 0102 	strd	r0, r1, [sp, #8]
   127de:	d013      	beq.n	12808 <expf+0x8c>
   127e0:	4668      	mov	r0, sp
   127e2:	f000 f959 	bl	12a98 <matherr>
   127e6:	b178      	cbz	r0, 12808 <expf+0x8c>
   127e8:	9b08      	ldr	r3, [sp, #32]
   127ea:	bb4b      	cbnz	r3, 12840 <expf+0xc4>
   127ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   127f0:	f7ee f930 	bl	a54 <__aeabi_d2f>
   127f4:	4604      	mov	r4, r0
   127f6:	4620      	mov	r0, r4
   127f8:	b00b      	add	sp, #44	; 0x2c
   127fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127fc:	2000      	movs	r0, #0
   127fe:	4917      	ldr	r1, [pc, #92]	; (1285c <expf+0xe0>)
   12800:	2b02      	cmp	r3, #2
   12802:	e9cd 0106 	strd	r0, r1, [sp, #24]
   12806:	d1eb      	bne.n	127e0 <expf+0x64>
   12808:	f002 f906 	bl	14a18 <__errno>
   1280c:	2322      	movs	r3, #34	; 0x22
   1280e:	6003      	str	r3, [r0, #0]
   12810:	e7ea      	b.n	127e8 <expf+0x6c>
   12812:	2300      	movs	r3, #0
   12814:	2103      	movs	r1, #3
   12816:	4a10      	ldr	r2, [pc, #64]	; (12858 <expf+0xdc>)
   12818:	4628      	mov	r0, r5
   1281a:	9308      	str	r3, [sp, #32]
   1281c:	e9cd 1200 	strd	r1, r2, [sp]
   12820:	f7ed fdfe 	bl	420 <__aeabi_f2d>
   12824:	f996 3000 	ldrsb.w	r3, [r6]
   12828:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1282c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12830:	2b00      	cmp	r3, #0
   12832:	d1e3      	bne.n	127fc <expf+0x80>
   12834:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   12838:	4b09      	ldr	r3, [pc, #36]	; (12860 <expf+0xe4>)
   1283a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1283e:	e7cf      	b.n	127e0 <expf+0x64>
   12840:	f002 f8ea 	bl	14a18 <__errno>
   12844:	9b08      	ldr	r3, [sp, #32]
   12846:	6003      	str	r3, [r0, #0]
   12848:	e7d0      	b.n	127ec <expf+0x70>
   1284a:	bf00      	nop
   1284c:	2001835c 	.word	0x2001835c
   12850:	42b17180 	.word	0x42b17180
   12854:	c2cff1b5 	.word	0xc2cff1b5
   12858:	0001d068 	.word	0x0001d068
   1285c:	7ff00000 	.word	0x7ff00000
   12860:	47efffff 	.word	0x47efffff

00012864 <__ieee754_expf>:
   12864:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   12868:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1286c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12870:	4604      	mov	r4, r0
   12872:	d86e      	bhi.n	12952 <__ieee754_expf+0xee>
   12874:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   12878:	f000 80bf 	beq.w	129fa <__ieee754_expf+0x196>
   1287c:	4976      	ldr	r1, [pc, #472]	; (12a58 <__ieee754_expf+0x1f4>)
   1287e:	4288      	cmp	r0, r1
   12880:	dc6c      	bgt.n	1295c <__ieee754_expf+0xf8>
   12882:	b12d      	cbz	r5, 12890 <__ieee754_expf+0x2c>
   12884:	4b75      	ldr	r3, [pc, #468]	; (12a5c <__ieee754_expf+0x1f8>)
   12886:	429a      	cmp	r2, r3
   12888:	d902      	bls.n	12890 <__ieee754_expf+0x2c>
   1288a:	2000      	movs	r0, #0
   1288c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12890:	4b73      	ldr	r3, [pc, #460]	; (12a60 <__ieee754_expf+0x1fc>)
   12892:	429a      	cmp	r2, r3
   12894:	d968      	bls.n	12968 <__ieee754_expf+0x104>
   12896:	4b73      	ldr	r3, [pc, #460]	; (12a64 <__ieee754_expf+0x200>)
   12898:	429a      	cmp	r2, r3
   1289a:	f200 80ba 	bhi.w	12a12 <__ieee754_expf+0x1ae>
   1289e:	4b72      	ldr	r3, [pc, #456]	; (12a68 <__ieee754_expf+0x204>)
   128a0:	4620      	mov	r0, r4
   128a2:	f1c5 0401 	rsb	r4, r5, #1
   128a6:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   128aa:	f7ee f927 	bl	afc <__aeabi_fsub>
   128ae:	4b6f      	ldr	r3, [pc, #444]	; (12a6c <__ieee754_expf+0x208>)
   128b0:	4680      	mov	r8, r0
   128b2:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
   128b6:	1b65      	subs	r5, r4, r5
   128b8:	4649      	mov	r1, r9
   128ba:	4640      	mov	r0, r8
   128bc:	f7ee f91e 	bl	afc <__aeabi_fsub>
   128c0:	4601      	mov	r1, r0
   128c2:	4606      	mov	r6, r0
   128c4:	4604      	mov	r4, r0
   128c6:	f7ee fa23 	bl	d10 <__aeabi_fmul>
   128ca:	4969      	ldr	r1, [pc, #420]	; (12a70 <__ieee754_expf+0x20c>)
   128cc:	4607      	mov	r7, r0
   128ce:	f7ee fa1f 	bl	d10 <__aeabi_fmul>
   128d2:	4968      	ldr	r1, [pc, #416]	; (12a74 <__ieee754_expf+0x210>)
   128d4:	f7ee f912 	bl	afc <__aeabi_fsub>
   128d8:	4639      	mov	r1, r7
   128da:	f7ee fa19 	bl	d10 <__aeabi_fmul>
   128de:	4966      	ldr	r1, [pc, #408]	; (12a78 <__ieee754_expf+0x214>)
   128e0:	f7ee f90e 	bl	b00 <__addsf3>
   128e4:	4639      	mov	r1, r7
   128e6:	f7ee fa13 	bl	d10 <__aeabi_fmul>
   128ea:	4964      	ldr	r1, [pc, #400]	; (12a7c <__ieee754_expf+0x218>)
   128ec:	f7ee f906 	bl	afc <__aeabi_fsub>
   128f0:	4639      	mov	r1, r7
   128f2:	f7ee fa0d 	bl	d10 <__aeabi_fmul>
   128f6:	4962      	ldr	r1, [pc, #392]	; (12a80 <__ieee754_expf+0x21c>)
   128f8:	f7ee f902 	bl	b00 <__addsf3>
   128fc:	4639      	mov	r1, r7
   128fe:	f7ee fa07 	bl	d10 <__aeabi_fmul>
   12902:	4601      	mov	r1, r0
   12904:	4630      	mov	r0, r6
   12906:	f7ee f8f9 	bl	afc <__aeabi_fsub>
   1290a:	4607      	mov	r7, r0
   1290c:	4682      	mov	sl, r0
   1290e:	2d00      	cmp	r5, #0
   12910:	d05c      	beq.n	129cc <__ieee754_expf+0x168>
   12912:	4639      	mov	r1, r7
   12914:	4630      	mov	r0, r6
   12916:	f7ee f9fb 	bl	d10 <__aeabi_fmul>
   1291a:	4604      	mov	r4, r0
   1291c:	4639      	mov	r1, r7
   1291e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   12922:	f7ee f8eb 	bl	afc <__aeabi_fsub>
   12926:	4601      	mov	r1, r0
   12928:	4620      	mov	r0, r4
   1292a:	f7ee faa5 	bl	e78 <__aeabi_fdiv>
   1292e:	4601      	mov	r1, r0
   12930:	4648      	mov	r0, r9
   12932:	f7ee f8e3 	bl	afc <__aeabi_fsub>
   12936:	4641      	mov	r1, r8
   12938:	f7ee f8e0 	bl	afc <__aeabi_fsub>
   1293c:	4601      	mov	r1, r0
   1293e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   12942:	f7ee f8db 	bl	afc <__aeabi_fsub>
   12946:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
   1294a:	db5a      	blt.n	12a02 <__ieee754_expf+0x19e>
   1294c:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   12950:	e002      	b.n	12958 <__ieee754_expf+0xf4>
   12952:	4601      	mov	r1, r0
   12954:	f7ee f8d4 	bl	b00 <__addsf3>
   12958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1295c:	4949      	ldr	r1, [pc, #292]	; (12a84 <__ieee754_expf+0x220>)
   1295e:	4608      	mov	r0, r1
   12960:	f7ee f9d6 	bl	d10 <__aeabi_fmul>
   12964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12968:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   1296c:	d209      	bcs.n	12982 <__ieee754_expf+0x11e>
   1296e:	4945      	ldr	r1, [pc, #276]	; (12a84 <__ieee754_expf+0x220>)
   12970:	4620      	mov	r0, r4
   12972:	f7ee f8c5 	bl	b00 <__addsf3>
   12976:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1297a:	f7ee fb85 	bl	1088 <__aeabi_fcmpgt>
   1297e:	2800      	cmp	r0, #0
   12980:	d164      	bne.n	12a4c <__ieee754_expf+0x1e8>
   12982:	4621      	mov	r1, r4
   12984:	4620      	mov	r0, r4
   12986:	f7ee f9c3 	bl	d10 <__aeabi_fmul>
   1298a:	4939      	ldr	r1, [pc, #228]	; (12a70 <__ieee754_expf+0x20c>)
   1298c:	4605      	mov	r5, r0
   1298e:	f7ee f9bf 	bl	d10 <__aeabi_fmul>
   12992:	4938      	ldr	r1, [pc, #224]	; (12a74 <__ieee754_expf+0x210>)
   12994:	f7ee f8b2 	bl	afc <__aeabi_fsub>
   12998:	4629      	mov	r1, r5
   1299a:	f7ee f9b9 	bl	d10 <__aeabi_fmul>
   1299e:	4936      	ldr	r1, [pc, #216]	; (12a78 <__ieee754_expf+0x214>)
   129a0:	f7ee f8ae 	bl	b00 <__addsf3>
   129a4:	4629      	mov	r1, r5
   129a6:	f7ee f9b3 	bl	d10 <__aeabi_fmul>
   129aa:	4934      	ldr	r1, [pc, #208]	; (12a7c <__ieee754_expf+0x218>)
   129ac:	f7ee f8a6 	bl	afc <__aeabi_fsub>
   129b0:	4629      	mov	r1, r5
   129b2:	f7ee f9ad 	bl	d10 <__aeabi_fmul>
   129b6:	4932      	ldr	r1, [pc, #200]	; (12a80 <__ieee754_expf+0x21c>)
   129b8:	f7ee f8a2 	bl	b00 <__addsf3>
   129bc:	4629      	mov	r1, r5
   129be:	f7ee f9a7 	bl	d10 <__aeabi_fmul>
   129c2:	4601      	mov	r1, r0
   129c4:	4620      	mov	r0, r4
   129c6:	f7ee f899 	bl	afc <__aeabi_fsub>
   129ca:	4682      	mov	sl, r0
   129cc:	4651      	mov	r1, sl
   129ce:	4620      	mov	r0, r4
   129d0:	f7ee f99e 	bl	d10 <__aeabi_fmul>
   129d4:	4605      	mov	r5, r0
   129d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   129da:	4650      	mov	r0, sl
   129dc:	f7ee f88e 	bl	afc <__aeabi_fsub>
   129e0:	4601      	mov	r1, r0
   129e2:	4628      	mov	r0, r5
   129e4:	f7ee fa48 	bl	e78 <__aeabi_fdiv>
   129e8:	4621      	mov	r1, r4
   129ea:	f7ee f887 	bl	afc <__aeabi_fsub>
   129ee:	4601      	mov	r1, r0
   129f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   129f4:	f7ee f882 	bl	afc <__aeabi_fsub>
   129f8:	e7ae      	b.n	12958 <__ieee754_expf+0xf4>
   129fa:	2d00      	cmp	r5, #0
   129fc:	f47f af45 	bne.w	1288a <__ieee754_expf+0x26>
   12a00:	e7aa      	b.n	12958 <__ieee754_expf+0xf4>
   12a02:	3564      	adds	r5, #100	; 0x64
   12a04:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   12a08:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   12a0c:	f7ee f980 	bl	d10 <__aeabi_fmul>
   12a10:	e7a2      	b.n	12958 <__ieee754_expf+0xf4>
   12a12:	491d      	ldr	r1, [pc, #116]	; (12a88 <__ieee754_expf+0x224>)
   12a14:	4620      	mov	r0, r4
   12a16:	f7ee f97b 	bl	d10 <__aeabi_fmul>
   12a1a:	4b1c      	ldr	r3, [pc, #112]	; (12a8c <__ieee754_expf+0x228>)
   12a1c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   12a20:	f7ee f86e 	bl	b00 <__addsf3>
   12a24:	f7ee fb3a 	bl	109c <__aeabi_f2iz>
   12a28:	4605      	mov	r5, r0
   12a2a:	f7ee f91d 	bl	c68 <__aeabi_i2f>
   12a2e:	4918      	ldr	r1, [pc, #96]	; (12a90 <__ieee754_expf+0x22c>)
   12a30:	4606      	mov	r6, r0
   12a32:	f7ee f96d 	bl	d10 <__aeabi_fmul>
   12a36:	4601      	mov	r1, r0
   12a38:	4620      	mov	r0, r4
   12a3a:	f7ee f85f 	bl	afc <__aeabi_fsub>
   12a3e:	4915      	ldr	r1, [pc, #84]	; (12a94 <__ieee754_expf+0x230>)
   12a40:	4680      	mov	r8, r0
   12a42:	4630      	mov	r0, r6
   12a44:	f7ee f964 	bl	d10 <__aeabi_fmul>
   12a48:	4681      	mov	r9, r0
   12a4a:	e735      	b.n	128b8 <__ieee754_expf+0x54>
   12a4c:	4620      	mov	r0, r4
   12a4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12a52:	f7ee f855 	bl	b00 <__addsf3>
   12a56:	e77f      	b.n	12958 <__ieee754_expf+0xf4>
   12a58:	42b17217 	.word	0x42b17217
   12a5c:	42cff1b5 	.word	0x42cff1b5
   12a60:	3eb17218 	.word	0x3eb17218
   12a64:	3f851591 	.word	0x3f851591
   12a68:	0001d078 	.word	0x0001d078
   12a6c:	0001d080 	.word	0x0001d080
   12a70:	3331bb4c 	.word	0x3331bb4c
   12a74:	35ddea0e 	.word	0x35ddea0e
   12a78:	388ab355 	.word	0x388ab355
   12a7c:	3b360b61 	.word	0x3b360b61
   12a80:	3e2aaaab 	.word	0x3e2aaaab
   12a84:	7149f2ca 	.word	0x7149f2ca
   12a88:	3fb8aa3b 	.word	0x3fb8aa3b
   12a8c:	0001d070 	.word	0x0001d070
   12a90:	3f317180 	.word	0x3f317180
   12a94:	3717f7d1 	.word	0x3717f7d1

00012a98 <matherr>:
   12a98:	2000      	movs	r0, #0
   12a9a:	4770      	bx	lr

00012a9c <finitef>:
   12a9c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   12aa0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   12aa4:	bfac      	ite	ge
   12aa6:	2000      	movge	r0, #0
   12aa8:	2001      	movlt	r0, #1
   12aaa:	4770      	bx	lr

00012aac <__assert_func>:
   12aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12aae:	4614      	mov	r4, r2
   12ab0:	461a      	mov	r2, r3
   12ab2:	4b09      	ldr	r3, [pc, #36]	; (12ad8 <__assert_func+0x2c>)
   12ab4:	4605      	mov	r5, r0
   12ab6:	681b      	ldr	r3, [r3, #0]
   12ab8:	68d8      	ldr	r0, [r3, #12]
   12aba:	b14c      	cbz	r4, 12ad0 <__assert_func+0x24>
   12abc:	4b07      	ldr	r3, [pc, #28]	; (12adc <__assert_func+0x30>)
   12abe:	9100      	str	r1, [sp, #0]
   12ac0:	4907      	ldr	r1, [pc, #28]	; (12ae0 <__assert_func+0x34>)
   12ac2:	e9cd 3401 	strd	r3, r4, [sp, #4]
   12ac6:	462b      	mov	r3, r5
   12ac8:	f000 f80e 	bl	12ae8 <fiprintf>
   12acc:	f005 ffea 	bl	18aa4 <abort>
   12ad0:	4b04      	ldr	r3, [pc, #16]	; (12ae4 <__assert_func+0x38>)
   12ad2:	461c      	mov	r4, r3
   12ad4:	e7f3      	b.n	12abe <__assert_func+0x12>
   12ad6:	bf00      	nop
   12ad8:	2001818c 	.word	0x2001818c
   12adc:	0001d0f8 	.word	0x0001d0f8
   12ae0:	0001d105 	.word	0x0001d105
   12ae4:	0001d133 	.word	0x0001d133

00012ae8 <fiprintf>:
   12ae8:	b40e      	push	{r1, r2, r3}
   12aea:	b503      	push	{r0, r1, lr}
   12aec:	ab03      	add	r3, sp, #12
   12aee:	4601      	mov	r1, r0
   12af0:	4805      	ldr	r0, [pc, #20]	; (12b08 <fiprintf+0x20>)
   12af2:	f853 2b04 	ldr.w	r2, [r3], #4
   12af6:	6800      	ldr	r0, [r0, #0]
   12af8:	9301      	str	r3, [sp, #4]
   12afa:	f000 f8bf 	bl	12c7c <_vfiprintf_r>
   12afe:	b002      	add	sp, #8
   12b00:	f85d eb04 	ldr.w	lr, [sp], #4
   12b04:	b003      	add	sp, #12
   12b06:	4770      	bx	lr
   12b08:	2001818c 	.word	0x2001818c

00012b0c <malloc>:
   12b0c:	4b02      	ldr	r3, [pc, #8]	; (12b18 <malloc+0xc>)
   12b0e:	4601      	mov	r1, r0
   12b10:	6818      	ldr	r0, [r3, #0]
   12b12:	f000 b859 	b.w	12bc8 <_malloc_r>
   12b16:	bf00      	nop
   12b18:	2001818c 	.word	0x2001818c

00012b1c <free>:
   12b1c:	4b02      	ldr	r3, [pc, #8]	; (12b28 <free+0xc>)
   12b1e:	4601      	mov	r1, r0
   12b20:	6818      	ldr	r0, [r3, #0]
   12b22:	f000 b803 	b.w	12b2c <_free_r>
   12b26:	bf00      	nop
   12b28:	2001818c 	.word	0x2001818c

00012b2c <_free_r>:
   12b2c:	b538      	push	{r3, r4, r5, lr}
   12b2e:	4605      	mov	r5, r0
   12b30:	2900      	cmp	r1, #0
   12b32:	d045      	beq.n	12bc0 <_free_r+0x94>
   12b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12b38:	1f0c      	subs	r4, r1, #4
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	bfb8      	it	lt
   12b3e:	18e4      	addlt	r4, r4, r3
   12b40:	f001 f88c 	bl	13c5c <__malloc_lock>
   12b44:	4a1f      	ldr	r2, [pc, #124]	; (12bc4 <_free_r+0x98>)
   12b46:	6813      	ldr	r3, [r2, #0]
   12b48:	4610      	mov	r0, r2
   12b4a:	b933      	cbnz	r3, 12b5a <_free_r+0x2e>
   12b4c:	6063      	str	r3, [r4, #4]
   12b4e:	6014      	str	r4, [r2, #0]
   12b50:	4628      	mov	r0, r5
   12b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b56:	f001 b887 	b.w	13c68 <__malloc_unlock>
   12b5a:	42a3      	cmp	r3, r4
   12b5c:	d90b      	bls.n	12b76 <_free_r+0x4a>
   12b5e:	6821      	ldr	r1, [r4, #0]
   12b60:	1862      	adds	r2, r4, r1
   12b62:	4293      	cmp	r3, r2
   12b64:	bf02      	ittt	eq
   12b66:	681a      	ldreq	r2, [r3, #0]
   12b68:	685b      	ldreq	r3, [r3, #4]
   12b6a:	1852      	addeq	r2, r2, r1
   12b6c:	6063      	str	r3, [r4, #4]
   12b6e:	bf08      	it	eq
   12b70:	6022      	streq	r2, [r4, #0]
   12b72:	6004      	str	r4, [r0, #0]
   12b74:	e7ec      	b.n	12b50 <_free_r+0x24>
   12b76:	461a      	mov	r2, r3
   12b78:	685b      	ldr	r3, [r3, #4]
   12b7a:	b10b      	cbz	r3, 12b80 <_free_r+0x54>
   12b7c:	42a3      	cmp	r3, r4
   12b7e:	d9fa      	bls.n	12b76 <_free_r+0x4a>
   12b80:	6811      	ldr	r1, [r2, #0]
   12b82:	1850      	adds	r0, r2, r1
   12b84:	42a0      	cmp	r0, r4
   12b86:	d10b      	bne.n	12ba0 <_free_r+0x74>
   12b88:	6820      	ldr	r0, [r4, #0]
   12b8a:	4401      	add	r1, r0
   12b8c:	1850      	adds	r0, r2, r1
   12b8e:	6011      	str	r1, [r2, #0]
   12b90:	4283      	cmp	r3, r0
   12b92:	d1dd      	bne.n	12b50 <_free_r+0x24>
   12b94:	6818      	ldr	r0, [r3, #0]
   12b96:	685b      	ldr	r3, [r3, #4]
   12b98:	4401      	add	r1, r0
   12b9a:	6053      	str	r3, [r2, #4]
   12b9c:	6011      	str	r1, [r2, #0]
   12b9e:	e7d7      	b.n	12b50 <_free_r+0x24>
   12ba0:	d902      	bls.n	12ba8 <_free_r+0x7c>
   12ba2:	230c      	movs	r3, #12
   12ba4:	602b      	str	r3, [r5, #0]
   12ba6:	e7d3      	b.n	12b50 <_free_r+0x24>
   12ba8:	6820      	ldr	r0, [r4, #0]
   12baa:	1821      	adds	r1, r4, r0
   12bac:	428b      	cmp	r3, r1
   12bae:	bf02      	ittt	eq
   12bb0:	6819      	ldreq	r1, [r3, #0]
   12bb2:	685b      	ldreq	r3, [r3, #4]
   12bb4:	1809      	addeq	r1, r1, r0
   12bb6:	6063      	str	r3, [r4, #4]
   12bb8:	bf08      	it	eq
   12bba:	6021      	streq	r1, [r4, #0]
   12bbc:	6054      	str	r4, [r2, #4]
   12bbe:	e7c7      	b.n	12b50 <_free_r+0x24>
   12bc0:	bd38      	pop	{r3, r4, r5, pc}
   12bc2:	bf00      	nop
   12bc4:	20027360 	.word	0x20027360

00012bc8 <_malloc_r>:
   12bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bca:	1ccd      	adds	r5, r1, #3
   12bcc:	4606      	mov	r6, r0
   12bce:	f025 0503 	bic.w	r5, r5, #3
   12bd2:	3508      	adds	r5, #8
   12bd4:	2d0c      	cmp	r5, #12
   12bd6:	bf38      	it	cc
   12bd8:	250c      	movcc	r5, #12
   12bda:	2d00      	cmp	r5, #0
   12bdc:	db01      	blt.n	12be2 <_malloc_r+0x1a>
   12bde:	42a9      	cmp	r1, r5
   12be0:	d903      	bls.n	12bea <_malloc_r+0x22>
   12be2:	230c      	movs	r3, #12
   12be4:	6033      	str	r3, [r6, #0]
   12be6:	2000      	movs	r0, #0
   12be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12bea:	f001 f837 	bl	13c5c <__malloc_lock>
   12bee:	4921      	ldr	r1, [pc, #132]	; (12c74 <_malloc_r+0xac>)
   12bf0:	680a      	ldr	r2, [r1, #0]
   12bf2:	4614      	mov	r4, r2
   12bf4:	b99c      	cbnz	r4, 12c1e <_malloc_r+0x56>
   12bf6:	4f20      	ldr	r7, [pc, #128]	; (12c78 <_malloc_r+0xb0>)
   12bf8:	683b      	ldr	r3, [r7, #0]
   12bfa:	b923      	cbnz	r3, 12c06 <_malloc_r+0x3e>
   12bfc:	4621      	mov	r1, r4
   12bfe:	4630      	mov	r0, r6
   12c00:	f000 fcbc 	bl	1357c <_sbrk_r>
   12c04:	6038      	str	r0, [r7, #0]
   12c06:	4629      	mov	r1, r5
   12c08:	4630      	mov	r0, r6
   12c0a:	f000 fcb7 	bl	1357c <_sbrk_r>
   12c0e:	1c43      	adds	r3, r0, #1
   12c10:	d123      	bne.n	12c5a <_malloc_r+0x92>
   12c12:	230c      	movs	r3, #12
   12c14:	4630      	mov	r0, r6
   12c16:	6033      	str	r3, [r6, #0]
   12c18:	f001 f826 	bl	13c68 <__malloc_unlock>
   12c1c:	e7e3      	b.n	12be6 <_malloc_r+0x1e>
   12c1e:	6823      	ldr	r3, [r4, #0]
   12c20:	1b5b      	subs	r3, r3, r5
   12c22:	d417      	bmi.n	12c54 <_malloc_r+0x8c>
   12c24:	2b0b      	cmp	r3, #11
   12c26:	d903      	bls.n	12c30 <_malloc_r+0x68>
   12c28:	6023      	str	r3, [r4, #0]
   12c2a:	441c      	add	r4, r3
   12c2c:	6025      	str	r5, [r4, #0]
   12c2e:	e004      	b.n	12c3a <_malloc_r+0x72>
   12c30:	6863      	ldr	r3, [r4, #4]
   12c32:	42a2      	cmp	r2, r4
   12c34:	bf0c      	ite	eq
   12c36:	600b      	streq	r3, [r1, #0]
   12c38:	6053      	strne	r3, [r2, #4]
   12c3a:	4630      	mov	r0, r6
   12c3c:	f001 f814 	bl	13c68 <__malloc_unlock>
   12c40:	f104 000b 	add.w	r0, r4, #11
   12c44:	1d23      	adds	r3, r4, #4
   12c46:	f020 0007 	bic.w	r0, r0, #7
   12c4a:	1ac2      	subs	r2, r0, r3
   12c4c:	d0cc      	beq.n	12be8 <_malloc_r+0x20>
   12c4e:	1a1b      	subs	r3, r3, r0
   12c50:	50a3      	str	r3, [r4, r2]
   12c52:	e7c9      	b.n	12be8 <_malloc_r+0x20>
   12c54:	4622      	mov	r2, r4
   12c56:	6864      	ldr	r4, [r4, #4]
   12c58:	e7cc      	b.n	12bf4 <_malloc_r+0x2c>
   12c5a:	1cc4      	adds	r4, r0, #3
   12c5c:	f024 0403 	bic.w	r4, r4, #3
   12c60:	42a0      	cmp	r0, r4
   12c62:	d0e3      	beq.n	12c2c <_malloc_r+0x64>
   12c64:	1a21      	subs	r1, r4, r0
   12c66:	4630      	mov	r0, r6
   12c68:	f000 fc88 	bl	1357c <_sbrk_r>
   12c6c:	3001      	adds	r0, #1
   12c6e:	d1dd      	bne.n	12c2c <_malloc_r+0x64>
   12c70:	e7cf      	b.n	12c12 <_malloc_r+0x4a>
   12c72:	bf00      	nop
   12c74:	20027360 	.word	0x20027360
   12c78:	20027364 	.word	0x20027364

00012c7c <_vfiprintf_r>:
   12c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c80:	460d      	mov	r5, r1
   12c82:	b09d      	sub	sp, #116	; 0x74
   12c84:	4614      	mov	r4, r2
   12c86:	4698      	mov	r8, r3
   12c88:	4606      	mov	r6, r0
   12c8a:	b118      	cbz	r0, 12c94 <_vfiprintf_r+0x18>
   12c8c:	6983      	ldr	r3, [r0, #24]
   12c8e:	b90b      	cbnz	r3, 12c94 <_vfiprintf_r+0x18>
   12c90:	f000 ff22 	bl	13ad8 <__sinit>
   12c94:	4b89      	ldr	r3, [pc, #548]	; (12ebc <_vfiprintf_r+0x240>)
   12c96:	429d      	cmp	r5, r3
   12c98:	d11b      	bne.n	12cd2 <_vfiprintf_r+0x56>
   12c9a:	6875      	ldr	r5, [r6, #4]
   12c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12c9e:	07d9      	lsls	r1, r3, #31
   12ca0:	d405      	bmi.n	12cae <_vfiprintf_r+0x32>
   12ca2:	89ab      	ldrh	r3, [r5, #12]
   12ca4:	059a      	lsls	r2, r3, #22
   12ca6:	d402      	bmi.n	12cae <_vfiprintf_r+0x32>
   12ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12caa:	f001 fea9 	bl	14a00 <__retarget_lock_acquire_recursive>
   12cae:	89ab      	ldrh	r3, [r5, #12]
   12cb0:	071b      	lsls	r3, r3, #28
   12cb2:	d501      	bpl.n	12cb8 <_vfiprintf_r+0x3c>
   12cb4:	692b      	ldr	r3, [r5, #16]
   12cb6:	b9eb      	cbnz	r3, 12cf4 <_vfiprintf_r+0x78>
   12cb8:	4629      	mov	r1, r5
   12cba:	4630      	mov	r0, r6
   12cbc:	f000 fd9c 	bl	137f8 <__swsetup_r>
   12cc0:	b1c0      	cbz	r0, 12cf4 <_vfiprintf_r+0x78>
   12cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12cc4:	07dc      	lsls	r4, r3, #31
   12cc6:	d50e      	bpl.n	12ce6 <_vfiprintf_r+0x6a>
   12cc8:	f04f 30ff 	mov.w	r0, #4294967295
   12ccc:	b01d      	add	sp, #116	; 0x74
   12cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cd2:	4b7b      	ldr	r3, [pc, #492]	; (12ec0 <_vfiprintf_r+0x244>)
   12cd4:	429d      	cmp	r5, r3
   12cd6:	d101      	bne.n	12cdc <_vfiprintf_r+0x60>
   12cd8:	68b5      	ldr	r5, [r6, #8]
   12cda:	e7df      	b.n	12c9c <_vfiprintf_r+0x20>
   12cdc:	4b79      	ldr	r3, [pc, #484]	; (12ec4 <_vfiprintf_r+0x248>)
   12cde:	429d      	cmp	r5, r3
   12ce0:	bf08      	it	eq
   12ce2:	68f5      	ldreq	r5, [r6, #12]
   12ce4:	e7da      	b.n	12c9c <_vfiprintf_r+0x20>
   12ce6:	89ab      	ldrh	r3, [r5, #12]
   12ce8:	0598      	lsls	r0, r3, #22
   12cea:	d4ed      	bmi.n	12cc8 <_vfiprintf_r+0x4c>
   12cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12cee:	f001 fe8f 	bl	14a10 <__retarget_lock_release_recursive>
   12cf2:	e7e9      	b.n	12cc8 <_vfiprintf_r+0x4c>
   12cf4:	2300      	movs	r3, #0
   12cf6:	f8cd 800c 	str.w	r8, [sp, #12]
   12cfa:	f04f 0901 	mov.w	r9, #1
   12cfe:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 12ec8 <_vfiprintf_r+0x24c>
   12d02:	9309      	str	r3, [sp, #36]	; 0x24
   12d04:	2320      	movs	r3, #32
   12d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   12d0a:	2330      	movs	r3, #48	; 0x30
   12d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   12d10:	4623      	mov	r3, r4
   12d12:	469a      	mov	sl, r3
   12d14:	f813 2b01 	ldrb.w	r2, [r3], #1
   12d18:	b10a      	cbz	r2, 12d1e <_vfiprintf_r+0xa2>
   12d1a:	2a25      	cmp	r2, #37	; 0x25
   12d1c:	d1f9      	bne.n	12d12 <_vfiprintf_r+0x96>
   12d1e:	ebba 0b04 	subs.w	fp, sl, r4
   12d22:	d00b      	beq.n	12d3c <_vfiprintf_r+0xc0>
   12d24:	465b      	mov	r3, fp
   12d26:	4622      	mov	r2, r4
   12d28:	4629      	mov	r1, r5
   12d2a:	4630      	mov	r0, r6
   12d2c:	f005 ff0b 	bl	18b46 <__sfputs_r>
   12d30:	3001      	adds	r0, #1
   12d32:	f000 80aa 	beq.w	12e8a <_vfiprintf_r+0x20e>
   12d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12d38:	445a      	add	r2, fp
   12d3a:	9209      	str	r2, [sp, #36]	; 0x24
   12d3c:	f89a 3000 	ldrb.w	r3, [sl]
   12d40:	2b00      	cmp	r3, #0
   12d42:	f000 80a2 	beq.w	12e8a <_vfiprintf_r+0x20e>
   12d46:	2300      	movs	r3, #0
   12d48:	f04f 32ff 	mov.w	r2, #4294967295
   12d4c:	f10a 0a01 	add.w	sl, sl, #1
   12d50:	9304      	str	r3, [sp, #16]
   12d52:	9307      	str	r3, [sp, #28]
   12d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   12d58:	931a      	str	r3, [sp, #104]	; 0x68
   12d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   12d5e:	4654      	mov	r4, sl
   12d60:	2205      	movs	r2, #5
   12d62:	4859      	ldr	r0, [pc, #356]	; (12ec8 <_vfiprintf_r+0x24c>)
   12d64:	f814 1b01 	ldrb.w	r1, [r4], #1
   12d68:	f005 fea7 	bl	18aba <memchr>
   12d6c:	9a04      	ldr	r2, [sp, #16]
   12d6e:	b9d8      	cbnz	r0, 12da8 <_vfiprintf_r+0x12c>
   12d70:	06d1      	lsls	r1, r2, #27
   12d72:	bf44      	itt	mi
   12d74:	2320      	movmi	r3, #32
   12d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   12d7a:	0713      	lsls	r3, r2, #28
   12d7c:	bf44      	itt	mi
   12d7e:	232b      	movmi	r3, #43	; 0x2b
   12d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   12d84:	f89a 3000 	ldrb.w	r3, [sl]
   12d88:	2b2a      	cmp	r3, #42	; 0x2a
   12d8a:	d015      	beq.n	12db8 <_vfiprintf_r+0x13c>
   12d8c:	9a07      	ldr	r2, [sp, #28]
   12d8e:	4654      	mov	r4, sl
   12d90:	2000      	movs	r0, #0
   12d92:	f04f 0c0a 	mov.w	ip, #10
   12d96:	4621      	mov	r1, r4
   12d98:	f811 3b01 	ldrb.w	r3, [r1], #1
   12d9c:	3b30      	subs	r3, #48	; 0x30
   12d9e:	2b09      	cmp	r3, #9
   12da0:	d94e      	bls.n	12e40 <_vfiprintf_r+0x1c4>
   12da2:	b1b0      	cbz	r0, 12dd2 <_vfiprintf_r+0x156>
   12da4:	9207      	str	r2, [sp, #28]
   12da6:	e014      	b.n	12dd2 <_vfiprintf_r+0x156>
   12da8:	eba0 0308 	sub.w	r3, r0, r8
   12dac:	46a2      	mov	sl, r4
   12dae:	fa09 f303 	lsl.w	r3, r9, r3
   12db2:	4313      	orrs	r3, r2
   12db4:	9304      	str	r3, [sp, #16]
   12db6:	e7d2      	b.n	12d5e <_vfiprintf_r+0xe2>
   12db8:	9b03      	ldr	r3, [sp, #12]
   12dba:	1d19      	adds	r1, r3, #4
   12dbc:	681b      	ldr	r3, [r3, #0]
   12dbe:	2b00      	cmp	r3, #0
   12dc0:	9103      	str	r1, [sp, #12]
   12dc2:	bfbb      	ittet	lt
   12dc4:	425b      	neglt	r3, r3
   12dc6:	f042 0202 	orrlt.w	r2, r2, #2
   12dca:	9307      	strge	r3, [sp, #28]
   12dcc:	9307      	strlt	r3, [sp, #28]
   12dce:	bfb8      	it	lt
   12dd0:	9204      	strlt	r2, [sp, #16]
   12dd2:	7823      	ldrb	r3, [r4, #0]
   12dd4:	2b2e      	cmp	r3, #46	; 0x2e
   12dd6:	d10c      	bne.n	12df2 <_vfiprintf_r+0x176>
   12dd8:	7863      	ldrb	r3, [r4, #1]
   12dda:	2b2a      	cmp	r3, #42	; 0x2a
   12ddc:	d135      	bne.n	12e4a <_vfiprintf_r+0x1ce>
   12dde:	9b03      	ldr	r3, [sp, #12]
   12de0:	3402      	adds	r4, #2
   12de2:	1d1a      	adds	r2, r3, #4
   12de4:	681b      	ldr	r3, [r3, #0]
   12de6:	2b00      	cmp	r3, #0
   12de8:	9203      	str	r2, [sp, #12]
   12dea:	bfb8      	it	lt
   12dec:	f04f 33ff 	movlt.w	r3, #4294967295
   12df0:	9305      	str	r3, [sp, #20]
   12df2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 12ed8 <_vfiprintf_r+0x25c>
   12df6:	2203      	movs	r2, #3
   12df8:	7821      	ldrb	r1, [r4, #0]
   12dfa:	4650      	mov	r0, sl
   12dfc:	f005 fe5d 	bl	18aba <memchr>
   12e00:	b140      	cbz	r0, 12e14 <_vfiprintf_r+0x198>
   12e02:	2340      	movs	r3, #64	; 0x40
   12e04:	eba0 000a 	sub.w	r0, r0, sl
   12e08:	3401      	adds	r4, #1
   12e0a:	fa03 f000 	lsl.w	r0, r3, r0
   12e0e:	9b04      	ldr	r3, [sp, #16]
   12e10:	4303      	orrs	r3, r0
   12e12:	9304      	str	r3, [sp, #16]
   12e14:	f814 1b01 	ldrb.w	r1, [r4], #1
   12e18:	2206      	movs	r2, #6
   12e1a:	482c      	ldr	r0, [pc, #176]	; (12ecc <_vfiprintf_r+0x250>)
   12e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   12e20:	f005 fe4b 	bl	18aba <memchr>
   12e24:	2800      	cmp	r0, #0
   12e26:	d03f      	beq.n	12ea8 <_vfiprintf_r+0x22c>
   12e28:	4b29      	ldr	r3, [pc, #164]	; (12ed0 <_vfiprintf_r+0x254>)
   12e2a:	bb1b      	cbnz	r3, 12e74 <_vfiprintf_r+0x1f8>
   12e2c:	9b03      	ldr	r3, [sp, #12]
   12e2e:	3307      	adds	r3, #7
   12e30:	f023 0307 	bic.w	r3, r3, #7
   12e34:	3308      	adds	r3, #8
   12e36:	9303      	str	r3, [sp, #12]
   12e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e3a:	443b      	add	r3, r7
   12e3c:	9309      	str	r3, [sp, #36]	; 0x24
   12e3e:	e767      	b.n	12d10 <_vfiprintf_r+0x94>
   12e40:	fb0c 3202 	mla	r2, ip, r2, r3
   12e44:	460c      	mov	r4, r1
   12e46:	2001      	movs	r0, #1
   12e48:	e7a5      	b.n	12d96 <_vfiprintf_r+0x11a>
   12e4a:	2300      	movs	r3, #0
   12e4c:	3401      	adds	r4, #1
   12e4e:	f04f 0c0a 	mov.w	ip, #10
   12e52:	4619      	mov	r1, r3
   12e54:	9305      	str	r3, [sp, #20]
   12e56:	4620      	mov	r0, r4
   12e58:	f810 2b01 	ldrb.w	r2, [r0], #1
   12e5c:	3a30      	subs	r2, #48	; 0x30
   12e5e:	2a09      	cmp	r2, #9
   12e60:	d903      	bls.n	12e6a <_vfiprintf_r+0x1ee>
   12e62:	2b00      	cmp	r3, #0
   12e64:	d0c5      	beq.n	12df2 <_vfiprintf_r+0x176>
   12e66:	9105      	str	r1, [sp, #20]
   12e68:	e7c3      	b.n	12df2 <_vfiprintf_r+0x176>
   12e6a:	fb0c 2101 	mla	r1, ip, r1, r2
   12e6e:	4604      	mov	r4, r0
   12e70:	2301      	movs	r3, #1
   12e72:	e7f0      	b.n	12e56 <_vfiprintf_r+0x1da>
   12e74:	ab03      	add	r3, sp, #12
   12e76:	462a      	mov	r2, r5
   12e78:	a904      	add	r1, sp, #16
   12e7a:	4630      	mov	r0, r6
   12e7c:	9300      	str	r3, [sp, #0]
   12e7e:	4b15      	ldr	r3, [pc, #84]	; (12ed4 <_vfiprintf_r+0x258>)
   12e80:	f000 f82c 	bl	12edc <_printf_float>
   12e84:	4607      	mov	r7, r0
   12e86:	1c78      	adds	r0, r7, #1
   12e88:	d1d6      	bne.n	12e38 <_vfiprintf_r+0x1bc>
   12e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12e8c:	07d9      	lsls	r1, r3, #31
   12e8e:	d405      	bmi.n	12e9c <_vfiprintf_r+0x220>
   12e90:	89ab      	ldrh	r3, [r5, #12]
   12e92:	059a      	lsls	r2, r3, #22
   12e94:	d402      	bmi.n	12e9c <_vfiprintf_r+0x220>
   12e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12e98:	f001 fdba 	bl	14a10 <__retarget_lock_release_recursive>
   12e9c:	89ab      	ldrh	r3, [r5, #12]
   12e9e:	065b      	lsls	r3, r3, #25
   12ea0:	f53f af12 	bmi.w	12cc8 <_vfiprintf_r+0x4c>
   12ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ea6:	e711      	b.n	12ccc <_vfiprintf_r+0x50>
   12ea8:	ab03      	add	r3, sp, #12
   12eaa:	462a      	mov	r2, r5
   12eac:	a904      	add	r1, sp, #16
   12eae:	4630      	mov	r0, r6
   12eb0:	9300      	str	r3, [sp, #0]
   12eb2:	4b08      	ldr	r3, [pc, #32]	; (12ed4 <_vfiprintf_r+0x258>)
   12eb4:	f000 fa3c 	bl	13330 <_printf_i>
   12eb8:	e7e4      	b.n	12e84 <_vfiprintf_r+0x208>
   12eba:	bf00      	nop
   12ebc:	0001d0ac 	.word	0x0001d0ac
   12ec0:	0001d0cc 	.word	0x0001d0cc
   12ec4:	0001d08c 	.word	0x0001d08c
   12ec8:	0001d235 	.word	0x0001d235
   12ecc:	0001d23f 	.word	0x0001d23f
   12ed0:	00012edd 	.word	0x00012edd
   12ed4:	00018b47 	.word	0x00018b47
   12ed8:	0001d23b 	.word	0x0001d23b

00012edc <_printf_float>:
   12edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee0:	b091      	sub	sp, #68	; 0x44
   12ee2:	460c      	mov	r4, r1
   12ee4:	4616      	mov	r6, r2
   12ee6:	461f      	mov	r7, r3
   12ee8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   12eec:	4605      	mov	r5, r0
   12eee:	f000 fe71 	bl	13bd4 <_localeconv_r>
   12ef2:	6803      	ldr	r3, [r0, #0]
   12ef4:	4618      	mov	r0, r3
   12ef6:	9309      	str	r3, [sp, #36]	; 0x24
   12ef8:	f7ee faec 	bl	14d4 <strlen>
   12efc:	2300      	movs	r3, #0
   12efe:	900a      	str	r0, [sp, #40]	; 0x28
   12f00:	930e      	str	r3, [sp, #56]	; 0x38
   12f02:	f8d8 3000 	ldr.w	r3, [r8]
   12f06:	f894 9018 	ldrb.w	r9, [r4, #24]
   12f0a:	3307      	adds	r3, #7
   12f0c:	f8d4 b000 	ldr.w	fp, [r4]
   12f10:	f023 0307 	bic.w	r3, r3, #7
   12f14:	f103 0208 	add.w	r2, r3, #8
   12f18:	f8c8 2000 	str.w	r2, [r8]
   12f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   12f24:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   12f28:	f04f 32ff 	mov.w	r2, #4294967295
   12f2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   12f30:	4640      	mov	r0, r8
   12f32:	930b      	str	r3, [sp, #44]	; 0x2c
   12f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12f36:	4b9b      	ldr	r3, [pc, #620]	; (131a4 <_printf_float+0x2c8>)
   12f38:	f7ee faac 	bl	1494 <__aeabi_dcmpun>
   12f3c:	bb70      	cbnz	r0, 12f9c <_printf_float+0xc0>
   12f3e:	f04f 32ff 	mov.w	r2, #4294967295
   12f42:	4b98      	ldr	r3, [pc, #608]	; (131a4 <_printf_float+0x2c8>)
   12f44:	4640      	mov	r0, r8
   12f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12f48:	f7ed fd3e 	bl	9c8 <__aeabi_dcmple>
   12f4c:	bb30      	cbnz	r0, 12f9c <_printf_float+0xc0>
   12f4e:	2200      	movs	r2, #0
   12f50:	2300      	movs	r3, #0
   12f52:	4640      	mov	r0, r8
   12f54:	4651      	mov	r1, sl
   12f56:	f7ed fd2d 	bl	9b4 <__aeabi_dcmplt>
   12f5a:	b110      	cbz	r0, 12f62 <_printf_float+0x86>
   12f5c:	232d      	movs	r3, #45	; 0x2d
   12f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   12f62:	4b91      	ldr	r3, [pc, #580]	; (131a8 <_printf_float+0x2cc>)
   12f64:	4891      	ldr	r0, [pc, #580]	; (131ac <_printf_float+0x2d0>)
   12f66:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   12f6a:	bf94      	ite	ls
   12f6c:	4698      	movls	r8, r3
   12f6e:	4680      	movhi	r8, r0
   12f70:	2303      	movs	r3, #3
   12f72:	f04f 0a00 	mov.w	sl, #0
   12f76:	6123      	str	r3, [r4, #16]
   12f78:	f02b 0304 	bic.w	r3, fp, #4
   12f7c:	6023      	str	r3, [r4, #0]
   12f7e:	4633      	mov	r3, r6
   12f80:	aa0f      	add	r2, sp, #60	; 0x3c
   12f82:	4621      	mov	r1, r4
   12f84:	4628      	mov	r0, r5
   12f86:	9700      	str	r7, [sp, #0]
   12f88:	f005 fe8d 	bl	18ca6 <_printf_common>
   12f8c:	3001      	adds	r0, #1
   12f8e:	f040 808f 	bne.w	130b0 <_printf_float+0x1d4>
   12f92:	f04f 30ff 	mov.w	r0, #4294967295
   12f96:	b011      	add	sp, #68	; 0x44
   12f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f9c:	4642      	mov	r2, r8
   12f9e:	4653      	mov	r3, sl
   12fa0:	4640      	mov	r0, r8
   12fa2:	4651      	mov	r1, sl
   12fa4:	f7ee fa76 	bl	1494 <__aeabi_dcmpun>
   12fa8:	b140      	cbz	r0, 12fbc <_printf_float+0xe0>
   12faa:	f1ba 0f00 	cmp.w	sl, #0
   12fae:	4880      	ldr	r0, [pc, #512]	; (131b0 <_printf_float+0x2d4>)
   12fb0:	bfbc      	itt	lt
   12fb2:	232d      	movlt	r3, #45	; 0x2d
   12fb4:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   12fb8:	4b7e      	ldr	r3, [pc, #504]	; (131b4 <_printf_float+0x2d8>)
   12fba:	e7d4      	b.n	12f66 <_printf_float+0x8a>
   12fbc:	6863      	ldr	r3, [r4, #4]
   12fbe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   12fc2:	1c5a      	adds	r2, r3, #1
   12fc4:	d142      	bne.n	1304c <_printf_float+0x170>
   12fc6:	2306      	movs	r3, #6
   12fc8:	6063      	str	r3, [r4, #4]
   12fca:	2200      	movs	r2, #0
   12fcc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   12fd0:	4628      	mov	r0, r5
   12fd2:	910b      	str	r1, [sp, #44]	; 0x2c
   12fd4:	9206      	str	r2, [sp, #24]
   12fd6:	aa0e      	add	r2, sp, #56	; 0x38
   12fd8:	6023      	str	r3, [r4, #0]
   12fda:	e9cd 9204 	strd	r9, r2, [sp, #16]
   12fde:	aa0d      	add	r2, sp, #52	; 0x34
   12fe0:	9203      	str	r2, [sp, #12]
   12fe2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   12fe6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   12fea:	6863      	ldr	r3, [r4, #4]
   12fec:	4642      	mov	r2, r8
   12fee:	9300      	str	r3, [sp, #0]
   12ff0:	4653      	mov	r3, sl
   12ff2:	f005 fdba 	bl	18b6a <__cvt>
   12ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12ff8:	4680      	mov	r8, r0
   12ffa:	2947      	cmp	r1, #71	; 0x47
   12ffc:	990d      	ldr	r1, [sp, #52]	; 0x34
   12ffe:	d108      	bne.n	13012 <_printf_float+0x136>
   13000:	1cc8      	adds	r0, r1, #3
   13002:	db02      	blt.n	1300a <_printf_float+0x12e>
   13004:	6863      	ldr	r3, [r4, #4]
   13006:	4299      	cmp	r1, r3
   13008:	dd40      	ble.n	1308c <_printf_float+0x1b0>
   1300a:	f1a9 0902 	sub.w	r9, r9, #2
   1300e:	fa5f f989 	uxtb.w	r9, r9
   13012:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   13016:	d81f      	bhi.n	13058 <_printf_float+0x17c>
   13018:	3901      	subs	r1, #1
   1301a:	464a      	mov	r2, r9
   1301c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13020:	910d      	str	r1, [sp, #52]	; 0x34
   13022:	f005 fe02 	bl	18c2a <__exponent>
   13026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13028:	4682      	mov	sl, r0
   1302a:	1813      	adds	r3, r2, r0
   1302c:	2a01      	cmp	r2, #1
   1302e:	6123      	str	r3, [r4, #16]
   13030:	dc02      	bgt.n	13038 <_printf_float+0x15c>
   13032:	6822      	ldr	r2, [r4, #0]
   13034:	07d2      	lsls	r2, r2, #31
   13036:	d501      	bpl.n	1303c <_printf_float+0x160>
   13038:	3301      	adds	r3, #1
   1303a:	6123      	str	r3, [r4, #16]
   1303c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   13040:	2b00      	cmp	r3, #0
   13042:	d09c      	beq.n	12f7e <_printf_float+0xa2>
   13044:	232d      	movs	r3, #45	; 0x2d
   13046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1304a:	e798      	b.n	12f7e <_printf_float+0xa2>
   1304c:	2947      	cmp	r1, #71	; 0x47
   1304e:	d1bc      	bne.n	12fca <_printf_float+0xee>
   13050:	2b00      	cmp	r3, #0
   13052:	d1ba      	bne.n	12fca <_printf_float+0xee>
   13054:	2301      	movs	r3, #1
   13056:	e7b7      	b.n	12fc8 <_printf_float+0xec>
   13058:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   1305c:	d118      	bne.n	13090 <_printf_float+0x1b4>
   1305e:	2900      	cmp	r1, #0
   13060:	6863      	ldr	r3, [r4, #4]
   13062:	dd0b      	ble.n	1307c <_printf_float+0x1a0>
   13064:	6121      	str	r1, [r4, #16]
   13066:	b913      	cbnz	r3, 1306e <_printf_float+0x192>
   13068:	6822      	ldr	r2, [r4, #0]
   1306a:	07d0      	lsls	r0, r2, #31
   1306c:	d502      	bpl.n	13074 <_printf_float+0x198>
   1306e:	3301      	adds	r3, #1
   13070:	440b      	add	r3, r1
   13072:	6123      	str	r3, [r4, #16]
   13074:	f04f 0a00 	mov.w	sl, #0
   13078:	65a1      	str	r1, [r4, #88]	; 0x58
   1307a:	e7df      	b.n	1303c <_printf_float+0x160>
   1307c:	b913      	cbnz	r3, 13084 <_printf_float+0x1a8>
   1307e:	6822      	ldr	r2, [r4, #0]
   13080:	07d2      	lsls	r2, r2, #31
   13082:	d501      	bpl.n	13088 <_printf_float+0x1ac>
   13084:	3302      	adds	r3, #2
   13086:	e7f4      	b.n	13072 <_printf_float+0x196>
   13088:	2301      	movs	r3, #1
   1308a:	e7f2      	b.n	13072 <_printf_float+0x196>
   1308c:	f04f 0967 	mov.w	r9, #103	; 0x67
   13090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13092:	4299      	cmp	r1, r3
   13094:	db05      	blt.n	130a2 <_printf_float+0x1c6>
   13096:	6823      	ldr	r3, [r4, #0]
   13098:	6121      	str	r1, [r4, #16]
   1309a:	07d8      	lsls	r0, r3, #31
   1309c:	d5ea      	bpl.n	13074 <_printf_float+0x198>
   1309e:	1c4b      	adds	r3, r1, #1
   130a0:	e7e7      	b.n	13072 <_printf_float+0x196>
   130a2:	2900      	cmp	r1, #0
   130a4:	bfd4      	ite	le
   130a6:	f1c1 0202 	rsble	r2, r1, #2
   130aa:	2201      	movgt	r2, #1
   130ac:	4413      	add	r3, r2
   130ae:	e7e0      	b.n	13072 <_printf_float+0x196>
   130b0:	6823      	ldr	r3, [r4, #0]
   130b2:	055a      	lsls	r2, r3, #21
   130b4:	d407      	bmi.n	130c6 <_printf_float+0x1ea>
   130b6:	6923      	ldr	r3, [r4, #16]
   130b8:	4642      	mov	r2, r8
   130ba:	4631      	mov	r1, r6
   130bc:	4628      	mov	r0, r5
   130be:	47b8      	blx	r7
   130c0:	3001      	adds	r0, #1
   130c2:	d12b      	bne.n	1311c <_printf_float+0x240>
   130c4:	e765      	b.n	12f92 <_printf_float+0xb6>
   130c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   130ca:	f240 80dc 	bls.w	13286 <_printf_float+0x3aa>
   130ce:	2200      	movs	r2, #0
   130d0:	2300      	movs	r3, #0
   130d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   130d6:	f7ed fc63 	bl	9a0 <__aeabi_dcmpeq>
   130da:	2800      	cmp	r0, #0
   130dc:	d033      	beq.n	13146 <_printf_float+0x26a>
   130de:	2301      	movs	r3, #1
   130e0:	4a35      	ldr	r2, [pc, #212]	; (131b8 <_printf_float+0x2dc>)
   130e2:	4631      	mov	r1, r6
   130e4:	4628      	mov	r0, r5
   130e6:	47b8      	blx	r7
   130e8:	3001      	adds	r0, #1
   130ea:	f43f af52 	beq.w	12f92 <_printf_float+0xb6>
   130ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   130f2:	429a      	cmp	r2, r3
   130f4:	db02      	blt.n	130fc <_printf_float+0x220>
   130f6:	6823      	ldr	r3, [r4, #0]
   130f8:	07d8      	lsls	r0, r3, #31
   130fa:	d50f      	bpl.n	1311c <_printf_float+0x240>
   130fc:	4631      	mov	r1, r6
   130fe:	4628      	mov	r0, r5
   13100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   13104:	47b8      	blx	r7
   13106:	3001      	adds	r0, #1
   13108:	f43f af43 	beq.w	12f92 <_printf_float+0xb6>
   1310c:	f04f 0800 	mov.w	r8, #0
   13110:	f104 091a 	add.w	r9, r4, #26
   13114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13116:	3b01      	subs	r3, #1
   13118:	4543      	cmp	r3, r8
   1311a:	dc09      	bgt.n	13130 <_printf_float+0x254>
   1311c:	6823      	ldr	r3, [r4, #0]
   1311e:	079b      	lsls	r3, r3, #30
   13120:	f100 8101 	bmi.w	13326 <_printf_float+0x44a>
   13124:	68e0      	ldr	r0, [r4, #12]
   13126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13128:	4298      	cmp	r0, r3
   1312a:	bfb8      	it	lt
   1312c:	4618      	movlt	r0, r3
   1312e:	e732      	b.n	12f96 <_printf_float+0xba>
   13130:	2301      	movs	r3, #1
   13132:	464a      	mov	r2, r9
   13134:	4631      	mov	r1, r6
   13136:	4628      	mov	r0, r5
   13138:	47b8      	blx	r7
   1313a:	3001      	adds	r0, #1
   1313c:	f43f af29 	beq.w	12f92 <_printf_float+0xb6>
   13140:	f108 0801 	add.w	r8, r8, #1
   13144:	e7e6      	b.n	13114 <_printf_float+0x238>
   13146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13148:	2b00      	cmp	r3, #0
   1314a:	dc37      	bgt.n	131bc <_printf_float+0x2e0>
   1314c:	2301      	movs	r3, #1
   1314e:	4a1a      	ldr	r2, [pc, #104]	; (131b8 <_printf_float+0x2dc>)
   13150:	4631      	mov	r1, r6
   13152:	4628      	mov	r0, r5
   13154:	47b8      	blx	r7
   13156:	3001      	adds	r0, #1
   13158:	f43f af1b 	beq.w	12f92 <_printf_float+0xb6>
   1315c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   13160:	4313      	orrs	r3, r2
   13162:	d102      	bne.n	1316a <_printf_float+0x28e>
   13164:	6823      	ldr	r3, [r4, #0]
   13166:	07d9      	lsls	r1, r3, #31
   13168:	d5d8      	bpl.n	1311c <_printf_float+0x240>
   1316a:	4631      	mov	r1, r6
   1316c:	4628      	mov	r0, r5
   1316e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   13172:	47b8      	blx	r7
   13174:	3001      	adds	r0, #1
   13176:	f43f af0c 	beq.w	12f92 <_printf_float+0xb6>
   1317a:	f04f 0900 	mov.w	r9, #0
   1317e:	f104 0a1a 	add.w	sl, r4, #26
   13182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13184:	425b      	negs	r3, r3
   13186:	454b      	cmp	r3, r9
   13188:	dc01      	bgt.n	1318e <_printf_float+0x2b2>
   1318a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1318c:	e794      	b.n	130b8 <_printf_float+0x1dc>
   1318e:	2301      	movs	r3, #1
   13190:	4652      	mov	r2, sl
   13192:	4631      	mov	r1, r6
   13194:	4628      	mov	r0, r5
   13196:	47b8      	blx	r7
   13198:	3001      	adds	r0, #1
   1319a:	f43f aefa 	beq.w	12f92 <_printf_float+0xb6>
   1319e:	f109 0901 	add.w	r9, r9, #1
   131a2:	e7ee      	b.n	13182 <_printf_float+0x2a6>
   131a4:	7fefffff 	.word	0x7fefffff
   131a8:	0001d246 	.word	0x0001d246
   131ac:	0001d24a 	.word	0x0001d24a
   131b0:	0001d252 	.word	0x0001d252
   131b4:	0001d24e 	.word	0x0001d24e
   131b8:	0001d256 	.word	0x0001d256
   131bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   131be:	6da3      	ldr	r3, [r4, #88]	; 0x58
   131c0:	429a      	cmp	r2, r3
   131c2:	bfa8      	it	ge
   131c4:	461a      	movge	r2, r3
   131c6:	2a00      	cmp	r2, #0
   131c8:	4691      	mov	r9, r2
   131ca:	dc37      	bgt.n	1323c <_printf_float+0x360>
   131cc:	f04f 0b00 	mov.w	fp, #0
   131d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   131d4:	f104 021a 	add.w	r2, r4, #26
   131d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   131dc:	ebaa 0309 	sub.w	r3, sl, r9
   131e0:	455b      	cmp	r3, fp
   131e2:	dc33      	bgt.n	1324c <_printf_float+0x370>
   131e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   131e8:	429a      	cmp	r2, r3
   131ea:	db3b      	blt.n	13264 <_printf_float+0x388>
   131ec:	6823      	ldr	r3, [r4, #0]
   131ee:	07da      	lsls	r2, r3, #31
   131f0:	d438      	bmi.n	13264 <_printf_float+0x388>
   131f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   131f4:	990d      	ldr	r1, [sp, #52]	; 0x34
   131f6:	eba2 030a 	sub.w	r3, r2, sl
   131fa:	eba2 0901 	sub.w	r9, r2, r1
   131fe:	4599      	cmp	r9, r3
   13200:	bfa8      	it	ge
   13202:	4699      	movge	r9, r3
   13204:	f1b9 0f00 	cmp.w	r9, #0
   13208:	dc34      	bgt.n	13274 <_printf_float+0x398>
   1320a:	f04f 0800 	mov.w	r8, #0
   1320e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   13212:	f104 0a1a 	add.w	sl, r4, #26
   13216:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   1321a:	1a9b      	subs	r3, r3, r2
   1321c:	eba3 0309 	sub.w	r3, r3, r9
   13220:	4543      	cmp	r3, r8
   13222:	f77f af7b 	ble.w	1311c <_printf_float+0x240>
   13226:	2301      	movs	r3, #1
   13228:	4652      	mov	r2, sl
   1322a:	4631      	mov	r1, r6
   1322c:	4628      	mov	r0, r5
   1322e:	47b8      	blx	r7
   13230:	3001      	adds	r0, #1
   13232:	f43f aeae 	beq.w	12f92 <_printf_float+0xb6>
   13236:	f108 0801 	add.w	r8, r8, #1
   1323a:	e7ec      	b.n	13216 <_printf_float+0x33a>
   1323c:	4613      	mov	r3, r2
   1323e:	4631      	mov	r1, r6
   13240:	4642      	mov	r2, r8
   13242:	4628      	mov	r0, r5
   13244:	47b8      	blx	r7
   13246:	3001      	adds	r0, #1
   13248:	d1c0      	bne.n	131cc <_printf_float+0x2f0>
   1324a:	e6a2      	b.n	12f92 <_printf_float+0xb6>
   1324c:	2301      	movs	r3, #1
   1324e:	4631      	mov	r1, r6
   13250:	4628      	mov	r0, r5
   13252:	920b      	str	r2, [sp, #44]	; 0x2c
   13254:	47b8      	blx	r7
   13256:	3001      	adds	r0, #1
   13258:	f43f ae9b 	beq.w	12f92 <_printf_float+0xb6>
   1325c:	f10b 0b01 	add.w	fp, fp, #1
   13260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13262:	e7b9      	b.n	131d8 <_printf_float+0x2fc>
   13264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   13268:	4631      	mov	r1, r6
   1326a:	4628      	mov	r0, r5
   1326c:	47b8      	blx	r7
   1326e:	3001      	adds	r0, #1
   13270:	d1bf      	bne.n	131f2 <_printf_float+0x316>
   13272:	e68e      	b.n	12f92 <_printf_float+0xb6>
   13274:	464b      	mov	r3, r9
   13276:	eb08 020a 	add.w	r2, r8, sl
   1327a:	4631      	mov	r1, r6
   1327c:	4628      	mov	r0, r5
   1327e:	47b8      	blx	r7
   13280:	3001      	adds	r0, #1
   13282:	d1c2      	bne.n	1320a <_printf_float+0x32e>
   13284:	e685      	b.n	12f92 <_printf_float+0xb6>
   13286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13288:	2a01      	cmp	r2, #1
   1328a:	dc01      	bgt.n	13290 <_printf_float+0x3b4>
   1328c:	07db      	lsls	r3, r3, #31
   1328e:	d537      	bpl.n	13300 <_printf_float+0x424>
   13290:	2301      	movs	r3, #1
   13292:	4642      	mov	r2, r8
   13294:	4631      	mov	r1, r6
   13296:	4628      	mov	r0, r5
   13298:	47b8      	blx	r7
   1329a:	3001      	adds	r0, #1
   1329c:	f43f ae79 	beq.w	12f92 <_printf_float+0xb6>
   132a0:	4631      	mov	r1, r6
   132a2:	4628      	mov	r0, r5
   132a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   132a8:	47b8      	blx	r7
   132aa:	3001      	adds	r0, #1
   132ac:	f43f ae71 	beq.w	12f92 <_printf_float+0xb6>
   132b0:	2200      	movs	r2, #0
   132b2:	2300      	movs	r3, #0
   132b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   132b8:	f7ed fb72 	bl	9a0 <__aeabi_dcmpeq>
   132bc:	b9d8      	cbnz	r0, 132f6 <_printf_float+0x41a>
   132be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   132c0:	f108 0201 	add.w	r2, r8, #1
   132c4:	3b01      	subs	r3, #1
   132c6:	4631      	mov	r1, r6
   132c8:	4628      	mov	r0, r5
   132ca:	47b8      	blx	r7
   132cc:	3001      	adds	r0, #1
   132ce:	d10e      	bne.n	132ee <_printf_float+0x412>
   132d0:	e65f      	b.n	12f92 <_printf_float+0xb6>
   132d2:	2301      	movs	r3, #1
   132d4:	464a      	mov	r2, r9
   132d6:	4631      	mov	r1, r6
   132d8:	4628      	mov	r0, r5
   132da:	47b8      	blx	r7
   132dc:	3001      	adds	r0, #1
   132de:	f43f ae58 	beq.w	12f92 <_printf_float+0xb6>
   132e2:	f108 0801 	add.w	r8, r8, #1
   132e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   132e8:	3b01      	subs	r3, #1
   132ea:	4543      	cmp	r3, r8
   132ec:	dcf1      	bgt.n	132d2 <_printf_float+0x3f6>
   132ee:	4653      	mov	r3, sl
   132f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   132f4:	e6e1      	b.n	130ba <_printf_float+0x1de>
   132f6:	f04f 0800 	mov.w	r8, #0
   132fa:	f104 091a 	add.w	r9, r4, #26
   132fe:	e7f2      	b.n	132e6 <_printf_float+0x40a>
   13300:	2301      	movs	r3, #1
   13302:	4642      	mov	r2, r8
   13304:	e7df      	b.n	132c6 <_printf_float+0x3ea>
   13306:	2301      	movs	r3, #1
   13308:	464a      	mov	r2, r9
   1330a:	4631      	mov	r1, r6
   1330c:	4628      	mov	r0, r5
   1330e:	47b8      	blx	r7
   13310:	3001      	adds	r0, #1
   13312:	f43f ae3e 	beq.w	12f92 <_printf_float+0xb6>
   13316:	f108 0801 	add.w	r8, r8, #1
   1331a:	68e3      	ldr	r3, [r4, #12]
   1331c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1331e:	1a5b      	subs	r3, r3, r1
   13320:	4543      	cmp	r3, r8
   13322:	dcf0      	bgt.n	13306 <_printf_float+0x42a>
   13324:	e6fe      	b.n	13124 <_printf_float+0x248>
   13326:	f04f 0800 	mov.w	r8, #0
   1332a:	f104 0919 	add.w	r9, r4, #25
   1332e:	e7f4      	b.n	1331a <_printf_float+0x43e>

00013330 <_printf_i>:
   13330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13334:	460c      	mov	r4, r1
   13336:	4691      	mov	r9, r2
   13338:	4680      	mov	r8, r0
   1333a:	469a      	mov	sl, r3
   1333c:	7e27      	ldrb	r7, [r4, #24]
   1333e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13342:	990c      	ldr	r1, [sp, #48]	; 0x30
   13344:	2f78      	cmp	r7, #120	; 0x78
   13346:	d807      	bhi.n	13358 <_printf_i+0x28>
   13348:	2f62      	cmp	r7, #98	; 0x62
   1334a:	d80a      	bhi.n	13362 <_printf_i+0x32>
   1334c:	2f00      	cmp	r7, #0
   1334e:	f000 80d8 	beq.w	13502 <_printf_i+0x1d2>
   13352:	2f58      	cmp	r7, #88	; 0x58
   13354:	f000 80a3 	beq.w	1349e <_printf_i+0x16e>
   13358:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1335c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   13360:	e03a      	b.n	133d8 <_printf_i+0xa8>
   13362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   13366:	2b15      	cmp	r3, #21
   13368:	d8f6      	bhi.n	13358 <_printf_i+0x28>
   1336a:	a001      	add	r0, pc, #4	; (adr r0, 13370 <_printf_i+0x40>)
   1336c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   13370:	000133c9 	.word	0x000133c9
   13374:	000133dd 	.word	0x000133dd
   13378:	00013359 	.word	0x00013359
   1337c:	00013359 	.word	0x00013359
   13380:	00013359 	.word	0x00013359
   13384:	00013359 	.word	0x00013359
   13388:	000133dd 	.word	0x000133dd
   1338c:	00013359 	.word	0x00013359
   13390:	00013359 	.word	0x00013359
   13394:	00013359 	.word	0x00013359
   13398:	00013359 	.word	0x00013359
   1339c:	000134e9 	.word	0x000134e9
   133a0:	0001340d 	.word	0x0001340d
   133a4:	000134cb 	.word	0x000134cb
   133a8:	00013359 	.word	0x00013359
   133ac:	00013359 	.word	0x00013359
   133b0:	0001350b 	.word	0x0001350b
   133b4:	00013359 	.word	0x00013359
   133b8:	0001340d 	.word	0x0001340d
   133bc:	00013359 	.word	0x00013359
   133c0:	00013359 	.word	0x00013359
   133c4:	000134d3 	.word	0x000134d3
   133c8:	680b      	ldr	r3, [r1, #0]
   133ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
   133ce:	1d1a      	adds	r2, r3, #4
   133d0:	681b      	ldr	r3, [r3, #0]
   133d2:	600a      	str	r2, [r1, #0]
   133d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   133d8:	2301      	movs	r3, #1
   133da:	e0a3      	b.n	13524 <_printf_i+0x1f4>
   133dc:	6825      	ldr	r5, [r4, #0]
   133de:	6808      	ldr	r0, [r1, #0]
   133e0:	062e      	lsls	r6, r5, #24
   133e2:	f100 0304 	add.w	r3, r0, #4
   133e6:	d50a      	bpl.n	133fe <_printf_i+0xce>
   133e8:	6805      	ldr	r5, [r0, #0]
   133ea:	600b      	str	r3, [r1, #0]
   133ec:	2d00      	cmp	r5, #0
   133ee:	da03      	bge.n	133f8 <_printf_i+0xc8>
   133f0:	232d      	movs	r3, #45	; 0x2d
   133f2:	426d      	negs	r5, r5
   133f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   133f8:	485e      	ldr	r0, [pc, #376]	; (13574 <_printf_i+0x244>)
   133fa:	230a      	movs	r3, #10
   133fc:	e019      	b.n	13432 <_printf_i+0x102>
   133fe:	f015 0f40 	tst.w	r5, #64	; 0x40
   13402:	6805      	ldr	r5, [r0, #0]
   13404:	600b      	str	r3, [r1, #0]
   13406:	bf18      	it	ne
   13408:	b22d      	sxthne	r5, r5
   1340a:	e7ef      	b.n	133ec <_printf_i+0xbc>
   1340c:	680b      	ldr	r3, [r1, #0]
   1340e:	6825      	ldr	r5, [r4, #0]
   13410:	1d18      	adds	r0, r3, #4
   13412:	6008      	str	r0, [r1, #0]
   13414:	0628      	lsls	r0, r5, #24
   13416:	d501      	bpl.n	1341c <_printf_i+0xec>
   13418:	681d      	ldr	r5, [r3, #0]
   1341a:	e002      	b.n	13422 <_printf_i+0xf2>
   1341c:	0669      	lsls	r1, r5, #25
   1341e:	d5fb      	bpl.n	13418 <_printf_i+0xe8>
   13420:	881d      	ldrh	r5, [r3, #0]
   13422:	2f6f      	cmp	r7, #111	; 0x6f
   13424:	4853      	ldr	r0, [pc, #332]	; (13574 <_printf_i+0x244>)
   13426:	bf0c      	ite	eq
   13428:	2308      	moveq	r3, #8
   1342a:	230a      	movne	r3, #10
   1342c:	2100      	movs	r1, #0
   1342e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   13432:	6866      	ldr	r6, [r4, #4]
   13434:	2e00      	cmp	r6, #0
   13436:	60a6      	str	r6, [r4, #8]
   13438:	bfa2      	ittt	ge
   1343a:	6821      	ldrge	r1, [r4, #0]
   1343c:	f021 0104 	bicge.w	r1, r1, #4
   13440:	6021      	strge	r1, [r4, #0]
   13442:	b90d      	cbnz	r5, 13448 <_printf_i+0x118>
   13444:	2e00      	cmp	r6, #0
   13446:	d04d      	beq.n	134e4 <_printf_i+0x1b4>
   13448:	4616      	mov	r6, r2
   1344a:	fbb5 f1f3 	udiv	r1, r5, r3
   1344e:	fb03 5711 	mls	r7, r3, r1, r5
   13452:	5dc7      	ldrb	r7, [r0, r7]
   13454:	f806 7d01 	strb.w	r7, [r6, #-1]!
   13458:	462f      	mov	r7, r5
   1345a:	460d      	mov	r5, r1
   1345c:	42bb      	cmp	r3, r7
   1345e:	d9f4      	bls.n	1344a <_printf_i+0x11a>
   13460:	2b08      	cmp	r3, #8
   13462:	d10b      	bne.n	1347c <_printf_i+0x14c>
   13464:	6823      	ldr	r3, [r4, #0]
   13466:	07df      	lsls	r7, r3, #31
   13468:	d508      	bpl.n	1347c <_printf_i+0x14c>
   1346a:	6923      	ldr	r3, [r4, #16]
   1346c:	6861      	ldr	r1, [r4, #4]
   1346e:	4299      	cmp	r1, r3
   13470:	bfde      	ittt	le
   13472:	2330      	movle	r3, #48	; 0x30
   13474:	f806 3c01 	strble.w	r3, [r6, #-1]
   13478:	f106 36ff 	addle.w	r6, r6, #4294967295
   1347c:	1b92      	subs	r2, r2, r6
   1347e:	6122      	str	r2, [r4, #16]
   13480:	464b      	mov	r3, r9
   13482:	aa03      	add	r2, sp, #12
   13484:	4621      	mov	r1, r4
   13486:	4640      	mov	r0, r8
   13488:	f8cd a000 	str.w	sl, [sp]
   1348c:	f005 fc0b 	bl	18ca6 <_printf_common>
   13490:	3001      	adds	r0, #1
   13492:	d14c      	bne.n	1352e <_printf_i+0x1fe>
   13494:	f04f 30ff 	mov.w	r0, #4294967295
   13498:	b004      	add	sp, #16
   1349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1349e:	4835      	ldr	r0, [pc, #212]	; (13574 <_printf_i+0x244>)
   134a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   134a4:	6823      	ldr	r3, [r4, #0]
   134a6:	680e      	ldr	r6, [r1, #0]
   134a8:	061f      	lsls	r7, r3, #24
   134aa:	f856 5b04 	ldr.w	r5, [r6], #4
   134ae:	600e      	str	r6, [r1, #0]
   134b0:	d514      	bpl.n	134dc <_printf_i+0x1ac>
   134b2:	07d9      	lsls	r1, r3, #31
   134b4:	bf44      	itt	mi
   134b6:	f043 0320 	orrmi.w	r3, r3, #32
   134ba:	6023      	strmi	r3, [r4, #0]
   134bc:	b91d      	cbnz	r5, 134c6 <_printf_i+0x196>
   134be:	6823      	ldr	r3, [r4, #0]
   134c0:	f023 0320 	bic.w	r3, r3, #32
   134c4:	6023      	str	r3, [r4, #0]
   134c6:	2310      	movs	r3, #16
   134c8:	e7b0      	b.n	1342c <_printf_i+0xfc>
   134ca:	6823      	ldr	r3, [r4, #0]
   134cc:	f043 0320 	orr.w	r3, r3, #32
   134d0:	6023      	str	r3, [r4, #0]
   134d2:	2378      	movs	r3, #120	; 0x78
   134d4:	4828      	ldr	r0, [pc, #160]	; (13578 <_printf_i+0x248>)
   134d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   134da:	e7e3      	b.n	134a4 <_printf_i+0x174>
   134dc:	065e      	lsls	r6, r3, #25
   134de:	bf48      	it	mi
   134e0:	b2ad      	uxthmi	r5, r5
   134e2:	e7e6      	b.n	134b2 <_printf_i+0x182>
   134e4:	4616      	mov	r6, r2
   134e6:	e7bb      	b.n	13460 <_printf_i+0x130>
   134e8:	680b      	ldr	r3, [r1, #0]
   134ea:	6826      	ldr	r6, [r4, #0]
   134ec:	1d1d      	adds	r5, r3, #4
   134ee:	6960      	ldr	r0, [r4, #20]
   134f0:	600d      	str	r5, [r1, #0]
   134f2:	0635      	lsls	r5, r6, #24
   134f4:	681b      	ldr	r3, [r3, #0]
   134f6:	d501      	bpl.n	134fc <_printf_i+0x1cc>
   134f8:	6018      	str	r0, [r3, #0]
   134fa:	e002      	b.n	13502 <_printf_i+0x1d2>
   134fc:	0671      	lsls	r1, r6, #25
   134fe:	d5fb      	bpl.n	134f8 <_printf_i+0x1c8>
   13500:	8018      	strh	r0, [r3, #0]
   13502:	2300      	movs	r3, #0
   13504:	4616      	mov	r6, r2
   13506:	6123      	str	r3, [r4, #16]
   13508:	e7ba      	b.n	13480 <_printf_i+0x150>
   1350a:	680b      	ldr	r3, [r1, #0]
   1350c:	1d1a      	adds	r2, r3, #4
   1350e:	600a      	str	r2, [r1, #0]
   13510:	2100      	movs	r1, #0
   13512:	681e      	ldr	r6, [r3, #0]
   13514:	6862      	ldr	r2, [r4, #4]
   13516:	4630      	mov	r0, r6
   13518:	f005 facf 	bl	18aba <memchr>
   1351c:	b108      	cbz	r0, 13522 <_printf_i+0x1f2>
   1351e:	1b80      	subs	r0, r0, r6
   13520:	6060      	str	r0, [r4, #4]
   13522:	6863      	ldr	r3, [r4, #4]
   13524:	6123      	str	r3, [r4, #16]
   13526:	2300      	movs	r3, #0
   13528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1352c:	e7a8      	b.n	13480 <_printf_i+0x150>
   1352e:	6923      	ldr	r3, [r4, #16]
   13530:	4632      	mov	r2, r6
   13532:	4649      	mov	r1, r9
   13534:	4640      	mov	r0, r8
   13536:	47d0      	blx	sl
   13538:	3001      	adds	r0, #1
   1353a:	d0ab      	beq.n	13494 <_printf_i+0x164>
   1353c:	6823      	ldr	r3, [r4, #0]
   1353e:	079b      	lsls	r3, r3, #30
   13540:	d413      	bmi.n	1356a <_printf_i+0x23a>
   13542:	68e0      	ldr	r0, [r4, #12]
   13544:	9b03      	ldr	r3, [sp, #12]
   13546:	4298      	cmp	r0, r3
   13548:	bfb8      	it	lt
   1354a:	4618      	movlt	r0, r3
   1354c:	e7a4      	b.n	13498 <_printf_i+0x168>
   1354e:	2301      	movs	r3, #1
   13550:	4632      	mov	r2, r6
   13552:	4649      	mov	r1, r9
   13554:	4640      	mov	r0, r8
   13556:	47d0      	blx	sl
   13558:	3001      	adds	r0, #1
   1355a:	d09b      	beq.n	13494 <_printf_i+0x164>
   1355c:	3501      	adds	r5, #1
   1355e:	68e3      	ldr	r3, [r4, #12]
   13560:	9903      	ldr	r1, [sp, #12]
   13562:	1a5b      	subs	r3, r3, r1
   13564:	42ab      	cmp	r3, r5
   13566:	dcf2      	bgt.n	1354e <_printf_i+0x21e>
   13568:	e7eb      	b.n	13542 <_printf_i+0x212>
   1356a:	2500      	movs	r5, #0
   1356c:	f104 0619 	add.w	r6, r4, #25
   13570:	e7f5      	b.n	1355e <_printf_i+0x22e>
   13572:	bf00      	nop
   13574:	0001d258 	.word	0x0001d258
   13578:	0001d269 	.word	0x0001d269

0001357c <_sbrk_r>:
   1357c:	b538      	push	{r3, r4, r5, lr}
   1357e:	2300      	movs	r3, #0
   13580:	4d05      	ldr	r5, [pc, #20]	; (13598 <_sbrk_r+0x1c>)
   13582:	4604      	mov	r4, r0
   13584:	4608      	mov	r0, r1
   13586:	602b      	str	r3, [r5, #0]
   13588:	f7f1 faf8 	bl	4b7c <_sbrk>
   1358c:	1c43      	adds	r3, r0, #1
   1358e:	d102      	bne.n	13596 <_sbrk_r+0x1a>
   13590:	682b      	ldr	r3, [r5, #0]
   13592:	b103      	cbz	r3, 13596 <_sbrk_r+0x1a>
   13594:	6023      	str	r3, [r4, #0]
   13596:	bd38      	pop	{r3, r4, r5, pc}
   13598:	20027528 	.word	0x20027528

0001359c <raise>:
   1359c:	4b02      	ldr	r3, [pc, #8]	; (135a8 <raise+0xc>)
   1359e:	4601      	mov	r1, r0
   135a0:	6818      	ldr	r0, [r3, #0]
   135a2:	f005 bbf0 	b.w	18d86 <_raise_r>
   135a6:	bf00      	nop
   135a8:	2001818c 	.word	0x2001818c

000135ac <_kill_r>:
   135ac:	b538      	push	{r3, r4, r5, lr}
   135ae:	2300      	movs	r3, #0
   135b0:	4d06      	ldr	r5, [pc, #24]	; (135cc <_kill_r+0x20>)
   135b2:	4604      	mov	r4, r0
   135b4:	4608      	mov	r0, r1
   135b6:	4611      	mov	r1, r2
   135b8:	602b      	str	r3, [r5, #0]
   135ba:	f001 fa0f 	bl	149dc <_kill>
   135be:	1c43      	adds	r3, r0, #1
   135c0:	d102      	bne.n	135c8 <_kill_r+0x1c>
   135c2:	682b      	ldr	r3, [r5, #0]
   135c4:	b103      	cbz	r3, 135c8 <_kill_r+0x1c>
   135c6:	6023      	str	r3, [r4, #0]
   135c8:	bd38      	pop	{r3, r4, r5, pc}
   135ca:	bf00      	nop
   135cc:	20027528 	.word	0x20027528

000135d0 <strtok>:
   135d0:	4b13      	ldr	r3, [pc, #76]	; (13620 <strtok+0x50>)
   135d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135d6:	681f      	ldr	r7, [r3, #0]
   135d8:	4605      	mov	r5, r0
   135da:	460e      	mov	r6, r1
   135dc:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   135de:	b9b4      	cbnz	r4, 1360e <strtok+0x3e>
   135e0:	2050      	movs	r0, #80	; 0x50
   135e2:	f7ff fa93 	bl	12b0c <malloc>
   135e6:	65b8      	str	r0, [r7, #88]	; 0x58
   135e8:	6184      	str	r4, [r0, #24]
   135ea:	7704      	strb	r4, [r0, #28]
   135ec:	6244      	str	r4, [r0, #36]	; 0x24
   135ee:	e9c0 4400 	strd	r4, r4, [r0]
   135f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   135f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
   135fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   135fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   13602:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   13606:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   1360a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   1360e:	6dba      	ldr	r2, [r7, #88]	; 0x58
   13610:	4631      	mov	r1, r6
   13612:	4628      	mov	r0, r5
   13614:	2301      	movs	r3, #1
   13616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1361a:	f005 bc10 	b.w	18e3e <__strtok_r>
   1361e:	bf00      	nop
   13620:	2001818c 	.word	0x2001818c

00013624 <_strtol_l.isra.0>:
   13624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13628:	468c      	mov	ip, r1
   1362a:	4686      	mov	lr, r0
   1362c:	4e38      	ldr	r6, [pc, #224]	; (13710 <_strtol_l.isra.0+0xec>)
   1362e:	4660      	mov	r0, ip
   13630:	f81c 4b01 	ldrb.w	r4, [ip], #1
   13634:	5da5      	ldrb	r5, [r4, r6]
   13636:	f015 0508 	ands.w	r5, r5, #8
   1363a:	d1f8      	bne.n	1362e <_strtol_l.isra.0+0xa>
   1363c:	2c2d      	cmp	r4, #45	; 0x2d
   1363e:	d133      	bne.n	136a8 <_strtol_l.isra.0+0x84>
   13640:	f89c 4000 	ldrb.w	r4, [ip]
   13644:	f04f 0801 	mov.w	r8, #1
   13648:	f100 0c02 	add.w	ip, r0, #2
   1364c:	2b00      	cmp	r3, #0
   1364e:	d05b      	beq.n	13708 <_strtol_l.isra.0+0xe4>
   13650:	2b10      	cmp	r3, #16
   13652:	d10c      	bne.n	1366e <_strtol_l.isra.0+0x4a>
   13654:	2c30      	cmp	r4, #48	; 0x30
   13656:	d10a      	bne.n	1366e <_strtol_l.isra.0+0x4a>
   13658:	f89c 0000 	ldrb.w	r0, [ip]
   1365c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   13660:	2858      	cmp	r0, #88	; 0x58
   13662:	d14c      	bne.n	136fe <_strtol_l.isra.0+0xda>
   13664:	f89c 4001 	ldrb.w	r4, [ip, #1]
   13668:	2310      	movs	r3, #16
   1366a:	f10c 0c02 	add.w	ip, ip, #2
   1366e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   13672:	2600      	movs	r6, #0
   13674:	3f01      	subs	r7, #1
   13676:	4630      	mov	r0, r6
   13678:	fbb7 f9f3 	udiv	r9, r7, r3
   1367c:	fb03 7a19 	mls	sl, r3, r9, r7
   13680:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   13684:	2d09      	cmp	r5, #9
   13686:	d817      	bhi.n	136b8 <_strtol_l.isra.0+0x94>
   13688:	462c      	mov	r4, r5
   1368a:	42a3      	cmp	r3, r4
   1368c:	dd23      	ble.n	136d6 <_strtol_l.isra.0+0xb2>
   1368e:	1c75      	adds	r5, r6, #1
   13690:	d007      	beq.n	136a2 <_strtol_l.isra.0+0x7e>
   13692:	4581      	cmp	r9, r0
   13694:	d31c      	bcc.n	136d0 <_strtol_l.isra.0+0xac>
   13696:	d101      	bne.n	1369c <_strtol_l.isra.0+0x78>
   13698:	45a2      	cmp	sl, r4
   1369a:	db19      	blt.n	136d0 <_strtol_l.isra.0+0xac>
   1369c:	fb00 4003 	mla	r0, r0, r3, r4
   136a0:	2601      	movs	r6, #1
   136a2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   136a6:	e7eb      	b.n	13680 <_strtol_l.isra.0+0x5c>
   136a8:	2c2b      	cmp	r4, #43	; 0x2b
   136aa:	46a8      	mov	r8, r5
   136ac:	bf04      	itt	eq
   136ae:	f89c 4000 	ldrbeq.w	r4, [ip]
   136b2:	f100 0c02 	addeq.w	ip, r0, #2
   136b6:	e7c9      	b.n	1364c <_strtol_l.isra.0+0x28>
   136b8:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   136bc:	2d19      	cmp	r5, #25
   136be:	d801      	bhi.n	136c4 <_strtol_l.isra.0+0xa0>
   136c0:	3c37      	subs	r4, #55	; 0x37
   136c2:	e7e2      	b.n	1368a <_strtol_l.isra.0+0x66>
   136c4:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   136c8:	2d19      	cmp	r5, #25
   136ca:	d804      	bhi.n	136d6 <_strtol_l.isra.0+0xb2>
   136cc:	3c57      	subs	r4, #87	; 0x57
   136ce:	e7dc      	b.n	1368a <_strtol_l.isra.0+0x66>
   136d0:	f04f 36ff 	mov.w	r6, #4294967295
   136d4:	e7e5      	b.n	136a2 <_strtol_l.isra.0+0x7e>
   136d6:	1c73      	adds	r3, r6, #1
   136d8:	d106      	bne.n	136e8 <_strtol_l.isra.0+0xc4>
   136da:	2322      	movs	r3, #34	; 0x22
   136dc:	4638      	mov	r0, r7
   136de:	f8ce 3000 	str.w	r3, [lr]
   136e2:	b942      	cbnz	r2, 136f6 <_strtol_l.isra.0+0xd2>
   136e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   136e8:	f1b8 0f00 	cmp.w	r8, #0
   136ec:	d000      	beq.n	136f0 <_strtol_l.isra.0+0xcc>
   136ee:	4240      	negs	r0, r0
   136f0:	2a00      	cmp	r2, #0
   136f2:	d0f7      	beq.n	136e4 <_strtol_l.isra.0+0xc0>
   136f4:	b10e      	cbz	r6, 136fa <_strtol_l.isra.0+0xd6>
   136f6:	f10c 31ff 	add.w	r1, ip, #4294967295
   136fa:	6011      	str	r1, [r2, #0]
   136fc:	e7f2      	b.n	136e4 <_strtol_l.isra.0+0xc0>
   136fe:	2430      	movs	r4, #48	; 0x30
   13700:	2b00      	cmp	r3, #0
   13702:	d1b4      	bne.n	1366e <_strtol_l.isra.0+0x4a>
   13704:	2308      	movs	r3, #8
   13706:	e7b2      	b.n	1366e <_strtol_l.isra.0+0x4a>
   13708:	2c30      	cmp	r4, #48	; 0x30
   1370a:	d0a5      	beq.n	13658 <_strtol_l.isra.0+0x34>
   1370c:	230a      	movs	r3, #10
   1370e:	e7ae      	b.n	1366e <_strtol_l.isra.0+0x4a>
   13710:	0001d135 	.word	0x0001d135

00013714 <strtol>:
   13714:	4613      	mov	r3, r2
   13716:	460a      	mov	r2, r1
   13718:	4601      	mov	r1, r0
   1371a:	4802      	ldr	r0, [pc, #8]	; (13724 <strtol+0x10>)
   1371c:	6800      	ldr	r0, [r0, #0]
   1371e:	f7ff bf81 	b.w	13624 <_strtol_l.isra.0>
   13722:	bf00      	nop
   13724:	2001818c 	.word	0x2001818c

00013728 <viprintf>:
   13728:	4b09      	ldr	r3, [pc, #36]	; (13750 <viprintf+0x28>)
   1372a:	b570      	push	{r4, r5, r6, lr}
   1372c:	681c      	ldr	r4, [r3, #0]
   1372e:	4605      	mov	r5, r0
   13730:	460e      	mov	r6, r1
   13732:	b124      	cbz	r4, 1373e <viprintf+0x16>
   13734:	69a3      	ldr	r3, [r4, #24]
   13736:	b913      	cbnz	r3, 1373e <viprintf+0x16>
   13738:	4620      	mov	r0, r4
   1373a:	f000 f9cd 	bl	13ad8 <__sinit>
   1373e:	4633      	mov	r3, r6
   13740:	462a      	mov	r2, r5
   13742:	68a1      	ldr	r1, [r4, #8]
   13744:	4620      	mov	r0, r4
   13746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1374a:	f7ff ba97 	b.w	12c7c <_vfiprintf_r>
   1374e:	bf00      	nop
   13750:	2001818c 	.word	0x2001818c

00013754 <__swbuf_r>:
   13754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13756:	460e      	mov	r6, r1
   13758:	4614      	mov	r4, r2
   1375a:	4605      	mov	r5, r0
   1375c:	b118      	cbz	r0, 13766 <__swbuf_r+0x12>
   1375e:	6983      	ldr	r3, [r0, #24]
   13760:	b90b      	cbnz	r3, 13766 <__swbuf_r+0x12>
   13762:	f000 f9b9 	bl	13ad8 <__sinit>
   13766:	4b21      	ldr	r3, [pc, #132]	; (137ec <__swbuf_r+0x98>)
   13768:	429c      	cmp	r4, r3
   1376a:	d12b      	bne.n	137c4 <__swbuf_r+0x70>
   1376c:	686c      	ldr	r4, [r5, #4]
   1376e:	69a3      	ldr	r3, [r4, #24]
   13770:	60a3      	str	r3, [r4, #8]
   13772:	89a3      	ldrh	r3, [r4, #12]
   13774:	071a      	lsls	r2, r3, #28
   13776:	d52f      	bpl.n	137d8 <__swbuf_r+0x84>
   13778:	6923      	ldr	r3, [r4, #16]
   1377a:	b36b      	cbz	r3, 137d8 <__swbuf_r+0x84>
   1377c:	6923      	ldr	r3, [r4, #16]
   1377e:	b2f6      	uxtb	r6, r6
   13780:	6820      	ldr	r0, [r4, #0]
   13782:	4637      	mov	r7, r6
   13784:	1ac0      	subs	r0, r0, r3
   13786:	6963      	ldr	r3, [r4, #20]
   13788:	4283      	cmp	r3, r0
   1378a:	dc04      	bgt.n	13796 <__swbuf_r+0x42>
   1378c:	4621      	mov	r1, r4
   1378e:	4628      	mov	r0, r5
   13790:	f000 f924 	bl	139dc <_fflush_r>
   13794:	bb30      	cbnz	r0, 137e4 <__swbuf_r+0x90>
   13796:	68a3      	ldr	r3, [r4, #8]
   13798:	3001      	adds	r0, #1
   1379a:	3b01      	subs	r3, #1
   1379c:	60a3      	str	r3, [r4, #8]
   1379e:	6823      	ldr	r3, [r4, #0]
   137a0:	1c5a      	adds	r2, r3, #1
   137a2:	6022      	str	r2, [r4, #0]
   137a4:	701e      	strb	r6, [r3, #0]
   137a6:	6963      	ldr	r3, [r4, #20]
   137a8:	4283      	cmp	r3, r0
   137aa:	d004      	beq.n	137b6 <__swbuf_r+0x62>
   137ac:	89a3      	ldrh	r3, [r4, #12]
   137ae:	07db      	lsls	r3, r3, #31
   137b0:	d506      	bpl.n	137c0 <__swbuf_r+0x6c>
   137b2:	2e0a      	cmp	r6, #10
   137b4:	d104      	bne.n	137c0 <__swbuf_r+0x6c>
   137b6:	4621      	mov	r1, r4
   137b8:	4628      	mov	r0, r5
   137ba:	f000 f90f 	bl	139dc <_fflush_r>
   137be:	b988      	cbnz	r0, 137e4 <__swbuf_r+0x90>
   137c0:	4638      	mov	r0, r7
   137c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137c4:	4b0a      	ldr	r3, [pc, #40]	; (137f0 <__swbuf_r+0x9c>)
   137c6:	429c      	cmp	r4, r3
   137c8:	d101      	bne.n	137ce <__swbuf_r+0x7a>
   137ca:	68ac      	ldr	r4, [r5, #8]
   137cc:	e7cf      	b.n	1376e <__swbuf_r+0x1a>
   137ce:	4b09      	ldr	r3, [pc, #36]	; (137f4 <__swbuf_r+0xa0>)
   137d0:	429c      	cmp	r4, r3
   137d2:	bf08      	it	eq
   137d4:	68ec      	ldreq	r4, [r5, #12]
   137d6:	e7ca      	b.n	1376e <__swbuf_r+0x1a>
   137d8:	4621      	mov	r1, r4
   137da:	4628      	mov	r0, r5
   137dc:	f000 f80c 	bl	137f8 <__swsetup_r>
   137e0:	2800      	cmp	r0, #0
   137e2:	d0cb      	beq.n	1377c <__swbuf_r+0x28>
   137e4:	f04f 37ff 	mov.w	r7, #4294967295
   137e8:	e7ea      	b.n	137c0 <__swbuf_r+0x6c>
   137ea:	bf00      	nop
   137ec:	0001d0ac 	.word	0x0001d0ac
   137f0:	0001d0cc 	.word	0x0001d0cc
   137f4:	0001d08c 	.word	0x0001d08c

000137f8 <__swsetup_r>:
   137f8:	4b32      	ldr	r3, [pc, #200]	; (138c4 <__swsetup_r+0xcc>)
   137fa:	b570      	push	{r4, r5, r6, lr}
   137fc:	681d      	ldr	r5, [r3, #0]
   137fe:	4606      	mov	r6, r0
   13800:	460c      	mov	r4, r1
   13802:	b125      	cbz	r5, 1380e <__swsetup_r+0x16>
   13804:	69ab      	ldr	r3, [r5, #24]
   13806:	b913      	cbnz	r3, 1380e <__swsetup_r+0x16>
   13808:	4628      	mov	r0, r5
   1380a:	f000 f965 	bl	13ad8 <__sinit>
   1380e:	4b2e      	ldr	r3, [pc, #184]	; (138c8 <__swsetup_r+0xd0>)
   13810:	429c      	cmp	r4, r3
   13812:	d10f      	bne.n	13834 <__swsetup_r+0x3c>
   13814:	686c      	ldr	r4, [r5, #4]
   13816:	89a3      	ldrh	r3, [r4, #12]
   13818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1381c:	0719      	lsls	r1, r3, #28
   1381e:	d42c      	bmi.n	1387a <__swsetup_r+0x82>
   13820:	06dd      	lsls	r5, r3, #27
   13822:	d411      	bmi.n	13848 <__swsetup_r+0x50>
   13824:	2309      	movs	r3, #9
   13826:	6033      	str	r3, [r6, #0]
   13828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   1382c:	f04f 30ff 	mov.w	r0, #4294967295
   13830:	81a3      	strh	r3, [r4, #12]
   13832:	e03e      	b.n	138b2 <__swsetup_r+0xba>
   13834:	4b25      	ldr	r3, [pc, #148]	; (138cc <__swsetup_r+0xd4>)
   13836:	429c      	cmp	r4, r3
   13838:	d101      	bne.n	1383e <__swsetup_r+0x46>
   1383a:	68ac      	ldr	r4, [r5, #8]
   1383c:	e7eb      	b.n	13816 <__swsetup_r+0x1e>
   1383e:	4b24      	ldr	r3, [pc, #144]	; (138d0 <__swsetup_r+0xd8>)
   13840:	429c      	cmp	r4, r3
   13842:	bf08      	it	eq
   13844:	68ec      	ldreq	r4, [r5, #12]
   13846:	e7e6      	b.n	13816 <__swsetup_r+0x1e>
   13848:	0758      	lsls	r0, r3, #29
   1384a:	d512      	bpl.n	13872 <__swsetup_r+0x7a>
   1384c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1384e:	b141      	cbz	r1, 13862 <__swsetup_r+0x6a>
   13850:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13854:	4299      	cmp	r1, r3
   13856:	d002      	beq.n	1385e <__swsetup_r+0x66>
   13858:	4630      	mov	r0, r6
   1385a:	f7ff f967 	bl	12b2c <_free_r>
   1385e:	2300      	movs	r3, #0
   13860:	6363      	str	r3, [r4, #52]	; 0x34
   13862:	89a3      	ldrh	r3, [r4, #12]
   13864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13868:	81a3      	strh	r3, [r4, #12]
   1386a:	2300      	movs	r3, #0
   1386c:	6063      	str	r3, [r4, #4]
   1386e:	6923      	ldr	r3, [r4, #16]
   13870:	6023      	str	r3, [r4, #0]
   13872:	89a3      	ldrh	r3, [r4, #12]
   13874:	f043 0308 	orr.w	r3, r3, #8
   13878:	81a3      	strh	r3, [r4, #12]
   1387a:	6923      	ldr	r3, [r4, #16]
   1387c:	b94b      	cbnz	r3, 13892 <__swsetup_r+0x9a>
   1387e:	89a3      	ldrh	r3, [r4, #12]
   13880:	f403 7320 	and.w	r3, r3, #640	; 0x280
   13884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13888:	d003      	beq.n	13892 <__swsetup_r+0x9a>
   1388a:	4621      	mov	r1, r4
   1388c:	4630      	mov	r0, r6
   1388e:	f000 f9a5 	bl	13bdc <__smakebuf_r>
   13892:	89a0      	ldrh	r0, [r4, #12]
   13894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13898:	f010 0301 	ands.w	r3, r0, #1
   1389c:	d00a      	beq.n	138b4 <__swsetup_r+0xbc>
   1389e:	2300      	movs	r3, #0
   138a0:	60a3      	str	r3, [r4, #8]
   138a2:	6963      	ldr	r3, [r4, #20]
   138a4:	425b      	negs	r3, r3
   138a6:	61a3      	str	r3, [r4, #24]
   138a8:	6923      	ldr	r3, [r4, #16]
   138aa:	b943      	cbnz	r3, 138be <__swsetup_r+0xc6>
   138ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   138b0:	d1ba      	bne.n	13828 <__swsetup_r+0x30>
   138b2:	bd70      	pop	{r4, r5, r6, pc}
   138b4:	0781      	lsls	r1, r0, #30
   138b6:	bf58      	it	pl
   138b8:	6963      	ldrpl	r3, [r4, #20]
   138ba:	60a3      	str	r3, [r4, #8]
   138bc:	e7f4      	b.n	138a8 <__swsetup_r+0xb0>
   138be:	2000      	movs	r0, #0
   138c0:	e7f7      	b.n	138b2 <__swsetup_r+0xba>
   138c2:	bf00      	nop
   138c4:	2001818c 	.word	0x2001818c
   138c8:	0001d0ac 	.word	0x0001d0ac
   138cc:	0001d0cc 	.word	0x0001d0cc
   138d0:	0001d08c 	.word	0x0001d08c

000138d4 <__sflush_r>:
   138d4:	898a      	ldrh	r2, [r1, #12]
   138d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138da:	4605      	mov	r5, r0
   138dc:	0710      	lsls	r0, r2, #28
   138de:	460c      	mov	r4, r1
   138e0:	d458      	bmi.n	13994 <__sflush_r+0xc0>
   138e2:	684b      	ldr	r3, [r1, #4]
   138e4:	2b00      	cmp	r3, #0
   138e6:	dc05      	bgt.n	138f4 <__sflush_r+0x20>
   138e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   138ea:	2b00      	cmp	r3, #0
   138ec:	dc02      	bgt.n	138f4 <__sflush_r+0x20>
   138ee:	2000      	movs	r0, #0
   138f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   138f6:	2e00      	cmp	r6, #0
   138f8:	d0f9      	beq.n	138ee <__sflush_r+0x1a>
   138fa:	2300      	movs	r3, #0
   138fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   13900:	682f      	ldr	r7, [r5, #0]
   13902:	602b      	str	r3, [r5, #0]
   13904:	d032      	beq.n	1396c <__sflush_r+0x98>
   13906:	6d60      	ldr	r0, [r4, #84]	; 0x54
   13908:	89a3      	ldrh	r3, [r4, #12]
   1390a:	075a      	lsls	r2, r3, #29
   1390c:	d505      	bpl.n	1391a <__sflush_r+0x46>
   1390e:	6863      	ldr	r3, [r4, #4]
   13910:	1ac0      	subs	r0, r0, r3
   13912:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13914:	b10b      	cbz	r3, 1391a <__sflush_r+0x46>
   13916:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13918:	1ac0      	subs	r0, r0, r3
   1391a:	2300      	movs	r3, #0
   1391c:	4602      	mov	r2, r0
   1391e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13920:	4628      	mov	r0, r5
   13922:	6a21      	ldr	r1, [r4, #32]
   13924:	47b0      	blx	r6
   13926:	1c43      	adds	r3, r0, #1
   13928:	89a3      	ldrh	r3, [r4, #12]
   1392a:	d106      	bne.n	1393a <__sflush_r+0x66>
   1392c:	6829      	ldr	r1, [r5, #0]
   1392e:	291d      	cmp	r1, #29
   13930:	d82c      	bhi.n	1398c <__sflush_r+0xb8>
   13932:	4a29      	ldr	r2, [pc, #164]	; (139d8 <__sflush_r+0x104>)
   13934:	40ca      	lsrs	r2, r1
   13936:	07d6      	lsls	r6, r2, #31
   13938:	d528      	bpl.n	1398c <__sflush_r+0xb8>
   1393a:	2200      	movs	r2, #0
   1393c:	04d9      	lsls	r1, r3, #19
   1393e:	6062      	str	r2, [r4, #4]
   13940:	6922      	ldr	r2, [r4, #16]
   13942:	6022      	str	r2, [r4, #0]
   13944:	d504      	bpl.n	13950 <__sflush_r+0x7c>
   13946:	1c42      	adds	r2, r0, #1
   13948:	d101      	bne.n	1394e <__sflush_r+0x7a>
   1394a:	682b      	ldr	r3, [r5, #0]
   1394c:	b903      	cbnz	r3, 13950 <__sflush_r+0x7c>
   1394e:	6560      	str	r0, [r4, #84]	; 0x54
   13950:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13952:	602f      	str	r7, [r5, #0]
   13954:	2900      	cmp	r1, #0
   13956:	d0ca      	beq.n	138ee <__sflush_r+0x1a>
   13958:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1395c:	4299      	cmp	r1, r3
   1395e:	d002      	beq.n	13966 <__sflush_r+0x92>
   13960:	4628      	mov	r0, r5
   13962:	f7ff f8e3 	bl	12b2c <_free_r>
   13966:	2000      	movs	r0, #0
   13968:	6360      	str	r0, [r4, #52]	; 0x34
   1396a:	e7c1      	b.n	138f0 <__sflush_r+0x1c>
   1396c:	6a21      	ldr	r1, [r4, #32]
   1396e:	2301      	movs	r3, #1
   13970:	4628      	mov	r0, r5
   13972:	47b0      	blx	r6
   13974:	1c41      	adds	r1, r0, #1
   13976:	d1c7      	bne.n	13908 <__sflush_r+0x34>
   13978:	682b      	ldr	r3, [r5, #0]
   1397a:	2b00      	cmp	r3, #0
   1397c:	d0c4      	beq.n	13908 <__sflush_r+0x34>
   1397e:	2b1d      	cmp	r3, #29
   13980:	d001      	beq.n	13986 <__sflush_r+0xb2>
   13982:	2b16      	cmp	r3, #22
   13984:	d101      	bne.n	1398a <__sflush_r+0xb6>
   13986:	602f      	str	r7, [r5, #0]
   13988:	e7b1      	b.n	138ee <__sflush_r+0x1a>
   1398a:	89a3      	ldrh	r3, [r4, #12]
   1398c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13990:	81a3      	strh	r3, [r4, #12]
   13992:	e7ad      	b.n	138f0 <__sflush_r+0x1c>
   13994:	690f      	ldr	r7, [r1, #16]
   13996:	2f00      	cmp	r7, #0
   13998:	d0a9      	beq.n	138ee <__sflush_r+0x1a>
   1399a:	0793      	lsls	r3, r2, #30
   1399c:	680e      	ldr	r6, [r1, #0]
   1399e:	600f      	str	r7, [r1, #0]
   139a0:	bf0c      	ite	eq
   139a2:	694b      	ldreq	r3, [r1, #20]
   139a4:	2300      	movne	r3, #0
   139a6:	eba6 0807 	sub.w	r8, r6, r7
   139aa:	608b      	str	r3, [r1, #8]
   139ac:	f1b8 0f00 	cmp.w	r8, #0
   139b0:	dd9d      	ble.n	138ee <__sflush_r+0x1a>
   139b2:	4643      	mov	r3, r8
   139b4:	463a      	mov	r2, r7
   139b6:	6a21      	ldr	r1, [r4, #32]
   139b8:	4628      	mov	r0, r5
   139ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   139bc:	47b0      	blx	r6
   139be:	2800      	cmp	r0, #0
   139c0:	dc06      	bgt.n	139d0 <__sflush_r+0xfc>
   139c2:	89a3      	ldrh	r3, [r4, #12]
   139c4:	f04f 30ff 	mov.w	r0, #4294967295
   139c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   139cc:	81a3      	strh	r3, [r4, #12]
   139ce:	e78f      	b.n	138f0 <__sflush_r+0x1c>
   139d0:	4407      	add	r7, r0
   139d2:	eba8 0800 	sub.w	r8, r8, r0
   139d6:	e7e9      	b.n	139ac <__sflush_r+0xd8>
   139d8:	20400001 	.word	0x20400001

000139dc <_fflush_r>:
   139dc:	b538      	push	{r3, r4, r5, lr}
   139de:	690b      	ldr	r3, [r1, #16]
   139e0:	4605      	mov	r5, r0
   139e2:	460c      	mov	r4, r1
   139e4:	b913      	cbnz	r3, 139ec <_fflush_r+0x10>
   139e6:	2500      	movs	r5, #0
   139e8:	4628      	mov	r0, r5
   139ea:	bd38      	pop	{r3, r4, r5, pc}
   139ec:	b118      	cbz	r0, 139f6 <_fflush_r+0x1a>
   139ee:	6983      	ldr	r3, [r0, #24]
   139f0:	b90b      	cbnz	r3, 139f6 <_fflush_r+0x1a>
   139f2:	f000 f871 	bl	13ad8 <__sinit>
   139f6:	4b14      	ldr	r3, [pc, #80]	; (13a48 <_fflush_r+0x6c>)
   139f8:	429c      	cmp	r4, r3
   139fa:	d11b      	bne.n	13a34 <_fflush_r+0x58>
   139fc:	686c      	ldr	r4, [r5, #4]
   139fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a02:	2b00      	cmp	r3, #0
   13a04:	d0ef      	beq.n	139e6 <_fflush_r+0xa>
   13a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13a08:	07d0      	lsls	r0, r2, #31
   13a0a:	d404      	bmi.n	13a16 <_fflush_r+0x3a>
   13a0c:	0599      	lsls	r1, r3, #22
   13a0e:	d402      	bmi.n	13a16 <_fflush_r+0x3a>
   13a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a12:	f000 fff5 	bl	14a00 <__retarget_lock_acquire_recursive>
   13a16:	4628      	mov	r0, r5
   13a18:	4621      	mov	r1, r4
   13a1a:	f7ff ff5b 	bl	138d4 <__sflush_r>
   13a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13a20:	4605      	mov	r5, r0
   13a22:	07da      	lsls	r2, r3, #31
   13a24:	d4e0      	bmi.n	139e8 <_fflush_r+0xc>
   13a26:	89a3      	ldrh	r3, [r4, #12]
   13a28:	059b      	lsls	r3, r3, #22
   13a2a:	d4dd      	bmi.n	139e8 <_fflush_r+0xc>
   13a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a2e:	f000 ffef 	bl	14a10 <__retarget_lock_release_recursive>
   13a32:	e7d9      	b.n	139e8 <_fflush_r+0xc>
   13a34:	4b05      	ldr	r3, [pc, #20]	; (13a4c <_fflush_r+0x70>)
   13a36:	429c      	cmp	r4, r3
   13a38:	d101      	bne.n	13a3e <_fflush_r+0x62>
   13a3a:	68ac      	ldr	r4, [r5, #8]
   13a3c:	e7df      	b.n	139fe <_fflush_r+0x22>
   13a3e:	4b04      	ldr	r3, [pc, #16]	; (13a50 <_fflush_r+0x74>)
   13a40:	429c      	cmp	r4, r3
   13a42:	bf08      	it	eq
   13a44:	68ec      	ldreq	r4, [r5, #12]
   13a46:	e7da      	b.n	139fe <_fflush_r+0x22>
   13a48:	0001d0ac 	.word	0x0001d0ac
   13a4c:	0001d0cc 	.word	0x0001d0cc
   13a50:	0001d08c 	.word	0x0001d08c

00013a54 <std>:
   13a54:	2300      	movs	r3, #0
   13a56:	b510      	push	{r4, lr}
   13a58:	4604      	mov	r4, r0
   13a5a:	6083      	str	r3, [r0, #8]
   13a5c:	8181      	strh	r1, [r0, #12]
   13a5e:	4619      	mov	r1, r3
   13a60:	6643      	str	r3, [r0, #100]	; 0x64
   13a62:	81c2      	strh	r2, [r0, #14]
   13a64:	2208      	movs	r2, #8
   13a66:	6183      	str	r3, [r0, #24]
   13a68:	e9c0 3300 	strd	r3, r3, [r0]
   13a6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   13a70:	305c      	adds	r0, #92	; 0x5c
   13a72:	f005 f84b 	bl	18b0c <memset>
   13a76:	4b05      	ldr	r3, [pc, #20]	; (13a8c <std+0x38>)
   13a78:	6224      	str	r4, [r4, #32]
   13a7a:	6263      	str	r3, [r4, #36]	; 0x24
   13a7c:	4b04      	ldr	r3, [pc, #16]	; (13a90 <std+0x3c>)
   13a7e:	62a3      	str	r3, [r4, #40]	; 0x28
   13a80:	4b04      	ldr	r3, [pc, #16]	; (13a94 <std+0x40>)
   13a82:	62e3      	str	r3, [r4, #44]	; 0x2c
   13a84:	4b04      	ldr	r3, [pc, #16]	; (13a98 <std+0x44>)
   13a86:	6323      	str	r3, [r4, #48]	; 0x30
   13a88:	bd10      	pop	{r4, pc}
   13a8a:	bf00      	nop
   13a8c:	000195ff 	.word	0x000195ff
   13a90:	00019621 	.word	0x00019621
   13a94:	00019659 	.word	0x00019659
   13a98:	0001967d 	.word	0x0001967d

00013a9c <_cleanup_r>:
   13a9c:	4901      	ldr	r1, [pc, #4]	; (13aa4 <_cleanup_r+0x8>)
   13a9e:	f005 ba9b 	b.w	18fd8 <_fwalk_reent>
   13aa2:	bf00      	nop
   13aa4:	000139dd 	.word	0x000139dd

00013aa8 <__sfp_lock_acquire>:
   13aa8:	4801      	ldr	r0, [pc, #4]	; (13ab0 <__sfp_lock_acquire+0x8>)
   13aaa:	f000 bfa9 	b.w	14a00 <__retarget_lock_acquire_recursive>
   13aae:	bf00      	nop
   13ab0:	20018388 	.word	0x20018388

00013ab4 <__sfp_lock_release>:
   13ab4:	4801      	ldr	r0, [pc, #4]	; (13abc <__sfp_lock_release+0x8>)
   13ab6:	f000 bfab 	b.w	14a10 <__retarget_lock_release_recursive>
   13aba:	bf00      	nop
   13abc:	20018388 	.word	0x20018388

00013ac0 <__sinit_lock_acquire>:
   13ac0:	4801      	ldr	r0, [pc, #4]	; (13ac8 <__sinit_lock_acquire+0x8>)
   13ac2:	f000 bf9d 	b.w	14a00 <__retarget_lock_acquire_recursive>
   13ac6:	bf00      	nop
   13ac8:	2001839c 	.word	0x2001839c

00013acc <__sinit_lock_release>:
   13acc:	4801      	ldr	r0, [pc, #4]	; (13ad4 <__sinit_lock_release+0x8>)
   13ace:	f000 bf9f 	b.w	14a10 <__retarget_lock_release_recursive>
   13ad2:	bf00      	nop
   13ad4:	2001839c 	.word	0x2001839c

00013ad8 <__sinit>:
   13ad8:	b510      	push	{r4, lr}
   13ada:	4604      	mov	r4, r0
   13adc:	f7ff fff0 	bl	13ac0 <__sinit_lock_acquire>
   13ae0:	69a3      	ldr	r3, [r4, #24]
   13ae2:	b11b      	cbz	r3, 13aec <__sinit+0x14>
   13ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ae8:	f7ff bff0 	b.w	13acc <__sinit_lock_release>
   13aec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   13af0:	6523      	str	r3, [r4, #80]	; 0x50
   13af2:	4620      	mov	r0, r4
   13af4:	4b12      	ldr	r3, [pc, #72]	; (13b40 <__sinit+0x68>)
   13af6:	4a13      	ldr	r2, [pc, #76]	; (13b44 <__sinit+0x6c>)
   13af8:	681b      	ldr	r3, [r3, #0]
   13afa:	62a2      	str	r2, [r4, #40]	; 0x28
   13afc:	42a3      	cmp	r3, r4
   13afe:	bf04      	itt	eq
   13b00:	2301      	moveq	r3, #1
   13b02:	61a3      	streq	r3, [r4, #24]
   13b04:	f000 f820 	bl	13b48 <__sfp>
   13b08:	6060      	str	r0, [r4, #4]
   13b0a:	4620      	mov	r0, r4
   13b0c:	f000 f81c 	bl	13b48 <__sfp>
   13b10:	60a0      	str	r0, [r4, #8]
   13b12:	4620      	mov	r0, r4
   13b14:	f000 f818 	bl	13b48 <__sfp>
   13b18:	2200      	movs	r2, #0
   13b1a:	2104      	movs	r1, #4
   13b1c:	60e0      	str	r0, [r4, #12]
   13b1e:	6860      	ldr	r0, [r4, #4]
   13b20:	f7ff ff98 	bl	13a54 <std>
   13b24:	2201      	movs	r2, #1
   13b26:	2109      	movs	r1, #9
   13b28:	68a0      	ldr	r0, [r4, #8]
   13b2a:	f7ff ff93 	bl	13a54 <std>
   13b2e:	2202      	movs	r2, #2
   13b30:	2112      	movs	r1, #18
   13b32:	68e0      	ldr	r0, [r4, #12]
   13b34:	f7ff ff8e 	bl	13a54 <std>
   13b38:	2301      	movs	r3, #1
   13b3a:	61a3      	str	r3, [r4, #24]
   13b3c:	e7d2      	b.n	13ae4 <__sinit+0xc>
   13b3e:	bf00      	nop
   13b40:	0001d088 	.word	0x0001d088
   13b44:	00013a9d 	.word	0x00013a9d

00013b48 <__sfp>:
   13b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b4a:	4607      	mov	r7, r0
   13b4c:	f7ff ffac 	bl	13aa8 <__sfp_lock_acquire>
   13b50:	4b1e      	ldr	r3, [pc, #120]	; (13bcc <__sfp+0x84>)
   13b52:	681e      	ldr	r6, [r3, #0]
   13b54:	69b3      	ldr	r3, [r6, #24]
   13b56:	b913      	cbnz	r3, 13b5e <__sfp+0x16>
   13b58:	4630      	mov	r0, r6
   13b5a:	f7ff ffbd 	bl	13ad8 <__sinit>
   13b5e:	3648      	adds	r6, #72	; 0x48
   13b60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   13b64:	3b01      	subs	r3, #1
   13b66:	d503      	bpl.n	13b70 <__sfp+0x28>
   13b68:	6833      	ldr	r3, [r6, #0]
   13b6a:	b30b      	cbz	r3, 13bb0 <__sfp+0x68>
   13b6c:	6836      	ldr	r6, [r6, #0]
   13b6e:	e7f7      	b.n	13b60 <__sfp+0x18>
   13b70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   13b74:	b9d5      	cbnz	r5, 13bac <__sfp+0x64>
   13b76:	4b16      	ldr	r3, [pc, #88]	; (13bd0 <__sfp+0x88>)
   13b78:	f104 0058 	add.w	r0, r4, #88	; 0x58
   13b7c:	6665      	str	r5, [r4, #100]	; 0x64
   13b7e:	60e3      	str	r3, [r4, #12]
   13b80:	f000 ff35 	bl	149ee <__retarget_lock_init_recursive>
   13b84:	f7ff ff96 	bl	13ab4 <__sfp_lock_release>
   13b88:	2208      	movs	r2, #8
   13b8a:	4629      	mov	r1, r5
   13b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   13b90:	6025      	str	r5, [r4, #0]
   13b92:	61a5      	str	r5, [r4, #24]
   13b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
   13b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
   13b9c:	f004 ffb6 	bl	18b0c <memset>
   13ba0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   13ba4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   13ba8:	4620      	mov	r0, r4
   13baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13bac:	3468      	adds	r4, #104	; 0x68
   13bae:	e7d9      	b.n	13b64 <__sfp+0x1c>
   13bb0:	2104      	movs	r1, #4
   13bb2:	4638      	mov	r0, r7
   13bb4:	f005 f9fa 	bl	18fac <__sfmoreglue>
   13bb8:	4604      	mov	r4, r0
   13bba:	6030      	str	r0, [r6, #0]
   13bbc:	2800      	cmp	r0, #0
   13bbe:	d1d5      	bne.n	13b6c <__sfp+0x24>
   13bc0:	f7ff ff78 	bl	13ab4 <__sfp_lock_release>
   13bc4:	230c      	movs	r3, #12
   13bc6:	603b      	str	r3, [r7, #0]
   13bc8:	e7ee      	b.n	13ba8 <__sfp+0x60>
   13bca:	bf00      	nop
   13bcc:	0001d088 	.word	0x0001d088
   13bd0:	ffff0001 	.word	0xffff0001

00013bd4 <_localeconv_r>:
   13bd4:	4800      	ldr	r0, [pc, #0]	; (13bd8 <_localeconv_r+0x4>)
   13bd6:	4770      	bx	lr
   13bd8:	200182e0 	.word	0x200182e0

00013bdc <__smakebuf_r>:
   13bdc:	898b      	ldrh	r3, [r1, #12]
   13bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13be0:	079d      	lsls	r5, r3, #30
   13be2:	4606      	mov	r6, r0
   13be4:	460c      	mov	r4, r1
   13be6:	d507      	bpl.n	13bf8 <__smakebuf_r+0x1c>
   13be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
   13bec:	6023      	str	r3, [r4, #0]
   13bee:	6123      	str	r3, [r4, #16]
   13bf0:	2301      	movs	r3, #1
   13bf2:	6163      	str	r3, [r4, #20]
   13bf4:	b002      	add	sp, #8
   13bf6:	bd70      	pop	{r4, r5, r6, pc}
   13bf8:	ab01      	add	r3, sp, #4
   13bfa:	466a      	mov	r2, sp
   13bfc:	f005 fa0b 	bl	19016 <__swhatbuf_r>
   13c00:	9900      	ldr	r1, [sp, #0]
   13c02:	4605      	mov	r5, r0
   13c04:	4630      	mov	r0, r6
   13c06:	f7fe ffdf 	bl	12bc8 <_malloc_r>
   13c0a:	b948      	cbnz	r0, 13c20 <__smakebuf_r+0x44>
   13c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c10:	059a      	lsls	r2, r3, #22
   13c12:	d4ef      	bmi.n	13bf4 <__smakebuf_r+0x18>
   13c14:	f023 0303 	bic.w	r3, r3, #3
   13c18:	f043 0302 	orr.w	r3, r3, #2
   13c1c:	81a3      	strh	r3, [r4, #12]
   13c1e:	e7e3      	b.n	13be8 <__smakebuf_r+0xc>
   13c20:	4b0d      	ldr	r3, [pc, #52]	; (13c58 <__smakebuf_r+0x7c>)
   13c22:	62b3      	str	r3, [r6, #40]	; 0x28
   13c24:	89a3      	ldrh	r3, [r4, #12]
   13c26:	6020      	str	r0, [r4, #0]
   13c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13c2c:	6120      	str	r0, [r4, #16]
   13c2e:	81a3      	strh	r3, [r4, #12]
   13c30:	9b00      	ldr	r3, [sp, #0]
   13c32:	6163      	str	r3, [r4, #20]
   13c34:	9b01      	ldr	r3, [sp, #4]
   13c36:	b15b      	cbz	r3, 13c50 <__smakebuf_r+0x74>
   13c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13c3c:	4630      	mov	r0, r6
   13c3e:	f000 f89b 	bl	13d78 <_isatty_r>
   13c42:	b128      	cbz	r0, 13c50 <__smakebuf_r+0x74>
   13c44:	89a3      	ldrh	r3, [r4, #12]
   13c46:	f023 0303 	bic.w	r3, r3, #3
   13c4a:	f043 0301 	orr.w	r3, r3, #1
   13c4e:	81a3      	strh	r3, [r4, #12]
   13c50:	89a0      	ldrh	r0, [r4, #12]
   13c52:	4305      	orrs	r5, r0
   13c54:	81a5      	strh	r5, [r4, #12]
   13c56:	e7cd      	b.n	13bf4 <__smakebuf_r+0x18>
   13c58:	00013a9d 	.word	0x00013a9d

00013c5c <__malloc_lock>:
   13c5c:	4801      	ldr	r0, [pc, #4]	; (13c64 <__malloc_lock+0x8>)
   13c5e:	f000 becf 	b.w	14a00 <__retarget_lock_acquire_recursive>
   13c62:	bf00      	nop
   13c64:	20018374 	.word	0x20018374

00013c68 <__malloc_unlock>:
   13c68:	4801      	ldr	r0, [pc, #4]	; (13c70 <__malloc_unlock+0x8>)
   13c6a:	f000 bed1 	b.w	14a10 <__retarget_lock_release_recursive>
   13c6e:	bf00      	nop
   13c70:	20018374 	.word	0x20018374

00013c74 <__pow5mult>:
   13c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c78:	4615      	mov	r5, r2
   13c7a:	f012 0203 	ands.w	r2, r2, #3
   13c7e:	4606      	mov	r6, r0
   13c80:	460f      	mov	r7, r1
   13c82:	d007      	beq.n	13c94 <__pow5mult+0x20>
   13c84:	3a01      	subs	r2, #1
   13c86:	4c21      	ldr	r4, [pc, #132]	; (13d0c <__pow5mult+0x98>)
   13c88:	2300      	movs	r3, #0
   13c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   13c8e:	f005 fa31 	bl	190f4 <__multadd>
   13c92:	4607      	mov	r7, r0
   13c94:	10ad      	asrs	r5, r5, #2
   13c96:	d035      	beq.n	13d04 <__pow5mult+0x90>
   13c98:	6a74      	ldr	r4, [r6, #36]	; 0x24
   13c9a:	b93c      	cbnz	r4, 13cac <__pow5mult+0x38>
   13c9c:	2010      	movs	r0, #16
   13c9e:	f7fe ff35 	bl	12b0c <malloc>
   13ca2:	6270      	str	r0, [r6, #36]	; 0x24
   13ca4:	6004      	str	r4, [r0, #0]
   13ca6:	60c4      	str	r4, [r0, #12]
   13ca8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   13cac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   13cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   13cb4:	b94c      	cbnz	r4, 13cca <__pow5mult+0x56>
   13cb6:	f240 2171 	movw	r1, #625	; 0x271
   13cba:	4630      	mov	r0, r6
   13cbc:	f005 faa7 	bl	1920e <__i2b>
   13cc0:	2300      	movs	r3, #0
   13cc2:	4604      	mov	r4, r0
   13cc4:	f8c8 0008 	str.w	r0, [r8, #8]
   13cc8:	6003      	str	r3, [r0, #0]
   13cca:	f04f 0900 	mov.w	r9, #0
   13cce:	07eb      	lsls	r3, r5, #31
   13cd0:	d50a      	bpl.n	13ce8 <__pow5mult+0x74>
   13cd2:	4639      	mov	r1, r7
   13cd4:	4622      	mov	r2, r4
   13cd6:	4630      	mov	r0, r6
   13cd8:	f005 faa2 	bl	19220 <__multiply>
   13cdc:	4680      	mov	r8, r0
   13cde:	4639      	mov	r1, r7
   13ce0:	4630      	mov	r0, r6
   13ce2:	4647      	mov	r7, r8
   13ce4:	f005 f9ef 	bl	190c6 <_Bfree>
   13ce8:	106d      	asrs	r5, r5, #1
   13cea:	d00b      	beq.n	13d04 <__pow5mult+0x90>
   13cec:	6820      	ldr	r0, [r4, #0]
   13cee:	b938      	cbnz	r0, 13d00 <__pow5mult+0x8c>
   13cf0:	4622      	mov	r2, r4
   13cf2:	4621      	mov	r1, r4
   13cf4:	4630      	mov	r0, r6
   13cf6:	f005 fa93 	bl	19220 <__multiply>
   13cfa:	6020      	str	r0, [r4, #0]
   13cfc:	f8c0 9000 	str.w	r9, [r0]
   13d00:	4604      	mov	r4, r0
   13d02:	e7e4      	b.n	13cce <__pow5mult+0x5a>
   13d04:	4638      	mov	r0, r7
   13d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13d0a:	bf00      	nop
   13d0c:	0001d0ec 	.word	0x0001d0ec

00013d10 <_write_r>:
   13d10:	b538      	push	{r3, r4, r5, lr}
   13d12:	4604      	mov	r4, r0
   13d14:	4d06      	ldr	r5, [pc, #24]	; (13d30 <_write_r+0x20>)
   13d16:	4608      	mov	r0, r1
   13d18:	4611      	mov	r1, r2
   13d1a:	2200      	movs	r2, #0
   13d1c:	602a      	str	r2, [r5, #0]
   13d1e:	461a      	mov	r2, r3
   13d20:	f000 fe4c 	bl	149bc <_write>
   13d24:	1c43      	adds	r3, r0, #1
   13d26:	d102      	bne.n	13d2e <_write_r+0x1e>
   13d28:	682b      	ldr	r3, [r5, #0]
   13d2a:	b103      	cbz	r3, 13d2e <_write_r+0x1e>
   13d2c:	6023      	str	r3, [r4, #0]
   13d2e:	bd38      	pop	{r3, r4, r5, pc}
   13d30:	20027528 	.word	0x20027528

00013d34 <_close_r>:
   13d34:	b538      	push	{r3, r4, r5, lr}
   13d36:	2300      	movs	r3, #0
   13d38:	4d05      	ldr	r5, [pc, #20]	; (13d50 <_close_r+0x1c>)
   13d3a:	4604      	mov	r4, r0
   13d3c:	4608      	mov	r0, r1
   13d3e:	602b      	str	r3, [r5, #0]
   13d40:	f000 fe42 	bl	149c8 <_close>
   13d44:	1c43      	adds	r3, r0, #1
   13d46:	d102      	bne.n	13d4e <_close_r+0x1a>
   13d48:	682b      	ldr	r3, [r5, #0]
   13d4a:	b103      	cbz	r3, 13d4e <_close_r+0x1a>
   13d4c:	6023      	str	r3, [r4, #0]
   13d4e:	bd38      	pop	{r3, r4, r5, pc}
   13d50:	20027528 	.word	0x20027528

00013d54 <_fstat_r>:
   13d54:	b538      	push	{r3, r4, r5, lr}
   13d56:	2300      	movs	r3, #0
   13d58:	4d06      	ldr	r5, [pc, #24]	; (13d74 <_fstat_r+0x20>)
   13d5a:	4604      	mov	r4, r0
   13d5c:	4608      	mov	r0, r1
   13d5e:	4611      	mov	r1, r2
   13d60:	602b      	str	r3, [r5, #0]
   13d62:	f000 fe3f 	bl	149e4 <_fstat>
   13d66:	1c43      	adds	r3, r0, #1
   13d68:	d102      	bne.n	13d70 <_fstat_r+0x1c>
   13d6a:	682b      	ldr	r3, [r5, #0]
   13d6c:	b103      	cbz	r3, 13d70 <_fstat_r+0x1c>
   13d6e:	6023      	str	r3, [r4, #0]
   13d70:	bd38      	pop	{r3, r4, r5, pc}
   13d72:	bf00      	nop
   13d74:	20027528 	.word	0x20027528

00013d78 <_isatty_r>:
   13d78:	b538      	push	{r3, r4, r5, lr}
   13d7a:	2300      	movs	r3, #0
   13d7c:	4d05      	ldr	r5, [pc, #20]	; (13d94 <_isatty_r+0x1c>)
   13d7e:	4604      	mov	r4, r0
   13d80:	4608      	mov	r0, r1
   13d82:	602b      	str	r3, [r5, #0]
   13d84:	f000 fe25 	bl	149d2 <_isatty>
   13d88:	1c43      	adds	r3, r0, #1
   13d8a:	d102      	bne.n	13d92 <_isatty_r+0x1a>
   13d8c:	682b      	ldr	r3, [r5, #0]
   13d8e:	b103      	cbz	r3, 13d92 <_isatty_r+0x1a>
   13d90:	6023      	str	r3, [r4, #0]
   13d92:	bd38      	pop	{r3, r4, r5, pc}
   13d94:	20027528 	.word	0x20027528

00013d98 <_lseek_r>:
   13d98:	b538      	push	{r3, r4, r5, lr}
   13d9a:	4604      	mov	r4, r0
   13d9c:	4d06      	ldr	r5, [pc, #24]	; (13db8 <_lseek_r+0x20>)
   13d9e:	4608      	mov	r0, r1
   13da0:	4611      	mov	r1, r2
   13da2:	2200      	movs	r2, #0
   13da4:	602a      	str	r2, [r5, #0]
   13da6:	461a      	mov	r2, r3
   13da8:	f000 fe11 	bl	149ce <_lseek>
   13dac:	1c43      	adds	r3, r0, #1
   13dae:	d102      	bne.n	13db6 <_lseek_r+0x1e>
   13db0:	682b      	ldr	r3, [r5, #0]
   13db2:	b103      	cbz	r3, 13db6 <_lseek_r+0x1e>
   13db4:	6023      	str	r3, [r4, #0]
   13db6:	bd38      	pop	{r3, r4, r5, pc}
   13db8:	20027528 	.word	0x20027528

00013dbc <_read_r>:
   13dbc:	b538      	push	{r3, r4, r5, lr}
   13dbe:	4604      	mov	r4, r0
   13dc0:	4d06      	ldr	r5, [pc, #24]	; (13ddc <_read_r+0x20>)
   13dc2:	4608      	mov	r0, r1
   13dc4:	4611      	mov	r1, r2
   13dc6:	2200      	movs	r2, #0
   13dc8:	602a      	str	r2, [r5, #0]
   13dca:	461a      	mov	r2, r3
   13dcc:	f000 fdf0 	bl	149b0 <_read>
   13dd0:	1c43      	adds	r3, r0, #1
   13dd2:	d102      	bne.n	13dda <_read_r+0x1e>
   13dd4:	682b      	ldr	r3, [r5, #0]
   13dd6:	b103      	cbz	r3, 13dda <_read_r+0x1e>
   13dd8:	6023      	str	r3, [r4, #0]
   13dda:	bd38      	pop	{r3, r4, r5, pc}
   13ddc:	20027528 	.word	0x20027528

00013de0 <_Z9ee_hexdecPc>:
long ee_hexdec(char *hex) {
   13de0:	4601      	mov	r1, r0
  long ret = 0;
   13de2:	2000      	movs	r0, #0
   13de4:	e007      	b.n	13df6 <_Z9ee_hexdecPc+0x16>
    } else if (c >= 'a' && c <= 'f') {
   13de6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   13dea:	b2d2      	uxtb	r2, r2
   13dec:	2a05      	cmp	r2, #5
   13dee:	d80e      	bhi.n	13e0e <_Z9ee_hexdecPc+0x2e>
      dec = c - 'a' + 10;
   13df0:	3b57      	subs	r3, #87	; 0x57
    ret = (ret << 4) + dec;
   13df2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
   13df6:	780b      	ldrb	r3, [r1, #0]
   13df8:	b193      	cbz	r3, 13e20 <_Z9ee_hexdecPc+0x40>
   13dfa:	2800      	cmp	r0, #0
   13dfc:	db10      	blt.n	13e20 <_Z9ee_hexdecPc+0x40>
    c = *hex++;
   13dfe:	3101      	adds	r1, #1
    if (c >= '0' && c <= '9') {
   13e00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13e04:	b2d2      	uxtb	r2, r2
   13e06:	2a09      	cmp	r2, #9
   13e08:	d8ed      	bhi.n	13de6 <_Z9ee_hexdecPc+0x6>
      dec = c - '0';
   13e0a:	3b30      	subs	r3, #48	; 0x30
   13e0c:	e7f1      	b.n	13df2 <_Z9ee_hexdecPc+0x12>
    } else if (c >= 'A' && c <= 'F') {
   13e0e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   13e12:	b2d2      	uxtb	r2, r2
   13e14:	2a05      	cmp	r2, #5
   13e16:	d801      	bhi.n	13e1c <_Z9ee_hexdecPc+0x3c>
      dec = c - 'A' + 10;
   13e18:	3b37      	subs	r3, #55	; 0x37
   13e1a:	e7ea      	b.n	13df2 <_Z9ee_hexdecPc+0x12>
      return -1;
   13e1c:	f04f 30ff 	mov.w	r0, #4294967295
}
   13e20:	4770      	bx	lr

00013e22 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
   13e22:	2200      	movs	r2, #0
   13e24:	6002      	str	r2, [r0, #0]
   13e26:	6042      	str	r2, [r0, #4]
   13e28:	6082      	str	r2, [r0, #8]
  }
   13e2a:	4770      	bx	lr

00013e2c <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
   13e2c:	2001      	movs	r0, #1
   13e2e:	4770      	bx	lr

00013e30 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
   13e30:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
   13e32:	6803      	ldr	r3, [r0, #0]
   13e34:	699b      	ldr	r3, [r3, #24]
   13e36:	4798      	blx	r3
  }
   13e38:	bd08      	pop	{r3, pc}

00013e3a <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
   13e3a:	b508      	push	{r3, lr}
    return FindOp(op);
   13e3c:	6803      	ldr	r3, [r0, #0]
   13e3e:	69db      	ldr	r3, [r3, #28]
   13e40:	4798      	blx	r3
  }
   13e42:	bd08      	pop	{r3, pc}

00013e44 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   13e44:	2920      	cmp	r1, #32
   13e46:	d00e      	beq.n	13e66 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x22>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   13e48:	b410      	push	{r4}
   13e4a:	4604      	mov	r4, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13e4c:	2300      	movs	r3, #0
   13e4e:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   13e52:	429a      	cmp	r2, r3
   13e54:	d909      	bls.n	13e6a <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x26>
      const TfLiteRegistration& registration = registrations_[i];
   13e56:	eb04 1243 	add.w	r2, r4, r3, lsl #5
   13e5a:	1d10      	adds	r0, r2, #4
      if (registration.builtin_code == op) {
   13e5c:	6992      	ldr	r2, [r2, #24]
   13e5e:	428a      	cmp	r2, r1
   13e60:	d004      	beq.n	13e6c <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13e62:	3301      	adds	r3, #1
   13e64:	e7f3      	b.n	13e4e <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0xa>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   13e66:	2000      	movs	r0, #0
  }
   13e68:	4770      	bx	lr
    return nullptr;
   13e6a:	2000      	movs	r0, #0
  }
   13e6c:	bc10      	pop	{r4}
   13e6e:	4770      	bx	lr

00013e70 <_ZN6tflite22MicroMutableOpResolverILj7EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
   13e70:	4770      	bx	lr

00013e72 <_ZN6tflite16MicroModelRunnerIaaLi7EED1Ev>:
class MicroModelRunner {
   13e72:	b510      	push	{r4, lr}
   13e74:	4604      	mov	r4, r0
   13e76:	300c      	adds	r0, #12
   13e78:	f001 fc84 	bl	15784 <_ZN6tflite16MicroInterpreterD1Ev>
   13e7c:	4620      	mov	r0, r4
   13e7e:	bd10      	pop	{r4, pc}

00013e80 <_ZN6tflite22MicroMutableOpResolverILj7EED0Ev>:
   13e80:	b510      	push	{r4, lr}
   13e82:	4604      	mov	r4, r0
   13e84:	f004 fdf7 	bl	18a76 <_ZdlPv>
   13e88:	4620      	mov	r0, r4
   13e8a:	bd10      	pop	{r4, pc}

00013e8c <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   13e8c:	b510      	push	{r4, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   13e8e:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   13e92:	2c07      	cmp	r4, #7
   13e94:	d801      	bhi.n	13e9a <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0xe>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   13e96:	2300      	movs	r3, #0
   13e98:	e002      	b.n	13ea0 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   13e9a:	f004 fe03 	bl	18aa4 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   13e9e:	3301      	adds	r3, #1
   13ea0:	429c      	cmp	r4, r3
   13ea2:	d908      	bls.n	13eb6 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   13ea4:	18c2      	adds	r2, r0, r3
   13ea6:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
   13eaa:	428a      	cmp	r2, r1
   13eac:	d1f7      	bne.n	13e9e <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x12>
   13eae:	333c      	adds	r3, #60	; 0x3c
   13eb0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   13eb4:	e000      	b.n	13eb8 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    return nullptr;
   13eb6:	2000      	movs	r0, #0
  }
   13eb8:	bd10      	pop	{r4, pc}

00013eba <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   13eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ebc:	4605      	mov	r5, r0
   13ebe:	460f      	mov	r7, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13ec0:	2400      	movs	r4, #0
   13ec2:	e000      	b.n	13ec6 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xc>
   13ec4:	3401      	adds	r4, #1
   13ec6:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   13eca:	42a3      	cmp	r3, r4
   13ecc:	d90e      	bls.n	13eec <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0x32>
      const TfLiteRegistration& registration = registrations_[i];
   13ece:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   13ed2:	1d1e      	adds	r6, r3, #4
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   13ed4:	699b      	ldr	r3, [r3, #24]
   13ed6:	2b20      	cmp	r3, #32
   13ed8:	d1f4      	bne.n	13ec4 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
   13eda:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   13ede:	4639      	mov	r1, r7
   13ee0:	69d8      	ldr	r0, [r3, #28]
   13ee2:	f7ed faed 	bl	14c0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   13ee6:	2800      	cmp	r0, #0
   13ee8:	d1ec      	bne.n	13ec4 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xa>
   13eea:	e000      	b.n	13eee <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0x34>
    return nullptr;
   13eec:	2600      	movs	r6, #0
  }
   13eee:	4630      	mov	r0, r6
   13ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013ef2 <_Z6th_prev>:
void th_pre() {}
   13ef2:	4770      	bx	lr

00013ef4 <_Z7th_postv>:
void th_post() {}
   13ef4:	4770      	bx	lr

00013ef6 <_Z16th_command_readyPVc>:
void th_command_ready(char volatile *p_command) {
   13ef6:	b508      	push	{r3, lr}
  ee_serial_command_parser_callback((char *)p_command);
   13ef8:	f7ee fd40 	bl	297c <_Z33ee_serial_command_parser_callbackPc>
}
   13efc:	bd08      	pop	{r3, pc}

00013efe <_Z10th_strnlenPKcj>:
size_t th_strnlen(const char *str, size_t maxlen) {
   13efe:	b508      	push	{r3, lr}
  return strnlen(str, maxlen);
   13f00:	f004 ff90 	bl	18e24 <strnlen>
}
   13f04:	bd08      	pop	{r3, pc}

00013f06 <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
   13f06:	b508      	push	{r3, lr}
   13f08:	f7ff fc0e 	bl	13728 <viprintf>
   13f0c:	bd08      	pop	{r3, pc}

00013f0e <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
   13f0e:	b40f      	push	{r0, r1, r2, r3}
   13f10:	b500      	push	{lr}
   13f12:	b083      	sub	sp, #12
   13f14:	a904      	add	r1, sp, #16
   13f16:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
   13f1a:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
   13f1c:	f7ff fff3 	bl	13f06 <_Z10th_vprintfPKcSt9__va_list>
}
   13f20:	b003      	add	sp, #12
   13f22:	f85d eb04 	ldr.w	lr, [sp], #4
   13f26:	b004      	add	sp, #16
   13f28:	4770      	bx	lr

00013f2a <_Z24th_serialport_initializev>:
}
   13f2a:	4770      	bx	lr

00013f2c <main>:
// Enables 128MHz for the nRF53
#define MHz128 1
//  Improves clock precision.
#define PREC 1

int main(int argc, char *argv[]) {
   13f2c:	b508      	push	{r3, lr}
console_init();
   13f2e:	f7ef ff85 	bl	3e3c <console_init>

if(MHz128) {
nrfx_clock_divider_set(NRF_CLOCK_DOMAIN_HFCLK, NRF_CLOCK_HFCLK_DIV_1);
   13f32:	2100      	movs	r1, #0
   13f34:	2001      	movs	r0, #1
   13f36:	f7f2 f975 	bl	6224 <nrfx_clock_divider_set>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13f3a:	2001      	movs	r0, #1
   13f3c:	f7f2 f83c 	bl	5fb8 <nrfx_clock_start>
}
   13f40:	e003      	b.n	13f4a <main+0x1e>
                return true;
   13f42:	2301      	movs	r3, #1
   13f44:	e00d      	b.n	13f62 <main+0x36>

NRFX_STATIC_INLINE bool nrfx_clock_hfclk_is_running(void)
{
    nrf_clock_hfclk_t clk_src;
    bool ret = nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src);
    return (ret && (clk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY));
   13f46:	2300      	movs	r3, #0
}
if(PREC) {
nrfx_clock_hfclk_start();
while (!nrfx_clock_hfclk_is_running()) { }
   13f48:	b98b      	cbnz	r3, 13f6e <main+0x42>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13f4a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13f4e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
   13f52:	f002 0201 	and.w	r2, r2, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13f56:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   13f5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13f5e:	d1f0      	bne.n	13f42 <main+0x16>
    return false;
   13f60:	2300      	movs	r3, #0
   13f62:	2b00      	cmp	r3, #0
   13f64:	d0ef      	beq.n	13f46 <main+0x1a>
   13f66:	2a00      	cmp	r2, #0
   13f68:	d1ee      	bne.n	13f48 <main+0x1c>
   13f6a:	2300      	movs	r3, #0
   13f6c:	e7ec      	b.n	13f48 <main+0x1c>
}


ee_benchmark_initialize();
   13f6e:	f7ee fb47 	bl	2600 <_Z23ee_benchmark_initializev>
    c = (int) cmd_buf[i];
    ee_serial_callback(c);
  }
  }
#else
  console_init();
   13f72:	f7ef ff63 	bl	3e3c <console_init>

  while (1) {
    int c;

    c = console_getchar();
   13f76:	f7ef ff4f 	bl	3e18 <console_getchar>
    if (c < 0) {
   13f7a:	2800      	cmp	r0, #0
   13f7c:	dbfb      	blt.n	13f76 <main+0x4a>
      continue;
    }
    // printk("c: %d", c);
    ee_serial_callback(c);
   13f7e:	b2c0      	uxtb	r0, r0
   13f80:	f7ee fb1e 	bl	25c0 <_Z18ee_serial_callbackc>
   13f84:	e7f7      	b.n	13f76 <main+0x4a>

00013f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>:
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
  #else
    return EndianSwap(t);
  #endif
}
   13f86:	4770      	bx	lr

00013f88 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
   13f88:	b510      	push	{r4, lr}
   13f8a:	4604      	mov	r4, r0
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   13f8c:	6800      	ldr	r0, [r0, #0]
   13f8e:	f7ff fffa 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   13f92:	4420      	add	r0, r4
   13f94:	bd10      	pop	{r4, pc}

00013f96 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
   13f96:	b508      	push	{r3, lr}
  return GetMutableRoot<T>(const_cast<void *>(buf));
   13f98:	f7ff fff6 	bl	13f88 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
}
   13f9c:	bd08      	pop	{r3, pc}

00013f9e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   13f9e:	4602      	mov	r2, r0
   13fa0:	b158      	cbz	r0, 13fba <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   13fa2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   13fa4:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   13fa8:	2b01      	cmp	r3, #1
   13faa:	d003      	beq.n	13fb4 <sys_notify_validate+0x16>
   13fac:	2b03      	cmp	r3, #3
   13fae:	d107      	bne.n	13fc0 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   13fb0:	6803      	ldr	r3, [r0, #0]
   13fb2:	b143      	cbz	r3, 13fc6 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   13fb4:	2000      	movs	r0, #0
   13fb6:	6090      	str	r0, [r2, #8]
   13fb8:	4770      	bx	lr
		return -EINVAL;
   13fba:	f06f 0015 	mvn.w	r0, #21
   13fbe:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   13fc0:	f06f 0015 	mvn.w	r0, #21
   13fc4:	4770      	bx	lr
			rv = -EINVAL;
   13fc6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   13fca:	4770      	bx	lr

00013fcc <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   13fcc:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   13fce:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   13fd0:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   13fd4:	6081      	str	r1, [r0, #8]
	switch (method) {
   13fd6:	2a03      	cmp	r2, #3
   13fd8:	d103      	bne.n	13fe2 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   13fda:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   13fdc:	2200      	movs	r2, #0
   13fde:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   13fe0:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   13fe2:	2000      	movs	r0, #0
   13fe4:	e7fa      	b.n	13fdc <sys_notify_finalize+0x10>

00013fe6 <arch_printk_char_out>:
}
   13fe6:	2000      	movs	r0, #0
   13fe8:	4770      	bx	lr

00013fea <str_out>:
{
   13fea:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   13fec:	680c      	ldr	r4, [r1, #0]
   13fee:	b154      	cbz	r4, 14006 <str_out+0x1c>
   13ff0:	688a      	ldr	r2, [r1, #8]
   13ff2:	684b      	ldr	r3, [r1, #4]
   13ff4:	429a      	cmp	r2, r3
   13ff6:	da06      	bge.n	14006 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   13ff8:	3b01      	subs	r3, #1
   13ffa:	429a      	cmp	r2, r3
   13ffc:	d008      	beq.n	14010 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   13ffe:	1c53      	adds	r3, r2, #1
   14000:	608b      	str	r3, [r1, #8]
   14002:	54a0      	strb	r0, [r4, r2]
   14004:	e002      	b.n	1400c <str_out+0x22>
		ctx->count++;
   14006:	688b      	ldr	r3, [r1, #8]
   14008:	3301      	adds	r3, #1
   1400a:	608b      	str	r3, [r1, #8]
}
   1400c:	bc10      	pop	{r4}
   1400e:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   14010:	1c53      	adds	r3, r2, #1
   14012:	608b      	str	r3, [r1, #8]
   14014:	2300      	movs	r3, #0
   14016:	54a3      	strb	r3, [r4, r2]
   14018:	e7f8      	b.n	1400c <str_out+0x22>

0001401a <printk>:
{
   1401a:	b40f      	push	{r0, r1, r2, r3}
   1401c:	b500      	push	{lr}
   1401e:	b083      	sub	sp, #12
   14020:	a904      	add	r1, sp, #16
   14022:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   14026:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   14028:	f7ef f816 	bl	3058 <vprintk>
}
   1402c:	b003      	add	sp, #12
   1402e:	f85d eb04 	ldr.w	lr, [sp], #4
   14032:	b004      	add	sp, #16
   14034:	4770      	bx	lr

00014036 <snprintk>:
{
   14036:	b40c      	push	{r2, r3}
   14038:	b500      	push	{lr}
   1403a:	b083      	sub	sp, #12
   1403c:	ab04      	add	r3, sp, #16
   1403e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   14042:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   14044:	f7ef f818 	bl	3078 <vsnprintk>
}
   14048:	b003      	add	sp, #12
   1404a:	f85d eb04 	ldr.w	lr, [sp], #4
   1404e:	b002      	add	sp, #8
   14050:	4770      	bx	lr

00014052 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   14052:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14056:	8b81      	ldrh	r1, [r0, #28]
   14058:	f021 0107 	bic.w	r1, r1, #7
   1405c:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1405e:	8381      	strh	r1, [r0, #28]
}
   14060:	4770      	bx	lr

00014062 <notify_monitors>:
{
   14062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14066:	4606      	mov	r6, r0
   14068:	460f      	mov	r7, r1
   1406a:	4690      	mov	r8, r2
	return list->head;
   1406c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1406e:	b119      	cbz	r1, 14078 <notify_monitors+0x16>
   14070:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   14072:	b131      	cbz	r1, 14082 <notify_monitors+0x20>
	return node->next;
   14074:	680c      	ldr	r4, [r1, #0]
   14076:	e004      	b.n	14082 <notify_monitors+0x20>
   14078:	460c      	mov	r4, r1
   1407a:	e002      	b.n	14082 <notify_monitors+0x20>
   1407c:	4623      	mov	r3, r4
   1407e:	4621      	mov	r1, r4
   14080:	461c      	mov	r4, r3
   14082:	b159      	cbz	r1, 1409c <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   14084:	684d      	ldr	r5, [r1, #4]
   14086:	4643      	mov	r3, r8
   14088:	463a      	mov	r2, r7
   1408a:	4630      	mov	r0, r6
   1408c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1408e:	2c00      	cmp	r4, #0
   14090:	d0f4      	beq.n	1407c <notify_monitors+0x1a>
   14092:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   14094:	2c00      	cmp	r4, #0
   14096:	d0f2      	beq.n	1407e <notify_monitors+0x1c>
	return node->next;
   14098:	6823      	ldr	r3, [r4, #0]
   1409a:	e7f0      	b.n	1407e <notify_monitors+0x1c>
}
   1409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000140a0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   140a0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   140a2:	f013 0307 	ands.w	r3, r3, #7
   140a6:	d103      	bne.n	140b0 <process_recheck+0x10>
	return list->head;
   140a8:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   140aa:	b10a      	cbz	r2, 140b0 <process_recheck+0x10>
		evt = EVT_START;
   140ac:	2003      	movs	r0, #3
   140ae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   140b0:	2b02      	cmp	r3, #2
   140b2:	d003      	beq.n	140bc <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   140b4:	2b01      	cmp	r3, #1
   140b6:	d006      	beq.n	140c6 <process_recheck+0x26>
	int evt = EVT_NOP;
   140b8:	2000      	movs	r0, #0
   140ba:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   140bc:	8bc2      	ldrh	r2, [r0, #30]
   140be:	2a00      	cmp	r2, #0
   140c0:	d1f8      	bne.n	140b4 <process_recheck+0x14>
		evt = EVT_STOP;
   140c2:	2004      	movs	r0, #4
   140c4:	4770      	bx	lr
   140c6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   140c8:	b10b      	cbz	r3, 140ce <process_recheck+0x2e>
		evt = EVT_RESET;
   140ca:	2005      	movs	r0, #5
}
   140cc:	4770      	bx	lr
	int evt = EVT_NOP;
   140ce:	2000      	movs	r0, #0
   140d0:	4770      	bx	lr

000140d2 <process_complete>:
{
   140d2:	b538      	push	{r3, r4, r5, lr}
   140d4:	4604      	mov	r4, r0
   140d6:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   140d8:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
   140da:	2a00      	cmp	r2, #0
   140dc:	db07      	blt.n	140ee <process_complete+0x1c>
   140de:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   140e2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   140e4:	2a01      	cmp	r2, #1
   140e6:	d90e      	bls.n	14106 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   140e8:	2b04      	cmp	r3, #4
   140ea:	d032      	beq.n	14152 <process_complete+0x80>
}
   140ec:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   140ee:	e9d0 0100 	ldrd	r0, r1, [r0]
   140f2:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   140f6:	2300      	movs	r3, #0
   140f8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   140fa:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   140fc:	2101      	movs	r1, #1
   140fe:	4620      	mov	r0, r4
   14100:	f7ff ffa7 	bl	14052 <set_state>
   14104:	e7f2      	b.n	140ec <process_complete+0x1a>
		*clients = mgr->clients;
   14106:	e9d0 0100 	ldrd	r0, r1, [r0]
   1410a:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1410e:	2200      	movs	r2, #0
   14110:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   14112:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   14114:	2b06      	cmp	r3, #6
   14116:	d117      	bne.n	14148 <process_complete+0x76>
	return list->head;
   14118:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1411a:	b13b      	cbz	r3, 1412c <process_complete+0x5a>
				mgr->refs += 1U;
   1411c:	8be2      	ldrh	r2, [r4, #30]
   1411e:	3201      	adds	r2, #1
   14120:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
   14122:	2b00      	cmp	r3, #0
   14124:	d0f9      	beq.n	1411a <process_complete+0x48>
	return node->next;
   14126:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14128:	2b00      	cmp	r3, #0
   1412a:	d1f6      	bne.n	1411a <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1412c:	2102      	movs	r1, #2
   1412e:	4620      	mov	r0, r4
   14130:	f7ff ff8f 	bl	14052 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   14134:	4620      	mov	r0, r4
   14136:	f7ff ffb3 	bl	140a0 <process_recheck>
   1413a:	2800      	cmp	r0, #0
   1413c:	d0d6      	beq.n	140ec <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1413e:	8ba3      	ldrh	r3, [r4, #28]
   14140:	f043 0320 	orr.w	r3, r3, #32
   14144:	83a3      	strh	r3, [r4, #28]
   14146:	e7d1      	b.n	140ec <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   14148:	2100      	movs	r1, #0
   1414a:	4620      	mov	r0, r4
   1414c:	f7ff ff81 	bl	14052 <set_state>
   14150:	e7f0      	b.n	14134 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   14152:	2100      	movs	r1, #0
   14154:	f7ff ff7d 	bl	14052 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   14158:	4620      	mov	r0, r4
   1415a:	f7ff ffa1 	bl	140a0 <process_recheck>
   1415e:	2800      	cmp	r0, #0
   14160:	d0c4      	beq.n	140ec <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   14162:	8ba3      	ldrh	r3, [r4, #28]
   14164:	f043 0320 	orr.w	r3, r3, #32
   14168:	83a3      	strh	r3, [r4, #28]
}
   1416a:	e7bf      	b.n	140ec <process_complete+0x1a>

0001416c <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1416c:	b158      	cbz	r0, 14186 <validate_args+0x1a>
{
   1416e:	b510      	push	{r4, lr}
   14170:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   14172:	b159      	cbz	r1, 1418c <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   14174:	1d08      	adds	r0, r1, #4
   14176:	f7ff ff12 	bl	13f9e <sys_notify_validate>
	if ((rv == 0)
   1417a:	b918      	cbnz	r0, 14184 <validate_args+0x18>
	    && ((cli->notify.flags
   1417c:	68a3      	ldr	r3, [r4, #8]
   1417e:	f033 0303 	bics.w	r3, r3, #3
   14182:	d106      	bne.n	14192 <validate_args+0x26>
}
   14184:	bd10      	pop	{r4, pc}
		return -EINVAL;
   14186:	f06f 0015 	mvn.w	r0, #21
}
   1418a:	4770      	bx	lr
		return -EINVAL;
   1418c:	f06f 0015 	mvn.w	r0, #21
   14190:	e7f8      	b.n	14184 <validate_args+0x18>
		rv = -EINVAL;
   14192:	f06f 0015 	mvn.w	r0, #21
   14196:	e7f5      	b.n	14184 <validate_args+0x18>

00014198 <notify_one>:
{
   14198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1419c:	4607      	mov	r7, r0
   1419e:	460c      	mov	r4, r1
   141a0:	4616      	mov	r6, r2
   141a2:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   141a4:	4619      	mov	r1, r3
   141a6:	1d20      	adds	r0, r4, #4
   141a8:	f7ff ff10 	bl	13fcc <sys_notify_finalize>
	if (cb) {
   141ac:	b128      	cbz	r0, 141ba <notify_one+0x22>
   141ae:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   141b0:	462b      	mov	r3, r5
   141b2:	4632      	mov	r2, r6
   141b4:	4621      	mov	r1, r4
   141b6:	4638      	mov	r0, r7
   141b8:	47c0      	blx	r8
}
   141ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000141be <notify_all>:
{
   141be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   141c2:	4681      	mov	r9, r0
   141c4:	460c      	mov	r4, r1
   141c6:	4690      	mov	r8, r2
   141c8:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   141ca:	e005      	b.n	141d8 <notify_all+0x1a>
	list->tail = node;
   141cc:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   141ce:	463b      	mov	r3, r7
   141d0:	4642      	mov	r2, r8
   141d2:	4648      	mov	r0, r9
   141d4:	f7ff ffe0 	bl	14198 <notify_one>
	return list->head;
   141d8:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   141da:	b129      	cbz	r1, 141e8 <notify_all+0x2a>
	return node->next;
   141dc:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   141de:	6025      	str	r5, [r4, #0]
	return list->tail;
   141e0:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   141e2:	428e      	cmp	r6, r1
   141e4:	d1f3      	bne.n	141ce <notify_all+0x10>
   141e6:	e7f1      	b.n	141cc <notify_all+0xe>
}
   141e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000141ec <transition_complete>:
{
   141ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   141ee:	f04f 0420 	mov.w	r4, #32
   141f2:	f3ef 8211 	mrs	r2, BASEPRI
   141f6:	f384 8812 	msr	BASEPRI_MAX, r4
   141fa:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   141fe:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
   14200:	2101      	movs	r1, #1
   14202:	f7ee ff4f 	bl	30a4 <process_event>
}
   14206:	bd10      	pop	{r4, pc}

00014208 <onoff_manager_init>:
	if ((mgr == NULL)
   14208:	b170      	cbz	r0, 14228 <onoff_manager_init+0x20>
{
   1420a:	b538      	push	{r3, r4, r5, lr}
   1420c:	460c      	mov	r4, r1
   1420e:	4605      	mov	r5, r0
	    || (transitions == NULL)
   14210:	b169      	cbz	r1, 1422e <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   14212:	680b      	ldr	r3, [r1, #0]
   14214:	b173      	cbz	r3, 14234 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   14216:	684b      	ldr	r3, [r1, #4]
   14218:	b17b      	cbz	r3, 1423a <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1421a:	2220      	movs	r2, #32
   1421c:	2100      	movs	r1, #0
   1421e:	f004 fc75 	bl	18b0c <memset>
   14222:	612c      	str	r4, [r5, #16]
	return 0;
   14224:	2000      	movs	r0, #0
}
   14226:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14228:	f06f 0015 	mvn.w	r0, #21
}
   1422c:	4770      	bx	lr
		return -EINVAL;
   1422e:	f06f 0015 	mvn.w	r0, #21
   14232:	e7f8      	b.n	14226 <onoff_manager_init+0x1e>
   14234:	f06f 0015 	mvn.w	r0, #21
   14238:	e7f5      	b.n	14226 <onoff_manager_init+0x1e>
   1423a:	f06f 0015 	mvn.w	r0, #21
   1423e:	e7f2      	b.n	14226 <onoff_manager_init+0x1e>

00014240 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   14240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14242:	4604      	mov	r4, r0
   14244:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   14246:	f7ff ff91 	bl	1416c <validate_args>

	if (rv < 0) {
   1424a:	1e06      	subs	r6, r0, #0
   1424c:	db37      	blt.n	142be <onoff_request+0x7e>
   1424e:	f04f 0320 	mov.w	r3, #32
   14252:	f3ef 8211 	mrs	r2, BASEPRI
   14256:	f383 8812 	msr	BASEPRI_MAX, r3
   1425a:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1425e:	8ba5      	ldrh	r5, [r4, #28]
   14260:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   14264:	8be3      	ldrh	r3, [r4, #30]
   14266:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1426a:	428b      	cmp	r3, r1
   1426c:	d02f      	beq.n	142ce <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1426e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   14270:	2d02      	cmp	r5, #2
   14272:	d00c      	beq.n	1428e <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   14274:	b18d      	cbz	r5, 1429a <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   14276:	2d04      	cmp	r5, #4
   14278:	d00f      	beq.n	1429a <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1427a:	2d06      	cmp	r5, #6
   1427c:	d00d      	beq.n	1429a <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1427e:	2d05      	cmp	r5, #5
   14280:	d01f      	beq.n	142c2 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   14282:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   14286:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   14288:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1428a:	4608      	mov	r0, r1
   1428c:	e00a      	b.n	142a4 <onoff_request+0x64>
		mgr->refs += 1U;
   1428e:	3301      	adds	r3, #1
   14290:	83e3      	strh	r3, [r4, #30]
		notify = true;
   14292:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   14294:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   14296:	4618      	mov	r0, r3
   14298:	e004      	b.n	142a4 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1429a:	fab5 f385 	clz	r3, r5
   1429e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   142a0:	2100      	movs	r1, #0
		add_client = true;
   142a2:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   142a4:	b128      	cbz	r0, 142b2 <onoff_request+0x72>
	parent->next = child;
   142a6:	2000      	movs	r0, #0
   142a8:	6038      	str	r0, [r7, #0]
	return list->tail;
   142aa:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   142ac:	b1a8      	cbz	r0, 142da <onoff_request+0x9a>
	parent->next = child;
   142ae:	6007      	str	r7, [r0, #0]
	list->tail = node;
   142b0:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   142b2:	b9ab      	cbnz	r3, 142e0 <onoff_request+0xa0>
	__asm__ volatile(
   142b4:	f382 8811 	msr	BASEPRI, r2
   142b8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   142bc:	b9a9      	cbnz	r1, 142ea <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   142be:	4630      	mov	r0, r6
   142c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   142c2:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   142c6:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   142c8:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   142ca:	4608      	mov	r0, r1
   142cc:	e7ea      	b.n	142a4 <onoff_request+0x64>
		rv = -EAGAIN;
   142ce:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   142d2:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   142d4:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   142d6:	4608      	mov	r0, r1
   142d8:	e7e4      	b.n	142a4 <onoff_request+0x64>
   142da:	6067      	str	r7, [r4, #4]
	list->head = node;
   142dc:	6027      	str	r7, [r4, #0]
}
   142de:	e7e8      	b.n	142b2 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   142e0:	2102      	movs	r1, #2
   142e2:	4620      	mov	r0, r4
   142e4:	f7ee fede 	bl	30a4 <process_event>
   142e8:	e7e9      	b.n	142be <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   142ea:	2300      	movs	r3, #0
   142ec:	462a      	mov	r2, r5
   142ee:	4639      	mov	r1, r7
   142f0:	4620      	mov	r0, r4
   142f2:	f7ff ff51 	bl	14198 <notify_one>
   142f6:	e7e2      	b.n	142be <onoff_request+0x7e>

000142f8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   142f8:	b508      	push	{r3, lr}
   142fa:	4604      	mov	r4, r0
   142fc:	4608      	mov	r0, r1
   142fe:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   14300:	461a      	mov	r2, r3
   14302:	47a0      	blx	r4
	return z_impl_z_current_get();
   14304:	f7fd fe68 	bl	11fd8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   14308:	f7f0 fa4a 	bl	47a0 <z_impl_k_thread_abort>

0001430c <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1430c:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1430e:	1d13      	adds	r3, r2, #4
   14310:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   14314:	b9d3      	cbnz	r3, 1434c <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   14316:	2301      	movs	r3, #1
   14318:	fa03 f402 	lsl.w	r4, r3, r2
   1431c:	68c3      	ldr	r3, [r0, #12]
   1431e:	4323      	orrs	r3, r4
   14320:	60c3      	str	r3, [r0, #12]
		b->next = c;
   14322:	3204      	adds	r2, #4
   14324:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   14328:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1432c:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
   1432e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   14332:	d307      	bcc.n	14344 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   14334:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   14336:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   14338:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1433c:	d304      	bcc.n	14348 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1433e:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   14340:	bc70      	pop	{r4, r5, r6}
   14342:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   14344:	8099      	strh	r1, [r3, #4]
   14346:	e7f6      	b.n	14336 <free_list_add_bidx+0x2a>
   14348:	80d9      	strh	r1, [r3, #6]
   1434a:	e7f9      	b.n	14340 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1434c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   14350:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   14352:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   14356:	d318      	bcc.n	1438a <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   14358:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1435a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1435e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   14362:	d314      	bcc.n	1438e <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   14364:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   14366:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   14368:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1436c:	d311      	bcc.n	14392 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1436e:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   14370:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   14374:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   14376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1437a:	d30c      	bcc.n	14396 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   1437c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1437e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   14380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14384:	d309      	bcc.n	1439a <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   14386:	60a1      	str	r1, [r4, #8]
   14388:	e7da      	b.n	14340 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   1438a:	88a2      	ldrh	r2, [r4, #4]
   1438c:	e7e5      	b.n	1435a <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   1438e:	80aa      	strh	r2, [r5, #4]
   14390:	e7e9      	b.n	14366 <free_list_add_bidx+0x5a>
   14392:	80eb      	strh	r3, [r5, #6]
   14394:	e7ec      	b.n	14370 <free_list_add_bidx+0x64>
   14396:	80d1      	strh	r1, [r2, #6]
   14398:	e7f1      	b.n	1437e <free_list_add_bidx+0x72>
   1439a:	80a1      	strh	r1, [r4, #4]
   1439c:	e7d0      	b.n	14340 <free_list_add_bidx+0x34>

0001439e <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1439e:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   143a0:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
   143a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   143a6:	d307      	bcc.n	143b8 <free_list_add+0x1a>
	void *cmem = &buf[c];
   143a8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   143ac:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   143ae:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   143b0:	2a01      	cmp	r2, #1
   143b2:	d002      	beq.n	143ba <free_list_add+0x1c>
   143b4:	2200      	movs	r2, #0
   143b6:	e000      	b.n	143ba <free_list_add+0x1c>
   143b8:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   143ba:	b9a2      	cbnz	r2, 143e6 <free_list_add+0x48>
	void *cmem = &buf[c];
   143bc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   143c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   143c4:	d310      	bcc.n	143e8 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   143c6:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   143c8:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   143ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   143ce:	d30d      	bcc.n	143ec <free_list_add+0x4e>
   143d0:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   143d2:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   143d4:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   143d8:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   143da:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
   143de:	f1c2 021f 	rsb	r2, r2, #31
   143e2:	f7ff ff93 	bl	1430c <free_list_add_bidx>
	}
}
   143e6:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   143e8:	8852      	ldrh	r2, [r2, #2]
   143ea:	e7ed      	b.n	143c8 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   143ec:	2304      	movs	r3, #4
   143ee:	e7f0      	b.n	143d2 <free_list_add+0x34>

000143f0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   143f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143f2:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   143f4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   143f8:	d32a      	bcc.n	14450 <sys_heap_init+0x60>
   143fa:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   143fc:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   143fe:	1dc8      	adds	r0, r1, #7
   14400:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   14404:	440d      	add	r5, r1
   14406:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1440a:	1a2d      	subs	r5, r5, r0
   1440c:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   1440e:	4606      	mov	r6, r0
	heap->heap = h;
   14410:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   14412:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   14414:	2300      	movs	r3, #0
   14416:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   14418:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1441c:	d31a      	bcc.n	14454 <sys_heap_init+0x64>
   1441e:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   14420:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   14422:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   14426:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   14428:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1442c:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   14430:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   14434:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   14436:	f103 0e07 	add.w	lr, r3, #7
   1443a:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1443e:	2300      	movs	r3, #0
   14440:	4563      	cmp	r3, ip
   14442:	da09      	bge.n	14458 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   14444:	1d1a      	adds	r2, r3, #4
   14446:	2400      	movs	r4, #0
   14448:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1444c:	3301      	adds	r3, #1
   1444e:	e7f7      	b.n	14440 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   14450:	2504      	movs	r5, #4
   14452:	e7d3      	b.n	143fc <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   14454:	2304      	movs	r3, #4
   14456:	e7e3      	b.n	14420 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14458:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   1445a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1445e:	d333      	bcc.n	144c8 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   14460:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   14462:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   14466:	d331      	bcc.n	144cc <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   14468:	2300      	movs	r3, #0
   1446a:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   1446c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   14470:	d32f      	bcc.n	144d2 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   14472:	6843      	ldr	r3, [r0, #4]
   14474:	f043 0301 	orr.w	r3, r3, #1
   14478:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1447a:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1447c:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   1447e:	f02e 0307 	bic.w	r3, lr, #7
   14482:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   14484:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   14488:	d328      	bcc.n	144dc <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   1448a:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1448c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1448e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   14492:	d325      	bcc.n	144e0 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   14494:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   14496:	f025 0307 	bic.w	r3, r5, #7
   1449a:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   1449c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1449e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   144a2:	d31f      	bcc.n	144e4 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   144a4:	2400      	movs	r4, #0
   144a6:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   144a8:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   144aa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   144ae:	d31c      	bcc.n	144ea <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   144b0:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   144b2:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   144b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   144b8:	d319      	bcc.n	144ee <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   144ba:	686b      	ldr	r3, [r5, #4]
   144bc:	f043 0301 	orr.w	r3, r3, #1
   144c0:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   144c2:	f7ff ff6c 	bl	1439e <free_list_add>
}
   144c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   144c8:	8043      	strh	r3, [r0, #2]
   144ca:	e7ca      	b.n	14462 <sys_heap_init+0x72>
   144cc:	2300      	movs	r3, #0
   144ce:	8003      	strh	r3, [r0, #0]
   144d0:	e7cc      	b.n	1446c <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   144d2:	8843      	ldrh	r3, [r0, #2]
   144d4:	f043 0301 	orr.w	r3, r3, #1
   144d8:	8043      	strh	r3, [r0, #2]
   144da:	e7ce      	b.n	1447a <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   144dc:	8066      	strh	r6, [r4, #2]
   144de:	e7d5      	b.n	1448c <sys_heap_init+0x9c>
   144e0:	52c1      	strh	r1, [r0, r3]
   144e2:	e7d8      	b.n	14496 <sys_heap_init+0xa6>
   144e4:	2400      	movs	r4, #0
   144e6:	806c      	strh	r4, [r5, #2]
   144e8:	e7de      	b.n	144a8 <sys_heap_init+0xb8>
   144ea:	52c2      	strh	r2, [r0, r3]
   144ec:	e7e1      	b.n	144b2 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   144ee:	886b      	ldrh	r3, [r5, #2]
   144f0:	f043 0301 	orr.w	r3, r3, #1
   144f4:	806b      	strh	r3, [r5, #2]
   144f6:	e7e4      	b.n	144c2 <sys_heap_init+0xd2>

000144f8 <outs>:
{
   144f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   144fc:	4607      	mov	r7, r0
   144fe:	460e      	mov	r6, r1
   14500:	4614      	mov	r4, r2
   14502:	4698      	mov	r8, r3
	size_t count = 0;
   14504:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14506:	e006      	b.n	14516 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   14508:	4631      	mov	r1, r6
   1450a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1450e:	47b8      	blx	r7
		if (rc < 0) {
   14510:	2800      	cmp	r0, #0
   14512:	db09      	blt.n	14528 <outs+0x30>
		++count;
   14514:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14516:	4544      	cmp	r4, r8
   14518:	d3f6      	bcc.n	14508 <outs+0x10>
   1451a:	f1b8 0f00 	cmp.w	r8, #0
   1451e:	d102      	bne.n	14526 <outs+0x2e>
   14520:	7823      	ldrb	r3, [r4, #0]
   14522:	2b00      	cmp	r3, #0
   14524:	d1f0      	bne.n	14508 <outs+0x10>
	return (int)count;
   14526:	4628      	mov	r0, r5
}
   14528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001452c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1452c:	4770      	bx	lr

0001452e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1452e:	b084      	sub	sp, #16
   14530:	ab04      	add	r3, sp, #16
   14532:	e903 0007 	stmdb	r3, {r0, r1, r2}
   14536:	2300      	movs	r3, #0
   14538:	f383 8811 	msr	BASEPRI, r3
   1453c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   14540:	b004      	add	sp, #16
   14542:	4770      	bx	lr

00014544 <tty_putchar>:
{
   14544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14548:	4604      	mov	r4, r0
   1454a:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   1454c:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
   14550:	f004 f8b9 	bl	186c6 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   14554:	b330      	cbz	r0, 145a4 <tty_putchar+0x60>
   14556:	2200      	movs	r2, #0
   14558:	4613      	mov	r3, r2
	return z_impl_k_sem_take(sem, timeout);
   1455a:	4630      	mov	r0, r6
   1455c:	f7fd f954 	bl	11808 <z_impl_k_sem_take>
	if (res < 0) {
   14560:	2800      	cmp	r0, #0
   14562:	db1d      	blt.n	145a0 <tty_putchar+0x5c>
	__asm__ volatile(
   14564:	f04f 0320 	mov.w	r3, #32
   14568:	f3ef 8111 	mrs	r1, BASEPRI
   1456c:	f383 8812 	msr	BASEPRI_MAX, r3
   14570:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   14574:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   14576:	1c53      	adds	r3, r2, #1
	if (tx_next >= tty->tx_ringbuf_sz) {
   14578:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1457a:	4298      	cmp	r0, r3
   1457c:	d800      	bhi.n	14580 <tty_putchar+0x3c>
		tx_next = 0;
   1457e:	2300      	movs	r3, #0
	if (tx_next == tty->tx_get) {
   14580:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   14582:	4298      	cmp	r0, r3
   14584:	d02e      	beq.n	145e4 <tty_putchar+0xa0>
	tty->tx_ringbuf[tty->tx_put] = c;
   14586:	6b60      	ldr	r0, [r4, #52]	; 0x34
   14588:	5485      	strb	r5, [r0, r2]
	tty->tx_put = tx_next;
   1458a:	87e3      	strh	r3, [r4, #62]	; 0x3e
	__asm__ volatile(
   1458c:	f381 8811 	msr	BASEPRI, r1
   14590:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   14594:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   14596:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
   14598:	69db      	ldr	r3, [r3, #28]
   1459a:	b353      	cbz	r3, 145f2 <tty_putchar+0xae>
		api->irq_tx_enable(dev);
   1459c:	4798      	blx	r3
	return 0;
   1459e:	2000      	movs	r0, #0
}
   145a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   145a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
   145a6:	f1b3 3fff 	cmp.w	r3, #4294967295
   145aa:	d017      	beq.n	145dc <tty_putchar+0x98>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   145ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   145b0:	ea4f 79e3 	mov.w	r9, r3, asr #31
   145b4:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   145b8:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   145bc:	03d8      	lsls	r0, r3, #15
   145be:	f240 37e7 	movw	r7, #999	; 0x3e7
   145c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   145c6:	2300      	movs	r3, #0
   145c8:	19c0      	adds	r0, r0, r7
   145ca:	f04f 0700 	mov.w	r7, #0
   145ce:	eb47 0101 	adc.w	r1, r7, r1
   145d2:	f7ec fd89 	bl	10e8 <__aeabi_uldivmod>
	res = k_sem_take(&tty->tx_sem,
   145d6:	4602      	mov	r2, r0
   145d8:	460b      	mov	r3, r1
   145da:	e7be      	b.n	1455a <tty_putchar+0x16>
   145dc:	f04f 32ff 	mov.w	r2, #4294967295
   145e0:	4613      	mov	r3, r2
   145e2:	e7ba      	b.n	1455a <tty_putchar+0x16>
   145e4:	f381 8811 	msr	BASEPRI, r1
   145e8:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   145ec:	f06f 001b 	mvn.w	r0, #27
   145f0:	e7d6      	b.n	145a0 <tty_putchar+0x5c>
	return 0;
   145f2:	2000      	movs	r0, #0
   145f4:	e7d4      	b.n	145a0 <tty_putchar+0x5c>

000145f6 <tty_getchar>:
{
   145f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145f8:	4604      	mov	r4, r0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   145fa:	1d05      	adds	r5, r0, #4
   145fc:	6a03      	ldr	r3, [r0, #32]
   145fe:	f1b3 3fff 	cmp.w	r3, #4294967295
   14602:	d031      	beq.n	14668 <tty_getchar+0x72>
   14604:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14608:	17df      	asrs	r7, r3, #31
   1460a:	03f9      	lsls	r1, r7, #15
   1460c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   14610:	03d8      	lsls	r0, r3, #15
   14612:	f240 36e7 	movw	r6, #999	; 0x3e7
   14616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1461a:	2300      	movs	r3, #0
   1461c:	1980      	adds	r0, r0, r6
   1461e:	f04f 0600 	mov.w	r6, #0
   14622:	eb46 0101 	adc.w	r1, r6, r1
   14626:	f7ec fd5f 	bl	10e8 <__aeabi_uldivmod>
   1462a:	4602      	mov	r2, r0
   1462c:	460b      	mov	r3, r1
   1462e:	4628      	mov	r0, r5
   14630:	f7fd f8ea 	bl	11808 <z_impl_k_sem_take>
	if (res < 0) {
   14634:	2800      	cmp	r0, #0
   14636:	db16      	blt.n	14666 <tty_getchar+0x70>
	__asm__ volatile(
   14638:	f04f 0320 	mov.w	r3, #32
   1463c:	f3ef 8111 	mrs	r1, BASEPRI
   14640:	f383 8812 	msr	BASEPRI_MAX, r3
   14644:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   14648:	6960      	ldr	r0, [r4, #20]
   1464a:	8ba2      	ldrh	r2, [r4, #28]
   1464c:	1c53      	adds	r3, r2, #1
   1464e:	b29b      	uxth	r3, r3
   14650:	83a3      	strh	r3, [r4, #28]
   14652:	5c80      	ldrb	r0, [r0, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   14654:	69a2      	ldr	r2, [r4, #24]
   14656:	4293      	cmp	r3, r2
   14658:	d301      	bcc.n	1465e <tty_getchar+0x68>
		tty->rx_get = 0U;
   1465a:	2300      	movs	r3, #0
   1465c:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
   1465e:	f381 8811 	msr	BASEPRI, r1
   14662:	f3bf 8f6f 	isb	sy
}
   14666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   14668:	f04f 32ff 	mov.w	r2, #4294967295
   1466c:	4613      	mov	r3, r2
   1466e:	e7de      	b.n	1462e <tty_getchar+0x38>

00014670 <tty_read_unbuf>:
{
   14670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14674:	b083      	sub	sp, #12
   14676:	4681      	mov	r9, r0
   14678:	460e      	mov	r6, r1
   1467a:	4615      	mov	r5, r2
	uint32_t timeout = tty->rx_timeout;
   1467c:	6a07      	ldr	r7, [r0, #32]
	size_t out_size = 0;
   1467e:	f04f 0800 	mov.w	r8, #0
	while (size) {
   14682:	e01a      	b.n	146ba <tty_read_unbuf+0x4a>
		return -ENOSYS;
   14684:	f06f 0457 	mvn.w	r4, #87	; 0x57
			if (out_size == 0) {
   14688:	f1b8 0f00 	cmp.w	r8, #0
   1468c:	d003      	beq.n	14696 <tty_read_unbuf+0x26>
	return out_size;
   1468e:	4640      	mov	r0, r8
}
   14690:	b003      	add	sp, #12
   14692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				errno = res;
   14696:	f000 f9bf 	bl	14a18 <__errno>
   1469a:	6004      	str	r4, [r0, #0]
				return -1;
   1469c:	f04f 30ff 	mov.w	r0, #4294967295
   146a0:	e7f6      	b.n	14690 <tty_read_unbuf+0x20>
		if (size == 0 ||
   146a2:	2d00      	cmp	r5, #0
   146a4:	d0f3      	beq.n	1468e <tty_read_unbuf+0x1e>
   146a6:	f1b7 3fff 	cmp.w	r7, #4294967295
   146aa:	d003      	beq.n	146b4 <tty_read_unbuf+0x44>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
   146ac:	1e7b      	subs	r3, r7, #1
   146ae:	2f00      	cmp	r7, #0
   146b0:	d0ed      	beq.n	1468e <tty_read_unbuf+0x1e>
   146b2:	461f      	mov	r7, r3
		if (res == -1) {
   146b4:	f1b4 3fff 	cmp.w	r4, #4294967295
   146b8:	d018      	beq.n	146ec <tty_read_unbuf+0x7c>
	while (size) {
   146ba:	2d00      	cmp	r5, #0
   146bc:	d0e7      	beq.n	1468e <tty_read_unbuf+0x1e>
		res = uart_poll_in(tty->uart_dev, &c);
   146be:	f8d9 0000 	ldr.w	r0, [r9]
	const struct uart_driver_api *api =
   146c2:	6883      	ldr	r3, [r0, #8]
	if (api->poll_in == NULL) {
   146c4:	681b      	ldr	r3, [r3, #0]
   146c6:	2b00      	cmp	r3, #0
   146c8:	d0dc      	beq.n	14684 <tty_read_unbuf+0x14>
	return api->poll_in(dev, p_char);
   146ca:	f10d 0107 	add.w	r1, sp, #7
   146ce:	4798      	blx	r3
   146d0:	4604      	mov	r4, r0
		if (res <= -2) {
   146d2:	f1b0 3fff 	cmp.w	r0, #4294967295
   146d6:	dbd7      	blt.n	14688 <tty_read_unbuf+0x18>
		if (res == 0) {
   146d8:	2800      	cmp	r0, #0
   146da:	d1e2      	bne.n	146a2 <tty_read_unbuf+0x32>
			*p++ = c;
   146dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146e0:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
   146e4:	f108 0801 	add.w	r8, r8, #1
			size--;
   146e8:	3d01      	subs	r5, #1
   146ea:	e7da      	b.n	146a2 <tty_read_unbuf+0x32>
	return z_impl_k_sleep(timeout);
   146ec:	2021      	movs	r0, #33	; 0x21
   146ee:	2100      	movs	r1, #0
   146f0:	f7fd fc46 	bl	11f80 <z_impl_k_sleep>
   146f4:	e7e1      	b.n	146ba <tty_read_unbuf+0x4a>

000146f6 <tty_irq_input_hook>:
{
   146f6:	b510      	push	{r4, lr}
	int rx_next = tty->rx_put + 1;
   146f8:	8bc2      	ldrh	r2, [r0, #30]
   146fa:	1c53      	adds	r3, r2, #1
	if (rx_next >= tty->rx_ringbuf_sz) {
   146fc:	6984      	ldr	r4, [r0, #24]
   146fe:	429c      	cmp	r4, r3
   14700:	d800      	bhi.n	14704 <tty_irq_input_hook+0xe>
		rx_next = 0;
   14702:	2300      	movs	r3, #0
	if (rx_next == tty->rx_get) {
   14704:	8b84      	ldrh	r4, [r0, #28]
   14706:	429c      	cmp	r4, r3
   14708:	d007      	beq.n	1471a <tty_irq_input_hook+0x24>
	tty->rx_ringbuf[tty->rx_put] = c;
   1470a:	6944      	ldr	r4, [r0, #20]
   1470c:	54a1      	strb	r1, [r4, r2]
	tty->rx_put = rx_next;
   1470e:	83c3      	strh	r3, [r0, #30]
	k_sem_give(&tty->rx_sem);
   14710:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14712:	f7fd f855 	bl	117c0 <z_impl_k_sem_give>
}
   14716:	2001      	movs	r0, #1
   14718:	bd10      	pop	{r4, pc}
		tty_putchar(tty, '~');
   1471a:	217e      	movs	r1, #126	; 0x7e
   1471c:	f7ff ff12 	bl	14544 <tty_putchar>
		return 1;
   14720:	e7f9      	b.n	14716 <tty_irq_input_hook+0x20>

00014722 <tty_uart_isr>:
{
   14722:	b530      	push	{r4, r5, lr}
   14724:	b083      	sub	sp, #12
   14726:	4604      	mov	r4, r0
   14728:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
   1472a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
   1472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1472e:	b103      	cbz	r3, 14732 <tty_uart_isr+0x10>
	return api->irq_update(dev);
   14730:	4798      	blx	r3
	const struct uart_driver_api *api =
   14732:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
   14734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14736:	b143      	cbz	r3, 1474a <tty_uart_isr+0x28>
	return api->irq_rx_ready(dev);
   14738:	4620      	mov	r0, r4
   1473a:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   1473c:	b180      	cbz	r0, 14760 <tty_uart_isr+0x3e>
   1473e:	e004      	b.n	1474a <tty_uart_isr+0x28>
			tty_irq_input_hook(tty, c);
   14740:	f89d 1007 	ldrb.w	r1, [sp, #7]
   14744:	4628      	mov	r0, r5
   14746:	f7ff ffd6 	bl	146f6 <tty_irq_input_hook>
	const struct uart_driver_api *api =
   1474a:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
   1474c:	699b      	ldr	r3, [r3, #24]
   1474e:	2b00      	cmp	r3, #0
   14750:	d0f6      	beq.n	14740 <tty_uart_isr+0x1e>
	return api->fifo_read(dev, rx_data, size);
   14752:	2201      	movs	r2, #1
   14754:	f10d 0107 	add.w	r1, sp, #7
   14758:	4620      	mov	r0, r4
   1475a:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   1475c:	2800      	cmp	r0, #0
   1475e:	d1ef      	bne.n	14740 <tty_uart_isr+0x1e>
	const struct uart_driver_api *api =
   14760:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
   14762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14764:	b113      	cbz	r3, 1476c <tty_uart_isr+0x4a>
	return api->irq_tx_ready(dev);
   14766:	4620      	mov	r0, r4
   14768:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   1476a:	b1b8      	cbz	r0, 1479c <tty_uart_isr+0x7a>
		if (tty->tx_get == tty->tx_put) {
   1476c:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
   1476e:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   14770:	4299      	cmp	r1, r3
   14772:	d015      	beq.n	147a0 <tty_uart_isr+0x7e>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   14774:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   14776:	1c4a      	adds	r2, r1, #1
   14778:	87aa      	strh	r2, [r5, #60]	; 0x3c
   1477a:	4419      	add	r1, r3
	const struct uart_driver_api *api =
   1477c:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
   1477e:	695b      	ldr	r3, [r3, #20]
   14780:	b113      	cbz	r3, 14788 <tty_uart_isr+0x66>
	return api->fifo_fill(dev, tx_data, size);
   14782:	2201      	movs	r2, #1
   14784:	4620      	mov	r0, r4
   14786:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   14788:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   1478a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1478c:	429a      	cmp	r2, r3
   1478e:	d301      	bcc.n	14794 <tty_uart_isr+0x72>
				tty->tx_get = 0U;
   14790:	2300      	movs	r3, #0
   14792:	87ab      	strh	r3, [r5, #60]	; 0x3c
			k_sem_give(&tty->tx_sem);
   14794:	f105 0024 	add.w	r0, r5, #36	; 0x24
   14798:	f7fd f812 	bl	117c0 <z_impl_k_sem_give>
}
   1479c:	b003      	add	sp, #12
   1479e:	bd30      	pop	{r4, r5, pc}
	const struct uart_driver_api *api =
   147a0:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
   147a2:	6a1b      	ldr	r3, [r3, #32]
   147a4:	2b00      	cmp	r3, #0
   147a6:	d0f9      	beq.n	1479c <tty_uart_isr+0x7a>
		api->irq_tx_disable(dev);
   147a8:	4620      	mov	r0, r4
   147aa:	4798      	blx	r3
   147ac:	e7f6      	b.n	1479c <tty_uart_isr+0x7a>

000147ae <tty_read>:
{
   147ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147b2:	4607      	mov	r7, r0
   147b4:	460d      	mov	r5, r1
	if (tty->rx_ringbuf_sz == 0U) {
   147b6:	6983      	ldr	r3, [r0, #24]
   147b8:	b17b      	cbz	r3, 147da <tty_read+0x2c>
	size_t out_size = 0;
   147ba:	2600      	movs	r6, #0
	while (size--) {
   147bc:	f102 38ff 	add.w	r8, r2, #4294967295
   147c0:	b1ba      	cbz	r2, 147f2 <tty_read+0x44>
		res = tty_getchar(tty);
   147c2:	4638      	mov	r0, r7
   147c4:	f7ff ff17 	bl	145f6 <tty_getchar>
		if (res < 0) {
   147c8:	1e04      	subs	r4, r0, #0
   147ca:	db0a      	blt.n	147e2 <tty_read+0x34>
		*p++ = (uint8_t)res;
   147cc:	4629      	mov	r1, r5
   147ce:	f801 4b01 	strb.w	r4, [r1], #1
		out_size++;
   147d2:	3601      	adds	r6, #1
		*p++ = (uint8_t)res;
   147d4:	460d      	mov	r5, r1
	while (size--) {
   147d6:	4642      	mov	r2, r8
   147d8:	e7f0      	b.n	147bc <tty_read+0xe>
		return tty_read_unbuf(tty, buf, size);
   147da:	f7ff ff49 	bl	14670 <tty_read_unbuf>
   147de:	4604      	mov	r4, r0
   147e0:	e008      	b.n	147f4 <tty_read+0x46>
			if (out_size == 0) {
   147e2:	b10e      	cbz	r6, 147e8 <tty_read+0x3a>
			return out_size;
   147e4:	4634      	mov	r4, r6
   147e6:	e005      	b.n	147f4 <tty_read+0x46>
				errno = -res;
   147e8:	f000 f916 	bl	14a18 <__errno>
   147ec:	4263      	negs	r3, r4
   147ee:	6003      	str	r3, [r0, #0]
				return res;
   147f0:	e000      	b.n	147f4 <tty_read+0x46>
	return out_size;
   147f2:	4634      	mov	r4, r6
}
   147f4:	4620      	mov	r0, r4
   147f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000147fa <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   147fa:	b570      	push	{r4, r5, r6, lr}
   147fc:	4604      	mov	r4, r0
   147fe:	460e      	mov	r6, r1
   14800:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
   14802:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   14804:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
   14806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14808:	b103      	cbz	r3, 1480c <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   1480a:	4798      	blx	r3

	tty->rx_ringbuf = buf;
   1480c:	6166      	str	r6, [r4, #20]
	tty->rx_ringbuf_sz = size;
   1480e:	61a5      	str	r5, [r4, #24]

	if (size > 0) {
   14810:	b90d      	cbnz	r5, 14816 <tty_set_rx_buf+0x1c>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
	}

	return 0;
}
   14812:	2000      	movs	r0, #0
   14814:	bd70      	pop	{r4, r5, r6, pc}
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
   14816:	1d20      	adds	r0, r4, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   14818:	f04f 32ff 	mov.w	r2, #4294967295
   1481c:	2100      	movs	r1, #0
   1481e:	f003 ff96 	bl	1874e <z_impl_k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
   14822:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   14824:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   14826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14828:	2b00      	cmp	r3, #0
   1482a:	d0f2      	beq.n	14812 <tty_set_rx_buf+0x18>
		api->irq_rx_enable(dev);
   1482c:	4798      	blx	r3
   1482e:	e7f0      	b.n	14812 <tty_set_rx_buf+0x18>

00014830 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   14830:	b570      	push	{r4, r5, r6, lr}
   14832:	4604      	mov	r4, r0
   14834:	460e      	mov	r6, r1
   14836:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   14838:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   1483a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
   1483c:	6a1b      	ldr	r3, [r3, #32]
   1483e:	b103      	cbz	r3, 14842 <tty_set_tx_buf+0x12>
		api->irq_tx_disable(dev);
   14840:	4798      	blx	r3

	tty->tx_ringbuf = buf;
   14842:	6366      	str	r6, [r4, #52]	; 0x34
	tty->tx_ringbuf_sz = size;
   14844:	63a5      	str	r5, [r4, #56]	; 0x38

	k_sem_init(&tty->tx_sem, size - 1, K_SEM_MAX_LIMIT);
   14846:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1484a:	1e69      	subs	r1, r5, #1
   1484c:	f04f 32ff 	mov.w	r2, #4294967295
   14850:	f003 ff7d 	bl	1874e <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   14854:	2000      	movs	r0, #0
   14856:	bd70      	pop	{r4, r5, r6, pc}

00014858 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   14858:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   1485a:	f7ef fb27 	bl	3eac <__do_global_ctors_aux>
	__do_init_array_aux();
   1485e:	f7ef fb17 	bl	3e90 <__do_init_array_aux>
}
   14862:	bd08      	pop	{r3, pc}

00014864 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   14864:	2000      	movs	r0, #0
   14866:	4770      	bx	lr

00014868 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   14868:	2200      	movs	r2, #0
   1486a:	6002      	str	r2, [r0, #0]
   1486c:	6042      	str	r2, [r0, #4]
   1486e:	6082      	str	r2, [r0, #8]
}
   14870:	4770      	bx	lr

00014872 <abort_function>:
{
   14872:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   14874:	2000      	movs	r0, #0
   14876:	f7ef fa31 	bl	3cdc <sys_reboot>

0001487a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1487a:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1487c:	f003 feab 	bl	185d6 <z_fatal_error>
}
   14880:	bd08      	pop	{r3, pc}

00014882 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14882:	b508      	push	{r3, lr}
   14884:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   14886:	6800      	ldr	r0, [r0, #0]
   14888:	f7ff fff7 	bl	1487a <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1488c:	bd08      	pop	{r3, pc}

0001488e <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   1488e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14890:	2100      	movs	r1, #0
   14892:	2001      	movs	r0, #1
   14894:	f7ff fff1 	bl	1487a <z_arm_fatal_error>
}
   14898:	bd08      	pop	{r3, pc}

0001489a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1489a:	b508      	push	{r3, lr}
	handler();
   1489c:	f7ef fcf6 	bl	428c <z_SysNmiOnReset>
	z_arm_int_exit();
   148a0:	f7ef fdc4 	bl	442c <z_arm_exc_exit>
}
   148a4:	bd08      	pop	{r3, pc}

000148a6 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   148a6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   148aa:	f383 880b 	msr	PSPLIM, r3
}
   148ae:	4770      	bx	lr

000148b0 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   148b0:	b508      	push	{r3, lr}
   148b2:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   148b4:	4601      	mov	r1, r0
   148b6:	4618      	mov	r0, r3
   148b8:	f7ff ffd4 	bl	14864 <__cxa_atexit>
}
   148bc:	bd08      	pop	{r3, pc}

000148be <memory_fault_recoverable>:
}
   148be:	2000      	movs	r0, #0
   148c0:	4770      	bx	lr

000148c2 <debug_monitor>:
	*recoverable = false;
   148c2:	2300      	movs	r3, #0
   148c4:	700b      	strb	r3, [r1, #0]
}
   148c6:	4770      	bx	lr

000148c8 <fault_handle>:
{
   148c8:	b508      	push	{r3, lr}
	*recoverable = false;
   148ca:	2300      	movs	r3, #0
   148cc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   148ce:	1ecb      	subs	r3, r1, #3
   148d0:	2b09      	cmp	r3, #9
   148d2:	d81a      	bhi.n	1490a <fault_handle+0x42>
   148d4:	e8df f003 	tbb	[pc, r3]
   148d8:	110d0905 	.word	0x110d0905
   148dc:	19191919 	.word	0x19191919
   148e0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   148e2:	4611      	mov	r1, r2
   148e4:	f7ef fe1e 	bl	4524 <hard_fault>
		break;
   148e8:	e010      	b.n	1490c <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   148ea:	2100      	movs	r1, #0
   148ec:	f7ef fdac 	bl	4448 <mem_manage_fault>
		break;
   148f0:	e00c      	b.n	1490c <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   148f2:	2100      	movs	r1, #0
   148f4:	f7ef fdd4 	bl	44a0 <bus_fault>
		break;
   148f8:	e008      	b.n	1490c <fault_handle+0x44>
		reason = usage_fault(esf);
   148fa:	f7ef fdfb 	bl	44f4 <usage_fault>
		break;
   148fe:	e005      	b.n	1490c <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   14900:	4611      	mov	r1, r2
   14902:	f7ff ffde 	bl	148c2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14906:	2000      	movs	r0, #0
		break;
   14908:	e000      	b.n	1490c <fault_handle+0x44>
	*recoverable = false;
   1490a:	2000      	movs	r0, #0
}
   1490c:	bd08      	pop	{r3, pc}

0001490e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1490e:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   14912:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   14916:	d001      	beq.n	1491c <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   14918:	b2c0      	uxtb	r0, r0
   1491a:	4770      	bx	lr
	}

	return -EINVAL;
   1491c:	f06f 0015 	mvn.w	r0, #21
}
   14920:	4770      	bx	lr

00014922 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   14922:	6843      	ldr	r3, [r0, #4]
		&&
   14924:	2b1f      	cmp	r3, #31
   14926:	d90a      	bls.n	1493e <mpu_partition_is_valid+0x1c>
		&&
   14928:	f013 0f1f 	tst.w	r3, #31
   1492c:	d001      	beq.n	14932 <mpu_partition_is_valid+0x10>
		&&
   1492e:	2000      	movs	r0, #0
   14930:	4770      	bx	lr
		((part->start &
   14932:	6803      	ldr	r3, [r0, #0]
		&&
   14934:	f013 0f1f 	tst.w	r3, #31
   14938:	d003      	beq.n	14942 <mpu_partition_is_valid+0x20>
   1493a:	2000      	movs	r0, #0
   1493c:	4770      	bx	lr
   1493e:	2000      	movs	r0, #0
   14940:	4770      	bx	lr
   14942:	2001      	movs	r0, #1
}
   14944:	4770      	bx	lr

00014946 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   14946:	2807      	cmp	r0, #7
   14948:	d805      	bhi.n	14956 <region_allocate_and_init+0x10>
{
   1494a:	b510      	push	{r4, lr}
   1494c:	4604      	mov	r4, r0
	region_init(index, region_conf);
   1494e:	f7ef ff63 	bl	4818 <region_init>
	return index;
   14952:	4620      	mov	r0, r4
}
   14954:	bd10      	pop	{r4, pc}
		return -EINVAL;
   14956:	f06f 0015 	mvn.w	r0, #21
}
   1495a:	4770      	bx	lr

0001495c <mpu_configure_region>:
{
   1495c:	b530      	push	{r4, r5, lr}
   1495e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   14960:	680b      	ldr	r3, [r1, #0]
   14962:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   14964:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   14966:	890d      	ldrh	r5, [r1, #8]
   14968:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1496c:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   14970:	7a89      	ldrb	r1, [r1, #10]
   14972:	f361 1247 	bfi	r2, r1, #5, #3
   14976:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1497a:	f023 031f 	bic.w	r3, r3, #31
   1497e:	4423      	add	r3, r4
   14980:	3b01      	subs	r3, #1
   14982:	f023 031f 	bic.w	r3, r3, #31
   14986:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   14988:	4669      	mov	r1, sp
   1498a:	f7ff ffdc 	bl	14946 <region_allocate_and_init>
}
   1498e:	b005      	add	sp, #20
   14990:	bd30      	pop	{r4, r5, pc}

00014992 <arm_core_mpu_configure_static_mpu_regions>:
{
   14992:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14994:	f7f0 f81e 	bl	49d4 <mpu_configure_static_mpu_regions>
}
   14998:	bd08      	pop	{r3, pc}

0001499a <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1499a:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1499c:	f7f0 f824 	bl	49e8 <mpu_mark_areas_for_dynamic_regions>
}
   149a0:	bd08      	pop	{r3, pc}

000149a2 <malloc_prepare>:
}
   149a2:	2000      	movs	r0, #0
   149a4:	4770      	bx	lr

000149a6 <_stdout_hook_default>:
}
   149a6:	f04f 30ff 	mov.w	r0, #4294967295
   149aa:	4770      	bx	lr

000149ac <_stdin_hook_default>:
}
   149ac:	2000      	movs	r0, #0
   149ae:	4770      	bx	lr

000149b0 <_read>:
{
   149b0:	b508      	push	{r3, lr}
   149b2:	4608      	mov	r0, r1
   149b4:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   149b6:	f7f0 f8a7 	bl	4b08 <z_impl_zephyr_read_stdin>
}
   149ba:	bd08      	pop	{r3, pc}

000149bc <_write>:
{
   149bc:	b508      	push	{r3, lr}
   149be:	4608      	mov	r0, r1
   149c0:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   149c2:	f7f0 f8b7 	bl	4b34 <z_impl_zephyr_write_stdout>
}
   149c6:	bd08      	pop	{r3, pc}

000149c8 <_close>:
}
   149c8:	f04f 30ff 	mov.w	r0, #4294967295
   149cc:	4770      	bx	lr

000149ce <_lseek>:
}
   149ce:	2000      	movs	r0, #0
   149d0:	4770      	bx	lr

000149d2 <_isatty>:
}
   149d2:	2802      	cmp	r0, #2
   149d4:	bfcc      	ite	gt
   149d6:	2000      	movgt	r0, #0
   149d8:	2001      	movle	r0, #1
   149da:	4770      	bx	lr

000149dc <_kill>:
}
   149dc:	2000      	movs	r0, #0
   149de:	4770      	bx	lr

000149e0 <_getpid>:
}
   149e0:	2000      	movs	r0, #0
   149e2:	4770      	bx	lr

000149e4 <_fstat>:
	st->st_mode = S_IFCHR;
   149e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   149e8:	604b      	str	r3, [r1, #4]
}
   149ea:	2000      	movs	r0, #0
   149ec:	4770      	bx	lr

000149ee <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   149ee:	b510      	push	{r4, lr}
   149f0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   149f2:	2014      	movs	r0, #20
   149f4:	f7fe f88a 	bl	12b0c <malloc>
   149f8:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   149fa:	f003 fea1 	bl	18740 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   149fe:	bd10      	pop	{r4, pc}

00014a00 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   14a00:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   14a02:	f04f 32ff 	mov.w	r2, #4294967295
   14a06:	f04f 33ff 	mov.w	r3, #4294967295
   14a0a:	f7fc fe0b 	bl	11624 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   14a0e:	bd08      	pop	{r3, pc}

00014a10 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   14a10:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   14a12:	f7fc fe91 	bl	11738 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   14a16:	bd08      	pop	{r3, pc}

00014a18 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   14a18:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   14a1a:	f7fc fbcf 	bl	111bc <z_impl_z_errno>
	return z_errno();
}
   14a1e:	bd08      	pop	{r3, pc}

00014a20 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   14a20:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   14a22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   14a26:	0089      	lsls	r1, r1, #2
   14a28:	3180      	adds	r1, #128	; 0x80
}
   14a2a:	4408      	add	r0, r1
   14a2c:	4770      	bx	lr

00014a2e <get_sub_config>:
	const struct nrf_clock_control_config *config =
   14a2e:	6840      	ldr	r0, [r0, #4]
}
   14a30:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   14a34:	4770      	bx	lr

00014a36 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   14a36:	6900      	ldr	r0, [r0, #16]
}
   14a38:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   14a3c:	4770      	bx	lr

00014a3e <get_status>:
{
   14a3e:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   14a40:	b2c9      	uxtb	r1, r1
   14a42:	f7ff ffed 	bl	14a20 <get_sub_data>
   14a46:	6880      	ldr	r0, [r0, #8]
}
   14a48:	f000 0007 	and.w	r0, r0, #7
   14a4c:	bd08      	pop	{r3, pc}

00014a4e <set_off_state>:
	__asm__ volatile(
   14a4e:	f04f 0320 	mov.w	r3, #32
   14a52:	f3ef 8211 	mrs	r2, BASEPRI
   14a56:	f383 8812 	msr	BASEPRI_MAX, r3
   14a5a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14a5e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   14a60:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   14a64:	d001      	beq.n	14a6a <set_off_state+0x1c>
   14a66:	428b      	cmp	r3, r1
   14a68:	d107      	bne.n	14a7a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   14a6a:	2301      	movs	r3, #1
   14a6c:	6003      	str	r3, [r0, #0]
	int err = 0;
   14a6e:	2000      	movs	r0, #0
	__asm__ volatile(
   14a70:	f382 8811 	msr	BASEPRI, r2
   14a74:	f3bf 8f6f 	isb	sy
}
   14a78:	4770      	bx	lr
		err = -EPERM;
   14a7a:	f04f 30ff 	mov.w	r0, #4294967295
   14a7e:	e7f7      	b.n	14a70 <set_off_state+0x22>

00014a80 <set_starting_state>:
{
   14a80:	b410      	push	{r4}
	__asm__ volatile(
   14a82:	f04f 0320 	mov.w	r3, #32
   14a86:	f3ef 8211 	mrs	r2, BASEPRI
   14a8a:	f383 8812 	msr	BASEPRI_MAX, r3
   14a8e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14a92:	6803      	ldr	r3, [r0, #0]
   14a94:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   14a98:	f003 0307 	and.w	r3, r3, #7
   14a9c:	2b01      	cmp	r3, #1
   14a9e:	d009      	beq.n	14ab4 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   14aa0:	428c      	cmp	r4, r1
   14aa2:	d00a      	beq.n	14aba <set_starting_state+0x3a>
		err = -EPERM;
   14aa4:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   14aa8:	f382 8811 	msr	BASEPRI, r2
   14aac:	f3bf 8f6f 	isb	sy
}
   14ab0:	bc10      	pop	{r4}
   14ab2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   14ab4:	6001      	str	r1, [r0, #0]
	int err = 0;
   14ab6:	2000      	movs	r0, #0
   14ab8:	e7f6      	b.n	14aa8 <set_starting_state+0x28>
		err = -EALREADY;
   14aba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14abe:	e7f3      	b.n	14aa8 <set_starting_state+0x28>

00014ac0 <set_on_state>:
	__asm__ volatile(
   14ac0:	f04f 0320 	mov.w	r3, #32
   14ac4:	f3ef 8211 	mrs	r2, BASEPRI
   14ac8:	f383 8812 	msr	BASEPRI_MAX, r3
   14acc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   14ad0:	6803      	ldr	r3, [r0, #0]
   14ad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14ad6:	f043 0302 	orr.w	r3, r3, #2
   14ada:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   14adc:	f382 8811 	msr	BASEPRI, r2
   14ae0:	f3bf 8f6f 	isb	sy
}
   14ae4:	4770      	bx	lr

00014ae6 <clkstarted_handle>:
{
   14ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ae8:	4606      	mov	r6, r0
   14aea:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   14aec:	f7ff ff98 	bl	14a20 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   14af0:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   14af2:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   14af4:	2300      	movs	r3, #0
   14af6:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   14afa:	f7ff ffe1 	bl	14ac0 <set_on_state>
	if (callback) {
   14afe:	b11d      	cbz	r5, 14b08 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14b00:	463a      	mov	r2, r7
   14b02:	4621      	mov	r1, r4
   14b04:	4630      	mov	r0, r6
   14b06:	47a8      	blx	r5
}
   14b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014b0a <stop>:
{
   14b0a:	b570      	push	{r4, r5, r6, lr}
   14b0c:	4606      	mov	r6, r0
   14b0e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   14b10:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14b12:	4621      	mov	r1, r4
   14b14:	f7ff ff84 	bl	14a20 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   14b18:	4629      	mov	r1, r5
   14b1a:	3008      	adds	r0, #8
   14b1c:	f7ff ff97 	bl	14a4e <set_off_state>
	if (err < 0) {
   14b20:	2800      	cmp	r0, #0
   14b22:	db06      	blt.n	14b32 <stop+0x28>
	get_sub_config(dev, type)->stop();
   14b24:	4621      	mov	r1, r4
   14b26:	4630      	mov	r0, r6
   14b28:	f7ff ff81 	bl	14a2e <get_sub_config>
   14b2c:	6843      	ldr	r3, [r0, #4]
   14b2e:	4798      	blx	r3
	return 0;
   14b30:	2000      	movs	r0, #0
}
   14b32:	bd70      	pop	{r4, r5, r6, pc}

00014b34 <api_stop>:
{
   14b34:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   14b36:	2280      	movs	r2, #128	; 0x80
   14b38:	f7ff ffe7 	bl	14b0a <stop>
}
   14b3c:	bd08      	pop	{r3, pc}

00014b3e <async_start>:
{
   14b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b42:	4606      	mov	r6, r0
   14b44:	4690      	mov	r8, r2
   14b46:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   14b48:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14b4a:	4629      	mov	r1, r5
   14b4c:	f7ff ff68 	bl	14a20 <get_sub_data>
   14b50:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   14b52:	9906      	ldr	r1, [sp, #24]
   14b54:	3008      	adds	r0, #8
   14b56:	f7ff ff93 	bl	14a80 <set_starting_state>
	if (err < 0) {
   14b5a:	2800      	cmp	r0, #0
   14b5c:	db09      	blt.n	14b72 <async_start+0x34>
	subdata->cb = cb;
   14b5e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   14b62:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   14b64:	4629      	mov	r1, r5
   14b66:	4630      	mov	r0, r6
   14b68:	f7ff ff61 	bl	14a2e <get_sub_config>
   14b6c:	6803      	ldr	r3, [r0, #0]
   14b6e:	4798      	blx	r3
	return 0;
   14b70:	2000      	movs	r0, #0
}
   14b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014b76 <api_start>:
{
   14b76:	b510      	push	{r4, lr}
   14b78:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   14b7a:	2480      	movs	r4, #128	; 0x80
   14b7c:	9400      	str	r4, [sp, #0]
   14b7e:	f7ff ffde 	bl	14b3e <async_start>
}
   14b82:	b002      	add	sp, #8
   14b84:	bd10      	pop	{r4, pc}

00014b86 <onoff_started_callback>:
{
   14b86:	b510      	push	{r4, lr}
   14b88:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   14b8a:	b2c9      	uxtb	r1, r1
   14b8c:	f7ff ff53 	bl	14a36 <get_onoff_manager>
	notify(mgr, 0);
   14b90:	2100      	movs	r1, #0
   14b92:	47a0      	blx	r4
}
   14b94:	bd10      	pop	{r4, pc}

00014b96 <hfclk_start>:
{
   14b96:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14b98:	2001      	movs	r0, #1
   14b9a:	f7f1 fa0d 	bl	5fb8 <nrfx_clock_start>
}
   14b9e:	bd08      	pop	{r3, pc}

00014ba0 <hfclkaudio_start>:
{
   14ba0:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   14ba2:	2003      	movs	r0, #3
   14ba4:	f7f1 fa08 	bl	5fb8 <nrfx_clock_start>
}
   14ba8:	bd08      	pop	{r3, pc}

00014baa <hfclk192m_start>:
{
   14baa:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   14bac:	2002      	movs	r0, #2
   14bae:	f7f1 fa03 	bl	5fb8 <nrfx_clock_start>
}
   14bb2:	bd08      	pop	{r3, pc}

00014bb4 <lfclk_start>:
{
   14bb4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14bb6:	2000      	movs	r0, #0
   14bb8:	f7f1 f9fe 	bl	5fb8 <nrfx_clock_start>
}
   14bbc:	bd08      	pop	{r3, pc}

00014bbe <hfclk_stop>:
{
   14bbe:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14bc0:	2001      	movs	r0, #1
   14bc2:	f7f1 fa53 	bl	606c <nrfx_clock_stop>
}
   14bc6:	bd08      	pop	{r3, pc}

00014bc8 <hfclkaudio_stop>:
{
   14bc8:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   14bca:	2003      	movs	r0, #3
   14bcc:	f7f1 fa4e 	bl	606c <nrfx_clock_stop>
}
   14bd0:	bd08      	pop	{r3, pc}

00014bd2 <hfclk192m_stop>:
{
   14bd2:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   14bd4:	2002      	movs	r0, #2
   14bd6:	f7f1 fa49 	bl	606c <nrfx_clock_stop>
}
   14bda:	bd08      	pop	{r3, pc}

00014bdc <lfclk_stop>:
{
   14bdc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14bde:	2000      	movs	r0, #0
   14be0:	f7f1 fa44 	bl	606c <nrfx_clock_stop>
}
   14be4:	bd08      	pop	{r3, pc}

00014be6 <blocking_start_callback>:
{
   14be6:	b508      	push	{r3, lr}
   14be8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   14bea:	f7fc fde9 	bl	117c0 <z_impl_k_sem_give>
}
   14bee:	bd08      	pop	{r3, pc}

00014bf0 <debug_hook_out_nop>:
}
   14bf0:	2000      	movs	r0, #0
   14bf2:	4770      	bx	lr

00014bf4 <gpio_nrfx_port_get_raw>:
	return port->config;
   14bf4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14bf6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   14bf8:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   14bfa:	600b      	str	r3, [r1, #0]
}
   14bfc:	2000      	movs	r0, #0
   14bfe:	4770      	bx	lr

00014c00 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   14c00:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14c02:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   14c04:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   14c06:	4042      	eors	r2, r0
   14c08:	400a      	ands	r2, r1
   14c0a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   14c0c:	605a      	str	r2, [r3, #4]
}
   14c0e:	2000      	movs	r0, #0
   14c10:	4770      	bx	lr

00014c12 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   14c12:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14c14:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   14c16:	6099      	str	r1, [r3, #8]
}
   14c18:	2000      	movs	r0, #0
   14c1a:	4770      	bx	lr

00014c1c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   14c1c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14c1e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   14c20:	60d9      	str	r1, [r3, #12]
}
   14c22:	2000      	movs	r0, #0
   14c24:	4770      	bx	lr

00014c26 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   14c26:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14c28:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   14c2a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   14c2c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   14c2e:	6053      	str	r3, [r2, #4]
}
   14c30:	2000      	movs	r0, #0
   14c32:	4770      	bx	lr

00014c34 <gpio_nrfx_manage_callback>:
{
   14c34:	b470      	push	{r4, r5, r6}
	return port->data;
   14c36:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14c38:	1d05      	adds	r5, r0, #4
	return list->head;
   14c3a:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   14c3c:	b1db      	cbz	r3, 14c76 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   14c3e:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14c40:	2400      	movs	r4, #0
   14c42:	e00a      	b.n	14c5a <gpio_nrfx_manage_callback+0x26>
	return node->next;
   14c44:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   14c46:	6043      	str	r3, [r0, #4]
	return list->tail;
   14c48:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14c4a:	42a1      	cmp	r1, r4
   14c4c:	d10f      	bne.n	14c6e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   14c4e:	606b      	str	r3, [r5, #4]
}
   14c50:	e00d      	b.n	14c6e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   14c52:	606c      	str	r4, [r5, #4]
}
   14c54:	e00b      	b.n	14c6e <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14c56:	461c      	mov	r4, r3
   14c58:	681b      	ldr	r3, [r3, #0]
   14c5a:	b15b      	cbz	r3, 14c74 <gpio_nrfx_manage_callback+0x40>
   14c5c:	429e      	cmp	r6, r3
   14c5e:	d1fa      	bne.n	14c56 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   14c60:	2c00      	cmp	r4, #0
   14c62:	d0ef      	beq.n	14c44 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   14c64:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   14c66:	6023      	str	r3, [r4, #0]
	return list->tail;
   14c68:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14c6a:	4299      	cmp	r1, r3
   14c6c:	d0f1      	beq.n	14c52 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   14c6e:	2300      	movs	r3, #0
   14c70:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14c72:	e000      	b.n	14c76 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   14c74:	b152      	cbz	r2, 14c8c <gpio_nrfx_manage_callback+0x58>
	if (set) {
   14c76:	b162      	cbz	r2, 14c92 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   14c78:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   14c7a:	600b      	str	r3, [r1, #0]
	list->head = node;
   14c7c:	6041      	str	r1, [r0, #4]
	return list->tail;
   14c7e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14c80:	b10b      	cbz	r3, 14c86 <gpio_nrfx_manage_callback+0x52>
	return 0;
   14c82:	2000      	movs	r0, #0
   14c84:	e006      	b.n	14c94 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   14c86:	6069      	str	r1, [r5, #4]
   14c88:	2000      	movs	r0, #0
}
   14c8a:	e003      	b.n	14c94 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   14c8c:	f06f 0015 	mvn.w	r0, #21
   14c90:	e000      	b.n	14c94 <gpio_nrfx_manage_callback+0x60>
	return 0;
   14c92:	2000      	movs	r0, #0
}
   14c94:	bc70      	pop	{r4, r5, r6}
   14c96:	4770      	bx	lr

00014c98 <endtx_isr>:
	return dev->config;
   14c98:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14c9a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   14c9c:	f04f 0120 	mov.w	r1, #32
   14ca0:	f3ef 8211 	mrs	r2, BASEPRI
   14ca4:	f381 8812 	msr	BASEPRI_MAX, r1
   14ca8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cac:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   14cb0:	b131      	cbz	r1, 14cc0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14cb2:	2100      	movs	r1, #0
   14cb4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   14cb8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cbc:	2101      	movs	r1, #1
   14cbe:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   14cc0:	f382 8811 	msr	BASEPRI, r2
   14cc4:	f3bf 8f6f 	isb	sy
}
   14cc8:	4770      	bx	lr

00014cca <uarte_nrfx_isr_int>:
{
   14cca:	b538      	push	{r3, r4, r5, lr}
   14ccc:	4604      	mov	r4, r0
	return dev->config;
   14cce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14cd0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   14cd2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   14cd6:	f413 7f80 	tst.w	r3, #256	; 0x100
   14cda:	d003      	beq.n	14ce4 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cdc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   14ce0:	2b00      	cmp	r3, #0
   14ce2:	d139      	bne.n	14d58 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   14ce4:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14ce6:	685b      	ldr	r3, [r3, #4]
   14ce8:	f013 0f10 	tst.w	r3, #16
   14cec:	d01a      	beq.n	14d24 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   14cee:	f04f 0320 	mov.w	r3, #32
   14cf2:	f3ef 8211 	mrs	r2, BASEPRI
   14cf6:	f383 8812 	msr	BASEPRI_MAX, r3
   14cfa:	f3bf 8f6f 	isb	sy
   14cfe:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   14d02:	b113      	cbz	r3, 14d0a <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14d04:	2300      	movs	r3, #0
   14d06:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   14d0a:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   14d0c:	68db      	ldr	r3, [r3, #12]
   14d0e:	b10b      	cbz	r3, 14d14 <uarte_nrfx_isr_int+0x4a>
   14d10:	691b      	ldr	r3, [r3, #16]
   14d12:	b91b      	cbnz	r3, 14d1c <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   14d14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   14d18:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   14d1c:	f382 8811 	msr	BASEPRI, r2
   14d20:	f3bf 8f6f 	isb	sy
	return dev->data;
   14d24:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   14d26:	68da      	ldr	r2, [r3, #12]
   14d28:	b1aa      	cbz	r2, 14d56 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14d2a:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   14d2e:	b121      	cbz	r1, 14d3a <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   14d30:	2100      	movs	r1, #0
   14d32:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   14d34:	68da      	ldr	r2, [r3, #12]
   14d36:	7b92      	ldrb	r2, [r2, #14]
   14d38:	b98a      	cbnz	r2, 14d5e <uarte_nrfx_isr_int+0x94>
   14d3a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   14d3e:	b122      	cbz	r2, 14d4a <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d40:	2200      	movs	r2, #0
   14d42:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   14d46:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   14d4a:	68da      	ldr	r2, [r3, #12]
   14d4c:	6813      	ldr	r3, [r2, #0]
   14d4e:	b113      	cbz	r3, 14d56 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   14d50:	6851      	ldr	r1, [r2, #4]
   14d52:	4620      	mov	r0, r4
   14d54:	4798      	blx	r3
}
   14d56:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   14d58:	f7ff ff9e 	bl	14c98 <endtx_isr>
   14d5c:	e7c2      	b.n	14ce4 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   14d5e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   14d62:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   14d66:	68db      	ldr	r3, [r3, #12]
   14d68:	7399      	strb	r1, [r3, #14]
			return;
   14d6a:	e7f4      	b.n	14d56 <uarte_nrfx_isr_int+0x8c>

00014d6c <uarte_nrfx_configure>:
{
   14d6c:	b530      	push	{r4, r5, lr}
   14d6e:	b083      	sub	sp, #12
   14d70:	4605      	mov	r5, r0
   14d72:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   14d74:	794b      	ldrb	r3, [r1, #5]
   14d76:	2b01      	cmp	r3, #1
   14d78:	d006      	beq.n	14d88 <uarte_nrfx_configure+0x1c>
   14d7a:	2b03      	cmp	r3, #3
   14d7c:	d011      	beq.n	14da2 <uarte_nrfx_configure+0x36>
   14d7e:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   14d82:	4610      	mov	r0, r2
   14d84:	b003      	add	sp, #12
   14d86:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   14d88:	2300      	movs	r3, #0
   14d8a:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14d8e:	79a3      	ldrb	r3, [r4, #6]
   14d90:	2b03      	cmp	r3, #3
   14d92:	d14f      	bne.n	14e34 <uarte_nrfx_configure+0xc8>
	switch (cfg->flow_ctrl) {
   14d94:	79e3      	ldrb	r3, [r4, #7]
   14d96:	b143      	cbz	r3, 14daa <uarte_nrfx_configure+0x3e>
   14d98:	2b01      	cmp	r3, #1
   14d9a:	d015      	beq.n	14dc8 <uarte_nrfx_configure+0x5c>
   14d9c:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14da0:	e7ef      	b.n	14d82 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14da2:	2310      	movs	r3, #16
   14da4:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14da8:	e7f1      	b.n	14d8e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   14daa:	2300      	movs	r3, #0
   14dac:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   14db0:	2300      	movs	r3, #0
   14db2:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   14db6:	7923      	ldrb	r3, [r4, #4]
   14db8:	2b01      	cmp	r3, #1
   14dba:	d033      	beq.n	14e24 <uarte_nrfx_configure+0xb8>
   14dbc:	2b02      	cmp	r3, #2
   14dbe:	d02d      	beq.n	14e1c <uarte_nrfx_configure+0xb0>
   14dc0:	b173      	cbz	r3, 14de0 <uarte_nrfx_configure+0x74>
   14dc2:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14dc6:	e7dc      	b.n	14d82 <uarte_nrfx_configure+0x16>
	return dev->config;
   14dc8:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   14dca:	685b      	ldr	r3, [r3, #4]
   14dcc:	f003 0201 	and.w	r2, r3, #1
   14dd0:	f003 0302 	and.w	r3, r3, #2
   14dd4:	4313      	orrs	r3, r2
   14dd6:	d030      	beq.n	14e3a <uarte_nrfx_configure+0xce>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   14dd8:	2301      	movs	r3, #1
   14dda:	f88d 3000 	strb.w	r3, [sp]
		break;
   14dde:	e7e7      	b.n	14db0 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   14de0:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14de4:	6821      	ldr	r1, [r4, #0]
   14de6:	4628      	mov	r0, r5
   14de8:	f7f0 fb94 	bl	5514 <baudrate_set>
   14dec:	4602      	mov	r2, r0
   14dee:	bb38      	cbnz	r0, 14e40 <uarte_nrfx_configure+0xd4>
	return dev->config;
   14df0:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   14df2:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14df4:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   14df8:	f89d 0002 	ldrb.w	r0, [sp, #2]
   14dfc:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   14dfe:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   14e02:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   14e04:	f89d 0000 	ldrb.w	r0, [sp]
   14e08:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14e0a:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
   14e0e:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   14e10:	3304      	adds	r3, #4
   14e12:	e894 0003 	ldmia.w	r4, {r0, r1}
   14e16:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   14e1a:	e7b2      	b.n	14d82 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14e1c:	230e      	movs	r3, #14
   14e1e:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   14e22:	e7df      	b.n	14de4 <uarte_nrfx_configure+0x78>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14e24:	230e      	movs	r3, #14
   14e26:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   14e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
   14e2e:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   14e32:	e7d7      	b.n	14de4 <uarte_nrfx_configure+0x78>
		return -ENOTSUP;
   14e34:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14e38:	e7a3      	b.n	14d82 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   14e3a:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14e3e:	e7a0      	b.n	14d82 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   14e40:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14e44:	e79d      	b.n	14d82 <uarte_nrfx_configure+0x16>

00014e46 <uarte_nrfx_config_get>:
{
   14e46:	460b      	mov	r3, r1
	return dev->data;
   14e48:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   14e4a:	6891      	ldr	r1, [r2, #8]
   14e4c:	6850      	ldr	r0, [r2, #4]
   14e4e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   14e52:	2000      	movs	r0, #0
   14e54:	4770      	bx	lr

00014e56 <uarte_nrfx_err_check>:
	return dev->config;
   14e56:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e58:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14e5a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14e5e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   14e62:	4770      	bx	lr

00014e64 <is_tx_ready>:
	return dev->config;
   14e64:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e66:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   14e68:	685b      	ldr	r3, [r3, #4]
   14e6a:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14e6e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   14e72:	b929      	cbnz	r1, 14e80 <is_tx_ready+0x1c>
   14e74:	b933      	cbnz	r3, 14e84 <is_tx_ready+0x20>
   14e76:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   14e7a:	b92b      	cbnz	r3, 14e88 <is_tx_ready+0x24>
   14e7c:	2000      	movs	r0, #0
   14e7e:	4770      	bx	lr
   14e80:	2001      	movs	r0, #1
   14e82:	4770      	bx	lr
   14e84:	2000      	movs	r0, #0
   14e86:	4770      	bx	lr
   14e88:	2001      	movs	r0, #1
}
   14e8a:	4770      	bx	lr

00014e8c <uarte_enable>:
	return dev->config;
   14e8c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e8e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14e90:	2208      	movs	r2, #8
   14e92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   14e96:	4770      	bx	lr

00014e98 <tx_start>:
{
   14e98:	b510      	push	{r4, lr}
	return dev->config;
   14e9a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e9c:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14e9e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14ea2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ea6:	2300      	movs	r3, #0
   14ea8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14eac:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   14eb0:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   14eb4:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   14eb8:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14eba:	685b      	ldr	r3, [r3, #4]
   14ebc:	f013 0f10 	tst.w	r3, #16
   14ec0:	d102      	bne.n	14ec8 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ec2:	2301      	movs	r3, #1
   14ec4:	60a3      	str	r3, [r4, #8]
}
   14ec6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   14ec8:	2101      	movs	r1, #1
   14eca:	f7ff ffdf 	bl	14e8c <uarte_enable>
    p_reg->INTENSET = mask;
   14ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   14ed2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   14ed6:	e7f4      	b.n	14ec2 <tx_start+0x2a>

00014ed8 <uarte_nrfx_poll_in>:
{
   14ed8:	b410      	push	{r4}
	return dev->data;
   14eda:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   14edc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14ede:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ee0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14ee4:	b152      	cbz	r2, 14efc <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   14ee6:	7d62      	ldrb	r2, [r4, #21]
   14ee8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14eea:	2000      	movs	r0, #0
   14eec:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   14ef0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ef4:	2201      	movs	r2, #1
   14ef6:	601a      	str	r2, [r3, #0]
}
   14ef8:	bc10      	pop	{r4}
   14efa:	4770      	bx	lr
		return -1;
   14efc:	f04f 30ff 	mov.w	r0, #4294967295
   14f00:	e7fa      	b.n	14ef8 <uarte_nrfx_poll_in+0x20>

00014f02 <uarte_nrfx_fifo_fill>:
{
   14f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f06:	4680      	mov	r8, r0
	return dev->data;
   14f08:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   14f0a:	68fb      	ldr	r3, [r7, #12]
   14f0c:	899e      	ldrh	r6, [r3, #12]
   14f0e:	4296      	cmp	r6, r2
   14f10:	bfa8      	it	ge
   14f12:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   14f14:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14f16:	2201      	movs	r2, #1
   14f18:	e8d3 0fef 	ldaex	r0, [r3]
   14f1c:	2800      	cmp	r0, #0
   14f1e:	d103      	bne.n	14f28 <uarte_nrfx_fifo_fill+0x26>
   14f20:	e8c3 2fe4 	stlex	r4, r2, [r3]
   14f24:	2c00      	cmp	r4, #0
   14f26:	d1f7      	bne.n	14f18 <uarte_nrfx_fifo_fill+0x16>
   14f28:	d101      	bne.n	14f2e <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
   14f2a:	2300      	movs	r3, #0
   14f2c:	e006      	b.n	14f3c <uarte_nrfx_fifo_fill+0x3a>
		return 0;
   14f2e:	2600      	movs	r6, #0
   14f30:	e019      	b.n	14f66 <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
   14f32:	68fc      	ldr	r4, [r7, #12]
   14f34:	68a4      	ldr	r4, [r4, #8]
   14f36:	5ccd      	ldrb	r5, [r1, r3]
   14f38:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   14f3a:	3301      	adds	r3, #1
   14f3c:	42b3      	cmp	r3, r6
   14f3e:	dbf8      	blt.n	14f32 <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
   14f40:	f04f 0320 	mov.w	r3, #32
   14f44:	f3ef 8411 	mrs	r4, BASEPRI
   14f48:	f383 8812 	msr	BASEPRI_MAX, r3
   14f4c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   14f50:	4640      	mov	r0, r8
   14f52:	f7ff ff87 	bl	14e64 <is_tx_ready>
   14f56:	b948      	cbnz	r0, 14f6c <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
   14f58:	68fb      	ldr	r3, [r7, #12]
   14f5a:	2600      	movs	r6, #0
   14f5c:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   14f5e:	f384 8811 	msr	BASEPRI, r4
   14f62:	f3bf 8f6f 	isb	sy
}
   14f66:	4630      	mov	r0, r6
   14f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   14f6c:	68fb      	ldr	r3, [r7, #12]
   14f6e:	4632      	mov	r2, r6
   14f70:	6899      	ldr	r1, [r3, #8]
   14f72:	4640      	mov	r0, r8
   14f74:	f7ff ff90 	bl	14e98 <tx_start>
   14f78:	e7f1      	b.n	14f5e <uarte_nrfx_fifo_fill+0x5c>

00014f7a <uarte_nrfx_fifo_read>:
	return dev->config;
   14f7a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14f7c:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   14f7e:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14f80:	2a00      	cmp	r2, #0
   14f82:	dd0c      	ble.n	14f9e <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f84:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14f88:	b15a      	cbz	r2, 14fa2 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14f8a:	2200      	movs	r2, #0
   14f8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   14f90:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   14f94:	7d42      	ldrb	r2, [r0, #21]
   14f96:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14f98:	2001      	movs	r0, #1
   14f9a:	6018      	str	r0, [r3, #0]
}
   14f9c:	4770      	bx	lr
	int num_rx = 0;
   14f9e:	2000      	movs	r0, #0
   14fa0:	4770      	bx	lr
   14fa2:	2000      	movs	r0, #0
}
   14fa4:	4770      	bx	lr

00014fa6 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   14fa6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14fa8:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   14faa:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   14fac:	f04f 0020 	mov.w	r0, #32
   14fb0:	f3ef 8311 	mrs	r3, BASEPRI
   14fb4:	f380 8812 	msr	BASEPRI_MAX, r0
   14fb8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   14fbc:	68c9      	ldr	r1, [r1, #12]
   14fbe:	2000      	movs	r0, #0
   14fc0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   14fc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14fc6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   14fca:	f383 8811 	msr	BASEPRI, r3
   14fce:	f3bf 8f6f 	isb	sy
}
   14fd2:	4770      	bx	lr

00014fd4 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   14fd4:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   14fd6:	68db      	ldr	r3, [r3, #12]
   14fd8:	2201      	movs	r2, #1
   14fda:	739a      	strb	r2, [r3, #14]
}
   14fdc:	4770      	bx	lr

00014fde <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   14fde:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14fe0:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   14fe2:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   14fe4:	68db      	ldr	r3, [r3, #12]
   14fe6:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14fe8:	b94a      	cbnz	r2, 14ffe <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14fea:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   14fee:	b15a      	cbz	r2, 15008 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   14ff0:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14ff4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   14ff8:	d008      	beq.n	1500c <uarte_nrfx_irq_tx_ready_complete+0x2e>
   14ffa:	2001      	movs	r0, #1
   14ffc:	e000      	b.n	15000 <uarte_nrfx_irq_tx_ready_complete+0x22>
   14ffe:	2000      	movs	r0, #0
	if (ready) {
   15000:	b108      	cbz	r0, 15006 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   15002:	2200      	movs	r2, #0
   15004:	611a      	str	r2, [r3, #16]
}
   15006:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   15008:	2000      	movs	r0, #0
   1500a:	e7f9      	b.n	15000 <uarte_nrfx_irq_tx_ready_complete+0x22>
   1500c:	2000      	movs	r0, #0
   1500e:	e7f7      	b.n	15000 <uarte_nrfx_irq_tx_ready_complete+0x22>

00015010 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   15010:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15012:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15014:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   15018:	3800      	subs	r0, #0
   1501a:	bf18      	it	ne
   1501c:	2001      	movne	r0, #1
   1501e:	4770      	bx	lr

00015020 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   15020:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15022:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   15024:	2210      	movs	r2, #16
   15026:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1502a:	4770      	bx	lr

0001502c <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   1502c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1502e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   15030:	2210      	movs	r2, #16
   15032:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15036:	4770      	bx	lr

00015038 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   15038:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1503a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1503c:	f44f 7200 	mov.w	r2, #512	; 0x200
   15040:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   15044:	4770      	bx	lr

00015046 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   15046:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15048:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1504a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1504e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15052:	4770      	bx	lr

00015054 <uarte_nrfx_irq_is_pending>:
{
   15054:	b538      	push	{r3, r4, r5, lr}
   15056:	4604      	mov	r4, r0
	return dev->config;
   15058:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1505a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1505c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   15060:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   15064:	d106      	bne.n	15074 <uarte_nrfx_irq_is_pending+0x20>
   15066:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1506a:	f013 0f10 	tst.w	r3, #16
   1506e:	d107      	bne.n	15080 <uarte_nrfx_irq_is_pending+0x2c>
   15070:	2000      	movs	r0, #0
}
   15072:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   15074:	f7ff ffb3 	bl	14fde <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   15078:	2800      	cmp	r0, #0
   1507a:	d0f4      	beq.n	15066 <uarte_nrfx_irq_is_pending+0x12>
		||
   1507c:	2001      	movs	r0, #1
   1507e:	e7f8      	b.n	15072 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   15080:	4620      	mov	r0, r4
   15082:	f7ff ffc5 	bl	15010 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   15086:	2800      	cmp	r0, #0
   15088:	d0f3      	beq.n	15072 <uarte_nrfx_irq_is_pending+0x1e>
		||
   1508a:	2001      	movs	r0, #1
   1508c:	e7f1      	b.n	15072 <uarte_nrfx_irq_is_pending+0x1e>

0001508e <uarte_nrfx_irq_update>:
}
   1508e:	2001      	movs	r0, #1
   15090:	4770      	bx	lr

00015092 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   15092:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   15094:	68d8      	ldr	r0, [r3, #12]
   15096:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   15098:	68db      	ldr	r3, [r3, #12]
   1509a:	605a      	str	r2, [r3, #4]
}
   1509c:	4770      	bx	lr

0001509e <wait_tx_ready>:
{
   1509e:	b570      	push	{r4, r5, r6, lr}
   150a0:	4606      	mov	r6, r0
   150a2:	e014      	b.n	150ce <wait_tx_ready+0x30>
		if (res) {
   150a4:	b17d      	cbz	r5, 150c6 <wait_tx_ready+0x28>
	__asm__ volatile(
   150a6:	f04f 0320 	mov.w	r3, #32
   150aa:	f3ef 8411 	mrs	r4, BASEPRI
   150ae:	f383 8812 	msr	BASEPRI_MAX, r3
   150b2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   150b6:	4630      	mov	r0, r6
   150b8:	f7ff fed4 	bl	14e64 <is_tx_ready>
   150bc:	b9a0      	cbnz	r0, 150e8 <wait_tx_ready+0x4a>
	__asm__ volatile(
   150be:	f384 8811 	msr	BASEPRI, r4
   150c2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   150c6:	2021      	movs	r0, #33	; 0x21
   150c8:	2100      	movs	r1, #0
   150ca:	f7fc ff59 	bl	11f80 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   150ce:	2464      	movs	r4, #100	; 0x64
   150d0:	4630      	mov	r0, r6
   150d2:	f7ff fec7 	bl	14e64 <is_tx_ready>
   150d6:	4605      	mov	r5, r0
   150d8:	2800      	cmp	r0, #0
   150da:	d1e3      	bne.n	150a4 <wait_tx_ready+0x6>
   150dc:	2001      	movs	r0, #1
   150de:	f000 f8a1 	bl	15224 <nrfx_busy_wait>
   150e2:	3c01      	subs	r4, #1
   150e4:	d1f4      	bne.n	150d0 <wait_tx_ready+0x32>
   150e6:	e7dd      	b.n	150a4 <wait_tx_ready+0x6>
}
   150e8:	4620      	mov	r0, r4
   150ea:	bd70      	pop	{r4, r5, r6, pc}

000150ec <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   150ec:	b510      	push	{r4, lr}
   150ee:	4604      	mov	r4, r0
   150f0:	2200      	movs	r2, #0
   150f2:	2101      	movs	r1, #1
   150f4:	2008      	movs	r0, #8
   150f6:	f7ef f8b3 	bl	4260 <z_arm_irq_priority_set>
   150fa:	2008      	movs	r0, #8
   150fc:	f7ef f892 	bl	4224 <arch_irq_enable>
   15100:	2101      	movs	r1, #1
   15102:	4620      	mov	r0, r4
   15104:	f7f0 fb06 	bl	5714 <uarte_instance_init>
   15108:	bd10      	pop	{r4, pc}

0001510a <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1510a:	4770      	bx	lr

0001510c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1510c:	4770      	bx	lr

0001510e <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   1510e:	4770      	bx	lr

00015110 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   15110:	1a40      	subs	r0, r0, r1
}
   15112:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15116:	4770      	bx	lr

00015118 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   15118:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1511c:	009b      	lsls	r3, r3, #2
   1511e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15120:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   15124:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   15128:	2200      	movs	r2, #0
   1512a:	601a      	str	r2, [r3, #0]
   1512c:	681b      	ldr	r3, [r3, #0]
}
   1512e:	4770      	bx	lr

00015130 <absolute_time_to_cc>:
}
   15130:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15134:	4770      	bx	lr

00015136 <full_int_lock>:
	__asm__ volatile(
   15136:	f04f 0320 	mov.w	r3, #32
   1513a:	f3ef 8011 	mrs	r0, BASEPRI
   1513e:	f383 8812 	msr	BASEPRI_MAX, r3
   15142:	f3bf 8f6f 	isb	sy
}
   15146:	4770      	bx	lr

00015148 <full_int_unlock>:
	__asm__ volatile(
   15148:	f380 8811 	msr	BASEPRI, r0
   1514c:	f3bf 8f6f 	isb	sy
}
   15150:	4770      	bx	lr

00015152 <set_absolute_alarm>:
{
   15152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15154:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   15156:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1515a:	f7f0 fbad 	bl	58b8 <get_comparator>
   1515e:	4607      	mov	r7, r0
   15160:	e019      	b.n	15196 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   15162:	2013      	movs	r0, #19
   15164:	f003 fc78 	bl	18a58 <z_impl_k_busy_wait>
}
   15168:	e022      	b.n	151b0 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1516a:	4630      	mov	r0, r6
   1516c:	f7ff ffd4 	bl	15118 <event_clear>
		event_enable(chan);
   15170:	4630      	mov	r0, r6
   15172:	f7f0 fba9 	bl	58c8 <event_enable>
		set_comparator(chan, cc_val);
   15176:	4629      	mov	r1, r5
   15178:	4630      	mov	r0, r6
   1517a:	f7f0 fb93 	bl	58a4 <set_comparator>
		now2 = counter();
   1517e:	f7f0 fbb7 	bl	58f0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   15182:	4284      	cmp	r4, r0
   15184:	d01e      	beq.n	151c4 <set_absolute_alarm+0x72>
   15186:	1c81      	adds	r1, r0, #2
   15188:	4628      	mov	r0, r5
   1518a:	f7ff ffc1 	bl	15110 <counter_sub>
	} while ((now2 != now) &&
   1518e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15192:	d917      	bls.n	151c4 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   15194:	462f      	mov	r7, r5
		now = counter();
   15196:	f7f0 fbab 	bl	58f0 <counter>
   1519a:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1519c:	4601      	mov	r1, r0
   1519e:	4630      	mov	r0, r6
   151a0:	f7f0 fb80 	bl	58a4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   151a4:	4621      	mov	r1, r4
   151a6:	4638      	mov	r0, r7
   151a8:	f7ff ffb2 	bl	15110 <counter_sub>
   151ac:	2801      	cmp	r0, #1
   151ae:	d0d8      	beq.n	15162 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   151b0:	1ca7      	adds	r7, r4, #2
   151b2:	4639      	mov	r1, r7
   151b4:	4628      	mov	r0, r5
   151b6:	f7ff ffab 	bl	15110 <counter_sub>
   151ba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   151be:	d9d4      	bls.n	1516a <set_absolute_alarm+0x18>
			cc_val = now + 2;
   151c0:	463d      	mov	r5, r7
   151c2:	e7d2      	b.n	1516a <set_absolute_alarm+0x18>
}
   151c4:	4628      	mov	r0, r5
   151c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000151c8 <compare_set>:
{
   151c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   151ca:	b083      	sub	sp, #12
   151cc:	4604      	mov	r4, r0
   151ce:	4617      	mov	r7, r2
   151d0:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   151d2:	f7f0 fb93 	bl	58fc <compare_int_lock>
   151d6:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   151d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151da:	9301      	str	r3, [sp, #4]
   151dc:	9b08      	ldr	r3, [sp, #32]
   151de:	9300      	str	r3, [sp, #0]
   151e0:	463a      	mov	r2, r7
   151e2:	462b      	mov	r3, r5
   151e4:	4620      	mov	r0, r4
   151e6:	f7f0 fc67 	bl	5ab8 <compare_set_nolocks>
   151ea:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   151ec:	4631      	mov	r1, r6
   151ee:	4620      	mov	r0, r4
   151f0:	f7f0 fbde 	bl	59b0 <compare_int_unlock>
}
   151f4:	4628      	mov	r0, r5
   151f6:	b003      	add	sp, #12
   151f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000151fa <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   151fa:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   151fc:	2000      	movs	r0, #0
   151fe:	f7ef fa83 	bl	4708 <sys_arch_reboot>

00015202 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   15202:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   15204:	f7fd f8c4 	bl	12390 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   15208:	bd08      	pop	{r3, pc}

0001520a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1520a:	b510      	push	{r4, lr}
   1520c:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1520e:	f7ee ff01 	bl	4014 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   15212:	f7ee ffd5 	bl	41c0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   15216:	4620      	mov	r0, r4
   15218:	f7ff fff3 	bl	15202 <hw_cc3xx_init_internal>
	return res;
}
   1521c:	bd10      	pop	{r4, pc}

0001521e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   1521e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   15220:	4780      	blx	r0
}
   15222:	bd08      	pop	{r3, pc}

00015224 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   15224:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   15226:	f003 fc17 	bl	18a58 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1522a:	bd08      	pop	{r3, pc}

0001522c <nrfx_clock_enable>:
{
   1522c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1522e:	2005      	movs	r0, #5
   15230:	f7ef f808 	bl	4244 <arch_irq_is_enabled>
   15234:	b138      	cbz	r0, 15246 <nrfx_clock_enable+0x1a>
    p_reg->HFCLKSRC = (uint32_t)(source);
   15236:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1523a:	2201      	movs	r2, #1
   1523c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15240:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   15244:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15246:	2005      	movs	r0, #5
   15248:	f7ee ffec 	bl	4224 <arch_irq_enable>
   1524c:	e7f3      	b.n	15236 <nrfx_clock_enable+0xa>

0001524e <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1524e:	2301      	movs	r3, #1
   15250:	4083      	lsls	r3, r0
   15252:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   15256:	bf14      	ite	ne
   15258:	2001      	movne	r0, #1
   1525a:	2000      	moveq	r0, #0
   1525c:	4770      	bx	lr

0001525e <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   1525e:	4770      	bx	lr

00015260 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
   15260:	6903      	ldr	r3, [r0, #16]
   15262:	6183      	str	r3, [r0, #24]
   15264:	4770      	bx	lr

00015266 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   15266:	b510      	push	{r4, lr}
   15268:	4604      	mov	r4, r0
   1526a:	f003 fc04 	bl	18a76 <_ZdlPv>
   1526e:	4620      	mov	r0, r4
   15270:	bd10      	pop	{r4, pc}

00015272 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   15272:	b510      	push	{r4, lr}
   15274:	4604      	mov	r4, r0
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   15276:	4413      	add	r3, r2
   15278:	f7f1 f9b4 	bl	65e4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
   1527c:	4620      	mov	r0, r4
   1527e:	bd10      	pop	{r4, pc}

00015280 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
   15280:	6880      	ldr	r0, [r0, #8]
   15282:	4770      	bx	lr

00015284 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
   15284:	b570      	push	{r4, r5, r6, lr}
   15286:	4604      	mov	r4, r0
   15288:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
   1528a:	6980      	ldr	r0, [r0, #24]
   1528c:	f000 f823 	bl	152d6 <_ZN6tflite14AlignPointerUpEPhj>
   15290:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
   15292:	4631      	mov	r1, r6
   15294:	6960      	ldr	r0, [r4, #20]
   15296:	f000 f825 	bl	152e4 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
   1529a:	1b40      	subs	r0, r0, r5
   1529c:	bd70      	pop	{r4, r5, r6, pc}

0001529e <_ZN6tflite18MicroErrorReporterD1Ev>:
 public:
  ~MicroErrorReporter() override {}
   1529e:	4770      	bx	lr

000152a0 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
   152a0:	b508      	push	{r3, lr}
   152a2:	4608      	mov	r0, r1
  Log(format, args);
   152a4:	4611      	mov	r1, r2
   152a6:	f7f1 f9e3 	bl	6670 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
   152aa:	2000      	movs	r0, #0
   152ac:	bd08      	pop	{r3, pc}

000152ae <_ZN6tflite18MicroErrorReporterD0Ev>:
   152ae:	b510      	push	{r4, lr}
   152b0:	4604      	mov	r4, r0
   152b2:	f003 fbe0 	bl	18a76 <_ZdlPv>
   152b6:	4620      	mov	r0, r4
   152b8:	bd10      	pop	{r4, pc}

000152ba <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
   152ba:	b40f      	push	{r0, r1, r2, r3}
   152bc:	b500      	push	{lr}
   152be:	b083      	sub	sp, #12
   152c0:	a904      	add	r1, sp, #16
   152c2:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
   152c6:	9101      	str	r1, [sp, #4]
  Log(format, args);
   152c8:	f7f1 f9d2 	bl	6670 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
   152cc:	b003      	add	sp, #12
   152ce:	f85d eb04 	ldr.w	lr, [sp], #4
   152d2:	b004      	add	sp, #16
   152d4:	4770      	bx	lr

000152d6 <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   152d6:	4408      	add	r0, r1
   152d8:	3801      	subs	r0, #1
   152da:	fbb0 f0f1 	udiv	r0, r0, r1
}
   152de:	fb01 f000 	mul.w	r0, r1, r0
   152e2:	4770      	bx	lr

000152e4 <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   152e4:	fbb0 f0f1 	udiv	r0, r0, r1
}
   152e8:	fb01 f000 	mul.w	r0, r1, r0
   152ec:	4770      	bx	lr

000152ee <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   152ee:	4408      	add	r0, r1
   152f0:	3801      	subs	r0, #1
   152f2:	fbb0 f0f1 	udiv	r0, r0, r1
}
   152f6:	fb01 f000 	mul.w	r0, r1, r0
   152fa:	4770      	bx	lr

000152fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  switch (type) {
   152fc:	3801      	subs	r0, #1
   152fe:	280f      	cmp	r0, #15
   15300:	d83d      	bhi.n	1537e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x82>
   15302:	e8df f000 	tbb	[pc, r0]
   15306:	180c      	.short	0x180c
   15308:	303c2820 	.word	0x303c2820
   1530c:	08243414 	.word	0x08243414
   15310:	3c2c3810 	.word	0x3c2c3810
   15314:	1c3c      	.short	0x1c3c
      *size = sizeof(int16_t);
   15316:	2302      	movs	r3, #2
   15318:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1531a:	2000      	movs	r0, #0
      break;
   1531c:	4770      	bx	lr
      *size = sizeof(float);
   1531e:	2304      	movs	r3, #4
   15320:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15322:	2000      	movs	r0, #0
      break;
   15324:	4770      	bx	lr
      *size = sizeof(double);
   15326:	2308      	movs	r3, #8
   15328:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1532a:	2000      	movs	r0, #0
      break;
   1532c:	4770      	bx	lr
      *size = sizeof(int16_t);
   1532e:	2302      	movs	r3, #2
   15330:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15332:	2000      	movs	r0, #0
      break;
   15334:	4770      	bx	lr
      *size = sizeof(int32_t);
   15336:	2304      	movs	r3, #4
   15338:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1533a:	2000      	movs	r0, #0
      break;
   1533c:	4770      	bx	lr
      *size = sizeof(uint32_t);
   1533e:	2304      	movs	r3, #4
   15340:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15342:	2000      	movs	r0, #0
      break;
   15344:	4770      	bx	lr
      *size = sizeof(uint8_t);
   15346:	2301      	movs	r3, #1
   15348:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1534a:	2000      	movs	r0, #0
      break;
   1534c:	4770      	bx	lr
      *size = sizeof(int8_t);
   1534e:	2301      	movs	r3, #1
   15350:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15352:	2000      	movs	r0, #0
      break;
   15354:	4770      	bx	lr
      *size = sizeof(int64_t);
   15356:	2308      	movs	r3, #8
   15358:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1535a:	2000      	movs	r0, #0
      break;
   1535c:	4770      	bx	lr
      *size = sizeof(uint64_t);
   1535e:	2308      	movs	r3, #8
   15360:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15362:	2000      	movs	r0, #0
      break;
   15364:	4770      	bx	lr
      *size = sizeof(bool);
   15366:	2301      	movs	r3, #1
   15368:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1536a:	2000      	movs	r0, #0
      break;
   1536c:	4770      	bx	lr
      *size = sizeof(float) * 2;
   1536e:	2308      	movs	r3, #8
   15370:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15372:	2000      	movs	r0, #0
      break;
   15374:	4770      	bx	lr
      *size = sizeof(double) * 2;
   15376:	2310      	movs	r3, #16
   15378:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1537a:	2000      	movs	r0, #0
      break;
   1537c:	4770      	bx	lr
  return kTfLiteOk;
   1537e:	2001      	movs	r0, #1
}
   15380:	4770      	bx	lr

00015382 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
   15382:	b530      	push	{r4, r5, lr}
   15384:	b083      	sub	sp, #12
  TFLITE_DCHECK(out_bytes != nullptr);
   15386:	b129      	cbz	r1, 15394 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x12>
   15388:	460d      	mov	r5, r1

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
   1538a:	6842      	ldr	r2, [r0, #4]
   1538c:	b1c2      	cbz	r2, 153c0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   1538e:	2300      	movs	r3, #0
  int element_count = 1;
   15390:	2401      	movs	r4, #1
   15392:	e007      	b.n	153a4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  TFLITE_DCHECK(out_bytes != nullptr);
   15394:	f003 fb86 	bl	18aa4 <abort>
      element_count *= eval_tensor->dims->data[n];
   15398:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1539c:	6849      	ldr	r1, [r1, #4]
   1539e:	fb01 f404 	mul.w	r4, r1, r4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   153a2:	3301      	adds	r3, #1
   153a4:	6811      	ldr	r1, [r2, #0]
   153a6:	4299      	cmp	r1, r3
   153a8:	dcf6      	bgt.n	15398 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
   153aa:	a901      	add	r1, sp, #4
   153ac:	7a00      	ldrb	r0, [r0, #8]
   153ae:	f7ff ffa5 	bl	152fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   153b2:	b918      	cbnz	r0, 153bc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
   153b4:	9b01      	ldr	r3, [sp, #4]
   153b6:	fb03 f404 	mul.w	r4, r3, r4
   153ba:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
   153bc:	b003      	add	sp, #12
   153be:	bd30      	pop	{r4, r5, pc}
  int element_count = 1;
   153c0:	2401      	movs	r4, #1
   153c2:	e7f2      	b.n	153aa <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>

000153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
   153c4:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   153c6:	6800      	ldr	r0, [r0, #0]
   153c8:	f7fe fddd 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   153cc:	bd08      	pop	{r3, pc}

000153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
}
   153ce:	4770      	bx	lr

000153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>:
T ReadScalar(const void *p) {
   153d0:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   153d2:	6800      	ldr	r0, [r0, #0]
   153d4:	f7ff fffb 	bl	153ce <_ZN11flatbuffers12EndianScalarIiEET_S1_>
}
   153d8:	bd08      	pop	{r3, pc}

000153da <_ZN11flatbuffers12EndianScalarItEET_S1_>:
}
   153da:	4770      	bx	lr

000153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
   153dc:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   153de:	8800      	ldrh	r0, [r0, #0]
   153e0:	f7ff fffb 	bl	153da <_ZN11flatbuffers12EndianScalarItEET_S1_>
}
   153e4:	bd08      	pop	{r3, pc}

000153e6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
}
   153e6:	4770      	bx	lr

000153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
   153e8:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   153ea:	f990 0000 	ldrsb.w	r0, [r0]
   153ee:	f7ff fffa 	bl	153e6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
}
   153f2:	bd08      	pop	{r3, pc}

000153f4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
}
   153f4:	4770      	bx	lr

000153f6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:
  char* p2 = end - 1;
   153f6:	3901      	subs	r1, #1
  char* p1 = start;
   153f8:	4603      	mov	r3, r0
  while (p1 < p2) {
   153fa:	4288      	cmp	r0, r1
   153fc:	d20a      	bcs.n	15414 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x1e>
char* ReverseStringInPlace(char* start, char* end) {
   153fe:	b410      	push	{r4}
    char tmp = *p1;
   15400:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
   15402:	780c      	ldrb	r4, [r1, #0]
   15404:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
   15408:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
   1540c:	428b      	cmp	r3, r1
   1540e:	d3f7      	bcc.n	15400 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0xa>
}
   15410:	bc10      	pop	{r4}
   15412:	4770      	bx	lr
   15414:	4770      	bx	lr

00015416 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   15416:	b410      	push	{r4}
   15418:	4604      	mov	r4, r0
  while (*current != 0) {
   1541a:	7803      	ldrb	r3, [r0, #0]
   1541c:	b10b      	cbz	r3, 15422 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
   1541e:	3001      	adds	r0, #1
  while (*current != 0) {
   15420:	e7fb      	b.n	1541a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x4>
  char* current_end = main + (main_max_length - 1);
   15422:	3901      	subs	r1, #1
   15424:	4421      	add	r1, r4
  while ((*to_append != 0) && (current < current_end)) {
   15426:	7813      	ldrb	r3, [r2, #0]
   15428:	b12b      	cbz	r3, 15436 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
   1542a:	4288      	cmp	r0, r1
   1542c:	d203      	bcs.n	15436 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    *current = *to_append;
   1542e:	f800 3b01 	strb.w	r3, [r0], #1
    ++to_append;
   15432:	3201      	adds	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   15434:	e7f7      	b.n	15426 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  *current = 0;
   15436:	2300      	movs	r3, #0
   15438:	7003      	strb	r3, [r0, #0]
}
   1543a:	bc10      	pop	{r4}
   1543c:	4770      	bx	lr

0001543e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   1543e:	b538      	push	{r3, r4, r5, lr}
   15440:	4605      	mov	r5, r0
   15442:	4608      	mov	r0, r1
   15444:	460c      	mov	r4, r1
   15446:	e008      	b.n	1545a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1c>
      character = '0' + digit;
   15448:	3330      	adds	r3, #48	; 0x30
   1544a:	b2db      	uxtb	r3, r3
    *buffer++ = character;
   1544c:	f804 3b01 	strb.w	r3, [r4], #1
    i /= base;
   15450:	fbb5 f3f2 	udiv	r3, r5, r2
  } while (i > 0);
   15454:	42aa      	cmp	r2, r5
   15456:	d809      	bhi.n	1546c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    i /= base;
   15458:	461d      	mov	r5, r3
    int32_t digit = i % base;
   1545a:	fbb5 f3f2 	udiv	r3, r5, r2
   1545e:	fb02 5313 	mls	r3, r2, r3, r5
    if (digit < 10) {
   15462:	2b09      	cmp	r3, #9
   15464:	ddf0      	ble.n	15448 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xa>
      character = 'a' + (digit - 10);
   15466:	3357      	adds	r3, #87	; 0x57
   15468:	b2db      	uxtb	r3, r3
   1546a:	e7ef      	b.n	1544c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xe>
  *buffer = 0;
   1546c:	2300      	movs	r3, #0
   1546e:	7023      	strb	r3, [r4, #0]
  ReverseStringInPlace(start, buffer);
   15470:	4621      	mov	r1, r4
   15472:	f7ff ffc0 	bl	153f6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
}
   15476:	4620      	mov	r0, r4
   15478:	bd38      	pop	{r3, r4, r5, pc}

0001547a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>:
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
   1547a:	b508      	push	{r3, lr}
  if (i < 0) {
   1547c:	2800      	cmp	r0, #0
   1547e:	db03      	blt.n	15488 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0xe>
  return FastUInt32ToBufferLeft(u, buffer, 10);
   15480:	220a      	movs	r2, #10
   15482:	f7ff ffdc 	bl	1543e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   15486:	bd08      	pop	{r3, pc}
    *buffer++ = '-';
   15488:	222d      	movs	r2, #45	; 0x2d
   1548a:	f801 2b01 	strb.w	r2, [r1], #1
    u = -u;
   1548e:	4240      	negs	r0, r0
   15490:	e7f6      	b.n	15480 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0x6>

00015492 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>:
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
   15492:	b530      	push	{r4, r5, lr}
   15494:	b08d      	sub	sp, #52	; 0x34
   15496:	4604      	mov	r4, r0
   15498:	460d      	mov	r5, r1
  FastInt32ToBufferLeft(number, number_string);
   1549a:	4669      	mov	r1, sp
   1549c:	4610      	mov	r0, r2
   1549e:	f7ff ffec 	bl	1547a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
  return StrCatStr(main, main_max_length, number_string);
   154a2:	466a      	mov	r2, sp
   154a4:	4629      	mov	r1, r5
   154a6:	4620      	mov	r0, r4
   154a8:	f7ff ffb5 	bl	15416 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   154ac:	b00d      	add	sp, #52	; 0x34
   154ae:	bd30      	pop	{r4, r5, pc}

000154b0 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>:
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
   154b0:	b530      	push	{r4, r5, lr}
   154b2:	b08d      	sub	sp, #52	; 0x34
   154b4:	4604      	mov	r4, r0
   154b6:	460d      	mov	r5, r1
   154b8:	4610      	mov	r0, r2
  FastUInt32ToBufferLeft(number, number_string, base);
   154ba:	461a      	mov	r2, r3
   154bc:	4669      	mov	r1, sp
   154be:	f7ff ffbe 	bl	1543e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   154c2:	466a      	mov	r2, sp
   154c4:	4629      	mov	r1, r5
   154c6:	4620      	mov	r0, r4
   154c8:	f7ff ffa5 	bl	15416 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   154cc:	b00d      	add	sp, #52	; 0x34
   154ce:	bd30      	pop	{r4, r5, pc}

000154d0 <_ZN12_GLOBAL__N_111FormatInt32EPci>:
int FormatInt32(char* output, int32_t i) {
   154d0:	b510      	push	{r4, lr}
   154d2:	4604      	mov	r4, r0
   154d4:	4608      	mov	r0, r1
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
   154d6:	4621      	mov	r1, r4
   154d8:	f7ff ffcf 	bl	1547a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
}
   154dc:	1b00      	subs	r0, r0, r4
   154de:	bd10      	pop	{r4, pc}

000154e0 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>:
int FormatUInt32(char* output, uint32_t i) {
   154e0:	b510      	push	{r4, lr}
   154e2:	4604      	mov	r4, r0
   154e4:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   154e6:	220a      	movs	r2, #10
   154e8:	4621      	mov	r1, r4
   154ea:	f7ff ffa8 	bl	1543e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   154ee:	1b00      	subs	r0, r0, r4
   154f0:	bd10      	pop	{r4, pc}

000154f2 <_ZN12_GLOBAL__N_19FormatHexEPcj>:
int FormatHex(char* output, uint32_t i) {
   154f2:	b510      	push	{r4, lr}
   154f4:	4604      	mov	r4, r0
   154f6:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   154f8:	2210      	movs	r2, #16
   154fa:	4621      	mov	r1, r4
   154fc:	f7ff ff9f 	bl	1543e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   15500:	1b00      	subs	r0, r0, r4
   15502:	bd10      	pop	{r4, pc}

00015504 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:
int FormatFloat(char* output, float i) {
   15504:	b510      	push	{r4, lr}
   15506:	4604      	mov	r4, r0
   15508:	4608      	mov	r0, r1
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   1550a:	4621      	mov	r1, r4
   1550c:	f7f1 f94a 	bl	67a4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
}
   15510:	1b00      	subs	r0, r0, r4
   15512:	bd10      	pop	{r4, pc}

00015514 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   15514:	4602      	mov	r2, r0
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   15516:	2300      	movs	r3, #0
  int result = 1;
   15518:	2001      	movs	r0, #1
  for (int i = 0; i < dims.size; ++i) {
   1551a:	6811      	ldr	r1, [r2, #0]
   1551c:	4299      	cmp	r1, r3
   1551e:	dd06      	ble.n	1552e <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
   15520:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   15524:	6849      	ldr	r1, [r1, #4]
   15526:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
   1552a:	3301      	adds	r3, #1
   1552c:	e7f5      	b.n	1551a <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x6>
  }
  return result;
}
   1552e:	4770      	bx	lr

00015530 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
   15530:	b538      	push	{r3, r4, r5, lr}
   15532:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   15534:	f7ff ff4c 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15538:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   1553a:	4628      	mov	r0, r5
   1553c:	f7ff ff4e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15540:	280a      	cmp	r0, #10
   15542:	d90e      	bls.n	15562 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
   15544:	f105 000a 	add.w	r0, r5, #10
   15548:	f7ff ff48 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   1554c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1554e:	b150      	cbz	r0, 15566 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x36>
   15550:	4620      	mov	r0, r4
   15552:	f7ff ff37 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   15556:	4420      	add	r0, r4
  if (subgraph->operators() != nullptr) {
   15558:	b138      	cbz	r0, 1556a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x3a>
  uoffset_t size() const { return EndianScalar(length_); }
   1555a:	6800      	ldr	r0, [r0, #0]
   1555c:	f7fe fd13 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   15560:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15562:	2000      	movs	r0, #0
   15564:	e7f2      	b.n	1554c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15566:	2000      	movs	r0, #0
   15568:	e7f6      	b.n	15558 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    return 0;
   1556a:	2000      	movs	r0, #0
   1556c:	e7f8      	b.n	15560 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>

0001556e <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
   1556e:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   15570:	7800      	ldrb	r0, [r0, #0]
   15572:	f7ff ff3f 	bl	153f4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
}
   15576:	bd08      	pop	{r3, pc}

00015578 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
}
   15578:	4770      	bx	lr

0001557a <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
   1557a:	4770      	bx	lr

0001557c <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
   1557c:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   1557e:	6800      	ldr	r0, [r0, #0]
   15580:	f7ff fffb 	bl	1557a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
}
   15584:	bd08      	pop	{r3, pc}

00015586 <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
   15586:	4770      	bx	lr

00015588 <_ZN6tflite10MicroGraphD0Ev>:
   15588:	b510      	push	{r4, lr}
   1558a:	4604      	mov	r4, r0
   1558c:	f003 fa73 	bl	18a76 <_ZdlPv>
   15590:	4620      	mov	r0, r4
   15592:	bd10      	pop	{r4, pc}

00015594 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
   15594:	6101      	str	r1, [r0, #16]
}
   15596:	4770      	bx	lr

00015598 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
   15598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1559c:	4606      	mov	r6, r0
  int previous_subgraph_idx = current_subgraph_index_;
   1559e:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   155a2:	2700      	movs	r7, #0
   155a4:	e017      	b.n	155d6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3e>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
   155a6:	6961      	ldr	r1, [r4, #20]
        init_data_size = 0;
   155a8:	2200      	movs	r2, #0
      if (registration->init) {
   155aa:	681b      	ldr	r3, [r3, #0]
   155ac:	b113      	cbz	r3, 155b4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1c>
            registration->init(context_, init_data, init_data_size);
   155ae:	6870      	ldr	r0, [r6, #4]
   155b0:	4798      	blx	r3
        node->user_data =
   155b2:	6120      	str	r0, [r4, #16]
    for (size_t i = 0; i < operators_size; ++i) {
   155b4:	3501      	adds	r5, #1
   155b6:	4545      	cmp	r5, r8
   155b8:	d20c      	bcs.n	155d4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   155ba:	6933      	ldr	r3, [r6, #16]
   155bc:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
   155c0:	242c      	movs	r4, #44	; 0x2c
   155c2:	fb04 3405 	mla	r4, r4, r5, r3
      const TfLiteRegistration* registration =
   155c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   155c8:	695a      	ldr	r2, [r3, #20]
   155ca:	2a20      	cmp	r2, #32
   155cc:	d1eb      	bne.n	155a6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
   155ce:	69a1      	ldr	r1, [r4, #24]
        init_data_size = node->custom_initial_data_size;
   155d0:	69e2      	ldr	r2, [r4, #28]
   155d2:	e7ea      	b.n	155aa <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   155d4:	3701      	adds	r7, #1
   155d6:	69b3      	ldr	r3, [r6, #24]
  uoffset_t size() const { return EndianScalar(length_); }
   155d8:	6818      	ldr	r0, [r3, #0]
   155da:	f7fe fcd4 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   155de:	4287      	cmp	r7, r0
   155e0:	d207      	bcs.n	155f2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
   155e2:	6177      	str	r7, [r6, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   155e4:	4639      	mov	r1, r7
   155e6:	68b0      	ldr	r0, [r6, #8]
   155e8:	f7f1 fa32 	bl	6a50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   155ec:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
   155ee:	2500      	movs	r5, #0
   155f0:	e7e1      	b.n	155b6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1e>
  current_subgraph_index_ = previous_subgraph_idx;
   155f2:	f8c6 9014 	str.w	r9, [r6, #20]
}
   155f6:	2000      	movs	r0, #0
   155f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000155fc <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
   155fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15600:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
   15602:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   15606:	2600      	movs	r6, #0
   15608:	e013      	b.n	15632 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x36>
    for (size_t i = 0; i < operators_size; ++i) {
   1560a:	3401      	adds	r4, #1
   1560c:	42bc      	cmp	r4, r7
   1560e:	d20f      	bcs.n	15630 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x34>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   15610:	692b      	ldr	r3, [r5, #16]
   15612:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
   15616:	232c      	movs	r3, #44	; 0x2c
   15618:	fb03 2304 	mla	r3, r3, r4, r2
      const TfLiteRegistration* registration =
   1561c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
   1561e:	2a00      	cmp	r2, #0
   15620:	d0f3      	beq.n	1560a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
   15622:	6852      	ldr	r2, [r2, #4]
   15624:	2a00      	cmp	r2, #0
   15626:	d0f0      	beq.n	1560a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
        registration->free(context_, node->user_data);
   15628:	6919      	ldr	r1, [r3, #16]
   1562a:	6868      	ldr	r0, [r5, #4]
   1562c:	4790      	blx	r2
   1562e:	e7ec      	b.n	1560a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   15630:	3601      	adds	r6, #1
   15632:	69ab      	ldr	r3, [r5, #24]
   15634:	6818      	ldr	r0, [r3, #0]
   15636:	f7fe fca6 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   1563a:	4286      	cmp	r6, r0
   1563c:	d207      	bcs.n	1564e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x52>
    current_subgraph_index_ = subgraph_idx;
   1563e:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   15640:	4631      	mov	r1, r6
   15642:	68a8      	ldr	r0, [r5, #8]
   15644:	f7f1 fa04 	bl	6a50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   15648:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
   1564a:	2400      	movs	r4, #0
   1564c:	e7de      	b.n	1560c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
   1564e:	f8c5 8014 	str.w	r8, [r5, #20]
}
   15652:	2000      	movs	r0, #0
   15654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015658 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
   15658:	b538      	push	{r3, r4, r5, lr}
   1565a:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
   1565c:	4620      	mov	r0, r4
   1565e:	f7ff feb7 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15662:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15664:	4628      	mov	r0, r5
   15666:	f7ff feb9 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1566a:	2808      	cmp	r0, #8
   1566c:	d90d      	bls.n	1568a <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x32>
   1566e:	f105 0008 	add.w	r0, r5, #8
   15672:	f7ff feb3 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   15676:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15678:	b148      	cbz	r0, 1568e <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x36>
   1567a:	4620      	mov	r0, r4
   1567c:	f7ff fea2 	bl	153c4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   15680:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
   15682:	6820      	ldr	r0, [r4, #0]
   15684:	f7fe fc7f 	bl	13f86 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   15688:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1568a:	2000      	movs	r0, #0
   1568c:	e7f3      	b.n	15676 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1568e:	2400      	movs	r4, #0
   15690:	e7f7      	b.n	15682 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x2a>

00015692 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
   15692:	b508      	push	{r3, lr}
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
   15694:	68c3      	ldr	r3, [r0, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
   15696:	6e98      	ldr	r0, [r3, #104]	; 0x68
   15698:	6803      	ldr	r3, [r0, #0]
   1569a:	68db      	ldr	r3, [r3, #12]
   1569c:	4798      	blx	r3
}
   1569e:	bd08      	pop	{r3, pc}

000156a0 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:
  return interpreter->allocator_.RequestScratchBufferInArena(
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
   156a0:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
   156a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  return handle->data;
}
   156a6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   156aa:	4770      	bx	lr

000156ac <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
   156ac:	b570      	push	{r4, r5, r6, lr}
   156ae:	b082      	sub	sp, #8
   156b0:	460b      	mov	r3, r1
  MicroInterpreter* interpreter =
   156b2:	68c4      	ldr	r4, [r0, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   156b4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
   156b6:	6802      	ldr	r2, [r0, #0]
   156b8:	6855      	ldr	r5, [r2, #4]
   156ba:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   156bc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   156c0:	6821      	ldr	r1, [r4, #0]
   156c2:	9600      	str	r6, [sp, #0]
   156c4:	47a8      	blx	r5
}
   156c6:	b002      	add	sp, #8
   156c8:	bd70      	pop	{r4, r5, r6, pc}

000156ca <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
   156ca:	68c2      	ldr	r2, [r0, #12]
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   156cc:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   156ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
   156d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
              .tensors[tensor_idx];
   156d6:	6858      	ldr	r0, [r3, #4]
   156d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   156dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   156e0:	4770      	bx	lr

000156e2 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
   156e2:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
   156e4:	336c      	adds	r3, #108	; 0x6c
   156e6:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
}
   156e8:	2000      	movs	r0, #0
   156ea:	4770      	bx	lr

000156ec <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                           int* buffer_idx) {
   156ec:	b508      	push	{r3, lr}
   156ee:	4613      	mov	r3, r2
  MicroInterpreter* interpreter =
   156f0:	68c0      	ldr	r0, [r0, #12]
  return interpreter->allocator_.RequestScratchBufferInArena(
   156f2:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
   156f6:	6e80      	ldr	r0, [r0, #104]	; 0x68
   156f8:	f7f2 fb48 	bl	7d8c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
}
   156fc:	bd08      	pop	{r3, pc}

000156fe <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
   156fe:	b40e      	push	{r1, r2, r3}
   15700:	b500      	push	{lr}
   15702:	b082      	sub	sp, #8
   15704:	aa03      	add	r2, sp, #12
   15706:	f852 1b04 	ldr.w	r1, [r2], #4
  MicroInterpreter* interpreter =
   1570a:	68c3      	ldr	r3, [r0, #12]
  va_start(args, format);
   1570c:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
   1570e:	6898      	ldr	r0, [r3, #8]
   15710:	6803      	ldr	r3, [r0, #0]
   15712:	689b      	ldr	r3, [r3, #8]
   15714:	4798      	blx	r3
}
   15716:	b002      	add	sp, #8
   15718:	f85d eb04 	ldr.w	lr, [sp], #4
   1571c:	b003      	add	sp, #12
   1571e:	4770      	bx	lr

00015720 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   15720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15724:	4604      	mov	r4, r0
   15726:	460d      	mov	r5, r1
   15728:	461e      	mov	r6, r3
   1572a:	f8dd 801c 	ldr.w	r8, [sp, #28]
      output_tensors_(nullptr) {
   1572e:	6001      	str	r1, [r0, #0]
   15730:	6042      	str	r2, [r0, #4]
   15732:	f8c0 8008 	str.w	r8, [r0, #8]
   15736:	f100 070c 	add.w	r7, r0, #12
   1573a:	225c      	movs	r2, #92	; 0x5c
   1573c:	2100      	movs	r1, #0
   1573e:	4638      	mov	r0, r7
   15740:	f003 f9e4 	bl	18b0c <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   15744:	4642      	mov	r2, r8
   15746:	9906      	ldr	r1, [sp, #24]
   15748:	4630      	mov	r0, r6
   1574a:	f000 f90a 	bl	15962 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
   1574e:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
   15750:	66a0      	str	r0, [r4, #104]	; 0x68
   15752:	462a      	mov	r2, r5
   15754:	4639      	mov	r1, r7
   15756:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   1575a:	f7f1 fa6f 	bl	6c3c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
   1575e:	2300      	movs	r3, #0
   15760:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
   15764:	2201      	movs	r2, #1
   15766:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
   1576a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1576e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   15772:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  Init(profiler);
   15776:	9908      	ldr	r1, [sp, #32]
   15778:	4620      	mov	r0, r4
   1577a:	f7f1 fcef 	bl	715c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
   1577e:	4620      	mov	r0, r4
   15780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015784 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   15784:	b510      	push	{r4, lr}
   15786:	4604      	mov	r4, r0
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   15788:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  if (graph_.GetAllocations() != nullptr) {
   1578a:	b113      	cbz	r3, 15792 <_ZN6tflite16MicroInterpreterD1Ev+0xe>
    graph_.FreeSubgraphs();
   1578c:	306c      	adds	r0, #108	; 0x6c
   1578e:	f7ff ff35 	bl	155fc <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
   15792:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   15796:	f7ff fef6 	bl	15586 <_ZN6tflite10MicroGraphD1Ev>
}
   1579a:	4620      	mov	r0, r4
   1579c:	bd10      	pop	{r4, pc}

0001579e <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
   1579e:	b508      	push	{r3, lr}
  return graph_.ResetVariableTensors();
   157a0:	306c      	adds	r0, #108	; 0x6c
   157a2:	f7f1 fbe7 	bl	6f74 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
   157a6:	bd08      	pop	{r3, pc}

000157a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  void* Allocate(size_t size, size_t alignment_hint) override {
   157a8:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   157aa:	6840      	ldr	r0, [r0, #4]
   157ac:	6803      	ldr	r3, [r0, #0]
   157ae:	68db      	ldr	r3, [r3, #12]
   157b0:	4798      	blx	r3
  }
   157b2:	bd08      	pop	{r3, pc}

000157b4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   157b4:	4770      	bx	lr

000157b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
   157b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   157b8:	6844      	ldr	r4, [r0, #4]
   157ba:	6843      	ldr	r3, [r0, #4]
   157bc:	6885      	ldr	r5, [r0, #8]
   157be:	441d      	add	r5, r3
   157c0:	42a5      	cmp	r5, r4
   157c2:	d91a      	bls.n	157fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x44>
        &(scratch_buffer_requests[i - tensor_count_]);
   157c4:	1ae3      	subs	r3, r4, r3
    internal::ScratchBufferRequest* current_request =
   157c6:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
    ScratchBufferHandle* current_handle =
   157ca:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    AllocationInfo* current = &info_[i];
   157ce:	6806      	ldr	r6, [r0, #0]
   157d0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   157d4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
   157d8:	f8c5 e004 	str.w	lr, [r5, #4]
    current->bytes = current_request->bytes;
   157dc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   157e0:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    current->first_created = current_request->node_idx;
   157e4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   157e8:	60ab      	str	r3, [r5, #8]
    current->last_used = current_request->node_idx;
   157ea:	60eb      	str	r3, [r5, #12]
    current->offline_offset = kOnlinePlannedBuffer;
   157ec:	f04f 33ff 	mov.w	r3, #4294967295
   157f0:	612b      	str	r3, [r5, #16]
    current->needs_allocating = true;
   157f2:	2301      	movs	r3, #1
   157f4:	752b      	strb	r3, [r5, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   157f6:	441c      	add	r4, r3
   157f8:	e7df      	b.n	157ba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x4>
}
   157fa:	2000      	movs	r0, #0
   157fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000157fe <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   157fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15802:	b085      	sub	sp, #20
   15804:	9001      	str	r0, [sp, #4]
   15806:	4688      	mov	r8, r1
   15808:	4693      	mov	fp, r2
   1580a:	461f      	mov	r7, r3
   1580c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  for (size_t i = 0; i < allocation_info_size; ++i) {
   15810:	2400      	movs	r4, #0
  int planner_index = 0;
   15812:	4626      	mov	r6, r4
   15814:	e000      	b.n	15818 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x1a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   15816:	3401      	adds	r4, #1
   15818:	454c      	cmp	r4, r9
   1581a:	d21a      	bcs.n	15852 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x54>
    const AllocationInfo* current = &allocation_info[i];
   1581c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   15820:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    if (current->needs_allocating) {
   15824:	7d2b      	ldrb	r3, [r5, #20]
   15826:	2b00      	cmp	r3, #0
   15828:	d0f5      	beq.n	15816 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
      int offset = -1;
   1582a:	f04f 33ff 	mov.w	r3, #4294967295
   1582e:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
   15830:	f8d8 3000 	ldr.w	r3, [r8]
   15834:	f8d3 a014 	ldr.w	sl, [r3, #20]
   15838:	ab03      	add	r3, sp, #12
   1583a:	4632      	mov	r2, r6
   1583c:	9901      	ldr	r1, [sp, #4]
   1583e:	4640      	mov	r0, r8
   15840:	47d0      	blx	sl
   15842:	4603      	mov	r3, r0
   15844:	b930      	cbnz	r0, 15854 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x56>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   15846:	686a      	ldr	r2, [r5, #4]
   15848:	9b03      	ldr	r3, [sp, #12]
   1584a:	445b      	add	r3, fp
   1584c:	6013      	str	r3, [r2, #0]
      ++planner_index;
   1584e:	3601      	adds	r6, #1
   15850:	e7e1      	b.n	15816 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
  return kTfLiteOk;
   15852:	2300      	movs	r3, #0
}
   15854:	4618      	mov	r0, r3
   15856:	b005      	add	sp, #20
   15858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001585c <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   1585c:	4770      	bx	lr

0001585e <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
   1585e:	b508      	push	{r3, lr}
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   15860:	6840      	ldr	r0, [r0, #4]
   15862:	6803      	ldr	r3, [r0, #0]
   15864:	68db      	ldr	r3, [r3, #12]
   15866:	2210      	movs	r2, #16
   15868:	4798      	blx	r3
}
   1586a:	bd08      	pop	{r3, pc}

0001586c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
void MicroAllocator::ResetTempAllocations() {
   1586c:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
   1586e:	6840      	ldr	r0, [r0, #4]
   15870:	6803      	ldr	r3, [r0, #0]
   15872:	695b      	ldr	r3, [r3, #20]
   15874:	4798      	blx	r3
}
   15876:	bd08      	pop	{r3, pc}

00015878 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
   15878:	b508      	push	{r3, lr}
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   1587a:	6840      	ldr	r0, [r0, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
   1587c:	6803      	ldr	r3, [r0, #0]
   1587e:	68db      	ldr	r3, [r3, #12]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   15880:	2204      	movs	r2, #4
   15882:	2140      	movs	r1, #64	; 0x40
   15884:	4798      	blx	r3
}
   15886:	bd08      	pop	{r3, pc}

00015888 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   15888:	4770      	bx	lr

0001588a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
   1588a:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   1588c:	b161      	cbz	r1, 158a8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
   1588e:	4613      	mov	r3, r2
   15890:	460c      	mov	r4, r1

  if (scratch_buffer_request_count_ == 0) {
   15892:	6942      	ldr	r2, [r0, #20]
   15894:	b132      	cbz	r2, 158a4 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
   15896:	6840      	ldr	r0, [r0, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
   15898:	6802      	ldr	r2, [r0, #0]
   1589a:	68d5      	ldr	r5, [r2, #12]
      memory_allocator_->AllocateFromTail(
   1589c:	2204      	movs	r2, #4
   1589e:	0099      	lsls	r1, r3, #2
   158a0:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
   158a2:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
   158a4:	2000      	movs	r0, #0
   158a6:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   158a8:	f003 f8fc 	bl	18aa4 <abort>

000158ac <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   158ac:	b510      	push	{r4, lr}
   158ae:	4604      	mov	r4, r0
   158b0:	f003 f8e1 	bl	18a76 <_ZdlPv>
   158b4:	4620      	mov	r0, r4
   158b6:	bd10      	pop	{r4, pc}

000158b8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   158b8:	b510      	push	{r4, lr}
   158ba:	4604      	mov	r4, r0
   158bc:	f003 f8db 	bl	18a76 <_ZdlPv>
   158c0:	4620      	mov	r0, r4
   158c2:	bd10      	pop	{r4, pc}

000158c4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   158c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   158c8:	b082      	sub	sp, #8
   158ca:	4682      	mov	sl, r0
   158cc:	4689      	mov	r9, r1
   158ce:	4617      	mov	r7, r2
   158d0:	4698      	mov	r8, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
   158d2:	2500      	movs	r5, #0
   158d4:	e00a      	b.n	158ec <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x28>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   158d6:	68e1      	ldr	r1, [r4, #12]
   158d8:	9301      	str	r3, [sp, #4]
   158da:	9100      	str	r1, [sp, #0]
   158dc:	68a3      	ldr	r3, [r4, #8]
   158de:	4651      	mov	r1, sl
   158e0:	4648      	mov	r0, r9
   158e2:	f000 f8c9 	bl	15a78 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   158e6:	4603      	mov	r3, r0
   158e8:	bb08      	cbnz	r0, 1592e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   158ea:	3501      	adds	r5, #1
   158ec:	4545      	cmp	r5, r8
   158ee:	d21d      	bcs.n	1592c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x68>
    const AllocationInfo* current = &allocation_info[i];
   158f0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   158f4:	00e3      	lsls	r3, r4, #3
   158f6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    if (current->needs_allocating) {
   158fa:	7d26      	ldrb	r6, [r4, #20]
   158fc:	2e00      	cmp	r6, #0
   158fe:	d0f4      	beq.n	158ea <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
          AlignSizeUp(current->bytes, kBufferAlignment);
   15900:	2110      	movs	r1, #16
   15902:	58f8      	ldr	r0, [r7, r3]
   15904:	f7ff fcf3 	bl	152ee <_ZN6tflite11AlignSizeUpEjj>
   15908:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   1590a:	6923      	ldr	r3, [r4, #16]
   1590c:	f1b3 3fff 	cmp.w	r3, #4294967295
   15910:	d1e1      	bne.n	158d6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
        TF_LITE_ENSURE_STATUS(
   15912:	f8d9 3000 	ldr.w	r3, [r9]
   15916:	689e      	ldr	r6, [r3, #8]
   15918:	68e3      	ldr	r3, [r4, #12]
   1591a:	9300      	str	r3, [sp, #0]
   1591c:	68a3      	ldr	r3, [r4, #8]
   1591e:	4651      	mov	r1, sl
   15920:	4648      	mov	r0, r9
   15922:	47b0      	blx	r6
   15924:	4603      	mov	r3, r0
   15926:	2800      	cmp	r0, #0
   15928:	d0df      	beq.n	158ea <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
   1592a:	e000      	b.n	1592e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  return kTfLiteOk;
   1592c:	2300      	movs	r3, #0
}
   1592e:	4618      	mov	r0, r3
   15930:	b002      	add	sp, #8
   15932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00015936 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   15936:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
   15938:	b178      	cbz	r0, 1595a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x24>
   1593a:	460c      	mov	r4, r1
   1593c:	4605      	mov	r5, r0
  TFLITE_DCHECK(error_reporter != nullptr);
   1593e:	b171      	cbz	r1, 1595e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      sizeof(MicroAllocator), alignof(MicroAllocator));
   15940:	6803      	ldr	r3, [r0, #0]
   15942:	68db      	ldr	r3, [r3, #12]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   15944:	2204      	movs	r2, #4
   15946:	211c      	movs	r1, #28
   15948:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   1594a:	4606      	mov	r6, r0
   1594c:	b118      	cbz	r0, 15956 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x20>
   1594e:	4622      	mov	r2, r4
   15950:	4629      	mov	r1, r5
   15952:	f7f2 fa0d 	bl	7d70 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   15956:	4630      	mov	r0, r6
   15958:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
   1595a:	f003 f8a3 	bl	18aa4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   1595e:	f003 f8a1 	bl	18aa4 <abort>

00015962 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   15962:	b570      	push	{r4, r5, r6, lr}
   15964:	4604      	mov	r4, r0
   15966:	460e      	mov	r6, r1
   15968:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   1596a:	2110      	movs	r1, #16
   1596c:	f7ff fcb3 	bl	152d6 <_ZN6tflite14AlignPointerUpEPhj>
   15970:	4601      	mov	r1, r0
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   15972:	4434      	add	r4, r6
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   15974:	1a22      	subs	r2, r4, r0
   15976:	4628      	mov	r0, r5
   15978:	f7f0 fe42 	bl	6600 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   1597c:	4629      	mov	r1, r5
   1597e:	f7ff ffda 	bl	15936 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   15982:	bd70      	pop	{r4, r5, r6, pc}

00015984 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
   15984:	b508      	push	{r3, lr}
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
   15986:	2300      	movs	r3, #0
   15988:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   1598a:	6840      	ldr	r0, [r0, #4]
   1598c:	6803      	ldr	r3, [r0, #0]
   1598e:	689b      	ldr	r3, [r3, #8]
   15990:	2204      	movs	r2, #4
   15992:	2160      	movs	r1, #96	; 0x60
   15994:	4798      	blx	r3
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}
   15996:	bd08      	pop	{r3, pc}

00015998 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
   15998:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
   1599a:	6840      	ldr	r0, [r0, #4]
   1599c:	f7ff fc70 	bl	15280 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
   159a0:	2104      	movs	r1, #4
   159a2:	f7ff fc98 	bl	152d6 <_ZN6tflite14AlignPointerUpEPhj>
                     alignof(internal::ScratchBufferRequest)));
}
   159a6:	bd08      	pop	{r3, pc}

000159a8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
   159a8:	b570      	push	{r4, r5, r6, lr}
   159aa:	4605      	mov	r5, r0
   159ac:	460e      	mov	r6, r1
  ResetTempAllocations();
   159ae:	6803      	ldr	r3, [r0, #0]
   159b0:	689b      	ldr	r3, [r3, #8]
   159b2:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
   159b4:	4628      	mov	r0, r5
   159b6:	f7ff ffef 	bl	15998 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   159ba:	2300      	movs	r3, #0
   159bc:	e000      	b.n	159c0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
   159be:	3301      	adds	r3, #1
   159c0:	6969      	ldr	r1, [r5, #20]
   159c2:	4299      	cmp	r1, r3
   159c4:	d907      	bls.n	159d6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   159c6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   159ca:	6854      	ldr	r4, [r2, #4]
   159cc:	f1b4 3fff 	cmp.w	r4, #4294967295
   159d0:	d1f5      	bne.n	159be <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
      requests[i].node_idx = node_id;
   159d2:	6056      	str	r6, [r2, #4]
   159d4:	e7f3      	b.n	159be <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   159d6:	6868      	ldr	r0, [r5, #4]
   159d8:	6803      	ldr	r3, [r0, #0]
   159da:	689b      	ldr	r3, [r3, #8]
   159dc:	310c      	adds	r1, #12
   159de:	2204      	movs	r2, #4
   159e0:	00c9      	lsls	r1, r1, #3
   159e2:	4798      	blx	r3
}
   159e4:	bd70      	pop	{r4, r5, r6, pc}

000159e6 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
   159e6:	6880      	ldr	r0, [r0, #8]
   159e8:	4770      	bx	lr

000159ea <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   159ea:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   159ec:	b119      	cbz	r1, 159f6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   159ee:	b122      	cbz	r2, 159fa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   159f0:	601a      	str	r2, [r3, #0]
}
   159f2:	2000      	movs	r0, #0
   159f4:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   159f6:	f003 f855 	bl	18aa4 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   159fa:	f003 f853 	bl	18aa4 <abort>

000159fe <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
    TfLiteIntArray** result) {
   159fe:	b508      	push	{r3, lr}
   15a00:	4613      	mov	r3, r2
  return internal::FlatBufferVectorToTfLiteTypeArray(
   15a02:	460a      	mov	r2, r1
   15a04:	68c1      	ldr	r1, [r0, #12]
   15a06:	6840      	ldr	r0, [r0, #4]
   15a08:	f7ff ffef 	bl	159ea <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
}
   15a0c:	bd08      	pop	{r3, pc}

00015a0e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   15a0e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   15a10:	b119      	cbz	r1, 15a1a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   15a12:	b122      	cbz	r2, 15a1e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   15a14:	601a      	str	r2, [r3, #0]
}
   15a16:	2000      	movs	r0, #0
   15a18:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   15a1a:	f003 f843 	bl	18aa4 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   15a1e:	f003 f841 	bl	18aa4 <abort>

00015a22 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   15a22:	4770      	bx	lr

00015a24 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   15a24:	6880      	ldr	r0, [r0, #8]
   15a26:	4770      	bx	lr

00015a28 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   15a28:	b510      	push	{r4, lr}
   15a2a:	4604      	mov	r4, r0
}
   15a2c:	f003 f823 	bl	18a76 <_ZdlPv>
   15a30:	4620      	mov	r0, r4
   15a32:	bd10      	pop	{r4, pc}

00015a34 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   15a34:	b4f0      	push	{r4, r5, r6, r7}
    for (int i = 1; i < size; ++i) {
   15a36:	2301      	movs	r3, #1
    any_swapped = false;
   15a38:	2700      	movs	r7, #0
   15a3a:	e000      	b.n	15a3e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
    for (int i = 1; i < size; ++i) {
   15a3c:	3301      	adds	r3, #1
   15a3e:	4293      	cmp	r3, r2
   15a40:	da16      	bge.n	15a70 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
      if (values[i - 1] < values[i]) {
   15a42:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   15a46:	3c01      	subs	r4, #1
   15a48:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   15a4c:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   15a50:	42b5      	cmp	r5, r6
   15a52:	daf3      	bge.n	15a3c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
        values[i - 1] = values[i];
   15a54:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        values[i] = value_temp;
   15a58:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        const int id_temp = ids[i - 1];
   15a5c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        ids[i - 1] = ids[i];
   15a60:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
   15a64:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
        ids[i] = id_temp;
   15a68:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
        any_swapped = true;
   15a6c:	2701      	movs	r7, #1
   15a6e:	e7e5      	b.n	15a3c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
   15a70:	2f00      	cmp	r7, #0
   15a72:	d1e0      	bne.n	15a36 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   15a74:	bcf0      	pop	{r4, r5, r6, r7}
   15a76:	4770      	bx	lr

00015a78 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   15a78:	b570      	push	{r4, r5, r6, lr}
   15a7a:	b082      	sub	sp, #8
  BufferRequirements* current = &requirements_[buffer_count_];
   15a7c:	68c5      	ldr	r5, [r0, #12]
   15a7e:	6886      	ldr	r6, [r0, #8]
   15a80:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   15a84:	6804      	ldr	r4, [r0, #0]
   15a86:	68a4      	ldr	r4, [r4, #8]
   15a88:	9e06      	ldr	r6, [sp, #24]
   15a8a:	9600      	str	r6, [sp, #0]
   15a8c:	47a0      	blx	r4
   15a8e:	b918      	cbnz	r0, 15a98 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
   15a90:	9b07      	ldr	r3, [sp, #28]
   15a92:	606b      	str	r3, [r5, #4]
}
   15a94:	b002      	add	sp, #8
   15a96:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
   15a98:	2001      	movs	r0, #1
   15a9a:	e7fb      	b.n	15a94 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

00015a9c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
   15a9c:	68c0      	ldr	r0, [r0, #12]
   15a9e:	6849      	ldr	r1, [r1, #4]
  const BufferRequirements* entry_requirements =
   15aa0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   15aa4:	6888      	ldr	r0, [r1, #8]
   15aa6:	4298      	cmp	r0, r3
   15aa8:	dc04      	bgt.n	15ab4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x18>
  if (first_time_used > entry_requirements->last_time_used) {
   15aaa:	68cb      	ldr	r3, [r1, #12]
   15aac:	4293      	cmp	r3, r2
   15aae:	db03      	blt.n	15ab8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  return true;
   15ab0:	2001      	movs	r0, #1
   15ab2:	4770      	bx	lr
    return false;
   15ab4:	2000      	movs	r0, #0
   15ab6:	4770      	bx	lr
    return false;
   15ab8:	2000      	movs	r0, #0
}
   15aba:	4770      	bx	lr

00015abc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   15abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15abe:	4605      	mov	r5, r0
   15ac0:	4616      	mov	r6, r2
   15ac2:	461f      	mov	r7, r3
  if (start == nullptr) {
   15ac4:	b1c9      	cbz	r1, 15afa <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (start->next_entry_index == -1) {
   15ac6:	688b      	ldr	r3, [r1, #8]
   15ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
   15acc:	d01c      	beq.n	15b08 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4c>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
   15ace:	6984      	ldr	r4, [r0, #24]
   15ad0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15ad4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   15ad8:	463b      	mov	r3, r7
   15ada:	4632      	mov	r2, r6
   15adc:	4621      	mov	r1, r4
   15ade:	4628      	mov	r0, r5
   15ae0:	f7ff ffdc 	bl	15a9c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   15ae4:	b998      	cbnz	r0, 15b0e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
    if (candidate_next_entry->next_entry_index == -1) {
   15ae6:	68a4      	ldr	r4, [r4, #8]
   15ae8:	f1b4 3fff 	cmp.w	r4, #4294967295
   15aec:	d00e      	beq.n	15b0c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x50>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   15aee:	69a9      	ldr	r1, [r5, #24]
   15af0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    candidate_next_entry =
   15af4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   15af8:	e7ee      	b.n	15ad8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   15afa:	6984      	ldr	r4, [r0, #24]
   15afc:	6a03      	ldr	r3, [r0, #32]
   15afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15b02:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   15b06:	e7e7      	b.n	15ad8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
      return nullptr;
   15b08:	2400      	movs	r4, #0
   15b0a:	e000      	b.n	15b0e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
  ListEntry* result = nullptr;
   15b0c:	2400      	movs	r4, #0
}
   15b0e:	4620      	mov	r0, r4
   15b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015b12 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   15b12:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   15b16:	2b00      	cmp	r3, #0
   15b18:	f000 80d5 	beq.w	15cc6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b4>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   15b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b20:	b083      	sub	sp, #12
   15b22:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   15b24:	6886      	ldr	r6, [r0, #8]
   15b26:	2e00      	cmp	r6, #0
   15b28:	f000 80ca 	beq.w	15cc0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
  need_to_calculate_offsets_ = false;
   15b2c:	2000      	movs	r0, #0
   15b2e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   15b32:	4603      	mov	r3, r0
   15b34:	e00e      	b.n	15b54 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x42>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   15b36:	6925      	ldr	r5, [r4, #16]
   15b38:	5852      	ldr	r2, [r2, r1]
   15b3a:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
   15b3e:	6962      	ldr	r2, [r4, #20]
   15b40:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   15b44:	68e2      	ldr	r2, [r4, #12]
   15b46:	4411      	add	r1, r2
   15b48:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15b4a:	6849      	ldr	r1, [r1, #4]
   15b4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
   15b50:	3001      	adds	r0, #1
  for (int i = 0; i < buffer_count_; ++i) {
   15b52:	3301      	adds	r3, #1
   15b54:	68a2      	ldr	r2, [r4, #8]
   15b56:	429a      	cmp	r2, r3
   15b58:	dd15      	ble.n	15b86 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   15b5a:	68e2      	ldr	r2, [r4, #12]
   15b5c:	0119      	lsls	r1, r3, #4
   15b5e:	eb02 1503 	add.w	r5, r2, r3, lsl #4
   15b62:	686d      	ldr	r5, [r5, #4]
   15b64:	f1b5 3fff 	cmp.w	r5, #4294967295
   15b68:	d1e5      	bne.n	15b36 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      idx_from_tail--;
   15b6a:	3e01      	subs	r6, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   15b6c:	6925      	ldr	r5, [r4, #16]
   15b6e:	5852      	ldr	r2, [r2, r1]
   15b70:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   15b74:	6962      	ldr	r2, [r4, #20]
   15b76:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      buffer_offsets_[i] = -1;
   15b7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15b7c:	f04f 31ff 	mov.w	r1, #4294967295
   15b80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15b84:	e7e5      	b.n	15b52 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   15b86:	6923      	ldr	r3, [r4, #16]
                     &buffer_ids_sorted_[idx_from_head],
   15b88:	6961      	ldr	r1, [r4, #20]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   15b8a:	1a12      	subs	r2, r2, r0
   15b8c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   15b90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15b94:	f7ff ff4e 	bl	15a34 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  first_entry_index_ = 0;
   15b98:	2300      	movs	r3, #0
   15b9a:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
   15b9c:	2301      	movs	r3, #1
   15b9e:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   15ba0:	f8d4 a018 	ldr.w	sl, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   15ba4:	f04f 33ff 	mov.w	r3, #4294967295
   15ba8:	f8ca 3008 	str.w	r3, [sl, #8]
  int buffer_id = buffer_ids_sorted_[0];
   15bac:	6963      	ldr	r3, [r4, #20]
   15bae:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   15bb0:	f8ca 3004 	str.w	r3, [sl, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   15bb4:	68e2      	ldr	r2, [r4, #12]
   15bb6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   15bba:	6852      	ldr	r2, [r2, #4]
   15bbc:	f1b2 3fff 	cmp.w	r2, #4294967295
   15bc0:	d007      	beq.n	15bd2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc0>
  first_entry->offset = buffer_offsets_[buffer_id];
   15bc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bc8:	f8ca 3000 	str.w	r3, [sl]
  for (int i = 1; i < buffer_count_; ++i) {
   15bcc:	f04f 0901 	mov.w	r9, #1
   15bd0:	e036      	b.n	15c40 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
    buffer_offsets_[buffer_id] = 0;
   15bd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15bd4:	2100      	movs	r1, #0
   15bd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15bda:	e7f2      	b.n	15bc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb0>
      ListEntry* prior_entry = nullptr;
   15bdc:	2100      	movs	r1, #0
    int candidate_offset = 0;
   15bde:	460d      	mov	r5, r1
   15be0:	f8cd a000 	str.w	sl, [sp]
   15be4:	f8cd 9004 	str.w	r9, [sp, #4]
   15be8:	4681      	mov	r9, r0
   15bea:	4692      	mov	sl, r2
   15bec:	e004      	b.n	15bf8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
        if (next_entry == nullptr) {
   15bee:	b1d9      	cbz	r1, 15c28 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x116>
        const int gap = next_entry->offset - candidate_offset;
   15bf0:	680b      	ldr	r3, [r1, #0]
   15bf2:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
   15bf4:	459b      	cmp	fp, r3
   15bf6:	dd12      	ble.n	15c1e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   15bf8:	460e      	mov	r6, r1
   15bfa:	4653      	mov	r3, sl
   15bfc:	464a      	mov	r2, r9
   15bfe:	4620      	mov	r0, r4
   15c00:	f7ff ff5c 	bl	15abc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
   15c04:	4601      	mov	r1, r0
        if (prior_entry) {
   15c06:	2e00      	cmp	r6, #0
   15c08:	d0f1      	beq.n	15bee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
              &requirements_[prior_entry->requirements_index];
   15c0a:	6873      	ldr	r3, [r6, #4]
   15c0c:	011a      	lsls	r2, r3, #4
              prior_entry->offset + candidate_requirements->size;
   15c0e:	6833      	ldr	r3, [r6, #0]
   15c10:	f858 2002 	ldr.w	r2, [r8, r2]
          const int prior_entry_offset =
   15c14:	4413      	add	r3, r2
          if (prior_entry_offset > candidate_offset) {
   15c16:	429d      	cmp	r5, r3
   15c18:	dae9      	bge.n	15bee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
            candidate_offset = prior_entry_offset;
   15c1a:	461d      	mov	r5, r3
   15c1c:	e7e7      	b.n	15bee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
   15c1e:	f8dd a000 	ldr.w	sl, [sp]
   15c22:	f8dd 9004 	ldr.w	r9, [sp, #4]
   15c26:	e01f      	b.n	15c68 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
   15c28:	f8dd a000 	ldr.w	sl, [sp]
   15c2c:	f8dd 9004 	ldr.w	r9, [sp, #4]
   15c30:	e01a      	b.n	15c68 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
      first_entry->next_entry_index = first_entry_index_;
   15c32:	6a23      	ldr	r3, [r4, #32]
   15c34:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
   15c38:	6227      	str	r7, [r4, #32]
      first_entry = new_entry;
   15c3a:	46e2      	mov	sl, ip
  for (int i = 1; i < buffer_count_; ++i) {
   15c3c:	f109 0901 	add.w	r9, r9, #1
   15c40:	68a3      	ldr	r3, [r4, #8]
   15c42:	454b      	cmp	r3, r9
   15c44:	dd3c      	ble.n	15cc0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
   15c46:	6963      	ldr	r3, [r4, #20]
   15c48:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   15c4c:	f8d4 800c 	ldr.w	r8, [r4, #12]
   15c50:	013a      	lsls	r2, r7, #4
   15c52:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    const int wanted_size = wanted_requirements->size;
   15c56:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   15c5a:	689a      	ldr	r2, [r3, #8]
   15c5c:	4610      	mov	r0, r2
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   15c5e:	68da      	ldr	r2, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   15c60:	685d      	ldr	r5, [r3, #4]
   15c62:	f1b5 3fff 	cmp.w	r5, #4294967295
   15c66:	d0b9      	beq.n	15bdc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    buffer_offsets_[buffer_id] = candidate_offset;
   15c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c6a:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   15c6e:	69a2      	ldr	r2, [r4, #24]
   15c70:	69e3      	ldr	r3, [r4, #28]
   15c72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15c76:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
   15c7a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
   15c7e:	f8cc 7004 	str.w	r7, [ip, #4]
    const int new_entry_index = next_free_entry_;
   15c82:	69e7      	ldr	r7, [r4, #28]
    ++next_free_entry_;
   15c84:	1c7b      	adds	r3, r7, #1
   15c86:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   15c88:	f8da 3000 	ldr.w	r3, [sl]
   15c8c:	42ab      	cmp	r3, r5
   15c8e:	dcd0      	bgt.n	15c32 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x120>
      ListEntry* current_entry = first_entry;
   15c90:	4650      	mov	r0, sl
   15c92:	e000      	b.n	15c96 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
        current_entry = next_entry;
   15c94:	4630      	mov	r0, r6
        const int next_entry_index = current_entry->next_entry_index;
   15c96:	6883      	ldr	r3, [r0, #8]
        if (next_entry_index == -1) {
   15c98:	f1b3 3fff 	cmp.w	r3, #4294967295
   15c9c:	d00c      	beq.n	15cb8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a6>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   15c9e:	69a2      	ldr	r2, [r4, #24]
   15ca0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15ca4:	eb02 0681 	add.w	r6, r2, r1, lsl #2
        if (next_entry->offset > candidate_offset) {
   15ca8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   15cac:	42aa      	cmp	r2, r5
   15cae:	ddf1      	ble.n	15c94 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x182>
          new_entry->next_entry_index = current_entry->next_entry_index;
   15cb0:	f8cc 3008 	str.w	r3, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
   15cb4:	6087      	str	r7, [r0, #8]
          break;
   15cb6:	e7c1      	b.n	15c3c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
          current_entry->next_entry_index = new_entry_index;
   15cb8:	6087      	str	r7, [r0, #8]
          new_entry->next_entry_index = -1;
   15cba:	f8cc 3008 	str.w	r3, [ip, #8]
          break;
   15cbe:	e7bd      	b.n	15c3c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
}
   15cc0:	b003      	add	sp, #12
   15cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cc6:	4770      	bx	lr

00015cc8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   15cc8:	b570      	push	{r4, r5, r6, lr}
   15cca:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   15ccc:	f7ff ff21 	bl	15b12 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   15cd0:	68a3      	ldr	r3, [r4, #8]
   15cd2:	b1d3      	cbz	r3, 15d0a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   15cd4:	69a6      	ldr	r6, [r4, #24]
   15cd6:	6a23      	ldr	r3, [r4, #32]
   15cd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15cdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  size_t max_size = 0;
   15ce0:	2000      	movs	r0, #0
   15ce2:	e007      	b.n	15cf4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x2c>
    if (entry->next_entry_index == -1) {
   15ce4:	689b      	ldr	r3, [r3, #8]
   15ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
   15cea:	d00f      	beq.n	15d0c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   15cec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15cf0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (entry) {
   15cf4:	b153      	cbz	r3, 15d0c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
        &requirements_[entry->requirements_index];
   15cf6:	68e5      	ldr	r5, [r4, #12]
   15cf8:	685a      	ldr	r2, [r3, #4]
   15cfa:	0111      	lsls	r1, r2, #4
    const size_t current_size = entry->offset + requirements->size;
   15cfc:	681a      	ldr	r2, [r3, #0]
   15cfe:	5869      	ldr	r1, [r5, r1]
   15d00:	440a      	add	r2, r1
    if (current_size > max_size) {
   15d02:	4290      	cmp	r0, r2
   15d04:	d2ee      	bcs.n	15ce4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
      max_size = current_size;
   15d06:	4610      	mov	r0, r2
   15d08:	e7ec      	b.n	15ce4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
    return 0;
   15d0a:	2000      	movs	r0, #0
}
   15d0c:	bd70      	pop	{r4, r5, r6, pc}

00015d0e <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
   15d0e:	3001      	adds	r0, #1
}
   15d10:	0080      	lsls	r0, r0, #2
   15d12:	4770      	bx	lr

00015d14 <TfLiteIntArrayEqualsArray>:
  if (a == NULL) return (b_size == 0);
   15d14:	b180      	cbz	r0, 15d38 <TfLiteIntArrayEqualsArray+0x24>
                              const int b_data[]) {
   15d16:	b430      	push	{r4, r5}
   15d18:	4605      	mov	r5, r0
  if (a->size != b_size) return 0;
   15d1a:	6804      	ldr	r4, [r0, #0]
   15d1c:	428c      	cmp	r4, r1
   15d1e:	d111      	bne.n	15d44 <TfLiteIntArrayEqualsArray+0x30>
  int i = 0;
   15d20:	2300      	movs	r3, #0
  for (; i < a->size; i++)
   15d22:	429c      	cmp	r4, r3
   15d24:	dd0c      	ble.n	15d40 <TfLiteIntArrayEqualsArray+0x2c>
    if (a->data[i] != b_data[i]) return 0;
   15d26:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   15d2a:	6848      	ldr	r0, [r1, #4]
   15d2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   15d30:	4288      	cmp	r0, r1
   15d32:	d10a      	bne.n	15d4a <TfLiteIntArrayEqualsArray+0x36>
  for (; i < a->size; i++)
   15d34:	3301      	adds	r3, #1
   15d36:	e7f4      	b.n	15d22 <TfLiteIntArrayEqualsArray+0xe>
  if (a == NULL) return (b_size == 0);
   15d38:	fab1 f081 	clz	r0, r1
   15d3c:	0940      	lsrs	r0, r0, #5
}
   15d3e:	4770      	bx	lr
  return 1;
   15d40:	2001      	movs	r0, #1
   15d42:	e000      	b.n	15d46 <TfLiteIntArrayEqualsArray+0x32>
  if (a->size != b_size) return 0;
   15d44:	2000      	movs	r0, #0
}
   15d46:	bc30      	pop	{r4, r5}
   15d48:	4770      	bx	lr
    if (a->data[i] != b_data[i]) return 0;
   15d4a:	2000      	movs	r0, #0
   15d4c:	e7fb      	b.n	15d46 <TfLiteIntArrayEqualsArray+0x32>

00015d4e <TfLiteIntArrayEqual>:
  if (a == b) return 1;
   15d4e:	4288      	cmp	r0, r1
   15d50:	d008      	beq.n	15d64 <TfLiteIntArrayEqual+0x16>
  if (a == NULL || b == NULL) return 0;
   15d52:	b148      	cbz	r0, 15d68 <TfLiteIntArrayEqual+0x1a>
   15d54:	b151      	cbz	r1, 15d6c <TfLiteIntArrayEqual+0x1e>
int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
   15d56:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
   15d58:	460a      	mov	r2, r1
   15d5a:	f852 1b04 	ldr.w	r1, [r2], #4
   15d5e:	f7ff ffd9 	bl	15d14 <TfLiteIntArrayEqualsArray>
}
   15d62:	bd08      	pop	{r3, pc}
  if (a == b) return 1;
   15d64:	2001      	movs	r0, #1
   15d66:	4770      	bx	lr
  if (a == NULL || b == NULL) return 0;
   15d68:	2000      	movs	r0, #0
   15d6a:	4770      	bx	lr
   15d6c:	2000      	movs	r0, #0
}
   15d6e:	4770      	bx	lr

00015d70 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   15d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15d74:	460e      	mov	r6, r1
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   15d76:	2401      	movs	r4, #1
   15d78:	fa04 fc00 	lsl.w	ip, r4, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   15d7c:	1a12      	subs	r2, r2, r0
   15d7e:	f1a2 0120 	sub.w	r1, r2, #32
   15d82:	f1c2 0320 	rsb	r3, r2, #32
   15d86:	fa04 f101 	lsl.w	r1, r4, r1
   15d8a:	fa24 f303 	lsr.w	r3, r4, r3
   15d8e:	ea41 0703 	orr.w	r7, r1, r3
   15d92:	fa04 f502 	lsl.w	r5, r4, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   15d96:	f10c 30ff 	add.w	r0, ip, #4294967295
   15d9a:	f7ea fb2f 	bl	3fc <__aeabi_i2d>
   15d9e:	4680      	mov	r8, r0
   15da0:	4689      	mov	r9, r1
   15da2:	4628      	mov	r0, r5
   15da4:	4639      	mov	r1, r7
   15da6:	f7ea fb65 	bl	474 <__aeabi_l2d>
   15daa:	4602      	mov	r2, r0
   15dac:	460b      	mov	r3, r1
   15dae:	4640      	mov	r0, r8
   15db0:	4649      	mov	r1, r9
   15db2:	f7ea fb8d 	bl	4d0 <__aeabi_dmul>
   15db6:	4680      	mov	r8, r0
   15db8:	4689      	mov	r9, r1
      (1ll << input_left_shift);
   15dba:	f1a6 0120 	sub.w	r1, r6, #32
   15dbe:	f1c6 0320 	rsb	r3, r6, #32
   15dc2:	fa04 f101 	lsl.w	r1, r4, r1
   15dc6:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
   15dca:	fa04 f006 	lsl.w	r0, r4, r6
   15dce:	4319      	orrs	r1, r3
   15dd0:	f7ea fb50 	bl	474 <__aeabi_l2d>
   15dd4:	4602      	mov	r2, r0
   15dd6:	460b      	mov	r3, r1
  const double max_input_rescaled =
   15dd8:	4640      	mov	r0, r8
   15dda:	4649      	mov	r1, r9
   15ddc:	f7ea fca2 	bl	724 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   15de0:	f7eb fda2 	bl	1928 <floor>
   15de4:	f7ea fe0e 	bl	a04 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   15de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                             const TfLiteNode* node, int index) {
   15dec:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   15dee:	680b      	ldr	r3, [r1, #0]
   15df0:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   15df4:	2a00      	cmp	r2, #0
   15df6:	db10      	blt.n	15e1a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   15df8:	428a      	cmp	r2, r1
   15dfa:	da10      	bge.n	15e1e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   15dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   15e00:	f1b1 3fff 	cmp.w	r1, #4294967295
   15e04:	d00d      	beq.n	15e22 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   15e06:	2900      	cmp	r1, #0
   15e08:	db0d      	blt.n	15e26 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   15e0a:	6883      	ldr	r3, [r0, #8]
   15e0c:	b113      	cbz	r3, 15e14 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   15e0e:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   15e12:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   15e14:	6d03      	ldr	r3, [r0, #80]	; 0x50
   15e16:	4798      	blx	r3
   15e18:	e7fb      	b.n	15e12 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   15e1a:	2000      	movs	r0, #0
   15e1c:	e7f9      	b.n	15e12 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15e1e:	2000      	movs	r0, #0
   15e20:	e7f7      	b.n	15e12 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15e22:	2000      	movs	r0, #0
   15e24:	e7f5      	b.n	15e12 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15e26:	2000      	movs	r0, #0
  return GetMutableInput(context, node, index);
   15e28:	e7f3      	b.n	15e12 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>

00015e2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
   15e2a:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   15e2c:	684b      	ldr	r3, [r1, #4]
   15e2e:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   15e32:	2a00      	cmp	r2, #0
   15e34:	db10      	blt.n	15e58 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
   15e36:	4291      	cmp	r1, r2
   15e38:	dd10      	ble.n	15e5c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   15e3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   15e3e:	f1b1 3fff 	cmp.w	r1, #4294967295
   15e42:	d00d      	beq.n	15e60 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   15e44:	2900      	cmp	r1, #0
   15e46:	db0d      	blt.n	15e64 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   15e48:	6883      	ldr	r3, [r0, #8]
   15e4a:	b113      	cbz	r3, 15e52 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   15e4c:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   15e50:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   15e52:	6d03      	ldr	r3, [r0, #80]	; 0x50
   15e54:	4798      	blx	r3
   15e56:	e7fb      	b.n	15e50 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   15e58:	2000      	movs	r0, #0
   15e5a:	e7f9      	b.n	15e50 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15e5c:	2000      	movs	r0, #0
   15e5e:	e7f7      	b.n	15e50 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15e60:	2000      	movs	r0, #0
   15e62:	e7f5      	b.n	15e50 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15e64:	2000      	movs	r0, #0
   15e66:	e7f3      	b.n	15e50 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>

00015e68 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                           const TfLiteNode* node, int index) {
   15e68:	b508      	push	{r3, lr}
  return GetInput(context, node, index);
   15e6a:	f7ff ffbf 	bl	15dec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
}
   15e6e:	bd08      	pop	{r3, pc}

00015e70 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   15e70:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   15e72:	6889      	ldr	r1, [r1, #8]
   15e74:	6880      	ldr	r0, [r0, #8]
   15e76:	f7ff ff6a 	bl	15d4e <TfLiteIntArrayEqual>
}
   15e7a:	3800      	subs	r0, #0
   15e7c:	bf18      	it	ne
   15e7e:	2001      	movne	r0, #1
   15e80:	bd08      	pop	{r3, pc}

00015e82 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  switch (activation) {
   15e82:	1e43      	subs	r3, r0, #1
   15e84:	2b04      	cmp	r3, #4
   15e86:	d804      	bhi.n	15e92 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>
   15e88:	e8df f003 	tbb	[pc, r3]
   15e8c:	04040404 	.word	0x04040404
   15e90:	04          	.byte	0x04
   15e91:	00          	.byte	0x00
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
   15e92:	2000      	movs	r0, #0
}
   15e94:	4770      	bx	lr

00015e96 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   15e96:	b118      	cbz	r0, 15ea0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xa>
   15e98:	2801      	cmp	r0, #1
   15e9a:	d103      	bne.n	15ea4 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xe>
      return kTfLitePaddingValid;
   15e9c:	2002      	movs	r0, #2
   15e9e:	4770      	bx	lr
  switch (padding) {
   15ea0:	2001      	movs	r0, #1
   15ea2:	4770      	bx	lr
  return kTfLitePaddingUnknown;
   15ea4:	2000      	movs	r0, #0
}
   15ea6:	4770      	bx	lr

00015ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   15ea8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   15eaa:	b118      	cbz	r0, 15eb4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
  TFLITE_DCHECK(error_reporter != nullptr);
   15eac:	b121      	cbz	r1, 15eb8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
  TFLITE_DCHECK(allocator != nullptr);
   15eae:	b12a      	cbz	r2, 15ebc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
  TFLITE_DCHECK(builtin_data != nullptr);
   15eb0:	b133      	cbz	r3, 15ec0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
}
   15eb2:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op != nullptr);
   15eb4:	f002 fdf6 	bl	18aa4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   15eb8:	f002 fdf4 	bl	18aa4 <abort>
  TFLITE_DCHECK(allocator != nullptr);
   15ebc:	f002 fdf2 	bl	18aa4 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
   15ec0:	f002 fdf0 	bl	18aa4 <abort>

00015ec4 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   15ec4:	b40e      	push	{r1, r2, r3}
   15ec6:	b500      	push	{lr}
   15ec8:	b082      	sub	sp, #8
   15eca:	aa03      	add	r2, sp, #12
   15ecc:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   15ed0:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   15ed2:	6803      	ldr	r3, [r0, #0]
   15ed4:	689b      	ldr	r3, [r3, #8]
   15ed6:	4798      	blx	r3
  va_end(args);
  return code;
}
   15ed8:	b002      	add	sp, #8
   15eda:	f85d eb04 	ldr.w	lr, [sp], #4
   15ede:	b003      	add	sp, #12
   15ee0:	4770      	bx	lr

00015ee2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   15ee2:	b40c      	push	{r2, r3}
   15ee4:	b500      	push	{lr}
   15ee6:	b083      	sub	sp, #12
   15ee8:	aa04      	add	r2, sp, #16
   15eea:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   15eee:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   15ef0:	6803      	ldr	r3, [r0, #0]
   15ef2:	689b      	ldr	r3, [r3, #8]
   15ef4:	4798      	blx	r3
  va_end(args);
  return code;
}
   15ef6:	b003      	add	sp, #12
   15ef8:	f85d eb04 	ldr.w	lr, [sp], #4
   15efc:	b002      	add	sp, #8
   15efe:	4770      	bx	lr

00015f00 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
   15f00:	b570      	push	{r4, r5, r6, lr}
   15f02:	b082      	sub	sp, #8
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
   15f04:	b368      	cbz	r0, 15f62 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x62>
   15f06:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   15f08:	f7ff fa62 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15f0c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15f0e:	4628      	mov	r0, r5
   15f10:	f7ff fa64 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15f14:	280a      	cmp	r0, #10
   15f16:	d926      	bls.n	15f66 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
   15f18:	f105 000a 	add.w	r0, r5, #10
   15f1c:	f7ff fa5e 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15f20:	b318      	cbz	r0, 15f6a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6a>
   15f22:	4420      	add	r0, r4
   15f24:	f7ff fa54 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
   15f28:	b2c5      	uxtb	r5, r0

  return std::max(
      op_code->builtin_code(),
   15f2a:	f88d 5006 	strb.w	r5, [sp, #6]
    return data_ - ReadScalar<soffset_t>(data_);
   15f2e:	4620      	mov	r0, r4
   15f30:	f7ff fa4e 	bl	153d0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15f34:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15f36:	4630      	mov	r0, r6
   15f38:	f7ff fa50 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15f3c:	2804      	cmp	r0, #4
   15f3e:	d916      	bls.n	15f6e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6e>
   15f40:	1d30      	adds	r0, r6, #4
   15f42:	f7ff fa4b 	bl	153dc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15f46:	b1a0      	cbz	r0, 15f72 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x72>
   15f48:	4420      	add	r0, r4
   15f4a:	f7ff fa4d 	bl	153e8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
   15f4e:	b2c0      	uxtb	r0, r0
   15f50:	f88d 0007 	strb.w	r0, [sp, #7]
      if (__a < __b)
   15f54:	42a8      	cmp	r0, r5
   15f56:	d80e      	bhi.n	15f76 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x76>
      return __a;
   15f58:	f10d 0306 	add.w	r3, sp, #6
}
   15f5c:	7818      	ldrb	r0, [r3, #0]
   15f5e:	b002      	add	sp, #8
   15f60:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(op_code != nullptr);
   15f62:	f002 fd9f 	bl	18aa4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15f66:	2000      	movs	r0, #0
   15f68:	e7da      	b.n	15f20 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15f6a:	2000      	movs	r0, #0
   15f6c:	e7dc      	b.n	15f28 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15f6e:	2000      	movs	r0, #0
   15f70:	e7e9      	b.n	15f46 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15f72:	2000      	movs	r0, #0
   15f74:	e7eb      	b.n	15f4e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>
	return __b;
   15f76:	f10d 0307 	add.w	r3, sp, #7
   15f7a:	e7ef      	b.n	15f5c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5c>

00015f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   15f7c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   15f7e:	b108      	cbz	r0, 15f84 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x8>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
   15f80:	6800      	ldr	r0, [r0, #0]
   15f82:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   15f84:	f002 fd8e 	bl	18aa4 <abort>

00015f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   15f88:	b108      	cbz	r0, 15f8e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x6>
   15f8a:	6800      	ldr	r0, [r0, #0]
   15f8c:	4770      	bx	lr
}
   15f8e:	4770      	bx	lr

00015f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   15f90:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   15f92:	b108      	cbz	r0, 15f98 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
}
   15f94:	6800      	ldr	r0, [r0, #0]
   15f96:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   15f98:	f002 fd84 	bl	18aa4 <abort>

00015f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   15f9c:	b108      	cbz	r0, 15fa2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x6>
   15f9e:	6800      	ldr	r0, [r0, #0]
   15fa0:	4770      	bx	lr
}
   15fa2:	4770      	bx	lr

00015fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
}
   15fa4:	4770      	bx	lr

00015fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>:
}
   15fa6:	4008      	ands	r0, r1
   15fa8:	4770      	bx	lr

00015faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>:
}
   15faa:	4108      	asrs	r0, r1
   15fac:	4770      	bx	lr

00015fae <_ZN8gemmlowp3AddIiEET_S1_S1_>:
}
   15fae:	4408      	add	r0, r1
   15fb0:	4770      	bx	lr

00015fb2 <_ZN8gemmlowp6BitNotIiEET_S1_>:
}
   15fb2:	43c0      	mvns	r0, r0
   15fb4:	4770      	bx	lr

00015fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
   15fb6:	b508      	push	{r3, lr}
  return a ? BitNot(zero) : zero;
   15fb8:	b110      	cbz	r0, 15fc0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_+0xa>
   15fba:	2000      	movs	r0, #0
   15fbc:	f7ff fff9 	bl	15fb2 <_ZN8gemmlowp6BitNotIiEET_S1_>
}
   15fc0:	bd08      	pop	{r3, pc}

00015fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
   15fc2:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a < b);
   15fc4:	4288      	cmp	r0, r1
   15fc6:	bfac      	ite	ge
   15fc8:	2000      	movge	r0, #0
   15fca:	2001      	movlt	r0, #1
   15fcc:	f7ff fff3 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   15fd0:	bd08      	pop	{r3, pc}

00015fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
   15fd2:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a > b);
   15fd4:	4288      	cmp	r0, r1
   15fd6:	bfd4      	ite	le
   15fd8:	2000      	movle	r0, #0
   15fda:	2001      	movgt	r0, #1
   15fdc:	f7ff ffeb 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   15fe0:	bd08      	pop	{r3, pc}

00015fe2 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   15fe2:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15fe4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15fe6:	b113      	cbz	r3, 15fee <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   15fe8:	213c      	movs	r1, #60	; 0x3c
   15fea:	4798      	blx	r3
}
   15fec:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15fee:	f002 fd59 	bl	18aa4 <abort>

00015ff2 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
                             OpData* data) {
   15ff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff6:	b089      	sub	sp, #36	; 0x24
   15ff8:	9003      	str	r0, [sp, #12]
   15ffa:	4688      	mov	r8, r1
   15ffc:	4616      	mov	r6, r2
   15ffe:	461d      	mov	r5, r3
   16000:	9f12      	ldr	r7, [sp, #72]	; 0x48
   16002:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16004:	4619      	mov	r1, r3
   16006:	4610      	mov	r0, r2
   16008:	f7ff ff32 	bl	15e70 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   1600c:	f080 0001 	eor.w	r0, r0, #1
   16010:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   16012:	783b      	ldrb	r3, [r7, #0]
   16014:	2b09      	cmp	r3, #9
   16016:	d005      	beq.n	16024 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x32>
   16018:	2b07      	cmp	r3, #7
   1601a:	d003      	beq.n	16024 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x32>
  } else if (output->type == kTfLiteFloat32) {
   1601c:	2b01      	cmp	r3, #1
   1601e:	d077      	beq.n	16110 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x11e>
  return kTfLiteOk;
   16020:	2000      	movs	r0, #0
   16022:	e06f      	b.n	16104 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x112>
    data->input1_offset = -input1->params.zero_point;
   16024:	6933      	ldr	r3, [r6, #16]
   16026:	425b      	negs	r3, r3
   16028:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   1602a:	692b      	ldr	r3, [r5, #16]
   1602c:	425b      	negs	r3, r3
   1602e:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   16030:	693b      	ldr	r3, [r7, #16]
   16032:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   16034:	783b      	ldrb	r3, [r7, #0]
   16036:	2b07      	cmp	r3, #7
   16038:	d067      	beq.n	1610a <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x118>
   1603a:	f04f 0914 	mov.w	r9, #20
   1603e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
                std::max(input1->params.scale, input2->params.scale));
   16042:	f106 0b0c 	add.w	fp, r6, #12
   16046:	f105 0a0c 	add.w	sl, r5, #12
      if (__a < __b)
   1604a:	68f6      	ldr	r6, [r6, #12]
   1604c:	68ed      	ldr	r5, [r5, #12]
   1604e:	4629      	mov	r1, r5
   16050:	4630      	mov	r0, r6
   16052:	f7ea fffb 	bl	104c <__aeabi_fcmplt>
   16056:	b900      	cbnz	r0, 1605a <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x68>
      return __a;
   16058:	46da      	mov	sl, fp
        2 * static_cast<double>(
   1605a:	f8da 0000 	ldr.w	r0, [sl]
   1605e:	f7ea f9df 	bl	420 <__aeabi_f2d>
   16062:	4602      	mov	r2, r0
   16064:	460b      	mov	r3, r1
                std::max(input1->params.scale, input2->params.scale));
   16066:	f7ea f87d 	bl	164 <__adddf3>
   1606a:	4682      	mov	sl, r0
   1606c:	468b      	mov	fp, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
   1606e:	4630      	mov	r0, r6
   16070:	f7ea f9d6 	bl	420 <__aeabi_f2d>
    const double real_input1_multiplier =
   16074:	4652      	mov	r2, sl
   16076:	465b      	mov	r3, fp
   16078:	f7ea fb54 	bl	724 <__aeabi_ddiv>
   1607c:	e9cd 0104 	strd	r0, r1, [sp, #16]
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
   16080:	4628      	mov	r0, r5
   16082:	f7ea f9cd 	bl	420 <__aeabi_f2d>
    const double real_input2_multiplier =
   16086:	4652      	mov	r2, sl
   16088:	465b      	mov	r3, fp
   1608a:	f7ea fb4b 	bl	724 <__aeabi_ddiv>
   1608e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   16092:	2301      	movs	r3, #1
   16094:	fa03 f909 	lsl.w	r9, r3, r9
   16098:	68f8      	ldr	r0, [r7, #12]
   1609a:	f7ea f9c1 	bl	420 <__aeabi_f2d>
   1609e:	4605      	mov	r5, r0
   160a0:	460e      	mov	r6, r1
   160a2:	4648      	mov	r0, r9
   160a4:	f7ea f9aa 	bl	3fc <__aeabi_i2d>
   160a8:	462a      	mov	r2, r5
   160aa:	4633      	mov	r3, r6
   160ac:	f7ea fa10 	bl	4d0 <__aeabi_dmul>
   160b0:	4602      	mov	r2, r0
   160b2:	460b      	mov	r3, r1
    const double real_output_multiplier =
   160b4:	4650      	mov	r0, sl
   160b6:	4659      	mov	r1, fp
   160b8:	f7ea fb34 	bl	724 <__aeabi_ddiv>
   160bc:	4682      	mov	sl, r0
   160be:	468b      	mov	fp, r1
    QuantizeMultiplierSmallerThanOneExp(
   160c0:	1d23      	adds	r3, r4, #4
   160c2:	f104 0214 	add.w	r2, r4, #20
   160c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   160ca:	f7f3 fa25 	bl	9518 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    QuantizeMultiplierSmallerThanOneExp(
   160ce:	f104 0308 	add.w	r3, r4, #8
   160d2:	f104 0218 	add.w	r2, r4, #24
   160d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   160da:	f7f3 fa1d 	bl	9518 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    QuantizeMultiplierSmallerThanOneExp(
   160de:	f104 0320 	add.w	r3, r4, #32
   160e2:	f104 021c 	add.w	r2, r4, #28
   160e6:	4650      	mov	r0, sl
   160e8:	4659      	mov	r1, fp
   160ea:	f7f3 fa15 	bl	9518 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   160ee:	f104 0310 	add.w	r3, r4, #16
   160f2:	9300      	str	r3, [sp, #0]
   160f4:	f104 030c 	add.w	r3, r4, #12
   160f8:	463a      	mov	r2, r7
   160fa:	f898 1000 	ldrb.w	r1, [r8]
   160fe:	9803      	ldr	r0, [sp, #12]
   16100:	f7f3 fb90 	bl	9824 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
   16104:	b009      	add	sp, #36	; 0x24
   16106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   1610a:	f04f 090f 	mov.w	r9, #15
   1610e:	e796      	b.n	1603e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x4c>
    CalculateActivationRange(params->activation,
   16110:	f104 0238 	add.w	r2, r4, #56	; 0x38
   16114:	f104 0134 	add.w	r1, r4, #52	; 0x34
   16118:	f898 0000 	ldrb.w	r0, [r8]
   1611c:	f7f4 fb8c 	bl	a838 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  return kTfLiteOk;
   16120:	2000      	movs	r0, #0
   16122:	e7ef      	b.n	16104 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x112>

00016124 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:
             const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {
   16124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16128:	b0e1      	sub	sp, #388	; 0x184
   1612a:	9e6a      	ldr	r6, [sp, #424]	; 0x1a8
   1612c:	9d6b      	ldr	r5, [sp, #428]	; 0x1ac
   1612e:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
  SetActivationParams(data->output_activation_min_f32,
   16130:	6b59      	ldr	r1, [r3, #52]	; 0x34
                      data->output_activation_max_f32, &op_params);
   16132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  params->float_activation_min = min;
   16134:	912f      	str	r1, [sp, #188]	; 0xbc
  params->float_activation_max = max;
   16136:	9230      	str	r2, [sp, #192]	; 0xc0
  if (data->requires_broadcast) {
   16138:	781b      	ldrb	r3, [r3, #0]
   1613a:	2b00      	cmp	r3, #0
   1613c:	f000 8294 	beq.w	16668 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x544>
        op_params, tflite::micro::GetTensorShape(input1),
   16140:	4631      	mov	r1, r6
   16142:	a83c      	add	r0, sp, #240	; 0xf0
   16144:	f001 f8d9 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   16148:	4630      	mov	r0, r6
   1614a:	f7ff ff17 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   1614e:	9001      	str	r0, [sp, #4]
        tflite::micro::GetTensorShape(input2),
   16150:	4629      	mov	r1, r5
   16152:	a842      	add	r0, sp, #264	; 0x108
   16154:	f001 f8d1 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   16158:	4628      	mov	r0, r5
   1615a:	f7ff ff0f 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   1615e:	9002      	str	r0, [sp, #8]
        tflite::micro::GetTensorShape(output),
   16160:	4621      	mov	r1, r4
   16162:	a848      	add	r0, sp, #288	; 0x120
   16164:	f001 f8c9 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   16168:	4620      	mov	r0, r4
   1616a:	f7ff ff0d 	bl	15f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   1616e:	9003      	str	r0, [sp, #12]
      : size_(0) {
   16170:	2300      	movs	r3, #0
   16172:	9306      	str	r3, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   16174:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   16176:	2b04      	cmp	r3, #4
   16178:	dc0c      	bgt.n	16194 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x70>
    if (size_ > kMaxSmallSize) {
   1617a:	9b06      	ldr	r3, [sp, #24]
   1617c:	2b05      	cmp	r3, #5
   1617e:	dd03      	ble.n	16188 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64>
      delete[] dims_pointer_;
   16180:	9807      	ldr	r0, [sp, #28]
   16182:	b108      	cbz	r0, 16188 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64>
   16184:	f002 fc79 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
   16188:	2304      	movs	r3, #4
   1618a:	9306      	str	r3, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   1618c:	983c      	ldr	r0, [sp, #240]	; 0xf0
    const int size_increase = new_shape_size - shape.DimensionsCount();
   1618e:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   16190:	2300      	movs	r3, #0
   16192:	e00b      	b.n	161ac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x88>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   16194:	f002 fc86 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
   16198:	f002 fc84 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1619c:	f002 fc82 	bl	18aa4 <abort>
      dims_[i] = val;
   161a0:	aa06      	add	r2, sp, #24
   161a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   161a6:	2101      	movs	r1, #1
   161a8:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   161aa:	3301      	adds	r3, #1
   161ac:	4298      	cmp	r0, r3
   161ae:	dd0b      	ble.n	161c8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4>
    TFLITE_DCHECK_GE(i, 0);
   161b0:	2b00      	cmp	r3, #0
   161b2:	dbf1      	blt.n	16198 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x74>
    TFLITE_DCHECK_LT(i, size_);
   161b4:	9a06      	ldr	r2, [sp, #24]
   161b6:	4293      	cmp	r3, r2
   161b8:	daf0      	bge.n	1619c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78>
    if (size_ > kMaxSmallSize) {
   161ba:	2a05      	cmp	r2, #5
   161bc:	ddf0      	ble.n	161a0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c>
      dims_pointer_[i] = val;
   161be:	9a07      	ldr	r2, [sp, #28]
   161c0:	2101      	movs	r1, #1
   161c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   161c6:	e7f0      	b.n	161aa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x86>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   161c8:	9b06      	ldr	r3, [sp, #24]
   161ca:	2b05      	cmp	r3, #5
   161cc:	dd1b      	ble.n	16206 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe2>
   161ce:	9b07      	ldr	r3, [sp, #28]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   161d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   161d4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   161d6:	2a05      	cmp	r2, #5
   161d8:	dd17      	ble.n	1620a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe6>
   161da:	993d      	ldr	r1, [sp, #244]	; 0xf4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   161dc:	0092      	lsls	r2, r2, #2
   161de:	f002 fc88 	bl	18af2 <memcpy>
      : size_(0) {
   161e2:	2300      	movs	r3, #0
   161e4:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   161e6:	9b42      	ldr	r3, [sp, #264]	; 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   161e8:	2b04      	cmp	r3, #4
   161ea:	dc10      	bgt.n	1620e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xea>
    if (size_ > kMaxSmallSize) {
   161ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   161ee:	2b05      	cmp	r3, #5
   161f0:	dd03      	ble.n	161fa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6>
      delete[] dims_pointer_;
   161f2:	980d      	ldr	r0, [sp, #52]	; 0x34
   161f4:	b108      	cbz	r0, 161fa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6>
   161f6:	f002 fc40 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
   161fa:	2304      	movs	r3, #4
   161fc:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   161fe:	9842      	ldr	r0, [sp, #264]	; 0x108
    const int size_increase = new_shape_size - shape.DimensionsCount();
   16200:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   16202:	2300      	movs	r3, #0
   16204:	e00f      	b.n	16226 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16206:	ab07      	add	r3, sp, #28
   16208:	e7e2      	b.n	161d0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1620a:	a93d      	add	r1, sp, #244	; 0xf4
   1620c:	e7e6      	b.n	161dc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   1620e:	f002 fc49 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
   16212:	f002 fc47 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16216:	f002 fc45 	bl	18aa4 <abort>
      dims_[i] = val;
   1621a:	aa0c      	add	r2, sp, #48	; 0x30
   1621c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16220:	2101      	movs	r1, #1
   16222:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   16224:	3301      	adds	r3, #1
   16226:	4298      	cmp	r0, r3
   16228:	dd0b      	ble.n	16242 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x11e>
    TFLITE_DCHECK_GE(i, 0);
   1622a:	2b00      	cmp	r3, #0
   1622c:	dbf1      	blt.n	16212 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xee>
    TFLITE_DCHECK_LT(i, size_);
   1622e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16230:	4293      	cmp	r3, r2
   16232:	daf0      	bge.n	16216 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2>
    if (size_ > kMaxSmallSize) {
   16234:	2a05      	cmp	r2, #5
   16236:	ddf0      	ble.n	1621a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf6>
      dims_pointer_[i] = val;
   16238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1623a:	2101      	movs	r1, #1
   1623c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   16240:	e7f0      	b.n	16224 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x100>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16244:	2b05      	cmp	r3, #5
   16246:	dd0c      	ble.n	16262 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x13e>
   16248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   1624a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1624e:	9a42      	ldr	r2, [sp, #264]	; 0x108
   16250:	2a05      	cmp	r2, #5
   16252:	dd08      	ble.n	16266 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x142>
   16254:	9943      	ldr	r1, [sp, #268]	; 0x10c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   16256:	0092      	lsls	r2, r2, #2
   16258:	f002 fc4b 	bl	18af2 <memcpy>
  for (int i = N - 1; i >= 0; --i) {
   1625c:	2303      	movs	r3, #3
  int desc_stride = 1;
   1625e:	2101      	movs	r1, #1
  }
   16260:	e017      	b.n	16292 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16262:	ab0d      	add	r3, sp, #52	; 0x34
   16264:	e7f1      	b.n	1624a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x126>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16266:	a943      	add	r1, sp, #268	; 0x10c
   16268:	e7f5      	b.n	16256 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x132>
    TFLITE_DCHECK_GE(i, 0);
   1626a:	f002 fc1b 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1626e:	f002 fc19 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16272:	aa06      	add	r2, sp, #24
   16274:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16278:	6850      	ldr	r0, [r2, #4]
   1627a:	e015      	b.n	162a8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x184>
    TFLITE_DCHECK_GE(i, 0);
   1627c:	f002 fc12 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16280:	f002 fc10 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16284:	aa06      	add	r2, sp, #24
   16286:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1628a:	6852      	ldr	r2, [r2, #4]
    desc_stride *= input_shape.Dims(i);
   1628c:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
   16290:	3b01      	subs	r3, #1
   16292:	2b00      	cmp	r3, #0
   16294:	db19      	blt.n	162ca <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1a6>
    TFLITE_DCHECK_GE(i, 0);
   16296:	dbe8      	blt.n	1626a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x146>
    TFLITE_DCHECK_LT(i, size_);
   16298:	9a06      	ldr	r2, [sp, #24]
   1629a:	4293      	cmp	r3, r2
   1629c:	dae7      	bge.n	1626e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x14a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1629e:	2a05      	cmp	r2, #5
   162a0:	dde7      	ble.n	16272 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x14e>
   162a2:	9a07      	ldr	r2, [sp, #28]
   162a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
   162a8:	aa12      	add	r2, sp, #72	; 0x48
   162aa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
   162ae:	1d18      	adds	r0, r3, #4
   162b0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   162b4:	2b00      	cmp	r3, #0
   162b6:	dbe1      	blt.n	1627c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x158>
    TFLITE_DCHECK_LT(i, size_);
   162b8:	9a06      	ldr	r2, [sp, #24]
   162ba:	4293      	cmp	r3, r2
   162bc:	dae0      	bge.n	16280 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   162be:	2a05      	cmp	r2, #5
   162c0:	dde0      	ble.n	16284 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x160>
   162c2:	9a07      	ldr	r2, [sp, #28]
   162c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   162c8:	e7e0      	b.n	1628c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x168>
  for (int i = N - 1; i >= 0; --i) {
   162ca:	2303      	movs	r3, #3
  int desc_stride = 1;
   162cc:	2101      	movs	r1, #1
   162ce:	e013      	b.n	162f8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d4>
    TFLITE_DCHECK_GE(i, 0);
   162d0:	f002 fbe8 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   162d4:	f002 fbe6 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   162d8:	aa0c      	add	r2, sp, #48	; 0x30
   162da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   162de:	6850      	ldr	r0, [r2, #4]
   162e0:	e015      	b.n	1630e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ea>
    TFLITE_DCHECK_GE(i, 0);
   162e2:	f002 fbdf 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   162e6:	f002 fbdd 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   162ea:	aa0c      	add	r2, sp, #48	; 0x30
   162ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   162f0:	6852      	ldr	r2, [r2, #4]
    desc_stride *= input_shape.Dims(i);
   162f2:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
   162f6:	3b01      	subs	r3, #1
   162f8:	2b00      	cmp	r3, #0
   162fa:	db19      	blt.n	16330 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x20c>
    TFLITE_DCHECK_GE(i, 0);
   162fc:	dbe8      	blt.n	162d0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ac>
    TFLITE_DCHECK_LT(i, size_);
   162fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16300:	4293      	cmp	r3, r2
   16302:	dae7      	bge.n	162d4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1b0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16304:	2a05      	cmp	r2, #5
   16306:	dde7      	ble.n	162d8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1b4>
   16308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1630a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
   1630e:	aa1a      	add	r2, sp, #104	; 0x68
   16310:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
   16314:	1d18      	adds	r0, r3, #4
   16316:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   1631a:	2b00      	cmp	r3, #0
   1631c:	dbe1      	blt.n	162e2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1be>
    TFLITE_DCHECK_LT(i, size_);
   1631e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16320:	4293      	cmp	r3, r2
   16322:	dae0      	bge.n	162e6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16324:	2a05      	cmp	r2, #5
   16326:	dde0      	ble.n	162ea <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c6>
   16328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1632a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1632e:	e7e0      	b.n	162f2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ce>
  for (int i = 0; i < N; ++i) {
   16330:	2300      	movs	r3, #0
   16332:	e019      	b.n	16368 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x244>
    TFLITE_DCHECK_GE(i, 0);
   16334:	f002 fbb6 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16338:	f002 fbb4 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1633c:	aa06      	add	r2, sp, #24
   1633e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16342:	6852      	ldr	r2, [r2, #4]
   16344:	e01c      	b.n	16380 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x25c>
    TFLITE_DCHECK_GE(i, 0);
   16346:	f002 fbad 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1634a:	f002 fbab 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1634e:	a90c      	add	r1, sp, #48	; 0x30
   16350:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   16354:	6849      	ldr	r1, [r1, #4]
   16356:	e01d      	b.n	16394 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
        desc0_out->strides[i] = 0;
   16358:	a812      	add	r0, sp, #72	; 0x48
   1635a:	1d1a      	adds	r2, r3, #4
   1635c:	2400      	movs	r4, #0
   1635e:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        desc0_out->extents[i] = extent1;
   16362:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  for (int i = 0; i < N; ++i) {
   16366:	3301      	adds	r3, #1
   16368:	2b03      	cmp	r3, #3
   1636a:	dc23      	bgt.n	163b4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x290>
    TFLITE_DCHECK_GE(i, 0);
   1636c:	2b00      	cmp	r3, #0
   1636e:	dbe1      	blt.n	16334 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x210>
    TFLITE_DCHECK_LT(i, size_);
   16370:	9a06      	ldr	r2, [sp, #24]
   16372:	4293      	cmp	r3, r2
   16374:	dae0      	bge.n	16338 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x214>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16376:	2a05      	cmp	r2, #5
   16378:	dde0      	ble.n	1633c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x218>
   1637a:	9a07      	ldr	r2, [sp, #28]
   1637c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   16380:	2b00      	cmp	r3, #0
   16382:	dbe0      	blt.n	16346 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x222>
    TFLITE_DCHECK_LT(i, size_);
   16384:	990c      	ldr	r1, [sp, #48]	; 0x30
   16386:	428b      	cmp	r3, r1
   16388:	dadf      	bge.n	1634a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1638a:	2905      	cmp	r1, #5
   1638c:	dddf      	ble.n	1634e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x22a>
   1638e:	990d      	ldr	r1, [sp, #52]	; 0x34
   16390:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
   16394:	4291      	cmp	r1, r2
   16396:	d0e6      	beq.n	16366 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
      if (extent0 == 1) {
   16398:	2a01      	cmp	r2, #1
   1639a:	d0dd      	beq.n	16358 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x234>
        TFLITE_DCHECK_EQ(extent1, 1);
   1639c:	2901      	cmp	r1, #1
   1639e:	d107      	bne.n	163b0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
        desc1_out->strides[i] = 0;
   163a0:	a81a      	add	r0, sp, #104	; 0x68
   163a2:	1d19      	adds	r1, r3, #4
   163a4:	2400      	movs	r4, #0
   163a6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
        desc1_out->extents[i] = extent0;
   163aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   163ae:	e7da      	b.n	16366 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
        TFLITE_DCHECK_EQ(extent1, 1);
   163b0:	f002 fb78 	bl	18aa4 <abort>
    if (size_ > kMaxSmallSize) {
   163b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   163b6:	2b05      	cmp	r3, #5
   163b8:	dd03      	ble.n	163c2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29e>
      delete[] dims_pointer_;
   163ba:	980d      	ldr	r0, [sp, #52]	; 0x34
   163bc:	b108      	cbz	r0, 163c2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29e>
   163be:	f002 fb5c 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   163c2:	9b06      	ldr	r3, [sp, #24]
   163c4:	2b05      	cmp	r3, #5
   163c6:	dd03      	ble.n	163d0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2ac>
      delete[] dims_pointer_;
   163c8:	9807      	ldr	r0, [sp, #28]
   163ca:	b108      	cbz	r0, 163d0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2ac>
   163cc:	f002 fb55 	bl	18a7a <_ZdaPv>
      : size_(0) {
   163d0:	2300      	movs	r3, #0
   163d2:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   163d4:	9b48      	ldr	r3, [sp, #288]	; 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   163d6:	2b04      	cmp	r3, #4
   163d8:	dc0c      	bgt.n	163f4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d0>
    if (size_ > kMaxSmallSize) {
   163da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   163dc:	2b05      	cmp	r3, #5
   163de:	dd03      	ble.n	163e8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2c4>
      delete[] dims_pointer_;
   163e0:	980d      	ldr	r0, [sp, #52]	; 0x34
   163e2:	b108      	cbz	r0, 163e8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2c4>
   163e4:	f002 fb49 	bl	18a7a <_ZdaPv>
    size_ = dimensions_count;
   163e8:	2304      	movs	r3, #4
   163ea:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   163ec:	9848      	ldr	r0, [sp, #288]	; 0x120
    const int size_increase = new_shape_size - shape.DimensionsCount();
   163ee:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   163f0:	2300      	movs	r3, #0
   163f2:	e00b      	b.n	1640c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2e8>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   163f4:	f002 fb56 	bl	18aa4 <abort>
    TFLITE_DCHECK_GE(i, 0);
   163f8:	f002 fb54 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   163fc:	f002 fb52 	bl	18aa4 <abort>
      dims_[i] = val;
   16400:	aa0c      	add	r2, sp, #48	; 0x30
   16402:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16406:	2101      	movs	r1, #1
   16408:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   1640a:	3301      	adds	r3, #1
   1640c:	4298      	cmp	r0, r3
   1640e:	dd0b      	ble.n	16428 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x304>
    TFLITE_DCHECK_GE(i, 0);
   16410:	2b00      	cmp	r3, #0
   16412:	dbf1      	blt.n	163f8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d4>
    TFLITE_DCHECK_LT(i, size_);
   16414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16416:	4293      	cmp	r3, r2
   16418:	daf0      	bge.n	163fc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d8>
    if (size_ > kMaxSmallSize) {
   1641a:	2a05      	cmp	r2, #5
   1641c:	ddf0      	ble.n	16400 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2dc>
      dims_pointer_[i] = val;
   1641e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16420:	2101      	movs	r1, #1
   16422:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   16426:	e7f0      	b.n	1640a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2e6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1642a:	2b05      	cmp	r3, #5
   1642c:	dd01      	ble.n	16432 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x30e>
   1642e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16430:	e000      	b.n	16434 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x310>
   16432:	ab0d      	add	r3, sp, #52	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   16434:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16438:	9a48      	ldr	r2, [sp, #288]	; 0x120
   1643a:	2a05      	cmp	r2, #5
   1643c:	dd01      	ble.n	16442 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x31e>
   1643e:	9949      	ldr	r1, [sp, #292]	; 0x124
   16440:	e000      	b.n	16444 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x320>
   16442:	a949      	add	r1, sp, #292	; 0x124
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   16444:	0092      	lsls	r2, r2, #2
   16446:	f002 fb54 	bl	18af2 <memcpy>
  *max = params.quantized_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
  *min = params.float_activation_min;
   1644a:	f8dd b0bc 	ldr.w	fp, [sp, #188]	; 0xbc
  *max = params.float_activation_max;
   1644e:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   16452:	2700      	movs	r7, #0
    TFLITE_DCHECK_LT(i, size_);
   16454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16456:	2b00      	cmp	r3, #0
   16458:	dd08      	ble.n	1646c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x348>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1645a:	2b05      	cmp	r3, #5
   1645c:	dd08      	ble.n	16470 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x34c>
   1645e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16460:	681b      	ldr	r3, [r3, #0]
   16462:	429f      	cmp	r7, r3
   16464:	f280 80e0 	bge.w	16628 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x504>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   16468:	2600      	movs	r6, #0
   1646a:	e0ce      	b.n	1660a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4e6>
    TFLITE_DCHECK_LT(i, size_);
   1646c:	f002 fb1a 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16472:	e7f6      	b.n	16462 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x33e>
    TFLITE_DCHECK_LT(i, size_);
   16474:	f002 fb16 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1647a:	e0cf      	b.n	1661c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f8>
    TFLITE_DCHECK_LT(i, size_);
   1647c:	f002 fb12 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16482:	e0bd      	b.n	16600 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4dc>
    TFLITE_DCHECK_LT(i, size_);
   16484:	f002 fb0e 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16488:	9b10      	ldr	r3, [sp, #64]	; 0x40
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1648a:	429d      	cmp	r5, r3
   1648c:	f280 80ae 	bge.w	165ec <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4c8>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   16490:	2f00      	cmp	r7, #0
   16492:	f2c0 808b 	blt.w	165ac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x488>
   16496:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16498:	429f      	cmp	r7, r3
   1649a:	f280 8087 	bge.w	165ac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x488>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   1649e:	2e00      	cmp	r6, #0
   164a0:	f2c0 8086 	blt.w	165b0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x48c>
   164a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   164a6:	429e      	cmp	r6, r3
   164a8:	f280 8082 	bge.w	165b0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x48c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   164ac:	2c00      	cmp	r4, #0
   164ae:	f2c0 8081 	blt.w	165b4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x490>
   164b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   164b4:	429c      	cmp	r4, r3
   164b6:	da7d      	bge.n	165b4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x490>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   164b8:	2d00      	cmp	r5, #0
   164ba:	db7d      	blt.n	165b8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x494>
   164bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   164be:	429d      	cmp	r5, r3
   164c0:	da7a      	bge.n	165b8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x494>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   164c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   164c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   164c6:	fb02 f206 	mul.w	r2, r2, r6
   164ca:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
   164ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   164d0:	9918      	ldr	r1, [sp, #96]	; 0x60
   164d2:	fb01 f104 	mul.w	r1, r1, r4
   164d6:	fb02 1205 	mla	r2, r2, r5, r1
         i3 * desc.strides[3];
   164da:	4413      	add	r3, r2
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   164dc:	9a01      	ldr	r2, [sp, #4]
   164de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   164e2:	2f00      	cmp	r7, #0
   164e4:	db6a      	blt.n	165bc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x498>
   164e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   164e8:	429f      	cmp	r7, r3
   164ea:	da67      	bge.n	165bc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x498>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   164ec:	2e00      	cmp	r6, #0
   164ee:	db67      	blt.n	165c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49c>
   164f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   164f2:	429e      	cmp	r6, r3
   164f4:	da64      	bge.n	165c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   164f6:	2c00      	cmp	r4, #0
   164f8:	db64      	blt.n	165c4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a0>
   164fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   164fc:	429c      	cmp	r4, r3
   164fe:	da61      	bge.n	165c4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a0>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   16500:	2d00      	cmp	r5, #0
   16502:	db61      	blt.n	165c8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a4>
   16504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16506:	429d      	cmp	r5, r3
   16508:	da5e      	bge.n	165c8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a4>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   1650a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1650c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1650e:	fb02 f206 	mul.w	r2, r2, r6
   16512:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
   16516:	9a21      	ldr	r2, [sp, #132]	; 0x84
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   16518:	9920      	ldr	r1, [sp, #128]	; 0x80
   1651a:	fb01 f104 	mul.w	r1, r1, r4
   1651e:	fb02 1205 	mla	r2, r2, r5, r1
         i3 * desc.strides[3];
   16522:	4413      	add	r3, r2
              ActivationFunctionWithMinMax<T>(
   16524:	9a02      	ldr	r2, [sp, #8]
   16526:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1652a:	f7ea fae9 	bl	b00 <__addsf3>
   1652e:	4601      	mov	r1, r0
  inline int32_t DimensionsCount() const { return size_; }
   16530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16532:	2b04      	cmp	r3, #4
   16534:	d14a      	bne.n	165cc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16536:	2f00      	cmp	r7, #0
   16538:	db4a      	blt.n	165d0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ac>
   1653a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1653c:	429f      	cmp	r7, r3
   1653e:	da47      	bge.n	165d0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16540:	2e00      	cmp	r6, #0
   16542:	db47      	blt.n	165d4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b0>
   16544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16546:	4296      	cmp	r6, r2
   16548:	da44      	bge.n	165d4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1654a:	2c00      	cmp	r4, #0
   1654c:	db44      	blt.n	165d8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
   1654e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16550:	429c      	cmp	r4, r3
   16552:	da41      	bge.n	165d8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16554:	2d00      	cmp	r5, #0
   16556:	db41      	blt.n	165dc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b8>
   16558:	9810      	ldr	r0, [sp, #64]	; 0x40
   1655a:	4285      	cmp	r5, r0
   1655c:	da3e      	bge.n	165dc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1655e:	fb02 6207 	mla	r2, r2, r7, r6
   16562:	fb02 4303 	mla	r3, r2, r3, r4
   16566:	fb03 5800 	mla	r8, r3, r0, r5
   1656a:	9106      	str	r1, [sp, #24]
   1656c:	f8cd b014 	str.w	fp, [sp, #20]
   16570:	f8cd a010 	str.w	sl, [sp, #16]
      if (__a < __b)
   16574:	4658      	mov	r0, fp
   16576:	f7ea fd87 	bl	1088 <__aeabi_fcmpgt>
   1657a:	bb88      	cbnz	r0, 165e0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4bc>
      return __a;
   1657c:	f10d 0918 	add.w	r9, sp, #24
      if (__b < __a)
   16580:	f8d9 1000 	ldr.w	r1, [r9]
   16584:	4650      	mov	r0, sl
   16586:	f7ea fd61 	bl	104c <__aeabi_fcmplt>
   1658a:	bb60      	cbnz	r0, 165e6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4c2>
  return min(max(x, output_activation_min), output_activation_max);
   1658c:	f8d9 3000 	ldr.w	r3, [r9]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   16590:	9a03      	ldr	r2, [sp, #12]
   16592:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16596:	3501      	adds	r5, #1
    TFLITE_DCHECK_LT(i, size_);
   16598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1659a:	2b03      	cmp	r3, #3
   1659c:	f77f af72 	ble.w	16484 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x360>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   165a0:	2b05      	cmp	r3, #5
   165a2:	f77f af71 	ble.w	16488 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x364>
   165a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   165a8:	68db      	ldr	r3, [r3, #12]
   165aa:	e76e      	b.n	1648a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x366>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   165ac:	f002 fa7a 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   165b0:	f002 fa78 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   165b4:	f002 fa76 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   165b8:	f002 fa74 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   165bc:	f002 fa72 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   165c0:	f002 fa70 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   165c4:	f002 fa6e 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   165c8:	f002 fa6c 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   165cc:	f002 fa6a 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   165d0:	f002 fa68 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   165d4:	f002 fa66 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   165d8:	f002 fa64 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   165dc:	f002 fa62 	bl	18aa4 <abort>
	return __b;
   165e0:	f10d 0914 	add.w	r9, sp, #20
   165e4:	e7cc      	b.n	16580 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x45c>
	return __b;
   165e6:	f10d 0910 	add.w	r9, sp, #16
   165ea:	e7cf      	b.n	1658c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x468>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   165ec:	3401      	adds	r4, #1
    TFLITE_DCHECK_LT(i, size_);
   165ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   165f0:	2b02      	cmp	r3, #2
   165f2:	f77f af43 	ble.w	1647c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x358>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   165f6:	2b05      	cmp	r3, #5
   165f8:	f77f af42 	ble.w	16480 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x35c>
   165fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   165fe:	689b      	ldr	r3, [r3, #8]
   16600:	429c      	cmp	r4, r3
   16602:	da01      	bge.n	16608 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4e4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16604:	2500      	movs	r5, #0
   16606:	e7c7      	b.n	16598 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x474>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   16608:	3601      	adds	r6, #1
    TFLITE_DCHECK_LT(i, size_);
   1660a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1660c:	2b01      	cmp	r3, #1
   1660e:	f77f af31 	ble.w	16474 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16612:	2b05      	cmp	r3, #5
   16614:	f77f af30 	ble.w	16478 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x354>
   16618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1661a:	685b      	ldr	r3, [r3, #4]
   1661c:	429e      	cmp	r6, r3
   1661e:	da01      	bge.n	16624 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x500>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   16620:	2400      	movs	r4, #0
   16622:	e7e4      	b.n	165ee <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ca>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   16624:	3701      	adds	r7, #1
   16626:	e715      	b.n	16454 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x330>
    if (size_ > kMaxSmallSize) {
   16628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1662a:	2b05      	cmp	r3, #5
   1662c:	dd03      	ble.n	16636 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x512>
      delete[] dims_pointer_;
   1662e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16630:	b108      	cbz	r0, 16636 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x512>
   16632:	f002 fa22 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16636:	9b48      	ldr	r3, [sp, #288]	; 0x120
   16638:	2b05      	cmp	r3, #5
   1663a:	dd03      	ble.n	16644 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x520>
      delete[] dims_pointer_;
   1663c:	9849      	ldr	r0, [sp, #292]	; 0x124
   1663e:	b108      	cbz	r0, 16644 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x520>
   16640:	f002 fa1b 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16644:	9b42      	ldr	r3, [sp, #264]	; 0x108
   16646:	2b05      	cmp	r3, #5
   16648:	dd03      	ble.n	16652 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x52e>
      delete[] dims_pointer_;
   1664a:	9843      	ldr	r0, [sp, #268]	; 0x10c
   1664c:	b108      	cbz	r0, 16652 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x52e>
   1664e:	f002 fa14 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16652:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   16654:	2b05      	cmp	r3, #5
   16656:	f340 8097 	ble.w	16788 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
      delete[] dims_pointer_;
   1665a:	983d      	ldr	r0, [sp, #244]	; 0xf4
   1665c:	2800      	cmp	r0, #0
   1665e:	f000 8093 	beq.w	16788 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
   16662:	f002 fa0a 	bl	18a7a <_ZdaPv>
   16666:	e08f      	b.n	16788 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   16668:	4631      	mov	r1, r6
   1666a:	a84e      	add	r0, sp, #312	; 0x138
   1666c:	f000 fe45 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   16670:	4630      	mov	r0, r6
   16672:	f7ff fc83 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   16676:	9001      	str	r0, [sp, #4]
                       tflite::micro::GetTensorShape(input2),
   16678:	4629      	mov	r1, r5
   1667a:	a854      	add	r0, sp, #336	; 0x150
   1667c:	f000 fe3d 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   16680:	4628      	mov	r0, r5
   16682:	f7ff fc7b 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   16686:	4607      	mov	r7, r0
                       tflite::micro::GetTensorShape(output),
   16688:	4621      	mov	r1, r4
   1668a:	a85a      	add	r0, sp, #360	; 0x168
   1668c:	f000 fe35 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   16690:	4620      	mov	r0, r4
   16692:	f7ff fc79 	bl	15f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   16696:	4680      	mov	r8, r0
  *min = params.float_activation_min;
   16698:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
  *max = params.float_activation_max;
   1669c:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166a0:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   166a2:	2a05      	cmp	r2, #5
   166a4:	dd03      	ble.n	166ae <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x58a>
   166a6:	984f      	ldr	r0, [sp, #316]	; 0x13c
    for (int i = 0; i < size_; i++) {
   166a8:	2300      	movs	r3, #0
    int buffer_size = 1;
   166aa:	2601      	movs	r6, #1
   166ac:	e006      	b.n	166bc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x598>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166ae:	a84f      	add	r0, sp, #316	; 0x13c
   166b0:	e7fa      	b.n	166a8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x584>
      buffer_size *= dims_data[i];
   166b2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   166b6:	fb01 f606 	mul.w	r6, r1, r6
    for (int i = 0; i < size_; i++) {
   166ba:	3301      	adds	r3, #1
   166bc:	429a      	cmp	r2, r3
   166be:	dcf8      	bgt.n	166b2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x58e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166c0:	9954      	ldr	r1, [sp, #336]	; 0x150
   166c2:	2905      	cmp	r1, #5
   166c4:	dd0a      	ble.n	166dc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5b8>
   166c6:	9c55      	ldr	r4, [sp, #340]	; 0x154
    for (int i = 0; i < size_; i++) {
   166c8:	2300      	movs	r3, #0
    int buffer_size = 1;
   166ca:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
   166cc:	4299      	cmp	r1, r3
   166ce:	dd07      	ble.n	166e0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5bc>
      buffer_size *= dims_data[i];
   166d0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   166d4:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
   166d8:	3301      	adds	r3, #1
   166da:	e7f7      	b.n	166cc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166dc:	ac55      	add	r4, sp, #340	; 0x154
   166de:	e7f3      	b.n	166c8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5a4>
   166e0:	9c5a      	ldr	r4, [sp, #360]	; 0x168
   166e2:	2c05      	cmp	r4, #5
   166e4:	dd0a      	ble.n	166fc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5d8>
   166e6:	9d5b      	ldr	r5, [sp, #364]	; 0x16c
    for (int i = 0; i < size_; i++) {
   166e8:	2300      	movs	r3, #0
    int buffer_size = 1;
   166ea:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   166ec:	429c      	cmp	r4, r3
   166ee:	dd07      	ble.n	16700 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5dc>
      buffer_size *= dims_data[i];
   166f0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   166f4:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   166f8:	3301      	adds	r3, #1
   166fa:	e7f7      	b.n	166ec <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5c8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166fc:	ad5b      	add	r5, sp, #364	; 0x16c
   166fe:	e7f3      	b.n	166e8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5c4>
  TFLITE_CHECK_EQ(size_1, size_2);
   16700:	4296      	cmp	r6, r2
   16702:	d103      	bne.n	1670c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e8>
  TFLITE_CHECK_EQ(size_2, size_3);
   16704:	428a      	cmp	r2, r1
   16706:	d103      	bne.n	16710 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ec>
  for (int i = 0; i < flat_size; ++i) {
   16708:	2400      	movs	r4, #0
   1670a:	e009      	b.n	16720 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5fc>
  TFLITE_CHECK_EQ(size_1, size_2);
   1670c:	f002 f9ca 	bl	18aa4 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
   16710:	f002 f9c8 	bl	18aa4 <abort>
	return __b;
   16714:	ad12      	add	r5, sp, #72	; 0x48
   16716:	e01a      	b.n	1674e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62a>
  return min(max(x, output_activation_min), output_activation_max);
   16718:	682b      	ldr	r3, [r5, #0]
    output_data[i] = ActivationFunctionWithMinMax(
   1671a:	f848 300b 	str.w	r3, [r8, fp]
  for (int i = 0; i < flat_size; ++i) {
   1671e:	3401      	adds	r4, #1
   16720:	42b4      	cmp	r4, r6
   16722:	da1c      	bge.n	1675e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x63a>
        input1_data[i] + input2_data[i], activation_min, activation_max);
   16724:	ea4f 0b84 	mov.w	fp, r4, lsl #2
    output_data[i] = ActivationFunctionWithMinMax(
   16728:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   1672c:	9b01      	ldr	r3, [sp, #4]
   1672e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   16732:	f7ea f9e5 	bl	b00 <__addsf3>
   16736:	4601      	mov	r1, r0
   16738:	901a      	str	r0, [sp, #104]	; 0x68
   1673a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   1673e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
      if (__a < __b)
   16742:	4648      	mov	r0, r9
   16744:	f7ea fca0 	bl	1088 <__aeabi_fcmpgt>
   16748:	2800      	cmp	r0, #0
   1674a:	d1e3      	bne.n	16714 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f0>
      return __a;
   1674c:	ad1a      	add	r5, sp, #104	; 0x68
      if (__b < __a)
   1674e:	6829      	ldr	r1, [r5, #0]
   16750:	4650      	mov	r0, sl
   16752:	f7ea fc7b 	bl	104c <__aeabi_fcmplt>
   16756:	2800      	cmp	r0, #0
   16758:	d0de      	beq.n	16718 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f4>
	return __b;
   1675a:	ad0c      	add	r5, sp, #48	; 0x30
   1675c:	e7dc      	b.n	16718 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f4>
    if (size_ > kMaxSmallSize) {
   1675e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   16760:	2b05      	cmp	r3, #5
   16762:	dd03      	ble.n	1676c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
      delete[] dims_pointer_;
   16764:	985b      	ldr	r0, [sp, #364]	; 0x16c
   16766:	b108      	cbz	r0, 1676c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
   16768:	f002 f987 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1676c:	9b54      	ldr	r3, [sp, #336]	; 0x150
   1676e:	2b05      	cmp	r3, #5
   16770:	dd03      	ble.n	1677a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x656>
      delete[] dims_pointer_;
   16772:	9855      	ldr	r0, [sp, #340]	; 0x154
   16774:	b108      	cbz	r0, 1677a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x656>
   16776:	f002 f980 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1677a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
   1677c:	2b05      	cmp	r3, #5
   1677e:	dd03      	ble.n	16788 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
      delete[] dims_pointer_;
   16780:	984f      	ldr	r0, [sp, #316]	; 0x13c
   16782:	b108      	cbz	r0, 16788 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
   16784:	f002 f979 	bl	18a7a <_ZdaPv>
}
   16788:	b061      	add	sp, #388	; 0x184
   1678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001678e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   1678e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   16790:	b108      	cbz	r0, 16796 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x8>
}
   16792:	6800      	ldr	r0, [r0, #0]
   16794:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   16796:	f002 f985 	bl	18aa4 <abort>

0001679a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1679a:	b108      	cbz	r0, 167a0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x6>
   1679c:	6800      	ldr	r0, [r0, #0]
   1679e:	4770      	bx	lr
}
   167a0:	4770      	bx	lr

000167a2 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   167a2:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   167a4:	b108      	cbz	r0, 167aa <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
}
   167a6:	6800      	ldr	r0, [r0, #0]
   167a8:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   167aa:	f002 f97b 	bl	18aa4 <abort>

000167ae <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   167ae:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   167b0:	b108      	cbz	r0, 167b6 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x8>
}
   167b2:	6800      	ldr	r0, [r0, #0]
   167b4:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   167b6:	f002 f975 	bl	18aa4 <abort>

000167ba <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   167ba:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   167bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   167be:	b113      	cbz	r3, 167c6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   167c0:	2134      	movs	r1, #52	; 0x34
   167c2:	4798      	blx	r3
}
   167c4:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   167c6:	f002 f96d 	bl	18aa4 <abort>

000167ca <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
   167ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167ce:	b0a3      	sub	sp, #140	; 0x8c
   167d0:	9217      	str	r2, [sp, #92]	; 0x5c
   167d2:	461e      	mov	r6, r3
   167d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   167d6:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int stride_width = params.stride_width;
   167d8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   167dc:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
   167de:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   167e2:	920d      	str	r2, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
   167e4:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   167e8:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
   167ea:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   167ee:	920f      	str	r2, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
   167f0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   167f4:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   167f6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   167fa:	9211      	str	r2, [sp, #68]	; 0x44
  const float output_activation_min = params.float_activation_min;
   167fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
   167fe:	9212      	str	r2, [sp, #72]	; 0x48
  const float output_activation_max = params.float_activation_max;
   16800:	6b42      	ldr	r2, [r0, #52]	; 0x34
   16802:	9204      	str	r2, [sp, #16]
  inline int32_t DimensionsCount() const { return size_; }
   16804:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   16806:	2a04      	cmp	r2, #4
   16808:	d173      	bne.n	168f2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x128>
   1680a:	468b      	mov	fp, r1
   1680c:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   1680e:	2a04      	cmp	r2, #4
   16810:	d171      	bne.n	168f6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12c>
   16812:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   16814:	2a04      	cmp	r2, #4
   16816:	d170      	bne.n	168fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x130>
    TFLITE_DCHECK_LT(i, size_);
   16818:	680a      	ldr	r2, [r1, #0]
   1681a:	2a00      	cmp	r2, #0
   1681c:	dd6f      	ble.n	168fe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1681e:	2a05      	cmp	r2, #5
   16820:	dd6f      	ble.n	16902 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x138>
   16822:	684a      	ldr	r2, [r1, #4]
   16824:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16826:	6839      	ldr	r1, [r7, #0]
   16828:	2900      	cmp	r1, #0
   1682a:	dd6c      	ble.n	16906 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x13c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1682c:	2905      	cmp	r1, #5
   1682e:	dd6c      	ble.n	1690a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x140>
   16830:	6879      	ldr	r1, [r7, #4]
   16832:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16834:	4291      	cmp	r1, r2
   16836:	d16a      	bne.n	1690e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16838:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
   1683a:	6839      	ldr	r1, [r7, #0]
   1683c:	2900      	cmp	r1, #0
   1683e:	dd68      	ble.n	16912 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x148>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16840:	2905      	cmp	r1, #5
   16842:	dd68      	ble.n	16916 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x14c>
   16844:	6879      	ldr	r1, [r7, #4]
   16846:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16848:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
   1684a:	428a      	cmp	r2, r1
   1684c:	dc65      	bgt.n	1691a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x150>
      return __a;
   1684e:	aa21      	add	r2, sp, #132	; 0x84
   16850:	6812      	ldr	r2, [r2, #0]
   16852:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   16854:	f8db 2000 	ldr.w	r2, [fp]
   16858:	2a03      	cmp	r2, #3
   1685a:	dd60      	ble.n	1691e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1685c:	2a05      	cmp	r2, #5
   1685e:	dd60      	ble.n	16922 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x158>
   16860:	f8db 2004 	ldr.w	r2, [fp, #4]
   16864:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   16866:	6831      	ldr	r1, [r6, #0]
   16868:	2903      	cmp	r1, #3
   1686a:	dd5d      	ble.n	16928 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x15e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1686c:	2905      	cmp	r1, #5
   1686e:	dd5d      	ble.n	1692c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x162>
   16870:	6871      	ldr	r1, [r6, #4]
   16872:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16874:	4291      	cmp	r1, r2
   16876:	d15b      	bne.n	16930 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16878:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   1687a:	6831      	ldr	r1, [r6, #0]
   1687c:	2903      	cmp	r1, #3
   1687e:	dd59      	ble.n	16934 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16880:	2905      	cmp	r1, #5
   16882:	dd59      	ble.n	16938 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16e>
   16884:	6871      	ldr	r1, [r6, #4]
   16886:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16888:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   1688a:	428a      	cmp	r2, r1
   1688c:	dc56      	bgt.n	1693c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x172>
      return __a;
   1688e:	aa1f      	add	r2, sp, #124	; 0x7c
   16890:	6812      	ldr	r2, [r2, #0]
   16892:	9215      	str	r2, [sp, #84]	; 0x54
    TFLITE_DCHECK_LT(i, size_);
   16894:	6832      	ldr	r2, [r6, #0]
   16896:	2a00      	cmp	r2, #0
   16898:	dd52      	ble.n	16940 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1689a:	2a05      	cmp	r2, #5
   1689c:	dd52      	ble.n	16944 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17a>
   1689e:	6872      	ldr	r2, [r6, #4]
   168a0:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   168a2:	6839      	ldr	r1, [r7, #0]
   168a4:	2903      	cmp	r1, #3
   168a6:	dd4f      	ble.n	16948 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   168a8:	2905      	cmp	r1, #5
   168aa:	dd4f      	ble.n	1694c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
   168ac:	6879      	ldr	r1, [r7, #4]
   168ae:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   168b0:	4291      	cmp	r1, r2
   168b2:	d14d      	bne.n	16950 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   168b4:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   168b6:	6839      	ldr	r1, [r7, #0]
   168b8:	2903      	cmp	r1, #3
   168ba:	dd4b      	ble.n	16954 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   168bc:	2905      	cmp	r1, #5
   168be:	dd4b      	ble.n	16958 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18e>
   168c0:	6879      	ldr	r1, [r7, #4]
   168c2:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   168c4:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   168c6:	428a      	cmp	r2, r1
   168c8:	dc48      	bgt.n	1695c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x192>
      return __a;
   168ca:	aa1d      	add	r2, sp, #116	; 0x74
   168cc:	6812      	ldr	r2, [r2, #0]
   168ce:	9205      	str	r2, [sp, #20]
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
   168d0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   168d2:	2a00      	cmp	r2, #0
   168d4:	d049      	beq.n	1696a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   168d6:	681c      	ldr	r4, [r3, #0]
   168d8:	2c05      	cmp	r4, #5
   168da:	dd41      	ble.n	16960 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
   168dc:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   168de:	2200      	movs	r2, #0
    int buffer_size = 1;
   168e0:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   168e2:	42a2      	cmp	r2, r4
   168e4:	da3e      	bge.n	16964 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19a>
      buffer_size *= dims_data[i];
   168e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   168ea:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   168ee:	3201      	adds	r2, #1
   168f0:	e7f7      	b.n	168e2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x118>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   168f2:	f002 f8d7 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   168f6:	f002 f8d5 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   168fa:	f002 f8d3 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   168fe:	f002 f8d1 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16902:	684a      	ldr	r2, [r1, #4]
   16904:	e78f      	b.n	16826 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5c>
    TFLITE_DCHECK_LT(i, size_);
   16906:	f002 f8cd 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1690a:	6879      	ldr	r1, [r7, #4]
   1690c:	e792      	b.n	16834 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1690e:	f002 f8c9 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16912:	f002 f8c7 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16916:	6879      	ldr	r1, [r7, #4]
   16918:	e796      	b.n	16848 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x7e>
	return __b;
   1691a:	aa20      	add	r2, sp, #128	; 0x80
   1691c:	e798      	b.n	16850 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x86>
    TFLITE_DCHECK_LT(i, size_);
   1691e:	f002 f8c1 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16922:	f8db 2010 	ldr.w	r2, [fp, #16]
   16926:	e79e      	b.n	16866 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x9c>
    TFLITE_DCHECK_LT(i, size_);
   16928:	f002 f8bc 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1692c:	6931      	ldr	r1, [r6, #16]
   1692e:	e7a1      	b.n	16874 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xaa>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16930:	f002 f8b8 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16934:	f002 f8b6 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16938:	6931      	ldr	r1, [r6, #16]
   1693a:	e7a5      	b.n	16888 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xbe>
   1693c:	aa1e      	add	r2, sp, #120	; 0x78
   1693e:	e7a7      	b.n	16890 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xc6>
    TFLITE_DCHECK_LT(i, size_);
   16940:	f002 f8b0 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16944:	6872      	ldr	r2, [r6, #4]
   16946:	e7ac      	b.n	168a2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd8>
    TFLITE_DCHECK_LT(i, size_);
   16948:	f002 f8ac 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1694c:	6939      	ldr	r1, [r7, #16]
   1694e:	e7af      	b.n	168b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16950:	f002 f8a8 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16954:	f002 f8a6 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16958:	6939      	ldr	r1, [r7, #16]
   1695a:	e7b3      	b.n	168c4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xfa>
   1695c:	aa1c      	add	r2, sp, #112	; 0x70
   1695e:	e7b5      	b.n	168cc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16960:	3304      	adds	r3, #4
   16962:	e7bc      	b.n	168de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16964:	9b05      	ldr	r3, [sp, #20]
   16966:	4299      	cmp	r1, r3
   16968:	d161      	bne.n	16a2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x264>
    TFLITE_DCHECK_LT(i, size_);
   1696a:	f8db 3000 	ldr.w	r3, [fp]
   1696e:	2b01      	cmp	r3, #1
   16970:	dd5f      	ble.n	16a32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x268>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16972:	2b05      	cmp	r3, #5
   16974:	dd5f      	ble.n	16a36 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x26c>
   16976:	f8db 3004 	ldr.w	r3, [fp, #4]
   1697a:	685b      	ldr	r3, [r3, #4]
   1697c:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   1697e:	f8db 3000 	ldr.w	r3, [fp]
   16982:	2b02      	cmp	r3, #2
   16984:	dd5b      	ble.n	16a3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16986:	2b05      	cmp	r3, #5
   16988:	dd5b      	ble.n	16a42 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x278>
   1698a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1698e:	689b      	ldr	r3, [r3, #8]
   16990:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   16992:	6833      	ldr	r3, [r6, #0]
   16994:	2b01      	cmp	r3, #1
   16996:	dd58      	ble.n	16a4a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x280>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16998:	2b05      	cmp	r3, #5
   1699a:	dd58      	ble.n	16a4e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
   1699c:	6873      	ldr	r3, [r6, #4]
   1699e:	685b      	ldr	r3, [r3, #4]
   169a0:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   169a2:	6833      	ldr	r3, [r6, #0]
   169a4:	2b02      	cmp	r3, #2
   169a6:	dd55      	ble.n	16a54 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   169a8:	2b05      	cmp	r3, #5
   169aa:	dd55      	ble.n	16a58 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28e>
   169ac:	6873      	ldr	r3, [r6, #4]
   169ae:	689b      	ldr	r3, [r3, #8]
   169b0:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   169b2:	683b      	ldr	r3, [r7, #0]
   169b4:	2b01      	cmp	r3, #1
   169b6:	dd52      	ble.n	16a5e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x294>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   169b8:	2b05      	cmp	r3, #5
   169ba:	dd52      	ble.n	16a62 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x298>
   169bc:	687b      	ldr	r3, [r7, #4]
   169be:	685b      	ldr	r3, [r3, #4]
   169c0:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   169c2:	683b      	ldr	r3, [r7, #0]
   169c4:	2b02      	cmp	r3, #2
   169c6:	dd4f      	ble.n	16a68 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x29e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   169c8:	2b05      	cmp	r3, #5
   169ca:	dd4f      	ble.n	16a6c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a2>
   169cc:	687b      	ldr	r3, [r7, #4]
   169ce:	689b      	ldr	r3, [r3, #8]
   169d0:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
   169d2:	f04f 0a00 	mov.w	sl, #0
   169d6:	46d1      	mov	r9, sl
   169d8:	46da      	mov	sl, fp
   169da:	46b3      	mov	fp, r6
   169dc:	463e      	mov	r6, r7
   169de:	9b16      	ldr	r3, [sp, #88]	; 0x58
   169e0:	4599      	cmp	r9, r3
   169e2:	f280 8143 	bge.w	16c6c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x4a2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   169e6:	2300      	movs	r3, #0
   169e8:	9300      	str	r3, [sp, #0]
   169ea:	46c8      	mov	r8, r9
   169ec:	46d9      	mov	r9, fp
   169ee:	46d3      	mov	fp, sl
   169f0:	46b2      	mov	sl, r6
   169f2:	9b00      	ldr	r3, [sp, #0]
   169f4:	9907      	ldr	r1, [sp, #28]
   169f6:	428b      	cmp	r3, r1
   169f8:	f280 8132 	bge.w	16c60 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x496>
      const int in_y_origin = (out_y * stride_height) - pad_height;
   169fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   169fe:	fb02 f303 	mul.w	r3, r2, r3
   16a02:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16a04:	1a9b      	subs	r3, r3, r2
   16a06:	9313      	str	r3, [sp, #76]	; 0x4c
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16a08:	2300      	movs	r3, #0
   16a0a:	9301      	str	r3, [sp, #4]
   16a0c:	4647      	mov	r7, r8
   16a0e:	46d8      	mov	r8, fp
   16a10:	9b01      	ldr	r3, [sp, #4]
   16a12:	9906      	ldr	r1, [sp, #24]
   16a14:	428b      	cmp	r3, r1
   16a16:	f280 811d 	bge.w	16c54 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
   16a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16a1c:	fb02 f303 	mul.w	r3, r2, r3
   16a20:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16a22:	1a9b      	subs	r3, r3, r2
   16a24:	9314      	str	r3, [sp, #80]	; 0x50
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   16a26:	f04f 0b00 	mov.w	fp, #0
   16a2a:	463e      	mov	r6, r7
   16a2c:	e0f3      	b.n	16c16 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16a2e:	f002 f839 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16a32:	f002 f837 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a36:	f8db 3008 	ldr.w	r3, [fp, #8]
   16a3a:	930b      	str	r3, [sp, #44]	; 0x2c
   16a3c:	e79f      	b.n	1697e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1b4>
    TFLITE_DCHECK_LT(i, size_);
   16a3e:	f002 f831 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a42:	f8db 300c 	ldr.w	r3, [fp, #12]
   16a46:	930a      	str	r3, [sp, #40]	; 0x28
   16a48:	e7a3      	b.n	16992 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
   16a4a:	f002 f82b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a4e:	68b3      	ldr	r3, [r6, #8]
   16a50:	9309      	str	r3, [sp, #36]	; 0x24
   16a52:	e7a6      	b.n	169a2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d8>
    TFLITE_DCHECK_LT(i, size_);
   16a54:	f002 f826 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a58:	68f3      	ldr	r3, [r6, #12]
   16a5a:	9308      	str	r3, [sp, #32]
   16a5c:	e7a9      	b.n	169b2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
    TFLITE_DCHECK_LT(i, size_);
   16a5e:	f002 f821 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a62:	68bb      	ldr	r3, [r7, #8]
   16a64:	9307      	str	r3, [sp, #28]
   16a66:	e7ac      	b.n	169c2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
    TFLITE_DCHECK_LT(i, size_);
   16a68:	f002 f81c 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a6c:	68fb      	ldr	r3, [r7, #12]
   16a6e:	9306      	str	r3, [sp, #24]
   16a70:	e7af      	b.n	169d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x208>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16a72:	f002 f817 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16a76:	f002 f815 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16a7a:	f002 f813 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16a7e:	f002 f811 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16a82:	f002 f80f 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16a86:	f002 f80d 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16a8a:	f002 f80b 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16a8e:	f002 f809 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16a92:	f002 f807 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16a96:	f002 f805 	bl	18aa4 <abort>
          float total = 0.f;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16a9a:	3501      	adds	r5, #1
   16a9c:	9b08      	ldr	r3, [sp, #32]
   16a9e:	429d      	cmp	r5, r3
   16aa0:	da69      	bge.n	16b76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ac>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
   16aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16aa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16aa6:	fb03 2a05 	mla	sl, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   16aaa:	f1ba 0f00 	cmp.w	sl, #0
   16aae:	dbf4      	blt.n	16a9a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   16ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16ab2:	459a      	cmp	sl, r3
   16ab4:	daf1      	bge.n	16a9a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   16ab6:	2e00      	cmp	r6, #0
   16ab8:	dbef      	blt.n	16a9a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   16aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16abc:	429e      	cmp	r6, r3
   16abe:	daec      	bge.n	16a9a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   16ac0:	2400      	movs	r4, #0

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   16ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16ac4:	429c      	cmp	r4, r3
   16ac6:	dae8      	bge.n	16a9a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
  inline int32_t DimensionsCount() const { return size_; }
   16ac8:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16acc:	2b04      	cmp	r3, #4
   16ace:	d1d0      	bne.n	16a72 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16ad0:	9a03      	ldr	r2, [sp, #12]
   16ad2:	2a00      	cmp	r2, #0
   16ad4:	dbcf      	blt.n	16a76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
   16ad6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16ada:	429a      	cmp	r2, r3
   16adc:	dacb      	bge.n	16a76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16ade:	2e00      	cmp	r6, #0
   16ae0:	dbcb      	blt.n	16a7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
   16ae2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   16ae6:	428e      	cmp	r6, r1
   16ae8:	dac7      	bge.n	16a7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16aea:	f1ba 0f00 	cmp.w	sl, #0
   16aee:	dbc6      	blt.n	16a7e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
   16af0:	f8d8 200c 	ldr.w	r2, [r8, #12]
   16af4:	4592      	cmp	sl, r2
   16af6:	dac2      	bge.n	16a7e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16af8:	2c00      	cmp	r4, #0
   16afa:	dbc2      	blt.n	16a82 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
   16afc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   16b00:	429c      	cmp	r4, r3
   16b02:	dabe      	bge.n	16a82 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16b04:	9803      	ldr	r0, [sp, #12]
   16b06:	fb01 6100 	mla	r1, r1, r0, r6
   16b0a:	fb01 a202 	mla	r2, r1, r2, sl
   16b0e:	fb02 4303 	mla	r3, r2, r3, r4
                float input_value = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
   16b12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16b14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   16b18:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16b1c:	2b04      	cmp	r3, #4
   16b1e:	d1b2      	bne.n	16a86 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2bc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16b20:	f1bb 0f00 	cmp.w	fp, #0
   16b24:	dbb1      	blt.n	16a8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
   16b26:	f8d9 3004 	ldr.w	r3, [r9, #4]
   16b2a:	459b      	cmp	fp, r3
   16b2c:	daad      	bge.n	16a8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16b2e:	2f00      	cmp	r7, #0
   16b30:	dbad      	blt.n	16a8e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
   16b32:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16b36:	428f      	cmp	r7, r1
   16b38:	daa9      	bge.n	16a8e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16b3a:	2d00      	cmp	r5, #0
   16b3c:	dba9      	blt.n	16a92 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
   16b3e:	f8d9 200c 	ldr.w	r2, [r9, #12]
   16b42:	4295      	cmp	r5, r2
   16b44:	daa5      	bge.n	16a92 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16b46:	2c00      	cmp	r4, #0
   16b48:	dba5      	blt.n	16a96 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
   16b4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   16b4e:	429c      	cmp	r4, r3
   16b50:	daa1      	bge.n	16a96 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16b52:	fb01 710b 	mla	r1, r1, fp, r7
   16b56:	fb01 5202 	mla	r2, r1, r2, r5
   16b5a:	fb02 4303 	mla	r3, r2, r3, r4
                float filter_value = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
   16b5e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   16b60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   16b64:	f7ea f8d4 	bl	d10 <__aeabi_fmul>
   16b68:	4601      	mov	r1, r0
   16b6a:	9802      	ldr	r0, [sp, #8]
   16b6c:	f7e9 ffc8 	bl	b00 <__addsf3>
   16b70:	9002      	str	r0, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   16b72:	3401      	adds	r4, #1
   16b74:	e7a5      	b.n	16ac2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   16b76:	3701      	adds	r7, #1
   16b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b7a:	429f      	cmp	r7, r3
   16b7c:	da05      	bge.n	16b8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3c0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   16b7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16b82:	fb03 2607 	mla	r6, r3, r7, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16b86:	2500      	movs	r5, #0
   16b88:	e788      	b.n	16a9c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d2>
   16b8a:	9e03      	ldr	r6, [sp, #12]
   16b8c:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
   16b90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   16b92:	2b00      	cmp	r3, #0
   16b94:	d049      	beq.n	16c2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x460>
            bias_value = bias_data[out_channel];
   16b96:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
   16b9a:	9802      	ldr	r0, [sp, #8]
   16b9c:	f7e9 ffb0 	bl	b00 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   16ba0:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16ba4:	2b04      	cmp	r3, #4
   16ba6:	d142      	bne.n	16c2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x464>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16ba8:	2e00      	cmp	r6, #0
   16baa:	db42      	blt.n	16c32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
   16bac:	f8da 3004 	ldr.w	r3, [sl, #4]
   16bb0:	429e      	cmp	r6, r3
   16bb2:	da3e      	bge.n	16c32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16bb4:	9b00      	ldr	r3, [sp, #0]
   16bb6:	2b00      	cmp	r3, #0
   16bb8:	db3d      	blt.n	16c36 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
   16bba:	f8da 2008 	ldr.w	r2, [sl, #8]
   16bbe:	4293      	cmp	r3, r2
   16bc0:	da39      	bge.n	16c36 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16bc2:	9901      	ldr	r1, [sp, #4]
   16bc4:	2900      	cmp	r1, #0
   16bc6:	db38      	blt.n	16c3a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
   16bc8:	f8da 300c 	ldr.w	r3, [sl, #12]
   16bcc:	4299      	cmp	r1, r3
   16bce:	da34      	bge.n	16c3a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16bd0:	f1bb 0f00 	cmp.w	fp, #0
   16bd4:	db33      	blt.n	16c3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
   16bd6:	f8da 4010 	ldr.w	r4, [sl, #16]
   16bda:	45a3      	cmp	fp, r4
   16bdc:	da2f      	bge.n	16c3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16bde:	9900      	ldr	r1, [sp, #0]
   16be0:	fb02 1206 	mla	r2, r2, r6, r1
   16be4:	9901      	ldr	r1, [sp, #4]
   16be6:	fb02 1303 	mla	r3, r2, r3, r1
   16bea:	fb03 b404 	mla	r4, r3, r4, fp
   16bee:	9019      	str	r0, [sp, #100]	; 0x64
   16bf0:	9912      	ldr	r1, [sp, #72]	; 0x48
   16bf2:	911a      	str	r1, [sp, #104]	; 0x68
   16bf4:	9b04      	ldr	r3, [sp, #16]
   16bf6:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   16bf8:	f7ea fa28 	bl	104c <__aeabi_fcmplt>
   16bfc:	bb08      	cbnz	r0, 16c42 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x478>
      return __a;
   16bfe:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   16c00:	6829      	ldr	r1, [r5, #0]
   16c02:	9804      	ldr	r0, [sp, #16]
   16c04:	f7ea fa22 	bl	104c <__aeabi_fcmplt>
   16c08:	b9e8      	cbnz	r0, 16c46 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x47c>
   16c0a:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   16c0c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   16c0e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   16c12:	f10b 0b01 	add.w	fp, fp, #1
   16c16:	9b05      	ldr	r3, [sp, #20]
   16c18:	459b      	cmp	fp, r3
   16c1a:	da16      	bge.n	16c4a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x480>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   16c1c:	2700      	movs	r7, #0
          float total = 0.f;
   16c1e:	2300      	movs	r3, #0
   16c20:	9302      	str	r3, [sp, #8]
   16c22:	9603      	str	r6, [sp, #12]
   16c24:	f8cd a0bc 	str.w	sl, [sp, #188]	; 0xbc
   16c28:	e7a6      	b.n	16b78 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ae>
          float bias_value = 0.0f;
   16c2a:	2100      	movs	r1, #0
   16c2c:	e7b5      	b.n	16b9a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16c2e:	f001 ff39 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16c32:	f001 ff37 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16c36:	f001 ff35 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16c3a:	f001 ff33 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16c3e:	f001 ff31 	bl	18aa4 <abort>
	return __b;
   16c42:	ad1a      	add	r5, sp, #104	; 0x68
   16c44:	e7dc      	b.n	16c00 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x436>
	return __b;
   16c46:	ad1b      	add	r5, sp, #108	; 0x6c
   16c48:	e7df      	b.n	16c0a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x440>
   16c4a:	4637      	mov	r7, r6
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16c4c:	9b01      	ldr	r3, [sp, #4]
   16c4e:	3301      	adds	r3, #1
   16c50:	9301      	str	r3, [sp, #4]
   16c52:	e6dd      	b.n	16a10 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x246>
   16c54:	46c3      	mov	fp, r8
   16c56:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   16c58:	9b00      	ldr	r3, [sp, #0]
   16c5a:	3301      	adds	r3, #1
   16c5c:	9300      	str	r3, [sp, #0]
   16c5e:	e6c8      	b.n	169f2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x228>
   16c60:	4656      	mov	r6, sl
   16c62:	46da      	mov	sl, fp
   16c64:	46cb      	mov	fp, r9
  for (int batch = 0; batch < batches; ++batch) {
   16c66:	f108 0901 	add.w	r9, r8, #1
   16c6a:	e6b8      	b.n	169de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x214>
                                           output_activation_max);
        }
      }
    }
  }
}
   16c6c:	b023      	add	sp, #140	; 0x8c
   16c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016c72 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                               const OpDataConv& data) {
   16c72:	b570      	push	{r4, r5, r6, lr}
   16c74:	4604      	mov	r4, r0
   16c76:	460e      	mov	r6, r1
   16c78:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   16c7a:	6913      	ldr	r3, [r2, #16]
   16c7c:	425b      	negs	r3, r3
   16c7e:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   16c80:	6953      	ldr	r3, [r2, #20]
   16c82:	425b      	negs	r3, r3
   16c84:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   16c86:	6993      	ldr	r3, [r2, #24]
   16c88:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   16c8a:	69d3      	ldr	r3, [r2, #28]
   16c8c:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   16c8e:	6a13      	ldr	r3, [r2, #32]
   16c90:	425b      	negs	r3, r3
   16c92:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   16c94:	7808      	ldrb	r0, [r1, #0]
   16c96:	f000 fb54 	bl	17342 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   16c9a:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   16c9c:	686b      	ldr	r3, [r5, #4]
   16c9e:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   16ca0:	682b      	ldr	r3, [r5, #0]
   16ca2:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   16ca4:	68b3      	ldr	r3, [r6, #8]
   16ca6:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   16ca8:	6873      	ldr	r3, [r6, #4]
   16caa:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   16cac:	6973      	ldr	r3, [r6, #20]
   16cae:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   16cb0:	6933      	ldr	r3, [r6, #16]
   16cb2:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   16cb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16cb6:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   16cb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16cba:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   16cbc:	4620      	mov	r0, r4
   16cbe:	bd70      	pop	{r4, r5, r6, pc}

00016cc0 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                           const OpDataConv& data) {
   16cc0:	b570      	push	{r4, r5, r6, lr}
   16cc2:	4604      	mov	r4, r0
   16cc4:	460d      	mov	r5, r1
   16cc6:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   16cc8:	f100 0234 	add.w	r2, r0, #52	; 0x34
   16ccc:	f100 0130 	add.w	r1, r0, #48	; 0x30
   16cd0:	7b28      	ldrb	r0, [r5, #12]
   16cd2:	f7f3 fdb1 	bl	a838 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   16cd6:	7828      	ldrb	r0, [r5, #0]
   16cd8:	f000 fb33 	bl	17342 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   16cdc:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   16cde:	6833      	ldr	r3, [r6, #0]
   16ce0:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   16ce2:	6873      	ldr	r3, [r6, #4]
   16ce4:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   16ce6:	686b      	ldr	r3, [r5, #4]
   16ce8:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   16cea:	68ab      	ldr	r3, [r5, #8]
   16cec:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   16cee:	692b      	ldr	r3, [r5, #16]
   16cf0:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   16cf2:	696b      	ldr	r3, [r5, #20]
   16cf4:	8223      	strh	r3, [r4, #16]
}
   16cf6:	4620      	mov	r0, r4
   16cf8:	bd70      	pop	{r4, r5, r6, pc}

00016cfa <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   16cfa:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   16cfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16cfe:	b113      	cbz	r3, 16d06 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   16d00:	2134      	movs	r1, #52	; 0x34
   16d02:	4798      	blx	r3
}
   16d04:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   16d06:	f001 fecd 	bl	18aa4 <abort>

00016d0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   16d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d0e:	b0a1      	sub	sp, #132	; 0x84
   16d10:	9217      	str	r2, [sp, #92]	; 0x5c
   16d12:	461e      	mov	r6, r3
   16d14:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   16d16:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
  const int stride_width = params.stride_width;
   16d1a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   16d1e:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   16d20:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   16d24:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   16d26:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   16d2a:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   16d2c:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   16d30:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   16d32:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   16d36:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
   16d38:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   16d3c:	9212      	str	r2, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
   16d3e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   16d42:	9205      	str	r2, [sp, #20]
  const float output_activation_min = params.float_activation_min;
   16d44:	6b02      	ldr	r2, [r0, #48]	; 0x30
   16d46:	9213      	str	r2, [sp, #76]	; 0x4c
  const float output_activation_max = params.float_activation_max;
   16d48:	6b42      	ldr	r2, [r0, #52]	; 0x34
   16d4a:	9206      	str	r2, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   16d4c:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   16d4e:	2a04      	cmp	r2, #4
   16d50:	f040 80b2 	bne.w	16eb8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ae>
   16d54:	468b      	mov	fp, r1
   16d56:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   16d58:	2a04      	cmp	r2, #4
   16d5a:	f040 80af 	bne.w	16ebc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
   16d5e:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   16d62:	2a04      	cmp	r2, #4
   16d64:	f040 80ac 	bne.w	16ec0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b6>
    TFLITE_DCHECK_LT(i, size_);
   16d68:	680a      	ldr	r2, [r1, #0]
   16d6a:	2a00      	cmp	r2, #0
   16d6c:	f340 80aa 	ble.w	16ec4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ba>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d70:	2a05      	cmp	r2, #5
   16d72:	f340 80a9 	ble.w	16ec8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
   16d76:	684a      	ldr	r2, [r1, #4]
   16d78:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16d7a:	f8d9 1000 	ldr.w	r1, [r9]
   16d7e:	2900      	cmp	r1, #0
   16d80:	f340 80a4 	ble.w	16ecc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d84:	2905      	cmp	r1, #5
   16d86:	f340 80a3 	ble.w	16ed0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c6>
   16d8a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16d8e:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16d90:	4291      	cmp	r1, r2
   16d92:	f040 80a0 	bne.w	16ed6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1cc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16d96:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   16d98:	f8d9 1000 	ldr.w	r1, [r9]
   16d9c:	2900      	cmp	r1, #0
   16d9e:	f340 809c 	ble.w	16eda <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16da2:	2905      	cmp	r1, #5
   16da4:	f340 809b 	ble.w	16ede <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
   16da8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16dac:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16dae:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   16db0:	428a      	cmp	r2, r1
   16db2:	f300 8097 	bgt.w	16ee4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1da>
      return __a;
   16db6:	aa1f      	add	r2, sp, #124	; 0x7c
   16db8:	6812      	ldr	r2, [r2, #0]
   16dba:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   16dbc:	6832      	ldr	r2, [r6, #0]
   16dbe:	2a03      	cmp	r2, #3
   16dc0:	f340 8092 	ble.w	16ee8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16dc4:	2a05      	cmp	r2, #5
   16dc6:	f340 8091 	ble.w	16eec <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e2>
   16dca:	6872      	ldr	r2, [r6, #4]
   16dcc:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   16dce:	f8d9 1000 	ldr.w	r1, [r9]
   16dd2:	2903      	cmp	r1, #3
   16dd4:	f340 808c 	ble.w	16ef0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16dd8:	2905      	cmp	r1, #5
   16dda:	f340 808b 	ble.w	16ef4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ea>
   16dde:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16de2:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16de4:	4291      	cmp	r1, r2
   16de6:	f040 8088 	bne.w	16efa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16dea:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   16dec:	f8d9 1000 	ldr.w	r1, [r9]
   16df0:	2903      	cmp	r1, #3
   16df2:	f340 8084 	ble.w	16efe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16df6:	2905      	cmp	r1, #5
   16df8:	f340 8083 	ble.w	16f02 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
   16dfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16e00:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16e02:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   16e04:	428a      	cmp	r2, r1
   16e06:	dc7f      	bgt.n	16f08 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
      return __a;
   16e08:	aa1d      	add	r2, sp, #116	; 0x74
   16e0a:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16e0c:	f8db 2000 	ldr.w	r2, [fp]
   16e10:	2a01      	cmp	r2, #1
   16e12:	dd7b      	ble.n	16f0c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e14:	2a05      	cmp	r2, #5
   16e16:	dd7b      	ble.n	16f10 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x206>
   16e18:	f8db 2004 	ldr.w	r2, [fp, #4]
   16e1c:	6852      	ldr	r2, [r2, #4]
   16e1e:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   16e20:	f8db 2000 	ldr.w	r2, [fp]
   16e24:	2a02      	cmp	r2, #2
   16e26:	dd77      	ble.n	16f18 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e28:	2a05      	cmp	r2, #5
   16e2a:	dd77      	ble.n	16f1c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x212>
   16e2c:	f8db 2004 	ldr.w	r2, [fp, #4]
   16e30:	6892      	ldr	r2, [r2, #8]
   16e32:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   16e34:	f8db 2000 	ldr.w	r2, [fp]
   16e38:	2a03      	cmp	r2, #3
   16e3a:	dd73      	ble.n	16f24 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e3c:	2a05      	cmp	r2, #5
   16e3e:	dd73      	ble.n	16f28 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21e>
   16e40:	f8db 2004 	ldr.w	r2, [fp, #4]
   16e44:	68d2      	ldr	r2, [r2, #12]
   16e46:	9204      	str	r2, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   16e48:	6832      	ldr	r2, [r6, #0]
   16e4a:	2a01      	cmp	r2, #1
   16e4c:	dd70      	ble.n	16f30 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e4e:	2a05      	cmp	r2, #5
   16e50:	dd70      	ble.n	16f34 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   16e52:	6872      	ldr	r2, [r6, #4]
   16e54:	6852      	ldr	r2, [r2, #4]
   16e56:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   16e58:	6832      	ldr	r2, [r6, #0]
   16e5a:	2a02      	cmp	r2, #2
   16e5c:	dd6d      	ble.n	16f3a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e5e:	2a05      	cmp	r2, #5
   16e60:	dd6d      	ble.n	16f3e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x234>
   16e62:	6872      	ldr	r2, [r6, #4]
   16e64:	6892      	ldr	r2, [r2, #8]
   16e66:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   16e68:	f8d9 2000 	ldr.w	r2, [r9]
   16e6c:	2a01      	cmp	r2, #1
   16e6e:	dd69      	ble.n	16f44 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e70:	2a05      	cmp	r2, #5
   16e72:	dd69      	ble.n	16f48 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23e>
   16e74:	f8d9 2004 	ldr.w	r2, [r9, #4]
   16e78:	6852      	ldr	r2, [r2, #4]
   16e7a:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   16e7c:	f8d9 2000 	ldr.w	r2, [r9]
   16e80:	2a02      	cmp	r2, #2
   16e82:	dd65      	ble.n	16f50 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x246>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e84:	2a05      	cmp	r2, #5
   16e86:	dd65      	ble.n	16f54 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x24a>
   16e88:	f8d9 2004 	ldr.w	r2, [r9, #4]
   16e8c:	6892      	ldr	r2, [r2, #8]
   16e8e:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   16e90:	9a04      	ldr	r2, [sp, #16]
   16e92:	9805      	ldr	r0, [sp, #20]
   16e94:	fb02 f200 	mul.w	r2, r2, r0
   16e98:	428a      	cmp	r2, r1
   16e9a:	d15f      	bne.n	16f5c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16e9c:	681c      	ldr	r4, [r3, #0]
   16e9e:	2c05      	cmp	r4, #5
   16ea0:	dd5e      	ble.n	16f60 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x256>
   16ea2:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   16ea4:	2200      	movs	r2, #0
    int buffer_size = 1;
   16ea6:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
   16ea8:	42a2      	cmp	r2, r4
   16eaa:	da5b      	bge.n	16f64 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
      buffer_size *= dims_data[i];
   16eac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   16eb0:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
   16eb4:	3201      	adds	r2, #1
   16eb6:	e7f7      	b.n	16ea8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19e>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   16eb8:	f001 fdf4 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   16ebc:	f001 fdf2 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   16ec0:	f001 fdf0 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16ec4:	f001 fdee 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ec8:	684a      	ldr	r2, [r1, #4]
   16eca:	e756      	b.n	16d7a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
    TFLITE_DCHECK_LT(i, size_);
   16ecc:	f001 fdea 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ed0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16ed4:	e75c      	b.n	16d90 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16ed6:	f001 fde5 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16eda:	f001 fde3 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ede:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16ee2:	e764      	b.n	16dae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xa4>
	return __b;
   16ee4:	aa1e      	add	r2, sp, #120	; 0x78
   16ee6:	e767      	b.n	16db8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xae>
    TFLITE_DCHECK_LT(i, size_);
   16ee8:	f001 fddc 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16eec:	6932      	ldr	r2, [r6, #16]
   16eee:	e76e      	b.n	16dce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc4>
    TFLITE_DCHECK_LT(i, size_);
   16ef0:	f001 fdd8 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ef4:	f8d9 1010 	ldr.w	r1, [r9, #16]
   16ef8:	e774      	b.n	16de4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xda>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16efa:	f001 fdd3 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16efe:	f001 fdd1 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f02:	f8d9 1010 	ldr.w	r1, [r9, #16]
   16f06:	e77c      	b.n	16e02 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xf8>
   16f08:	aa1c      	add	r2, sp, #112	; 0x70
   16f0a:	e77e      	b.n	16e0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
    TFLITE_DCHECK_LT(i, size_);
   16f0c:	f001 fdca 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f10:	f8db 2008 	ldr.w	r2, [fp, #8]
   16f14:	920c      	str	r2, [sp, #48]	; 0x30
   16f16:	e783      	b.n	16e20 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x116>
    TFLITE_DCHECK_LT(i, size_);
   16f18:	f001 fdc4 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f1c:	f8db 200c 	ldr.w	r2, [fp, #12]
   16f20:	920b      	str	r2, [sp, #44]	; 0x2c
   16f22:	e787      	b.n	16e34 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12a>
    TFLITE_DCHECK_LT(i, size_);
   16f24:	f001 fdbe 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f28:	f8db 2010 	ldr.w	r2, [fp, #16]
   16f2c:	9204      	str	r2, [sp, #16]
   16f2e:	e78b      	b.n	16e48 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
    TFLITE_DCHECK_LT(i, size_);
   16f30:	f001 fdb8 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f34:	68b2      	ldr	r2, [r6, #8]
   16f36:	920a      	str	r2, [sp, #40]	; 0x28
   16f38:	e78e      	b.n	16e58 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x14e>
    TFLITE_DCHECK_LT(i, size_);
   16f3a:	f001 fdb3 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f3e:	68f2      	ldr	r2, [r6, #12]
   16f40:	9209      	str	r2, [sp, #36]	; 0x24
   16f42:	e791      	b.n	16e68 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   16f44:	f001 fdae 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f48:	f8d9 2008 	ldr.w	r2, [r9, #8]
   16f4c:	9208      	str	r2, [sp, #32]
   16f4e:	e795      	b.n	16e7c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x172>
    TFLITE_DCHECK_LT(i, size_);
   16f50:	f001 fda8 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f54:	f8d9 200c 	ldr.w	r2, [r9, #12]
   16f58:	9207      	str	r2, [sp, #28]
   16f5a:	e799      	b.n	16e90 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x186>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   16f5c:	f001 fda2 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16f60:	3304      	adds	r3, #4
   16f62:	e79f      	b.n	16ea4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16f64:	428d      	cmp	r5, r1
   16f66:	d11e      	bne.n	16fa6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x29c>

  for (int b = 0; b < batches; ++b) {
   16f68:	f04f 0a00 	mov.w	sl, #0
   16f6c:	464c      	mov	r4, r9
   16f6e:	46d1      	mov	r9, sl
   16f70:	46b2      	mov	sl, r6
   16f72:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16f74:	4599      	cmp	r9, r3
   16f76:	f280 811a 	bge.w	171ae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   16f7a:	2300      	movs	r3, #0
   16f7c:	9300      	str	r3, [sp, #0]
   16f7e:	46c8      	mov	r8, r9
   16f80:	46d1      	mov	r9, sl
   16f82:	46a2      	mov	sl, r4
   16f84:	9b00      	ldr	r3, [sp, #0]
   16f86:	9a08      	ldr	r2, [sp, #32]
   16f88:	4293      	cmp	r3, r2
   16f8a:	f280 810b 	bge.w	171a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x49a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16f8e:	2300      	movs	r3, #0
   16f90:	9301      	str	r3, [sp, #4]
   16f92:	4647      	mov	r7, r8
   16f94:	46d0      	mov	r8, sl
   16f96:	9b01      	ldr	r3, [sp, #4]
   16f98:	9a07      	ldr	r2, [sp, #28]
   16f9a:	4293      	cmp	r3, r2
   16f9c:	f280 80fc 	bge.w	17198 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48e>
        for (int ic = 0; ic < input_depth; ++ic) {
   16fa0:	f04f 0a00 	mov.w	sl, #0
   16fa4:	e0ee      	b.n	17184 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x47a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16fa6:	f001 fd7d 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16faa:	f001 fd7b 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16fae:	f001 fd79 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16fb2:	f001 fd77 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16fb6:	f001 fd75 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16fba:	f001 fd73 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16fbe:	f001 fd71 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16fc2:	f001 fd6f 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16fc6:	f001 fd6d 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16fca:	f001 fd6b 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16fce:	f001 fd69 	bl	18aa4 <abort>
            const int oc = m + ic * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16fd2:	3601      	adds	r6, #1
   16fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16fd6:	429e      	cmp	r6, r3
   16fd8:	da60      	bge.n	1709c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x392>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
   16fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16fdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16fde:	fb03 2306 	mla	r3, r3, r6, r2
                const int in_y =
   16fe2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16fe4:	9915      	ldr	r1, [sp, #84]	; 0x54
   16fe6:	fb02 1205 	mla	r2, r2, r5, r1
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   16fea:	2b00      	cmp	r3, #0
   16fec:	dbf1      	blt.n	16fd2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16fee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16ff0:	428b      	cmp	r3, r1
   16ff2:	daee      	bge.n	16fd2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16ff4:	2a00      	cmp	r2, #0
   16ff6:	dbec      	blt.n	16fd2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16ff8:	990c      	ldr	r1, [sp, #48]	; 0x30
   16ffa:	428a      	cmp	r2, r1
   16ffc:	dae9      	bge.n	16fd2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
  inline int32_t DimensionsCount() const { return size_; }
   16ffe:	f8db 1000 	ldr.w	r1, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17002:	2904      	cmp	r1, #4
   17004:	d1d1      	bne.n	16faa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17006:	2f00      	cmp	r7, #0
   17008:	dbd1      	blt.n	16fae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
   1700a:	f8db 1004 	ldr.w	r1, [fp, #4]
   1700e:	428f      	cmp	r7, r1
   17010:	dacd      	bge.n	16fae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17012:	2a00      	cmp	r2, #0
   17014:	dbcd      	blt.n	16fb2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
   17016:	f8db c008 	ldr.w	ip, [fp, #8]
   1701a:	4562      	cmp	r2, ip
   1701c:	dac9      	bge.n	16fb2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1701e:	2b00      	cmp	r3, #0
   17020:	dbc9      	blt.n	16fb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
   17022:	f8db 000c 	ldr.w	r0, [fp, #12]
   17026:	4283      	cmp	r3, r0
   17028:	dac5      	bge.n	16fb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1702a:	f1ba 0f00 	cmp.w	sl, #0
   1702e:	dbc4      	blt.n	16fba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
   17030:	f8db 1010 	ldr.w	r1, [fp, #16]
   17034:	458a      	cmp	sl, r1
   17036:	dac0      	bge.n	16fba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17038:	fb0c 2207 	mla	r2, ip, r7, r2
   1703c:	fb02 3300 	mla	r3, r2, r0, r3
   17040:	fb03 a101 	mla	r1, r3, r1, sl
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   17044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17046:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   1704a:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1704e:	2b04      	cmp	r3, #4
   17050:	d1b5      	bne.n	16fbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17052:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17056:	2b00      	cmp	r3, #0
   17058:	ddb3      	ble.n	16fc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1705a:	2d00      	cmp	r5, #0
   1705c:	dbb3      	blt.n	16fc6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
   1705e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   17062:	429d      	cmp	r5, r3
   17064:	daaf      	bge.n	16fc6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17066:	2e00      	cmp	r6, #0
   17068:	dbaf      	blt.n	16fca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
   1706a:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1706e:	4296      	cmp	r6, r2
   17070:	daab      	bge.n	16fca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17072:	2c00      	cmp	r4, #0
   17074:	dbab      	blt.n	16fce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
   17076:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1707a:	429c      	cmp	r4, r3
   1707c:	daa7      	bge.n	16fce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1707e:	fb02 6205 	mla	r2, r2, r5, r6
   17082:	fb02 4303 	mla	r3, r2, r3, r4
                  float filter_value = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
   17086:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   17088:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1708c:	f7e9 fe40 	bl	d10 <__aeabi_fmul>
   17090:	4601      	mov	r1, r0
   17092:	9803      	ldr	r0, [sp, #12]
   17094:	f7e9 fd34 	bl	b00 <__addsf3>
   17098:	9003      	str	r0, [sp, #12]
   1709a:	e79a      	b.n	16fd2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1709c:	3501      	adds	r5, #1
   1709e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   170a0:	429d      	cmp	r5, r3
   170a2:	da01      	bge.n	170a8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x39e>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   170a4:	2600      	movs	r6, #0
   170a6:	e795      	b.n	16fd4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ca>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
   170a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   170aa:	2b00      	cmp	r3, #0
   170ac:	d058      	beq.n	17160 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x456>
              bias_value = bias_data[oc];
   170ae:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
   170b2:	9803      	ldr	r0, [sp, #12]
   170b4:	f7e9 fd24 	bl	b00 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   170b8:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   170bc:	2b04      	cmp	r3, #4
   170be:	d151      	bne.n	17164 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   170c0:	2f00      	cmp	r7, #0
   170c2:	db51      	blt.n	17168 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
   170c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   170c8:	429f      	cmp	r7, r3
   170ca:	da4d      	bge.n	17168 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   170cc:	9b00      	ldr	r3, [sp, #0]
   170ce:	2b00      	cmp	r3, #0
   170d0:	db4c      	blt.n	1716c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
   170d2:	f8d8 2008 	ldr.w	r2, [r8, #8]
   170d6:	4293      	cmp	r3, r2
   170d8:	da48      	bge.n	1716c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   170da:	9901      	ldr	r1, [sp, #4]
   170dc:	2900      	cmp	r1, #0
   170de:	db47      	blt.n	17170 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
   170e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   170e4:	4299      	cmp	r1, r3
   170e6:	da43      	bge.n	17170 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   170e8:	2c00      	cmp	r4, #0
   170ea:	db43      	blt.n	17174 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
   170ec:	f8d8 1010 	ldr.w	r1, [r8, #16]
   170f0:	428c      	cmp	r4, r1
   170f2:	da3f      	bge.n	17174 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   170f4:	9d00      	ldr	r5, [sp, #0]
   170f6:	fb02 5207 	mla	r2, r2, r7, r5
   170fa:	9d01      	ldr	r5, [sp, #4]
   170fc:	fb02 5303 	mla	r3, r2, r3, r5
   17100:	fb03 4401 	mla	r4, r3, r1, r4
   17104:	9019      	str	r0, [sp, #100]	; 0x64
   17106:	9913      	ldr	r1, [sp, #76]	; 0x4c
   17108:	911a      	str	r1, [sp, #104]	; 0x68
   1710a:	9b06      	ldr	r3, [sp, #24]
   1710c:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   1710e:	f7e9 ff9d 	bl	104c <__aeabi_fcmplt>
   17112:	2800      	cmp	r0, #0
   17114:	d130      	bne.n	17178 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46e>
      return __a;
   17116:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   17118:	6829      	ldr	r1, [r5, #0]
   1711a:	9806      	ldr	r0, [sp, #24]
   1711c:	f7e9 ff96 	bl	104c <__aeabi_fcmplt>
   17120:	bb60      	cbnz	r0, 1717c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x472>
   17122:	682b      	ldr	r3, [r5, #0]
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   17124:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   17126:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
          for (int m = 0; m < depth_multiplier; m++) {
   1712a:	9b02      	ldr	r3, [sp, #8]
   1712c:	3301      	adds	r3, #1
   1712e:	9302      	str	r3, [sp, #8]
   17130:	9902      	ldr	r1, [sp, #8]
   17132:	9b05      	ldr	r3, [sp, #20]
   17134:	4299      	cmp	r1, r3
   17136:	da23      	bge.n	17180 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x476>
            const int oc = m + ic * depth_multiplier;
   17138:	fb03 140a 	mla	r4, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
   1713c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1713e:	9a01      	ldr	r2, [sp, #4]
   17140:	fb03 f302 	mul.w	r3, r3, r2
   17144:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17146:	1a9b      	subs	r3, r3, r2
   17148:	9314      	str	r3, [sp, #80]	; 0x50
            const int in_y_origin = (out_y * stride_height) - pad_height;
   1714a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1714c:	9a00      	ldr	r2, [sp, #0]
   1714e:	fb03 f302 	mul.w	r3, r3, r2
   17152:	9a12      	ldr	r2, [sp, #72]	; 0x48
   17154:	1a9b      	subs	r3, r3, r2
   17156:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   17158:	2500      	movs	r5, #0
            float total = 0.f;
   1715a:	2300      	movs	r3, #0
   1715c:	9303      	str	r3, [sp, #12]
   1715e:	e79e      	b.n	1709e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x394>
            float bias_value = 0.0f;
   17160:	2100      	movs	r1, #0
   17162:	e7a6      	b.n	170b2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3a8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17164:	f001 fc9e 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17168:	f001 fc9c 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1716c:	f001 fc9a 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17170:	f001 fc98 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17174:	f001 fc96 	bl	18aa4 <abort>
	return __b;
   17178:	ad1a      	add	r5, sp, #104	; 0x68
   1717a:	e7cd      	b.n	17118 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x40e>
	return __b;
   1717c:	ad1b      	add	r5, sp, #108	; 0x6c
   1717e:	e7d0      	b.n	17122 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x418>
        for (int ic = 0; ic < input_depth; ++ic) {
   17180:	f10a 0a01 	add.w	sl, sl, #1
   17184:	9b04      	ldr	r3, [sp, #16]
   17186:	459a      	cmp	sl, r3
   17188:	da02      	bge.n	17190 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x486>
          for (int m = 0; m < depth_multiplier; m++) {
   1718a:	2300      	movs	r3, #0
   1718c:	9302      	str	r3, [sp, #8]
   1718e:	e7cf      	b.n	17130 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x426>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17190:	9b01      	ldr	r3, [sp, #4]
   17192:	3301      	adds	r3, #1
   17194:	9301      	str	r3, [sp, #4]
   17196:	e6fe      	b.n	16f96 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x28c>
   17198:	46c2      	mov	sl, r8
   1719a:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1719c:	9b00      	ldr	r3, [sp, #0]
   1719e:	3301      	adds	r3, #1
   171a0:	9300      	str	r3, [sp, #0]
   171a2:	e6ef      	b.n	16f84 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27a>
   171a4:	4654      	mov	r4, sl
   171a6:	46ca      	mov	sl, r9
  for (int b = 0; b < batches; ++b) {
   171a8:	f108 0901 	add.w	r9, r8, #1
   171ac:	e6e1      	b.n	16f72 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x268>
          }
        }
      }
    }
  }
}
   171ae:	b021      	add	sp, #132	; 0x84
   171b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000171b4 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   171b4:	b570      	push	{r4, r5, r6, lr}
   171b6:	4604      	mov	r4, r0
   171b8:	460e      	mov	r6, r1
   171ba:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   171bc:	6913      	ldr	r3, [r2, #16]
   171be:	425b      	negs	r3, r3
   171c0:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   171c2:	6953      	ldr	r3, [r2, #20]
   171c4:	425b      	negs	r3, r3
   171c6:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   171c8:	6993      	ldr	r3, [r2, #24]
   171ca:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   171cc:	69d3      	ldr	r3, [r2, #28]
   171ce:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   171d0:	6a13      	ldr	r3, [r2, #32]
   171d2:	425b      	negs	r3, r3
   171d4:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   171d6:	7808      	ldrb	r0, [r1, #0]
   171d8:	f000 f8b3 	bl	17342 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   171dc:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   171de:	686b      	ldr	r3, [r5, #4]
   171e0:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   171e2:	682b      	ldr	r3, [r5, #0]
   171e4:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   171e6:	68b3      	ldr	r3, [r6, #8]
   171e8:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   171ea:	6873      	ldr	r3, [r6, #4]
   171ec:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   171ee:	69b3      	ldr	r3, [r6, #24]
   171f0:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   171f2:	6973      	ldr	r3, [r6, #20]
   171f4:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
   171f6:	68f3      	ldr	r3, [r6, #12]
   171f8:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
   171fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   171fc:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   171fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   17200:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   17202:	4620      	mov	r0, r4
   17204:	bd70      	pop	{r4, r5, r6, pc}

00017206 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   17206:	b570      	push	{r4, r5, r6, lr}
   17208:	4604      	mov	r4, r0
   1720a:	460d      	mov	r5, r1
   1720c:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   1720e:	f100 0234 	add.w	r2, r0, #52	; 0x34
   17212:	f100 0130 	add.w	r1, r0, #48	; 0x30
   17216:	7c28      	ldrb	r0, [r5, #16]
   17218:	f7f3 fb0e 	bl	a838 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   1721c:	7828      	ldrb	r0, [r5, #0]
   1721e:	f000 f890 	bl	17342 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   17222:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   17224:	6833      	ldr	r3, [r6, #0]
   17226:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   17228:	6873      	ldr	r3, [r6, #4]
   1722a:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   1722c:	686b      	ldr	r3, [r5, #4]
   1722e:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   17230:	68ab      	ldr	r3, [r5, #8]
   17232:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   17234:	696b      	ldr	r3, [r5, #20]
   17236:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   17238:	69ab      	ldr	r3, [r5, #24]
   1723a:	8223      	strh	r3, [r4, #16]
  op_params.depth_multiplier = params.depth_multiplier;
   1723c:	68eb      	ldr	r3, [r5, #12]
   1723e:	8263      	strh	r3, [r4, #18]
}
   17240:	4620      	mov	r0, r4
   17242:	bd70      	pop	{r4, r5, r6, pc}

00017244 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   17244:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   17246:	6b83      	ldr	r3, [r0, #56]	; 0x38
   17248:	b113      	cbz	r3, 17250 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
   1724a:	2120      	movs	r1, #32
   1724c:	4798      	blx	r3
}
   1724e:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   17250:	f001 fc28 	bl	18aa4 <abort>

00017254 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
   17254:	694a      	ldr	r2, [r1, #20]
   17256:	4252      	negs	r2, r2
   17258:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   1725a:	698a      	ldr	r2, [r1, #24]
   1725c:	4252      	negs	r2, r2
   1725e:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   17260:	69ca      	ldr	r2, [r1, #28]
   17262:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   17264:	680a      	ldr	r2, [r1, #0]
   17266:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   17268:	684a      	ldr	r2, [r1, #4]
   1726a:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   1726c:	688a      	ldr	r2, [r1, #8]
   1726e:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   17270:	68ca      	ldr	r2, [r1, #12]
   17272:	6182      	str	r2, [r0, #24]
  return op_params;
}
   17274:	4770      	bx	lr

00017276 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   17276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1727a:	b084      	sub	sp, #16
   1727c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1727e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
   17280:	2a01      	cmp	r2, #1
   17282:	d103      	bne.n	1728c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
   17284:	2000      	movs	r0, #0
}
   17286:	b004      	add	sp, #16
   17288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1728c:	4604      	mov	r4, r0
   1728e:	4688      	mov	r8, r1
   17290:	461f      	mov	r7, r3
    double real_multiplier = 0.0;
   17292:	2200      	movs	r2, #0
   17294:	2300      	movs	r3, #0
   17296:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1729a:	ab02      	add	r3, sp, #8
   1729c:	9301      	str	r3, [sp, #4]
   1729e:	9600      	str	r6, [sp, #0]
   172a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   172a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   172a4:	4639      	mov	r1, r7
   172a6:	f7ea f94b 	bl	1540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   172aa:	2800      	cmp	r0, #0
   172ac:	d1eb      	bne.n	17286 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   172ae:	1d2b      	adds	r3, r5, #4
   172b0:	462a      	mov	r2, r5
   172b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   172b6:	f7f2 f8c7 	bl	9448 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
   172ba:	693b      	ldr	r3, [r7, #16]
   172bc:	616b      	str	r3, [r5, #20]
    TFLITE_DCHECK(filter->params.zero_point == 0);
   172be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172c0:	691b      	ldr	r3, [r3, #16]
   172c2:	b96b      	cbnz	r3, 172e0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
    data->filter_zero_point = filter->params.zero_point;
   172c4:	61ab      	str	r3, [r5, #24]
    data->output_zero_point = output->params.zero_point;
   172c6:	6933      	ldr	r3, [r6, #16]
   172c8:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
   172ca:	f105 030c 	add.w	r3, r5, #12
   172ce:	9300      	str	r3, [sp, #0]
   172d0:	f105 0308 	add.w	r3, r5, #8
   172d4:	4632      	mov	r2, r6
   172d6:	4641      	mov	r1, r8
   172d8:	4620      	mov	r0, r4
   172da:	f7f2 faa3 	bl	9824 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_max);
   172de:	e7d2      	b.n	17286 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    TFLITE_DCHECK(filter->params.zero_point == 0);
   172e0:	f001 fbe0 	bl	18aa4 <abort>

000172e4 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
    TfLiteFusedActivation activation) {
   172e4:	b510      	push	{r4, lr}
   172e6:	4604      	mov	r4, r0
   172e8:	4608      	mov	r0, r1
  CalculateActivationRange(activation, &op_params.float_activation_min,
   172ea:	f104 0220 	add.w	r2, r4, #32
   172ee:	f104 011c 	add.w	r1, r4, #28
   172f2:	f7f3 faa1 	bl	a838 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
}
   172f6:	4620      	mov	r0, r4
   172f8:	bd10      	pop	{r4, pc}

000172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   172fa:	b570      	push	{r4, r5, r6, lr}
   172fc:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   172fe:	b1b9      	cbz	r1, 17330 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
   17300:	684d      	ldr	r5, [r1, #4]
   17302:	b1ad      	cbz	r5, 17330 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   17304:	f855 6b04 	ldr.w	r6, [r5], #4
    size_ = dimensions_count;
   17308:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   1730a:	2e05      	cmp	r6, #5
   1730c:	dd07      	ble.n	1731e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
      dims_pointer_ = new int32_t[dimensions_count];
   1730e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   17312:	429e      	cmp	r6, r3
   17314:	d210      	bcs.n	17338 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3e>
   17316:	00b0      	lsls	r0, r6, #2
   17318:	f001 fbc2 	bl	18aa0 <_Znaj>
   1731c:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1731e:	6823      	ldr	r3, [r4, #0]
   17320:	2b05      	cmp	r3, #5
   17322:	dd0c      	ble.n	1733e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x44>
   17324:	6860      	ldr	r0, [r4, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   17326:	00b2      	lsls	r2, r6, #2
   17328:	4629      	mov	r1, r5
   1732a:	f001 fbe2 	bl	18af2 <memcpy>
  }
   1732e:	e001      	b.n	17334 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
  RuntimeShape() : size_(0) {}
   17330:	2300      	movs	r3, #0
   17332:	6023      	str	r3, [r4, #0]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   17334:	4620      	mov	r0, r4
   17336:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
   17338:	f04f 30ff 	mov.w	r0, #4294967295
   1733c:	e7ec      	b.n	17318 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1733e:	1d20      	adds	r0, r4, #4
   17340:	e7f1      	b.n	17326 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>

00017342 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   17342:	2801      	cmp	r0, #1
   17344:	d002      	beq.n	1734c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
   17346:	2802      	cmp	r0, #2
   17348:	d000      	beq.n	1734c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   1734a:	2000      	movs	r0, #0
  }
}
   1734c:	4770      	bx	lr

0001734e <_ZN6tflite17CountLeadingZerosIjEEiT_>:
  return integer_input ? __builtin_clz(integer_input)
   1734e:	b110      	cbz	r0, 17356 <_ZN6tflite17CountLeadingZerosIjEEiT_+0x8>
   17350:	fab0 f080 	clz	r0, r0
   17354:	4770      	bx	lr
   17356:	2020      	movs	r0, #32
}
   17358:	4770      	bx	lr

0001735a <_ZN8gemmlowp3SubIiEET_S1_S1_>:
}
   1735a:	1a40      	subs	r0, r0, r1
   1735c:	4770      	bx	lr

0001735e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   1735e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17362:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   17364:	2001      	movs	r0, #1
   17366:	f7fe fe1d 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1736a:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   1736c:	2000      	movs	r0, #0
   1736e:	f7fe fe19 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   17372:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   17374:	2001      	movs	r0, #1
   17376:	f7fe fe15 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1737a:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   1737c:	4631      	mov	r1, r6
   1737e:	4620      	mov	r0, r4
   17380:	f7fe fe11 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17384:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   17386:	2101      	movs	r1, #1
   17388:	4630      	mov	r0, r6
   1738a:	f7fe fe0e 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1738e:	4606      	mov	r6, r0
   17390:	4641      	mov	r1, r8
   17392:	4620      	mov	r0, r4
   17394:	f7fe fe15 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   17398:	4629      	mov	r1, r5
   1739a:	f7fe fe04 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1739e:	4601      	mov	r1, r0
   173a0:	4630      	mov	r0, r6
   173a2:	f7fe fe04 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
   173a6:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   173a8:	2101      	movs	r1, #1
   173aa:	4620      	mov	r0, r4
   173ac:	f7fe fdfd 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   173b0:	4604      	mov	r4, r0
   173b2:	4631      	mov	r1, r6
   173b4:	4638      	mov	r0, r7
   173b6:	f7fe fe0c 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   173ba:	4629      	mov	r1, r5
   173bc:	f7fe fdf3 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   173c0:	4601      	mov	r1, r0
   173c2:	4620      	mov	r0, r4
   173c4:	f7fe fdf3 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   173c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000173cc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
   173cc:	b4f0      	push	{r4, r5, r6, r7}
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
   173ce:	17c7      	asrs	r7, r0, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   173d0:	2301      	movs	r3, #1
   173d2:	fa03 f101 	lsl.w	r1, r3, r1
   173d6:	17cd      	asrs	r5, r1, #31
   173d8:	fb01 f307 	mul.w	r3, r1, r7
   173dc:	fb00 3305 	mla	r3, r0, r5, r3
   173e0:	fba1 0100 	umull	r0, r1, r1, r0
   173e4:	4419      	add	r1, r3
             ? min
   173e6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   173ea:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   173ee:	db06      	blt.n	173fe <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x32>
             : wide_shifted > max ? max
   173f0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   173f4:	f171 0300 	sbcs.w	r3, r1, #0
   173f8:	da04      	bge.n	17404 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x38>
}
   173fa:	bcf0      	pop	{r4, r5, r6, r7}
   173fc:	4770      	bx	lr
             ? min
   173fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   17402:	e7fa      	b.n	173fa <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>
             : wide_shifted > max ? max
   17404:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
   17408:	e7f7      	b.n	173fa <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>

0001740a <_ZN8gemmlowp6BitXorIiEET_S1_S1_>:
}
   1740a:	4048      	eors	r0, r1
   1740c:	4770      	bx	lr

0001740e <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
   1740e:	b570      	push	{r4, r5, r6, lr}
   17410:	4606      	mov	r6, r0
   17412:	4615      	mov	r5, r2
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
   17414:	f7fe fdc7 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17418:	4604      	mov	r4, r0
   1741a:	4630      	mov	r0, r6
   1741c:	f7fe fdc9 	bl	15fb2 <_ZN8gemmlowp6BitNotIiEET_S1_>
   17420:	4629      	mov	r1, r5
   17422:	f7fe fdc0 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17426:	4601      	mov	r1, r0
   17428:	4620      	mov	r0, r4
   1742a:	f7ff ffee 	bl	1740a <_ZN8gemmlowp6BitXorIiEET_S1_S1_>
}
   1742e:	bd70      	pop	{r4, r5, r6, pc}

00017430 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   17430:	b430      	push	{r4, r5}
  std::int64_t b64 = b;
   17432:	17cb      	asrs	r3, r1, #31
  std::int64_t sum = a64 + b64;
   17434:	180a      	adds	r2, r1, r0
   17436:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1743a:	2a00      	cmp	r2, #0
   1743c:	f173 0100 	sbcs.w	r1, r3, #0
   17440:	db0d      	blt.n	1745e <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x2e>
   17442:	2101      	movs	r1, #1
   17444:	2000      	movs	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   17446:	1854      	adds	r4, r2, r1
   17448:	eb43 0500 	adc.w	r5, r3, r0
   1744c:	0feb      	lsrs	r3, r5, #31
   1744e:	18e4      	adds	r4, r4, r3
   17450:	f145 0500 	adc.w	r5, r5, #0
   17454:	0860      	lsrs	r0, r4, #1
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   17456:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
   1745a:	bc30      	pop	{r4, r5}
   1745c:	4770      	bx	lr
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1745e:	f04f 31ff 	mov.w	r1, #4294967295
   17462:	4608      	mov	r0, r1
   17464:	e7ef      	b.n	17446 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x16>

00017466 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   17466:	b508      	push	{r3, lr}
   17468:	f7fe fda1 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
   1746c:	bd08      	pop	{r3, pc}

0001746e <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
}
   1746e:	4770      	bx	lr

00017470 <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   17470:	b508      	push	{r3, lr}
   17472:	f7ff ff72 	bl	1735a <_ZN8gemmlowp3SubIiEET_S1_S1_>
   17476:	bd08      	pop	{r3, pc}

00017478 <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
   17478:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(!a);
   1747a:	fab0 f080 	clz	r0, r0
   1747e:	0940      	lsrs	r0, r0, #5
   17480:	f7fe fd99 	bl	15fb6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   17484:	bd08      	pop	{r3, pc}

00017486 <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   17486:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   17488:	f7f7 fd24 	bl	eed4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>
}
   1748c:	bd08      	pop	{r3, pc}

0001748e <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   1748e:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   17490:	f7f7 fd50 	bl	ef34 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>
}
   17494:	bd08      	pop	{r3, pc}

00017496 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
   17496:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   17498:	f7ff ffb9 	bl	1740e <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
   1749c:	bd08      	pop	{r3, pc}

0001749e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   1749e:	b508      	push	{r3, lr}
   174a0:	f7fe fd85 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
   174a4:	bd08      	pop	{r3, pc}

000174a6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   174a6:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   174a8:	f7ff ff59 	bl	1735e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>
}
   174ac:	bd08      	pop	{r3, pc}

000174ae <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   174ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174b2:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   174b4:	2003      	movs	r0, #3
   174b6:	f7fe fd75 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   174ba:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   174bc:	2000      	movs	r0, #0
   174be:	f7fe fd71 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   174c2:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   174c4:	2001      	movs	r0, #1
   174c6:	f7fe fd6d 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   174ca:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   174cc:	4631      	mov	r1, r6
   174ce:	4620      	mov	r0, r4
   174d0:	f7fe fd69 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   174d4:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   174d6:	2101      	movs	r1, #1
   174d8:	4630      	mov	r0, r6
   174da:	f7fe fd66 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   174de:	4606      	mov	r6, r0
   174e0:	4641      	mov	r1, r8
   174e2:	4620      	mov	r0, r4
   174e4:	f7fe fd6d 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   174e8:	4629      	mov	r1, r5
   174ea:	f7fe fd5c 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   174ee:	4601      	mov	r1, r0
   174f0:	4630      	mov	r0, r6
   174f2:	f7fe fd5c 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
   174f6:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   174f8:	2102      	movs	r1, #2
   174fa:	4620      	mov	r0, r4
   174fc:	f7fe fd55 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   17500:	4604      	mov	r4, r0
   17502:	4631      	mov	r1, r6
   17504:	4638      	mov	r0, r7
   17506:	f7fe fd64 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   1750a:	4629      	mov	r1, r5
   1750c:	f7fe fd4b 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17510:	4601      	mov	r1, r0
   17512:	4620      	mov	r0, r4
   17514:	f7fe fd4b 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   17518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001751c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   1751c:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   1751e:	f7ff ffc6 	bl	174ae <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>
}
   17522:	bd08      	pop	{r3, pc}

00017524 <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
   17524:	b508      	push	{r3, lr}
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
   17526:	f7fe fd42 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   1752a:	bd08      	pop	{r3, pc}

0001752c <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
   1752c:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   1752e:	f7ff fff9 	bl	17524 <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>
}
   17532:	bd08      	pop	{r3, pc}

00017534 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   17534:	b508      	push	{r3, lr}
   17536:	f7fe fd3a 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
   1753a:	bd08      	pop	{r3, pc}

0001753c <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   1753c:	b508      	push	{r3, lr}
   1753e:	f7ff ff0c 	bl	1735a <_ZN8gemmlowp3SubIiEET_S1_S1_>
   17542:	bd08      	pop	{r3, pc}

00017544 <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
   17544:	b508      	push	{r3, lr}
   17546:	f7fe fd2e 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1754a:	bd08      	pop	{r3, pc}

0001754c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   1754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17550:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   17552:	f640 70ff 	movw	r0, #4095	; 0xfff
   17556:	f7fe fd25 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1755a:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   1755c:	2000      	movs	r0, #0
   1755e:	f7fe fd21 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   17562:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   17564:	2001      	movs	r0, #1
   17566:	f7fe fd1d 	bl	15fa4 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1756a:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   1756c:	4631      	mov	r1, r6
   1756e:	4620      	mov	r0, r4
   17570:	f7fe fd19 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17574:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   17576:	2101      	movs	r1, #1
   17578:	4630      	mov	r0, r6
   1757a:	f7fe fd16 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1757e:	4606      	mov	r6, r0
   17580:	4641      	mov	r1, r8
   17582:	4620      	mov	r0, r4
   17584:	f7fe fd1d 	bl	15fc2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   17588:	4629      	mov	r1, r5
   1758a:	f7fe fd0c 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1758e:	4601      	mov	r1, r0
   17590:	4630      	mov	r0, r6
   17592:	f7fe fd0c 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
   17596:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   17598:	210c      	movs	r1, #12
   1759a:	4620      	mov	r0, r4
   1759c:	f7fe fd05 	bl	15faa <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   175a0:	4604      	mov	r4, r0
   175a2:	4631      	mov	r1, r6
   175a4:	4638      	mov	r0, r7
   175a6:	f7fe fd14 	bl	15fd2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   175aa:	4629      	mov	r1, r5
   175ac:	f7fe fcfb 	bl	15fa6 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   175b0:	4601      	mov	r1, r0
   175b2:	4620      	mov	r0, r4
   175b4:	f7fe fcfb 	bl	15fae <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   175b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000175bc <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   175bc:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   175be:	f7ff ffc5 	bl	1754c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>
}
   175c2:	bd08      	pop	{r3, pc}

000175c4 <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
   175c4:	b508      	push	{r3, lr}
   175c6:	f7ff ff57 	bl	17478 <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>
   175ca:	bd08      	pop	{r3, pc}

000175cc <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   175cc:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   175ce:	f7f7 fe67 	bl	f2a0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>
}
   175d2:	bd08      	pop	{r3, pc}

000175d4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   175d4:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   175d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   175d8:	b113      	cbz	r3, 175e0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
   175da:	2120      	movs	r1, #32
   175dc:	4798      	blx	r3
}
   175de:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   175e0:	f001 fa60 	bl	18aa4 <abort>

000175e4 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
                                    OpDataPooling* data) {
   175e4:	b4f0      	push	{r4, r5, r6, r7}
   175e6:	b084      	sub	sp, #16
  return t->dims->data[dim];
   175e8:	6893      	ldr	r3, [r2, #8]
   175ea:	689e      	ldr	r6, [r3, #8]
   175ec:	68dc      	ldr	r4, [r3, #12]
      params->stride_height, params->stride_width,
   175ee:	688a      	ldr	r2, [r1, #8]
   175f0:	684b      	ldr	r3, [r1, #4]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   175f2:	690f      	ldr	r7, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
   175f4:	68cd      	ldr	r5, [r1, #12]
   175f6:	7808      	ldrb	r0, [r1, #0]
  if (stride == 0) return 0;
   175f8:	b17b      	cbz	r3, 1761a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x36>
  switch (padding) {
   175fa:	2801      	cmp	r0, #1
   175fc:	d003      	beq.n	17606 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x22>
   175fe:	2802      	cmp	r0, #2
   17600:	d006      	beq.n	17610 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x2c>
   17602:	2100      	movs	r1, #0
   17604:	e00a      	b.n	1761c <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - 1) / stride;
   17606:	1919      	adds	r1, r3, r4
   17608:	3901      	subs	r1, #1
   1760a:	fb91 f1f3 	sdiv	r1, r1, r3
   1760e:	e005      	b.n	1761c <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - effective_filter_size) / stride;
   17610:	1919      	adds	r1, r3, r4
   17612:	1b49      	subs	r1, r1, r5
   17614:	fb91 f1f3 	sdiv	r1, r1, r3
   17618:	e000      	b.n	1761c <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
  if (stride == 0) return 0;
   1761a:	4619      	mov	r1, r3
   1761c:	b17a      	cbz	r2, 1763e <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5a>
  switch (padding) {
   1761e:	2801      	cmp	r0, #1
   17620:	d003      	beq.n	1762a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x46>
   17622:	2802      	cmp	r0, #2
   17624:	d006      	beq.n	17634 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x50>
   17626:	2000      	movs	r0, #0
   17628:	e00a      	b.n	17640 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - 1) / stride;
   1762a:	1990      	adds	r0, r2, r6
   1762c:	3801      	subs	r0, #1
   1762e:	fb90 f0f2 	sdiv	r0, r0, r2
   17632:	e005      	b.n	17640 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - effective_filter_size) / stride;
   17634:	1990      	adds	r0, r2, r6
   17636:	1bc0      	subs	r0, r0, r7
   17638:	fb90 f0f2 	sdiv	r0, r0, r2
   1763c:	e000      	b.n	17640 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
  if (stride == 0) return 0;
   1763e:	4610      	mov	r0, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   17640:	3801      	subs	r0, #1
   17642:	fb00 7202 	mla	r2, r0, r2, r7
  int total_padding =
   17646:	1b92      	subs	r2, r2, r6
  total_padding = total_padding > 0 ? total_padding : 0;
   17648:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
   1764c:	f002 0001 	and.w	r0, r2, #1
  return total_padding / 2;
   17650:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   17654:	1052      	asrs	r2, r2, #1
  padding_values.height =
   17656:	9201      	str	r2, [sp, #4]
  padding_values.height_offset = offset;
   17658:	9003      	str	r0, [sp, #12]
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1765a:	3901      	subs	r1, #1
   1765c:	fb01 5303 	mla	r3, r1, r3, r5
  int total_padding =
   17660:	1b1b      	subs	r3, r3, r4
  total_padding = total_padding > 0 ? total_padding : 0;
   17662:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  *offset = total_padding % 2;
   17666:	f003 0201 	and.w	r2, r3, #1
  return total_padding / 2;
   1766a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1766e:	105b      	asrs	r3, r3, #1
  padding_values.width =
   17670:	9300      	str	r3, [sp, #0]
  padding_values.width_offset = offset;
   17672:	9202      	str	r2, [sp, #8]
   17674:	ab04      	add	r3, sp, #16
   17676:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1767a:	9c08      	ldr	r4, [sp, #32]
   1767c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   17680:	2000      	movs	r0, #0
   17682:	b004      	add	sp, #16
   17684:	bcf0      	pop	{r4, r5, r6, r7}
   17686:	4770      	bx	lr

00017688 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   17688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1768c:	b0b5      	sub	sp, #212	; 0xd4
   1768e:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   17690:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
   17692:	6891      	ldr	r1, [r2, #8]
   17694:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   17696:	6851      	ldr	r1, [r2, #4]
   17698:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   1769a:	6911      	ldr	r1, [r2, #16]
   1769c:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   1769e:	68d2      	ldr	r2, [r2, #12]
   176a0:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   176a2:	685a      	ldr	r2, [r3, #4]
   176a4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   176a8:	681a      	ldr	r2, [r3, #0]
   176aa:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   176ae:	699a      	ldr	r2, [r3, #24]
   176b0:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   176b2:	69db      	ldr	r3, [r3, #28]
   176b4:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   176b6:	4629      	mov	r1, r5
   176b8:	a81e      	add	r0, sp, #120	; 0x78
   176ba:	f7ff fe1e 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   176be:	4628      	mov	r0, r5
   176c0:	f7fe fc5c 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   176c4:	9002      	str	r0, [sp, #8]
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
   176c6:	4621      	mov	r1, r4
   176c8:	a824      	add	r0, sp, #144	; 0x90
   176ca:	f7ff fe16 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   176ce:	4620      	mov	r0, r4
   176d0:	f7fe fc5a 	bl	15f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   176d4:	9003      	str	r0, [sp, #12]
  inline int32_t DimensionsCount() const { return size_; }
   176d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   176d8:	2b04      	cmp	r3, #4
   176da:	d17b      	bne.n	177d4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x14c>
   176dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   176de:	2b04      	cmp	r3, #4
   176e0:	d17a      	bne.n	177d8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x150>
    TFLITE_DCHECK_LT(i, size_);
   176e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   176e4:	2b00      	cmp	r3, #0
   176e6:	dd79      	ble.n	177dc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   176e8:	2b05      	cmp	r3, #5
   176ea:	dd79      	ble.n	177e0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x158>
   176ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   176ee:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   176f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   176f2:	2a00      	cmp	r2, #0
   176f4:	dd76      	ble.n	177e4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   176f6:	2a05      	cmp	r2, #5
   176f8:	dd76      	ble.n	177e8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x160>
   176fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
   176fc:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   176fe:	429a      	cmp	r2, r3
   17700:	d174      	bne.n	177ec <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x164>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17702:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   17704:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17706:	2a00      	cmp	r2, #0
   17708:	dd72      	ble.n	177f0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1770a:	2a05      	cmp	r2, #5
   1770c:	dd72      	ble.n	177f4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x16c>
   1770e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17710:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17712:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   17714:	4293      	cmp	r3, r2
   17716:	dc6f      	bgt.n	177f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x170>
      return __a;
   17718:	ab33      	add	r3, sp, #204	; 0xcc
   1771a:	681b      	ldr	r3, [r3, #0]
   1771c:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   1771e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17720:	2b03      	cmp	r3, #3
   17722:	dd6b      	ble.n	177fc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17724:	2b05      	cmp	r3, #5
   17726:	dd6b      	ble.n	17800 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x178>
   17728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1772a:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   1772c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1772e:	2a03      	cmp	r2, #3
   17730:	dd68      	ble.n	17804 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x17c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17732:	2a05      	cmp	r2, #5
   17734:	dd68      	ble.n	17808 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x180>
   17736:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17738:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1773a:	429a      	cmp	r2, r3
   1773c:	d166      	bne.n	1780c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x184>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1773e:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   17740:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17742:	2a03      	cmp	r2, #3
   17744:	dd64      	ble.n	17810 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17746:	2a05      	cmp	r2, #5
   17748:	dd64      	ble.n	17814 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x18c>
   1774a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1774c:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1774e:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   17750:	4293      	cmp	r3, r2
   17752:	dc61      	bgt.n	17818 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x190>
      return __a;
   17754:	ab31      	add	r3, sp, #196	; 0xc4
   17756:	681b      	ldr	r3, [r3, #0]
   17758:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   1775a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1775c:	2b01      	cmp	r3, #1
   1775e:	dd5d      	ble.n	1781c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17760:	2b05      	cmp	r3, #5
   17762:	dd5d      	ble.n	17820 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x198>
   17764:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17766:	685b      	ldr	r3, [r3, #4]
   17768:	930f      	str	r3, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
   1776a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1776c:	2b02      	cmp	r3, #2
   1776e:	dd5a      	ble.n	17826 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17770:	2b05      	cmp	r3, #5
   17772:	dd5a      	ble.n	1782a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a2>
   17774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17776:	689b      	ldr	r3, [r3, #8]
   17778:	930e      	str	r3, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
   1777a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1777c:	2b01      	cmp	r3, #1
   1777e:	dd57      	ble.n	17830 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17780:	2b05      	cmp	r3, #5
   17782:	dd57      	ble.n	17834 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1ac>
   17784:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17786:	685b      	ldr	r3, [r3, #4]
   17788:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   1778a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1778c:	2b02      	cmp	r3, #2
   1778e:	dd54      	ble.n	1783a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17790:	2b05      	cmp	r3, #5
   17792:	dd54      	ble.n	1783e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b6>
   17794:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17796:	689b      	ldr	r3, [r3, #8]
   17798:	930c      	str	r3, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   1779a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1779c:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_width = params.stride_width;
   1779e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   177a0:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int batch = 0; batch < batches; ++batch) {
   177a2:	f04f 0b00 	mov.w	fp, #0
   177a6:	9b08      	ldr	r3, [sp, #32]
   177a8:	459b      	cmp	fp, r3
   177aa:	f280 812d 	bge.w	17a08 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   177ae:	f04f 0a00 	mov.w	sl, #0
   177b2:	46d1      	mov	r9, sl
   177b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   177b6:	4599      	cmp	r9, r3
   177b8:	f280 8123 	bge.w	17a02 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x37a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   177bc:	f04f 0a00 	mov.w	sl, #0
   177c0:	46d8      	mov	r8, fp
   177c2:	46cb      	mov	fp, r9
   177c4:	46d1      	mov	r9, sl
   177c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   177c8:	4599      	cmp	r9, r3
   177ca:	f280 8115 	bge.w	179f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   177ce:	f04f 0a00 	mov.w	sl, #0
   177d2:	e0c6      	b.n	17962 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2da>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   177d4:	f001 f966 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   177d8:	f001 f964 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   177dc:	f001 f962 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   177e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   177e2:	e785      	b.n	176f0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x68>
    TFLITE_DCHECK_LT(i, size_);
   177e4:	f001 f95e 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   177e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   177ea:	e788      	b.n	176fe <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x76>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   177ec:	f001 f95a 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   177f0:	f001 f958 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   177f4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   177f6:	e78c      	b.n	17712 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x8a>
	return __b;
   177f8:	ab32      	add	r3, sp, #200	; 0xc8
   177fa:	e78e      	b.n	1771a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x92>
    TFLITE_DCHECK_LT(i, size_);
   177fc:	f001 f952 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17800:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17802:	e793      	b.n	1772c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xa4>
    TFLITE_DCHECK_LT(i, size_);
   17804:	f001 f94e 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17808:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1780a:	e796      	b.n	1773a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xb2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1780c:	f001 f94a 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17810:	f001 f948 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17814:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   17816:	e79a      	b.n	1774e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xc6>
   17818:	ab30      	add	r3, sp, #192	; 0xc0
   1781a:	e79c      	b.n	17756 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xce>
    TFLITE_DCHECK_LT(i, size_);
   1781c:	f001 f942 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17820:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17822:	930f      	str	r3, [sp, #60]	; 0x3c
   17824:	e7a1      	b.n	1776a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   17826:	f001 f93d 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1782a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1782c:	930e      	str	r3, [sp, #56]	; 0x38
   1782e:	e7a4      	b.n	1777a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   17830:	f001 f938 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17834:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17836:	930d      	str	r3, [sp, #52]	; 0x34
   17838:	e7a7      	b.n	1778a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   1783a:	f001 f933 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1783e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17840:	930c      	str	r3, [sp, #48]	; 0x30
   17842:	e7aa      	b.n	1779a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x112>
	return __b;
   17844:	a92e      	add	r1, sp, #184	; 0xb8
   17846:	e0a5      	b.n	17994 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x30c>
	return __b;
   17848:	aa2d      	add	r2, sp, #180	; 0xb4
   1784a:	e0ad      	b.n	179a8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x320>
	return __b;
   1784c:	aa2b      	add	r2, sp, #172	; 0xac
   1784e:	e0b5      	b.n	179bc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x334>
	return __b;
   17850:	ab2a      	add	r3, sp, #168	; 0xa8
   17852:	e0bc      	b.n	179ce <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x346>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17854:	f001 f926 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17858:	f001 f924 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1785c:	f001 f922 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17860:	f001 f920 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17864:	f001 f91e 	bl	18aa4 <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float total = 0.f;
          float filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17868:	3601      	adds	r6, #1
   1786a:	42b5      	cmp	r5, r6
   1786c:	dd37      	ble.n	178de <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1786e:	9f06      	ldr	r7, [sp, #24]
   17870:	9b07      	ldr	r3, [sp, #28]
   17872:	42bb      	cmp	r3, r7
   17874:	ddf8      	ble.n	17868 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   17876:	9b04      	ldr	r3, [sp, #16]
   17878:	19d8      	adds	r0, r3, r7
              const int in_y = in_y_origin + filter_y;
   1787a:	9b05      	ldr	r3, [sp, #20]
   1787c:	eb03 0c06 	add.w	ip, r3, r6
  inline int32_t DimensionsCount() const { return size_; }
   17880:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17882:	2b04      	cmp	r3, #4
   17884:	d1e6      	bne.n	17854 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1cc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17886:	f1b8 0f00 	cmp.w	r8, #0
   1788a:	dbe5      	blt.n	17858 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
   1788c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1788e:	4598      	cmp	r8, r3
   17890:	dae2      	bge.n	17858 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17892:	f1bc 0f00 	cmp.w	ip, #0
   17896:	dbe1      	blt.n	1785c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
   17898:	9920      	ldr	r1, [sp, #128]	; 0x80
   1789a:	458c      	cmp	ip, r1
   1789c:	dade      	bge.n	1785c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1789e:	2800      	cmp	r0, #0
   178a0:	dbde      	blt.n	17860 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
   178a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
   178a4:	4290      	cmp	r0, r2
   178a6:	dadb      	bge.n	17860 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   178a8:	f1ba 0f00 	cmp.w	sl, #0
   178ac:	dbda      	blt.n	17864 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
   178ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
   178b0:	459a      	cmp	sl, r3
   178b2:	dad7      	bge.n	17864 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   178b4:	fb01 c108 	mla	r1, r1, r8, ip
   178b8:	fb01 0202 	mla	r2, r1, r2, r0
   178bc:	fb02 a303 	mla	r3, r2, r3, sl
              total +=
   178c0:	9a02      	ldr	r2, [sp, #8]
   178c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   178c6:	9801      	ldr	r0, [sp, #4]
   178c8:	f7e9 f91a 	bl	b00 <__addsf3>
   178cc:	9001      	str	r0, [sp, #4]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   178ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   178d2:	4620      	mov	r0, r4
   178d4:	f7e9 f914 	bl	b00 <__addsf3>
   178d8:	4604      	mov	r4, r0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   178da:	3701      	adds	r7, #1
   178dc:	e7c8      	b.n	17870 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e8>
            }
          }
          if (filter_count == 0) return false;
   178de:	2100      	movs	r1, #0
   178e0:	4620      	mov	r0, r4
   178e2:	f7e9 fba9 	bl	1038 <__aeabi_fcmpeq>
   178e6:	2800      	cmp	r0, #0
   178e8:	f040 808e 	bne.w	17a08 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
          const float average = total / filter_count;
   178ec:	4621      	mov	r1, r4
   178ee:	9801      	ldr	r0, [sp, #4]
   178f0:	f7e9 fac2 	bl	e78 <__aeabi_fdiv>
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   178f4:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   178f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   178f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   178fa:	2b04      	cmp	r3, #4
   178fc:	d16b      	bne.n	179d6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x34e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   178fe:	f1b8 0f00 	cmp.w	r8, #0
   17902:	db6a      	blt.n	179da <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
   17904:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17906:	4598      	cmp	r8, r3
   17908:	da67      	bge.n	179da <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1790a:	f1bb 0f00 	cmp.w	fp, #0
   1790e:	db66      	blt.n	179de <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
   17910:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17912:	4593      	cmp	fp, r2
   17914:	da63      	bge.n	179de <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17916:	f1b9 0f00 	cmp.w	r9, #0
   1791a:	db62      	blt.n	179e2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
   1791c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1791e:	4599      	cmp	r9, r3
   17920:	da5f      	bge.n	179e2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17922:	f1ba 0f00 	cmp.w	sl, #0
   17926:	db5e      	blt.n	179e6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
   17928:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   1792a:	45a2      	cmp	sl, r4
   1792c:	da5b      	bge.n	179e6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1792e:	fb02 b208 	mla	r2, r2, r8, fp
   17932:	fb02 9303 	mla	r3, r2, r3, r9
   17936:	fb03 a404 	mla	r4, r3, r4, sl
   1793a:	9012      	str	r0, [sp, #72]	; 0x48
   1793c:	9111      	str	r1, [sp, #68]	; 0x44
   1793e:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   17940:	f7e9 fb84 	bl	104c <__aeabi_fcmplt>
   17944:	2800      	cmp	r0, #0
   17946:	d150      	bne.n	179ea <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x362>
      return __a;
   17948:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   1794a:	6829      	ldr	r1, [r5, #0]
   1794c:	4630      	mov	r0, r6
   1794e:	f7e9 fb7d 	bl	104c <__aeabi_fcmplt>
   17952:	2800      	cmp	r0, #0
   17954:	d14b      	bne.n	179ee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x366>
  return min(max(x, output_activation_min), output_activation_max);
   17956:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   17958:	9a03      	ldr	r2, [sp, #12]
   1795a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   1795e:	f10a 0a01 	add.w	sl, sl, #1
   17962:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17964:	459a      	cmp	sl, r3
   17966:	da44      	bge.n	179f2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x36a>
              (out_x * stride_width) - params.padding_values.width;
   17968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1796a:	fb09 f203 	mul.w	r2, r9, r3
   1796e:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   17972:	1a53      	subs	r3, r2, r1
   17974:	9304      	str	r3, [sp, #16]
              (out_y * stride_height) - params.padding_values.height;
   17976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17978:	fb0b f003 	mul.w	r0, fp, r3
   1797c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   17980:	1ac4      	subs	r4, r0, r3
   17982:	9405      	str	r4, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   17984:	2400      	movs	r4, #0
   17986:	942f      	str	r4, [sp, #188]	; 0xbc
   17988:	1a8a      	subs	r2, r1, r2
   1798a:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   1798c:	42a2      	cmp	r2, r4
   1798e:	f73f af59 	bgt.w	17844 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1bc>
      return __a;
   17992:	a92f      	add	r1, sp, #188	; 0xbc
   17994:	6809      	ldr	r1, [r1, #0]
   17996:	9106      	str	r1, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
   17998:	990e      	ldr	r1, [sp, #56]	; 0x38
   1799a:	440a      	add	r2, r1
   1799c:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   1799e:	9919      	ldr	r1, [sp, #100]	; 0x64
   179a0:	428a      	cmp	r2, r1
   179a2:	f6ff af51 	blt.w	17848 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c0>
      return __a;
   179a6:	aa19      	add	r2, sp, #100	; 0x64
   179a8:	6812      	ldr	r2, [r2, #0]
   179aa:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
   179ac:	2200      	movs	r2, #0
   179ae:	922c      	str	r2, [sp, #176]	; 0xb0
   179b0:	1a1b      	subs	r3, r3, r0
   179b2:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   179b4:	4293      	cmp	r3, r2
   179b6:	f73f af49 	bgt.w	1784c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c4>
      return __a;
   179ba:	aa2c      	add	r2, sp, #176	; 0xb0
   179bc:	6816      	ldr	r6, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   179be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   179c0:	4413      	add	r3, r2
   179c2:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   179c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   179c6:	4293      	cmp	r3, r2
   179c8:	f6ff af42 	blt.w	17850 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c8>
      return __a;
   179cc:	ab18      	add	r3, sp, #96	; 0x60
   179ce:	681d      	ldr	r5, [r3, #0]
          float filter_count = 0;
   179d0:	2400      	movs	r4, #0
          float total = 0.f;
   179d2:	9401      	str	r4, [sp, #4]
   179d4:	e749      	b.n	1786a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   179d6:	f001 f865 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   179da:	f001 f863 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   179de:	f001 f861 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   179e2:	f001 f85f 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   179e6:	f001 f85d 	bl	18aa4 <abort>
	return __b;
   179ea:	ad11      	add	r5, sp, #68	; 0x44
   179ec:	e7ad      	b.n	1794a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2c2>
	return __b;
   179ee:	ad10      	add	r5, sp, #64	; 0x40
   179f0:	e7b1      	b.n	17956 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2ce>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   179f2:	f109 0901 	add.w	r9, r9, #1
   179f6:	e6e6      	b.n	177c6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x13e>
   179f8:	46d9      	mov	r9, fp
   179fa:	46c3      	mov	fp, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
   179fc:	f109 0901 	add.w	r9, r9, #1
   17a00:	e6d8      	b.n	177b4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x12c>
  for (int batch = 0; batch < batches; ++batch) {
   17a02:	f10b 0b01 	add.w	fp, fp, #1
   17a06:	e6ce      	b.n	177a6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x11e>
    if (size_ > kMaxSmallSize) {
   17a08:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17a0a:	2b05      	cmp	r3, #5
   17a0c:	dd03      	ble.n	17a16 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
      delete[] dims_pointer_;
   17a0e:	9825      	ldr	r0, [sp, #148]	; 0x94
   17a10:	b108      	cbz	r0, 17a16 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
   17a12:	f001 f832 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   17a16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17a18:	2b05      	cmp	r3, #5
   17a1a:	dd03      	ble.n	17a24 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
      delete[] dims_pointer_;
   17a1c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   17a1e:	b108      	cbz	r0, 17a24 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
   17a20:	f001 f82b 	bl	18a7a <_ZdaPv>
                             tflite::micro::GetTensorData<float>(output));
}
   17a24:	b035      	add	sp, #212	; 0xd4
   17a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017a2a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:
}

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
   17a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a2e:	b0b5      	sub	sp, #212	; 0xd4
   17a30:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   17a32:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   17a34:	6891      	ldr	r1, [r2, #8]
   17a36:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   17a38:	6851      	ldr	r1, [r2, #4]
   17a3a:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   17a3c:	6911      	ldr	r1, [r2, #16]
   17a3e:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   17a40:	68d2      	ldr	r2, [r2, #12]
   17a42:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   17a44:	685a      	ldr	r2, [r3, #4]
   17a46:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   17a4a:	681a      	ldr	r2, [r3, #0]
   17a4c:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   17a50:	699a      	ldr	r2, [r3, #24]
   17a52:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   17a54:	69db      	ldr	r3, [r3, #28]
   17a56:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   17a58:	4629      	mov	r1, r5
   17a5a:	a81e      	add	r0, sp, #120	; 0x78
   17a5c:	f7ff fc4d 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   17a60:	4628      	mov	r0, r5
   17a62:	f7fe fa8b 	bl	15f7c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   17a66:	4682      	mov	sl, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
   17a68:	4621      	mov	r1, r4
   17a6a:	a824      	add	r0, sp, #144	; 0x90
   17a6c:	f7ff fc45 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   17a70:	4620      	mov	r0, r4
   17a72:	f7fe fa89 	bl	15f88 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   17a76:	9000      	str	r0, [sp, #0]
  inline int32_t DimensionsCount() const { return size_; }
   17a78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17a7a:	2b04      	cmp	r3, #4
   17a7c:	f040 8081 	bne.w	17b82 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x158>
   17a80:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17a82:	2b04      	cmp	r3, #4
   17a84:	d17f      	bne.n	17b86 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15c>
    TFLITE_DCHECK_LT(i, size_);
   17a86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17a88:	2b00      	cmp	r3, #0
   17a8a:	dd7e      	ble.n	17b8a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x160>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17a8c:	2b05      	cmp	r3, #5
   17a8e:	dd7e      	ble.n	17b8e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x164>
   17a90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17a92:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   17a94:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17a96:	2a00      	cmp	r2, #0
   17a98:	dd7b      	ble.n	17b92 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17a9a:	2a05      	cmp	r2, #5
   17a9c:	dd7b      	ble.n	17b96 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16c>
   17a9e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17aa0:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17aa2:	429a      	cmp	r2, r3
   17aa4:	d179      	bne.n	17b9a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x170>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17aa6:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   17aa8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17aaa:	2a00      	cmp	r2, #0
   17aac:	dd77      	ble.n	17b9e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17aae:	2a05      	cmp	r2, #5
   17ab0:	dd77      	ble.n	17ba2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x178>
   17ab2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17ab4:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17ab6:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   17ab8:	4293      	cmp	r3, r2
   17aba:	dc74      	bgt.n	17ba6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17c>
      return __a;
   17abc:	ab33      	add	r3, sp, #204	; 0xcc
   17abe:	681b      	ldr	r3, [r3, #0]
   17ac0:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   17ac2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17ac4:	2b03      	cmp	r3, #3
   17ac6:	dd70      	ble.n	17baa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x180>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ac8:	2b05      	cmp	r3, #5
   17aca:	dd70      	ble.n	17bae <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x184>
   17acc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17ace:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   17ad0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17ad2:	2a03      	cmp	r2, #3
   17ad4:	dd6d      	ble.n	17bb2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ad6:	2a05      	cmp	r2, #5
   17ad8:	dd6d      	ble.n	17bb6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18c>
   17ada:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17adc:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17ade:	429a      	cmp	r2, r3
   17ae0:	d16b      	bne.n	17bba <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x190>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17ae2:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   17ae4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17ae6:	2a03      	cmp	r2, #3
   17ae8:	dd69      	ble.n	17bbe <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17aea:	2a05      	cmp	r2, #5
   17aec:	dd69      	ble.n	17bc2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x198>
   17aee:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17af0:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17af2:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   17af4:	4293      	cmp	r3, r2
   17af6:	dc66      	bgt.n	17bc6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19c>
      return __a;
   17af8:	ab31      	add	r3, sp, #196	; 0xc4
   17afa:	681b      	ldr	r3, [r3, #0]
   17afc:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   17afe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17b00:	2b01      	cmp	r3, #1
   17b02:	dd62      	ble.n	17bca <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b04:	2b05      	cmp	r3, #5
   17b06:	dd62      	ble.n	17bce <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a4>
   17b08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17b0a:	685b      	ldr	r3, [r3, #4]
   17b0c:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   17b0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17b10:	2b02      	cmp	r3, #2
   17b12:	dd5f      	ble.n	17bd4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b14:	2b05      	cmp	r3, #5
   17b16:	dd5f      	ble.n	17bd8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
   17b18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17b1a:	689b      	ldr	r3, [r3, #8]
   17b1c:	930c      	str	r3, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   17b1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17b20:	2b01      	cmp	r3, #1
   17b22:	dd5c      	ble.n	17bde <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b24:	2b05      	cmp	r3, #5
   17b26:	dd5c      	ble.n	17be2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
   17b28:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17b2a:	685b      	ldr	r3, [r3, #4]
   17b2c:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   17b2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17b30:	2b02      	cmp	r3, #2
   17b32:	dd59      	ble.n	17be8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b34:	2b05      	cmp	r3, #5
   17b36:	dd59      	ble.n	17bec <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
   17b38:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17b3a:	689b      	ldr	r3, [r3, #8]
   17b3c:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   17b3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17b40:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   17b42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17b44:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   17b46:	f04f 0b00 	mov.w	fp, #0
   17b4a:	46d9      	mov	r9, fp
   17b4c:	46d3      	mov	fp, sl
   17b4e:	9b06      	ldr	r3, [sp, #24]
   17b50:	4599      	cmp	r9, r3
   17b52:	f280 8127 	bge.w	17da4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17b56:	f04f 0a00 	mov.w	sl, #0
   17b5a:	46d8      	mov	r8, fp
   17b5c:	46cb      	mov	fp, r9
   17b5e:	46d1      	mov	r9, sl
   17b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17b62:	4599      	cmp	r9, r3
   17b64:	f280 8119 	bge.w	17d9a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17b68:	f04f 0a00 	mov.w	sl, #0
   17b6c:	464f      	mov	r7, r9
   17b6e:	4653      	mov	r3, sl
   17b70:	46c2      	mov	sl, r8
   17b72:	4698      	mov	r8, r3
   17b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17b76:	4598      	cmp	r8, r3
   17b78:	f280 810b 	bge.w	17d92 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
        for (int channel = 0; channel < depth; ++channel) {
   17b7c:	f04f 0900 	mov.w	r9, #0
   17b80:	e0ba      	b.n	17cf8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ce>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17b82:	f000 ff8f 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17b86:	f000 ff8d 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17b8a:	f000 ff8b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17b90:	e780      	b.n	17a94 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x6a>
    TFLITE_DCHECK_LT(i, size_);
   17b92:	f000 ff87 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b96:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17b98:	e783      	b.n	17aa2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x78>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17b9a:	f000 ff83 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17b9e:	f000 ff81 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ba2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17ba4:	e787      	b.n	17ab6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8c>
	return __b;
   17ba6:	ab32      	add	r3, sp, #200	; 0xc8
   17ba8:	e789      	b.n	17abe <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x94>
    TFLITE_DCHECK_LT(i, size_);
   17baa:	f000 ff7b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bae:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17bb0:	e78e      	b.n	17ad0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   17bb2:	f000 ff77 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bb6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   17bb8:	e791      	b.n	17ade <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17bba:	f000 ff73 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17bbe:	f000 ff71 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bc2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   17bc4:	e795      	b.n	17af2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc8>
   17bc6:	ab30      	add	r3, sp, #192	; 0xc0
   17bc8:	e797      	b.n	17afa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xd0>
    TFLITE_DCHECK_LT(i, size_);
   17bca:	f000 ff6b 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bce:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17bd0:	930d      	str	r3, [sp, #52]	; 0x34
   17bd2:	e79c      	b.n	17b0e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe4>
    TFLITE_DCHECK_LT(i, size_);
   17bd4:	f000 ff66 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17bda:	930c      	str	r3, [sp, #48]	; 0x30
   17bdc:	e79f      	b.n	17b1e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   17bde:	f000 ff61 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17be4:	930b      	str	r3, [sp, #44]	; 0x2c
   17be6:	e7a2      	b.n	17b2e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x104>
    TFLITE_DCHECK_LT(i, size_);
   17be8:	f000 ff5c 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17bee:	930a      	str	r3, [sp, #40]	; 0x28
   17bf0:	e7a5      	b.n	17b3e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x114>
	return __b;
   17bf2:	a92e      	add	r1, sp, #184	; 0xb8
   17bf4:	e099      	b.n	17d2a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x300>
	return __b;
   17bf6:	aa2d      	add	r2, sp, #180	; 0xb4
   17bf8:	e0a1      	b.n	17d3e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x314>
	return __b;
   17bfa:	aa2b      	add	r2, sp, #172	; 0xac
   17bfc:	e0a9      	b.n	17d52 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x328>
	return __b;
   17bfe:	ab2a      	add	r3, sp, #168	; 0xa8
   17c00:	e0b0      	b.n	17d64 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x33a>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17c02:	f000 ff4f 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17c06:	f000 ff4d 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17c0a:	f000 ff4b 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17c0e:	f000 ff49 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17c12:	f000 ff47 	bl	18aa4 <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   17c16:	6833      	ldr	r3, [r6, #0]
   17c18:	930f      	str	r3, [sp, #60]	; 0x3c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17c1a:	3501      	adds	r5, #1
   17c1c:	9b04      	ldr	r3, [sp, #16]
   17c1e:	42ab      	cmp	r3, r5
   17c20:	dd2d      	ble.n	17c7e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x254>
              const int in_x = in_x_origin + filter_x;
   17c22:	9b01      	ldr	r3, [sp, #4]
   17c24:	1958      	adds	r0, r3, r5
              const int in_y = in_y_origin + filter_y;
   17c26:	9b02      	ldr	r3, [sp, #8]
   17c28:	191e      	adds	r6, r3, r4
  inline int32_t DimensionsCount() const { return size_; }
   17c2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17c2c:	2b04      	cmp	r3, #4
   17c2e:	d1e8      	bne.n	17c02 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17c30:	f1bb 0f00 	cmp.w	fp, #0
   17c34:	dbe7      	blt.n	17c06 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
   17c36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17c38:	459b      	cmp	fp, r3
   17c3a:	dae4      	bge.n	17c06 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17c3c:	2e00      	cmp	r6, #0
   17c3e:	dbe4      	blt.n	17c0a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
   17c40:	9920      	ldr	r1, [sp, #128]	; 0x80
   17c42:	428e      	cmp	r6, r1
   17c44:	dae1      	bge.n	17c0a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17c46:	2800      	cmp	r0, #0
   17c48:	dbe1      	blt.n	17c0e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
   17c4a:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17c4c:	4290      	cmp	r0, r2
   17c4e:	dade      	bge.n	17c0e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17c50:	f1b9 0f00 	cmp.w	r9, #0
   17c54:	dbdd      	blt.n	17c12 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
   17c56:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17c58:	4599      	cmp	r9, r3
   17c5a:	dada      	bge.n	17c12 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17c5c:	fb01 610b 	mla	r1, r1, fp, r6
   17c60:	fb01 0202 	mla	r2, r1, r2, r0
   17c64:	fb02 9303 	mla	r3, r2, r3, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   17c68:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
      if (__a < __b)
   17c6c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   17c70:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17c72:	f7e9 f9eb 	bl	104c <__aeabi_fcmplt>
   17c76:	2800      	cmp	r0, #0
   17c78:	d1cd      	bne.n	17c16 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
      return __a;
   17c7a:	ae0f      	add	r6, sp, #60	; 0x3c
   17c7c:	e7cb      	b.n	17c16 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17c7e:	3401      	adds	r4, #1
   17c80:	9b05      	ldr	r3, [sp, #20]
   17c82:	42a3      	cmp	r3, r4
   17c84:	dd01      	ble.n	17c8a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x260>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17c86:	9d03      	ldr	r5, [sp, #12]
   17c88:	e7c8      	b.n	17c1c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   17c8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17c8c:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   17c8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   17c90:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17c92:	2b04      	cmp	r3, #4
   17c94:	d16c      	bne.n	17d70 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x346>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17c96:	f1bb 0f00 	cmp.w	fp, #0
   17c9a:	db6b      	blt.n	17d74 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
   17c9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17c9e:	459b      	cmp	fp, r3
   17ca0:	da68      	bge.n	17d74 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17ca2:	2f00      	cmp	r7, #0
   17ca4:	db68      	blt.n	17d78 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
   17ca6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17ca8:	4297      	cmp	r7, r2
   17caa:	da65      	bge.n	17d78 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17cac:	f1b8 0f00 	cmp.w	r8, #0
   17cb0:	db64      	blt.n	17d7c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
   17cb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17cb4:	4598      	cmp	r8, r3
   17cb6:	da61      	bge.n	17d7c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17cb8:	f1b9 0f00 	cmp.w	r9, #0
   17cbc:	db60      	blt.n	17d80 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
   17cbe:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   17cc0:	45a1      	cmp	r9, r4
   17cc2:	da5d      	bge.n	17d80 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17cc4:	fb02 720b 	mla	r2, r2, fp, r7
   17cc8:	fb02 8303 	mla	r3, r2, r3, r8
   17ccc:	fb03 9404 	mla	r4, r3, r4, r9
   17cd0:	9012      	str	r0, [sp, #72]	; 0x48
   17cd2:	9111      	str	r1, [sp, #68]	; 0x44
   17cd4:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   17cd6:	f7e9 f9b9 	bl	104c <__aeabi_fcmplt>
   17cda:	2800      	cmp	r0, #0
   17cdc:	d152      	bne.n	17d84 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35a>
      return __a;
   17cde:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   17ce0:	6829      	ldr	r1, [r5, #0]
   17ce2:	4630      	mov	r0, r6
   17ce4:	f7e9 f9b2 	bl	104c <__aeabi_fcmplt>
   17ce8:	2800      	cmp	r0, #0
   17cea:	d14d      	bne.n	17d88 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35e>
   17cec:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   17cee:	9a00      	ldr	r2, [sp, #0]
   17cf0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   17cf4:	f109 0901 	add.w	r9, r9, #1
   17cf8:	9b07      	ldr	r3, [sp, #28]
   17cfa:	4599      	cmp	r9, r3
   17cfc:	da46      	bge.n	17d8c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
              (out_x * stride_width) - params.padding_values.width;
   17cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d00:	fb08 f203 	mul.w	r2, r8, r3
   17d04:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   17d08:	1a53      	subs	r3, r2, r1
   17d0a:	9301      	str	r3, [sp, #4]
              (out_y * stride_height) - params.padding_values.height;
   17d0c:	9b08      	ldr	r3, [sp, #32]
   17d0e:	fb07 f003 	mul.w	r0, r7, r3
   17d12:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   17d16:	1ac4      	subs	r4, r0, r3
   17d18:	9402      	str	r4, [sp, #8]
          const int filter_x_start = std::max(0, -in_x_origin);
   17d1a:	2400      	movs	r4, #0
   17d1c:	942f      	str	r4, [sp, #188]	; 0xbc
   17d1e:	1a8a      	subs	r2, r1, r2
   17d20:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   17d22:	42a2      	cmp	r2, r4
   17d24:	f73f af65 	bgt.w	17bf2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c8>
      return __a;
   17d28:	a92f      	add	r1, sp, #188	; 0xbc
   17d2a:	6809      	ldr	r1, [r1, #0]
   17d2c:	9103      	str	r1, [sp, #12]
              std::min(params.filter_width, input_width - in_x_origin);
   17d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
   17d30:	440a      	add	r2, r1
   17d32:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   17d34:	9919      	ldr	r1, [sp, #100]	; 0x64
   17d36:	428a      	cmp	r2, r1
   17d38:	f6ff af5d 	blt.w	17bf6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
      return __a;
   17d3c:	aa19      	add	r2, sp, #100	; 0x64
   17d3e:	6812      	ldr	r2, [r2, #0]
   17d40:	9204      	str	r2, [sp, #16]
          const int filter_y_start = std::max(0, -in_y_origin);
   17d42:	2200      	movs	r2, #0
   17d44:	922c      	str	r2, [sp, #176]	; 0xb0
   17d46:	1a1b      	subs	r3, r3, r0
   17d48:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   17d4a:	4293      	cmp	r3, r2
   17d4c:	f73f af55 	bgt.w	17bfa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
      return __a;
   17d50:	aa2c      	add	r2, sp, #176	; 0xb0
   17d52:	6814      	ldr	r4, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   17d54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17d56:	4413      	add	r3, r2
   17d58:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   17d5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17d5c:	4293      	cmp	r3, r2
   17d5e:	f6ff af4e 	blt.w	17bfe <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d4>
      return __a;
   17d62:	ab18      	add	r3, sp, #96	; 0x60
   17d64:	681b      	ldr	r3, [r3, #0]
   17d66:	9305      	str	r3, [sp, #20]
          float max = std::numeric_limits<float>::lowest();
   17d68:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   17d6c:	930f      	str	r3, [sp, #60]	; 0x3c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17d6e:	e787      	b.n	17c80 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x256>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17d70:	f000 fe98 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17d74:	f000 fe96 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17d78:	f000 fe94 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17d7c:	f000 fe92 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17d80:	f000 fe90 	bl	18aa4 <abort>
	return __b;
   17d84:	ad11      	add	r5, sp, #68	; 0x44
   17d86:	e7ab      	b.n	17ce0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2b6>
	return __b;
   17d88:	ad10      	add	r5, sp, #64	; 0x40
   17d8a:	e7af      	b.n	17cec <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2c2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17d8c:	f108 0801 	add.w	r8, r8, #1
   17d90:	e6f0      	b.n	17b74 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14a>
   17d92:	46d0      	mov	r8, sl
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17d94:	f107 0901 	add.w	r9, r7, #1
   17d98:	e6e2      	b.n	17b60 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
   17d9a:	46d9      	mov	r9, fp
   17d9c:	46c3      	mov	fp, r8
  for (int batch = 0; batch < batches; ++batch) {
   17d9e:	f109 0901 	add.w	r9, r9, #1
   17da2:	e6d4      	b.n	17b4e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x124>
    if (size_ > kMaxSmallSize) {
   17da4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17da6:	2b05      	cmp	r3, #5
   17da8:	dd03      	ble.n	17db2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
      delete[] dims_pointer_;
   17daa:	9825      	ldr	r0, [sp, #148]	; 0x94
   17dac:	b108      	cbz	r0, 17db2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
   17dae:	f000 fe64 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   17db2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17db4:	2b05      	cmp	r3, #5
   17db6:	dd03      	ble.n	17dc0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
      delete[] dims_pointer_;
   17db8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   17dba:	b108      	cbz	r0, 17dc0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
   17dbc:	f000 fe5d 	bl	18a7a <_ZdaPv>
                         tflite::micro::GetTensorData<float>(output));
}
   17dc0:	b035      	add	sp, #212	; 0xd4
   17dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017dc6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:
                                 TfLiteEvalTensor* output) {
   17dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dca:	b0b1      	sub	sp, #196	; 0xc4
   17dcc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
   17dce:	9d3b      	ldr	r5, [sp, #236]	; 0xec
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   17dd0:	7a21      	ldrb	r1, [r4, #8]
   17dd2:	2909      	cmp	r1, #9
   17dd4:	f040 80a0 	bne.w	17f18 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x152>
  op_params.stride_height = params->stride_height;
   17dd8:	6891      	ldr	r1, [r2, #8]
   17dda:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
   17ddc:	6851      	ldr	r1, [r2, #4]
   17dde:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
   17de0:	6911      	ldr	r1, [r2, #16]
   17de2:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
   17de4:	68d2      	ldr	r2, [r2, #12]
   17de6:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
   17de8:	685a      	ldr	r2, [r3, #4]
   17dea:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
   17dee:	681a      	ldr	r2, [r3, #0]
   17df0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.quantized_activation_min = data->activation_min;
   17df4:	691a      	ldr	r2, [r3, #16]
   17df6:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.quantized_activation_max = data->activation_max;
   17df8:	695b      	ldr	r3, [r3, #20]
   17dfa:	9317      	str	r3, [sp, #92]	; 0x5c
      op_params, tflite::micro::GetTensorShape(input),
   17dfc:	4621      	mov	r1, r4
   17dfe:	a81a      	add	r0, sp, #104	; 0x68
   17e00:	f7ff fa7b 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   17e04:	4620      	mov	r0, r4
   17e06:	f7fe f8c3 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   17e0a:	9004      	str	r0, [sp, #16]
      tflite::micro::GetTensorShape(output),
   17e0c:	4629      	mov	r1, r5
   17e0e:	a820      	add	r0, sp, #128	; 0x80
   17e10:	f7ff fa73 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   17e14:	4628      	mov	r0, r5
   17e16:	f7fe f8c1 	bl	15f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   17e1a:	9005      	str	r0, [sp, #20]

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   17e1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17e1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17e20:	429a      	cmp	r2, r3
   17e22:	dc7b      	bgt.n	17f1c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x156>
  inline int32_t DimensionsCount() const { return size_; }
   17e24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17e26:	2b04      	cmp	r3, #4
   17e28:	d17a      	bne.n	17f20 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15a>
   17e2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17e2c:	2b04      	cmp	r3, #4
   17e2e:	d179      	bne.n	17f24 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   17e30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17e32:	2b00      	cmp	r3, #0
   17e34:	dd78      	ble.n	17f28 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e36:	2b05      	cmp	r3, #5
   17e38:	dd78      	ble.n	17f2c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x166>
   17e3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17e3c:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   17e3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e40:	2a00      	cmp	r2, #0
   17e42:	dd75      	ble.n	17f30 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e44:	2a05      	cmp	r2, #5
   17e46:	dd75      	ble.n	17f34 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16e>
   17e48:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17e4a:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17e4c:	429a      	cmp	r2, r3
   17e4e:	d173      	bne.n	17f38 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x172>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17e50:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   17e52:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e54:	2a00      	cmp	r2, #0
   17e56:	dd71      	ble.n	17f3c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e58:	2a05      	cmp	r2, #5
   17e5a:	dd71      	ble.n	17f40 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17a>
   17e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17e5e:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17e60:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   17e62:	4293      	cmp	r3, r2
   17e64:	dc6e      	bgt.n	17f44 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17e>
      return __a;
   17e66:	ab2f      	add	r3, sp, #188	; 0xbc
   17e68:	681b      	ldr	r3, [r3, #0]
   17e6a:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   17e6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17e6e:	2b03      	cmp	r3, #3
   17e70:	dd6a      	ble.n	17f48 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e72:	2b05      	cmp	r3, #5
   17e74:	dd6a      	ble.n	17f4c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x186>
   17e76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17e78:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   17e7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e7c:	2a03      	cmp	r2, #3
   17e7e:	dd67      	ble.n	17f50 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e80:	2a05      	cmp	r2, #5
   17e82:	dd67      	ble.n	17f54 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18e>
   17e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17e86:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17e88:	429a      	cmp	r2, r3
   17e8a:	d165      	bne.n	17f58 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x192>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17e8c:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   17e8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e90:	2a03      	cmp	r2, #3
   17e92:	dd63      	ble.n	17f5c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e94:	2a05      	cmp	r2, #5
   17e96:	dd63      	ble.n	17f60 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19a>
   17e98:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17e9a:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17e9c:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   17e9e:	4293      	cmp	r3, r2
   17ea0:	dc60      	bgt.n	17f64 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19e>
      return __a;
   17ea2:	ab2d      	add	r3, sp, #180	; 0xb4
   17ea4:	681b      	ldr	r3, [r3, #0]
   17ea6:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   17ea8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17eaa:	2b01      	cmp	r3, #1
   17eac:	dd5c      	ble.n	17f68 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17eae:	2b05      	cmp	r3, #5
   17eb0:	dd5c      	ble.n	17f6c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a6>
   17eb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17eb4:	685b      	ldr	r3, [r3, #4]
   17eb6:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   17eb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17eba:	2b02      	cmp	r3, #2
   17ebc:	dd59      	ble.n	17f72 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ebe:	2b05      	cmp	r3, #5
   17ec0:	dd59      	ble.n	17f76 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b0>
   17ec2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17ec4:	689b      	ldr	r3, [r3, #8]
   17ec6:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   17ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17eca:	2b01      	cmp	r3, #1
   17ecc:	dd56      	ble.n	17f7c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ece:	2b05      	cmp	r3, #5
   17ed0:	dd56      	ble.n	17f80 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ba>
   17ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17ed4:	685b      	ldr	r3, [r3, #4]
   17ed6:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   17ed8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17eda:	2b02      	cmp	r3, #2
   17edc:	dd53      	ble.n	17f86 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ede:	2b05      	cmp	r3, #5
   17ee0:	dd53      	ble.n	17f8a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c4>
   17ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17ee4:	689b      	ldr	r3, [r3, #8]
   17ee6:	930d      	str	r3, [sp, #52]	; 0x34
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   17ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17eea:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_width = params.stride_width;
   17eec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17eee:	930c      	str	r3, [sp, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
   17ef0:	f04f 0800 	mov.w	r8, #0
   17ef4:	9b06      	ldr	r3, [sp, #24]
   17ef6:	4598      	cmp	r8, r3
   17ef8:	f280 8123 	bge.w	18142 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17efc:	2700      	movs	r7, #0
   17efe:	46c6      	mov	lr, r8
   17f00:	46b8      	mov	r8, r7
   17f02:	9b08      	ldr	r3, [sp, #32]
   17f04:	4598      	cmp	r8, r3
   17f06:	f280 8119 	bge.w	1813c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x376>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17f0a:	2600      	movs	r6, #0
   17f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17f0e:	429e      	cmp	r6, r3
   17f10:	f280 8111 	bge.w	18136 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   17f14:	2200      	movs	r2, #0
   17f16:	e0bc      	b.n	18092 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2cc>
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   17f18:	f000 fdc4 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   17f1c:	f000 fdc2 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17f20:	f000 fdc0 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17f24:	f000 fdbe 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17f28:	f000 fdbc 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17f2e:	e786      	b.n	17e3e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x78>
    TFLITE_DCHECK_LT(i, size_);
   17f30:	f000 fdb8 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17f36:	e789      	b.n	17e4c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17f38:	f000 fdb4 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17f3c:	f000 fdb2 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f40:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17f42:	e78d      	b.n	17e60 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x9a>
	return __b;
   17f44:	ab2e      	add	r3, sp, #184	; 0xb8
   17f46:	e78f      	b.n	17e68 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xa2>
    TFLITE_DCHECK_LT(i, size_);
   17f48:	f000 fdac 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17f4e:	e794      	b.n	17e7a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
   17f50:	f000 fda8 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f54:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17f56:	e797      	b.n	17e88 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xc2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17f58:	f000 fda4 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17f5c:	f000 fda2 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f60:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17f62:	e79b      	b.n	17e9c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xd6>
   17f64:	ab2c      	add	r3, sp, #176	; 0xb0
   17f66:	e79d      	b.n	17ea4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xde>
    TFLITE_DCHECK_LT(i, size_);
   17f68:	f000 fd9c 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17f6e:	930a      	str	r3, [sp, #40]	; 0x28
   17f70:	e7a2      	b.n	17eb8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   17f72:	f000 fd97 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17f78:	9309      	str	r3, [sp, #36]	; 0x24
   17f7a:	e7a5      	b.n	17ec8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   17f7c:	f000 fd92 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f80:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17f82:	9308      	str	r3, [sp, #32]
   17f84:	e7a8      	b.n	17ed8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x112>
    TFLITE_DCHECK_LT(i, size_);
   17f86:	f000 fd8d 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17f8c:	930d      	str	r3, [sp, #52]	; 0x34
   17f8e:	e7ab      	b.n	17ee8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x122>
	return __b;
   17f90:	a82a      	add	r0, sp, #168	; 0xa8
   17f92:	e097      	b.n	180c4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2fe>
	return __b;
   17f94:	a929      	add	r1, sp, #164	; 0xa4
   17f96:	e09f      	b.n	180d8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x312>
	return __b;
   17f98:	a927      	add	r1, sp, #156	; 0x9c
   17f9a:	e0a7      	b.n	180ec <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x326>
	return __b;
   17f9c:	ab26      	add	r3, sp, #152	; 0x98
   17f9e:	e0ae      	b.n	180fe <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x338>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17fa0:	f000 fd80 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17fa4:	f000 fd7e 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17fa8:	f000 fd7c 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17fac:	f000 fd7a 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17fb0:	f000 fd78 	bl	18aa4 <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17fb4:	3101      	adds	r1, #1
   17fb6:	9803      	ldr	r0, [sp, #12]
   17fb8:	4288      	cmp	r0, r1
   17fba:	dd2f      	ble.n	1801c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17fbc:	9801      	ldr	r0, [sp, #4]
   17fbe:	9c02      	ldr	r4, [sp, #8]
   17fc0:	4284      	cmp	r4, r0
   17fc2:	ddf7      	ble.n	17fb4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ee>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   17fc4:	eb0c 0700 	add.w	r7, ip, r0
              const int in_y = in_y_origin + filter_y;
   17fc8:	eb09 0a01 	add.w	sl, r9, r1
  inline int32_t DimensionsCount() const { return size_; }
   17fcc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17fce:	2d04      	cmp	r5, #4
   17fd0:	d1e6      	bne.n	17fa0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1da>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17fd2:	f1be 0f00 	cmp.w	lr, #0
   17fd6:	dbe5      	blt.n	17fa4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
   17fd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   17fda:	45ae      	cmp	lr, r5
   17fdc:	dae2      	bge.n	17fa4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17fde:	f1ba 0f00 	cmp.w	sl, #0
   17fe2:	dbe1      	blt.n	17fa8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
   17fe4:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
   17fe8:	45da      	cmp	sl, fp
   17fea:	dadd      	bge.n	17fa8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17fec:	2f00      	cmp	r7, #0
   17fee:	dbdd      	blt.n	17fac <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
   17ff0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   17ff2:	42af      	cmp	r7, r5
   17ff4:	dada      	bge.n	17fac <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17ff6:	2a00      	cmp	r2, #0
   17ff8:	dbda      	blt.n	17fb0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
   17ffa:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   17ffc:	42a2      	cmp	r2, r4
   17ffe:	dad7      	bge.n	17fb0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   18000:	fb0b aa0e 	mla	sl, fp, lr, sl
   18004:	fb0a 7705 	mla	r7, sl, r5, r7
   18008:	fb07 2404 	mla	r4, r7, r4, r2
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1800c:	9d04      	ldr	r5, [sp, #16]
   1800e:	572d      	ldrsb	r5, [r5, r4]
              acc +=
   18010:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   18012:	442c      	add	r4, r5
   18014:	940e      	str	r4, [sp, #56]	; 0x38
              filter_count++;
   18016:	3301      	adds	r3, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   18018:	3001      	adds	r0, #1
   1801a:	e7d0      	b.n	17fbe <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f8>
            }
          }
          if (filter_count == 0) return false;
   1801c:	2b00      	cmp	r3, #0
   1801e:	f000 8090 	beq.w	18142 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   18022:	990e      	ldr	r1, [sp, #56]	; 0x38
   18024:	2900      	cmp	r1, #0
   18026:	dd6f      	ble.n	18108 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x342>
   18028:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   1802c:	eb01 0160 	add.w	r1, r1, r0, asr #1
   18030:	fb91 f3f3 	sdiv	r3, r1, r3
   18034:	930e      	str	r3, [sp, #56]	; 0x38
      if (__a < __b)
   18036:	9916      	ldr	r1, [sp, #88]	; 0x58
   18038:	428b      	cmp	r3, r1
   1803a:	db6c      	blt.n	18116 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x350>
      return __a;
   1803c:	ab0e      	add	r3, sp, #56	; 0x38
                        : (acc - filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
   1803e:	681b      	ldr	r3, [r3, #0]
   18040:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
   18042:	9917      	ldr	r1, [sp, #92]	; 0x5c
   18044:	428b      	cmp	r3, r1
   18046:	dc68      	bgt.n	1811a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x354>
      return __a;
   18048:	ab0e      	add	r3, sp, #56	; 0x38
          acc = std::min(acc, params.quantized_activation_max);
   1804a:	681c      	ldr	r4, [r3, #0]
   1804c:	940e      	str	r4, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
   1804e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18050:	2b04      	cmp	r3, #4
   18052:	d164      	bne.n	1811e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x358>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18054:	f1be 0f00 	cmp.w	lr, #0
   18058:	db63      	blt.n	18122 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
   1805a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1805c:	459e      	cmp	lr, r3
   1805e:	da60      	bge.n	18122 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18060:	f1b8 0f00 	cmp.w	r8, #0
   18064:	db5f      	blt.n	18126 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
   18066:	9822      	ldr	r0, [sp, #136]	; 0x88
   18068:	4580      	cmp	r8, r0
   1806a:	da5c      	bge.n	18126 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1806c:	2e00      	cmp	r6, #0
   1806e:	db5c      	blt.n	1812a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
   18070:	9923      	ldr	r1, [sp, #140]	; 0x8c
   18072:	428e      	cmp	r6, r1
   18074:	da59      	bge.n	1812a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   18076:	2a00      	cmp	r2, #0
   18078:	db59      	blt.n	1812e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
   1807a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1807c:	429a      	cmp	r2, r3
   1807e:	da56      	bge.n	1812e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   18080:	fb00 800e 	mla	r0, r0, lr, r8
   18084:	fb00 6101 	mla	r1, r0, r1, r6
   18088:	fb01 2303 	mla	r3, r1, r3, r2
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1808c:	9905      	ldr	r1, [sp, #20]
   1808e:	54cc      	strb	r4, [r1, r3]
        for (int channel = 0; channel < depth; ++channel) {
   18090:	3201      	adds	r2, #1
   18092:	9b07      	ldr	r3, [sp, #28]
   18094:	429a      	cmp	r2, r3
   18096:	da4c      	bge.n	18132 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x36c>
              (out_x * stride_width) - params.padding_values.width;
   18098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1809a:	fb06 f103 	mul.w	r1, r6, r3
   1809e:	f9bd 003e 	ldrsh.w	r0, [sp, #62]	; 0x3e
          const int in_x_origin =
   180a2:	eba1 0c00 	sub.w	ip, r1, r0
              (out_y * stride_height) - params.padding_values.height;
   180a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   180a8:	fb08 f403 	mul.w	r4, r8, r3
   180ac:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
          const int in_y_origin =
   180b0:	eba4 0903 	sub.w	r9, r4, r3
          const int filter_x_start = std::max(0, -in_x_origin);
   180b4:	2500      	movs	r5, #0
   180b6:	952b      	str	r5, [sp, #172]	; 0xac
   180b8:	1a41      	subs	r1, r0, r1
   180ba:	912a      	str	r1, [sp, #168]	; 0xa8
      if (__a < __b)
   180bc:	42a9      	cmp	r1, r5
   180be:	f73f af67 	bgt.w	17f90 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ca>
      return __a;
   180c2:	a82b      	add	r0, sp, #172	; 0xac
   180c4:	6800      	ldr	r0, [r0, #0]
   180c6:	9001      	str	r0, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   180c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   180ca:	4401      	add	r1, r0
   180cc:	9129      	str	r1, [sp, #164]	; 0xa4
      if (__b < __a)
   180ce:	9815      	ldr	r0, [sp, #84]	; 0x54
   180d0:	4281      	cmp	r1, r0
   180d2:	f6ff af5f 	blt.w	17f94 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ce>
      return __a;
   180d6:	a915      	add	r1, sp, #84	; 0x54
   180d8:	6809      	ldr	r1, [r1, #0]
   180da:	9102      	str	r1, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   180dc:	2100      	movs	r1, #0
   180de:	9128      	str	r1, [sp, #160]	; 0xa0
   180e0:	1b1b      	subs	r3, r3, r4
   180e2:	9327      	str	r3, [sp, #156]	; 0x9c
      if (__a < __b)
   180e4:	428b      	cmp	r3, r1
   180e6:	f73f af57 	bgt.w	17f98 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d2>
      return __a;
   180ea:	a928      	add	r1, sp, #160	; 0xa0
   180ec:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   180ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   180f0:	4403      	add	r3, r0
   180f2:	9326      	str	r3, [sp, #152]	; 0x98
      if (__b < __a)
   180f4:	9814      	ldr	r0, [sp, #80]	; 0x50
   180f6:	4283      	cmp	r3, r0
   180f8:	f6ff af50 	blt.w	17f9c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d6>
      return __a;
   180fc:	ab14      	add	r3, sp, #80	; 0x50
   180fe:	681b      	ldr	r3, [r3, #0]
   18100:	9303      	str	r3, [sp, #12]
          int32_t acc = 0;
   18102:	2300      	movs	r3, #0
   18104:	930e      	str	r3, [sp, #56]	; 0x38
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   18106:	e756      	b.n	17fb6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f0>
                        : (acc - filter_count / 2) / filter_count;
   18108:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   1810c:	eba1 0160 	sub.w	r1, r1, r0, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   18110:	fb91 f3f3 	sdiv	r3, r1, r3
   18114:	e78e      	b.n	18034 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x26e>
	return __b;
   18116:	ab16      	add	r3, sp, #88	; 0x58
   18118:	e791      	b.n	1803e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x278>
	return __b;
   1811a:	ab17      	add	r3, sp, #92	; 0x5c
   1811c:	e795      	b.n	1804a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x284>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1811e:	f000 fcc1 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18122:	f000 fcbf 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18126:	f000 fcbd 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1812a:	f000 fcbb 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1812e:	f000 fcb9 	bl	18aa4 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   18132:	3601      	adds	r6, #1
   18134:	e6ea      	b.n	17f0c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x146>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   18136:	f108 0801 	add.w	r8, r8, #1
   1813a:	e6e2      	b.n	17f02 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x13c>
  for (int batch = 0; batch < batches; ++batch) {
   1813c:	f10e 0801 	add.w	r8, lr, #1
   18140:	e6d8      	b.n	17ef4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x12e>
    if (size_ > kMaxSmallSize) {
   18142:	9b20      	ldr	r3, [sp, #128]	; 0x80
   18144:	2b05      	cmp	r3, #5
   18146:	dd03      	ble.n	18150 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
      delete[] dims_pointer_;
   18148:	9821      	ldr	r0, [sp, #132]	; 0x84
   1814a:	b108      	cbz	r0, 18150 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
   1814c:	f000 fc95 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   18150:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18152:	2b05      	cmp	r3, #5
   18154:	dd03      	ble.n	1815e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
      delete[] dims_pointer_;
   18156:	981b      	ldr	r0, [sp, #108]	; 0x6c
   18158:	b108      	cbz	r0, 1815e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
   1815a:	f000 fc8e 	bl	18a7a <_ZdaPv>
}
   1815e:	b031      	add	sp, #196	; 0xc4
   18160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018164 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   18164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18168:	b0b1      	sub	sp, #196	; 0xc4
   1816a:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   1816c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   1816e:	6891      	ldr	r1, [r2, #8]
   18170:	9111      	str	r1, [sp, #68]	; 0x44
  op_params.stride_width = params->stride_width;
   18172:	6851      	ldr	r1, [r2, #4]
   18174:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.filter_height = params->filter_height;
   18176:	6911      	ldr	r1, [r2, #16]
   18178:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_width = params->filter_width;
   1817a:	68d2      	ldr	r2, [r2, #12]
   1817c:	9214      	str	r2, [sp, #80]	; 0x50
  op_params.padding_values.height = data->padding.height;
   1817e:	685a      	ldr	r2, [r3, #4]
   18180:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  op_params.padding_values.width = data->padding.width;
   18184:	681a      	ldr	r2, [r3, #0]
   18186:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  op_params.quantized_activation_min = data->activation_min;
   1818a:	691a      	ldr	r2, [r3, #16]
   1818c:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.quantized_activation_max = data->activation_max;
   1818e:	695b      	ldr	r3, [r3, #20]
   18190:	9316      	str	r3, [sp, #88]	; 0x58

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
   18192:	4629      	mov	r1, r5
   18194:	a819      	add	r0, sp, #100	; 0x64
   18196:	f7ff f8b0 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   1819a:	4628      	mov	r0, r5
   1819c:	f7fd fef8 	bl	15f90 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   181a0:	4681      	mov	r9, r0
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
   181a2:	4621      	mov	r1, r4
   181a4:	a81f      	add	r0, sp, #124	; 0x7c
   181a6:	f7ff f8a8 	bl	172fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   181aa:	4620      	mov	r0, r4
   181ac:	f7fd fef6 	bl	15f9c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   181b0:	9000      	str	r0, [sp, #0]
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   181b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   181b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   181b6:	429a      	cmp	r2, r3
   181b8:	f300 8081 	bgt.w	182be <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15a>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   181bc:	f112 0f80 	cmn.w	r2, #128	; 0x80
   181c0:	db7f      	blt.n	182c2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15e>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   181c2:	2b7f      	cmp	r3, #127	; 0x7f
   181c4:	dc7f      	bgt.n	182c6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x162>
  inline int32_t DimensionsCount() const { return size_; }
   181c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   181c8:	2b04      	cmp	r3, #4
   181ca:	d17e      	bne.n	182ca <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x166>
   181cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   181ce:	2b04      	cmp	r3, #4
   181d0:	d17d      	bne.n	182ce <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16a>
    TFLITE_DCHECK_LT(i, size_);
   181d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   181d4:	2b00      	cmp	r3, #0
   181d6:	dd7c      	ble.n	182d2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   181d8:	2b05      	cmp	r3, #5
   181da:	dd7c      	ble.n	182d6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x172>
   181dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   181de:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   181e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   181e2:	2a00      	cmp	r2, #0
   181e4:	dd79      	ble.n	182da <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   181e6:	2a05      	cmp	r2, #5
   181e8:	dd79      	ble.n	182de <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17a>
   181ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
   181ec:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   181ee:	429a      	cmp	r2, r3
   181f0:	d177      	bne.n	182e2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   181f2:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   181f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   181f6:	2a00      	cmp	r2, #0
   181f8:	dd75      	ble.n	182e6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   181fa:	2a05      	cmp	r2, #5
   181fc:	dd75      	ble.n	182ea <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x186>
   181fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18200:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   18202:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   18204:	4293      	cmp	r3, r2
   18206:	dc72      	bgt.n	182ee <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18a>
      return __a;
   18208:	ab2f      	add	r3, sp, #188	; 0xbc
   1820a:	681b      	ldr	r3, [r3, #0]
   1820c:	9304      	str	r3, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   1820e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18210:	2b03      	cmp	r3, #3
   18212:	dd6e      	ble.n	182f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18214:	2b05      	cmp	r3, #5
   18216:	dd6e      	ble.n	182f6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x192>
   18218:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1821a:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   1821c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1821e:	2a03      	cmp	r2, #3
   18220:	dd6b      	ble.n	182fa <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18222:	2a05      	cmp	r2, #5
   18224:	dd6b      	ble.n	182fe <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19a>
   18226:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18228:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1822a:	429a      	cmp	r2, r3
   1822c:	d169      	bne.n	18302 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1822e:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   18230:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   18232:	2a03      	cmp	r2, #3
   18234:	dd67      	ble.n	18306 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18236:	2a05      	cmp	r2, #5
   18238:	dd67      	ble.n	1830a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a6>
   1823a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1823c:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1823e:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   18240:	4293      	cmp	r3, r2
   18242:	dc64      	bgt.n	1830e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
      return __a;
   18244:	ab2d      	add	r3, sp, #180	; 0xb4
   18246:	681b      	ldr	r3, [r3, #0]
   18248:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   1824a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1824c:	2b01      	cmp	r3, #1
   1824e:	dd60      	ble.n	18312 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18250:	2b05      	cmp	r3, #5
   18252:	dd60      	ble.n	18316 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b2>
   18254:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18256:	685b      	ldr	r3, [r3, #4]
   18258:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   1825a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1825c:	2b02      	cmp	r3, #2
   1825e:	dd5d      	ble.n	1831c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18260:	2b05      	cmp	r3, #5
   18262:	dd5d      	ble.n	18320 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1bc>
   18264:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18266:	689b      	ldr	r3, [r3, #8]
   18268:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
   1826a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1826c:	2b01      	cmp	r3, #1
   1826e:	dd5a      	ble.n	18326 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18270:	2b05      	cmp	r3, #5
   18272:	dd5a      	ble.n	1832a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c6>
   18274:	9b20      	ldr	r3, [sp, #128]	; 0x80
   18276:	685b      	ldr	r3, [r3, #4]
   18278:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   1827a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1827c:	2b02      	cmp	r3, #2
   1827e:	dd57      	ble.n	18330 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18280:	2b05      	cmp	r3, #5
   18282:	dd57      	ble.n	18334 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
   18284:	9b20      	ldr	r3, [sp, #128]	; 0x80
   18286:	689b      	ldr	r3, [r3, #8]
   18288:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   1828a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1828c:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   1828e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18290:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   18292:	f04f 0c00 	mov.w	ip, #0
   18296:	46c8      	mov	r8, r9
   18298:	46e1      	mov	r9, ip
   1829a:	9b04      	ldr	r3, [sp, #16]
   1829c:	4599      	cmp	r9, r3
   1829e:	f280 812b 	bge.w	184f8 <__data_size+0x19b>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   182a2:	2700      	movs	r7, #0
   182a4:	46c6      	mov	lr, r8
   182a6:	46b8      	mov	r8, r7
   182a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   182aa:	4598      	cmp	r8, r3
   182ac:	f280 8120 	bge.w	184f0 <__data_size+0x193>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   182b0:	2600      	movs	r6, #0
   182b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   182b4:	429e      	cmp	r6, r3
   182b6:	f280 8118 	bge.w	184ea <__data_size+0x18d>
        for (int channel = 0; channel < depth; ++channel) {
   182ba:	2300      	movs	r3, #0
   182bc:	e0c7      	b.n	1844e <__data_size+0xf1>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   182be:	f000 fbf1 	bl	18aa4 <abort>
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   182c2:	f000 fbef 	bl	18aa4 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   182c6:	f000 fbed 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   182ca:	f000 fbeb 	bl	18aa4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   182ce:	f000 fbe9 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   182d2:	f000 fbe7 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   182d8:	e782      	b.n	181e0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x7c>
    TFLITE_DCHECK_LT(i, size_);
   182da:	f000 fbe3 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182de:	9a20      	ldr	r2, [sp, #128]	; 0x80
   182e0:	e785      	b.n	181ee <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   182e2:	f000 fbdf 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   182e6:	f000 fbdd 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
   182ec:	e789      	b.n	18202 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x9e>
	return __b;
   182ee:	ab2e      	add	r3, sp, #184	; 0xb8
   182f0:	e78b      	b.n	1820a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   182f2:	f000 fbd7 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   182f8:	e790      	b.n	1821c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb8>
    TFLITE_DCHECK_LT(i, size_);
   182fa:	f000 fbd3 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182fe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   18300:	e793      	b.n	1822a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   18302:	f000 fbcf 	bl	18aa4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   18306:	f000 fbcd 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1830a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1830c:	e797      	b.n	1823e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xda>
   1830e:	ab2c      	add	r3, sp, #176	; 0xb0
   18310:	e799      	b.n	18246 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   18312:	f000 fbc7 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18318:	9306      	str	r3, [sp, #24]
   1831a:	e79e      	b.n	1825a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf6>
    TFLITE_DCHECK_LT(i, size_);
   1831c:	f000 fbc2 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18320:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18322:	9305      	str	r3, [sp, #20]
   18324:	e7a1      	b.n	1826a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x106>
    TFLITE_DCHECK_LT(i, size_);
   18326:	f000 fbbd 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1832a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1832c:	930b      	str	r3, [sp, #44]	; 0x2c
   1832e:	e7a4      	b.n	1827a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x116>
    TFLITE_DCHECK_LT(i, size_);
   18330:	f000 fbb8 	bl	18aa4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18334:	9b22      	ldr	r3, [sp, #136]	; 0x88
   18336:	930a      	str	r3, [sp, #40]	; 0x28
   18338:	e7a7      	b.n	1828a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x126>
	return __b;
   1833a:	aa2a      	add	r2, sp, #168	; 0xa8
   1833c:	e0a0      	b.n	18480 <__data_size+0x123>
	return __b;
   1833e:	aa29      	add	r2, sp, #164	; 0xa4
   18340:	e0a8      	b.n	18494 <__data_size+0x137>
	return __b;
   18342:	a927      	add	r1, sp, #156	; 0x9c
   18344:	e0b0      	b.n	184a8 <__data_size+0x14b>
	return __b;
   18346:	aa26      	add	r2, sp, #152	; 0x98
   18348:	e0b7      	b.n	184ba <__data_size+0x15d>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1834a:	f000 fbab 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1834e:	f000 fba9 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18352:	f000 fba7 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18356:	f000 fba5 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1835a:	f000 fba3 	bl	18aa4 <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   1835e:	f994 2000 	ldrsb.w	r2, [r4]
   18362:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   18366:	3001      	adds	r0, #1
   18368:	9a02      	ldr	r2, [sp, #8]
   1836a:	4282      	cmp	r2, r0
   1836c:	dd2d      	ble.n	183ca <__data_size+0x6d>
              const int in_x = in_x_origin + filter_x;
   1836e:	eb0c 0400 	add.w	r4, ip, r0
              const int in_y = in_y_origin + filter_y;
   18372:	eb0a 0701 	add.w	r7, sl, r1
  inline int32_t DimensionsCount() const { return size_; }
   18376:	9d19      	ldr	r5, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18378:	2d04      	cmp	r5, #4
   1837a:	d1e6      	bne.n	1834a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1837c:	f1b9 0f00 	cmp.w	r9, #0
   18380:	dbe5      	blt.n	1834e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
   18382:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   18384:	45a9      	cmp	r9, r5
   18386:	dae2      	bge.n	1834e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18388:	2f00      	cmp	r7, #0
   1838a:	dbe2      	blt.n	18352 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
   1838c:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   18390:	455f      	cmp	r7, fp
   18392:	dade      	bge.n	18352 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18394:	2c00      	cmp	r4, #0
   18396:	dbde      	blt.n	18356 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
   18398:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   1839a:	42ac      	cmp	r4, r5
   1839c:	dadb      	bge.n	18356 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1839e:	2b00      	cmp	r3, #0
   183a0:	dbdb      	blt.n	1835a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
   183a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   183a4:	4293      	cmp	r3, r2
   183a6:	dad8      	bge.n	1835a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   183a8:	fb0b 7709 	mla	r7, fp, r9, r7
   183ac:	fb07 4405 	mla	r4, r7, r5, r4
   183b0:	fb04 3202 	mla	r2, r4, r2, r3
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   183b4:	eb0e 0402 	add.w	r4, lr, r2
      if (__a < __b)
   183b8:	f99d 5037 	ldrsb.w	r5, [sp, #55]	; 0x37
   183bc:	f91e 2002 	ldrsb.w	r2, [lr, r2]
   183c0:	4295      	cmp	r5, r2
   183c2:	dbcc      	blt.n	1835e <__data_size+0x1>
      return __a;
   183c4:	f10d 0437 	add.w	r4, sp, #55	; 0x37
   183c8:	e7c9      	b.n	1835e <__data_size+0x1>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   183ca:	3101      	adds	r1, #1
   183cc:	9a03      	ldr	r2, [sp, #12]
   183ce:	428a      	cmp	r2, r1
   183d0:	dd01      	ble.n	183d6 <__data_size+0x79>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   183d2:	9801      	ldr	r0, [sp, #4]
   183d4:	e7c8      	b.n	18368 <__data_size+0xb>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
   183d6:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
   183da:	f88d 2097 	strb.w	r2, [sp, #151]	; 0x97
      if (__a < __b)
   183de:	f99d 1037 	ldrsb.w	r1, [sp, #55]	; 0x37
   183e2:	428a      	cmp	r2, r1
   183e4:	dc6f      	bgt.n	184c6 <__data_size+0x169>
      return __a;
   183e6:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   183ea:	f992 1000 	ldrsb.w	r1, [r2]
   183ee:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
          max = std::min<int8_t>(max, params.quantized_activation_max);
   183f2:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   183f6:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
      if (__b < __a)
   183fa:	4291      	cmp	r1, r2
   183fc:	dc66      	bgt.n	184cc <__data_size+0x16f>
      return __a;
   183fe:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   18402:	f992 4000 	ldrsb.w	r4, [r2]
   18406:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  inline int32_t DimensionsCount() const { return size_; }
   1840a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1840c:	2a04      	cmp	r2, #4
   1840e:	d160      	bne.n	184d2 <__data_size+0x175>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18410:	f1b9 0f00 	cmp.w	r9, #0
   18414:	db5f      	blt.n	184d6 <__data_size+0x179>
   18416:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18418:	4591      	cmp	r9, r2
   1841a:	da5c      	bge.n	184d6 <__data_size+0x179>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1841c:	f1b8 0f00 	cmp.w	r8, #0
   18420:	db5b      	blt.n	184da <__data_size+0x17d>
   18422:	9821      	ldr	r0, [sp, #132]	; 0x84
   18424:	4580      	cmp	r8, r0
   18426:	da58      	bge.n	184da <__data_size+0x17d>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18428:	2e00      	cmp	r6, #0
   1842a:	db58      	blt.n	184de <__data_size+0x181>
   1842c:	9922      	ldr	r1, [sp, #136]	; 0x88
   1842e:	428e      	cmp	r6, r1
   18430:	da55      	bge.n	184de <__data_size+0x181>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   18432:	2b00      	cmp	r3, #0
   18434:	db55      	blt.n	184e2 <__data_size+0x185>
   18436:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   18438:	4293      	cmp	r3, r2
   1843a:	da52      	bge.n	184e2 <__data_size+0x185>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1843c:	fb00 8009 	mla	r0, r0, r9, r8
   18440:	fb00 6101 	mla	r1, r0, r1, r6
   18444:	fb01 3202 	mla	r2, r1, r2, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   18448:	9900      	ldr	r1, [sp, #0]
   1844a:	548c      	strb	r4, [r1, r2]
        for (int channel = 0; channel < depth; ++channel) {
   1844c:	3301      	adds	r3, #1
   1844e:	9a07      	ldr	r2, [sp, #28]
   18450:	4293      	cmp	r3, r2
   18452:	da48      	bge.n	184e6 <__data_size+0x189>
              (out_x * stride_width) - params.padding_values.width;
   18454:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18456:	fb06 f002 	mul.w	r0, r6, r2
   1845a:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
          const int in_x_origin =
   1845e:	eba0 0c02 	sub.w	ip, r0, r2
              (out_y * stride_height) - params.padding_values.height;
   18462:	9908      	ldr	r1, [sp, #32]
   18464:	fb08 f401 	mul.w	r4, r8, r1
   18468:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
          const int in_y_origin =
   1846c:	eba4 0a01 	sub.w	sl, r4, r1
          const int filter_x_start = std::max(0, -in_x_origin);
   18470:	2500      	movs	r5, #0
   18472:	952b      	str	r5, [sp, #172]	; 0xac
   18474:	1a10      	subs	r0, r2, r0
   18476:	902a      	str	r0, [sp, #168]	; 0xa8
      if (__a < __b)
   18478:	42a8      	cmp	r0, r5
   1847a:	f73f af5e 	bgt.w	1833a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d6>
      return __a;
   1847e:	aa2b      	add	r2, sp, #172	; 0xac
   18480:	6812      	ldr	r2, [r2, #0]
   18482:	9201      	str	r2, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   18484:	9a05      	ldr	r2, [sp, #20]
   18486:	4410      	add	r0, r2
   18488:	9029      	str	r0, [sp, #164]	; 0xa4
      if (__b < __a)
   1848a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1848c:	4290      	cmp	r0, r2
   1848e:	f6ff af56 	blt.w	1833e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1da>
      return __a;
   18492:	aa14      	add	r2, sp, #80	; 0x50
   18494:	6812      	ldr	r2, [r2, #0]
   18496:	9202      	str	r2, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   18498:	2200      	movs	r2, #0
   1849a:	9228      	str	r2, [sp, #160]	; 0xa0
   1849c:	1b0a      	subs	r2, r1, r4
   1849e:	9227      	str	r2, [sp, #156]	; 0x9c
      if (__a < __b)
   184a0:	2a00      	cmp	r2, #0
   184a2:	f73f af4e 	bgt.w	18342 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1de>
      return __a;
   184a6:	a928      	add	r1, sp, #160	; 0xa0
   184a8:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   184aa:	9806      	ldr	r0, [sp, #24]
   184ac:	4402      	add	r2, r0
   184ae:	9226      	str	r2, [sp, #152]	; 0x98
      if (__b < __a)
   184b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   184b2:	4282      	cmp	r2, r0
   184b4:	f6ff af47 	blt.w	18346 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e2>
      return __a;
   184b8:	aa13      	add	r2, sp, #76	; 0x4c
   184ba:	6812      	ldr	r2, [r2, #0]
   184bc:	9203      	str	r2, [sp, #12]
          int8_t max = std::numeric_limits<int8_t>::lowest();
   184be:	2280      	movs	r2, #128	; 0x80
   184c0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   184c4:	e782      	b.n	183cc <__data_size+0x6f>
	return __b;
   184c6:	f10d 0297 	add.w	r2, sp, #151	; 0x97
   184ca:	e78e      	b.n	183ea <__data_size+0x8d>
	return __b;
   184cc:	f10d 0296 	add.w	r2, sp, #150	; 0x96
   184d0:	e797      	b.n	18402 <__data_size+0xa5>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   184d2:	f000 fae7 	bl	18aa4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   184d6:	f000 fae5 	bl	18aa4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   184da:	f000 fae3 	bl	18aa4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   184de:	f000 fae1 	bl	18aa4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   184e2:	f000 fadf 	bl	18aa4 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   184e6:	3601      	adds	r6, #1
   184e8:	e6e3      	b.n	182b2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   184ea:	f108 0801 	add.w	r8, r8, #1
   184ee:	e6db      	b.n	182a8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x144>
   184f0:	46f0      	mov	r8, lr
  for (int batch = 0; batch < batches; ++batch) {
   184f2:	f109 0901 	add.w	r9, r9, #1
   184f6:	e6d0      	b.n	1829a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
    if (size_ > kMaxSmallSize) {
   184f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   184fa:	2b05      	cmp	r3, #5
   184fc:	dd03      	ble.n	18506 <__data_size+0x1a9>
      delete[] dims_pointer_;
   184fe:	9820      	ldr	r0, [sp, #128]	; 0x80
   18500:	b108      	cbz	r0, 18506 <__data_size+0x1a9>
   18502:	f000 faba 	bl	18a7a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   18506:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18508:	2b05      	cmp	r3, #5
   1850a:	dd03      	ble.n	18514 <__data_size+0x1b7>
      delete[] dims_pointer_;
   1850c:	981a      	ldr	r0, [sp, #104]	; 0x68
   1850e:	b108      	cbz	r0, 18514 <__data_size+0x1b7>
   18510:	f000 fab3 	bl	18a7a <_ZdaPv>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
   18514:	b031      	add	sp, #196	; 0xc4
   18516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001851a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1851a:	b570      	push	{r4, r5, r6, lr}
   1851c:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
   1851e:	b1c0      	cbz	r0, 18552 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   18520:	460d      	mov	r5, r1
   18522:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   18524:	b1b9      	cbz	r1, 18556 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   18526:	6d43      	ldr	r3, [r0, #84]	; 0x54
   18528:	680a      	ldr	r2, [r1, #0]
   1852a:	6851      	ldr	r1, [r2, #4]
   1852c:	4798      	blx	r3
   1852e:	4604      	mov	r4, r0
  TFLITE_DCHECK(context != nullptr);
   18530:	b19e      	cbz	r6, 1855a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK(node != nullptr);
   18532:	b1a5      	cbz	r5, 1855e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x44>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   18534:	6d73      	ldr	r3, [r6, #84]	; 0x54
   18536:	686a      	ldr	r2, [r5, #4]
   18538:	6851      	ldr	r1, [r2, #4]
   1853a:	4630      	mov	r0, r6
   1853c:	4798      	blx	r3
   1853e:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   18540:	a901      	add	r1, sp, #4
   18542:	7a20      	ldrb	r0, [r4, #8]
   18544:	f7fc feda 	bl	152fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   18548:	4606      	mov	r6, r0
   1854a:	b150      	cbz	r0, 18562 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   1854c:	4630      	mov	r0, r6
   1854e:	b002      	add	sp, #8
   18550:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
   18552:	f000 faa7 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
   18556:	f000 faa5 	bl	18aa4 <abort>
  TFLITE_DCHECK(context != nullptr);
   1855a:	f000 faa3 	bl	18aa4 <abort>
  TFLITE_DCHECK(node != nullptr);
   1855e:	f000 faa1 	bl	18aa4 <abort>
  input_bytes *= ElementCount(*input->dims);
   18562:	6860      	ldr	r0, [r4, #4]
   18564:	f7fc ffd6 	bl	15514 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   18568:	9b01      	ldr	r3, [sp, #4]
   1856a:	fb00 f003 	mul.w	r0, r0, r3
   1856e:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   18570:	6822      	ldr	r2, [r4, #0]
   18572:	682b      	ldr	r3, [r5, #0]
   18574:	429a      	cmp	r2, r3
   18576:	d0e9      	beq.n	1854c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
   18578:	2300      	movs	r3, #0
   1857a:	e004      	b.n	18586 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
      output->data.raw[i] = input->data.raw[i];
   1857c:	6821      	ldr	r1, [r4, #0]
   1857e:	682a      	ldr	r2, [r5, #0]
   18580:	5cc9      	ldrb	r1, [r1, r3]
   18582:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   18584:	3301      	adds	r3, #1
   18586:	9a01      	ldr	r2, [sp, #4]
   18588:	429a      	cmp	r2, r3
   1858a:	d8f7      	bhi.n	1857c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x62>
   1858c:	e7de      	b.n	1854c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>

0001858e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   1858e:	b508      	push	{r3, lr}
   18590:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   18594:	f7e8 fab4 	bl	b00 <__addsf3>
   18598:	4601      	mov	r1, r0
   1859a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   1859e:	f7e8 fc6b 	bl	e78 <__aeabi_fdiv>
   185a2:	bd08      	pop	{r3, pc}

000185a4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   185a4:	b508      	push	{r3, lr}
   185a6:	f7fa f8e9 	bl	1277c <expf>
   185aa:	bd08      	pop	{r3, pc}

000185ac <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   185ac:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   185ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   185b0:	b113      	cbz	r3, 185b8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   185b2:	2138      	movs	r1, #56	; 0x38
   185b4:	4798      	blx	r3
}
   185b6:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   185b8:	f000 fa74 	bl	18aa4 <abort>

000185bc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   185bc:	b148      	cbz	r0, 185d2 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   185be:	68c3      	ldr	r3, [r0, #12]
   185c0:	8818      	ldrh	r0, [r3, #0]
   185c2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   185c6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   185ca:	bf14      	ite	ne
   185cc:	2000      	movne	r0, #0
   185ce:	2001      	moveq	r0, #1
   185d0:	4770      	bx	lr
		return false;
   185d2:	2000      	movs	r0, #0
}
   185d4:	4770      	bx	lr

000185d6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   185d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185d8:	4605      	mov	r5, r0
   185da:	460e      	mov	r6, r1
	__asm__ volatile(
   185dc:	f04f 0320 	mov.w	r3, #32
   185e0:	f3ef 8711 	mrs	r7, BASEPRI
   185e4:	f383 8812 	msr	BASEPRI_MAX, r3
   185e8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   185ec:	f7f9 fcf4 	bl	11fd8 <z_impl_z_current_get>
   185f0:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   185f2:	4631      	mov	r1, r6
   185f4:	4628      	mov	r0, r5
   185f6:	f7fc fe00 	bl	151fa <k_sys_fatal_error_handler>
	__asm__ volatile(
   185fa:	f387 8811 	msr	BASEPRI, r7
   185fe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   18602:	4620      	mov	r0, r4
   18604:	f7ec f8cc 	bl	47a0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   18608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001860a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1860a:	6902      	ldr	r2, [r0, #16]
   1860c:	6943      	ldr	r3, [r0, #20]
   1860e:	431a      	orrs	r2, r3
   18610:	f012 0203 	ands.w	r2, r2, #3
   18614:	d10d      	bne.n	18632 <create_free_list+0x28>
	slab->free_list = NULL;
   18616:	2100      	movs	r1, #0
   18618:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1861a:	e005      	b.n	18628 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   1861c:	6981      	ldr	r1, [r0, #24]
   1861e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   18620:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   18622:	6901      	ldr	r1, [r0, #16]
   18624:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   18626:	3201      	adds	r2, #1
   18628:	68c1      	ldr	r1, [r0, #12]
   1862a:	4291      	cmp	r1, r2
   1862c:	d8f6      	bhi.n	1861c <create_free_list+0x12>
	return 0;
   1862e:	2000      	movs	r0, #0
   18630:	4770      	bx	lr
		return -EINVAL;
   18632:	f06f 0015 	mvn.w	r0, #21
}
   18636:	4770      	bx	lr

00018638 <k_mem_slab_init>:
{
   18638:	b510      	push	{r4, lr}
   1863a:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   1863c:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   1863e:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   18640:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   18642:	2300      	movs	r3, #0
   18644:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   18646:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
   18648:	f7ff ffdf 	bl	1860a <create_free_list>
	if (rc < 0) {
   1864c:	2800      	cmp	r0, #0
   1864e:	db01      	blt.n	18654 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   18650:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   18652:	6064      	str	r4, [r4, #4]
}
   18654:	bd10      	pop	{r4, pc}

00018656 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18658:	4604      	mov	r4, r0
   1865a:	460d      	mov	r5, r1
	__asm__ volatile(
   1865c:	f04f 0320 	mov.w	r3, #32
   18660:	f3ef 8611 	mrs	r6, BASEPRI
   18664:	f383 8812 	msr	BASEPRI_MAX, r3
   18668:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1866c:	6983      	ldr	r3, [r0, #24]
   1866e:	b163      	cbz	r3, 1868a <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   18670:	682b      	ldr	r3, [r5, #0]
   18672:	69a2      	ldr	r2, [r4, #24]
   18674:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   18676:	682b      	ldr	r3, [r5, #0]
   18678:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1867a:	69e3      	ldr	r3, [r4, #28]
   1867c:	3b01      	subs	r3, #1
   1867e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18680:	f386 8811 	msr	BASEPRI, r6
   18684:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   18688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1868a:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1868e:	f000 f93a 	bl	18906 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   18692:	2800      	cmp	r0, #0
   18694:	d0ec      	beq.n	18670 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18696:	682a      	ldr	r2, [r5, #0]
   18698:	2100      	movs	r1, #0
   1869a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1869e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   186a0:	f000 f896 	bl	187d0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   186a4:	4631      	mov	r1, r6
   186a6:	4638      	mov	r0, r7
   186a8:	f7f9 f93a 	bl	11920 <z_reschedule>
			return;
   186ac:	e7ec      	b.n	18688 <k_mem_slab_free+0x32>

000186ae <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   186ae:	3207      	adds	r2, #7
   186b0:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   186b4:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   186b8:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   186bc:	2300      	movs	r3, #0
   186be:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   186c2:	1888      	adds	r0, r1, r2
   186c4:	4770      	bx	lr

000186c6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   186c6:	f3ef 8005 	mrs	r0, IPSR
}
   186ca:	3800      	subs	r0, #0
   186cc:	bf18      	it	ne
   186ce:	2001      	movne	r0, #1
   186d0:	4770      	bx	lr

000186d2 <z_impl_k_thread_start>:
{
   186d2:	b508      	push	{r3, lr}
	z_sched_start(thread);
   186d4:	f7f9 fa4e 	bl	11b74 <z_sched_start>
}
   186d8:	bd08      	pop	{r3, pc}

000186da <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   186da:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   186dc:	2400      	movs	r4, #0
   186de:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   186e0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   186e2:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   186e4:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   186e6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   186e8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   186ea:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   186ec:	bc10      	pop	{r4}
   186ee:	4770      	bx	lr

000186f0 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   186f0:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   186f2:	f7eb fbeb 	bl	3ecc <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   186f6:	f7fc fd09 	bl	1510c <sys_clock_idle_exit>
}
   186fa:	bd08      	pop	{r3, pc}

000186fc <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   186fc:	b508      	push	{r3, lr}
	__asm__ volatile(
   186fe:	f04f 0220 	mov.w	r2, #32
   18702:	f3ef 8311 	mrs	r3, BASEPRI
   18706:	f382 8812 	msr	BASEPRI_MAX, r2
   1870a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   1870e:	f7f8 ff7b 	bl	11608 <pm_save_idle>
   18712:	e7f4      	b.n	186fe <idle+0x2>

00018714 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   18714:	4288      	cmp	r0, r1
   18716:	da00      	bge.n	1871a <new_prio_for_inheritance+0x6>
   18718:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1871a:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1871e:	db01      	blt.n	18724 <new_prio_for_inheritance+0x10>
   18720:	4608      	mov	r0, r1
   18722:	4770      	bx	lr
   18724:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   18728:	4770      	bx	lr

0001872a <adjust_owner_prio>:
{
   1872a:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1872c:	6880      	ldr	r0, [r0, #8]
   1872e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18732:	428b      	cmp	r3, r1
   18734:	d101      	bne.n	1873a <adjust_owner_prio+0x10>
	return false;
   18736:	2000      	movs	r0, #0
}
   18738:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1873a:	f7f9 fa69 	bl	11c10 <z_set_prio>
   1873e:	e7fb      	b.n	18738 <adjust_owner_prio+0xe>

00018740 <z_impl_k_mutex_init>:
{
   18740:	4603      	mov	r3, r0
	mutex->owner = NULL;
   18742:	2000      	movs	r0, #0
   18744:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   18746:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   18748:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1874a:	605b      	str	r3, [r3, #4]
}
   1874c:	4770      	bx	lr

0001874e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1874e:	b13a      	cbz	r2, 18760 <z_impl_k_sem_init+0x12>
   18750:	428a      	cmp	r2, r1
   18752:	d308      	bcc.n	18766 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   18754:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   18756:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   18758:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1875a:	6040      	str	r0, [r0, #4]
	return 0;
   1875c:	2000      	movs	r0, #0
   1875e:	4770      	bx	lr
		return -EINVAL;
   18760:	f06f 0015 	mvn.w	r0, #21
   18764:	4770      	bx	lr
   18766:	f06f 0015 	mvn.w	r0, #21
}
   1876a:	4770      	bx	lr

0001876c <thread_active_elsewhere>:
}
   1876c:	2000      	movs	r0, #0
   1876e:	4770      	bx	lr

00018770 <pended_on_thread>:
}
   18770:	6880      	ldr	r0, [r0, #8]
   18772:	4770      	bx	lr

00018774 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   18774:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18778:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1877c:	4283      	cmp	r3, r0
   1877e:	d001      	beq.n	18784 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   18780:	1ac0      	subs	r0, r0, r3
   18782:	4770      	bx	lr
	return 0;
   18784:	2000      	movs	r0, #0
}
   18786:	4770      	bx	lr

00018788 <z_reschedule_irqlock>:
{
   18788:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1878a:	4603      	mov	r3, r0
   1878c:	b920      	cbnz	r0, 18798 <z_reschedule_irqlock+0x10>
   1878e:	f3ef 8205 	mrs	r2, IPSR
   18792:	b942      	cbnz	r2, 187a6 <z_reschedule_irqlock+0x1e>
   18794:	2201      	movs	r2, #1
   18796:	e000      	b.n	1879a <z_reschedule_irqlock+0x12>
   18798:	2200      	movs	r2, #0
	if (resched(key)) {
   1879a:	b932      	cbnz	r2, 187aa <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   1879c:	f383 8811 	msr	BASEPRI, r3
   187a0:	f3bf 8f6f 	isb	sy
}
   187a4:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   187a6:	2200      	movs	r2, #0
   187a8:	e7f7      	b.n	1879a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   187aa:	4618      	mov	r0, r3
   187ac:	f7eb fd8e 	bl	42cc <arch_swap>
	return ret;
   187b0:	e7f8      	b.n	187a4 <z_reschedule_irqlock+0x1c>

000187b2 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   187b2:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   187b4:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   187b6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   187b8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   187ba:	2300      	movs	r3, #0
   187bc:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   187be:	604b      	str	r3, [r1, #4]
}
   187c0:	4770      	bx	lr

000187c2 <z_priq_dumb_best>:
{
   187c2:	4603      	mov	r3, r0
	return list->head == list;
   187c4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   187c6:	4283      	cmp	r3, r0
   187c8:	d000      	beq.n	187cc <z_priq_dumb_best+0xa>
}
   187ca:	4770      	bx	lr
	struct k_thread *thread = NULL;
   187cc:	2000      	movs	r0, #0
	return thread;
   187ce:	e7fc      	b.n	187ca <z_priq_dumb_best+0x8>

000187d0 <z_ready_thread>:
{
   187d0:	b538      	push	{r3, r4, r5, lr}
   187d2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   187d4:	2300      	movs	r3, #0
	__asm__ volatile(
   187d6:	f04f 0220 	mov.w	r2, #32
   187da:	f3ef 8511 	mrs	r5, BASEPRI
   187de:	f382 8812 	msr	BASEPRI_MAX, r2
   187e2:	f3bf 8f6f 	isb	sy
   187e6:	e007      	b.n	187f8 <z_ready_thread+0x28>
			ready_thread(thread);
   187e8:	4620      	mov	r0, r4
   187ea:	f7f9 f983 	bl	11af4 <ready_thread>
	__asm__ volatile(
   187ee:	f385 8811 	msr	BASEPRI, r5
   187f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   187f6:	2301      	movs	r3, #1
   187f8:	b92b      	cbnz	r3, 18806 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   187fa:	4620      	mov	r0, r4
   187fc:	f7ff ffb6 	bl	1876c <thread_active_elsewhere>
   18800:	2800      	cmp	r0, #0
   18802:	d1f4      	bne.n	187ee <z_ready_thread+0x1e>
   18804:	e7f0      	b.n	187e8 <z_ready_thread+0x18>
}
   18806:	bd38      	pop	{r3, r4, r5, pc}

00018808 <z_thread_timeout>:
{
   18808:	b570      	push	{r4, r5, r6, lr}
   1880a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1880c:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   18810:	2300      	movs	r3, #0
	__asm__ volatile(
   18812:	f04f 0220 	mov.w	r2, #32
   18816:	f3ef 8611 	mrs	r6, BASEPRI
   1881a:	f382 8812 	msr	BASEPRI_MAX, r2
   1881e:	f3bf 8f6f 	isb	sy
   18822:	e019      	b.n	18858 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   18824:	4628      	mov	r0, r5
   18826:	f7ff ffa3 	bl	18770 <pended_on_thread>
   1882a:	4629      	mov	r1, r5
   1882c:	f7ff ffc1 	bl	187b2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18830:	7b6b      	ldrb	r3, [r5, #13]
   18832:	f023 0302 	bic.w	r3, r3, #2
   18836:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   18838:	2300      	movs	r3, #0
   1883a:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1883c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18840:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   18844:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   18848:	4628      	mov	r0, r5
   1884a:	f7f9 f953 	bl	11af4 <ready_thread>
	__asm__ volatile(
   1884e:	f386 8811 	msr	BASEPRI, r6
   18852:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18856:	2301      	movs	r3, #1
   18858:	b94b      	cbnz	r3, 1886e <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1885a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1885e:	f013 0f28 	tst.w	r3, #40	; 0x28
   18862:	d1f4      	bne.n	1884e <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   18864:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18868:	2b00      	cmp	r3, #0
   1886a:	d1db      	bne.n	18824 <z_thread_timeout+0x1c>
   1886c:	e7e6      	b.n	1883c <z_thread_timeout+0x34>
}
   1886e:	bd70      	pop	{r4, r5, r6, pc}

00018870 <add_to_waitq_locked>:
{
   18870:	b570      	push	{r4, r5, r6, lr}
   18872:	4605      	mov	r5, r0
   18874:	460e      	mov	r6, r1
	unready_thread(thread);
   18876:	f7f9 f99b 	bl	11bb0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1887a:	7b6b      	ldrb	r3, [r5, #13]
   1887c:	f043 0302 	orr.w	r3, r3, #2
   18880:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   18882:	b1b6      	cbz	r6, 188b2 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   18884:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   18886:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18888:	42a6      	cmp	r6, r4
   1888a:	d019      	beq.n	188c0 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1888c:	b164      	cbz	r4, 188a8 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1888e:	4621      	mov	r1, r4
   18890:	4628      	mov	r0, r5
   18892:	f7ff ff6f 	bl	18774 <z_sched_prio_cmp>
   18896:	2800      	cmp	r0, #0
   18898:	dc0c      	bgt.n	188b4 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1889a:	b12c      	cbz	r4, 188a8 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   1889c:	6873      	ldr	r3, [r6, #4]
   1889e:	429c      	cmp	r4, r3
   188a0:	d002      	beq.n	188a8 <add_to_waitq_locked+0x38>
   188a2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   188a4:	2c00      	cmp	r4, #0
   188a6:	d1f1      	bne.n	1888c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   188a8:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   188aa:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   188ac:	606b      	str	r3, [r5, #4]
	tail->next = node;
   188ae:	601d      	str	r5, [r3, #0]
	list->tail = node;
   188b0:	6075      	str	r5, [r6, #4]
}
   188b2:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   188b4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   188b6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   188b8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   188ba:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   188bc:	6065      	str	r5, [r4, #4]
}
   188be:	e7f8      	b.n	188b2 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   188c0:	2400      	movs	r4, #0
   188c2:	e7e3      	b.n	1888c <add_to_waitq_locked+0x1c>

000188c4 <pend>:
{
   188c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   188c8:	4605      	mov	r5, r0
   188ca:	460f      	mov	r7, r1
   188cc:	4691      	mov	r9, r2
   188ce:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   188d0:	2400      	movs	r4, #0
	__asm__ volatile(
   188d2:	f04f 0320 	mov.w	r3, #32
   188d6:	f3ef 8611 	mrs	r6, BASEPRI
   188da:	f383 8812 	msr	BASEPRI_MAX, r3
   188de:	f3bf 8f6f 	isb	sy
   188e2:	b94c      	cbnz	r4, 188f8 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   188e4:	4639      	mov	r1, r7
   188e6:	4628      	mov	r0, r5
   188e8:	f7ff ffc2 	bl	18870 <add_to_waitq_locked>
	__asm__ volatile(
   188ec:	f386 8811 	msr	BASEPRI, r6
   188f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   188f4:	2401      	movs	r4, #1
   188f6:	e7f4      	b.n	188e2 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   188f8:	464a      	mov	r2, r9
   188fa:	4643      	mov	r3, r8
   188fc:	4628      	mov	r0, r5
   188fe:	f7f8 ffad 	bl	1185c <add_thread_timeout>
}
   18902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018906 <z_unpend_first_thread>:
{
   18906:	b570      	push	{r4, r5, r6, lr}
   18908:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1890a:	2300      	movs	r3, #0
	__asm__ volatile(
   1890c:	f04f 0220 	mov.w	r2, #32
   18910:	f3ef 8511 	mrs	r5, BASEPRI
   18914:	f382 8812 	msr	BASEPRI_MAX, r2
   18918:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1891c:	461c      	mov	r4, r3
   1891e:	e013      	b.n	18948 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   18920:	f7ff ff26 	bl	18770 <pended_on_thread>
   18924:	4621      	mov	r1, r4
   18926:	f7ff ff44 	bl	187b2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1892a:	7b63      	ldrb	r3, [r4, #13]
   1892c:	f023 0302 	bic.w	r3, r3, #2
   18930:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   18932:	2300      	movs	r3, #0
   18934:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   18936:	f104 0018 	add.w	r0, r4, #24
   1893a:	f000 f826 	bl	1898a <z_abort_timeout>
	__asm__ volatile(
   1893e:	f385 8811 	msr	BASEPRI, r5
   18942:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18946:	2301      	movs	r3, #1
   18948:	b933      	cbnz	r3, 18958 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   1894a:	4630      	mov	r0, r6
   1894c:	f7ff ff39 	bl	187c2 <z_priq_dumb_best>
		if (thread != NULL) {
   18950:	4604      	mov	r4, r0
   18952:	2800      	cmp	r0, #0
   18954:	d1e4      	bne.n	18920 <z_unpend_first_thread+0x1a>
   18956:	e7f2      	b.n	1893e <z_unpend_first_thread+0x38>
}
   18958:	4620      	mov	r0, r4
   1895a:	bd70      	pop	{r4, r5, r6, pc}

0001895c <remove_timeout>:
{
   1895c:	b538      	push	{r3, r4, r5, lr}
   1895e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   18960:	f7f9 fb8c 	bl	1207c <next>
   18964:	b148      	cbz	r0, 1897a <remove_timeout+0x1e>
   18966:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   18968:	6920      	ldr	r0, [r4, #16]
   1896a:	6965      	ldr	r5, [r4, #20]
   1896c:	6913      	ldr	r3, [r2, #16]
   1896e:	6951      	ldr	r1, [r2, #20]
   18970:	181b      	adds	r3, r3, r0
   18972:	eb45 0101 	adc.w	r1, r5, r1
   18976:	6113      	str	r3, [r2, #16]
   18978:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1897a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1897c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1897e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18980:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18982:	2300      	movs	r3, #0
   18984:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   18986:	6063      	str	r3, [r4, #4]
}
   18988:	bd38      	pop	{r3, r4, r5, pc}

0001898a <z_abort_timeout>:
{
   1898a:	b570      	push	{r4, r5, r6, lr}
   1898c:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1898e:	2300      	movs	r3, #0
	__asm__ volatile(
   18990:	f04f 0220 	mov.w	r2, #32
   18994:	f3ef 8611 	mrs	r6, BASEPRI
   18998:	f382 8812 	msr	BASEPRI_MAX, r2
   1899c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   189a0:	f06f 0015 	mvn.w	r0, #21
   189a4:	e008      	b.n	189b8 <z_abort_timeout+0x2e>
			remove_timeout(to);
   189a6:	4620      	mov	r0, r4
   189a8:	f7ff ffd8 	bl	1895c <remove_timeout>
			ret = 0;
   189ac:	4628      	mov	r0, r5
	__asm__ volatile(
   189ae:	f386 8811 	msr	BASEPRI, r6
   189b2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   189b6:	2301      	movs	r3, #1
   189b8:	461d      	mov	r5, r3
   189ba:	b91b      	cbnz	r3, 189c4 <z_abort_timeout+0x3a>
	return node->next != NULL;
   189bc:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   189be:	2b00      	cmp	r3, #0
   189c0:	d1f1      	bne.n	189a6 <z_abort_timeout+0x1c>
   189c2:	e7f4      	b.n	189ae <z_abort_timeout+0x24>
}
   189c4:	bd70      	pop	{r4, r5, r6, pc}

000189c6 <z_get_next_timeout_expiry>:
{
   189c6:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   189c8:	2300      	movs	r3, #0
	__asm__ volatile(
   189ca:	f04f 0220 	mov.w	r2, #32
   189ce:	f3ef 8411 	mrs	r4, BASEPRI
   189d2:	f382 8812 	msr	BASEPRI_MAX, r2
   189d6:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   189da:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   189de:	b93b      	cbnz	r3, 189f0 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   189e0:	f7f9 fb64 	bl	120ac <next_timeout>
	__asm__ volatile(
   189e4:	f384 8811 	msr	BASEPRI, r4
   189e8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   189ec:	2301      	movs	r3, #1
   189ee:	e7f6      	b.n	189de <z_get_next_timeout_expiry+0x18>
}
   189f0:	bd10      	pop	{r4, pc}

000189f2 <z_set_timeout_expiry>:
{
   189f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189f4:	4606      	mov	r6, r0
   189f6:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   189f8:	2300      	movs	r3, #0
	__asm__ volatile(
   189fa:	f04f 0220 	mov.w	r2, #32
   189fe:	f3ef 8511 	mrs	r5, BASEPRI
   18a02:	f382 8812 	msr	BASEPRI_MAX, r2
   18a06:	f3bf 8f6f 	isb	sy
   18a0a:	e00a      	b.n	18a22 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   18a0c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   18a0e:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   18a12:	2801      	cmp	r0, #1
   18a14:	dd00      	ble.n	18a18 <z_set_timeout_expiry+0x26>
   18a16:	b97c      	cbnz	r4, 18a38 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   18a18:	f385 8811 	msr	BASEPRI, r5
   18a1c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   18a20:	2301      	movs	r3, #1
   18a22:	461c      	mov	r4, r3
   18a24:	b97b      	cbnz	r3, 18a46 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   18a26:	f7f9 fb41 	bl	120ac <next_timeout>
			      || (ticks <= next_to);
   18a2a:	f1b0 3fff 	cmp.w	r0, #4294967295
   18a2e:	d0ed      	beq.n	18a0c <z_set_timeout_expiry+0x1a>
   18a30:	42b0      	cmp	r0, r6
   18a32:	dbec      	blt.n	18a0e <z_set_timeout_expiry+0x1c>
   18a34:	2401      	movs	r4, #1
   18a36:	e7ea      	b.n	18a0e <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   18a38:	4639      	mov	r1, r7
   18a3a:	42b0      	cmp	r0, r6
   18a3c:	bfa8      	it	ge
   18a3e:	4630      	movge	r0, r6
   18a40:	f7ed f934 	bl	5cac <sys_clock_set_timeout>
   18a44:	e7e8      	b.n	18a18 <z_set_timeout_expiry+0x26>
}
   18a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018a48 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   18a48:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   18a4a:	f7f9 fc61 	bl	12310 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   18a4e:	bd08      	pop	{r3, pc}

00018a50 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   18a50:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   18a52:	f7f9 fc5d 	bl	12310 <sys_clock_tick_get>
}
   18a56:	bd08      	pop	{r3, pc}

00018a58 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   18a58:	b900      	cbnz	r0, 18a5c <z_impl_k_busy_wait+0x4>
   18a5a:	4770      	bx	lr
{
   18a5c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   18a5e:	f7eb f98b 	bl	3d78 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   18a62:	bd08      	pop	{r3, pc}

00018a64 <k_heap_init>:
{
   18a64:	b510      	push	{r4, lr}
   18a66:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   18a6a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   18a6c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   18a6e:	f7fb fcbf 	bl	143f0 <sys_heap_init>
}
   18a72:	bd10      	pop	{r4, pc}

00018a74 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   18a74:	4770      	bx	lr

00018a76 <_ZdlPv>:
   18a76:	f7fa b851 	b.w	12b1c <free>

00018a7a <_ZdaPv>:
   18a7a:	f7ff bffc 	b.w	18a76 <_ZdlPv>

00018a7e <_Znwj>:
   18a7e:	2801      	cmp	r0, #1
   18a80:	bf38      	it	cc
   18a82:	2001      	movcc	r0, #1
   18a84:	b510      	push	{r4, lr}
   18a86:	4604      	mov	r4, r0
   18a88:	4620      	mov	r0, r4
   18a8a:	f7fa f83f 	bl	12b0c <malloc>
   18a8e:	b930      	cbnz	r0, 18a9e <_Znwj+0x20>
   18a90:	f7f9 fdee 	bl	12670 <_ZSt15get_new_handlerv>
   18a94:	b908      	cbnz	r0, 18a9a <_Znwj+0x1c>
   18a96:	f000 f805 	bl	18aa4 <abort>
   18a9a:	4780      	blx	r0
   18a9c:	e7f4      	b.n	18a88 <_Znwj+0xa>
   18a9e:	bd10      	pop	{r4, pc}

00018aa0 <_Znaj>:
   18aa0:	f7ff bfed 	b.w	18a7e <_Znwj>

00018aa4 <abort>:
   18aa4:	2006      	movs	r0, #6
   18aa6:	b508      	push	{r3, lr}
   18aa8:	f7fa fd78 	bl	1359c <raise>
   18aac:	2001      	movs	r0, #1
   18aae:	f7ec f85b 	bl	4b68 <_exit>

00018ab2 <atoi>:
   18ab2:	220a      	movs	r2, #10
   18ab4:	2100      	movs	r1, #0
   18ab6:	f7fa be2d 	b.w	13714 <strtol>

00018aba <memchr>:
   18aba:	b2c9      	uxtb	r1, r1
   18abc:	4603      	mov	r3, r0
   18abe:	4402      	add	r2, r0
   18ac0:	b510      	push	{r4, lr}
   18ac2:	4293      	cmp	r3, r2
   18ac4:	4618      	mov	r0, r3
   18ac6:	d101      	bne.n	18acc <memchr+0x12>
   18ac8:	2000      	movs	r0, #0
   18aca:	e003      	b.n	18ad4 <memchr+0x1a>
   18acc:	7804      	ldrb	r4, [r0, #0]
   18ace:	3301      	adds	r3, #1
   18ad0:	428c      	cmp	r4, r1
   18ad2:	d1f6      	bne.n	18ac2 <memchr+0x8>
   18ad4:	bd10      	pop	{r4, pc}

00018ad6 <memcmp>:
   18ad6:	b530      	push	{r4, r5, lr}
   18ad8:	3901      	subs	r1, #1
   18ada:	2400      	movs	r4, #0
   18adc:	42a2      	cmp	r2, r4
   18ade:	d101      	bne.n	18ae4 <memcmp+0xe>
   18ae0:	2000      	movs	r0, #0
   18ae2:	e005      	b.n	18af0 <memcmp+0x1a>
   18ae4:	5d03      	ldrb	r3, [r0, r4]
   18ae6:	3401      	adds	r4, #1
   18ae8:	5d0d      	ldrb	r5, [r1, r4]
   18aea:	42ab      	cmp	r3, r5
   18aec:	d0f6      	beq.n	18adc <memcmp+0x6>
   18aee:	1b58      	subs	r0, r3, r5
   18af0:	bd30      	pop	{r4, r5, pc}

00018af2 <memcpy>:
   18af2:	440a      	add	r2, r1
   18af4:	1e43      	subs	r3, r0, #1
   18af6:	4291      	cmp	r1, r2
   18af8:	d100      	bne.n	18afc <memcpy+0xa>
   18afa:	4770      	bx	lr
   18afc:	b510      	push	{r4, lr}
   18afe:	f811 4b01 	ldrb.w	r4, [r1], #1
   18b02:	4291      	cmp	r1, r2
   18b04:	f803 4f01 	strb.w	r4, [r3, #1]!
   18b08:	d1f9      	bne.n	18afe <memcpy+0xc>
   18b0a:	bd10      	pop	{r4, pc}

00018b0c <memset>:
   18b0c:	4402      	add	r2, r0
   18b0e:	4603      	mov	r3, r0
   18b10:	4293      	cmp	r3, r2
   18b12:	d100      	bne.n	18b16 <memset+0xa>
   18b14:	4770      	bx	lr
   18b16:	f803 1b01 	strb.w	r1, [r3], #1
   18b1a:	e7f9      	b.n	18b10 <memset+0x4>

00018b1c <__sfputc_r>:
   18b1c:	6893      	ldr	r3, [r2, #8]
   18b1e:	3b01      	subs	r3, #1
   18b20:	2b00      	cmp	r3, #0
   18b22:	6093      	str	r3, [r2, #8]
   18b24:	b410      	push	{r4}
   18b26:	da07      	bge.n	18b38 <__sfputc_r+0x1c>
   18b28:	6994      	ldr	r4, [r2, #24]
   18b2a:	42a3      	cmp	r3, r4
   18b2c:	db01      	blt.n	18b32 <__sfputc_r+0x16>
   18b2e:	290a      	cmp	r1, #10
   18b30:	d102      	bne.n	18b38 <__sfputc_r+0x1c>
   18b32:	bc10      	pop	{r4}
   18b34:	f7fa be0e 	b.w	13754 <__swbuf_r>
   18b38:	6813      	ldr	r3, [r2, #0]
   18b3a:	1c58      	adds	r0, r3, #1
   18b3c:	6010      	str	r0, [r2, #0]
   18b3e:	4608      	mov	r0, r1
   18b40:	7019      	strb	r1, [r3, #0]
   18b42:	bc10      	pop	{r4}
   18b44:	4770      	bx	lr

00018b46 <__sfputs_r>:
   18b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b48:	4606      	mov	r6, r0
   18b4a:	460f      	mov	r7, r1
   18b4c:	4614      	mov	r4, r2
   18b4e:	18d5      	adds	r5, r2, r3
   18b50:	42ac      	cmp	r4, r5
   18b52:	d101      	bne.n	18b58 <__sfputs_r+0x12>
   18b54:	2000      	movs	r0, #0
   18b56:	e007      	b.n	18b68 <__sfputs_r+0x22>
   18b58:	463a      	mov	r2, r7
   18b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
   18b5e:	4630      	mov	r0, r6
   18b60:	f7ff ffdc 	bl	18b1c <__sfputc_r>
   18b64:	1c43      	adds	r3, r0, #1
   18b66:	d1f3      	bne.n	18b50 <__sfputs_r+0xa>
   18b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018b6a <__cvt>:
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18b70:	461f      	mov	r7, r3
   18b72:	b088      	sub	sp, #32
   18b74:	bfb4      	ite	lt
   18b76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   18b7a:	2300      	movge	r3, #0
   18b7c:	4614      	mov	r4, r2
   18b7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18b80:	bfbc      	itt	lt
   18b82:	461f      	movlt	r7, r3
   18b84:	232d      	movlt	r3, #45	; 0x2d
   18b86:	9d10      	ldr	r5, [sp, #64]	; 0x40
   18b88:	7013      	strb	r3, [r2, #0]
   18b8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18b8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   18b90:	f023 0820 	bic.w	r8, r3, #32
   18b94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   18b98:	d005      	beq.n	18ba6 <__cvt+0x3c>
   18b9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   18b9e:	d100      	bne.n	18ba2 <__cvt+0x38>
   18ba0:	3501      	adds	r5, #1
   18ba2:	2302      	movs	r3, #2
   18ba4:	e000      	b.n	18ba8 <__cvt+0x3e>
   18ba6:	2303      	movs	r3, #3
   18ba8:	aa07      	add	r2, sp, #28
   18baa:	9204      	str	r2, [sp, #16]
   18bac:	aa06      	add	r2, sp, #24
   18bae:	e9cd 3500 	strd	r3, r5, [sp]
   18bb2:	e9cd a202 	strd	sl, r2, [sp, #8]
   18bb6:	463b      	mov	r3, r7
   18bb8:	4622      	mov	r2, r4
   18bba:	f7e8 ff31 	bl	1a20 <_dtoa_r>
   18bbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   18bc2:	4606      	mov	r6, r0
   18bc4:	d102      	bne.n	18bcc <__cvt+0x62>
   18bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18bc8:	07db      	lsls	r3, r3, #31
   18bca:	d522      	bpl.n	18c12 <__cvt+0xa8>
   18bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   18bd0:	eb06 0905 	add.w	r9, r6, r5
   18bd4:	d110      	bne.n	18bf8 <__cvt+0x8e>
   18bd6:	7833      	ldrb	r3, [r6, #0]
   18bd8:	2b30      	cmp	r3, #48	; 0x30
   18bda:	d10a      	bne.n	18bf2 <__cvt+0x88>
   18bdc:	2200      	movs	r2, #0
   18bde:	2300      	movs	r3, #0
   18be0:	4620      	mov	r0, r4
   18be2:	4639      	mov	r1, r7
   18be4:	f7e7 fedc 	bl	9a0 <__aeabi_dcmpeq>
   18be8:	b918      	cbnz	r0, 18bf2 <__cvt+0x88>
   18bea:	f1c5 0501 	rsb	r5, r5, #1
   18bee:	f8ca 5000 	str.w	r5, [sl]
   18bf2:	f8da 3000 	ldr.w	r3, [sl]
   18bf6:	4499      	add	r9, r3
   18bf8:	2200      	movs	r2, #0
   18bfa:	2300      	movs	r3, #0
   18bfc:	4620      	mov	r0, r4
   18bfe:	4639      	mov	r1, r7
   18c00:	f7e7 fece 	bl	9a0 <__aeabi_dcmpeq>
   18c04:	b108      	cbz	r0, 18c0a <__cvt+0xa0>
   18c06:	f8cd 901c 	str.w	r9, [sp, #28]
   18c0a:	2230      	movs	r2, #48	; 0x30
   18c0c:	9b07      	ldr	r3, [sp, #28]
   18c0e:	454b      	cmp	r3, r9
   18c10:	d307      	bcc.n	18c22 <__cvt+0xb8>
   18c12:	9b07      	ldr	r3, [sp, #28]
   18c14:	4630      	mov	r0, r6
   18c16:	9a15      	ldr	r2, [sp, #84]	; 0x54
   18c18:	1b9b      	subs	r3, r3, r6
   18c1a:	6013      	str	r3, [r2, #0]
   18c1c:	b008      	add	sp, #32
   18c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18c22:	1c59      	adds	r1, r3, #1
   18c24:	9107      	str	r1, [sp, #28]
   18c26:	701a      	strb	r2, [r3, #0]
   18c28:	e7f0      	b.n	18c0c <__cvt+0xa2>

00018c2a <__exponent>:
   18c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18c2c:	2900      	cmp	r1, #0
   18c2e:	4603      	mov	r3, r0
   18c30:	bfb8      	it	lt
   18c32:	4249      	neglt	r1, r1
   18c34:	f803 2b02 	strb.w	r2, [r3], #2
   18c38:	bfb4      	ite	lt
   18c3a:	222d      	movlt	r2, #45	; 0x2d
   18c3c:	222b      	movge	r2, #43	; 0x2b
   18c3e:	2909      	cmp	r1, #9
   18c40:	7042      	strb	r2, [r0, #1]
   18c42:	dd2a      	ble.n	18c9a <__exponent+0x70>
   18c44:	f10d 0407 	add.w	r4, sp, #7
   18c48:	270a      	movs	r7, #10
   18c4a:	46a4      	mov	ip, r4
   18c4c:	460a      	mov	r2, r1
   18c4e:	46a6      	mov	lr, r4
   18c50:	3c01      	subs	r4, #1
   18c52:	2a63      	cmp	r2, #99	; 0x63
   18c54:	fb91 f6f7 	sdiv	r6, r1, r7
   18c58:	fb07 1516 	mls	r5, r7, r6, r1
   18c5c:	4631      	mov	r1, r6
   18c5e:	f105 0530 	add.w	r5, r5, #48	; 0x30
   18c62:	f80e 5c01 	strb.w	r5, [lr, #-1]
   18c66:	dcf1      	bgt.n	18c4c <__exponent+0x22>
   18c68:	3130      	adds	r1, #48	; 0x30
   18c6a:	f1ae 0502 	sub.w	r5, lr, #2
   18c6e:	f804 1c01 	strb.w	r1, [r4, #-1]
   18c72:	1c44      	adds	r4, r0, #1
   18c74:	4629      	mov	r1, r5
   18c76:	4561      	cmp	r1, ip
   18c78:	d30a      	bcc.n	18c90 <__exponent+0x66>
   18c7a:	f10d 0209 	add.w	r2, sp, #9
   18c7e:	eba2 020e 	sub.w	r2, r2, lr
   18c82:	4565      	cmp	r5, ip
   18c84:	bf88      	it	hi
   18c86:	2200      	movhi	r2, #0
   18c88:	4413      	add	r3, r2
   18c8a:	1a18      	subs	r0, r3, r0
   18c8c:	b003      	add	sp, #12
   18c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c90:	f811 2b01 	ldrb.w	r2, [r1], #1
   18c94:	f804 2f01 	strb.w	r2, [r4, #1]!
   18c98:	e7ed      	b.n	18c76 <__exponent+0x4c>
   18c9a:	2330      	movs	r3, #48	; 0x30
   18c9c:	3130      	adds	r1, #48	; 0x30
   18c9e:	7083      	strb	r3, [r0, #2]
   18ca0:	1d03      	adds	r3, r0, #4
   18ca2:	70c1      	strb	r1, [r0, #3]
   18ca4:	e7f1      	b.n	18c8a <__exponent+0x60>

00018ca6 <_printf_common>:
   18ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18caa:	4616      	mov	r6, r2
   18cac:	4699      	mov	r9, r3
   18cae:	688a      	ldr	r2, [r1, #8]
   18cb0:	4607      	mov	r7, r0
   18cb2:	690b      	ldr	r3, [r1, #16]
   18cb4:	460c      	mov	r4, r1
   18cb6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   18cba:	4293      	cmp	r3, r2
   18cbc:	bfb8      	it	lt
   18cbe:	4613      	movlt	r3, r2
   18cc0:	6033      	str	r3, [r6, #0]
   18cc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   18cc6:	b10a      	cbz	r2, 18ccc <_printf_common+0x26>
   18cc8:	3301      	adds	r3, #1
   18cca:	6033      	str	r3, [r6, #0]
   18ccc:	6823      	ldr	r3, [r4, #0]
   18cce:	0699      	lsls	r1, r3, #26
   18cd0:	bf42      	ittt	mi
   18cd2:	6833      	ldrmi	r3, [r6, #0]
   18cd4:	3302      	addmi	r3, #2
   18cd6:	6033      	strmi	r3, [r6, #0]
   18cd8:	6825      	ldr	r5, [r4, #0]
   18cda:	f015 0506 	ands.w	r5, r5, #6
   18cde:	d106      	bne.n	18cee <_printf_common+0x48>
   18ce0:	f104 0a19 	add.w	sl, r4, #25
   18ce4:	68e3      	ldr	r3, [r4, #12]
   18ce6:	6832      	ldr	r2, [r6, #0]
   18ce8:	1a9b      	subs	r3, r3, r2
   18cea:	42ab      	cmp	r3, r5
   18cec:	dc29      	bgt.n	18d42 <_printf_common+0x9c>
   18cee:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   18cf2:	1e13      	subs	r3, r2, #0
   18cf4:	6822      	ldr	r2, [r4, #0]
   18cf6:	bf18      	it	ne
   18cf8:	2301      	movne	r3, #1
   18cfa:	0692      	lsls	r2, r2, #26
   18cfc:	d42e      	bmi.n	18d5c <_printf_common+0xb6>
   18cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
   18d02:	4649      	mov	r1, r9
   18d04:	4638      	mov	r0, r7
   18d06:	47c0      	blx	r8
   18d08:	3001      	adds	r0, #1
   18d0a:	d021      	beq.n	18d50 <_printf_common+0xaa>
   18d0c:	6823      	ldr	r3, [r4, #0]
   18d0e:	341a      	adds	r4, #26
   18d10:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   18d14:	f003 0306 	and.w	r3, r3, #6
   18d18:	6832      	ldr	r2, [r6, #0]
   18d1a:	2600      	movs	r6, #0
   18d1c:	2b04      	cmp	r3, #4
   18d1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
   18d22:	bf08      	it	eq
   18d24:	1aad      	subeq	r5, r5, r2
   18d26:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   18d2a:	bf14      	ite	ne
   18d2c:	2500      	movne	r5, #0
   18d2e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   18d32:	4293      	cmp	r3, r2
   18d34:	bfc4      	itt	gt
   18d36:	1a9b      	subgt	r3, r3, r2
   18d38:	18ed      	addgt	r5, r5, r3
   18d3a:	42b5      	cmp	r5, r6
   18d3c:	d11a      	bne.n	18d74 <_printf_common+0xce>
   18d3e:	2000      	movs	r0, #0
   18d40:	e008      	b.n	18d54 <_printf_common+0xae>
   18d42:	2301      	movs	r3, #1
   18d44:	4652      	mov	r2, sl
   18d46:	4649      	mov	r1, r9
   18d48:	4638      	mov	r0, r7
   18d4a:	47c0      	blx	r8
   18d4c:	3001      	adds	r0, #1
   18d4e:	d103      	bne.n	18d58 <_printf_common+0xb2>
   18d50:	f04f 30ff 	mov.w	r0, #4294967295
   18d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d58:	3501      	adds	r5, #1
   18d5a:	e7c3      	b.n	18ce4 <_printf_common+0x3e>
   18d5c:	18e1      	adds	r1, r4, r3
   18d5e:	1c5a      	adds	r2, r3, #1
   18d60:	2030      	movs	r0, #48	; 0x30
   18d62:	3302      	adds	r3, #2
   18d64:	4422      	add	r2, r4
   18d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   18d6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   18d6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   18d72:	e7c4      	b.n	18cfe <_printf_common+0x58>
   18d74:	2301      	movs	r3, #1
   18d76:	4622      	mov	r2, r4
   18d78:	4649      	mov	r1, r9
   18d7a:	4638      	mov	r0, r7
   18d7c:	47c0      	blx	r8
   18d7e:	3001      	adds	r0, #1
   18d80:	d0e6      	beq.n	18d50 <_printf_common+0xaa>
   18d82:	3601      	adds	r6, #1
   18d84:	e7d9      	b.n	18d3a <_printf_common+0x94>

00018d86 <_raise_r>:
   18d86:	291f      	cmp	r1, #31
   18d88:	b538      	push	{r3, r4, r5, lr}
   18d8a:	4604      	mov	r4, r0
   18d8c:	460d      	mov	r5, r1
   18d8e:	d904      	bls.n	18d9a <_raise_r+0x14>
   18d90:	2316      	movs	r3, #22
   18d92:	6003      	str	r3, [r0, #0]
   18d94:	f04f 30ff 	mov.w	r0, #4294967295
   18d98:	bd38      	pop	{r3, r4, r5, pc}
   18d9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18d9c:	b112      	cbz	r2, 18da4 <_raise_r+0x1e>
   18d9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   18da2:	b94b      	cbnz	r3, 18db8 <_raise_r+0x32>
   18da4:	4620      	mov	r0, r4
   18da6:	f000 f816 	bl	18dd6 <_getpid_r>
   18daa:	462a      	mov	r2, r5
   18dac:	4601      	mov	r1, r0
   18dae:	4620      	mov	r0, r4
   18db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18db4:	f7fa bbfa 	b.w	135ac <_kill_r>
   18db8:	2b01      	cmp	r3, #1
   18dba:	d00a      	beq.n	18dd2 <_raise_r+0x4c>
   18dbc:	1c59      	adds	r1, r3, #1
   18dbe:	d103      	bne.n	18dc8 <_raise_r+0x42>
   18dc0:	2316      	movs	r3, #22
   18dc2:	6003      	str	r3, [r0, #0]
   18dc4:	2001      	movs	r0, #1
   18dc6:	e7e7      	b.n	18d98 <_raise_r+0x12>
   18dc8:	2400      	movs	r4, #0
   18dca:	4628      	mov	r0, r5
   18dcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   18dd0:	4798      	blx	r3
   18dd2:	2000      	movs	r0, #0
   18dd4:	e7e0      	b.n	18d98 <_raise_r+0x12>

00018dd6 <_getpid_r>:
   18dd6:	f7fb be03 	b.w	149e0 <_getpid>

00018dda <strncmp>:
   18dda:	b510      	push	{r4, lr}
   18ddc:	b16a      	cbz	r2, 18dfa <strncmp+0x20>
   18dde:	3901      	subs	r1, #1
   18de0:	1884      	adds	r4, r0, r2
   18de2:	f810 3b01 	ldrb.w	r3, [r0], #1
   18de6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   18dea:	4293      	cmp	r3, r2
   18dec:	d103      	bne.n	18df6 <strncmp+0x1c>
   18dee:	42a0      	cmp	r0, r4
   18df0:	d001      	beq.n	18df6 <strncmp+0x1c>
   18df2:	2b00      	cmp	r3, #0
   18df4:	d1f5      	bne.n	18de2 <strncmp+0x8>
   18df6:	1a98      	subs	r0, r3, r2
   18df8:	bd10      	pop	{r4, pc}
   18dfa:	4610      	mov	r0, r2
   18dfc:	e7fc      	b.n	18df8 <strncmp+0x1e>

00018dfe <strncpy>:
   18dfe:	3901      	subs	r1, #1
   18e00:	4603      	mov	r3, r0
   18e02:	b510      	push	{r4, lr}
   18e04:	b132      	cbz	r2, 18e14 <strncpy+0x16>
   18e06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18e0a:	3a01      	subs	r2, #1
   18e0c:	f803 4b01 	strb.w	r4, [r3], #1
   18e10:	2c00      	cmp	r4, #0
   18e12:	d1f7      	bne.n	18e04 <strncpy+0x6>
   18e14:	441a      	add	r2, r3
   18e16:	2100      	movs	r1, #0
   18e18:	4293      	cmp	r3, r2
   18e1a:	d100      	bne.n	18e1e <strncpy+0x20>
   18e1c:	bd10      	pop	{r4, pc}
   18e1e:	f803 1b01 	strb.w	r1, [r3], #1
   18e22:	e7f9      	b.n	18e18 <strncpy+0x1a>

00018e24 <strnlen>:
   18e24:	4602      	mov	r2, r0
   18e26:	4401      	add	r1, r0
   18e28:	b510      	push	{r4, lr}
   18e2a:	428a      	cmp	r2, r1
   18e2c:	4613      	mov	r3, r2
   18e2e:	d101      	bne.n	18e34 <strnlen+0x10>
   18e30:	1a18      	subs	r0, r3, r0
   18e32:	bd10      	pop	{r4, pc}
   18e34:	781c      	ldrb	r4, [r3, #0]
   18e36:	3201      	adds	r2, #1
   18e38:	2c00      	cmp	r4, #0
   18e3a:	d1f6      	bne.n	18e2a <strnlen+0x6>
   18e3c:	e7f8      	b.n	18e30 <strnlen+0xc>

00018e3e <__strtok_r>:
   18e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e40:	b908      	cbnz	r0, 18e46 <__strtok_r+0x8>
   18e42:	6810      	ldr	r0, [r2, #0]
   18e44:	b188      	cbz	r0, 18e6a <__strtok_r+0x2c>
   18e46:	4604      	mov	r4, r0
   18e48:	4620      	mov	r0, r4
   18e4a:	460f      	mov	r7, r1
   18e4c:	f814 5b01 	ldrb.w	r5, [r4], #1
   18e50:	f817 6b01 	ldrb.w	r6, [r7], #1
   18e54:	b91e      	cbnz	r6, 18e5e <__strtok_r+0x20>
   18e56:	b965      	cbnz	r5, 18e72 <__strtok_r+0x34>
   18e58:	4628      	mov	r0, r5
   18e5a:	6015      	str	r5, [r2, #0]
   18e5c:	e005      	b.n	18e6a <__strtok_r+0x2c>
   18e5e:	42b5      	cmp	r5, r6
   18e60:	d1f6      	bne.n	18e50 <__strtok_r+0x12>
   18e62:	2b00      	cmp	r3, #0
   18e64:	d1f0      	bne.n	18e48 <__strtok_r+0xa>
   18e66:	6014      	str	r4, [r2, #0]
   18e68:	7003      	strb	r3, [r0, #0]
   18e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18e6c:	461c      	mov	r4, r3
   18e6e:	e00c      	b.n	18e8a <__strtok_r+0x4c>
   18e70:	b915      	cbnz	r5, 18e78 <__strtok_r+0x3a>
   18e72:	f814 3b01 	ldrb.w	r3, [r4], #1
   18e76:	460e      	mov	r6, r1
   18e78:	f816 5b01 	ldrb.w	r5, [r6], #1
   18e7c:	42ab      	cmp	r3, r5
   18e7e:	d1f7      	bne.n	18e70 <__strtok_r+0x32>
   18e80:	2b00      	cmp	r3, #0
   18e82:	d0f3      	beq.n	18e6c <__strtok_r+0x2e>
   18e84:	2300      	movs	r3, #0
   18e86:	f804 3c01 	strb.w	r3, [r4, #-1]
   18e8a:	6014      	str	r4, [r2, #0]
   18e8c:	e7ed      	b.n	18e6a <__strtok_r+0x2c>

00018e8e <quorem>:
   18e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e92:	6903      	ldr	r3, [r0, #16]
   18e94:	4607      	mov	r7, r0
   18e96:	690c      	ldr	r4, [r1, #16]
   18e98:	42a3      	cmp	r3, r4
   18e9a:	f2c0 8085 	blt.w	18fa8 <quorem+0x11a>
   18e9e:	3c01      	subs	r4, #1
   18ea0:	f100 0514 	add.w	r5, r0, #20
   18ea4:	f101 0814 	add.w	r8, r1, #20
   18ea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   18eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   18eb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   18eb4:	9301      	str	r3, [sp, #4]
   18eb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   18eba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   18ebe:	3301      	adds	r3, #1
   18ec0:	429a      	cmp	r2, r3
   18ec2:	fbb2 f6f3 	udiv	r6, r2, r3
   18ec6:	d333      	bcc.n	18f30 <quorem+0xa2>
   18ec8:	f04f 0e00 	mov.w	lr, #0
   18ecc:	4640      	mov	r0, r8
   18ece:	46ac      	mov	ip, r5
   18ed0:	46f2      	mov	sl, lr
   18ed2:	f850 2b04 	ldr.w	r2, [r0], #4
   18ed6:	b293      	uxth	r3, r2
   18ed8:	4581      	cmp	r9, r0
   18eda:	ea4f 4212 	mov.w	r2, r2, lsr #16
   18ede:	fb06 e303 	mla	r3, r6, r3, lr
   18ee2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   18ee6:	b29b      	uxth	r3, r3
   18ee8:	fb06 e202 	mla	r2, r6, r2, lr
   18eec:	ebaa 0303 	sub.w	r3, sl, r3
   18ef0:	f8dc a000 	ldr.w	sl, [ip]
   18ef4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   18ef8:	fa1f fa8a 	uxth.w	sl, sl
   18efc:	4453      	add	r3, sl
   18efe:	fa1f fa82 	uxth.w	sl, r2
   18f02:	f8dc 2000 	ldr.w	r2, [ip]
   18f06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   18f0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   18f0e:	b29b      	uxth	r3, r3
   18f10:	ea4f 4a22 	mov.w	sl, r2, asr #16
   18f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   18f18:	f84c 3b04 	str.w	r3, [ip], #4
   18f1c:	d2d9      	bcs.n	18ed2 <quorem+0x44>
   18f1e:	f855 300b 	ldr.w	r3, [r5, fp]
   18f22:	b92b      	cbnz	r3, 18f30 <quorem+0xa2>
   18f24:	9b01      	ldr	r3, [sp, #4]
   18f26:	3b04      	subs	r3, #4
   18f28:	429d      	cmp	r5, r3
   18f2a:	461a      	mov	r2, r3
   18f2c:	d330      	bcc.n	18f90 <quorem+0x102>
   18f2e:	613c      	str	r4, [r7, #16]
   18f30:	4638      	mov	r0, r7
   18f32:	f000 fa6f 	bl	19414 <__mcmp>
   18f36:	2800      	cmp	r0, #0
   18f38:	db26      	blt.n	18f88 <quorem+0xfa>
   18f3a:	3601      	adds	r6, #1
   18f3c:	4628      	mov	r0, r5
   18f3e:	f04f 0c00 	mov.w	ip, #0
   18f42:	f858 1b04 	ldr.w	r1, [r8], #4
   18f46:	f8d0 e000 	ldr.w	lr, [r0]
   18f4a:	b28b      	uxth	r3, r1
   18f4c:	45c1      	cmp	r9, r8
   18f4e:	fa1f f28e 	uxth.w	r2, lr
   18f52:	ebac 0303 	sub.w	r3, ip, r3
   18f56:	4413      	add	r3, r2
   18f58:	ea4f 4211 	mov.w	r2, r1, lsr #16
   18f5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   18f60:	eb02 4223 	add.w	r2, r2, r3, asr #16
   18f64:	b29b      	uxth	r3, r3
   18f66:	ea4f 4c22 	mov.w	ip, r2, asr #16
   18f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   18f6e:	f840 3b04 	str.w	r3, [r0], #4
   18f72:	d2e6      	bcs.n	18f42 <quorem+0xb4>
   18f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   18f78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   18f7c:	b922      	cbnz	r2, 18f88 <quorem+0xfa>
   18f7e:	3b04      	subs	r3, #4
   18f80:	429d      	cmp	r5, r3
   18f82:	461a      	mov	r2, r3
   18f84:	d30a      	bcc.n	18f9c <quorem+0x10e>
   18f86:	613c      	str	r4, [r7, #16]
   18f88:	4630      	mov	r0, r6
   18f8a:	b003      	add	sp, #12
   18f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f90:	6812      	ldr	r2, [r2, #0]
   18f92:	3b04      	subs	r3, #4
   18f94:	2a00      	cmp	r2, #0
   18f96:	d1ca      	bne.n	18f2e <quorem+0xa0>
   18f98:	3c01      	subs	r4, #1
   18f9a:	e7c5      	b.n	18f28 <quorem+0x9a>
   18f9c:	6812      	ldr	r2, [r2, #0]
   18f9e:	3b04      	subs	r3, #4
   18fa0:	2a00      	cmp	r2, #0
   18fa2:	d1f0      	bne.n	18f86 <quorem+0xf8>
   18fa4:	3c01      	subs	r4, #1
   18fa6:	e7eb      	b.n	18f80 <quorem+0xf2>
   18fa8:	2000      	movs	r0, #0
   18faa:	e7ee      	b.n	18f8a <quorem+0xfc>

00018fac <__sfmoreglue>:
   18fac:	b570      	push	{r4, r5, r6, lr}
   18fae:	1e4a      	subs	r2, r1, #1
   18fb0:	2568      	movs	r5, #104	; 0x68
   18fb2:	460e      	mov	r6, r1
   18fb4:	4355      	muls	r5, r2
   18fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
   18fba:	f7f9 fe05 	bl	12bc8 <_malloc_r>
   18fbe:	4604      	mov	r4, r0
   18fc0:	b140      	cbz	r0, 18fd4 <__sfmoreglue+0x28>
   18fc2:	2100      	movs	r1, #0
   18fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   18fc8:	e9c0 1600 	strd	r1, r6, [r0]
   18fcc:	300c      	adds	r0, #12
   18fce:	60a0      	str	r0, [r4, #8]
   18fd0:	f7ff fd9c 	bl	18b0c <memset>
   18fd4:	4620      	mov	r0, r4
   18fd6:	bd70      	pop	{r4, r5, r6, pc}

00018fd8 <_fwalk_reent>:
   18fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18fdc:	4606      	mov	r6, r0
   18fde:	4688      	mov	r8, r1
   18fe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
   18fe4:	2700      	movs	r7, #0
   18fe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   18fea:	f1b9 0901 	subs.w	r9, r9, #1
   18fee:	d505      	bpl.n	18ffc <_fwalk_reent+0x24>
   18ff0:	6824      	ldr	r4, [r4, #0]
   18ff2:	2c00      	cmp	r4, #0
   18ff4:	d1f7      	bne.n	18fe6 <_fwalk_reent+0xe>
   18ff6:	4638      	mov	r0, r7
   18ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18ffc:	89ab      	ldrh	r3, [r5, #12]
   18ffe:	2b01      	cmp	r3, #1
   19000:	d907      	bls.n	19012 <_fwalk_reent+0x3a>
   19002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   19006:	3301      	adds	r3, #1
   19008:	d003      	beq.n	19012 <_fwalk_reent+0x3a>
   1900a:	4629      	mov	r1, r5
   1900c:	4630      	mov	r0, r6
   1900e:	47c0      	blx	r8
   19010:	4307      	orrs	r7, r0
   19012:	3568      	adds	r5, #104	; 0x68
   19014:	e7e9      	b.n	18fea <_fwalk_reent+0x12>

00019016 <__swhatbuf_r>:
   19016:	b570      	push	{r4, r5, r6, lr}
   19018:	460e      	mov	r6, r1
   1901a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1901e:	b096      	sub	sp, #88	; 0x58
   19020:	4614      	mov	r4, r2
   19022:	2900      	cmp	r1, #0
   19024:	461d      	mov	r5, r3
   19026:	da07      	bge.n	19038 <__swhatbuf_r+0x22>
   19028:	2300      	movs	r3, #0
   1902a:	602b      	str	r3, [r5, #0]
   1902c:	89b3      	ldrh	r3, [r6, #12]
   1902e:	061a      	lsls	r2, r3, #24
   19030:	d410      	bmi.n	19054 <__swhatbuf_r+0x3e>
   19032:	f44f 6380 	mov.w	r3, #1024	; 0x400
   19036:	e00e      	b.n	19056 <__swhatbuf_r+0x40>
   19038:	466a      	mov	r2, sp
   1903a:	f7fa fe8b 	bl	13d54 <_fstat_r>
   1903e:	2800      	cmp	r0, #0
   19040:	dbf2      	blt.n	19028 <__swhatbuf_r+0x12>
   19042:	9a01      	ldr	r2, [sp, #4]
   19044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   19048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   1904c:	425a      	negs	r2, r3
   1904e:	415a      	adcs	r2, r3
   19050:	602a      	str	r2, [r5, #0]
   19052:	e7ee      	b.n	19032 <__swhatbuf_r+0x1c>
   19054:	2340      	movs	r3, #64	; 0x40
   19056:	2000      	movs	r0, #0
   19058:	6023      	str	r3, [r4, #0]
   1905a:	b016      	add	sp, #88	; 0x58
   1905c:	bd70      	pop	{r4, r5, r6, pc}

0001905e <_Balloc>:
   1905e:	b570      	push	{r4, r5, r6, lr}
   19060:	6a46      	ldr	r6, [r0, #36]	; 0x24
   19062:	4604      	mov	r4, r0
   19064:	460d      	mov	r5, r1
   19066:	b93e      	cbnz	r6, 19078 <_Balloc+0x1a>
   19068:	2010      	movs	r0, #16
   1906a:	f7f9 fd4f 	bl	12b0c <malloc>
   1906e:	6260      	str	r0, [r4, #36]	; 0x24
   19070:	6006      	str	r6, [r0, #0]
   19072:	60c6      	str	r6, [r0, #12]
   19074:	e9c0 6601 	strd	r6, r6, [r0, #4]
   19078:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1907a:	68f3      	ldr	r3, [r6, #12]
   1907c:	b183      	cbz	r3, 190a0 <_Balloc+0x42>
   1907e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19080:	68db      	ldr	r3, [r3, #12]
   19082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   19086:	b9b8      	cbnz	r0, 190b8 <_Balloc+0x5a>
   19088:	2101      	movs	r1, #1
   1908a:	4620      	mov	r0, r4
   1908c:	fa01 f605 	lsl.w	r6, r1, r5
   19090:	1d72      	adds	r2, r6, #5
   19092:	0092      	lsls	r2, r2, #2
   19094:	f000 faa5 	bl	195e2 <_calloc_r>
   19098:	b160      	cbz	r0, 190b4 <_Balloc+0x56>
   1909a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1909e:	e00e      	b.n	190be <_Balloc+0x60>
   190a0:	2221      	movs	r2, #33	; 0x21
   190a2:	2104      	movs	r1, #4
   190a4:	4620      	mov	r0, r4
   190a6:	f000 fa9c 	bl	195e2 <_calloc_r>
   190aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   190ac:	60f0      	str	r0, [r6, #12]
   190ae:	68db      	ldr	r3, [r3, #12]
   190b0:	2b00      	cmp	r3, #0
   190b2:	d1e4      	bne.n	1907e <_Balloc+0x20>
   190b4:	2000      	movs	r0, #0
   190b6:	bd70      	pop	{r4, r5, r6, pc}
   190b8:	6802      	ldr	r2, [r0, #0]
   190ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   190be:	2300      	movs	r3, #0
   190c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   190c4:	e7f7      	b.n	190b6 <_Balloc+0x58>

000190c6 <_Bfree>:
   190c6:	b570      	push	{r4, r5, r6, lr}
   190c8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   190ca:	4605      	mov	r5, r0
   190cc:	460c      	mov	r4, r1
   190ce:	b93e      	cbnz	r6, 190e0 <_Bfree+0x1a>
   190d0:	2010      	movs	r0, #16
   190d2:	f7f9 fd1b 	bl	12b0c <malloc>
   190d6:	6268      	str	r0, [r5, #36]	; 0x24
   190d8:	6006      	str	r6, [r0, #0]
   190da:	60c6      	str	r6, [r0, #12]
   190dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   190e0:	b13c      	cbz	r4, 190f2 <_Bfree+0x2c>
   190e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   190e4:	6862      	ldr	r2, [r4, #4]
   190e6:	68db      	ldr	r3, [r3, #12]
   190e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   190ec:	6021      	str	r1, [r4, #0]
   190ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   190f2:	bd70      	pop	{r4, r5, r6, pc}

000190f4 <__multadd>:
   190f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190f8:	4607      	mov	r7, r0
   190fa:	4698      	mov	r8, r3
   190fc:	460c      	mov	r4, r1
   190fe:	690e      	ldr	r6, [r1, #16]
   19100:	f101 0014 	add.w	r0, r1, #20
   19104:	2300      	movs	r3, #0
   19106:	6805      	ldr	r5, [r0, #0]
   19108:	3301      	adds	r3, #1
   1910a:	b2a9      	uxth	r1, r5
   1910c:	429e      	cmp	r6, r3
   1910e:	ea4f 4515 	mov.w	r5, r5, lsr #16
   19112:	fb02 8101 	mla	r1, r2, r1, r8
   19116:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   1911a:	b289      	uxth	r1, r1
   1911c:	fb02 c505 	mla	r5, r2, r5, ip
   19120:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   19124:	ea4f 4815 	mov.w	r8, r5, lsr #16
   19128:	f840 1b04 	str.w	r1, [r0], #4
   1912c:	dceb      	bgt.n	19106 <__multadd+0x12>
   1912e:	f1b8 0f00 	cmp.w	r8, #0
   19132:	d01b      	beq.n	1916c <__multadd+0x78>
   19134:	68a3      	ldr	r3, [r4, #8]
   19136:	42b3      	cmp	r3, r6
   19138:	dc12      	bgt.n	19160 <__multadd+0x6c>
   1913a:	6861      	ldr	r1, [r4, #4]
   1913c:	4638      	mov	r0, r7
   1913e:	3101      	adds	r1, #1
   19140:	f7ff ff8d 	bl	1905e <_Balloc>
   19144:	6922      	ldr	r2, [r4, #16]
   19146:	4605      	mov	r5, r0
   19148:	f104 010c 	add.w	r1, r4, #12
   1914c:	3202      	adds	r2, #2
   1914e:	300c      	adds	r0, #12
   19150:	0092      	lsls	r2, r2, #2
   19152:	f7ff fcce 	bl	18af2 <memcpy>
   19156:	4621      	mov	r1, r4
   19158:	462c      	mov	r4, r5
   1915a:	4638      	mov	r0, r7
   1915c:	f7ff ffb3 	bl	190c6 <_Bfree>
   19160:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   19164:	3601      	adds	r6, #1
   19166:	f8c3 8014 	str.w	r8, [r3, #20]
   1916a:	6126      	str	r6, [r4, #16]
   1916c:	4620      	mov	r0, r4
   1916e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019172 <__hi0bits>:
   19172:	0c02      	lsrs	r2, r0, #16
   19174:	4603      	mov	r3, r0
   19176:	0412      	lsls	r2, r2, #16
   19178:	b9ca      	cbnz	r2, 191ae <__hi0bits+0x3c>
   1917a:	0403      	lsls	r3, r0, #16
   1917c:	2010      	movs	r0, #16
   1917e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   19182:	bf04      	itt	eq
   19184:	021b      	lsleq	r3, r3, #8
   19186:	3008      	addeq	r0, #8
   19188:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1918c:	bf04      	itt	eq
   1918e:	011b      	lsleq	r3, r3, #4
   19190:	3004      	addeq	r0, #4
   19192:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   19196:	bf04      	itt	eq
   19198:	009b      	lsleq	r3, r3, #2
   1919a:	3002      	addeq	r0, #2
   1919c:	2b00      	cmp	r3, #0
   1919e:	db05      	blt.n	191ac <__hi0bits+0x3a>
   191a0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   191a4:	f100 0001 	add.w	r0, r0, #1
   191a8:	bf08      	it	eq
   191aa:	2020      	moveq	r0, #32
   191ac:	4770      	bx	lr
   191ae:	2000      	movs	r0, #0
   191b0:	e7e5      	b.n	1917e <__hi0bits+0xc>

000191b2 <__lo0bits>:
   191b2:	6803      	ldr	r3, [r0, #0]
   191b4:	4602      	mov	r2, r0
   191b6:	f013 0007 	ands.w	r0, r3, #7
   191ba:	d00b      	beq.n	191d4 <__lo0bits+0x22>
   191bc:	07d9      	lsls	r1, r3, #31
   191be:	d422      	bmi.n	19206 <__lo0bits+0x54>
   191c0:	0798      	lsls	r0, r3, #30
   191c2:	bf47      	ittee	mi
   191c4:	085b      	lsrmi	r3, r3, #1
   191c6:	2001      	movmi	r0, #1
   191c8:	089b      	lsrpl	r3, r3, #2
   191ca:	2002      	movpl	r0, #2
   191cc:	bf4c      	ite	mi
   191ce:	6013      	strmi	r3, [r2, #0]
   191d0:	6013      	strpl	r3, [r2, #0]
   191d2:	4770      	bx	lr
   191d4:	b299      	uxth	r1, r3
   191d6:	b909      	cbnz	r1, 191dc <__lo0bits+0x2a>
   191d8:	0c1b      	lsrs	r3, r3, #16
   191da:	2010      	movs	r0, #16
   191dc:	f013 0fff 	tst.w	r3, #255	; 0xff
   191e0:	bf04      	itt	eq
   191e2:	0a1b      	lsreq	r3, r3, #8
   191e4:	3008      	addeq	r0, #8
   191e6:	0719      	lsls	r1, r3, #28
   191e8:	bf04      	itt	eq
   191ea:	091b      	lsreq	r3, r3, #4
   191ec:	3004      	addeq	r0, #4
   191ee:	0799      	lsls	r1, r3, #30
   191f0:	bf04      	itt	eq
   191f2:	089b      	lsreq	r3, r3, #2
   191f4:	3002      	addeq	r0, #2
   191f6:	07d9      	lsls	r1, r3, #31
   191f8:	d403      	bmi.n	19202 <__lo0bits+0x50>
   191fa:	085b      	lsrs	r3, r3, #1
   191fc:	f100 0001 	add.w	r0, r0, #1
   19200:	d003      	beq.n	1920a <__lo0bits+0x58>
   19202:	6013      	str	r3, [r2, #0]
   19204:	4770      	bx	lr
   19206:	2000      	movs	r0, #0
   19208:	4770      	bx	lr
   1920a:	2020      	movs	r0, #32
   1920c:	4770      	bx	lr

0001920e <__i2b>:
   1920e:	b510      	push	{r4, lr}
   19210:	460c      	mov	r4, r1
   19212:	2101      	movs	r1, #1
   19214:	f7ff ff23 	bl	1905e <_Balloc>
   19218:	2201      	movs	r2, #1
   1921a:	6144      	str	r4, [r0, #20]
   1921c:	6102      	str	r2, [r0, #16]
   1921e:	bd10      	pop	{r4, pc}

00019220 <__multiply>:
   19220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19224:	4615      	mov	r5, r2
   19226:	690a      	ldr	r2, [r1, #16]
   19228:	460c      	mov	r4, r1
   1922a:	b085      	sub	sp, #20
   1922c:	692b      	ldr	r3, [r5, #16]
   1922e:	429a      	cmp	r2, r3
   19230:	bfbe      	ittt	lt
   19232:	460b      	movlt	r3, r1
   19234:	462c      	movlt	r4, r5
   19236:	461d      	movlt	r5, r3
   19238:	6927      	ldr	r7, [r4, #16]
   1923a:	68a3      	ldr	r3, [r4, #8]
   1923c:	f8d5 9010 	ldr.w	r9, [r5, #16]
   19240:	6861      	ldr	r1, [r4, #4]
   19242:	eb07 0609 	add.w	r6, r7, r9
   19246:	42b3      	cmp	r3, r6
   19248:	bfb8      	it	lt
   1924a:	3101      	addlt	r1, #1
   1924c:	f7ff ff07 	bl	1905e <_Balloc>
   19250:	f100 0114 	add.w	r1, r0, #20
   19254:	2200      	movs	r2, #0
   19256:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   1925a:	460b      	mov	r3, r1
   1925c:	4543      	cmp	r3, r8
   1925e:	d31d      	bcc.n	1929c <__multiply+0x7c>
   19260:	f104 0314 	add.w	r3, r4, #20
   19264:	f105 0214 	add.w	r2, r5, #20
   19268:	f104 0515 	add.w	r5, r4, #21
   1926c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   19270:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   19274:	9302      	str	r3, [sp, #8]
   19276:	1b3b      	subs	r3, r7, r4
   19278:	3b15      	subs	r3, #21
   1927a:	f023 0303 	bic.w	r3, r3, #3
   1927e:	3304      	adds	r3, #4
   19280:	42af      	cmp	r7, r5
   19282:	bf38      	it	cc
   19284:	2304      	movcc	r3, #4
   19286:	9301      	str	r3, [sp, #4]
   19288:	9b02      	ldr	r3, [sp, #8]
   1928a:	9203      	str	r2, [sp, #12]
   1928c:	4293      	cmp	r3, r2
   1928e:	d808      	bhi.n	192a2 <__multiply+0x82>
   19290:	2e00      	cmp	r6, #0
   19292:	dc5a      	bgt.n	1934a <__multiply+0x12a>
   19294:	6106      	str	r6, [r0, #16]
   19296:	b005      	add	sp, #20
   19298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1929c:	f843 2b04 	str.w	r2, [r3], #4
   192a0:	e7dc      	b.n	1925c <__multiply+0x3c>
   192a2:	f8b2 a000 	ldrh.w	sl, [r2]
   192a6:	f1ba 0f00 	cmp.w	sl, #0
   192aa:	d024      	beq.n	192f6 <__multiply+0xd6>
   192ac:	f104 0e14 	add.w	lr, r4, #20
   192b0:	4689      	mov	r9, r1
   192b2:	f04f 0c00 	mov.w	ip, #0
   192b6:	f85e 5b04 	ldr.w	r5, [lr], #4
   192ba:	f8d9 b000 	ldr.w	fp, [r9]
   192be:	b2ab      	uxth	r3, r5
   192c0:	4577      	cmp	r7, lr
   192c2:	fa1f fb8b 	uxth.w	fp, fp
   192c6:	fb0a b303 	mla	r3, sl, r3, fp
   192ca:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   192ce:	f8d9 5000 	ldr.w	r5, [r9]
   192d2:	4463      	add	r3, ip
   192d4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   192d8:	fb0a c50b 	mla	r5, sl, fp, ip
   192dc:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   192e0:	b29b      	uxth	r3, r3
   192e2:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   192e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   192ea:	f849 3b04 	str.w	r3, [r9], #4
   192ee:	d8e2      	bhi.n	192b6 <__multiply+0x96>
   192f0:	9b01      	ldr	r3, [sp, #4]
   192f2:	f841 c003 	str.w	ip, [r1, r3]
   192f6:	9b03      	ldr	r3, [sp, #12]
   192f8:	3204      	adds	r2, #4
   192fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   192fe:	f1b9 0f00 	cmp.w	r9, #0
   19302:	d020      	beq.n	19346 <__multiply+0x126>
   19304:	680b      	ldr	r3, [r1, #0]
   19306:	f104 0c14 	add.w	ip, r4, #20
   1930a:	468e      	mov	lr, r1
   1930c:	f04f 0a00 	mov.w	sl, #0
   19310:	f8bc 5000 	ldrh.w	r5, [ip]
   19314:	b29b      	uxth	r3, r3
   19316:	f8be b002 	ldrh.w	fp, [lr, #2]
   1931a:	fb09 b505 	mla	r5, r9, r5, fp
   1931e:	44aa      	add	sl, r5
   19320:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   19324:	f84e 3b04 	str.w	r3, [lr], #4
   19328:	f85c 3b04 	ldr.w	r3, [ip], #4
   1932c:	f8be 5000 	ldrh.w	r5, [lr]
   19330:	0c1b      	lsrs	r3, r3, #16
   19332:	4567      	cmp	r7, ip
   19334:	fb09 5303 	mla	r3, r9, r3, r5
   19338:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   1933c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   19340:	d8e6      	bhi.n	19310 <__multiply+0xf0>
   19342:	9d01      	ldr	r5, [sp, #4]
   19344:	514b      	str	r3, [r1, r5]
   19346:	3104      	adds	r1, #4
   19348:	e79e      	b.n	19288 <__multiply+0x68>
   1934a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1934e:	2b00      	cmp	r3, #0
   19350:	d1a0      	bne.n	19294 <__multiply+0x74>
   19352:	3e01      	subs	r6, #1
   19354:	e79c      	b.n	19290 <__multiply+0x70>

00019356 <__lshift>:
   19356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1935a:	460c      	mov	r4, r1
   1935c:	4607      	mov	r7, r0
   1935e:	4691      	mov	r9, r2
   19360:	ea4f 1a62 	mov.w	sl, r2, asr #5
   19364:	6923      	ldr	r3, [r4, #16]
   19366:	6849      	ldr	r1, [r1, #4]
   19368:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1936c:	68a3      	ldr	r3, [r4, #8]
   1936e:	f108 0601 	add.w	r6, r8, #1
   19372:	42b3      	cmp	r3, r6
   19374:	db3f      	blt.n	193f6 <__lshift+0xa0>
   19376:	4638      	mov	r0, r7
   19378:	f7ff fe71 	bl	1905e <_Balloc>
   1937c:	2300      	movs	r3, #0
   1937e:	4605      	mov	r5, r0
   19380:	f100 0114 	add.w	r1, r0, #20
   19384:	f100 0210 	add.w	r2, r0, #16
   19388:	4618      	mov	r0, r3
   1938a:	4553      	cmp	r3, sl
   1938c:	db36      	blt.n	193fc <__lshift+0xa6>
   1938e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   19392:	f104 0314 	add.w	r3, r4, #20
   19396:	6920      	ldr	r0, [r4, #16]
   19398:	f019 091f 	ands.w	r9, r9, #31
   1939c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   193a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   193a4:	d02e      	beq.n	19404 <__lshift+0xae>
   193a6:	f1c9 0e20 	rsb	lr, r9, #32
   193aa:	468a      	mov	sl, r1
   193ac:	2200      	movs	r2, #0
   193ae:	6818      	ldr	r0, [r3, #0]
   193b0:	fa00 f009 	lsl.w	r0, r0, r9
   193b4:	4302      	orrs	r2, r0
   193b6:	f84a 2b04 	str.w	r2, [sl], #4
   193ba:	f853 2b04 	ldr.w	r2, [r3], #4
   193be:	459c      	cmp	ip, r3
   193c0:	fa22 f20e 	lsr.w	r2, r2, lr
   193c4:	d8f3      	bhi.n	193ae <__lshift+0x58>
   193c6:	ebac 0304 	sub.w	r3, ip, r4
   193ca:	f104 0015 	add.w	r0, r4, #21
   193ce:	3b15      	subs	r3, #21
   193d0:	f023 0303 	bic.w	r3, r3, #3
   193d4:	3304      	adds	r3, #4
   193d6:	4560      	cmp	r0, ip
   193d8:	bf88      	it	hi
   193da:	2304      	movhi	r3, #4
   193dc:	50ca      	str	r2, [r1, r3]
   193de:	b10a      	cbz	r2, 193e4 <__lshift+0x8e>
   193e0:	f108 0602 	add.w	r6, r8, #2
   193e4:	3e01      	subs	r6, #1
   193e6:	4638      	mov	r0, r7
   193e8:	4621      	mov	r1, r4
   193ea:	612e      	str	r6, [r5, #16]
   193ec:	f7ff fe6b 	bl	190c6 <_Bfree>
   193f0:	4628      	mov	r0, r5
   193f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   193f6:	3101      	adds	r1, #1
   193f8:	005b      	lsls	r3, r3, #1
   193fa:	e7ba      	b.n	19372 <__lshift+0x1c>
   193fc:	3301      	adds	r3, #1
   193fe:	f842 0f04 	str.w	r0, [r2, #4]!
   19402:	e7c2      	b.n	1938a <__lshift+0x34>
   19404:	3904      	subs	r1, #4
   19406:	f853 2b04 	ldr.w	r2, [r3], #4
   1940a:	459c      	cmp	ip, r3
   1940c:	f841 2f04 	str.w	r2, [r1, #4]!
   19410:	d8f9      	bhi.n	19406 <__lshift+0xb0>
   19412:	e7e7      	b.n	193e4 <__lshift+0x8e>

00019414 <__mcmp>:
   19414:	4603      	mov	r3, r0
   19416:	690a      	ldr	r2, [r1, #16]
   19418:	6900      	ldr	r0, [r0, #16]
   1941a:	1a80      	subs	r0, r0, r2
   1941c:	b530      	push	{r4, r5, lr}
   1941e:	d10d      	bne.n	1943c <__mcmp+0x28>
   19420:	3314      	adds	r3, #20
   19422:	3114      	adds	r1, #20
   19424:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   19428:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1942c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   19430:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   19434:	4295      	cmp	r5, r2
   19436:	d002      	beq.n	1943e <__mcmp+0x2a>
   19438:	d304      	bcc.n	19444 <__mcmp+0x30>
   1943a:	2001      	movs	r0, #1
   1943c:	bd30      	pop	{r4, r5, pc}
   1943e:	42a3      	cmp	r3, r4
   19440:	d3f4      	bcc.n	1942c <__mcmp+0x18>
   19442:	e7fb      	b.n	1943c <__mcmp+0x28>
   19444:	f04f 30ff 	mov.w	r0, #4294967295
   19448:	e7f8      	b.n	1943c <__mcmp+0x28>

0001944a <__mdiff>:
   1944a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1944e:	460c      	mov	r4, r1
   19450:	4606      	mov	r6, r0
   19452:	4611      	mov	r1, r2
   19454:	4692      	mov	sl, r2
   19456:	4620      	mov	r0, r4
   19458:	f7ff ffdc 	bl	19414 <__mcmp>
   1945c:	1e05      	subs	r5, r0, #0
   1945e:	d108      	bne.n	19472 <__mdiff+0x28>
   19460:	4629      	mov	r1, r5
   19462:	4630      	mov	r0, r6
   19464:	f7ff fdfb 	bl	1905e <_Balloc>
   19468:	2301      	movs	r3, #1
   1946a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1946e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19472:	bfa3      	ittte	ge
   19474:	4653      	movge	r3, sl
   19476:	46a2      	movge	sl, r4
   19478:	2500      	movge	r5, #0
   1947a:	2501      	movlt	r5, #1
   1947c:	bfa8      	it	ge
   1947e:	461c      	movge	r4, r3
   19480:	f8da 1004 	ldr.w	r1, [sl, #4]
   19484:	4630      	mov	r0, r6
   19486:	f7ff fdea 	bl	1905e <_Balloc>
   1948a:	f104 0914 	add.w	r9, r4, #20
   1948e:	f8da 7010 	ldr.w	r7, [sl, #16]
   19492:	f100 0814 	add.w	r8, r0, #20
   19496:	6926      	ldr	r6, [r4, #16]
   19498:	f10a 0210 	add.w	r2, sl, #16
   1949c:	60c5      	str	r5, [r0, #12]
   1949e:	f10a 0514 	add.w	r5, sl, #20
   194a2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   194a6:	46c2      	mov	sl, r8
   194a8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   194ac:	f04f 0c00 	mov.w	ip, #0
   194b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   194b4:	f859 3b04 	ldr.w	r3, [r9], #4
   194b8:	fa1f f18b 	uxth.w	r1, fp
   194bc:	454e      	cmp	r6, r9
   194be:	4461      	add	r1, ip
   194c0:	fa1f fc83 	uxth.w	ip, r3
   194c4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   194c8:	eba1 010c 	sub.w	r1, r1, ip
   194cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   194d0:	eb03 4321 	add.w	r3, r3, r1, asr #16
   194d4:	b289      	uxth	r1, r1
   194d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   194da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   194de:	f84a 3b04 	str.w	r3, [sl], #4
   194e2:	d8e5      	bhi.n	194b0 <__mdiff+0x66>
   194e4:	1b33      	subs	r3, r6, r4
   194e6:	3415      	adds	r4, #21
   194e8:	3b15      	subs	r3, #21
   194ea:	f023 0303 	bic.w	r3, r3, #3
   194ee:	3304      	adds	r3, #4
   194f0:	42a6      	cmp	r6, r4
   194f2:	bf38      	it	cc
   194f4:	2304      	movcc	r3, #4
   194f6:	441d      	add	r5, r3
   194f8:	4443      	add	r3, r8
   194fa:	462c      	mov	r4, r5
   194fc:	461e      	mov	r6, r3
   194fe:	4574      	cmp	r4, lr
   19500:	d30e      	bcc.n	19520 <__mdiff+0xd6>
   19502:	f10e 0203 	add.w	r2, lr, #3
   19506:	1b52      	subs	r2, r2, r5
   19508:	3d03      	subs	r5, #3
   1950a:	f022 0203 	bic.w	r2, r2, #3
   1950e:	45ae      	cmp	lr, r5
   19510:	bf38      	it	cc
   19512:	2200      	movcc	r2, #0
   19514:	441a      	add	r2, r3
   19516:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1951a:	b18b      	cbz	r3, 19540 <__mdiff+0xf6>
   1951c:	6107      	str	r7, [r0, #16]
   1951e:	e7a6      	b.n	1946e <__mdiff+0x24>
   19520:	f854 8b04 	ldr.w	r8, [r4], #4
   19524:	fa1f f288 	uxth.w	r2, r8
   19528:	4462      	add	r2, ip
   1952a:	1411      	asrs	r1, r2, #16
   1952c:	b292      	uxth	r2, r2
   1952e:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   19532:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   19536:	ea4f 4c21 	mov.w	ip, r1, asr #16
   1953a:	f846 2b04 	str.w	r2, [r6], #4
   1953e:	e7de      	b.n	194fe <__mdiff+0xb4>
   19540:	3f01      	subs	r7, #1
   19542:	e7e8      	b.n	19516 <__mdiff+0xcc>

00019544 <__d2b>:
   19544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19548:	461c      	mov	r4, r3
   1954a:	2101      	movs	r1, #1
   1954c:	4690      	mov	r8, r2
   1954e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   19552:	f7ff fd84 	bl	1905e <_Balloc>
   19556:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1955a:	f3c4 540a 	ubfx	r4, r4, #20, #11
   1955e:	4607      	mov	r7, r0
   19560:	bb2c      	cbnz	r4, 195ae <__d2b+0x6a>
   19562:	9301      	str	r3, [sp, #4]
   19564:	f1b8 0300 	subs.w	r3, r8, #0
   19568:	d026      	beq.n	195b8 <__d2b+0x74>
   1956a:	4668      	mov	r0, sp
   1956c:	9300      	str	r3, [sp, #0]
   1956e:	f7ff fe20 	bl	191b2 <__lo0bits>
   19572:	9900      	ldr	r1, [sp, #0]
   19574:	b1f0      	cbz	r0, 195b4 <__d2b+0x70>
   19576:	9a01      	ldr	r2, [sp, #4]
   19578:	f1c0 0320 	rsb	r3, r0, #32
   1957c:	fa02 f303 	lsl.w	r3, r2, r3
   19580:	40c2      	lsrs	r2, r0
   19582:	430b      	orrs	r3, r1
   19584:	9201      	str	r2, [sp, #4]
   19586:	617b      	str	r3, [r7, #20]
   19588:	9b01      	ldr	r3, [sp, #4]
   1958a:	2b00      	cmp	r3, #0
   1958c:	61bb      	str	r3, [r7, #24]
   1958e:	bf14      	ite	ne
   19590:	2102      	movne	r1, #2
   19592:	2101      	moveq	r1, #1
   19594:	6139      	str	r1, [r7, #16]
   19596:	b1c4      	cbz	r4, 195ca <__d2b+0x86>
   19598:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   1959c:	4404      	add	r4, r0
   1959e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   195a2:	6034      	str	r4, [r6, #0]
   195a4:	6028      	str	r0, [r5, #0]
   195a6:	4638      	mov	r0, r7
   195a8:	b002      	add	sp, #8
   195aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   195b2:	e7d6      	b.n	19562 <__d2b+0x1e>
   195b4:	6179      	str	r1, [r7, #20]
   195b6:	e7e7      	b.n	19588 <__d2b+0x44>
   195b8:	a801      	add	r0, sp, #4
   195ba:	f7ff fdfa 	bl	191b2 <__lo0bits>
   195be:	9b01      	ldr	r3, [sp, #4]
   195c0:	2101      	movs	r1, #1
   195c2:	3020      	adds	r0, #32
   195c4:	617b      	str	r3, [r7, #20]
   195c6:	6139      	str	r1, [r7, #16]
   195c8:	e7e5      	b.n	19596 <__d2b+0x52>
   195ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   195ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   195d2:	6030      	str	r0, [r6, #0]
   195d4:	6918      	ldr	r0, [r3, #16]
   195d6:	f7ff fdcc 	bl	19172 <__hi0bits>
   195da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   195de:	6029      	str	r1, [r5, #0]
   195e0:	e7e1      	b.n	195a6 <__d2b+0x62>

000195e2 <_calloc_r>:
   195e2:	b538      	push	{r3, r4, r5, lr}
   195e4:	fb02 f501 	mul.w	r5, r2, r1
   195e8:	4629      	mov	r1, r5
   195ea:	f7f9 faed 	bl	12bc8 <_malloc_r>
   195ee:	4604      	mov	r4, r0
   195f0:	b118      	cbz	r0, 195fa <_calloc_r+0x18>
   195f2:	462a      	mov	r2, r5
   195f4:	2100      	movs	r1, #0
   195f6:	f7ff fa89 	bl	18b0c <memset>
   195fa:	4620      	mov	r0, r4
   195fc:	bd38      	pop	{r3, r4, r5, pc}

000195fe <__sread>:
   195fe:	b510      	push	{r4, lr}
   19600:	460c      	mov	r4, r1
   19602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19606:	f7fa fbd9 	bl	13dbc <_read_r>
   1960a:	2800      	cmp	r0, #0
   1960c:	bfab      	itete	ge
   1960e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   19610:	89a3      	ldrhlt	r3, [r4, #12]
   19612:	181b      	addge	r3, r3, r0
   19614:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   19618:	bfac      	ite	ge
   1961a:	6563      	strge	r3, [r4, #84]	; 0x54
   1961c:	81a3      	strhlt	r3, [r4, #12]
   1961e:	bd10      	pop	{r4, pc}

00019620 <__swrite>:
   19620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19624:	461f      	mov	r7, r3
   19626:	898b      	ldrh	r3, [r1, #12]
   19628:	4605      	mov	r5, r0
   1962a:	460c      	mov	r4, r1
   1962c:	05db      	lsls	r3, r3, #23
   1962e:	4616      	mov	r6, r2
   19630:	d505      	bpl.n	1963e <__swrite+0x1e>
   19632:	2302      	movs	r3, #2
   19634:	2200      	movs	r2, #0
   19636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1963a:	f7fa fbad 	bl	13d98 <_lseek_r>
   1963e:	89a3      	ldrh	r3, [r4, #12]
   19640:	4632      	mov	r2, r6
   19642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   19646:	4628      	mov	r0, r5
   19648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1964c:	81a3      	strh	r3, [r4, #12]
   1964e:	463b      	mov	r3, r7
   19650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19654:	f7fa bb5c 	b.w	13d10 <_write_r>

00019658 <__sseek>:
   19658:	b510      	push	{r4, lr}
   1965a:	460c      	mov	r4, r1
   1965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19660:	f7fa fb9a 	bl	13d98 <_lseek_r>
   19664:	1c43      	adds	r3, r0, #1
   19666:	89a3      	ldrh	r3, [r4, #12]
   19668:	bf15      	itete	ne
   1966a:	6560      	strne	r0, [r4, #84]	; 0x54
   1966c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   19670:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   19674:	81a3      	strheq	r3, [r4, #12]
   19676:	bf18      	it	ne
   19678:	81a3      	strhne	r3, [r4, #12]
   1967a:	bd10      	pop	{r4, pc}

0001967c <__sclose>:
   1967c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19680:	f7fa bb58 	b.w	13d34 <_close_r>

00019684 <__ascii_mbtowc>:
   19684:	b082      	sub	sp, #8
   19686:	b901      	cbnz	r1, 1968a <__ascii_mbtowc+0x6>
   19688:	a901      	add	r1, sp, #4
   1968a:	b142      	cbz	r2, 1969e <__ascii_mbtowc+0x1a>
   1968c:	b14b      	cbz	r3, 196a2 <__ascii_mbtowc+0x1e>
   1968e:	7813      	ldrb	r3, [r2, #0]
   19690:	600b      	str	r3, [r1, #0]
   19692:	7812      	ldrb	r2, [r2, #0]
   19694:	1e10      	subs	r0, r2, #0
   19696:	bf18      	it	ne
   19698:	2001      	movne	r0, #1
   1969a:	b002      	add	sp, #8
   1969c:	4770      	bx	lr
   1969e:	4610      	mov	r0, r2
   196a0:	e7fb      	b.n	1969a <__ascii_mbtowc+0x16>
   196a2:	f06f 0001 	mvn.w	r0, #1
   196a6:	e7f8      	b.n	1969a <__ascii_mbtowc+0x16>

000196a8 <__ascii_wctomb>:
   196a8:	4603      	mov	r3, r0
   196aa:	4608      	mov	r0, r1
   196ac:	b141      	cbz	r1, 196c0 <__ascii_wctomb+0x18>
   196ae:	2aff      	cmp	r2, #255	; 0xff
   196b0:	d904      	bls.n	196bc <__ascii_wctomb+0x14>
   196b2:	228a      	movs	r2, #138	; 0x8a
   196b4:	f04f 30ff 	mov.w	r0, #4294967295
   196b8:	601a      	str	r2, [r3, #0]
   196ba:	4770      	bx	lr
   196bc:	2001      	movs	r0, #1
   196be:	700a      	strb	r2, [r1, #0]
   196c0:	4770      	bx	lr
	...

000196c4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   196c4:	f7ec bbc6 	b.w	5e54 <SystemInit>
